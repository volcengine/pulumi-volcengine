// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vke

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage vke node pool
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vke.NewNodePool(ctx, "vkeTest", &vke.NodePoolArgs{
//				AutoScaling: &vke.NodePoolAutoScalingArgs{
//					Enabled:      pulumi.Bool(true),
//					SubnetPolicy: pulumi.String("ZoneBalance"),
//				},
//				ClusterId: pulumi.String("ccgd6066rsfegs2dkhlog"),
//				KubernetesConfig: &vke.NodePoolKubernetesConfigArgs{
//					Cordon: pulumi.Bool(false),
//					Labels: vke.NodePoolKubernetesConfigLabelArray{
//						&vke.NodePoolKubernetesConfigLabelArgs{
//							Key:   pulumi.String("aa"),
//							Value: pulumi.String("bb"),
//						},
//						&vke.NodePoolKubernetesConfigLabelArgs{
//							Key:   pulumi.String("cccc"),
//							Value: pulumi.String("dddd"),
//						},
//					},
//				},
//				NodeConfig: &vke.NodePoolNodeConfigArgs{
//					DataVolumes: vke.NodePoolNodeConfigDataVolumeArray{
//						&vke.NodePoolNodeConfigDataVolumeArgs{
//							Size: pulumi.Int(60),
//							Type: pulumi.String("ESSD_PL0"),
//						},
//					},
//					EcsTags: vke.NodePoolNodeConfigEcsTagArray{
//						&vke.NodePoolNodeConfigEcsTagArgs{
//							Key:   pulumi.String("ecs_k1"),
//							Value: pulumi.String("ecs_v1"),
//						},
//					},
//					InstanceChargeType: pulumi.String("PostPaid"),
//					InstanceTypeIds: pulumi.StringArray{
//						pulumi.String("ecs.g1ie.xlarge"),
//					},
//					Period: pulumi.Int(1),
//					Security: &vke.NodePoolNodeConfigSecurityArgs{
//						Login: &vke.NodePoolNodeConfigSecurityLoginArgs{
//							Password: pulumi.String("UHdkMTIzNDU2"),
//						},
//						SecurityGroupIds: pulumi.StringArray{
//							pulumi.String("sg-13fbyz0sok3y83n6nu4hv1q10"),
//							pulumi.String("sg-mj1e9tbztgqo5smt1ah8l4bh"),
//						},
//					},
//					SubnetIds: pulumi.StringArray{
//						pulumi.String("subnet-mj1e9jgu96v45smt1a674x3h"),
//					},
//				},
//				Tags: vke.NodePoolTagArray{
//					&vke.NodePoolTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NodePool can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vke/nodePool:NodePool default pcabe57vqtofgrbln3dp0
//
// ```
type NodePool struct {
	pulumi.CustomResourceState

	// The node pool elastic scaling configuration information.
	AutoScaling NodePoolAutoScalingOutput `pulumi:"autoScaling"`
	// The ClientToken of NodePool.
	ClientToken pulumi.StringPtrOutput `pulumi:"clientToken"`
	// The ClusterId of NodePool.
	ClusterId pulumi.StringPtrOutput `pulumi:"clusterId"`
	// The KubernetesConfig of NodeConfig.
	KubernetesConfig NodePoolKubernetesConfigOutput `pulumi:"kubernetesConfig"`
	// The Name of NodePool.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Config of NodePool.
	NodeConfig NodePoolNodeConfigOutput `pulumi:"nodeConfig"`
	// Tags.
	Tags NodePoolTagArrayOutput `pulumi:"tags"`
}

// NewNodePool registers a new resource with the given unique name, arguments, and options.
func NewNodePool(ctx *pulumi.Context,
	name string, args *NodePoolArgs, opts ...pulumi.ResourceOption) (*NodePool, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KubernetesConfig == nil {
		return nil, errors.New("invalid value for required argument 'KubernetesConfig'")
	}
	if args.NodeConfig == nil {
		return nil, errors.New("invalid value for required argument 'NodeConfig'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NodePool
	err := ctx.RegisterResource("volcengine:vke/nodePool:NodePool", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNodePool gets an existing NodePool resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNodePool(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NodePoolState, opts ...pulumi.ResourceOption) (*NodePool, error) {
	var resource NodePool
	err := ctx.ReadResource("volcengine:vke/nodePool:NodePool", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NodePool resources.
type nodePoolState struct {
	// The node pool elastic scaling configuration information.
	AutoScaling *NodePoolAutoScaling `pulumi:"autoScaling"`
	// The ClientToken of NodePool.
	ClientToken *string `pulumi:"clientToken"`
	// The ClusterId of NodePool.
	ClusterId *string `pulumi:"clusterId"`
	// The KubernetesConfig of NodeConfig.
	KubernetesConfig *NodePoolKubernetesConfig `pulumi:"kubernetesConfig"`
	// The Name of NodePool.
	Name *string `pulumi:"name"`
	// The Config of NodePool.
	NodeConfig *NodePoolNodeConfig `pulumi:"nodeConfig"`
	// Tags.
	Tags []NodePoolTag `pulumi:"tags"`
}

type NodePoolState struct {
	// The node pool elastic scaling configuration information.
	AutoScaling NodePoolAutoScalingPtrInput
	// The ClientToken of NodePool.
	ClientToken pulumi.StringPtrInput
	// The ClusterId of NodePool.
	ClusterId pulumi.StringPtrInput
	// The KubernetesConfig of NodeConfig.
	KubernetesConfig NodePoolKubernetesConfigPtrInput
	// The Name of NodePool.
	Name pulumi.StringPtrInput
	// The Config of NodePool.
	NodeConfig NodePoolNodeConfigPtrInput
	// Tags.
	Tags NodePoolTagArrayInput
}

func (NodePoolState) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolState)(nil)).Elem()
}

type nodePoolArgs struct {
	// The node pool elastic scaling configuration information.
	AutoScaling *NodePoolAutoScaling `pulumi:"autoScaling"`
	// The ClientToken of NodePool.
	ClientToken *string `pulumi:"clientToken"`
	// The ClusterId of NodePool.
	ClusterId *string `pulumi:"clusterId"`
	// The KubernetesConfig of NodeConfig.
	KubernetesConfig NodePoolKubernetesConfig `pulumi:"kubernetesConfig"`
	// The Name of NodePool.
	Name *string `pulumi:"name"`
	// The Config of NodePool.
	NodeConfig NodePoolNodeConfig `pulumi:"nodeConfig"`
	// Tags.
	Tags []NodePoolTag `pulumi:"tags"`
}

// The set of arguments for constructing a NodePool resource.
type NodePoolArgs struct {
	// The node pool elastic scaling configuration information.
	AutoScaling NodePoolAutoScalingPtrInput
	// The ClientToken of NodePool.
	ClientToken pulumi.StringPtrInput
	// The ClusterId of NodePool.
	ClusterId pulumi.StringPtrInput
	// The KubernetesConfig of NodeConfig.
	KubernetesConfig NodePoolKubernetesConfigInput
	// The Name of NodePool.
	Name pulumi.StringPtrInput
	// The Config of NodePool.
	NodeConfig NodePoolNodeConfigInput
	// Tags.
	Tags NodePoolTagArrayInput
}

func (NodePoolArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nodePoolArgs)(nil)).Elem()
}

type NodePoolInput interface {
	pulumi.Input

	ToNodePoolOutput() NodePoolOutput
	ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput
}

func (*NodePool) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (i *NodePool) ToNodePoolOutput() NodePoolOutput {
	return i.ToNodePoolOutputWithContext(context.Background())
}

func (i *NodePool) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolOutput)
}

// NodePoolArrayInput is an input type that accepts NodePoolArray and NodePoolArrayOutput values.
// You can construct a concrete instance of `NodePoolArrayInput` via:
//
//	NodePoolArray{ NodePoolArgs{...} }
type NodePoolArrayInput interface {
	pulumi.Input

	ToNodePoolArrayOutput() NodePoolArrayOutput
	ToNodePoolArrayOutputWithContext(context.Context) NodePoolArrayOutput
}

type NodePoolArray []NodePoolInput

func (NodePoolArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (i NodePoolArray) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return i.ToNodePoolArrayOutputWithContext(context.Background())
}

func (i NodePoolArray) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolArrayOutput)
}

// NodePoolMapInput is an input type that accepts NodePoolMap and NodePoolMapOutput values.
// You can construct a concrete instance of `NodePoolMapInput` via:
//
//	NodePoolMap{ "key": NodePoolArgs{...} }
type NodePoolMapInput interface {
	pulumi.Input

	ToNodePoolMapOutput() NodePoolMapOutput
	ToNodePoolMapOutputWithContext(context.Context) NodePoolMapOutput
}

type NodePoolMap map[string]NodePoolInput

func (NodePoolMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (i NodePoolMap) ToNodePoolMapOutput() NodePoolMapOutput {
	return i.ToNodePoolMapOutputWithContext(context.Background())
}

func (i NodePoolMap) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NodePoolMapOutput)
}

type NodePoolOutput struct{ *pulumi.OutputState }

func (NodePoolOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NodePool)(nil)).Elem()
}

func (o NodePoolOutput) ToNodePoolOutput() NodePoolOutput {
	return o
}

func (o NodePoolOutput) ToNodePoolOutputWithContext(ctx context.Context) NodePoolOutput {
	return o
}

// The node pool elastic scaling configuration information.
func (o NodePoolOutput) AutoScaling() NodePoolAutoScalingOutput {
	return o.ApplyT(func(v *NodePool) NodePoolAutoScalingOutput { return v.AutoScaling }).(NodePoolAutoScalingOutput)
}

// The ClientToken of NodePool.
func (o NodePoolOutput) ClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.ClientToken }).(pulumi.StringPtrOutput)
}

// The ClusterId of NodePool.
func (o NodePoolOutput) ClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringPtrOutput { return v.ClusterId }).(pulumi.StringPtrOutput)
}

// The KubernetesConfig of NodeConfig.
func (o NodePoolOutput) KubernetesConfig() NodePoolKubernetesConfigOutput {
	return o.ApplyT(func(v *NodePool) NodePoolKubernetesConfigOutput { return v.KubernetesConfig }).(NodePoolKubernetesConfigOutput)
}

// The Name of NodePool.
func (o NodePoolOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NodePool) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Config of NodePool.
func (o NodePoolOutput) NodeConfig() NodePoolNodeConfigOutput {
	return o.ApplyT(func(v *NodePool) NodePoolNodeConfigOutput { return v.NodeConfig }).(NodePoolNodeConfigOutput)
}

// Tags.
func (o NodePoolOutput) Tags() NodePoolTagArrayOutput {
	return o.ApplyT(func(v *NodePool) NodePoolTagArrayOutput { return v.Tags }).(NodePoolTagArrayOutput)
}

type NodePoolArrayOutput struct{ *pulumi.OutputState }

func (NodePoolArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NodePool)(nil)).Elem()
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutput() NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) ToNodePoolArrayOutputWithContext(ctx context.Context) NodePoolArrayOutput {
	return o
}

func (o NodePoolArrayOutput) Index(i pulumi.IntInput) NodePoolOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].([]*NodePool)[vs[1].(int)]
	}).(NodePoolOutput)
}

type NodePoolMapOutput struct{ *pulumi.OutputState }

func (NodePoolMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NodePool)(nil)).Elem()
}

func (o NodePoolMapOutput) ToNodePoolMapOutput() NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) ToNodePoolMapOutputWithContext(ctx context.Context) NodePoolMapOutput {
	return o
}

func (o NodePoolMapOutput) MapIndex(k pulumi.StringInput) NodePoolOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NodePool {
		return vs[0].(map[string]*NodePool)[vs[1].(string)]
	}).(NodePoolOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolInput)(nil)).Elem(), &NodePool{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolArrayInput)(nil)).Elem(), NodePoolArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NodePoolMapInput)(nil)).Elem(), NodePoolMap{})
	pulumi.RegisterOutputType(NodePoolOutput{})
	pulumi.RegisterOutputType(NodePoolArrayOutput{})
	pulumi.RegisterOutputType(NodePoolMapOutput{})
}
