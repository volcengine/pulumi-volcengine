// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vke

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vke permission
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			// create vpc
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// create security group
//			_, err = vpc.NewSecurityGroup(ctx, "fooSecurityGroup", &vpc.SecurityGroupArgs{
//				SecurityGroupName: pulumi.String("acc-test-security-group"),
//				VpcId:             fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// create vke cluster
//			fooCluster, err := vke.NewCluster(ctx, "fooCluster", &vke.ClusterArgs{
//				Description:             pulumi.String("created by terraform"),
//				ProjectName:             pulumi.String("default"),
//				DeleteProtectionEnabled: pulumi.Bool(false),
//				ClusterConfig: &vke.ClusterClusterConfigArgs{
//					SubnetIds: pulumi.StringArray{
//						fooSubnet.ID(),
//					},
//					ApiServerPublicAccessEnabled: pulumi.Bool(true),
//					ApiServerPublicAccessConfig: &vke.ClusterClusterConfigApiServerPublicAccessConfigArgs{
//						PublicAccessNetworkConfig: &vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs{
//							BillingType: pulumi.String("PostPaidByBandwidth"),
//							Bandwidth:   pulumi.Int(1),
//						},
//					},
//					ResourcePublicAccessDefaultEnabled: pulumi.Bool(true),
//				},
//				PodsConfig: &vke.ClusterPodsConfigArgs{
//					PodNetworkMode: pulumi.String("VpcCniShared"),
//					VpcCniConfig: &vke.ClusterPodsConfigVpcCniConfigArgs{
//						SubnetIds: pulumi.StringArray{
//							fooSubnet.ID(),
//						},
//					},
//				},
//				ServicesConfig: &vke.ClusterServicesConfigArgs{
//					ServiceCidrsv4s: pulumi.StringArray{
//						pulumi.String("172.30.0.0/18"),
//					},
//				},
//				Tags: vke.ClusterTagArray{
//					&vke.ClusterTagArgs{
//						Key:   pulumi.String("tf-k1"),
//						Value: pulumi.String("tf-v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vke.NewPermission(ctx, "fooPermission", &vke.PermissionArgs{
//				RoleName:    pulumi.String("vke:visitor"),
//				GranteeId:   pulumi.Int(385500000),
//				GranteeType: pulumi.String("User"),
//				RoleDomain:  pulumi.String("cluster"),
//				ClusterId:   fooCluster.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VkePermission can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vke/permission:Permission default resource_id
// ```
type Permission struct {
	pulumi.CustomResourceState

	// The authorized time of the RBAC Permission.
	AuthorizedAt pulumi.StringOutput `pulumi:"authorizedAt"`
	// The ID of the Authorizer.
	AuthorizerId pulumi.IntOutput `pulumi:"authorizerId"`
	// The name of the Authorizer.
	AuthorizerName pulumi.StringOutput `pulumi:"authorizerName"`
	// The type of the Authorizer.
	AuthorizerType pulumi.StringOutput `pulumi:"authorizerType"`
	// The cluster ID that needs to be authorized to IAM users or roles.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The granted time of the RBAC Permission.
	GrantedAt pulumi.StringOutput `pulumi:"grantedAt"`
	// The ID of the grantee.
	GranteeId pulumi.IntOutput `pulumi:"granteeId"`
	// The type of the grantee. Valid values: `User`.
	GranteeType pulumi.StringOutput `pulumi:"granteeType"`
	// Whether the RBAC role is a custom role. Default is false.
	IsCustomRole pulumi.BoolOutput `pulumi:"isCustomRole"`
	// The name of the Kube Role Binding.
	KubeRoleBindingName pulumi.StringOutput `pulumi:"kubeRoleBindingName"`
	// The message of the RBAC Permission.
	Message pulumi.StringOutput `pulumi:"message"`
	// The namespace that needs to be authorized to IAM users or roles.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The revoked time of the RBAC Permission.
	RevokedAt pulumi.StringOutput `pulumi:"revokedAt"`
	// The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `allClusters`.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RoleDomain pulumi.StringOutput `pulumi:"roleDomain"`
	// The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
	RoleName pulumi.StringOutput `pulumi:"roleName"`
	// The status of the RBAC Permission.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOption) (*Permission, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GranteeId == nil {
		return nil, errors.New("invalid value for required argument 'GranteeId'")
	}
	if args.GranteeType == nil {
		return nil, errors.New("invalid value for required argument 'GranteeType'")
	}
	if args.RoleDomain == nil {
		return nil, errors.New("invalid value for required argument 'RoleDomain'")
	}
	if args.RoleName == nil {
		return nil, errors.New("invalid value for required argument 'RoleName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Permission
	err := ctx.RegisterResource("volcengine:vke/permission:Permission", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionState, opts ...pulumi.ResourceOption) (*Permission, error) {
	var resource Permission
	err := ctx.ReadResource("volcengine:vke/permission:Permission", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Permission resources.
type permissionState struct {
	// The authorized time of the RBAC Permission.
	AuthorizedAt *string `pulumi:"authorizedAt"`
	// The ID of the Authorizer.
	AuthorizerId *int `pulumi:"authorizerId"`
	// The name of the Authorizer.
	AuthorizerName *string `pulumi:"authorizerName"`
	// The type of the Authorizer.
	AuthorizerType *string `pulumi:"authorizerType"`
	// The cluster ID that needs to be authorized to IAM users or roles.
	ClusterId *string `pulumi:"clusterId"`
	// The granted time of the RBAC Permission.
	GrantedAt *string `pulumi:"grantedAt"`
	// The ID of the grantee.
	GranteeId *int `pulumi:"granteeId"`
	// The type of the grantee. Valid values: `User`.
	GranteeType *string `pulumi:"granteeType"`
	// Whether the RBAC role is a custom role. Default is false.
	IsCustomRole *bool `pulumi:"isCustomRole"`
	// The name of the Kube Role Binding.
	KubeRoleBindingName *string `pulumi:"kubeRoleBindingName"`
	// The message of the RBAC Permission.
	Message *string `pulumi:"message"`
	// The namespace that needs to be authorized to IAM users or roles.
	Namespace *string `pulumi:"namespace"`
	// The revoked time of the RBAC Permission.
	RevokedAt *string `pulumi:"revokedAt"`
	// The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `allClusters`.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RoleDomain *string `pulumi:"roleDomain"`
	// The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
	RoleName *string `pulumi:"roleName"`
	// The status of the RBAC Permission.
	Status *string `pulumi:"status"`
}

type PermissionState struct {
	// The authorized time of the RBAC Permission.
	AuthorizedAt pulumi.StringPtrInput
	// The ID of the Authorizer.
	AuthorizerId pulumi.IntPtrInput
	// The name of the Authorizer.
	AuthorizerName pulumi.StringPtrInput
	// The type of the Authorizer.
	AuthorizerType pulumi.StringPtrInput
	// The cluster ID that needs to be authorized to IAM users or roles.
	ClusterId pulumi.StringPtrInput
	// The granted time of the RBAC Permission.
	GrantedAt pulumi.StringPtrInput
	// The ID of the grantee.
	GranteeId pulumi.IntPtrInput
	// The type of the grantee. Valid values: `User`.
	GranteeType pulumi.StringPtrInput
	// Whether the RBAC role is a custom role. Default is false.
	IsCustomRole pulumi.BoolPtrInput
	// The name of the Kube Role Binding.
	KubeRoleBindingName pulumi.StringPtrInput
	// The message of the RBAC Permission.
	Message pulumi.StringPtrInput
	// The namespace that needs to be authorized to IAM users or roles.
	Namespace pulumi.StringPtrInput
	// The revoked time of the RBAC Permission.
	RevokedAt pulumi.StringPtrInput
	// The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `allClusters`.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RoleDomain pulumi.StringPtrInput
	// The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
	RoleName pulumi.StringPtrInput
	// The status of the RBAC Permission.
	Status pulumi.StringPtrInput
}

func (PermissionState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionState)(nil)).Elem()
}

type permissionArgs struct {
	// The cluster ID that needs to be authorized to IAM users or roles.
	ClusterId *string `pulumi:"clusterId"`
	// The ID of the grantee.
	GranteeId int `pulumi:"granteeId"`
	// The type of the grantee. Valid values: `User`.
	GranteeType string `pulumi:"granteeType"`
	// Whether the RBAC role is a custom role. Default is false.
	IsCustomRole *bool `pulumi:"isCustomRole"`
	// The namespace that needs to be authorized to IAM users or roles.
	Namespace *string `pulumi:"namespace"`
	// The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `allClusters`.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RoleDomain string `pulumi:"roleDomain"`
	// The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
	RoleName string `pulumi:"roleName"`
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// The cluster ID that needs to be authorized to IAM users or roles.
	ClusterId pulumi.StringPtrInput
	// The ID of the grantee.
	GranteeId pulumi.IntInput
	// The type of the grantee. Valid values: `User`.
	GranteeType pulumi.StringInput
	// Whether the RBAC role is a custom role. Default is false.
	IsCustomRole pulumi.BoolPtrInput
	// The namespace that needs to be authorized to IAM users or roles.
	Namespace pulumi.StringPtrInput
	// The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `allClusters`.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RoleDomain pulumi.StringInput
	// The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
	RoleName pulumi.StringInput
}

func (PermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionArgs)(nil)).Elem()
}

type PermissionInput interface {
	pulumi.Input

	ToPermissionOutput() PermissionOutput
	ToPermissionOutputWithContext(ctx context.Context) PermissionOutput
}

func (*Permission) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (i *Permission) ToPermissionOutput() PermissionOutput {
	return i.ToPermissionOutputWithContext(context.Background())
}

func (i *Permission) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionOutput)
}

// PermissionArrayInput is an input type that accepts PermissionArray and PermissionArrayOutput values.
// You can construct a concrete instance of `PermissionArrayInput` via:
//
//	PermissionArray{ PermissionArgs{...} }
type PermissionArrayInput interface {
	pulumi.Input

	ToPermissionArrayOutput() PermissionArrayOutput
	ToPermissionArrayOutputWithContext(context.Context) PermissionArrayOutput
}

type PermissionArray []PermissionInput

func (PermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (i PermissionArray) ToPermissionArrayOutput() PermissionArrayOutput {
	return i.ToPermissionArrayOutputWithContext(context.Background())
}

func (i PermissionArray) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionArrayOutput)
}

// PermissionMapInput is an input type that accepts PermissionMap and PermissionMapOutput values.
// You can construct a concrete instance of `PermissionMapInput` via:
//
//	PermissionMap{ "key": PermissionArgs{...} }
type PermissionMapInput interface {
	pulumi.Input

	ToPermissionMapOutput() PermissionMapOutput
	ToPermissionMapOutputWithContext(context.Context) PermissionMapOutput
}

type PermissionMap map[string]PermissionInput

func (PermissionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (i PermissionMap) ToPermissionMapOutput() PermissionMapOutput {
	return i.ToPermissionMapOutputWithContext(context.Background())
}

func (i PermissionMap) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionMapOutput)
}

type PermissionOutput struct{ *pulumi.OutputState }

func (PermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Permission)(nil)).Elem()
}

func (o PermissionOutput) ToPermissionOutput() PermissionOutput {
	return o
}

func (o PermissionOutput) ToPermissionOutputWithContext(ctx context.Context) PermissionOutput {
	return o
}

// The authorized time of the RBAC Permission.
func (o PermissionOutput) AuthorizedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.AuthorizedAt }).(pulumi.StringOutput)
}

// The ID of the Authorizer.
func (o PermissionOutput) AuthorizerId() pulumi.IntOutput {
	return o.ApplyT(func(v *Permission) pulumi.IntOutput { return v.AuthorizerId }).(pulumi.IntOutput)
}

// The name of the Authorizer.
func (o PermissionOutput) AuthorizerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.AuthorizerName }).(pulumi.StringOutput)
}

// The type of the Authorizer.
func (o PermissionOutput) AuthorizerType() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.AuthorizerType }).(pulumi.StringOutput)
}

// The cluster ID that needs to be authorized to IAM users or roles.
func (o PermissionOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The granted time of the RBAC Permission.
func (o PermissionOutput) GrantedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.GrantedAt }).(pulumi.StringOutput)
}

// The ID of the grantee.
func (o PermissionOutput) GranteeId() pulumi.IntOutput {
	return o.ApplyT(func(v *Permission) pulumi.IntOutput { return v.GranteeId }).(pulumi.IntOutput)
}

// The type of the grantee. Valid values: `User`.
func (o PermissionOutput) GranteeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.GranteeType }).(pulumi.StringOutput)
}

// Whether the RBAC role is a custom role. Default is false.
func (o PermissionOutput) IsCustomRole() pulumi.BoolOutput {
	return o.ApplyT(func(v *Permission) pulumi.BoolOutput { return v.IsCustomRole }).(pulumi.BoolOutput)
}

// The name of the Kube Role Binding.
func (o PermissionOutput) KubeRoleBindingName() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.KubeRoleBindingName }).(pulumi.StringOutput)
}

// The message of the RBAC Permission.
func (o PermissionOutput) Message() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Message }).(pulumi.StringOutput)
}

// The namespace that needs to be authorized to IAM users or roles.
func (o PermissionOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Namespace }).(pulumi.StringOutput)
}

// The revoked time of the RBAC Permission.
func (o PermissionOutput) RevokedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.RevokedAt }).(pulumi.StringOutput)
}

// The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `allClusters`.
// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o PermissionOutput) RoleDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.RoleDomain }).(pulumi.StringOutput)
}

// The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
func (o PermissionOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.RoleName }).(pulumi.StringOutput)
}

// The status of the RBAC Permission.
func (o PermissionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Permission) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type PermissionArrayOutput struct{ *pulumi.OutputState }

func (PermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Permission)(nil)).Elem()
}

func (o PermissionArrayOutput) ToPermissionArrayOutput() PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) ToPermissionArrayOutputWithContext(ctx context.Context) PermissionArrayOutput {
	return o
}

func (o PermissionArrayOutput) Index(i pulumi.IntInput) PermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].([]*Permission)[vs[1].(int)]
	}).(PermissionOutput)
}

type PermissionMapOutput struct{ *pulumi.OutputState }

func (PermissionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Permission)(nil)).Elem()
}

func (o PermissionMapOutput) ToPermissionMapOutput() PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) ToPermissionMapOutputWithContext(ctx context.Context) PermissionMapOutput {
	return o
}

func (o PermissionMapOutput) MapIndex(k pulumi.StringInput) PermissionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Permission {
		return vs[0].(map[string]*Permission)[vs[1].(string)]
	}).(PermissionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionInput)(nil)).Elem(), &Permission{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionArrayInput)(nil)).Elem(), PermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionMapInput)(nil)).Elem(), PermissionMap{})
	pulumi.RegisterOutputType(PermissionOutput{})
	pulumi.RegisterOutputType(PermissionArrayOutput{})
	pulumi.RegisterOutputType(PermissionMapOutput{})
}
