// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vke

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of vke support addons
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vke.SupportAddons(ctx, &vke.SupportAddonsArgs{
//				Categories: []string{
//					"Monitor",
//				},
//				Name: pulumi.StringRef("metrics-server"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func SupportAddons(ctx *pulumi.Context, args *SupportAddonsArgs, opts ...pulumi.InvokeOption) (*SupportAddonsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv SupportAddonsResult
	err := ctx.Invoke("volcengine:vke/supportAddons:SupportAddons", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking SupportAddons.
type SupportAddonsArgs struct {
	// The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
	Categories []string `pulumi:"categories"`
	// The deploy model, the value is `Managed` or `Unmanaged`.
	DeployModes []string `pulumi:"deployModes"`
	// The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deployMode is `Unmanaged`.
	DeployNodeTypes []string `pulumi:"deployNodeTypes"`
	// A list of Kubernetes Versions.
	KubernetesVersions []string `pulumi:"kubernetesVersions"`
	// The name of the addon.
	Name *string `pulumi:"name"`
	// The necessaries of addons, the value is `Required` or `Recommended` or `OnDemand`.
	Necessaries []string `pulumi:"necessaries"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
	PodNetworkModes []string `pulumi:"podNetworkModes"`
}

// A collection of values returned by SupportAddons.
type SupportAddonsResult struct {
	// The collection of addons query.
	Addons      []SupportAddonsAddon `pulumi:"addons"`
	Categories  []string             `pulumi:"categories"`
	DeployModes []string             `pulumi:"deployModes"`
	// The deploy node types.
	DeployNodeTypes []string `pulumi:"deployNodeTypes"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string   `pulumi:"id"`
	KubernetesVersions []string `pulumi:"kubernetesVersions"`
	// The name of addon.
	Name        *string  `pulumi:"name"`
	Necessaries []string `pulumi:"necessaries"`
	OutputFile  *string  `pulumi:"outputFile"`
	// The network modes of pod.
	PodNetworkModes []string `pulumi:"podNetworkModes"`
	// The total count of addons query.
	TotalCount int `pulumi:"totalCount"`
}

func SupportAddonsOutput(ctx *pulumi.Context, args SupportAddonsOutputArgs, opts ...pulumi.InvokeOption) SupportAddonsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (SupportAddonsResult, error) {
			args := v.(SupportAddonsArgs)
			r, err := SupportAddons(ctx, &args, opts...)
			var s SupportAddonsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(SupportAddonsResultOutput)
}

// A collection of arguments for invoking SupportAddons.
type SupportAddonsOutputArgs struct {
	// The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
	Categories pulumi.StringArrayInput `pulumi:"categories"`
	// The deploy model, the value is `Managed` or `Unmanaged`.
	DeployModes pulumi.StringArrayInput `pulumi:"deployModes"`
	// The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deployMode is `Unmanaged`.
	DeployNodeTypes pulumi.StringArrayInput `pulumi:"deployNodeTypes"`
	// A list of Kubernetes Versions.
	KubernetesVersions pulumi.StringArrayInput `pulumi:"kubernetesVersions"`
	// The name of the addon.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The necessaries of addons, the value is `Required` or `Recommended` or `OnDemand`.
	Necessaries pulumi.StringArrayInput `pulumi:"necessaries"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
	PodNetworkModes pulumi.StringArrayInput `pulumi:"podNetworkModes"`
}

func (SupportAddonsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportAddonsArgs)(nil)).Elem()
}

// A collection of values returned by SupportAddons.
type SupportAddonsResultOutput struct{ *pulumi.OutputState }

func (SupportAddonsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SupportAddonsResult)(nil)).Elem()
}

func (o SupportAddonsResultOutput) ToSupportAddonsResultOutput() SupportAddonsResultOutput {
	return o
}

func (o SupportAddonsResultOutput) ToSupportAddonsResultOutputWithContext(ctx context.Context) SupportAddonsResultOutput {
	return o
}

// The collection of addons query.
func (o SupportAddonsResultOutput) Addons() SupportAddonsAddonArrayOutput {
	return o.ApplyT(func(v SupportAddonsResult) []SupportAddonsAddon { return v.Addons }).(SupportAddonsAddonArrayOutput)
}

func (o SupportAddonsResultOutput) Categories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SupportAddonsResult) []string { return v.Categories }).(pulumi.StringArrayOutput)
}

func (o SupportAddonsResultOutput) DeployModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SupportAddonsResult) []string { return v.DeployModes }).(pulumi.StringArrayOutput)
}

// The deploy node types.
func (o SupportAddonsResultOutput) DeployNodeTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SupportAddonsResult) []string { return v.DeployNodeTypes }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o SupportAddonsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SupportAddonsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o SupportAddonsResultOutput) KubernetesVersions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SupportAddonsResult) []string { return v.KubernetesVersions }).(pulumi.StringArrayOutput)
}

// The name of addon.
func (o SupportAddonsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportAddonsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o SupportAddonsResultOutput) Necessaries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SupportAddonsResult) []string { return v.Necessaries }).(pulumi.StringArrayOutput)
}

func (o SupportAddonsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SupportAddonsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The network modes of pod.
func (o SupportAddonsResultOutput) PodNetworkModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SupportAddonsResult) []string { return v.PodNetworkModes }).(pulumi.StringArrayOutput)
}

// The total count of addons query.
func (o SupportAddonsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v SupportAddonsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(SupportAddonsResultOutput{})
}
