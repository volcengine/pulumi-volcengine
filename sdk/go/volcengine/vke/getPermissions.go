// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vke

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vke permissions
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vke"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vke.GetPermissions(ctx, &vke.GetPermissionsArgs{
//				GranteeType: pulumi.StringRef("User"),
//				Ids: []string{
//					"apd10o9jhqqno0ba25****",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetPermissions(ctx *pulumi.Context, args *GetPermissionsArgs, opts ...pulumi.InvokeOption) (*GetPermissionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPermissionsResult
	err := ctx.Invoke("volcengine:vke/getPermissions:getPermissions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPermissions.
type GetPermissionsArgs struct {
	// A list of Cluster IDs.
	ClusterIds []string `pulumi:"clusterIds"`
	// A list of Grantee IDs.
	GranteeIds []int `pulumi:"granteeIds"`
	// The type of Grantee. Valid values: `User`, `Role`.
	GranteeType *string `pulumi:"granteeType"`
	// A list of RBAC Permission IDs.
	Ids []string `pulumi:"ids"`
	// A list of Namespaces.
	Namespaces []string `pulumi:"namespaces"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// A list of RBAC Role Names.
	RoleNames []string `pulumi:"roleNames"`
	// The status of RBAC Permission.
	Status *string `pulumi:"status"`
}

// A collection of values returned by getPermissions.
type GetPermissionsResult struct {
	// The collection of query.
	AccessPolicies []GetPermissionsAccessPolicy `pulumi:"accessPolicies"`
	ClusterIds     []string                     `pulumi:"clusterIds"`
	GranteeIds     []int                        `pulumi:"granteeIds"`
	// The type of the Grantee.
	GranteeType *string `pulumi:"granteeType"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	Namespaces []string `pulumi:"namespaces"`
	OutputFile *string  `pulumi:"outputFile"`
	RoleNames  []string `pulumi:"roleNames"`
	// The status of the RBAC Permission.
	Status *string `pulumi:"status"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetPermissionsOutput(ctx *pulumi.Context, args GetPermissionsOutputArgs, opts ...pulumi.InvokeOption) GetPermissionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPermissionsResult, error) {
			args := v.(GetPermissionsArgs)
			r, err := GetPermissions(ctx, &args, opts...)
			var s GetPermissionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPermissionsResultOutput)
}

// A collection of arguments for invoking getPermissions.
type GetPermissionsOutputArgs struct {
	// A list of Cluster IDs.
	ClusterIds pulumi.StringArrayInput `pulumi:"clusterIds"`
	// A list of Grantee IDs.
	GranteeIds pulumi.IntArrayInput `pulumi:"granteeIds"`
	// The type of Grantee. Valid values: `User`, `Role`.
	GranteeType pulumi.StringPtrInput `pulumi:"granteeType"`
	// A list of RBAC Permission IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A list of Namespaces.
	Namespaces pulumi.StringArrayInput `pulumi:"namespaces"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// A list of RBAC Role Names.
	RoleNames pulumi.StringArrayInput `pulumi:"roleNames"`
	// The status of RBAC Permission.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (GetPermissionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsArgs)(nil)).Elem()
}

// A collection of values returned by getPermissions.
type GetPermissionsResultOutput struct{ *pulumi.OutputState }

func (GetPermissionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPermissionsResult)(nil)).Elem()
}

func (o GetPermissionsResultOutput) ToGetPermissionsResultOutput() GetPermissionsResultOutput {
	return o
}

func (o GetPermissionsResultOutput) ToGetPermissionsResultOutputWithContext(ctx context.Context) GetPermissionsResultOutput {
	return o
}

// The collection of query.
func (o GetPermissionsResultOutput) AccessPolicies() GetPermissionsAccessPolicyArrayOutput {
	return o.ApplyT(func(v GetPermissionsResult) []GetPermissionsAccessPolicy { return v.AccessPolicies }).(GetPermissionsAccessPolicyArrayOutput)
}

func (o GetPermissionsResultOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionsResult) []string { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

func (o GetPermissionsResultOutput) GranteeIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetPermissionsResult) []int { return v.GranteeIds }).(pulumi.IntArrayOutput)
}

// The type of the Grantee.
func (o GetPermissionsResultOutput) GranteeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPermissionsResult) *string { return v.GranteeType }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPermissionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPermissionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPermissionsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetPermissionsResultOutput) Namespaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionsResult) []string { return v.Namespaces }).(pulumi.StringArrayOutput)
}

func (o GetPermissionsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPermissionsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetPermissionsResultOutput) RoleNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPermissionsResult) []string { return v.RoleNames }).(pulumi.StringArrayOutput)
}

// The status of the RBAC Permission.
func (o GetPermissionsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPermissionsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetPermissionsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetPermissionsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPermissionsResultOutput{})
}
