// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage kms keyring
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kms"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyring(ctx, "foo", &kms.KeyringArgs{
//				Description: pulumi.String("tf-test"),
//				KeyringName: pulumi.String("tf-test"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// KmsKeyring can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:kms/keyring:Keyring default resource_id
// ```
type Keyring struct {
	pulumi.CustomResourceState

	// The date when the keyring was created.
	CreationDate pulumi.IntOutput `pulumi:"creationDate"`
	// The description of the keyring.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the keyring.
	KeyringName pulumi.StringOutput `pulumi:"keyringName"`
	// The type of the keyring.
	KeyringType pulumi.StringOutput `pulumi:"keyringType"`
	// The name of the project.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The information about the tenant resource name (TRN).
	Trn pulumi.StringOutput `pulumi:"trn"`
	// The tenant ID of the keyring.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate pulumi.IntOutput `pulumi:"updateDate"`
}

// NewKeyring registers a new resource with the given unique name, arguments, and options.
func NewKeyring(ctx *pulumi.Context,
	name string, args *KeyringArgs, opts ...pulumi.ResourceOption) (*Keyring, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyringName == nil {
		return nil, errors.New("invalid value for required argument 'KeyringName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Keyring
	err := ctx.RegisterResource("volcengine:kms/keyring:Keyring", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyring gets an existing Keyring resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyring(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyringState, opts ...pulumi.ResourceOption) (*Keyring, error) {
	var resource Keyring
	err := ctx.ReadResource("volcengine:kms/keyring:Keyring", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Keyring resources.
type keyringState struct {
	// The date when the keyring was created.
	CreationDate *int `pulumi:"creationDate"`
	// The description of the keyring.
	Description *string `pulumi:"description"`
	// The name of the keyring.
	KeyringName *string `pulumi:"keyringName"`
	// The type of the keyring.
	KeyringType *string `pulumi:"keyringType"`
	// The name of the project.
	ProjectName *string `pulumi:"projectName"`
	// The information about the tenant resource name (TRN).
	Trn *string `pulumi:"trn"`
	// The tenant ID of the keyring.
	Uid *string `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate *int `pulumi:"updateDate"`
}

type KeyringState struct {
	// The date when the keyring was created.
	CreationDate pulumi.IntPtrInput
	// The description of the keyring.
	Description pulumi.StringPtrInput
	// The name of the keyring.
	KeyringName pulumi.StringPtrInput
	// The type of the keyring.
	KeyringType pulumi.StringPtrInput
	// The name of the project.
	ProjectName pulumi.StringPtrInput
	// The information about the tenant resource name (TRN).
	Trn pulumi.StringPtrInput
	// The tenant ID of the keyring.
	Uid pulumi.StringPtrInput
	// The date when the keyring was updated.
	UpdateDate pulumi.IntPtrInput
}

func (KeyringState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyringState)(nil)).Elem()
}

type keyringArgs struct {
	// The description of the keyring.
	Description *string `pulumi:"description"`
	// The name of the keyring.
	KeyringName string `pulumi:"keyringName"`
	// The type of the keyring.
	KeyringType *string `pulumi:"keyringType"`
	// The name of the project.
	ProjectName *string `pulumi:"projectName"`
}

// The set of arguments for constructing a Keyring resource.
type KeyringArgs struct {
	// The description of the keyring.
	Description pulumi.StringPtrInput
	// The name of the keyring.
	KeyringName pulumi.StringInput
	// The type of the keyring.
	KeyringType pulumi.StringPtrInput
	// The name of the project.
	ProjectName pulumi.StringPtrInput
}

func (KeyringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyringArgs)(nil)).Elem()
}

type KeyringInput interface {
	pulumi.Input

	ToKeyringOutput() KeyringOutput
	ToKeyringOutputWithContext(ctx context.Context) KeyringOutput
}

func (*Keyring) ElementType() reflect.Type {
	return reflect.TypeOf((**Keyring)(nil)).Elem()
}

func (i *Keyring) ToKeyringOutput() KeyringOutput {
	return i.ToKeyringOutputWithContext(context.Background())
}

func (i *Keyring) ToKeyringOutputWithContext(ctx context.Context) KeyringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyringOutput)
}

// KeyringArrayInput is an input type that accepts KeyringArray and KeyringArrayOutput values.
// You can construct a concrete instance of `KeyringArrayInput` via:
//
//	KeyringArray{ KeyringArgs{...} }
type KeyringArrayInput interface {
	pulumi.Input

	ToKeyringArrayOutput() KeyringArrayOutput
	ToKeyringArrayOutputWithContext(context.Context) KeyringArrayOutput
}

type KeyringArray []KeyringInput

func (KeyringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keyring)(nil)).Elem()
}

func (i KeyringArray) ToKeyringArrayOutput() KeyringArrayOutput {
	return i.ToKeyringArrayOutputWithContext(context.Background())
}

func (i KeyringArray) ToKeyringArrayOutputWithContext(ctx context.Context) KeyringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyringArrayOutput)
}

// KeyringMapInput is an input type that accepts KeyringMap and KeyringMapOutput values.
// You can construct a concrete instance of `KeyringMapInput` via:
//
//	KeyringMap{ "key": KeyringArgs{...} }
type KeyringMapInput interface {
	pulumi.Input

	ToKeyringMapOutput() KeyringMapOutput
	ToKeyringMapOutputWithContext(context.Context) KeyringMapOutput
}

type KeyringMap map[string]KeyringInput

func (KeyringMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keyring)(nil)).Elem()
}

func (i KeyringMap) ToKeyringMapOutput() KeyringMapOutput {
	return i.ToKeyringMapOutputWithContext(context.Background())
}

func (i KeyringMap) ToKeyringMapOutputWithContext(ctx context.Context) KeyringMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyringMapOutput)
}

type KeyringOutput struct{ *pulumi.OutputState }

func (KeyringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Keyring)(nil)).Elem()
}

func (o KeyringOutput) ToKeyringOutput() KeyringOutput {
	return o
}

func (o KeyringOutput) ToKeyringOutputWithContext(ctx context.Context) KeyringOutput {
	return o
}

// The date when the keyring was created.
func (o KeyringOutput) CreationDate() pulumi.IntOutput {
	return o.ApplyT(func(v *Keyring) pulumi.IntOutput { return v.CreationDate }).(pulumi.IntOutput)
}

// The description of the keyring.
func (o KeyringOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Keyring) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the keyring.
func (o KeyringOutput) KeyringName() pulumi.StringOutput {
	return o.ApplyT(func(v *Keyring) pulumi.StringOutput { return v.KeyringName }).(pulumi.StringOutput)
}

// The type of the keyring.
func (o KeyringOutput) KeyringType() pulumi.StringOutput {
	return o.ApplyT(func(v *Keyring) pulumi.StringOutput { return v.KeyringType }).(pulumi.StringOutput)
}

// The name of the project.
func (o KeyringOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Keyring) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The information about the tenant resource name (TRN).
func (o KeyringOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v *Keyring) pulumi.StringOutput { return v.Trn }).(pulumi.StringOutput)
}

// The tenant ID of the keyring.
func (o KeyringOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Keyring) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The date when the keyring was updated.
func (o KeyringOutput) UpdateDate() pulumi.IntOutput {
	return o.ApplyT(func(v *Keyring) pulumi.IntOutput { return v.UpdateDate }).(pulumi.IntOutput)
}

type KeyringArrayOutput struct{ *pulumi.OutputState }

func (KeyringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Keyring)(nil)).Elem()
}

func (o KeyringArrayOutput) ToKeyringArrayOutput() KeyringArrayOutput {
	return o
}

func (o KeyringArrayOutput) ToKeyringArrayOutputWithContext(ctx context.Context) KeyringArrayOutput {
	return o
}

func (o KeyringArrayOutput) Index(i pulumi.IntInput) KeyringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Keyring {
		return vs[0].([]*Keyring)[vs[1].(int)]
	}).(KeyringOutput)
}

type KeyringMapOutput struct{ *pulumi.OutputState }

func (KeyringMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Keyring)(nil)).Elem()
}

func (o KeyringMapOutput) ToKeyringMapOutput() KeyringMapOutput {
	return o
}

func (o KeyringMapOutput) ToKeyringMapOutputWithContext(ctx context.Context) KeyringMapOutput {
	return o
}

func (o KeyringMapOutput) MapIndex(k pulumi.StringInput) KeyringOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Keyring {
		return vs[0].(map[string]*Keyring)[vs[1].(string)]
	}).(KeyringOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyringInput)(nil)).Elem(), &Keyring{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyringArrayInput)(nil)).Elem(), KeyringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyringMapInput)(nil)).Elem(), KeyringMap{})
	pulumi.RegisterOutputType(KeyringOutput{})
	pulumi.RegisterOutputType(KeyringArrayOutput{})
	pulumi.RegisterOutputType(KeyringMapOutput{})
}
