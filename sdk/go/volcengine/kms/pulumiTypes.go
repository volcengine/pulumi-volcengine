// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type KeyMultiRegionConfiguration struct {
	// The type of the multi-region key.
	MultiRegionKeyType *string `pulumi:"multiRegionKeyType"`
	// Trn and region id of the primary multi-region key.
	PrimaryKey *KeyMultiRegionConfigurationPrimaryKey `pulumi:"primaryKey"`
	// Trn and region id of replica multi-region keys.
	ReplicaKeys []KeyMultiRegionConfigurationReplicaKey `pulumi:"replicaKeys"`
}

// KeyMultiRegionConfigurationInput is an input type that accepts KeyMultiRegionConfigurationArgs and KeyMultiRegionConfigurationOutput values.
// You can construct a concrete instance of `KeyMultiRegionConfigurationInput` via:
//
//	KeyMultiRegionConfigurationArgs{...}
type KeyMultiRegionConfigurationInput interface {
	pulumi.Input

	ToKeyMultiRegionConfigurationOutput() KeyMultiRegionConfigurationOutput
	ToKeyMultiRegionConfigurationOutputWithContext(context.Context) KeyMultiRegionConfigurationOutput
}

type KeyMultiRegionConfigurationArgs struct {
	// The type of the multi-region key.
	MultiRegionKeyType pulumi.StringPtrInput `pulumi:"multiRegionKeyType"`
	// Trn and region id of the primary multi-region key.
	PrimaryKey KeyMultiRegionConfigurationPrimaryKeyPtrInput `pulumi:"primaryKey"`
	// Trn and region id of replica multi-region keys.
	ReplicaKeys KeyMultiRegionConfigurationReplicaKeyArrayInput `pulumi:"replicaKeys"`
}

func (KeyMultiRegionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyMultiRegionConfiguration)(nil)).Elem()
}

func (i KeyMultiRegionConfigurationArgs) ToKeyMultiRegionConfigurationOutput() KeyMultiRegionConfigurationOutput {
	return i.ToKeyMultiRegionConfigurationOutputWithContext(context.Background())
}

func (i KeyMultiRegionConfigurationArgs) ToKeyMultiRegionConfigurationOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMultiRegionConfigurationOutput)
}

func (i KeyMultiRegionConfigurationArgs) ToKeyMultiRegionConfigurationPtrOutput() KeyMultiRegionConfigurationPtrOutput {
	return i.ToKeyMultiRegionConfigurationPtrOutputWithContext(context.Background())
}

func (i KeyMultiRegionConfigurationArgs) ToKeyMultiRegionConfigurationPtrOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMultiRegionConfigurationOutput).ToKeyMultiRegionConfigurationPtrOutputWithContext(ctx)
}

// KeyMultiRegionConfigurationPtrInput is an input type that accepts KeyMultiRegionConfigurationArgs, KeyMultiRegionConfigurationPtr and KeyMultiRegionConfigurationPtrOutput values.
// You can construct a concrete instance of `KeyMultiRegionConfigurationPtrInput` via:
//
//	        KeyMultiRegionConfigurationArgs{...}
//
//	or:
//
//	        nil
type KeyMultiRegionConfigurationPtrInput interface {
	pulumi.Input

	ToKeyMultiRegionConfigurationPtrOutput() KeyMultiRegionConfigurationPtrOutput
	ToKeyMultiRegionConfigurationPtrOutputWithContext(context.Context) KeyMultiRegionConfigurationPtrOutput
}

type keyMultiRegionConfigurationPtrType KeyMultiRegionConfigurationArgs

func KeyMultiRegionConfigurationPtr(v *KeyMultiRegionConfigurationArgs) KeyMultiRegionConfigurationPtrInput {
	return (*keyMultiRegionConfigurationPtrType)(v)
}

func (*keyMultiRegionConfigurationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyMultiRegionConfiguration)(nil)).Elem()
}

func (i *keyMultiRegionConfigurationPtrType) ToKeyMultiRegionConfigurationPtrOutput() KeyMultiRegionConfigurationPtrOutput {
	return i.ToKeyMultiRegionConfigurationPtrOutputWithContext(context.Background())
}

func (i *keyMultiRegionConfigurationPtrType) ToKeyMultiRegionConfigurationPtrOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMultiRegionConfigurationPtrOutput)
}

type KeyMultiRegionConfigurationOutput struct{ *pulumi.OutputState }

func (KeyMultiRegionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyMultiRegionConfiguration)(nil)).Elem()
}

func (o KeyMultiRegionConfigurationOutput) ToKeyMultiRegionConfigurationOutput() KeyMultiRegionConfigurationOutput {
	return o
}

func (o KeyMultiRegionConfigurationOutput) ToKeyMultiRegionConfigurationOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationOutput {
	return o
}

func (o KeyMultiRegionConfigurationOutput) ToKeyMultiRegionConfigurationPtrOutput() KeyMultiRegionConfigurationPtrOutput {
	return o.ToKeyMultiRegionConfigurationPtrOutputWithContext(context.Background())
}

func (o KeyMultiRegionConfigurationOutput) ToKeyMultiRegionConfigurationPtrOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyMultiRegionConfiguration) *KeyMultiRegionConfiguration {
		return &v
	}).(KeyMultiRegionConfigurationPtrOutput)
}

// The type of the multi-region key.
func (o KeyMultiRegionConfigurationOutput) MultiRegionKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyMultiRegionConfiguration) *string { return v.MultiRegionKeyType }).(pulumi.StringPtrOutput)
}

// Trn and region id of the primary multi-region key.
func (o KeyMultiRegionConfigurationOutput) PrimaryKey() KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return o.ApplyT(func(v KeyMultiRegionConfiguration) *KeyMultiRegionConfigurationPrimaryKey { return v.PrimaryKey }).(KeyMultiRegionConfigurationPrimaryKeyPtrOutput)
}

// Trn and region id of replica multi-region keys.
func (o KeyMultiRegionConfigurationOutput) ReplicaKeys() KeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o.ApplyT(func(v KeyMultiRegionConfiguration) []KeyMultiRegionConfigurationReplicaKey { return v.ReplicaKeys }).(KeyMultiRegionConfigurationReplicaKeyArrayOutput)
}

type KeyMultiRegionConfigurationPtrOutput struct{ *pulumi.OutputState }

func (KeyMultiRegionConfigurationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyMultiRegionConfiguration)(nil)).Elem()
}

func (o KeyMultiRegionConfigurationPtrOutput) ToKeyMultiRegionConfigurationPtrOutput() KeyMultiRegionConfigurationPtrOutput {
	return o
}

func (o KeyMultiRegionConfigurationPtrOutput) ToKeyMultiRegionConfigurationPtrOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPtrOutput {
	return o
}

func (o KeyMultiRegionConfigurationPtrOutput) Elem() KeyMultiRegionConfigurationOutput {
	return o.ApplyT(func(v *KeyMultiRegionConfiguration) KeyMultiRegionConfiguration {
		if v != nil {
			return *v
		}
		var ret KeyMultiRegionConfiguration
		return ret
	}).(KeyMultiRegionConfigurationOutput)
}

// The type of the multi-region key.
func (o KeyMultiRegionConfigurationPtrOutput) MultiRegionKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyMultiRegionConfiguration) *string {
		if v == nil {
			return nil
		}
		return v.MultiRegionKeyType
	}).(pulumi.StringPtrOutput)
}

// Trn and region id of the primary multi-region key.
func (o KeyMultiRegionConfigurationPtrOutput) PrimaryKey() KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return o.ApplyT(func(v *KeyMultiRegionConfiguration) *KeyMultiRegionConfigurationPrimaryKey {
		if v == nil {
			return nil
		}
		return v.PrimaryKey
	}).(KeyMultiRegionConfigurationPrimaryKeyPtrOutput)
}

// Trn and region id of replica multi-region keys.
func (o KeyMultiRegionConfigurationPtrOutput) ReplicaKeys() KeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o.ApplyT(func(v *KeyMultiRegionConfiguration) []KeyMultiRegionConfigurationReplicaKey {
		if v == nil {
			return nil
		}
		return v.ReplicaKeys
	}).(KeyMultiRegionConfigurationReplicaKeyArrayOutput)
}

type KeyMultiRegionConfigurationPrimaryKey struct {
	// The region id of multi-region key.
	Region *string `pulumi:"region"`
	// The name of the resource.
	Trn *string `pulumi:"trn"`
}

// KeyMultiRegionConfigurationPrimaryKeyInput is an input type that accepts KeyMultiRegionConfigurationPrimaryKeyArgs and KeyMultiRegionConfigurationPrimaryKeyOutput values.
// You can construct a concrete instance of `KeyMultiRegionConfigurationPrimaryKeyInput` via:
//
//	KeyMultiRegionConfigurationPrimaryKeyArgs{...}
type KeyMultiRegionConfigurationPrimaryKeyInput interface {
	pulumi.Input

	ToKeyMultiRegionConfigurationPrimaryKeyOutput() KeyMultiRegionConfigurationPrimaryKeyOutput
	ToKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(context.Context) KeyMultiRegionConfigurationPrimaryKeyOutput
}

type KeyMultiRegionConfigurationPrimaryKeyArgs struct {
	// The region id of multi-region key.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of the resource.
	Trn pulumi.StringPtrInput `pulumi:"trn"`
}

func (KeyMultiRegionConfigurationPrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (i KeyMultiRegionConfigurationPrimaryKeyArgs) ToKeyMultiRegionConfigurationPrimaryKeyOutput() KeyMultiRegionConfigurationPrimaryKeyOutput {
	return i.ToKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(context.Background())
}

func (i KeyMultiRegionConfigurationPrimaryKeyArgs) ToKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMultiRegionConfigurationPrimaryKeyOutput)
}

func (i KeyMultiRegionConfigurationPrimaryKeyArgs) ToKeyMultiRegionConfigurationPrimaryKeyPtrOutput() KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return i.ToKeyMultiRegionConfigurationPrimaryKeyPtrOutputWithContext(context.Background())
}

func (i KeyMultiRegionConfigurationPrimaryKeyArgs) ToKeyMultiRegionConfigurationPrimaryKeyPtrOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMultiRegionConfigurationPrimaryKeyOutput).ToKeyMultiRegionConfigurationPrimaryKeyPtrOutputWithContext(ctx)
}

// KeyMultiRegionConfigurationPrimaryKeyPtrInput is an input type that accepts KeyMultiRegionConfigurationPrimaryKeyArgs, KeyMultiRegionConfigurationPrimaryKeyPtr and KeyMultiRegionConfigurationPrimaryKeyPtrOutput values.
// You can construct a concrete instance of `KeyMultiRegionConfigurationPrimaryKeyPtrInput` via:
//
//	        KeyMultiRegionConfigurationPrimaryKeyArgs{...}
//
//	or:
//
//	        nil
type KeyMultiRegionConfigurationPrimaryKeyPtrInput interface {
	pulumi.Input

	ToKeyMultiRegionConfigurationPrimaryKeyPtrOutput() KeyMultiRegionConfigurationPrimaryKeyPtrOutput
	ToKeyMultiRegionConfigurationPrimaryKeyPtrOutputWithContext(context.Context) KeyMultiRegionConfigurationPrimaryKeyPtrOutput
}

type keyMultiRegionConfigurationPrimaryKeyPtrType KeyMultiRegionConfigurationPrimaryKeyArgs

func KeyMultiRegionConfigurationPrimaryKeyPtr(v *KeyMultiRegionConfigurationPrimaryKeyArgs) KeyMultiRegionConfigurationPrimaryKeyPtrInput {
	return (*keyMultiRegionConfigurationPrimaryKeyPtrType)(v)
}

func (*keyMultiRegionConfigurationPrimaryKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (i *keyMultiRegionConfigurationPrimaryKeyPtrType) ToKeyMultiRegionConfigurationPrimaryKeyPtrOutput() KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return i.ToKeyMultiRegionConfigurationPrimaryKeyPtrOutputWithContext(context.Background())
}

func (i *keyMultiRegionConfigurationPrimaryKeyPtrType) ToKeyMultiRegionConfigurationPrimaryKeyPtrOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMultiRegionConfigurationPrimaryKeyPtrOutput)
}

type KeyMultiRegionConfigurationPrimaryKeyOutput struct{ *pulumi.OutputState }

func (KeyMultiRegionConfigurationPrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (o KeyMultiRegionConfigurationPrimaryKeyOutput) ToKeyMultiRegionConfigurationPrimaryKeyOutput() KeyMultiRegionConfigurationPrimaryKeyOutput {
	return o
}

func (o KeyMultiRegionConfigurationPrimaryKeyOutput) ToKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPrimaryKeyOutput {
	return o
}

func (o KeyMultiRegionConfigurationPrimaryKeyOutput) ToKeyMultiRegionConfigurationPrimaryKeyPtrOutput() KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return o.ToKeyMultiRegionConfigurationPrimaryKeyPtrOutputWithContext(context.Background())
}

func (o KeyMultiRegionConfigurationPrimaryKeyOutput) ToKeyMultiRegionConfigurationPrimaryKeyPtrOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v KeyMultiRegionConfigurationPrimaryKey) *KeyMultiRegionConfigurationPrimaryKey {
		return &v
	}).(KeyMultiRegionConfigurationPrimaryKeyPtrOutput)
}

// The region id of multi-region key.
func (o KeyMultiRegionConfigurationPrimaryKeyOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyMultiRegionConfigurationPrimaryKey) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o KeyMultiRegionConfigurationPrimaryKeyOutput) Trn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyMultiRegionConfigurationPrimaryKey) *string { return v.Trn }).(pulumi.StringPtrOutput)
}

type KeyMultiRegionConfigurationPrimaryKeyPtrOutput struct{ *pulumi.OutputState }

func (KeyMultiRegionConfigurationPrimaryKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (o KeyMultiRegionConfigurationPrimaryKeyPtrOutput) ToKeyMultiRegionConfigurationPrimaryKeyPtrOutput() KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return o
}

func (o KeyMultiRegionConfigurationPrimaryKeyPtrOutput) ToKeyMultiRegionConfigurationPrimaryKeyPtrOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationPrimaryKeyPtrOutput {
	return o
}

func (o KeyMultiRegionConfigurationPrimaryKeyPtrOutput) Elem() KeyMultiRegionConfigurationPrimaryKeyOutput {
	return o.ApplyT(func(v *KeyMultiRegionConfigurationPrimaryKey) KeyMultiRegionConfigurationPrimaryKey {
		if v != nil {
			return *v
		}
		var ret KeyMultiRegionConfigurationPrimaryKey
		return ret
	}).(KeyMultiRegionConfigurationPrimaryKeyOutput)
}

// The region id of multi-region key.
func (o KeyMultiRegionConfigurationPrimaryKeyPtrOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyMultiRegionConfigurationPrimaryKey) *string {
		if v == nil {
			return nil
		}
		return v.Region
	}).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o KeyMultiRegionConfigurationPrimaryKeyPtrOutput) Trn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyMultiRegionConfigurationPrimaryKey) *string {
		if v == nil {
			return nil
		}
		return v.Trn
	}).(pulumi.StringPtrOutput)
}

type KeyMultiRegionConfigurationReplicaKey struct {
	// The region id of multi-region key.
	Region *string `pulumi:"region"`
	// The name of the resource.
	Trn *string `pulumi:"trn"`
}

// KeyMultiRegionConfigurationReplicaKeyInput is an input type that accepts KeyMultiRegionConfigurationReplicaKeyArgs and KeyMultiRegionConfigurationReplicaKeyOutput values.
// You can construct a concrete instance of `KeyMultiRegionConfigurationReplicaKeyInput` via:
//
//	KeyMultiRegionConfigurationReplicaKeyArgs{...}
type KeyMultiRegionConfigurationReplicaKeyInput interface {
	pulumi.Input

	ToKeyMultiRegionConfigurationReplicaKeyOutput() KeyMultiRegionConfigurationReplicaKeyOutput
	ToKeyMultiRegionConfigurationReplicaKeyOutputWithContext(context.Context) KeyMultiRegionConfigurationReplicaKeyOutput
}

type KeyMultiRegionConfigurationReplicaKeyArgs struct {
	// The region id of multi-region key.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The name of the resource.
	Trn pulumi.StringPtrInput `pulumi:"trn"`
}

func (KeyMultiRegionConfigurationReplicaKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (i KeyMultiRegionConfigurationReplicaKeyArgs) ToKeyMultiRegionConfigurationReplicaKeyOutput() KeyMultiRegionConfigurationReplicaKeyOutput {
	return i.ToKeyMultiRegionConfigurationReplicaKeyOutputWithContext(context.Background())
}

func (i KeyMultiRegionConfigurationReplicaKeyArgs) ToKeyMultiRegionConfigurationReplicaKeyOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationReplicaKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMultiRegionConfigurationReplicaKeyOutput)
}

// KeyMultiRegionConfigurationReplicaKeyArrayInput is an input type that accepts KeyMultiRegionConfigurationReplicaKeyArray and KeyMultiRegionConfigurationReplicaKeyArrayOutput values.
// You can construct a concrete instance of `KeyMultiRegionConfigurationReplicaKeyArrayInput` via:
//
//	KeyMultiRegionConfigurationReplicaKeyArray{ KeyMultiRegionConfigurationReplicaKeyArgs{...} }
type KeyMultiRegionConfigurationReplicaKeyArrayInput interface {
	pulumi.Input

	ToKeyMultiRegionConfigurationReplicaKeyArrayOutput() KeyMultiRegionConfigurationReplicaKeyArrayOutput
	ToKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(context.Context) KeyMultiRegionConfigurationReplicaKeyArrayOutput
}

type KeyMultiRegionConfigurationReplicaKeyArray []KeyMultiRegionConfigurationReplicaKeyInput

func (KeyMultiRegionConfigurationReplicaKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (i KeyMultiRegionConfigurationReplicaKeyArray) ToKeyMultiRegionConfigurationReplicaKeyArrayOutput() KeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return i.ToKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(context.Background())
}

func (i KeyMultiRegionConfigurationReplicaKeyArray) ToKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMultiRegionConfigurationReplicaKeyArrayOutput)
}

type KeyMultiRegionConfigurationReplicaKeyOutput struct{ *pulumi.OutputState }

func (KeyMultiRegionConfigurationReplicaKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (o KeyMultiRegionConfigurationReplicaKeyOutput) ToKeyMultiRegionConfigurationReplicaKeyOutput() KeyMultiRegionConfigurationReplicaKeyOutput {
	return o
}

func (o KeyMultiRegionConfigurationReplicaKeyOutput) ToKeyMultiRegionConfigurationReplicaKeyOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationReplicaKeyOutput {
	return o
}

// The region id of multi-region key.
func (o KeyMultiRegionConfigurationReplicaKeyOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyMultiRegionConfigurationReplicaKey) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The name of the resource.
func (o KeyMultiRegionConfigurationReplicaKeyOutput) Trn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v KeyMultiRegionConfigurationReplicaKey) *string { return v.Trn }).(pulumi.StringPtrOutput)
}

type KeyMultiRegionConfigurationReplicaKeyArrayOutput struct{ *pulumi.OutputState }

func (KeyMultiRegionConfigurationReplicaKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (o KeyMultiRegionConfigurationReplicaKeyArrayOutput) ToKeyMultiRegionConfigurationReplicaKeyArrayOutput() KeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o
}

func (o KeyMultiRegionConfigurationReplicaKeyArrayOutput) ToKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(ctx context.Context) KeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o
}

func (o KeyMultiRegionConfigurationReplicaKeyArrayOutput) Index(i pulumi.IntInput) KeyMultiRegionConfigurationReplicaKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyMultiRegionConfigurationReplicaKey {
		return vs[0].([]KeyMultiRegionConfigurationReplicaKey)[vs[1].(int)]
	}).(KeyMultiRegionConfigurationReplicaKeyOutput)
}

type KeyTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// KeyTagInput is an input type that accepts KeyTagArgs and KeyTagOutput values.
// You can construct a concrete instance of `KeyTagInput` via:
//
//	KeyTagArgs{...}
type KeyTagInput interface {
	pulumi.Input

	ToKeyTagOutput() KeyTagOutput
	ToKeyTagOutputWithContext(context.Context) KeyTagOutput
}

type KeyTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (KeyTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyTag)(nil)).Elem()
}

func (i KeyTagArgs) ToKeyTagOutput() KeyTagOutput {
	return i.ToKeyTagOutputWithContext(context.Background())
}

func (i KeyTagArgs) ToKeyTagOutputWithContext(ctx context.Context) KeyTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyTagOutput)
}

// KeyTagArrayInput is an input type that accepts KeyTagArray and KeyTagArrayOutput values.
// You can construct a concrete instance of `KeyTagArrayInput` via:
//
//	KeyTagArray{ KeyTagArgs{...} }
type KeyTagArrayInput interface {
	pulumi.Input

	ToKeyTagArrayOutput() KeyTagArrayOutput
	ToKeyTagArrayOutputWithContext(context.Context) KeyTagArrayOutput
}

type KeyTagArray []KeyTagInput

func (KeyTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyTag)(nil)).Elem()
}

func (i KeyTagArray) ToKeyTagArrayOutput() KeyTagArrayOutput {
	return i.ToKeyTagArrayOutputWithContext(context.Background())
}

func (i KeyTagArray) ToKeyTagArrayOutputWithContext(ctx context.Context) KeyTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyTagArrayOutput)
}

type KeyTagOutput struct{ *pulumi.OutputState }

func (KeyTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyTag)(nil)).Elem()
}

func (o KeyTagOutput) ToKeyTagOutput() KeyTagOutput {
	return o
}

func (o KeyTagOutput) ToKeyTagOutputWithContext(ctx context.Context) KeyTagOutput {
	return o
}

// The Key of Tags.
func (o KeyTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KeyTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o KeyTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KeyTag) string { return v.Value }).(pulumi.StringOutput)
}

type KeyTagArrayOutput struct{ *pulumi.OutputState }

func (KeyTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyTag)(nil)).Elem()
}

func (o KeyTagArrayOutput) ToKeyTagArrayOutput() KeyTagArrayOutput {
	return o
}

func (o KeyTagArrayOutput) ToKeyTagArrayOutputWithContext(ctx context.Context) KeyTagArrayOutput {
	return o
}

func (o KeyTagArrayOutput) Index(i pulumi.IntInput) KeyTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyTag {
		return vs[0].([]KeyTag)[vs[1].(int)]
	}).(KeyTagOutput)
}

type KeyringsKeyring struct {
	// The date when the keyring was created.
	CreationDate int `pulumi:"creationDate"`
	// The description of the keyring.
	Description string `pulumi:"description"`
	// The unique ID of the keyring. The value is in the UUID format.
	Id string `pulumi:"id"`
	// Key ring key count.
	KeyCount int `pulumi:"keyCount"`
	// The name of the keyring.
	KeyringName string `pulumi:"keyringName"`
	// The type of the keyring.
	KeyringType string `pulumi:"keyringType"`
	// The information about the tenant resource name (TRN).
	Trn string `pulumi:"trn"`
	// The tenant ID of the keyring.
	Uid string `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate int `pulumi:"updateDate"`
}

// KeyringsKeyringInput is an input type that accepts KeyringsKeyringArgs and KeyringsKeyringOutput values.
// You can construct a concrete instance of `KeyringsKeyringInput` via:
//
//	KeyringsKeyringArgs{...}
type KeyringsKeyringInput interface {
	pulumi.Input

	ToKeyringsKeyringOutput() KeyringsKeyringOutput
	ToKeyringsKeyringOutputWithContext(context.Context) KeyringsKeyringOutput
}

type KeyringsKeyringArgs struct {
	// The date when the keyring was created.
	CreationDate pulumi.IntInput `pulumi:"creationDate"`
	// The description of the keyring.
	Description pulumi.StringInput `pulumi:"description"`
	// The unique ID of the keyring. The value is in the UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// Key ring key count.
	KeyCount pulumi.IntInput `pulumi:"keyCount"`
	// The name of the keyring.
	KeyringName pulumi.StringInput `pulumi:"keyringName"`
	// The type of the keyring.
	KeyringType pulumi.StringInput `pulumi:"keyringType"`
	// The information about the tenant resource name (TRN).
	Trn pulumi.StringInput `pulumi:"trn"`
	// The tenant ID of the keyring.
	Uid pulumi.StringInput `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate pulumi.IntInput `pulumi:"updateDate"`
}

func (KeyringsKeyringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyringsKeyring)(nil)).Elem()
}

func (i KeyringsKeyringArgs) ToKeyringsKeyringOutput() KeyringsKeyringOutput {
	return i.ToKeyringsKeyringOutputWithContext(context.Background())
}

func (i KeyringsKeyringArgs) ToKeyringsKeyringOutputWithContext(ctx context.Context) KeyringsKeyringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyringsKeyringOutput)
}

// KeyringsKeyringArrayInput is an input type that accepts KeyringsKeyringArray and KeyringsKeyringArrayOutput values.
// You can construct a concrete instance of `KeyringsKeyringArrayInput` via:
//
//	KeyringsKeyringArray{ KeyringsKeyringArgs{...} }
type KeyringsKeyringArrayInput interface {
	pulumi.Input

	ToKeyringsKeyringArrayOutput() KeyringsKeyringArrayOutput
	ToKeyringsKeyringArrayOutputWithContext(context.Context) KeyringsKeyringArrayOutput
}

type KeyringsKeyringArray []KeyringsKeyringInput

func (KeyringsKeyringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyringsKeyring)(nil)).Elem()
}

func (i KeyringsKeyringArray) ToKeyringsKeyringArrayOutput() KeyringsKeyringArrayOutput {
	return i.ToKeyringsKeyringArrayOutputWithContext(context.Background())
}

func (i KeyringsKeyringArray) ToKeyringsKeyringArrayOutputWithContext(ctx context.Context) KeyringsKeyringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyringsKeyringArrayOutput)
}

type KeyringsKeyringOutput struct{ *pulumi.OutputState }

func (KeyringsKeyringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyringsKeyring)(nil)).Elem()
}

func (o KeyringsKeyringOutput) ToKeyringsKeyringOutput() KeyringsKeyringOutput {
	return o
}

func (o KeyringsKeyringOutput) ToKeyringsKeyringOutputWithContext(ctx context.Context) KeyringsKeyringOutput {
	return o
}

// The date when the keyring was created.
func (o KeyringsKeyringOutput) CreationDate() pulumi.IntOutput {
	return o.ApplyT(func(v KeyringsKeyring) int { return v.CreationDate }).(pulumi.IntOutput)
}

// The description of the keyring.
func (o KeyringsKeyringOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v KeyringsKeyring) string { return v.Description }).(pulumi.StringOutput)
}

// The unique ID of the keyring. The value is in the UUID format.
func (o KeyringsKeyringOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyringsKeyring) string { return v.Id }).(pulumi.StringOutput)
}

// Key ring key count.
func (o KeyringsKeyringOutput) KeyCount() pulumi.IntOutput {
	return o.ApplyT(func(v KeyringsKeyring) int { return v.KeyCount }).(pulumi.IntOutput)
}

// The name of the keyring.
func (o KeyringsKeyringOutput) KeyringName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyringsKeyring) string { return v.KeyringName }).(pulumi.StringOutput)
}

// The type of the keyring.
func (o KeyringsKeyringOutput) KeyringType() pulumi.StringOutput {
	return o.ApplyT(func(v KeyringsKeyring) string { return v.KeyringType }).(pulumi.StringOutput)
}

// The information about the tenant resource name (TRN).
func (o KeyringsKeyringOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v KeyringsKeyring) string { return v.Trn }).(pulumi.StringOutput)
}

// The tenant ID of the keyring.
func (o KeyringsKeyringOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v KeyringsKeyring) string { return v.Uid }).(pulumi.StringOutput)
}

// The date when the keyring was updated.
func (o KeyringsKeyringOutput) UpdateDate() pulumi.IntOutput {
	return o.ApplyT(func(v KeyringsKeyring) int { return v.UpdateDate }).(pulumi.IntOutput)
}

type KeyringsKeyringArrayOutput struct{ *pulumi.OutputState }

func (KeyringsKeyringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyringsKeyring)(nil)).Elem()
}

func (o KeyringsKeyringArrayOutput) ToKeyringsKeyringArrayOutput() KeyringsKeyringArrayOutput {
	return o
}

func (o KeyringsKeyringArrayOutput) ToKeyringsKeyringArrayOutputWithContext(ctx context.Context) KeyringsKeyringArrayOutput {
	return o
}

func (o KeyringsKeyringArrayOutput) Index(i pulumi.IntInput) KeyringsKeyringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyringsKeyring {
		return vs[0].([]KeyringsKeyring)[vs[1].(int)]
	}).(KeyringsKeyringOutput)
}

type KeysKey struct {
	// The date when the keyring was created.
	CreationDate int `pulumi:"creationDate"`
	// The description of the key.
	Description string `pulumi:"description"`
	// The unique ID of the key.
	Id string `pulumi:"id"`
	// The time when the key material will expire.
	KeyMaterialExpireTime string `pulumi:"keyMaterialExpireTime"`
	// The name of the key.
	KeyName string `pulumi:"keyName"`
	// The algorithm used in the key.
	KeySpec string `pulumi:"keySpec"`
	// The state of the key.
	KeyState string `pulumi:"keyState"`
	// The usage of the key.
	KeyUsage string `pulumi:"keyUsage"`
	// The last time the key was rotated.
	LastRotationTime string `pulumi:"lastRotationTime"`
	// Whether it is the master key of the Multi-region type.
	MultiRegion bool `pulumi:"multiRegion"`
	// The configuration of Multi-region key.
	MultiRegionConfiguration KeysKeyMultiRegionConfiguration `pulumi:"multiRegionConfiguration"`
	// The origin of the key.
	Origin string `pulumi:"origin"`
	// The protection level of the key.
	ProtectionLevel string `pulumi:"protectionLevel"`
	// The rotation configuration of the key.
	RotationState string `pulumi:"rotationState"`
	// The time when the key will be deleted.
	ScheduleDeleteTime string `pulumi:"scheduleDeleteTime"`
	// The next time the key will be rotated.
	ScheduleRotationTime string `pulumi:"scheduleRotationTime"`
	// A list of tags.
	Tags []KeysKeyTag `pulumi:"tags"`
	// The name of the resource.
	Trn string `pulumi:"trn"`
	// The date when the keyring was updated.
	UpdateDate int `pulumi:"updateDate"`
}

// KeysKeyInput is an input type that accepts KeysKeyArgs and KeysKeyOutput values.
// You can construct a concrete instance of `KeysKeyInput` via:
//
//	KeysKeyArgs{...}
type KeysKeyInput interface {
	pulumi.Input

	ToKeysKeyOutput() KeysKeyOutput
	ToKeysKeyOutputWithContext(context.Context) KeysKeyOutput
}

type KeysKeyArgs struct {
	// The date when the keyring was created.
	CreationDate pulumi.IntInput `pulumi:"creationDate"`
	// The description of the key.
	Description pulumi.StringInput `pulumi:"description"`
	// The unique ID of the key.
	Id pulumi.StringInput `pulumi:"id"`
	// The time when the key material will expire.
	KeyMaterialExpireTime pulumi.StringInput `pulumi:"keyMaterialExpireTime"`
	// The name of the key.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The algorithm used in the key.
	KeySpec pulumi.StringInput `pulumi:"keySpec"`
	// The state of the key.
	KeyState pulumi.StringInput `pulumi:"keyState"`
	// The usage of the key.
	KeyUsage pulumi.StringInput `pulumi:"keyUsage"`
	// The last time the key was rotated.
	LastRotationTime pulumi.StringInput `pulumi:"lastRotationTime"`
	// Whether it is the master key of the Multi-region type.
	MultiRegion pulumi.BoolInput `pulumi:"multiRegion"`
	// The configuration of Multi-region key.
	MultiRegionConfiguration KeysKeyMultiRegionConfigurationInput `pulumi:"multiRegionConfiguration"`
	// The origin of the key.
	Origin pulumi.StringInput `pulumi:"origin"`
	// The protection level of the key.
	ProtectionLevel pulumi.StringInput `pulumi:"protectionLevel"`
	// The rotation configuration of the key.
	RotationState pulumi.StringInput `pulumi:"rotationState"`
	// The time when the key will be deleted.
	ScheduleDeleteTime pulumi.StringInput `pulumi:"scheduleDeleteTime"`
	// The next time the key will be rotated.
	ScheduleRotationTime pulumi.StringInput `pulumi:"scheduleRotationTime"`
	// A list of tags.
	Tags KeysKeyTagArrayInput `pulumi:"tags"`
	// The name of the resource.
	Trn pulumi.StringInput `pulumi:"trn"`
	// The date when the keyring was updated.
	UpdateDate pulumi.IntInput `pulumi:"updateDate"`
}

func (KeysKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKey)(nil)).Elem()
}

func (i KeysKeyArgs) ToKeysKeyOutput() KeysKeyOutput {
	return i.ToKeysKeyOutputWithContext(context.Background())
}

func (i KeysKeyArgs) ToKeysKeyOutputWithContext(ctx context.Context) KeysKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyOutput)
}

// KeysKeyArrayInput is an input type that accepts KeysKeyArray and KeysKeyArrayOutput values.
// You can construct a concrete instance of `KeysKeyArrayInput` via:
//
//	KeysKeyArray{ KeysKeyArgs{...} }
type KeysKeyArrayInput interface {
	pulumi.Input

	ToKeysKeyArrayOutput() KeysKeyArrayOutput
	ToKeysKeyArrayOutputWithContext(context.Context) KeysKeyArrayOutput
}

type KeysKeyArray []KeysKeyInput

func (KeysKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKey)(nil)).Elem()
}

func (i KeysKeyArray) ToKeysKeyArrayOutput() KeysKeyArrayOutput {
	return i.ToKeysKeyArrayOutputWithContext(context.Background())
}

func (i KeysKeyArray) ToKeysKeyArrayOutputWithContext(ctx context.Context) KeysKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyArrayOutput)
}

type KeysKeyOutput struct{ *pulumi.OutputState }

func (KeysKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKey)(nil)).Elem()
}

func (o KeysKeyOutput) ToKeysKeyOutput() KeysKeyOutput {
	return o
}

func (o KeysKeyOutput) ToKeysKeyOutputWithContext(ctx context.Context) KeysKeyOutput {
	return o
}

// The date when the keyring was created.
func (o KeysKeyOutput) CreationDate() pulumi.IntOutput {
	return o.ApplyT(func(v KeysKey) int { return v.CreationDate }).(pulumi.IntOutput)
}

// The description of the key.
func (o KeysKeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.Description }).(pulumi.StringOutput)
}

// The unique ID of the key.
func (o KeysKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.Id }).(pulumi.StringOutput)
}

// The time when the key material will expire.
func (o KeysKeyOutput) KeyMaterialExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.KeyMaterialExpireTime }).(pulumi.StringOutput)
}

// The name of the key.
func (o KeysKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.KeyName }).(pulumi.StringOutput)
}

// The algorithm used in the key.
func (o KeysKeyOutput) KeySpec() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.KeySpec }).(pulumi.StringOutput)
}

// The state of the key.
func (o KeysKeyOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.KeyState }).(pulumi.StringOutput)
}

// The usage of the key.
func (o KeysKeyOutput) KeyUsage() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.KeyUsage }).(pulumi.StringOutput)
}

// The last time the key was rotated.
func (o KeysKeyOutput) LastRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.LastRotationTime }).(pulumi.StringOutput)
}

// Whether it is the master key of the Multi-region type.
func (o KeysKeyOutput) MultiRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v KeysKey) bool { return v.MultiRegion }).(pulumi.BoolOutput)
}

// The configuration of Multi-region key.
func (o KeysKeyOutput) MultiRegionConfiguration() KeysKeyMultiRegionConfigurationOutput {
	return o.ApplyT(func(v KeysKey) KeysKeyMultiRegionConfiguration { return v.MultiRegionConfiguration }).(KeysKeyMultiRegionConfigurationOutput)
}

// The origin of the key.
func (o KeysKeyOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.Origin }).(pulumi.StringOutput)
}

// The protection level of the key.
func (o KeysKeyOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

// The rotation configuration of the key.
func (o KeysKeyOutput) RotationState() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.RotationState }).(pulumi.StringOutput)
}

// The time when the key will be deleted.
func (o KeysKeyOutput) ScheduleDeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.ScheduleDeleteTime }).(pulumi.StringOutput)
}

// The next time the key will be rotated.
func (o KeysKeyOutput) ScheduleRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.ScheduleRotationTime }).(pulumi.StringOutput)
}

// A list of tags.
func (o KeysKeyOutput) Tags() KeysKeyTagArrayOutput {
	return o.ApplyT(func(v KeysKey) []KeysKeyTag { return v.Tags }).(KeysKeyTagArrayOutput)
}

// The name of the resource.
func (o KeysKeyOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKey) string { return v.Trn }).(pulumi.StringOutput)
}

// The date when the keyring was updated.
func (o KeysKeyOutput) UpdateDate() pulumi.IntOutput {
	return o.ApplyT(func(v KeysKey) int { return v.UpdateDate }).(pulumi.IntOutput)
}

type KeysKeyArrayOutput struct{ *pulumi.OutputState }

func (KeysKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKey)(nil)).Elem()
}

func (o KeysKeyArrayOutput) ToKeysKeyArrayOutput() KeysKeyArrayOutput {
	return o
}

func (o KeysKeyArrayOutput) ToKeysKeyArrayOutputWithContext(ctx context.Context) KeysKeyArrayOutput {
	return o
}

func (o KeysKeyArrayOutput) Index(i pulumi.IntInput) KeysKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeysKey {
		return vs[0].([]KeysKey)[vs[1].(int)]
	}).(KeysKeyOutput)
}

type KeysKeyMultiRegionConfiguration struct {
	// The type of the multi-region key.
	MultiRegionKeyType string `pulumi:"multiRegionKeyType"`
	// Trn and region id of the primary multi-region key.
	PrimaryKey KeysKeyMultiRegionConfigurationPrimaryKey `pulumi:"primaryKey"`
	// Trn and region id of replica multi-region keys.
	ReplicaKeys []KeysKeyMultiRegionConfigurationReplicaKey `pulumi:"replicaKeys"`
}

// KeysKeyMultiRegionConfigurationInput is an input type that accepts KeysKeyMultiRegionConfigurationArgs and KeysKeyMultiRegionConfigurationOutput values.
// You can construct a concrete instance of `KeysKeyMultiRegionConfigurationInput` via:
//
//	KeysKeyMultiRegionConfigurationArgs{...}
type KeysKeyMultiRegionConfigurationInput interface {
	pulumi.Input

	ToKeysKeyMultiRegionConfigurationOutput() KeysKeyMultiRegionConfigurationOutput
	ToKeysKeyMultiRegionConfigurationOutputWithContext(context.Context) KeysKeyMultiRegionConfigurationOutput
}

type KeysKeyMultiRegionConfigurationArgs struct {
	// The type of the multi-region key.
	MultiRegionKeyType pulumi.StringInput `pulumi:"multiRegionKeyType"`
	// Trn and region id of the primary multi-region key.
	PrimaryKey KeysKeyMultiRegionConfigurationPrimaryKeyInput `pulumi:"primaryKey"`
	// Trn and region id of replica multi-region keys.
	ReplicaKeys KeysKeyMultiRegionConfigurationReplicaKeyArrayInput `pulumi:"replicaKeys"`
}

func (KeysKeyMultiRegionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyMultiRegionConfiguration)(nil)).Elem()
}

func (i KeysKeyMultiRegionConfigurationArgs) ToKeysKeyMultiRegionConfigurationOutput() KeysKeyMultiRegionConfigurationOutput {
	return i.ToKeysKeyMultiRegionConfigurationOutputWithContext(context.Background())
}

func (i KeysKeyMultiRegionConfigurationArgs) ToKeysKeyMultiRegionConfigurationOutputWithContext(ctx context.Context) KeysKeyMultiRegionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyMultiRegionConfigurationOutput)
}

type KeysKeyMultiRegionConfigurationOutput struct{ *pulumi.OutputState }

func (KeysKeyMultiRegionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyMultiRegionConfiguration)(nil)).Elem()
}

func (o KeysKeyMultiRegionConfigurationOutput) ToKeysKeyMultiRegionConfigurationOutput() KeysKeyMultiRegionConfigurationOutput {
	return o
}

func (o KeysKeyMultiRegionConfigurationOutput) ToKeysKeyMultiRegionConfigurationOutputWithContext(ctx context.Context) KeysKeyMultiRegionConfigurationOutput {
	return o
}

// The type of the multi-region key.
func (o KeysKeyMultiRegionConfigurationOutput) MultiRegionKeyType() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyMultiRegionConfiguration) string { return v.MultiRegionKeyType }).(pulumi.StringOutput)
}

// Trn and region id of the primary multi-region key.
func (o KeysKeyMultiRegionConfigurationOutput) PrimaryKey() KeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return o.ApplyT(func(v KeysKeyMultiRegionConfiguration) KeysKeyMultiRegionConfigurationPrimaryKey { return v.PrimaryKey }).(KeysKeyMultiRegionConfigurationPrimaryKeyOutput)
}

// Trn and region id of replica multi-region keys.
func (o KeysKeyMultiRegionConfigurationOutput) ReplicaKeys() KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o.ApplyT(func(v KeysKeyMultiRegionConfiguration) []KeysKeyMultiRegionConfigurationReplicaKey {
		return v.ReplicaKeys
	}).(KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput)
}

type KeysKeyMultiRegionConfigurationPrimaryKey struct {
	// The region id of multi-region key.
	Region string `pulumi:"region"`
	// The name of the resource.
	Trn string `pulumi:"trn"`
}

// KeysKeyMultiRegionConfigurationPrimaryKeyInput is an input type that accepts KeysKeyMultiRegionConfigurationPrimaryKeyArgs and KeysKeyMultiRegionConfigurationPrimaryKeyOutput values.
// You can construct a concrete instance of `KeysKeyMultiRegionConfigurationPrimaryKeyInput` via:
//
//	KeysKeyMultiRegionConfigurationPrimaryKeyArgs{...}
type KeysKeyMultiRegionConfigurationPrimaryKeyInput interface {
	pulumi.Input

	ToKeysKeyMultiRegionConfigurationPrimaryKeyOutput() KeysKeyMultiRegionConfigurationPrimaryKeyOutput
	ToKeysKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(context.Context) KeysKeyMultiRegionConfigurationPrimaryKeyOutput
}

type KeysKeyMultiRegionConfigurationPrimaryKeyArgs struct {
	// The region id of multi-region key.
	Region pulumi.StringInput `pulumi:"region"`
	// The name of the resource.
	Trn pulumi.StringInput `pulumi:"trn"`
}

func (KeysKeyMultiRegionConfigurationPrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (i KeysKeyMultiRegionConfigurationPrimaryKeyArgs) ToKeysKeyMultiRegionConfigurationPrimaryKeyOutput() KeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return i.ToKeysKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(context.Background())
}

func (i KeysKeyMultiRegionConfigurationPrimaryKeyArgs) ToKeysKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(ctx context.Context) KeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyMultiRegionConfigurationPrimaryKeyOutput)
}

type KeysKeyMultiRegionConfigurationPrimaryKeyOutput struct{ *pulumi.OutputState }

func (KeysKeyMultiRegionConfigurationPrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (o KeysKeyMultiRegionConfigurationPrimaryKeyOutput) ToKeysKeyMultiRegionConfigurationPrimaryKeyOutput() KeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return o
}

func (o KeysKeyMultiRegionConfigurationPrimaryKeyOutput) ToKeysKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(ctx context.Context) KeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return o
}

// The region id of multi-region key.
func (o KeysKeyMultiRegionConfigurationPrimaryKeyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyMultiRegionConfigurationPrimaryKey) string { return v.Region }).(pulumi.StringOutput)
}

// The name of the resource.
func (o KeysKeyMultiRegionConfigurationPrimaryKeyOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyMultiRegionConfigurationPrimaryKey) string { return v.Trn }).(pulumi.StringOutput)
}

type KeysKeyMultiRegionConfigurationReplicaKey struct {
	// The region id of multi-region key.
	Region string `pulumi:"region"`
	// The name of the resource.
	Trn string `pulumi:"trn"`
}

// KeysKeyMultiRegionConfigurationReplicaKeyInput is an input type that accepts KeysKeyMultiRegionConfigurationReplicaKeyArgs and KeysKeyMultiRegionConfigurationReplicaKeyOutput values.
// You can construct a concrete instance of `KeysKeyMultiRegionConfigurationReplicaKeyInput` via:
//
//	KeysKeyMultiRegionConfigurationReplicaKeyArgs{...}
type KeysKeyMultiRegionConfigurationReplicaKeyInput interface {
	pulumi.Input

	ToKeysKeyMultiRegionConfigurationReplicaKeyOutput() KeysKeyMultiRegionConfigurationReplicaKeyOutput
	ToKeysKeyMultiRegionConfigurationReplicaKeyOutputWithContext(context.Context) KeysKeyMultiRegionConfigurationReplicaKeyOutput
}

type KeysKeyMultiRegionConfigurationReplicaKeyArgs struct {
	// The region id of multi-region key.
	Region pulumi.StringInput `pulumi:"region"`
	// The name of the resource.
	Trn pulumi.StringInput `pulumi:"trn"`
}

func (KeysKeyMultiRegionConfigurationReplicaKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (i KeysKeyMultiRegionConfigurationReplicaKeyArgs) ToKeysKeyMultiRegionConfigurationReplicaKeyOutput() KeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return i.ToKeysKeyMultiRegionConfigurationReplicaKeyOutputWithContext(context.Background())
}

func (i KeysKeyMultiRegionConfigurationReplicaKeyArgs) ToKeysKeyMultiRegionConfigurationReplicaKeyOutputWithContext(ctx context.Context) KeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyMultiRegionConfigurationReplicaKeyOutput)
}

// KeysKeyMultiRegionConfigurationReplicaKeyArrayInput is an input type that accepts KeysKeyMultiRegionConfigurationReplicaKeyArray and KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput values.
// You can construct a concrete instance of `KeysKeyMultiRegionConfigurationReplicaKeyArrayInput` via:
//
//	KeysKeyMultiRegionConfigurationReplicaKeyArray{ KeysKeyMultiRegionConfigurationReplicaKeyArgs{...} }
type KeysKeyMultiRegionConfigurationReplicaKeyArrayInput interface {
	pulumi.Input

	ToKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput() KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput
	ToKeysKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(context.Context) KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput
}

type KeysKeyMultiRegionConfigurationReplicaKeyArray []KeysKeyMultiRegionConfigurationReplicaKeyInput

func (KeysKeyMultiRegionConfigurationReplicaKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (i KeysKeyMultiRegionConfigurationReplicaKeyArray) ToKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput() KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return i.ToKeysKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(context.Background())
}

func (i KeysKeyMultiRegionConfigurationReplicaKeyArray) ToKeysKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(ctx context.Context) KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput)
}

type KeysKeyMultiRegionConfigurationReplicaKeyOutput struct{ *pulumi.OutputState }

func (KeysKeyMultiRegionConfigurationReplicaKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (o KeysKeyMultiRegionConfigurationReplicaKeyOutput) ToKeysKeyMultiRegionConfigurationReplicaKeyOutput() KeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return o
}

func (o KeysKeyMultiRegionConfigurationReplicaKeyOutput) ToKeysKeyMultiRegionConfigurationReplicaKeyOutputWithContext(ctx context.Context) KeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return o
}

// The region id of multi-region key.
func (o KeysKeyMultiRegionConfigurationReplicaKeyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyMultiRegionConfigurationReplicaKey) string { return v.Region }).(pulumi.StringOutput)
}

// The name of the resource.
func (o KeysKeyMultiRegionConfigurationReplicaKeyOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyMultiRegionConfigurationReplicaKey) string { return v.Trn }).(pulumi.StringOutput)
}

type KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput struct{ *pulumi.OutputState }

func (KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (o KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput) ToKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput() KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o
}

func (o KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput) ToKeysKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(ctx context.Context) KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o
}

func (o KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput) Index(i pulumi.IntInput) KeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeysKeyMultiRegionConfigurationReplicaKey {
		return vs[0].([]KeysKeyMultiRegionConfigurationReplicaKey)[vs[1].(int)]
	}).(KeysKeyMultiRegionConfigurationReplicaKeyOutput)
}

type KeysKeyTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// KeysKeyTagInput is an input type that accepts KeysKeyTagArgs and KeysKeyTagOutput values.
// You can construct a concrete instance of `KeysKeyTagInput` via:
//
//	KeysKeyTagArgs{...}
type KeysKeyTagInput interface {
	pulumi.Input

	ToKeysKeyTagOutput() KeysKeyTagOutput
	ToKeysKeyTagOutputWithContext(context.Context) KeysKeyTagOutput
}

type KeysKeyTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (KeysKeyTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyTag)(nil)).Elem()
}

func (i KeysKeyTagArgs) ToKeysKeyTagOutput() KeysKeyTagOutput {
	return i.ToKeysKeyTagOutputWithContext(context.Background())
}

func (i KeysKeyTagArgs) ToKeysKeyTagOutputWithContext(ctx context.Context) KeysKeyTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyTagOutput)
}

// KeysKeyTagArrayInput is an input type that accepts KeysKeyTagArray and KeysKeyTagArrayOutput values.
// You can construct a concrete instance of `KeysKeyTagArrayInput` via:
//
//	KeysKeyTagArray{ KeysKeyTagArgs{...} }
type KeysKeyTagArrayInput interface {
	pulumi.Input

	ToKeysKeyTagArrayOutput() KeysKeyTagArrayOutput
	ToKeysKeyTagArrayOutputWithContext(context.Context) KeysKeyTagArrayOutput
}

type KeysKeyTagArray []KeysKeyTagInput

func (KeysKeyTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKeyTag)(nil)).Elem()
}

func (i KeysKeyTagArray) ToKeysKeyTagArrayOutput() KeysKeyTagArrayOutput {
	return i.ToKeysKeyTagArrayOutputWithContext(context.Background())
}

func (i KeysKeyTagArray) ToKeysKeyTagArrayOutputWithContext(ctx context.Context) KeysKeyTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysKeyTagArrayOutput)
}

type KeysKeyTagOutput struct{ *pulumi.OutputState }

func (KeysKeyTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysKeyTag)(nil)).Elem()
}

func (o KeysKeyTagOutput) ToKeysKeyTagOutput() KeysKeyTagOutput {
	return o
}

func (o KeysKeyTagOutput) ToKeysKeyTagOutputWithContext(ctx context.Context) KeysKeyTagOutput {
	return o
}

// The key of the tag.
func (o KeysKeyTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o KeysKeyTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v KeysKeyTag) string { return v.Value }).(pulumi.StringOutput)
}

type KeysKeyTagArrayOutput struct{ *pulumi.OutputState }

func (KeysKeyTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysKeyTag)(nil)).Elem()
}

func (o KeysKeyTagArrayOutput) ToKeysKeyTagArrayOutput() KeysKeyTagArrayOutput {
	return o
}

func (o KeysKeyTagArrayOutput) ToKeysKeyTagArrayOutputWithContext(ctx context.Context) KeysKeyTagArrayOutput {
	return o
}

func (o KeysKeyTagArrayOutput) Index(i pulumi.IntInput) KeysKeyTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeysKeyTag {
		return vs[0].([]KeysKeyTag)[vs[1].(int)]
	}).(KeysKeyTagOutput)
}

type KeysTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The values of the tag.
	Values []string `pulumi:"values"`
}

// KeysTagInput is an input type that accepts KeysTagArgs and KeysTagOutput values.
// You can construct a concrete instance of `KeysTagInput` via:
//
//	KeysTagArgs{...}
type KeysTagInput interface {
	pulumi.Input

	ToKeysTagOutput() KeysTagOutput
	ToKeysTagOutputWithContext(context.Context) KeysTagOutput
}

type KeysTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The values of the tag.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (KeysTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysTag)(nil)).Elem()
}

func (i KeysTagArgs) ToKeysTagOutput() KeysTagOutput {
	return i.ToKeysTagOutputWithContext(context.Background())
}

func (i KeysTagArgs) ToKeysTagOutputWithContext(ctx context.Context) KeysTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysTagOutput)
}

// KeysTagArrayInput is an input type that accepts KeysTagArray and KeysTagArrayOutput values.
// You can construct a concrete instance of `KeysTagArrayInput` via:
//
//	KeysTagArray{ KeysTagArgs{...} }
type KeysTagArrayInput interface {
	pulumi.Input

	ToKeysTagArrayOutput() KeysTagArrayOutput
	ToKeysTagArrayOutputWithContext(context.Context) KeysTagArrayOutput
}

type KeysTagArray []KeysTagInput

func (KeysTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysTag)(nil)).Elem()
}

func (i KeysTagArray) ToKeysTagArrayOutput() KeysTagArrayOutput {
	return i.ToKeysTagArrayOutputWithContext(context.Background())
}

func (i KeysTagArray) ToKeysTagArrayOutputWithContext(ctx context.Context) KeysTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeysTagArrayOutput)
}

type KeysTagOutput struct{ *pulumi.OutputState }

func (KeysTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeysTag)(nil)).Elem()
}

func (o KeysTagOutput) ToKeysTagOutput() KeysTagOutput {
	return o
}

func (o KeysTagOutput) ToKeysTagOutputWithContext(ctx context.Context) KeysTagOutput {
	return o
}

// The key of the tag.
func (o KeysTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v KeysTag) string { return v.Key }).(pulumi.StringOutput)
}

// The values of the tag.
func (o KeysTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v KeysTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type KeysTagArrayOutput struct{ *pulumi.OutputState }

func (KeysTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeysTag)(nil)).Elem()
}

func (o KeysTagArrayOutput) ToKeysTagArrayOutput() KeysTagArrayOutput {
	return o
}

func (o KeysTagArrayOutput) ToKeysTagArrayOutputWithContext(ctx context.Context) KeysTagArrayOutput {
	return o
}

func (o KeysTagArrayOutput) Index(i pulumi.IntInput) KeysTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeysTag {
		return vs[0].([]KeysTag)[vs[1].(int)]
	}).(KeysTagOutput)
}

type SecretsSecret struct {
	// The date when the keyring was created.
	CreationDate int `pulumi:"creationDate"`
	// The description of the secret.
	Description string `pulumi:"description"`
	// The TRN of the KMS key used to encrypt the secret value.
	EncryptionKey string `pulumi:"encryptionKey"`
	// The extended configurations of the secret.
	ExtendedConfig string `pulumi:"extendedConfig"`
	// The unique ID of the secret. The value is in the UUID format.
	Id string `pulumi:"id"`
	// The last time the secret was rotated.
	LastRotationTime string `pulumi:"lastRotationTime"`
	// Indicates whether the secret is hosted.
	Managed bool `pulumi:"managed"`
	// The name of the project to which the secret belongs.
	ProjectName string `pulumi:"projectName"`
	// The interval at which automatic rotation is performed.
	RotationInterval int `pulumi:"rotationInterval"`
	// The state of the rotation.
	RotationState string `pulumi:"rotationState"`
	// The time when the secret will be deleted.
	ScheduleDeleteTime string `pulumi:"scheduleDeleteTime"`
	// The next time the secret will be rotated.
	ScheduleRotationTime string `pulumi:"scheduleRotationTime"`
	// The name of the secret.
	SecretName string `pulumi:"secretName"`
	// The state of the secret.
	SecretState string `pulumi:"secretState"`
	// The type of the secret.
	SecretType string `pulumi:"secretType"`
	// The trn of the secret.
	Trn string `pulumi:"trn"`
	// The tenant ID of the secret.
	Uid string `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate int `pulumi:"updateDate"`
}

// SecretsSecretInput is an input type that accepts SecretsSecretArgs and SecretsSecretOutput values.
// You can construct a concrete instance of `SecretsSecretInput` via:
//
//	SecretsSecretArgs{...}
type SecretsSecretInput interface {
	pulumi.Input

	ToSecretsSecretOutput() SecretsSecretOutput
	ToSecretsSecretOutputWithContext(context.Context) SecretsSecretOutput
}

type SecretsSecretArgs struct {
	// The date when the keyring was created.
	CreationDate pulumi.IntInput `pulumi:"creationDate"`
	// The description of the secret.
	Description pulumi.StringInput `pulumi:"description"`
	// The TRN of the KMS key used to encrypt the secret value.
	EncryptionKey pulumi.StringInput `pulumi:"encryptionKey"`
	// The extended configurations of the secret.
	ExtendedConfig pulumi.StringInput `pulumi:"extendedConfig"`
	// The unique ID of the secret. The value is in the UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// The last time the secret was rotated.
	LastRotationTime pulumi.StringInput `pulumi:"lastRotationTime"`
	// Indicates whether the secret is hosted.
	Managed pulumi.BoolInput `pulumi:"managed"`
	// The name of the project to which the secret belongs.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The interval at which automatic rotation is performed.
	RotationInterval pulumi.IntInput `pulumi:"rotationInterval"`
	// The state of the rotation.
	RotationState pulumi.StringInput `pulumi:"rotationState"`
	// The time when the secret will be deleted.
	ScheduleDeleteTime pulumi.StringInput `pulumi:"scheduleDeleteTime"`
	// The next time the secret will be rotated.
	ScheduleRotationTime pulumi.StringInput `pulumi:"scheduleRotationTime"`
	// The name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// The state of the secret.
	SecretState pulumi.StringInput `pulumi:"secretState"`
	// The type of the secret.
	SecretType pulumi.StringInput `pulumi:"secretType"`
	// The trn of the secret.
	Trn pulumi.StringInput `pulumi:"trn"`
	// The tenant ID of the secret.
	Uid pulumi.StringInput `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate pulumi.IntInput `pulumi:"updateDate"`
}

func (SecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsSecret)(nil)).Elem()
}

func (i SecretsSecretArgs) ToSecretsSecretOutput() SecretsSecretOutput {
	return i.ToSecretsSecretOutputWithContext(context.Background())
}

func (i SecretsSecretArgs) ToSecretsSecretOutputWithContext(ctx context.Context) SecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsSecretOutput)
}

// SecretsSecretArrayInput is an input type that accepts SecretsSecretArray and SecretsSecretArrayOutput values.
// You can construct a concrete instance of `SecretsSecretArrayInput` via:
//
//	SecretsSecretArray{ SecretsSecretArgs{...} }
type SecretsSecretArrayInput interface {
	pulumi.Input

	ToSecretsSecretArrayOutput() SecretsSecretArrayOutput
	ToSecretsSecretArrayOutputWithContext(context.Context) SecretsSecretArrayOutput
}

type SecretsSecretArray []SecretsSecretInput

func (SecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsSecret)(nil)).Elem()
}

func (i SecretsSecretArray) ToSecretsSecretArrayOutput() SecretsSecretArrayOutput {
	return i.ToSecretsSecretArrayOutputWithContext(context.Background())
}

func (i SecretsSecretArray) ToSecretsSecretArrayOutputWithContext(ctx context.Context) SecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretsSecretArrayOutput)
}

type SecretsSecretOutput struct{ *pulumi.OutputState }

func (SecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecretsSecret)(nil)).Elem()
}

func (o SecretsSecretOutput) ToSecretsSecretOutput() SecretsSecretOutput {
	return o
}

func (o SecretsSecretOutput) ToSecretsSecretOutputWithContext(ctx context.Context) SecretsSecretOutput {
	return o
}

// The date when the keyring was created.
func (o SecretsSecretOutput) CreationDate() pulumi.IntOutput {
	return o.ApplyT(func(v SecretsSecret) int { return v.CreationDate }).(pulumi.IntOutput)
}

// The description of the secret.
func (o SecretsSecretOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.Description }).(pulumi.StringOutput)
}

// The TRN of the KMS key used to encrypt the secret value.
func (o SecretsSecretOutput) EncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.EncryptionKey }).(pulumi.StringOutput)
}

// The extended configurations of the secret.
func (o SecretsSecretOutput) ExtendedConfig() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.ExtendedConfig }).(pulumi.StringOutput)
}

// The unique ID of the secret. The value is in the UUID format.
func (o SecretsSecretOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.Id }).(pulumi.StringOutput)
}

// The last time the secret was rotated.
func (o SecretsSecretOutput) LastRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.LastRotationTime }).(pulumi.StringOutput)
}

// Indicates whether the secret is hosted.
func (o SecretsSecretOutput) Managed() pulumi.BoolOutput {
	return o.ApplyT(func(v SecretsSecret) bool { return v.Managed }).(pulumi.BoolOutput)
}

// The name of the project to which the secret belongs.
func (o SecretsSecretOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The interval at which automatic rotation is performed.
func (o SecretsSecretOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v SecretsSecret) int { return v.RotationInterval }).(pulumi.IntOutput)
}

// The state of the rotation.
func (o SecretsSecretOutput) RotationState() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.RotationState }).(pulumi.StringOutput)
}

// The time when the secret will be deleted.
func (o SecretsSecretOutput) ScheduleDeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.ScheduleDeleteTime }).(pulumi.StringOutput)
}

// The next time the secret will be rotated.
func (o SecretsSecretOutput) ScheduleRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.ScheduleRotationTime }).(pulumi.StringOutput)
}

// The name of the secret.
func (o SecretsSecretOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.SecretName }).(pulumi.StringOutput)
}

// The state of the secret.
func (o SecretsSecretOutput) SecretState() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.SecretState }).(pulumi.StringOutput)
}

// The type of the secret.
func (o SecretsSecretOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.SecretType }).(pulumi.StringOutput)
}

// The trn of the secret.
func (o SecretsSecretOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.Trn }).(pulumi.StringOutput)
}

// The tenant ID of the secret.
func (o SecretsSecretOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v SecretsSecret) string { return v.Uid }).(pulumi.StringOutput)
}

// The date when the keyring was updated.
func (o SecretsSecretOutput) UpdateDate() pulumi.IntOutput {
	return o.ApplyT(func(v SecretsSecret) int { return v.UpdateDate }).(pulumi.IntOutput)
}

type SecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (SecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SecretsSecret)(nil)).Elem()
}

func (o SecretsSecretArrayOutput) ToSecretsSecretArrayOutput() SecretsSecretArrayOutput {
	return o
}

func (o SecretsSecretArrayOutput) ToSecretsSecretArrayOutputWithContext(ctx context.Context) SecretsSecretArrayOutput {
	return o
}

func (o SecretsSecretArrayOutput) Index(i pulumi.IntInput) SecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SecretsSecret {
		return vs[0].([]SecretsSecret)[vs[1].(int)]
	}).(SecretsSecretOutput)
}

type GetKeyringsKeyring struct {
	// The date when the keyring was created.
	CreationDate int `pulumi:"creationDate"`
	// The description of the keyring.
	Description string `pulumi:"description"`
	// The unique ID of the keyring. The value is in the UUID format.
	Id string `pulumi:"id"`
	// Key ring key count.
	KeyCount int `pulumi:"keyCount"`
	// The name of the keyring.
	KeyringName string `pulumi:"keyringName"`
	// The type of the keyring.
	KeyringType string `pulumi:"keyringType"`
	// The information about the tenant resource name (TRN).
	Trn string `pulumi:"trn"`
	// The tenant ID of the keyring.
	Uid string `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate int `pulumi:"updateDate"`
}

// GetKeyringsKeyringInput is an input type that accepts GetKeyringsKeyringArgs and GetKeyringsKeyringOutput values.
// You can construct a concrete instance of `GetKeyringsKeyringInput` via:
//
//	GetKeyringsKeyringArgs{...}
type GetKeyringsKeyringInput interface {
	pulumi.Input

	ToGetKeyringsKeyringOutput() GetKeyringsKeyringOutput
	ToGetKeyringsKeyringOutputWithContext(context.Context) GetKeyringsKeyringOutput
}

type GetKeyringsKeyringArgs struct {
	// The date when the keyring was created.
	CreationDate pulumi.IntInput `pulumi:"creationDate"`
	// The description of the keyring.
	Description pulumi.StringInput `pulumi:"description"`
	// The unique ID of the keyring. The value is in the UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// Key ring key count.
	KeyCount pulumi.IntInput `pulumi:"keyCount"`
	// The name of the keyring.
	KeyringName pulumi.StringInput `pulumi:"keyringName"`
	// The type of the keyring.
	KeyringType pulumi.StringInput `pulumi:"keyringType"`
	// The information about the tenant resource name (TRN).
	Trn pulumi.StringInput `pulumi:"trn"`
	// The tenant ID of the keyring.
	Uid pulumi.StringInput `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate pulumi.IntInput `pulumi:"updateDate"`
}

func (GetKeyringsKeyringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyringsKeyring)(nil)).Elem()
}

func (i GetKeyringsKeyringArgs) ToGetKeyringsKeyringOutput() GetKeyringsKeyringOutput {
	return i.ToGetKeyringsKeyringOutputWithContext(context.Background())
}

func (i GetKeyringsKeyringArgs) ToGetKeyringsKeyringOutputWithContext(ctx context.Context) GetKeyringsKeyringOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyringsKeyringOutput)
}

// GetKeyringsKeyringArrayInput is an input type that accepts GetKeyringsKeyringArray and GetKeyringsKeyringArrayOutput values.
// You can construct a concrete instance of `GetKeyringsKeyringArrayInput` via:
//
//	GetKeyringsKeyringArray{ GetKeyringsKeyringArgs{...} }
type GetKeyringsKeyringArrayInput interface {
	pulumi.Input

	ToGetKeyringsKeyringArrayOutput() GetKeyringsKeyringArrayOutput
	ToGetKeyringsKeyringArrayOutputWithContext(context.Context) GetKeyringsKeyringArrayOutput
}

type GetKeyringsKeyringArray []GetKeyringsKeyringInput

func (GetKeyringsKeyringArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyringsKeyring)(nil)).Elem()
}

func (i GetKeyringsKeyringArray) ToGetKeyringsKeyringArrayOutput() GetKeyringsKeyringArrayOutput {
	return i.ToGetKeyringsKeyringArrayOutputWithContext(context.Background())
}

func (i GetKeyringsKeyringArray) ToGetKeyringsKeyringArrayOutputWithContext(ctx context.Context) GetKeyringsKeyringArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyringsKeyringArrayOutput)
}

type GetKeyringsKeyringOutput struct{ *pulumi.OutputState }

func (GetKeyringsKeyringOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyringsKeyring)(nil)).Elem()
}

func (o GetKeyringsKeyringOutput) ToGetKeyringsKeyringOutput() GetKeyringsKeyringOutput {
	return o
}

func (o GetKeyringsKeyringOutput) ToGetKeyringsKeyringOutputWithContext(ctx context.Context) GetKeyringsKeyringOutput {
	return o
}

// The date when the keyring was created.
func (o GetKeyringsKeyringOutput) CreationDate() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeyringsKeyring) int { return v.CreationDate }).(pulumi.IntOutput)
}

// The description of the keyring.
func (o GetKeyringsKeyringOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyringsKeyring) string { return v.Description }).(pulumi.StringOutput)
}

// The unique ID of the keyring. The value is in the UUID format.
func (o GetKeyringsKeyringOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyringsKeyring) string { return v.Id }).(pulumi.StringOutput)
}

// Key ring key count.
func (o GetKeyringsKeyringOutput) KeyCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeyringsKeyring) int { return v.KeyCount }).(pulumi.IntOutput)
}

// The name of the keyring.
func (o GetKeyringsKeyringOutput) KeyringName() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyringsKeyring) string { return v.KeyringName }).(pulumi.StringOutput)
}

// The type of the keyring.
func (o GetKeyringsKeyringOutput) KeyringType() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyringsKeyring) string { return v.KeyringType }).(pulumi.StringOutput)
}

// The information about the tenant resource name (TRN).
func (o GetKeyringsKeyringOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyringsKeyring) string { return v.Trn }).(pulumi.StringOutput)
}

// The tenant ID of the keyring.
func (o GetKeyringsKeyringOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyringsKeyring) string { return v.Uid }).(pulumi.StringOutput)
}

// The date when the keyring was updated.
func (o GetKeyringsKeyringOutput) UpdateDate() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeyringsKeyring) int { return v.UpdateDate }).(pulumi.IntOutput)
}

type GetKeyringsKeyringArrayOutput struct{ *pulumi.OutputState }

func (GetKeyringsKeyringArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyringsKeyring)(nil)).Elem()
}

func (o GetKeyringsKeyringArrayOutput) ToGetKeyringsKeyringArrayOutput() GetKeyringsKeyringArrayOutput {
	return o
}

func (o GetKeyringsKeyringArrayOutput) ToGetKeyringsKeyringArrayOutputWithContext(ctx context.Context) GetKeyringsKeyringArrayOutput {
	return o
}

func (o GetKeyringsKeyringArrayOutput) Index(i pulumi.IntInput) GetKeyringsKeyringOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeyringsKeyring {
		return vs[0].([]GetKeyringsKeyring)[vs[1].(int)]
	}).(GetKeyringsKeyringOutput)
}

type GetKeysKey struct {
	// The date when the keyring was created.
	CreationDate int `pulumi:"creationDate"`
	// The description of the key.
	Description string `pulumi:"description"`
	// The unique ID of the key.
	Id string `pulumi:"id"`
	// The time when the key material will expire.
	KeyMaterialExpireTime string `pulumi:"keyMaterialExpireTime"`
	// The name of the key.
	KeyName string `pulumi:"keyName"`
	// The algorithm used in the key.
	KeySpec string `pulumi:"keySpec"`
	// The state of the key.
	KeyState string `pulumi:"keyState"`
	// The usage of the key.
	KeyUsage string `pulumi:"keyUsage"`
	// The last time the key was rotated.
	LastRotationTime string `pulumi:"lastRotationTime"`
	// Whether it is the master key of the Multi-region type.
	MultiRegion bool `pulumi:"multiRegion"`
	// The configuration of Multi-region key.
	MultiRegionConfiguration GetKeysKeyMultiRegionConfiguration `pulumi:"multiRegionConfiguration"`
	// The origin of the key.
	Origin string `pulumi:"origin"`
	// The protection level of the key.
	ProtectionLevel string `pulumi:"protectionLevel"`
	// The rotation configuration of the key.
	RotationState string `pulumi:"rotationState"`
	// The time when the key will be deleted.
	ScheduleDeleteTime string `pulumi:"scheduleDeleteTime"`
	// The next time the key will be rotated.
	ScheduleRotationTime string `pulumi:"scheduleRotationTime"`
	// A list of tags.
	Tags []GetKeysKeyTag `pulumi:"tags"`
	// The name of the resource.
	Trn string `pulumi:"trn"`
	// The date when the keyring was updated.
	UpdateDate int `pulumi:"updateDate"`
}

// GetKeysKeyInput is an input type that accepts GetKeysKeyArgs and GetKeysKeyOutput values.
// You can construct a concrete instance of `GetKeysKeyInput` via:
//
//	GetKeysKeyArgs{...}
type GetKeysKeyInput interface {
	pulumi.Input

	ToGetKeysKeyOutput() GetKeysKeyOutput
	ToGetKeysKeyOutputWithContext(context.Context) GetKeysKeyOutput
}

type GetKeysKeyArgs struct {
	// The date when the keyring was created.
	CreationDate pulumi.IntInput `pulumi:"creationDate"`
	// The description of the key.
	Description pulumi.StringInput `pulumi:"description"`
	// The unique ID of the key.
	Id pulumi.StringInput `pulumi:"id"`
	// The time when the key material will expire.
	KeyMaterialExpireTime pulumi.StringInput `pulumi:"keyMaterialExpireTime"`
	// The name of the key.
	KeyName pulumi.StringInput `pulumi:"keyName"`
	// The algorithm used in the key.
	KeySpec pulumi.StringInput `pulumi:"keySpec"`
	// The state of the key.
	KeyState pulumi.StringInput `pulumi:"keyState"`
	// The usage of the key.
	KeyUsage pulumi.StringInput `pulumi:"keyUsage"`
	// The last time the key was rotated.
	LastRotationTime pulumi.StringInput `pulumi:"lastRotationTime"`
	// Whether it is the master key of the Multi-region type.
	MultiRegion pulumi.BoolInput `pulumi:"multiRegion"`
	// The configuration of Multi-region key.
	MultiRegionConfiguration GetKeysKeyMultiRegionConfigurationInput `pulumi:"multiRegionConfiguration"`
	// The origin of the key.
	Origin pulumi.StringInput `pulumi:"origin"`
	// The protection level of the key.
	ProtectionLevel pulumi.StringInput `pulumi:"protectionLevel"`
	// The rotation configuration of the key.
	RotationState pulumi.StringInput `pulumi:"rotationState"`
	// The time when the key will be deleted.
	ScheduleDeleteTime pulumi.StringInput `pulumi:"scheduleDeleteTime"`
	// The next time the key will be rotated.
	ScheduleRotationTime pulumi.StringInput `pulumi:"scheduleRotationTime"`
	// A list of tags.
	Tags GetKeysKeyTagArrayInput `pulumi:"tags"`
	// The name of the resource.
	Trn pulumi.StringInput `pulumi:"trn"`
	// The date when the keyring was updated.
	UpdateDate pulumi.IntInput `pulumi:"updateDate"`
}

func (GetKeysKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKey)(nil)).Elem()
}

func (i GetKeysKeyArgs) ToGetKeysKeyOutput() GetKeysKeyOutput {
	return i.ToGetKeysKeyOutputWithContext(context.Background())
}

func (i GetKeysKeyArgs) ToGetKeysKeyOutputWithContext(ctx context.Context) GetKeysKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyOutput)
}

// GetKeysKeyArrayInput is an input type that accepts GetKeysKeyArray and GetKeysKeyArrayOutput values.
// You can construct a concrete instance of `GetKeysKeyArrayInput` via:
//
//	GetKeysKeyArray{ GetKeysKeyArgs{...} }
type GetKeysKeyArrayInput interface {
	pulumi.Input

	ToGetKeysKeyArrayOutput() GetKeysKeyArrayOutput
	ToGetKeysKeyArrayOutputWithContext(context.Context) GetKeysKeyArrayOutput
}

type GetKeysKeyArray []GetKeysKeyInput

func (GetKeysKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKey)(nil)).Elem()
}

func (i GetKeysKeyArray) ToGetKeysKeyArrayOutput() GetKeysKeyArrayOutput {
	return i.ToGetKeysKeyArrayOutputWithContext(context.Background())
}

func (i GetKeysKeyArray) ToGetKeysKeyArrayOutputWithContext(ctx context.Context) GetKeysKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyArrayOutput)
}

type GetKeysKeyOutput struct{ *pulumi.OutputState }

func (GetKeysKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKey)(nil)).Elem()
}

func (o GetKeysKeyOutput) ToGetKeysKeyOutput() GetKeysKeyOutput {
	return o
}

func (o GetKeysKeyOutput) ToGetKeysKeyOutputWithContext(ctx context.Context) GetKeysKeyOutput {
	return o
}

// The date when the keyring was created.
func (o GetKeysKeyOutput) CreationDate() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeysKey) int { return v.CreationDate }).(pulumi.IntOutput)
}

// The description of the key.
func (o GetKeysKeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.Description }).(pulumi.StringOutput)
}

// The unique ID of the key.
func (o GetKeysKeyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.Id }).(pulumi.StringOutput)
}

// The time when the key material will expire.
func (o GetKeysKeyOutput) KeyMaterialExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.KeyMaterialExpireTime }).(pulumi.StringOutput)
}

// The name of the key.
func (o GetKeysKeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.KeyName }).(pulumi.StringOutput)
}

// The algorithm used in the key.
func (o GetKeysKeyOutput) KeySpec() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.KeySpec }).(pulumi.StringOutput)
}

// The state of the key.
func (o GetKeysKeyOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.KeyState }).(pulumi.StringOutput)
}

// The usage of the key.
func (o GetKeysKeyOutput) KeyUsage() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.KeyUsage }).(pulumi.StringOutput)
}

// The last time the key was rotated.
func (o GetKeysKeyOutput) LastRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.LastRotationTime }).(pulumi.StringOutput)
}

// Whether it is the master key of the Multi-region type.
func (o GetKeysKeyOutput) MultiRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v GetKeysKey) bool { return v.MultiRegion }).(pulumi.BoolOutput)
}

// The configuration of Multi-region key.
func (o GetKeysKeyOutput) MultiRegionConfiguration() GetKeysKeyMultiRegionConfigurationOutput {
	return o.ApplyT(func(v GetKeysKey) GetKeysKeyMultiRegionConfiguration { return v.MultiRegionConfiguration }).(GetKeysKeyMultiRegionConfigurationOutput)
}

// The origin of the key.
func (o GetKeysKeyOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.Origin }).(pulumi.StringOutput)
}

// The protection level of the key.
func (o GetKeysKeyOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.ProtectionLevel }).(pulumi.StringOutput)
}

// The rotation configuration of the key.
func (o GetKeysKeyOutput) RotationState() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.RotationState }).(pulumi.StringOutput)
}

// The time when the key will be deleted.
func (o GetKeysKeyOutput) ScheduleDeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.ScheduleDeleteTime }).(pulumi.StringOutput)
}

// The next time the key will be rotated.
func (o GetKeysKeyOutput) ScheduleRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.ScheduleRotationTime }).(pulumi.StringOutput)
}

// A list of tags.
func (o GetKeysKeyOutput) Tags() GetKeysKeyTagArrayOutput {
	return o.ApplyT(func(v GetKeysKey) []GetKeysKeyTag { return v.Tags }).(GetKeysKeyTagArrayOutput)
}

// The name of the resource.
func (o GetKeysKeyOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKey) string { return v.Trn }).(pulumi.StringOutput)
}

// The date when the keyring was updated.
func (o GetKeysKeyOutput) UpdateDate() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeysKey) int { return v.UpdateDate }).(pulumi.IntOutput)
}

type GetKeysKeyArrayOutput struct{ *pulumi.OutputState }

func (GetKeysKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKey)(nil)).Elem()
}

func (o GetKeysKeyArrayOutput) ToGetKeysKeyArrayOutput() GetKeysKeyArrayOutput {
	return o
}

func (o GetKeysKeyArrayOutput) ToGetKeysKeyArrayOutputWithContext(ctx context.Context) GetKeysKeyArrayOutput {
	return o
}

func (o GetKeysKeyArrayOutput) Index(i pulumi.IntInput) GetKeysKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeysKey {
		return vs[0].([]GetKeysKey)[vs[1].(int)]
	}).(GetKeysKeyOutput)
}

type GetKeysKeyMultiRegionConfiguration struct {
	// The type of the multi-region key.
	MultiRegionKeyType string `pulumi:"multiRegionKeyType"`
	// Trn and region id of the primary multi-region key.
	PrimaryKey GetKeysKeyMultiRegionConfigurationPrimaryKey `pulumi:"primaryKey"`
	// Trn and region id of replica multi-region keys.
	ReplicaKeys []GetKeysKeyMultiRegionConfigurationReplicaKey `pulumi:"replicaKeys"`
}

// GetKeysKeyMultiRegionConfigurationInput is an input type that accepts GetKeysKeyMultiRegionConfigurationArgs and GetKeysKeyMultiRegionConfigurationOutput values.
// You can construct a concrete instance of `GetKeysKeyMultiRegionConfigurationInput` via:
//
//	GetKeysKeyMultiRegionConfigurationArgs{...}
type GetKeysKeyMultiRegionConfigurationInput interface {
	pulumi.Input

	ToGetKeysKeyMultiRegionConfigurationOutput() GetKeysKeyMultiRegionConfigurationOutput
	ToGetKeysKeyMultiRegionConfigurationOutputWithContext(context.Context) GetKeysKeyMultiRegionConfigurationOutput
}

type GetKeysKeyMultiRegionConfigurationArgs struct {
	// The type of the multi-region key.
	MultiRegionKeyType pulumi.StringInput `pulumi:"multiRegionKeyType"`
	// Trn and region id of the primary multi-region key.
	PrimaryKey GetKeysKeyMultiRegionConfigurationPrimaryKeyInput `pulumi:"primaryKey"`
	// Trn and region id of replica multi-region keys.
	ReplicaKeys GetKeysKeyMultiRegionConfigurationReplicaKeyArrayInput `pulumi:"replicaKeys"`
}

func (GetKeysKeyMultiRegionConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeyMultiRegionConfiguration)(nil)).Elem()
}

func (i GetKeysKeyMultiRegionConfigurationArgs) ToGetKeysKeyMultiRegionConfigurationOutput() GetKeysKeyMultiRegionConfigurationOutput {
	return i.ToGetKeysKeyMultiRegionConfigurationOutputWithContext(context.Background())
}

func (i GetKeysKeyMultiRegionConfigurationArgs) ToGetKeysKeyMultiRegionConfigurationOutputWithContext(ctx context.Context) GetKeysKeyMultiRegionConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyMultiRegionConfigurationOutput)
}

type GetKeysKeyMultiRegionConfigurationOutput struct{ *pulumi.OutputState }

func (GetKeysKeyMultiRegionConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeyMultiRegionConfiguration)(nil)).Elem()
}

func (o GetKeysKeyMultiRegionConfigurationOutput) ToGetKeysKeyMultiRegionConfigurationOutput() GetKeysKeyMultiRegionConfigurationOutput {
	return o
}

func (o GetKeysKeyMultiRegionConfigurationOutput) ToGetKeysKeyMultiRegionConfigurationOutputWithContext(ctx context.Context) GetKeysKeyMultiRegionConfigurationOutput {
	return o
}

// The type of the multi-region key.
func (o GetKeysKeyMultiRegionConfigurationOutput) MultiRegionKeyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeyMultiRegionConfiguration) string { return v.MultiRegionKeyType }).(pulumi.StringOutput)
}

// Trn and region id of the primary multi-region key.
func (o GetKeysKeyMultiRegionConfigurationOutput) PrimaryKey() GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return o.ApplyT(func(v GetKeysKeyMultiRegionConfiguration) GetKeysKeyMultiRegionConfigurationPrimaryKey {
		return v.PrimaryKey
	}).(GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput)
}

// Trn and region id of replica multi-region keys.
func (o GetKeysKeyMultiRegionConfigurationOutput) ReplicaKeys() GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o.ApplyT(func(v GetKeysKeyMultiRegionConfiguration) []GetKeysKeyMultiRegionConfigurationReplicaKey {
		return v.ReplicaKeys
	}).(GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput)
}

type GetKeysKeyMultiRegionConfigurationPrimaryKey struct {
	// The region id of multi-region key.
	Region string `pulumi:"region"`
	// The name of the resource.
	Trn string `pulumi:"trn"`
}

// GetKeysKeyMultiRegionConfigurationPrimaryKeyInput is an input type that accepts GetKeysKeyMultiRegionConfigurationPrimaryKeyArgs and GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput values.
// You can construct a concrete instance of `GetKeysKeyMultiRegionConfigurationPrimaryKeyInput` via:
//
//	GetKeysKeyMultiRegionConfigurationPrimaryKeyArgs{...}
type GetKeysKeyMultiRegionConfigurationPrimaryKeyInput interface {
	pulumi.Input

	ToGetKeysKeyMultiRegionConfigurationPrimaryKeyOutput() GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput
	ToGetKeysKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(context.Context) GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput
}

type GetKeysKeyMultiRegionConfigurationPrimaryKeyArgs struct {
	// The region id of multi-region key.
	Region pulumi.StringInput `pulumi:"region"`
	// The name of the resource.
	Trn pulumi.StringInput `pulumi:"trn"`
}

func (GetKeysKeyMultiRegionConfigurationPrimaryKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (i GetKeysKeyMultiRegionConfigurationPrimaryKeyArgs) ToGetKeysKeyMultiRegionConfigurationPrimaryKeyOutput() GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return i.ToGetKeysKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(context.Background())
}

func (i GetKeysKeyMultiRegionConfigurationPrimaryKeyArgs) ToGetKeysKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(ctx context.Context) GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput)
}

type GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput struct{ *pulumi.OutputState }

func (GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeyMultiRegionConfigurationPrimaryKey)(nil)).Elem()
}

func (o GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput) ToGetKeysKeyMultiRegionConfigurationPrimaryKeyOutput() GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return o
}

func (o GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput) ToGetKeysKeyMultiRegionConfigurationPrimaryKeyOutputWithContext(ctx context.Context) GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput {
	return o
}

// The region id of multi-region key.
func (o GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeyMultiRegionConfigurationPrimaryKey) string { return v.Region }).(pulumi.StringOutput)
}

// The name of the resource.
func (o GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeyMultiRegionConfigurationPrimaryKey) string { return v.Trn }).(pulumi.StringOutput)
}

type GetKeysKeyMultiRegionConfigurationReplicaKey struct {
	// The region id of multi-region key.
	Region string `pulumi:"region"`
	// The name of the resource.
	Trn string `pulumi:"trn"`
}

// GetKeysKeyMultiRegionConfigurationReplicaKeyInput is an input type that accepts GetKeysKeyMultiRegionConfigurationReplicaKeyArgs and GetKeysKeyMultiRegionConfigurationReplicaKeyOutput values.
// You can construct a concrete instance of `GetKeysKeyMultiRegionConfigurationReplicaKeyInput` via:
//
//	GetKeysKeyMultiRegionConfigurationReplicaKeyArgs{...}
type GetKeysKeyMultiRegionConfigurationReplicaKeyInput interface {
	pulumi.Input

	ToGetKeysKeyMultiRegionConfigurationReplicaKeyOutput() GetKeysKeyMultiRegionConfigurationReplicaKeyOutput
	ToGetKeysKeyMultiRegionConfigurationReplicaKeyOutputWithContext(context.Context) GetKeysKeyMultiRegionConfigurationReplicaKeyOutput
}

type GetKeysKeyMultiRegionConfigurationReplicaKeyArgs struct {
	// The region id of multi-region key.
	Region pulumi.StringInput `pulumi:"region"`
	// The name of the resource.
	Trn pulumi.StringInput `pulumi:"trn"`
}

func (GetKeysKeyMultiRegionConfigurationReplicaKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (i GetKeysKeyMultiRegionConfigurationReplicaKeyArgs) ToGetKeysKeyMultiRegionConfigurationReplicaKeyOutput() GetKeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return i.ToGetKeysKeyMultiRegionConfigurationReplicaKeyOutputWithContext(context.Background())
}

func (i GetKeysKeyMultiRegionConfigurationReplicaKeyArgs) ToGetKeysKeyMultiRegionConfigurationReplicaKeyOutputWithContext(ctx context.Context) GetKeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyMultiRegionConfigurationReplicaKeyOutput)
}

// GetKeysKeyMultiRegionConfigurationReplicaKeyArrayInput is an input type that accepts GetKeysKeyMultiRegionConfigurationReplicaKeyArray and GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput values.
// You can construct a concrete instance of `GetKeysKeyMultiRegionConfigurationReplicaKeyArrayInput` via:
//
//	GetKeysKeyMultiRegionConfigurationReplicaKeyArray{ GetKeysKeyMultiRegionConfigurationReplicaKeyArgs{...} }
type GetKeysKeyMultiRegionConfigurationReplicaKeyArrayInput interface {
	pulumi.Input

	ToGetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput() GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput
	ToGetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(context.Context) GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput
}

type GetKeysKeyMultiRegionConfigurationReplicaKeyArray []GetKeysKeyMultiRegionConfigurationReplicaKeyInput

func (GetKeysKeyMultiRegionConfigurationReplicaKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (i GetKeysKeyMultiRegionConfigurationReplicaKeyArray) ToGetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput() GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return i.ToGetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(context.Background())
}

func (i GetKeysKeyMultiRegionConfigurationReplicaKeyArray) ToGetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(ctx context.Context) GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput)
}

type GetKeysKeyMultiRegionConfigurationReplicaKeyOutput struct{ *pulumi.OutputState }

func (GetKeysKeyMultiRegionConfigurationReplicaKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (o GetKeysKeyMultiRegionConfigurationReplicaKeyOutput) ToGetKeysKeyMultiRegionConfigurationReplicaKeyOutput() GetKeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return o
}

func (o GetKeysKeyMultiRegionConfigurationReplicaKeyOutput) ToGetKeysKeyMultiRegionConfigurationReplicaKeyOutputWithContext(ctx context.Context) GetKeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return o
}

// The region id of multi-region key.
func (o GetKeysKeyMultiRegionConfigurationReplicaKeyOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeyMultiRegionConfigurationReplicaKey) string { return v.Region }).(pulumi.StringOutput)
}

// The name of the resource.
func (o GetKeysKeyMultiRegionConfigurationReplicaKeyOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeyMultiRegionConfigurationReplicaKey) string { return v.Trn }).(pulumi.StringOutput)
}

type GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput struct{ *pulumi.OutputState }

func (GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKeyMultiRegionConfigurationReplicaKey)(nil)).Elem()
}

func (o GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput) ToGetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput() GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o
}

func (o GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput) ToGetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutputWithContext(ctx context.Context) GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput {
	return o
}

func (o GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput) Index(i pulumi.IntInput) GetKeysKeyMultiRegionConfigurationReplicaKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeysKeyMultiRegionConfigurationReplicaKey {
		return vs[0].([]GetKeysKeyMultiRegionConfigurationReplicaKey)[vs[1].(int)]
	}).(GetKeysKeyMultiRegionConfigurationReplicaKeyOutput)
}

type GetKeysKeyTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetKeysKeyTagInput is an input type that accepts GetKeysKeyTagArgs and GetKeysKeyTagOutput values.
// You can construct a concrete instance of `GetKeysKeyTagInput` via:
//
//	GetKeysKeyTagArgs{...}
type GetKeysKeyTagInput interface {
	pulumi.Input

	ToGetKeysKeyTagOutput() GetKeysKeyTagOutput
	ToGetKeysKeyTagOutputWithContext(context.Context) GetKeysKeyTagOutput
}

type GetKeysKeyTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetKeysKeyTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeyTag)(nil)).Elem()
}

func (i GetKeysKeyTagArgs) ToGetKeysKeyTagOutput() GetKeysKeyTagOutput {
	return i.ToGetKeysKeyTagOutputWithContext(context.Background())
}

func (i GetKeysKeyTagArgs) ToGetKeysKeyTagOutputWithContext(ctx context.Context) GetKeysKeyTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyTagOutput)
}

// GetKeysKeyTagArrayInput is an input type that accepts GetKeysKeyTagArray and GetKeysKeyTagArrayOutput values.
// You can construct a concrete instance of `GetKeysKeyTagArrayInput` via:
//
//	GetKeysKeyTagArray{ GetKeysKeyTagArgs{...} }
type GetKeysKeyTagArrayInput interface {
	pulumi.Input

	ToGetKeysKeyTagArrayOutput() GetKeysKeyTagArrayOutput
	ToGetKeysKeyTagArrayOutputWithContext(context.Context) GetKeysKeyTagArrayOutput
}

type GetKeysKeyTagArray []GetKeysKeyTagInput

func (GetKeysKeyTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKeyTag)(nil)).Elem()
}

func (i GetKeysKeyTagArray) ToGetKeysKeyTagArrayOutput() GetKeysKeyTagArrayOutput {
	return i.ToGetKeysKeyTagArrayOutputWithContext(context.Background())
}

func (i GetKeysKeyTagArray) ToGetKeysKeyTagArrayOutputWithContext(ctx context.Context) GetKeysKeyTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysKeyTagArrayOutput)
}

type GetKeysKeyTagOutput struct{ *pulumi.OutputState }

func (GetKeysKeyTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysKeyTag)(nil)).Elem()
}

func (o GetKeysKeyTagOutput) ToGetKeysKeyTagOutput() GetKeysKeyTagOutput {
	return o
}

func (o GetKeysKeyTagOutput) ToGetKeysKeyTagOutputWithContext(ctx context.Context) GetKeysKeyTagOutput {
	return o
}

// The key of the tag.
func (o GetKeysKeyTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeyTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetKeysKeyTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysKeyTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetKeysKeyTagArrayOutput struct{ *pulumi.OutputState }

func (GetKeysKeyTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysKeyTag)(nil)).Elem()
}

func (o GetKeysKeyTagArrayOutput) ToGetKeysKeyTagArrayOutput() GetKeysKeyTagArrayOutput {
	return o
}

func (o GetKeysKeyTagArrayOutput) ToGetKeysKeyTagArrayOutputWithContext(ctx context.Context) GetKeysKeyTagArrayOutput {
	return o
}

func (o GetKeysKeyTagArrayOutput) Index(i pulumi.IntInput) GetKeysKeyTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeysKeyTag {
		return vs[0].([]GetKeysKeyTag)[vs[1].(int)]
	}).(GetKeysKeyTagOutput)
}

type GetKeysTag struct {
	// The key of the tag.
	Key string `pulumi:"key"`
	// The values of the tag.
	Values []string `pulumi:"values"`
}

// GetKeysTagInput is an input type that accepts GetKeysTagArgs and GetKeysTagOutput values.
// You can construct a concrete instance of `GetKeysTagInput` via:
//
//	GetKeysTagArgs{...}
type GetKeysTagInput interface {
	pulumi.Input

	ToGetKeysTagOutput() GetKeysTagOutput
	ToGetKeysTagOutputWithContext(context.Context) GetKeysTagOutput
}

type GetKeysTagArgs struct {
	// The key of the tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The values of the tag.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetKeysTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysTag)(nil)).Elem()
}

func (i GetKeysTagArgs) ToGetKeysTagOutput() GetKeysTagOutput {
	return i.ToGetKeysTagOutputWithContext(context.Background())
}

func (i GetKeysTagArgs) ToGetKeysTagOutputWithContext(ctx context.Context) GetKeysTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysTagOutput)
}

// GetKeysTagArrayInput is an input type that accepts GetKeysTagArray and GetKeysTagArrayOutput values.
// You can construct a concrete instance of `GetKeysTagArrayInput` via:
//
//	GetKeysTagArray{ GetKeysTagArgs{...} }
type GetKeysTagArrayInput interface {
	pulumi.Input

	ToGetKeysTagArrayOutput() GetKeysTagArrayOutput
	ToGetKeysTagArrayOutputWithContext(context.Context) GetKeysTagArrayOutput
}

type GetKeysTagArray []GetKeysTagInput

func (GetKeysTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysTag)(nil)).Elem()
}

func (i GetKeysTagArray) ToGetKeysTagArrayOutput() GetKeysTagArrayOutput {
	return i.ToGetKeysTagArrayOutputWithContext(context.Background())
}

func (i GetKeysTagArray) ToGetKeysTagArrayOutputWithContext(ctx context.Context) GetKeysTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeysTagArrayOutput)
}

type GetKeysTagOutput struct{ *pulumi.OutputState }

func (GetKeysTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeysTag)(nil)).Elem()
}

func (o GetKeysTagOutput) ToGetKeysTagOutput() GetKeysTagOutput {
	return o
}

func (o GetKeysTagOutput) ToGetKeysTagOutputWithContext(ctx context.Context) GetKeysTagOutput {
	return o
}

// The key of the tag.
func (o GetKeysTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeysTag) string { return v.Key }).(pulumi.StringOutput)
}

// The values of the tag.
func (o GetKeysTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeysTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetKeysTagArrayOutput struct{ *pulumi.OutputState }

func (GetKeysTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeysTag)(nil)).Elem()
}

func (o GetKeysTagArrayOutput) ToGetKeysTagArrayOutput() GetKeysTagArrayOutput {
	return o
}

func (o GetKeysTagArrayOutput) ToGetKeysTagArrayOutputWithContext(ctx context.Context) GetKeysTagArrayOutput {
	return o
}

func (o GetKeysTagArrayOutput) Index(i pulumi.IntInput) GetKeysTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeysTag {
		return vs[0].([]GetKeysTag)[vs[1].(int)]
	}).(GetKeysTagOutput)
}

type GetSecretsSecret struct {
	// The date when the keyring was created.
	CreationDate int `pulumi:"creationDate"`
	// The description of the secret.
	Description string `pulumi:"description"`
	// The TRN of the KMS key used to encrypt the secret value.
	EncryptionKey string `pulumi:"encryptionKey"`
	// The extended configurations of the secret.
	ExtendedConfig string `pulumi:"extendedConfig"`
	// The unique ID of the secret. The value is in the UUID format.
	Id string `pulumi:"id"`
	// The last time the secret was rotated.
	LastRotationTime string `pulumi:"lastRotationTime"`
	// Indicates whether the secret is hosted.
	Managed bool `pulumi:"managed"`
	// The name of the project to which the secret belongs.
	ProjectName string `pulumi:"projectName"`
	// The interval at which automatic rotation is performed.
	RotationInterval int `pulumi:"rotationInterval"`
	// The state of the rotation.
	RotationState string `pulumi:"rotationState"`
	// The time when the secret will be deleted.
	ScheduleDeleteTime string `pulumi:"scheduleDeleteTime"`
	// The next time the secret will be rotated.
	ScheduleRotationTime string `pulumi:"scheduleRotationTime"`
	// The name of the secret.
	SecretName string `pulumi:"secretName"`
	// The state of the secret.
	SecretState string `pulumi:"secretState"`
	// The type of the secret.
	SecretType string `pulumi:"secretType"`
	// The trn of the secret.
	Trn string `pulumi:"trn"`
	// The tenant ID of the secret.
	Uid string `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate int `pulumi:"updateDate"`
}

// GetSecretsSecretInput is an input type that accepts GetSecretsSecretArgs and GetSecretsSecretOutput values.
// You can construct a concrete instance of `GetSecretsSecretInput` via:
//
//	GetSecretsSecretArgs{...}
type GetSecretsSecretInput interface {
	pulumi.Input

	ToGetSecretsSecretOutput() GetSecretsSecretOutput
	ToGetSecretsSecretOutputWithContext(context.Context) GetSecretsSecretOutput
}

type GetSecretsSecretArgs struct {
	// The date when the keyring was created.
	CreationDate pulumi.IntInput `pulumi:"creationDate"`
	// The description of the secret.
	Description pulumi.StringInput `pulumi:"description"`
	// The TRN of the KMS key used to encrypt the secret value.
	EncryptionKey pulumi.StringInput `pulumi:"encryptionKey"`
	// The extended configurations of the secret.
	ExtendedConfig pulumi.StringInput `pulumi:"extendedConfig"`
	// The unique ID of the secret. The value is in the UUID format.
	Id pulumi.StringInput `pulumi:"id"`
	// The last time the secret was rotated.
	LastRotationTime pulumi.StringInput `pulumi:"lastRotationTime"`
	// Indicates whether the secret is hosted.
	Managed pulumi.BoolInput `pulumi:"managed"`
	// The name of the project to which the secret belongs.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The interval at which automatic rotation is performed.
	RotationInterval pulumi.IntInput `pulumi:"rotationInterval"`
	// The state of the rotation.
	RotationState pulumi.StringInput `pulumi:"rotationState"`
	// The time when the secret will be deleted.
	ScheduleDeleteTime pulumi.StringInput `pulumi:"scheduleDeleteTime"`
	// The next time the secret will be rotated.
	ScheduleRotationTime pulumi.StringInput `pulumi:"scheduleRotationTime"`
	// The name of the secret.
	SecretName pulumi.StringInput `pulumi:"secretName"`
	// The state of the secret.
	SecretState pulumi.StringInput `pulumi:"secretState"`
	// The type of the secret.
	SecretType pulumi.StringInput `pulumi:"secretType"`
	// The trn of the secret.
	Trn pulumi.StringInput `pulumi:"trn"`
	// The tenant ID of the secret.
	Uid pulumi.StringInput `pulumi:"uid"`
	// The date when the keyring was updated.
	UpdateDate pulumi.IntInput `pulumi:"updateDate"`
}

func (GetSecretsSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsSecret)(nil)).Elem()
}

func (i GetSecretsSecretArgs) ToGetSecretsSecretOutput() GetSecretsSecretOutput {
	return i.ToGetSecretsSecretOutputWithContext(context.Background())
}

func (i GetSecretsSecretArgs) ToGetSecretsSecretOutputWithContext(ctx context.Context) GetSecretsSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsSecretOutput)
}

// GetSecretsSecretArrayInput is an input type that accepts GetSecretsSecretArray and GetSecretsSecretArrayOutput values.
// You can construct a concrete instance of `GetSecretsSecretArrayInput` via:
//
//	GetSecretsSecretArray{ GetSecretsSecretArgs{...} }
type GetSecretsSecretArrayInput interface {
	pulumi.Input

	ToGetSecretsSecretArrayOutput() GetSecretsSecretArrayOutput
	ToGetSecretsSecretArrayOutputWithContext(context.Context) GetSecretsSecretArrayOutput
}

type GetSecretsSecretArray []GetSecretsSecretInput

func (GetSecretsSecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretsSecret)(nil)).Elem()
}

func (i GetSecretsSecretArray) ToGetSecretsSecretArrayOutput() GetSecretsSecretArrayOutput {
	return i.ToGetSecretsSecretArrayOutputWithContext(context.Background())
}

func (i GetSecretsSecretArray) ToGetSecretsSecretArrayOutputWithContext(ctx context.Context) GetSecretsSecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSecretsSecretArrayOutput)
}

type GetSecretsSecretOutput struct{ *pulumi.OutputState }

func (GetSecretsSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSecretsSecret)(nil)).Elem()
}

func (o GetSecretsSecretOutput) ToGetSecretsSecretOutput() GetSecretsSecretOutput {
	return o
}

func (o GetSecretsSecretOutput) ToGetSecretsSecretOutputWithContext(ctx context.Context) GetSecretsSecretOutput {
	return o
}

// The date when the keyring was created.
func (o GetSecretsSecretOutput) CreationDate() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecretsSecret) int { return v.CreationDate }).(pulumi.IntOutput)
}

// The description of the secret.
func (o GetSecretsSecretOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.Description }).(pulumi.StringOutput)
}

// The TRN of the KMS key used to encrypt the secret value.
func (o GetSecretsSecretOutput) EncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.EncryptionKey }).(pulumi.StringOutput)
}

// The extended configurations of the secret.
func (o GetSecretsSecretOutput) ExtendedConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.ExtendedConfig }).(pulumi.StringOutput)
}

// The unique ID of the secret. The value is in the UUID format.
func (o GetSecretsSecretOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.Id }).(pulumi.StringOutput)
}

// The last time the secret was rotated.
func (o GetSecretsSecretOutput) LastRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.LastRotationTime }).(pulumi.StringOutput)
}

// Indicates whether the secret is hosted.
func (o GetSecretsSecretOutput) Managed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSecretsSecret) bool { return v.Managed }).(pulumi.BoolOutput)
}

// The name of the project to which the secret belongs.
func (o GetSecretsSecretOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The interval at which automatic rotation is performed.
func (o GetSecretsSecretOutput) RotationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecretsSecret) int { return v.RotationInterval }).(pulumi.IntOutput)
}

// The state of the rotation.
func (o GetSecretsSecretOutput) RotationState() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.RotationState }).(pulumi.StringOutput)
}

// The time when the secret will be deleted.
func (o GetSecretsSecretOutput) ScheduleDeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.ScheduleDeleteTime }).(pulumi.StringOutput)
}

// The next time the secret will be rotated.
func (o GetSecretsSecretOutput) ScheduleRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.ScheduleRotationTime }).(pulumi.StringOutput)
}

// The name of the secret.
func (o GetSecretsSecretOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.SecretName }).(pulumi.StringOutput)
}

// The state of the secret.
func (o GetSecretsSecretOutput) SecretState() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.SecretState }).(pulumi.StringOutput)
}

// The type of the secret.
func (o GetSecretsSecretOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.SecretType }).(pulumi.StringOutput)
}

// The trn of the secret.
func (o GetSecretsSecretOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.Trn }).(pulumi.StringOutput)
}

// The tenant ID of the secret.
func (o GetSecretsSecretOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetSecretsSecret) string { return v.Uid }).(pulumi.StringOutput)
}

// The date when the keyring was updated.
func (o GetSecretsSecretOutput) UpdateDate() pulumi.IntOutput {
	return o.ApplyT(func(v GetSecretsSecret) int { return v.UpdateDate }).(pulumi.IntOutput)
}

type GetSecretsSecretArrayOutput struct{ *pulumi.OutputState }

func (GetSecretsSecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSecretsSecret)(nil)).Elem()
}

func (o GetSecretsSecretArrayOutput) ToGetSecretsSecretArrayOutput() GetSecretsSecretArrayOutput {
	return o
}

func (o GetSecretsSecretArrayOutput) ToGetSecretsSecretArrayOutputWithContext(ctx context.Context) GetSecretsSecretArrayOutput {
	return o
}

func (o GetSecretsSecretArrayOutput) Index(i pulumi.IntInput) GetSecretsSecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSecretsSecret {
		return vs[0].([]GetSecretsSecret)[vs[1].(int)]
	}).(GetSecretsSecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMultiRegionConfigurationInput)(nil)).Elem(), KeyMultiRegionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMultiRegionConfigurationPtrInput)(nil)).Elem(), KeyMultiRegionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMultiRegionConfigurationPrimaryKeyInput)(nil)).Elem(), KeyMultiRegionConfigurationPrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMultiRegionConfigurationPrimaryKeyPtrInput)(nil)).Elem(), KeyMultiRegionConfigurationPrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMultiRegionConfigurationReplicaKeyInput)(nil)).Elem(), KeyMultiRegionConfigurationReplicaKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMultiRegionConfigurationReplicaKeyArrayInput)(nil)).Elem(), KeyMultiRegionConfigurationReplicaKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyTagInput)(nil)).Elem(), KeyTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyTagArrayInput)(nil)).Elem(), KeyTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyringsKeyringInput)(nil)).Elem(), KeyringsKeyringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyringsKeyringArrayInput)(nil)).Elem(), KeyringsKeyringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyInput)(nil)).Elem(), KeysKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyArrayInput)(nil)).Elem(), KeysKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyMultiRegionConfigurationInput)(nil)).Elem(), KeysKeyMultiRegionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyMultiRegionConfigurationPrimaryKeyInput)(nil)).Elem(), KeysKeyMultiRegionConfigurationPrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyMultiRegionConfigurationReplicaKeyInput)(nil)).Elem(), KeysKeyMultiRegionConfigurationReplicaKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyMultiRegionConfigurationReplicaKeyArrayInput)(nil)).Elem(), KeysKeyMultiRegionConfigurationReplicaKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyTagInput)(nil)).Elem(), KeysKeyTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysKeyTagArrayInput)(nil)).Elem(), KeysKeyTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysTagInput)(nil)).Elem(), KeysTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeysTagArrayInput)(nil)).Elem(), KeysTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsSecretInput)(nil)).Elem(), SecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretsSecretArrayInput)(nil)).Elem(), SecretsSecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyringsKeyringInput)(nil)).Elem(), GetKeyringsKeyringArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyringsKeyringArrayInput)(nil)).Elem(), GetKeyringsKeyringArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysKeyInput)(nil)).Elem(), GetKeysKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysKeyArrayInput)(nil)).Elem(), GetKeysKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysKeyMultiRegionConfigurationInput)(nil)).Elem(), GetKeysKeyMultiRegionConfigurationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysKeyMultiRegionConfigurationPrimaryKeyInput)(nil)).Elem(), GetKeysKeyMultiRegionConfigurationPrimaryKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysKeyMultiRegionConfigurationReplicaKeyInput)(nil)).Elem(), GetKeysKeyMultiRegionConfigurationReplicaKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysKeyMultiRegionConfigurationReplicaKeyArrayInput)(nil)).Elem(), GetKeysKeyMultiRegionConfigurationReplicaKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysKeyTagInput)(nil)).Elem(), GetKeysKeyTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysKeyTagArrayInput)(nil)).Elem(), GetKeysKeyTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysTagInput)(nil)).Elem(), GetKeysTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeysTagArrayInput)(nil)).Elem(), GetKeysTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretsSecretInput)(nil)).Elem(), GetSecretsSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSecretsSecretArrayInput)(nil)).Elem(), GetSecretsSecretArray{})
	pulumi.RegisterOutputType(KeyMultiRegionConfigurationOutput{})
	pulumi.RegisterOutputType(KeyMultiRegionConfigurationPtrOutput{})
	pulumi.RegisterOutputType(KeyMultiRegionConfigurationPrimaryKeyOutput{})
	pulumi.RegisterOutputType(KeyMultiRegionConfigurationPrimaryKeyPtrOutput{})
	pulumi.RegisterOutputType(KeyMultiRegionConfigurationReplicaKeyOutput{})
	pulumi.RegisterOutputType(KeyMultiRegionConfigurationReplicaKeyArrayOutput{})
	pulumi.RegisterOutputType(KeyTagOutput{})
	pulumi.RegisterOutputType(KeyTagArrayOutput{})
	pulumi.RegisterOutputType(KeyringsKeyringOutput{})
	pulumi.RegisterOutputType(KeyringsKeyringArrayOutput{})
	pulumi.RegisterOutputType(KeysKeyOutput{})
	pulumi.RegisterOutputType(KeysKeyArrayOutput{})
	pulumi.RegisterOutputType(KeysKeyMultiRegionConfigurationOutput{})
	pulumi.RegisterOutputType(KeysKeyMultiRegionConfigurationPrimaryKeyOutput{})
	pulumi.RegisterOutputType(KeysKeyMultiRegionConfigurationReplicaKeyOutput{})
	pulumi.RegisterOutputType(KeysKeyMultiRegionConfigurationReplicaKeyArrayOutput{})
	pulumi.RegisterOutputType(KeysKeyTagOutput{})
	pulumi.RegisterOutputType(KeysKeyTagArrayOutput{})
	pulumi.RegisterOutputType(KeysTagOutput{})
	pulumi.RegisterOutputType(KeysTagArrayOutput{})
	pulumi.RegisterOutputType(SecretsSecretOutput{})
	pulumi.RegisterOutputType(SecretsSecretArrayOutput{})
	pulumi.RegisterOutputType(GetKeyringsKeyringOutput{})
	pulumi.RegisterOutputType(GetKeyringsKeyringArrayOutput{})
	pulumi.RegisterOutputType(GetKeysKeyOutput{})
	pulumi.RegisterOutputType(GetKeysKeyArrayOutput{})
	pulumi.RegisterOutputType(GetKeysKeyMultiRegionConfigurationOutput{})
	pulumi.RegisterOutputType(GetKeysKeyMultiRegionConfigurationPrimaryKeyOutput{})
	pulumi.RegisterOutputType(GetKeysKeyMultiRegionConfigurationReplicaKeyOutput{})
	pulumi.RegisterOutputType(GetKeysKeyMultiRegionConfigurationReplicaKeyArrayOutput{})
	pulumi.RegisterOutputType(GetKeysKeyTagOutput{})
	pulumi.RegisterOutputType(GetKeysKeyTagArrayOutput{})
	pulumi.RegisterOutputType(GetKeysTagOutput{})
	pulumi.RegisterOutputType(GetKeysTagArrayOutput{})
	pulumi.RegisterOutputType(GetSecretsSecretOutput{})
	pulumi.RegisterOutputType(GetSecretsSecretArrayOutput{})
}
