// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage kms key
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kms"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooKeyring, err := kms.NewKeyring(ctx, "fooKeyring", &kms.KeyringArgs{
//				KeyringName: pulumi.String("tf-test"),
//				Description: pulumi.String("tf-test"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewKey(ctx, "fooKey", &kms.KeyArgs{
//				KeyringName: fooKeyring.KeyringName,
//				KeyName:     pulumi.String("mrk-tf-key-mod"),
//				Description: pulumi.String("tf test key-mod"),
//				Tags: kms.KeyTagArray{
//					&kms.KeyTagArgs{
//						Key:   pulumi.String("tfkey3"),
//						Value: pulumi.String("tfvalue3"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// KmsKey can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:kms/key:Key default resource_id
// ```
type Key struct {
	pulumi.CustomResourceState

	// The date when the keyring was created.
	CreationDate pulumi.IntOutput `pulumi:"creationDate"`
	// The description of the key.
	Description pulumi.StringOutput `pulumi:"description"`
	// The time when the key material will expire.
	KeyMaterialExpireTime pulumi.StringOutput `pulumi:"keyMaterialExpireTime"`
	// The name of the CMK.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The type of the keys.
	KeySpec pulumi.StringOutput `pulumi:"keySpec"`
	// The usage of the key.
	KeyUsage pulumi.StringOutput `pulumi:"keyUsage"`
	// The name of the keyring.
	KeyringName pulumi.StringOutput `pulumi:"keyringName"`
	// The last time the key was rotated.
	LastRotationTime pulumi.StringOutput `pulumi:"lastRotationTime"`
	// Whether it is the master key of the Multi-region type.
	MultiRegion pulumi.BoolOutput `pulumi:"multiRegion"`
	// The configuration of Multi-region key.
	MultiRegionConfiguration KeyMultiRegionConfigurationOutput `pulumi:"multiRegionConfiguration"`
	// The origin of the key.
	Origin pulumi.StringOutput `pulumi:"origin"`
	// The pre-deletion cycle of the key.
	PendingWindowInDays pulumi.IntPtrOutput `pulumi:"pendingWindowInDays"`
	// The protection level of the key.
	ProtectionLevel pulumi.StringOutput `pulumi:"protectionLevel"`
	// The rotation state of the key.
	RotateState pulumi.StringPtrOutput `pulumi:"rotateState"`
	// The rotation configuration of the key.
	RotationState pulumi.StringOutput `pulumi:"rotationState"`
	// The time when the key will be deleted.
	ScheduleDeleteTime pulumi.StringOutput `pulumi:"scheduleDeleteTime"`
	// The next time the key will be rotated.
	ScheduleRotationTime pulumi.StringOutput `pulumi:"scheduleRotationTime"`
	// The state of the key.
	State pulumi.StringOutput `pulumi:"state"`
	// Tags.
	Tags KeyTagArrayOutput `pulumi:"tags"`
	// The name of the resource.
	Trn pulumi.StringOutput `pulumi:"trn"`
	// The date when the keyring was updated.
	UpdateDate pulumi.IntOutput `pulumi:"updateDate"`
}

// NewKey registers a new resource with the given unique name, arguments, and options.
func NewKey(ctx *pulumi.Context,
	name string, args *KeyArgs, opts ...pulumi.ResourceOption) (*Key, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyName == nil {
		return nil, errors.New("invalid value for required argument 'KeyName'")
	}
	if args.KeyringName == nil {
		return nil, errors.New("invalid value for required argument 'KeyringName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Key
	err := ctx.RegisterResource("volcengine:kms/key:Key", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKey gets an existing Key resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyState, opts ...pulumi.ResourceOption) (*Key, error) {
	var resource Key
	err := ctx.ReadResource("volcengine:kms/key:Key", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Key resources.
type keyState struct {
	// The date when the keyring was created.
	CreationDate *int `pulumi:"creationDate"`
	// The description of the key.
	Description *string `pulumi:"description"`
	// The time when the key material will expire.
	KeyMaterialExpireTime *string `pulumi:"keyMaterialExpireTime"`
	// The name of the CMK.
	KeyName *string `pulumi:"keyName"`
	// The type of the keys.
	KeySpec *string `pulumi:"keySpec"`
	// The usage of the key.
	KeyUsage *string `pulumi:"keyUsage"`
	// The name of the keyring.
	KeyringName *string `pulumi:"keyringName"`
	// The last time the key was rotated.
	LastRotationTime *string `pulumi:"lastRotationTime"`
	// Whether it is the master key of the Multi-region type.
	MultiRegion *bool `pulumi:"multiRegion"`
	// The configuration of Multi-region key.
	MultiRegionConfiguration *KeyMultiRegionConfiguration `pulumi:"multiRegionConfiguration"`
	// The origin of the key.
	Origin *string `pulumi:"origin"`
	// The pre-deletion cycle of the key.
	PendingWindowInDays *int `pulumi:"pendingWindowInDays"`
	// The protection level of the key.
	ProtectionLevel *string `pulumi:"protectionLevel"`
	// The rotation state of the key.
	RotateState *string `pulumi:"rotateState"`
	// The rotation configuration of the key.
	RotationState *string `pulumi:"rotationState"`
	// The time when the key will be deleted.
	ScheduleDeleteTime *string `pulumi:"scheduleDeleteTime"`
	// The next time the key will be rotated.
	ScheduleRotationTime *string `pulumi:"scheduleRotationTime"`
	// The state of the key.
	State *string `pulumi:"state"`
	// Tags.
	Tags []KeyTag `pulumi:"tags"`
	// The name of the resource.
	Trn *string `pulumi:"trn"`
	// The date when the keyring was updated.
	UpdateDate *int `pulumi:"updateDate"`
}

type KeyState struct {
	// The date when the keyring was created.
	CreationDate pulumi.IntPtrInput
	// The description of the key.
	Description pulumi.StringPtrInput
	// The time when the key material will expire.
	KeyMaterialExpireTime pulumi.StringPtrInput
	// The name of the CMK.
	KeyName pulumi.StringPtrInput
	// The type of the keys.
	KeySpec pulumi.StringPtrInput
	// The usage of the key.
	KeyUsage pulumi.StringPtrInput
	// The name of the keyring.
	KeyringName pulumi.StringPtrInput
	// The last time the key was rotated.
	LastRotationTime pulumi.StringPtrInput
	// Whether it is the master key of the Multi-region type.
	MultiRegion pulumi.BoolPtrInput
	// The configuration of Multi-region key.
	MultiRegionConfiguration KeyMultiRegionConfigurationPtrInput
	// The origin of the key.
	Origin pulumi.StringPtrInput
	// The pre-deletion cycle of the key.
	PendingWindowInDays pulumi.IntPtrInput
	// The protection level of the key.
	ProtectionLevel pulumi.StringPtrInput
	// The rotation state of the key.
	RotateState pulumi.StringPtrInput
	// The rotation configuration of the key.
	RotationState pulumi.StringPtrInput
	// The time when the key will be deleted.
	ScheduleDeleteTime pulumi.StringPtrInput
	// The next time the key will be rotated.
	ScheduleRotationTime pulumi.StringPtrInput
	// The state of the key.
	State pulumi.StringPtrInput
	// Tags.
	Tags KeyTagArrayInput
	// The name of the resource.
	Trn pulumi.StringPtrInput
	// The date when the keyring was updated.
	UpdateDate pulumi.IntPtrInput
}

func (KeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyState)(nil)).Elem()
}

type keyArgs struct {
	// The description of the key.
	Description *string `pulumi:"description"`
	// The name of the CMK.
	KeyName string `pulumi:"keyName"`
	// The type of the keys.
	KeySpec *string `pulumi:"keySpec"`
	// The usage of the key.
	KeyUsage *string `pulumi:"keyUsage"`
	// The name of the keyring.
	KeyringName string `pulumi:"keyringName"`
	// Whether it is the master key of the Multi-region type.
	MultiRegion *bool `pulumi:"multiRegion"`
	// The origin of the key.
	Origin *string `pulumi:"origin"`
	// The pre-deletion cycle of the key.
	PendingWindowInDays *int `pulumi:"pendingWindowInDays"`
	// The protection level of the key.
	ProtectionLevel *string `pulumi:"protectionLevel"`
	// The rotation state of the key.
	RotateState *string `pulumi:"rotateState"`
	// Tags.
	Tags []KeyTag `pulumi:"tags"`
}

// The set of arguments for constructing a Key resource.
type KeyArgs struct {
	// The description of the key.
	Description pulumi.StringPtrInput
	// The name of the CMK.
	KeyName pulumi.StringInput
	// The type of the keys.
	KeySpec pulumi.StringPtrInput
	// The usage of the key.
	KeyUsage pulumi.StringPtrInput
	// The name of the keyring.
	KeyringName pulumi.StringInput
	// Whether it is the master key of the Multi-region type.
	MultiRegion pulumi.BoolPtrInput
	// The origin of the key.
	Origin pulumi.StringPtrInput
	// The pre-deletion cycle of the key.
	PendingWindowInDays pulumi.IntPtrInput
	// The protection level of the key.
	ProtectionLevel pulumi.StringPtrInput
	// The rotation state of the key.
	RotateState pulumi.StringPtrInput
	// Tags.
	Tags KeyTagArrayInput
}

func (KeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArgs)(nil)).Elem()
}

type KeyInput interface {
	pulumi.Input

	ToKeyOutput() KeyOutput
	ToKeyOutputWithContext(ctx context.Context) KeyOutput
}

func (*Key) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (i *Key) ToKeyOutput() KeyOutput {
	return i.ToKeyOutputWithContext(context.Background())
}

func (i *Key) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyOutput)
}

// KeyArrayInput is an input type that accepts KeyArray and KeyArrayOutput values.
// You can construct a concrete instance of `KeyArrayInput` via:
//
//	KeyArray{ KeyArgs{...} }
type KeyArrayInput interface {
	pulumi.Input

	ToKeyArrayOutput() KeyArrayOutput
	ToKeyArrayOutputWithContext(context.Context) KeyArrayOutput
}

type KeyArray []KeyInput

func (KeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (i KeyArray) ToKeyArrayOutput() KeyArrayOutput {
	return i.ToKeyArrayOutputWithContext(context.Background())
}

func (i KeyArray) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyArrayOutput)
}

// KeyMapInput is an input type that accepts KeyMap and KeyMapOutput values.
// You can construct a concrete instance of `KeyMapInput` via:
//
//	KeyMap{ "key": KeyArgs{...} }
type KeyMapInput interface {
	pulumi.Input

	ToKeyMapOutput() KeyMapOutput
	ToKeyMapOutputWithContext(context.Context) KeyMapOutput
}

type KeyMap map[string]KeyInput

func (KeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (i KeyMap) ToKeyMapOutput() KeyMapOutput {
	return i.ToKeyMapOutputWithContext(context.Background())
}

func (i KeyMap) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyMapOutput)
}

type KeyOutput struct{ *pulumi.OutputState }

func (KeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Key)(nil)).Elem()
}

func (o KeyOutput) ToKeyOutput() KeyOutput {
	return o
}

func (o KeyOutput) ToKeyOutputWithContext(ctx context.Context) KeyOutput {
	return o
}

// The date when the keyring was created.
func (o KeyOutput) CreationDate() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.CreationDate }).(pulumi.IntOutput)
}

// The description of the key.
func (o KeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The time when the key material will expire.
func (o KeyOutput) KeyMaterialExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyMaterialExpireTime }).(pulumi.StringOutput)
}

// The name of the CMK.
func (o KeyOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// The type of the keys.
func (o KeyOutput) KeySpec() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeySpec }).(pulumi.StringOutput)
}

// The usage of the key.
func (o KeyOutput) KeyUsage() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyUsage }).(pulumi.StringOutput)
}

// The name of the keyring.
func (o KeyOutput) KeyringName() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.KeyringName }).(pulumi.StringOutput)
}

// The last time the key was rotated.
func (o KeyOutput) LastRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.LastRotationTime }).(pulumi.StringOutput)
}

// Whether it is the master key of the Multi-region type.
func (o KeyOutput) MultiRegion() pulumi.BoolOutput {
	return o.ApplyT(func(v *Key) pulumi.BoolOutput { return v.MultiRegion }).(pulumi.BoolOutput)
}

// The configuration of Multi-region key.
func (o KeyOutput) MultiRegionConfiguration() KeyMultiRegionConfigurationOutput {
	return o.ApplyT(func(v *Key) KeyMultiRegionConfigurationOutput { return v.MultiRegionConfiguration }).(KeyMultiRegionConfigurationOutput)
}

// The origin of the key.
func (o KeyOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

// The pre-deletion cycle of the key.
func (o KeyOutput) PendingWindowInDays() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.IntPtrOutput { return v.PendingWindowInDays }).(pulumi.IntPtrOutput)
}

// The protection level of the key.
func (o KeyOutput) ProtectionLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.ProtectionLevel }).(pulumi.StringOutput)
}

// The rotation state of the key.
func (o KeyOutput) RotateState() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Key) pulumi.StringPtrOutput { return v.RotateState }).(pulumi.StringPtrOutput)
}

// The rotation configuration of the key.
func (o KeyOutput) RotationState() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.RotationState }).(pulumi.StringOutput)
}

// The time when the key will be deleted.
func (o KeyOutput) ScheduleDeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.ScheduleDeleteTime }).(pulumi.StringOutput)
}

// The next time the key will be rotated.
func (o KeyOutput) ScheduleRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.ScheduleRotationTime }).(pulumi.StringOutput)
}

// The state of the key.
func (o KeyOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Tags.
func (o KeyOutput) Tags() KeyTagArrayOutput {
	return o.ApplyT(func(v *Key) KeyTagArrayOutput { return v.Tags }).(KeyTagArrayOutput)
}

// The name of the resource.
func (o KeyOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v *Key) pulumi.StringOutput { return v.Trn }).(pulumi.StringOutput)
}

// The date when the keyring was updated.
func (o KeyOutput) UpdateDate() pulumi.IntOutput {
	return o.ApplyT(func(v *Key) pulumi.IntOutput { return v.UpdateDate }).(pulumi.IntOutput)
}

type KeyArrayOutput struct{ *pulumi.OutputState }

func (KeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Key)(nil)).Elem()
}

func (o KeyArrayOutput) ToKeyArrayOutput() KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) ToKeyArrayOutputWithContext(ctx context.Context) KeyArrayOutput {
	return o
}

func (o KeyArrayOutput) Index(i pulumi.IntInput) KeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Key {
		return vs[0].([]*Key)[vs[1].(int)]
	}).(KeyOutput)
}

type KeyMapOutput struct{ *pulumi.OutputState }

func (KeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Key)(nil)).Elem()
}

func (o KeyMapOutput) ToKeyMapOutput() KeyMapOutput {
	return o
}

func (o KeyMapOutput) ToKeyMapOutputWithContext(ctx context.Context) KeyMapOutput {
	return o
}

func (o KeyMapOutput) MapIndex(k pulumi.StringInput) KeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Key {
		return vs[0].(map[string]*Key)[vs[1].(string)]
	}).(KeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyInput)(nil)).Elem(), &Key{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyArrayInput)(nil)).Elem(), KeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyMapInput)(nil)).Elem(), KeyMap{})
	pulumi.RegisterOutputType(KeyOutput{})
	pulumi.RegisterOutputType(KeyArrayOutput{})
	pulumi.RegisterOutputType(KeyMapOutput{})
}
