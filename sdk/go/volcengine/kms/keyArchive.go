// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage kms key archive
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kms"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooKeyring, err := kms.NewKeyring(ctx, "fooKeyring", &kms.KeyringArgs{
//				KeyringName: pulumi.String("tf-test"),
//				Description: pulumi.String("tf-test"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			fooKey, err := kms.NewKey(ctx, "fooKey", &kms.KeyArgs{
//				KeyringName: fooKeyring.KeyringName,
//				KeyName:     pulumi.String("mrk-tf-key-mod"),
//				Description: pulumi.String("tf test key-mod"),
//				Tags: kms.KeyTagArray{
//					&kms.KeyTagArgs{
//						Key:   pulumi.String("tfkey3"),
//						Value: pulumi.String("tfvalue3"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kms.NewKeyArchive(ctx, "fooKeyArchive", &kms.KeyArchiveArgs{
//				KeyId: fooKey.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// KmsKeyArchive can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:kms/keyArchive:KeyArchive default resource_id
// ```
//
// or
//
// ```sh
// $ pulumi import volcengine:kms/keyArchive:KeyArchive default key_name:keyring_name
// ```
type KeyArchive struct {
	pulumi.CustomResourceState

	// The id of the CMK.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The name of the CMK.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The state of the key.
	KeyState pulumi.StringOutput `pulumi:"keyState"`
	// The name of the keyring.
	KeyringName pulumi.StringPtrOutput `pulumi:"keyringName"`
}

// NewKeyArchive registers a new resource with the given unique name, arguments, and options.
func NewKeyArchive(ctx *pulumi.Context,
	name string, args *KeyArchiveArgs, opts ...pulumi.ResourceOption) (*KeyArchive, error) {
	if args == nil {
		args = &KeyArchiveArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyArchive
	err := ctx.RegisterResource("volcengine:kms/keyArchive:KeyArchive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyArchive gets an existing KeyArchive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyArchive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyArchiveState, opts ...pulumi.ResourceOption) (*KeyArchive, error) {
	var resource KeyArchive
	err := ctx.ReadResource("volcengine:kms/keyArchive:KeyArchive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyArchive resources.
type keyArchiveState struct {
	// The id of the CMK.
	KeyId *string `pulumi:"keyId"`
	// The name of the CMK.
	KeyName *string `pulumi:"keyName"`
	// The state of the key.
	KeyState *string `pulumi:"keyState"`
	// The name of the keyring.
	KeyringName *string `pulumi:"keyringName"`
}

type KeyArchiveState struct {
	// The id of the CMK.
	KeyId pulumi.StringPtrInput
	// The name of the CMK.
	KeyName pulumi.StringPtrInput
	// The state of the key.
	KeyState pulumi.StringPtrInput
	// The name of the keyring.
	KeyringName pulumi.StringPtrInput
}

func (KeyArchiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArchiveState)(nil)).Elem()
}

type keyArchiveArgs struct {
	// The id of the CMK.
	KeyId *string `pulumi:"keyId"`
	// The name of the CMK.
	KeyName *string `pulumi:"keyName"`
	// The name of the keyring.
	KeyringName *string `pulumi:"keyringName"`
}

// The set of arguments for constructing a KeyArchive resource.
type KeyArchiveArgs struct {
	// The id of the CMK.
	KeyId pulumi.StringPtrInput
	// The name of the CMK.
	KeyName pulumi.StringPtrInput
	// The name of the keyring.
	KeyringName pulumi.StringPtrInput
}

func (KeyArchiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyArchiveArgs)(nil)).Elem()
}

type KeyArchiveInput interface {
	pulumi.Input

	ToKeyArchiveOutput() KeyArchiveOutput
	ToKeyArchiveOutputWithContext(ctx context.Context) KeyArchiveOutput
}

func (*KeyArchive) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyArchive)(nil)).Elem()
}

func (i *KeyArchive) ToKeyArchiveOutput() KeyArchiveOutput {
	return i.ToKeyArchiveOutputWithContext(context.Background())
}

func (i *KeyArchive) ToKeyArchiveOutputWithContext(ctx context.Context) KeyArchiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyArchiveOutput)
}

// KeyArchiveArrayInput is an input type that accepts KeyArchiveArray and KeyArchiveArrayOutput values.
// You can construct a concrete instance of `KeyArchiveArrayInput` via:
//
//	KeyArchiveArray{ KeyArchiveArgs{...} }
type KeyArchiveArrayInput interface {
	pulumi.Input

	ToKeyArchiveArrayOutput() KeyArchiveArrayOutput
	ToKeyArchiveArrayOutputWithContext(context.Context) KeyArchiveArrayOutput
}

type KeyArchiveArray []KeyArchiveInput

func (KeyArchiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyArchive)(nil)).Elem()
}

func (i KeyArchiveArray) ToKeyArchiveArrayOutput() KeyArchiveArrayOutput {
	return i.ToKeyArchiveArrayOutputWithContext(context.Background())
}

func (i KeyArchiveArray) ToKeyArchiveArrayOutputWithContext(ctx context.Context) KeyArchiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyArchiveArrayOutput)
}

// KeyArchiveMapInput is an input type that accepts KeyArchiveMap and KeyArchiveMapOutput values.
// You can construct a concrete instance of `KeyArchiveMapInput` via:
//
//	KeyArchiveMap{ "key": KeyArchiveArgs{...} }
type KeyArchiveMapInput interface {
	pulumi.Input

	ToKeyArchiveMapOutput() KeyArchiveMapOutput
	ToKeyArchiveMapOutputWithContext(context.Context) KeyArchiveMapOutput
}

type KeyArchiveMap map[string]KeyArchiveInput

func (KeyArchiveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyArchive)(nil)).Elem()
}

func (i KeyArchiveMap) ToKeyArchiveMapOutput() KeyArchiveMapOutput {
	return i.ToKeyArchiveMapOutputWithContext(context.Background())
}

func (i KeyArchiveMap) ToKeyArchiveMapOutputWithContext(ctx context.Context) KeyArchiveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyArchiveMapOutput)
}

type KeyArchiveOutput struct{ *pulumi.OutputState }

func (KeyArchiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyArchive)(nil)).Elem()
}

func (o KeyArchiveOutput) ToKeyArchiveOutput() KeyArchiveOutput {
	return o
}

func (o KeyArchiveOutput) ToKeyArchiveOutputWithContext(ctx context.Context) KeyArchiveOutput {
	return o
}

// The id of the CMK.
func (o KeyArchiveOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyArchive) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// The name of the CMK.
func (o KeyArchiveOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyArchive) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// The state of the key.
func (o KeyArchiveOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyArchive) pulumi.StringOutput { return v.KeyState }).(pulumi.StringOutput)
}

// The name of the keyring.
func (o KeyArchiveOutput) KeyringName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyArchive) pulumi.StringPtrOutput { return v.KeyringName }).(pulumi.StringPtrOutput)
}

type KeyArchiveArrayOutput struct{ *pulumi.OutputState }

func (KeyArchiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyArchive)(nil)).Elem()
}

func (o KeyArchiveArrayOutput) ToKeyArchiveArrayOutput() KeyArchiveArrayOutput {
	return o
}

func (o KeyArchiveArrayOutput) ToKeyArchiveArrayOutputWithContext(ctx context.Context) KeyArchiveArrayOutput {
	return o
}

func (o KeyArchiveArrayOutput) Index(i pulumi.IntInput) KeyArchiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyArchive {
		return vs[0].([]*KeyArchive)[vs[1].(int)]
	}).(KeyArchiveOutput)
}

type KeyArchiveMapOutput struct{ *pulumi.OutputState }

func (KeyArchiveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyArchive)(nil)).Elem()
}

func (o KeyArchiveMapOutput) ToKeyArchiveMapOutput() KeyArchiveMapOutput {
	return o
}

func (o KeyArchiveMapOutput) ToKeyArchiveMapOutputWithContext(ctx context.Context) KeyArchiveMapOutput {
	return o
}

func (o KeyArchiveMapOutput) MapIndex(k pulumi.StringInput) KeyArchiveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyArchive {
		return vs[0].(map[string]*KeyArchive)[vs[1].(string)]
	}).(KeyArchiveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyArchiveInput)(nil)).Elem(), &KeyArchive{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyArchiveArrayInput)(nil)).Elem(), KeyArchiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyArchiveMapInput)(nil)).Elem(), KeyArchiveMap{})
	pulumi.RegisterOutputType(KeyArchiveOutput{})
	pulumi.RegisterOutputType(KeyArchiveArrayOutput{})
	pulumi.RegisterOutputType(KeyArchiveMapOutput{})
}
