// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage kms secret
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kms"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewSecret(ctx, "foo", &kms.SecretArgs{
//				Description: pulumi.String("tf-test"),
//				SecretName:  pulumi.String("tf-test1"),
//				SecretType:  pulumi.String("Generic"),
//				SecretValue: pulumi.String("{\"dasdasd\":\"dasdasd\"}"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// KmsSecret can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:kms/secret:Secret default resource_id
// ```
type Secret struct {
	pulumi.CustomResourceState

	// The rotation state of the secret.
	AutomaticRotation pulumi.BoolPtrOutput `pulumi:"automaticRotation"`
	// The date when the secret was created.
	CreationDate pulumi.IntOutput `pulumi:"creationDate"`
	// The description of the secret.
	Description pulumi.StringOutput `pulumi:"description"`
	// The TRN of the KMS key used to encrypt the secret value.
	EncryptionKey pulumi.StringOutput `pulumi:"encryptionKey"`
	// The extended configurations of the secret.
	ExtendedConfig pulumi.StringOutput `pulumi:"extendedConfig"`
	// The last time the secret was rotated.
	LastRotationTime pulumi.StringOutput `pulumi:"lastRotationTime"`
	// Indicates whether the secret is hosted.
	Managed pulumi.BoolOutput `pulumi:"managed"`
	// The project name of the secret.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The interval at which automatic rotation is performed.
	RotationInterval pulumi.StringOutput `pulumi:"rotationInterval"`
	// Rotation interval second.
	RotationIntervalSecond pulumi.IntOutput `pulumi:"rotationIntervalSecond"`
	// The rotation state of the secret.
	RotationState pulumi.StringOutput `pulumi:"rotationState"`
	// The time when the secret will be deleted.
	ScheduleDeleteTime pulumi.StringOutput `pulumi:"scheduleDeleteTime"`
	// The next time the secret will be rotated.
	ScheduleRotationTime pulumi.StringOutput `pulumi:"scheduleRotationTime"`
	// The name of the secret.
	SecretName pulumi.StringOutput `pulumi:"secretName"`
	// The type of the secret.
	SecretType pulumi.StringOutput `pulumi:"secretType"`
	// The value of the secret.
	SecretValue pulumi.StringOutput `pulumi:"secretValue"`
	// The state of secret.
	State pulumi.StringOutput `pulumi:"state"`
	// The information about the tenant resource name (TRN).
	Trn pulumi.StringOutput `pulumi:"trn"`
	// The tenant ID of the secret.
	Uid pulumi.StringOutput `pulumi:"uid"`
	// The date when the secret was updated.
	UpdateDate pulumi.IntOutput `pulumi:"updateDate"`
	// The ID of secret.
	Uuid pulumi.StringOutput `pulumi:"uuid"`
}

// NewSecret registers a new resource with the given unique name, arguments, and options.
func NewSecret(ctx *pulumi.Context,
	name string, args *SecretArgs, opts ...pulumi.ResourceOption) (*Secret, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecretName == nil {
		return nil, errors.New("invalid value for required argument 'SecretName'")
	}
	if args.SecretType == nil {
		return nil, errors.New("invalid value for required argument 'SecretType'")
	}
	if args.SecretValue == nil {
		return nil, errors.New("invalid value for required argument 'SecretValue'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Secret
	err := ctx.RegisterResource("volcengine:kms/secret:Secret", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecret gets an existing Secret resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecret(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecretState, opts ...pulumi.ResourceOption) (*Secret, error) {
	var resource Secret
	err := ctx.ReadResource("volcengine:kms/secret:Secret", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Secret resources.
type secretState struct {
	// The rotation state of the secret.
	AutomaticRotation *bool `pulumi:"automaticRotation"`
	// The date when the secret was created.
	CreationDate *int `pulumi:"creationDate"`
	// The description of the secret.
	Description *string `pulumi:"description"`
	// The TRN of the KMS key used to encrypt the secret value.
	EncryptionKey *string `pulumi:"encryptionKey"`
	// The extended configurations of the secret.
	ExtendedConfig *string `pulumi:"extendedConfig"`
	// The last time the secret was rotated.
	LastRotationTime *string `pulumi:"lastRotationTime"`
	// Indicates whether the secret is hosted.
	Managed *bool `pulumi:"managed"`
	// The project name of the secret.
	ProjectName *string `pulumi:"projectName"`
	// The interval at which automatic rotation is performed.
	RotationInterval *string `pulumi:"rotationInterval"`
	// Rotation interval second.
	RotationIntervalSecond *int `pulumi:"rotationIntervalSecond"`
	// The rotation state of the secret.
	RotationState *string `pulumi:"rotationState"`
	// The time when the secret will be deleted.
	ScheduleDeleteTime *string `pulumi:"scheduleDeleteTime"`
	// The next time the secret will be rotated.
	ScheduleRotationTime *string `pulumi:"scheduleRotationTime"`
	// The name of the secret.
	SecretName *string `pulumi:"secretName"`
	// The type of the secret.
	SecretType *string `pulumi:"secretType"`
	// The value of the secret.
	SecretValue *string `pulumi:"secretValue"`
	// The state of secret.
	State *string `pulumi:"state"`
	// The information about the tenant resource name (TRN).
	Trn *string `pulumi:"trn"`
	// The tenant ID of the secret.
	Uid *string `pulumi:"uid"`
	// The date when the secret was updated.
	UpdateDate *int `pulumi:"updateDate"`
	// The ID of secret.
	Uuid *string `pulumi:"uuid"`
}

type SecretState struct {
	// The rotation state of the secret.
	AutomaticRotation pulumi.BoolPtrInput
	// The date when the secret was created.
	CreationDate pulumi.IntPtrInput
	// The description of the secret.
	Description pulumi.StringPtrInput
	// The TRN of the KMS key used to encrypt the secret value.
	EncryptionKey pulumi.StringPtrInput
	// The extended configurations of the secret.
	ExtendedConfig pulumi.StringPtrInput
	// The last time the secret was rotated.
	LastRotationTime pulumi.StringPtrInput
	// Indicates whether the secret is hosted.
	Managed pulumi.BoolPtrInput
	// The project name of the secret.
	ProjectName pulumi.StringPtrInput
	// The interval at which automatic rotation is performed.
	RotationInterval pulumi.StringPtrInput
	// Rotation interval second.
	RotationIntervalSecond pulumi.IntPtrInput
	// The rotation state of the secret.
	RotationState pulumi.StringPtrInput
	// The time when the secret will be deleted.
	ScheduleDeleteTime pulumi.StringPtrInput
	// The next time the secret will be rotated.
	ScheduleRotationTime pulumi.StringPtrInput
	// The name of the secret.
	SecretName pulumi.StringPtrInput
	// The type of the secret.
	SecretType pulumi.StringPtrInput
	// The value of the secret.
	SecretValue pulumi.StringPtrInput
	// The state of secret.
	State pulumi.StringPtrInput
	// The information about the tenant resource name (TRN).
	Trn pulumi.StringPtrInput
	// The tenant ID of the secret.
	Uid pulumi.StringPtrInput
	// The date when the secret was updated.
	UpdateDate pulumi.IntPtrInput
	// The ID of secret.
	Uuid pulumi.StringPtrInput
}

func (SecretState) ElementType() reflect.Type {
	return reflect.TypeOf((*secretState)(nil)).Elem()
}

type secretArgs struct {
	// The rotation state of the secret.
	AutomaticRotation *bool `pulumi:"automaticRotation"`
	// The description of the secret.
	Description *string `pulumi:"description"`
	// The TRN of the KMS key used to encrypt the secret value.
	EncryptionKey *string `pulumi:"encryptionKey"`
	// The extended configurations of the secret.
	ExtendedConfig *string `pulumi:"extendedConfig"`
	// The project name of the secret.
	ProjectName *string `pulumi:"projectName"`
	// The interval at which automatic rotation is performed.
	RotationInterval *string `pulumi:"rotationInterval"`
	// The name of the secret.
	SecretName string `pulumi:"secretName"`
	// The type of the secret.
	SecretType string `pulumi:"secretType"`
	// The value of the secret.
	SecretValue string `pulumi:"secretValue"`
}

// The set of arguments for constructing a Secret resource.
type SecretArgs struct {
	// The rotation state of the secret.
	AutomaticRotation pulumi.BoolPtrInput
	// The description of the secret.
	Description pulumi.StringPtrInput
	// The TRN of the KMS key used to encrypt the secret value.
	EncryptionKey pulumi.StringPtrInput
	// The extended configurations of the secret.
	ExtendedConfig pulumi.StringPtrInput
	// The project name of the secret.
	ProjectName pulumi.StringPtrInput
	// The interval at which automatic rotation is performed.
	RotationInterval pulumi.StringPtrInput
	// The name of the secret.
	SecretName pulumi.StringInput
	// The type of the secret.
	SecretType pulumi.StringInput
	// The value of the secret.
	SecretValue pulumi.StringInput
}

func (SecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*secretArgs)(nil)).Elem()
}

type SecretInput interface {
	pulumi.Input

	ToSecretOutput() SecretOutput
	ToSecretOutputWithContext(ctx context.Context) SecretOutput
}

func (*Secret) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (i *Secret) ToSecretOutput() SecretOutput {
	return i.ToSecretOutputWithContext(context.Background())
}

func (i *Secret) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretOutput)
}

// SecretArrayInput is an input type that accepts SecretArray and SecretArrayOutput values.
// You can construct a concrete instance of `SecretArrayInput` via:
//
//	SecretArray{ SecretArgs{...} }
type SecretArrayInput interface {
	pulumi.Input

	ToSecretArrayOutput() SecretArrayOutput
	ToSecretArrayOutputWithContext(context.Context) SecretArrayOutput
}

type SecretArray []SecretInput

func (SecretArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (i SecretArray) ToSecretArrayOutput() SecretArrayOutput {
	return i.ToSecretArrayOutputWithContext(context.Background())
}

func (i SecretArray) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretArrayOutput)
}

// SecretMapInput is an input type that accepts SecretMap and SecretMapOutput values.
// You can construct a concrete instance of `SecretMapInput` via:
//
//	SecretMap{ "key": SecretArgs{...} }
type SecretMapInput interface {
	pulumi.Input

	ToSecretMapOutput() SecretMapOutput
	ToSecretMapOutputWithContext(context.Context) SecretMapOutput
}

type SecretMap map[string]SecretInput

func (SecretMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (i SecretMap) ToSecretMapOutput() SecretMapOutput {
	return i.ToSecretMapOutputWithContext(context.Background())
}

func (i SecretMap) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecretMapOutput)
}

type SecretOutput struct{ *pulumi.OutputState }

func (SecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Secret)(nil)).Elem()
}

func (o SecretOutput) ToSecretOutput() SecretOutput {
	return o
}

func (o SecretOutput) ToSecretOutputWithContext(ctx context.Context) SecretOutput {
	return o
}

// The rotation state of the secret.
func (o SecretOutput) AutomaticRotation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Secret) pulumi.BoolPtrOutput { return v.AutomaticRotation }).(pulumi.BoolPtrOutput)
}

// The date when the secret was created.
func (o SecretOutput) CreationDate() pulumi.IntOutput {
	return o.ApplyT(func(v *Secret) pulumi.IntOutput { return v.CreationDate }).(pulumi.IntOutput)
}

// The description of the secret.
func (o SecretOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The TRN of the KMS key used to encrypt the secret value.
func (o SecretOutput) EncryptionKey() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.EncryptionKey }).(pulumi.StringOutput)
}

// The extended configurations of the secret.
func (o SecretOutput) ExtendedConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.ExtendedConfig }).(pulumi.StringOutput)
}

// The last time the secret was rotated.
func (o SecretOutput) LastRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.LastRotationTime }).(pulumi.StringOutput)
}

// Indicates whether the secret is hosted.
func (o SecretOutput) Managed() pulumi.BoolOutput {
	return o.ApplyT(func(v *Secret) pulumi.BoolOutput { return v.Managed }).(pulumi.BoolOutput)
}

// The project name of the secret.
func (o SecretOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The interval at which automatic rotation is performed.
func (o SecretOutput) RotationInterval() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.RotationInterval }).(pulumi.StringOutput)
}

// Rotation interval second.
func (o SecretOutput) RotationIntervalSecond() pulumi.IntOutput {
	return o.ApplyT(func(v *Secret) pulumi.IntOutput { return v.RotationIntervalSecond }).(pulumi.IntOutput)
}

// The rotation state of the secret.
func (o SecretOutput) RotationState() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.RotationState }).(pulumi.StringOutput)
}

// The time when the secret will be deleted.
func (o SecretOutput) ScheduleDeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.ScheduleDeleteTime }).(pulumi.StringOutput)
}

// The next time the secret will be rotated.
func (o SecretOutput) ScheduleRotationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.ScheduleRotationTime }).(pulumi.StringOutput)
}

// The name of the secret.
func (o SecretOutput) SecretName() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.SecretName }).(pulumi.StringOutput)
}

// The type of the secret.
func (o SecretOutput) SecretType() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.SecretType }).(pulumi.StringOutput)
}

// The value of the secret.
func (o SecretOutput) SecretValue() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.SecretValue }).(pulumi.StringOutput)
}

// The state of secret.
func (o SecretOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The information about the tenant resource name (TRN).
func (o SecretOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Trn }).(pulumi.StringOutput)
}

// The tenant ID of the secret.
func (o SecretOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Uid }).(pulumi.StringOutput)
}

// The date when the secret was updated.
func (o SecretOutput) UpdateDate() pulumi.IntOutput {
	return o.ApplyT(func(v *Secret) pulumi.IntOutput { return v.UpdateDate }).(pulumi.IntOutput)
}

// The ID of secret.
func (o SecretOutput) Uuid() pulumi.StringOutput {
	return o.ApplyT(func(v *Secret) pulumi.StringOutput { return v.Uuid }).(pulumi.StringOutput)
}

type SecretArrayOutput struct{ *pulumi.OutputState }

func (SecretArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Secret)(nil)).Elem()
}

func (o SecretArrayOutput) ToSecretArrayOutput() SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) ToSecretArrayOutputWithContext(ctx context.Context) SecretArrayOutput {
	return o
}

func (o SecretArrayOutput) Index(i pulumi.IntInput) SecretOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].([]*Secret)[vs[1].(int)]
	}).(SecretOutput)
}

type SecretMapOutput struct{ *pulumi.OutputState }

func (SecretMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Secret)(nil)).Elem()
}

func (o SecretMapOutput) ToSecretMapOutput() SecretMapOutput {
	return o
}

func (o SecretMapOutput) ToSecretMapOutputWithContext(ctx context.Context) SecretMapOutput {
	return o
}

func (o SecretMapOutput) MapIndex(k pulumi.StringInput) SecretOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Secret {
		return vs[0].(map[string]*Secret)[vs[1].(string)]
	}).(SecretOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SecretInput)(nil)).Elem(), &Secret{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretArrayInput)(nil)).Elem(), SecretArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SecretMapInput)(nil)).Elem(), SecretMap{})
	pulumi.RegisterOutputType(SecretOutput{})
	pulumi.RegisterOutputType(SecretArrayOutput{})
	pulumi.RegisterOutputType(SecretMapOutput{})
}
