// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kms

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage kms key enable
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kms"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := kms.NewKeyEnable(ctx, "foo", &kms.KeyEnableArgs{
//				KeyId: pulumi.String("0e5a256d-d075-44b1-bcd2-09efafxxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// KmsKeyEnable can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:kms/keyEnable:KeyEnable default resource_id
// ```
//
// or
//
// ```sh
// $ pulumi import volcengine:kms/keyEnable:KeyEnable default key_name:keyring_name
// ```
type KeyEnable struct {
	pulumi.CustomResourceState

	// The id of the CMK.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The name of the CMK.
	KeyName pulumi.StringOutput `pulumi:"keyName"`
	// The state of the key.
	KeyState pulumi.StringOutput `pulumi:"keyState"`
	// The name of the keyring.
	KeyringName pulumi.StringPtrOutput `pulumi:"keyringName"`
}

// NewKeyEnable registers a new resource with the given unique name, arguments, and options.
func NewKeyEnable(ctx *pulumi.Context,
	name string, args *KeyEnableArgs, opts ...pulumi.ResourceOption) (*KeyEnable, error) {
	if args == nil {
		args = &KeyEnableArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KeyEnable
	err := ctx.RegisterResource("volcengine:kms/keyEnable:KeyEnable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKeyEnable gets an existing KeyEnable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKeyEnable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KeyEnableState, opts ...pulumi.ResourceOption) (*KeyEnable, error) {
	var resource KeyEnable
	err := ctx.ReadResource("volcengine:kms/keyEnable:KeyEnable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KeyEnable resources.
type keyEnableState struct {
	// The id of the CMK.
	KeyId *string `pulumi:"keyId"`
	// The name of the CMK.
	KeyName *string `pulumi:"keyName"`
	// The state of the key.
	KeyState *string `pulumi:"keyState"`
	// The name of the keyring.
	KeyringName *string `pulumi:"keyringName"`
}

type KeyEnableState struct {
	// The id of the CMK.
	KeyId pulumi.StringPtrInput
	// The name of the CMK.
	KeyName pulumi.StringPtrInput
	// The state of the key.
	KeyState pulumi.StringPtrInput
	// The name of the keyring.
	KeyringName pulumi.StringPtrInput
}

func (KeyEnableState) ElementType() reflect.Type {
	return reflect.TypeOf((*keyEnableState)(nil)).Elem()
}

type keyEnableArgs struct {
	// The id of the CMK.
	KeyId *string `pulumi:"keyId"`
	// The name of the CMK.
	KeyName *string `pulumi:"keyName"`
	// The name of the keyring.
	KeyringName *string `pulumi:"keyringName"`
}

// The set of arguments for constructing a KeyEnable resource.
type KeyEnableArgs struct {
	// The id of the CMK.
	KeyId pulumi.StringPtrInput
	// The name of the CMK.
	KeyName pulumi.StringPtrInput
	// The name of the keyring.
	KeyringName pulumi.StringPtrInput
}

func (KeyEnableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*keyEnableArgs)(nil)).Elem()
}

type KeyEnableInput interface {
	pulumi.Input

	ToKeyEnableOutput() KeyEnableOutput
	ToKeyEnableOutputWithContext(ctx context.Context) KeyEnableOutput
}

func (*KeyEnable) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyEnable)(nil)).Elem()
}

func (i *KeyEnable) ToKeyEnableOutput() KeyEnableOutput {
	return i.ToKeyEnableOutputWithContext(context.Background())
}

func (i *KeyEnable) ToKeyEnableOutputWithContext(ctx context.Context) KeyEnableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyEnableOutput)
}

// KeyEnableArrayInput is an input type that accepts KeyEnableArray and KeyEnableArrayOutput values.
// You can construct a concrete instance of `KeyEnableArrayInput` via:
//
//	KeyEnableArray{ KeyEnableArgs{...} }
type KeyEnableArrayInput interface {
	pulumi.Input

	ToKeyEnableArrayOutput() KeyEnableArrayOutput
	ToKeyEnableArrayOutputWithContext(context.Context) KeyEnableArrayOutput
}

type KeyEnableArray []KeyEnableInput

func (KeyEnableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyEnable)(nil)).Elem()
}

func (i KeyEnableArray) ToKeyEnableArrayOutput() KeyEnableArrayOutput {
	return i.ToKeyEnableArrayOutputWithContext(context.Background())
}

func (i KeyEnableArray) ToKeyEnableArrayOutputWithContext(ctx context.Context) KeyEnableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyEnableArrayOutput)
}

// KeyEnableMapInput is an input type that accepts KeyEnableMap and KeyEnableMapOutput values.
// You can construct a concrete instance of `KeyEnableMapInput` via:
//
//	KeyEnableMap{ "key": KeyEnableArgs{...} }
type KeyEnableMapInput interface {
	pulumi.Input

	ToKeyEnableMapOutput() KeyEnableMapOutput
	ToKeyEnableMapOutputWithContext(context.Context) KeyEnableMapOutput
}

type KeyEnableMap map[string]KeyEnableInput

func (KeyEnableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyEnable)(nil)).Elem()
}

func (i KeyEnableMap) ToKeyEnableMapOutput() KeyEnableMapOutput {
	return i.ToKeyEnableMapOutputWithContext(context.Background())
}

func (i KeyEnableMap) ToKeyEnableMapOutputWithContext(ctx context.Context) KeyEnableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyEnableMapOutput)
}

type KeyEnableOutput struct{ *pulumi.OutputState }

func (KeyEnableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KeyEnable)(nil)).Elem()
}

func (o KeyEnableOutput) ToKeyEnableOutput() KeyEnableOutput {
	return o
}

func (o KeyEnableOutput) ToKeyEnableOutputWithContext(ctx context.Context) KeyEnableOutput {
	return o
}

// The id of the CMK.
func (o KeyEnableOutput) KeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyEnable) pulumi.StringOutput { return v.KeyId }).(pulumi.StringOutput)
}

// The name of the CMK.
func (o KeyEnableOutput) KeyName() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyEnable) pulumi.StringOutput { return v.KeyName }).(pulumi.StringOutput)
}

// The state of the key.
func (o KeyEnableOutput) KeyState() pulumi.StringOutput {
	return o.ApplyT(func(v *KeyEnable) pulumi.StringOutput { return v.KeyState }).(pulumi.StringOutput)
}

// The name of the keyring.
func (o KeyEnableOutput) KeyringName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *KeyEnable) pulumi.StringPtrOutput { return v.KeyringName }).(pulumi.StringPtrOutput)
}

type KeyEnableArrayOutput struct{ *pulumi.OutputState }

func (KeyEnableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KeyEnable)(nil)).Elem()
}

func (o KeyEnableArrayOutput) ToKeyEnableArrayOutput() KeyEnableArrayOutput {
	return o
}

func (o KeyEnableArrayOutput) ToKeyEnableArrayOutputWithContext(ctx context.Context) KeyEnableArrayOutput {
	return o
}

func (o KeyEnableArrayOutput) Index(i pulumi.IntInput) KeyEnableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KeyEnable {
		return vs[0].([]*KeyEnable)[vs[1].(int)]
	}).(KeyEnableOutput)
}

type KeyEnableMapOutput struct{ *pulumi.OutputState }

func (KeyEnableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KeyEnable)(nil)).Elem()
}

func (o KeyEnableMapOutput) ToKeyEnableMapOutput() KeyEnableMapOutput {
	return o
}

func (o KeyEnableMapOutput) ToKeyEnableMapOutputWithContext(ctx context.Context) KeyEnableMapOutput {
	return o
}

func (o KeyEnableMapOutput) MapIndex(k pulumi.StringInput) KeyEnableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KeyEnable {
		return vs[0].(map[string]*KeyEnable)[vs[1].(string)]
	}).(KeyEnableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KeyEnableInput)(nil)).Elem(), &KeyEnable{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyEnableArrayInput)(nil)).Elem(), KeyEnableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyEnableMapInput)(nil)).Elem(), KeyEnableMap{})
	pulumi.RegisterOutputType(KeyEnableOutput{})
	pulumi.RegisterOutputType(KeyEnableArrayOutput{})
	pulumi.RegisterOutputType(KeyEnableMapOutput{})
}
