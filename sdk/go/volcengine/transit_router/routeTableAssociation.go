// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transit_router

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage transit router route table association
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/transit_router"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooTransitRouter, err := transit_router.NewTransitRouter(ctx, "fooTransitRouter", &transit_router.TransitRouterArgs{
//				TransitRouterName: pulumi.String("test-tf-acc"),
//				Description:       pulumi.String("test-tf-acc"),
//			})
//			if err != nil {
//				return err
//			}
//			fooRouteTable, err := transit_router.NewRouteTable(ctx, "fooRouteTable", &transit_router.RouteTableArgs{
//				Description:                 pulumi.String("tf-test-acc-description"),
//				TransitRouterRouteTableName: pulumi.String("tf-table-test-acc"),
//				TransitRouterId:             fooTransitRouter.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooCustomerGateway, err := vpn.NewCustomerGateway(ctx, "fooCustomerGateway", &vpn.CustomerGatewayArgs{
//				IpAddress:           pulumi.String("192.0.1.3"),
//				CustomerGatewayName: pulumi.String("acc-test"),
//				Description:         pulumi.String("acc-test"),
//			})
//			if err != nil {
//				return err
//			}
//			fooConnection, err := vpn.NewConnection(ctx, "fooConnection", &vpn.ConnectionArgs{
//				VpnConnectionName: pulumi.String("acc-tf-test"),
//				Description:       pulumi.String("acc-tf-test"),
//				AttachType:        pulumi.String("TransitRouter"),
//				CustomerGatewayId: fooCustomerGateway.ID(),
//				LocalSubnets: pulumi.StringArray{
//					pulumi.String("192.168.0.0/22"),
//				},
//				RemoteSubnets: pulumi.StringArray{
//					pulumi.String("192.161.0.0/20"),
//				},
//				DpdAction:           pulumi.String("none"),
//				NatTraversal:        pulumi.Bool(true),
//				IkeConfigPsk:        pulumi.String("acctest@!3"),
//				IkeConfigVersion:    pulumi.String("ikev1"),
//				IkeConfigMode:       pulumi.String("main"),
//				IkeConfigEncAlg:     pulumi.String("aes"),
//				IkeConfigAuthAlg:    pulumi.String("md5"),
//				IkeConfigDhGroup:    pulumi.String("group2"),
//				IkeConfigLifetime:   pulumi.Int(9000),
//				IkeConfigLocalId:    pulumi.String("acc_test"),
//				IkeConfigRemoteId:   pulumi.String("acc_test"),
//				IpsecConfigEncAlg:   pulumi.String("aes"),
//				IpsecConfigAuthAlg:  pulumi.String("sha256"),
//				IpsecConfigDhGroup:  pulumi.String("group2"),
//				IpsecConfigLifetime: pulumi.Int(9000),
//				LogEnabled:          pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			fooVpnAttachment, err := transit_router.NewVpnAttachment(ctx, "fooVpnAttachment", &transit_router.VpnAttachmentArgs{
//				ZoneId:                      pulumi.String("cn-beijing-a"),
//				TransitRouterAttachmentName: pulumi.String("tf-test-acc"),
//				Description:                 pulumi.String("tf-test-acc-desc"),
//				TransitRouterId:             fooTransitRouter.ID(),
//				VpnConnectionId:             fooConnection.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = transit_router.NewRouteTableAssociation(ctx, "fooRouteTableAssociation", &transit_router.RouteTableAssociationArgs{
//				TransitRouterAttachmentId: fooVpnAttachment.TransitRouterAttachmentId,
//				TransitRouterRouteTableId: fooRouteTable.TransitRouterRouteTableId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TransitRouterRouteTableAssociation can be imported using the TransitRouterAttachmentId:TransitRouterRouteTableId, e.g.
//
// ```sh
// $ pulumi import volcengine:transit_router/routeTableAssociation:RouteTableAssociation default tr-attach-13n2l4c****:tr-rt-1i5i8khf9m58gae5kcx6****
// ```
type RouteTableAssociation struct {
	pulumi.CustomResourceState

	// The ID of the network instance connection.
	TransitRouterAttachmentId pulumi.StringOutput `pulumi:"transitRouterAttachmentId"`
	// The ID of the routing table associated with the transit router instance.
	TransitRouterRouteTableId pulumi.StringOutput `pulumi:"transitRouterRouteTableId"`
}

// NewRouteTableAssociation registers a new resource with the given unique name, arguments, and options.
func NewRouteTableAssociation(ctx *pulumi.Context,
	name string, args *RouteTableAssociationArgs, opts ...pulumi.ResourceOption) (*RouteTableAssociation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitRouterAttachmentId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterAttachmentId'")
	}
	if args.TransitRouterRouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterRouteTableId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTableAssociation
	err := ctx.RegisterResource("volcengine:transit_router/routeTableAssociation:RouteTableAssociation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTableAssociation gets an existing RouteTableAssociation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTableAssociation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableAssociationState, opts ...pulumi.ResourceOption) (*RouteTableAssociation, error) {
	var resource RouteTableAssociation
	err := ctx.ReadResource("volcengine:transit_router/routeTableAssociation:RouteTableAssociation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTableAssociation resources.
type routeTableAssociationState struct {
	// The ID of the network instance connection.
	TransitRouterAttachmentId *string `pulumi:"transitRouterAttachmentId"`
	// The ID of the routing table associated with the transit router instance.
	TransitRouterRouteTableId *string `pulumi:"transitRouterRouteTableId"`
}

type RouteTableAssociationState struct {
	// The ID of the network instance connection.
	TransitRouterAttachmentId pulumi.StringPtrInput
	// The ID of the routing table associated with the transit router instance.
	TransitRouterRouteTableId pulumi.StringPtrInput
}

func (RouteTableAssociationState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableAssociationState)(nil)).Elem()
}

type routeTableAssociationArgs struct {
	// The ID of the network instance connection.
	TransitRouterAttachmentId string `pulumi:"transitRouterAttachmentId"`
	// The ID of the routing table associated with the transit router instance.
	TransitRouterRouteTableId string `pulumi:"transitRouterRouteTableId"`
}

// The set of arguments for constructing a RouteTableAssociation resource.
type RouteTableAssociationArgs struct {
	// The ID of the network instance connection.
	TransitRouterAttachmentId pulumi.StringInput
	// The ID of the routing table associated with the transit router instance.
	TransitRouterRouteTableId pulumi.StringInput
}

func (RouteTableAssociationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableAssociationArgs)(nil)).Elem()
}

type RouteTableAssociationInput interface {
	pulumi.Input

	ToRouteTableAssociationOutput() RouteTableAssociationOutput
	ToRouteTableAssociationOutputWithContext(ctx context.Context) RouteTableAssociationOutput
}

func (*RouteTableAssociation) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableAssociation)(nil)).Elem()
}

func (i *RouteTableAssociation) ToRouteTableAssociationOutput() RouteTableAssociationOutput {
	return i.ToRouteTableAssociationOutputWithContext(context.Background())
}

func (i *RouteTableAssociation) ToRouteTableAssociationOutputWithContext(ctx context.Context) RouteTableAssociationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociationOutput)
}

// RouteTableAssociationArrayInput is an input type that accepts RouteTableAssociationArray and RouteTableAssociationArrayOutput values.
// You can construct a concrete instance of `RouteTableAssociationArrayInput` via:
//
//	RouteTableAssociationArray{ RouteTableAssociationArgs{...} }
type RouteTableAssociationArrayInput interface {
	pulumi.Input

	ToRouteTableAssociationArrayOutput() RouteTableAssociationArrayOutput
	ToRouteTableAssociationArrayOutputWithContext(context.Context) RouteTableAssociationArrayOutput
}

type RouteTableAssociationArray []RouteTableAssociationInput

func (RouteTableAssociationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableAssociation)(nil)).Elem()
}

func (i RouteTableAssociationArray) ToRouteTableAssociationArrayOutput() RouteTableAssociationArrayOutput {
	return i.ToRouteTableAssociationArrayOutputWithContext(context.Background())
}

func (i RouteTableAssociationArray) ToRouteTableAssociationArrayOutputWithContext(ctx context.Context) RouteTableAssociationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociationArrayOutput)
}

// RouteTableAssociationMapInput is an input type that accepts RouteTableAssociationMap and RouteTableAssociationMapOutput values.
// You can construct a concrete instance of `RouteTableAssociationMapInput` via:
//
//	RouteTableAssociationMap{ "key": RouteTableAssociationArgs{...} }
type RouteTableAssociationMapInput interface {
	pulumi.Input

	ToRouteTableAssociationMapOutput() RouteTableAssociationMapOutput
	ToRouteTableAssociationMapOutputWithContext(context.Context) RouteTableAssociationMapOutput
}

type RouteTableAssociationMap map[string]RouteTableAssociationInput

func (RouteTableAssociationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableAssociation)(nil)).Elem()
}

func (i RouteTableAssociationMap) ToRouteTableAssociationMapOutput() RouteTableAssociationMapOutput {
	return i.ToRouteTableAssociationMapOutputWithContext(context.Background())
}

func (i RouteTableAssociationMap) ToRouteTableAssociationMapOutputWithContext(ctx context.Context) RouteTableAssociationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociationMapOutput)
}

type RouteTableAssociationOutput struct{ *pulumi.OutputState }

func (RouteTableAssociationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableAssociation)(nil)).Elem()
}

func (o RouteTableAssociationOutput) ToRouteTableAssociationOutput() RouteTableAssociationOutput {
	return o
}

func (o RouteTableAssociationOutput) ToRouteTableAssociationOutputWithContext(ctx context.Context) RouteTableAssociationOutput {
	return o
}

// The ID of the network instance connection.
func (o RouteTableAssociationOutput) TransitRouterAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableAssociation) pulumi.StringOutput { return v.TransitRouterAttachmentId }).(pulumi.StringOutput)
}

// The ID of the routing table associated with the transit router instance.
func (o RouteTableAssociationOutput) TransitRouterRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableAssociation) pulumi.StringOutput { return v.TransitRouterRouteTableId }).(pulumi.StringOutput)
}

type RouteTableAssociationArrayOutput struct{ *pulumi.OutputState }

func (RouteTableAssociationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableAssociation)(nil)).Elem()
}

func (o RouteTableAssociationArrayOutput) ToRouteTableAssociationArrayOutput() RouteTableAssociationArrayOutput {
	return o
}

func (o RouteTableAssociationArrayOutput) ToRouteTableAssociationArrayOutputWithContext(ctx context.Context) RouteTableAssociationArrayOutput {
	return o
}

func (o RouteTableAssociationArrayOutput) Index(i pulumi.IntInput) RouteTableAssociationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTableAssociation {
		return vs[0].([]*RouteTableAssociation)[vs[1].(int)]
	}).(RouteTableAssociationOutput)
}

type RouteTableAssociationMapOutput struct{ *pulumi.OutputState }

func (RouteTableAssociationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableAssociation)(nil)).Elem()
}

func (o RouteTableAssociationMapOutput) ToRouteTableAssociationMapOutput() RouteTableAssociationMapOutput {
	return o
}

func (o RouteTableAssociationMapOutput) ToRouteTableAssociationMapOutputWithContext(ctx context.Context) RouteTableAssociationMapOutput {
	return o
}

func (o RouteTableAssociationMapOutput) MapIndex(k pulumi.StringInput) RouteTableAssociationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTableAssociation {
		return vs[0].(map[string]*RouteTableAssociation)[vs[1].(string)]
	}).(RouteTableAssociationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableAssociationInput)(nil)).Elem(), &RouteTableAssociation{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableAssociationArrayInput)(nil)).Elem(), RouteTableAssociationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableAssociationMapInput)(nil)).Elem(), RouteTableAssociationMap{})
	pulumi.RegisterOutputType(RouteTableAssociationOutput{})
	pulumi.RegisterOutputType(RouteTableAssociationArrayOutput{})
	pulumi.RegisterOutputType(RouteTableAssociationMapOutput{})
}
