// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transit_router

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage transit router route table
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/transit_router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := transit_router.NewRouteTable(ctx, "foo", &transit_router.RouteTableArgs{
//				Description:                 pulumi.String("tf test23"),
//				TransitRouterId:             pulumi.String("tr-2ff4v69tkxji859gp684cm14e"),
//				TransitRouterRouteTableName: pulumi.String("tf-table-23"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// transit router route table can be imported using the router id and route table id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:transit_router/routeTable:RouteTable default tr-2ff4v69tkxji859gp684cm14e:tr-rtb-hy13n2l4c6c0v****
//
// ```
type RouteTable struct {
	pulumi.CustomResourceState

	// The creation time of the route table.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Description of the transit router route table.
	Description pulumi.StringOutput `pulumi:"description"`
	// The status of the route table.
	Status pulumi.StringOutput `pulumi:"status"`
	// Id of the transit router.
	TransitRouterId pulumi.StringOutput `pulumi:"transitRouterId"`
	// The id of the route table.
	TransitRouterRouteTableId pulumi.StringOutput `pulumi:"transitRouterRouteTableId"`
	// The name of the route table.
	TransitRouterRouteTableName pulumi.StringOutput `pulumi:"transitRouterRouteTableName"`
	// The type of route table.
	TransitRouterRouteTableType pulumi.StringOutput `pulumi:"transitRouterRouteTableType"`
	// The update time of the route table.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewRouteTable registers a new resource with the given unique name, arguments, and options.
func NewRouteTable(ctx *pulumi.Context,
	name string, args *RouteTableArgs, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitRouterId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteTable
	err := ctx.RegisterResource("volcengine:transit_router/routeTable:RouteTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTable gets an existing RouteTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableState, opts ...pulumi.ResourceOption) (*RouteTable, error) {
	var resource RouteTable
	err := ctx.ReadResource("volcengine:transit_router/routeTable:RouteTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTable resources.
type routeTableState struct {
	// The creation time of the route table.
	CreationTime *string `pulumi:"creationTime"`
	// Description of the transit router route table.
	Description *string `pulumi:"description"`
	// The status of the route table.
	Status *string `pulumi:"status"`
	// Id of the transit router.
	TransitRouterId *string `pulumi:"transitRouterId"`
	// The id of the route table.
	TransitRouterRouteTableId *string `pulumi:"transitRouterRouteTableId"`
	// The name of the route table.
	TransitRouterRouteTableName *string `pulumi:"transitRouterRouteTableName"`
	// The type of route table.
	TransitRouterRouteTableType *string `pulumi:"transitRouterRouteTableType"`
	// The update time of the route table.
	UpdateTime *string `pulumi:"updateTime"`
}

type RouteTableState struct {
	// The creation time of the route table.
	CreationTime pulumi.StringPtrInput
	// Description of the transit router route table.
	Description pulumi.StringPtrInput
	// The status of the route table.
	Status pulumi.StringPtrInput
	// Id of the transit router.
	TransitRouterId pulumi.StringPtrInput
	// The id of the route table.
	TransitRouterRouteTableId pulumi.StringPtrInput
	// The name of the route table.
	TransitRouterRouteTableName pulumi.StringPtrInput
	// The type of route table.
	TransitRouterRouteTableType pulumi.StringPtrInput
	// The update time of the route table.
	UpdateTime pulumi.StringPtrInput
}

func (RouteTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableState)(nil)).Elem()
}

type routeTableArgs struct {
	// Description of the transit router route table.
	Description *string `pulumi:"description"`
	// Id of the transit router.
	TransitRouterId string `pulumi:"transitRouterId"`
	// The name of the route table.
	TransitRouterRouteTableName *string `pulumi:"transitRouterRouteTableName"`
}

// The set of arguments for constructing a RouteTable resource.
type RouteTableArgs struct {
	// Description of the transit router route table.
	Description pulumi.StringPtrInput
	// Id of the transit router.
	TransitRouterId pulumi.StringInput
	// The name of the route table.
	TransitRouterRouteTableName pulumi.StringPtrInput
}

func (RouteTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableArgs)(nil)).Elem()
}

type RouteTableInput interface {
	pulumi.Input

	ToRouteTableOutput() RouteTableOutput
	ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput
}

func (*RouteTable) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (i *RouteTable) ToRouteTableOutput() RouteTableOutput {
	return i.ToRouteTableOutputWithContext(context.Background())
}

func (i *RouteTable) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableOutput)
}

// RouteTableArrayInput is an input type that accepts RouteTableArray and RouteTableArrayOutput values.
// You can construct a concrete instance of `RouteTableArrayInput` via:
//
//	RouteTableArray{ RouteTableArgs{...} }
type RouteTableArrayInput interface {
	pulumi.Input

	ToRouteTableArrayOutput() RouteTableArrayOutput
	ToRouteTableArrayOutputWithContext(context.Context) RouteTableArrayOutput
}

type RouteTableArray []RouteTableInput

func (RouteTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (i RouteTableArray) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return i.ToRouteTableArrayOutputWithContext(context.Background())
}

func (i RouteTableArray) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableArrayOutput)
}

// RouteTableMapInput is an input type that accepts RouteTableMap and RouteTableMapOutput values.
// You can construct a concrete instance of `RouteTableMapInput` via:
//
//	RouteTableMap{ "key": RouteTableArgs{...} }
type RouteTableMapInput interface {
	pulumi.Input

	ToRouteTableMapOutput() RouteTableMapOutput
	ToRouteTableMapOutputWithContext(context.Context) RouteTableMapOutput
}

type RouteTableMap map[string]RouteTableInput

func (RouteTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (i RouteTableMap) ToRouteTableMapOutput() RouteTableMapOutput {
	return i.ToRouteTableMapOutputWithContext(context.Background())
}

func (i RouteTableMap) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableMapOutput)
}

type RouteTableOutput struct{ *pulumi.OutputState }

func (RouteTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTable)(nil)).Elem()
}

func (o RouteTableOutput) ToRouteTableOutput() RouteTableOutput {
	return o
}

func (o RouteTableOutput) ToRouteTableOutputWithContext(ctx context.Context) RouteTableOutput {
	return o
}

// The creation time of the route table.
func (o RouteTableOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Description of the transit router route table.
func (o RouteTableOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The status of the route table.
func (o RouteTableOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Id of the transit router.
func (o RouteTableOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.TransitRouterId }).(pulumi.StringOutput)
}

// The id of the route table.
func (o RouteTableOutput) TransitRouterRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.TransitRouterRouteTableId }).(pulumi.StringOutput)
}

// The name of the route table.
func (o RouteTableOutput) TransitRouterRouteTableName() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.TransitRouterRouteTableName }).(pulumi.StringOutput)
}

// The type of route table.
func (o RouteTableOutput) TransitRouterRouteTableType() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.TransitRouterRouteTableType }).(pulumi.StringOutput)
}

// The update time of the route table.
func (o RouteTableOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTable) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type RouteTableArrayOutput struct{ *pulumi.OutputState }

func (RouteTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTable)(nil)).Elem()
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutput() RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) ToRouteTableArrayOutputWithContext(ctx context.Context) RouteTableArrayOutput {
	return o
}

func (o RouteTableArrayOutput) Index(i pulumi.IntInput) RouteTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].([]*RouteTable)[vs[1].(int)]
	}).(RouteTableOutput)
}

type RouteTableMapOutput struct{ *pulumi.OutputState }

func (RouteTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTable)(nil)).Elem()
}

func (o RouteTableMapOutput) ToRouteTableMapOutput() RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) ToRouteTableMapOutputWithContext(ctx context.Context) RouteTableMapOutput {
	return o
}

func (o RouteTableMapOutput) MapIndex(k pulumi.StringInput) RouteTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTable {
		return vs[0].(map[string]*RouteTable)[vs[1].(string)]
	}).(RouteTableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableInput)(nil)).Elem(), &RouteTable{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableArrayInput)(nil)).Elem(), RouteTableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableMapInput)(nil)).Elem(), RouteTableMap{})
	pulumi.RegisterOutputType(RouteTableOutput{})
	pulumi.RegisterOutputType(RouteTableArrayOutput{})
	pulumi.RegisterOutputType(RouteTableMapOutput{})
}
