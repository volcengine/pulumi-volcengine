// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transit_router

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage transit router
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/transit_router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := transit_router.NewTransitRouter(ctx, "foo", &transit_router.TransitRouterArgs{
//				Description:       pulumi.String("acc-test"),
//				TransitRouterName: pulumi.String("acc-test-tr"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TransitRouter can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:transit_router/transitRouter:TransitRouter default tr-2d6fr7mzya2gw58ozfes5g2oh
//
// ```
type TransitRouter struct {
	pulumi.CustomResourceState

	// The ID of account.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The business status of the transit router.
	BusinessStatus pulumi.StringOutput `pulumi:"businessStatus"`
	// The create time.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of the transit router.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The overdue time.
	OverdueTime pulumi.StringOutput `pulumi:"overdueTime"`
	// The status of the transit router.
	Status pulumi.StringOutput `pulumi:"status"`
	// The attachments of transit router.
	TransitRouterAttachments TransitRouterTransitRouterAttachmentArrayOutput `pulumi:"transitRouterAttachments"`
	// The ID of the transit router.
	TransitRouterId pulumi.StringOutput `pulumi:"transitRouterId"`
	// The name of the transit router.
	TransitRouterName pulumi.StringOutput `pulumi:"transitRouterName"`
	// The update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewTransitRouter registers a new resource with the given unique name, arguments, and options.
func NewTransitRouter(ctx *pulumi.Context,
	name string, args *TransitRouterArgs, opts ...pulumi.ResourceOption) (*TransitRouter, error) {
	if args == nil {
		args = &TransitRouterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TransitRouter
	err := ctx.RegisterResource("volcengine:transit_router/transitRouter:TransitRouter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTransitRouter gets an existing TransitRouter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTransitRouter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TransitRouterState, opts ...pulumi.ResourceOption) (*TransitRouter, error) {
	var resource TransitRouter
	err := ctx.ReadResource("volcengine:transit_router/transitRouter:TransitRouter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TransitRouter resources.
type transitRouterState struct {
	// The ID of account.
	AccountId *string `pulumi:"accountId"`
	// The business status of the transit router.
	BusinessStatus *string `pulumi:"businessStatus"`
	// The create time.
	CreationTime *string `pulumi:"creationTime"`
	// The description of the transit router.
	Description *string `pulumi:"description"`
	// The overdue time.
	OverdueTime *string `pulumi:"overdueTime"`
	// The status of the transit router.
	Status *string `pulumi:"status"`
	// The attachments of transit router.
	TransitRouterAttachments []TransitRouterTransitRouterAttachment `pulumi:"transitRouterAttachments"`
	// The ID of the transit router.
	TransitRouterId *string `pulumi:"transitRouterId"`
	// The name of the transit router.
	TransitRouterName *string `pulumi:"transitRouterName"`
	// The update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type TransitRouterState struct {
	// The ID of account.
	AccountId pulumi.StringPtrInput
	// The business status of the transit router.
	BusinessStatus pulumi.StringPtrInput
	// The create time.
	CreationTime pulumi.StringPtrInput
	// The description of the transit router.
	Description pulumi.StringPtrInput
	// The overdue time.
	OverdueTime pulumi.StringPtrInput
	// The status of the transit router.
	Status pulumi.StringPtrInput
	// The attachments of transit router.
	TransitRouterAttachments TransitRouterTransitRouterAttachmentArrayInput
	// The ID of the transit router.
	TransitRouterId pulumi.StringPtrInput
	// The name of the transit router.
	TransitRouterName pulumi.StringPtrInput
	// The update time.
	UpdateTime pulumi.StringPtrInput
}

func (TransitRouterState) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouterState)(nil)).Elem()
}

type transitRouterArgs struct {
	// The description of the transit router.
	Description *string `pulumi:"description"`
	// The name of the transit router.
	TransitRouterName *string `pulumi:"transitRouterName"`
}

// The set of arguments for constructing a TransitRouter resource.
type TransitRouterArgs struct {
	// The description of the transit router.
	Description pulumi.StringPtrInput
	// The name of the transit router.
	TransitRouterName pulumi.StringPtrInput
}

func (TransitRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*transitRouterArgs)(nil)).Elem()
}

type TransitRouterInput interface {
	pulumi.Input

	ToTransitRouterOutput() TransitRouterOutput
	ToTransitRouterOutputWithContext(ctx context.Context) TransitRouterOutput
}

func (*TransitRouter) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouter)(nil)).Elem()
}

func (i *TransitRouter) ToTransitRouterOutput() TransitRouterOutput {
	return i.ToTransitRouterOutputWithContext(context.Background())
}

func (i *TransitRouter) ToTransitRouterOutputWithContext(ctx context.Context) TransitRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterOutput)
}

// TransitRouterArrayInput is an input type that accepts TransitRouterArray and TransitRouterArrayOutput values.
// You can construct a concrete instance of `TransitRouterArrayInput` via:
//
//	TransitRouterArray{ TransitRouterArgs{...} }
type TransitRouterArrayInput interface {
	pulumi.Input

	ToTransitRouterArrayOutput() TransitRouterArrayOutput
	ToTransitRouterArrayOutputWithContext(context.Context) TransitRouterArrayOutput
}

type TransitRouterArray []TransitRouterInput

func (TransitRouterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouter)(nil)).Elem()
}

func (i TransitRouterArray) ToTransitRouterArrayOutput() TransitRouterArrayOutput {
	return i.ToTransitRouterArrayOutputWithContext(context.Background())
}

func (i TransitRouterArray) ToTransitRouterArrayOutputWithContext(ctx context.Context) TransitRouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterArrayOutput)
}

// TransitRouterMapInput is an input type that accepts TransitRouterMap and TransitRouterMapOutput values.
// You can construct a concrete instance of `TransitRouterMapInput` via:
//
//	TransitRouterMap{ "key": TransitRouterArgs{...} }
type TransitRouterMapInput interface {
	pulumi.Input

	ToTransitRouterMapOutput() TransitRouterMapOutput
	ToTransitRouterMapOutputWithContext(context.Context) TransitRouterMapOutput
}

type TransitRouterMap map[string]TransitRouterInput

func (TransitRouterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouter)(nil)).Elem()
}

func (i TransitRouterMap) ToTransitRouterMapOutput() TransitRouterMapOutput {
	return i.ToTransitRouterMapOutputWithContext(context.Background())
}

func (i TransitRouterMap) ToTransitRouterMapOutputWithContext(ctx context.Context) TransitRouterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TransitRouterMapOutput)
}

type TransitRouterOutput struct{ *pulumi.OutputState }

func (TransitRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TransitRouter)(nil)).Elem()
}

func (o TransitRouterOutput) ToTransitRouterOutput() TransitRouterOutput {
	return o
}

func (o TransitRouterOutput) ToTransitRouterOutputWithContext(ctx context.Context) TransitRouterOutput {
	return o
}

// The ID of account.
func (o TransitRouterOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouter) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The business status of the transit router.
func (o TransitRouterOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouter) pulumi.StringOutput { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The create time.
func (o TransitRouterOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouter) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the transit router.
func (o TransitRouterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TransitRouter) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The overdue time.
func (o TransitRouterOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouter) pulumi.StringOutput { return v.OverdueTime }).(pulumi.StringOutput)
}

// The status of the transit router.
func (o TransitRouterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouter) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The attachments of transit router.
func (o TransitRouterOutput) TransitRouterAttachments() TransitRouterTransitRouterAttachmentArrayOutput {
	return o.ApplyT(func(v *TransitRouter) TransitRouterTransitRouterAttachmentArrayOutput {
		return v.TransitRouterAttachments
	}).(TransitRouterTransitRouterAttachmentArrayOutput)
}

// The ID of the transit router.
func (o TransitRouterOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouter) pulumi.StringOutput { return v.TransitRouterId }).(pulumi.StringOutput)
}

// The name of the transit router.
func (o TransitRouterOutput) TransitRouterName() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouter) pulumi.StringOutput { return v.TransitRouterName }).(pulumi.StringOutput)
}

// The update time.
func (o TransitRouterOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *TransitRouter) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type TransitRouterArrayOutput struct{ *pulumi.OutputState }

func (TransitRouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TransitRouter)(nil)).Elem()
}

func (o TransitRouterArrayOutput) ToTransitRouterArrayOutput() TransitRouterArrayOutput {
	return o
}

func (o TransitRouterArrayOutput) ToTransitRouterArrayOutputWithContext(ctx context.Context) TransitRouterArrayOutput {
	return o
}

func (o TransitRouterArrayOutput) Index(i pulumi.IntInput) TransitRouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TransitRouter {
		return vs[0].([]*TransitRouter)[vs[1].(int)]
	}).(TransitRouterOutput)
}

type TransitRouterMapOutput struct{ *pulumi.OutputState }

func (TransitRouterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TransitRouter)(nil)).Elem()
}

func (o TransitRouterMapOutput) ToTransitRouterMapOutput() TransitRouterMapOutput {
	return o
}

func (o TransitRouterMapOutput) ToTransitRouterMapOutputWithContext(ctx context.Context) TransitRouterMapOutput {
	return o
}

func (o TransitRouterMapOutput) MapIndex(k pulumi.StringInput) TransitRouterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TransitRouter {
		return vs[0].(map[string]*TransitRouter)[vs[1].(string)]
	}).(TransitRouterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterInput)(nil)).Elem(), &TransitRouter{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterArrayInput)(nil)).Elem(), TransitRouterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TransitRouterMapInput)(nil)).Elem(), TransitRouterMap{})
	pulumi.RegisterOutputType(TransitRouterOutput{})
	pulumi.RegisterOutputType(TransitRouterArrayOutput{})
	pulumi.RegisterOutputType(TransitRouterMapOutput{})
}
