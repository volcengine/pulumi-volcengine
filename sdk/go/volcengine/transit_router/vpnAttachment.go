// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transit_router

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage transit router vpn attachment
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/transit_router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := transit_router.NewVpnAttachment(ctx, "foo", &transit_router.VpnAttachmentArgs{
//				Description:                 pulumi.String("desc"),
//				TransitRouterAttachmentName: pulumi.String("tf-test"),
//				TransitRouterId:             pulumi.String("tr-2d6frp10q687458ozfep4****"),
//				VpnConnectionId:             pulumi.String("vgc-3reidwjf1t1c05zsk2hik****"),
//				ZoneId:                      pulumi.String("cn-beijing-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TransitRouterVpnAttachment can be imported using the transitRouterId:attachmentId, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:transit_router/vpnAttachment:VpnAttachment default tr-2d6fr7mzya2gw58ozfes5g2oh:tr-attach-7qthudw0ll6jmc****
//
// ```
type VpnAttachment struct {
	pulumi.CustomResourceState

	// The create time.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of the transit router vpn attachment.
	Description pulumi.StringOutput `pulumi:"description"`
	// The status of the transit router.
	Status pulumi.StringOutput `pulumi:"status"`
	// The id of the transit router vpn attachment.
	TransitRouterAttachmentId pulumi.StringOutput `pulumi:"transitRouterAttachmentId"`
	// The name of the transit router vpn attachment.
	TransitRouterAttachmentName pulumi.StringOutput `pulumi:"transitRouterAttachmentName"`
	// The id of the transit router.
	TransitRouterId pulumi.StringOutput `pulumi:"transitRouterId"`
	// The update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The ID of the IPSec connection.
	VpnConnectionId pulumi.StringOutput `pulumi:"vpnConnectionId"`
	// The ID of the availability zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewVpnAttachment registers a new resource with the given unique name, arguments, and options.
func NewVpnAttachment(ctx *pulumi.Context,
	name string, args *VpnAttachmentArgs, opts ...pulumi.ResourceOption) (*VpnAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TransitRouterId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterId'")
	}
	if args.VpnConnectionId == nil {
		return nil, errors.New("invalid value for required argument 'VpnConnectionId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VpnAttachment
	err := ctx.RegisterResource("volcengine:transit_router/vpnAttachment:VpnAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpnAttachment gets an existing VpnAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpnAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpnAttachmentState, opts ...pulumi.ResourceOption) (*VpnAttachment, error) {
	var resource VpnAttachment
	err := ctx.ReadResource("volcengine:transit_router/vpnAttachment:VpnAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VpnAttachment resources.
type vpnAttachmentState struct {
	// The create time.
	CreationTime *string `pulumi:"creationTime"`
	// The description of the transit router vpn attachment.
	Description *string `pulumi:"description"`
	// The status of the transit router.
	Status *string `pulumi:"status"`
	// The id of the transit router vpn attachment.
	TransitRouterAttachmentId *string `pulumi:"transitRouterAttachmentId"`
	// The name of the transit router vpn attachment.
	TransitRouterAttachmentName *string `pulumi:"transitRouterAttachmentName"`
	// The id of the transit router.
	TransitRouterId *string `pulumi:"transitRouterId"`
	// The update time.
	UpdateTime *string `pulumi:"updateTime"`
	// The ID of the IPSec connection.
	VpnConnectionId *string `pulumi:"vpnConnectionId"`
	// The ID of the availability zone.
	ZoneId *string `pulumi:"zoneId"`
}

type VpnAttachmentState struct {
	// The create time.
	CreationTime pulumi.StringPtrInput
	// The description of the transit router vpn attachment.
	Description pulumi.StringPtrInput
	// The status of the transit router.
	Status pulumi.StringPtrInput
	// The id of the transit router vpn attachment.
	TransitRouterAttachmentId pulumi.StringPtrInput
	// The name of the transit router vpn attachment.
	TransitRouterAttachmentName pulumi.StringPtrInput
	// The id of the transit router.
	TransitRouterId pulumi.StringPtrInput
	// The update time.
	UpdateTime pulumi.StringPtrInput
	// The ID of the IPSec connection.
	VpnConnectionId pulumi.StringPtrInput
	// The ID of the availability zone.
	ZoneId pulumi.StringPtrInput
}

func (VpnAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnAttachmentState)(nil)).Elem()
}

type vpnAttachmentArgs struct {
	// The description of the transit router vpn attachment.
	Description *string `pulumi:"description"`
	// The name of the transit router vpn attachment.
	TransitRouterAttachmentName *string `pulumi:"transitRouterAttachmentName"`
	// The id of the transit router.
	TransitRouterId string `pulumi:"transitRouterId"`
	// The ID of the IPSec connection.
	VpnConnectionId string `pulumi:"vpnConnectionId"`
	// The ID of the availability zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a VpnAttachment resource.
type VpnAttachmentArgs struct {
	// The description of the transit router vpn attachment.
	Description pulumi.StringPtrInput
	// The name of the transit router vpn attachment.
	TransitRouterAttachmentName pulumi.StringPtrInput
	// The id of the transit router.
	TransitRouterId pulumi.StringInput
	// The ID of the IPSec connection.
	VpnConnectionId pulumi.StringInput
	// The ID of the availability zone.
	ZoneId pulumi.StringInput
}

func (VpnAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpnAttachmentArgs)(nil)).Elem()
}

type VpnAttachmentInput interface {
	pulumi.Input

	ToVpnAttachmentOutput() VpnAttachmentOutput
	ToVpnAttachmentOutputWithContext(ctx context.Context) VpnAttachmentOutput
}

func (*VpnAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnAttachment)(nil)).Elem()
}

func (i *VpnAttachment) ToVpnAttachmentOutput() VpnAttachmentOutput {
	return i.ToVpnAttachmentOutputWithContext(context.Background())
}

func (i *VpnAttachment) ToVpnAttachmentOutputWithContext(ctx context.Context) VpnAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnAttachmentOutput)
}

// VpnAttachmentArrayInput is an input type that accepts VpnAttachmentArray and VpnAttachmentArrayOutput values.
// You can construct a concrete instance of `VpnAttachmentArrayInput` via:
//
//	VpnAttachmentArray{ VpnAttachmentArgs{...} }
type VpnAttachmentArrayInput interface {
	pulumi.Input

	ToVpnAttachmentArrayOutput() VpnAttachmentArrayOutput
	ToVpnAttachmentArrayOutputWithContext(context.Context) VpnAttachmentArrayOutput
}

type VpnAttachmentArray []VpnAttachmentInput

func (VpnAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnAttachment)(nil)).Elem()
}

func (i VpnAttachmentArray) ToVpnAttachmentArrayOutput() VpnAttachmentArrayOutput {
	return i.ToVpnAttachmentArrayOutputWithContext(context.Background())
}

func (i VpnAttachmentArray) ToVpnAttachmentArrayOutputWithContext(ctx context.Context) VpnAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnAttachmentArrayOutput)
}

// VpnAttachmentMapInput is an input type that accepts VpnAttachmentMap and VpnAttachmentMapOutput values.
// You can construct a concrete instance of `VpnAttachmentMapInput` via:
//
//	VpnAttachmentMap{ "key": VpnAttachmentArgs{...} }
type VpnAttachmentMapInput interface {
	pulumi.Input

	ToVpnAttachmentMapOutput() VpnAttachmentMapOutput
	ToVpnAttachmentMapOutputWithContext(context.Context) VpnAttachmentMapOutput
}

type VpnAttachmentMap map[string]VpnAttachmentInput

func (VpnAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnAttachment)(nil)).Elem()
}

func (i VpnAttachmentMap) ToVpnAttachmentMapOutput() VpnAttachmentMapOutput {
	return i.ToVpnAttachmentMapOutputWithContext(context.Background())
}

func (i VpnAttachmentMap) ToVpnAttachmentMapOutputWithContext(ctx context.Context) VpnAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpnAttachmentMapOutput)
}

type VpnAttachmentOutput struct{ *pulumi.OutputState }

func (VpnAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VpnAttachment)(nil)).Elem()
}

func (o VpnAttachmentOutput) ToVpnAttachmentOutput() VpnAttachmentOutput {
	return o
}

func (o VpnAttachmentOutput) ToVpnAttachmentOutputWithContext(ctx context.Context) VpnAttachmentOutput {
	return o
}

// The create time.
func (o VpnAttachmentOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnAttachment) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the transit router vpn attachment.
func (o VpnAttachmentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnAttachment) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The status of the transit router.
func (o VpnAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnAttachment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The id of the transit router vpn attachment.
func (o VpnAttachmentOutput) TransitRouterAttachmentId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnAttachment) pulumi.StringOutput { return v.TransitRouterAttachmentId }).(pulumi.StringOutput)
}

// The name of the transit router vpn attachment.
func (o VpnAttachmentOutput) TransitRouterAttachmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnAttachment) pulumi.StringOutput { return v.TransitRouterAttachmentName }).(pulumi.StringOutput)
}

// The id of the transit router.
func (o VpnAttachmentOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnAttachment) pulumi.StringOutput { return v.TransitRouterId }).(pulumi.StringOutput)
}

// The update time.
func (o VpnAttachmentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnAttachment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The ID of the IPSec connection.
func (o VpnAttachmentOutput) VpnConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnAttachment) pulumi.StringOutput { return v.VpnConnectionId }).(pulumi.StringOutput)
}

// The ID of the availability zone.
func (o VpnAttachmentOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *VpnAttachment) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type VpnAttachmentArrayOutput struct{ *pulumi.OutputState }

func (VpnAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VpnAttachment)(nil)).Elem()
}

func (o VpnAttachmentArrayOutput) ToVpnAttachmentArrayOutput() VpnAttachmentArrayOutput {
	return o
}

func (o VpnAttachmentArrayOutput) ToVpnAttachmentArrayOutputWithContext(ctx context.Context) VpnAttachmentArrayOutput {
	return o
}

func (o VpnAttachmentArrayOutput) Index(i pulumi.IntInput) VpnAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VpnAttachment {
		return vs[0].([]*VpnAttachment)[vs[1].(int)]
	}).(VpnAttachmentOutput)
}

type VpnAttachmentMapOutput struct{ *pulumi.OutputState }

func (VpnAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VpnAttachment)(nil)).Elem()
}

func (o VpnAttachmentMapOutput) ToVpnAttachmentMapOutput() VpnAttachmentMapOutput {
	return o
}

func (o VpnAttachmentMapOutput) ToVpnAttachmentMapOutputWithContext(ctx context.Context) VpnAttachmentMapOutput {
	return o
}

func (o VpnAttachmentMapOutput) MapIndex(k pulumi.StringInput) VpnAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VpnAttachment {
		return vs[0].(map[string]*VpnAttachment)[vs[1].(string)]
	}).(VpnAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpnAttachmentInput)(nil)).Elem(), &VpnAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnAttachmentArrayInput)(nil)).Elem(), VpnAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpnAttachmentMapInput)(nil)).Elem(), VpnAttachmentMap{})
	pulumi.RegisterOutputType(VpnAttachmentOutput{})
	pulumi.RegisterOutputType(VpnAttachmentArrayOutput{})
	pulumi.RegisterOutputType(VpnAttachmentMapOutput{})
}
