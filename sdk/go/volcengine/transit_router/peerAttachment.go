// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transit_router

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage transit router peer attachment
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/transit_router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooBandwidthPackage, err := transit_router.NewBandwidthPackage(ctx, "fooBandwidthPackage", &transit_router.BandwidthPackageArgs{
//				TransitRouterBandwidthPackageName: pulumi.String("acc-tf-test"),
//				Description:                       pulumi.String("acc-test"),
//				Bandwidth:                         pulumi.Int(2),
//				Period:                            pulumi.Int(1),
//				RenewType:                         pulumi.String("Manual"),
//				RenewPeriod:                       pulumi.Int(1),
//				RemainRenewTimes:                  -1,
//			})
//			if err != nil {
//				return err
//			}
//			fooTransitRouter, err := transit_router.NewTransitRouter(ctx, "fooTransitRouter", &transit_router.TransitRouterArgs{
//				TransitRouterName: pulumi.String("acc-test-tf"),
//				Description:       pulumi.String("acc-test-tf"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = transit_router.NewPeerAttachment(ctx, "fooPeerAttachment", &transit_router.PeerAttachmentArgs{
//				TransitRouterId:                 fooTransitRouter.ID(),
//				TransitRouterAttachmentName:     pulumi.String("acc-test-tf"),
//				Description:                     pulumi.String("tf-test"),
//				PeerTransitRouterId:             pulumi.String("tr-xxx"),
//				PeerTransitRouterRegionId:       pulumi.String("cn-xx"),
//				TransitRouterBandwidthPackageId: fooBandwidthPackage.ID(),
//				Bandwidth:                       pulumi.Int(2),
//				Tags: transit_router.PeerAttachmentTagArray{
//					&transit_router.PeerAttachmentTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TransitRouterPeerAttachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:transit_router/peerAttachment:PeerAttachment default tr-attach-12be67d0yh2io17q7y1au****
//
// ```
type PeerAttachment struct {
	pulumi.CustomResourceState

	// The bandwidth of the transit router peer attachment. Unit: Mbps.
	Bandwidth pulumi.IntPtrOutput `pulumi:"bandwidth"`
	// The creation time of the transit router peer attachment.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of the transit router peer attachment.
	Description pulumi.StringOutput `pulumi:"description"`
	// The id of the peer transit router.
	PeerTransitRouterId pulumi.StringOutput `pulumi:"peerTransitRouterId"`
	// The region id of the peer transit router.
	PeerTransitRouterRegionId pulumi.StringOutput `pulumi:"peerTransitRouterRegionId"`
	// The status of the transit router peer attachment.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags.
	Tags PeerAttachmentTagArrayOutput `pulumi:"tags"`
	// The name of the transit router peer attachment.
	TransitRouterAttachmentName pulumi.StringOutput `pulumi:"transitRouterAttachmentName"`
	// The bandwidth package id of the transit router peer attachment. When specifying this field, the field `bandwidth` must also be specified.
	TransitRouterBandwidthPackageId pulumi.StringPtrOutput `pulumi:"transitRouterBandwidthPackageId"`
	// The id of the local transit router.
	TransitRouterId pulumi.StringOutput `pulumi:"transitRouterId"`
	// The route table id of the transit router peer attachment.
	TransitRouterRouteTableId pulumi.StringOutput `pulumi:"transitRouterRouteTableId"`
	// The update time of the transit router peer attachment.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewPeerAttachment registers a new resource with the given unique name, arguments, and options.
func NewPeerAttachment(ctx *pulumi.Context,
	name string, args *PeerAttachmentArgs, opts ...pulumi.ResourceOption) (*PeerAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PeerTransitRouterId == nil {
		return nil, errors.New("invalid value for required argument 'PeerTransitRouterId'")
	}
	if args.PeerTransitRouterRegionId == nil {
		return nil, errors.New("invalid value for required argument 'PeerTransitRouterRegionId'")
	}
	if args.TransitRouterId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PeerAttachment
	err := ctx.RegisterResource("volcengine:transit_router/peerAttachment:PeerAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeerAttachment gets an existing PeerAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeerAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeerAttachmentState, opts ...pulumi.ResourceOption) (*PeerAttachment, error) {
	var resource PeerAttachment
	err := ctx.ReadResource("volcengine:transit_router/peerAttachment:PeerAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PeerAttachment resources.
type peerAttachmentState struct {
	// The bandwidth of the transit router peer attachment. Unit: Mbps.
	Bandwidth *int `pulumi:"bandwidth"`
	// The creation time of the transit router peer attachment.
	CreationTime *string `pulumi:"creationTime"`
	// The description of the transit router peer attachment.
	Description *string `pulumi:"description"`
	// The id of the peer transit router.
	PeerTransitRouterId *string `pulumi:"peerTransitRouterId"`
	// The region id of the peer transit router.
	PeerTransitRouterRegionId *string `pulumi:"peerTransitRouterRegionId"`
	// The status of the transit router peer attachment.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []PeerAttachmentTag `pulumi:"tags"`
	// The name of the transit router peer attachment.
	TransitRouterAttachmentName *string `pulumi:"transitRouterAttachmentName"`
	// The bandwidth package id of the transit router peer attachment. When specifying this field, the field `bandwidth` must also be specified.
	TransitRouterBandwidthPackageId *string `pulumi:"transitRouterBandwidthPackageId"`
	// The id of the local transit router.
	TransitRouterId *string `pulumi:"transitRouterId"`
	// The route table id of the transit router peer attachment.
	TransitRouterRouteTableId *string `pulumi:"transitRouterRouteTableId"`
	// The update time of the transit router peer attachment.
	UpdateTime *string `pulumi:"updateTime"`
}

type PeerAttachmentState struct {
	// The bandwidth of the transit router peer attachment. Unit: Mbps.
	Bandwidth pulumi.IntPtrInput
	// The creation time of the transit router peer attachment.
	CreationTime pulumi.StringPtrInput
	// The description of the transit router peer attachment.
	Description pulumi.StringPtrInput
	// The id of the peer transit router.
	PeerTransitRouterId pulumi.StringPtrInput
	// The region id of the peer transit router.
	PeerTransitRouterRegionId pulumi.StringPtrInput
	// The status of the transit router peer attachment.
	Status pulumi.StringPtrInput
	// Tags.
	Tags PeerAttachmentTagArrayInput
	// The name of the transit router peer attachment.
	TransitRouterAttachmentName pulumi.StringPtrInput
	// The bandwidth package id of the transit router peer attachment. When specifying this field, the field `bandwidth` must also be specified.
	TransitRouterBandwidthPackageId pulumi.StringPtrInput
	// The id of the local transit router.
	TransitRouterId pulumi.StringPtrInput
	// The route table id of the transit router peer attachment.
	TransitRouterRouteTableId pulumi.StringPtrInput
	// The update time of the transit router peer attachment.
	UpdateTime pulumi.StringPtrInput
}

func (PeerAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*peerAttachmentState)(nil)).Elem()
}

type peerAttachmentArgs struct {
	// The bandwidth of the transit router peer attachment. Unit: Mbps.
	Bandwidth *int `pulumi:"bandwidth"`
	// The description of the transit router peer attachment.
	Description *string `pulumi:"description"`
	// The id of the peer transit router.
	PeerTransitRouterId string `pulumi:"peerTransitRouterId"`
	// The region id of the peer transit router.
	PeerTransitRouterRegionId string `pulumi:"peerTransitRouterRegionId"`
	// Tags.
	Tags []PeerAttachmentTag `pulumi:"tags"`
	// The name of the transit router peer attachment.
	TransitRouterAttachmentName *string `pulumi:"transitRouterAttachmentName"`
	// The bandwidth package id of the transit router peer attachment. When specifying this field, the field `bandwidth` must also be specified.
	TransitRouterBandwidthPackageId *string `pulumi:"transitRouterBandwidthPackageId"`
	// The id of the local transit router.
	TransitRouterId string `pulumi:"transitRouterId"`
}

// The set of arguments for constructing a PeerAttachment resource.
type PeerAttachmentArgs struct {
	// The bandwidth of the transit router peer attachment. Unit: Mbps.
	Bandwidth pulumi.IntPtrInput
	// The description of the transit router peer attachment.
	Description pulumi.StringPtrInput
	// The id of the peer transit router.
	PeerTransitRouterId pulumi.StringInput
	// The region id of the peer transit router.
	PeerTransitRouterRegionId pulumi.StringInput
	// Tags.
	Tags PeerAttachmentTagArrayInput
	// The name of the transit router peer attachment.
	TransitRouterAttachmentName pulumi.StringPtrInput
	// The bandwidth package id of the transit router peer attachment. When specifying this field, the field `bandwidth` must also be specified.
	TransitRouterBandwidthPackageId pulumi.StringPtrInput
	// The id of the local transit router.
	TransitRouterId pulumi.StringInput
}

func (PeerAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peerAttachmentArgs)(nil)).Elem()
}

type PeerAttachmentInput interface {
	pulumi.Input

	ToPeerAttachmentOutput() PeerAttachmentOutput
	ToPeerAttachmentOutputWithContext(ctx context.Context) PeerAttachmentOutput
}

func (*PeerAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAttachment)(nil)).Elem()
}

func (i *PeerAttachment) ToPeerAttachmentOutput() PeerAttachmentOutput {
	return i.ToPeerAttachmentOutputWithContext(context.Background())
}

func (i *PeerAttachment) ToPeerAttachmentOutputWithContext(ctx context.Context) PeerAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAttachmentOutput)
}

// PeerAttachmentArrayInput is an input type that accepts PeerAttachmentArray and PeerAttachmentArrayOutput values.
// You can construct a concrete instance of `PeerAttachmentArrayInput` via:
//
//	PeerAttachmentArray{ PeerAttachmentArgs{...} }
type PeerAttachmentArrayInput interface {
	pulumi.Input

	ToPeerAttachmentArrayOutput() PeerAttachmentArrayOutput
	ToPeerAttachmentArrayOutputWithContext(context.Context) PeerAttachmentArrayOutput
}

type PeerAttachmentArray []PeerAttachmentInput

func (PeerAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeerAttachment)(nil)).Elem()
}

func (i PeerAttachmentArray) ToPeerAttachmentArrayOutput() PeerAttachmentArrayOutput {
	return i.ToPeerAttachmentArrayOutputWithContext(context.Background())
}

func (i PeerAttachmentArray) ToPeerAttachmentArrayOutputWithContext(ctx context.Context) PeerAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAttachmentArrayOutput)
}

// PeerAttachmentMapInput is an input type that accepts PeerAttachmentMap and PeerAttachmentMapOutput values.
// You can construct a concrete instance of `PeerAttachmentMapInput` via:
//
//	PeerAttachmentMap{ "key": PeerAttachmentArgs{...} }
type PeerAttachmentMapInput interface {
	pulumi.Input

	ToPeerAttachmentMapOutput() PeerAttachmentMapOutput
	ToPeerAttachmentMapOutputWithContext(context.Context) PeerAttachmentMapOutput
}

type PeerAttachmentMap map[string]PeerAttachmentInput

func (PeerAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeerAttachment)(nil)).Elem()
}

func (i PeerAttachmentMap) ToPeerAttachmentMapOutput() PeerAttachmentMapOutput {
	return i.ToPeerAttachmentMapOutputWithContext(context.Background())
}

func (i PeerAttachmentMap) ToPeerAttachmentMapOutputWithContext(ctx context.Context) PeerAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PeerAttachmentMapOutput)
}

type PeerAttachmentOutput struct{ *pulumi.OutputState }

func (PeerAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PeerAttachment)(nil)).Elem()
}

func (o PeerAttachmentOutput) ToPeerAttachmentOutput() PeerAttachmentOutput {
	return o
}

func (o PeerAttachmentOutput) ToPeerAttachmentOutputWithContext(ctx context.Context) PeerAttachmentOutput {
	return o
}

// The bandwidth of the transit router peer attachment. Unit: Mbps.
func (o PeerAttachmentOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.IntPtrOutput { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// The creation time of the transit router peer attachment.
func (o PeerAttachmentOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the transit router peer attachment.
func (o PeerAttachmentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The id of the peer transit router.
func (o PeerAttachmentOutput) PeerTransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringOutput { return v.PeerTransitRouterId }).(pulumi.StringOutput)
}

// The region id of the peer transit router.
func (o PeerAttachmentOutput) PeerTransitRouterRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringOutput { return v.PeerTransitRouterRegionId }).(pulumi.StringOutput)
}

// The status of the transit router peer attachment.
func (o PeerAttachmentOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o PeerAttachmentOutput) Tags() PeerAttachmentTagArrayOutput {
	return o.ApplyT(func(v *PeerAttachment) PeerAttachmentTagArrayOutput { return v.Tags }).(PeerAttachmentTagArrayOutput)
}

// The name of the transit router peer attachment.
func (o PeerAttachmentOutput) TransitRouterAttachmentName() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringOutput { return v.TransitRouterAttachmentName }).(pulumi.StringOutput)
}

// The bandwidth package id of the transit router peer attachment. When specifying this field, the field `bandwidth` must also be specified.
func (o PeerAttachmentOutput) TransitRouterBandwidthPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringPtrOutput { return v.TransitRouterBandwidthPackageId }).(pulumi.StringPtrOutput)
}

// The id of the local transit router.
func (o PeerAttachmentOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringOutput { return v.TransitRouterId }).(pulumi.StringOutput)
}

// The route table id of the transit router peer attachment.
func (o PeerAttachmentOutput) TransitRouterRouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringOutput { return v.TransitRouterRouteTableId }).(pulumi.StringOutput)
}

// The update time of the transit router peer attachment.
func (o PeerAttachmentOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *PeerAttachment) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type PeerAttachmentArrayOutput struct{ *pulumi.OutputState }

func (PeerAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PeerAttachment)(nil)).Elem()
}

func (o PeerAttachmentArrayOutput) ToPeerAttachmentArrayOutput() PeerAttachmentArrayOutput {
	return o
}

func (o PeerAttachmentArrayOutput) ToPeerAttachmentArrayOutputWithContext(ctx context.Context) PeerAttachmentArrayOutput {
	return o
}

func (o PeerAttachmentArrayOutput) Index(i pulumi.IntInput) PeerAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PeerAttachment {
		return vs[0].([]*PeerAttachment)[vs[1].(int)]
	}).(PeerAttachmentOutput)
}

type PeerAttachmentMapOutput struct{ *pulumi.OutputState }

func (PeerAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PeerAttachment)(nil)).Elem()
}

func (o PeerAttachmentMapOutput) ToPeerAttachmentMapOutput() PeerAttachmentMapOutput {
	return o
}

func (o PeerAttachmentMapOutput) ToPeerAttachmentMapOutputWithContext(ctx context.Context) PeerAttachmentMapOutput {
	return o
}

func (o PeerAttachmentMapOutput) MapIndex(k pulumi.StringInput) PeerAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PeerAttachment {
		return vs[0].(map[string]*PeerAttachment)[vs[1].(string)]
	}).(PeerAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PeerAttachmentInput)(nil)).Elem(), &PeerAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerAttachmentArrayInput)(nil)).Elem(), PeerAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PeerAttachmentMapInput)(nil)).Elem(), PeerAttachmentMap{})
	pulumi.RegisterOutputType(PeerAttachmentOutput{})
	pulumi.RegisterOutputType(PeerAttachmentArrayOutput{})
	pulumi.RegisterOutputType(PeerAttachmentMapOutput{})
}
