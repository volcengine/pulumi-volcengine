// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package transit_router

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage transit router shared transit router state
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/transit_router"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := transit_router.NewSharedTransitRouterState(ctx, "foo", &transit_router.SharedTransitRouterStateArgs{
//				Action:          pulumi.String("Reject"),
//				TransitRouterId: pulumi.String("tr-2bzy39uy6u3282dx0efxiqyq0"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SharedTransitRouterState can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:transit_router/sharedTransitRouterState:SharedTransitRouterState default state:transitRouterId
//
// ```
type SharedTransitRouterState struct {
	pulumi.CustomResourceState

	// `Accept` or `Reject` the shared transit router.
	Action pulumi.StringOutput `pulumi:"action"`
	// The id of the transit router.
	TransitRouterId pulumi.StringOutput `pulumi:"transitRouterId"`
}

// NewSharedTransitRouterState registers a new resource with the given unique name, arguments, and options.
func NewSharedTransitRouterState(ctx *pulumi.Context,
	name string, args *SharedTransitRouterStateArgs, opts ...pulumi.ResourceOption) (*SharedTransitRouterState, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Action == nil {
		return nil, errors.New("invalid value for required argument 'Action'")
	}
	if args.TransitRouterId == nil {
		return nil, errors.New("invalid value for required argument 'TransitRouterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SharedTransitRouterState
	err := ctx.RegisterResource("volcengine:transit_router/sharedTransitRouterState:SharedTransitRouterState", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSharedTransitRouterState gets an existing SharedTransitRouterState resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSharedTransitRouterState(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SharedTransitRouterStateState, opts ...pulumi.ResourceOption) (*SharedTransitRouterState, error) {
	var resource SharedTransitRouterState
	err := ctx.ReadResource("volcengine:transit_router/sharedTransitRouterState:SharedTransitRouterState", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SharedTransitRouterState resources.
type sharedTransitRouterStateState struct {
	// `Accept` or `Reject` the shared transit router.
	Action *string `pulumi:"action"`
	// The id of the transit router.
	TransitRouterId *string `pulumi:"transitRouterId"`
}

type SharedTransitRouterStateState struct {
	// `Accept` or `Reject` the shared transit router.
	Action pulumi.StringPtrInput
	// The id of the transit router.
	TransitRouterId pulumi.StringPtrInput
}

func (SharedTransitRouterStateState) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedTransitRouterStateState)(nil)).Elem()
}

type sharedTransitRouterStateArgs struct {
	// `Accept` or `Reject` the shared transit router.
	Action string `pulumi:"action"`
	// The id of the transit router.
	TransitRouterId string `pulumi:"transitRouterId"`
}

// The set of arguments for constructing a SharedTransitRouterState resource.
type SharedTransitRouterStateArgs struct {
	// `Accept` or `Reject` the shared transit router.
	Action pulumi.StringInput
	// The id of the transit router.
	TransitRouterId pulumi.StringInput
}

func (SharedTransitRouterStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sharedTransitRouterStateArgs)(nil)).Elem()
}

type SharedTransitRouterStateInput interface {
	pulumi.Input

	ToSharedTransitRouterStateOutput() SharedTransitRouterStateOutput
	ToSharedTransitRouterStateOutputWithContext(ctx context.Context) SharedTransitRouterStateOutput
}

func (*SharedTransitRouterState) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedTransitRouterState)(nil)).Elem()
}

func (i *SharedTransitRouterState) ToSharedTransitRouterStateOutput() SharedTransitRouterStateOutput {
	return i.ToSharedTransitRouterStateOutputWithContext(context.Background())
}

func (i *SharedTransitRouterState) ToSharedTransitRouterStateOutputWithContext(ctx context.Context) SharedTransitRouterStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedTransitRouterStateOutput)
}

// SharedTransitRouterStateArrayInput is an input type that accepts SharedTransitRouterStateArray and SharedTransitRouterStateArrayOutput values.
// You can construct a concrete instance of `SharedTransitRouterStateArrayInput` via:
//
//	SharedTransitRouterStateArray{ SharedTransitRouterStateArgs{...} }
type SharedTransitRouterStateArrayInput interface {
	pulumi.Input

	ToSharedTransitRouterStateArrayOutput() SharedTransitRouterStateArrayOutput
	ToSharedTransitRouterStateArrayOutputWithContext(context.Context) SharedTransitRouterStateArrayOutput
}

type SharedTransitRouterStateArray []SharedTransitRouterStateInput

func (SharedTransitRouterStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedTransitRouterState)(nil)).Elem()
}

func (i SharedTransitRouterStateArray) ToSharedTransitRouterStateArrayOutput() SharedTransitRouterStateArrayOutput {
	return i.ToSharedTransitRouterStateArrayOutputWithContext(context.Background())
}

func (i SharedTransitRouterStateArray) ToSharedTransitRouterStateArrayOutputWithContext(ctx context.Context) SharedTransitRouterStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedTransitRouterStateArrayOutput)
}

// SharedTransitRouterStateMapInput is an input type that accepts SharedTransitRouterStateMap and SharedTransitRouterStateMapOutput values.
// You can construct a concrete instance of `SharedTransitRouterStateMapInput` via:
//
//	SharedTransitRouterStateMap{ "key": SharedTransitRouterStateArgs{...} }
type SharedTransitRouterStateMapInput interface {
	pulumi.Input

	ToSharedTransitRouterStateMapOutput() SharedTransitRouterStateMapOutput
	ToSharedTransitRouterStateMapOutputWithContext(context.Context) SharedTransitRouterStateMapOutput
}

type SharedTransitRouterStateMap map[string]SharedTransitRouterStateInput

func (SharedTransitRouterStateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedTransitRouterState)(nil)).Elem()
}

func (i SharedTransitRouterStateMap) ToSharedTransitRouterStateMapOutput() SharedTransitRouterStateMapOutput {
	return i.ToSharedTransitRouterStateMapOutputWithContext(context.Background())
}

func (i SharedTransitRouterStateMap) ToSharedTransitRouterStateMapOutputWithContext(ctx context.Context) SharedTransitRouterStateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SharedTransitRouterStateMapOutput)
}

type SharedTransitRouterStateOutput struct{ *pulumi.OutputState }

func (SharedTransitRouterStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SharedTransitRouterState)(nil)).Elem()
}

func (o SharedTransitRouterStateOutput) ToSharedTransitRouterStateOutput() SharedTransitRouterStateOutput {
	return o
}

func (o SharedTransitRouterStateOutput) ToSharedTransitRouterStateOutputWithContext(ctx context.Context) SharedTransitRouterStateOutput {
	return o
}

// `Accept` or `Reject` the shared transit router.
func (o SharedTransitRouterStateOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedTransitRouterState) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The id of the transit router.
func (o SharedTransitRouterStateOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *SharedTransitRouterState) pulumi.StringOutput { return v.TransitRouterId }).(pulumi.StringOutput)
}

type SharedTransitRouterStateArrayOutput struct{ *pulumi.OutputState }

func (SharedTransitRouterStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SharedTransitRouterState)(nil)).Elem()
}

func (o SharedTransitRouterStateArrayOutput) ToSharedTransitRouterStateArrayOutput() SharedTransitRouterStateArrayOutput {
	return o
}

func (o SharedTransitRouterStateArrayOutput) ToSharedTransitRouterStateArrayOutputWithContext(ctx context.Context) SharedTransitRouterStateArrayOutput {
	return o
}

func (o SharedTransitRouterStateArrayOutput) Index(i pulumi.IntInput) SharedTransitRouterStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SharedTransitRouterState {
		return vs[0].([]*SharedTransitRouterState)[vs[1].(int)]
	}).(SharedTransitRouterStateOutput)
}

type SharedTransitRouterStateMapOutput struct{ *pulumi.OutputState }

func (SharedTransitRouterStateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SharedTransitRouterState)(nil)).Elem()
}

func (o SharedTransitRouterStateMapOutput) ToSharedTransitRouterStateMapOutput() SharedTransitRouterStateMapOutput {
	return o
}

func (o SharedTransitRouterStateMapOutput) ToSharedTransitRouterStateMapOutputWithContext(ctx context.Context) SharedTransitRouterStateMapOutput {
	return o
}

func (o SharedTransitRouterStateMapOutput) MapIndex(k pulumi.StringInput) SharedTransitRouterStateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SharedTransitRouterState {
		return vs[0].(map[string]*SharedTransitRouterState)[vs[1].(string)]
	}).(SharedTransitRouterStateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SharedTransitRouterStateInput)(nil)).Elem(), &SharedTransitRouterState{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedTransitRouterStateArrayInput)(nil)).Elem(), SharedTransitRouterStateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SharedTransitRouterStateMapInput)(nil)).Elem(), SharedTransitRouterStateMap{})
	pulumi.RegisterOutputType(SharedTransitRouterStateOutput{})
	pulumi.RegisterOutputType(SharedTransitRouterStateArrayOutput{})
	pulumi.RegisterOutputType(SharedTransitRouterStateMapOutput{})
}
