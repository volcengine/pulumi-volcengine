// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package veenedge

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of veenedge vpcs
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := veenedge.GetVpcs(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVpcs(ctx *pulumi.Context, args *GetVpcsArgs, opts ...pulumi.InvokeOption) (*GetVpcsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpcsResult
	err := ctx.Invoke("volcengine:veenedge/getVpcs:getVpcs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcs.
type GetVpcsArgs struct {
	// A list of vpc IDs.
	Ids []string `pulumi:"ids"`
	// A Name Regex of Vpc.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getVpcs.
type GetVpcsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// The total count of Vpc query.
	TotalCount int `pulumi:"totalCount"`
	// The collection of Vpc query.
	VpcInstances []GetVpcsVpcInstance `pulumi:"vpcInstances"`
}

func GetVpcsOutput(ctx *pulumi.Context, args GetVpcsOutputArgs, opts ...pulumi.InvokeOption) GetVpcsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVpcsResult, error) {
			args := v.(GetVpcsArgs)
			r, err := GetVpcs(ctx, &args, opts...)
			var s GetVpcsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVpcsResultOutput)
}

// A collection of arguments for invoking getVpcs.
type GetVpcsOutputArgs struct {
	// A list of vpc IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of Vpc.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetVpcsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsArgs)(nil)).Elem()
}

// A collection of values returned by getVpcs.
type GetVpcsResultOutput struct{ *pulumi.OutputState }

func (GetVpcsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcsResult)(nil)).Elem()
}

func (o GetVpcsResultOutput) ToGetVpcsResultOutput() GetVpcsResultOutput {
	return o
}

func (o GetVpcsResultOutput) ToGetVpcsResultOutputWithContext(ctx context.Context) GetVpcsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetVpcsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVpcsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVpcsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetVpcsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpcsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetVpcsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpcsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of Vpc query.
func (o GetVpcsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetVpcsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The collection of Vpc query.
func (o GetVpcsResultOutput) VpcInstances() GetVpcsVpcInstanceArrayOutput {
	return o.ApplyT(func(v GetVpcsResult) []GetVpcsVpcInstance { return v.VpcInstances }).(GetVpcsVpcInstanceArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpcsResultOutput{})
}
