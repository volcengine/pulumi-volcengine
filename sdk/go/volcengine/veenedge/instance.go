// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package veenedge

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage veenedge instance
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := veenedge.NewInstance(ctx, "foo", &veenedge.InstanceArgs{
//				AreaName:      pulumi.String("*****"),
//				CloudserverId: pulumi.String("cloudserver-x92*****jcc8f"),
//				Isp:           pulumi.String("CMCC"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = veenedge.NewInstance(ctx, "foo1", &veenedge.InstanceArgs{
//				InstanceId: pulumi.String("veen0*****0111112"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:veenedge/instance:Instance default veenn769ewmjjqyqh5dv
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// The area name.
	AreaName pulumi.StringOutput `pulumi:"areaName"`
	// The id of cloud server.
	CloudserverId pulumi.StringOutput `pulumi:"cloudserverId"`
	// The name of cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// The default isp for multi line node.
	DefaultIsp pulumi.StringPtrOutput `pulumi:"defaultIsp"`
	// Import an exist instance, usually for import a default instance generated with cloud server creating.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The isp info.
	Isp pulumi.StringOutput `pulumi:"isp"`
	// The name of instance, only effected in update scene.
	Name pulumi.StringOutput `pulumi:"name"`
	// The data of secret, only effected in update scene.
	SecretData pulumi.StringPtrOutput `pulumi:"secretData"`
	// The type of secret, only effected in update scene. The value can be `KeyPair` or `Password`.
	SecretType pulumi.StringPtrOutput `pulumi:"secretType"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		args = &InstanceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("volcengine:veenedge/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("volcengine:veenedge/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The area name.
	AreaName *string `pulumi:"areaName"`
	// The id of cloud server.
	CloudserverId *string `pulumi:"cloudserverId"`
	// The name of cluster.
	ClusterName *string `pulumi:"clusterName"`
	// The default isp for multi line node.
	DefaultIsp *string `pulumi:"defaultIsp"`
	// Import an exist instance, usually for import a default instance generated with cloud server creating.
	InstanceId *string `pulumi:"instanceId"`
	// The isp info.
	Isp *string `pulumi:"isp"`
	// The name of instance, only effected in update scene.
	Name *string `pulumi:"name"`
	// The data of secret, only effected in update scene.
	SecretData *string `pulumi:"secretData"`
	// The type of secret, only effected in update scene. The value can be `KeyPair` or `Password`.
	SecretType *string `pulumi:"secretType"`
}

type InstanceState struct {
	// The area name.
	AreaName pulumi.StringPtrInput
	// The id of cloud server.
	CloudserverId pulumi.StringPtrInput
	// The name of cluster.
	ClusterName pulumi.StringPtrInput
	// The default isp for multi line node.
	DefaultIsp pulumi.StringPtrInput
	// Import an exist instance, usually for import a default instance generated with cloud server creating.
	InstanceId pulumi.StringPtrInput
	// The isp info.
	Isp pulumi.StringPtrInput
	// The name of instance, only effected in update scene.
	Name pulumi.StringPtrInput
	// The data of secret, only effected in update scene.
	SecretData pulumi.StringPtrInput
	// The type of secret, only effected in update scene. The value can be `KeyPair` or `Password`.
	SecretType pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The area name.
	AreaName *string `pulumi:"areaName"`
	// The id of cloud server.
	CloudserverId *string `pulumi:"cloudserverId"`
	// The name of cluster.
	ClusterName *string `pulumi:"clusterName"`
	// The default isp for multi line node.
	DefaultIsp *string `pulumi:"defaultIsp"`
	// Import an exist instance, usually for import a default instance generated with cloud server creating.
	InstanceId *string `pulumi:"instanceId"`
	// The isp info.
	Isp *string `pulumi:"isp"`
	// The name of instance, only effected in update scene.
	Name *string `pulumi:"name"`
	// The data of secret, only effected in update scene.
	SecretData *string `pulumi:"secretData"`
	// The type of secret, only effected in update scene. The value can be `KeyPair` or `Password`.
	SecretType *string `pulumi:"secretType"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The area name.
	AreaName pulumi.StringPtrInput
	// The id of cloud server.
	CloudserverId pulumi.StringPtrInput
	// The name of cluster.
	ClusterName pulumi.StringPtrInput
	// The default isp for multi line node.
	DefaultIsp pulumi.StringPtrInput
	// Import an exist instance, usually for import a default instance generated with cloud server creating.
	InstanceId pulumi.StringPtrInput
	// The isp info.
	Isp pulumi.StringPtrInput
	// The name of instance, only effected in update scene.
	Name pulumi.StringPtrInput
	// The data of secret, only effected in update scene.
	SecretData pulumi.StringPtrInput
	// The type of secret, only effected in update scene. The value can be `KeyPair` or `Password`.
	SecretType pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// The area name.
func (o InstanceOutput) AreaName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.AreaName }).(pulumi.StringOutput)
}

// The id of cloud server.
func (o InstanceOutput) CloudserverId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CloudserverId }).(pulumi.StringOutput)
}

// The name of cluster.
func (o InstanceOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// The default isp for multi line node.
func (o InstanceOutput) DefaultIsp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.DefaultIsp }).(pulumi.StringPtrOutput)
}

// Import an exist instance, usually for import a default instance generated with cloud server creating.
func (o InstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The isp info.
func (o InstanceOutput) Isp() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Isp }).(pulumi.StringOutput)
}

// The name of instance, only effected in update scene.
func (o InstanceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The data of secret, only effected in update scene.
func (o InstanceOutput) SecretData() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.SecretData }).(pulumi.StringPtrOutput)
}

// The type of secret, only effected in update scene. The value can be `KeyPair` or `Password`.
func (o InstanceOutput) SecretType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.SecretType }).(pulumi.StringPtrOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
