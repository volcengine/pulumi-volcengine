// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package veenedge

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of veenedge available resources
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veenedge"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := veenedge.AvailableResources(ctx, &veenedge.AvailableResourcesArgs{
//				BandwithLimit: 20,
//				CloudDiskType: "CloudSSD",
//				InstanceType:  "ve******rge",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func AvailableResources(ctx *pulumi.Context, args *AvailableResourcesArgs, opts ...pulumi.InvokeOption) (*AvailableResourcesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv AvailableResourcesResult
	err := ctx.Invoke("volcengine:veenedge/availableResources:AvailableResources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking AvailableResources.
type AvailableResourcesArgs struct {
	// The limit of bandwidth.
	BandwithLimit int `pulumi:"bandwithLimit"`
	// The type of storage. The value can be `CloudHDD` or `CloudSSD`.
	CloudDiskType string `pulumi:"cloudDiskType"`
	// The type of instance.
	InstanceType string `pulumi:"instanceType"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by AvailableResources.
type AvailableResourcesResult struct {
	BandwithLimit int    `pulumi:"bandwithLimit"`
	CloudDiskType string `pulumi:"cloudDiskType"`
	// The provider-assigned unique ID for this managed resource.
	Id           string  `pulumi:"id"`
	InstanceType string  `pulumi:"instanceType"`
	OutputFile   *string `pulumi:"outputFile"`
	// The collection of resource query.
	Regions []AvailableResourcesRegion `pulumi:"regions"`
	// The total count of resource query.
	TotalCount int `pulumi:"totalCount"`
}

func AvailableResourcesOutput(ctx *pulumi.Context, args AvailableResourcesOutputArgs, opts ...pulumi.InvokeOption) AvailableResourcesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (AvailableResourcesResult, error) {
			args := v.(AvailableResourcesArgs)
			r, err := AvailableResources(ctx, &args, opts...)
			var s AvailableResourcesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(AvailableResourcesResultOutput)
}

// A collection of arguments for invoking AvailableResources.
type AvailableResourcesOutputArgs struct {
	// The limit of bandwidth.
	BandwithLimit pulumi.IntInput `pulumi:"bandwithLimit"`
	// The type of storage. The value can be `CloudHDD` or `CloudSSD`.
	CloudDiskType pulumi.StringInput `pulumi:"cloudDiskType"`
	// The type of instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (AvailableResourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesArgs)(nil)).Elem()
}

// A collection of values returned by AvailableResources.
type AvailableResourcesResultOutput struct{ *pulumi.OutputState }

func (AvailableResourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesResult)(nil)).Elem()
}

func (o AvailableResourcesResultOutput) ToAvailableResourcesResultOutput() AvailableResourcesResultOutput {
	return o
}

func (o AvailableResourcesResultOutput) ToAvailableResourcesResultOutputWithContext(ctx context.Context) AvailableResourcesResultOutput {
	return o
}

func (o AvailableResourcesResultOutput) BandwithLimit() pulumi.IntOutput {
	return o.ApplyT(func(v AvailableResourcesResult) int { return v.BandwithLimit }).(pulumi.IntOutput)
}

func (o AvailableResourcesResultOutput) CloudDiskType() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesResult) string { return v.CloudDiskType }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o AvailableResourcesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o AvailableResourcesResultOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesResult) string { return v.InstanceType }).(pulumi.StringOutput)
}

func (o AvailableResourcesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AvailableResourcesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of resource query.
func (o AvailableResourcesResultOutput) Regions() AvailableResourcesRegionArrayOutput {
	return o.ApplyT(func(v AvailableResourcesResult) []AvailableResourcesRegion { return v.Regions }).(AvailableResourcesRegionArrayOutput)
}

// The total count of resource query.
func (o AvailableResourcesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v AvailableResourcesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(AvailableResourcesResultOutput{})
}
