// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			dataEcs, err := ecs.Instances(ctx, &ecs.InstancesArgs{
//				Ids: []string{
//					"i-ycal1mtpucl8j0hjiihy",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			dataIpv6, err := vpc.Ipv6Addresses(ctx, &vpc.Ipv6AddressesArgs{
//				AssociatedInstanceId: pulumi.StringRef(dataEcs.Instances[0].InstanceId),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewIpv6AddressBandwidth(ctx, "foo", &vpc.Ipv6AddressBandwidthArgs{
//				Ipv6Address: *pulumi.String(dataIpv6.Ipv6Addresses[0].Ipv6Address),
//				BillingType: pulumi.String("PostPaidByBandwidth"),
//				Bandwidth:   pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Ipv6AddressBandwidth can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vpc/ipv6AddressBandwidth:Ipv6AddressBandwidth default eip-2fede9fsgnr4059gp674m6ney
//
// ```
type Ipv6AddressBandwidth struct {
	pulumi.CustomResourceState

	// The ID of the Ipv6AddressBandwidth.
	AllocationId pulumi.StringOutput `pulumi:"allocationId"`
	// Peek bandwidth of the Ipv6 address. Valid values: 1 to 200. Unit: Mbit/s.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// BillingType of the Ipv6 bandwidth. Valid values: `PostPaidByBandwidth`; `PostPaidByTraffic`.
	BillingType pulumi.StringOutput `pulumi:"billingType"`
	// The BusinessStatus of the Ipv6AddressBandwidth.
	BusinessStatus pulumi.StringOutput `pulumi:"businessStatus"`
	// Creation time of the Ipv6AddressBandwidth.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Delete time of the Ipv6AddressBandwidth.
	DeleteTime pulumi.StringOutput `pulumi:"deleteTime"`
	// The ID of the associated instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The type of the associated instance.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// Ipv6 address.
	Ipv6Address pulumi.StringOutput `pulumi:"ipv6Address"`
	// The ISP of the Ipv6AddressBandwidth.
	Isp pulumi.StringOutput `pulumi:"isp"`
	// The BusinessStatus of the Ipv6AddressBandwidth.
	LockReason pulumi.StringOutput `pulumi:"lockReason"`
	// The network type of the Ipv6AddressBandwidth.
	NetworkType pulumi.StringOutput `pulumi:"networkType"`
	// Overdue time of the Ipv6AddressBandwidth.
	OverdueTime pulumi.StringOutput `pulumi:"overdueTime"`
	// The status of the Ipv6AddressBandwidth.
	Status pulumi.StringOutput `pulumi:"status"`
	// Update time of the Ipv6AddressBandwidth.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewIpv6AddressBandwidth registers a new resource with the given unique name, arguments, and options.
func NewIpv6AddressBandwidth(ctx *pulumi.Context,
	name string, args *Ipv6AddressBandwidthArgs, opts ...pulumi.ResourceOption) (*Ipv6AddressBandwidth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BillingType == nil {
		return nil, errors.New("invalid value for required argument 'BillingType'")
	}
	if args.Ipv6Address == nil {
		return nil, errors.New("invalid value for required argument 'Ipv6Address'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Ipv6AddressBandwidth
	err := ctx.RegisterResource("volcengine:vpc/ipv6AddressBandwidth:Ipv6AddressBandwidth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpv6AddressBandwidth gets an existing Ipv6AddressBandwidth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpv6AddressBandwidth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Ipv6AddressBandwidthState, opts ...pulumi.ResourceOption) (*Ipv6AddressBandwidth, error) {
	var resource Ipv6AddressBandwidth
	err := ctx.ReadResource("volcengine:vpc/ipv6AddressBandwidth:Ipv6AddressBandwidth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ipv6AddressBandwidth resources.
type ipv6AddressBandwidthState struct {
	// The ID of the Ipv6AddressBandwidth.
	AllocationId *string `pulumi:"allocationId"`
	// Peek bandwidth of the Ipv6 address. Valid values: 1 to 200. Unit: Mbit/s.
	Bandwidth *int `pulumi:"bandwidth"`
	// BillingType of the Ipv6 bandwidth. Valid values: `PostPaidByBandwidth`; `PostPaidByTraffic`.
	BillingType *string `pulumi:"billingType"`
	// The BusinessStatus of the Ipv6AddressBandwidth.
	BusinessStatus *string `pulumi:"businessStatus"`
	// Creation time of the Ipv6AddressBandwidth.
	CreationTime *string `pulumi:"creationTime"`
	// Delete time of the Ipv6AddressBandwidth.
	DeleteTime *string `pulumi:"deleteTime"`
	// The ID of the associated instance.
	InstanceId *string `pulumi:"instanceId"`
	// The type of the associated instance.
	InstanceType *string `pulumi:"instanceType"`
	// Ipv6 address.
	Ipv6Address *string `pulumi:"ipv6Address"`
	// The ISP of the Ipv6AddressBandwidth.
	Isp *string `pulumi:"isp"`
	// The BusinessStatus of the Ipv6AddressBandwidth.
	LockReason *string `pulumi:"lockReason"`
	// The network type of the Ipv6AddressBandwidth.
	NetworkType *string `pulumi:"networkType"`
	// Overdue time of the Ipv6AddressBandwidth.
	OverdueTime *string `pulumi:"overdueTime"`
	// The status of the Ipv6AddressBandwidth.
	Status *string `pulumi:"status"`
	// Update time of the Ipv6AddressBandwidth.
	UpdateTime *string `pulumi:"updateTime"`
}

type Ipv6AddressBandwidthState struct {
	// The ID of the Ipv6AddressBandwidth.
	AllocationId pulumi.StringPtrInput
	// Peek bandwidth of the Ipv6 address. Valid values: 1 to 200. Unit: Mbit/s.
	Bandwidth pulumi.IntPtrInput
	// BillingType of the Ipv6 bandwidth. Valid values: `PostPaidByBandwidth`; `PostPaidByTraffic`.
	BillingType pulumi.StringPtrInput
	// The BusinessStatus of the Ipv6AddressBandwidth.
	BusinessStatus pulumi.StringPtrInput
	// Creation time of the Ipv6AddressBandwidth.
	CreationTime pulumi.StringPtrInput
	// Delete time of the Ipv6AddressBandwidth.
	DeleteTime pulumi.StringPtrInput
	// The ID of the associated instance.
	InstanceId pulumi.StringPtrInput
	// The type of the associated instance.
	InstanceType pulumi.StringPtrInput
	// Ipv6 address.
	Ipv6Address pulumi.StringPtrInput
	// The ISP of the Ipv6AddressBandwidth.
	Isp pulumi.StringPtrInput
	// The BusinessStatus of the Ipv6AddressBandwidth.
	LockReason pulumi.StringPtrInput
	// The network type of the Ipv6AddressBandwidth.
	NetworkType pulumi.StringPtrInput
	// Overdue time of the Ipv6AddressBandwidth.
	OverdueTime pulumi.StringPtrInput
	// The status of the Ipv6AddressBandwidth.
	Status pulumi.StringPtrInput
	// Update time of the Ipv6AddressBandwidth.
	UpdateTime pulumi.StringPtrInput
}

func (Ipv6AddressBandwidthState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6AddressBandwidthState)(nil)).Elem()
}

type ipv6AddressBandwidthArgs struct {
	// Peek bandwidth of the Ipv6 address. Valid values: 1 to 200. Unit: Mbit/s.
	Bandwidth *int `pulumi:"bandwidth"`
	// BillingType of the Ipv6 bandwidth. Valid values: `PostPaidByBandwidth`; `PostPaidByTraffic`.
	BillingType string `pulumi:"billingType"`
	// Ipv6 address.
	Ipv6Address string `pulumi:"ipv6Address"`
}

// The set of arguments for constructing a Ipv6AddressBandwidth resource.
type Ipv6AddressBandwidthArgs struct {
	// Peek bandwidth of the Ipv6 address. Valid values: 1 to 200. Unit: Mbit/s.
	Bandwidth pulumi.IntPtrInput
	// BillingType of the Ipv6 bandwidth. Valid values: `PostPaidByBandwidth`; `PostPaidByTraffic`.
	BillingType pulumi.StringInput
	// Ipv6 address.
	Ipv6Address pulumi.StringInput
}

func (Ipv6AddressBandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipv6AddressBandwidthArgs)(nil)).Elem()
}

type Ipv6AddressBandwidthInput interface {
	pulumi.Input

	ToIpv6AddressBandwidthOutput() Ipv6AddressBandwidthOutput
	ToIpv6AddressBandwidthOutputWithContext(ctx context.Context) Ipv6AddressBandwidthOutput
}

func (*Ipv6AddressBandwidth) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6AddressBandwidth)(nil)).Elem()
}

func (i *Ipv6AddressBandwidth) ToIpv6AddressBandwidthOutput() Ipv6AddressBandwidthOutput {
	return i.ToIpv6AddressBandwidthOutputWithContext(context.Background())
}

func (i *Ipv6AddressBandwidth) ToIpv6AddressBandwidthOutputWithContext(ctx context.Context) Ipv6AddressBandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6AddressBandwidthOutput)
}

// Ipv6AddressBandwidthArrayInput is an input type that accepts Ipv6AddressBandwidthArray and Ipv6AddressBandwidthArrayOutput values.
// You can construct a concrete instance of `Ipv6AddressBandwidthArrayInput` via:
//
//	Ipv6AddressBandwidthArray{ Ipv6AddressBandwidthArgs{...} }
type Ipv6AddressBandwidthArrayInput interface {
	pulumi.Input

	ToIpv6AddressBandwidthArrayOutput() Ipv6AddressBandwidthArrayOutput
	ToIpv6AddressBandwidthArrayOutputWithContext(context.Context) Ipv6AddressBandwidthArrayOutput
}

type Ipv6AddressBandwidthArray []Ipv6AddressBandwidthInput

func (Ipv6AddressBandwidthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6AddressBandwidth)(nil)).Elem()
}

func (i Ipv6AddressBandwidthArray) ToIpv6AddressBandwidthArrayOutput() Ipv6AddressBandwidthArrayOutput {
	return i.ToIpv6AddressBandwidthArrayOutputWithContext(context.Background())
}

func (i Ipv6AddressBandwidthArray) ToIpv6AddressBandwidthArrayOutputWithContext(ctx context.Context) Ipv6AddressBandwidthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6AddressBandwidthArrayOutput)
}

// Ipv6AddressBandwidthMapInput is an input type that accepts Ipv6AddressBandwidthMap and Ipv6AddressBandwidthMapOutput values.
// You can construct a concrete instance of `Ipv6AddressBandwidthMapInput` via:
//
//	Ipv6AddressBandwidthMap{ "key": Ipv6AddressBandwidthArgs{...} }
type Ipv6AddressBandwidthMapInput interface {
	pulumi.Input

	ToIpv6AddressBandwidthMapOutput() Ipv6AddressBandwidthMapOutput
	ToIpv6AddressBandwidthMapOutputWithContext(context.Context) Ipv6AddressBandwidthMapOutput
}

type Ipv6AddressBandwidthMap map[string]Ipv6AddressBandwidthInput

func (Ipv6AddressBandwidthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6AddressBandwidth)(nil)).Elem()
}

func (i Ipv6AddressBandwidthMap) ToIpv6AddressBandwidthMapOutput() Ipv6AddressBandwidthMapOutput {
	return i.ToIpv6AddressBandwidthMapOutputWithContext(context.Background())
}

func (i Ipv6AddressBandwidthMap) ToIpv6AddressBandwidthMapOutputWithContext(ctx context.Context) Ipv6AddressBandwidthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Ipv6AddressBandwidthMapOutput)
}

type Ipv6AddressBandwidthOutput struct{ *pulumi.OutputState }

func (Ipv6AddressBandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ipv6AddressBandwidth)(nil)).Elem()
}

func (o Ipv6AddressBandwidthOutput) ToIpv6AddressBandwidthOutput() Ipv6AddressBandwidthOutput {
	return o
}

func (o Ipv6AddressBandwidthOutput) ToIpv6AddressBandwidthOutputWithContext(ctx context.Context) Ipv6AddressBandwidthOutput {
	return o
}

// The ID of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.AllocationId }).(pulumi.StringOutput)
}

// Peek bandwidth of the Ipv6 address. Valid values: 1 to 200. Unit: Mbit/s.
func (o Ipv6AddressBandwidthOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// BillingType of the Ipv6 bandwidth. Valid values: `PostPaidByBandwidth`; `PostPaidByTraffic`.
func (o Ipv6AddressBandwidthOutput) BillingType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.BillingType }).(pulumi.StringOutput)
}

// The BusinessStatus of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.BusinessStatus }).(pulumi.StringOutput)
}

// Creation time of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Delete time of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) DeleteTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.DeleteTime }).(pulumi.StringOutput)
}

// The ID of the associated instance.
func (o Ipv6AddressBandwidthOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the associated instance.
func (o Ipv6AddressBandwidthOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// Ipv6 address.
func (o Ipv6AddressBandwidthOutput) Ipv6Address() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.Ipv6Address }).(pulumi.StringOutput)
}

// The ISP of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) Isp() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.Isp }).(pulumi.StringOutput)
}

// The BusinessStatus of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.LockReason }).(pulumi.StringOutput)
}

// The network type of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.NetworkType }).(pulumi.StringOutput)
}

// Overdue time of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.OverdueTime }).(pulumi.StringOutput)
}

// The status of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Update time of the Ipv6AddressBandwidth.
func (o Ipv6AddressBandwidthOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Ipv6AddressBandwidth) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type Ipv6AddressBandwidthArrayOutput struct{ *pulumi.OutputState }

func (Ipv6AddressBandwidthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ipv6AddressBandwidth)(nil)).Elem()
}

func (o Ipv6AddressBandwidthArrayOutput) ToIpv6AddressBandwidthArrayOutput() Ipv6AddressBandwidthArrayOutput {
	return o
}

func (o Ipv6AddressBandwidthArrayOutput) ToIpv6AddressBandwidthArrayOutputWithContext(ctx context.Context) Ipv6AddressBandwidthArrayOutput {
	return o
}

func (o Ipv6AddressBandwidthArrayOutput) Index(i pulumi.IntInput) Ipv6AddressBandwidthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ipv6AddressBandwidth {
		return vs[0].([]*Ipv6AddressBandwidth)[vs[1].(int)]
	}).(Ipv6AddressBandwidthOutput)
}

type Ipv6AddressBandwidthMapOutput struct{ *pulumi.OutputState }

func (Ipv6AddressBandwidthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ipv6AddressBandwidth)(nil)).Elem()
}

func (o Ipv6AddressBandwidthMapOutput) ToIpv6AddressBandwidthMapOutput() Ipv6AddressBandwidthMapOutput {
	return o
}

func (o Ipv6AddressBandwidthMapOutput) ToIpv6AddressBandwidthMapOutputWithContext(ctx context.Context) Ipv6AddressBandwidthMapOutput {
	return o
}

func (o Ipv6AddressBandwidthMapOutput) MapIndex(k pulumi.StringInput) Ipv6AddressBandwidthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ipv6AddressBandwidth {
		return vs[0].(map[string]*Ipv6AddressBandwidth)[vs[1].(string)]
	}).(Ipv6AddressBandwidthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6AddressBandwidthInput)(nil)).Elem(), &Ipv6AddressBandwidth{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6AddressBandwidthArrayInput)(nil)).Elem(), Ipv6AddressBandwidthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Ipv6AddressBandwidthMapInput)(nil)).Elem(), Ipv6AddressBandwidthMap{})
	pulumi.RegisterOutputType(Ipv6AddressBandwidthOutput{})
	pulumi.RegisterOutputType(Ipv6AddressBandwidthArrayOutput{})
	pulumi.RegisterOutputType(Ipv6AddressBandwidthMapOutput{})
}
