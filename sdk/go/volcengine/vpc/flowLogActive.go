// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage flow log active
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:     pulumi.String("acc-test-vpc"),
//				CidrBlock:   pulumi.String("172.16.0.0/16"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooFlowLog, err := vpc.NewFlowLog(ctx, "fooFlowLog", &vpc.FlowLogArgs{
//				FlowLogName:         pulumi.String("acc-test-flow-log"),
//				Description:         pulumi.String("acc-test"),
//				ResourceType:        pulumi.String("subnet"),
//				ResourceId:          fooSubnet.ID(),
//				TrafficType:         pulumi.String("All"),
//				LogProjectName:      pulumi.String("acc-test-project"),
//				LogTopicName:        pulumi.String("acc-test-topic"),
//				AggregationInterval: pulumi.Int(10),
//				ProjectName:         pulumi.String("default"),
//				Tags: vpc.FlowLogTagArray{
//					&vpc.FlowLogTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewFlowLogActive(ctx, "fooFlowLogActive", &vpc.FlowLogActiveArgs{
//				FlowLogId: fooFlowLog.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FlowLogActive can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vpc/flowLogActive:FlowLogActive default resource_id
// ```
type FlowLogActive struct {
	pulumi.CustomResourceState

	// The ID of flow log.
	FlowLogId pulumi.StringOutput `pulumi:"flowLogId"`
	// The status of flow log.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewFlowLogActive registers a new resource with the given unique name, arguments, and options.
func NewFlowLogActive(ctx *pulumi.Context,
	name string, args *FlowLogActiveArgs, opts ...pulumi.ResourceOption) (*FlowLogActive, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FlowLogId == nil {
		return nil, errors.New("invalid value for required argument 'FlowLogId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlowLogActive
	err := ctx.RegisterResource("volcengine:vpc/flowLogActive:FlowLogActive", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowLogActive gets an existing FlowLogActive resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowLogActive(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowLogActiveState, opts ...pulumi.ResourceOption) (*FlowLogActive, error) {
	var resource FlowLogActive
	err := ctx.ReadResource("volcengine:vpc/flowLogActive:FlowLogActive", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowLogActive resources.
type flowLogActiveState struct {
	// The ID of flow log.
	FlowLogId *string `pulumi:"flowLogId"`
	// The status of flow log.
	Status *string `pulumi:"status"`
}

type FlowLogActiveState struct {
	// The ID of flow log.
	FlowLogId pulumi.StringPtrInput
	// The status of flow log.
	Status pulumi.StringPtrInput
}

func (FlowLogActiveState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogActiveState)(nil)).Elem()
}

type flowLogActiveArgs struct {
	// The ID of flow log.
	FlowLogId string `pulumi:"flowLogId"`
}

// The set of arguments for constructing a FlowLogActive resource.
type FlowLogActiveArgs struct {
	// The ID of flow log.
	FlowLogId pulumi.StringInput
}

func (FlowLogActiveArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogActiveArgs)(nil)).Elem()
}

type FlowLogActiveInput interface {
	pulumi.Input

	ToFlowLogActiveOutput() FlowLogActiveOutput
	ToFlowLogActiveOutputWithContext(ctx context.Context) FlowLogActiveOutput
}

func (*FlowLogActive) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLogActive)(nil)).Elem()
}

func (i *FlowLogActive) ToFlowLogActiveOutput() FlowLogActiveOutput {
	return i.ToFlowLogActiveOutputWithContext(context.Background())
}

func (i *FlowLogActive) ToFlowLogActiveOutputWithContext(ctx context.Context) FlowLogActiveOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogActiveOutput)
}

// FlowLogActiveArrayInput is an input type that accepts FlowLogActiveArray and FlowLogActiveArrayOutput values.
// You can construct a concrete instance of `FlowLogActiveArrayInput` via:
//
//	FlowLogActiveArray{ FlowLogActiveArgs{...} }
type FlowLogActiveArrayInput interface {
	pulumi.Input

	ToFlowLogActiveArrayOutput() FlowLogActiveArrayOutput
	ToFlowLogActiveArrayOutputWithContext(context.Context) FlowLogActiveArrayOutput
}

type FlowLogActiveArray []FlowLogActiveInput

func (FlowLogActiveArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLogActive)(nil)).Elem()
}

func (i FlowLogActiveArray) ToFlowLogActiveArrayOutput() FlowLogActiveArrayOutput {
	return i.ToFlowLogActiveArrayOutputWithContext(context.Background())
}

func (i FlowLogActiveArray) ToFlowLogActiveArrayOutputWithContext(ctx context.Context) FlowLogActiveArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogActiveArrayOutput)
}

// FlowLogActiveMapInput is an input type that accepts FlowLogActiveMap and FlowLogActiveMapOutput values.
// You can construct a concrete instance of `FlowLogActiveMapInput` via:
//
//	FlowLogActiveMap{ "key": FlowLogActiveArgs{...} }
type FlowLogActiveMapInput interface {
	pulumi.Input

	ToFlowLogActiveMapOutput() FlowLogActiveMapOutput
	ToFlowLogActiveMapOutputWithContext(context.Context) FlowLogActiveMapOutput
}

type FlowLogActiveMap map[string]FlowLogActiveInput

func (FlowLogActiveMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLogActive)(nil)).Elem()
}

func (i FlowLogActiveMap) ToFlowLogActiveMapOutput() FlowLogActiveMapOutput {
	return i.ToFlowLogActiveMapOutputWithContext(context.Background())
}

func (i FlowLogActiveMap) ToFlowLogActiveMapOutputWithContext(ctx context.Context) FlowLogActiveMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogActiveMapOutput)
}

type FlowLogActiveOutput struct{ *pulumi.OutputState }

func (FlowLogActiveOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLogActive)(nil)).Elem()
}

func (o FlowLogActiveOutput) ToFlowLogActiveOutput() FlowLogActiveOutput {
	return o
}

func (o FlowLogActiveOutput) ToFlowLogActiveOutputWithContext(ctx context.Context) FlowLogActiveOutput {
	return o
}

// The ID of flow log.
func (o FlowLogActiveOutput) FlowLogId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLogActive) pulumi.StringOutput { return v.FlowLogId }).(pulumi.StringOutput)
}

// The status of flow log.
func (o FlowLogActiveOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLogActive) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type FlowLogActiveArrayOutput struct{ *pulumi.OutputState }

func (FlowLogActiveArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLogActive)(nil)).Elem()
}

func (o FlowLogActiveArrayOutput) ToFlowLogActiveArrayOutput() FlowLogActiveArrayOutput {
	return o
}

func (o FlowLogActiveArrayOutput) ToFlowLogActiveArrayOutputWithContext(ctx context.Context) FlowLogActiveArrayOutput {
	return o
}

func (o FlowLogActiveArrayOutput) Index(i pulumi.IntInput) FlowLogActiveOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlowLogActive {
		return vs[0].([]*FlowLogActive)[vs[1].(int)]
	}).(FlowLogActiveOutput)
}

type FlowLogActiveMapOutput struct{ *pulumi.OutputState }

func (FlowLogActiveMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLogActive)(nil)).Elem()
}

func (o FlowLogActiveMapOutput) ToFlowLogActiveMapOutput() FlowLogActiveMapOutput {
	return o
}

func (o FlowLogActiveMapOutput) ToFlowLogActiveMapOutputWithContext(ctx context.Context) FlowLogActiveMapOutput {
	return o
}

func (o FlowLogActiveMapOutput) MapIndex(k pulumi.StringInput) FlowLogActiveOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlowLogActive {
		return vs[0].(map[string]*FlowLogActive)[vs[1].(string)]
	}).(FlowLogActiveOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogActiveInput)(nil)).Elem(), &FlowLogActive{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogActiveArrayInput)(nil)).Elem(), FlowLogActiveArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogActiveMapInput)(nil)).Elem(), FlowLogActiveMap{})
	pulumi.RegisterOutputType(FlowLogActiveOutput{})
	pulumi.RegisterOutputType(FlowLogActiveArrayOutput{})
	pulumi.RegisterOutputType(FlowLogActiveMapOutput{})
}
