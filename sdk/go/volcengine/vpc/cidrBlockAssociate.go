// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vpc cidr block associate
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:     pulumi.String("acc-test-vpc"),
//				CidrBlock:   pulumi.String("192.168.0.0/20"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewCidrBlockAssociate(ctx, "fooCidrBlockAssociate", &vpc.CidrBlockAssociateArgs{
//				VpcId:              fooVpc.ID(),
//				SecondaryCidrBlock: pulumi.String("192.168.16.0/20"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The VpcCidrBlockAssociate is not support import.
type CidrBlockAssociate struct {
	pulumi.CustomResourceState

	// The secondary cidr block of the VPC.
	SecondaryCidrBlock pulumi.StringOutput `pulumi:"secondaryCidrBlock"`
	// The id of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewCidrBlockAssociate registers a new resource with the given unique name, arguments, and options.
func NewCidrBlockAssociate(ctx *pulumi.Context,
	name string, args *CidrBlockAssociateArgs, opts ...pulumi.ResourceOption) (*CidrBlockAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SecondaryCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'SecondaryCidrBlock'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CidrBlockAssociate
	err := ctx.RegisterResource("volcengine:vpc/cidrBlockAssociate:CidrBlockAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCidrBlockAssociate gets an existing CidrBlockAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCidrBlockAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CidrBlockAssociateState, opts ...pulumi.ResourceOption) (*CidrBlockAssociate, error) {
	var resource CidrBlockAssociate
	err := ctx.ReadResource("volcengine:vpc/cidrBlockAssociate:CidrBlockAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CidrBlockAssociate resources.
type cidrBlockAssociateState struct {
	// The secondary cidr block of the VPC.
	SecondaryCidrBlock *string `pulumi:"secondaryCidrBlock"`
	// The id of the VPC.
	VpcId *string `pulumi:"vpcId"`
}

type CidrBlockAssociateState struct {
	// The secondary cidr block of the VPC.
	SecondaryCidrBlock pulumi.StringPtrInput
	// The id of the VPC.
	VpcId pulumi.StringPtrInput
}

func (CidrBlockAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrBlockAssociateState)(nil)).Elem()
}

type cidrBlockAssociateArgs struct {
	// The secondary cidr block of the VPC.
	SecondaryCidrBlock string `pulumi:"secondaryCidrBlock"`
	// The id of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a CidrBlockAssociate resource.
type CidrBlockAssociateArgs struct {
	// The secondary cidr block of the VPC.
	SecondaryCidrBlock pulumi.StringInput
	// The id of the VPC.
	VpcId pulumi.StringInput
}

func (CidrBlockAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cidrBlockAssociateArgs)(nil)).Elem()
}

type CidrBlockAssociateInput interface {
	pulumi.Input

	ToCidrBlockAssociateOutput() CidrBlockAssociateOutput
	ToCidrBlockAssociateOutputWithContext(ctx context.Context) CidrBlockAssociateOutput
}

func (*CidrBlockAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**CidrBlockAssociate)(nil)).Elem()
}

func (i *CidrBlockAssociate) ToCidrBlockAssociateOutput() CidrBlockAssociateOutput {
	return i.ToCidrBlockAssociateOutputWithContext(context.Background())
}

func (i *CidrBlockAssociate) ToCidrBlockAssociateOutputWithContext(ctx context.Context) CidrBlockAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockAssociateOutput)
}

// CidrBlockAssociateArrayInput is an input type that accepts CidrBlockAssociateArray and CidrBlockAssociateArrayOutput values.
// You can construct a concrete instance of `CidrBlockAssociateArrayInput` via:
//
//	CidrBlockAssociateArray{ CidrBlockAssociateArgs{...} }
type CidrBlockAssociateArrayInput interface {
	pulumi.Input

	ToCidrBlockAssociateArrayOutput() CidrBlockAssociateArrayOutput
	ToCidrBlockAssociateArrayOutputWithContext(context.Context) CidrBlockAssociateArrayOutput
}

type CidrBlockAssociateArray []CidrBlockAssociateInput

func (CidrBlockAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CidrBlockAssociate)(nil)).Elem()
}

func (i CidrBlockAssociateArray) ToCidrBlockAssociateArrayOutput() CidrBlockAssociateArrayOutput {
	return i.ToCidrBlockAssociateArrayOutputWithContext(context.Background())
}

func (i CidrBlockAssociateArray) ToCidrBlockAssociateArrayOutputWithContext(ctx context.Context) CidrBlockAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockAssociateArrayOutput)
}

// CidrBlockAssociateMapInput is an input type that accepts CidrBlockAssociateMap and CidrBlockAssociateMapOutput values.
// You can construct a concrete instance of `CidrBlockAssociateMapInput` via:
//
//	CidrBlockAssociateMap{ "key": CidrBlockAssociateArgs{...} }
type CidrBlockAssociateMapInput interface {
	pulumi.Input

	ToCidrBlockAssociateMapOutput() CidrBlockAssociateMapOutput
	ToCidrBlockAssociateMapOutputWithContext(context.Context) CidrBlockAssociateMapOutput
}

type CidrBlockAssociateMap map[string]CidrBlockAssociateInput

func (CidrBlockAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CidrBlockAssociate)(nil)).Elem()
}

func (i CidrBlockAssociateMap) ToCidrBlockAssociateMapOutput() CidrBlockAssociateMapOutput {
	return i.ToCidrBlockAssociateMapOutputWithContext(context.Background())
}

func (i CidrBlockAssociateMap) ToCidrBlockAssociateMapOutputWithContext(ctx context.Context) CidrBlockAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CidrBlockAssociateMapOutput)
}

type CidrBlockAssociateOutput struct{ *pulumi.OutputState }

func (CidrBlockAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CidrBlockAssociate)(nil)).Elem()
}

func (o CidrBlockAssociateOutput) ToCidrBlockAssociateOutput() CidrBlockAssociateOutput {
	return o
}

func (o CidrBlockAssociateOutput) ToCidrBlockAssociateOutputWithContext(ctx context.Context) CidrBlockAssociateOutput {
	return o
}

// The secondary cidr block of the VPC.
func (o CidrBlockAssociateOutput) SecondaryCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *CidrBlockAssociate) pulumi.StringOutput { return v.SecondaryCidrBlock }).(pulumi.StringOutput)
}

// The id of the VPC.
func (o CidrBlockAssociateOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *CidrBlockAssociate) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type CidrBlockAssociateArrayOutput struct{ *pulumi.OutputState }

func (CidrBlockAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CidrBlockAssociate)(nil)).Elem()
}

func (o CidrBlockAssociateArrayOutput) ToCidrBlockAssociateArrayOutput() CidrBlockAssociateArrayOutput {
	return o
}

func (o CidrBlockAssociateArrayOutput) ToCidrBlockAssociateArrayOutputWithContext(ctx context.Context) CidrBlockAssociateArrayOutput {
	return o
}

func (o CidrBlockAssociateArrayOutput) Index(i pulumi.IntInput) CidrBlockAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CidrBlockAssociate {
		return vs[0].([]*CidrBlockAssociate)[vs[1].(int)]
	}).(CidrBlockAssociateOutput)
}

type CidrBlockAssociateMapOutput struct{ *pulumi.OutputState }

func (CidrBlockAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CidrBlockAssociate)(nil)).Elem()
}

func (o CidrBlockAssociateMapOutput) ToCidrBlockAssociateMapOutput() CidrBlockAssociateMapOutput {
	return o
}

func (o CidrBlockAssociateMapOutput) ToCidrBlockAssociateMapOutputWithContext(ctx context.Context) CidrBlockAssociateMapOutput {
	return o
}

func (o CidrBlockAssociateMapOutput) MapIndex(k pulumi.StringInput) CidrBlockAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CidrBlockAssociate {
		return vs[0].(map[string]*CidrBlockAssociate)[vs[1].(string)]
	}).(CidrBlockAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CidrBlockAssociateInput)(nil)).Elem(), &CidrBlockAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*CidrBlockAssociateArrayInput)(nil)).Elem(), CidrBlockAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CidrBlockAssociateMapInput)(nil)).Elem(), CidrBlockAssociateMap{})
	pulumi.RegisterOutputType(CidrBlockAssociateOutput{})
	pulumi.RegisterOutputType(CidrBlockAssociateArrayOutput{})
	pulumi.RegisterOutputType(CidrBlockAssociateMapOutput{})
}
