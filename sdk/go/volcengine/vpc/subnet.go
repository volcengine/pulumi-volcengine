// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage subnet
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewSubnet(ctx, "foo", &vpc.SubnetArgs{
//				CidrBlock:  pulumi.String("192.168.1.0/24"),
//				SubnetName: pulumi.String("subnet-test-2"),
//				VpcId:      pulumi.String("vpc-2749wnlhro3y87fap8u5ztvt5"),
//				ZoneId:     pulumi.String("cn-beijing"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Subnet can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vpc/subnet:Subnet default subnet-274oj9a8rs9a87fap8sf9515b
//
// ```
type Subnet struct {
	pulumi.CustomResourceState

	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// Creation time of Subnet.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of the Subnet.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.
	EnableIpv6 pulumi.BoolOutput `pulumi:"enableIpv6"`
	// The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.
	Ipv6CidrBlock pulumi.IntOutput `pulumi:"ipv6CidrBlock"`
	// Status of Subnet.
	Status pulumi.StringOutput `pulumi:"status"`
	// The name of the Subnet.
	SubnetName pulumi.StringOutput `pulumi:"subnetName"`
	// Id of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// Id of the Zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSubnet registers a new resource with the given unique name, arguments, and options.
func NewSubnet(ctx *pulumi.Context,
	name string, args *SubnetArgs, opts ...pulumi.ResourceOption) (*Subnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Subnet
	err := ctx.RegisterResource("volcengine:vpc/subnet:Subnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSubnet gets an existing Subnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SubnetState, opts ...pulumi.ResourceOption) (*Subnet, error) {
	var resource Subnet
	err := ctx.ReadResource("volcengine:vpc/subnet:Subnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Subnet resources.
type subnetState struct {
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock *string `pulumi:"cidrBlock"`
	// Creation time of Subnet.
	CreationTime *string `pulumi:"creationTime"`
	// The description of the Subnet.
	Description *string `pulumi:"description"`
	// Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.
	Ipv6CidrBlock *int `pulumi:"ipv6CidrBlock"`
	// Status of Subnet.
	Status *string `pulumi:"status"`
	// The name of the Subnet.
	SubnetName *string `pulumi:"subnetName"`
	// Id of the VPC.
	VpcId *string `pulumi:"vpcId"`
	// Id of the Zone.
	ZoneId *string `pulumi:"zoneId"`
}

type SubnetState struct {
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock pulumi.StringPtrInput
	// Creation time of Subnet.
	CreationTime pulumi.StringPtrInput
	// The description of the Subnet.
	Description pulumi.StringPtrInput
	// Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.
	EnableIpv6 pulumi.BoolPtrInput
	// The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.
	Ipv6CidrBlock pulumi.IntPtrInput
	// Status of Subnet.
	Status pulumi.StringPtrInput
	// The name of the Subnet.
	SubnetName pulumi.StringPtrInput
	// Id of the VPC.
	VpcId pulumi.StringPtrInput
	// Id of the Zone.
	ZoneId pulumi.StringPtrInput
}

func (SubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetState)(nil)).Elem()
}

type subnetArgs struct {
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock string `pulumi:"cidrBlock"`
	// The description of the Subnet.
	Description *string `pulumi:"description"`
	// Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.
	Ipv6CidrBlock *int `pulumi:"ipv6CidrBlock"`
	// The name of the Subnet.
	SubnetName *string `pulumi:"subnetName"`
	// Id of the VPC.
	VpcId string `pulumi:"vpcId"`
	// Id of the Zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Subnet resource.
type SubnetArgs struct {
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock pulumi.StringInput
	// The description of the Subnet.
	Description pulumi.StringPtrInput
	// Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.
	EnableIpv6 pulumi.BoolPtrInput
	// The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.
	Ipv6CidrBlock pulumi.IntPtrInput
	// The name of the Subnet.
	SubnetName pulumi.StringPtrInput
	// Id of the VPC.
	VpcId pulumi.StringInput
	// Id of the Zone.
	ZoneId pulumi.StringInput
}

func (SubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*subnetArgs)(nil)).Elem()
}

type SubnetInput interface {
	pulumi.Input

	ToSubnetOutput() SubnetOutput
	ToSubnetOutputWithContext(ctx context.Context) SubnetOutput
}

func (*Subnet) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (i *Subnet) ToSubnetOutput() SubnetOutput {
	return i.ToSubnetOutputWithContext(context.Background())
}

func (i *Subnet) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetOutput)
}

// SubnetArrayInput is an input type that accepts SubnetArray and SubnetArrayOutput values.
// You can construct a concrete instance of `SubnetArrayInput` via:
//
//	SubnetArray{ SubnetArgs{...} }
type SubnetArrayInput interface {
	pulumi.Input

	ToSubnetArrayOutput() SubnetArrayOutput
	ToSubnetArrayOutputWithContext(context.Context) SubnetArrayOutput
}

type SubnetArray []SubnetInput

func (SubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (i SubnetArray) ToSubnetArrayOutput() SubnetArrayOutput {
	return i.ToSubnetArrayOutputWithContext(context.Background())
}

func (i SubnetArray) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetArrayOutput)
}

// SubnetMapInput is an input type that accepts SubnetMap and SubnetMapOutput values.
// You can construct a concrete instance of `SubnetMapInput` via:
//
//	SubnetMap{ "key": SubnetArgs{...} }
type SubnetMapInput interface {
	pulumi.Input

	ToSubnetMapOutput() SubnetMapOutput
	ToSubnetMapOutputWithContext(context.Context) SubnetMapOutput
}

type SubnetMap map[string]SubnetInput

func (SubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (i SubnetMap) ToSubnetMapOutput() SubnetMapOutput {
	return i.ToSubnetMapOutputWithContext(context.Background())
}

func (i SubnetMap) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SubnetMapOutput)
}

type SubnetOutput struct{ *pulumi.OutputState }

func (SubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Subnet)(nil)).Elem()
}

func (o SubnetOutput) ToSubnetOutput() SubnetOutput {
	return o
}

func (o SubnetOutput) ToSubnetOutputWithContext(ctx context.Context) SubnetOutput {
	return o
}

// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
func (o SubnetOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// Creation time of Subnet.
func (o SubnetOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the Subnet.
func (o SubnetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.
func (o SubnetOutput) EnableIpv6() pulumi.BoolOutput {
	return o.ApplyT(func(v *Subnet) pulumi.BoolOutput { return v.EnableIpv6 }).(pulumi.BoolOutput)
}

// The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.
func (o SubnetOutput) Ipv6CidrBlock() pulumi.IntOutput {
	return o.ApplyT(func(v *Subnet) pulumi.IntOutput { return v.Ipv6CidrBlock }).(pulumi.IntOutput)
}

// Status of Subnet.
func (o SubnetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The name of the Subnet.
func (o SubnetOutput) SubnetName() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.SubnetName }).(pulumi.StringOutput)
}

// Id of the VPC.
func (o SubnetOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// Id of the Zone.
func (o SubnetOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Subnet) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SubnetArrayOutput struct{ *pulumi.OutputState }

func (SubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Subnet)(nil)).Elem()
}

func (o SubnetArrayOutput) ToSubnetArrayOutput() SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) ToSubnetArrayOutputWithContext(ctx context.Context) SubnetArrayOutput {
	return o
}

func (o SubnetArrayOutput) Index(i pulumi.IntInput) SubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].([]*Subnet)[vs[1].(int)]
	}).(SubnetOutput)
}

type SubnetMapOutput struct{ *pulumi.OutputState }

func (SubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Subnet)(nil)).Elem()
}

func (o SubnetMapOutput) ToSubnetMapOutput() SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) ToSubnetMapOutputWithContext(ctx context.Context) SubnetMapOutput {
	return o
}

func (o SubnetMapOutput) MapIndex(k pulumi.StringInput) SubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Subnet {
		return vs[0].(map[string]*Subnet)[vs[1].(string)]
	}).(SubnetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetInput)(nil)).Elem(), &Subnet{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetArrayInput)(nil)).Elem(), SubnetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SubnetMapInput)(nil)).Elem(), SubnetMap{})
	pulumi.RegisterOutputType(SubnetOutput{})
	pulumi.RegisterOutputType(SubnetArrayOutput{})
	pulumi.RegisterOutputType(SubnetMapOutput{})
}
