// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage vpc
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewVpc(ctx, "foo", &vpc.VpcArgs{
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//				DnsServers: pulumi.StringArray{
//					pulumi.String("8.8.8.8"),
//					pulumi.String("114.114.114.114"),
//				},
//				ProjectName: pulumi.String("AS_test"),
//				VpcName:     pulumi.String("tf-project-1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VPC can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vpc/vpc:Vpc default vpc-mizl7m1kqccg5smt1bdpijuj
//
// ```
type Vpc struct {
	pulumi.CustomResourceState

	// The account ID of VPC.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The associate cen list of VPC.
	AssociateCens VpcAssociateCenArrayOutput `pulumi:"associateCens"`
	// The auxiliary cidr block list of VPC.
	AuxiliaryCidrBlocks pulumi.StringArrayOutput `pulumi:"auxiliaryCidrBlocks"`
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// Creation time of VPC.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of the VPC.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers pulumi.StringArrayOutput `pulumi:"dnsServers"`
	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	EnableIpv6 pulumi.BoolOutput `pulumi:"enableIpv6"`
	// The IPv6 CIDR block of the VPC.
	Ipv6CidrBlock pulumi.StringOutput `pulumi:"ipv6CidrBlock"`
	// The nat gateway ID list of VPC.
	NatGatewayIds pulumi.StringArrayOutput `pulumi:"natGatewayIds"`
	// The ProjectName of the VPC.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// The route table ID list of VPC.
	RouteTableIds pulumi.StringArrayOutput `pulumi:"routeTableIds"`
	// The security group ID list of VPC.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Status of VPC.
	Status pulumi.StringOutput `pulumi:"status"`
	// The subnet ID list of VPC.
	SubnetIds pulumi.StringArrayOutput `pulumi:"subnetIds"`
	// Tags.
	Tags VpcTagArrayOutput `pulumi:"tags"`
	// The update time of VPC.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The ID of VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The name of the VPC.
	VpcName pulumi.StringOutput `pulumi:"vpcName"`
}

// NewVpc registers a new resource with the given unique name, arguments, and options.
func NewVpc(ctx *pulumi.Context,
	name string, args *VpcArgs, opts ...pulumi.ResourceOption) (*Vpc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Vpc
	err := ctx.RegisterResource("volcengine:vpc/vpc:Vpc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVpc gets an existing Vpc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVpc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VpcState, opts ...pulumi.ResourceOption) (*Vpc, error) {
	var resource Vpc
	err := ctx.ReadResource("volcengine:vpc/vpc:Vpc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vpc resources.
type vpcState struct {
	// The account ID of VPC.
	AccountId *string `pulumi:"accountId"`
	// The associate cen list of VPC.
	AssociateCens []VpcAssociateCen `pulumi:"associateCens"`
	// The auxiliary cidr block list of VPC.
	AuxiliaryCidrBlocks []string `pulumi:"auxiliaryCidrBlocks"`
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock *string `pulumi:"cidrBlock"`
	// Creation time of VPC.
	CreationTime *string `pulumi:"creationTime"`
	// The description of the VPC.
	Description *string `pulumi:"description"`
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers []string `pulumi:"dnsServers"`
	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The IPv6 CIDR block of the VPC.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The nat gateway ID list of VPC.
	NatGatewayIds []string `pulumi:"natGatewayIds"`
	// The ProjectName of the VPC.
	ProjectName *string `pulumi:"projectName"`
	// The route table ID list of VPC.
	RouteTableIds []string `pulumi:"routeTableIds"`
	// The security group ID list of VPC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Status of VPC.
	Status *string `pulumi:"status"`
	// The subnet ID list of VPC.
	SubnetIds []string `pulumi:"subnetIds"`
	// Tags.
	Tags []VpcTag `pulumi:"tags"`
	// The update time of VPC.
	UpdateTime *string `pulumi:"updateTime"`
	// The ID of VPC.
	VpcId *string `pulumi:"vpcId"`
	// The name of the VPC.
	VpcName *string `pulumi:"vpcName"`
}

type VpcState struct {
	// The account ID of VPC.
	AccountId pulumi.StringPtrInput
	// The associate cen list of VPC.
	AssociateCens VpcAssociateCenArrayInput
	// The auxiliary cidr block list of VPC.
	AuxiliaryCidrBlocks pulumi.StringArrayInput
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock pulumi.StringPtrInput
	// Creation time of VPC.
	CreationTime pulumi.StringPtrInput
	// The description of the VPC.
	Description pulumi.StringPtrInput
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers pulumi.StringArrayInput
	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	EnableIpv6 pulumi.BoolPtrInput
	// The IPv6 CIDR block of the VPC.
	Ipv6CidrBlock pulumi.StringPtrInput
	// The nat gateway ID list of VPC.
	NatGatewayIds pulumi.StringArrayInput
	// The ProjectName of the VPC.
	ProjectName pulumi.StringPtrInput
	// The route table ID list of VPC.
	RouteTableIds pulumi.StringArrayInput
	// The security group ID list of VPC.
	SecurityGroupIds pulumi.StringArrayInput
	// Status of VPC.
	Status pulumi.StringPtrInput
	// The subnet ID list of VPC.
	SubnetIds pulumi.StringArrayInput
	// Tags.
	Tags VpcTagArrayInput
	// The update time of VPC.
	UpdateTime pulumi.StringPtrInput
	// The ID of VPC.
	VpcId pulumi.StringPtrInput
	// The name of the VPC.
	VpcName pulumi.StringPtrInput
}

func (VpcState) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcState)(nil)).Elem()
}

type vpcArgs struct {
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock string `pulumi:"cidrBlock"`
	// The description of the VPC.
	Description *string `pulumi:"description"`
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers []string `pulumi:"dnsServers"`
	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	EnableIpv6 *bool `pulumi:"enableIpv6"`
	// The IPv6 CIDR block of the VPC.
	Ipv6CidrBlock *string `pulumi:"ipv6CidrBlock"`
	// The ProjectName of the VPC.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []VpcTag `pulumi:"tags"`
	// The name of the VPC.
	VpcName *string `pulumi:"vpcName"`
}

// The set of arguments for constructing a Vpc resource.
type VpcArgs struct {
	// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
	CidrBlock pulumi.StringInput
	// The description of the VPC.
	Description pulumi.StringPtrInput
	// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
	DnsServers pulumi.StringArrayInput
	// Specifies whether to enable the IPv6 CIDR block of the VPC.
	EnableIpv6 pulumi.BoolPtrInput
	// The IPv6 CIDR block of the VPC.
	Ipv6CidrBlock pulumi.StringPtrInput
	// The ProjectName of the VPC.
	ProjectName pulumi.StringPtrInput
	// Tags.
	Tags VpcTagArrayInput
	// The name of the VPC.
	VpcName pulumi.StringPtrInput
}

func (VpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vpcArgs)(nil)).Elem()
}

type VpcInput interface {
	pulumi.Input

	ToVpcOutput() VpcOutput
	ToVpcOutputWithContext(ctx context.Context) VpcOutput
}

func (*Vpc) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (i *Vpc) ToVpcOutput() VpcOutput {
	return i.ToVpcOutputWithContext(context.Background())
}

func (i *Vpc) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcOutput)
}

// VpcArrayInput is an input type that accepts VpcArray and VpcArrayOutput values.
// You can construct a concrete instance of `VpcArrayInput` via:
//
//	VpcArray{ VpcArgs{...} }
type VpcArrayInput interface {
	pulumi.Input

	ToVpcArrayOutput() VpcArrayOutput
	ToVpcArrayOutputWithContext(context.Context) VpcArrayOutput
}

type VpcArray []VpcInput

func (VpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (i VpcArray) ToVpcArrayOutput() VpcArrayOutput {
	return i.ToVpcArrayOutputWithContext(context.Background())
}

func (i VpcArray) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcArrayOutput)
}

// VpcMapInput is an input type that accepts VpcMap and VpcMapOutput values.
// You can construct a concrete instance of `VpcMapInput` via:
//
//	VpcMap{ "key": VpcArgs{...} }
type VpcMapInput interface {
	pulumi.Input

	ToVpcMapOutput() VpcMapOutput
	ToVpcMapOutputWithContext(context.Context) VpcMapOutput
}

type VpcMap map[string]VpcInput

func (VpcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (i VpcMap) ToVpcMapOutput() VpcMapOutput {
	return i.ToVpcMapOutputWithContext(context.Background())
}

func (i VpcMap) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcMapOutput)
}

type VpcOutput struct{ *pulumi.OutputState }

func (VpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vpc)(nil)).Elem()
}

func (o VpcOutput) ToVpcOutput() VpcOutput {
	return o
}

func (o VpcOutput) ToVpcOutputWithContext(ctx context.Context) VpcOutput {
	return o
}

// The account ID of VPC.
func (o VpcOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The associate cen list of VPC.
func (o VpcOutput) AssociateCens() VpcAssociateCenArrayOutput {
	return o.ApplyT(func(v *Vpc) VpcAssociateCenArrayOutput { return v.AssociateCens }).(VpcAssociateCenArrayOutput)
}

// The auxiliary cidr block list of VPC.
func (o VpcOutput) AuxiliaryCidrBlocks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.AuxiliaryCidrBlocks }).(pulumi.StringArrayOutput)
}

// A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
func (o VpcOutput) CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.CidrBlock }).(pulumi.StringOutput)
}

// Creation time of VPC.
func (o VpcOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the VPC.
func (o VpcOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
func (o VpcOutput) DnsServers() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.DnsServers }).(pulumi.StringArrayOutput)
}

// Specifies whether to enable the IPv6 CIDR block of the VPC.
func (o VpcOutput) EnableIpv6() pulumi.BoolOutput {
	return o.ApplyT(func(v *Vpc) pulumi.BoolOutput { return v.EnableIpv6 }).(pulumi.BoolOutput)
}

// The IPv6 CIDR block of the VPC.
func (o VpcOutput) Ipv6CidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Ipv6CidrBlock }).(pulumi.StringOutput)
}

// The nat gateway ID list of VPC.
func (o VpcOutput) NatGatewayIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.NatGatewayIds }).(pulumi.StringArrayOutput)
}

// The ProjectName of the VPC.
func (o VpcOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The route table ID list of VPC.
func (o VpcOutput) RouteTableIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.RouteTableIds }).(pulumi.StringArrayOutput)
}

// The security group ID list of VPC.
func (o VpcOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// Status of VPC.
func (o VpcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The subnet ID list of VPC.
func (o VpcOutput) SubnetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringArrayOutput { return v.SubnetIds }).(pulumi.StringArrayOutput)
}

// Tags.
func (o VpcOutput) Tags() VpcTagArrayOutput {
	return o.ApplyT(func(v *Vpc) VpcTagArrayOutput { return v.Tags }).(VpcTagArrayOutput)
}

// The update time of VPC.
func (o VpcOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The ID of VPC.
func (o VpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The name of the VPC.
func (o VpcOutput) VpcName() pulumi.StringOutput {
	return o.ApplyT(func(v *Vpc) pulumi.StringOutput { return v.VpcName }).(pulumi.StringOutput)
}

type VpcArrayOutput struct{ *pulumi.OutputState }

func (VpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vpc)(nil)).Elem()
}

func (o VpcArrayOutput) ToVpcArrayOutput() VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) ToVpcArrayOutputWithContext(ctx context.Context) VpcArrayOutput {
	return o
}

func (o VpcArrayOutput) Index(i pulumi.IntInput) VpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].([]*Vpc)[vs[1].(int)]
	}).(VpcOutput)
}

type VpcMapOutput struct{ *pulumi.OutputState }

func (VpcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vpc)(nil)).Elem()
}

func (o VpcMapOutput) ToVpcMapOutput() VpcMapOutput {
	return o
}

func (o VpcMapOutput) ToVpcMapOutputWithContext(ctx context.Context) VpcMapOutput {
	return o
}

func (o VpcMapOutput) MapIndex(k pulumi.StringInput) VpcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vpc {
		return vs[0].(map[string]*Vpc)[vs[1].(string)]
	}).(VpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VpcInput)(nil)).Elem(), &Vpc{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcArrayInput)(nil)).Elem(), VpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcMapInput)(nil)).Elem(), VpcMap{})
	pulumi.RegisterOutputType(VpcOutput{})
	pulumi.RegisterOutputType(VpcArrayOutput{})
	pulumi.RegisterOutputType(VpcMapOutput{})
}
