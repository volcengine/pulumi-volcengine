// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ha vips
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooHaVip, err := vpc.NewHaVip(ctx, "fooHaVip", &vpc.HaVipArgs{
//				HaVipName:   pulumi.String("acc-test-ha-vip"),
//				Description: pulumi.String("acc-test"),
//				SubnetId:    fooSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_ = vpc.GetHaVipsOutput(ctx, vpc.GetHaVipsOutputArgs{
//				Ids: pulumi.StringArray{
//					fooHaVip.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetHaVips(ctx *pulumi.Context, args *GetHaVipsArgs, opts ...pulumi.InvokeOption) (*GetHaVipsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetHaVipsResult
	err := ctx.Invoke("volcengine:vpc/getHaVips:getHaVips", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getHaVips.
type GetHaVipsArgs struct {
	// The name of Ha Vip.
	HaVipName *string `pulumi:"haVipName"`
	// A list of Ha Vip IDs.
	Ids []string `pulumi:"ids"`
	// The ip address of Ha Vip.
	IpAddress *string `pulumi:"ipAddress"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project name of Ha Vip.
	ProjectName *string `pulumi:"projectName"`
	// The status of Ha Vip.
	Status *string `pulumi:"status"`
	// The id of subnet.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []GetHaVipsTag `pulumi:"tags"`
	// The id of vpc.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getHaVips.
type GetHaVipsResult struct {
	// The name of the Ha Vip.
	HaVipName *string `pulumi:"haVipName"`
	// The collection of query.
	HaVips []GetHaVipsHaVip `pulumi:"haVips"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The ip address of the Ha Vip.
	IpAddress  *string `pulumi:"ipAddress"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The project name of the Ha Vip.
	ProjectName *string `pulumi:"projectName"`
	// The status of the Ha Vip.
	Status *string `pulumi:"status"`
	// The subnet id of the Ha Vip.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []GetHaVipsTag `pulumi:"tags"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The vpc id of the Ha Vip.
	VpcId *string `pulumi:"vpcId"`
}

func GetHaVipsOutput(ctx *pulumi.Context, args GetHaVipsOutputArgs, opts ...pulumi.InvokeOption) GetHaVipsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetHaVipsResult, error) {
			args := v.(GetHaVipsArgs)
			r, err := GetHaVips(ctx, &args, opts...)
			var s GetHaVipsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetHaVipsResultOutput)
}

// A collection of arguments for invoking getHaVips.
type GetHaVipsOutputArgs struct {
	// The name of Ha Vip.
	HaVipName pulumi.StringPtrInput `pulumi:"haVipName"`
	// A list of Ha Vip IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The ip address of Ha Vip.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project name of Ha Vip.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// The status of Ha Vip.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The id of subnet.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// Tags.
	Tags GetHaVipsTagArrayInput `pulumi:"tags"`
	// The id of vpc.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetHaVipsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHaVipsArgs)(nil)).Elem()
}

// A collection of values returned by getHaVips.
type GetHaVipsResultOutput struct{ *pulumi.OutputState }

func (GetHaVipsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHaVipsResult)(nil)).Elem()
}

func (o GetHaVipsResultOutput) ToGetHaVipsResultOutput() GetHaVipsResultOutput {
	return o
}

func (o GetHaVipsResultOutput) ToGetHaVipsResultOutputWithContext(ctx context.Context) GetHaVipsResultOutput {
	return o
}

// The name of the Ha Vip.
func (o GetHaVipsResultOutput) HaVipName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHaVipsResult) *string { return v.HaVipName }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GetHaVipsResultOutput) HaVips() GetHaVipsHaVipArrayOutput {
	return o.ApplyT(func(v GetHaVipsResult) []GetHaVipsHaVip { return v.HaVips }).(GetHaVipsHaVipArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetHaVipsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHaVipsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetHaVipsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetHaVipsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The ip address of the Ha Vip.
func (o GetHaVipsResultOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHaVipsResult) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

func (o GetHaVipsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHaVipsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetHaVipsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHaVipsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The project name of the Ha Vip.
func (o GetHaVipsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHaVipsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The status of the Ha Vip.
func (o GetHaVipsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHaVipsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The subnet id of the Ha Vip.
func (o GetHaVipsResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHaVipsResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Tags.
func (o GetHaVipsResultOutput) Tags() GetHaVipsTagArrayOutput {
	return o.ApplyT(func(v GetHaVipsResult) []GetHaVipsTag { return v.Tags }).(GetHaVipsTagArrayOutput)
}

// The total count of query.
func (o GetHaVipsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetHaVipsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The vpc id of the Ha Vip.
func (o GetHaVipsResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetHaVipsResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetHaVipsResultOutput{})
}
