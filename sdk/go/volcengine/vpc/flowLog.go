// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage flow log
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:     pulumi.String("acc-test-vpc"),
//				CidrBlock:   pulumi.String("172.16.0.0/16"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewFlowLog(ctx, "fooFlowLog", &vpc.FlowLogArgs{
//				FlowLogName:         pulumi.String("acc-test-flow-log"),
//				Description:         pulumi.String("acc-test"),
//				ResourceType:        pulumi.String("subnet"),
//				ResourceId:          fooSubnet.ID(),
//				TrafficType:         pulumi.String("All"),
//				LogProjectName:      pulumi.String("acc-test-project"),
//				LogTopicName:        pulumi.String("acc-test-topic"),
//				AggregationInterval: pulumi.Int(10),
//				ProjectName:         pulumi.String("default"),
//				Tags: vpc.FlowLogTagArray{
//					&vpc.FlowLogTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FlowLog can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vpc/flowLog:FlowLog default resource_id
// ```
type FlowLog struct {
	pulumi.CustomResourceState

	// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
	AggregationInterval pulumi.IntOutput `pulumi:"aggregationInterval"`
	// The business status of flow log.
	BusinessStatus pulumi.StringOutput `pulumi:"businessStatus"`
	// The created time of flow log.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of flow log.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of flow log.
	FlowLogName pulumi.StringOutput `pulumi:"flowLogName"`
	// The reason why flow log is locked.
	LockReason pulumi.StringOutput `pulumi:"lockReason"`
	// The ID of log project.
	LogProjectId pulumi.StringOutput `pulumi:"logProjectId"`
	// The name of log project. If there is no corresponding log project with the name, a new log project will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogProjectName pulumi.StringOutput `pulumi:"logProjectName"`
	// The ID of log topic.
	LogTopicId pulumi.StringOutput `pulumi:"logTopicId"`
	// The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogTopicName pulumi.StringOutput `pulumi:"logTopicName"`
	// The project name of flow log.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The ID of resource.
	ResourceId pulumi.StringOutput `pulumi:"resourceId"`
	// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
	ResourceType pulumi.StringOutput `pulumi:"resourceType"`
	// The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags.
	Tags FlowLogTagArrayOutput `pulumi:"tags"`
	// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
	TrafficType pulumi.StringOutput `pulumi:"trafficType"`
	// The updated time of flow log.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewFlowLog registers a new resource with the given unique name, arguments, and options.
func NewFlowLog(ctx *pulumi.Context,
	name string, args *FlowLogArgs, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AggregationInterval == nil {
		return nil, errors.New("invalid value for required argument 'AggregationInterval'")
	}
	if args.FlowLogName == nil {
		return nil, errors.New("invalid value for required argument 'FlowLogName'")
	}
	if args.LogProjectName == nil {
		return nil, errors.New("invalid value for required argument 'LogProjectName'")
	}
	if args.LogTopicName == nil {
		return nil, errors.New("invalid value for required argument 'LogTopicName'")
	}
	if args.ResourceId == nil {
		return nil, errors.New("invalid value for required argument 'ResourceId'")
	}
	if args.ResourceType == nil {
		return nil, errors.New("invalid value for required argument 'ResourceType'")
	}
	if args.TrafficType == nil {
		return nil, errors.New("invalid value for required argument 'TrafficType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlowLog
	err := ctx.RegisterResource("volcengine:vpc/flowLog:FlowLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlowLog gets an existing FlowLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlowLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlowLogState, opts ...pulumi.ResourceOption) (*FlowLog, error) {
	var resource FlowLog
	err := ctx.ReadResource("volcengine:vpc/flowLog:FlowLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlowLog resources.
type flowLogState struct {
	// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
	AggregationInterval *int `pulumi:"aggregationInterval"`
	// The business status of flow log.
	BusinessStatus *string `pulumi:"businessStatus"`
	// The created time of flow log.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of flow log.
	Description *string `pulumi:"description"`
	// The name of flow log.
	FlowLogName *string `pulumi:"flowLogName"`
	// The reason why flow log is locked.
	LockReason *string `pulumi:"lockReason"`
	// The ID of log project.
	LogProjectId *string `pulumi:"logProjectId"`
	// The name of log project. If there is no corresponding log project with the name, a new log project will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogProjectName *string `pulumi:"logProjectName"`
	// The ID of log topic.
	LogTopicId *string `pulumi:"logTopicId"`
	// The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogTopicName *string `pulumi:"logTopicName"`
	// The project name of flow log.
	ProjectName *string `pulumi:"projectName"`
	// The ID of resource.
	ResourceId *string `pulumi:"resourceId"`
	// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
	ResourceType *string `pulumi:"resourceType"`
	// The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []FlowLogTag `pulumi:"tags"`
	// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
	TrafficType *string `pulumi:"trafficType"`
	// The updated time of flow log.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type FlowLogState struct {
	// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
	AggregationInterval pulumi.IntPtrInput
	// The business status of flow log.
	BusinessStatus pulumi.StringPtrInput
	// The created time of flow log.
	CreatedAt pulumi.StringPtrInput
	// The description of flow log.
	Description pulumi.StringPtrInput
	// The name of flow log.
	FlowLogName pulumi.StringPtrInput
	// The reason why flow log is locked.
	LockReason pulumi.StringPtrInput
	// The ID of log project.
	LogProjectId pulumi.StringPtrInput
	// The name of log project. If there is no corresponding log project with the name, a new log project will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogProjectName pulumi.StringPtrInput
	// The ID of log topic.
	LogTopicId pulumi.StringPtrInput
	// The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogTopicName pulumi.StringPtrInput
	// The project name of flow log.
	ProjectName pulumi.StringPtrInput
	// The ID of resource.
	ResourceId pulumi.StringPtrInput
	// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
	ResourceType pulumi.StringPtrInput
	// The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
	Status pulumi.StringPtrInput
	// Tags.
	Tags FlowLogTagArrayInput
	// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
	TrafficType pulumi.StringPtrInput
	// The updated time of flow log.
	UpdatedAt pulumi.StringPtrInput
}

func (FlowLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogState)(nil)).Elem()
}

type flowLogArgs struct {
	// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
	AggregationInterval int `pulumi:"aggregationInterval"`
	// The description of flow log.
	Description *string `pulumi:"description"`
	// The name of flow log.
	FlowLogName string `pulumi:"flowLogName"`
	// The name of log project. If there is no corresponding log project with the name, a new log project will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogProjectName string `pulumi:"logProjectName"`
	// The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogTopicName string `pulumi:"logTopicName"`
	// The project name of flow log.
	ProjectName *string `pulumi:"projectName"`
	// The ID of resource.
	ResourceId string `pulumi:"resourceId"`
	// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
	ResourceType string `pulumi:"resourceType"`
	// Tags.
	Tags []FlowLogTag `pulumi:"tags"`
	// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
	TrafficType string `pulumi:"trafficType"`
}

// The set of arguments for constructing a FlowLog resource.
type FlowLogArgs struct {
	// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
	AggregationInterval pulumi.IntInput
	// The description of flow log.
	Description pulumi.StringPtrInput
	// The name of flow log.
	FlowLogName pulumi.StringInput
	// The name of log project. If there is no corresponding log project with the name, a new log project will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogProjectName pulumi.StringInput
	// The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created.
	// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	LogTopicName pulumi.StringInput
	// The project name of flow log.
	ProjectName pulumi.StringPtrInput
	// The ID of resource.
	ResourceId pulumi.StringInput
	// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
	ResourceType pulumi.StringInput
	// Tags.
	Tags FlowLogTagArrayInput
	// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
	TrafficType pulumi.StringInput
}

func (FlowLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flowLogArgs)(nil)).Elem()
}

type FlowLogInput interface {
	pulumi.Input

	ToFlowLogOutput() FlowLogOutput
	ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput
}

func (*FlowLog) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (i *FlowLog) ToFlowLogOutput() FlowLogOutput {
	return i.ToFlowLogOutputWithContext(context.Background())
}

func (i *FlowLog) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogOutput)
}

// FlowLogArrayInput is an input type that accepts FlowLogArray and FlowLogArrayOutput values.
// You can construct a concrete instance of `FlowLogArrayInput` via:
//
//	FlowLogArray{ FlowLogArgs{...} }
type FlowLogArrayInput interface {
	pulumi.Input

	ToFlowLogArrayOutput() FlowLogArrayOutput
	ToFlowLogArrayOutputWithContext(context.Context) FlowLogArrayOutput
}

type FlowLogArray []FlowLogInput

func (FlowLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (i FlowLogArray) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return i.ToFlowLogArrayOutputWithContext(context.Background())
}

func (i FlowLogArray) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogArrayOutput)
}

// FlowLogMapInput is an input type that accepts FlowLogMap and FlowLogMapOutput values.
// You can construct a concrete instance of `FlowLogMapInput` via:
//
//	FlowLogMap{ "key": FlowLogArgs{...} }
type FlowLogMapInput interface {
	pulumi.Input

	ToFlowLogMapOutput() FlowLogMapOutput
	ToFlowLogMapOutputWithContext(context.Context) FlowLogMapOutput
}

type FlowLogMap map[string]FlowLogInput

func (FlowLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (i FlowLogMap) ToFlowLogMapOutput() FlowLogMapOutput {
	return i.ToFlowLogMapOutputWithContext(context.Background())
}

func (i FlowLogMap) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlowLogMapOutput)
}

type FlowLogOutput struct{ *pulumi.OutputState }

func (FlowLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlowLog)(nil)).Elem()
}

func (o FlowLogOutput) ToFlowLogOutput() FlowLogOutput {
	return o
}

func (o FlowLogOutput) ToFlowLogOutputWithContext(ctx context.Context) FlowLogOutput {
	return o
}

// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
func (o FlowLogOutput) AggregationInterval() pulumi.IntOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.IntOutput { return v.AggregationInterval }).(pulumi.IntOutput)
}

// The business status of flow log.
func (o FlowLogOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The created time of flow log.
func (o FlowLogOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of flow log.
func (o FlowLogOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of flow log.
func (o FlowLogOutput) FlowLogName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.FlowLogName }).(pulumi.StringOutput)
}

// The reason why flow log is locked.
func (o FlowLogOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LockReason }).(pulumi.StringOutput)
}

// The ID of log project.
func (o FlowLogOutput) LogProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogProjectId }).(pulumi.StringOutput)
}

// The name of log project. If there is no corresponding log project with the name, a new log project will be created.
// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o FlowLogOutput) LogProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogProjectName }).(pulumi.StringOutput)
}

// The ID of log topic.
func (o FlowLogOutput) LogTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogTopicId }).(pulumi.StringOutput)
}

// The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created.
// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o FlowLogOutput) LogTopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.LogTopicName }).(pulumi.StringOutput)
}

// The project name of flow log.
func (o FlowLogOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The ID of resource.
func (o FlowLogOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ResourceId }).(pulumi.StringOutput)
}

// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
func (o FlowLogOutput) ResourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.ResourceType }).(pulumi.StringOutput)
}

// The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
func (o FlowLogOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o FlowLogOutput) Tags() FlowLogTagArrayOutput {
	return o.ApplyT(func(v *FlowLog) FlowLogTagArrayOutput { return v.Tags }).(FlowLogTagArrayOutput)
}

// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
func (o FlowLogOutput) TrafficType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.TrafficType }).(pulumi.StringOutput)
}

// The updated time of flow log.
func (o FlowLogOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *FlowLog) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type FlowLogArrayOutput struct{ *pulumi.OutputState }

func (FlowLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlowLog)(nil)).Elem()
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutput() FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) ToFlowLogArrayOutputWithContext(ctx context.Context) FlowLogArrayOutput {
	return o
}

func (o FlowLogArrayOutput) Index(i pulumi.IntInput) FlowLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].([]*FlowLog)[vs[1].(int)]
	}).(FlowLogOutput)
}

type FlowLogMapOutput struct{ *pulumi.OutputState }

func (FlowLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlowLog)(nil)).Elem()
}

func (o FlowLogMapOutput) ToFlowLogMapOutput() FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) ToFlowLogMapOutputWithContext(ctx context.Context) FlowLogMapOutput {
	return o
}

func (o FlowLogMapOutput) MapIndex(k pulumi.StringInput) FlowLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlowLog {
		return vs[0].(map[string]*FlowLog)[vs[1].(string)]
	}).(FlowLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogInput)(nil)).Elem(), &FlowLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogArrayInput)(nil)).Elem(), FlowLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlowLogMapInput)(nil)).Elem(), FlowLogMap{})
	pulumi.RegisterOutputType(FlowLogOutput{})
	pulumi.RegisterOutputType(FlowLogArrayOutput{})
	pulumi.RegisterOutputType(FlowLogMapOutput{})
}
