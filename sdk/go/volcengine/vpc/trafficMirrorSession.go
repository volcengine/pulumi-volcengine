// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage traffic mirror session
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooSecurityGroup, err := vpc.NewSecurityGroup(ctx, "fooSecurityGroup", &vpc.SecurityGroupArgs{
//				SecurityGroupName: pulumi.String("acc-test-sg"),
//				VpcId:             fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
//				OsType:         pulumi.StringRef("Linux"),
//				Visibility:     pulumi.StringRef("public"),
//				InstanceTypeId: pulumi.StringRef("ecs.g3il.large"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			fooInstance, err := ecs.NewInstance(ctx, "fooInstance", &ecs.InstanceArgs{
//				InstanceName:       pulumi.String("acc-test-ecs"),
//				Description:        pulumi.String("acc-test"),
//				HostName:           pulumi.String("tf-acc-test"),
//				ImageId:            pulumi.String(fooImages.Images[0].ImageId),
//				InstanceType:       pulumi.String("ecs.g3il.large"),
//				Password:           pulumi.String("93f0cb0614Aab12"),
//				InstanceChargeType: pulumi.String("PostPaid"),
//				SystemVolumeType:   pulumi.String("ESSD_PL0"),
//				SystemVolumeSize:   pulumi.Int(40),
//				SubnetId:           fooSubnet.ID(),
//				SecurityGroupIds: pulumi.StringArray{
//					fooSecurityGroup.ID(),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: ecs.InstanceTagArray{
//					&ecs.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooNetworkInterface, err := vpc.NewNetworkInterface(ctx, "fooNetworkInterface", &vpc.NetworkInterfaceArgs{
//				NetworkInterfaceName: pulumi.String("acc-test-eni"),
//				Description:          pulumi.String("acc-test"),
//				SubnetId:             fooSubnet.ID(),
//				SecurityGroupIds: pulumi.StringArray{
//					fooSecurityGroup.ID(),
//				},
//				PrimaryIpAddress:    pulumi.String("172.16.0.253"),
//				PortSecurityEnabled: pulumi.Bool(false),
//				PrivateIpAddresses: pulumi.StringArray{
//					pulumi.String("172.16.0.2"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: vpc.NetworkInterfaceTagArray{
//					&vpc.NetworkInterfaceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewNetworkInterface(ctx, "foo-sourceNetworkInterface", &vpc.NetworkInterfaceArgs{
//				NetworkInterfaceName: pulumi.String("acc-test-eni"),
//				Description:          pulumi.String("acc-test"),
//				SubnetId:             fooSubnet.ID(),
//				SecurityGroupIds: pulumi.StringArray{
//					fooSecurityGroup.ID(),
//				},
//				PrimaryIpAddress:    pulumi.String("172.16.0.252"),
//				PortSecurityEnabled: pulumi.Bool(false),
//				PrivateIpAddresses: pulumi.StringArray{
//					pulumi.String("172.16.0.5"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: vpc.NetworkInterfaceTagArray{
//					&vpc.NetworkInterfaceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooNetworkInterfaceAttach, err := vpc.NewNetworkInterfaceAttach(ctx, "fooNetworkInterfaceAttach", &vpc.NetworkInterfaceAttachArgs{
//				NetworkInterfaceId: fooNetworkInterface.ID(),
//				InstanceId:         fooInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewNetworkInterfaceAttach(ctx, "foo-sourceNetworkInterfaceAttach", &vpc.NetworkInterfaceAttachArgs{
//				NetworkInterfaceId: foo_sourceNetworkInterface.ID(),
//				InstanceId:         fooInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooTrafficMirrorTarget, err := vpc.NewTrafficMirrorTarget(ctx, "fooTrafficMirrorTarget", &vpc.TrafficMirrorTargetArgs{
//				InstanceType:            pulumi.String("NetworkInterface"),
//				InstanceId:              fooNetworkInterface.ID(),
//				TrafficMirrorTargetName: pulumi.String("acc-test-traffic-mirror-target"),
//				Description:             pulumi.String("acc-test"),
//				ProjectName:             pulumi.String("default"),
//				Tags: vpc.TrafficMirrorTargetTagArray{
//					&vpc.TrafficMirrorTargetTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fooNetworkInterfaceAttach,
//			}))
//			if err != nil {
//				return err
//			}
//			fooTrafficMirrorFilter, err := vpc.NewTrafficMirrorFilter(ctx, "fooTrafficMirrorFilter", &vpc.TrafficMirrorFilterArgs{
//				TrafficMirrorFilterName: pulumi.String("acc-test-traffic-mirror-filter"),
//				Description:             pulumi.String("acc-test"),
//				ProjectName:             pulumi.String("default"),
//				Tags: vpc.TrafficMirrorFilterTagArray{
//					&vpc.TrafficMirrorFilterTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewTrafficMirrorSession(ctx, "fooTrafficMirrorSession", &vpc.TrafficMirrorSessionArgs{
//				TrafficMirrorFilterId:    fooTrafficMirrorFilter.ID(),
//				TrafficMirrorTargetId:    fooTrafficMirrorTarget.ID(),
//				TrafficMirrorSessionName: pulumi.String("acc-test-traffic-mirror-session"),
//				Description:              pulumi.String("acc-test"),
//				NetworkInterfaceId:       foo_sourceNetworkInterface.ID(),
//				VirtualNetworkId:         pulumi.Int(10),
//				PacketLength:             pulumi.Int(1000),
//				Priority:                 pulumi.Int(1),
//				ProjectName:              pulumi.String("default"),
//				Tags: vpc.TrafficMirrorSessionTagArray{
//					&vpc.TrafficMirrorSessionTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				foo_sourceNetworkInterfaceAttach,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TrafficMirrorSession can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vpc/trafficMirrorSession:TrafficMirrorSession default resource_id
// ```
type TrafficMirrorSession struct {
	pulumi.CustomResourceState

	// The business status of traffic mirror session.
	BusinessStatus pulumi.StringOutput `pulumi:"businessStatus"`
	// The create time of traffic mirror session.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the traffic mirror session.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The lock reason of traffic mirror session.
	LockReason pulumi.StringOutput `pulumi:"lockReason"`
	// The ID of network interface.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
	// The packet length of traffic mirror session.
	PacketLength pulumi.IntOutput `pulumi:"packetLength"`
	// The priority of traffic mirror session. Valid values: 1~32766.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The project name of traffic mirror session.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The status of traffic mirror session.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags.
	Tags TrafficMirrorSessionTagArrayOutput `pulumi:"tags"`
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId pulumi.StringOutput `pulumi:"trafficMirrorFilterId"`
	// The name of the traffic mirror session.
	TrafficMirrorSessionName pulumi.StringOutput `pulumi:"trafficMirrorSessionName"`
	// The ID of traffic mirror target.
	TrafficMirrorTargetId pulumi.StringOutput `pulumi:"trafficMirrorTargetId"`
	// The update time of traffic mirror session.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The ID of virtual network.
	VirtualNetworkId pulumi.IntOutput `pulumi:"virtualNetworkId"`
}

// NewTrafficMirrorSession registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorSession(ctx *pulumi.Context,
	name string, args *TrafficMirrorSessionArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	if args.Priority == nil {
		return nil, errors.New("invalid value for required argument 'Priority'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	if args.TrafficMirrorTargetId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorTargetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficMirrorSession
	err := ctx.RegisterResource("volcengine:vpc/trafficMirrorSession:TrafficMirrorSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorSession gets an existing TrafficMirrorSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorSessionState, opts ...pulumi.ResourceOption) (*TrafficMirrorSession, error) {
	var resource TrafficMirrorSession
	err := ctx.ReadResource("volcengine:vpc/trafficMirrorSession:TrafficMirrorSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorSession resources.
type trafficMirrorSessionState struct {
	// The business status of traffic mirror session.
	BusinessStatus *string `pulumi:"businessStatus"`
	// The create time of traffic mirror session.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// The lock reason of traffic mirror session.
	LockReason *string `pulumi:"lockReason"`
	// The ID of network interface.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
	// The packet length of traffic mirror session.
	PacketLength *int `pulumi:"packetLength"`
	// The priority of traffic mirror session. Valid values: 1~32766.
	Priority *int `pulumi:"priority"`
	// The project name of traffic mirror session.
	ProjectName *string `pulumi:"projectName"`
	// The status of traffic mirror session.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []TrafficMirrorSessionTag `pulumi:"tags"`
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId *string `pulumi:"trafficMirrorFilterId"`
	// The name of the traffic mirror session.
	TrafficMirrorSessionName *string `pulumi:"trafficMirrorSessionName"`
	// The ID of traffic mirror target.
	TrafficMirrorTargetId *string `pulumi:"trafficMirrorTargetId"`
	// The update time of traffic mirror session.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The ID of virtual network.
	VirtualNetworkId *int `pulumi:"virtualNetworkId"`
}

type TrafficMirrorSessionState struct {
	// The business status of traffic mirror session.
	BusinessStatus pulumi.StringPtrInput
	// The create time of traffic mirror session.
	CreatedAt pulumi.StringPtrInput
	// The description of the traffic mirror session.
	Description pulumi.StringPtrInput
	// The lock reason of traffic mirror session.
	LockReason pulumi.StringPtrInput
	// The ID of network interface.
	NetworkInterfaceId pulumi.StringPtrInput
	// The packet length of traffic mirror session.
	PacketLength pulumi.IntPtrInput
	// The priority of traffic mirror session. Valid values: 1~32766.
	Priority pulumi.IntPtrInput
	// The project name of traffic mirror session.
	ProjectName pulumi.StringPtrInput
	// The status of traffic mirror session.
	Status pulumi.StringPtrInput
	// Tags.
	Tags TrafficMirrorSessionTagArrayInput
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId pulumi.StringPtrInput
	// The name of the traffic mirror session.
	TrafficMirrorSessionName pulumi.StringPtrInput
	// The ID of traffic mirror target.
	TrafficMirrorTargetId pulumi.StringPtrInput
	// The update time of traffic mirror session.
	UpdatedAt pulumi.StringPtrInput
	// The ID of virtual network.
	VirtualNetworkId pulumi.IntPtrInput
}

func (TrafficMirrorSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionState)(nil)).Elem()
}

type trafficMirrorSessionArgs struct {
	// The description of the traffic mirror session.
	Description *string `pulumi:"description"`
	// The ID of network interface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The packet length of traffic mirror session.
	PacketLength *int `pulumi:"packetLength"`
	// The priority of traffic mirror session. Valid values: 1~32766.
	Priority int `pulumi:"priority"`
	// The project name of traffic mirror session.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []TrafficMirrorSessionTag `pulumi:"tags"`
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId string `pulumi:"trafficMirrorFilterId"`
	// The name of the traffic mirror session.
	TrafficMirrorSessionName *string `pulumi:"trafficMirrorSessionName"`
	// The ID of traffic mirror target.
	TrafficMirrorTargetId string `pulumi:"trafficMirrorTargetId"`
	// The ID of virtual network.
	VirtualNetworkId *int `pulumi:"virtualNetworkId"`
}

// The set of arguments for constructing a TrafficMirrorSession resource.
type TrafficMirrorSessionArgs struct {
	// The description of the traffic mirror session.
	Description pulumi.StringPtrInput
	// The ID of network interface.
	NetworkInterfaceId pulumi.StringInput
	// The packet length of traffic mirror session.
	PacketLength pulumi.IntPtrInput
	// The priority of traffic mirror session. Valid values: 1~32766.
	Priority pulumi.IntInput
	// The project name of traffic mirror session.
	ProjectName pulumi.StringPtrInput
	// Tags.
	Tags TrafficMirrorSessionTagArrayInput
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId pulumi.StringInput
	// The name of the traffic mirror session.
	TrafficMirrorSessionName pulumi.StringPtrInput
	// The ID of traffic mirror target.
	TrafficMirrorTargetId pulumi.StringInput
	// The ID of virtual network.
	VirtualNetworkId pulumi.IntPtrInput
}

func (TrafficMirrorSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorSessionArgs)(nil)).Elem()
}

type TrafficMirrorSessionInput interface {
	pulumi.Input

	ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput
	ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput
}

func (*TrafficMirrorSession) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorSession)(nil)).Elem()
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return i.ToTrafficMirrorSessionOutputWithContext(context.Background())
}

func (i *TrafficMirrorSession) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionOutput)
}

// TrafficMirrorSessionArrayInput is an input type that accepts TrafficMirrorSessionArray and TrafficMirrorSessionArrayOutput values.
// You can construct a concrete instance of `TrafficMirrorSessionArrayInput` via:
//
//	TrafficMirrorSessionArray{ TrafficMirrorSessionArgs{...} }
type TrafficMirrorSessionArrayInput interface {
	pulumi.Input

	ToTrafficMirrorSessionArrayOutput() TrafficMirrorSessionArrayOutput
	ToTrafficMirrorSessionArrayOutputWithContext(context.Context) TrafficMirrorSessionArrayOutput
}

type TrafficMirrorSessionArray []TrafficMirrorSessionInput

func (TrafficMirrorSessionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorSession)(nil)).Elem()
}

func (i TrafficMirrorSessionArray) ToTrafficMirrorSessionArrayOutput() TrafficMirrorSessionArrayOutput {
	return i.ToTrafficMirrorSessionArrayOutputWithContext(context.Background())
}

func (i TrafficMirrorSessionArray) ToTrafficMirrorSessionArrayOutputWithContext(ctx context.Context) TrafficMirrorSessionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionArrayOutput)
}

// TrafficMirrorSessionMapInput is an input type that accepts TrafficMirrorSessionMap and TrafficMirrorSessionMapOutput values.
// You can construct a concrete instance of `TrafficMirrorSessionMapInput` via:
//
//	TrafficMirrorSessionMap{ "key": TrafficMirrorSessionArgs{...} }
type TrafficMirrorSessionMapInput interface {
	pulumi.Input

	ToTrafficMirrorSessionMapOutput() TrafficMirrorSessionMapOutput
	ToTrafficMirrorSessionMapOutputWithContext(context.Context) TrafficMirrorSessionMapOutput
}

type TrafficMirrorSessionMap map[string]TrafficMirrorSessionInput

func (TrafficMirrorSessionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorSession)(nil)).Elem()
}

func (i TrafficMirrorSessionMap) ToTrafficMirrorSessionMapOutput() TrafficMirrorSessionMapOutput {
	return i.ToTrafficMirrorSessionMapOutputWithContext(context.Background())
}

func (i TrafficMirrorSessionMap) ToTrafficMirrorSessionMapOutputWithContext(ctx context.Context) TrafficMirrorSessionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorSessionMapOutput)
}

type TrafficMirrorSessionOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutput() TrafficMirrorSessionOutput {
	return o
}

func (o TrafficMirrorSessionOutput) ToTrafficMirrorSessionOutputWithContext(ctx context.Context) TrafficMirrorSessionOutput {
	return o
}

// The business status of traffic mirror session.
func (o TrafficMirrorSessionOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The create time of traffic mirror session.
func (o TrafficMirrorSessionOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the traffic mirror session.
func (o TrafficMirrorSessionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The lock reason of traffic mirror session.
func (o TrafficMirrorSessionOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.LockReason }).(pulumi.StringOutput)
}

// The ID of network interface.
func (o TrafficMirrorSessionOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The packet length of traffic mirror session.
func (o TrafficMirrorSessionOutput) PacketLength() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntOutput { return v.PacketLength }).(pulumi.IntOutput)
}

// The priority of traffic mirror session. Valid values: 1~32766.
func (o TrafficMirrorSessionOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The project name of traffic mirror session.
func (o TrafficMirrorSessionOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The status of traffic mirror session.
func (o TrafficMirrorSessionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o TrafficMirrorSessionOutput) Tags() TrafficMirrorSessionTagArrayOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) TrafficMirrorSessionTagArrayOutput { return v.Tags }).(TrafficMirrorSessionTagArrayOutput)
}

// The ID of traffic mirror filter.
func (o TrafficMirrorSessionOutput) TrafficMirrorFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorFilterId }).(pulumi.StringOutput)
}

// The name of the traffic mirror session.
func (o TrafficMirrorSessionOutput) TrafficMirrorSessionName() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorSessionName }).(pulumi.StringOutput)
}

// The ID of traffic mirror target.
func (o TrafficMirrorSessionOutput) TrafficMirrorTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.TrafficMirrorTargetId }).(pulumi.StringOutput)
}

// The update time of traffic mirror session.
func (o TrafficMirrorSessionOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The ID of virtual network.
func (o TrafficMirrorSessionOutput) VirtualNetworkId() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorSession) pulumi.IntOutput { return v.VirtualNetworkId }).(pulumi.IntOutput)
}

type TrafficMirrorSessionArrayOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionArrayOutput) ToTrafficMirrorSessionArrayOutput() TrafficMirrorSessionArrayOutput {
	return o
}

func (o TrafficMirrorSessionArrayOutput) ToTrafficMirrorSessionArrayOutputWithContext(ctx context.Context) TrafficMirrorSessionArrayOutput {
	return o
}

func (o TrafficMirrorSessionArrayOutput) Index(i pulumi.IntInput) TrafficMirrorSessionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrafficMirrorSession {
		return vs[0].([]*TrafficMirrorSession)[vs[1].(int)]
	}).(TrafficMirrorSessionOutput)
}

type TrafficMirrorSessionMapOutput struct{ *pulumi.OutputState }

func (TrafficMirrorSessionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorSession)(nil)).Elem()
}

func (o TrafficMirrorSessionMapOutput) ToTrafficMirrorSessionMapOutput() TrafficMirrorSessionMapOutput {
	return o
}

func (o TrafficMirrorSessionMapOutput) ToTrafficMirrorSessionMapOutputWithContext(ctx context.Context) TrafficMirrorSessionMapOutput {
	return o
}

func (o TrafficMirrorSessionMapOutput) MapIndex(k pulumi.StringInput) TrafficMirrorSessionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrafficMirrorSession {
		return vs[0].(map[string]*TrafficMirrorSession)[vs[1].(string)]
	}).(TrafficMirrorSessionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionInput)(nil)).Elem(), &TrafficMirrorSession{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionArrayInput)(nil)).Elem(), TrafficMirrorSessionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorSessionMapInput)(nil)).Elem(), TrafficMirrorSessionMap{})
	pulumi.RegisterOutputType(TrafficMirrorSessionOutput{})
	pulumi.RegisterOutputType(TrafficMirrorSessionArrayOutput{})
	pulumi.RegisterOutputType(TrafficMirrorSessionMapOutput{})
}
