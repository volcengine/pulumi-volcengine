// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage ha vip
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     *pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooHaVip, err := vpc.NewHaVip(ctx, "fooHaVip", &vpc.HaVipArgs{
//				HaVipName:   pulumi.String("acc-test-ha-vip"),
//				Description: pulumi.String("acc-test"),
//				SubnetId:    fooSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooAddress, err := eip.NewAddress(ctx, "fooAddress", &eip.AddressArgs{
//				BillingType: pulumi.String("PostPaidByTraffic"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eip.NewAssociate(ctx, "fooAssociate", &eip.AssociateArgs{
//				AllocationId: fooAddress.ID(),
//				InstanceId:   fooHaVip.ID(),
//				InstanceType: pulumi.String("HaVip"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// HaVip can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vpc/haVip:HaVip default havip-2byzv8icq1b7k2dx0eegb****
//
// ```
type HaVip struct {
	pulumi.CustomResourceState

	// The associated eip address of the Ha Vip.
	AssociatedEipAddress pulumi.StringOutput `pulumi:"associatedEipAddress"`
	// The associated eip id of the Ha Vip.
	AssociatedEipId pulumi.StringOutput `pulumi:"associatedEipId"`
	// The associated instance ids of the Ha Vip.
	AssociatedInstanceIds pulumi.StringArrayOutput `pulumi:"associatedInstanceIds"`
	// The associated instance type of the Ha Vip.
	AssociatedInstanceType pulumi.StringOutput `pulumi:"associatedInstanceType"`
	// The create time of the Ha Vip.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the Ha Vip.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the Ha Vip.
	HaVipName pulumi.StringOutput `pulumi:"haVipName"`
	// The ip address of the Ha Vip.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The master instance id of the Ha Vip.
	MasterInstanceId pulumi.StringOutput `pulumi:"masterInstanceId"`
	// The project name of the Ha Vip.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The status of the Ha Vip.
	Status pulumi.StringOutput `pulumi:"status"`
	// The subnet id of the Ha Vip.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The update time of the Ha Vip.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The vpc id of the Ha Vip.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewHaVip registers a new resource with the given unique name, arguments, and options.
func NewHaVip(ctx *pulumi.Context,
	name string, args *HaVipArgs, opts ...pulumi.ResourceOption) (*HaVip, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HaVip
	err := ctx.RegisterResource("volcengine:vpc/haVip:HaVip", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHaVip gets an existing HaVip resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHaVip(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HaVipState, opts ...pulumi.ResourceOption) (*HaVip, error) {
	var resource HaVip
	err := ctx.ReadResource("volcengine:vpc/haVip:HaVip", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HaVip resources.
type haVipState struct {
	// The associated eip address of the Ha Vip.
	AssociatedEipAddress *string `pulumi:"associatedEipAddress"`
	// The associated eip id of the Ha Vip.
	AssociatedEipId *string `pulumi:"associatedEipId"`
	// The associated instance ids of the Ha Vip.
	AssociatedInstanceIds []string `pulumi:"associatedInstanceIds"`
	// The associated instance type of the Ha Vip.
	AssociatedInstanceType *string `pulumi:"associatedInstanceType"`
	// The create time of the Ha Vip.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the Ha Vip.
	Description *string `pulumi:"description"`
	// The name of the Ha Vip.
	HaVipName *string `pulumi:"haVipName"`
	// The ip address of the Ha Vip.
	IpAddress *string `pulumi:"ipAddress"`
	// The master instance id of the Ha Vip.
	MasterInstanceId *string `pulumi:"masterInstanceId"`
	// The project name of the Ha Vip.
	ProjectName *string `pulumi:"projectName"`
	// The status of the Ha Vip.
	Status *string `pulumi:"status"`
	// The subnet id of the Ha Vip.
	SubnetId *string `pulumi:"subnetId"`
	// The update time of the Ha Vip.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The vpc id of the Ha Vip.
	VpcId *string `pulumi:"vpcId"`
}

type HaVipState struct {
	// The associated eip address of the Ha Vip.
	AssociatedEipAddress pulumi.StringPtrInput
	// The associated eip id of the Ha Vip.
	AssociatedEipId pulumi.StringPtrInput
	// The associated instance ids of the Ha Vip.
	AssociatedInstanceIds pulumi.StringArrayInput
	// The associated instance type of the Ha Vip.
	AssociatedInstanceType pulumi.StringPtrInput
	// The create time of the Ha Vip.
	CreatedAt pulumi.StringPtrInput
	// The description of the Ha Vip.
	Description pulumi.StringPtrInput
	// The name of the Ha Vip.
	HaVipName pulumi.StringPtrInput
	// The ip address of the Ha Vip.
	IpAddress pulumi.StringPtrInput
	// The master instance id of the Ha Vip.
	MasterInstanceId pulumi.StringPtrInput
	// The project name of the Ha Vip.
	ProjectName pulumi.StringPtrInput
	// The status of the Ha Vip.
	Status pulumi.StringPtrInput
	// The subnet id of the Ha Vip.
	SubnetId pulumi.StringPtrInput
	// The update time of the Ha Vip.
	UpdatedAt pulumi.StringPtrInput
	// The vpc id of the Ha Vip.
	VpcId pulumi.StringPtrInput
}

func (HaVipState) ElementType() reflect.Type {
	return reflect.TypeOf((*haVipState)(nil)).Elem()
}

type haVipArgs struct {
	// The description of the Ha Vip.
	Description *string `pulumi:"description"`
	// The name of the Ha Vip.
	HaVipName *string `pulumi:"haVipName"`
	// The ip address of the Ha Vip.
	IpAddress *string `pulumi:"ipAddress"`
	// The subnet id of the Ha Vip.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a HaVip resource.
type HaVipArgs struct {
	// The description of the Ha Vip.
	Description pulumi.StringPtrInput
	// The name of the Ha Vip.
	HaVipName pulumi.StringPtrInput
	// The ip address of the Ha Vip.
	IpAddress pulumi.StringPtrInput
	// The subnet id of the Ha Vip.
	SubnetId pulumi.StringInput
}

func (HaVipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*haVipArgs)(nil)).Elem()
}

type HaVipInput interface {
	pulumi.Input

	ToHaVipOutput() HaVipOutput
	ToHaVipOutputWithContext(ctx context.Context) HaVipOutput
}

func (*HaVip) ElementType() reflect.Type {
	return reflect.TypeOf((**HaVip)(nil)).Elem()
}

func (i *HaVip) ToHaVipOutput() HaVipOutput {
	return i.ToHaVipOutputWithContext(context.Background())
}

func (i *HaVip) ToHaVipOutputWithContext(ctx context.Context) HaVipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVipOutput)
}

// HaVipArrayInput is an input type that accepts HaVipArray and HaVipArrayOutput values.
// You can construct a concrete instance of `HaVipArrayInput` via:
//
//	HaVipArray{ HaVipArgs{...} }
type HaVipArrayInput interface {
	pulumi.Input

	ToHaVipArrayOutput() HaVipArrayOutput
	ToHaVipArrayOutputWithContext(context.Context) HaVipArrayOutput
}

type HaVipArray []HaVipInput

func (HaVipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HaVip)(nil)).Elem()
}

func (i HaVipArray) ToHaVipArrayOutput() HaVipArrayOutput {
	return i.ToHaVipArrayOutputWithContext(context.Background())
}

func (i HaVipArray) ToHaVipArrayOutputWithContext(ctx context.Context) HaVipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVipArrayOutput)
}

// HaVipMapInput is an input type that accepts HaVipMap and HaVipMapOutput values.
// You can construct a concrete instance of `HaVipMapInput` via:
//
//	HaVipMap{ "key": HaVipArgs{...} }
type HaVipMapInput interface {
	pulumi.Input

	ToHaVipMapOutput() HaVipMapOutput
	ToHaVipMapOutputWithContext(context.Context) HaVipMapOutput
}

type HaVipMap map[string]HaVipInput

func (HaVipMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HaVip)(nil)).Elem()
}

func (i HaVipMap) ToHaVipMapOutput() HaVipMapOutput {
	return i.ToHaVipMapOutputWithContext(context.Background())
}

func (i HaVipMap) ToHaVipMapOutputWithContext(ctx context.Context) HaVipMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVipMapOutput)
}

type HaVipOutput struct{ *pulumi.OutputState }

func (HaVipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HaVip)(nil)).Elem()
}

func (o HaVipOutput) ToHaVipOutput() HaVipOutput {
	return o
}

func (o HaVipOutput) ToHaVipOutputWithContext(ctx context.Context) HaVipOutput {
	return o
}

// The associated eip address of the Ha Vip.
func (o HaVipOutput) AssociatedEipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.AssociatedEipAddress }).(pulumi.StringOutput)
}

// The associated eip id of the Ha Vip.
func (o HaVipOutput) AssociatedEipId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.AssociatedEipId }).(pulumi.StringOutput)
}

// The associated instance ids of the Ha Vip.
func (o HaVipOutput) AssociatedInstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringArrayOutput { return v.AssociatedInstanceIds }).(pulumi.StringArrayOutput)
}

// The associated instance type of the Ha Vip.
func (o HaVipOutput) AssociatedInstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.AssociatedInstanceType }).(pulumi.StringOutput)
}

// The create time of the Ha Vip.
func (o HaVipOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the Ha Vip.
func (o HaVipOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the Ha Vip.
func (o HaVipOutput) HaVipName() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.HaVipName }).(pulumi.StringOutput)
}

// The ip address of the Ha Vip.
func (o HaVipOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// The master instance id of the Ha Vip.
func (o HaVipOutput) MasterInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.MasterInstanceId }).(pulumi.StringOutput)
}

// The project name of the Ha Vip.
func (o HaVipOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The status of the Ha Vip.
func (o HaVipOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The subnet id of the Ha Vip.
func (o HaVipOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The update time of the Ha Vip.
func (o HaVipOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The vpc id of the Ha Vip.
func (o HaVipOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVip) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type HaVipArrayOutput struct{ *pulumi.OutputState }

func (HaVipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HaVip)(nil)).Elem()
}

func (o HaVipArrayOutput) ToHaVipArrayOutput() HaVipArrayOutput {
	return o
}

func (o HaVipArrayOutput) ToHaVipArrayOutputWithContext(ctx context.Context) HaVipArrayOutput {
	return o
}

func (o HaVipArrayOutput) Index(i pulumi.IntInput) HaVipOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HaVip {
		return vs[0].([]*HaVip)[vs[1].(int)]
	}).(HaVipOutput)
}

type HaVipMapOutput struct{ *pulumi.OutputState }

func (HaVipMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HaVip)(nil)).Elem()
}

func (o HaVipMapOutput) ToHaVipMapOutput() HaVipMapOutput {
	return o
}

func (o HaVipMapOutput) ToHaVipMapOutputWithContext(ctx context.Context) HaVipMapOutput {
	return o
}

func (o HaVipMapOutput) MapIndex(k pulumi.StringInput) HaVipOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HaVip {
		return vs[0].(map[string]*HaVip)[vs[1].(string)]
	}).(HaVipOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HaVipInput)(nil)).Elem(), &HaVip{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaVipArrayInput)(nil)).Elem(), HaVipArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaVipMapInput)(nil)).Elem(), HaVipMap{})
	pulumi.RegisterOutputType(HaVipOutput{})
	pulumi.RegisterOutputType(HaVipArrayOutput{})
	pulumi.RegisterOutputType(HaVipMapOutput{})
}
