// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage route table associate
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewRouteTableAssociate(ctx, "foo", &vpc.RouteTableAssociateArgs{
//				RouteTableId: pulumi.String("vtb-274e19skkuhog7fap8u4i8ird"),
//				SubnetId:     pulumi.String("subnet-2744ht7fhjthc7fap8tm10eqg"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Route table associate address can be imported using the route_table_id:subnet_id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vpc/routeTableAssociate:RouteTableAssociate default vtb-2fdzao4h726f45******:subnet-2fdzaou4liw3k5oxruv******
//
// ```
type RouteTableAssociate struct {
	pulumi.CustomResourceState

	// The id of the route table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The id of the subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewRouteTableAssociate registers a new resource with the given unique name, arguments, and options.
func NewRouteTableAssociate(ctx *pulumi.Context,
	name string, args *RouteTableAssociateArgs, opts ...pulumi.ResourceOption) (*RouteTableAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource RouteTableAssociate
	err := ctx.RegisterResource("volcengine:vpc/routeTableAssociate:RouteTableAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteTableAssociate gets an existing RouteTableAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteTableAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteTableAssociateState, opts ...pulumi.ResourceOption) (*RouteTableAssociate, error) {
	var resource RouteTableAssociate
	err := ctx.ReadResource("volcengine:vpc/routeTableAssociate:RouteTableAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteTableAssociate resources.
type routeTableAssociateState struct {
	// The id of the route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// The id of the subnet.
	SubnetId *string `pulumi:"subnetId"`
}

type RouteTableAssociateState struct {
	// The id of the route table.
	RouteTableId pulumi.StringPtrInput
	// The id of the subnet.
	SubnetId pulumi.StringPtrInput
}

func (RouteTableAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableAssociateState)(nil)).Elem()
}

type routeTableAssociateArgs struct {
	// The id of the route table.
	RouteTableId string `pulumi:"routeTableId"`
	// The id of the subnet.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a RouteTableAssociate resource.
type RouteTableAssociateArgs struct {
	// The id of the route table.
	RouteTableId pulumi.StringInput
	// The id of the subnet.
	SubnetId pulumi.StringInput
}

func (RouteTableAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeTableAssociateArgs)(nil)).Elem()
}

type RouteTableAssociateInput interface {
	pulumi.Input

	ToRouteTableAssociateOutput() RouteTableAssociateOutput
	ToRouteTableAssociateOutputWithContext(ctx context.Context) RouteTableAssociateOutput
}

func (*RouteTableAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableAssociate)(nil)).Elem()
}

func (i *RouteTableAssociate) ToRouteTableAssociateOutput() RouteTableAssociateOutput {
	return i.ToRouteTableAssociateOutputWithContext(context.Background())
}

func (i *RouteTableAssociate) ToRouteTableAssociateOutputWithContext(ctx context.Context) RouteTableAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociateOutput)
}

// RouteTableAssociateArrayInput is an input type that accepts RouteTableAssociateArray and RouteTableAssociateArrayOutput values.
// You can construct a concrete instance of `RouteTableAssociateArrayInput` via:
//
//	RouteTableAssociateArray{ RouteTableAssociateArgs{...} }
type RouteTableAssociateArrayInput interface {
	pulumi.Input

	ToRouteTableAssociateArrayOutput() RouteTableAssociateArrayOutput
	ToRouteTableAssociateArrayOutputWithContext(context.Context) RouteTableAssociateArrayOutput
}

type RouteTableAssociateArray []RouteTableAssociateInput

func (RouteTableAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableAssociate)(nil)).Elem()
}

func (i RouteTableAssociateArray) ToRouteTableAssociateArrayOutput() RouteTableAssociateArrayOutput {
	return i.ToRouteTableAssociateArrayOutputWithContext(context.Background())
}

func (i RouteTableAssociateArray) ToRouteTableAssociateArrayOutputWithContext(ctx context.Context) RouteTableAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociateArrayOutput)
}

// RouteTableAssociateMapInput is an input type that accepts RouteTableAssociateMap and RouteTableAssociateMapOutput values.
// You can construct a concrete instance of `RouteTableAssociateMapInput` via:
//
//	RouteTableAssociateMap{ "key": RouteTableAssociateArgs{...} }
type RouteTableAssociateMapInput interface {
	pulumi.Input

	ToRouteTableAssociateMapOutput() RouteTableAssociateMapOutput
	ToRouteTableAssociateMapOutputWithContext(context.Context) RouteTableAssociateMapOutput
}

type RouteTableAssociateMap map[string]RouteTableAssociateInput

func (RouteTableAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableAssociate)(nil)).Elem()
}

func (i RouteTableAssociateMap) ToRouteTableAssociateMapOutput() RouteTableAssociateMapOutput {
	return i.ToRouteTableAssociateMapOutputWithContext(context.Background())
}

func (i RouteTableAssociateMap) ToRouteTableAssociateMapOutputWithContext(ctx context.Context) RouteTableAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteTableAssociateMapOutput)
}

type RouteTableAssociateOutput struct{ *pulumi.OutputState }

func (RouteTableAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteTableAssociate)(nil)).Elem()
}

func (o RouteTableAssociateOutput) ToRouteTableAssociateOutput() RouteTableAssociateOutput {
	return o
}

func (o RouteTableAssociateOutput) ToRouteTableAssociateOutputWithContext(ctx context.Context) RouteTableAssociateOutput {
	return o
}

// The id of the route table.
func (o RouteTableAssociateOutput) RouteTableId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableAssociate) pulumi.StringOutput { return v.RouteTableId }).(pulumi.StringOutput)
}

// The id of the subnet.
func (o RouteTableAssociateOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteTableAssociate) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type RouteTableAssociateArrayOutput struct{ *pulumi.OutputState }

func (RouteTableAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteTableAssociate)(nil)).Elem()
}

func (o RouteTableAssociateArrayOutput) ToRouteTableAssociateArrayOutput() RouteTableAssociateArrayOutput {
	return o
}

func (o RouteTableAssociateArrayOutput) ToRouteTableAssociateArrayOutputWithContext(ctx context.Context) RouteTableAssociateArrayOutput {
	return o
}

func (o RouteTableAssociateArrayOutput) Index(i pulumi.IntInput) RouteTableAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteTableAssociate {
		return vs[0].([]*RouteTableAssociate)[vs[1].(int)]
	}).(RouteTableAssociateOutput)
}

type RouteTableAssociateMapOutput struct{ *pulumi.OutputState }

func (RouteTableAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteTableAssociate)(nil)).Elem()
}

func (o RouteTableAssociateMapOutput) ToRouteTableAssociateMapOutput() RouteTableAssociateMapOutput {
	return o
}

func (o RouteTableAssociateMapOutput) ToRouteTableAssociateMapOutputWithContext(ctx context.Context) RouteTableAssociateMapOutput {
	return o
}

func (o RouteTableAssociateMapOutput) MapIndex(k pulumi.StringInput) RouteTableAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteTableAssociate {
		return vs[0].(map[string]*RouteTableAssociate)[vs[1].(string)]
	}).(RouteTableAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableAssociateInput)(nil)).Elem(), &RouteTableAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableAssociateArrayInput)(nil)).Elem(), RouteTableAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteTableAssociateMapInput)(nil)).Elem(), RouteTableAssociateMap{})
	pulumi.RegisterOutputType(RouteTableAssociateOutput{})
	pulumi.RegisterOutputType(RouteTableAssociateArrayOutput{})
	pulumi.RegisterOutputType(RouteTableAssociateMapOutput{})
}
