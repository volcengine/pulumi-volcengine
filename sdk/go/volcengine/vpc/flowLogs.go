// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of flow logs
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.GetFlowLogs(ctx, &vpc.GetFlowLogsArgs{
//				FlowLogIds: []string{
//					"fl-13g4fqngluhog3n6nu57o****",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.vpc.FlowLogs has been deprecated in favor of volcengine.vpc.getFlowLogs
func FlowLogs(ctx *pulumi.Context, args *FlowLogsArgs, opts ...pulumi.InvokeOption) (*FlowLogsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FlowLogsResult
	err := ctx.Invoke("volcengine:vpc/flowLogs:FlowLogs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking FlowLogs.
type FlowLogsArgs struct {
	// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
	AggregationInterval *int `pulumi:"aggregationInterval"`
	// The description of flow log.
	Description *string `pulumi:"description"`
	// A list of flow log IDs.
	FlowLogIds []string `pulumi:"flowLogIds"`
	// The name of flow log.
	FlowLogName *string `pulumi:"flowLogName"`
	// The ID of log project.
	LogProjectId *string `pulumi:"logProjectId"`
	// The ID of log topic.
	LogTopicId *string `pulumi:"logTopicId"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project name of flow log.
	ProjectName *string `pulumi:"projectName"`
	// The ID of resource.
	ResourceId *string `pulumi:"resourceId"`
	// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
	ResourceType *string `pulumi:"resourceType"`
	// The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []FlowLogsTag `pulumi:"tags"`
	// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
	TrafficType *string `pulumi:"trafficType"`
	// The ID of VPC.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by FlowLogs.
type FlowLogsResult struct {
	// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
	AggregationInterval *int `pulumi:"aggregationInterval"`
	// The description of flow log.
	Description *string  `pulumi:"description"`
	FlowLogIds  []string `pulumi:"flowLogIds"`
	// The name of flow log.
	FlowLogName *string `pulumi:"flowLogName"`
	// The collection of query.
	FlowLogs []FlowLogsFlowLog `pulumi:"flowLogs"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of log project.
	LogProjectId *string `pulumi:"logProjectId"`
	// The ID of log topic.
	LogTopicId *string `pulumi:"logTopicId"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The project name of flow log.
	ProjectName *string `pulumi:"projectName"`
	// The ID of resource.
	ResourceId *string `pulumi:"resourceId"`
	// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
	ResourceType *string `pulumi:"resourceType"`
	// The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []FlowLogsTag `pulumi:"tags"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
	TrafficType *string `pulumi:"trafficType"`
	// The ID of VPC.
	VpcId *string `pulumi:"vpcId"`
}

func FlowLogsOutput(ctx *pulumi.Context, args FlowLogsOutputArgs, opts ...pulumi.InvokeOption) FlowLogsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FlowLogsResult, error) {
			args := v.(FlowLogsArgs)
			r, err := FlowLogs(ctx, &args, opts...)
			var s FlowLogsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(FlowLogsResultOutput)
}

// A collection of arguments for invoking FlowLogs.
type FlowLogsOutputArgs struct {
	// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
	AggregationInterval pulumi.IntPtrInput `pulumi:"aggregationInterval"`
	// The description of flow log.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// A list of flow log IDs.
	FlowLogIds pulumi.StringArrayInput `pulumi:"flowLogIds"`
	// The name of flow log.
	FlowLogName pulumi.StringPtrInput `pulumi:"flowLogName"`
	// The ID of log project.
	LogProjectId pulumi.StringPtrInput `pulumi:"logProjectId"`
	// The ID of log topic.
	LogTopicId pulumi.StringPtrInput `pulumi:"logTopicId"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project name of flow log.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// The ID of resource.
	ResourceId pulumi.StringPtrInput `pulumi:"resourceId"`
	// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
	ResourceType pulumi.StringPtrInput `pulumi:"resourceType"`
	// The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Tags.
	Tags FlowLogsTagArrayInput `pulumi:"tags"`
	// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
	TrafficType pulumi.StringPtrInput `pulumi:"trafficType"`
	// The ID of VPC.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (FlowLogsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowLogsArgs)(nil)).Elem()
}

// A collection of values returned by FlowLogs.
type FlowLogsResultOutput struct{ *pulumi.OutputState }

func (FlowLogsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FlowLogsResult)(nil)).Elem()
}

func (o FlowLogsResultOutput) ToFlowLogsResultOutput() FlowLogsResultOutput {
	return o
}

func (o FlowLogsResultOutput) ToFlowLogsResultOutputWithContext(ctx context.Context) FlowLogsResultOutput {
	return o
}

// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
func (o FlowLogsResultOutput) AggregationInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *int { return v.AggregationInterval }).(pulumi.IntPtrOutput)
}

// The description of flow log.
func (o FlowLogsResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o FlowLogsResultOutput) FlowLogIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FlowLogsResult) []string { return v.FlowLogIds }).(pulumi.StringArrayOutput)
}

// The name of flow log.
func (o FlowLogsResultOutput) FlowLogName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.FlowLogName }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o FlowLogsResultOutput) FlowLogs() FlowLogsFlowLogArrayOutput {
	return o.ApplyT(func(v FlowLogsResult) []FlowLogsFlowLog { return v.FlowLogs }).(FlowLogsFlowLogArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o FlowLogsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FlowLogsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of log project.
func (o FlowLogsResultOutput) LogProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.LogProjectId }).(pulumi.StringPtrOutput)
}

// The ID of log topic.
func (o FlowLogsResultOutput) LogTopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.LogTopicId }).(pulumi.StringPtrOutput)
}

func (o FlowLogsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o FlowLogsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The project name of flow log.
func (o FlowLogsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The ID of resource.
func (o FlowLogsResultOutput) ResourceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.ResourceId }).(pulumi.StringPtrOutput)
}

// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
func (o FlowLogsResultOutput) ResourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.ResourceType }).(pulumi.StringPtrOutput)
}

// The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
func (o FlowLogsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Tags.
func (o FlowLogsResultOutput) Tags() FlowLogsTagArrayOutput {
	return o.ApplyT(func(v FlowLogsResult) []FlowLogsTag { return v.Tags }).(FlowLogsTagArrayOutput)
}

// The total count of query.
func (o FlowLogsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v FlowLogsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
func (o FlowLogsResultOutput) TrafficType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.TrafficType }).(pulumi.StringPtrOutput)
}

// The ID of VPC.
func (o FlowLogsResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FlowLogsResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(FlowLogsResultOutput{})
}
