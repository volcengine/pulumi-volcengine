// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage traffic mirror target
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooSecurityGroup, err := vpc.NewSecurityGroup(ctx, "fooSecurityGroup", &vpc.SecurityGroupArgs{
//				SecurityGroupName: pulumi.String("acc-test-sg"),
//				VpcId:             fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
//				OsType:         pulumi.StringRef("Linux"),
//				Visibility:     pulumi.StringRef("public"),
//				InstanceTypeId: pulumi.StringRef("ecs.g3il.large"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			fooInstance, err := ecs.NewInstance(ctx, "fooInstance", &ecs.InstanceArgs{
//				InstanceName:       pulumi.String("acc-test-ecs"),
//				Description:        pulumi.String("acc-test"),
//				HostName:           pulumi.String("tf-acc-test"),
//				ImageId:            pulumi.String(fooImages.Images[0].ImageId),
//				InstanceType:       pulumi.String("ecs.g3il.large"),
//				Password:           pulumi.String("93f0cb0614Aab12"),
//				InstanceChargeType: pulumi.String("PostPaid"),
//				SystemVolumeType:   pulumi.String("ESSD_PL0"),
//				SystemVolumeSize:   pulumi.Int(40),
//				SubnetId:           fooSubnet.ID(),
//				SecurityGroupIds: pulumi.StringArray{
//					fooSecurityGroup.ID(),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: ecs.InstanceTagArray{
//					&ecs.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooNetworkInterface, err := vpc.NewNetworkInterface(ctx, "fooNetworkInterface", &vpc.NetworkInterfaceArgs{
//				NetworkInterfaceName: pulumi.String("acc-test-eni"),
//				Description:          pulumi.String("acc-test"),
//				SubnetId:             fooSubnet.ID(),
//				SecurityGroupIds: pulumi.StringArray{
//					fooSecurityGroup.ID(),
//				},
//				PrimaryIpAddress:    pulumi.String("172.16.0.253"),
//				PortSecurityEnabled: pulumi.Bool(false),
//				PrivateIpAddresses: pulumi.StringArray{
//					pulumi.String("172.16.0.2"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: vpc.NetworkInterfaceTagArray{
//					&vpc.NetworkInterfaceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooNetworkInterfaceAttach, err := vpc.NewNetworkInterfaceAttach(ctx, "fooNetworkInterfaceAttach", &vpc.NetworkInterfaceAttachArgs{
//				NetworkInterfaceId: fooNetworkInterface.ID(),
//				InstanceId:         fooInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewTrafficMirrorTarget(ctx, "fooTrafficMirrorTarget", &vpc.TrafficMirrorTargetArgs{
//				InstanceType:            pulumi.String("NetworkInterface"),
//				InstanceId:              fooNetworkInterface.ID(),
//				TrafficMirrorTargetName: pulumi.String("acc-test-traffic-mirror-target"),
//				Description:             pulumi.String("acc-test"),
//				ProjectName:             pulumi.String("default"),
//				Tags: vpc.TrafficMirrorTargetTagArray{
//					&vpc.TrafficMirrorTargetTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fooNetworkInterfaceAttach,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TrafficMirrorTarget can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vpc/trafficMirrorTarget:TrafficMirrorTarget default resource_id
// ```
type TrafficMirrorTarget struct {
	pulumi.CustomResourceState

	// The create time of traffic mirror target.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of traffic mirror target.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The instance id of traffic mirror target.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The instance type of traffic mirror target. Valid values: `NetworkInterface`, `ClbInstance`.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// The project name of traffic mirror target.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The status of traffic mirror target.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags.
	Tags TrafficMirrorTargetTagArrayOutput `pulumi:"tags"`
	// The name of traffic mirror target.
	TrafficMirrorTargetName pulumi.StringOutput `pulumi:"trafficMirrorTargetName"`
	// The update time of traffic mirror target.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTrafficMirrorTarget registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorTarget(ctx *pulumi.Context,
	name string, args *TrafficMirrorTargetArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorTarget, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficMirrorTarget
	err := ctx.RegisterResource("volcengine:vpc/trafficMirrorTarget:TrafficMirrorTarget", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorTarget gets an existing TrafficMirrorTarget resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorTarget(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorTargetState, opts ...pulumi.ResourceOption) (*TrafficMirrorTarget, error) {
	var resource TrafficMirrorTarget
	err := ctx.ReadResource("volcengine:vpc/trafficMirrorTarget:TrafficMirrorTarget", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorTarget resources.
type trafficMirrorTargetState struct {
	// The create time of traffic mirror target.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of traffic mirror target.
	Description *string `pulumi:"description"`
	// The instance id of traffic mirror target.
	InstanceId *string `pulumi:"instanceId"`
	// The instance type of traffic mirror target. Valid values: `NetworkInterface`, `ClbInstance`.
	InstanceType *string `pulumi:"instanceType"`
	// The project name of traffic mirror target.
	ProjectName *string `pulumi:"projectName"`
	// The status of traffic mirror target.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []TrafficMirrorTargetTag `pulumi:"tags"`
	// The name of traffic mirror target.
	TrafficMirrorTargetName *string `pulumi:"trafficMirrorTargetName"`
	// The update time of traffic mirror target.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TrafficMirrorTargetState struct {
	// The create time of traffic mirror target.
	CreatedAt pulumi.StringPtrInput
	// The description of traffic mirror target.
	Description pulumi.StringPtrInput
	// The instance id of traffic mirror target.
	InstanceId pulumi.StringPtrInput
	// The instance type of traffic mirror target. Valid values: `NetworkInterface`, `ClbInstance`.
	InstanceType pulumi.StringPtrInput
	// The project name of traffic mirror target.
	ProjectName pulumi.StringPtrInput
	// The status of traffic mirror target.
	Status pulumi.StringPtrInput
	// Tags.
	Tags TrafficMirrorTargetTagArrayInput
	// The name of traffic mirror target.
	TrafficMirrorTargetName pulumi.StringPtrInput
	// The update time of traffic mirror target.
	UpdatedAt pulumi.StringPtrInput
}

func (TrafficMirrorTargetState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorTargetState)(nil)).Elem()
}

type trafficMirrorTargetArgs struct {
	// The description of traffic mirror target.
	Description *string `pulumi:"description"`
	// The instance id of traffic mirror target.
	InstanceId string `pulumi:"instanceId"`
	// The instance type of traffic mirror target. Valid values: `NetworkInterface`, `ClbInstance`.
	InstanceType string `pulumi:"instanceType"`
	// The project name of traffic mirror target.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []TrafficMirrorTargetTag `pulumi:"tags"`
	// The name of traffic mirror target.
	TrafficMirrorTargetName *string `pulumi:"trafficMirrorTargetName"`
}

// The set of arguments for constructing a TrafficMirrorTarget resource.
type TrafficMirrorTargetArgs struct {
	// The description of traffic mirror target.
	Description pulumi.StringPtrInput
	// The instance id of traffic mirror target.
	InstanceId pulumi.StringInput
	// The instance type of traffic mirror target. Valid values: `NetworkInterface`, `ClbInstance`.
	InstanceType pulumi.StringInput
	// The project name of traffic mirror target.
	ProjectName pulumi.StringPtrInput
	// Tags.
	Tags TrafficMirrorTargetTagArrayInput
	// The name of traffic mirror target.
	TrafficMirrorTargetName pulumi.StringPtrInput
}

func (TrafficMirrorTargetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorTargetArgs)(nil)).Elem()
}

type TrafficMirrorTargetInput interface {
	pulumi.Input

	ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput
	ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput
}

func (*TrafficMirrorTarget) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorTarget)(nil)).Elem()
}

func (i *TrafficMirrorTarget) ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput {
	return i.ToTrafficMirrorTargetOutputWithContext(context.Background())
}

func (i *TrafficMirrorTarget) ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorTargetOutput)
}

// TrafficMirrorTargetArrayInput is an input type that accepts TrafficMirrorTargetArray and TrafficMirrorTargetArrayOutput values.
// You can construct a concrete instance of `TrafficMirrorTargetArrayInput` via:
//
//	TrafficMirrorTargetArray{ TrafficMirrorTargetArgs{...} }
type TrafficMirrorTargetArrayInput interface {
	pulumi.Input

	ToTrafficMirrorTargetArrayOutput() TrafficMirrorTargetArrayOutput
	ToTrafficMirrorTargetArrayOutputWithContext(context.Context) TrafficMirrorTargetArrayOutput
}

type TrafficMirrorTargetArray []TrafficMirrorTargetInput

func (TrafficMirrorTargetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorTarget)(nil)).Elem()
}

func (i TrafficMirrorTargetArray) ToTrafficMirrorTargetArrayOutput() TrafficMirrorTargetArrayOutput {
	return i.ToTrafficMirrorTargetArrayOutputWithContext(context.Background())
}

func (i TrafficMirrorTargetArray) ToTrafficMirrorTargetArrayOutputWithContext(ctx context.Context) TrafficMirrorTargetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorTargetArrayOutput)
}

// TrafficMirrorTargetMapInput is an input type that accepts TrafficMirrorTargetMap and TrafficMirrorTargetMapOutput values.
// You can construct a concrete instance of `TrafficMirrorTargetMapInput` via:
//
//	TrafficMirrorTargetMap{ "key": TrafficMirrorTargetArgs{...} }
type TrafficMirrorTargetMapInput interface {
	pulumi.Input

	ToTrafficMirrorTargetMapOutput() TrafficMirrorTargetMapOutput
	ToTrafficMirrorTargetMapOutputWithContext(context.Context) TrafficMirrorTargetMapOutput
}

type TrafficMirrorTargetMap map[string]TrafficMirrorTargetInput

func (TrafficMirrorTargetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorTarget)(nil)).Elem()
}

func (i TrafficMirrorTargetMap) ToTrafficMirrorTargetMapOutput() TrafficMirrorTargetMapOutput {
	return i.ToTrafficMirrorTargetMapOutputWithContext(context.Background())
}

func (i TrafficMirrorTargetMap) ToTrafficMirrorTargetMapOutputWithContext(ctx context.Context) TrafficMirrorTargetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorTargetMapOutput)
}

type TrafficMirrorTargetOutput struct{ *pulumi.OutputState }

func (TrafficMirrorTargetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorTarget)(nil)).Elem()
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetOutput() TrafficMirrorTargetOutput {
	return o
}

func (o TrafficMirrorTargetOutput) ToTrafficMirrorTargetOutputWithContext(ctx context.Context) TrafficMirrorTargetOutput {
	return o
}

// The create time of traffic mirror target.
func (o TrafficMirrorTargetOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of traffic mirror target.
func (o TrafficMirrorTargetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The instance id of traffic mirror target.
func (o TrafficMirrorTargetOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The instance type of traffic mirror target. Valid values: `NetworkInterface`, `ClbInstance`.
func (o TrafficMirrorTargetOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// The project name of traffic mirror target.
func (o TrafficMirrorTargetOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The status of traffic mirror target.
func (o TrafficMirrorTargetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o TrafficMirrorTargetOutput) Tags() TrafficMirrorTargetTagArrayOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) TrafficMirrorTargetTagArrayOutput { return v.Tags }).(TrafficMirrorTargetTagArrayOutput)
}

// The name of traffic mirror target.
func (o TrafficMirrorTargetOutput) TrafficMirrorTargetName() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringOutput { return v.TrafficMirrorTargetName }).(pulumi.StringOutput)
}

// The update time of traffic mirror target.
func (o TrafficMirrorTargetOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorTarget) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TrafficMirrorTargetArrayOutput struct{ *pulumi.OutputState }

func (TrafficMirrorTargetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorTarget)(nil)).Elem()
}

func (o TrafficMirrorTargetArrayOutput) ToTrafficMirrorTargetArrayOutput() TrafficMirrorTargetArrayOutput {
	return o
}

func (o TrafficMirrorTargetArrayOutput) ToTrafficMirrorTargetArrayOutputWithContext(ctx context.Context) TrafficMirrorTargetArrayOutput {
	return o
}

func (o TrafficMirrorTargetArrayOutput) Index(i pulumi.IntInput) TrafficMirrorTargetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrafficMirrorTarget {
		return vs[0].([]*TrafficMirrorTarget)[vs[1].(int)]
	}).(TrafficMirrorTargetOutput)
}

type TrafficMirrorTargetMapOutput struct{ *pulumi.OutputState }

func (TrafficMirrorTargetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorTarget)(nil)).Elem()
}

func (o TrafficMirrorTargetMapOutput) ToTrafficMirrorTargetMapOutput() TrafficMirrorTargetMapOutput {
	return o
}

func (o TrafficMirrorTargetMapOutput) ToTrafficMirrorTargetMapOutputWithContext(ctx context.Context) TrafficMirrorTargetMapOutput {
	return o
}

func (o TrafficMirrorTargetMapOutput) MapIndex(k pulumi.StringInput) TrafficMirrorTargetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrafficMirrorTarget {
		return vs[0].(map[string]*TrafficMirrorTarget)[vs[1].(string)]
	}).(TrafficMirrorTargetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorTargetInput)(nil)).Elem(), &TrafficMirrorTarget{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorTargetArrayInput)(nil)).Elem(), TrafficMirrorTargetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorTargetMapInput)(nil)).Elem(), TrafficMirrorTargetMap{})
	pulumi.RegisterOutputType(TrafficMirrorTargetOutput{})
	pulumi.RegisterOutputType(TrafficMirrorTargetArrayOutput{})
	pulumi.RegisterOutputType(TrafficMirrorTargetMapOutput{})
}
