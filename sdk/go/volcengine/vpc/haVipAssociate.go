// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage ha vip associate
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     *pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooSecurityGroup, err := vpc.NewSecurityGroup(ctx, "fooSecurityGroup", &vpc.SecurityGroupArgs{
//				SecurityGroupName: pulumi.String("acc-test-sg"),
//				VpcId:             fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooNetworkInterface, err := vpc.NewNetworkInterface(ctx, "fooNetworkInterface", &vpc.NetworkInterfaceArgs{
//				NetworkInterfaceName: pulumi.String("acc-test-eni"),
//				Description:          pulumi.String("acc-test"),
//				SubnetId:             fooSubnet.ID(),
//				SecurityGroupIds: pulumi.StringArray{
//					fooSecurityGroup.ID(),
//				},
//				PrimaryIpAddress:    pulumi.String("172.16.0.253"),
//				PortSecurityEnabled: pulumi.Bool(false),
//				PrivateIpAddresses: pulumi.StringArray{
//					pulumi.String("172.16.0.2"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: vpc.NetworkInterfaceTagArray{
//					&vpc.NetworkInterfaceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooHaVip, err := vpc.NewHaVip(ctx, "fooHaVip", &vpc.HaVipArgs{
//				HaVipName:   pulumi.String("acc-test-ha-vip"),
//				Description: pulumi.String("acc-test"),
//				SubnetId:    fooSubnet.ID(),
//				IpAddress:   pulumi.String("172.16.0.5"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewHaVipAssociate(ctx, "fooHaVipAssociate", &vpc.HaVipAssociateArgs{
//				HaVipId:      fooHaVip.ID(),
//				InstanceType: pulumi.String("NetworkInterface"),
//				InstanceId:   fooNetworkInterface.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// HaVipAssociate can be imported using the ha_vip_id:instance_id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vpc/haVipAssociate:HaVipAssociate default havip-2byzv8icq1b7k2dx0eegb****:eni-2d5wv84h7onpc58ozfeeu****
//
// ```
type HaVipAssociate struct {
	pulumi.CustomResourceState

	// The id of the Ha Vip.
	HaVipId pulumi.StringOutput `pulumi:"haVipId"`
	// The id of the associated instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The type of the associated instance. Valid values: `EcsInstance`, `NetworkInterface`.
	InstanceType pulumi.StringPtrOutput `pulumi:"instanceType"`
}

// NewHaVipAssociate registers a new resource with the given unique name, arguments, and options.
func NewHaVipAssociate(ctx *pulumi.Context,
	name string, args *HaVipAssociateArgs, opts ...pulumi.ResourceOption) (*HaVipAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HaVipId == nil {
		return nil, errors.New("invalid value for required argument 'HaVipId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HaVipAssociate
	err := ctx.RegisterResource("volcengine:vpc/haVipAssociate:HaVipAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHaVipAssociate gets an existing HaVipAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHaVipAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HaVipAssociateState, opts ...pulumi.ResourceOption) (*HaVipAssociate, error) {
	var resource HaVipAssociate
	err := ctx.ReadResource("volcengine:vpc/haVipAssociate:HaVipAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HaVipAssociate resources.
type haVipAssociateState struct {
	// The id of the Ha Vip.
	HaVipId *string `pulumi:"haVipId"`
	// The id of the associated instance.
	InstanceId *string `pulumi:"instanceId"`
	// The type of the associated instance. Valid values: `EcsInstance`, `NetworkInterface`.
	InstanceType *string `pulumi:"instanceType"`
}

type HaVipAssociateState struct {
	// The id of the Ha Vip.
	HaVipId pulumi.StringPtrInput
	// The id of the associated instance.
	InstanceId pulumi.StringPtrInput
	// The type of the associated instance. Valid values: `EcsInstance`, `NetworkInterface`.
	InstanceType pulumi.StringPtrInput
}

func (HaVipAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*haVipAssociateState)(nil)).Elem()
}

type haVipAssociateArgs struct {
	// The id of the Ha Vip.
	HaVipId string `pulumi:"haVipId"`
	// The id of the associated instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of the associated instance. Valid values: `EcsInstance`, `NetworkInterface`.
	InstanceType *string `pulumi:"instanceType"`
}

// The set of arguments for constructing a HaVipAssociate resource.
type HaVipAssociateArgs struct {
	// The id of the Ha Vip.
	HaVipId pulumi.StringInput
	// The id of the associated instance.
	InstanceId pulumi.StringInput
	// The type of the associated instance. Valid values: `EcsInstance`, `NetworkInterface`.
	InstanceType pulumi.StringPtrInput
}

func (HaVipAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*haVipAssociateArgs)(nil)).Elem()
}

type HaVipAssociateInput interface {
	pulumi.Input

	ToHaVipAssociateOutput() HaVipAssociateOutput
	ToHaVipAssociateOutputWithContext(ctx context.Context) HaVipAssociateOutput
}

func (*HaVipAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**HaVipAssociate)(nil)).Elem()
}

func (i *HaVipAssociate) ToHaVipAssociateOutput() HaVipAssociateOutput {
	return i.ToHaVipAssociateOutputWithContext(context.Background())
}

func (i *HaVipAssociate) ToHaVipAssociateOutputWithContext(ctx context.Context) HaVipAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVipAssociateOutput)
}

// HaVipAssociateArrayInput is an input type that accepts HaVipAssociateArray and HaVipAssociateArrayOutput values.
// You can construct a concrete instance of `HaVipAssociateArrayInput` via:
//
//	HaVipAssociateArray{ HaVipAssociateArgs{...} }
type HaVipAssociateArrayInput interface {
	pulumi.Input

	ToHaVipAssociateArrayOutput() HaVipAssociateArrayOutput
	ToHaVipAssociateArrayOutputWithContext(context.Context) HaVipAssociateArrayOutput
}

type HaVipAssociateArray []HaVipAssociateInput

func (HaVipAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HaVipAssociate)(nil)).Elem()
}

func (i HaVipAssociateArray) ToHaVipAssociateArrayOutput() HaVipAssociateArrayOutput {
	return i.ToHaVipAssociateArrayOutputWithContext(context.Background())
}

func (i HaVipAssociateArray) ToHaVipAssociateArrayOutputWithContext(ctx context.Context) HaVipAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVipAssociateArrayOutput)
}

// HaVipAssociateMapInput is an input type that accepts HaVipAssociateMap and HaVipAssociateMapOutput values.
// You can construct a concrete instance of `HaVipAssociateMapInput` via:
//
//	HaVipAssociateMap{ "key": HaVipAssociateArgs{...} }
type HaVipAssociateMapInput interface {
	pulumi.Input

	ToHaVipAssociateMapOutput() HaVipAssociateMapOutput
	ToHaVipAssociateMapOutputWithContext(context.Context) HaVipAssociateMapOutput
}

type HaVipAssociateMap map[string]HaVipAssociateInput

func (HaVipAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HaVipAssociate)(nil)).Elem()
}

func (i HaVipAssociateMap) ToHaVipAssociateMapOutput() HaVipAssociateMapOutput {
	return i.ToHaVipAssociateMapOutputWithContext(context.Background())
}

func (i HaVipAssociateMap) ToHaVipAssociateMapOutputWithContext(ctx context.Context) HaVipAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HaVipAssociateMapOutput)
}

type HaVipAssociateOutput struct{ *pulumi.OutputState }

func (HaVipAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HaVipAssociate)(nil)).Elem()
}

func (o HaVipAssociateOutput) ToHaVipAssociateOutput() HaVipAssociateOutput {
	return o
}

func (o HaVipAssociateOutput) ToHaVipAssociateOutputWithContext(ctx context.Context) HaVipAssociateOutput {
	return o
}

// The id of the Ha Vip.
func (o HaVipAssociateOutput) HaVipId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVipAssociate) pulumi.StringOutput { return v.HaVipId }).(pulumi.StringOutput)
}

// The id of the associated instance.
func (o HaVipAssociateOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *HaVipAssociate) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the associated instance. Valid values: `EcsInstance`, `NetworkInterface`.
func (o HaVipAssociateOutput) InstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HaVipAssociate) pulumi.StringPtrOutput { return v.InstanceType }).(pulumi.StringPtrOutput)
}

type HaVipAssociateArrayOutput struct{ *pulumi.OutputState }

func (HaVipAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HaVipAssociate)(nil)).Elem()
}

func (o HaVipAssociateArrayOutput) ToHaVipAssociateArrayOutput() HaVipAssociateArrayOutput {
	return o
}

func (o HaVipAssociateArrayOutput) ToHaVipAssociateArrayOutputWithContext(ctx context.Context) HaVipAssociateArrayOutput {
	return o
}

func (o HaVipAssociateArrayOutput) Index(i pulumi.IntInput) HaVipAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HaVipAssociate {
		return vs[0].([]*HaVipAssociate)[vs[1].(int)]
	}).(HaVipAssociateOutput)
}

type HaVipAssociateMapOutput struct{ *pulumi.OutputState }

func (HaVipAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HaVipAssociate)(nil)).Elem()
}

func (o HaVipAssociateMapOutput) ToHaVipAssociateMapOutput() HaVipAssociateMapOutput {
	return o
}

func (o HaVipAssociateMapOutput) ToHaVipAssociateMapOutputWithContext(ctx context.Context) HaVipAssociateMapOutput {
	return o
}

func (o HaVipAssociateMapOutput) MapIndex(k pulumi.StringInput) HaVipAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HaVipAssociate {
		return vs[0].(map[string]*HaVipAssociate)[vs[1].(string)]
	}).(HaVipAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HaVipAssociateInput)(nil)).Elem(), &HaVipAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaVipAssociateArrayInput)(nil)).Elem(), HaVipAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HaVipAssociateMapInput)(nil)).Elem(), HaVipAssociateMap{})
	pulumi.RegisterOutputType(HaVipAssociateOutput{})
	pulumi.RegisterOutputType(HaVipAssociateArrayOutput{})
	pulumi.RegisterOutputType(HaVipAssociateMapOutput{})
}
