// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage network interface attach
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewNetworkInterfaceAttach(ctx, "foo", &vpc.NetworkInterfaceAttachArgs{
//				InstanceId:         pulumi.String("i-72q20hi6s082wcafdem8"),
//				NetworkInterfaceId: pulumi.String("eni-274ecj646ylts7fap8t6xbba1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Network interface attach can be imported using the network_interface_id:instance_id.
//
// ```sh
//
//	$ pulumi import volcengine:vpc/networkInterfaceAttach:NetworkInterfaceAttach default eni-bp1fg655nh68xyz9***:i-wijfn35c****
//
// ```
type NetworkInterfaceAttach struct {
	pulumi.CustomResourceState

	// The id of the instance to which the ENI is bound.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The id of the ENI.
	NetworkInterfaceId pulumi.StringOutput `pulumi:"networkInterfaceId"`
}

// NewNetworkInterfaceAttach registers a new resource with the given unique name, arguments, and options.
func NewNetworkInterfaceAttach(ctx *pulumi.Context,
	name string, args *NetworkInterfaceAttachArgs, opts ...pulumi.ResourceOption) (*NetworkInterfaceAttach, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.NetworkInterfaceId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkInterfaceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource NetworkInterfaceAttach
	err := ctx.RegisterResource("volcengine:vpc/networkInterfaceAttach:NetworkInterfaceAttach", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkInterfaceAttach gets an existing NetworkInterfaceAttach resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkInterfaceAttach(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkInterfaceAttachState, opts ...pulumi.ResourceOption) (*NetworkInterfaceAttach, error) {
	var resource NetworkInterfaceAttach
	err := ctx.ReadResource("volcengine:vpc/networkInterfaceAttach:NetworkInterfaceAttach", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkInterfaceAttach resources.
type networkInterfaceAttachState struct {
	// The id of the instance to which the ENI is bound.
	InstanceId *string `pulumi:"instanceId"`
	// The id of the ENI.
	NetworkInterfaceId *string `pulumi:"networkInterfaceId"`
}

type NetworkInterfaceAttachState struct {
	// The id of the instance to which the ENI is bound.
	InstanceId pulumi.StringPtrInput
	// The id of the ENI.
	NetworkInterfaceId pulumi.StringPtrInput
}

func (NetworkInterfaceAttachState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceAttachState)(nil)).Elem()
}

type networkInterfaceAttachArgs struct {
	// The id of the instance to which the ENI is bound.
	InstanceId string `pulumi:"instanceId"`
	// The id of the ENI.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
}

// The set of arguments for constructing a NetworkInterfaceAttach resource.
type NetworkInterfaceAttachArgs struct {
	// The id of the instance to which the ENI is bound.
	InstanceId pulumi.StringInput
	// The id of the ENI.
	NetworkInterfaceId pulumi.StringInput
}

func (NetworkInterfaceAttachArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkInterfaceAttachArgs)(nil)).Elem()
}

type NetworkInterfaceAttachInput interface {
	pulumi.Input

	ToNetworkInterfaceAttachOutput() NetworkInterfaceAttachOutput
	ToNetworkInterfaceAttachOutputWithContext(ctx context.Context) NetworkInterfaceAttachOutput
}

func (*NetworkInterfaceAttach) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfaceAttach)(nil)).Elem()
}

func (i *NetworkInterfaceAttach) ToNetworkInterfaceAttachOutput() NetworkInterfaceAttachOutput {
	return i.ToNetworkInterfaceAttachOutputWithContext(context.Background())
}

func (i *NetworkInterfaceAttach) ToNetworkInterfaceAttachOutputWithContext(ctx context.Context) NetworkInterfaceAttachOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceAttachOutput)
}

// NetworkInterfaceAttachArrayInput is an input type that accepts NetworkInterfaceAttachArray and NetworkInterfaceAttachArrayOutput values.
// You can construct a concrete instance of `NetworkInterfaceAttachArrayInput` via:
//
//	NetworkInterfaceAttachArray{ NetworkInterfaceAttachArgs{...} }
type NetworkInterfaceAttachArrayInput interface {
	pulumi.Input

	ToNetworkInterfaceAttachArrayOutput() NetworkInterfaceAttachArrayOutput
	ToNetworkInterfaceAttachArrayOutputWithContext(context.Context) NetworkInterfaceAttachArrayOutput
}

type NetworkInterfaceAttachArray []NetworkInterfaceAttachInput

func (NetworkInterfaceAttachArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterfaceAttach)(nil)).Elem()
}

func (i NetworkInterfaceAttachArray) ToNetworkInterfaceAttachArrayOutput() NetworkInterfaceAttachArrayOutput {
	return i.ToNetworkInterfaceAttachArrayOutputWithContext(context.Background())
}

func (i NetworkInterfaceAttachArray) ToNetworkInterfaceAttachArrayOutputWithContext(ctx context.Context) NetworkInterfaceAttachArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceAttachArrayOutput)
}

// NetworkInterfaceAttachMapInput is an input type that accepts NetworkInterfaceAttachMap and NetworkInterfaceAttachMapOutput values.
// You can construct a concrete instance of `NetworkInterfaceAttachMapInput` via:
//
//	NetworkInterfaceAttachMap{ "key": NetworkInterfaceAttachArgs{...} }
type NetworkInterfaceAttachMapInput interface {
	pulumi.Input

	ToNetworkInterfaceAttachMapOutput() NetworkInterfaceAttachMapOutput
	ToNetworkInterfaceAttachMapOutputWithContext(context.Context) NetworkInterfaceAttachMapOutput
}

type NetworkInterfaceAttachMap map[string]NetworkInterfaceAttachInput

func (NetworkInterfaceAttachMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterfaceAttach)(nil)).Elem()
}

func (i NetworkInterfaceAttachMap) ToNetworkInterfaceAttachMapOutput() NetworkInterfaceAttachMapOutput {
	return i.ToNetworkInterfaceAttachMapOutputWithContext(context.Background())
}

func (i NetworkInterfaceAttachMap) ToNetworkInterfaceAttachMapOutputWithContext(ctx context.Context) NetworkInterfaceAttachMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkInterfaceAttachMapOutput)
}

type NetworkInterfaceAttachOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceAttachOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkInterfaceAttach)(nil)).Elem()
}

func (o NetworkInterfaceAttachOutput) ToNetworkInterfaceAttachOutput() NetworkInterfaceAttachOutput {
	return o
}

func (o NetworkInterfaceAttachOutput) ToNetworkInterfaceAttachOutputWithContext(ctx context.Context) NetworkInterfaceAttachOutput {
	return o
}

// The id of the instance to which the ENI is bound.
func (o NetworkInterfaceAttachOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfaceAttach) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The id of the ENI.
func (o NetworkInterfaceAttachOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *NetworkInterfaceAttach) pulumi.StringOutput { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

type NetworkInterfaceAttachArrayOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceAttachArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkInterfaceAttach)(nil)).Elem()
}

func (o NetworkInterfaceAttachArrayOutput) ToNetworkInterfaceAttachArrayOutput() NetworkInterfaceAttachArrayOutput {
	return o
}

func (o NetworkInterfaceAttachArrayOutput) ToNetworkInterfaceAttachArrayOutputWithContext(ctx context.Context) NetworkInterfaceAttachArrayOutput {
	return o
}

func (o NetworkInterfaceAttachArrayOutput) Index(i pulumi.IntInput) NetworkInterfaceAttachOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NetworkInterfaceAttach {
		return vs[0].([]*NetworkInterfaceAttach)[vs[1].(int)]
	}).(NetworkInterfaceAttachOutput)
}

type NetworkInterfaceAttachMapOutput struct{ *pulumi.OutputState }

func (NetworkInterfaceAttachMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkInterfaceAttach)(nil)).Elem()
}

func (o NetworkInterfaceAttachMapOutput) ToNetworkInterfaceAttachMapOutput() NetworkInterfaceAttachMapOutput {
	return o
}

func (o NetworkInterfaceAttachMapOutput) ToNetworkInterfaceAttachMapOutputWithContext(ctx context.Context) NetworkInterfaceAttachMapOutput {
	return o
}

func (o NetworkInterfaceAttachMapOutput) MapIndex(k pulumi.StringInput) NetworkInterfaceAttachOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NetworkInterfaceAttach {
		return vs[0].(map[string]*NetworkInterfaceAttach)[vs[1].(string)]
	}).(NetworkInterfaceAttachOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceAttachInput)(nil)).Elem(), &NetworkInterfaceAttach{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceAttachArrayInput)(nil)).Elem(), NetworkInterfaceAttachArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NetworkInterfaceAttachMapInput)(nil)).Elem(), NetworkInterfaceAttachMap{})
	pulumi.RegisterOutputType(NetworkInterfaceAttachOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceAttachArrayOutput{})
	pulumi.RegisterOutputType(NetworkInterfaceAttachMapOutput{})
}
