// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vpc prefix list
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpc.NewPrefixList(ctx, "foo", &vpc.PrefixListArgs{
//				Description: pulumi.String("acc test description"),
//				IpVersion:   pulumi.String("IPv4"),
//				MaxEntries:  pulumi.Int(7),
//				PrefixListEntries: vpc.PrefixListPrefixListEntryArray{
//					&vpc.PrefixListPrefixListEntryArgs{
//						Cidr:        pulumi.String("192.168.4.0/28"),
//						Description: pulumi.String("acc-test-1"),
//					},
//					&vpc.PrefixListPrefixListEntryArgs{
//						Cidr:        pulumi.String("192.168.9.0/28"),
//						Description: pulumi.String("acc-test-4"),
//					},
//					&vpc.PrefixListPrefixListEntryArgs{
//						Cidr:        pulumi.String("192.168.8.0/28"),
//						Description: pulumi.String("acc-test-5"),
//					},
//				},
//				PrefixListName: pulumi.String("acc-test-prefix"),
//				Tags: vpc.PrefixListTagArray{
//					&vpc.PrefixListTagArgs{
//						Key:   pulumi.String("tf-key1"),
//						Value: pulumi.String("tf-value1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VpcPrefixList can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vpc/prefixList:PrefixList default resource_id
// ```
type PrefixList struct {
	pulumi.CustomResourceState

	// The description of the prefix list.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// IP version type. Possible values:
	// IPv4 (default): IPv4 type.
	// IPv6: IPv6 type.
	IpVersion pulumi.StringOutput `pulumi:"ipVersion"`
	// Maximum number of entries, which is the maximum number of entries that can be added to the prefix list. The value range is 1 to 200.
	MaxEntries pulumi.IntOutput `pulumi:"maxEntries"`
	// Collection of resources associated with VPC prefix list.
	PrefixListAssociations PrefixListPrefixListAssociationArrayOutput `pulumi:"prefixListAssociations"`
	// Prefix list entry list.
	PrefixListEntries PrefixListPrefixListEntryArrayOutput `pulumi:"prefixListEntries"`
	// The name of the prefix list.
	PrefixListName pulumi.StringOutput `pulumi:"prefixListName"`
	// Tags.
	Tags PrefixListTagArrayOutput `pulumi:"tags"`
}

// NewPrefixList registers a new resource with the given unique name, arguments, and options.
func NewPrefixList(ctx *pulumi.Context,
	name string, args *PrefixListArgs, opts ...pulumi.ResourceOption) (*PrefixList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaxEntries == nil {
		return nil, errors.New("invalid value for required argument 'MaxEntries'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrefixList
	err := ctx.RegisterResource("volcengine:vpc/prefixList:PrefixList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrefixList gets an existing PrefixList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrefixList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrefixListState, opts ...pulumi.ResourceOption) (*PrefixList, error) {
	var resource PrefixList
	err := ctx.ReadResource("volcengine:vpc/prefixList:PrefixList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrefixList resources.
type prefixListState struct {
	// The description of the prefix list.
	Description *string `pulumi:"description"`
	// IP version type. Possible values:
	// IPv4 (default): IPv4 type.
	// IPv6: IPv6 type.
	IpVersion *string `pulumi:"ipVersion"`
	// Maximum number of entries, which is the maximum number of entries that can be added to the prefix list. The value range is 1 to 200.
	MaxEntries *int `pulumi:"maxEntries"`
	// Collection of resources associated with VPC prefix list.
	PrefixListAssociations []PrefixListPrefixListAssociation `pulumi:"prefixListAssociations"`
	// Prefix list entry list.
	PrefixListEntries []PrefixListPrefixListEntry `pulumi:"prefixListEntries"`
	// The name of the prefix list.
	PrefixListName *string `pulumi:"prefixListName"`
	// Tags.
	Tags []PrefixListTag `pulumi:"tags"`
}

type PrefixListState struct {
	// The description of the prefix list.
	Description pulumi.StringPtrInput
	// IP version type. Possible values:
	// IPv4 (default): IPv4 type.
	// IPv6: IPv6 type.
	IpVersion pulumi.StringPtrInput
	// Maximum number of entries, which is the maximum number of entries that can be added to the prefix list. The value range is 1 to 200.
	MaxEntries pulumi.IntPtrInput
	// Collection of resources associated with VPC prefix list.
	PrefixListAssociations PrefixListPrefixListAssociationArrayInput
	// Prefix list entry list.
	PrefixListEntries PrefixListPrefixListEntryArrayInput
	// The name of the prefix list.
	PrefixListName pulumi.StringPtrInput
	// Tags.
	Tags PrefixListTagArrayInput
}

func (PrefixListState) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixListState)(nil)).Elem()
}

type prefixListArgs struct {
	// The description of the prefix list.
	Description *string `pulumi:"description"`
	// IP version type. Possible values:
	// IPv4 (default): IPv4 type.
	// IPv6: IPv6 type.
	IpVersion *string `pulumi:"ipVersion"`
	// Maximum number of entries, which is the maximum number of entries that can be added to the prefix list. The value range is 1 to 200.
	MaxEntries int `pulumi:"maxEntries"`
	// Prefix list entry list.
	PrefixListEntries []PrefixListPrefixListEntry `pulumi:"prefixListEntries"`
	// The name of the prefix list.
	PrefixListName *string `pulumi:"prefixListName"`
	// Tags.
	Tags []PrefixListTag `pulumi:"tags"`
}

// The set of arguments for constructing a PrefixList resource.
type PrefixListArgs struct {
	// The description of the prefix list.
	Description pulumi.StringPtrInput
	// IP version type. Possible values:
	// IPv4 (default): IPv4 type.
	// IPv6: IPv6 type.
	IpVersion pulumi.StringPtrInput
	// Maximum number of entries, which is the maximum number of entries that can be added to the prefix list. The value range is 1 to 200.
	MaxEntries pulumi.IntInput
	// Prefix list entry list.
	PrefixListEntries PrefixListPrefixListEntryArrayInput
	// The name of the prefix list.
	PrefixListName pulumi.StringPtrInput
	// Tags.
	Tags PrefixListTagArrayInput
}

func (PrefixListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prefixListArgs)(nil)).Elem()
}

type PrefixListInput interface {
	pulumi.Input

	ToPrefixListOutput() PrefixListOutput
	ToPrefixListOutputWithContext(ctx context.Context) PrefixListOutput
}

func (*PrefixList) ElementType() reflect.Type {
	return reflect.TypeOf((**PrefixList)(nil)).Elem()
}

func (i *PrefixList) ToPrefixListOutput() PrefixListOutput {
	return i.ToPrefixListOutputWithContext(context.Background())
}

func (i *PrefixList) ToPrefixListOutputWithContext(ctx context.Context) PrefixListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListOutput)
}

// PrefixListArrayInput is an input type that accepts PrefixListArray and PrefixListArrayOutput values.
// You can construct a concrete instance of `PrefixListArrayInput` via:
//
//	PrefixListArray{ PrefixListArgs{...} }
type PrefixListArrayInput interface {
	pulumi.Input

	ToPrefixListArrayOutput() PrefixListArrayOutput
	ToPrefixListArrayOutputWithContext(context.Context) PrefixListArrayOutput
}

type PrefixListArray []PrefixListInput

func (PrefixListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrefixList)(nil)).Elem()
}

func (i PrefixListArray) ToPrefixListArrayOutput() PrefixListArrayOutput {
	return i.ToPrefixListArrayOutputWithContext(context.Background())
}

func (i PrefixListArray) ToPrefixListArrayOutputWithContext(ctx context.Context) PrefixListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListArrayOutput)
}

// PrefixListMapInput is an input type that accepts PrefixListMap and PrefixListMapOutput values.
// You can construct a concrete instance of `PrefixListMapInput` via:
//
//	PrefixListMap{ "key": PrefixListArgs{...} }
type PrefixListMapInput interface {
	pulumi.Input

	ToPrefixListMapOutput() PrefixListMapOutput
	ToPrefixListMapOutputWithContext(context.Context) PrefixListMapOutput
}

type PrefixListMap map[string]PrefixListInput

func (PrefixListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrefixList)(nil)).Elem()
}

func (i PrefixListMap) ToPrefixListMapOutput() PrefixListMapOutput {
	return i.ToPrefixListMapOutputWithContext(context.Background())
}

func (i PrefixListMap) ToPrefixListMapOutputWithContext(ctx context.Context) PrefixListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListMapOutput)
}

type PrefixListOutput struct{ *pulumi.OutputState }

func (PrefixListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrefixList)(nil)).Elem()
}

func (o PrefixListOutput) ToPrefixListOutput() PrefixListOutput {
	return o
}

func (o PrefixListOutput) ToPrefixListOutputWithContext(ctx context.Context) PrefixListOutput {
	return o
}

// The description of the prefix list.
func (o PrefixListOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// IP version type. Possible values:
// IPv4 (default): IPv4 type.
// IPv6: IPv6 type.
func (o PrefixListOutput) IpVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.IpVersion }).(pulumi.StringOutput)
}

// Maximum number of entries, which is the maximum number of entries that can be added to the prefix list. The value range is 1 to 200.
func (o PrefixListOutput) MaxEntries() pulumi.IntOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.IntOutput { return v.MaxEntries }).(pulumi.IntOutput)
}

// Collection of resources associated with VPC prefix list.
func (o PrefixListOutput) PrefixListAssociations() PrefixListPrefixListAssociationArrayOutput {
	return o.ApplyT(func(v *PrefixList) PrefixListPrefixListAssociationArrayOutput { return v.PrefixListAssociations }).(PrefixListPrefixListAssociationArrayOutput)
}

// Prefix list entry list.
func (o PrefixListOutput) PrefixListEntries() PrefixListPrefixListEntryArrayOutput {
	return o.ApplyT(func(v *PrefixList) PrefixListPrefixListEntryArrayOutput { return v.PrefixListEntries }).(PrefixListPrefixListEntryArrayOutput)
}

// The name of the prefix list.
func (o PrefixListOutput) PrefixListName() pulumi.StringOutput {
	return o.ApplyT(func(v *PrefixList) pulumi.StringOutput { return v.PrefixListName }).(pulumi.StringOutput)
}

// Tags.
func (o PrefixListOutput) Tags() PrefixListTagArrayOutput {
	return o.ApplyT(func(v *PrefixList) PrefixListTagArrayOutput { return v.Tags }).(PrefixListTagArrayOutput)
}

type PrefixListArrayOutput struct{ *pulumi.OutputState }

func (PrefixListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrefixList)(nil)).Elem()
}

func (o PrefixListArrayOutput) ToPrefixListArrayOutput() PrefixListArrayOutput {
	return o
}

func (o PrefixListArrayOutput) ToPrefixListArrayOutputWithContext(ctx context.Context) PrefixListArrayOutput {
	return o
}

func (o PrefixListArrayOutput) Index(i pulumi.IntInput) PrefixListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrefixList {
		return vs[0].([]*PrefixList)[vs[1].(int)]
	}).(PrefixListOutput)
}

type PrefixListMapOutput struct{ *pulumi.OutputState }

func (PrefixListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrefixList)(nil)).Elem()
}

func (o PrefixListMapOutput) ToPrefixListMapOutput() PrefixListMapOutput {
	return o
}

func (o PrefixListMapOutput) ToPrefixListMapOutputWithContext(ctx context.Context) PrefixListMapOutput {
	return o
}

func (o PrefixListMapOutput) MapIndex(k pulumi.StringInput) PrefixListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrefixList {
		return vs[0].(map[string]*PrefixList)[vs[1].(string)]
	}).(PrefixListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListInput)(nil)).Elem(), &PrefixList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListArrayInput)(nil)).Elem(), PrefixListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListMapInput)(nil)).Elem(), PrefixListMap{})
	pulumi.RegisterOutputType(PrefixListOutput{})
	pulumi.RegisterOutputType(PrefixListArrayOutput{})
	pulumi.RegisterOutputType(PrefixListMapOutput{})
}
