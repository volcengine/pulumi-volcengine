// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpc

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage traffic mirror filter rule
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := vpc.NewTrafficMirrorFilter(ctx, "foo", &vpc.TrafficMirrorFilterArgs{
//				TrafficMirrorFilterName: pulumi.String("acc-test-traffic-mirror-filter"),
//				Description:             pulumi.String("acc-test"),
//				ProjectName:             pulumi.String("default"),
//				Tags: vpc.TrafficMirrorFilterTagArray{
//					&vpc.TrafficMirrorFilterTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewTrafficMirrorFilterRule(ctx, "foo-ingress", &vpc.TrafficMirrorFilterRuleArgs{
//				TrafficMirrorFilterId: foo.ID(),
//				TrafficDirection:      pulumi.String("ingress"),
//				Description:           pulumi.String("acc-test"),
//				Priority:              pulumi.Int(1),
//				Policy:                pulumi.String("reject"),
//				Protocol:              pulumi.String("all"),
//				SourceCidrBlock:       pulumi.String("10.0.1.0/24"),
//				SourcePortRange:       pulumi.String("-1/-1"),
//				DestinationCidrBlock:  pulumi.String("10.0.0.0/24"),
//				DestinationPortRange:  pulumi.String("-1/-1"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpc.NewTrafficMirrorFilterRule(ctx, "foo-egress", &vpc.TrafficMirrorFilterRuleArgs{
//				TrafficMirrorFilterId: foo.ID(),
//				TrafficDirection:      pulumi.String("egress"),
//				Description:           pulumi.String("acc-test"),
//				Priority:              pulumi.Int(2),
//				Policy:                pulumi.String("reject"),
//				Protocol:              pulumi.String("tcp"),
//				SourceCidrBlock:       pulumi.String("10.0.1.0/24"),
//				SourcePortRange:       pulumi.String("80/80"),
//				DestinationCidrBlock:  pulumi.String("10.0.0.0/24"),
//				DestinationPortRange:  pulumi.String("88/90"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TrafficMirrorFilterRule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vpc/trafficMirrorFilterRule:TrafficMirrorFilterRule default resource_id
// ```
type TrafficMirrorFilterRule struct {
	pulumi.CustomResourceState

	// The create time of traffic mirror filter rule.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of traffic mirror filter rule.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination cidr block of traffic mirror filter rule.
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	DestinationPortRange pulumi.StringOutput `pulumi:"destinationPortRange"`
	// The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
	Policy pulumi.StringOutput `pulumi:"policy"`
	// The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
	Priority pulumi.IntOutput `pulumi:"priority"`
	// The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// The source cidr block of traffic mirror filter rule.
	SourceCidrBlock pulumi.StringOutput `pulumi:"sourceCidrBlock"`
	// The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	SourcePortRange pulumi.StringOutput `pulumi:"sourcePortRange"`
	// The status of traffic mirror filter rule.
	Status pulumi.StringOutput `pulumi:"status"`
	// The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
	TrafficDirection pulumi.StringOutput `pulumi:"trafficDirection"`
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId pulumi.StringOutput `pulumi:"trafficMirrorFilterId"`
	// The ID of traffic mirror filter rule.
	TrafficMirrorFilterRuleId pulumi.StringOutput `pulumi:"trafficMirrorFilterRuleId"`
	// The last update time of traffic mirror filter rule.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
}

// NewTrafficMirrorFilterRule registers a new resource with the given unique name, arguments, and options.
func NewTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, args *TrafficMirrorFilterRuleArgs, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.Policy == nil {
		return nil, errors.New("invalid value for required argument 'Policy'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.SourceCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'SourceCidrBlock'")
	}
	if args.TrafficDirection == nil {
		return nil, errors.New("invalid value for required argument 'TrafficDirection'")
	}
	if args.TrafficMirrorFilterId == nil {
		return nil, errors.New("invalid value for required argument 'TrafficMirrorFilterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TrafficMirrorFilterRule
	err := ctx.RegisterResource("volcengine:vpc/trafficMirrorFilterRule:TrafficMirrorFilterRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficMirrorFilterRule gets an existing TrafficMirrorFilterRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficMirrorFilterRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficMirrorFilterRuleState, opts ...pulumi.ResourceOption) (*TrafficMirrorFilterRule, error) {
	var resource TrafficMirrorFilterRule
	err := ctx.ReadResource("volcengine:vpc/trafficMirrorFilterRule:TrafficMirrorFilterRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficMirrorFilterRule resources.
type trafficMirrorFilterRuleState struct {
	// The create time of traffic mirror filter rule.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of traffic mirror filter rule.
	Description *string `pulumi:"description"`
	// The destination cidr block of traffic mirror filter rule.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	DestinationPortRange *string `pulumi:"destinationPortRange"`
	// The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
	Policy *string `pulumi:"policy"`
	// The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
	Priority *int `pulumi:"priority"`
	// The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
	Protocol *string `pulumi:"protocol"`
	// The source cidr block of traffic mirror filter rule.
	SourceCidrBlock *string `pulumi:"sourceCidrBlock"`
	// The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	SourcePortRange *string `pulumi:"sourcePortRange"`
	// The status of traffic mirror filter rule.
	Status *string `pulumi:"status"`
	// The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
	TrafficDirection *string `pulumi:"trafficDirection"`
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId *string `pulumi:"trafficMirrorFilterId"`
	// The ID of traffic mirror filter rule.
	TrafficMirrorFilterRuleId *string `pulumi:"trafficMirrorFilterRuleId"`
	// The last update time of traffic mirror filter rule.
	UpdatedAt *string `pulumi:"updatedAt"`
}

type TrafficMirrorFilterRuleState struct {
	// The create time of traffic mirror filter rule.
	CreatedAt pulumi.StringPtrInput
	// The description of traffic mirror filter rule.
	Description pulumi.StringPtrInput
	// The destination cidr block of traffic mirror filter rule.
	DestinationCidrBlock pulumi.StringPtrInput
	// The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	DestinationPortRange pulumi.StringPtrInput
	// The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
	Policy pulumi.StringPtrInput
	// The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
	Priority pulumi.IntPtrInput
	// The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
	Protocol pulumi.StringPtrInput
	// The source cidr block of traffic mirror filter rule.
	SourceCidrBlock pulumi.StringPtrInput
	// The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	SourcePortRange pulumi.StringPtrInput
	// The status of traffic mirror filter rule.
	Status pulumi.StringPtrInput
	// The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
	TrafficDirection pulumi.StringPtrInput
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId pulumi.StringPtrInput
	// The ID of traffic mirror filter rule.
	TrafficMirrorFilterRuleId pulumi.StringPtrInput
	// The last update time of traffic mirror filter rule.
	UpdatedAt pulumi.StringPtrInput
}

func (TrafficMirrorFilterRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleState)(nil)).Elem()
}

type trafficMirrorFilterRuleArgs struct {
	// The description of traffic mirror filter rule.
	Description *string `pulumi:"description"`
	// The destination cidr block of traffic mirror filter rule.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	DestinationPortRange *string `pulumi:"destinationPortRange"`
	// The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
	Policy string `pulumi:"policy"`
	// The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
	Priority *int `pulumi:"priority"`
	// The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
	Protocol string `pulumi:"protocol"`
	// The source cidr block of traffic mirror filter rule.
	SourceCidrBlock string `pulumi:"sourceCidrBlock"`
	// The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	SourcePortRange *string `pulumi:"sourcePortRange"`
	// The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
	TrafficDirection string `pulumi:"trafficDirection"`
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId string `pulumi:"trafficMirrorFilterId"`
}

// The set of arguments for constructing a TrafficMirrorFilterRule resource.
type TrafficMirrorFilterRuleArgs struct {
	// The description of traffic mirror filter rule.
	Description pulumi.StringPtrInput
	// The destination cidr block of traffic mirror filter rule.
	DestinationCidrBlock pulumi.StringInput
	// The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	DestinationPortRange pulumi.StringPtrInput
	// The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
	Policy pulumi.StringInput
	// The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
	Priority pulumi.IntPtrInput
	// The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
	Protocol pulumi.StringInput
	// The source cidr block of traffic mirror filter rule.
	SourceCidrBlock pulumi.StringInput
	// The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
	// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
	SourcePortRange pulumi.StringPtrInput
	// The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
	TrafficDirection pulumi.StringInput
	// The ID of traffic mirror filter.
	TrafficMirrorFilterId pulumi.StringInput
}

func (TrafficMirrorFilterRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficMirrorFilterRuleArgs)(nil)).Elem()
}

type TrafficMirrorFilterRuleInput interface {
	pulumi.Input

	ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput
	ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput
}

func (*TrafficMirrorFilterRule) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorFilterRule)(nil)).Elem()
}

func (i *TrafficMirrorFilterRule) ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput {
	return i.ToTrafficMirrorFilterRuleOutputWithContext(context.Background())
}

func (i *TrafficMirrorFilterRule) ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterRuleOutput)
}

// TrafficMirrorFilterRuleArrayInput is an input type that accepts TrafficMirrorFilterRuleArray and TrafficMirrorFilterRuleArrayOutput values.
// You can construct a concrete instance of `TrafficMirrorFilterRuleArrayInput` via:
//
//	TrafficMirrorFilterRuleArray{ TrafficMirrorFilterRuleArgs{...} }
type TrafficMirrorFilterRuleArrayInput interface {
	pulumi.Input

	ToTrafficMirrorFilterRuleArrayOutput() TrafficMirrorFilterRuleArrayOutput
	ToTrafficMirrorFilterRuleArrayOutputWithContext(context.Context) TrafficMirrorFilterRuleArrayOutput
}

type TrafficMirrorFilterRuleArray []TrafficMirrorFilterRuleInput

func (TrafficMirrorFilterRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorFilterRule)(nil)).Elem()
}

func (i TrafficMirrorFilterRuleArray) ToTrafficMirrorFilterRuleArrayOutput() TrafficMirrorFilterRuleArrayOutput {
	return i.ToTrafficMirrorFilterRuleArrayOutputWithContext(context.Background())
}

func (i TrafficMirrorFilterRuleArray) ToTrafficMirrorFilterRuleArrayOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterRuleArrayOutput)
}

// TrafficMirrorFilterRuleMapInput is an input type that accepts TrafficMirrorFilterRuleMap and TrafficMirrorFilterRuleMapOutput values.
// You can construct a concrete instance of `TrafficMirrorFilterRuleMapInput` via:
//
//	TrafficMirrorFilterRuleMap{ "key": TrafficMirrorFilterRuleArgs{...} }
type TrafficMirrorFilterRuleMapInput interface {
	pulumi.Input

	ToTrafficMirrorFilterRuleMapOutput() TrafficMirrorFilterRuleMapOutput
	ToTrafficMirrorFilterRuleMapOutputWithContext(context.Context) TrafficMirrorFilterRuleMapOutput
}

type TrafficMirrorFilterRuleMap map[string]TrafficMirrorFilterRuleInput

func (TrafficMirrorFilterRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorFilterRule)(nil)).Elem()
}

func (i TrafficMirrorFilterRuleMap) ToTrafficMirrorFilterRuleMapOutput() TrafficMirrorFilterRuleMapOutput {
	return i.ToTrafficMirrorFilterRuleMapOutputWithContext(context.Background())
}

func (i TrafficMirrorFilterRuleMap) ToTrafficMirrorFilterRuleMapOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficMirrorFilterRuleMapOutput)
}

type TrafficMirrorFilterRuleOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficMirrorFilterRule)(nil)).Elem()
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutput() TrafficMirrorFilterRuleOutput {
	return o
}

func (o TrafficMirrorFilterRuleOutput) ToTrafficMirrorFilterRuleOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleOutput {
	return o
}

// The create time of traffic mirror filter rule.
func (o TrafficMirrorFilterRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of traffic mirror filter rule.
func (o TrafficMirrorFilterRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination cidr block of traffic mirror filter rule.
func (o TrafficMirrorFilterRuleOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
func (o TrafficMirrorFilterRuleOutput) DestinationPortRange() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.DestinationPortRange }).(pulumi.StringOutput)
}

// The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
func (o TrafficMirrorFilterRuleOutput) Policy() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.Policy }).(pulumi.StringOutput)
}

// The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
func (o TrafficMirrorFilterRuleOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.IntOutput { return v.Priority }).(pulumi.IntOutput)
}

// The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
func (o TrafficMirrorFilterRuleOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.Protocol }).(pulumi.StringOutput)
}

// The source cidr block of traffic mirror filter rule.
func (o TrafficMirrorFilterRuleOutput) SourceCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.SourceCidrBlock }).(pulumi.StringOutput)
}

// The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`.
// When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
func (o TrafficMirrorFilterRuleOutput) SourcePortRange() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.SourcePortRange }).(pulumi.StringOutput)
}

// The status of traffic mirror filter rule.
func (o TrafficMirrorFilterRuleOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
func (o TrafficMirrorFilterRuleOutput) TrafficDirection() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.TrafficDirection }).(pulumi.StringOutput)
}

// The ID of traffic mirror filter.
func (o TrafficMirrorFilterRuleOutput) TrafficMirrorFilterId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.TrafficMirrorFilterId }).(pulumi.StringOutput)
}

// The ID of traffic mirror filter rule.
func (o TrafficMirrorFilterRuleOutput) TrafficMirrorFilterRuleId() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.TrafficMirrorFilterRuleId }).(pulumi.StringOutput)
}

// The last update time of traffic mirror filter rule.
func (o TrafficMirrorFilterRuleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *TrafficMirrorFilterRule) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

type TrafficMirrorFilterRuleArrayOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficMirrorFilterRule)(nil)).Elem()
}

func (o TrafficMirrorFilterRuleArrayOutput) ToTrafficMirrorFilterRuleArrayOutput() TrafficMirrorFilterRuleArrayOutput {
	return o
}

func (o TrafficMirrorFilterRuleArrayOutput) ToTrafficMirrorFilterRuleArrayOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleArrayOutput {
	return o
}

func (o TrafficMirrorFilterRuleArrayOutput) Index(i pulumi.IntInput) TrafficMirrorFilterRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrafficMirrorFilterRule {
		return vs[0].([]*TrafficMirrorFilterRule)[vs[1].(int)]
	}).(TrafficMirrorFilterRuleOutput)
}

type TrafficMirrorFilterRuleMapOutput struct{ *pulumi.OutputState }

func (TrafficMirrorFilterRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficMirrorFilterRule)(nil)).Elem()
}

func (o TrafficMirrorFilterRuleMapOutput) ToTrafficMirrorFilterRuleMapOutput() TrafficMirrorFilterRuleMapOutput {
	return o
}

func (o TrafficMirrorFilterRuleMapOutput) ToTrafficMirrorFilterRuleMapOutputWithContext(ctx context.Context) TrafficMirrorFilterRuleMapOutput {
	return o
}

func (o TrafficMirrorFilterRuleMapOutput) MapIndex(k pulumi.StringInput) TrafficMirrorFilterRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrafficMirrorFilterRule {
		return vs[0].(map[string]*TrafficMirrorFilterRule)[vs[1].(string)]
	}).(TrafficMirrorFilterRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterRuleInput)(nil)).Elem(), &TrafficMirrorFilterRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterRuleArrayInput)(nil)).Elem(), TrafficMirrorFilterRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficMirrorFilterRuleMapInput)(nil)).Elem(), TrafficMirrorFilterRuleMap{})
	pulumi.RegisterOutputType(TrafficMirrorFilterRuleOutput{})
	pulumi.RegisterOutputType(TrafficMirrorFilterRuleArrayOutput{})
	pulumi.RegisterOutputType(TrafficMirrorFilterRuleMapOutput{})
}
