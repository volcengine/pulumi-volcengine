// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package veecp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of veecp edge nodes
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veecp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooEdgeNode, err := veecp.NewEdgeNode(ctx, "fooEdgeNode", &veecp.EdgeNodeArgs{
//				ClusterId:  pulumi.String("ccvmf49t1ndqeechmj8p0"),
//				NodePoolId: pulumi.String("pcvpkdn7ic26jjcjsa20g"),
//				AutoCompleteConfig: &veecp.EdgeNodeAutoCompleteConfigArgs{
//					Enable:    pulumi.Bool(true),
//					DirectAdd: pulumi.Bool(true),
//					DirectAddInstances: veecp.EdgeNodeAutoCompleteConfigDirectAddInstanceArray{
//						&veecp.EdgeNodeAutoCompleteConfigDirectAddInstanceArgs{
//							CloudServerIdentity: pulumi.String("cloudserver-wvvflw9qdns2qrk"),
//							InstanceIdentity:    pulumi.String("veen91912104432151420041"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = veecp.GetEdgeNodesOutput(ctx, veecp.GetEdgeNodesOutputArgs{
//				Ids: pulumi.StringArray{
//					fooEdgeNode.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.veecp.EdgeNodes has been deprecated in favor of volcengine.veecp.getEdgeNodes
func EdgeNodes(ctx *pulumi.Context, args *EdgeNodesArgs, opts ...pulumi.InvokeOption) (*EdgeNodesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv EdgeNodesResult
	err := ctx.Invoke("volcengine:veecp/edgeNodes:EdgeNodes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking EdgeNodes.
type EdgeNodesArgs struct {
	// A list of Cluster IDs.
	ClusterIds []string `pulumi:"clusterIds"`
	// The Create Client Token.
	CreateClientToken *string `pulumi:"createClientToken"`
	// A list of Node IDs.
	Ids []string `pulumi:"ids"`
	// The node ips.
	Ips []string `pulumi:"ips"`
	// The Name of Node.
	Name *string `pulumi:"name"`
	// A Name Regex of Node.
	NameRegex *string `pulumi:"nameRegex"`
	// Whether to query the node management script is needed.
	NeedBootstrapScript *string `pulumi:"needBootstrapScript"`
	// The Node Pool IDs.
	NodePoolIds []string `pulumi:"nodePoolIds"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The Status of filter.
	Statuses []EdgeNodesStatus `pulumi:"statuses"`
	// The Zone IDs.
	ZoneIds []string `pulumi:"zoneIds"`
}

// A collection of values returned by EdgeNodes.
type EdgeNodesResult struct {
	ClusterIds []string `pulumi:"clusterIds"`
	// The create client token of node.
	CreateClientToken *string `pulumi:"createClientToken"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	Ips []string `pulumi:"ips"`
	// The name of Node.
	Name                *string  `pulumi:"name"`
	NameRegex           *string  `pulumi:"nameRegex"`
	NeedBootstrapScript *string  `pulumi:"needBootstrapScript"`
	NodePoolIds         []string `pulumi:"nodePoolIds"`
	// The collection of query.
	Nodes      []EdgeNodesNode   `pulumi:"nodes"`
	OutputFile *string           `pulumi:"outputFile"`
	Statuses   []EdgeNodesStatus `pulumi:"statuses"`
	// The total count of Node query.
	TotalCount int      `pulumi:"totalCount"`
	ZoneIds    []string `pulumi:"zoneIds"`
}

func EdgeNodesOutput(ctx *pulumi.Context, args EdgeNodesOutputArgs, opts ...pulumi.InvokeOption) EdgeNodesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (EdgeNodesResult, error) {
			args := v.(EdgeNodesArgs)
			r, err := EdgeNodes(ctx, &args, opts...)
			var s EdgeNodesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(EdgeNodesResultOutput)
}

// A collection of arguments for invoking EdgeNodes.
type EdgeNodesOutputArgs struct {
	// A list of Cluster IDs.
	ClusterIds pulumi.StringArrayInput `pulumi:"clusterIds"`
	// The Create Client Token.
	CreateClientToken pulumi.StringPtrInput `pulumi:"createClientToken"`
	// A list of Node IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The node ips.
	Ips pulumi.StringArrayInput `pulumi:"ips"`
	// The Name of Node.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A Name Regex of Node.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// Whether to query the node management script is needed.
	NeedBootstrapScript pulumi.StringPtrInput `pulumi:"needBootstrapScript"`
	// The Node Pool IDs.
	NodePoolIds pulumi.StringArrayInput `pulumi:"nodePoolIds"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The Status of filter.
	Statuses EdgeNodesStatusArrayInput `pulumi:"statuses"`
	// The Zone IDs.
	ZoneIds pulumi.StringArrayInput `pulumi:"zoneIds"`
}

func (EdgeNodesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeNodesArgs)(nil)).Elem()
}

// A collection of values returned by EdgeNodes.
type EdgeNodesResultOutput struct{ *pulumi.OutputState }

func (EdgeNodesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EdgeNodesResult)(nil)).Elem()
}

func (o EdgeNodesResultOutput) ToEdgeNodesResultOutput() EdgeNodesResultOutput {
	return o
}

func (o EdgeNodesResultOutput) ToEdgeNodesResultOutputWithContext(ctx context.Context) EdgeNodesResultOutput {
	return o
}

func (o EdgeNodesResultOutput) ClusterIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeNodesResult) []string { return v.ClusterIds }).(pulumi.StringArrayOutput)
}

// The create client token of node.
func (o EdgeNodesResultOutput) CreateClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeNodesResult) *string { return v.CreateClientToken }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o EdgeNodesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EdgeNodesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o EdgeNodesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeNodesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o EdgeNodesResultOutput) Ips() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeNodesResult) []string { return v.Ips }).(pulumi.StringArrayOutput)
}

// The name of Node.
func (o EdgeNodesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeNodesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o EdgeNodesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeNodesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o EdgeNodesResultOutput) NeedBootstrapScript() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeNodesResult) *string { return v.NeedBootstrapScript }).(pulumi.StringPtrOutput)
}

func (o EdgeNodesResultOutput) NodePoolIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeNodesResult) []string { return v.NodePoolIds }).(pulumi.StringArrayOutput)
}

// The collection of query.
func (o EdgeNodesResultOutput) Nodes() EdgeNodesNodeArrayOutput {
	return o.ApplyT(func(v EdgeNodesResult) []EdgeNodesNode { return v.Nodes }).(EdgeNodesNodeArrayOutput)
}

func (o EdgeNodesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EdgeNodesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o EdgeNodesResultOutput) Statuses() EdgeNodesStatusArrayOutput {
	return o.ApplyT(func(v EdgeNodesResult) []EdgeNodesStatus { return v.Statuses }).(EdgeNodesStatusArrayOutput)
}

// The total count of Node query.
func (o EdgeNodesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v EdgeNodesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o EdgeNodesResultOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v EdgeNodesResult) []string { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(EdgeNodesResultOutput{})
}
