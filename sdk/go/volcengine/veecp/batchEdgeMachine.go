// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package veecp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage veecp batch edge machine
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veecp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := veecp.NewBatchEdgeMachine(ctx, "foo", &veecp.BatchEdgeMachineArgs{
//				ClusterId:  pulumi.String("ccvmb0c66t101fnob3dhg"),
//				NodePoolId: pulumi.String("pcvn3alfic26jjcjsa1r0"),
//				TtlHours:   pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VeecpBatchEdgeMachine can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:veecp/batchEdgeMachine:BatchEdgeMachine default resource_id
// ```
type BatchEdgeMachine struct {
	pulumi.CustomResourceState

	// The client token.
	ClientToken pulumi.StringPtrOutput `pulumi:"clientToken"`
	// The cluster id.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Expiration date of the managed script, UTC time point, in seconds. If the expiration time is set, TTLHours will be ignored.
	ExpirationDate pulumi.IntOutput `pulumi:"expirationDate"`
	// The name of the node.
	Name pulumi.StringOutput `pulumi:"name"`
	// The node pool id.
	NodePoolId pulumi.StringOutput `pulumi:"nodePoolId"`
	// Effective hours of the managed script are counted from the creation time.
	TtlHours pulumi.IntOutput `pulumi:"ttlHours"`
}

// NewBatchEdgeMachine registers a new resource with the given unique name, arguments, and options.
func NewBatchEdgeMachine(ctx *pulumi.Context,
	name string, args *BatchEdgeMachineArgs, opts ...pulumi.ResourceOption) (*BatchEdgeMachine, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.NodePoolId == nil {
		return nil, errors.New("invalid value for required argument 'NodePoolId'")
	}
	if args.TtlHours == nil {
		return nil, errors.New("invalid value for required argument 'TtlHours'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BatchEdgeMachine
	err := ctx.RegisterResource("volcengine:veecp/batchEdgeMachine:BatchEdgeMachine", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBatchEdgeMachine gets an existing BatchEdgeMachine resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBatchEdgeMachine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BatchEdgeMachineState, opts ...pulumi.ResourceOption) (*BatchEdgeMachine, error) {
	var resource BatchEdgeMachine
	err := ctx.ReadResource("volcengine:veecp/batchEdgeMachine:BatchEdgeMachine", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BatchEdgeMachine resources.
type batchEdgeMachineState struct {
	// The client token.
	ClientToken *string `pulumi:"clientToken"`
	// The cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// Expiration date of the managed script, UTC time point, in seconds. If the expiration time is set, TTLHours will be ignored.
	ExpirationDate *int `pulumi:"expirationDate"`
	// The name of the node.
	Name *string `pulumi:"name"`
	// The node pool id.
	NodePoolId *string `pulumi:"nodePoolId"`
	// Effective hours of the managed script are counted from the creation time.
	TtlHours *int `pulumi:"ttlHours"`
}

type BatchEdgeMachineState struct {
	// The client token.
	ClientToken pulumi.StringPtrInput
	// The cluster id.
	ClusterId pulumi.StringPtrInput
	// Expiration date of the managed script, UTC time point, in seconds. If the expiration time is set, TTLHours will be ignored.
	ExpirationDate pulumi.IntPtrInput
	// The name of the node.
	Name pulumi.StringPtrInput
	// The node pool id.
	NodePoolId pulumi.StringPtrInput
	// Effective hours of the managed script are counted from the creation time.
	TtlHours pulumi.IntPtrInput
}

func (BatchEdgeMachineState) ElementType() reflect.Type {
	return reflect.TypeOf((*batchEdgeMachineState)(nil)).Elem()
}

type batchEdgeMachineArgs struct {
	// The client token.
	ClientToken *string `pulumi:"clientToken"`
	// The cluster id.
	ClusterId string `pulumi:"clusterId"`
	// Expiration date of the managed script, UTC time point, in seconds. If the expiration time is set, TTLHours will be ignored.
	ExpirationDate *int `pulumi:"expirationDate"`
	// The name of the node.
	Name *string `pulumi:"name"`
	// The node pool id.
	NodePoolId string `pulumi:"nodePoolId"`
	// Effective hours of the managed script are counted from the creation time.
	TtlHours int `pulumi:"ttlHours"`
}

// The set of arguments for constructing a BatchEdgeMachine resource.
type BatchEdgeMachineArgs struct {
	// The client token.
	ClientToken pulumi.StringPtrInput
	// The cluster id.
	ClusterId pulumi.StringInput
	// Expiration date of the managed script, UTC time point, in seconds. If the expiration time is set, TTLHours will be ignored.
	ExpirationDate pulumi.IntPtrInput
	// The name of the node.
	Name pulumi.StringPtrInput
	// The node pool id.
	NodePoolId pulumi.StringInput
	// Effective hours of the managed script are counted from the creation time.
	TtlHours pulumi.IntInput
}

func (BatchEdgeMachineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*batchEdgeMachineArgs)(nil)).Elem()
}

type BatchEdgeMachineInput interface {
	pulumi.Input

	ToBatchEdgeMachineOutput() BatchEdgeMachineOutput
	ToBatchEdgeMachineOutputWithContext(ctx context.Context) BatchEdgeMachineOutput
}

func (*BatchEdgeMachine) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEdgeMachine)(nil)).Elem()
}

func (i *BatchEdgeMachine) ToBatchEdgeMachineOutput() BatchEdgeMachineOutput {
	return i.ToBatchEdgeMachineOutputWithContext(context.Background())
}

func (i *BatchEdgeMachine) ToBatchEdgeMachineOutputWithContext(ctx context.Context) BatchEdgeMachineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEdgeMachineOutput)
}

// BatchEdgeMachineArrayInput is an input type that accepts BatchEdgeMachineArray and BatchEdgeMachineArrayOutput values.
// You can construct a concrete instance of `BatchEdgeMachineArrayInput` via:
//
//	BatchEdgeMachineArray{ BatchEdgeMachineArgs{...} }
type BatchEdgeMachineArrayInput interface {
	pulumi.Input

	ToBatchEdgeMachineArrayOutput() BatchEdgeMachineArrayOutput
	ToBatchEdgeMachineArrayOutputWithContext(context.Context) BatchEdgeMachineArrayOutput
}

type BatchEdgeMachineArray []BatchEdgeMachineInput

func (BatchEdgeMachineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BatchEdgeMachine)(nil)).Elem()
}

func (i BatchEdgeMachineArray) ToBatchEdgeMachineArrayOutput() BatchEdgeMachineArrayOutput {
	return i.ToBatchEdgeMachineArrayOutputWithContext(context.Background())
}

func (i BatchEdgeMachineArray) ToBatchEdgeMachineArrayOutputWithContext(ctx context.Context) BatchEdgeMachineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEdgeMachineArrayOutput)
}

// BatchEdgeMachineMapInput is an input type that accepts BatchEdgeMachineMap and BatchEdgeMachineMapOutput values.
// You can construct a concrete instance of `BatchEdgeMachineMapInput` via:
//
//	BatchEdgeMachineMap{ "key": BatchEdgeMachineArgs{...} }
type BatchEdgeMachineMapInput interface {
	pulumi.Input

	ToBatchEdgeMachineMapOutput() BatchEdgeMachineMapOutput
	ToBatchEdgeMachineMapOutputWithContext(context.Context) BatchEdgeMachineMapOutput
}

type BatchEdgeMachineMap map[string]BatchEdgeMachineInput

func (BatchEdgeMachineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BatchEdgeMachine)(nil)).Elem()
}

func (i BatchEdgeMachineMap) ToBatchEdgeMachineMapOutput() BatchEdgeMachineMapOutput {
	return i.ToBatchEdgeMachineMapOutputWithContext(context.Background())
}

func (i BatchEdgeMachineMap) ToBatchEdgeMachineMapOutputWithContext(ctx context.Context) BatchEdgeMachineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BatchEdgeMachineMapOutput)
}

type BatchEdgeMachineOutput struct{ *pulumi.OutputState }

func (BatchEdgeMachineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BatchEdgeMachine)(nil)).Elem()
}

func (o BatchEdgeMachineOutput) ToBatchEdgeMachineOutput() BatchEdgeMachineOutput {
	return o
}

func (o BatchEdgeMachineOutput) ToBatchEdgeMachineOutputWithContext(ctx context.Context) BatchEdgeMachineOutput {
	return o
}

// The client token.
func (o BatchEdgeMachineOutput) ClientToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BatchEdgeMachine) pulumi.StringPtrOutput { return v.ClientToken }).(pulumi.StringPtrOutput)
}

// The cluster id.
func (o BatchEdgeMachineOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *BatchEdgeMachine) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Expiration date of the managed script, UTC time point, in seconds. If the expiration time is set, TTLHours will be ignored.
func (o BatchEdgeMachineOutput) ExpirationDate() pulumi.IntOutput {
	return o.ApplyT(func(v *BatchEdgeMachine) pulumi.IntOutput { return v.ExpirationDate }).(pulumi.IntOutput)
}

// The name of the node.
func (o BatchEdgeMachineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BatchEdgeMachine) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The node pool id.
func (o BatchEdgeMachineOutput) NodePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *BatchEdgeMachine) pulumi.StringOutput { return v.NodePoolId }).(pulumi.StringOutput)
}

// Effective hours of the managed script are counted from the creation time.
func (o BatchEdgeMachineOutput) TtlHours() pulumi.IntOutput {
	return o.ApplyT(func(v *BatchEdgeMachine) pulumi.IntOutput { return v.TtlHours }).(pulumi.IntOutput)
}

type BatchEdgeMachineArrayOutput struct{ *pulumi.OutputState }

func (BatchEdgeMachineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BatchEdgeMachine)(nil)).Elem()
}

func (o BatchEdgeMachineArrayOutput) ToBatchEdgeMachineArrayOutput() BatchEdgeMachineArrayOutput {
	return o
}

func (o BatchEdgeMachineArrayOutput) ToBatchEdgeMachineArrayOutputWithContext(ctx context.Context) BatchEdgeMachineArrayOutput {
	return o
}

func (o BatchEdgeMachineArrayOutput) Index(i pulumi.IntInput) BatchEdgeMachineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BatchEdgeMachine {
		return vs[0].([]*BatchEdgeMachine)[vs[1].(int)]
	}).(BatchEdgeMachineOutput)
}

type BatchEdgeMachineMapOutput struct{ *pulumi.OutputState }

func (BatchEdgeMachineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BatchEdgeMachine)(nil)).Elem()
}

func (o BatchEdgeMachineMapOutput) ToBatchEdgeMachineMapOutput() BatchEdgeMachineMapOutput {
	return o
}

func (o BatchEdgeMachineMapOutput) ToBatchEdgeMachineMapOutputWithContext(ctx context.Context) BatchEdgeMachineMapOutput {
	return o
}

func (o BatchEdgeMachineMapOutput) MapIndex(k pulumi.StringInput) BatchEdgeMachineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BatchEdgeMachine {
		return vs[0].(map[string]*BatchEdgeMachine)[vs[1].(string)]
	}).(BatchEdgeMachineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BatchEdgeMachineInput)(nil)).Elem(), &BatchEdgeMachine{})
	pulumi.RegisterInputType(reflect.TypeOf((*BatchEdgeMachineArrayInput)(nil)).Elem(), BatchEdgeMachineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BatchEdgeMachineMapInput)(nil)).Elem(), BatchEdgeMachineMap{})
	pulumi.RegisterOutputType(BatchEdgeMachineOutput{})
	pulumi.RegisterOutputType(BatchEdgeMachineArrayOutput{})
	pulumi.RegisterOutputType(BatchEdgeMachineMapOutput{})
}
