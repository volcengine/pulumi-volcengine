// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package veecp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage veecp edge node
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/veecp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := veecp.NewEdgeNode(ctx, "foo", &veecp.EdgeNodeArgs{
//				AutoCompleteConfig: &veecp.EdgeNodeAutoCompleteConfigArgs{
//					DirectAdd: pulumi.Bool(true),
//					DirectAddInstances: veecp.EdgeNodeAutoCompleteConfigDirectAddInstanceArray{
//						&veecp.EdgeNodeAutoCompleteConfigDirectAddInstanceArgs{
//							CloudServerIdentity: pulumi.String("cloudserver-wvvflw9qdns2qrk"),
//							InstanceIdentity:    pulumi.String("veen91912104432151420041"),
//						},
//					},
//					Enable: pulumi.Bool(true),
//				},
//				ClusterId:  pulumi.String("ccvmf49t1ndqeechmj8p0"),
//				NodePoolId: pulumi.String("pcvpkdn7ic26jjcjsa20g"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VeecpNode can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:veecp/edgeNode:EdgeNode default resource_id
// ```
type EdgeNode struct {
	pulumi.CustomResourceState

	// Machine information to be managed.
	AutoCompleteConfig EdgeNodeAutoCompleteConfigOutput `pulumi:"autoCompleteConfig"`
	// The client token.
	ClientToken pulumi.StringOutput `pulumi:"clientToken"`
	// The cluster id.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The name of node.
	Name pulumi.StringOutput `pulumi:"name"`
	// The node pool id.
	NodePoolId pulumi.StringOutput `pulumi:"nodePoolId"`
}

// NewEdgeNode registers a new resource with the given unique name, arguments, and options.
func NewEdgeNode(ctx *pulumi.Context,
	name string, args *EdgeNodeArgs, opts ...pulumi.ResourceOption) (*EdgeNode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoCompleteConfig == nil {
		return nil, errors.New("invalid value for required argument 'AutoCompleteConfig'")
	}
	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.NodePoolId == nil {
		return nil, errors.New("invalid value for required argument 'NodePoolId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EdgeNode
	err := ctx.RegisterResource("volcengine:veecp/edgeNode:EdgeNode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEdgeNode gets an existing EdgeNode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEdgeNode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EdgeNodeState, opts ...pulumi.ResourceOption) (*EdgeNode, error) {
	var resource EdgeNode
	err := ctx.ReadResource("volcengine:veecp/edgeNode:EdgeNode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EdgeNode resources.
type edgeNodeState struct {
	// Machine information to be managed.
	AutoCompleteConfig *EdgeNodeAutoCompleteConfig `pulumi:"autoCompleteConfig"`
	// The client token.
	ClientToken *string `pulumi:"clientToken"`
	// The cluster id.
	ClusterId *string `pulumi:"clusterId"`
	// The name of node.
	Name *string `pulumi:"name"`
	// The node pool id.
	NodePoolId *string `pulumi:"nodePoolId"`
}

type EdgeNodeState struct {
	// Machine information to be managed.
	AutoCompleteConfig EdgeNodeAutoCompleteConfigPtrInput
	// The client token.
	ClientToken pulumi.StringPtrInput
	// The cluster id.
	ClusterId pulumi.StringPtrInput
	// The name of node.
	Name pulumi.StringPtrInput
	// The node pool id.
	NodePoolId pulumi.StringPtrInput
}

func (EdgeNodeState) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeNodeState)(nil)).Elem()
}

type edgeNodeArgs struct {
	// Machine information to be managed.
	AutoCompleteConfig EdgeNodeAutoCompleteConfig `pulumi:"autoCompleteConfig"`
	// The client token.
	ClientToken *string `pulumi:"clientToken"`
	// The cluster id.
	ClusterId string `pulumi:"clusterId"`
	// The name of node.
	Name *string `pulumi:"name"`
	// The node pool id.
	NodePoolId string `pulumi:"nodePoolId"`
}

// The set of arguments for constructing a EdgeNode resource.
type EdgeNodeArgs struct {
	// Machine information to be managed.
	AutoCompleteConfig EdgeNodeAutoCompleteConfigInput
	// The client token.
	ClientToken pulumi.StringPtrInput
	// The cluster id.
	ClusterId pulumi.StringInput
	// The name of node.
	Name pulumi.StringPtrInput
	// The node pool id.
	NodePoolId pulumi.StringInput
}

func (EdgeNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*edgeNodeArgs)(nil)).Elem()
}

type EdgeNodeInput interface {
	pulumi.Input

	ToEdgeNodeOutput() EdgeNodeOutput
	ToEdgeNodeOutputWithContext(ctx context.Context) EdgeNodeOutput
}

func (*EdgeNode) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeNode)(nil)).Elem()
}

func (i *EdgeNode) ToEdgeNodeOutput() EdgeNodeOutput {
	return i.ToEdgeNodeOutputWithContext(context.Background())
}

func (i *EdgeNode) ToEdgeNodeOutputWithContext(ctx context.Context) EdgeNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeNodeOutput)
}

// EdgeNodeArrayInput is an input type that accepts EdgeNodeArray and EdgeNodeArrayOutput values.
// You can construct a concrete instance of `EdgeNodeArrayInput` via:
//
//	EdgeNodeArray{ EdgeNodeArgs{...} }
type EdgeNodeArrayInput interface {
	pulumi.Input

	ToEdgeNodeArrayOutput() EdgeNodeArrayOutput
	ToEdgeNodeArrayOutputWithContext(context.Context) EdgeNodeArrayOutput
}

type EdgeNodeArray []EdgeNodeInput

func (EdgeNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeNode)(nil)).Elem()
}

func (i EdgeNodeArray) ToEdgeNodeArrayOutput() EdgeNodeArrayOutput {
	return i.ToEdgeNodeArrayOutputWithContext(context.Background())
}

func (i EdgeNodeArray) ToEdgeNodeArrayOutputWithContext(ctx context.Context) EdgeNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeNodeArrayOutput)
}

// EdgeNodeMapInput is an input type that accepts EdgeNodeMap and EdgeNodeMapOutput values.
// You can construct a concrete instance of `EdgeNodeMapInput` via:
//
//	EdgeNodeMap{ "key": EdgeNodeArgs{...} }
type EdgeNodeMapInput interface {
	pulumi.Input

	ToEdgeNodeMapOutput() EdgeNodeMapOutput
	ToEdgeNodeMapOutputWithContext(context.Context) EdgeNodeMapOutput
}

type EdgeNodeMap map[string]EdgeNodeInput

func (EdgeNodeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeNode)(nil)).Elem()
}

func (i EdgeNodeMap) ToEdgeNodeMapOutput() EdgeNodeMapOutput {
	return i.ToEdgeNodeMapOutputWithContext(context.Background())
}

func (i EdgeNodeMap) ToEdgeNodeMapOutputWithContext(ctx context.Context) EdgeNodeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EdgeNodeMapOutput)
}

type EdgeNodeOutput struct{ *pulumi.OutputState }

func (EdgeNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EdgeNode)(nil)).Elem()
}

func (o EdgeNodeOutput) ToEdgeNodeOutput() EdgeNodeOutput {
	return o
}

func (o EdgeNodeOutput) ToEdgeNodeOutputWithContext(ctx context.Context) EdgeNodeOutput {
	return o
}

// Machine information to be managed.
func (o EdgeNodeOutput) AutoCompleteConfig() EdgeNodeAutoCompleteConfigOutput {
	return o.ApplyT(func(v *EdgeNode) EdgeNodeAutoCompleteConfigOutput { return v.AutoCompleteConfig }).(EdgeNodeAutoCompleteConfigOutput)
}

// The client token.
func (o EdgeNodeOutput) ClientToken() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeNode) pulumi.StringOutput { return v.ClientToken }).(pulumi.StringOutput)
}

// The cluster id.
func (o EdgeNodeOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeNode) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of node.
func (o EdgeNodeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeNode) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The node pool id.
func (o EdgeNodeOutput) NodePoolId() pulumi.StringOutput {
	return o.ApplyT(func(v *EdgeNode) pulumi.StringOutput { return v.NodePoolId }).(pulumi.StringOutput)
}

type EdgeNodeArrayOutput struct{ *pulumi.OutputState }

func (EdgeNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EdgeNode)(nil)).Elem()
}

func (o EdgeNodeArrayOutput) ToEdgeNodeArrayOutput() EdgeNodeArrayOutput {
	return o
}

func (o EdgeNodeArrayOutput) ToEdgeNodeArrayOutputWithContext(ctx context.Context) EdgeNodeArrayOutput {
	return o
}

func (o EdgeNodeArrayOutput) Index(i pulumi.IntInput) EdgeNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EdgeNode {
		return vs[0].([]*EdgeNode)[vs[1].(int)]
	}).(EdgeNodeOutput)
}

type EdgeNodeMapOutput struct{ *pulumi.OutputState }

func (EdgeNodeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EdgeNode)(nil)).Elem()
}

func (o EdgeNodeMapOutput) ToEdgeNodeMapOutput() EdgeNodeMapOutput {
	return o
}

func (o EdgeNodeMapOutput) ToEdgeNodeMapOutputWithContext(ctx context.Context) EdgeNodeMapOutput {
	return o
}

func (o EdgeNodeMapOutput) MapIndex(k pulumi.StringInput) EdgeNodeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EdgeNode {
		return vs[0].(map[string]*EdgeNode)[vs[1].(string)]
	}).(EdgeNodeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeNodeInput)(nil)).Elem(), &EdgeNode{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeNodeArrayInput)(nil)).Elem(), EdgeNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EdgeNodeMapInput)(nil)).Elem(), EdgeNodeMap{})
	pulumi.RegisterOutputType(EdgeNodeOutput{})
	pulumi.RegisterOutputType(EdgeNodeArrayOutput{})
	pulumi.RegisterOutputType(EdgeNodeMapOutput{})
}
