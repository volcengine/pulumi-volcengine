// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVolume, err := ebs.NewVolume(ctx, "fooVolume", &ebs.VolumeArgs{
//				VolumeName:       pulumi.String("terraform-test"),
//				ZoneId:           pulumi.String("cn-xx-a"),
//				VolumeType:       pulumi.String("ESSD_PL0"),
//				Kind:             pulumi.String("data"),
//				Size:             pulumi.Int(40),
//				VolumeChargeType: pulumi.String("PostPaid"),
//				ProjectName:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ebs.NewVolumeAttach(ctx, "fooVolumeAttach", &ebs.VolumeAttachArgs{
//				VolumeId:   fooVolume.ID(),
//				InstanceId: pulumi.String("i-yc8pfhbafwijutv6s1fv"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ebs.NewVolume(ctx, "foo2", &ebs.VolumeArgs{
//				VolumeName:       pulumi.String("terraform-test3"),
//				ZoneId:           pulumi.String("cn-beijing-b"),
//				VolumeType:       pulumi.String("ESSD_PL0"),
//				Kind:             pulumi.String("data"),
//				Size:             pulumi.Int(40),
//				VolumeChargeType: pulumi.String("PrePaid"),
//				InstanceId:       pulumi.String("i-yc8pfhbafwijutv6s1fv"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Volume can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:ebs/volume:Volume default vol-mizl7m1kqccg5smt1bdpijuj
//
// ```
type Volume struct {
	pulumi.CustomResourceState

	// Creation time of Volume.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Delete Volume with Attached Instance.
	DeleteWithInstance pulumi.BoolOutput `pulumi:"deleteWithInstance"`
	// The description of the Volume.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the system administrator to apply for a whitelist.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The kind of Volume, the value is `data`.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The ProjectName of the Volume.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// The size of Volume.
	Size pulumi.IntOutput `pulumi:"size"`
	// Status of Volume.
	Status pulumi.StringOutput `pulumi:"status"`
	// Status of Trade.
	TradeStatus pulumi.IntOutput `pulumi:"tradeStatus"`
	// The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Cannot convert `PrePaid` volume to `PostPaid`.Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.
	VolumeChargeType pulumi.StringPtrOutput `pulumi:"volumeChargeType"`
	// The name of Volume.
	VolumeName pulumi.StringOutput `pulumi:"volumeName"`
	// The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
	// The id of the Zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOption) (*Volume, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Kind == nil {
		return nil, errors.New("invalid value for required argument 'Kind'")
	}
	if args.Size == nil {
		return nil, errors.New("invalid value for required argument 'Size'")
	}
	if args.VolumeName == nil {
		return nil, errors.New("invalid value for required argument 'VolumeName'")
	}
	if args.VolumeType == nil {
		return nil, errors.New("invalid value for required argument 'VolumeType'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Volume
	err := ctx.RegisterResource("volcengine:ebs/volume:Volume", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeState, opts ...pulumi.ResourceOption) (*Volume, error) {
	var resource Volume
	err := ctx.ReadResource("volcengine:ebs/volume:Volume", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Volume resources.
type volumeState struct {
	// Creation time of Volume.
	CreatedAt *string `pulumi:"createdAt"`
	// Delete Volume with Attached Instance.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// The description of the Volume.
	Description *string `pulumi:"description"`
	// The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the system administrator to apply for a whitelist.
	InstanceId *string `pulumi:"instanceId"`
	// The kind of Volume, the value is `data`.
	Kind *string `pulumi:"kind"`
	// The ProjectName of the Volume.
	ProjectName *string `pulumi:"projectName"`
	// The size of Volume.
	Size *int `pulumi:"size"`
	// Status of Volume.
	Status *string `pulumi:"status"`
	// Status of Trade.
	TradeStatus *int `pulumi:"tradeStatus"`
	// The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Cannot convert `PrePaid` volume to `PostPaid`.Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.
	VolumeChargeType *string `pulumi:"volumeChargeType"`
	// The name of Volume.
	VolumeName *string `pulumi:"volumeName"`
	// The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
	VolumeType *string `pulumi:"volumeType"`
	// The id of the Zone.
	ZoneId *string `pulumi:"zoneId"`
}

type VolumeState struct {
	// Creation time of Volume.
	CreatedAt pulumi.StringPtrInput
	// Delete Volume with Attached Instance.
	DeleteWithInstance pulumi.BoolPtrInput
	// The description of the Volume.
	Description pulumi.StringPtrInput
	// The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the system administrator to apply for a whitelist.
	InstanceId pulumi.StringPtrInput
	// The kind of Volume, the value is `data`.
	Kind pulumi.StringPtrInput
	// The ProjectName of the Volume.
	ProjectName pulumi.StringPtrInput
	// The size of Volume.
	Size pulumi.IntPtrInput
	// Status of Volume.
	Status pulumi.StringPtrInput
	// Status of Trade.
	TradeStatus pulumi.IntPtrInput
	// The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Cannot convert `PrePaid` volume to `PostPaid`.Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.
	VolumeChargeType pulumi.StringPtrInput
	// The name of Volume.
	VolumeName pulumi.StringPtrInput
	// The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
	VolumeType pulumi.StringPtrInput
	// The id of the Zone.
	ZoneId pulumi.StringPtrInput
}

func (VolumeState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeState)(nil)).Elem()
}

type volumeArgs struct {
	// Delete Volume with Attached Instance.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// The description of the Volume.
	Description *string `pulumi:"description"`
	// The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the system administrator to apply for a whitelist.
	InstanceId *string `pulumi:"instanceId"`
	// The kind of Volume, the value is `data`.
	Kind string `pulumi:"kind"`
	// The ProjectName of the Volume.
	ProjectName *string `pulumi:"projectName"`
	// The size of Volume.
	Size int `pulumi:"size"`
	// The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Cannot convert `PrePaid` volume to `PostPaid`.Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.
	VolumeChargeType *string `pulumi:"volumeChargeType"`
	// The name of Volume.
	VolumeName string `pulumi:"volumeName"`
	// The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
	VolumeType string `pulumi:"volumeType"`
	// The id of the Zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	// Delete Volume with Attached Instance.
	DeleteWithInstance pulumi.BoolPtrInput
	// The description of the Volume.
	Description pulumi.StringPtrInput
	// The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the system administrator to apply for a whitelist.
	InstanceId pulumi.StringPtrInput
	// The kind of Volume, the value is `data`.
	Kind pulumi.StringInput
	// The ProjectName of the Volume.
	ProjectName pulumi.StringPtrInput
	// The size of Volume.
	Size pulumi.IntInput
	// The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Cannot convert `PrePaid` volume to `PostPaid`.Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.
	VolumeChargeType pulumi.StringPtrInput
	// The name of Volume.
	VolumeName pulumi.StringInput
	// The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
	VolumeType pulumi.StringInput
	// The id of the Zone.
	ZoneId pulumi.StringInput
}

func (VolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeArgs)(nil)).Elem()
}

type VolumeInput interface {
	pulumi.Input

	ToVolumeOutput() VolumeOutput
	ToVolumeOutputWithContext(ctx context.Context) VolumeOutput
}

func (*Volume) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (i *Volume) ToVolumeOutput() VolumeOutput {
	return i.ToVolumeOutputWithContext(context.Background())
}

func (i *Volume) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeOutput)
}

// VolumeArrayInput is an input type that accepts VolumeArray and VolumeArrayOutput values.
// You can construct a concrete instance of `VolumeArrayInput` via:
//
//	VolumeArray{ VolumeArgs{...} }
type VolumeArrayInput interface {
	pulumi.Input

	ToVolumeArrayOutput() VolumeArrayOutput
	ToVolumeArrayOutputWithContext(context.Context) VolumeArrayOutput
}

type VolumeArray []VolumeInput

func (VolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (i VolumeArray) ToVolumeArrayOutput() VolumeArrayOutput {
	return i.ToVolumeArrayOutputWithContext(context.Background())
}

func (i VolumeArray) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeArrayOutput)
}

// VolumeMapInput is an input type that accepts VolumeMap and VolumeMapOutput values.
// You can construct a concrete instance of `VolumeMapInput` via:
//
//	VolumeMap{ "key": VolumeArgs{...} }
type VolumeMapInput interface {
	pulumi.Input

	ToVolumeMapOutput() VolumeMapOutput
	ToVolumeMapOutputWithContext(context.Context) VolumeMapOutput
}

type VolumeMap map[string]VolumeInput

func (VolumeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (i VolumeMap) ToVolumeMapOutput() VolumeMapOutput {
	return i.ToVolumeMapOutputWithContext(context.Background())
}

func (i VolumeMap) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeMapOutput)
}

type VolumeOutput struct{ *pulumi.OutputState }

func (VolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Volume)(nil)).Elem()
}

func (o VolumeOutput) ToVolumeOutput() VolumeOutput {
	return o
}

func (o VolumeOutput) ToVolumeOutputWithContext(ctx context.Context) VolumeOutput {
	return o
}

// Creation time of Volume.
func (o VolumeOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Delete Volume with Attached Instance.
func (o VolumeOutput) DeleteWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v *Volume) pulumi.BoolOutput { return v.DeleteWithInstance }).(pulumi.BoolOutput)
}

// The description of the Volume.
func (o VolumeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the system administrator to apply for a whitelist.
func (o VolumeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The kind of Volume, the value is `data`.
func (o VolumeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// The ProjectName of the Volume.
func (o VolumeOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The size of Volume.
func (o VolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// Status of Volume.
func (o VolumeOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Status of Trade.
func (o VolumeOutput) TradeStatus() pulumi.IntOutput {
	return o.ApplyT(func(v *Volume) pulumi.IntOutput { return v.TradeStatus }).(pulumi.IntOutput)
}

// The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Cannot convert `PrePaid` volume to `PostPaid`.Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.
func (o VolumeOutput) VolumeChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringPtrOutput { return v.VolumeChargeType }).(pulumi.StringPtrOutput)
}

// The name of Volume.
func (o VolumeOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.VolumeName }).(pulumi.StringOutput)
}

// The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
func (o VolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

// The id of the Zone.
func (o VolumeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Volume) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type VolumeArrayOutput struct{ *pulumi.OutputState }

func (VolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Volume)(nil)).Elem()
}

func (o VolumeArrayOutput) ToVolumeArrayOutput() VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) ToVolumeArrayOutputWithContext(ctx context.Context) VolumeArrayOutput {
	return o
}

func (o VolumeArrayOutput) Index(i pulumi.IntInput) VolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].([]*Volume)[vs[1].(int)]
	}).(VolumeOutput)
}

type VolumeMapOutput struct{ *pulumi.OutputState }

func (VolumeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Volume)(nil)).Elem()
}

func (o VolumeMapOutput) ToVolumeMapOutput() VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) ToVolumeMapOutputWithContext(ctx context.Context) VolumeMapOutput {
	return o
}

func (o VolumeMapOutput) MapIndex(k pulumi.StringInput) VolumeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Volume {
		return vs[0].(map[string]*Volume)[vs[1].(string)]
	}).(VolumeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeInput)(nil)).Elem(), &Volume{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeArrayInput)(nil)).Elem(), VolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeMapInput)(nil)).Elem(), VolumeMap{})
	pulumi.RegisterOutputType(VolumeOutput{})
	pulumi.RegisterOutputType(VolumeArrayOutput{})
	pulumi.RegisterOutputType(VolumeMapOutput{})
}
