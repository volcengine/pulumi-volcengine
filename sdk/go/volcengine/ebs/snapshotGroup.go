// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage ebs snapshot group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooSecurityGroup, err := vpc.NewSecurityGroup(ctx, "fooSecurityGroup", &vpc.SecurityGroupArgs{
//				SecurityGroupName: pulumi.String("acc-test-security-group"),
//				VpcId:             fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooImages, err := ecs.Images(ctx, &ecs.ImagesArgs{
//				OsType:         pulumi.StringRef("Linux"),
//				Visibility:     pulumi.StringRef("public"),
//				InstanceTypeId: pulumi.StringRef("ecs.g3il.large"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			fooInstance, err := ecs.NewInstance(ctx, "fooInstance", &ecs.InstanceArgs{
//				InstanceName:       pulumi.String("acc-test-ecs"),
//				Description:        pulumi.String("acc-test"),
//				HostName:           pulumi.String("tf-acc-test"),
//				ImageId:            pulumi.String(fooImages.Images[0].ImageId),
//				InstanceType:       pulumi.String("ecs.g3il.large"),
//				Password:           pulumi.String("93f0cb0614Aab12"),
//				InstanceChargeType: pulumi.String("PostPaid"),
//				SystemVolumeType:   pulumi.String("ESSD_PL0"),
//				SystemVolumeSize:   pulumi.Int(40),
//				SubnetId:           fooSubnet.ID(),
//				SecurityGroupIds: pulumi.StringArray{
//					fooSecurityGroup.ID(),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: ecs.InstanceTagArray{
//					&ecs.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooVolume, err := ebs.NewVolume(ctx, "fooVolume", &ebs.VolumeArgs{
//				VolumeName:       pulumi.String("acc-test-volume"),
//				VolumeType:       pulumi.String("ESSD_PL0"),
//				Description:      pulumi.String("acc-test"),
//				Kind:             pulumi.String("data"),
//				Size:             pulumi.Int(500),
//				ZoneId:           pulumi.String(fooZones.Zones[0].Id),
//				VolumeChargeType: pulumi.String("PostPaid"),
//				ProjectName:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			fooVolumeAttach, err := ebs.NewVolumeAttach(ctx, "fooVolumeAttach", &ebs.VolumeAttachArgs{
//				InstanceId: fooInstance.ID(),
//				VolumeId:   fooVolume.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ebs.NewSnapshotGroup(ctx, "fooSnapshotGroup", &ebs.SnapshotGroupArgs{
//				VolumeIds: pulumi.StringArray{
//					fooInstance.SystemVolumeId,
//					fooVolume.ID(),
//				},
//				InstanceId:  fooInstance.ID(),
//				Description: pulumi.String("acc-test"),
//				ProjectName: pulumi.String("default"),
//				Tags: ebs.SnapshotGroupTagArray{
//					&ebs.SnapshotGroupTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fooVolumeAttach,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EbsSnapshotGroup can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:ebs/snapshotGroup:SnapshotGroup default resource_id
// ```
type SnapshotGroup struct {
	pulumi.CustomResourceState

	// The creation time of the snapshot group.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The instance id of the snapshot group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The image id of the snapshot group.
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// The instance id of the snapshot group.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The name of the snapshot group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project name of the snapshot group.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The status of the snapshot group.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags.
	Tags SnapshotGroupTagArrayOutput `pulumi:"tags"`
	// The volume id of the snapshot group. The status of the volume must be `attached`.If multiple volumes are specified, they need to be attached to the same ECS instance.
	VolumeIds pulumi.StringArrayOutput `pulumi:"volumeIds"`
}

// NewSnapshotGroup registers a new resource with the given unique name, arguments, and options.
func NewSnapshotGroup(ctx *pulumi.Context,
	name string, args *SnapshotGroupArgs, opts ...pulumi.ResourceOption) (*SnapshotGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VolumeIds == nil {
		return nil, errors.New("invalid value for required argument 'VolumeIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnapshotGroup
	err := ctx.RegisterResource("volcengine:ebs/snapshotGroup:SnapshotGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshotGroup gets an existing SnapshotGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshotGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotGroupState, opts ...pulumi.ResourceOption) (*SnapshotGroup, error) {
	var resource SnapshotGroup
	err := ctx.ReadResource("volcengine:ebs/snapshotGroup:SnapshotGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnapshotGroup resources.
type snapshotGroupState struct {
	// The creation time of the snapshot group.
	CreationTime *string `pulumi:"creationTime"`
	// The instance id of the snapshot group.
	Description *string `pulumi:"description"`
	// The image id of the snapshot group.
	ImageId *string `pulumi:"imageId"`
	// The instance id of the snapshot group.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the snapshot group.
	Name *string `pulumi:"name"`
	// The project name of the snapshot group.
	ProjectName *string `pulumi:"projectName"`
	// The status of the snapshot group.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []SnapshotGroupTag `pulumi:"tags"`
	// The volume id of the snapshot group. The status of the volume must be `attached`.If multiple volumes are specified, they need to be attached to the same ECS instance.
	VolumeIds []string `pulumi:"volumeIds"`
}

type SnapshotGroupState struct {
	// The creation time of the snapshot group.
	CreationTime pulumi.StringPtrInput
	// The instance id of the snapshot group.
	Description pulumi.StringPtrInput
	// The image id of the snapshot group.
	ImageId pulumi.StringPtrInput
	// The instance id of the snapshot group.
	InstanceId pulumi.StringPtrInput
	// The name of the snapshot group.
	Name pulumi.StringPtrInput
	// The project name of the snapshot group.
	ProjectName pulumi.StringPtrInput
	// The status of the snapshot group.
	Status pulumi.StringPtrInput
	// Tags.
	Tags SnapshotGroupTagArrayInput
	// The volume id of the snapshot group. The status of the volume must be `attached`.If multiple volumes are specified, they need to be attached to the same ECS instance.
	VolumeIds pulumi.StringArrayInput
}

func (SnapshotGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotGroupState)(nil)).Elem()
}

type snapshotGroupArgs struct {
	// The instance id of the snapshot group.
	Description *string `pulumi:"description"`
	// The instance id of the snapshot group.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the snapshot group.
	Name *string `pulumi:"name"`
	// The project name of the snapshot group.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []SnapshotGroupTag `pulumi:"tags"`
	// The volume id of the snapshot group. The status of the volume must be `attached`.If multiple volumes are specified, they need to be attached to the same ECS instance.
	VolumeIds []string `pulumi:"volumeIds"`
}

// The set of arguments for constructing a SnapshotGroup resource.
type SnapshotGroupArgs struct {
	// The instance id of the snapshot group.
	Description pulumi.StringPtrInput
	// The instance id of the snapshot group.
	InstanceId pulumi.StringPtrInput
	// The name of the snapshot group.
	Name pulumi.StringPtrInput
	// The project name of the snapshot group.
	ProjectName pulumi.StringPtrInput
	// Tags.
	Tags SnapshotGroupTagArrayInput
	// The volume id of the snapshot group. The status of the volume must be `attached`.If multiple volumes are specified, they need to be attached to the same ECS instance.
	VolumeIds pulumi.StringArrayInput
}

func (SnapshotGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotGroupArgs)(nil)).Elem()
}

type SnapshotGroupInput interface {
	pulumi.Input

	ToSnapshotGroupOutput() SnapshotGroupOutput
	ToSnapshotGroupOutputWithContext(ctx context.Context) SnapshotGroupOutput
}

func (*SnapshotGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotGroup)(nil)).Elem()
}

func (i *SnapshotGroup) ToSnapshotGroupOutput() SnapshotGroupOutput {
	return i.ToSnapshotGroupOutputWithContext(context.Background())
}

func (i *SnapshotGroup) ToSnapshotGroupOutputWithContext(ctx context.Context) SnapshotGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotGroupOutput)
}

// SnapshotGroupArrayInput is an input type that accepts SnapshotGroupArray and SnapshotGroupArrayOutput values.
// You can construct a concrete instance of `SnapshotGroupArrayInput` via:
//
//	SnapshotGroupArray{ SnapshotGroupArgs{...} }
type SnapshotGroupArrayInput interface {
	pulumi.Input

	ToSnapshotGroupArrayOutput() SnapshotGroupArrayOutput
	ToSnapshotGroupArrayOutputWithContext(context.Context) SnapshotGroupArrayOutput
}

type SnapshotGroupArray []SnapshotGroupInput

func (SnapshotGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotGroup)(nil)).Elem()
}

func (i SnapshotGroupArray) ToSnapshotGroupArrayOutput() SnapshotGroupArrayOutput {
	return i.ToSnapshotGroupArrayOutputWithContext(context.Background())
}

func (i SnapshotGroupArray) ToSnapshotGroupArrayOutputWithContext(ctx context.Context) SnapshotGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotGroupArrayOutput)
}

// SnapshotGroupMapInput is an input type that accepts SnapshotGroupMap and SnapshotGroupMapOutput values.
// You can construct a concrete instance of `SnapshotGroupMapInput` via:
//
//	SnapshotGroupMap{ "key": SnapshotGroupArgs{...} }
type SnapshotGroupMapInput interface {
	pulumi.Input

	ToSnapshotGroupMapOutput() SnapshotGroupMapOutput
	ToSnapshotGroupMapOutputWithContext(context.Context) SnapshotGroupMapOutput
}

type SnapshotGroupMap map[string]SnapshotGroupInput

func (SnapshotGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotGroup)(nil)).Elem()
}

func (i SnapshotGroupMap) ToSnapshotGroupMapOutput() SnapshotGroupMapOutput {
	return i.ToSnapshotGroupMapOutputWithContext(context.Background())
}

func (i SnapshotGroupMap) ToSnapshotGroupMapOutputWithContext(ctx context.Context) SnapshotGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotGroupMapOutput)
}

type SnapshotGroupOutput struct{ *pulumi.OutputState }

func (SnapshotGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnapshotGroup)(nil)).Elem()
}

func (o SnapshotGroupOutput) ToSnapshotGroupOutput() SnapshotGroupOutput {
	return o
}

func (o SnapshotGroupOutput) ToSnapshotGroupOutputWithContext(ctx context.Context) SnapshotGroupOutput {
	return o
}

// The creation time of the snapshot group.
func (o SnapshotGroupOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotGroup) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The instance id of the snapshot group.
func (o SnapshotGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnapshotGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The image id of the snapshot group.
func (o SnapshotGroupOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotGroup) pulumi.StringOutput { return v.ImageId }).(pulumi.StringOutput)
}

// The instance id of the snapshot group.
func (o SnapshotGroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotGroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the snapshot group.
func (o SnapshotGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project name of the snapshot group.
func (o SnapshotGroupOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotGroup) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The status of the snapshot group.
func (o SnapshotGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SnapshotGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o SnapshotGroupOutput) Tags() SnapshotGroupTagArrayOutput {
	return o.ApplyT(func(v *SnapshotGroup) SnapshotGroupTagArrayOutput { return v.Tags }).(SnapshotGroupTagArrayOutput)
}

// The volume id of the snapshot group. The status of the volume must be `attached`.If multiple volumes are specified, they need to be attached to the same ECS instance.
func (o SnapshotGroupOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SnapshotGroup) pulumi.StringArrayOutput { return v.VolumeIds }).(pulumi.StringArrayOutput)
}

type SnapshotGroupArrayOutput struct{ *pulumi.OutputState }

func (SnapshotGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnapshotGroup)(nil)).Elem()
}

func (o SnapshotGroupArrayOutput) ToSnapshotGroupArrayOutput() SnapshotGroupArrayOutput {
	return o
}

func (o SnapshotGroupArrayOutput) ToSnapshotGroupArrayOutputWithContext(ctx context.Context) SnapshotGroupArrayOutput {
	return o
}

func (o SnapshotGroupArrayOutput) Index(i pulumi.IntInput) SnapshotGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnapshotGroup {
		return vs[0].([]*SnapshotGroup)[vs[1].(int)]
	}).(SnapshotGroupOutput)
}

type SnapshotGroupMapOutput struct{ *pulumi.OutputState }

func (SnapshotGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnapshotGroup)(nil)).Elem()
}

func (o SnapshotGroupMapOutput) ToSnapshotGroupMapOutput() SnapshotGroupMapOutput {
	return o
}

func (o SnapshotGroupMapOutput) ToSnapshotGroupMapOutputWithContext(ctx context.Context) SnapshotGroupMapOutput {
	return o
}

func (o SnapshotGroupMapOutput) MapIndex(k pulumi.StringInput) SnapshotGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnapshotGroup {
		return vs[0].(map[string]*SnapshotGroup)[vs[1].(string)]
	}).(SnapshotGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotGroupInput)(nil)).Elem(), &SnapshotGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotGroupArrayInput)(nil)).Elem(), SnapshotGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotGroupMapInput)(nil)).Elem(), SnapshotGroupMap{})
	pulumi.RegisterOutputType(SnapshotGroupOutput{})
	pulumi.RegisterOutputType(SnapshotGroupArrayOutput{})
	pulumi.RegisterOutputType(SnapshotGroupMapOutput{})
}
