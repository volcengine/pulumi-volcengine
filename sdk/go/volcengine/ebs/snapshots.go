// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ebs snapshots
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := ecs.Zones(ctx, nil, nil);
// if err != nil {
// return err
// }
// fooVolume, err := ebs.NewVolume(ctx, "fooVolume", &ebs.VolumeArgs{
// VolumeName: pulumi.String("acc-test-volume"),
// VolumeType: pulumi.String("ESSD_PL0"),
// Description: pulumi.String("acc-test"),
// Kind: pulumi.String("data"),
// Size: pulumi.Int(500),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// VolumeChargeType: pulumi.String("PostPaid"),
// ProjectName: pulumi.String("default"),
// })
// if err != nil {
// return err
// }
// var fooSnapshot []*ebs.Snapshot
//
//	for index := 0; index < 2; index++ {
//	    key0 := index
//	    _ := index
//
// __res, err := ebs.NewSnapshot(ctx, fmt.Sprintf("fooSnapshot-%v", key0), &ebs.SnapshotArgs{
// VolumeId: fooVolume.ID(),
// SnapshotName: pulumi.String("acc-test-snapshot"),
// Description: pulumi.String("acc-test"),
// RetentionDays: pulumi.Int(3),
// ProjectName: pulumi.String("default"),
// Tags: ebs.SnapshotTagArray{
// &ebs.SnapshotTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooSnapshot = append(fooSnapshot, __res)
// }
// _ = ebs.SnapshotsOutput(ctx, ebs.SnapshotsOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:ebs-snapshots:Snapshots.pp:28,9-26),
// }, nil);
// return nil
// })
// }
// ```
func Snapshots(ctx *pulumi.Context, args *SnapshotsArgs, opts ...pulumi.InvokeOption) (*SnapshotsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SnapshotsResult
	err := ctx.Invoke("volcengine:ebs/snapshots:Snapshots", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Snapshots.
type SnapshotsArgs struct {
	// A list of snapshot IDs.
	Ids []string `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project name of snapshot.
	ProjectName *string `pulumi:"projectName"`
	// A list of snapshot status.
	SnapshotStatuses []string `pulumi:"snapshotStatuses"`
	// Tags.
	Tags []SnapshotsTag `pulumi:"tags"`
	// The zone id of snapshot.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by Snapshots.
type SnapshotsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// The project name of the snapshot.
	ProjectName      *string  `pulumi:"projectName"`
	SnapshotStatuses []string `pulumi:"snapshotStatuses"`
	// The collection of query.
	Snapshots []SnapshotsSnapshot `pulumi:"snapshots"`
	// Tags.
	Tags []SnapshotsTag `pulumi:"tags"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The zone id of the snapshot.
	ZoneId *string `pulumi:"zoneId"`
}

func SnapshotsOutput(ctx *pulumi.Context, args SnapshotsOutputArgs, opts ...pulumi.InvokeOption) SnapshotsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (SnapshotsResult, error) {
			args := v.(SnapshotsArgs)
			r, err := Snapshots(ctx, &args, opts...)
			var s SnapshotsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(SnapshotsResultOutput)
}

// A collection of arguments for invoking Snapshots.
type SnapshotsOutputArgs struct {
	// A list of snapshot IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project name of snapshot.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// A list of snapshot status.
	SnapshotStatuses pulumi.StringArrayInput `pulumi:"snapshotStatuses"`
	// Tags.
	Tags SnapshotsTagArrayInput `pulumi:"tags"`
	// The zone id of snapshot.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (SnapshotsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotsArgs)(nil)).Elem()
}

// A collection of values returned by Snapshots.
type SnapshotsResultOutput struct{ *pulumi.OutputState }

func (SnapshotsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnapshotsResult)(nil)).Elem()
}

func (o SnapshotsResultOutput) ToSnapshotsResultOutput() SnapshotsResultOutput {
	return o
}

func (o SnapshotsResultOutput) ToSnapshotsResultOutputWithContext(ctx context.Context) SnapshotsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o SnapshotsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SnapshotsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o SnapshotsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SnapshotsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o SnapshotsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o SnapshotsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The project name of the snapshot.
func (o SnapshotsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

func (o SnapshotsResultOutput) SnapshotStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SnapshotsResult) []string { return v.SnapshotStatuses }).(pulumi.StringArrayOutput)
}

// The collection of query.
func (o SnapshotsResultOutput) Snapshots() SnapshotsSnapshotArrayOutput {
	return o.ApplyT(func(v SnapshotsResult) []SnapshotsSnapshot { return v.Snapshots }).(SnapshotsSnapshotArrayOutput)
}

// Tags.
func (o SnapshotsResultOutput) Tags() SnapshotsTagArrayOutput {
	return o.ApplyT(func(v SnapshotsResult) []SnapshotsTag { return v.Tags }).(SnapshotsTagArrayOutput)
}

// The total count of query.
func (o SnapshotsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v SnapshotsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The zone id of the snapshot.
func (o SnapshotsResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnapshotsResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SnapshotsResultOutput{})
}
