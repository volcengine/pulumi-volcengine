// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage ebs snapshot
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVolume, err := ebs.NewVolume(ctx, "fooVolume", &ebs.VolumeArgs{
//				VolumeName:       pulumi.String("acc-test-volume"),
//				VolumeType:       pulumi.String("ESSD_PL0"),
//				Description:      pulumi.String("acc-test"),
//				Kind:             pulumi.String("data"),
//				Size:             pulumi.Int(500),
//				ZoneId:           pulumi.String(fooZones.Zones[0].Id),
//				VolumeChargeType: pulumi.String("PostPaid"),
//				ProjectName:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = ebs.NewSnapshot(ctx, "fooSnapshot", &ebs.SnapshotArgs{
//				VolumeId:      fooVolume.ID(),
//				SnapshotName:  pulumi.String("acc-test-snapshot"),
//				Description:   pulumi.String("acc-test"),
//				RetentionDays: pulumi.Int(3),
//				ProjectName:   pulumi.String("default"),
//				Tags: ebs.SnapshotTagArray{
//					&ebs.SnapshotTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EbsSnapshot can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:ebs/snapshot:Snapshot default resource_id
// ```
type Snapshot struct {
	pulumi.CustomResourceState

	// The creation time of the snapshot.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of the snapshot.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The project name of the snapshot.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The retention days of the snapshot. Valid values: 1~65536. Not specifying this field means permanently preserving the snapshot.When modifying this field, the retention days only supports extension and not shortening. The value range is N+1~65536, where N is the retention days set during snapshot creation.
	RetentionDays pulumi.IntOutput `pulumi:"retentionDays"`
	// The name of the snapshot.
	SnapshotName pulumi.StringOutput `pulumi:"snapshotName"`
	// The type of the snapshot.
	SnapshotType pulumi.StringOutput `pulumi:"snapshotType"`
	// The status of the snapshot.
	Status pulumi.StringOutput `pulumi:"status"`
	// Tags.
	Tags SnapshotTagArrayOutput `pulumi:"tags"`
	// The volume id to create snapshot.
	VolumeId pulumi.StringOutput `pulumi:"volumeId"`
	// The volume kind of the snapshot.
	VolumeKind pulumi.StringOutput `pulumi:"volumeKind"`
	// The volume name of the snapshot.
	VolumeName pulumi.StringOutput `pulumi:"volumeName"`
	// The volume size of the snapshot.
	VolumeSize pulumi.IntOutput `pulumi:"volumeSize"`
	// The volume status of the snapshot.
	VolumeStatus pulumi.StringOutput `pulumi:"volumeStatus"`
	// The volume type of the snapshot.
	VolumeType pulumi.StringOutput `pulumi:"volumeType"`
	// The zone id of the snapshot.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewSnapshot registers a new resource with the given unique name, arguments, and options.
func NewSnapshot(ctx *pulumi.Context,
	name string, args *SnapshotArgs, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SnapshotName == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotName'")
	}
	if args.VolumeId == nil {
		return nil, errors.New("invalid value for required argument 'VolumeId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Snapshot
	err := ctx.RegisterResource("volcengine:ebs/snapshot:Snapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnapshot gets an existing Snapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnapshotState, opts ...pulumi.ResourceOption) (*Snapshot, error) {
	var resource Snapshot
	err := ctx.ReadResource("volcengine:ebs/snapshot:Snapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Snapshot resources.
type snapshotState struct {
	// The creation time of the snapshot.
	CreationTime *string `pulumi:"creationTime"`
	// The description of the snapshot.
	Description *string `pulumi:"description"`
	// The project name of the snapshot.
	ProjectName *string `pulumi:"projectName"`
	// The retention days of the snapshot. Valid values: 1~65536. Not specifying this field means permanently preserving the snapshot.When modifying this field, the retention days only supports extension and not shortening. The value range is N+1~65536, where N is the retention days set during snapshot creation.
	RetentionDays *int `pulumi:"retentionDays"`
	// The name of the snapshot.
	SnapshotName *string `pulumi:"snapshotName"`
	// The type of the snapshot.
	SnapshotType *string `pulumi:"snapshotType"`
	// The status of the snapshot.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []SnapshotTag `pulumi:"tags"`
	// The volume id to create snapshot.
	VolumeId *string `pulumi:"volumeId"`
	// The volume kind of the snapshot.
	VolumeKind *string `pulumi:"volumeKind"`
	// The volume name of the snapshot.
	VolumeName *string `pulumi:"volumeName"`
	// The volume size of the snapshot.
	VolumeSize *int `pulumi:"volumeSize"`
	// The volume status of the snapshot.
	VolumeStatus *string `pulumi:"volumeStatus"`
	// The volume type of the snapshot.
	VolumeType *string `pulumi:"volumeType"`
	// The zone id of the snapshot.
	ZoneId *string `pulumi:"zoneId"`
}

type SnapshotState struct {
	// The creation time of the snapshot.
	CreationTime pulumi.StringPtrInput
	// The description of the snapshot.
	Description pulumi.StringPtrInput
	// The project name of the snapshot.
	ProjectName pulumi.StringPtrInput
	// The retention days of the snapshot. Valid values: 1~65536. Not specifying this field means permanently preserving the snapshot.When modifying this field, the retention days only supports extension and not shortening. The value range is N+1~65536, where N is the retention days set during snapshot creation.
	RetentionDays pulumi.IntPtrInput
	// The name of the snapshot.
	SnapshotName pulumi.StringPtrInput
	// The type of the snapshot.
	SnapshotType pulumi.StringPtrInput
	// The status of the snapshot.
	Status pulumi.StringPtrInput
	// Tags.
	Tags SnapshotTagArrayInput
	// The volume id to create snapshot.
	VolumeId pulumi.StringPtrInput
	// The volume kind of the snapshot.
	VolumeKind pulumi.StringPtrInput
	// The volume name of the snapshot.
	VolumeName pulumi.StringPtrInput
	// The volume size of the snapshot.
	VolumeSize pulumi.IntPtrInput
	// The volume status of the snapshot.
	VolumeStatus pulumi.StringPtrInput
	// The volume type of the snapshot.
	VolumeType pulumi.StringPtrInput
	// The zone id of the snapshot.
	ZoneId pulumi.StringPtrInput
}

func (SnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotState)(nil)).Elem()
}

type snapshotArgs struct {
	// The description of the snapshot.
	Description *string `pulumi:"description"`
	// The project name of the snapshot.
	ProjectName *string `pulumi:"projectName"`
	// The retention days of the snapshot. Valid values: 1~65536. Not specifying this field means permanently preserving the snapshot.When modifying this field, the retention days only supports extension and not shortening. The value range is N+1~65536, where N is the retention days set during snapshot creation.
	RetentionDays *int `pulumi:"retentionDays"`
	// The name of the snapshot.
	SnapshotName string `pulumi:"snapshotName"`
	// Tags.
	Tags []SnapshotTag `pulumi:"tags"`
	// The volume id to create snapshot.
	VolumeId string `pulumi:"volumeId"`
}

// The set of arguments for constructing a Snapshot resource.
type SnapshotArgs struct {
	// The description of the snapshot.
	Description pulumi.StringPtrInput
	// The project name of the snapshot.
	ProjectName pulumi.StringPtrInput
	// The retention days of the snapshot. Valid values: 1~65536. Not specifying this field means permanently preserving the snapshot.When modifying this field, the retention days only supports extension and not shortening. The value range is N+1~65536, where N is the retention days set during snapshot creation.
	RetentionDays pulumi.IntPtrInput
	// The name of the snapshot.
	SnapshotName pulumi.StringInput
	// Tags.
	Tags SnapshotTagArrayInput
	// The volume id to create snapshot.
	VolumeId pulumi.StringInput
}

func (SnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snapshotArgs)(nil)).Elem()
}

type SnapshotInput interface {
	pulumi.Input

	ToSnapshotOutput() SnapshotOutput
	ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput
}

func (*Snapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (i *Snapshot) ToSnapshotOutput() SnapshotOutput {
	return i.ToSnapshotOutputWithContext(context.Background())
}

func (i *Snapshot) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotOutput)
}

// SnapshotArrayInput is an input type that accepts SnapshotArray and SnapshotArrayOutput values.
// You can construct a concrete instance of `SnapshotArrayInput` via:
//
//	SnapshotArray{ SnapshotArgs{...} }
type SnapshotArrayInput interface {
	pulumi.Input

	ToSnapshotArrayOutput() SnapshotArrayOutput
	ToSnapshotArrayOutputWithContext(context.Context) SnapshotArrayOutput
}

type SnapshotArray []SnapshotInput

func (SnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (i SnapshotArray) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return i.ToSnapshotArrayOutputWithContext(context.Background())
}

func (i SnapshotArray) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotArrayOutput)
}

// SnapshotMapInput is an input type that accepts SnapshotMap and SnapshotMapOutput values.
// You can construct a concrete instance of `SnapshotMapInput` via:
//
//	SnapshotMap{ "key": SnapshotArgs{...} }
type SnapshotMapInput interface {
	pulumi.Input

	ToSnapshotMapOutput() SnapshotMapOutput
	ToSnapshotMapOutputWithContext(context.Context) SnapshotMapOutput
}

type SnapshotMap map[string]SnapshotInput

func (SnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (i SnapshotMap) ToSnapshotMapOutput() SnapshotMapOutput {
	return i.ToSnapshotMapOutputWithContext(context.Background())
}

func (i SnapshotMap) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnapshotMapOutput)
}

type SnapshotOutput struct{ *pulumi.OutputState }

func (SnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Snapshot)(nil)).Elem()
}

func (o SnapshotOutput) ToSnapshotOutput() SnapshotOutput {
	return o
}

func (o SnapshotOutput) ToSnapshotOutputWithContext(ctx context.Context) SnapshotOutput {
	return o
}

// The creation time of the snapshot.
func (o SnapshotOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the snapshot.
func (o SnapshotOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The project name of the snapshot.
func (o SnapshotOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The retention days of the snapshot. Valid values: 1~65536. Not specifying this field means permanently preserving the snapshot.When modifying this field, the retention days only supports extension and not shortening. The value range is N+1~65536, where N is the retention days set during snapshot creation.
func (o SnapshotOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.RetentionDays }).(pulumi.IntOutput)
}

// The name of the snapshot.
func (o SnapshotOutput) SnapshotName() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SnapshotName }).(pulumi.StringOutput)
}

// The type of the snapshot.
func (o SnapshotOutput) SnapshotType() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.SnapshotType }).(pulumi.StringOutput)
}

// The status of the snapshot.
func (o SnapshotOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o SnapshotOutput) Tags() SnapshotTagArrayOutput {
	return o.ApplyT(func(v *Snapshot) SnapshotTagArrayOutput { return v.Tags }).(SnapshotTagArrayOutput)
}

// The volume id to create snapshot.
func (o SnapshotOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeId }).(pulumi.StringOutput)
}

// The volume kind of the snapshot.
func (o SnapshotOutput) VolumeKind() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeKind }).(pulumi.StringOutput)
}

// The volume name of the snapshot.
func (o SnapshotOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeName }).(pulumi.StringOutput)
}

// The volume size of the snapshot.
func (o SnapshotOutput) VolumeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.IntOutput { return v.VolumeSize }).(pulumi.IntOutput)
}

// The volume status of the snapshot.
func (o SnapshotOutput) VolumeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeStatus }).(pulumi.StringOutput)
}

// The volume type of the snapshot.
func (o SnapshotOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.VolumeType }).(pulumi.StringOutput)
}

// The zone id of the snapshot.
func (o SnapshotOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Snapshot) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type SnapshotArrayOutput struct{ *pulumi.OutputState }

func (SnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Snapshot)(nil)).Elem()
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutput() SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) ToSnapshotArrayOutputWithContext(ctx context.Context) SnapshotArrayOutput {
	return o
}

func (o SnapshotArrayOutput) Index(i pulumi.IntInput) SnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].([]*Snapshot)[vs[1].(int)]
	}).(SnapshotOutput)
}

type SnapshotMapOutput struct{ *pulumi.OutputState }

func (SnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Snapshot)(nil)).Elem()
}

func (o SnapshotMapOutput) ToSnapshotMapOutput() SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) ToSnapshotMapOutputWithContext(ctx context.Context) SnapshotMapOutput {
	return o
}

func (o SnapshotMapOutput) MapIndex(k pulumi.StringInput) SnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Snapshot {
		return vs[0].(map[string]*Snapshot)[vs[1].(string)]
	}).(SnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotInput)(nil)).Elem(), &Snapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotArrayInput)(nil)).Elem(), SnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnapshotMapInput)(nil)).Elem(), SnapshotMap{})
	pulumi.RegisterOutputType(SnapshotOutput{})
	pulumi.RegisterOutputType(SnapshotArrayOutput{})
	pulumi.RegisterOutputType(SnapshotMapOutput{})
}
