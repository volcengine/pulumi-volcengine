// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ebs snapshots
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := ecs.GetZones(ctx, nil, nil);
// if err != nil {
// return err
// }
// fooVolume, err := ebs.NewVolume(ctx, "fooVolume", &ebs.VolumeArgs{
// VolumeName: pulumi.String("acc-test-volume"),
// VolumeType: pulumi.String("ESSD_PL0"),
// Description: pulumi.String("acc-test"),
// Kind: pulumi.String("data"),
// Size: pulumi.Int(500),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// VolumeChargeType: pulumi.String("PostPaid"),
// ProjectName: pulumi.String("default"),
// })
// if err != nil {
// return err
// }
// var fooSnapshot []*ebs.Snapshot
//
//	for index := 0; index < 2; index++ {
//	    key0 := index
//	    _ := index
//
// __res, err := ebs.NewSnapshot(ctx, fmt.Sprintf("fooSnapshot-%v", key0), &ebs.SnapshotArgs{
// VolumeId: fooVolume.ID(),
// SnapshotName: pulumi.String("acc-test-snapshot"),
// Description: pulumi.String("acc-test"),
// RetentionDays: pulumi.Int(3),
// ProjectName: pulumi.String("default"),
// Tags: ebs.SnapshotTagArray{
// &ebs.SnapshotTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooSnapshot = append(fooSnapshot, __res)
// }
// _ = ebs.GetSnapshotsOutput(ctx, ebs.GetSnapshotsOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:ebs-getSnapshots:getSnapshots.pp:28,9-26),
// }, nil);
// return nil
// })
// }
// ```
func GetSnapshots(ctx *pulumi.Context, args *GetSnapshotsArgs, opts ...pulumi.InvokeOption) (*GetSnapshotsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSnapshotsResult
	err := ctx.Invoke("volcengine:ebs/getSnapshots:getSnapshots", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnapshots.
type GetSnapshotsArgs struct {
	// A list of snapshot IDs.
	Ids []string `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project name of snapshot.
	ProjectName *string `pulumi:"projectName"`
	// A list of snapshot status.
	SnapshotStatuses []string `pulumi:"snapshotStatuses"`
	// Tags.
	Tags []GetSnapshotsTag `pulumi:"tags"`
	// The zone id of snapshot.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getSnapshots.
type GetSnapshotsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// The project name of the snapshot.
	ProjectName      *string  `pulumi:"projectName"`
	SnapshotStatuses []string `pulumi:"snapshotStatuses"`
	// The collection of query.
	Snapshots []GetSnapshotsSnapshot `pulumi:"snapshots"`
	// Tags.
	Tags []GetSnapshotsTag `pulumi:"tags"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The zone id of the snapshot.
	ZoneId *string `pulumi:"zoneId"`
}

func GetSnapshotsOutput(ctx *pulumi.Context, args GetSnapshotsOutputArgs, opts ...pulumi.InvokeOption) GetSnapshotsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSnapshotsResult, error) {
			args := v.(GetSnapshotsArgs)
			r, err := GetSnapshots(ctx, &args, opts...)
			var s GetSnapshotsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSnapshotsResultOutput)
}

// A collection of arguments for invoking getSnapshots.
type GetSnapshotsOutputArgs struct {
	// A list of snapshot IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project name of snapshot.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// A list of snapshot status.
	SnapshotStatuses pulumi.StringArrayInput `pulumi:"snapshotStatuses"`
	// Tags.
	Tags GetSnapshotsTagArrayInput `pulumi:"tags"`
	// The zone id of snapshot.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (GetSnapshotsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotsArgs)(nil)).Elem()
}

// A collection of values returned by getSnapshots.
type GetSnapshotsResultOutput struct{ *pulumi.OutputState }

func (GetSnapshotsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotsResult)(nil)).Elem()
}

func (o GetSnapshotsResultOutput) ToGetSnapshotsResultOutput() GetSnapshotsResultOutput {
	return o
}

func (o GetSnapshotsResultOutput) ToGetSnapshotsResultOutputWithContext(ctx context.Context) GetSnapshotsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetSnapshotsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSnapshotsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSnapshotsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetSnapshotsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSnapshotsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetSnapshotsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSnapshotsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The project name of the snapshot.
func (o GetSnapshotsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSnapshotsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

func (o GetSnapshotsResultOutput) SnapshotStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSnapshotsResult) []string { return v.SnapshotStatuses }).(pulumi.StringArrayOutput)
}

// The collection of query.
func (o GetSnapshotsResultOutput) Snapshots() GetSnapshotsSnapshotArrayOutput {
	return o.ApplyT(func(v GetSnapshotsResult) []GetSnapshotsSnapshot { return v.Snapshots }).(GetSnapshotsSnapshotArrayOutput)
}

// Tags.
func (o GetSnapshotsResultOutput) Tags() GetSnapshotsTagArrayOutput {
	return o.ApplyT(func(v GetSnapshotsResult) []GetSnapshotsTag { return v.Tags }).(GetSnapshotsTagArrayOutput)
}

// The total count of query.
func (o GetSnapshotsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The zone id of the snapshot.
func (o GetSnapshotsResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSnapshotsResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSnapshotsResultOutput{})
}
