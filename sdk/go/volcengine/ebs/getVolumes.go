// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of volumes
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := ecs.GetZones(ctx, nil, nil);
// if err != nil {
// return err
// }
// var fooVolume []*ebs.Volume
//
//	for index := 0; index < 3; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := ebs.NewVolume(ctx, fmt.Sprintf("fooVolume-%v", key0), &ebs.VolumeArgs{
// VolumeName: pulumi.String(fmt.Sprintf("acc-test-volume-%v", val0)),
// VolumeType: pulumi.String("ESSD_PL0"),
// Description: pulumi.String("acc-test"),
// Kind: pulumi.String("data"),
// Size: pulumi.Int(60),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// VolumeChargeType: pulumi.String("PostPaid"),
// ProjectName: pulumi.String("default"),
// })
// if err != nil {
// return err
// }
// fooVolume = append(fooVolume, __res)
// }
// _ = ebs.GetVolumesOutput(ctx, ebs.GetVolumesOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:ebs-getVolumes:getVolumes.pp:17,9-24),
// }, nil);
// return nil
// })
// }
// ```
func GetVolumes(ctx *pulumi.Context, args *GetVolumesArgs, opts ...pulumi.InvokeOption) (*GetVolumesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVolumesResult
	err := ctx.Invoke("volcengine:ebs/getVolumes:getVolumes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVolumes.
type GetVolumesArgs struct {
	// A list of Volume IDs.
	Ids []string `pulumi:"ids"`
	// The Id of instance.
	InstanceId *string `pulumi:"instanceId"`
	// The Kind of Volume.
	Kind *string `pulumi:"kind"`
	// A Name Regex of Volume.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Tags.
	Tags []GetVolumesTag `pulumi:"tags"`
	// The name of Volume.
	VolumeName *string `pulumi:"volumeName"`
	// The Status of Volume, the value can be `available` or `attaching` or `attached` or `detaching` or `creating` or `deleting` or `error` or `extending`.
	VolumeStatus *string `pulumi:"volumeStatus"`
	// The type of Volume.
	VolumeType *string `pulumi:"volumeType"`
	// The Id of Zone.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getVolumes.
type GetVolumesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	InstanceId *string  `pulumi:"instanceId"`
	Kind       *string  `pulumi:"kind"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// Tags.
	Tags []GetVolumesTag `pulumi:"tags"`
	// The total count of Volume query.
	TotalCount   int     `pulumi:"totalCount"`
	VolumeName   *string `pulumi:"volumeName"`
	VolumeStatus *string `pulumi:"volumeStatus"`
	VolumeType   *string `pulumi:"volumeType"`
	// The collection of Volume query.
	Volumes []GetVolumesVolume `pulumi:"volumes"`
	ZoneId  *string            `pulumi:"zoneId"`
}

func GetVolumesOutput(ctx *pulumi.Context, args GetVolumesOutputArgs, opts ...pulumi.InvokeOption) GetVolumesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVolumesResult, error) {
			args := v.(GetVolumesArgs)
			r, err := GetVolumes(ctx, &args, opts...)
			var s GetVolumesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVolumesResultOutput)
}

// A collection of arguments for invoking getVolumes.
type GetVolumesOutputArgs struct {
	// A list of Volume IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The Id of instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The Kind of Volume.
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// A Name Regex of Volume.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Tags.
	Tags GetVolumesTagArrayInput `pulumi:"tags"`
	// The name of Volume.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
	// The Status of Volume, the value can be `available` or `attaching` or `attached` or `detaching` or `creating` or `deleting` or `error` or `extending`.
	VolumeStatus pulumi.StringPtrInput `pulumi:"volumeStatus"`
	// The type of Volume.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
	// The Id of Zone.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (GetVolumesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesArgs)(nil)).Elem()
}

// A collection of values returned by getVolumes.
type GetVolumesResultOutput struct{ *pulumi.OutputState }

func (GetVolumesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVolumesResult)(nil)).Elem()
}

func (o GetVolumesResultOutput) ToGetVolumesResultOutput() GetVolumesResultOutput {
	return o
}

func (o GetVolumesResultOutput) ToGetVolumesResultOutputWithContext(ctx context.Context) GetVolumesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetVolumesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVolumesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVolumesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVolumesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetVolumesResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// Tags.
func (o GetVolumesResultOutput) Tags() GetVolumesTagArrayOutput {
	return o.ApplyT(func(v GetVolumesResult) []GetVolumesTag { return v.Tags }).(GetVolumesTagArrayOutput)
}

// The total count of Volume query.
func (o GetVolumesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetVolumesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o GetVolumesResultOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) VolumeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.VolumeStatus }).(pulumi.StringPtrOutput)
}

func (o GetVolumesResultOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

// The collection of Volume query.
func (o GetVolumesResultOutput) Volumes() GetVolumesVolumeArrayOutput {
	return o.ApplyT(func(v GetVolumesResult) []GetVolumesVolume { return v.Volumes }).(GetVolumesVolumeArrayOutput)
}

func (o GetVolumesResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVolumesResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVolumesResultOutput{})
}
