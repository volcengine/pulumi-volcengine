// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ebs snapshot groups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooSecurityGroup, err := vpc.NewSecurityGroup(ctx, "fooSecurityGroup", &vpc.SecurityGroupArgs{
//				SecurityGroupName: pulumi.String("acc-test-security-group"),
//				VpcId:             fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
//				OsType:         pulumi.StringRef("Linux"),
//				Visibility:     pulumi.StringRef("public"),
//				InstanceTypeId: pulumi.StringRef("ecs.g3il.large"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			fooInstance, err := ecs.NewInstance(ctx, "fooInstance", &ecs.InstanceArgs{
//				InstanceName:       pulumi.String("acc-test-ecs"),
//				Description:        pulumi.String("acc-test"),
//				HostName:           pulumi.String("tf-acc-test"),
//				ImageId:            pulumi.String(fooImages.Images[0].ImageId),
//				InstanceType:       pulumi.String("ecs.g3il.large"),
//				Password:           pulumi.String("93f0cb0614Aab12"),
//				InstanceChargeType: pulumi.String("PostPaid"),
//				SystemVolumeType:   pulumi.String("ESSD_PL0"),
//				SystemVolumeSize:   pulumi.Int(40),
//				SubnetId:           fooSubnet.ID(),
//				SecurityGroupIds: pulumi.StringArray{
//					fooSecurityGroup.ID(),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: ecs.InstanceTagArray{
//					&ecs.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooVolume, err := ebs.NewVolume(ctx, "fooVolume", &ebs.VolumeArgs{
//				VolumeName:       pulumi.String("acc-test-volume"),
//				VolumeType:       pulumi.String("ESSD_PL0"),
//				Description:      pulumi.String("acc-test"),
//				Kind:             pulumi.String("data"),
//				Size:             pulumi.Int(500),
//				ZoneId:           pulumi.String(fooZones.Zones[0].Id),
//				VolumeChargeType: pulumi.String("PostPaid"),
//				ProjectName:      pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			fooVolumeAttach, err := ebs.NewVolumeAttach(ctx, "fooVolumeAttach", &ebs.VolumeAttachArgs{
//				InstanceId: fooInstance.ID(),
//				VolumeId:   fooVolume.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooSnapshotGroup, err := ebs.NewSnapshotGroup(ctx, "fooSnapshotGroup", &ebs.SnapshotGroupArgs{
//				VolumeIds: pulumi.StringArray{
//					fooInstance.SystemVolumeId,
//					fooVolume.ID(),
//				},
//				InstanceId:  fooInstance.ID(),
//				Description: pulumi.String("acc-test"),
//				ProjectName: pulumi.String("default"),
//				Tags: ebs.SnapshotGroupTagArray{
//					&ebs.SnapshotGroupTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				fooVolumeAttach,
//			}))
//			if err != nil {
//				return err
//			}
//			_ = ebs.GetSnapshotGroupsOutput(ctx, ebs.GetSnapshotGroupsOutputArgs{
//				Ids: pulumi.StringArray{
//					fooSnapshotGroup.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetSnapshotGroups(ctx *pulumi.Context, args *GetSnapshotGroupsArgs, opts ...pulumi.InvokeOption) (*GetSnapshotGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSnapshotGroupsResult
	err := ctx.Invoke("volcengine:ebs/getSnapshotGroups:getSnapshotGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnapshotGroups.
type GetSnapshotGroupsArgs struct {
	// A list of snapshot group IDs.
	Ids []string `pulumi:"ids"`
	// The instance id of snapshot group.
	InstanceId *string `pulumi:"instanceId"`
	// The name of snapshot group.
	Name *string `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project name of snapshot group.
	ProjectName *string `pulumi:"projectName"`
	// A list of snapshot group status. Valid values: `creating`, `available`, `failed`.
	Statuses []string `pulumi:"statuses"`
}

// A collection of values returned by getSnapshotGroups.
type GetSnapshotGroupsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The instance id of the snapshot group.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the snapshot group.
	Name       *string `pulumi:"name"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The id of the snapshot.
	ProjectName *string `pulumi:"projectName"`
	// The collection of query.
	SnapshotGroups []GetSnapshotGroupsSnapshotGroup `pulumi:"snapshotGroups"`
	// The status of the snapshot group.
	Statuses []string `pulumi:"statuses"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetSnapshotGroupsOutput(ctx *pulumi.Context, args GetSnapshotGroupsOutputArgs, opts ...pulumi.InvokeOption) GetSnapshotGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSnapshotGroupsResult, error) {
			args := v.(GetSnapshotGroupsArgs)
			r, err := GetSnapshotGroups(ctx, &args, opts...)
			var s GetSnapshotGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSnapshotGroupsResultOutput)
}

// A collection of arguments for invoking getSnapshotGroups.
type GetSnapshotGroupsOutputArgs struct {
	// A list of snapshot group IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The instance id of snapshot group.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The name of snapshot group.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project name of snapshot group.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// A list of snapshot group status. Valid values: `creating`, `available`, `failed`.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetSnapshotGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getSnapshotGroups.
type GetSnapshotGroupsResultOutput struct{ *pulumi.OutputState }

func (GetSnapshotGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnapshotGroupsResult)(nil)).Elem()
}

func (o GetSnapshotGroupsResultOutput) ToGetSnapshotGroupsResultOutput() GetSnapshotGroupsResultOutput {
	return o
}

func (o GetSnapshotGroupsResultOutput) ToGetSnapshotGroupsResultOutputWithContext(ctx context.Context) GetSnapshotGroupsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetSnapshotGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSnapshotGroupsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The instance id of the snapshot group.
func (o GetSnapshotGroupsResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The name of the snapshot group.
func (o GetSnapshotGroupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetSnapshotGroupsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetSnapshotGroupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The id of the snapshot.
func (o GetSnapshotGroupsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GetSnapshotGroupsResultOutput) SnapshotGroups() GetSnapshotGroupsSnapshotGroupArrayOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) []GetSnapshotGroupsSnapshotGroup { return v.SnapshotGroups }).(GetSnapshotGroupsSnapshotGroupArrayOutput)
}

// The status of the snapshot group.
func (o GetSnapshotGroupsResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// The total count of query.
func (o GetSnapshotGroupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnapshotGroupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSnapshotGroupsResultOutput{})
}
