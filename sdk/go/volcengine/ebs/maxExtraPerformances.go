// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ebs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ebs max extra performances
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ebs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ebs.GetMaxExtraPerformances(ctx, &ebs.GetMaxExtraPerformancesArgs{
//				Size:       pulumi.IntRef(60),
//				VolumeType: pulumi.StringRef("TSSD_TL0"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.ebs.MaxExtraPerformances has been deprecated in favor of volcengine.ebs.getMaxExtraPerformances
func MaxExtraPerformances(ctx *pulumi.Context, args *MaxExtraPerformancesArgs, opts ...pulumi.InvokeOption) (*MaxExtraPerformancesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv MaxExtraPerformancesResult
	err := ctx.Invoke("volcengine:ebs/maxExtraPerformances:MaxExtraPerformances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking MaxExtraPerformances.
type MaxExtraPerformancesArgs struct {
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The size of the volume. Unit: GiB.
	Size *int `pulumi:"size"`
	// The id of the volume.
	VolumeId *string `pulumi:"volumeId"`
	// The type of the volume. Valid values: `TSSD_TL0`.
	VolumeType *string `pulumi:"volumeType"`
}

// A collection of values returned by MaxExtraPerformances.
type MaxExtraPerformancesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of query.
	Performances []MaxExtraPerformancesPerformance `pulumi:"performances"`
	Size         *int                              `pulumi:"size"`
	// The total count of query.
	TotalCount int     `pulumi:"totalCount"`
	VolumeId   *string `pulumi:"volumeId"`
	VolumeType *string `pulumi:"volumeType"`
}

func MaxExtraPerformancesOutput(ctx *pulumi.Context, args MaxExtraPerformancesOutputArgs, opts ...pulumi.InvokeOption) MaxExtraPerformancesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (MaxExtraPerformancesResult, error) {
			args := v.(MaxExtraPerformancesArgs)
			r, err := MaxExtraPerformances(ctx, &args, opts...)
			var s MaxExtraPerformancesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(MaxExtraPerformancesResultOutput)
}

// A collection of arguments for invoking MaxExtraPerformances.
type MaxExtraPerformancesOutputArgs struct {
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The size of the volume. Unit: GiB.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The id of the volume.
	VolumeId pulumi.StringPtrInput `pulumi:"volumeId"`
	// The type of the volume. Valid values: `TSSD_TL0`.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (MaxExtraPerformancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxExtraPerformancesArgs)(nil)).Elem()
}

// A collection of values returned by MaxExtraPerformances.
type MaxExtraPerformancesResultOutput struct{ *pulumi.OutputState }

func (MaxExtraPerformancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MaxExtraPerformancesResult)(nil)).Elem()
}

func (o MaxExtraPerformancesResultOutput) ToMaxExtraPerformancesResultOutput() MaxExtraPerformancesResultOutput {
	return o
}

func (o MaxExtraPerformancesResultOutput) ToMaxExtraPerformancesResultOutputWithContext(ctx context.Context) MaxExtraPerformancesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o MaxExtraPerformancesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MaxExtraPerformancesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o MaxExtraPerformancesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaxExtraPerformancesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o MaxExtraPerformancesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaxExtraPerformancesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o MaxExtraPerformancesResultOutput) Performances() MaxExtraPerformancesPerformanceArrayOutput {
	return o.ApplyT(func(v MaxExtraPerformancesResult) []MaxExtraPerformancesPerformance { return v.Performances }).(MaxExtraPerformancesPerformanceArrayOutput)
}

func (o MaxExtraPerformancesResultOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MaxExtraPerformancesResult) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The total count of query.
func (o MaxExtraPerformancesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v MaxExtraPerformancesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o MaxExtraPerformancesResultOutput) VolumeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaxExtraPerformancesResult) *string { return v.VolumeId }).(pulumi.StringPtrOutput)
}

func (o MaxExtraPerformancesResultOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MaxExtraPerformancesResult) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(MaxExtraPerformancesResultOutput{})
}
