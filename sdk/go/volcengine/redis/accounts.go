// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of redis accounts
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := redis.Accounts(ctx, &redis.AccountsArgs{
//				InstanceId: "redis-cn0398aizj8cwmopx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Accounts(ctx *pulumi.Context, args *AccountsArgs, opts ...pulumi.InvokeOption) (*AccountsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv AccountsResult
	err := ctx.Invoke("volcengine:redis/accounts:Accounts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Accounts.
type AccountsArgs struct {
	// The name of the redis account.
	AccountName *string `pulumi:"accountName"`
	// The id of the Redis instance.
	InstanceId string `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Accounts.
type AccountsResult struct {
	// The name of the redis account.
	AccountName *string `pulumi:"accountName"`
	// The collection of redis instance account query.
	Accounts []AccountsAccount `pulumi:"accounts"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The id of instance.
	InstanceId string  `pulumi:"instanceId"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of redis accounts query.
	TotalCount int `pulumi:"totalCount"`
}

func AccountsOutput(ctx *pulumi.Context, args AccountsOutputArgs, opts ...pulumi.InvokeOption) AccountsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (AccountsResult, error) {
			args := v.(AccountsArgs)
			r, err := Accounts(ctx, &args, opts...)
			var s AccountsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(AccountsResultOutput)
}

// A collection of arguments for invoking Accounts.
type AccountsOutputArgs struct {
	// The name of the redis account.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// The id of the Redis instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (AccountsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsArgs)(nil)).Elem()
}

// A collection of values returned by Accounts.
type AccountsResultOutput struct{ *pulumi.OutputState }

func (AccountsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsResult)(nil)).Elem()
}

func (o AccountsResultOutput) ToAccountsResultOutput() AccountsResultOutput {
	return o
}

func (o AccountsResultOutput) ToAccountsResultOutputWithContext(ctx context.Context) AccountsResultOutput {
	return o
}

// The name of the redis account.
func (o AccountsResultOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountsResult) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The collection of redis instance account query.
func (o AccountsResultOutput) Accounts() AccountsAccountArrayOutput {
	return o.ApplyT(func(v AccountsResult) []AccountsAccount { return v.Accounts }).(AccountsAccountArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o AccountsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of instance.
func (o AccountsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o AccountsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of redis accounts query.
func (o AccountsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v AccountsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(AccountsResultOutput{})
}
