// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage redis backup
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := redis.NewInstance(ctx, "fooInstance", &redis.InstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//				},
//				InstanceName:       pulumi.String("acc-test-tf-redis"),
//				ShardedCluster:     pulumi.Int(1),
//				Password:           pulumi.String("1qaz!QAZ12"),
//				NodeNumber:         pulumi.Int(2),
//				ShardCapacity:      pulumi.Int(1024),
//				ShardNumber:        pulumi.Int(2),
//				EngineVersion:      pulumi.String("5.0"),
//				SubnetId:           fooSubnet.ID(),
//				DeletionProtection: pulumi.String("disabled"),
//				VpcAuthMode:        pulumi.String("close"),
//				ChargeType:         pulumi.String("PostPaid"),
//				Port:               pulumi.Int(6381),
//				ProjectName:        pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = redis.NewBackup(ctx, "fooBackup", &redis.BackupArgs{
//				InstanceId:      fooInstance.ID(),
//				BackupPointName: pulumi.String("acc-test-tf-redis-backup"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Redis Backup can be imported using the instanceId:backupId, e.g.
//
// ```sh
// $ pulumi import volcengine:redis/backup:Backup default redis-cn02aqusft7ws****:b-cn02xmmrp751i9cdzcphjmk4****
// ```
type Backup struct {
	pulumi.CustomResourceState

	// The download address information of the backup file to which the current backup point belongs.
	BackupPointDownloadUrls BackupBackupPointDownloadUrlArrayOutput `pulumi:"backupPointDownloadUrls"`
	// The id of backup point.
	BackupPointId pulumi.StringOutput `pulumi:"backupPointId"`
	// Set the backup name for the manually created backup.
	BackupPointName pulumi.StringOutput `pulumi:"backupPointName"`
	// Backup strategy.
	BackupStrategy pulumi.StringOutput `pulumi:"backupStrategy"`
	// Backup type.
	BackupType pulumi.StringOutput `pulumi:"backupType"`
	// End time of backup.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// Id of instance to create backup.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Information of instance.
	InstanceInfos BackupInstanceInfoArrayOutput `pulumi:"instanceInfos"`
	// Project name of instance.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Size in MiB.
	Size pulumi.IntOutput `pulumi:"size"`
	// Start time of backup.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// Status of backup (Creating/Available/Unavailable/Deleting).
	Status pulumi.StringOutput `pulumi:"status"`
	// Backup retention days.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
}

// NewBackup registers a new resource with the given unique name, arguments, and options.
func NewBackup(ctx *pulumi.Context,
	name string, args *BackupArgs, opts ...pulumi.ResourceOption) (*Backup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Backup
	err := ctx.RegisterResource("volcengine:redis/backup:Backup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackup gets an existing Backup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupState, opts ...pulumi.ResourceOption) (*Backup, error) {
	var resource Backup
	err := ctx.ReadResource("volcengine:redis/backup:Backup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Backup resources.
type backupState struct {
	// The download address information of the backup file to which the current backup point belongs.
	BackupPointDownloadUrls []BackupBackupPointDownloadUrl `pulumi:"backupPointDownloadUrls"`
	// The id of backup point.
	BackupPointId *string `pulumi:"backupPointId"`
	// Set the backup name for the manually created backup.
	BackupPointName *string `pulumi:"backupPointName"`
	// Backup strategy.
	BackupStrategy *string `pulumi:"backupStrategy"`
	// Backup type.
	BackupType *string `pulumi:"backupType"`
	// End time of backup.
	EndTime *string `pulumi:"endTime"`
	// Id of instance to create backup.
	InstanceId *string `pulumi:"instanceId"`
	// Information of instance.
	InstanceInfos []BackupInstanceInfo `pulumi:"instanceInfos"`
	// Project name of instance.
	ProjectName *string `pulumi:"projectName"`
	// Size in MiB.
	Size *int `pulumi:"size"`
	// Start time of backup.
	StartTime *string `pulumi:"startTime"`
	// Status of backup (Creating/Available/Unavailable/Deleting).
	Status *string `pulumi:"status"`
	// Backup retention days.
	Ttl *int `pulumi:"ttl"`
}

type BackupState struct {
	// The download address information of the backup file to which the current backup point belongs.
	BackupPointDownloadUrls BackupBackupPointDownloadUrlArrayInput
	// The id of backup point.
	BackupPointId pulumi.StringPtrInput
	// Set the backup name for the manually created backup.
	BackupPointName pulumi.StringPtrInput
	// Backup strategy.
	BackupStrategy pulumi.StringPtrInput
	// Backup type.
	BackupType pulumi.StringPtrInput
	// End time of backup.
	EndTime pulumi.StringPtrInput
	// Id of instance to create backup.
	InstanceId pulumi.StringPtrInput
	// Information of instance.
	InstanceInfos BackupInstanceInfoArrayInput
	// Project name of instance.
	ProjectName pulumi.StringPtrInput
	// Size in MiB.
	Size pulumi.IntPtrInput
	// Start time of backup.
	StartTime pulumi.StringPtrInput
	// Status of backup (Creating/Available/Unavailable/Deleting).
	Status pulumi.StringPtrInput
	// Backup retention days.
	Ttl pulumi.IntPtrInput
}

func (BackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupState)(nil)).Elem()
}

type backupArgs struct {
	// Set the backup name for the manually created backup.
	BackupPointName *string `pulumi:"backupPointName"`
	// Id of instance to create backup.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a Backup resource.
type BackupArgs struct {
	// Set the backup name for the manually created backup.
	BackupPointName pulumi.StringPtrInput
	// Id of instance to create backup.
	InstanceId pulumi.StringInput
}

func (BackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupArgs)(nil)).Elem()
}

type BackupInput interface {
	pulumi.Input

	ToBackupOutput() BackupOutput
	ToBackupOutputWithContext(ctx context.Context) BackupOutput
}

func (*Backup) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (i *Backup) ToBackupOutput() BackupOutput {
	return i.ToBackupOutputWithContext(context.Background())
}

func (i *Backup) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupOutput)
}

// BackupArrayInput is an input type that accepts BackupArray and BackupArrayOutput values.
// You can construct a concrete instance of `BackupArrayInput` via:
//
//	BackupArray{ BackupArgs{...} }
type BackupArrayInput interface {
	pulumi.Input

	ToBackupArrayOutput() BackupArrayOutput
	ToBackupArrayOutputWithContext(context.Context) BackupArrayOutput
}

type BackupArray []BackupInput

func (BackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (i BackupArray) ToBackupArrayOutput() BackupArrayOutput {
	return i.ToBackupArrayOutputWithContext(context.Background())
}

func (i BackupArray) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupArrayOutput)
}

// BackupMapInput is an input type that accepts BackupMap and BackupMapOutput values.
// You can construct a concrete instance of `BackupMapInput` via:
//
//	BackupMap{ "key": BackupArgs{...} }
type BackupMapInput interface {
	pulumi.Input

	ToBackupMapOutput() BackupMapOutput
	ToBackupMapOutputWithContext(context.Context) BackupMapOutput
}

type BackupMap map[string]BackupInput

func (BackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (i BackupMap) ToBackupMapOutput() BackupMapOutput {
	return i.ToBackupMapOutputWithContext(context.Background())
}

func (i BackupMap) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupMapOutput)
}

type BackupOutput struct{ *pulumi.OutputState }

func (BackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Backup)(nil)).Elem()
}

func (o BackupOutput) ToBackupOutput() BackupOutput {
	return o
}

func (o BackupOutput) ToBackupOutputWithContext(ctx context.Context) BackupOutput {
	return o
}

// The download address information of the backup file to which the current backup point belongs.
func (o BackupOutput) BackupPointDownloadUrls() BackupBackupPointDownloadUrlArrayOutput {
	return o.ApplyT(func(v *Backup) BackupBackupPointDownloadUrlArrayOutput { return v.BackupPointDownloadUrls }).(BackupBackupPointDownloadUrlArrayOutput)
}

// The id of backup point.
func (o BackupOutput) BackupPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.BackupPointId }).(pulumi.StringOutput)
}

// Set the backup name for the manually created backup.
func (o BackupOutput) BackupPointName() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.BackupPointName }).(pulumi.StringOutput)
}

// Backup strategy.
func (o BackupOutput) BackupStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.BackupStrategy }).(pulumi.StringOutput)
}

// Backup type.
func (o BackupOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.BackupType }).(pulumi.StringOutput)
}

// End time of backup.
func (o BackupOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// Id of instance to create backup.
func (o BackupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Information of instance.
func (o BackupOutput) InstanceInfos() BackupInstanceInfoArrayOutput {
	return o.ApplyT(func(v *Backup) BackupInstanceInfoArrayOutput { return v.InstanceInfos }).(BackupInstanceInfoArrayOutput)
}

// Project name of instance.
func (o BackupOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Size in MiB.
func (o BackupOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v *Backup) pulumi.IntOutput { return v.Size }).(pulumi.IntOutput)
}

// Start time of backup.
func (o BackupOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// Status of backup (Creating/Available/Unavailable/Deleting).
func (o BackupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Backup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Backup retention days.
func (o BackupOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *Backup) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

type BackupArrayOutput struct{ *pulumi.OutputState }

func (BackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Backup)(nil)).Elem()
}

func (o BackupArrayOutput) ToBackupArrayOutput() BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) ToBackupArrayOutputWithContext(ctx context.Context) BackupArrayOutput {
	return o
}

func (o BackupArrayOutput) Index(i pulumi.IntInput) BackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].([]*Backup)[vs[1].(int)]
	}).(BackupOutput)
}

type BackupMapOutput struct{ *pulumi.OutputState }

func (BackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Backup)(nil)).Elem()
}

func (o BackupMapOutput) ToBackupMapOutput() BackupMapOutput {
	return o
}

func (o BackupMapOutput) ToBackupMapOutputWithContext(ctx context.Context) BackupMapOutput {
	return o
}

func (o BackupMapOutput) MapIndex(k pulumi.StringInput) BackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Backup {
		return vs[0].(map[string]*Backup)[vs[1].(string)]
	}).(BackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupInput)(nil)).Elem(), &Backup{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupArrayInput)(nil)).Elem(), BackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupMapInput)(nil)).Elem(), BackupMap{})
	pulumi.RegisterOutputType(BackupOutput{})
	pulumi.RegisterOutputType(BackupArrayOutput{})
	pulumi.RegisterOutputType(BackupMapOutput{})
}
