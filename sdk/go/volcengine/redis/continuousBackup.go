// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage redis continuous backup
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := redis.NewInstance(ctx, "fooInstance", &redis.InstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//				},
//				InstanceName:       pulumi.String("acc-test-tf-redis"),
//				ShardedCluster:     pulumi.Int(1),
//				Password:           pulumi.String("1qaz!QAZ12"),
//				NodeNumber:         pulumi.Int(2),
//				ShardCapacity:      pulumi.Int(1024),
//				ShardNumber:        pulumi.Int(2),
//				EngineVersion:      pulumi.String("5.0"),
//				SubnetId:           fooSubnet.ID(),
//				DeletionProtection: pulumi.String("disabled"),
//				VpcAuthMode:        pulumi.String("close"),
//				ChargeType:         pulumi.String("PostPaid"),
//				Port:               pulumi.Int(6381),
//				ProjectName:        pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = redis.NewContinuousBackup(ctx, "fooContinuousBackup", &redis.ContinuousBackupArgs{
//				InstanceId: fooInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Redis Continuous Backup can be imported using the continuous:instanceId, e.g.
//
// ```sh
// $ pulumi import volcengine:redis/continuousBackup:ContinuousBackup default continuous:redis-asdljioeixxxx
// ```
type ContinuousBackup struct {
	pulumi.CustomResourceState

	// The Id of redis instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewContinuousBackup registers a new resource with the given unique name, arguments, and options.
func NewContinuousBackup(ctx *pulumi.Context,
	name string, args *ContinuousBackupArgs, opts ...pulumi.ResourceOption) (*ContinuousBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ContinuousBackup
	err := ctx.RegisterResource("volcengine:redis/continuousBackup:ContinuousBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContinuousBackup gets an existing ContinuousBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContinuousBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContinuousBackupState, opts ...pulumi.ResourceOption) (*ContinuousBackup, error) {
	var resource ContinuousBackup
	err := ctx.ReadResource("volcengine:redis/continuousBackup:ContinuousBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContinuousBackup resources.
type continuousBackupState struct {
	// The Id of redis instance.
	InstanceId *string `pulumi:"instanceId"`
}

type ContinuousBackupState struct {
	// The Id of redis instance.
	InstanceId pulumi.StringPtrInput
}

func (ContinuousBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*continuousBackupState)(nil)).Elem()
}

type continuousBackupArgs struct {
	// The Id of redis instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a ContinuousBackup resource.
type ContinuousBackupArgs struct {
	// The Id of redis instance.
	InstanceId pulumi.StringInput
}

func (ContinuousBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*continuousBackupArgs)(nil)).Elem()
}

type ContinuousBackupInput interface {
	pulumi.Input

	ToContinuousBackupOutput() ContinuousBackupOutput
	ToContinuousBackupOutputWithContext(ctx context.Context) ContinuousBackupOutput
}

func (*ContinuousBackup) ElementType() reflect.Type {
	return reflect.TypeOf((**ContinuousBackup)(nil)).Elem()
}

func (i *ContinuousBackup) ToContinuousBackupOutput() ContinuousBackupOutput {
	return i.ToContinuousBackupOutputWithContext(context.Background())
}

func (i *ContinuousBackup) ToContinuousBackupOutputWithContext(ctx context.Context) ContinuousBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContinuousBackupOutput)
}

// ContinuousBackupArrayInput is an input type that accepts ContinuousBackupArray and ContinuousBackupArrayOutput values.
// You can construct a concrete instance of `ContinuousBackupArrayInput` via:
//
//	ContinuousBackupArray{ ContinuousBackupArgs{...} }
type ContinuousBackupArrayInput interface {
	pulumi.Input

	ToContinuousBackupArrayOutput() ContinuousBackupArrayOutput
	ToContinuousBackupArrayOutputWithContext(context.Context) ContinuousBackupArrayOutput
}

type ContinuousBackupArray []ContinuousBackupInput

func (ContinuousBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContinuousBackup)(nil)).Elem()
}

func (i ContinuousBackupArray) ToContinuousBackupArrayOutput() ContinuousBackupArrayOutput {
	return i.ToContinuousBackupArrayOutputWithContext(context.Background())
}

func (i ContinuousBackupArray) ToContinuousBackupArrayOutputWithContext(ctx context.Context) ContinuousBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContinuousBackupArrayOutput)
}

// ContinuousBackupMapInput is an input type that accepts ContinuousBackupMap and ContinuousBackupMapOutput values.
// You can construct a concrete instance of `ContinuousBackupMapInput` via:
//
//	ContinuousBackupMap{ "key": ContinuousBackupArgs{...} }
type ContinuousBackupMapInput interface {
	pulumi.Input

	ToContinuousBackupMapOutput() ContinuousBackupMapOutput
	ToContinuousBackupMapOutputWithContext(context.Context) ContinuousBackupMapOutput
}

type ContinuousBackupMap map[string]ContinuousBackupInput

func (ContinuousBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContinuousBackup)(nil)).Elem()
}

func (i ContinuousBackupMap) ToContinuousBackupMapOutput() ContinuousBackupMapOutput {
	return i.ToContinuousBackupMapOutputWithContext(context.Background())
}

func (i ContinuousBackupMap) ToContinuousBackupMapOutputWithContext(ctx context.Context) ContinuousBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContinuousBackupMapOutput)
}

type ContinuousBackupOutput struct{ *pulumi.OutputState }

func (ContinuousBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContinuousBackup)(nil)).Elem()
}

func (o ContinuousBackupOutput) ToContinuousBackupOutput() ContinuousBackupOutput {
	return o
}

func (o ContinuousBackupOutput) ToContinuousBackupOutputWithContext(ctx context.Context) ContinuousBackupOutput {
	return o
}

// The Id of redis instance.
func (o ContinuousBackupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *ContinuousBackup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type ContinuousBackupArrayOutput struct{ *pulumi.OutputState }

func (ContinuousBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContinuousBackup)(nil)).Elem()
}

func (o ContinuousBackupArrayOutput) ToContinuousBackupArrayOutput() ContinuousBackupArrayOutput {
	return o
}

func (o ContinuousBackupArrayOutput) ToContinuousBackupArrayOutputWithContext(ctx context.Context) ContinuousBackupArrayOutput {
	return o
}

func (o ContinuousBackupArrayOutput) Index(i pulumi.IntInput) ContinuousBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContinuousBackup {
		return vs[0].([]*ContinuousBackup)[vs[1].(int)]
	}).(ContinuousBackupOutput)
}

type ContinuousBackupMapOutput struct{ *pulumi.OutputState }

func (ContinuousBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContinuousBackup)(nil)).Elem()
}

func (o ContinuousBackupMapOutput) ToContinuousBackupMapOutput() ContinuousBackupMapOutput {
	return o
}

func (o ContinuousBackupMapOutput) ToContinuousBackupMapOutputWithContext(ctx context.Context) ContinuousBackupMapOutput {
	return o
}

func (o ContinuousBackupMapOutput) MapIndex(k pulumi.StringInput) ContinuousBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContinuousBackup {
		return vs[0].(map[string]*ContinuousBackup)[vs[1].(string)]
	}).(ContinuousBackupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContinuousBackupInput)(nil)).Elem(), &ContinuousBackup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContinuousBackupArrayInput)(nil)).Elem(), ContinuousBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContinuousBackupMapInput)(nil)).Elem(), ContinuousBackupMap{})
	pulumi.RegisterOutputType(ContinuousBackupOutput{})
	pulumi.RegisterOutputType(ContinuousBackupArrayOutput{})
	pulumi.RegisterOutputType(ContinuousBackupMapOutput{})
}
