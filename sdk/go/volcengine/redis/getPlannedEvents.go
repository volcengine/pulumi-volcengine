// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package redis

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of redis planned events
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/redis"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := redis.NewInstance(ctx, "fooInstance", &redis.InstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//				},
//				InstanceName:       pulumi.String("acc-test-tf-redis"),
//				ShardedCluster:     pulumi.Int(1),
//				Password:           pulumi.String("1qaz!QAZ12"),
//				NodeNumber:         pulumi.Int(2),
//				ShardCapacity:      pulumi.Int(1024),
//				ShardNumber:        pulumi.Int(2),
//				EngineVersion:      pulumi.String("5.0"),
//				SubnetId:           fooSubnet.ID(),
//				DeletionProtection: pulumi.String("disabled"),
//				VpcAuthMode:        pulumi.String("close"),
//				ChargeType:         pulumi.String("PostPaid"),
//				Port:               pulumi.Int(6381),
//				ProjectName:        pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = redis.GetPlannedEventsOutput(ctx, redis.GetPlannedEventsOutputArgs{
//				InstanceId: fooInstance.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetPlannedEvents(ctx *pulumi.Context, args *GetPlannedEventsArgs, opts ...pulumi.InvokeOption) (*GetPlannedEventsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPlannedEventsResult
	err := ctx.Invoke("volcengine:redis/getPlannedEvents:getPlannedEvents", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPlannedEvents.
type GetPlannedEventsArgs struct {
	// The ID of instance.
	InstanceId *string `pulumi:"instanceId"`
	// The latest execution time of the planned events that need to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
	MaxStartTime *string `pulumi:"maxStartTime"`
	// The earliest execution time of the planned event that needs to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
	MinStartTime *string `pulumi:"minStartTime"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getPlannedEvents.
type GetPlannedEventsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ID of instance.
	InstanceId   *string `pulumi:"instanceId"`
	MaxStartTime *string `pulumi:"maxStartTime"`
	MinStartTime *string `pulumi:"minStartTime"`
	NameRegex    *string `pulumi:"nameRegex"`
	OutputFile   *string `pulumi:"outputFile"`
	// The List of planned event information.
	PlannedEvents []GetPlannedEventsPlannedEvent `pulumi:"plannedEvents"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetPlannedEventsOutput(ctx *pulumi.Context, args GetPlannedEventsOutputArgs, opts ...pulumi.InvokeOption) GetPlannedEventsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPlannedEventsResult, error) {
			args := v.(GetPlannedEventsArgs)
			r, err := GetPlannedEvents(ctx, &args, opts...)
			var s GetPlannedEventsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPlannedEventsResultOutput)
}

// A collection of arguments for invoking getPlannedEvents.
type GetPlannedEventsOutputArgs struct {
	// The ID of instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The latest execution time of the planned events that need to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
	MaxStartTime pulumi.StringPtrInput `pulumi:"maxStartTime"`
	// The earliest execution time of the planned event that needs to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
	MinStartTime pulumi.StringPtrInput `pulumi:"minStartTime"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetPlannedEventsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlannedEventsArgs)(nil)).Elem()
}

// A collection of values returned by getPlannedEvents.
type GetPlannedEventsResultOutput struct{ *pulumi.OutputState }

func (GetPlannedEventsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPlannedEventsResult)(nil)).Elem()
}

func (o GetPlannedEventsResultOutput) ToGetPlannedEventsResultOutput() GetPlannedEventsResultOutput {
	return o
}

func (o GetPlannedEventsResultOutput) ToGetPlannedEventsResultOutputWithContext(ctx context.Context) GetPlannedEventsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetPlannedEventsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPlannedEventsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of instance.
func (o GetPlannedEventsResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPlannedEventsResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o GetPlannedEventsResultOutput) MaxStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPlannedEventsResult) *string { return v.MaxStartTime }).(pulumi.StringPtrOutput)
}

func (o GetPlannedEventsResultOutput) MinStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPlannedEventsResult) *string { return v.MinStartTime }).(pulumi.StringPtrOutput)
}

func (o GetPlannedEventsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPlannedEventsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetPlannedEventsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPlannedEventsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The List of planned event information.
func (o GetPlannedEventsResultOutput) PlannedEvents() GetPlannedEventsPlannedEventArrayOutput {
	return o.ApplyT(func(v GetPlannedEventsResult) []GetPlannedEventsPlannedEvent { return v.PlannedEvents }).(GetPlannedEventsPlannedEventArrayOutput)
}

// The total count of query.
func (o GetPlannedEventsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetPlannedEventsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPlannedEventsResultOutput{})
}
