// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vefaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vefaas kafka trigger
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vefaas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vefaas.NewKafkaTrigger(ctx, "foo", &vefaas.KafkaTriggerArgs{
//				FunctionId:   pulumi.String("35ybaxxx"),
//				MqInstanceId: pulumi.String("kafka-cnngmbeq10mcxxxx"),
//				TopicName:    pulumi.String("topic"),
//				KafkaCredentials: &vefaas.KafkaTriggerKafkaCredentialsArgs{
//					Password:  pulumi.String("Waxxxxxx"),
//					Username:  pulumi.String("test-1"),
//					Mechanism: pulumi.String("PLAIN"),
//				},
//				BatchSize:   pulumi.Int(100),
//				Description: pulumi.String("modify"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VefaasKafkaTrigger can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vefaas/kafkaTrigger:KafkaTrigger default resource_id
// ```
type KafkaTrigger struct {
	pulumi.CustomResourceState

	// The maximum waiting time for batch consumption of triggers.
	BatchFlushDurationMilliseconds pulumi.IntOutput `pulumi:"batchFlushDurationMilliseconds"`
	// The number of messages per batch consumed by the trigger in bulk.
	BatchSize pulumi.IntOutput `pulumi:"batchSize"`
	// The consumer group name of the message queue Kafka instance.
	ConsumerGroup pulumi.StringOutput `pulumi:"consumerGroup"`
	// The creation time of the Kafka trigger.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of the Kafka trigger.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether to enable triggers at the same time as creating them.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The ID of Function.
	FunctionId pulumi.StringOutput `pulumi:"functionId"`
	// Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	KafkaCredentials KafkaTriggerKafkaCredentialsOutput `pulumi:"kafkaCredentials"`
	// The last update time of the Kafka trigger.
	LastUpdateTime pulumi.StringOutput `pulumi:"lastUpdateTime"`
	// The maximum number of retries when a function has a runtime error.
	MaximumRetryAttempts pulumi.IntOutput `pulumi:"maximumRetryAttempts"`
	// The instance ID of Message queue Kafka.
	MqInstanceId pulumi.StringOutput `pulumi:"mqInstanceId"`
	// The name of the Kafka trigger.
	Name pulumi.StringOutput `pulumi:"name"`
	// Specify the location where the messages in the Topic start to be consumed.
	StartingPosition pulumi.StringOutput `pulumi:"startingPosition"`
	// The status of Kafka trigger.
	Status pulumi.StringOutput `pulumi:"status"`
	// The Topic name of the message queue Kafka instance.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
}

// NewKafkaTrigger registers a new resource with the given unique name, arguments, and options.
func NewKafkaTrigger(ctx *pulumi.Context,
	name string, args *KafkaTriggerArgs, opts ...pulumi.ResourceOption) (*KafkaTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionId == nil {
		return nil, errors.New("invalid value for required argument 'FunctionId'")
	}
	if args.KafkaCredentials == nil {
		return nil, errors.New("invalid value for required argument 'KafkaCredentials'")
	}
	if args.MqInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'MqInstanceId'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource KafkaTrigger
	err := ctx.RegisterResource("volcengine:vefaas/kafkaTrigger:KafkaTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKafkaTrigger gets an existing KafkaTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKafkaTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KafkaTriggerState, opts ...pulumi.ResourceOption) (*KafkaTrigger, error) {
	var resource KafkaTrigger
	err := ctx.ReadResource("volcengine:vefaas/kafkaTrigger:KafkaTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KafkaTrigger resources.
type kafkaTriggerState struct {
	// The maximum waiting time for batch consumption of triggers.
	BatchFlushDurationMilliseconds *int `pulumi:"batchFlushDurationMilliseconds"`
	// The number of messages per batch consumed by the trigger in bulk.
	BatchSize *int `pulumi:"batchSize"`
	// The consumer group name of the message queue Kafka instance.
	ConsumerGroup *string `pulumi:"consumerGroup"`
	// The creation time of the Kafka trigger.
	CreationTime *string `pulumi:"creationTime"`
	// The description of the Kafka trigger.
	Description *string `pulumi:"description"`
	// Whether to enable triggers at the same time as creating them.
	Enabled *bool `pulumi:"enabled"`
	// The ID of Function.
	FunctionId *string `pulumi:"functionId"`
	// Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	KafkaCredentials *KafkaTriggerKafkaCredentials `pulumi:"kafkaCredentials"`
	// The last update time of the Kafka trigger.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// The maximum number of retries when a function has a runtime error.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
	// The instance ID of Message queue Kafka.
	MqInstanceId *string `pulumi:"mqInstanceId"`
	// The name of the Kafka trigger.
	Name *string `pulumi:"name"`
	// Specify the location where the messages in the Topic start to be consumed.
	StartingPosition *string `pulumi:"startingPosition"`
	// The status of Kafka trigger.
	Status *string `pulumi:"status"`
	// The Topic name of the message queue Kafka instance.
	TopicName *string `pulumi:"topicName"`
}

type KafkaTriggerState struct {
	// The maximum waiting time for batch consumption of triggers.
	BatchFlushDurationMilliseconds pulumi.IntPtrInput
	// The number of messages per batch consumed by the trigger in bulk.
	BatchSize pulumi.IntPtrInput
	// The consumer group name of the message queue Kafka instance.
	ConsumerGroup pulumi.StringPtrInput
	// The creation time of the Kafka trigger.
	CreationTime pulumi.StringPtrInput
	// The description of the Kafka trigger.
	Description pulumi.StringPtrInput
	// Whether to enable triggers at the same time as creating them.
	Enabled pulumi.BoolPtrInput
	// The ID of Function.
	FunctionId pulumi.StringPtrInput
	// Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	KafkaCredentials KafkaTriggerKafkaCredentialsPtrInput
	// The last update time of the Kafka trigger.
	LastUpdateTime pulumi.StringPtrInput
	// The maximum number of retries when a function has a runtime error.
	MaximumRetryAttempts pulumi.IntPtrInput
	// The instance ID of Message queue Kafka.
	MqInstanceId pulumi.StringPtrInput
	// The name of the Kafka trigger.
	Name pulumi.StringPtrInput
	// Specify the location where the messages in the Topic start to be consumed.
	StartingPosition pulumi.StringPtrInput
	// The status of Kafka trigger.
	Status pulumi.StringPtrInput
	// The Topic name of the message queue Kafka instance.
	TopicName pulumi.StringPtrInput
}

func (KafkaTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTriggerState)(nil)).Elem()
}

type kafkaTriggerArgs struct {
	// The maximum waiting time for batch consumption of triggers.
	BatchFlushDurationMilliseconds *int `pulumi:"batchFlushDurationMilliseconds"`
	// The number of messages per batch consumed by the trigger in bulk.
	BatchSize *int `pulumi:"batchSize"`
	// The description of the Kafka trigger.
	Description *string `pulumi:"description"`
	// Whether to enable triggers at the same time as creating them.
	Enabled *bool `pulumi:"enabled"`
	// The ID of Function.
	FunctionId string `pulumi:"functionId"`
	// Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	KafkaCredentials KafkaTriggerKafkaCredentials `pulumi:"kafkaCredentials"`
	// The maximum number of retries when a function has a runtime error.
	MaximumRetryAttempts *int `pulumi:"maximumRetryAttempts"`
	// The instance ID of Message queue Kafka.
	MqInstanceId string `pulumi:"mqInstanceId"`
	// The name of the Kafka trigger.
	Name *string `pulumi:"name"`
	// Specify the location where the messages in the Topic start to be consumed.
	StartingPosition *string `pulumi:"startingPosition"`
	// The Topic name of the message queue Kafka instance.
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a KafkaTrigger resource.
type KafkaTriggerArgs struct {
	// The maximum waiting time for batch consumption of triggers.
	BatchFlushDurationMilliseconds pulumi.IntPtrInput
	// The number of messages per batch consumed by the trigger in bulk.
	BatchSize pulumi.IntPtrInput
	// The description of the Kafka trigger.
	Description pulumi.StringPtrInput
	// Whether to enable triggers at the same time as creating them.
	Enabled pulumi.BoolPtrInput
	// The ID of Function.
	FunctionId pulumi.StringInput
	// Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	KafkaCredentials KafkaTriggerKafkaCredentialsInput
	// The maximum number of retries when a function has a runtime error.
	MaximumRetryAttempts pulumi.IntPtrInput
	// The instance ID of Message queue Kafka.
	MqInstanceId pulumi.StringInput
	// The name of the Kafka trigger.
	Name pulumi.StringPtrInput
	// Specify the location where the messages in the Topic start to be consumed.
	StartingPosition pulumi.StringPtrInput
	// The Topic name of the message queue Kafka instance.
	TopicName pulumi.StringInput
}

func (KafkaTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kafkaTriggerArgs)(nil)).Elem()
}

type KafkaTriggerInput interface {
	pulumi.Input

	ToKafkaTriggerOutput() KafkaTriggerOutput
	ToKafkaTriggerOutputWithContext(ctx context.Context) KafkaTriggerOutput
}

func (*KafkaTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTrigger)(nil)).Elem()
}

func (i *KafkaTrigger) ToKafkaTriggerOutput() KafkaTriggerOutput {
	return i.ToKafkaTriggerOutputWithContext(context.Background())
}

func (i *KafkaTrigger) ToKafkaTriggerOutputWithContext(ctx context.Context) KafkaTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTriggerOutput)
}

// KafkaTriggerArrayInput is an input type that accepts KafkaTriggerArray and KafkaTriggerArrayOutput values.
// You can construct a concrete instance of `KafkaTriggerArrayInput` via:
//
//	KafkaTriggerArray{ KafkaTriggerArgs{...} }
type KafkaTriggerArrayInput interface {
	pulumi.Input

	ToKafkaTriggerArrayOutput() KafkaTriggerArrayOutput
	ToKafkaTriggerArrayOutputWithContext(context.Context) KafkaTriggerArrayOutput
}

type KafkaTriggerArray []KafkaTriggerInput

func (KafkaTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTrigger)(nil)).Elem()
}

func (i KafkaTriggerArray) ToKafkaTriggerArrayOutput() KafkaTriggerArrayOutput {
	return i.ToKafkaTriggerArrayOutputWithContext(context.Background())
}

func (i KafkaTriggerArray) ToKafkaTriggerArrayOutputWithContext(ctx context.Context) KafkaTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTriggerArrayOutput)
}

// KafkaTriggerMapInput is an input type that accepts KafkaTriggerMap and KafkaTriggerMapOutput values.
// You can construct a concrete instance of `KafkaTriggerMapInput` via:
//
//	KafkaTriggerMap{ "key": KafkaTriggerArgs{...} }
type KafkaTriggerMapInput interface {
	pulumi.Input

	ToKafkaTriggerMapOutput() KafkaTriggerMapOutput
	ToKafkaTriggerMapOutputWithContext(context.Context) KafkaTriggerMapOutput
}

type KafkaTriggerMap map[string]KafkaTriggerInput

func (KafkaTriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTrigger)(nil)).Elem()
}

func (i KafkaTriggerMap) ToKafkaTriggerMapOutput() KafkaTriggerMapOutput {
	return i.ToKafkaTriggerMapOutputWithContext(context.Background())
}

func (i KafkaTriggerMap) ToKafkaTriggerMapOutputWithContext(ctx context.Context) KafkaTriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KafkaTriggerMapOutput)
}

type KafkaTriggerOutput struct{ *pulumi.OutputState }

func (KafkaTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KafkaTrigger)(nil)).Elem()
}

func (o KafkaTriggerOutput) ToKafkaTriggerOutput() KafkaTriggerOutput {
	return o
}

func (o KafkaTriggerOutput) ToKafkaTriggerOutputWithContext(ctx context.Context) KafkaTriggerOutput {
	return o
}

// The maximum waiting time for batch consumption of triggers.
func (o KafkaTriggerOutput) BatchFlushDurationMilliseconds() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.IntOutput { return v.BatchFlushDurationMilliseconds }).(pulumi.IntOutput)
}

// The number of messages per batch consumed by the trigger in bulk.
func (o KafkaTriggerOutput) BatchSize() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.IntOutput { return v.BatchSize }).(pulumi.IntOutput)
}

// The consumer group name of the message queue Kafka instance.
func (o KafkaTriggerOutput) ConsumerGroup() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.ConsumerGroup }).(pulumi.StringOutput)
}

// The creation time of the Kafka trigger.
func (o KafkaTriggerOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the Kafka trigger.
func (o KafkaTriggerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether to enable triggers at the same time as creating them.
func (o KafkaTriggerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of Function.
func (o KafkaTriggerOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

// Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o KafkaTriggerOutput) KafkaCredentials() KafkaTriggerKafkaCredentialsOutput {
	return o.ApplyT(func(v *KafkaTrigger) KafkaTriggerKafkaCredentialsOutput { return v.KafkaCredentials }).(KafkaTriggerKafkaCredentialsOutput)
}

// The last update time of the Kafka trigger.
func (o KafkaTriggerOutput) LastUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.LastUpdateTime }).(pulumi.StringOutput)
}

// The maximum number of retries when a function has a runtime error.
func (o KafkaTriggerOutput) MaximumRetryAttempts() pulumi.IntOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.IntOutput { return v.MaximumRetryAttempts }).(pulumi.IntOutput)
}

// The instance ID of Message queue Kafka.
func (o KafkaTriggerOutput) MqInstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.MqInstanceId }).(pulumi.StringOutput)
}

// The name of the Kafka trigger.
func (o KafkaTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify the location where the messages in the Topic start to be consumed.
func (o KafkaTriggerOutput) StartingPosition() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.StartingPosition }).(pulumi.StringOutput)
}

// The status of Kafka trigger.
func (o KafkaTriggerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The Topic name of the message queue Kafka instance.
func (o KafkaTriggerOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *KafkaTrigger) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

type KafkaTriggerArrayOutput struct{ *pulumi.OutputState }

func (KafkaTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KafkaTrigger)(nil)).Elem()
}

func (o KafkaTriggerArrayOutput) ToKafkaTriggerArrayOutput() KafkaTriggerArrayOutput {
	return o
}

func (o KafkaTriggerArrayOutput) ToKafkaTriggerArrayOutputWithContext(ctx context.Context) KafkaTriggerArrayOutput {
	return o
}

func (o KafkaTriggerArrayOutput) Index(i pulumi.IntInput) KafkaTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *KafkaTrigger {
		return vs[0].([]*KafkaTrigger)[vs[1].(int)]
	}).(KafkaTriggerOutput)
}

type KafkaTriggerMapOutput struct{ *pulumi.OutputState }

func (KafkaTriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KafkaTrigger)(nil)).Elem()
}

func (o KafkaTriggerMapOutput) ToKafkaTriggerMapOutput() KafkaTriggerMapOutput {
	return o
}

func (o KafkaTriggerMapOutput) ToKafkaTriggerMapOutputWithContext(ctx context.Context) KafkaTriggerMapOutput {
	return o
}

func (o KafkaTriggerMapOutput) MapIndex(k pulumi.StringInput) KafkaTriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *KafkaTrigger {
		return vs[0].(map[string]*KafkaTrigger)[vs[1].(string)]
	}).(KafkaTriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTriggerInput)(nil)).Elem(), &KafkaTrigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTriggerArrayInput)(nil)).Elem(), KafkaTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KafkaTriggerMapInput)(nil)).Elem(), KafkaTriggerMap{})
	pulumi.RegisterOutputType(KafkaTriggerOutput{})
	pulumi.RegisterOutputType(KafkaTriggerArrayOutput{})
	pulumi.RegisterOutputType(KafkaTriggerMapOutput{})
}
