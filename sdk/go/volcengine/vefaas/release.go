// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vefaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vefaas release
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vefaas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vefaas.NewRelease(ctx, "foo", &vefaas.ReleaseArgs{
//				FunctionId:          pulumi.String("9p5emxxxx"),
//				RevisionNumber:      pulumi.Int(0),
//				TargetTrafficWeight: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VefaasRelease can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vefaas/release:Release default FunctionId:ReleaseRecordId
// ```
type Release struct {
	pulumi.CustomResourceState

	// The current percentage of current published traffic.
	CurrentTrafficWeight pulumi.IntOutput `pulumi:"currentTrafficWeight"`
	// The description of released this time.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Error code when the release fails.
	ErrorCode pulumi.StringOutput `pulumi:"errorCode"`
	// Download link for the failed instance log.
	FailedInstanceLogs pulumi.StringOutput `pulumi:"failedInstanceLogs"`
	// The ID of Function.
	FunctionId pulumi.StringOutput `pulumi:"functionId"`
	// Upper limit of the number of function instances.
	MaxInstance pulumi.IntPtrOutput `pulumi:"maxInstance"`
	// The version number of the newly released version.
	NewRevisionNumber pulumi.IntOutput `pulumi:"newRevisionNumber"`
	// The version number of the old version.
	OldRevisionNumber pulumi.IntOutput `pulumi:"oldRevisionNumber"`
	// The ID of Release record.
	ReleaseRecordId pulumi.StringOutput `pulumi:"releaseRecordId"`
	// When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RevisionNumber pulumi.IntOutput `pulumi:"revisionNumber"`
	// Percentage of grayscale step size.
	RollingStep pulumi.StringPtrOutput `pulumi:"rollingStep"`
	// The current version number that is stably running online.
	StableRevisionNumber pulumi.IntOutput `pulumi:"stableRevisionNumber"`
	// The current release start time.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The status of function release.
	Status pulumi.StringOutput `pulumi:"status"`
	// Detailed information of the function release status.
	StatusMessage pulumi.StringOutput `pulumi:"statusMessage"`
	// Target percentage of published traffic.
	TargetTrafficWeight pulumi.IntOutput `pulumi:"targetTrafficWeight"`
}

// NewRelease registers a new resource with the given unique name, arguments, and options.
func NewRelease(ctx *pulumi.Context,
	name string, args *ReleaseArgs, opts ...pulumi.ResourceOption) (*Release, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FunctionId == nil {
		return nil, errors.New("invalid value for required argument 'FunctionId'")
	}
	if args.RevisionNumber == nil {
		return nil, errors.New("invalid value for required argument 'RevisionNumber'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Release
	err := ctx.RegisterResource("volcengine:vefaas/release:Release", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRelease gets an existing Release resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRelease(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ReleaseState, opts ...pulumi.ResourceOption) (*Release, error) {
	var resource Release
	err := ctx.ReadResource("volcengine:vefaas/release:Release", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Release resources.
type releaseState struct {
	// The current percentage of current published traffic.
	CurrentTrafficWeight *int `pulumi:"currentTrafficWeight"`
	// The description of released this time.
	Description *string `pulumi:"description"`
	// Error code when the release fails.
	ErrorCode *string `pulumi:"errorCode"`
	// Download link for the failed instance log.
	FailedInstanceLogs *string `pulumi:"failedInstanceLogs"`
	// The ID of Function.
	FunctionId *string `pulumi:"functionId"`
	// Upper limit of the number of function instances.
	MaxInstance *int `pulumi:"maxInstance"`
	// The version number of the newly released version.
	NewRevisionNumber *int `pulumi:"newRevisionNumber"`
	// The version number of the old version.
	OldRevisionNumber *int `pulumi:"oldRevisionNumber"`
	// The ID of Release record.
	ReleaseRecordId *string `pulumi:"releaseRecordId"`
	// When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RevisionNumber *int `pulumi:"revisionNumber"`
	// Percentage of grayscale step size.
	RollingStep *string `pulumi:"rollingStep"`
	// The current version number that is stably running online.
	StableRevisionNumber *int `pulumi:"stableRevisionNumber"`
	// The current release start time.
	StartTime *string `pulumi:"startTime"`
	// The status of function release.
	Status *string `pulumi:"status"`
	// Detailed information of the function release status.
	StatusMessage *string `pulumi:"statusMessage"`
	// Target percentage of published traffic.
	TargetTrafficWeight *int `pulumi:"targetTrafficWeight"`
}

type ReleaseState struct {
	// The current percentage of current published traffic.
	CurrentTrafficWeight pulumi.IntPtrInput
	// The description of released this time.
	Description pulumi.StringPtrInput
	// Error code when the release fails.
	ErrorCode pulumi.StringPtrInput
	// Download link for the failed instance log.
	FailedInstanceLogs pulumi.StringPtrInput
	// The ID of Function.
	FunctionId pulumi.StringPtrInput
	// Upper limit of the number of function instances.
	MaxInstance pulumi.IntPtrInput
	// The version number of the newly released version.
	NewRevisionNumber pulumi.IntPtrInput
	// The version number of the old version.
	OldRevisionNumber pulumi.IntPtrInput
	// The ID of Release record.
	ReleaseRecordId pulumi.StringPtrInput
	// When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RevisionNumber pulumi.IntPtrInput
	// Percentage of grayscale step size.
	RollingStep pulumi.StringPtrInput
	// The current version number that is stably running online.
	StableRevisionNumber pulumi.IntPtrInput
	// The current release start time.
	StartTime pulumi.StringPtrInput
	// The status of function release.
	Status pulumi.StringPtrInput
	// Detailed information of the function release status.
	StatusMessage pulumi.StringPtrInput
	// Target percentage of published traffic.
	TargetTrafficWeight pulumi.IntPtrInput
}

func (ReleaseState) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseState)(nil)).Elem()
}

type releaseArgs struct {
	// The description of released this time.
	Description *string `pulumi:"description"`
	// The ID of Function.
	FunctionId string `pulumi:"functionId"`
	// Upper limit of the number of function instances.
	MaxInstance *int `pulumi:"maxInstance"`
	// When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RevisionNumber int `pulumi:"revisionNumber"`
	// Percentage of grayscale step size.
	RollingStep *string `pulumi:"rollingStep"`
	// Target percentage of published traffic.
	TargetTrafficWeight *int `pulumi:"targetTrafficWeight"`
}

// The set of arguments for constructing a Release resource.
type ReleaseArgs struct {
	// The description of released this time.
	Description pulumi.StringPtrInput
	// The ID of Function.
	FunctionId pulumi.StringInput
	// Upper limit of the number of function instances.
	MaxInstance pulumi.IntPtrInput
	// When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	RevisionNumber pulumi.IntInput
	// Percentage of grayscale step size.
	RollingStep pulumi.StringPtrInput
	// Target percentage of published traffic.
	TargetTrafficWeight pulumi.IntPtrInput
}

func (ReleaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*releaseArgs)(nil)).Elem()
}

type ReleaseInput interface {
	pulumi.Input

	ToReleaseOutput() ReleaseOutput
	ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput
}

func (*Release) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (i *Release) ToReleaseOutput() ReleaseOutput {
	return i.ToReleaseOutputWithContext(context.Background())
}

func (i *Release) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseOutput)
}

// ReleaseArrayInput is an input type that accepts ReleaseArray and ReleaseArrayOutput values.
// You can construct a concrete instance of `ReleaseArrayInput` via:
//
//	ReleaseArray{ ReleaseArgs{...} }
type ReleaseArrayInput interface {
	pulumi.Input

	ToReleaseArrayOutput() ReleaseArrayOutput
	ToReleaseArrayOutputWithContext(context.Context) ReleaseArrayOutput
}

type ReleaseArray []ReleaseInput

func (ReleaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Release)(nil)).Elem()
}

func (i ReleaseArray) ToReleaseArrayOutput() ReleaseArrayOutput {
	return i.ToReleaseArrayOutputWithContext(context.Background())
}

func (i ReleaseArray) ToReleaseArrayOutputWithContext(ctx context.Context) ReleaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseArrayOutput)
}

// ReleaseMapInput is an input type that accepts ReleaseMap and ReleaseMapOutput values.
// You can construct a concrete instance of `ReleaseMapInput` via:
//
//	ReleaseMap{ "key": ReleaseArgs{...} }
type ReleaseMapInput interface {
	pulumi.Input

	ToReleaseMapOutput() ReleaseMapOutput
	ToReleaseMapOutputWithContext(context.Context) ReleaseMapOutput
}

type ReleaseMap map[string]ReleaseInput

func (ReleaseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Release)(nil)).Elem()
}

func (i ReleaseMap) ToReleaseMapOutput() ReleaseMapOutput {
	return i.ToReleaseMapOutputWithContext(context.Background())
}

func (i ReleaseMap) ToReleaseMapOutputWithContext(ctx context.Context) ReleaseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ReleaseMapOutput)
}

type ReleaseOutput struct{ *pulumi.OutputState }

func (ReleaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Release)(nil)).Elem()
}

func (o ReleaseOutput) ToReleaseOutput() ReleaseOutput {
	return o
}

func (o ReleaseOutput) ToReleaseOutputWithContext(ctx context.Context) ReleaseOutput {
	return o
}

// The current percentage of current published traffic.
func (o ReleaseOutput) CurrentTrafficWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *Release) pulumi.IntOutput { return v.CurrentTrafficWeight }).(pulumi.IntOutput)
}

// The description of released this time.
func (o ReleaseOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Error code when the release fails.
func (o ReleaseOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.ErrorCode }).(pulumi.StringOutput)
}

// Download link for the failed instance log.
func (o ReleaseOutput) FailedInstanceLogs() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.FailedInstanceLogs }).(pulumi.StringOutput)
}

// The ID of Function.
func (o ReleaseOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

// Upper limit of the number of function instances.
func (o ReleaseOutput) MaxInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.IntPtrOutput { return v.MaxInstance }).(pulumi.IntPtrOutput)
}

// The version number of the newly released version.
func (o ReleaseOutput) NewRevisionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Release) pulumi.IntOutput { return v.NewRevisionNumber }).(pulumi.IntOutput)
}

// The version number of the old version.
func (o ReleaseOutput) OldRevisionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Release) pulumi.IntOutput { return v.OldRevisionNumber }).(pulumi.IntOutput)
}

// The ID of Release record.
func (o ReleaseOutput) ReleaseRecordId() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.ReleaseRecordId }).(pulumi.StringOutput)
}

// When the RevisionNumber to be released is 0, the Latest code (Latest) will be released and a new version will be created. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o ReleaseOutput) RevisionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Release) pulumi.IntOutput { return v.RevisionNumber }).(pulumi.IntOutput)
}

// Percentage of grayscale step size.
func (o ReleaseOutput) RollingStep() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Release) pulumi.StringPtrOutput { return v.RollingStep }).(pulumi.StringPtrOutput)
}

// The current version number that is stably running online.
func (o ReleaseOutput) StableRevisionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Release) pulumi.IntOutput { return v.StableRevisionNumber }).(pulumi.IntOutput)
}

// The current release start time.
func (o ReleaseOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The status of function release.
func (o ReleaseOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Detailed information of the function release status.
func (o ReleaseOutput) StatusMessage() pulumi.StringOutput {
	return o.ApplyT(func(v *Release) pulumi.StringOutput { return v.StatusMessage }).(pulumi.StringOutput)
}

// Target percentage of published traffic.
func (o ReleaseOutput) TargetTrafficWeight() pulumi.IntOutput {
	return o.ApplyT(func(v *Release) pulumi.IntOutput { return v.TargetTrafficWeight }).(pulumi.IntOutput)
}

type ReleaseArrayOutput struct{ *pulumi.OutputState }

func (ReleaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Release)(nil)).Elem()
}

func (o ReleaseArrayOutput) ToReleaseArrayOutput() ReleaseArrayOutput {
	return o
}

func (o ReleaseArrayOutput) ToReleaseArrayOutputWithContext(ctx context.Context) ReleaseArrayOutput {
	return o
}

func (o ReleaseArrayOutput) Index(i pulumi.IntInput) ReleaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Release {
		return vs[0].([]*Release)[vs[1].(int)]
	}).(ReleaseOutput)
}

type ReleaseMapOutput struct{ *pulumi.OutputState }

func (ReleaseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Release)(nil)).Elem()
}

func (o ReleaseMapOutput) ToReleaseMapOutput() ReleaseMapOutput {
	return o
}

func (o ReleaseMapOutput) ToReleaseMapOutputWithContext(ctx context.Context) ReleaseMapOutput {
	return o
}

func (o ReleaseMapOutput) MapIndex(k pulumi.StringInput) ReleaseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Release {
		return vs[0].(map[string]*Release)[vs[1].(string)]
	}).(ReleaseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseInput)(nil)).Elem(), &Release{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseArrayInput)(nil)).Elem(), ReleaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ReleaseMapInput)(nil)).Elem(), ReleaseMap{})
	pulumi.RegisterOutputType(ReleaseOutput{})
	pulumi.RegisterOutputType(ReleaseArrayOutput{})
	pulumi.RegisterOutputType(ReleaseMapOutput{})
}
