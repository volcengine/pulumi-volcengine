// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vefaas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vefaas releases
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vefaas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vefaas.GetReleases(ctx, &vefaas.GetReleasesArgs{
//				FunctionId: "g79asxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.vefaas.Releases has been deprecated in favor of volcengine.vefaas.getReleases
func Releases(ctx *pulumi.Context, args *ReleasesArgs, opts ...pulumi.InvokeOption) (*ReleasesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ReleasesResult
	err := ctx.Invoke("volcengine:vefaas/releases:Releases", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Releases.
type ReleasesArgs struct {
	// Query the filtering conditions.
	Filters []ReleasesFilter `pulumi:"filters"`
	// The ID of Function.
	FunctionId string `pulumi:"functionId"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// Query the sorting parameters.
	OrderBies []ReleasesOrderBy `pulumi:"orderBies"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Releases.
type ReleasesResult struct {
	Filters []ReleasesFilter `pulumi:"filters"`
	// The ID of Function.
	FunctionId string `pulumi:"functionId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of function publication records.
	Items      []ReleasesItem    `pulumi:"items"`
	NameRegex  *string           `pulumi:"nameRegex"`
	OrderBies  []ReleasesOrderBy `pulumi:"orderBies"`
	OutputFile *string           `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ReleasesOutput(ctx *pulumi.Context, args ReleasesOutputArgs, opts ...pulumi.InvokeOption) ReleasesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ReleasesResult, error) {
			args := v.(ReleasesArgs)
			r, err := Releases(ctx, &args, opts...)
			var s ReleasesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ReleasesResultOutput)
}

// A collection of arguments for invoking Releases.
type ReleasesOutputArgs struct {
	// Query the filtering conditions.
	Filters ReleasesFilterArrayInput `pulumi:"filters"`
	// The ID of Function.
	FunctionId pulumi.StringInput `pulumi:"functionId"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// Query the sorting parameters.
	OrderBies ReleasesOrderByArrayInput `pulumi:"orderBies"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (ReleasesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleasesArgs)(nil)).Elem()
}

// A collection of values returned by Releases.
type ReleasesResultOutput struct{ *pulumi.OutputState }

func (ReleasesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ReleasesResult)(nil)).Elem()
}

func (o ReleasesResultOutput) ToReleasesResultOutput() ReleasesResultOutput {
	return o
}

func (o ReleasesResultOutput) ToReleasesResultOutputWithContext(ctx context.Context) ReleasesResultOutput {
	return o
}

func (o ReleasesResultOutput) Filters() ReleasesFilterArrayOutput {
	return o.ApplyT(func(v ReleasesResult) []ReleasesFilter { return v.Filters }).(ReleasesFilterArrayOutput)
}

// The ID of Function.
func (o ReleasesResultOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v ReleasesResult) string { return v.FunctionId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ReleasesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ReleasesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of function publication records.
func (o ReleasesResultOutput) Items() ReleasesItemArrayOutput {
	return o.ApplyT(func(v ReleasesResult) []ReleasesItem { return v.Items }).(ReleasesItemArrayOutput)
}

func (o ReleasesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleasesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ReleasesResultOutput) OrderBies() ReleasesOrderByArrayOutput {
	return o.ApplyT(func(v ReleasesResult) []ReleasesOrderBy { return v.OrderBies }).(ReleasesOrderByArrayOutput)
}

func (o ReleasesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ReleasesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o ReleasesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ReleasesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ReleasesResultOutput{})
}
