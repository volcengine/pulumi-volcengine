// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vefaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vefaas function
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vefaas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vefaas.NewFunction(ctx, "foo", &vefaas.FunctionArgs{
//				Description:    pulumi.String("123131231"),
//				ExclusiveMode:  pulumi.Bool(false),
//				RequestTimeout: pulumi.Int(30),
//				Runtime:        pulumi.String("golang/v1"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VefaasFunction can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vefaas/function:Function default resource_id
// ```
type Function struct {
	pulumi.CustomResourceState

	// The size of code package.
	CodeSize pulumi.IntOutput `pulumi:"codeSize"`
	// Maximum code package size.
	CodeSizeLimit pulumi.IntOutput `pulumi:"codeSizeLimit"`
	// The custom startup command for the instance.
	Command pulumi.StringPtrOutput `pulumi:"command"`
	// Function CPU charging policy.
	CpuStrategy pulumi.StringPtrOutput `pulumi:"cpuStrategy"`
	// The creation time of the function.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of Function.
	Description pulumi.StringOutput `pulumi:"description"`
	// Function environment variable.
	Envs FunctionEnvArrayOutput `pulumi:"envs"`
	// Exclusive mode switch.
	ExclusiveMode pulumi.BoolOutput `pulumi:"exclusiveMode"`
	// Function to initialize timeout configuration.
	InitializerSec pulumi.IntOutput `pulumi:"initializerSec"`
	// The last update time of the function.
	LastUpdateTime pulumi.StringOutput `pulumi:"lastUpdateTime"`
	// Maximum concurrency of a single instance.
	MaxConcurrency pulumi.IntOutput `pulumi:"maxConcurrency"`
	// Maximum memory for a single instance.
	MemoryMb pulumi.IntOutput `pulumi:"memoryMb"`
	// The name of Function.
	Name pulumi.StringOutput `pulumi:"name"`
	// The configuration of file storage NAS mount.
	NasStorage FunctionNasStorageOutput `pulumi:"nasStorage"`
	// The owner of Function.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Custom listening port for the instance.
	Port pulumi.IntOutput `pulumi:"port"`
	// Request timeout (in seconds).
	RequestTimeout pulumi.IntOutput `pulumi:"requestTimeout"`
	// The runtime of Function.
	Runtime pulumi.StringOutput `pulumi:"runtime"`
	// Code source.
	Source pulumi.StringPtrOutput `pulumi:"source"`
	// Access configuration for the image repository.
	SourceAccessConfig FunctionSourceAccessConfigPtrOutput `pulumi:"sourceAccessConfig"`
	// Maximum code package size.
	SourceLocation pulumi.StringOutput `pulumi:"sourceLocation"`
	// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// Function log configuration.
	TlsConfig FunctionTlsConfigOutput `pulumi:"tlsConfig"`
	// The configuration of Object Storage TOS mount.
	TosMountConfig FunctionTosMountConfigOutput `pulumi:"tosMountConfig"`
	// The number of triggers for this Function.
	TriggersCount pulumi.IntOutput `pulumi:"triggersCount"`
	// The configuration of VPC.
	VpcConfig FunctionVpcConfigOutput `pulumi:"vpcConfig"`
}

// NewFunction registers a new resource with the given unique name, arguments, and options.
func NewFunction(ctx *pulumi.Context,
	name string, args *FunctionArgs, opts ...pulumi.ResourceOption) (*Function, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Runtime == nil {
		return nil, errors.New("invalid value for required argument 'Runtime'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Function
	err := ctx.RegisterResource("volcengine:vefaas/function:Function", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunction gets an existing Function resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionState, opts ...pulumi.ResourceOption) (*Function, error) {
	var resource Function
	err := ctx.ReadResource("volcengine:vefaas/function:Function", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Function resources.
type functionState struct {
	// The size of code package.
	CodeSize *int `pulumi:"codeSize"`
	// Maximum code package size.
	CodeSizeLimit *int `pulumi:"codeSizeLimit"`
	// The custom startup command for the instance.
	Command *string `pulumi:"command"`
	// Function CPU charging policy.
	CpuStrategy *string `pulumi:"cpuStrategy"`
	// The creation time of the function.
	CreationTime *string `pulumi:"creationTime"`
	// The description of Function.
	Description *string `pulumi:"description"`
	// Function environment variable.
	Envs []FunctionEnv `pulumi:"envs"`
	// Exclusive mode switch.
	ExclusiveMode *bool `pulumi:"exclusiveMode"`
	// Function to initialize timeout configuration.
	InitializerSec *int `pulumi:"initializerSec"`
	// The last update time of the function.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// Maximum concurrency of a single instance.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// Maximum memory for a single instance.
	MemoryMb *int `pulumi:"memoryMb"`
	// The name of Function.
	Name *string `pulumi:"name"`
	// The configuration of file storage NAS mount.
	NasStorage *FunctionNasStorage `pulumi:"nasStorage"`
	// The owner of Function.
	Owner *string `pulumi:"owner"`
	// Custom listening port for the instance.
	Port *int `pulumi:"port"`
	// Request timeout (in seconds).
	RequestTimeout *int `pulumi:"requestTimeout"`
	// The runtime of Function.
	Runtime *string `pulumi:"runtime"`
	// Code source.
	Source *string `pulumi:"source"`
	// Access configuration for the image repository.
	SourceAccessConfig *FunctionSourceAccessConfig `pulumi:"sourceAccessConfig"`
	// Maximum code package size.
	SourceLocation *string `pulumi:"sourceLocation"`
	// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
	SourceType *string `pulumi:"sourceType"`
	// Function log configuration.
	TlsConfig *FunctionTlsConfig `pulumi:"tlsConfig"`
	// The configuration of Object Storage TOS mount.
	TosMountConfig *FunctionTosMountConfig `pulumi:"tosMountConfig"`
	// The number of triggers for this Function.
	TriggersCount *int `pulumi:"triggersCount"`
	// The configuration of VPC.
	VpcConfig *FunctionVpcConfig `pulumi:"vpcConfig"`
}

type FunctionState struct {
	// The size of code package.
	CodeSize pulumi.IntPtrInput
	// Maximum code package size.
	CodeSizeLimit pulumi.IntPtrInput
	// The custom startup command for the instance.
	Command pulumi.StringPtrInput
	// Function CPU charging policy.
	CpuStrategy pulumi.StringPtrInput
	// The creation time of the function.
	CreationTime pulumi.StringPtrInput
	// The description of Function.
	Description pulumi.StringPtrInput
	// Function environment variable.
	Envs FunctionEnvArrayInput
	// Exclusive mode switch.
	ExclusiveMode pulumi.BoolPtrInput
	// Function to initialize timeout configuration.
	InitializerSec pulumi.IntPtrInput
	// The last update time of the function.
	LastUpdateTime pulumi.StringPtrInput
	// Maximum concurrency of a single instance.
	MaxConcurrency pulumi.IntPtrInput
	// Maximum memory for a single instance.
	MemoryMb pulumi.IntPtrInput
	// The name of Function.
	Name pulumi.StringPtrInput
	// The configuration of file storage NAS mount.
	NasStorage FunctionNasStoragePtrInput
	// The owner of Function.
	Owner pulumi.StringPtrInput
	// Custom listening port for the instance.
	Port pulumi.IntPtrInput
	// Request timeout (in seconds).
	RequestTimeout pulumi.IntPtrInput
	// The runtime of Function.
	Runtime pulumi.StringPtrInput
	// Code source.
	Source pulumi.StringPtrInput
	// Access configuration for the image repository.
	SourceAccessConfig FunctionSourceAccessConfigPtrInput
	// Maximum code package size.
	SourceLocation pulumi.StringPtrInput
	// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
	SourceType pulumi.StringPtrInput
	// Function log configuration.
	TlsConfig FunctionTlsConfigPtrInput
	// The configuration of Object Storage TOS mount.
	TosMountConfig FunctionTosMountConfigPtrInput
	// The number of triggers for this Function.
	TriggersCount pulumi.IntPtrInput
	// The configuration of VPC.
	VpcConfig FunctionVpcConfigPtrInput
}

func (FunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionState)(nil)).Elem()
}

type functionArgs struct {
	// The custom startup command for the instance.
	Command *string `pulumi:"command"`
	// Function CPU charging policy.
	CpuStrategy *string `pulumi:"cpuStrategy"`
	// The description of Function.
	Description *string `pulumi:"description"`
	// Function environment variable.
	Envs []FunctionEnv `pulumi:"envs"`
	// Exclusive mode switch.
	ExclusiveMode *bool `pulumi:"exclusiveMode"`
	// Function to initialize timeout configuration.
	InitializerSec *int `pulumi:"initializerSec"`
	// Maximum concurrency of a single instance.
	MaxConcurrency *int `pulumi:"maxConcurrency"`
	// Maximum memory for a single instance.
	MemoryMb *int `pulumi:"memoryMb"`
	// The name of Function.
	Name *string `pulumi:"name"`
	// The configuration of file storage NAS mount.
	NasStorage *FunctionNasStorage `pulumi:"nasStorage"`
	// Custom listening port for the instance.
	Port *int `pulumi:"port"`
	// Request timeout (in seconds).
	RequestTimeout *int `pulumi:"requestTimeout"`
	// The runtime of Function.
	Runtime string `pulumi:"runtime"`
	// Code source.
	Source *string `pulumi:"source"`
	// Access configuration for the image repository.
	SourceAccessConfig *FunctionSourceAccessConfig `pulumi:"sourceAccessConfig"`
	// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
	SourceType *string `pulumi:"sourceType"`
	// Function log configuration.
	TlsConfig *FunctionTlsConfig `pulumi:"tlsConfig"`
	// The configuration of Object Storage TOS mount.
	TosMountConfig *FunctionTosMountConfig `pulumi:"tosMountConfig"`
	// The configuration of VPC.
	VpcConfig *FunctionVpcConfig `pulumi:"vpcConfig"`
}

// The set of arguments for constructing a Function resource.
type FunctionArgs struct {
	// The custom startup command for the instance.
	Command pulumi.StringPtrInput
	// Function CPU charging policy.
	CpuStrategy pulumi.StringPtrInput
	// The description of Function.
	Description pulumi.StringPtrInput
	// Function environment variable.
	Envs FunctionEnvArrayInput
	// Exclusive mode switch.
	ExclusiveMode pulumi.BoolPtrInput
	// Function to initialize timeout configuration.
	InitializerSec pulumi.IntPtrInput
	// Maximum concurrency of a single instance.
	MaxConcurrency pulumi.IntPtrInput
	// Maximum memory for a single instance.
	MemoryMb pulumi.IntPtrInput
	// The name of Function.
	Name pulumi.StringPtrInput
	// The configuration of file storage NAS mount.
	NasStorage FunctionNasStoragePtrInput
	// Custom listening port for the instance.
	Port pulumi.IntPtrInput
	// Request timeout (in seconds).
	RequestTimeout pulumi.IntPtrInput
	// The runtime of Function.
	Runtime pulumi.StringInput
	// Code source.
	Source pulumi.StringPtrInput
	// Access configuration for the image repository.
	SourceAccessConfig FunctionSourceAccessConfigPtrInput
	// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
	SourceType pulumi.StringPtrInput
	// Function log configuration.
	TlsConfig FunctionTlsConfigPtrInput
	// The configuration of Object Storage TOS mount.
	TosMountConfig FunctionTosMountConfigPtrInput
	// The configuration of VPC.
	VpcConfig FunctionVpcConfigPtrInput
}

func (FunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionArgs)(nil)).Elem()
}

type FunctionInput interface {
	pulumi.Input

	ToFunctionOutput() FunctionOutput
	ToFunctionOutputWithContext(ctx context.Context) FunctionOutput
}

func (*Function) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (i *Function) ToFunctionOutput() FunctionOutput {
	return i.ToFunctionOutputWithContext(context.Background())
}

func (i *Function) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionOutput)
}

// FunctionArrayInput is an input type that accepts FunctionArray and FunctionArrayOutput values.
// You can construct a concrete instance of `FunctionArrayInput` via:
//
//	FunctionArray{ FunctionArgs{...} }
type FunctionArrayInput interface {
	pulumi.Input

	ToFunctionArrayOutput() FunctionArrayOutput
	ToFunctionArrayOutputWithContext(context.Context) FunctionArrayOutput
}

type FunctionArray []FunctionInput

func (FunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (i FunctionArray) ToFunctionArrayOutput() FunctionArrayOutput {
	return i.ToFunctionArrayOutputWithContext(context.Background())
}

func (i FunctionArray) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionArrayOutput)
}

// FunctionMapInput is an input type that accepts FunctionMap and FunctionMapOutput values.
// You can construct a concrete instance of `FunctionMapInput` via:
//
//	FunctionMap{ "key": FunctionArgs{...} }
type FunctionMapInput interface {
	pulumi.Input

	ToFunctionMapOutput() FunctionMapOutput
	ToFunctionMapOutputWithContext(context.Context) FunctionMapOutput
}

type FunctionMap map[string]FunctionInput

func (FunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (i FunctionMap) ToFunctionMapOutput() FunctionMapOutput {
	return i.ToFunctionMapOutputWithContext(context.Background())
}

func (i FunctionMap) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionMapOutput)
}

type FunctionOutput struct{ *pulumi.OutputState }

func (FunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Function)(nil)).Elem()
}

func (o FunctionOutput) ToFunctionOutput() FunctionOutput {
	return o
}

func (o FunctionOutput) ToFunctionOutputWithContext(ctx context.Context) FunctionOutput {
	return o
}

// The size of code package.
func (o FunctionOutput) CodeSize() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.CodeSize }).(pulumi.IntOutput)
}

// Maximum code package size.
func (o FunctionOutput) CodeSizeLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.CodeSizeLimit }).(pulumi.IntOutput)
}

// The custom startup command for the instance.
func (o FunctionOutput) Command() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.Command }).(pulumi.StringPtrOutput)
}

// Function CPU charging policy.
func (o FunctionOutput) CpuStrategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.CpuStrategy }).(pulumi.StringPtrOutput)
}

// The creation time of the function.
func (o FunctionOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of Function.
func (o FunctionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Function environment variable.
func (o FunctionOutput) Envs() FunctionEnvArrayOutput {
	return o.ApplyT(func(v *Function) FunctionEnvArrayOutput { return v.Envs }).(FunctionEnvArrayOutput)
}

// Exclusive mode switch.
func (o FunctionOutput) ExclusiveMode() pulumi.BoolOutput {
	return o.ApplyT(func(v *Function) pulumi.BoolOutput { return v.ExclusiveMode }).(pulumi.BoolOutput)
}

// Function to initialize timeout configuration.
func (o FunctionOutput) InitializerSec() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.InitializerSec }).(pulumi.IntOutput)
}

// The last update time of the function.
func (o FunctionOutput) LastUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.LastUpdateTime }).(pulumi.StringOutput)
}

// Maximum concurrency of a single instance.
func (o FunctionOutput) MaxConcurrency() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.MaxConcurrency }).(pulumi.IntOutput)
}

// Maximum memory for a single instance.
func (o FunctionOutput) MemoryMb() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.MemoryMb }).(pulumi.IntOutput)
}

// The name of Function.
func (o FunctionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The configuration of file storage NAS mount.
func (o FunctionOutput) NasStorage() FunctionNasStorageOutput {
	return o.ApplyT(func(v *Function) FunctionNasStorageOutput { return v.NasStorage }).(FunctionNasStorageOutput)
}

// The owner of Function.
func (o FunctionOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Custom listening port for the instance.
func (o FunctionOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Request timeout (in seconds).
func (o FunctionOutput) RequestTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.RequestTimeout }).(pulumi.IntOutput)
}

// The runtime of Function.
func (o FunctionOutput) Runtime() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.Runtime }).(pulumi.StringOutput)
}

// Code source.
func (o FunctionOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Function) pulumi.StringPtrOutput { return v.Source }).(pulumi.StringPtrOutput)
}

// Access configuration for the image repository.
func (o FunctionOutput) SourceAccessConfig() FunctionSourceAccessConfigPtrOutput {
	return o.ApplyT(func(v *Function) FunctionSourceAccessConfigPtrOutput { return v.SourceAccessConfig }).(FunctionSourceAccessConfigPtrOutput)
}

// Maximum code package size.
func (o FunctionOutput) SourceLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.SourceLocation }).(pulumi.StringOutput)
}

// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
func (o FunctionOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Function) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// Function log configuration.
func (o FunctionOutput) TlsConfig() FunctionTlsConfigOutput {
	return o.ApplyT(func(v *Function) FunctionTlsConfigOutput { return v.TlsConfig }).(FunctionTlsConfigOutput)
}

// The configuration of Object Storage TOS mount.
func (o FunctionOutput) TosMountConfig() FunctionTosMountConfigOutput {
	return o.ApplyT(func(v *Function) FunctionTosMountConfigOutput { return v.TosMountConfig }).(FunctionTosMountConfigOutput)
}

// The number of triggers for this Function.
func (o FunctionOutput) TriggersCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Function) pulumi.IntOutput { return v.TriggersCount }).(pulumi.IntOutput)
}

// The configuration of VPC.
func (o FunctionOutput) VpcConfig() FunctionVpcConfigOutput {
	return o.ApplyT(func(v *Function) FunctionVpcConfigOutput { return v.VpcConfig }).(FunctionVpcConfigOutput)
}

type FunctionArrayOutput struct{ *pulumi.OutputState }

func (FunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Function)(nil)).Elem()
}

func (o FunctionArrayOutput) ToFunctionArrayOutput() FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) ToFunctionArrayOutputWithContext(ctx context.Context) FunctionArrayOutput {
	return o
}

func (o FunctionArrayOutput) Index(i pulumi.IntInput) FunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Function {
		return vs[0].([]*Function)[vs[1].(int)]
	}).(FunctionOutput)
}

type FunctionMapOutput struct{ *pulumi.OutputState }

func (FunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Function)(nil)).Elem()
}

func (o FunctionMapOutput) ToFunctionMapOutput() FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) ToFunctionMapOutputWithContext(ctx context.Context) FunctionMapOutput {
	return o
}

func (o FunctionMapOutput) MapIndex(k pulumi.StringInput) FunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Function {
		return vs[0].(map[string]*Function)[vs[1].(string)]
	}).(FunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionInput)(nil)).Elem(), &Function{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionArrayInput)(nil)).Elem(), FunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionMapInput)(nil)).Elem(), FunctionMap{})
	pulumi.RegisterOutputType(FunctionOutput{})
	pulumi.RegisterOutputType(FunctionArrayOutput{})
	pulumi.RegisterOutputType(FunctionMapOutput{})
}
