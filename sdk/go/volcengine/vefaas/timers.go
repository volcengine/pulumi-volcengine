// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vefaas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vefaas timers
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vefaas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vefaas.GetTimers(ctx, &vefaas.GetTimersArgs{
//				FunctionId: "g79asxxx",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.vefaas.Timers has been deprecated in favor of volcengine.vefaas.getTimers
func Timers(ctx *pulumi.Context, args *TimersArgs, opts ...pulumi.InvokeOption) (*TimersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv TimersResult
	err := ctx.Invoke("volcengine:vefaas/timers:Timers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Timers.
type TimersArgs struct {
	// The ID of Function.
	FunctionId string `pulumi:"functionId"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Timers.
type TimersResult struct {
	// The ID of Function.
	FunctionId string `pulumi:"functionId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The list of timer trigger.
	Items      []TimersItem `pulumi:"items"`
	NameRegex  *string      `pulumi:"nameRegex"`
	OutputFile *string      `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func TimersOutput(ctx *pulumi.Context, args TimersOutputArgs, opts ...pulumi.InvokeOption) TimersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (TimersResult, error) {
			args := v.(TimersArgs)
			r, err := Timers(ctx, &args, opts...)
			var s TimersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(TimersResultOutput)
}

// A collection of arguments for invoking Timers.
type TimersOutputArgs struct {
	// The ID of Function.
	FunctionId pulumi.StringInput `pulumi:"functionId"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (TimersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TimersArgs)(nil)).Elem()
}

// A collection of values returned by Timers.
type TimersResultOutput struct{ *pulumi.OutputState }

func (TimersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TimersResult)(nil)).Elem()
}

func (o TimersResultOutput) ToTimersResultOutput() TimersResultOutput {
	return o
}

func (o TimersResultOutput) ToTimersResultOutputWithContext(ctx context.Context) TimersResultOutput {
	return o
}

// The ID of Function.
func (o TimersResultOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v TimersResult) string { return v.FunctionId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o TimersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v TimersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The list of timer trigger.
func (o TimersResultOutput) Items() TimersItemArrayOutput {
	return o.ApplyT(func(v TimersResult) []TimersItem { return v.Items }).(TimersItemArrayOutput)
}

func (o TimersResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimersResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o TimersResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TimersResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o TimersResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v TimersResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(TimersResultOutput{})
}
