// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vefaas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vefaas functions
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vefaas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vefaas.GetFunctions(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.vefaas.Functions has been deprecated in favor of volcengine.vefaas.getFunctions
func Functions(ctx *pulumi.Context, args *FunctionsArgs, opts ...pulumi.InvokeOption) (*FunctionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FunctionsResult
	err := ctx.Invoke("volcengine:vefaas/functions:Functions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Functions.
type FunctionsArgs struct {
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Functions.
type FunctionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The collection of query.
	Items      []FunctionsItem `pulumi:"items"`
	NameRegex  *string         `pulumi:"nameRegex"`
	OutputFile *string         `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func FunctionsOutput(ctx *pulumi.Context, args FunctionsOutputArgs, opts ...pulumi.InvokeOption) FunctionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FunctionsResult, error) {
			args := v.(FunctionsArgs)
			r, err := Functions(ctx, &args, opts...)
			var s FunctionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(FunctionsResultOutput)
}

// A collection of arguments for invoking Functions.
type FunctionsOutputArgs struct {
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (FunctionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionsArgs)(nil)).Elem()
}

// A collection of values returned by Functions.
type FunctionsResultOutput struct{ *pulumi.OutputState }

func (FunctionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FunctionsResult)(nil)).Elem()
}

func (o FunctionsResultOutput) ToFunctionsResultOutput() FunctionsResultOutput {
	return o
}

func (o FunctionsResultOutput) ToFunctionsResultOutputWithContext(ctx context.Context) FunctionsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o FunctionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FunctionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The collection of query.
func (o FunctionsResultOutput) Items() FunctionsItemArrayOutput {
	return o.ApplyT(func(v FunctionsResult) []FunctionsItem { return v.Items }).(FunctionsItemArrayOutput)
}

func (o FunctionsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o FunctionsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FunctionsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o FunctionsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v FunctionsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(FunctionsResultOutput{})
}
