// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vefaas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vefaas timer
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vefaas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vefaas.NewTimer(ctx, "foo", &vefaas.TimerArgs{
//				Crontab:    pulumi.String("*/10 * * * *"),
//				FunctionId: pulumi.String("35ybaxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VefaasTimer can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vefaas/timer:Timer default FunctionId:Id
// ```
type Timer struct {
	pulumi.CustomResourceState

	// The creation time of the Timer trigger.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// Set the timing trigger time of the Timer trigger.
	Crontab pulumi.StringOutput `pulumi:"crontab"`
	// The description of the Timer trigger.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether the Timer trigger allows concurrency.
	EnableConcurrency pulumi.BoolOutput `pulumi:"enableConcurrency"`
	// Whether the Timer trigger is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The ID of Function.
	FunctionId pulumi.StringOutput `pulumi:"functionId"`
	// The last update time of the Timer trigger.
	LastUpdateTime pulumi.StringOutput `pulumi:"lastUpdateTime"`
	// The name of the Timer trigger.
	Name pulumi.StringOutput `pulumi:"name"`
	// The Timer trigger sends the content payload of the request.
	Payload pulumi.StringOutput `pulumi:"payload"`
	// The retry count of the Timer trigger.
	Retries pulumi.IntOutput `pulumi:"retries"`
}

// NewTimer registers a new resource with the given unique name, arguments, and options.
func NewTimer(ctx *pulumi.Context,
	name string, args *TimerArgs, opts ...pulumi.ResourceOption) (*Timer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Crontab == nil {
		return nil, errors.New("invalid value for required argument 'Crontab'")
	}
	if args.FunctionId == nil {
		return nil, errors.New("invalid value for required argument 'FunctionId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Timer
	err := ctx.RegisterResource("volcengine:vefaas/timer:Timer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTimer gets an existing Timer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTimer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TimerState, opts ...pulumi.ResourceOption) (*Timer, error) {
	var resource Timer
	err := ctx.ReadResource("volcengine:vefaas/timer:Timer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Timer resources.
type timerState struct {
	// The creation time of the Timer trigger.
	CreationTime *string `pulumi:"creationTime"`
	// Set the timing trigger time of the Timer trigger.
	Crontab *string `pulumi:"crontab"`
	// The description of the Timer trigger.
	Description *string `pulumi:"description"`
	// Whether the Timer trigger allows concurrency.
	EnableConcurrency *bool `pulumi:"enableConcurrency"`
	// Whether the Timer trigger is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The ID of Function.
	FunctionId *string `pulumi:"functionId"`
	// The last update time of the Timer trigger.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// The name of the Timer trigger.
	Name *string `pulumi:"name"`
	// The Timer trigger sends the content payload of the request.
	Payload *string `pulumi:"payload"`
	// The retry count of the Timer trigger.
	Retries *int `pulumi:"retries"`
}

type TimerState struct {
	// The creation time of the Timer trigger.
	CreationTime pulumi.StringPtrInput
	// Set the timing trigger time of the Timer trigger.
	Crontab pulumi.StringPtrInput
	// The description of the Timer trigger.
	Description pulumi.StringPtrInput
	// Whether the Timer trigger allows concurrency.
	EnableConcurrency pulumi.BoolPtrInput
	// Whether the Timer trigger is enabled.
	Enabled pulumi.BoolPtrInput
	// The ID of Function.
	FunctionId pulumi.StringPtrInput
	// The last update time of the Timer trigger.
	LastUpdateTime pulumi.StringPtrInput
	// The name of the Timer trigger.
	Name pulumi.StringPtrInput
	// The Timer trigger sends the content payload of the request.
	Payload pulumi.StringPtrInput
	// The retry count of the Timer trigger.
	Retries pulumi.IntPtrInput
}

func (TimerState) ElementType() reflect.Type {
	return reflect.TypeOf((*timerState)(nil)).Elem()
}

type timerArgs struct {
	// Set the timing trigger time of the Timer trigger.
	Crontab string `pulumi:"crontab"`
	// The description of the Timer trigger.
	Description *string `pulumi:"description"`
	// Whether the Timer trigger allows concurrency.
	EnableConcurrency *bool `pulumi:"enableConcurrency"`
	// Whether the Timer trigger is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The ID of Function.
	FunctionId string `pulumi:"functionId"`
	// The name of the Timer trigger.
	Name *string `pulumi:"name"`
	// The Timer trigger sends the content payload of the request.
	Payload *string `pulumi:"payload"`
	// The retry count of the Timer trigger.
	Retries *int `pulumi:"retries"`
}

// The set of arguments for constructing a Timer resource.
type TimerArgs struct {
	// Set the timing trigger time of the Timer trigger.
	Crontab pulumi.StringInput
	// The description of the Timer trigger.
	Description pulumi.StringPtrInput
	// Whether the Timer trigger allows concurrency.
	EnableConcurrency pulumi.BoolPtrInput
	// Whether the Timer trigger is enabled.
	Enabled pulumi.BoolPtrInput
	// The ID of Function.
	FunctionId pulumi.StringInput
	// The name of the Timer trigger.
	Name pulumi.StringPtrInput
	// The Timer trigger sends the content payload of the request.
	Payload pulumi.StringPtrInput
	// The retry count of the Timer trigger.
	Retries pulumi.IntPtrInput
}

func (TimerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*timerArgs)(nil)).Elem()
}

type TimerInput interface {
	pulumi.Input

	ToTimerOutput() TimerOutput
	ToTimerOutputWithContext(ctx context.Context) TimerOutput
}

func (*Timer) ElementType() reflect.Type {
	return reflect.TypeOf((**Timer)(nil)).Elem()
}

func (i *Timer) ToTimerOutput() TimerOutput {
	return i.ToTimerOutputWithContext(context.Background())
}

func (i *Timer) ToTimerOutputWithContext(ctx context.Context) TimerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimerOutput)
}

// TimerArrayInput is an input type that accepts TimerArray and TimerArrayOutput values.
// You can construct a concrete instance of `TimerArrayInput` via:
//
//	TimerArray{ TimerArgs{...} }
type TimerArrayInput interface {
	pulumi.Input

	ToTimerArrayOutput() TimerArrayOutput
	ToTimerArrayOutputWithContext(context.Context) TimerArrayOutput
}

type TimerArray []TimerInput

func (TimerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Timer)(nil)).Elem()
}

func (i TimerArray) ToTimerArrayOutput() TimerArrayOutput {
	return i.ToTimerArrayOutputWithContext(context.Background())
}

func (i TimerArray) ToTimerArrayOutputWithContext(ctx context.Context) TimerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimerArrayOutput)
}

// TimerMapInput is an input type that accepts TimerMap and TimerMapOutput values.
// You can construct a concrete instance of `TimerMapInput` via:
//
//	TimerMap{ "key": TimerArgs{...} }
type TimerMapInput interface {
	pulumi.Input

	ToTimerMapOutput() TimerMapOutput
	ToTimerMapOutputWithContext(context.Context) TimerMapOutput
}

type TimerMap map[string]TimerInput

func (TimerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Timer)(nil)).Elem()
}

func (i TimerMap) ToTimerMapOutput() TimerMapOutput {
	return i.ToTimerMapOutputWithContext(context.Background())
}

func (i TimerMap) ToTimerMapOutputWithContext(ctx context.Context) TimerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TimerMapOutput)
}

type TimerOutput struct{ *pulumi.OutputState }

func (TimerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Timer)(nil)).Elem()
}

func (o TimerOutput) ToTimerOutput() TimerOutput {
	return o
}

func (o TimerOutput) ToTimerOutputWithContext(ctx context.Context) TimerOutput {
	return o
}

// The creation time of the Timer trigger.
func (o TimerOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Timer) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// Set the timing trigger time of the Timer trigger.
func (o TimerOutput) Crontab() pulumi.StringOutput {
	return o.ApplyT(func(v *Timer) pulumi.StringOutput { return v.Crontab }).(pulumi.StringOutput)
}

// The description of the Timer trigger.
func (o TimerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Timer) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether the Timer trigger allows concurrency.
func (o TimerOutput) EnableConcurrency() pulumi.BoolOutput {
	return o.ApplyT(func(v *Timer) pulumi.BoolOutput { return v.EnableConcurrency }).(pulumi.BoolOutput)
}

// Whether the Timer trigger is enabled.
func (o TimerOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Timer) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The ID of Function.
func (o TimerOutput) FunctionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Timer) pulumi.StringOutput { return v.FunctionId }).(pulumi.StringOutput)
}

// The last update time of the Timer trigger.
func (o TimerOutput) LastUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Timer) pulumi.StringOutput { return v.LastUpdateTime }).(pulumi.StringOutput)
}

// The name of the Timer trigger.
func (o TimerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Timer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The Timer trigger sends the content payload of the request.
func (o TimerOutput) Payload() pulumi.StringOutput {
	return o.ApplyT(func(v *Timer) pulumi.StringOutput { return v.Payload }).(pulumi.StringOutput)
}

// The retry count of the Timer trigger.
func (o TimerOutput) Retries() pulumi.IntOutput {
	return o.ApplyT(func(v *Timer) pulumi.IntOutput { return v.Retries }).(pulumi.IntOutput)
}

type TimerArrayOutput struct{ *pulumi.OutputState }

func (TimerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Timer)(nil)).Elem()
}

func (o TimerArrayOutput) ToTimerArrayOutput() TimerArrayOutput {
	return o
}

func (o TimerArrayOutput) ToTimerArrayOutputWithContext(ctx context.Context) TimerArrayOutput {
	return o
}

func (o TimerArrayOutput) Index(i pulumi.IntInput) TimerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Timer {
		return vs[0].([]*Timer)[vs[1].(int)]
	}).(TimerOutput)
}

type TimerMapOutput struct{ *pulumi.OutputState }

func (TimerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Timer)(nil)).Elem()
}

func (o TimerMapOutput) ToTimerMapOutput() TimerMapOutput {
	return o
}

func (o TimerMapOutput) ToTimerMapOutputWithContext(ctx context.Context) TimerMapOutput {
	return o
}

func (o TimerMapOutput) MapIndex(k pulumi.StringInput) TimerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Timer {
		return vs[0].(map[string]*Timer)[vs[1].(string)]
	}).(TimerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TimerInput)(nil)).Elem(), &Timer{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimerArrayInput)(nil)).Elem(), TimerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TimerMapInput)(nil)).Elem(), TimerMap{})
	pulumi.RegisterOutputType(TimerOutput{})
	pulumi.RegisterOutputType(TimerArrayOutput{})
	pulumi.RegisterOutputType(TimerMapOutput{})
}
