// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package eip

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of eip addresses
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooAddress, err := eip.NewAddress(ctx, "fooAddress", &eip.AddressArgs{
//				BillingType: pulumi.String("PostPaidByTraffic"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = eip.AddressesOutput(ctx, eip.AddressesOutputArgs{
//				Ids: pulumi.StringArray{
//					fooAddress.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func Addresses(ctx *pulumi.Context, args *AddressesArgs, opts ...pulumi.InvokeOption) (*AddressesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv AddressesResult
	err := ctx.Invoke("volcengine:eip/addresses:Addresses", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Addresses.
type AddressesArgs struct {
	// An id of associated instance.
	AssociatedInstanceId *string `pulumi:"associatedInstanceId"`
	// A type of associated instance, the value can be `Nat`, `NetworkInterface`, `ClbInstance` or `EcsInstance`.
	AssociatedInstanceType *string `pulumi:"associatedInstanceType"`
	// A list of EIP ip address that you want to query.
	EipAddresses []string `pulumi:"eipAddresses"`
	// A list of EIP allocation ids.
	Ids []string `pulumi:"ids"`
	// An ISP of EIP Address, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom`.
	Isp *string `pulumi:"isp"`
	// A name of EIP.
	Name *string `pulumi:"name"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The ProjectName of EIP.
	ProjectName *string `pulumi:"projectName"`
	// A status of EIP, the value can be `Attaching` or `Detaching` or `Attached` or `Available`.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []AddressesTag `pulumi:"tags"`
}

// A collection of values returned by Addresses.
type AddressesResult struct {
	// The collection of EIP addresses.
	Addresses              []AddressesAddress `pulumi:"addresses"`
	AssociatedInstanceId   *string            `pulumi:"associatedInstanceId"`
	AssociatedInstanceType *string            `pulumi:"associatedInstanceType"`
	EipAddresses           []string           `pulumi:"eipAddresses"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The ISP of EIP Address.
	Isp *string `pulumi:"isp"`
	// The name of the EIP.
	Name       *string `pulumi:"name"`
	OutputFile *string `pulumi:"outputFile"`
	// The ProjectName of the EIP.
	ProjectName *string `pulumi:"projectName"`
	// The status of the EIP.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []AddressesTag `pulumi:"tags"`
	// The total count of EIP addresses query.
	TotalCount int `pulumi:"totalCount"`
}

func AddressesOutput(ctx *pulumi.Context, args AddressesOutputArgs, opts ...pulumi.InvokeOption) AddressesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (AddressesResult, error) {
			args := v.(AddressesArgs)
			r, err := Addresses(ctx, &args, opts...)
			var s AddressesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(AddressesResultOutput)
}

// A collection of arguments for invoking Addresses.
type AddressesOutputArgs struct {
	// An id of associated instance.
	AssociatedInstanceId pulumi.StringPtrInput `pulumi:"associatedInstanceId"`
	// A type of associated instance, the value can be `Nat`, `NetworkInterface`, `ClbInstance` or `EcsInstance`.
	AssociatedInstanceType pulumi.StringPtrInput `pulumi:"associatedInstanceType"`
	// A list of EIP ip address that you want to query.
	EipAddresses pulumi.StringArrayInput `pulumi:"eipAddresses"`
	// A list of EIP allocation ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// An ISP of EIP Address, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom`.
	Isp pulumi.StringPtrInput `pulumi:"isp"`
	// A name of EIP.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The ProjectName of EIP.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// A status of EIP, the value can be `Attaching` or `Detaching` or `Attached` or `Available`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Tags.
	Tags AddressesTagArrayInput `pulumi:"tags"`
}

func (AddressesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressesArgs)(nil)).Elem()
}

// A collection of values returned by Addresses.
type AddressesResultOutput struct{ *pulumi.OutputState }

func (AddressesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AddressesResult)(nil)).Elem()
}

func (o AddressesResultOutput) ToAddressesResultOutput() AddressesResultOutput {
	return o
}

func (o AddressesResultOutput) ToAddressesResultOutputWithContext(ctx context.Context) AddressesResultOutput {
	return o
}

// The collection of EIP addresses.
func (o AddressesResultOutput) Addresses() AddressesAddressArrayOutput {
	return o.ApplyT(func(v AddressesResult) []AddressesAddress { return v.Addresses }).(AddressesAddressArrayOutput)
}

func (o AddressesResultOutput) AssociatedInstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressesResult) *string { return v.AssociatedInstanceId }).(pulumi.StringPtrOutput)
}

func (o AddressesResultOutput) AssociatedInstanceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressesResult) *string { return v.AssociatedInstanceType }).(pulumi.StringPtrOutput)
}

func (o AddressesResultOutput) EipAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AddressesResult) []string { return v.EipAddresses }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o AddressesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AddressesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o AddressesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AddressesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The ISP of EIP Address.
func (o AddressesResultOutput) Isp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressesResult) *string { return v.Isp }).(pulumi.StringPtrOutput)
}

// The name of the EIP.
func (o AddressesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o AddressesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The ProjectName of the EIP.
func (o AddressesResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressesResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The status of the EIP.
func (o AddressesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AddressesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Tags.
func (o AddressesResultOutput) Tags() AddressesTagArrayOutput {
	return o.ApplyT(func(v AddressesResult) []AddressesTag { return v.Tags }).(AddressesTagArrayOutput)
}

// The total count of EIP addresses query.
func (o AddressesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v AddressesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(AddressesResultOutput{})
}
