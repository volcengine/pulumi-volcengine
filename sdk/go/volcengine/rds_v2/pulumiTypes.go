// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_v2

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type RdsInstanceV2ChargeInfo struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType string `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period *int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit *string `pulumi:"periodUnit"`
}

// RdsInstanceV2ChargeInfoInput is an input type that accepts RdsInstanceV2ChargeInfoArgs and RdsInstanceV2ChargeInfoOutput values.
// You can construct a concrete instance of `RdsInstanceV2ChargeInfoInput` via:
//
//	RdsInstanceV2ChargeInfoArgs{...}
type RdsInstanceV2ChargeInfoInput interface {
	pulumi.Input

	ToRdsInstanceV2ChargeInfoOutput() RdsInstanceV2ChargeInfoOutput
	ToRdsInstanceV2ChargeInfoOutputWithContext(context.Context) RdsInstanceV2ChargeInfoOutput
}

type RdsInstanceV2ChargeInfoArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringPtrInput `pulumi:"periodUnit"`
}

func (RdsInstanceV2ChargeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2ChargeInfo)(nil)).Elem()
}

func (i RdsInstanceV2ChargeInfoArgs) ToRdsInstanceV2ChargeInfoOutput() RdsInstanceV2ChargeInfoOutput {
	return i.ToRdsInstanceV2ChargeInfoOutputWithContext(context.Background())
}

func (i RdsInstanceV2ChargeInfoArgs) ToRdsInstanceV2ChargeInfoOutputWithContext(ctx context.Context) RdsInstanceV2ChargeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2ChargeInfoOutput)
}

func (i RdsInstanceV2ChargeInfoArgs) ToRdsInstanceV2ChargeInfoPtrOutput() RdsInstanceV2ChargeInfoPtrOutput {
	return i.ToRdsInstanceV2ChargeInfoPtrOutputWithContext(context.Background())
}

func (i RdsInstanceV2ChargeInfoArgs) ToRdsInstanceV2ChargeInfoPtrOutputWithContext(ctx context.Context) RdsInstanceV2ChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2ChargeInfoOutput).ToRdsInstanceV2ChargeInfoPtrOutputWithContext(ctx)
}

// RdsInstanceV2ChargeInfoPtrInput is an input type that accepts RdsInstanceV2ChargeInfoArgs, RdsInstanceV2ChargeInfoPtr and RdsInstanceV2ChargeInfoPtrOutput values.
// You can construct a concrete instance of `RdsInstanceV2ChargeInfoPtrInput` via:
//
//	        RdsInstanceV2ChargeInfoArgs{...}
//
//	or:
//
//	        nil
type RdsInstanceV2ChargeInfoPtrInput interface {
	pulumi.Input

	ToRdsInstanceV2ChargeInfoPtrOutput() RdsInstanceV2ChargeInfoPtrOutput
	ToRdsInstanceV2ChargeInfoPtrOutputWithContext(context.Context) RdsInstanceV2ChargeInfoPtrOutput
}

type rdsInstanceV2ChargeInfoPtrType RdsInstanceV2ChargeInfoArgs

func RdsInstanceV2ChargeInfoPtr(v *RdsInstanceV2ChargeInfoArgs) RdsInstanceV2ChargeInfoPtrInput {
	return (*rdsInstanceV2ChargeInfoPtrType)(v)
}

func (*rdsInstanceV2ChargeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsInstanceV2ChargeInfo)(nil)).Elem()
}

func (i *rdsInstanceV2ChargeInfoPtrType) ToRdsInstanceV2ChargeInfoPtrOutput() RdsInstanceV2ChargeInfoPtrOutput {
	return i.ToRdsInstanceV2ChargeInfoPtrOutputWithContext(context.Background())
}

func (i *rdsInstanceV2ChargeInfoPtrType) ToRdsInstanceV2ChargeInfoPtrOutputWithContext(ctx context.Context) RdsInstanceV2ChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2ChargeInfoPtrOutput)
}

type RdsInstanceV2ChargeInfoOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2ChargeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2ChargeInfo)(nil)).Elem()
}

func (o RdsInstanceV2ChargeInfoOutput) ToRdsInstanceV2ChargeInfoOutput() RdsInstanceV2ChargeInfoOutput {
	return o
}

func (o RdsInstanceV2ChargeInfoOutput) ToRdsInstanceV2ChargeInfoOutputWithContext(ctx context.Context) RdsInstanceV2ChargeInfoOutput {
	return o
}

func (o RdsInstanceV2ChargeInfoOutput) ToRdsInstanceV2ChargeInfoPtrOutput() RdsInstanceV2ChargeInfoPtrOutput {
	return o.ToRdsInstanceV2ChargeInfoPtrOutputWithContext(context.Background())
}

func (o RdsInstanceV2ChargeInfoOutput) ToRdsInstanceV2ChargeInfoPtrOutputWithContext(ctx context.Context) RdsInstanceV2ChargeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RdsInstanceV2ChargeInfo) *RdsInstanceV2ChargeInfo {
		return &v
	}).(RdsInstanceV2ChargeInfoPtrOutput)
}

// Whether to automatically renew in prepaid scenarios.
func (o RdsInstanceV2ChargeInfoOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ChargeInfo) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o RdsInstanceV2ChargeInfoOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstanceV2ChargeInfo) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o RdsInstanceV2ChargeInfoOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ChargeInfo) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o RdsInstanceV2ChargeInfoOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ChargeInfo) *string { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

type RdsInstanceV2ChargeInfoPtrOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2ChargeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RdsInstanceV2ChargeInfo)(nil)).Elem()
}

func (o RdsInstanceV2ChargeInfoPtrOutput) ToRdsInstanceV2ChargeInfoPtrOutput() RdsInstanceV2ChargeInfoPtrOutput {
	return o
}

func (o RdsInstanceV2ChargeInfoPtrOutput) ToRdsInstanceV2ChargeInfoPtrOutputWithContext(ctx context.Context) RdsInstanceV2ChargeInfoPtrOutput {
	return o
}

func (o RdsInstanceV2ChargeInfoPtrOutput) Elem() RdsInstanceV2ChargeInfoOutput {
	return o.ApplyT(func(v *RdsInstanceV2ChargeInfo) RdsInstanceV2ChargeInfo {
		if v != nil {
			return *v
		}
		var ret RdsInstanceV2ChargeInfo
		return ret
	}).(RdsInstanceV2ChargeInfoOutput)
}

// Whether to automatically renew in prepaid scenarios.
func (o RdsInstanceV2ChargeInfoPtrOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RdsInstanceV2ChargeInfo) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRenew
	}).(pulumi.BoolPtrOutput)
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o RdsInstanceV2ChargeInfoPtrOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsInstanceV2ChargeInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ChargeType
	}).(pulumi.StringPtrOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o RdsInstanceV2ChargeInfoPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RdsInstanceV2ChargeInfo) *int {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o RdsInstanceV2ChargeInfoPtrOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RdsInstanceV2ChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.PeriodUnit
	}).(pulumi.StringPtrOutput)
}

type RdsInstanceV2ConnectionInfo struct {
	// Address list.
	Addresses []RdsInstanceV2ConnectionInfoAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes *string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description *string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly *string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting *string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId *string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName *string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType *string `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights []RdsInstanceV2ConnectionInfoReadOnlyNodeWeight `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode *string `pulumi:"readWriteMode"`
}

// RdsInstanceV2ConnectionInfoInput is an input type that accepts RdsInstanceV2ConnectionInfoArgs and RdsInstanceV2ConnectionInfoOutput values.
// You can construct a concrete instance of `RdsInstanceV2ConnectionInfoInput` via:
//
//	RdsInstanceV2ConnectionInfoArgs{...}
type RdsInstanceV2ConnectionInfoInput interface {
	pulumi.Input

	ToRdsInstanceV2ConnectionInfoOutput() RdsInstanceV2ConnectionInfoOutput
	ToRdsInstanceV2ConnectionInfoOutputWithContext(context.Context) RdsInstanceV2ConnectionInfoOutput
}

type RdsInstanceV2ConnectionInfoArgs struct {
	// Address list.
	Addresses RdsInstanceV2ConnectionInfoAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringPtrInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringPtrInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringPtrInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringPtrInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayInput `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringPtrInput `pulumi:"readWriteMode"`
}

func (RdsInstanceV2ConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2ConnectionInfo)(nil)).Elem()
}

func (i RdsInstanceV2ConnectionInfoArgs) ToRdsInstanceV2ConnectionInfoOutput() RdsInstanceV2ConnectionInfoOutput {
	return i.ToRdsInstanceV2ConnectionInfoOutputWithContext(context.Background())
}

func (i RdsInstanceV2ConnectionInfoArgs) ToRdsInstanceV2ConnectionInfoOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2ConnectionInfoOutput)
}

// RdsInstanceV2ConnectionInfoArrayInput is an input type that accepts RdsInstanceV2ConnectionInfoArray and RdsInstanceV2ConnectionInfoArrayOutput values.
// You can construct a concrete instance of `RdsInstanceV2ConnectionInfoArrayInput` via:
//
//	RdsInstanceV2ConnectionInfoArray{ RdsInstanceV2ConnectionInfoArgs{...} }
type RdsInstanceV2ConnectionInfoArrayInput interface {
	pulumi.Input

	ToRdsInstanceV2ConnectionInfoArrayOutput() RdsInstanceV2ConnectionInfoArrayOutput
	ToRdsInstanceV2ConnectionInfoArrayOutputWithContext(context.Context) RdsInstanceV2ConnectionInfoArrayOutput
}

type RdsInstanceV2ConnectionInfoArray []RdsInstanceV2ConnectionInfoInput

func (RdsInstanceV2ConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstanceV2ConnectionInfo)(nil)).Elem()
}

func (i RdsInstanceV2ConnectionInfoArray) ToRdsInstanceV2ConnectionInfoArrayOutput() RdsInstanceV2ConnectionInfoArrayOutput {
	return i.ToRdsInstanceV2ConnectionInfoArrayOutputWithContext(context.Background())
}

func (i RdsInstanceV2ConnectionInfoArray) ToRdsInstanceV2ConnectionInfoArrayOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2ConnectionInfoArrayOutput)
}

type RdsInstanceV2ConnectionInfoOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2ConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2ConnectionInfo)(nil)).Elem()
}

func (o RdsInstanceV2ConnectionInfoOutput) ToRdsInstanceV2ConnectionInfoOutput() RdsInstanceV2ConnectionInfoOutput {
	return o
}

func (o RdsInstanceV2ConnectionInfoOutput) ToRdsInstanceV2ConnectionInfoOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoOutput {
	return o
}

// Address list.
func (o RdsInstanceV2ConnectionInfoOutput) Addresses() RdsInstanceV2ConnectionInfoAddressArrayOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) []RdsInstanceV2ConnectionInfoAddress { return v.Addresses }).(RdsInstanceV2ConnectionInfoAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o RdsInstanceV2ConnectionInfoOutput) AutoAddNewNodes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) *string { return v.AutoAddNewNodes }).(pulumi.StringPtrOutput)
}

// Address description.
func (o RdsInstanceV2ConnectionInfoOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o RdsInstanceV2ConnectionInfoOutput) EnableReadOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) *string { return v.EnableReadOnly }).(pulumi.StringPtrOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o RdsInstanceV2ConnectionInfoOutput) EnableReadWriteSplitting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) *string { return v.EnableReadWriteSplitting }).(pulumi.StringPtrOutput)
}

// Instance connection terminal ID.
func (o RdsInstanceV2ConnectionInfoOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// The instance connection terminal name.
func (o RdsInstanceV2ConnectionInfoOutput) EndpointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) *string { return v.EndpointName }).(pulumi.StringPtrOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o RdsInstanceV2ConnectionInfoOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o RdsInstanceV2ConnectionInfoOutput) ReadOnlyNodeWeights() RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) []RdsInstanceV2ConnectionInfoReadOnlyNodeWeight {
		return v.ReadOnlyNodeWeights
	}).(RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o RdsInstanceV2ConnectionInfoOutput) ReadWriteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfo) *string { return v.ReadWriteMode }).(pulumi.StringPtrOutput)
}

type RdsInstanceV2ConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2ConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstanceV2ConnectionInfo)(nil)).Elem()
}

func (o RdsInstanceV2ConnectionInfoArrayOutput) ToRdsInstanceV2ConnectionInfoArrayOutput() RdsInstanceV2ConnectionInfoArrayOutput {
	return o
}

func (o RdsInstanceV2ConnectionInfoArrayOutput) ToRdsInstanceV2ConnectionInfoArrayOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoArrayOutput {
	return o
}

func (o RdsInstanceV2ConnectionInfoArrayOutput) Index(i pulumi.IntInput) RdsInstanceV2ConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdsInstanceV2ConnectionInfo {
		return vs[0].([]RdsInstanceV2ConnectionInfo)[vs[1].(int)]
	}).(RdsInstanceV2ConnectionInfoOutput)
}

type RdsInstanceV2ConnectionInfoAddress struct {
	// Connect domain name.
	Domain *string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId *string `pulumi:"eipId"`
	// The IP Address.
	IpAddress *string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType *string `pulumi:"networkType"`
	// The Port.
	Port *string `pulumi:"port"`
	// Subnet ID.
	SubnetId *string `pulumi:"subnetId"`
}

// RdsInstanceV2ConnectionInfoAddressInput is an input type that accepts RdsInstanceV2ConnectionInfoAddressArgs and RdsInstanceV2ConnectionInfoAddressOutput values.
// You can construct a concrete instance of `RdsInstanceV2ConnectionInfoAddressInput` via:
//
//	RdsInstanceV2ConnectionInfoAddressArgs{...}
type RdsInstanceV2ConnectionInfoAddressInput interface {
	pulumi.Input

	ToRdsInstanceV2ConnectionInfoAddressOutput() RdsInstanceV2ConnectionInfoAddressOutput
	ToRdsInstanceV2ConnectionInfoAddressOutputWithContext(context.Context) RdsInstanceV2ConnectionInfoAddressOutput
}

type RdsInstanceV2ConnectionInfoAddressArgs struct {
	// Connect domain name.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringPtrInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// Subnet ID.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (RdsInstanceV2ConnectionInfoAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2ConnectionInfoAddress)(nil)).Elem()
}

func (i RdsInstanceV2ConnectionInfoAddressArgs) ToRdsInstanceV2ConnectionInfoAddressOutput() RdsInstanceV2ConnectionInfoAddressOutput {
	return i.ToRdsInstanceV2ConnectionInfoAddressOutputWithContext(context.Background())
}

func (i RdsInstanceV2ConnectionInfoAddressArgs) ToRdsInstanceV2ConnectionInfoAddressOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2ConnectionInfoAddressOutput)
}

// RdsInstanceV2ConnectionInfoAddressArrayInput is an input type that accepts RdsInstanceV2ConnectionInfoAddressArray and RdsInstanceV2ConnectionInfoAddressArrayOutput values.
// You can construct a concrete instance of `RdsInstanceV2ConnectionInfoAddressArrayInput` via:
//
//	RdsInstanceV2ConnectionInfoAddressArray{ RdsInstanceV2ConnectionInfoAddressArgs{...} }
type RdsInstanceV2ConnectionInfoAddressArrayInput interface {
	pulumi.Input

	ToRdsInstanceV2ConnectionInfoAddressArrayOutput() RdsInstanceV2ConnectionInfoAddressArrayOutput
	ToRdsInstanceV2ConnectionInfoAddressArrayOutputWithContext(context.Context) RdsInstanceV2ConnectionInfoAddressArrayOutput
}

type RdsInstanceV2ConnectionInfoAddressArray []RdsInstanceV2ConnectionInfoAddressInput

func (RdsInstanceV2ConnectionInfoAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstanceV2ConnectionInfoAddress)(nil)).Elem()
}

func (i RdsInstanceV2ConnectionInfoAddressArray) ToRdsInstanceV2ConnectionInfoAddressArrayOutput() RdsInstanceV2ConnectionInfoAddressArrayOutput {
	return i.ToRdsInstanceV2ConnectionInfoAddressArrayOutputWithContext(context.Background())
}

func (i RdsInstanceV2ConnectionInfoAddressArray) ToRdsInstanceV2ConnectionInfoAddressArrayOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2ConnectionInfoAddressArrayOutput)
}

type RdsInstanceV2ConnectionInfoAddressOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2ConnectionInfoAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2ConnectionInfoAddress)(nil)).Elem()
}

func (o RdsInstanceV2ConnectionInfoAddressOutput) ToRdsInstanceV2ConnectionInfoAddressOutput() RdsInstanceV2ConnectionInfoAddressOutput {
	return o
}

func (o RdsInstanceV2ConnectionInfoAddressOutput) ToRdsInstanceV2ConnectionInfoAddressOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoAddressOutput {
	return o
}

// Connect domain name.
func (o RdsInstanceV2ConnectionInfoAddressOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfoAddress) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o RdsInstanceV2ConnectionInfoAddressOutput) EipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfoAddress) *string { return v.EipId }).(pulumi.StringPtrOutput)
}

// The IP Address.
func (o RdsInstanceV2ConnectionInfoAddressOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfoAddress) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o RdsInstanceV2ConnectionInfoAddressOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfoAddress) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// The Port.
func (o RdsInstanceV2ConnectionInfoAddressOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfoAddress) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// Subnet ID.
func (o RdsInstanceV2ConnectionInfoAddressOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfoAddress) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type RdsInstanceV2ConnectionInfoAddressArrayOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2ConnectionInfoAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstanceV2ConnectionInfoAddress)(nil)).Elem()
}

func (o RdsInstanceV2ConnectionInfoAddressArrayOutput) ToRdsInstanceV2ConnectionInfoAddressArrayOutput() RdsInstanceV2ConnectionInfoAddressArrayOutput {
	return o
}

func (o RdsInstanceV2ConnectionInfoAddressArrayOutput) ToRdsInstanceV2ConnectionInfoAddressArrayOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoAddressArrayOutput {
	return o
}

func (o RdsInstanceV2ConnectionInfoAddressArrayOutput) Index(i pulumi.IntInput) RdsInstanceV2ConnectionInfoAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdsInstanceV2ConnectionInfoAddress {
		return vs[0].([]RdsInstanceV2ConnectionInfoAddress)[vs[1].(int)]
	}).(RdsInstanceV2ConnectionInfoAddressOutput)
}

type RdsInstanceV2ConnectionInfoReadOnlyNodeWeight struct {
	// The ID of the node.
	NodeId *string `pulumi:"nodeId"`
	// The type of the node.
	NodeType *string `pulumi:"nodeType"`
	// The weight of the node.
	Weight *int `pulumi:"weight"`
}

// RdsInstanceV2ConnectionInfoReadOnlyNodeWeightInput is an input type that accepts RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArgs and RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput values.
// You can construct a concrete instance of `RdsInstanceV2ConnectionInfoReadOnlyNodeWeightInput` via:
//
//	RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArgs{...}
type RdsInstanceV2ConnectionInfoReadOnlyNodeWeightInput interface {
	pulumi.Input

	ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput() RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput
	ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutputWithContext(context.Context) RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput
}

type RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArgs struct {
	// The ID of the node.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// The type of the node.
	NodeType pulumi.StringPtrInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2ConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (i RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArgs) ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput() RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput {
	return i.ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutputWithContext(context.Background())
}

func (i RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArgs) ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput)
}

// RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayInput is an input type that accepts RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArray and RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput values.
// You can construct a concrete instance of `RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayInput` via:
//
//	RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArray{ RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArgs{...} }
type RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayInput interface {
	pulumi.Input

	ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput() RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput
	ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(context.Context) RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput
}

type RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArray []RdsInstanceV2ConnectionInfoReadOnlyNodeWeightInput

func (RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstanceV2ConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (i RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArray) ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput() RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput {
	return i.ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(context.Background())
}

func (i RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArray) ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput)
}

type RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2ConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (o RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput) ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput() RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput {
	return o
}

func (o RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput) ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput {
	return o
}

// The ID of the node.
func (o RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfoReadOnlyNodeWeight) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// The type of the node.
func (o RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfoReadOnlyNodeWeight) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The weight of the node.
func (o RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2ConnectionInfoReadOnlyNodeWeight) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstanceV2ConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (o RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput) ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput() RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput {
	return o
}

func (o RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput) ToRdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput {
	return o
}

func (o RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput) Index(i pulumi.IntInput) RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdsInstanceV2ConnectionInfoReadOnlyNodeWeight {
		return vs[0].([]RdsInstanceV2ConnectionInfoReadOnlyNodeWeight)[vs[1].(int)]
	}).(RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput)
}

type RdsInstanceV2NodeInfo struct {
	// The ID of the node.
	NodeId *string `pulumi:"nodeId"`
	// Masternode specs. Pass
	// DescribeDBInstanceSpecs Query the instance specifications that can be sold.
	NodeSpec string `pulumi:"nodeSpec"`
	// Node type, the value is "Primary", "Secondary", "ReadOnly".
	NodeType string `pulumi:"nodeType"`
	// Zone ID.
	ZoneId string `pulumi:"zoneId"`
}

// RdsInstanceV2NodeInfoInput is an input type that accepts RdsInstanceV2NodeInfoArgs and RdsInstanceV2NodeInfoOutput values.
// You can construct a concrete instance of `RdsInstanceV2NodeInfoInput` via:
//
//	RdsInstanceV2NodeInfoArgs{...}
type RdsInstanceV2NodeInfoInput interface {
	pulumi.Input

	ToRdsInstanceV2NodeInfoOutput() RdsInstanceV2NodeInfoOutput
	ToRdsInstanceV2NodeInfoOutputWithContext(context.Context) RdsInstanceV2NodeInfoOutput
}

type RdsInstanceV2NodeInfoArgs struct {
	// The ID of the node.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// Masternode specs. Pass
	// DescribeDBInstanceSpecs Query the instance specifications that can be sold.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Node type, the value is "Primary", "Secondary", "ReadOnly".
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// Zone ID.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (RdsInstanceV2NodeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2NodeInfo)(nil)).Elem()
}

func (i RdsInstanceV2NodeInfoArgs) ToRdsInstanceV2NodeInfoOutput() RdsInstanceV2NodeInfoOutput {
	return i.ToRdsInstanceV2NodeInfoOutputWithContext(context.Background())
}

func (i RdsInstanceV2NodeInfoArgs) ToRdsInstanceV2NodeInfoOutputWithContext(ctx context.Context) RdsInstanceV2NodeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2NodeInfoOutput)
}

// RdsInstanceV2NodeInfoArrayInput is an input type that accepts RdsInstanceV2NodeInfoArray and RdsInstanceV2NodeInfoArrayOutput values.
// You can construct a concrete instance of `RdsInstanceV2NodeInfoArrayInput` via:
//
//	RdsInstanceV2NodeInfoArray{ RdsInstanceV2NodeInfoArgs{...} }
type RdsInstanceV2NodeInfoArrayInput interface {
	pulumi.Input

	ToRdsInstanceV2NodeInfoArrayOutput() RdsInstanceV2NodeInfoArrayOutput
	ToRdsInstanceV2NodeInfoArrayOutputWithContext(context.Context) RdsInstanceV2NodeInfoArrayOutput
}

type RdsInstanceV2NodeInfoArray []RdsInstanceV2NodeInfoInput

func (RdsInstanceV2NodeInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstanceV2NodeInfo)(nil)).Elem()
}

func (i RdsInstanceV2NodeInfoArray) ToRdsInstanceV2NodeInfoArrayOutput() RdsInstanceV2NodeInfoArrayOutput {
	return i.ToRdsInstanceV2NodeInfoArrayOutputWithContext(context.Background())
}

func (i RdsInstanceV2NodeInfoArray) ToRdsInstanceV2NodeInfoArrayOutputWithContext(ctx context.Context) RdsInstanceV2NodeInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstanceV2NodeInfoArrayOutput)
}

type RdsInstanceV2NodeInfoOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2NodeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstanceV2NodeInfo)(nil)).Elem()
}

func (o RdsInstanceV2NodeInfoOutput) ToRdsInstanceV2NodeInfoOutput() RdsInstanceV2NodeInfoOutput {
	return o
}

func (o RdsInstanceV2NodeInfoOutput) ToRdsInstanceV2NodeInfoOutputWithContext(ctx context.Context) RdsInstanceV2NodeInfoOutput {
	return o
}

// The ID of the node.
func (o RdsInstanceV2NodeInfoOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RdsInstanceV2NodeInfo) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// Masternode specs. Pass
// DescribeDBInstanceSpecs Query the instance specifications that can be sold.
func (o RdsInstanceV2NodeInfoOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstanceV2NodeInfo) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Node type, the value is "Primary", "Secondary", "ReadOnly".
func (o RdsInstanceV2NodeInfoOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstanceV2NodeInfo) string { return v.NodeType }).(pulumi.StringOutput)
}

// Zone ID.
func (o RdsInstanceV2NodeInfoOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstanceV2NodeInfo) string { return v.ZoneId }).(pulumi.StringOutput)
}

type RdsInstanceV2NodeInfoArrayOutput struct{ *pulumi.OutputState }

func (RdsInstanceV2NodeInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstanceV2NodeInfo)(nil)).Elem()
}

func (o RdsInstanceV2NodeInfoArrayOutput) ToRdsInstanceV2NodeInfoArrayOutput() RdsInstanceV2NodeInfoArrayOutput {
	return o
}

func (o RdsInstanceV2NodeInfoArrayOutput) ToRdsInstanceV2NodeInfoArrayOutputWithContext(ctx context.Context) RdsInstanceV2NodeInfoArrayOutput {
	return o
}

func (o RdsInstanceV2NodeInfoArrayOutput) Index(i pulumi.IntInput) RdsInstanceV2NodeInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdsInstanceV2NodeInfo {
		return vs[0].([]RdsInstanceV2NodeInfo)[vs[1].(int)]
	}).(RdsInstanceV2NodeInfoOutput)
}

type RdsInstancesV2RdsInstance struct {
	// Payment methods.
	ChargeDetail RdsInstancesV2RdsInstanceChargeDetail `pulumi:"chargeDetail"`
	// The connection info ot the RDS instance.
	ConnectionInfos []RdsInstancesV2RdsInstanceConnectionInfo `pulumi:"connectionInfos"`
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// The engine of the RDS instance.
	DbEngine string `pulumi:"dbEngine"`
	// The version of the RDS instance, Value:
	// MySQL Community:
	// MySQL_5.7 - MySQL 5.7
	// MySQL_8_0 - MySQL 8.0
	// PostgreSQL Community:
	// PostgreSQL_11 - PostgreSQL 11
	// PostgreSQL_12 - PostgreSQL 12
	// Microsoft SQL Server: Not available at this time
	// SQLServer_2019 - SQL Server 2019
	// veDB for MySQL:
	// MySQL_8_0 - MySQL 8.0
	// veDB for PostgreSQL:
	// PostgreSQL_13 - PostgreSQL 13.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The ID of the RDS instance.
	Id string `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName string `pulumi:"instanceName"`
	// The status of the RDS instance, Value:
	// Running - running
	// Creating - Creating
	// Deleting - Deleting
	// Restarting - Restarting
	// Restoring - Restoring
	// Updating - changing
	// Upgrading - Upgrading
	// Error - the error.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The type of the RDS instance, Value:
	// Value:
	// RDS for MySQL:
	// HA - high availability version;
	// RDS for PostgreSQL:
	// HA - high availability version;
	// Microsoft SQL Server: Not available at this time
	// Enterprise - Enterprise Edition
	// Standard - Standard Edition
	// Web - Web version
	// veDB for MySQL:
	// Cluster - Cluster Edition
	// veDB for PostgreSQL:
	// Cluster - Cluster Edition
	// MySQL Sharding:
	// HA - high availability version;.
	InstanceType string `pulumi:"instanceType"`
	// Instance node information.
	NodeDetailInfos []RdsInstancesV2RdsInstanceNodeDetailInfo `pulumi:"nodeDetailInfos"`
	// The number of nodes.
	NodeNumber int `pulumi:"nodeNumber"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Instance intranet port.
	Port string `pulumi:"port"`
	// Subordinate to the project.
	ProjectName string `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// The number of shards.
	ShardNumber int `pulumi:"shardNumber"`
	// Total instance storage space. Unit: GB.
	StorageSpace int `pulumi:"storageSpace"`
	// Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:
	// LocalSSD - local SSD disk
	// When the database type is veDB_MySQL/veDB_PostgreSQL, the value is:
	// DistributedStorage - Distributed Storage.
	StorageType string `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse int `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
	// Time zone.
	TimeZone string `pulumi:"timeZone"`
	// The vpc ID of the RDS instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
}

// RdsInstancesV2RdsInstanceInput is an input type that accepts RdsInstancesV2RdsInstanceArgs and RdsInstancesV2RdsInstanceOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceInput` via:
//
//	RdsInstancesV2RdsInstanceArgs{...}
type RdsInstancesV2RdsInstanceInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceOutput() RdsInstancesV2RdsInstanceOutput
	ToRdsInstancesV2RdsInstanceOutputWithContext(context.Context) RdsInstancesV2RdsInstanceOutput
}

type RdsInstancesV2RdsInstanceArgs struct {
	// Payment methods.
	ChargeDetail RdsInstancesV2RdsInstanceChargeDetailInput `pulumi:"chargeDetail"`
	// The connection info ot the RDS instance.
	ConnectionInfos RdsInstancesV2RdsInstanceConnectionInfoArrayInput `pulumi:"connectionInfos"`
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The engine of the RDS instance.
	DbEngine pulumi.StringInput `pulumi:"dbEngine"`
	// The version of the RDS instance, Value:
	// MySQL Community:
	// MySQL_5.7 - MySQL 5.7
	// MySQL_8_0 - MySQL 8.0
	// PostgreSQL Community:
	// PostgreSQL_11 - PostgreSQL 11
	// PostgreSQL_12 - PostgreSQL 12
	// Microsoft SQL Server: Not available at this time
	// SQLServer_2019 - SQL Server 2019
	// veDB for MySQL:
	// MySQL_8_0 - MySQL 8.0
	// veDB for PostgreSQL:
	// PostgreSQL_13 - PostgreSQL 13.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// The ID of the RDS instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of the RDS instance, Value:
	// Running - running
	// Creating - Creating
	// Deleting - Deleting
	// Restarting - Restarting
	// Restoring - Restoring
	// Updating - changing
	// Upgrading - Upgrading
	// Error - the error.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The type of the RDS instance, Value:
	// Value:
	// RDS for MySQL:
	// HA - high availability version;
	// RDS for PostgreSQL:
	// HA - high availability version;
	// Microsoft SQL Server: Not available at this time
	// Enterprise - Enterprise Edition
	// Standard - Standard Edition
	// Web - Web version
	// veDB for MySQL:
	// Cluster - Cluster Edition
	// veDB for PostgreSQL:
	// Cluster - Cluster Edition
	// MySQL Sharding:
	// HA - high availability version;.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Instance node information.
	NodeDetailInfos RdsInstancesV2RdsInstanceNodeDetailInfoArrayInput `pulumi:"nodeDetailInfos"`
	// The number of nodes.
	NodeNumber pulumi.IntInput `pulumi:"nodeNumber"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Instance intranet port.
	Port pulumi.StringInput `pulumi:"port"`
	// Subordinate to the project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The number of shards.
	ShardNumber pulumi.IntInput `pulumi:"shardNumber"`
	// Total instance storage space. Unit: GB.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:
	// LocalSSD - local SSD disk
	// When the database type is veDB_MySQL/veDB_PostgreSQL, the value is:
	// DistributedStorage - Distributed Storage.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse pulumi.IntInput `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Time zone.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
	// The vpc ID of the RDS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (RdsInstancesV2RdsInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstance)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceArgs) ToRdsInstancesV2RdsInstanceOutput() RdsInstancesV2RdsInstanceOutput {
	return i.ToRdsInstancesV2RdsInstanceOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceArgs) ToRdsInstancesV2RdsInstanceOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceOutput)
}

// RdsInstancesV2RdsInstanceArrayInput is an input type that accepts RdsInstancesV2RdsInstanceArray and RdsInstancesV2RdsInstanceArrayOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceArrayInput` via:
//
//	RdsInstancesV2RdsInstanceArray{ RdsInstancesV2RdsInstanceArgs{...} }
type RdsInstancesV2RdsInstanceArrayInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceArrayOutput() RdsInstancesV2RdsInstanceArrayOutput
	ToRdsInstancesV2RdsInstanceArrayOutputWithContext(context.Context) RdsInstancesV2RdsInstanceArrayOutput
}

type RdsInstancesV2RdsInstanceArray []RdsInstancesV2RdsInstanceInput

func (RdsInstancesV2RdsInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstance)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceArray) ToRdsInstancesV2RdsInstanceArrayOutput() RdsInstancesV2RdsInstanceArrayOutput {
	return i.ToRdsInstancesV2RdsInstanceArrayOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceArray) ToRdsInstancesV2RdsInstanceArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceArrayOutput)
}

type RdsInstancesV2RdsInstanceOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstance)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceOutput) ToRdsInstancesV2RdsInstanceOutput() RdsInstancesV2RdsInstanceOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceOutput) ToRdsInstancesV2RdsInstanceOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceOutput {
	return o
}

// Payment methods.
func (o RdsInstancesV2RdsInstanceOutput) ChargeDetail() RdsInstancesV2RdsInstanceChargeDetailOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) RdsInstancesV2RdsInstanceChargeDetail { return v.ChargeDetail }).(RdsInstancesV2RdsInstanceChargeDetailOutput)
}

// The connection info ot the RDS instance.
func (o RdsInstancesV2RdsInstanceOutput) ConnectionInfos() RdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) []RdsInstancesV2RdsInstanceConnectionInfo { return v.ConnectionInfos }).(RdsInstancesV2RdsInstanceConnectionInfoArrayOutput)
}

// Node creation local time.
func (o RdsInstancesV2RdsInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The engine of the RDS instance.
func (o RdsInstancesV2RdsInstanceOutput) DbEngine() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.DbEngine }).(pulumi.StringOutput)
}

// The version of the RDS instance, Value:
// MySQL Community:
// MySQL_5.7 - MySQL 5.7
// MySQL_8_0 - MySQL 8.0
// PostgreSQL Community:
// PostgreSQL_11 - PostgreSQL 11
// PostgreSQL_12 - PostgreSQL 12
// Microsoft SQL Server: Not available at this time
// SQLServer_2019 - SQL Server 2019
// veDB for MySQL:
// MySQL_8_0 - MySQL 8.0
// veDB for PostgreSQL:
// PostgreSQL_13 - PostgreSQL 13.
func (o RdsInstancesV2RdsInstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The ID of the RDS instance.
func (o RdsInstancesV2RdsInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o RdsInstancesV2RdsInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the RDS instance.
func (o RdsInstancesV2RdsInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of the RDS instance, Value:
// Running - running
// Creating - Creating
// Deleting - Deleting
// Restarting - Restarting
// Restoring - Restoring
// Updating - changing
// Upgrading - Upgrading
// Error - the error.
func (o RdsInstancesV2RdsInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The type of the RDS instance, Value:
// Value:
// RDS for MySQL:
// HA - high availability version;
// RDS for PostgreSQL:
// HA - high availability version;
// Microsoft SQL Server: Not available at this time
// Enterprise - Enterprise Edition
// Standard - Standard Edition
// Web - Web version
// veDB for MySQL:
// Cluster - Cluster Edition
// veDB for PostgreSQL:
// Cluster - Cluster Edition
// MySQL Sharding:
// HA - high availability version;.
func (o RdsInstancesV2RdsInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Instance node information.
func (o RdsInstancesV2RdsInstanceOutput) NodeDetailInfos() RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) []RdsInstancesV2RdsInstanceNodeDetailInfo { return v.NodeDetailInfos }).(RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput)
}

// The number of nodes.
func (o RdsInstancesV2RdsInstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) int { return v.NodeNumber }).(pulumi.IntOutput)
}

// General instance type, different from Custom instance type.
func (o RdsInstancesV2RdsInstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Instance intranet port.
func (o RdsInstancesV2RdsInstanceOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.Port }).(pulumi.StringOutput)
}

// Subordinate to the project.
func (o RdsInstancesV2RdsInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o RdsInstancesV2RdsInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// The number of shards.
func (o RdsInstancesV2RdsInstanceOutput) ShardNumber() pulumi.IntOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) int { return v.ShardNumber }).(pulumi.IntOutput)
}

// Total instance storage space. Unit: GB.
func (o RdsInstancesV2RdsInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:
// LocalSSD - local SSD disk
// When the database type is veDB_MySQL/veDB_PostgreSQL, the value is:
// DistributedStorage - Distributed Storage.
func (o RdsInstancesV2RdsInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The instance has used storage space. Unit: GB.
func (o RdsInstancesV2RdsInstanceOutput) StorageUse() pulumi.IntOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) int { return v.StorageUse }).(pulumi.IntOutput)
}

// The subnet ID of the RDS instance.
func (o RdsInstancesV2RdsInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Time zone.
func (o RdsInstancesV2RdsInstanceOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.TimeZone }).(pulumi.StringOutput)
}

// The vpc ID of the RDS instance.
func (o RdsInstancesV2RdsInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone of the RDS instance.
func (o RdsInstancesV2RdsInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type RdsInstancesV2RdsInstanceArrayOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstance)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceArrayOutput) ToRdsInstancesV2RdsInstanceArrayOutput() RdsInstancesV2RdsInstanceArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceArrayOutput) ToRdsInstancesV2RdsInstanceArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceArrayOutput) Index(i pulumi.IntInput) RdsInstancesV2RdsInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdsInstancesV2RdsInstance {
		return vs[0].([]RdsInstancesV2RdsInstance)[vs[1].(int)]
	}).(RdsInstancesV2RdsInstanceOutput)
}

type RdsInstancesV2RdsInstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew bool `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime string `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType string `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime string `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit string `pulumi:"periodUnit"`
}

// RdsInstancesV2RdsInstanceChargeDetailInput is an input type that accepts RdsInstancesV2RdsInstanceChargeDetailArgs and RdsInstancesV2RdsInstanceChargeDetailOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceChargeDetailInput` via:
//
//	RdsInstancesV2RdsInstanceChargeDetailArgs{...}
type RdsInstancesV2RdsInstanceChargeDetailInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceChargeDetailOutput() RdsInstancesV2RdsInstanceChargeDetailOutput
	ToRdsInstancesV2RdsInstanceChargeDetailOutputWithContext(context.Context) RdsInstancesV2RdsInstanceChargeDetailOutput
}

type RdsInstancesV2RdsInstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime pulumi.StringInput `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
}

func (RdsInstancesV2RdsInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceChargeDetail)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceChargeDetailArgs) ToRdsInstancesV2RdsInstanceChargeDetailOutput() RdsInstancesV2RdsInstanceChargeDetailOutput {
	return i.ToRdsInstancesV2RdsInstanceChargeDetailOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceChargeDetailArgs) ToRdsInstancesV2RdsInstanceChargeDetailOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceChargeDetailOutput)
}

type RdsInstancesV2RdsInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceChargeDetail)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceChargeDetailOutput) ToRdsInstancesV2RdsInstanceChargeDetailOutput() RdsInstancesV2RdsInstanceChargeDetailOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceChargeDetailOutput) ToRdsInstancesV2RdsInstanceChargeDetailOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
// Autorenew_Enable
// Autorenew_Disable (default).
func (o RdsInstancesV2RdsInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// Billing expiry time (yearly and monthly only).
func (o RdsInstancesV2RdsInstanceChargeDetailOutput) ChargeEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceChargeDetail) string { return v.ChargeEndTime }).(pulumi.StringOutput)
}

// Billing start time (pay-as-you-go & monthly subscription).
func (o RdsInstancesV2RdsInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// Pay status. Value:
// normal - normal
// overdue - overdue
// .
func (o RdsInstancesV2RdsInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of the RDS instance.
func (o RdsInstancesV2RdsInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
func (o RdsInstancesV2RdsInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// Shutdown time in arrears (pay-as-you-go & monthly subscription).
func (o RdsInstancesV2RdsInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o RdsInstancesV2RdsInstanceChargeDetailOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceChargeDetail) int { return v.Period }).(pulumi.IntOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o RdsInstancesV2RdsInstanceChargeDetailOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceChargeDetail) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

type RdsInstancesV2RdsInstanceConnectionInfo struct {
	// Address list.
	Addresses []RdsInstancesV2RdsInstanceConnectionInfoAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType string `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights []RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode string `pulumi:"readWriteMode"`
}

// RdsInstancesV2RdsInstanceConnectionInfoInput is an input type that accepts RdsInstancesV2RdsInstanceConnectionInfoArgs and RdsInstancesV2RdsInstanceConnectionInfoOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceConnectionInfoInput` via:
//
//	RdsInstancesV2RdsInstanceConnectionInfoArgs{...}
type RdsInstancesV2RdsInstanceConnectionInfoInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceConnectionInfoOutput() RdsInstancesV2RdsInstanceConnectionInfoOutput
	ToRdsInstancesV2RdsInstanceConnectionInfoOutputWithContext(context.Context) RdsInstancesV2RdsInstanceConnectionInfoOutput
}

type RdsInstancesV2RdsInstanceConnectionInfoArgs struct {
	// Address list.
	Addresses RdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringInput `pulumi:"readWriteMode"`
}

func (RdsInstancesV2RdsInstanceConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfo)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceConnectionInfoArgs) ToRdsInstancesV2RdsInstanceConnectionInfoOutput() RdsInstancesV2RdsInstanceConnectionInfoOutput {
	return i.ToRdsInstancesV2RdsInstanceConnectionInfoOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceConnectionInfoArgs) ToRdsInstancesV2RdsInstanceConnectionInfoOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceConnectionInfoOutput)
}

// RdsInstancesV2RdsInstanceConnectionInfoArrayInput is an input type that accepts RdsInstancesV2RdsInstanceConnectionInfoArray and RdsInstancesV2RdsInstanceConnectionInfoArrayOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceConnectionInfoArrayInput` via:
//
//	RdsInstancesV2RdsInstanceConnectionInfoArray{ RdsInstancesV2RdsInstanceConnectionInfoArgs{...} }
type RdsInstancesV2RdsInstanceConnectionInfoArrayInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceConnectionInfoArrayOutput() RdsInstancesV2RdsInstanceConnectionInfoArrayOutput
	ToRdsInstancesV2RdsInstanceConnectionInfoArrayOutputWithContext(context.Context) RdsInstancesV2RdsInstanceConnectionInfoArrayOutput
}

type RdsInstancesV2RdsInstanceConnectionInfoArray []RdsInstancesV2RdsInstanceConnectionInfoInput

func (RdsInstancesV2RdsInstanceConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstanceConnectionInfo)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceConnectionInfoArray) ToRdsInstancesV2RdsInstanceConnectionInfoArrayOutput() RdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return i.ToRdsInstancesV2RdsInstanceConnectionInfoArrayOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceConnectionInfoArray) ToRdsInstancesV2RdsInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceConnectionInfoArrayOutput)
}

type RdsInstancesV2RdsInstanceConnectionInfoOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfo)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) ToRdsInstancesV2RdsInstanceConnectionInfoOutput() RdsInstancesV2RdsInstanceConnectionInfoOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) ToRdsInstancesV2RdsInstanceConnectionInfoOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoOutput {
	return o
}

// Address list.
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) Addresses() RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) []RdsInstancesV2RdsInstanceConnectionInfoAddress {
		return v.Addresses
	}).(RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) AutoAddNewNodes() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) string { return v.AutoAddNewNodes }).(pulumi.StringOutput)
}

// Address description.
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) string { return v.Description }).(pulumi.StringOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) EnableReadOnly() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) string { return v.EnableReadOnly }).(pulumi.StringOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) EnableReadWriteSplitting() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) string { return v.EnableReadWriteSplitting }).(pulumi.StringOutput)
}

// Instance connection terminal ID.
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The instance connection terminal name.
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) string { return v.EndpointName }).(pulumi.StringOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) ReadOnlyNodeWeights() RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) []RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight {
		return v.ReadOnlyNodeWeights
	}).(RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o RdsInstancesV2RdsInstanceConnectionInfoOutput) ReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfo) string { return v.ReadWriteMode }).(pulumi.StringOutput)
}

type RdsInstancesV2RdsInstanceConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstanceConnectionInfo)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceConnectionInfoArrayOutput) ToRdsInstancesV2RdsInstanceConnectionInfoArrayOutput() RdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceConnectionInfoArrayOutput) ToRdsInstancesV2RdsInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceConnectionInfoArrayOutput) Index(i pulumi.IntInput) RdsInstancesV2RdsInstanceConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdsInstancesV2RdsInstanceConnectionInfo {
		return vs[0].([]RdsInstancesV2RdsInstanceConnectionInfo)[vs[1].(int)]
	}).(RdsInstancesV2RdsInstanceConnectionInfoOutput)
}

type RdsInstancesV2RdsInstanceConnectionInfoAddress struct {
	// Connect domain name.
	Domain string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId string `pulumi:"eipId"`
	// The IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType string `pulumi:"networkType"`
	// Instance intranet port.
	Port string `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
}

// RdsInstancesV2RdsInstanceConnectionInfoAddressInput is an input type that accepts RdsInstancesV2RdsInstanceConnectionInfoAddressArgs and RdsInstancesV2RdsInstanceConnectionInfoAddressOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceConnectionInfoAddressInput` via:
//
//	RdsInstancesV2RdsInstanceConnectionInfoAddressArgs{...}
type RdsInstancesV2RdsInstanceConnectionInfoAddressInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceConnectionInfoAddressOutput() RdsInstancesV2RdsInstanceConnectionInfoAddressOutput
	ToRdsInstancesV2RdsInstanceConnectionInfoAddressOutputWithContext(context.Context) RdsInstancesV2RdsInstanceConnectionInfoAddressOutput
}

type RdsInstancesV2RdsInstanceConnectionInfoAddressArgs struct {
	// Connect domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// Instance intranet port.
	Port pulumi.StringInput `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (RdsInstancesV2RdsInstanceConnectionInfoAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoAddress)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceConnectionInfoAddressArgs) ToRdsInstancesV2RdsInstanceConnectionInfoAddressOutput() RdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return i.ToRdsInstancesV2RdsInstanceConnectionInfoAddressOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceConnectionInfoAddressArgs) ToRdsInstancesV2RdsInstanceConnectionInfoAddressOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceConnectionInfoAddressOutput)
}

// RdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput is an input type that accepts RdsInstancesV2RdsInstanceConnectionInfoAddressArray and RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput` via:
//
//	RdsInstancesV2RdsInstanceConnectionInfoAddressArray{ RdsInstancesV2RdsInstanceConnectionInfoAddressArgs{...} }
type RdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput() RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput
	ToRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutputWithContext(context.Context) RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput
}

type RdsInstancesV2RdsInstanceConnectionInfoAddressArray []RdsInstancesV2RdsInstanceConnectionInfoAddressInput

func (RdsInstancesV2RdsInstanceConnectionInfoAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstanceConnectionInfoAddress)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceConnectionInfoAddressArray) ToRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput() RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return i.ToRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceConnectionInfoAddressArray) ToRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput)
}

type RdsInstancesV2RdsInstanceConnectionInfoAddressOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceConnectionInfoAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoAddress)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceConnectionInfoAddressOutput) ToRdsInstancesV2RdsInstanceConnectionInfoAddressOutput() RdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceConnectionInfoAddressOutput) ToRdsInstancesV2RdsInstanceConnectionInfoAddressOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return o
}

// Connect domain name.
func (o RdsInstancesV2RdsInstanceConnectionInfoAddressOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o RdsInstancesV2RdsInstanceConnectionInfoAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The IP Address.
func (o RdsInstancesV2RdsInstanceConnectionInfoAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o RdsInstancesV2RdsInstanceConnectionInfoAddressOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.NetworkType }).(pulumi.StringOutput)
}

// Instance intranet port.
func (o RdsInstancesV2RdsInstanceConnectionInfoAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.Port }).(pulumi.StringOutput)
}

// The subnet ID of the RDS instance.
func (o RdsInstancesV2RdsInstanceConnectionInfoAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstanceConnectionInfoAddress)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput) ToRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput() RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput) ToRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput) Index(i pulumi.IntInput) RdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdsInstancesV2RdsInstanceConnectionInfoAddress {
		return vs[0].([]RdsInstancesV2RdsInstanceConnectionInfoAddress)[vs[1].(int)]
	}).(RdsInstancesV2RdsInstanceConnectionInfoAddressOutput)
}

type RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight struct {
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The weight of the node.
	Weight int `pulumi:"weight"`
}

// RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput is an input type that accepts RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs and RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput` via:
//
//	RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs{...}
type RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput() RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput
	ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutputWithContext(context.Context) RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput
}

type RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs struct {
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs) ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput() RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return i.ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs) ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput)
}

// RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput is an input type that accepts RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray and RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput` via:
//
//	RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray{ RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs{...} }
type RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput() RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput
	ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(context.Context) RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput
}

type RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray []RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput

func (RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray) ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput() RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return i.ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray) ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput)
}

type RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput() RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return o
}

// Node ID.
func (o RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight) string { return v.NodeId }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight) string { return v.NodeType }).(pulumi.StringOutput)
}

// The weight of the node.
func (o RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput) ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput() RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput) ToRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput) Index(i pulumi.IntInput) RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight {
		return vs[0].([]RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)[vs[1].(int)]
	}).(RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput)
}

type RdsInstancesV2RdsInstanceNodeDetailInfo struct {
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus string `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// Node updates local time.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size. For example: 1 means 1U.
	VCpu int `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
}

// RdsInstancesV2RdsInstanceNodeDetailInfoInput is an input type that accepts RdsInstancesV2RdsInstanceNodeDetailInfoArgs and RdsInstancesV2RdsInstanceNodeDetailInfoOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceNodeDetailInfoInput` via:
//
//	RdsInstancesV2RdsInstanceNodeDetailInfoArgs{...}
type RdsInstancesV2RdsInstanceNodeDetailInfoInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceNodeDetailInfoOutput() RdsInstancesV2RdsInstanceNodeDetailInfoOutput
	ToRdsInstancesV2RdsInstanceNodeDetailInfoOutputWithContext(context.Context) RdsInstancesV2RdsInstanceNodeDetailInfoOutput
}

type RdsInstancesV2RdsInstanceNodeDetailInfoArgs struct {
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Node updates local time.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size. For example: 1 means 1U.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (RdsInstancesV2RdsInstanceNodeDetailInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceNodeDetailInfo)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceNodeDetailInfoArgs) ToRdsInstancesV2RdsInstanceNodeDetailInfoOutput() RdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return i.ToRdsInstancesV2RdsInstanceNodeDetailInfoOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceNodeDetailInfoArgs) ToRdsInstancesV2RdsInstanceNodeDetailInfoOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceNodeDetailInfoOutput)
}

// RdsInstancesV2RdsInstanceNodeDetailInfoArrayInput is an input type that accepts RdsInstancesV2RdsInstanceNodeDetailInfoArray and RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput values.
// You can construct a concrete instance of `RdsInstancesV2RdsInstanceNodeDetailInfoArrayInput` via:
//
//	RdsInstancesV2RdsInstanceNodeDetailInfoArray{ RdsInstancesV2RdsInstanceNodeDetailInfoArgs{...} }
type RdsInstancesV2RdsInstanceNodeDetailInfoArrayInput interface {
	pulumi.Input

	ToRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput() RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput
	ToRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutputWithContext(context.Context) RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput
}

type RdsInstancesV2RdsInstanceNodeDetailInfoArray []RdsInstancesV2RdsInstanceNodeDetailInfoInput

func (RdsInstancesV2RdsInstanceNodeDetailInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstanceNodeDetailInfo)(nil)).Elem()
}

func (i RdsInstancesV2RdsInstanceNodeDetailInfoArray) ToRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput() RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return i.ToRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutputWithContext(context.Background())
}

func (i RdsInstancesV2RdsInstanceNodeDetailInfoArray) ToRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput)
}

type RdsInstancesV2RdsInstanceNodeDetailInfoOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceNodeDetailInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RdsInstancesV2RdsInstanceNodeDetailInfo)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) ToRdsInstancesV2RdsInstanceNodeDetailInfoOutput() RdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) ToRdsInstancesV2RdsInstanceNodeDetailInfoOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return o
}

// Node creation local time.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Memory size in GB.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) int { return v.Memory }).(pulumi.IntOutput)
}

// Node ID.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.NodeId }).(pulumi.StringOutput)
}

// General instance type, different from Custom instance type.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Node state, value: aligned with instance state.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.NodeType }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.RegionId }).(pulumi.StringOutput)
}

// Node updates local time.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size. For example: 1 means 1U.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) int { return v.VCpu }).(pulumi.IntOutput)
}

// The available zone of the RDS instance.
func (o RdsInstancesV2RdsInstanceNodeDetailInfoOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v RdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.ZoneId }).(pulumi.StringOutput)
}

type RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput struct{ *pulumi.OutputState }

func (RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RdsInstancesV2RdsInstanceNodeDetailInfo)(nil)).Elem()
}

func (o RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput) ToRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput() RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput) ToRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutputWithContext(ctx context.Context) RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return o
}

func (o RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput) Index(i pulumi.IntInput) RdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RdsInstancesV2RdsInstanceNodeDetailInfo {
		return vs[0].([]RdsInstancesV2RdsInstanceNodeDetailInfo)[vs[1].(int)]
	}).(RdsInstancesV2RdsInstanceNodeDetailInfoOutput)
}

type GetRdsInstancesV2RdsInstance struct {
	// Payment methods.
	ChargeDetail GetRdsInstancesV2RdsInstanceChargeDetail `pulumi:"chargeDetail"`
	// The connection info ot the RDS instance.
	ConnectionInfos []GetRdsInstancesV2RdsInstanceConnectionInfo `pulumi:"connectionInfos"`
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// The engine of the RDS instance.
	DbEngine string `pulumi:"dbEngine"`
	// The version of the RDS instance, Value:
	// MySQL Community:
	// MySQL_5.7 - MySQL 5.7
	// MySQL_8_0 - MySQL 8.0
	// PostgreSQL Community:
	// PostgreSQL_11 - PostgreSQL 11
	// PostgreSQL_12 - PostgreSQL 12
	// Microsoft SQL Server: Not available at this time
	// SQLServer_2019 - SQL Server 2019
	// veDB for MySQL:
	// MySQL_8_0 - MySQL 8.0
	// veDB for PostgreSQL:
	// PostgreSQL_13 - PostgreSQL 13.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The ID of the RDS instance.
	Id string `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName string `pulumi:"instanceName"`
	// The status of the RDS instance, Value:
	// Running - running
	// Creating - Creating
	// Deleting - Deleting
	// Restarting - Restarting
	// Restoring - Restoring
	// Updating - changing
	// Upgrading - Upgrading
	// Error - the error.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The type of the RDS instance, Value:
	// Value:
	// RDS for MySQL:
	// HA - high availability version;
	// RDS for PostgreSQL:
	// HA - high availability version;
	// Microsoft SQL Server: Not available at this time
	// Enterprise - Enterprise Edition
	// Standard - Standard Edition
	// Web - Web version
	// veDB for MySQL:
	// Cluster - Cluster Edition
	// veDB for PostgreSQL:
	// Cluster - Cluster Edition
	// MySQL Sharding:
	// HA - high availability version;.
	InstanceType string `pulumi:"instanceType"`
	// Instance node information.
	NodeDetailInfos []GetRdsInstancesV2RdsInstanceNodeDetailInfo `pulumi:"nodeDetailInfos"`
	// The number of nodes.
	NodeNumber int `pulumi:"nodeNumber"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Instance intranet port.
	Port string `pulumi:"port"`
	// Subordinate to the project.
	ProjectName string `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// The number of shards.
	ShardNumber int `pulumi:"shardNumber"`
	// Total instance storage space. Unit: GB.
	StorageSpace int `pulumi:"storageSpace"`
	// Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:
	// LocalSSD - local SSD disk
	// When the database type is veDB_MySQL/veDB_PostgreSQL, the value is:
	// DistributedStorage - Distributed Storage.
	StorageType string `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse int `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
	// Time zone.
	TimeZone string `pulumi:"timeZone"`
	// The vpc ID of the RDS instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
}

// GetRdsInstancesV2RdsInstanceInput is an input type that accepts GetRdsInstancesV2RdsInstanceArgs and GetRdsInstancesV2RdsInstanceOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceInput` via:
//
//	GetRdsInstancesV2RdsInstanceArgs{...}
type GetRdsInstancesV2RdsInstanceInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceOutput() GetRdsInstancesV2RdsInstanceOutput
	ToGetRdsInstancesV2RdsInstanceOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceOutput
}

type GetRdsInstancesV2RdsInstanceArgs struct {
	// Payment methods.
	ChargeDetail GetRdsInstancesV2RdsInstanceChargeDetailInput `pulumi:"chargeDetail"`
	// The connection info ot the RDS instance.
	ConnectionInfos GetRdsInstancesV2RdsInstanceConnectionInfoArrayInput `pulumi:"connectionInfos"`
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The engine of the RDS instance.
	DbEngine pulumi.StringInput `pulumi:"dbEngine"`
	// The version of the RDS instance, Value:
	// MySQL Community:
	// MySQL_5.7 - MySQL 5.7
	// MySQL_8_0 - MySQL 8.0
	// PostgreSQL Community:
	// PostgreSQL_11 - PostgreSQL 11
	// PostgreSQL_12 - PostgreSQL 12
	// Microsoft SQL Server: Not available at this time
	// SQLServer_2019 - SQL Server 2019
	// veDB for MySQL:
	// MySQL_8_0 - MySQL 8.0
	// veDB for PostgreSQL:
	// PostgreSQL_13 - PostgreSQL 13.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// The ID of the RDS instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of the RDS instance, Value:
	// Running - running
	// Creating - Creating
	// Deleting - Deleting
	// Restarting - Restarting
	// Restoring - Restoring
	// Updating - changing
	// Upgrading - Upgrading
	// Error - the error.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The type of the RDS instance, Value:
	// Value:
	// RDS for MySQL:
	// HA - high availability version;
	// RDS for PostgreSQL:
	// HA - high availability version;
	// Microsoft SQL Server: Not available at this time
	// Enterprise - Enterprise Edition
	// Standard - Standard Edition
	// Web - Web version
	// veDB for MySQL:
	// Cluster - Cluster Edition
	// veDB for PostgreSQL:
	// Cluster - Cluster Edition
	// MySQL Sharding:
	// HA - high availability version;.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Instance node information.
	NodeDetailInfos GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayInput `pulumi:"nodeDetailInfos"`
	// The number of nodes.
	NodeNumber pulumi.IntInput `pulumi:"nodeNumber"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Instance intranet port.
	Port pulumi.StringInput `pulumi:"port"`
	// Subordinate to the project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The number of shards.
	ShardNumber pulumi.IntInput `pulumi:"shardNumber"`
	// Total instance storage space. Unit: GB.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:
	// LocalSSD - local SSD disk
	// When the database type is veDB_MySQL/veDB_PostgreSQL, the value is:
	// DistributedStorage - Distributed Storage.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse pulumi.IntInput `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Time zone.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
	// The vpc ID of the RDS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetRdsInstancesV2RdsInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstance)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceArgs) ToGetRdsInstancesV2RdsInstanceOutput() GetRdsInstancesV2RdsInstanceOutput {
	return i.ToGetRdsInstancesV2RdsInstanceOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceArgs) ToGetRdsInstancesV2RdsInstanceOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceOutput)
}

// GetRdsInstancesV2RdsInstanceArrayInput is an input type that accepts GetRdsInstancesV2RdsInstanceArray and GetRdsInstancesV2RdsInstanceArrayOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceArrayInput` via:
//
//	GetRdsInstancesV2RdsInstanceArray{ GetRdsInstancesV2RdsInstanceArgs{...} }
type GetRdsInstancesV2RdsInstanceArrayInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceArrayOutput() GetRdsInstancesV2RdsInstanceArrayOutput
	ToGetRdsInstancesV2RdsInstanceArrayOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceArrayOutput
}

type GetRdsInstancesV2RdsInstanceArray []GetRdsInstancesV2RdsInstanceInput

func (GetRdsInstancesV2RdsInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstance)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceArray) ToGetRdsInstancesV2RdsInstanceArrayOutput() GetRdsInstancesV2RdsInstanceArrayOutput {
	return i.ToGetRdsInstancesV2RdsInstanceArrayOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceArray) ToGetRdsInstancesV2RdsInstanceArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceArrayOutput)
}

type GetRdsInstancesV2RdsInstanceOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstance)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceOutput) ToGetRdsInstancesV2RdsInstanceOutput() GetRdsInstancesV2RdsInstanceOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceOutput) ToGetRdsInstancesV2RdsInstanceOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceOutput {
	return o
}

// Payment methods.
func (o GetRdsInstancesV2RdsInstanceOutput) ChargeDetail() GetRdsInstancesV2RdsInstanceChargeDetailOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) GetRdsInstancesV2RdsInstanceChargeDetail { return v.ChargeDetail }).(GetRdsInstancesV2RdsInstanceChargeDetailOutput)
}

// The connection info ot the RDS instance.
func (o GetRdsInstancesV2RdsInstanceOutput) ConnectionInfos() GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) []GetRdsInstancesV2RdsInstanceConnectionInfo {
		return v.ConnectionInfos
	}).(GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput)
}

// Node creation local time.
func (o GetRdsInstancesV2RdsInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The engine of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceOutput) DbEngine() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.DbEngine }).(pulumi.StringOutput)
}

// The version of the RDS instance, Value:
// MySQL Community:
// MySQL_5.7 - MySQL 5.7
// MySQL_8_0 - MySQL 8.0
// PostgreSQL Community:
// PostgreSQL_11 - PostgreSQL 11
// PostgreSQL_12 - PostgreSQL 12
// Microsoft SQL Server: Not available at this time
// SQLServer_2019 - SQL Server 2019
// veDB for MySQL:
// MySQL_8_0 - MySQL 8.0
// veDB for PostgreSQL:
// PostgreSQL_13 - PostgreSQL 13.
func (o GetRdsInstancesV2RdsInstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The ID of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of the RDS instance, Value:
// Running - running
// Creating - Creating
// Deleting - Deleting
// Restarting - Restarting
// Restoring - Restoring
// Updating - changing
// Upgrading - Upgrading
// Error - the error.
func (o GetRdsInstancesV2RdsInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The type of the RDS instance, Value:
// Value:
// RDS for MySQL:
// HA - high availability version;
// RDS for PostgreSQL:
// HA - high availability version;
// Microsoft SQL Server: Not available at this time
// Enterprise - Enterprise Edition
// Standard - Standard Edition
// Web - Web version
// veDB for MySQL:
// Cluster - Cluster Edition
// veDB for PostgreSQL:
// Cluster - Cluster Edition
// MySQL Sharding:
// HA - high availability version;.
func (o GetRdsInstancesV2RdsInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Instance node information.
func (o GetRdsInstancesV2RdsInstanceOutput) NodeDetailInfos() GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) []GetRdsInstancesV2RdsInstanceNodeDetailInfo {
		return v.NodeDetailInfos
	}).(GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput)
}

// The number of nodes.
func (o GetRdsInstancesV2RdsInstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) int { return v.NodeNumber }).(pulumi.IntOutput)
}

// General instance type, different from Custom instance type.
func (o GetRdsInstancesV2RdsInstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Instance intranet port.
func (o GetRdsInstancesV2RdsInstanceOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.Port }).(pulumi.StringOutput)
}

// Subordinate to the project.
func (o GetRdsInstancesV2RdsInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// The number of shards.
func (o GetRdsInstancesV2RdsInstanceOutput) ShardNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) int { return v.ShardNumber }).(pulumi.IntOutput)
}

// Total instance storage space. Unit: GB.
func (o GetRdsInstancesV2RdsInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:
// LocalSSD - local SSD disk
// When the database type is veDB_MySQL/veDB_PostgreSQL, the value is:
// DistributedStorage - Distributed Storage.
func (o GetRdsInstancesV2RdsInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The instance has used storage space. Unit: GB.
func (o GetRdsInstancesV2RdsInstanceOutput) StorageUse() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) int { return v.StorageUse }).(pulumi.IntOutput)
}

// The subnet ID of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Time zone.
func (o GetRdsInstancesV2RdsInstanceOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.TimeZone }).(pulumi.StringOutput)
}

// The vpc ID of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetRdsInstancesV2RdsInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstance)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceArrayOutput) ToGetRdsInstancesV2RdsInstanceArrayOutput() GetRdsInstancesV2RdsInstanceArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceArrayOutput) ToGetRdsInstancesV2RdsInstanceArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceArrayOutput) Index(i pulumi.IntInput) GetRdsInstancesV2RdsInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRdsInstancesV2RdsInstance {
		return vs[0].([]GetRdsInstancesV2RdsInstance)[vs[1].(int)]
	}).(GetRdsInstancesV2RdsInstanceOutput)
}

type GetRdsInstancesV2RdsInstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew bool `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime string `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType string `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime string `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit string `pulumi:"periodUnit"`
}

// GetRdsInstancesV2RdsInstanceChargeDetailInput is an input type that accepts GetRdsInstancesV2RdsInstanceChargeDetailArgs and GetRdsInstancesV2RdsInstanceChargeDetailOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceChargeDetailInput` via:
//
//	GetRdsInstancesV2RdsInstanceChargeDetailArgs{...}
type GetRdsInstancesV2RdsInstanceChargeDetailInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceChargeDetailOutput() GetRdsInstancesV2RdsInstanceChargeDetailOutput
	ToGetRdsInstancesV2RdsInstanceChargeDetailOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceChargeDetailOutput
}

type GetRdsInstancesV2RdsInstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime pulumi.StringInput `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
}

func (GetRdsInstancesV2RdsInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceChargeDetail)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceChargeDetailArgs) ToGetRdsInstancesV2RdsInstanceChargeDetailOutput() GetRdsInstancesV2RdsInstanceChargeDetailOutput {
	return i.ToGetRdsInstancesV2RdsInstanceChargeDetailOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceChargeDetailArgs) ToGetRdsInstancesV2RdsInstanceChargeDetailOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceChargeDetailOutput)
}

type GetRdsInstancesV2RdsInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceChargeDetail)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) ToGetRdsInstancesV2RdsInstanceChargeDetailOutput() GetRdsInstancesV2RdsInstanceChargeDetailOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) ToGetRdsInstancesV2RdsInstanceChargeDetailOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
// Autorenew_Enable
// Autorenew_Disable (default).
func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// Billing expiry time (yearly and monthly only).
func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) ChargeEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceChargeDetail) string { return v.ChargeEndTime }).(pulumi.StringOutput)
}

// Billing start time (pay-as-you-go & monthly subscription).
func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// Pay status. Value:
// normal - normal
// overdue - overdue
// .
func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// Shutdown time in arrears (pay-as-you-go & monthly subscription).
func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceChargeDetail) int { return v.Period }).(pulumi.IntOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o GetRdsInstancesV2RdsInstanceChargeDetailOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceChargeDetail) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

type GetRdsInstancesV2RdsInstanceConnectionInfo struct {
	// Address list.
	Addresses []GetRdsInstancesV2RdsInstanceConnectionInfoAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType string `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights []GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode string `pulumi:"readWriteMode"`
}

// GetRdsInstancesV2RdsInstanceConnectionInfoInput is an input type that accepts GetRdsInstancesV2RdsInstanceConnectionInfoArgs and GetRdsInstancesV2RdsInstanceConnectionInfoOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceConnectionInfoInput` via:
//
//	GetRdsInstancesV2RdsInstanceConnectionInfoArgs{...}
type GetRdsInstancesV2RdsInstanceConnectionInfoInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceConnectionInfoOutput() GetRdsInstancesV2RdsInstanceConnectionInfoOutput
	ToGetRdsInstancesV2RdsInstanceConnectionInfoOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoOutput
}

type GetRdsInstancesV2RdsInstanceConnectionInfoArgs struct {
	// Address list.
	Addresses GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringInput `pulumi:"readWriteMode"`
}

func (GetRdsInstancesV2RdsInstanceConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfo)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoArgs) ToGetRdsInstancesV2RdsInstanceConnectionInfoOutput() GetRdsInstancesV2RdsInstanceConnectionInfoOutput {
	return i.ToGetRdsInstancesV2RdsInstanceConnectionInfoOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoArgs) ToGetRdsInstancesV2RdsInstanceConnectionInfoOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceConnectionInfoOutput)
}

// GetRdsInstancesV2RdsInstanceConnectionInfoArrayInput is an input type that accepts GetRdsInstancesV2RdsInstanceConnectionInfoArray and GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceConnectionInfoArrayInput` via:
//
//	GetRdsInstancesV2RdsInstanceConnectionInfoArray{ GetRdsInstancesV2RdsInstanceConnectionInfoArgs{...} }
type GetRdsInstancesV2RdsInstanceConnectionInfoArrayInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput() GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput
	ToGetRdsInstancesV2RdsInstanceConnectionInfoArrayOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput
}

type GetRdsInstancesV2RdsInstanceConnectionInfoArray []GetRdsInstancesV2RdsInstanceConnectionInfoInput

func (GetRdsInstancesV2RdsInstanceConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstanceConnectionInfo)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoArray) ToGetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput() GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return i.ToGetRdsInstancesV2RdsInstanceConnectionInfoArrayOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoArray) ToGetRdsInstancesV2RdsInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput)
}

type GetRdsInstancesV2RdsInstanceConnectionInfoOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfo)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoOutput() GetRdsInstancesV2RdsInstanceConnectionInfoOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoOutput {
	return o
}

// Address list.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) Addresses() GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) []GetRdsInstancesV2RdsInstanceConnectionInfoAddress {
		return v.Addresses
	}).(GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) AutoAddNewNodes() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) string { return v.AutoAddNewNodes }).(pulumi.StringOutput)
}

// Address description.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) string { return v.Description }).(pulumi.StringOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) EnableReadOnly() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) string { return v.EnableReadOnly }).(pulumi.StringOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) EnableReadWriteSplitting() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) string { return v.EnableReadWriteSplitting }).(pulumi.StringOutput)
}

// Instance connection terminal ID.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The instance connection terminal name.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) string { return v.EndpointName }).(pulumi.StringOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) ReadOnlyNodeWeights() GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) []GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight {
		return v.ReadOnlyNodeWeights
	}).(GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o GetRdsInstancesV2RdsInstanceConnectionInfoOutput) ReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfo) string { return v.ReadWriteMode }).(pulumi.StringOutput)
}

type GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstanceConnectionInfo)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput() GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput) Index(i pulumi.IntInput) GetRdsInstancesV2RdsInstanceConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRdsInstancesV2RdsInstanceConnectionInfo {
		return vs[0].([]GetRdsInstancesV2RdsInstanceConnectionInfo)[vs[1].(int)]
	}).(GetRdsInstancesV2RdsInstanceConnectionInfoOutput)
}

type GetRdsInstancesV2RdsInstanceConnectionInfoAddress struct {
	// Connect domain name.
	Domain string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId string `pulumi:"eipId"`
	// The IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType string `pulumi:"networkType"`
	// Instance intranet port.
	Port string `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
}

// GetRdsInstancesV2RdsInstanceConnectionInfoAddressInput is an input type that accepts GetRdsInstancesV2RdsInstanceConnectionInfoAddressArgs and GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceConnectionInfoAddressInput` via:
//
//	GetRdsInstancesV2RdsInstanceConnectionInfoAddressArgs{...}
type GetRdsInstancesV2RdsInstanceConnectionInfoAddressInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput() GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput
	ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput
}

type GetRdsInstancesV2RdsInstanceConnectionInfoAddressArgs struct {
	// Connect domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// Instance intranet port.
	Port pulumi.StringInput `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetRdsInstancesV2RdsInstanceConnectionInfoAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoAddress)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoAddressArgs) ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput() GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return i.ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoAddressArgs) ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput)
}

// GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput is an input type that accepts GetRdsInstancesV2RdsInstanceConnectionInfoAddressArray and GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput` via:
//
//	GetRdsInstancesV2RdsInstanceConnectionInfoAddressArray{ GetRdsInstancesV2RdsInstanceConnectionInfoAddressArgs{...} }
type GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput() GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput
	ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput
}

type GetRdsInstancesV2RdsInstanceConnectionInfoAddressArray []GetRdsInstancesV2RdsInstanceConnectionInfoAddressInput

func (GetRdsInstancesV2RdsInstanceConnectionInfoAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstanceConnectionInfoAddress)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoAddressArray) ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput() GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return i.ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoAddressArray) ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput)
}

type GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoAddress)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput() GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return o
}

// Connect domain name.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The IP Address.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.NetworkType }).(pulumi.StringOutput)
}

// Instance intranet port.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.Port }).(pulumi.StringOutput)
}

// The subnet ID of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfoAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstanceConnectionInfoAddress)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput() GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput) Index(i pulumi.IntInput) GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRdsInstancesV2RdsInstanceConnectionInfoAddress {
		return vs[0].([]GetRdsInstancesV2RdsInstanceConnectionInfoAddress)[vs[1].(int)]
	}).(GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput)
}

type GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight struct {
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The weight of the node.
	Weight int `pulumi:"weight"`
}

// GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput is an input type that accepts GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs and GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput` via:
//
//	GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs{...}
type GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput() GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput
	ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput
}

type GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs struct {
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs) ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput() GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return i.ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs) ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput)
}

// GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput is an input type that accepts GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray and GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput` via:
//
//	GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray{ GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs{...} }
type GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput() GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput
	ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput
}

type GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray []GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput

func (GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray) ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput() GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return i.ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray) ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput)
}

type GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput() GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return o
}

// Node ID.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight) string { return v.NodeId }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight) string { return v.NodeType }).(pulumi.StringOutput)
}

// The weight of the node.
func (o GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput() GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput) ToGetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput) Index(i pulumi.IntInput) GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight {
		return vs[0].([]GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeight)[vs[1].(int)]
	}).(GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput)
}

type GetRdsInstancesV2RdsInstanceNodeDetailInfo struct {
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus string `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// Node updates local time.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size. For example: 1 means 1U.
	VCpu int `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
}

// GetRdsInstancesV2RdsInstanceNodeDetailInfoInput is an input type that accepts GetRdsInstancesV2RdsInstanceNodeDetailInfoArgs and GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceNodeDetailInfoInput` via:
//
//	GetRdsInstancesV2RdsInstanceNodeDetailInfoArgs{...}
type GetRdsInstancesV2RdsInstanceNodeDetailInfoInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceNodeDetailInfoOutput() GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput
	ToGetRdsInstancesV2RdsInstanceNodeDetailInfoOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput
}

type GetRdsInstancesV2RdsInstanceNodeDetailInfoArgs struct {
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Node updates local time.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size. For example: 1 means 1U.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetRdsInstancesV2RdsInstanceNodeDetailInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceNodeDetailInfo)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceNodeDetailInfoArgs) ToGetRdsInstancesV2RdsInstanceNodeDetailInfoOutput() GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return i.ToGetRdsInstancesV2RdsInstanceNodeDetailInfoOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceNodeDetailInfoArgs) ToGetRdsInstancesV2RdsInstanceNodeDetailInfoOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput)
}

// GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayInput is an input type that accepts GetRdsInstancesV2RdsInstanceNodeDetailInfoArray and GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput values.
// You can construct a concrete instance of `GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayInput` via:
//
//	GetRdsInstancesV2RdsInstanceNodeDetailInfoArray{ GetRdsInstancesV2RdsInstanceNodeDetailInfoArgs{...} }
type GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayInput interface {
	pulumi.Input

	ToGetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput() GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput
	ToGetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutputWithContext(context.Context) GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput
}

type GetRdsInstancesV2RdsInstanceNodeDetailInfoArray []GetRdsInstancesV2RdsInstanceNodeDetailInfoInput

func (GetRdsInstancesV2RdsInstanceNodeDetailInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstanceNodeDetailInfo)(nil)).Elem()
}

func (i GetRdsInstancesV2RdsInstanceNodeDetailInfoArray) ToGetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput() GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return i.ToGetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutputWithContext(context.Background())
}

func (i GetRdsInstancesV2RdsInstanceNodeDetailInfoArray) ToGetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput)
}

type GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRdsInstancesV2RdsInstanceNodeDetailInfo)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) ToGetRdsInstancesV2RdsInstanceNodeDetailInfoOutput() GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) ToGetRdsInstancesV2RdsInstanceNodeDetailInfoOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return o
}

// Node creation local time.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Memory size in GB.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) int { return v.Memory }).(pulumi.IntOutput)
}

// Node ID.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.NodeId }).(pulumi.StringOutput)
}

// General instance type, different from Custom instance type.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Node state, value: aligned with instance state.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.NodeType }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.RegionId }).(pulumi.StringOutput)
}

// Node updates local time.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size. For example: 1 means 1U.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) int { return v.VCpu }).(pulumi.IntOutput)
}

// The available zone of the RDS instance.
func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRdsInstancesV2RdsInstanceNodeDetailInfo) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput struct{ *pulumi.OutputState }

func (GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRdsInstancesV2RdsInstanceNodeDetailInfo)(nil)).Elem()
}

func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput) ToGetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput() GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput) ToGetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutputWithContext(ctx context.Context) GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput {
	return o
}

func (o GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput) Index(i pulumi.IntInput) GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRdsInstancesV2RdsInstanceNodeDetailInfo {
		return vs[0].([]GetRdsInstancesV2RdsInstanceNodeDetailInfo)[vs[1].(int)]
	}).(GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2ChargeInfoInput)(nil)).Elem(), RdsInstanceV2ChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2ChargeInfoPtrInput)(nil)).Elem(), RdsInstanceV2ChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2ConnectionInfoInput)(nil)).Elem(), RdsInstanceV2ConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2ConnectionInfoArrayInput)(nil)).Elem(), RdsInstanceV2ConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2ConnectionInfoAddressInput)(nil)).Elem(), RdsInstanceV2ConnectionInfoAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2ConnectionInfoAddressArrayInput)(nil)).Elem(), RdsInstanceV2ConnectionInfoAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2ConnectionInfoReadOnlyNodeWeightInput)(nil)).Elem(), RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayInput)(nil)).Elem(), RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2NodeInfoInput)(nil)).Elem(), RdsInstanceV2NodeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstanceV2NodeInfoArrayInput)(nil)).Elem(), RdsInstanceV2NodeInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceInput)(nil)).Elem(), RdsInstancesV2RdsInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceArrayInput)(nil)).Elem(), RdsInstancesV2RdsInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceChargeDetailInput)(nil)).Elem(), RdsInstancesV2RdsInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoInput)(nil)).Elem(), RdsInstancesV2RdsInstanceConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoArrayInput)(nil)).Elem(), RdsInstancesV2RdsInstanceConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoAddressInput)(nil)).Elem(), RdsInstancesV2RdsInstanceConnectionInfoAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput)(nil)).Elem(), RdsInstancesV2RdsInstanceConnectionInfoAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput)(nil)).Elem(), RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput)(nil)).Elem(), RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceNodeDetailInfoInput)(nil)).Elem(), RdsInstancesV2RdsInstanceNodeDetailInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RdsInstancesV2RdsInstanceNodeDetailInfoArrayInput)(nil)).Elem(), RdsInstancesV2RdsInstanceNodeDetailInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceArrayInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceChargeDetailInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoArrayInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoAddressInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceConnectionInfoAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceConnectionInfoAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceNodeDetailInfoInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceNodeDetailInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayInput)(nil)).Elem(), GetRdsInstancesV2RdsInstanceNodeDetailInfoArray{})
	pulumi.RegisterOutputType(RdsInstanceV2ChargeInfoOutput{})
	pulumi.RegisterOutputType(RdsInstanceV2ChargeInfoPtrOutput{})
	pulumi.RegisterOutputType(RdsInstanceV2ConnectionInfoOutput{})
	pulumi.RegisterOutputType(RdsInstanceV2ConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(RdsInstanceV2ConnectionInfoAddressOutput{})
	pulumi.RegisterOutputType(RdsInstanceV2ConnectionInfoAddressArrayOutput{})
	pulumi.RegisterOutputType(RdsInstanceV2ConnectionInfoReadOnlyNodeWeightOutput{})
	pulumi.RegisterOutputType(RdsInstanceV2ConnectionInfoReadOnlyNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(RdsInstanceV2NodeInfoOutput{})
	pulumi.RegisterOutputType(RdsInstanceV2NodeInfoArrayOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceArrayOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceConnectionInfoOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceConnectionInfoAddressOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceNodeDetailInfoOutput{})
	pulumi.RegisterOutputType(RdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceConnectionInfoOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceConnectionInfoAddressOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceConnectionInfoAddressArrayOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceConnectionInfoReadOnlyNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceNodeDetailInfoOutput{})
	pulumi.RegisterOutputType(GetRdsInstancesV2RdsInstanceNodeDetailInfoArrayOutput{})
}
