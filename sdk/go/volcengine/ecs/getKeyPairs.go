// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ecs key pairs
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooKeyPair, err := ecs.NewKeyPair(ctx, "fooKeyPair", &ecs.KeyPairArgs{
//				KeyPairName: pulumi.String("acc-test-key-name"),
//				Description: pulumi.String("acc-test"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = ecs.GetKeyPairsOutput(ctx, ecs.GetKeyPairsOutputArgs{
//				KeyPairName: fooKeyPair.KeyPairName,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetKeyPairs(ctx *pulumi.Context, args *GetKeyPairsArgs, opts ...pulumi.InvokeOption) (*GetKeyPairsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKeyPairsResult
	err := ctx.Invoke("volcengine:ecs/getKeyPairs:getKeyPairs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKeyPairs.
type GetKeyPairsArgs struct {
	// The finger print info.
	FingerPrint *string `pulumi:"fingerPrint"`
	// Ids of key pair.
	KeyPairIds []string `pulumi:"keyPairIds"`
	// Name of key pair.
	KeyPairName *string `pulumi:"keyPairName"`
	// Key pair names info.
	KeyPairNames []string `pulumi:"keyPairNames"`
	// A Name Regex of ECS key pairs.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getKeyPairs.
type GetKeyPairsResult struct {
	// The finger print info.
	FingerPrint *string `pulumi:"fingerPrint"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	KeyPairIds []string `pulumi:"keyPairIds"`
	// The name of key pair.
	KeyPairName  *string  `pulumi:"keyPairName"`
	KeyPairNames []string `pulumi:"keyPairNames"`
	// The target query key pairs info.
	KeyPairs   []GetKeyPairsKeyPair `pulumi:"keyPairs"`
	NameRegex  *string              `pulumi:"nameRegex"`
	OutputFile *string              `pulumi:"outputFile"`
	// The total count of ECS key pair query.
	TotalCount int `pulumi:"totalCount"`
}

func GetKeyPairsOutput(ctx *pulumi.Context, args GetKeyPairsOutputArgs, opts ...pulumi.InvokeOption) GetKeyPairsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetKeyPairsResult, error) {
			args := v.(GetKeyPairsArgs)
			r, err := GetKeyPairs(ctx, &args, opts...)
			var s GetKeyPairsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetKeyPairsResultOutput)
}

// A collection of arguments for invoking getKeyPairs.
type GetKeyPairsOutputArgs struct {
	// The finger print info.
	FingerPrint pulumi.StringPtrInput `pulumi:"fingerPrint"`
	// Ids of key pair.
	KeyPairIds pulumi.StringArrayInput `pulumi:"keyPairIds"`
	// Name of key pair.
	KeyPairName pulumi.StringPtrInput `pulumi:"keyPairName"`
	// Key pair names info.
	KeyPairNames pulumi.StringArrayInput `pulumi:"keyPairNames"`
	// A Name Regex of ECS key pairs.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetKeyPairsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyPairsArgs)(nil)).Elem()
}

// A collection of values returned by getKeyPairs.
type GetKeyPairsResultOutput struct{ *pulumi.OutputState }

func (GetKeyPairsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyPairsResult)(nil)).Elem()
}

func (o GetKeyPairsResultOutput) ToGetKeyPairsResultOutput() GetKeyPairsResultOutput {
	return o
}

func (o GetKeyPairsResultOutput) ToGetKeyPairsResultOutputWithContext(ctx context.Context) GetKeyPairsResultOutput {
	return o
}

// The finger print info.
func (o GetKeyPairsResultOutput) FingerPrint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeyPairsResult) *string { return v.FingerPrint }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetKeyPairsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPairsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetKeyPairsResultOutput) KeyPairIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeyPairsResult) []string { return v.KeyPairIds }).(pulumi.StringArrayOutput)
}

// The name of key pair.
func (o GetKeyPairsResultOutput) KeyPairName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeyPairsResult) *string { return v.KeyPairName }).(pulumi.StringPtrOutput)
}

func (o GetKeyPairsResultOutput) KeyPairNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKeyPairsResult) []string { return v.KeyPairNames }).(pulumi.StringArrayOutput)
}

// The target query key pairs info.
func (o GetKeyPairsResultOutput) KeyPairs() GetKeyPairsKeyPairArrayOutput {
	return o.ApplyT(func(v GetKeyPairsResult) []GetKeyPairsKeyPair { return v.KeyPairs }).(GetKeyPairsKeyPairArrayOutput)
}

func (o GetKeyPairsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeyPairsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetKeyPairsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKeyPairsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of ECS key pair query.
func (o GetKeyPairsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetKeyPairsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetKeyPairsResultOutput{})
}
