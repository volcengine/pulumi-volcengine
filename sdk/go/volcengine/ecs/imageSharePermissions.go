// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of image share permissions
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.GetImageSharePermissions(ctx, &ecs.GetImageSharePermissionsArgs{
//				ImageId: "image-ydi2wozhozfu03z2****",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.ecs.ImageSharePermissions has been deprecated in favor of volcengine.ecs.getImageSharePermissions
func ImageSharePermissions(ctx *pulumi.Context, args *ImageSharePermissionsArgs, opts ...pulumi.InvokeOption) (*ImageSharePermissionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ImageSharePermissionsResult
	err := ctx.Invoke("volcengine:ecs/imageSharePermissions:ImageSharePermissions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ImageSharePermissions.
type ImageSharePermissionsArgs struct {
	// The id of the image.
	ImageId string `pulumi:"imageId"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by ImageSharePermissions.
type ImageSharePermissionsResult struct {
	// The collection of query.
	Accounts []ImageSharePermissionsAccount `pulumi:"accounts"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	ImageId    string  `pulumi:"imageId"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ImageSharePermissionsOutput(ctx *pulumi.Context, args ImageSharePermissionsOutputArgs, opts ...pulumi.InvokeOption) ImageSharePermissionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ImageSharePermissionsResult, error) {
			args := v.(ImageSharePermissionsArgs)
			r, err := ImageSharePermissions(ctx, &args, opts...)
			var s ImageSharePermissionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ImageSharePermissionsResultOutput)
}

// A collection of arguments for invoking ImageSharePermissions.
type ImageSharePermissionsOutputArgs struct {
	// The id of the image.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (ImageSharePermissionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSharePermissionsArgs)(nil)).Elem()
}

// A collection of values returned by ImageSharePermissions.
type ImageSharePermissionsResultOutput struct{ *pulumi.OutputState }

func (ImageSharePermissionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSharePermissionsResult)(nil)).Elem()
}

func (o ImageSharePermissionsResultOutput) ToImageSharePermissionsResultOutput() ImageSharePermissionsResultOutput {
	return o
}

func (o ImageSharePermissionsResultOutput) ToImageSharePermissionsResultOutputWithContext(ctx context.Context) ImageSharePermissionsResultOutput {
	return o
}

// The collection of query.
func (o ImageSharePermissionsResultOutput) Accounts() ImageSharePermissionsAccountArrayOutput {
	return o.ApplyT(func(v ImageSharePermissionsResult) []ImageSharePermissionsAccount { return v.Accounts }).(ImageSharePermissionsAccountArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ImageSharePermissionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSharePermissionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ImageSharePermissionsResultOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSharePermissionsResult) string { return v.ImageId }).(pulumi.StringOutput)
}

func (o ImageSharePermissionsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImageSharePermissionsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o ImageSharePermissionsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ImageSharePermissionsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ImageSharePermissionsResultOutput{})
}
