// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ecs invocations
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.GetInvocations(ctx, &ecs.GetInvocationsArgs{
//				InvocationId: pulumi.StringRef("ivk-ych9y4vujvl8j01c****"),
//				InvocationStatuses: []string{
//					"Success",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetInvocations(ctx *pulumi.Context, args *GetInvocationsArgs, opts ...pulumi.InvokeOption) (*GetInvocationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetInvocationsResult
	err := ctx.Invoke("volcengine:ecs/getInvocations:getInvocations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInvocations.
type GetInvocationsArgs struct {
	// The id of ecs command.
	CommandId *string `pulumi:"commandId"`
	// The name of ecs command. This field support fuzzy query.
	CommandName *string `pulumi:"commandName"`
	// The type of ecs command. Valid values: `Shell`.
	CommandType *string `pulumi:"commandType"`
	// The id of ecs invocation.
	InvocationId *string `pulumi:"invocationId"`
	// The name of ecs invocation. This field support fuzzy query.
	InvocationName *string `pulumi:"invocationName"`
	// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
	InvocationStatuses []string `pulumi:"invocationStatuses"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode *string `pulumi:"repeatMode"`
}

// A collection of values returned by getInvocations.
type GetInvocationsResult struct {
	// The id of the ecs command.
	CommandId *string `pulumi:"commandId"`
	// The name of the ecs command.
	CommandName *string `pulumi:"commandName"`
	// The type of the ecs command.
	CommandType *string `pulumi:"commandType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The id of the ecs invocation.
	InvocationId *string `pulumi:"invocationId"`
	// The name of the ecs invocation.
	InvocationName *string `pulumi:"invocationName"`
	// The status of the ecs invocation.
	InvocationStatuses []string `pulumi:"invocationStatuses"`
	// The collection of query.
	Invocations []GetInvocationsInvocation `pulumi:"invocations"`
	NameRegex   *string                    `pulumi:"nameRegex"`
	OutputFile  *string                    `pulumi:"outputFile"`
	// The repeat mode of the ecs invocation.
	RepeatMode *string `pulumi:"repeatMode"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetInvocationsOutput(ctx *pulumi.Context, args GetInvocationsOutputArgs, opts ...pulumi.InvokeOption) GetInvocationsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInvocationsResult, error) {
			args := v.(GetInvocationsArgs)
			r, err := GetInvocations(ctx, &args, opts...)
			var s GetInvocationsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInvocationsResultOutput)
}

// A collection of arguments for invoking getInvocations.
type GetInvocationsOutputArgs struct {
	// The id of ecs command.
	CommandId pulumi.StringPtrInput `pulumi:"commandId"`
	// The name of ecs command. This field support fuzzy query.
	CommandName pulumi.StringPtrInput `pulumi:"commandName"`
	// The type of ecs command. Valid values: `Shell`.
	CommandType pulumi.StringPtrInput `pulumi:"commandType"`
	// The id of ecs invocation.
	InvocationId pulumi.StringPtrInput `pulumi:"invocationId"`
	// The name of ecs invocation. This field support fuzzy query.
	InvocationName pulumi.StringPtrInput `pulumi:"invocationName"`
	// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
	InvocationStatuses pulumi.StringArrayInput `pulumi:"invocationStatuses"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode pulumi.StringPtrInput `pulumi:"repeatMode"`
}

func (GetInvocationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationsArgs)(nil)).Elem()
}

// A collection of values returned by getInvocations.
type GetInvocationsResultOutput struct{ *pulumi.OutputState }

func (GetInvocationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationsResult)(nil)).Elem()
}

func (o GetInvocationsResultOutput) ToGetInvocationsResultOutput() GetInvocationsResultOutput {
	return o
}

func (o GetInvocationsResultOutput) ToGetInvocationsResultOutputWithContext(ctx context.Context) GetInvocationsResultOutput {
	return o
}

// The id of the ecs command.
func (o GetInvocationsResultOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvocationsResult) *string { return v.CommandId }).(pulumi.StringPtrOutput)
}

// The name of the ecs command.
func (o GetInvocationsResultOutput) CommandName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvocationsResult) *string { return v.CommandName }).(pulumi.StringPtrOutput)
}

// The type of the ecs command.
func (o GetInvocationsResultOutput) CommandType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvocationsResult) *string { return v.CommandType }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetInvocationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the ecs invocation.
func (o GetInvocationsResultOutput) InvocationId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvocationsResult) *string { return v.InvocationId }).(pulumi.StringPtrOutput)
}

// The name of the ecs invocation.
func (o GetInvocationsResultOutput) InvocationName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvocationsResult) *string { return v.InvocationName }).(pulumi.StringPtrOutput)
}

// The status of the ecs invocation.
func (o GetInvocationsResultOutput) InvocationStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInvocationsResult) []string { return v.InvocationStatuses }).(pulumi.StringArrayOutput)
}

// The collection of query.
func (o GetInvocationsResultOutput) Invocations() GetInvocationsInvocationArrayOutput {
	return o.ApplyT(func(v GetInvocationsResult) []GetInvocationsInvocation { return v.Invocations }).(GetInvocationsInvocationArrayOutput)
}

func (o GetInvocationsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvocationsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetInvocationsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvocationsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The repeat mode of the ecs invocation.
func (o GetInvocationsResultOutput) RepeatMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInvocationsResult) *string { return v.RepeatMode }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetInvocationsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInvocationsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInvocationsResultOutput{})
}
