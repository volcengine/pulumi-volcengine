// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage ecs hpc cluster
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewHpcCluster(ctx, "foo", &ecs.HpcClusterArgs{
//				Description: pulumi.String("acc-test"),
//				ZoneId:      pulumi.String("cn-beijing-b"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EcsHpcCluster can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:ecs/hpcCluster:HpcCluster default resource_id
// ```
type HpcCluster struct {
	pulumi.CustomResourceState

	// The description of the hpc cluster.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the hpc cluster.
	Name pulumi.StringOutput `pulumi:"name"`
	// The zone id of the hpc cluster.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewHpcCluster registers a new resource with the given unique name, arguments, and options.
func NewHpcCluster(ctx *pulumi.Context,
	name string, args *HpcClusterArgs, opts ...pulumi.ResourceOption) (*HpcCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HpcCluster
	err := ctx.RegisterResource("volcengine:ecs/hpcCluster:HpcCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHpcCluster gets an existing HpcCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHpcCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HpcClusterState, opts ...pulumi.ResourceOption) (*HpcCluster, error) {
	var resource HpcCluster
	err := ctx.ReadResource("volcengine:ecs/hpcCluster:HpcCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HpcCluster resources.
type hpcClusterState struct {
	// The description of the hpc cluster.
	Description *string `pulumi:"description"`
	// The name of the hpc cluster.
	Name *string `pulumi:"name"`
	// The zone id of the hpc cluster.
	ZoneId *string `pulumi:"zoneId"`
}

type HpcClusterState struct {
	// The description of the hpc cluster.
	Description pulumi.StringPtrInput
	// The name of the hpc cluster.
	Name pulumi.StringPtrInput
	// The zone id of the hpc cluster.
	ZoneId pulumi.StringPtrInput
}

func (HpcClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*hpcClusterState)(nil)).Elem()
}

type hpcClusterArgs struct {
	// The description of the hpc cluster.
	Description *string `pulumi:"description"`
	// The name of the hpc cluster.
	Name *string `pulumi:"name"`
	// The zone id of the hpc cluster.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a HpcCluster resource.
type HpcClusterArgs struct {
	// The description of the hpc cluster.
	Description pulumi.StringPtrInput
	// The name of the hpc cluster.
	Name pulumi.StringPtrInput
	// The zone id of the hpc cluster.
	ZoneId pulumi.StringInput
}

func (HpcClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hpcClusterArgs)(nil)).Elem()
}

type HpcClusterInput interface {
	pulumi.Input

	ToHpcClusterOutput() HpcClusterOutput
	ToHpcClusterOutputWithContext(ctx context.Context) HpcClusterOutput
}

func (*HpcCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**HpcCluster)(nil)).Elem()
}

func (i *HpcCluster) ToHpcClusterOutput() HpcClusterOutput {
	return i.ToHpcClusterOutputWithContext(context.Background())
}

func (i *HpcCluster) ToHpcClusterOutputWithContext(ctx context.Context) HpcClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HpcClusterOutput)
}

// HpcClusterArrayInput is an input type that accepts HpcClusterArray and HpcClusterArrayOutput values.
// You can construct a concrete instance of `HpcClusterArrayInput` via:
//
//	HpcClusterArray{ HpcClusterArgs{...} }
type HpcClusterArrayInput interface {
	pulumi.Input

	ToHpcClusterArrayOutput() HpcClusterArrayOutput
	ToHpcClusterArrayOutputWithContext(context.Context) HpcClusterArrayOutput
}

type HpcClusterArray []HpcClusterInput

func (HpcClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HpcCluster)(nil)).Elem()
}

func (i HpcClusterArray) ToHpcClusterArrayOutput() HpcClusterArrayOutput {
	return i.ToHpcClusterArrayOutputWithContext(context.Background())
}

func (i HpcClusterArray) ToHpcClusterArrayOutputWithContext(ctx context.Context) HpcClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HpcClusterArrayOutput)
}

// HpcClusterMapInput is an input type that accepts HpcClusterMap and HpcClusterMapOutput values.
// You can construct a concrete instance of `HpcClusterMapInput` via:
//
//	HpcClusterMap{ "key": HpcClusterArgs{...} }
type HpcClusterMapInput interface {
	pulumi.Input

	ToHpcClusterMapOutput() HpcClusterMapOutput
	ToHpcClusterMapOutputWithContext(context.Context) HpcClusterMapOutput
}

type HpcClusterMap map[string]HpcClusterInput

func (HpcClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HpcCluster)(nil)).Elem()
}

func (i HpcClusterMap) ToHpcClusterMapOutput() HpcClusterMapOutput {
	return i.ToHpcClusterMapOutputWithContext(context.Background())
}

func (i HpcClusterMap) ToHpcClusterMapOutputWithContext(ctx context.Context) HpcClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HpcClusterMapOutput)
}

type HpcClusterOutput struct{ *pulumi.OutputState }

func (HpcClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HpcCluster)(nil)).Elem()
}

func (o HpcClusterOutput) ToHpcClusterOutput() HpcClusterOutput {
	return o
}

func (o HpcClusterOutput) ToHpcClusterOutputWithContext(ctx context.Context) HpcClusterOutput {
	return o
}

// The description of the hpc cluster.
func (o HpcClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HpcCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the hpc cluster.
func (o HpcClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HpcCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The zone id of the hpc cluster.
func (o HpcClusterOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *HpcCluster) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type HpcClusterArrayOutput struct{ *pulumi.OutputState }

func (HpcClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HpcCluster)(nil)).Elem()
}

func (o HpcClusterArrayOutput) ToHpcClusterArrayOutput() HpcClusterArrayOutput {
	return o
}

func (o HpcClusterArrayOutput) ToHpcClusterArrayOutputWithContext(ctx context.Context) HpcClusterArrayOutput {
	return o
}

func (o HpcClusterArrayOutput) Index(i pulumi.IntInput) HpcClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HpcCluster {
		return vs[0].([]*HpcCluster)[vs[1].(int)]
	}).(HpcClusterOutput)
}

type HpcClusterMapOutput struct{ *pulumi.OutputState }

func (HpcClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HpcCluster)(nil)).Elem()
}

func (o HpcClusterMapOutput) ToHpcClusterMapOutput() HpcClusterMapOutput {
	return o
}

func (o HpcClusterMapOutput) ToHpcClusterMapOutputWithContext(ctx context.Context) HpcClusterMapOutput {
	return o
}

func (o HpcClusterMapOutput) MapIndex(k pulumi.StringInput) HpcClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HpcCluster {
		return vs[0].(map[string]*HpcCluster)[vs[1].(string)]
	}).(HpcClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HpcClusterInput)(nil)).Elem(), &HpcCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*HpcClusterArrayInput)(nil)).Elem(), HpcClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HpcClusterMapInput)(nil)).Elem(), HpcClusterMap{})
	pulumi.RegisterOutputType(HpcClusterOutput{})
	pulumi.RegisterOutputType(HpcClusterArrayOutput{})
	pulumi.RegisterOutputType(HpcClusterMapOutput{})
}
