// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage ecs command
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewCommand(ctx, "foo", &ecs.CommandArgs{
//				CommandContent: pulumi.String("IyEvYmluL2Jhc2gKCgplY2hvICJvcGVyYXRpb24gc3VjY2VzcyEi"),
//				Description:    pulumi.String("tf"),
//				Timeout:        pulumi.Int(100),
//				Username:       pulumi.String("root"),
//				WorkingDir:     pulumi.String("/home"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EcsCommand can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:ecs/command:Command default cmd-ychkepkhtim0tr3bcsw1
//
// ```
type Command struct {
	pulumi.CustomResourceState

	// The base64 encoded content of the ecs command.
	CommandContent pulumi.StringOutput `pulumi:"commandContent"`
	// The create time of the ecs command.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// The description of the ecs command.
	Description pulumi.StringOutput `pulumi:"description"`
	// The invocation times of the ecs command. Public commands do not display the invocation times.
	InvocationTimes pulumi.IntOutput `pulumi:"invocationTimes"`
	// The name of the ecs command.
	Name pulumi.StringOutput `pulumi:"name"`
	// The timeout of the ecs command. Valid value range: 10-600.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// The update time of the ecs command.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The username of the ecs command.
	Username pulumi.StringOutput `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir pulumi.StringOutput `pulumi:"workingDir"`
}

// NewCommand registers a new resource with the given unique name, arguments, and options.
func NewCommand(ctx *pulumi.Context,
	name string, args *CommandArgs, opts ...pulumi.ResourceOption) (*Command, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommandContent == nil {
		return nil, errors.New("invalid value for required argument 'CommandContent'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Command
	err := ctx.RegisterResource("volcengine:ecs/command:Command", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCommand gets an existing Command resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCommand(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CommandState, opts ...pulumi.ResourceOption) (*Command, error) {
	var resource Command
	err := ctx.ReadResource("volcengine:ecs/command:Command", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Command resources.
type commandState struct {
	// The base64 encoded content of the ecs command.
	CommandContent *string `pulumi:"commandContent"`
	// The create time of the ecs command.
	CreatedAt *string `pulumi:"createdAt"`
	// The description of the ecs command.
	Description *string `pulumi:"description"`
	// The invocation times of the ecs command. Public commands do not display the invocation times.
	InvocationTimes *int `pulumi:"invocationTimes"`
	// The name of the ecs command.
	Name *string `pulumi:"name"`
	// The timeout of the ecs command. Valid value range: 10-600.
	Timeout *int `pulumi:"timeout"`
	// The update time of the ecs command.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The username of the ecs command.
	Username *string `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir *string `pulumi:"workingDir"`
}

type CommandState struct {
	// The base64 encoded content of the ecs command.
	CommandContent pulumi.StringPtrInput
	// The create time of the ecs command.
	CreatedAt pulumi.StringPtrInput
	// The description of the ecs command.
	Description pulumi.StringPtrInput
	// The invocation times of the ecs command. Public commands do not display the invocation times.
	InvocationTimes pulumi.IntPtrInput
	// The name of the ecs command.
	Name pulumi.StringPtrInput
	// The timeout of the ecs command. Valid value range: 10-600.
	Timeout pulumi.IntPtrInput
	// The update time of the ecs command.
	UpdatedAt pulumi.StringPtrInput
	// The username of the ecs command.
	Username pulumi.StringPtrInput
	// The working directory of the ecs command.
	WorkingDir pulumi.StringPtrInput
}

func (CommandState) ElementType() reflect.Type {
	return reflect.TypeOf((*commandState)(nil)).Elem()
}

type commandArgs struct {
	// The base64 encoded content of the ecs command.
	CommandContent string `pulumi:"commandContent"`
	// The description of the ecs command.
	Description *string `pulumi:"description"`
	// The name of the ecs command.
	Name *string `pulumi:"name"`
	// The timeout of the ecs command. Valid value range: 10-600.
	Timeout *int `pulumi:"timeout"`
	// The username of the ecs command.
	Username *string `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir *string `pulumi:"workingDir"`
}

// The set of arguments for constructing a Command resource.
type CommandArgs struct {
	// The base64 encoded content of the ecs command.
	CommandContent pulumi.StringInput
	// The description of the ecs command.
	Description pulumi.StringPtrInput
	// The name of the ecs command.
	Name pulumi.StringPtrInput
	// The timeout of the ecs command. Valid value range: 10-600.
	Timeout pulumi.IntPtrInput
	// The username of the ecs command.
	Username pulumi.StringPtrInput
	// The working directory of the ecs command.
	WorkingDir pulumi.StringPtrInput
}

func (CommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*commandArgs)(nil)).Elem()
}

type CommandInput interface {
	pulumi.Input

	ToCommandOutput() CommandOutput
	ToCommandOutputWithContext(ctx context.Context) CommandOutput
}

func (*Command) ElementType() reflect.Type {
	return reflect.TypeOf((**Command)(nil)).Elem()
}

func (i *Command) ToCommandOutput() CommandOutput {
	return i.ToCommandOutputWithContext(context.Background())
}

func (i *Command) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandOutput)
}

// CommandArrayInput is an input type that accepts CommandArray and CommandArrayOutput values.
// You can construct a concrete instance of `CommandArrayInput` via:
//
//	CommandArray{ CommandArgs{...} }
type CommandArrayInput interface {
	pulumi.Input

	ToCommandArrayOutput() CommandArrayOutput
	ToCommandArrayOutputWithContext(context.Context) CommandArrayOutput
}

type CommandArray []CommandInput

func (CommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Command)(nil)).Elem()
}

func (i CommandArray) ToCommandArrayOutput() CommandArrayOutput {
	return i.ToCommandArrayOutputWithContext(context.Background())
}

func (i CommandArray) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandArrayOutput)
}

// CommandMapInput is an input type that accepts CommandMap and CommandMapOutput values.
// You can construct a concrete instance of `CommandMapInput` via:
//
//	CommandMap{ "key": CommandArgs{...} }
type CommandMapInput interface {
	pulumi.Input

	ToCommandMapOutput() CommandMapOutput
	ToCommandMapOutputWithContext(context.Context) CommandMapOutput
}

type CommandMap map[string]CommandInput

func (CommandMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Command)(nil)).Elem()
}

func (i CommandMap) ToCommandMapOutput() CommandMapOutput {
	return i.ToCommandMapOutputWithContext(context.Background())
}

func (i CommandMap) ToCommandMapOutputWithContext(ctx context.Context) CommandMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandMapOutput)
}

type CommandOutput struct{ *pulumi.OutputState }

func (CommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Command)(nil)).Elem()
}

func (o CommandOutput) ToCommandOutput() CommandOutput {
	return o
}

func (o CommandOutput) ToCommandOutputWithContext(ctx context.Context) CommandOutput {
	return o
}

// The base64 encoded content of the ecs command.
func (o CommandOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.CommandContent }).(pulumi.StringOutput)
}

// The create time of the ecs command.
func (o CommandOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the ecs command.
func (o CommandOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The invocation times of the ecs command. Public commands do not display the invocation times.
func (o CommandOutput) InvocationTimes() pulumi.IntOutput {
	return o.ApplyT(func(v *Command) pulumi.IntOutput { return v.InvocationTimes }).(pulumi.IntOutput)
}

// The name of the ecs command.
func (o CommandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The timeout of the ecs command. Valid value range: 10-600.
func (o CommandOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Command) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// The update time of the ecs command.
func (o CommandOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The username of the ecs command.
func (o CommandOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// The working directory of the ecs command.
func (o CommandOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v *Command) pulumi.StringOutput { return v.WorkingDir }).(pulumi.StringOutput)
}

type CommandArrayOutput struct{ *pulumi.OutputState }

func (CommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Command)(nil)).Elem()
}

func (o CommandArrayOutput) ToCommandArrayOutput() CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) ToCommandArrayOutputWithContext(ctx context.Context) CommandArrayOutput {
	return o
}

func (o CommandArrayOutput) Index(i pulumi.IntInput) CommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Command {
		return vs[0].([]*Command)[vs[1].(int)]
	}).(CommandOutput)
}

type CommandMapOutput struct{ *pulumi.OutputState }

func (CommandMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Command)(nil)).Elem()
}

func (o CommandMapOutput) ToCommandMapOutput() CommandMapOutput {
	return o
}

func (o CommandMapOutput) ToCommandMapOutputWithContext(ctx context.Context) CommandMapOutput {
	return o
}

func (o CommandMapOutput) MapIndex(k pulumi.StringInput) CommandOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Command {
		return vs[0].(map[string]*Command)[vs[1].(string)]
	}).(CommandOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CommandInput)(nil)).Elem(), &Command{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandArrayInput)(nil)).Elem(), CommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandMapInput)(nil)).Elem(), CommandMap{})
	pulumi.RegisterOutputType(CommandOutput{})
	pulumi.RegisterOutputType(CommandArrayOutput{})
	pulumi.RegisterOutputType(CommandMapOutput{})
}
