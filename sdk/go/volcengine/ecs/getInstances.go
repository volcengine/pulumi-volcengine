// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ecs instances
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := ecs.GetZones(ctx, nil, nil);
// if err != nil {
// return err
// }
// fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
// VpcName: pulumi.String("acc-test-vpc"),
// CidrBlock: pulumi.String("172.16.0.0/16"),
// })
// if err != nil {
// return err
// }
// fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
// SubnetName: pulumi.String("acc-test-subnet"),
// CidrBlock: pulumi.String("172.16.0.0/24"),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// VpcId: fooVpc.ID(),
// })
// if err != nil {
// return err
// }
// fooSecurityGroup, err := vpc.NewSecurityGroup(ctx, "fooSecurityGroup", &vpc.SecurityGroupArgs{
// SecurityGroupName: pulumi.String("acc-test-security-group"),
// VpcId: fooVpc.ID(),
// })
// if err != nil {
// return err
// }
// fooImages, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
// OsType: pulumi.StringRef("Linux"),
// Visibility: pulumi.StringRef("public"),
// InstanceTypeId: pulumi.StringRef("ecs.g1.large"),
// }, nil);
// if err != nil {
// return err
// }
// var fooInstance []*ecs.Instance
//
//	for index := 0; index < 2; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := ecs.NewInstance(ctx, fmt.Sprintf("fooInstance-%v", key0), &ecs.InstanceArgs{
// InstanceName: pulumi.String(fmt.Sprintf("acc-test-ecs-%v", val0)),
// Description: pulumi.String("acc-test"),
// HostName: pulumi.String("tf-acc-test"),
// ImageId: pulumi.String(fooImages.Images[0].ImageId),
// InstanceType: pulumi.String("ecs.g1.large"),
// Password: pulumi.String("93f0cb0614Aab12"),
// InstanceChargeType: pulumi.String("PostPaid"),
// SystemVolumeType: pulumi.String("ESSD_PL0"),
// SystemVolumeSize: pulumi.Int(40),
// DataVolumes: ecs.InstanceDataVolumeArray{
// &ecs.InstanceDataVolumeArgs{
// VolumeType: pulumi.String("ESSD_PL0"),
// Size: pulumi.Int(50),
// DeleteWithInstance: pulumi.Bool(true),
// },
// },
// SubnetId: fooSubnet.ID(),
// SecurityGroupIds: pulumi.StringArray{
// fooSecurityGroup.ID(),
// },
// ProjectName: pulumi.String("default"),
// Tags: ecs.InstanceTagArray{
// &ecs.InstanceTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooInstance = append(fooInstance, __res)
// }
// _ = ecs.GetInstancesOutput(ctx, ecs.GetInstancesOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:ecs-getInstances:getInstances.pp:49,9-26),
// }, nil);
// return nil
// })
// }
// ```
func GetInstances(ctx *pulumi.Context, args *GetInstancesArgs, opts ...pulumi.InvokeOption) (*GetInstancesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetInstancesResult
	err := ctx.Invoke("volcengine:ecs/getInstances:getInstances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstances.
type GetInstancesArgs struct {
	// A list of DeploymentSet IDs.
	DeploymentSetIds []string `pulumi:"deploymentSetIds"`
	// A list of Eip addresses.
	EipAddresses []string `pulumi:"eipAddresses"`
	// The hpc cluster ID of ECS instance.
	HpcClusterId *string `pulumi:"hpcClusterId"`
	// A list of ECS instance IDs.
	Ids []string `pulumi:"ids"`
	// The charge type of ECS instance.
	InstanceChargeType *string `pulumi:"instanceChargeType"`
	// The name of ECS instance. This field support fuzzy query.
	InstanceName *string `pulumi:"instanceName"`
	// A list of instance type families.
	InstanceTypeFamilies []string `pulumi:"instanceTypeFamilies"`
	// A list of instance type IDs.
	InstanceTypeIds []string `pulumi:"instanceTypeIds"`
	// A list of ipv6 addresses.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// The key pair name of ECS instance.
	KeyPairName *string `pulumi:"keyPairName"`
	// A Name Regex of ECS instance.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress *string `pulumi:"primaryIpAddress"`
	// The ProjectName of ECS instance.
	ProjectName *string `pulumi:"projectName"`
	// The status of ECS instance.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []GetInstancesTag `pulumi:"tags"`
	// The VPC ID of ECS instance.
	VpcId *string `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getInstances.
type GetInstancesResult struct {
	DeploymentSetIds []string `pulumi:"deploymentSetIds"`
	EipAddresses     []string `pulumi:"eipAddresses"`
	HpcClusterId     *string  `pulumi:"hpcClusterId"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The charge type of ECS instance.
	InstanceChargeType *string `pulumi:"instanceChargeType"`
	// The name of ECS instance.
	InstanceName         *string  `pulumi:"instanceName"`
	InstanceTypeFamilies []string `pulumi:"instanceTypeFamilies"`
	InstanceTypeIds      []string `pulumi:"instanceTypeIds"`
	// The collection of ECS instance query.
	Instances []GetInstancesInstance `pulumi:"instances"`
	// The  IPv6 address list of the ECS instance.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// The ssh key name of ECS instance.
	KeyPairName *string `pulumi:"keyPairName"`
	NameRegex   *string `pulumi:"nameRegex"`
	OutputFile  *string `pulumi:"outputFile"`
	// The private ip address of networkInterface.
	PrimaryIpAddress *string `pulumi:"primaryIpAddress"`
	// The ProjectName of ECS instance.
	ProjectName *string `pulumi:"projectName"`
	// The status of ECS instance.
	Status *string `pulumi:"status"`
	// Tags.
	Tags []GetInstancesTag `pulumi:"tags"`
	// The total count of ECS instance query.
	TotalCount int `pulumi:"totalCount"`
	// The VPC ID of ECS instance.
	VpcId *string `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId *string `pulumi:"zoneId"`
}

func GetInstancesOutput(ctx *pulumi.Context, args GetInstancesOutputArgs, opts ...pulumi.InvokeOption) GetInstancesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInstancesResult, error) {
			args := v.(GetInstancesArgs)
			r, err := GetInstances(ctx, &args, opts...)
			var s GetInstancesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInstancesResultOutput)
}

// A collection of arguments for invoking getInstances.
type GetInstancesOutputArgs struct {
	// A list of DeploymentSet IDs.
	DeploymentSetIds pulumi.StringArrayInput `pulumi:"deploymentSetIds"`
	// A list of Eip addresses.
	EipAddresses pulumi.StringArrayInput `pulumi:"eipAddresses"`
	// The hpc cluster ID of ECS instance.
	HpcClusterId pulumi.StringPtrInput `pulumi:"hpcClusterId"`
	// A list of ECS instance IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The charge type of ECS instance.
	InstanceChargeType pulumi.StringPtrInput `pulumi:"instanceChargeType"`
	// The name of ECS instance. This field support fuzzy query.
	InstanceName pulumi.StringPtrInput `pulumi:"instanceName"`
	// A list of instance type families.
	InstanceTypeFamilies pulumi.StringArrayInput `pulumi:"instanceTypeFamilies"`
	// A list of instance type IDs.
	InstanceTypeIds pulumi.StringArrayInput `pulumi:"instanceTypeIds"`
	// A list of ipv6 addresses.
	Ipv6Addresses pulumi.StringArrayInput `pulumi:"ipv6Addresses"`
	// The key pair name of ECS instance.
	KeyPairName pulumi.StringPtrInput `pulumi:"keyPairName"`
	// A Name Regex of ECS instance.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress pulumi.StringPtrInput `pulumi:"primaryIpAddress"`
	// The ProjectName of ECS instance.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// The status of ECS instance.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Tags.
	Tags GetInstancesTagArrayInput `pulumi:"tags"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (GetInstancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesArgs)(nil)).Elem()
}

// A collection of values returned by getInstances.
type GetInstancesResultOutput struct{ *pulumi.OutputState }

func (GetInstancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesResult)(nil)).Elem()
}

func (o GetInstancesResultOutput) ToGetInstancesResultOutput() GetInstancesResultOutput {
	return o
}

func (o GetInstancesResultOutput) ToGetInstancesResultOutputWithContext(ctx context.Context) GetInstancesResultOutput {
	return o
}

func (o GetInstancesResultOutput) DeploymentSetIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []string { return v.DeploymentSetIds }).(pulumi.StringArrayOutput)
}

func (o GetInstancesResultOutput) EipAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []string { return v.EipAddresses }).(pulumi.StringArrayOutput)
}

func (o GetInstancesResultOutput) HpcClusterId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.HpcClusterId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetInstancesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetInstancesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The charge type of ECS instance.
func (o GetInstancesResultOutput) InstanceChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.InstanceChargeType }).(pulumi.StringPtrOutput)
}

// The name of ECS instance.
func (o GetInstancesResultOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.InstanceName }).(pulumi.StringPtrOutput)
}

func (o GetInstancesResultOutput) InstanceTypeFamilies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []string { return v.InstanceTypeFamilies }).(pulumi.StringArrayOutput)
}

func (o GetInstancesResultOutput) InstanceTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []string { return v.InstanceTypeIds }).(pulumi.StringArrayOutput)
}

// The collection of ECS instance query.
func (o GetInstancesResultOutput) Instances() GetInstancesInstanceArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []GetInstancesInstance { return v.Instances }).(GetInstancesInstanceArrayOutput)
}

// The  IPv6 address list of the ECS instance.
func (o GetInstancesResultOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []string { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

// The ssh key name of ECS instance.
func (o GetInstancesResultOutput) KeyPairName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.KeyPairName }).(pulumi.StringPtrOutput)
}

func (o GetInstancesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetInstancesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The private ip address of networkInterface.
func (o GetInstancesResultOutput) PrimaryIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.PrimaryIpAddress }).(pulumi.StringPtrOutput)
}

// The ProjectName of ECS instance.
func (o GetInstancesResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The status of ECS instance.
func (o GetInstancesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Tags.
func (o GetInstancesResultOutput) Tags() GetInstancesTagArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []GetInstancesTag { return v.Tags }).(GetInstancesTagArrayOutput)
}

// The total count of ECS instance query.
func (o GetInstancesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The VPC ID of ECS instance.
func (o GetInstancesResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

// The available zone ID of ECS instance.
func (o GetInstancesResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstancesResultOutput{})
}
