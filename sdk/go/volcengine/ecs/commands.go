// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ecs commands
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.GetCommands(ctx, &ecs.GetCommandsArgs{
//				CommandId: pulumi.StringRef("cmd-ychkepkhtim0tr3b****"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.ecs.Commands has been deprecated in favor of volcengine.ecs.getCommands
func Commands(ctx *pulumi.Context, args *CommandsArgs, opts ...pulumi.InvokeOption) (*CommandsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv CommandsResult
	err := ctx.Invoke("volcengine:ecs/commands:Commands", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Commands.
type CommandsArgs struct {
	// The id of ecs command.
	CommandId *string `pulumi:"commandId"`
	// The provider of public command. When this field is not specified, query for custom commands.
	CommandProvider *string `pulumi:"commandProvider"`
	// The name of ecs command. This field support fuzzy query.
	Name *string `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// The order of ecs command query result.
	Order *string `pulumi:"order"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The type of ecs command. Valid values: `Shell`.
	Type *string `pulumi:"type"`
}

// A collection of values returned by Commands.
type CommandsResult struct {
	// The id of the ecs command.
	CommandId *string `pulumi:"commandId"`
	// The provider of the public command.
	CommandProvider *string `pulumi:"commandProvider"`
	// The collection of query.
	Commands []CommandsCommand `pulumi:"commands"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the ecs command.
	Name       *string `pulumi:"name"`
	NameRegex  *string `pulumi:"nameRegex"`
	Order      *string `pulumi:"order"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The type of the ecs command.
	Type *string `pulumi:"type"`
}

func CommandsOutput(ctx *pulumi.Context, args CommandsOutputArgs, opts ...pulumi.InvokeOption) CommandsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (CommandsResult, error) {
			args := v.(CommandsArgs)
			r, err := Commands(ctx, &args, opts...)
			var s CommandsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(CommandsResultOutput)
}

// A collection of arguments for invoking Commands.
type CommandsOutputArgs struct {
	// The id of ecs command.
	CommandId pulumi.StringPtrInput `pulumi:"commandId"`
	// The provider of public command. When this field is not specified, query for custom commands.
	CommandProvider pulumi.StringPtrInput `pulumi:"commandProvider"`
	// The name of ecs command. This field support fuzzy query.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The order of ecs command query result.
	Order pulumi.StringPtrInput `pulumi:"order"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The type of ecs command. Valid values: `Shell`.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (CommandsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsArgs)(nil)).Elem()
}

// A collection of values returned by Commands.
type CommandsResultOutput struct{ *pulumi.OutputState }

func (CommandsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsResult)(nil)).Elem()
}

func (o CommandsResultOutput) ToCommandsResultOutput() CommandsResultOutput {
	return o
}

func (o CommandsResultOutput) ToCommandsResultOutputWithContext(ctx context.Context) CommandsResultOutput {
	return o
}

// The id of the ecs command.
func (o CommandsResultOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandsResult) *string { return v.CommandId }).(pulumi.StringPtrOutput)
}

// The provider of the public command.
func (o CommandsResultOutput) CommandProvider() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandsResult) *string { return v.CommandProvider }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o CommandsResultOutput) Commands() CommandsCommandArrayOutput {
	return o.ApplyT(func(v CommandsResult) []CommandsCommand { return v.Commands }).(CommandsCommandArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o CommandsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the ecs command.
func (o CommandsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o CommandsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o CommandsResultOutput) Order() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandsResult) *string { return v.Order }).(pulumi.StringPtrOutput)
}

func (o CommandsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o CommandsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v CommandsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The type of the ecs command.
func (o CommandsResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandsResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(CommandsResultOutput{})
}
