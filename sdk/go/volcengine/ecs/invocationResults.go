// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ecs invocation results
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.InvocationResults(ctx, &ecs.InvocationResultsArgs{
//				InvocationId: "ivk-ych9y4vujvl8j01c****",
//				InvocationResultStatuses: []string{
//					"Success",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func InvocationResults(ctx *pulumi.Context, args *InvocationResultsArgs, opts ...pulumi.InvokeOption) (*InvocationResultsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv InvocationResultsResult
	err := ctx.Invoke("volcengine:ecs/invocationResults:InvocationResults", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking InvocationResults.
type InvocationResultsArgs struct {
	// The id of ecs command.
	CommandId *string `pulumi:"commandId"`
	// The id of ecs instance.
	InstanceId *string `pulumi:"instanceId"`
	// The id of ecs invocation.
	InvocationId string `pulumi:"invocationId"`
	// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
	InvocationResultStatuses []string `pulumi:"invocationResultStatuses"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by InvocationResults.
type InvocationResultsResult struct {
	// The id of the ecs command.
	CommandId *string `pulumi:"commandId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The id of the ecs instance.
	InstanceId *string `pulumi:"instanceId"`
	// The id of the ecs invocation.
	InvocationId string `pulumi:"invocationId"`
	// The status of ecs invocation in a single instance.
	InvocationResultStatuses []string `pulumi:"invocationResultStatuses"`
	// The collection of query.
	InvocationResults []InvocationResultsInvocationResult `pulumi:"invocationResults"`
	OutputFile        *string                             `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func InvocationResultsOutput(ctx *pulumi.Context, args InvocationResultsOutputArgs, opts ...pulumi.InvokeOption) InvocationResultsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (InvocationResultsResult, error) {
			args := v.(InvocationResultsArgs)
			r, err := InvocationResults(ctx, &args, opts...)
			var s InvocationResultsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(InvocationResultsResultOutput)
}

// A collection of arguments for invoking InvocationResults.
type InvocationResultsOutputArgs struct {
	// The id of ecs command.
	CommandId pulumi.StringPtrInput `pulumi:"commandId"`
	// The id of ecs instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The id of ecs invocation.
	InvocationId pulumi.StringInput `pulumi:"invocationId"`
	// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
	InvocationResultStatuses pulumi.StringArrayInput `pulumi:"invocationResultStatuses"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (InvocationResultsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationResultsArgs)(nil)).Elem()
}

// A collection of values returned by InvocationResults.
type InvocationResultsResultOutput struct{ *pulumi.OutputState }

func (InvocationResultsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationResultsResult)(nil)).Elem()
}

func (o InvocationResultsResultOutput) ToInvocationResultsResultOutput() InvocationResultsResultOutput {
	return o
}

func (o InvocationResultsResultOutput) ToInvocationResultsResultOutputWithContext(ctx context.Context) InvocationResultsResultOutput {
	return o
}

// The id of the ecs command.
func (o InvocationResultsResultOutput) CommandId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationResultsResult) *string { return v.CommandId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o InvocationResultsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the ecs instance.
func (o InvocationResultsResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationResultsResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The id of the ecs invocation.
func (o InvocationResultsResultOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsResult) string { return v.InvocationId }).(pulumi.StringOutput)
}

// The status of ecs invocation in a single instance.
func (o InvocationResultsResultOutput) InvocationResultStatuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InvocationResultsResult) []string { return v.InvocationResultStatuses }).(pulumi.StringArrayOutput)
}

// The collection of query.
func (o InvocationResultsResultOutput) InvocationResults() InvocationResultsInvocationResultArrayOutput {
	return o.ApplyT(func(v InvocationResultsResult) []InvocationResultsInvocationResult { return v.InvocationResults }).(InvocationResultsInvocationResultArrayOutput)
}

func (o InvocationResultsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InvocationResultsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o InvocationResultsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v InvocationResultsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(InvocationResultsResultOutput{})
}
