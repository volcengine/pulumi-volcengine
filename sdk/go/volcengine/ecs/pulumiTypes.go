// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type AvailableResourcesAvailableZone struct {
	// The resource information of the available zone.
	AvailableResources []AvailableResourcesAvailableZoneAvailableResource `pulumi:"availableResources"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status string `pulumi:"status"`
	// The id of available zone.
	ZoneId string `pulumi:"zoneId"`
}

// AvailableResourcesAvailableZoneInput is an input type that accepts AvailableResourcesAvailableZoneArgs and AvailableResourcesAvailableZoneOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneInput` via:
//
//	AvailableResourcesAvailableZoneArgs{...}
type AvailableResourcesAvailableZoneInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneOutput() AvailableResourcesAvailableZoneOutput
	ToAvailableResourcesAvailableZoneOutputWithContext(context.Context) AvailableResourcesAvailableZoneOutput
}

type AvailableResourcesAvailableZoneArgs struct {
	// The resource information of the available zone.
	AvailableResources AvailableResourcesAvailableZoneAvailableResourceArrayInput `pulumi:"availableResources"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status pulumi.StringInput `pulumi:"status"`
	// The id of available zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (AvailableResourcesAvailableZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZone)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneArgs) ToAvailableResourcesAvailableZoneOutput() AvailableResourcesAvailableZoneOutput {
	return i.ToAvailableResourcesAvailableZoneOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneArgs) ToAvailableResourcesAvailableZoneOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneOutput)
}

// AvailableResourcesAvailableZoneArrayInput is an input type that accepts AvailableResourcesAvailableZoneArray and AvailableResourcesAvailableZoneArrayOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneArrayInput` via:
//
//	AvailableResourcesAvailableZoneArray{ AvailableResourcesAvailableZoneArgs{...} }
type AvailableResourcesAvailableZoneArrayInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneArrayOutput() AvailableResourcesAvailableZoneArrayOutput
	ToAvailableResourcesAvailableZoneArrayOutputWithContext(context.Context) AvailableResourcesAvailableZoneArrayOutput
}

type AvailableResourcesAvailableZoneArray []AvailableResourcesAvailableZoneInput

func (AvailableResourcesAvailableZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZone)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneArray) ToAvailableResourcesAvailableZoneArrayOutput() AvailableResourcesAvailableZoneArrayOutput {
	return i.ToAvailableResourcesAvailableZoneArrayOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneArray) ToAvailableResourcesAvailableZoneArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneArrayOutput)
}

type AvailableResourcesAvailableZoneOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZone)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneOutput) ToAvailableResourcesAvailableZoneOutput() AvailableResourcesAvailableZoneOutput {
	return o
}

func (o AvailableResourcesAvailableZoneOutput) ToAvailableResourcesAvailableZoneOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneOutput {
	return o
}

// The resource information of the available zone.
func (o AvailableResourcesAvailableZoneOutput) AvailableResources() AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZone) []AvailableResourcesAvailableZoneAvailableResource {
		return v.AvailableResources
	}).(AvailableResourcesAvailableZoneAvailableResourceArrayOutput)
}

// The id of the region.
func (o AvailableResourcesAvailableZoneOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZone) string { return v.RegionId }).(pulumi.StringOutput)
}

// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
func (o AvailableResourcesAvailableZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZone) string { return v.Status }).(pulumi.StringOutput)
}

// The id of available zone.
func (o AvailableResourcesAvailableZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type AvailableResourcesAvailableZoneArrayOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZone)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneArrayOutput) ToAvailableResourcesAvailableZoneArrayOutput() AvailableResourcesAvailableZoneArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneArrayOutput) ToAvailableResourcesAvailableZoneArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneArrayOutput) Index(i pulumi.IntInput) AvailableResourcesAvailableZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AvailableResourcesAvailableZone {
		return vs[0].([]AvailableResourcesAvailableZone)[vs[1].(int)]
	}).(AvailableResourcesAvailableZoneOutput)
}

type AvailableResourcesAvailableZoneAvailableResource struct {
	// The supported resource information.
	SupportedResources []AvailableResourcesAvailableZoneAvailableResourceSupportedResource `pulumi:"supportedResources"`
	// The type of resource. Valid values: `InstanceType`, `DedicatedHost`.
	Type string `pulumi:"type"`
}

// AvailableResourcesAvailableZoneAvailableResourceInput is an input type that accepts AvailableResourcesAvailableZoneAvailableResourceArgs and AvailableResourcesAvailableZoneAvailableResourceOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneAvailableResourceInput` via:
//
//	AvailableResourcesAvailableZoneAvailableResourceArgs{...}
type AvailableResourcesAvailableZoneAvailableResourceInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneAvailableResourceOutput() AvailableResourcesAvailableZoneAvailableResourceOutput
	ToAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(context.Context) AvailableResourcesAvailableZoneAvailableResourceOutput
}

type AvailableResourcesAvailableZoneAvailableResourceArgs struct {
	// The supported resource information.
	SupportedResources AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput `pulumi:"supportedResources"`
	// The type of resource. Valid values: `InstanceType`, `DedicatedHost`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvailableResourcesAvailableZoneAvailableResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneAvailableResourceArgs) ToAvailableResourcesAvailableZoneAvailableResourceOutput() AvailableResourcesAvailableZoneAvailableResourceOutput {
	return i.ToAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneAvailableResourceArgs) ToAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneAvailableResourceOutput)
}

// AvailableResourcesAvailableZoneAvailableResourceArrayInput is an input type that accepts AvailableResourcesAvailableZoneAvailableResourceArray and AvailableResourcesAvailableZoneAvailableResourceArrayOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneAvailableResourceArrayInput` via:
//
//	AvailableResourcesAvailableZoneAvailableResourceArray{ AvailableResourcesAvailableZoneAvailableResourceArgs{...} }
type AvailableResourcesAvailableZoneAvailableResourceArrayInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneAvailableResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceArrayOutput
	ToAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(context.Context) AvailableResourcesAvailableZoneAvailableResourceArrayOutput
}

type AvailableResourcesAvailableZoneAvailableResourceArray []AvailableResourcesAvailableZoneAvailableResourceInput

func (AvailableResourcesAvailableZoneAvailableResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneAvailableResourceArray) ToAvailableResourcesAvailableZoneAvailableResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return i.ToAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneAvailableResourceArray) ToAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneAvailableResourceArrayOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneAvailableResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneAvailableResourceOutput) ToAvailableResourcesAvailableZoneAvailableResourceOutput() AvailableResourcesAvailableZoneAvailableResourceOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceOutput) ToAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceOutput {
	return o
}

// The supported resource information.
func (o AvailableResourcesAvailableZoneAvailableResourceOutput) SupportedResources() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZoneAvailableResource) []AvailableResourcesAvailableZoneAvailableResourceSupportedResource {
		return v.SupportedResources
	}).(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput)
}

// The type of resource. Valid values: `InstanceType`, `DedicatedHost`.
func (o AvailableResourcesAvailableZoneAvailableResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZoneAvailableResource) string { return v.Type }).(pulumi.StringOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceArrayOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneAvailableResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneAvailableResourceArrayOutput) ToAvailableResourcesAvailableZoneAvailableResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceArrayOutput) ToAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceArrayOutput) Index(i pulumi.IntInput) AvailableResourcesAvailableZoneAvailableResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AvailableResourcesAvailableZoneAvailableResource {
		return vs[0].([]AvailableResourcesAvailableZoneAvailableResource)[vs[1].(int)]
	}).(AvailableResourcesAvailableZoneAvailableResourceOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResource struct {
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status string `pulumi:"status"`
	// The value of the resource.
	Value string `pulumi:"value"`
}

// AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput is an input type that accepts AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs and AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput` via:
//
//	AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs{...}
type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput
	ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs struct {
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status pulumi.StringInput `pulumi:"status"`
	// The value of the resource.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return i.ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput)
}

// AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput is an input type that accepts AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray and AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput` via:
//
//	AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray{ AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs{...} }
type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput
	ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray []AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput

func (AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return i.ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return o
}

// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZoneAvailableResourceSupportedResource) string { return v.Status }).(pulumi.StringOutput)
}

// The value of the resource.
func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZoneAvailableResourceSupportedResource) string { return v.Value }).(pulumi.StringOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) Index(i pulumi.IntInput) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AvailableResourcesAvailableZoneAvailableResourceSupportedResource {
		return vs[0].([]AvailableResourcesAvailableZoneAvailableResourceSupportedResource)[vs[1].(int)]
	}).(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput)
}

type CommandsCommand struct {
	// The base64 encoded content of the ecs command.
	CommandContent string `pulumi:"commandContent"`
	// The id of ecs command.
	CommandId string `pulumi:"commandId"`
	// The provider of public command. When this field is not specified, query for custom commands.
	CommandProvider string `pulumi:"commandProvider"`
	// The create time of the ecs command.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the ecs command.
	Description string `pulumi:"description"`
	// The id of the ecs command.
	Id string `pulumi:"id"`
	// The invocation times of the ecs command. Public commands do not display the invocation times.
	InvocationTimes int `pulumi:"invocationTimes"`
	// The name of ecs command. This field support fuzzy query.
	Name string `pulumi:"name"`
	// The timeout of the ecs command.
	Timeout int `pulumi:"timeout"`
	// The type of ecs command. Valid values: `Shell`.
	Type string `pulumi:"type"`
	// The update time of the ecs command.
	UpdatedAt string `pulumi:"updatedAt"`
	// The username of the ecs command.
	Username string `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir string `pulumi:"workingDir"`
}

// CommandsCommandInput is an input type that accepts CommandsCommandArgs and CommandsCommandOutput values.
// You can construct a concrete instance of `CommandsCommandInput` via:
//
//	CommandsCommandArgs{...}
type CommandsCommandInput interface {
	pulumi.Input

	ToCommandsCommandOutput() CommandsCommandOutput
	ToCommandsCommandOutputWithContext(context.Context) CommandsCommandOutput
}

type CommandsCommandArgs struct {
	// The base64 encoded content of the ecs command.
	CommandContent pulumi.StringInput `pulumi:"commandContent"`
	// The id of ecs command.
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// The provider of public command. When this field is not specified, query for custom commands.
	CommandProvider pulumi.StringInput `pulumi:"commandProvider"`
	// The create time of the ecs command.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the ecs command.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the ecs command.
	Id pulumi.StringInput `pulumi:"id"`
	// The invocation times of the ecs command. Public commands do not display the invocation times.
	InvocationTimes pulumi.IntInput `pulumi:"invocationTimes"`
	// The name of ecs command. This field support fuzzy query.
	Name pulumi.StringInput `pulumi:"name"`
	// The timeout of the ecs command.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The type of ecs command. Valid values: `Shell`.
	Type pulumi.StringInput `pulumi:"type"`
	// The update time of the ecs command.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The username of the ecs command.
	Username pulumi.StringInput `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`
}

func (CommandsCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsCommand)(nil)).Elem()
}

func (i CommandsCommandArgs) ToCommandsCommandOutput() CommandsCommandOutput {
	return i.ToCommandsCommandOutputWithContext(context.Background())
}

func (i CommandsCommandArgs) ToCommandsCommandOutputWithContext(ctx context.Context) CommandsCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsCommandOutput)
}

// CommandsCommandArrayInput is an input type that accepts CommandsCommandArray and CommandsCommandArrayOutput values.
// You can construct a concrete instance of `CommandsCommandArrayInput` via:
//
//	CommandsCommandArray{ CommandsCommandArgs{...} }
type CommandsCommandArrayInput interface {
	pulumi.Input

	ToCommandsCommandArrayOutput() CommandsCommandArrayOutput
	ToCommandsCommandArrayOutputWithContext(context.Context) CommandsCommandArrayOutput
}

type CommandsCommandArray []CommandsCommandInput

func (CommandsCommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsCommand)(nil)).Elem()
}

func (i CommandsCommandArray) ToCommandsCommandArrayOutput() CommandsCommandArrayOutput {
	return i.ToCommandsCommandArrayOutputWithContext(context.Background())
}

func (i CommandsCommandArray) ToCommandsCommandArrayOutputWithContext(ctx context.Context) CommandsCommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsCommandArrayOutput)
}

type CommandsCommandOutput struct{ *pulumi.OutputState }

func (CommandsCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsCommand)(nil)).Elem()
}

func (o CommandsCommandOutput) ToCommandsCommandOutput() CommandsCommandOutput {
	return o
}

func (o CommandsCommandOutput) ToCommandsCommandOutputWithContext(ctx context.Context) CommandsCommandOutput {
	return o
}

// The base64 encoded content of the ecs command.
func (o CommandsCommandOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.CommandContent }).(pulumi.StringOutput)
}

// The id of ecs command.
func (o CommandsCommandOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.CommandId }).(pulumi.StringOutput)
}

// The provider of public command. When this field is not specified, query for custom commands.
func (o CommandsCommandOutput) CommandProvider() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.CommandProvider }).(pulumi.StringOutput)
}

// The create time of the ecs command.
func (o CommandsCommandOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the ecs command.
func (o CommandsCommandOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the ecs command.
func (o CommandsCommandOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Id }).(pulumi.StringOutput)
}

// The invocation times of the ecs command. Public commands do not display the invocation times.
func (o CommandsCommandOutput) InvocationTimes() pulumi.IntOutput {
	return o.ApplyT(func(v CommandsCommand) int { return v.InvocationTimes }).(pulumi.IntOutput)
}

// The name of ecs command. This field support fuzzy query.
func (o CommandsCommandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Name }).(pulumi.StringOutput)
}

// The timeout of the ecs command.
func (o CommandsCommandOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v CommandsCommand) int { return v.Timeout }).(pulumi.IntOutput)
}

// The type of ecs command. Valid values: `Shell`.
func (o CommandsCommandOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Type }).(pulumi.StringOutput)
}

// The update time of the ecs command.
func (o CommandsCommandOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The username of the ecs command.
func (o CommandsCommandOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Username }).(pulumi.StringOutput)
}

// The working directory of the ecs command.
func (o CommandsCommandOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type CommandsCommandArrayOutput struct{ *pulumi.OutputState }

func (CommandsCommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsCommand)(nil)).Elem()
}

func (o CommandsCommandArrayOutput) ToCommandsCommandArrayOutput() CommandsCommandArrayOutput {
	return o
}

func (o CommandsCommandArrayOutput) ToCommandsCommandArrayOutputWithContext(ctx context.Context) CommandsCommandArrayOutput {
	return o
}

func (o CommandsCommandArrayOutput) Index(i pulumi.IntInput) CommandsCommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandsCommand {
		return vs[0].([]CommandsCommand)[vs[1].(int)]
	}).(CommandsCommandOutput)
}

type DeploymentSetsDeploymentSet struct {
	// The ID of ECS DeploymentSet.
	DeploymentSetId string `pulumi:"deploymentSetId"`
	// The name of ECS DeploymentSet.
	DeploymentSetName string `pulumi:"deploymentSetName"`
	// The description of ECS DeploymentSet.
	Description string `pulumi:"description"`
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
	Granularity string `pulumi:"granularity"`
	// The strategy of ECS DeploymentSet.
	Strategy string `pulumi:"strategy"`
}

// DeploymentSetsDeploymentSetInput is an input type that accepts DeploymentSetsDeploymentSetArgs and DeploymentSetsDeploymentSetOutput values.
// You can construct a concrete instance of `DeploymentSetsDeploymentSetInput` via:
//
//	DeploymentSetsDeploymentSetArgs{...}
type DeploymentSetsDeploymentSetInput interface {
	pulumi.Input

	ToDeploymentSetsDeploymentSetOutput() DeploymentSetsDeploymentSetOutput
	ToDeploymentSetsDeploymentSetOutputWithContext(context.Context) DeploymentSetsDeploymentSetOutput
}

type DeploymentSetsDeploymentSetArgs struct {
	// The ID of ECS DeploymentSet.
	DeploymentSetId pulumi.StringInput `pulumi:"deploymentSetId"`
	// The name of ECS DeploymentSet.
	DeploymentSetName pulumi.StringInput `pulumi:"deploymentSetName"`
	// The description of ECS DeploymentSet.
	Description pulumi.StringInput `pulumi:"description"`
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
	Granularity pulumi.StringInput `pulumi:"granularity"`
	// The strategy of ECS DeploymentSet.
	Strategy pulumi.StringInput `pulumi:"strategy"`
}

func (DeploymentSetsDeploymentSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSetsDeploymentSet)(nil)).Elem()
}

func (i DeploymentSetsDeploymentSetArgs) ToDeploymentSetsDeploymentSetOutput() DeploymentSetsDeploymentSetOutput {
	return i.ToDeploymentSetsDeploymentSetOutputWithContext(context.Background())
}

func (i DeploymentSetsDeploymentSetArgs) ToDeploymentSetsDeploymentSetOutputWithContext(ctx context.Context) DeploymentSetsDeploymentSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSetsDeploymentSetOutput)
}

// DeploymentSetsDeploymentSetArrayInput is an input type that accepts DeploymentSetsDeploymentSetArray and DeploymentSetsDeploymentSetArrayOutput values.
// You can construct a concrete instance of `DeploymentSetsDeploymentSetArrayInput` via:
//
//	DeploymentSetsDeploymentSetArray{ DeploymentSetsDeploymentSetArgs{...} }
type DeploymentSetsDeploymentSetArrayInput interface {
	pulumi.Input

	ToDeploymentSetsDeploymentSetArrayOutput() DeploymentSetsDeploymentSetArrayOutput
	ToDeploymentSetsDeploymentSetArrayOutputWithContext(context.Context) DeploymentSetsDeploymentSetArrayOutput
}

type DeploymentSetsDeploymentSetArray []DeploymentSetsDeploymentSetInput

func (DeploymentSetsDeploymentSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentSetsDeploymentSet)(nil)).Elem()
}

func (i DeploymentSetsDeploymentSetArray) ToDeploymentSetsDeploymentSetArrayOutput() DeploymentSetsDeploymentSetArrayOutput {
	return i.ToDeploymentSetsDeploymentSetArrayOutputWithContext(context.Background())
}

func (i DeploymentSetsDeploymentSetArray) ToDeploymentSetsDeploymentSetArrayOutputWithContext(ctx context.Context) DeploymentSetsDeploymentSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSetsDeploymentSetArrayOutput)
}

type DeploymentSetsDeploymentSetOutput struct{ *pulumi.OutputState }

func (DeploymentSetsDeploymentSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSetsDeploymentSet)(nil)).Elem()
}

func (o DeploymentSetsDeploymentSetOutput) ToDeploymentSetsDeploymentSetOutput() DeploymentSetsDeploymentSetOutput {
	return o
}

func (o DeploymentSetsDeploymentSetOutput) ToDeploymentSetsDeploymentSetOutputWithContext(ctx context.Context) DeploymentSetsDeploymentSetOutput {
	return o
}

// The ID of ECS DeploymentSet.
func (o DeploymentSetsDeploymentSetOutput) DeploymentSetId() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.DeploymentSetId }).(pulumi.StringOutput)
}

// The name of ECS DeploymentSet.
func (o DeploymentSetsDeploymentSetOutput) DeploymentSetName() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.DeploymentSetName }).(pulumi.StringOutput)
}

// The description of ECS DeploymentSet.
func (o DeploymentSetsDeploymentSetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.Description }).(pulumi.StringOutput)
}

// The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
func (o DeploymentSetsDeploymentSetOutput) Granularity() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.Granularity }).(pulumi.StringOutput)
}

// The strategy of ECS DeploymentSet.
func (o DeploymentSetsDeploymentSetOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.Strategy }).(pulumi.StringOutput)
}

type DeploymentSetsDeploymentSetArrayOutput struct{ *pulumi.OutputState }

func (DeploymentSetsDeploymentSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentSetsDeploymentSet)(nil)).Elem()
}

func (o DeploymentSetsDeploymentSetArrayOutput) ToDeploymentSetsDeploymentSetArrayOutput() DeploymentSetsDeploymentSetArrayOutput {
	return o
}

func (o DeploymentSetsDeploymentSetArrayOutput) ToDeploymentSetsDeploymentSetArrayOutputWithContext(ctx context.Context) DeploymentSetsDeploymentSetArrayOutput {
	return o
}

func (o DeploymentSetsDeploymentSetArrayOutput) Index(i pulumi.IntInput) DeploymentSetsDeploymentSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentSetsDeploymentSet {
		return vs[0].([]DeploymentSetsDeploymentSet)[vs[1].(int)]
	}).(DeploymentSetsDeploymentSetOutput)
}

type ImagesImage struct {
	// The architecture of Image.
	Architecture string `pulumi:"architecture"`
	// The create time of Image.
	CreatedAt string `pulumi:"createdAt"`
	// The description of Image.
	Description string `pulumi:"description"`
	// The ID of Image.
	ImageId string `pulumi:"imageId"`
	// The name of Image.
	ImageName string `pulumi:"imageName"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit bool `pulumi:"isSupportCloudInit"`
	// The name of Image operating system.
	OsName string `pulumi:"osName"`
	// The operating system type of Image.
	OsType string `pulumi:"osType"`
	// The platform of Image.
	Platform string `pulumi:"platform"`
	// The platform version of Image.
	PlatformVersion string `pulumi:"platformVersion"`
	// The share mode of Image.
	ShareStatus string `pulumi:"shareStatus"`
	// The size(GiB) of Image.
	Size int `pulumi:"size"`
	// A list of Image status, the value can be `available` or `creating` or `error`.
	Status string `pulumi:"status"`
	// The update time of Image.
	UpdatedAt string `pulumi:"updatedAt"`
	// The visibility of Image.
	Visibility string `pulumi:"visibility"`
}

// ImagesImageInput is an input type that accepts ImagesImageArgs and ImagesImageOutput values.
// You can construct a concrete instance of `ImagesImageInput` via:
//
//	ImagesImageArgs{...}
type ImagesImageInput interface {
	pulumi.Input

	ToImagesImageOutput() ImagesImageOutput
	ToImagesImageOutputWithContext(context.Context) ImagesImageOutput
}

type ImagesImageArgs struct {
	// The architecture of Image.
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// The create time of Image.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of Image.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of Image.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The name of Image.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit pulumi.BoolInput `pulumi:"isSupportCloudInit"`
	// The name of Image operating system.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The operating system type of Image.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The platform of Image.
	Platform pulumi.StringInput `pulumi:"platform"`
	// The platform version of Image.
	PlatformVersion pulumi.StringInput `pulumi:"platformVersion"`
	// The share mode of Image.
	ShareStatus pulumi.StringInput `pulumi:"shareStatus"`
	// The size(GiB) of Image.
	Size pulumi.IntInput `pulumi:"size"`
	// A list of Image status, the value can be `available` or `creating` or `error`.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of Image.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The visibility of Image.
	Visibility pulumi.StringInput `pulumi:"visibility"`
}

func (ImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImage)(nil)).Elem()
}

func (i ImagesImageArgs) ToImagesImageOutput() ImagesImageOutput {
	return i.ToImagesImageOutputWithContext(context.Background())
}

func (i ImagesImageArgs) ToImagesImageOutputWithContext(ctx context.Context) ImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageOutput)
}

// ImagesImageArrayInput is an input type that accepts ImagesImageArray and ImagesImageArrayOutput values.
// You can construct a concrete instance of `ImagesImageArrayInput` via:
//
//	ImagesImageArray{ ImagesImageArgs{...} }
type ImagesImageArrayInput interface {
	pulumi.Input

	ToImagesImageArrayOutput() ImagesImageArrayOutput
	ToImagesImageArrayOutputWithContext(context.Context) ImagesImageArrayOutput
}

type ImagesImageArray []ImagesImageInput

func (ImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImage)(nil)).Elem()
}

func (i ImagesImageArray) ToImagesImageArrayOutput() ImagesImageArrayOutput {
	return i.ToImagesImageArrayOutputWithContext(context.Background())
}

func (i ImagesImageArray) ToImagesImageArrayOutputWithContext(ctx context.Context) ImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageArrayOutput)
}

type ImagesImageOutput struct{ *pulumi.OutputState }

func (ImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImage)(nil)).Elem()
}

func (o ImagesImageOutput) ToImagesImageOutput() ImagesImageOutput {
	return o
}

func (o ImagesImageOutput) ToImagesImageOutputWithContext(ctx context.Context) ImagesImageOutput {
	return o
}

// The architecture of Image.
func (o ImagesImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Architecture }).(pulumi.StringOutput)
}

// The create time of Image.
func (o ImagesImageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of Image.
func (o ImagesImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of Image.
func (o ImagesImageOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.ImageId }).(pulumi.StringOutput)
}

// The name of Image.
func (o ImagesImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.ImageName }).(pulumi.StringOutput)
}

// Whether the Image support cloud-init.
func (o ImagesImageOutput) IsSupportCloudInit() pulumi.BoolOutput {
	return o.ApplyT(func(v ImagesImage) bool { return v.IsSupportCloudInit }).(pulumi.BoolOutput)
}

// The name of Image operating system.
func (o ImagesImageOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.OsName }).(pulumi.StringOutput)
}

// The operating system type of Image.
func (o ImagesImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.OsType }).(pulumi.StringOutput)
}

// The platform of Image.
func (o ImagesImageOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Platform }).(pulumi.StringOutput)
}

// The platform version of Image.
func (o ImagesImageOutput) PlatformVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.PlatformVersion }).(pulumi.StringOutput)
}

// The share mode of Image.
func (o ImagesImageOutput) ShareStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.ShareStatus }).(pulumi.StringOutput)
}

// The size(GiB) of Image.
func (o ImagesImageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ImagesImage) int { return v.Size }).(pulumi.IntOutput)
}

// A list of Image status, the value can be `available` or `creating` or `error`.
func (o ImagesImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of Image.
func (o ImagesImageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The visibility of Image.
func (o ImagesImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Visibility }).(pulumi.StringOutput)
}

type ImagesImageArrayOutput struct{ *pulumi.OutputState }

func (ImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImage)(nil)).Elem()
}

func (o ImagesImageArrayOutput) ToImagesImageArrayOutput() ImagesImageArrayOutput {
	return o
}

func (o ImagesImageArrayOutput) ToImagesImageArrayOutputWithContext(ctx context.Context) ImagesImageArrayOutput {
	return o
}

func (o ImagesImageArrayOutput) Index(i pulumi.IntInput) ImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagesImage {
		return vs[0].([]ImagesImage)[vs[1].(int)]
	}).(ImagesImageOutput)
}

type InstanceCpuOptions struct {
	// The number of subnuma in socket, only support for ebm. `1` indicates disabling SNC/NPS function. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	NumaPerSocket *int `pulumi:"numaPerSocket"`
	// The per core of threads, only support for ebm. `1` indicates disabling hyper threading function.
	ThreadsPerCore *int `pulumi:"threadsPerCore"`
}

// InstanceCpuOptionsInput is an input type that accepts InstanceCpuOptionsArgs and InstanceCpuOptionsOutput values.
// You can construct a concrete instance of `InstanceCpuOptionsInput` via:
//
//	InstanceCpuOptionsArgs{...}
type InstanceCpuOptionsInput interface {
	pulumi.Input

	ToInstanceCpuOptionsOutput() InstanceCpuOptionsOutput
	ToInstanceCpuOptionsOutputWithContext(context.Context) InstanceCpuOptionsOutput
}

type InstanceCpuOptionsArgs struct {
	// The number of subnuma in socket, only support for ebm. `1` indicates disabling SNC/NPS function. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	NumaPerSocket pulumi.IntPtrInput `pulumi:"numaPerSocket"`
	// The per core of threads, only support for ebm. `1` indicates disabling hyper threading function.
	ThreadsPerCore pulumi.IntPtrInput `pulumi:"threadsPerCore"`
}

func (InstanceCpuOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCpuOptions)(nil)).Elem()
}

func (i InstanceCpuOptionsArgs) ToInstanceCpuOptionsOutput() InstanceCpuOptionsOutput {
	return i.ToInstanceCpuOptionsOutputWithContext(context.Background())
}

func (i InstanceCpuOptionsArgs) ToInstanceCpuOptionsOutputWithContext(ctx context.Context) InstanceCpuOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCpuOptionsOutput)
}

func (i InstanceCpuOptionsArgs) ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput {
	return i.ToInstanceCpuOptionsPtrOutputWithContext(context.Background())
}

func (i InstanceCpuOptionsArgs) ToInstanceCpuOptionsPtrOutputWithContext(ctx context.Context) InstanceCpuOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCpuOptionsOutput).ToInstanceCpuOptionsPtrOutputWithContext(ctx)
}

// InstanceCpuOptionsPtrInput is an input type that accepts InstanceCpuOptionsArgs, InstanceCpuOptionsPtr and InstanceCpuOptionsPtrOutput values.
// You can construct a concrete instance of `InstanceCpuOptionsPtrInput` via:
//
//	        InstanceCpuOptionsArgs{...}
//
//	or:
//
//	        nil
type InstanceCpuOptionsPtrInput interface {
	pulumi.Input

	ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput
	ToInstanceCpuOptionsPtrOutputWithContext(context.Context) InstanceCpuOptionsPtrOutput
}

type instanceCpuOptionsPtrType InstanceCpuOptionsArgs

func InstanceCpuOptionsPtr(v *InstanceCpuOptionsArgs) InstanceCpuOptionsPtrInput {
	return (*instanceCpuOptionsPtrType)(v)
}

func (*instanceCpuOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCpuOptions)(nil)).Elem()
}

func (i *instanceCpuOptionsPtrType) ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput {
	return i.ToInstanceCpuOptionsPtrOutputWithContext(context.Background())
}

func (i *instanceCpuOptionsPtrType) ToInstanceCpuOptionsPtrOutputWithContext(ctx context.Context) InstanceCpuOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCpuOptionsPtrOutput)
}

type InstanceCpuOptionsOutput struct{ *pulumi.OutputState }

func (InstanceCpuOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCpuOptions)(nil)).Elem()
}

func (o InstanceCpuOptionsOutput) ToInstanceCpuOptionsOutput() InstanceCpuOptionsOutput {
	return o
}

func (o InstanceCpuOptionsOutput) ToInstanceCpuOptionsOutputWithContext(ctx context.Context) InstanceCpuOptionsOutput {
	return o
}

func (o InstanceCpuOptionsOutput) ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput {
	return o.ToInstanceCpuOptionsPtrOutputWithContext(context.Background())
}

func (o InstanceCpuOptionsOutput) ToInstanceCpuOptionsPtrOutputWithContext(ctx context.Context) InstanceCpuOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceCpuOptions) *InstanceCpuOptions {
		return &v
	}).(InstanceCpuOptionsPtrOutput)
}

// The number of subnuma in socket, only support for ebm. `1` indicates disabling SNC/NPS function. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o InstanceCpuOptionsOutput) NumaPerSocket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceCpuOptions) *int { return v.NumaPerSocket }).(pulumi.IntPtrOutput)
}

// The per core of threads, only support for ebm. `1` indicates disabling hyper threading function.
func (o InstanceCpuOptionsOutput) ThreadsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceCpuOptions) *int { return v.ThreadsPerCore }).(pulumi.IntPtrOutput)
}

type InstanceCpuOptionsPtrOutput struct{ *pulumi.OutputState }

func (InstanceCpuOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCpuOptions)(nil)).Elem()
}

func (o InstanceCpuOptionsPtrOutput) ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput {
	return o
}

func (o InstanceCpuOptionsPtrOutput) ToInstanceCpuOptionsPtrOutputWithContext(ctx context.Context) InstanceCpuOptionsPtrOutput {
	return o
}

func (o InstanceCpuOptionsPtrOutput) Elem() InstanceCpuOptionsOutput {
	return o.ApplyT(func(v *InstanceCpuOptions) InstanceCpuOptions {
		if v != nil {
			return *v
		}
		var ret InstanceCpuOptions
		return ret
	}).(InstanceCpuOptionsOutput)
}

// The number of subnuma in socket, only support for ebm. `1` indicates disabling SNC/NPS function. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o InstanceCpuOptionsPtrOutput) NumaPerSocket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCpuOptions) *int {
		if v == nil {
			return nil
		}
		return v.NumaPerSocket
	}).(pulumi.IntPtrOutput)
}

// The per core of threads, only support for ebm. `1` indicates disabling hyper threading function.
func (o InstanceCpuOptionsPtrOutput) ThreadsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCpuOptions) *int {
		if v == nil {
			return nil
		}
		return v.ThreadsPerCore
	}).(pulumi.IntPtrOutput)
}

type InstanceDataVolume struct {
	// The delete with instance flag of volume.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// The size of volume. The value range of the data volume size is ESSD_PL0: 10~32768, ESSD_FlexPL: 10~32768, PTSSD: 20~8192.
	Size int `pulumi:"size"`
	// The type of volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
	VolumeType string `pulumi:"volumeType"`
}

// InstanceDataVolumeInput is an input type that accepts InstanceDataVolumeArgs and InstanceDataVolumeOutput values.
// You can construct a concrete instance of `InstanceDataVolumeInput` via:
//
//	InstanceDataVolumeArgs{...}
type InstanceDataVolumeInput interface {
	pulumi.Input

	ToInstanceDataVolumeOutput() InstanceDataVolumeOutput
	ToInstanceDataVolumeOutputWithContext(context.Context) InstanceDataVolumeOutput
}

type InstanceDataVolumeArgs struct {
	// The delete with instance flag of volume.
	DeleteWithInstance pulumi.BoolPtrInput `pulumi:"deleteWithInstance"`
	// The size of volume. The value range of the data volume size is ESSD_PL0: 10~32768, ESSD_FlexPL: 10~32768, PTSSD: 20~8192.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (InstanceDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataVolume)(nil)).Elem()
}

func (i InstanceDataVolumeArgs) ToInstanceDataVolumeOutput() InstanceDataVolumeOutput {
	return i.ToInstanceDataVolumeOutputWithContext(context.Background())
}

func (i InstanceDataVolumeArgs) ToInstanceDataVolumeOutputWithContext(ctx context.Context) InstanceDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataVolumeOutput)
}

// InstanceDataVolumeArrayInput is an input type that accepts InstanceDataVolumeArray and InstanceDataVolumeArrayOutput values.
// You can construct a concrete instance of `InstanceDataVolumeArrayInput` via:
//
//	InstanceDataVolumeArray{ InstanceDataVolumeArgs{...} }
type InstanceDataVolumeArrayInput interface {
	pulumi.Input

	ToInstanceDataVolumeArrayOutput() InstanceDataVolumeArrayOutput
	ToInstanceDataVolumeArrayOutputWithContext(context.Context) InstanceDataVolumeArrayOutput
}

type InstanceDataVolumeArray []InstanceDataVolumeInput

func (InstanceDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDataVolume)(nil)).Elem()
}

func (i InstanceDataVolumeArray) ToInstanceDataVolumeArrayOutput() InstanceDataVolumeArrayOutput {
	return i.ToInstanceDataVolumeArrayOutputWithContext(context.Background())
}

func (i InstanceDataVolumeArray) ToInstanceDataVolumeArrayOutputWithContext(ctx context.Context) InstanceDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataVolumeArrayOutput)
}

type InstanceDataVolumeOutput struct{ *pulumi.OutputState }

func (InstanceDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataVolume)(nil)).Elem()
}

func (o InstanceDataVolumeOutput) ToInstanceDataVolumeOutput() InstanceDataVolumeOutput {
	return o
}

func (o InstanceDataVolumeOutput) ToInstanceDataVolumeOutputWithContext(ctx context.Context) InstanceDataVolumeOutput {
	return o
}

// The delete with instance flag of volume.
func (o InstanceDataVolumeOutput) DeleteWithInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceDataVolume) *bool { return v.DeleteWithInstance }).(pulumi.BoolPtrOutput)
}

// The size of volume. The value range of the data volume size is ESSD_PL0: 10~32768, ESSD_FlexPL: 10~32768, PTSSD: 20~8192.
func (o InstanceDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
func (o InstanceDataVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDataVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstanceDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstanceDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDataVolume)(nil)).Elem()
}

func (o InstanceDataVolumeArrayOutput) ToInstanceDataVolumeArrayOutput() InstanceDataVolumeArrayOutput {
	return o
}

func (o InstanceDataVolumeArrayOutput) ToInstanceDataVolumeArrayOutputWithContext(ctx context.Context) InstanceDataVolumeArrayOutput {
	return o
}

func (o InstanceDataVolumeArrayOutput) Index(i pulumi.IntInput) InstanceDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceDataVolume {
		return vs[0].([]InstanceDataVolume)[vs[1].(int)]
	}).(InstanceDataVolumeOutput)
}

type InstanceGpuDevice struct {
	// The Count of GPU device.
	Count *int `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize *int `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize *int `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName *string `pulumi:"productName"`
}

// InstanceGpuDeviceInput is an input type that accepts InstanceGpuDeviceArgs and InstanceGpuDeviceOutput values.
// You can construct a concrete instance of `InstanceGpuDeviceInput` via:
//
//	InstanceGpuDeviceArgs{...}
type InstanceGpuDeviceInput interface {
	pulumi.Input

	ToInstanceGpuDeviceOutput() InstanceGpuDeviceOutput
	ToInstanceGpuDeviceOutputWithContext(context.Context) InstanceGpuDeviceOutput
}

type InstanceGpuDeviceArgs struct {
	// The Count of GPU device.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize pulumi.IntPtrInput `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntPtrInput `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName pulumi.StringPtrInput `pulumi:"productName"`
}

func (InstanceGpuDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGpuDevice)(nil)).Elem()
}

func (i InstanceGpuDeviceArgs) ToInstanceGpuDeviceOutput() InstanceGpuDeviceOutput {
	return i.ToInstanceGpuDeviceOutputWithContext(context.Background())
}

func (i InstanceGpuDeviceArgs) ToInstanceGpuDeviceOutputWithContext(ctx context.Context) InstanceGpuDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGpuDeviceOutput)
}

// InstanceGpuDeviceArrayInput is an input type that accepts InstanceGpuDeviceArray and InstanceGpuDeviceArrayOutput values.
// You can construct a concrete instance of `InstanceGpuDeviceArrayInput` via:
//
//	InstanceGpuDeviceArray{ InstanceGpuDeviceArgs{...} }
type InstanceGpuDeviceArrayInput interface {
	pulumi.Input

	ToInstanceGpuDeviceArrayOutput() InstanceGpuDeviceArrayOutput
	ToInstanceGpuDeviceArrayOutputWithContext(context.Context) InstanceGpuDeviceArrayOutput
}

type InstanceGpuDeviceArray []InstanceGpuDeviceInput

func (InstanceGpuDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGpuDevice)(nil)).Elem()
}

func (i InstanceGpuDeviceArray) ToInstanceGpuDeviceArrayOutput() InstanceGpuDeviceArrayOutput {
	return i.ToInstanceGpuDeviceArrayOutputWithContext(context.Background())
}

func (i InstanceGpuDeviceArray) ToInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) InstanceGpuDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGpuDeviceArrayOutput)
}

type InstanceGpuDeviceOutput struct{ *pulumi.OutputState }

func (InstanceGpuDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGpuDevice)(nil)).Elem()
}

func (o InstanceGpuDeviceOutput) ToInstanceGpuDeviceOutput() InstanceGpuDeviceOutput {
	return o
}

func (o InstanceGpuDeviceOutput) ToInstanceGpuDeviceOutputWithContext(ctx context.Context) InstanceGpuDeviceOutput {
	return o
}

// The Count of GPU device.
func (o InstanceGpuDeviceOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGpuDevice) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The Encrypted Memory Size of GPU device.
func (o InstanceGpuDeviceOutput) EncryptedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGpuDevice) *int { return v.EncryptedMemorySize }).(pulumi.IntPtrOutput)
}

// The memory size of ECS instance.
func (o InstanceGpuDeviceOutput) MemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGpuDevice) *int { return v.MemorySize }).(pulumi.IntPtrOutput)
}

// The Product Name of GPU device.
func (o InstanceGpuDeviceOutput) ProductName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGpuDevice) *string { return v.ProductName }).(pulumi.StringPtrOutput)
}

type InstanceGpuDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstanceGpuDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGpuDevice)(nil)).Elem()
}

func (o InstanceGpuDeviceArrayOutput) ToInstanceGpuDeviceArrayOutput() InstanceGpuDeviceArrayOutput {
	return o
}

func (o InstanceGpuDeviceArrayOutput) ToInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) InstanceGpuDeviceArrayOutput {
	return o
}

func (o InstanceGpuDeviceArrayOutput) Index(i pulumi.IntInput) InstanceGpuDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGpuDevice {
		return vs[0].([]InstanceGpuDevice)[vs[1].(int)]
	}).(InstanceGpuDeviceOutput)
}

type InstanceSecondaryNetworkInterface struct {
	// The private ip address of primary networkInterface.
	PrimaryIpAddress *string `pulumi:"primaryIpAddress"`
	// The security group ID set of secondary networkInterface.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnet ID of secondary networkInterface.
	SubnetId string `pulumi:"subnetId"`
}

// InstanceSecondaryNetworkInterfaceInput is an input type that accepts InstanceSecondaryNetworkInterfaceArgs and InstanceSecondaryNetworkInterfaceOutput values.
// You can construct a concrete instance of `InstanceSecondaryNetworkInterfaceInput` via:
//
//	InstanceSecondaryNetworkInterfaceArgs{...}
type InstanceSecondaryNetworkInterfaceInput interface {
	pulumi.Input

	ToInstanceSecondaryNetworkInterfaceOutput() InstanceSecondaryNetworkInterfaceOutput
	ToInstanceSecondaryNetworkInterfaceOutputWithContext(context.Context) InstanceSecondaryNetworkInterfaceOutput
}

type InstanceSecondaryNetworkInterfaceArgs struct {
	// The private ip address of primary networkInterface.
	PrimaryIpAddress pulumi.StringPtrInput `pulumi:"primaryIpAddress"`
	// The security group ID set of secondary networkInterface.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The subnet ID of secondary networkInterface.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (InstanceSecondaryNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (i InstanceSecondaryNetworkInterfaceArgs) ToInstanceSecondaryNetworkInterfaceOutput() InstanceSecondaryNetworkInterfaceOutput {
	return i.ToInstanceSecondaryNetworkInterfaceOutputWithContext(context.Background())
}

func (i InstanceSecondaryNetworkInterfaceArgs) ToInstanceSecondaryNetworkInterfaceOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecondaryNetworkInterfaceOutput)
}

// InstanceSecondaryNetworkInterfaceArrayInput is an input type that accepts InstanceSecondaryNetworkInterfaceArray and InstanceSecondaryNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `InstanceSecondaryNetworkInterfaceArrayInput` via:
//
//	InstanceSecondaryNetworkInterfaceArray{ InstanceSecondaryNetworkInterfaceArgs{...} }
type InstanceSecondaryNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToInstanceSecondaryNetworkInterfaceArrayOutput() InstanceSecondaryNetworkInterfaceArrayOutput
	ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(context.Context) InstanceSecondaryNetworkInterfaceArrayOutput
}

type InstanceSecondaryNetworkInterfaceArray []InstanceSecondaryNetworkInterfaceInput

func (InstanceSecondaryNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (i InstanceSecondaryNetworkInterfaceArray) ToInstanceSecondaryNetworkInterfaceArrayOutput() InstanceSecondaryNetworkInterfaceArrayOutput {
	return i.ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i InstanceSecondaryNetworkInterfaceArray) ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecondaryNetworkInterfaceArrayOutput)
}

type InstanceSecondaryNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (InstanceSecondaryNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (o InstanceSecondaryNetworkInterfaceOutput) ToInstanceSecondaryNetworkInterfaceOutput() InstanceSecondaryNetworkInterfaceOutput {
	return o
}

func (o InstanceSecondaryNetworkInterfaceOutput) ToInstanceSecondaryNetworkInterfaceOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceOutput {
	return o
}

// The private ip address of primary networkInterface.
func (o InstanceSecondaryNetworkInterfaceOutput) PrimaryIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecondaryNetworkInterface) *string { return v.PrimaryIpAddress }).(pulumi.StringPtrOutput)
}

// The security group ID set of secondary networkInterface.
func (o InstanceSecondaryNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceSecondaryNetworkInterface) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnet ID of secondary networkInterface.
func (o InstanceSecondaryNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSecondaryNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

type InstanceSecondaryNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (InstanceSecondaryNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (o InstanceSecondaryNetworkInterfaceArrayOutput) ToInstanceSecondaryNetworkInterfaceArrayOutput() InstanceSecondaryNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceSecondaryNetworkInterfaceArrayOutput) ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceSecondaryNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) InstanceSecondaryNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSecondaryNetworkInterface {
		return vs[0].([]InstanceSecondaryNetworkInterface)[vs[1].(int)]
	}).(InstanceSecondaryNetworkInterfaceOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstanceTypesInstanceType struct {
	// The CPU benchmark performance that can be provided steadily by on-demand instances is determined by the instance type.
	BaselineCredit int `pulumi:"baselineCredit"`
	// The GPU device info of Instance.
	Gpus []InstanceTypesInstanceTypeGpus `pulumi:"gpus"`
	// The CPU credits obtained at once when creating a on-demand performance instance are fixed at 30 credits per vCPU.
	InitialCredit int `pulumi:"initialCredit"`
	// The instance type family.
	InstanceTypeFamily string `pulumi:"instanceTypeFamily"`
	// The id of the instance type.
	InstanceTypeId string `pulumi:"instanceTypeId"`
	// Local disk configuration information corresponding to instance specifications.
	LocalVolumes []InstanceTypesInstanceTypeLocalVolume `pulumi:"localVolumes"`
	// Memory information of instance specifications.
	Memories []InstanceTypesInstanceTypeMemory `pulumi:"memories"`
	// Network information of instance specifications.
	Networks []InstanceTypesInstanceTypeNetwork `pulumi:"networks"`
	// CPU information of instance specifications.
	Processors []InstanceTypesInstanceTypeProcessor `pulumi:"processors"`
	// RDMA Specification Information.
	Rdmas []InstanceTypesInstanceTypeRdma `pulumi:"rdmas"`
	// Cloud disk information for instance specifications.
	Volumes []InstanceTypesInstanceTypeVolume `pulumi:"volumes"`
}

// InstanceTypesInstanceTypeInput is an input type that accepts InstanceTypesInstanceTypeArgs and InstanceTypesInstanceTypeOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeInput` via:
//
//	InstanceTypesInstanceTypeArgs{...}
type InstanceTypesInstanceTypeInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeOutput() InstanceTypesInstanceTypeOutput
	ToInstanceTypesInstanceTypeOutputWithContext(context.Context) InstanceTypesInstanceTypeOutput
}

type InstanceTypesInstanceTypeArgs struct {
	// The CPU benchmark performance that can be provided steadily by on-demand instances is determined by the instance type.
	BaselineCredit pulumi.IntInput `pulumi:"baselineCredit"`
	// The GPU device info of Instance.
	Gpus InstanceTypesInstanceTypeGpusArrayInput `pulumi:"gpus"`
	// The CPU credits obtained at once when creating a on-demand performance instance are fixed at 30 credits per vCPU.
	InitialCredit pulumi.IntInput `pulumi:"initialCredit"`
	// The instance type family.
	InstanceTypeFamily pulumi.StringInput `pulumi:"instanceTypeFamily"`
	// The id of the instance type.
	InstanceTypeId pulumi.StringInput `pulumi:"instanceTypeId"`
	// Local disk configuration information corresponding to instance specifications.
	LocalVolumes InstanceTypesInstanceTypeLocalVolumeArrayInput `pulumi:"localVolumes"`
	// Memory information of instance specifications.
	Memories InstanceTypesInstanceTypeMemoryArrayInput `pulumi:"memories"`
	// Network information of instance specifications.
	Networks InstanceTypesInstanceTypeNetworkArrayInput `pulumi:"networks"`
	// CPU information of instance specifications.
	Processors InstanceTypesInstanceTypeProcessorArrayInput `pulumi:"processors"`
	// RDMA Specification Information.
	Rdmas InstanceTypesInstanceTypeRdmaArrayInput `pulumi:"rdmas"`
	// Cloud disk information for instance specifications.
	Volumes InstanceTypesInstanceTypeVolumeArrayInput `pulumi:"volumes"`
}

func (InstanceTypesInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceType)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeArgs) ToInstanceTypesInstanceTypeOutput() InstanceTypesInstanceTypeOutput {
	return i.ToInstanceTypesInstanceTypeOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeArgs) ToInstanceTypesInstanceTypeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeOutput)
}

// InstanceTypesInstanceTypeArrayInput is an input type that accepts InstanceTypesInstanceTypeArray and InstanceTypesInstanceTypeArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeArrayInput` via:
//
//	InstanceTypesInstanceTypeArray{ InstanceTypesInstanceTypeArgs{...} }
type InstanceTypesInstanceTypeArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeArrayOutput() InstanceTypesInstanceTypeArrayOutput
	ToInstanceTypesInstanceTypeArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeArrayOutput
}

type InstanceTypesInstanceTypeArray []InstanceTypesInstanceTypeInput

func (InstanceTypesInstanceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceType)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeArray) ToInstanceTypesInstanceTypeArrayOutput() InstanceTypesInstanceTypeArrayOutput {
	return i.ToInstanceTypesInstanceTypeArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeArray) ToInstanceTypesInstanceTypeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeArrayOutput)
}

type InstanceTypesInstanceTypeOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceType)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeOutput) ToInstanceTypesInstanceTypeOutput() InstanceTypesInstanceTypeOutput {
	return o
}

func (o InstanceTypesInstanceTypeOutput) ToInstanceTypesInstanceTypeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeOutput {
	return o
}

// The CPU benchmark performance that can be provided steadily by on-demand instances is determined by the instance type.
func (o InstanceTypesInstanceTypeOutput) BaselineCredit() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) int { return v.BaselineCredit }).(pulumi.IntOutput)
}

// The GPU device info of Instance.
func (o InstanceTypesInstanceTypeOutput) Gpus() InstanceTypesInstanceTypeGpusArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeGpus { return v.Gpus }).(InstanceTypesInstanceTypeGpusArrayOutput)
}

// The CPU credits obtained at once when creating a on-demand performance instance are fixed at 30 credits per vCPU.
func (o InstanceTypesInstanceTypeOutput) InitialCredit() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) int { return v.InitialCredit }).(pulumi.IntOutput)
}

// The instance type family.
func (o InstanceTypesInstanceTypeOutput) InstanceTypeFamily() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) string { return v.InstanceTypeFamily }).(pulumi.StringOutput)
}

// The id of the instance type.
func (o InstanceTypesInstanceTypeOutput) InstanceTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) string { return v.InstanceTypeId }).(pulumi.StringOutput)
}

// Local disk configuration information corresponding to instance specifications.
func (o InstanceTypesInstanceTypeOutput) LocalVolumes() InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeLocalVolume { return v.LocalVolumes }).(InstanceTypesInstanceTypeLocalVolumeArrayOutput)
}

// Memory information of instance specifications.
func (o InstanceTypesInstanceTypeOutput) Memories() InstanceTypesInstanceTypeMemoryArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeMemory { return v.Memories }).(InstanceTypesInstanceTypeMemoryArrayOutput)
}

// Network information of instance specifications.
func (o InstanceTypesInstanceTypeOutput) Networks() InstanceTypesInstanceTypeNetworkArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeNetwork { return v.Networks }).(InstanceTypesInstanceTypeNetworkArrayOutput)
}

// CPU information of instance specifications.
func (o InstanceTypesInstanceTypeOutput) Processors() InstanceTypesInstanceTypeProcessorArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeProcessor { return v.Processors }).(InstanceTypesInstanceTypeProcessorArrayOutput)
}

// RDMA Specification Information.
func (o InstanceTypesInstanceTypeOutput) Rdmas() InstanceTypesInstanceTypeRdmaArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeRdma { return v.Rdmas }).(InstanceTypesInstanceTypeRdmaArrayOutput)
}

// Cloud disk information for instance specifications.
func (o InstanceTypesInstanceTypeOutput) Volumes() InstanceTypesInstanceTypeVolumeArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeVolume { return v.Volumes }).(InstanceTypesInstanceTypeVolumeArrayOutput)
}

type InstanceTypesInstanceTypeArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceType)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeArrayOutput) ToInstanceTypesInstanceTypeArrayOutput() InstanceTypesInstanceTypeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeArrayOutput) ToInstanceTypesInstanceTypeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceType {
		return vs[0].([]InstanceTypesInstanceType)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeOutput)
}

type InstanceTypesInstanceTypeGpus struct {
	// GPU device information list.
	GpuDevices []InstanceTypesInstanceTypeGpusGpuDevice `pulumi:"gpuDevices"`
}

// InstanceTypesInstanceTypeGpusInput is an input type that accepts InstanceTypesInstanceTypeGpusArgs and InstanceTypesInstanceTypeGpusOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusInput` via:
//
//	InstanceTypesInstanceTypeGpusArgs{...}
type InstanceTypesInstanceTypeGpusInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusOutput() InstanceTypesInstanceTypeGpusOutput
	ToInstanceTypesInstanceTypeGpusOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusOutput
}

type InstanceTypesInstanceTypeGpusArgs struct {
	// GPU device information list.
	GpuDevices InstanceTypesInstanceTypeGpusGpuDeviceArrayInput `pulumi:"gpuDevices"`
}

func (InstanceTypesInstanceTypeGpusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusArgs) ToInstanceTypesInstanceTypeGpusOutput() InstanceTypesInstanceTypeGpusOutput {
	return i.ToInstanceTypesInstanceTypeGpusOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusArgs) ToInstanceTypesInstanceTypeGpusOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusOutput)
}

// InstanceTypesInstanceTypeGpusArrayInput is an input type that accepts InstanceTypesInstanceTypeGpusArray and InstanceTypesInstanceTypeGpusArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusArrayInput` via:
//
//	InstanceTypesInstanceTypeGpusArray{ InstanceTypesInstanceTypeGpusArgs{...} }
type InstanceTypesInstanceTypeGpusArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusArrayOutput() InstanceTypesInstanceTypeGpusArrayOutput
	ToInstanceTypesInstanceTypeGpusArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusArrayOutput
}

type InstanceTypesInstanceTypeGpusArray []InstanceTypesInstanceTypeGpusInput

func (InstanceTypesInstanceTypeGpusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusArray) ToInstanceTypesInstanceTypeGpusArrayOutput() InstanceTypesInstanceTypeGpusArrayOutput {
	return i.ToInstanceTypesInstanceTypeGpusArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusArray) ToInstanceTypesInstanceTypeGpusArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusArrayOutput)
}

type InstanceTypesInstanceTypeGpusOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusOutput) ToInstanceTypesInstanceTypeGpusOutput() InstanceTypesInstanceTypeGpusOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusOutput) ToInstanceTypesInstanceTypeGpusOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusOutput {
	return o
}

// GPU device information list.
func (o InstanceTypesInstanceTypeGpusOutput) GpuDevices() InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpus) []InstanceTypesInstanceTypeGpusGpuDevice { return v.GpuDevices }).(InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput)
}

type InstanceTypesInstanceTypeGpusArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusArrayOutput) ToInstanceTypesInstanceTypeGpusArrayOutput() InstanceTypesInstanceTypeGpusArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusArrayOutput) ToInstanceTypesInstanceTypeGpusArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeGpusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeGpus {
		return vs[0].([]InstanceTypesInstanceTypeGpus)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeGpusOutput)
}

type InstanceTypesInstanceTypeGpusGpuDevice struct {
	// The number of local disks mounted on the instance.
	Count int `pulumi:"count"`
	// Memory information of instance specifications.
	Memories []InstanceTypesInstanceTypeGpusGpuDeviceMemory `pulumi:"memories"`
	// The Product Name of GPU device.
	ProductName string `pulumi:"productName"`
}

// InstanceTypesInstanceTypeGpusGpuDeviceInput is an input type that accepts InstanceTypesInstanceTypeGpusGpuDeviceArgs and InstanceTypesInstanceTypeGpusGpuDeviceOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusGpuDeviceInput` via:
//
//	InstanceTypesInstanceTypeGpusGpuDeviceArgs{...}
type InstanceTypesInstanceTypeGpusGpuDeviceInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusGpuDeviceOutput() InstanceTypesInstanceTypeGpusGpuDeviceOutput
	ToInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusGpuDeviceOutput
}

type InstanceTypesInstanceTypeGpusGpuDeviceArgs struct {
	// The number of local disks mounted on the instance.
	Count pulumi.IntInput `pulumi:"count"`
	// Memory information of instance specifications.
	Memories InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput `pulumi:"memories"`
	// The Product Name of GPU device.
	ProductName pulumi.StringInput `pulumi:"productName"`
}

func (InstanceTypesInstanceTypeGpusGpuDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceArgs) ToInstanceTypesInstanceTypeGpusGpuDeviceOutput() InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return i.ToInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceArgs) ToInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusGpuDeviceOutput)
}

// InstanceTypesInstanceTypeGpusGpuDeviceArrayInput is an input type that accepts InstanceTypesInstanceTypeGpusGpuDeviceArray and InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusGpuDeviceArrayInput` via:
//
//	InstanceTypesInstanceTypeGpusGpuDeviceArray{ InstanceTypesInstanceTypeGpusGpuDeviceArgs{...} }
type InstanceTypesInstanceTypeGpusGpuDeviceArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput
	ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput
}

type InstanceTypesInstanceTypeGpusGpuDeviceArray []InstanceTypesInstanceTypeGpusGpuDeviceInput

func (InstanceTypesInstanceTypeGpusGpuDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceArray) ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return i.ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceArray) ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusGpuDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceOutput() InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return o
}

// The number of local disks mounted on the instance.
func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDevice) int { return v.Count }).(pulumi.IntOutput)
}

// Memory information of instance specifications.
func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) Memories() InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDevice) []InstanceTypesInstanceTypeGpusGpuDeviceMemory {
		return v.Memories
	}).(InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput)
}

// The Product Name of GPU device.
func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDevice) string { return v.ProductName }).(pulumi.StringOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeGpusGpuDevice {
		return vs[0].([]InstanceTypesInstanceTypeGpusGpuDevice)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeGpusGpuDeviceOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemory struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize int `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size int `pulumi:"size"`
}

// InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput is an input type that accepts InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs and InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput` via:
//
//	InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs{...}
type InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput
	ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize pulumi.IntInput `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size pulumi.IntInput `pulumi:"size"`
}

func (InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return i.ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput)
}

// InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput is an input type that accepts InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray and InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput` via:
//
//	InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray{ InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs{...} }
type InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput
	ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray []InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput

func (InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return i.ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return o
}

// The Encrypted Memory Size of GPU device.
func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) EncryptedSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDeviceMemory) int { return v.EncryptedSize }).(pulumi.IntOutput)
}

// Memory size, unit: MiB.
func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDeviceMemory) int { return v.Size }).(pulumi.IntOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeGpusGpuDeviceMemory {
		return vs[0].([]InstanceTypesInstanceTypeGpusGpuDeviceMemory)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput)
}

type InstanceTypesInstanceTypeLocalVolume struct {
	// The number of local disks mounted on the instance.
	Count int `pulumi:"count"`
	// Memory size, unit: MiB.
	Size int `pulumi:"size"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// InstanceTypesInstanceTypeLocalVolumeInput is an input type that accepts InstanceTypesInstanceTypeLocalVolumeArgs and InstanceTypesInstanceTypeLocalVolumeOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeLocalVolumeInput` via:
//
//	InstanceTypesInstanceTypeLocalVolumeArgs{...}
type InstanceTypesInstanceTypeLocalVolumeInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeLocalVolumeOutput() InstanceTypesInstanceTypeLocalVolumeOutput
	ToInstanceTypesInstanceTypeLocalVolumeOutputWithContext(context.Context) InstanceTypesInstanceTypeLocalVolumeOutput
}

type InstanceTypesInstanceTypeLocalVolumeArgs struct {
	// The number of local disks mounted on the instance.
	Count pulumi.IntInput `pulumi:"count"`
	// Memory size, unit: MiB.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (InstanceTypesInstanceTypeLocalVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeLocalVolumeArgs) ToInstanceTypesInstanceTypeLocalVolumeOutput() InstanceTypesInstanceTypeLocalVolumeOutput {
	return i.ToInstanceTypesInstanceTypeLocalVolumeOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeLocalVolumeArgs) ToInstanceTypesInstanceTypeLocalVolumeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeLocalVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeLocalVolumeOutput)
}

// InstanceTypesInstanceTypeLocalVolumeArrayInput is an input type that accepts InstanceTypesInstanceTypeLocalVolumeArray and InstanceTypesInstanceTypeLocalVolumeArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeLocalVolumeArrayInput` via:
//
//	InstanceTypesInstanceTypeLocalVolumeArray{ InstanceTypesInstanceTypeLocalVolumeArgs{...} }
type InstanceTypesInstanceTypeLocalVolumeArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeLocalVolumeArrayOutput() InstanceTypesInstanceTypeLocalVolumeArrayOutput
	ToInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeLocalVolumeArrayOutput
}

type InstanceTypesInstanceTypeLocalVolumeArray []InstanceTypesInstanceTypeLocalVolumeInput

func (InstanceTypesInstanceTypeLocalVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeLocalVolumeArray) ToInstanceTypesInstanceTypeLocalVolumeArrayOutput() InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return i.ToInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeLocalVolumeArray) ToInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeLocalVolumeArrayOutput)
}

type InstanceTypesInstanceTypeLocalVolumeOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeLocalVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeLocalVolumeOutput) ToInstanceTypesInstanceTypeLocalVolumeOutput() InstanceTypesInstanceTypeLocalVolumeOutput {
	return o
}

func (o InstanceTypesInstanceTypeLocalVolumeOutput) ToInstanceTypesInstanceTypeLocalVolumeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeLocalVolumeOutput {
	return o
}

// The number of local disks mounted on the instance.
func (o InstanceTypesInstanceTypeLocalVolumeOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeLocalVolume) int { return v.Count }).(pulumi.IntOutput)
}

// Memory size, unit: MiB.
func (o InstanceTypesInstanceTypeLocalVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeLocalVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume.
func (o InstanceTypesInstanceTypeLocalVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeLocalVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstanceTypesInstanceTypeLocalVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeLocalVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeLocalVolumeArrayOutput) ToInstanceTypesInstanceTypeLocalVolumeArrayOutput() InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeLocalVolumeArrayOutput) ToInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeLocalVolumeArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeLocalVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeLocalVolume {
		return vs[0].([]InstanceTypesInstanceTypeLocalVolume)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeLocalVolumeOutput)
}

type InstanceTypesInstanceTypeMemory struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize int `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size int `pulumi:"size"`
}

// InstanceTypesInstanceTypeMemoryInput is an input type that accepts InstanceTypesInstanceTypeMemoryArgs and InstanceTypesInstanceTypeMemoryOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeMemoryInput` via:
//
//	InstanceTypesInstanceTypeMemoryArgs{...}
type InstanceTypesInstanceTypeMemoryInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeMemoryOutput() InstanceTypesInstanceTypeMemoryOutput
	ToInstanceTypesInstanceTypeMemoryOutputWithContext(context.Context) InstanceTypesInstanceTypeMemoryOutput
}

type InstanceTypesInstanceTypeMemoryArgs struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize pulumi.IntInput `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size pulumi.IntInput `pulumi:"size"`
}

func (InstanceTypesInstanceTypeMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeMemoryArgs) ToInstanceTypesInstanceTypeMemoryOutput() InstanceTypesInstanceTypeMemoryOutput {
	return i.ToInstanceTypesInstanceTypeMemoryOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeMemoryArgs) ToInstanceTypesInstanceTypeMemoryOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeMemoryOutput)
}

// InstanceTypesInstanceTypeMemoryArrayInput is an input type that accepts InstanceTypesInstanceTypeMemoryArray and InstanceTypesInstanceTypeMemoryArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeMemoryArrayInput` via:
//
//	InstanceTypesInstanceTypeMemoryArray{ InstanceTypesInstanceTypeMemoryArgs{...} }
type InstanceTypesInstanceTypeMemoryArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeMemoryArrayOutput() InstanceTypesInstanceTypeMemoryArrayOutput
	ToInstanceTypesInstanceTypeMemoryArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeMemoryArrayOutput
}

type InstanceTypesInstanceTypeMemoryArray []InstanceTypesInstanceTypeMemoryInput

func (InstanceTypesInstanceTypeMemoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeMemoryArray) ToInstanceTypesInstanceTypeMemoryArrayOutput() InstanceTypesInstanceTypeMemoryArrayOutput {
	return i.ToInstanceTypesInstanceTypeMemoryArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeMemoryArray) ToInstanceTypesInstanceTypeMemoryArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeMemoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeMemoryArrayOutput)
}

type InstanceTypesInstanceTypeMemoryOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeMemoryOutput) ToInstanceTypesInstanceTypeMemoryOutput() InstanceTypesInstanceTypeMemoryOutput {
	return o
}

func (o InstanceTypesInstanceTypeMemoryOutput) ToInstanceTypesInstanceTypeMemoryOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeMemoryOutput {
	return o
}

// The Encrypted Memory Size of GPU device.
func (o InstanceTypesInstanceTypeMemoryOutput) EncryptedSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeMemory) int { return v.EncryptedSize }).(pulumi.IntOutput)
}

// Memory size, unit: MiB.
func (o InstanceTypesInstanceTypeMemoryOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeMemory) int { return v.Size }).(pulumi.IntOutput)
}

type InstanceTypesInstanceTypeMemoryArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeMemoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeMemoryArrayOutput) ToInstanceTypesInstanceTypeMemoryArrayOutput() InstanceTypesInstanceTypeMemoryArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeMemoryArrayOutput) ToInstanceTypesInstanceTypeMemoryArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeMemoryArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeMemoryArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeMemoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeMemory {
		return vs[0].([]InstanceTypesInstanceTypeMemory)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeMemoryOutput)
}

type InstanceTypesInstanceTypeNetwork struct {
	// Network benchmark bandwidth capacity (out/in), unit: Mbps.
	BaselineBandwidthMbps int `pulumi:"baselineBandwidthMbps"`
	// Peak network bandwidth capacity (out/in), unit: Mbps.
	MaximumBandwidthMbps int `pulumi:"maximumBandwidthMbps"`
	// Maximum number of elastic network interfaces supported for attachment.
	MaximumNetworkInterfaces int `pulumi:"maximumNetworkInterfaces"`
	// Maximum number of IPv4 addresses for a single elastic network interface.
	MaximumPrivateIpv4AddressesPerNetworkInterface int `pulumi:"maximumPrivateIpv4AddressesPerNetworkInterface"`
	// Maximum queue number for a single elastic network interface, including the queue number supported by the primary network interface and the auxiliary network interface.
	MaximumQueuesPerNetworkInterface int `pulumi:"maximumQueuesPerNetworkInterface"`
	// Network packet sending and receiving capacity (in+out), unit: Kpps.
	MaximumThroughputKpps int `pulumi:"maximumThroughputKpps"`
}

// InstanceTypesInstanceTypeNetworkInput is an input type that accepts InstanceTypesInstanceTypeNetworkArgs and InstanceTypesInstanceTypeNetworkOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeNetworkInput` via:
//
//	InstanceTypesInstanceTypeNetworkArgs{...}
type InstanceTypesInstanceTypeNetworkInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeNetworkOutput() InstanceTypesInstanceTypeNetworkOutput
	ToInstanceTypesInstanceTypeNetworkOutputWithContext(context.Context) InstanceTypesInstanceTypeNetworkOutput
}

type InstanceTypesInstanceTypeNetworkArgs struct {
	// Network benchmark bandwidth capacity (out/in), unit: Mbps.
	BaselineBandwidthMbps pulumi.IntInput `pulumi:"baselineBandwidthMbps"`
	// Peak network bandwidth capacity (out/in), unit: Mbps.
	MaximumBandwidthMbps pulumi.IntInput `pulumi:"maximumBandwidthMbps"`
	// Maximum number of elastic network interfaces supported for attachment.
	MaximumNetworkInterfaces pulumi.IntInput `pulumi:"maximumNetworkInterfaces"`
	// Maximum number of IPv4 addresses for a single elastic network interface.
	MaximumPrivateIpv4AddressesPerNetworkInterface pulumi.IntInput `pulumi:"maximumPrivateIpv4AddressesPerNetworkInterface"`
	// Maximum queue number for a single elastic network interface, including the queue number supported by the primary network interface and the auxiliary network interface.
	MaximumQueuesPerNetworkInterface pulumi.IntInput `pulumi:"maximumQueuesPerNetworkInterface"`
	// Network packet sending and receiving capacity (in+out), unit: Kpps.
	MaximumThroughputKpps pulumi.IntInput `pulumi:"maximumThroughputKpps"`
}

func (InstanceTypesInstanceTypeNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeNetworkArgs) ToInstanceTypesInstanceTypeNetworkOutput() InstanceTypesInstanceTypeNetworkOutput {
	return i.ToInstanceTypesInstanceTypeNetworkOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeNetworkArgs) ToInstanceTypesInstanceTypeNetworkOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeNetworkOutput)
}

// InstanceTypesInstanceTypeNetworkArrayInput is an input type that accepts InstanceTypesInstanceTypeNetworkArray and InstanceTypesInstanceTypeNetworkArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeNetworkArrayInput` via:
//
//	InstanceTypesInstanceTypeNetworkArray{ InstanceTypesInstanceTypeNetworkArgs{...} }
type InstanceTypesInstanceTypeNetworkArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeNetworkArrayOutput() InstanceTypesInstanceTypeNetworkArrayOutput
	ToInstanceTypesInstanceTypeNetworkArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeNetworkArrayOutput
}

type InstanceTypesInstanceTypeNetworkArray []InstanceTypesInstanceTypeNetworkInput

func (InstanceTypesInstanceTypeNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeNetworkArray) ToInstanceTypesInstanceTypeNetworkArrayOutput() InstanceTypesInstanceTypeNetworkArrayOutput {
	return i.ToInstanceTypesInstanceTypeNetworkArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeNetworkArray) ToInstanceTypesInstanceTypeNetworkArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeNetworkArrayOutput)
}

type InstanceTypesInstanceTypeNetworkOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeNetworkOutput) ToInstanceTypesInstanceTypeNetworkOutput() InstanceTypesInstanceTypeNetworkOutput {
	return o
}

func (o InstanceTypesInstanceTypeNetworkOutput) ToInstanceTypesInstanceTypeNetworkOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeNetworkOutput {
	return o
}

// Network benchmark bandwidth capacity (out/in), unit: Mbps.
func (o InstanceTypesInstanceTypeNetworkOutput) BaselineBandwidthMbps() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.BaselineBandwidthMbps }).(pulumi.IntOutput)
}

// Peak network bandwidth capacity (out/in), unit: Mbps.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumBandwidthMbps() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumBandwidthMbps }).(pulumi.IntOutput)
}

// Maximum number of elastic network interfaces supported for attachment.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumNetworkInterfaces() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumNetworkInterfaces }).(pulumi.IntOutput)
}

// Maximum number of IPv4 addresses for a single elastic network interface.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumPrivateIpv4AddressesPerNetworkInterface() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumPrivateIpv4AddressesPerNetworkInterface }).(pulumi.IntOutput)
}

// Maximum queue number for a single elastic network interface, including the queue number supported by the primary network interface and the auxiliary network interface.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumQueuesPerNetworkInterface() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumQueuesPerNetworkInterface }).(pulumi.IntOutput)
}

// Network packet sending and receiving capacity (in+out), unit: Kpps.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumThroughputKpps() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumThroughputKpps }).(pulumi.IntOutput)
}

type InstanceTypesInstanceTypeNetworkArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeNetworkArrayOutput) ToInstanceTypesInstanceTypeNetworkArrayOutput() InstanceTypesInstanceTypeNetworkArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeNetworkArrayOutput) ToInstanceTypesInstanceTypeNetworkArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeNetworkArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeNetworkArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeNetwork {
		return vs[0].([]InstanceTypesInstanceTypeNetwork)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeNetworkOutput)
}

type InstanceTypesInstanceTypeProcessor struct {
	// CPU clock speed, unit: GHz.
	BaseFrequency float64 `pulumi:"baseFrequency"`
	// The number of ECS instance CPU cores.
	Cpus int `pulumi:"cpus"`
	// CPU model.
	Model string `pulumi:"model"`
	// CPU Turbo Boost, unit: GHz.
	TurboFrequency float64 `pulumi:"turboFrequency"`
}

// InstanceTypesInstanceTypeProcessorInput is an input type that accepts InstanceTypesInstanceTypeProcessorArgs and InstanceTypesInstanceTypeProcessorOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeProcessorInput` via:
//
//	InstanceTypesInstanceTypeProcessorArgs{...}
type InstanceTypesInstanceTypeProcessorInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeProcessorOutput() InstanceTypesInstanceTypeProcessorOutput
	ToInstanceTypesInstanceTypeProcessorOutputWithContext(context.Context) InstanceTypesInstanceTypeProcessorOutput
}

type InstanceTypesInstanceTypeProcessorArgs struct {
	// CPU clock speed, unit: GHz.
	BaseFrequency pulumi.Float64Input `pulumi:"baseFrequency"`
	// The number of ECS instance CPU cores.
	Cpus pulumi.IntInput `pulumi:"cpus"`
	// CPU model.
	Model pulumi.StringInput `pulumi:"model"`
	// CPU Turbo Boost, unit: GHz.
	TurboFrequency pulumi.Float64Input `pulumi:"turboFrequency"`
}

func (InstanceTypesInstanceTypeProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeProcessorArgs) ToInstanceTypesInstanceTypeProcessorOutput() InstanceTypesInstanceTypeProcessorOutput {
	return i.ToInstanceTypesInstanceTypeProcessorOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeProcessorArgs) ToInstanceTypesInstanceTypeProcessorOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeProcessorOutput)
}

// InstanceTypesInstanceTypeProcessorArrayInput is an input type that accepts InstanceTypesInstanceTypeProcessorArray and InstanceTypesInstanceTypeProcessorArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeProcessorArrayInput` via:
//
//	InstanceTypesInstanceTypeProcessorArray{ InstanceTypesInstanceTypeProcessorArgs{...} }
type InstanceTypesInstanceTypeProcessorArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeProcessorArrayOutput() InstanceTypesInstanceTypeProcessorArrayOutput
	ToInstanceTypesInstanceTypeProcessorArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeProcessorArrayOutput
}

type InstanceTypesInstanceTypeProcessorArray []InstanceTypesInstanceTypeProcessorInput

func (InstanceTypesInstanceTypeProcessorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeProcessorArray) ToInstanceTypesInstanceTypeProcessorArrayOutput() InstanceTypesInstanceTypeProcessorArrayOutput {
	return i.ToInstanceTypesInstanceTypeProcessorArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeProcessorArray) ToInstanceTypesInstanceTypeProcessorArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeProcessorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeProcessorArrayOutput)
}

type InstanceTypesInstanceTypeProcessorOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeProcessorOutput) ToInstanceTypesInstanceTypeProcessorOutput() InstanceTypesInstanceTypeProcessorOutput {
	return o
}

func (o InstanceTypesInstanceTypeProcessorOutput) ToInstanceTypesInstanceTypeProcessorOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeProcessorOutput {
	return o
}

// CPU clock speed, unit: GHz.
func (o InstanceTypesInstanceTypeProcessorOutput) BaseFrequency() pulumi.Float64Output {
	return o.ApplyT(func(v InstanceTypesInstanceTypeProcessor) float64 { return v.BaseFrequency }).(pulumi.Float64Output)
}

// The number of ECS instance CPU cores.
func (o InstanceTypesInstanceTypeProcessorOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeProcessor) int { return v.Cpus }).(pulumi.IntOutput)
}

// CPU model.
func (o InstanceTypesInstanceTypeProcessorOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeProcessor) string { return v.Model }).(pulumi.StringOutput)
}

// CPU Turbo Boost, unit: GHz.
func (o InstanceTypesInstanceTypeProcessorOutput) TurboFrequency() pulumi.Float64Output {
	return o.ApplyT(func(v InstanceTypesInstanceTypeProcessor) float64 { return v.TurboFrequency }).(pulumi.Float64Output)
}

type InstanceTypesInstanceTypeProcessorArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeProcessorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeProcessorArrayOutput) ToInstanceTypesInstanceTypeProcessorArrayOutput() InstanceTypesInstanceTypeProcessorArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeProcessorArrayOutput) ToInstanceTypesInstanceTypeProcessorArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeProcessorArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeProcessorArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeProcessorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeProcessor {
		return vs[0].([]InstanceTypesInstanceTypeProcessor)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeProcessorOutput)
}

type InstanceTypesInstanceTypeRdma struct {
	// Number of RDMA network cards.
	RdmaNetworkInterfaces int `pulumi:"rdmaNetworkInterfaces"`
}

// InstanceTypesInstanceTypeRdmaInput is an input type that accepts InstanceTypesInstanceTypeRdmaArgs and InstanceTypesInstanceTypeRdmaOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeRdmaInput` via:
//
//	InstanceTypesInstanceTypeRdmaArgs{...}
type InstanceTypesInstanceTypeRdmaInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeRdmaOutput() InstanceTypesInstanceTypeRdmaOutput
	ToInstanceTypesInstanceTypeRdmaOutputWithContext(context.Context) InstanceTypesInstanceTypeRdmaOutput
}

type InstanceTypesInstanceTypeRdmaArgs struct {
	// Number of RDMA network cards.
	RdmaNetworkInterfaces pulumi.IntInput `pulumi:"rdmaNetworkInterfaces"`
}

func (InstanceTypesInstanceTypeRdmaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeRdmaArgs) ToInstanceTypesInstanceTypeRdmaOutput() InstanceTypesInstanceTypeRdmaOutput {
	return i.ToInstanceTypesInstanceTypeRdmaOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeRdmaArgs) ToInstanceTypesInstanceTypeRdmaOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeRdmaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeRdmaOutput)
}

// InstanceTypesInstanceTypeRdmaArrayInput is an input type that accepts InstanceTypesInstanceTypeRdmaArray and InstanceTypesInstanceTypeRdmaArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeRdmaArrayInput` via:
//
//	InstanceTypesInstanceTypeRdmaArray{ InstanceTypesInstanceTypeRdmaArgs{...} }
type InstanceTypesInstanceTypeRdmaArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeRdmaArrayOutput() InstanceTypesInstanceTypeRdmaArrayOutput
	ToInstanceTypesInstanceTypeRdmaArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeRdmaArrayOutput
}

type InstanceTypesInstanceTypeRdmaArray []InstanceTypesInstanceTypeRdmaInput

func (InstanceTypesInstanceTypeRdmaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeRdmaArray) ToInstanceTypesInstanceTypeRdmaArrayOutput() InstanceTypesInstanceTypeRdmaArrayOutput {
	return i.ToInstanceTypesInstanceTypeRdmaArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeRdmaArray) ToInstanceTypesInstanceTypeRdmaArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeRdmaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeRdmaArrayOutput)
}

type InstanceTypesInstanceTypeRdmaOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeRdmaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeRdmaOutput) ToInstanceTypesInstanceTypeRdmaOutput() InstanceTypesInstanceTypeRdmaOutput {
	return o
}

func (o InstanceTypesInstanceTypeRdmaOutput) ToInstanceTypesInstanceTypeRdmaOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeRdmaOutput {
	return o
}

// Number of RDMA network cards.
func (o InstanceTypesInstanceTypeRdmaOutput) RdmaNetworkInterfaces() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeRdma) int { return v.RdmaNetworkInterfaces }).(pulumi.IntOutput)
}

type InstanceTypesInstanceTypeRdmaArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeRdmaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeRdmaArrayOutput) ToInstanceTypesInstanceTypeRdmaArrayOutput() InstanceTypesInstanceTypeRdmaArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeRdmaArrayOutput) ToInstanceTypesInstanceTypeRdmaArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeRdmaArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeRdmaArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeRdmaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeRdma {
		return vs[0].([]InstanceTypesInstanceTypeRdma)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeRdmaOutput)
}

type InstanceTypesInstanceTypeVolume struct {
	// The maximum number of volumes.
	MaximumCount int `pulumi:"maximumCount"`
	// List of supported volume types.
	SupportedVolumeTypes []string `pulumi:"supportedVolumeTypes"`
}

// InstanceTypesInstanceTypeVolumeInput is an input type that accepts InstanceTypesInstanceTypeVolumeArgs and InstanceTypesInstanceTypeVolumeOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeVolumeInput` via:
//
//	InstanceTypesInstanceTypeVolumeArgs{...}
type InstanceTypesInstanceTypeVolumeInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeVolumeOutput() InstanceTypesInstanceTypeVolumeOutput
	ToInstanceTypesInstanceTypeVolumeOutputWithContext(context.Context) InstanceTypesInstanceTypeVolumeOutput
}

type InstanceTypesInstanceTypeVolumeArgs struct {
	// The maximum number of volumes.
	MaximumCount pulumi.IntInput `pulumi:"maximumCount"`
	// List of supported volume types.
	SupportedVolumeTypes pulumi.StringArrayInput `pulumi:"supportedVolumeTypes"`
}

func (InstanceTypesInstanceTypeVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeVolumeArgs) ToInstanceTypesInstanceTypeVolumeOutput() InstanceTypesInstanceTypeVolumeOutput {
	return i.ToInstanceTypesInstanceTypeVolumeOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeVolumeArgs) ToInstanceTypesInstanceTypeVolumeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeVolumeOutput)
}

// InstanceTypesInstanceTypeVolumeArrayInput is an input type that accepts InstanceTypesInstanceTypeVolumeArray and InstanceTypesInstanceTypeVolumeArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeVolumeArrayInput` via:
//
//	InstanceTypesInstanceTypeVolumeArray{ InstanceTypesInstanceTypeVolumeArgs{...} }
type InstanceTypesInstanceTypeVolumeArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeVolumeArrayOutput() InstanceTypesInstanceTypeVolumeArrayOutput
	ToInstanceTypesInstanceTypeVolumeArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeVolumeArrayOutput
}

type InstanceTypesInstanceTypeVolumeArray []InstanceTypesInstanceTypeVolumeInput

func (InstanceTypesInstanceTypeVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeVolumeArray) ToInstanceTypesInstanceTypeVolumeArrayOutput() InstanceTypesInstanceTypeVolumeArrayOutput {
	return i.ToInstanceTypesInstanceTypeVolumeArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeVolumeArray) ToInstanceTypesInstanceTypeVolumeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeVolumeArrayOutput)
}

type InstanceTypesInstanceTypeVolumeOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeVolumeOutput) ToInstanceTypesInstanceTypeVolumeOutput() InstanceTypesInstanceTypeVolumeOutput {
	return o
}

func (o InstanceTypesInstanceTypeVolumeOutput) ToInstanceTypesInstanceTypeVolumeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeVolumeOutput {
	return o
}

// The maximum number of volumes.
func (o InstanceTypesInstanceTypeVolumeOutput) MaximumCount() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeVolume) int { return v.MaximumCount }).(pulumi.IntOutput)
}

// List of supported volume types.
func (o InstanceTypesInstanceTypeVolumeOutput) SupportedVolumeTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeVolume) []string { return v.SupportedVolumeTypes }).(pulumi.StringArrayOutput)
}

type InstanceTypesInstanceTypeVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeVolumeArrayOutput) ToInstanceTypesInstanceTypeVolumeArrayOutput() InstanceTypesInstanceTypeVolumeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeVolumeArrayOutput) ToInstanceTypesInstanceTypeVolumeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeVolumeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeVolumeArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeVolume {
		return vs[0].([]InstanceTypesInstanceTypeVolume)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeVolumeOutput)
}

type InstancesInstance struct {
	// The number of ECS instance CPU cores.
	Cpus int `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of DeploymentSet.
	DeploymentSetId string `pulumi:"deploymentSetId"`
	// The description of ECS instance.
	Description string `pulumi:"description"`
	// The GPU device info of Instance.
	GpuDevices []InstancesInstanceGpuDevice `pulumi:"gpuDevices"`
	// The host name of ECS instance.
	HostName string `pulumi:"hostName"`
	// The image ID of ECS instance.
	ImageId string `pulumi:"imageId"`
	// The charge type of ECS instance.
	InstanceChargeType string `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of ECS instance.
	InstanceName string `pulumi:"instanceName"`
	// The spec type of ECS instance.
	InstanceType string `pulumi:"instanceType"`
	// The number of IPv6 addresses of the ECS instance.
	Ipv6AddressCount int `pulumi:"ipv6AddressCount"`
	// The  IPv6 address list of the ECS instance.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// The Flag of GPU instance.If the instance is GPU,The flag is true.
	IsGpu bool `pulumi:"isGpu"`
	// The ssh key ID of ECS instance.
	KeyPairId string `pulumi:"keyPairId"`
	// The key pair name of ECS instance.
	KeyPairName string `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize int `pulumi:"memorySize"`
	// The networkInterface detail collection of ECS instance.
	NetworkInterfaces []InstancesInstanceNetworkInterface `pulumi:"networkInterfaces"`
	// The os name of ECS instance.
	OsName string `pulumi:"osName"`
	// The os type of ECS instance.
	OsType string `pulumi:"osType"`
	// The ProjectName of ECS instance.
	ProjectName string `pulumi:"projectName"`
	// The spot price limit of ECS instance.
	SpotPriceLimit float64 `pulumi:"spotPriceLimit"`
	// The spot strategy of ECS instance.
	SpotStrategy string `pulumi:"spotStrategy"`
	// The status of ECS instance.
	Status string `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode string `pulumi:"stoppedMode"`
	// Tags.
	Tags []InstancesInstanceTag `pulumi:"tags"`
	// The update time of ECS instance.
	UpdatedAt string `pulumi:"updatedAt"`
	// The volume detail collection of volume.
	Volumes []InstancesInstanceVolume `pulumi:"volumes"`
	// The VPC ID of ECS instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceInput is an input type that accepts InstancesInstanceArgs and InstancesInstanceOutput values.
// You can construct a concrete instance of `InstancesInstanceInput` via:
//
//	InstancesInstanceArgs{...}
type InstancesInstanceInput interface {
	pulumi.Input

	ToInstancesInstanceOutput() InstancesInstanceOutput
	ToInstancesInstanceOutputWithContext(context.Context) InstancesInstanceOutput
}

type InstancesInstanceArgs struct {
	// The number of ECS instance CPU cores.
	Cpus pulumi.IntInput `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of DeploymentSet.
	DeploymentSetId pulumi.StringInput `pulumi:"deploymentSetId"`
	// The description of ECS instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The GPU device info of Instance.
	GpuDevices InstancesInstanceGpuDeviceArrayInput `pulumi:"gpuDevices"`
	// The host name of ECS instance.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// The image ID of ECS instance.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The charge type of ECS instance.
	InstanceChargeType pulumi.StringInput `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of ECS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The spec type of ECS instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// The number of IPv6 addresses of the ECS instance.
	Ipv6AddressCount pulumi.IntInput `pulumi:"ipv6AddressCount"`
	// The  IPv6 address list of the ECS instance.
	Ipv6Addresses pulumi.StringArrayInput `pulumi:"ipv6Addresses"`
	// The Flag of GPU instance.If the instance is GPU,The flag is true.
	IsGpu pulumi.BoolInput `pulumi:"isGpu"`
	// The ssh key ID of ECS instance.
	KeyPairId pulumi.StringInput `pulumi:"keyPairId"`
	// The key pair name of ECS instance.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntInput `pulumi:"memorySize"`
	// The networkInterface detail collection of ECS instance.
	NetworkInterfaces InstancesInstanceNetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// The os name of ECS instance.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The os type of ECS instance.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The ProjectName of ECS instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The spot price limit of ECS instance.
	SpotPriceLimit pulumi.Float64Input `pulumi:"spotPriceLimit"`
	// The spot strategy of ECS instance.
	SpotStrategy pulumi.StringInput `pulumi:"spotStrategy"`
	// The status of ECS instance.
	Status pulumi.StringInput `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode pulumi.StringInput `pulumi:"stoppedMode"`
	// Tags.
	Tags InstancesInstanceTagArrayInput `pulumi:"tags"`
	// The update time of ECS instance.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The volume detail collection of volume.
	Volumes InstancesInstanceVolumeArrayInput `pulumi:"volumes"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return i.ToInstancesInstanceOutputWithContext(context.Background())
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceOutput)
}

// InstancesInstanceArrayInput is an input type that accepts InstancesInstanceArray and InstancesInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceArrayInput` via:
//
//	InstancesInstanceArray{ InstancesInstanceArgs{...} }
type InstancesInstanceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput
	ToInstancesInstanceArrayOutputWithContext(context.Context) InstancesInstanceArrayOutput
}

type InstancesInstanceArray []InstancesInstanceInput

func (InstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return i.ToInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceArrayOutput)
}

type InstancesInstanceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return o
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return o
}

// The number of ECS instance CPU cores.
func (o InstancesInstanceOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.Cpus }).(pulumi.IntOutput)
}

// The create time of ECS instance.
func (o InstancesInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of DeploymentSet.
func (o InstancesInstanceOutput) DeploymentSetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.DeploymentSetId }).(pulumi.StringOutput)
}

// The description of ECS instance.
func (o InstancesInstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Description }).(pulumi.StringOutput)
}

// The GPU device info of Instance.
func (o InstancesInstanceOutput) GpuDevices() InstancesInstanceGpuDeviceArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceGpuDevice { return v.GpuDevices }).(InstancesInstanceGpuDeviceArrayOutput)
}

// The host name of ECS instance.
func (o InstancesInstanceOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.HostName }).(pulumi.StringOutput)
}

// The image ID of ECS instance.
func (o InstancesInstanceOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ImageId }).(pulumi.StringOutput)
}

// The charge type of ECS instance.
func (o InstancesInstanceOutput) InstanceChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceChargeType }).(pulumi.StringOutput)
}

// The ID of ECS instance.
func (o InstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of ECS instance.
func (o InstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The spec type of ECS instance.
func (o InstancesInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// The number of IPv6 addresses of the ECS instance.
func (o InstancesInstanceOutput) Ipv6AddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.Ipv6AddressCount }).(pulumi.IntOutput)
}

// The  IPv6 address list of the ECS instance.
func (o InstancesInstanceOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []string { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

// The Flag of GPU instance.If the instance is GPU,The flag is true.
func (o InstancesInstanceOutput) IsGpu() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.IsGpu }).(pulumi.BoolOutput)
}

// The ssh key ID of ECS instance.
func (o InstancesInstanceOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.KeyPairId }).(pulumi.StringOutput)
}

// The key pair name of ECS instance.
func (o InstancesInstanceOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The memory size of ECS instance.
func (o InstancesInstanceOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.MemorySize }).(pulumi.IntOutput)
}

// The networkInterface detail collection of ECS instance.
func (o InstancesInstanceOutput) NetworkInterfaces() InstancesInstanceNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceNetworkInterface { return v.NetworkInterfaces }).(InstancesInstanceNetworkInterfaceArrayOutput)
}

// The os name of ECS instance.
func (o InstancesInstanceOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OsName }).(pulumi.StringOutput)
}

// The os type of ECS instance.
func (o InstancesInstanceOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OsType }).(pulumi.StringOutput)
}

// The ProjectName of ECS instance.
func (o InstancesInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The spot price limit of ECS instance.
func (o InstancesInstanceOutput) SpotPriceLimit() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstance) float64 { return v.SpotPriceLimit }).(pulumi.Float64Output)
}

// The spot strategy of ECS instance.
func (o InstancesInstanceOutput) SpotStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.SpotStrategy }).(pulumi.StringOutput)
}

// The status of ECS instance.
func (o InstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// The stop mode of ECS instance.
func (o InstancesInstanceOutput) StoppedMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.StoppedMode }).(pulumi.StringOutput)
}

// Tags.
func (o InstancesInstanceOutput) Tags() InstancesInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceTag { return v.Tags }).(InstancesInstanceTagArrayOutput)
}

// The update time of ECS instance.
func (o InstancesInstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The volume detail collection of volume.
func (o InstancesInstanceOutput) Volumes() InstancesInstanceVolumeArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceVolume { return v.Volumes }).(InstancesInstanceVolumeArrayOutput)
}

// The VPC ID of ECS instance.
func (o InstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone ID of ECS instance.
func (o InstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstance {
		return vs[0].([]InstancesInstance)[vs[1].(int)]
	}).(InstancesInstanceOutput)
}

type InstancesInstanceGpuDevice struct {
	// The Count of GPU device.
	Count int `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize int `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize int `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName string `pulumi:"productName"`
}

// InstancesInstanceGpuDeviceInput is an input type that accepts InstancesInstanceGpuDeviceArgs and InstancesInstanceGpuDeviceOutput values.
// You can construct a concrete instance of `InstancesInstanceGpuDeviceInput` via:
//
//	InstancesInstanceGpuDeviceArgs{...}
type InstancesInstanceGpuDeviceInput interface {
	pulumi.Input

	ToInstancesInstanceGpuDeviceOutput() InstancesInstanceGpuDeviceOutput
	ToInstancesInstanceGpuDeviceOutputWithContext(context.Context) InstancesInstanceGpuDeviceOutput
}

type InstancesInstanceGpuDeviceArgs struct {
	// The Count of GPU device.
	Count pulumi.IntInput `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize pulumi.IntInput `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntInput `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName pulumi.StringInput `pulumi:"productName"`
}

func (InstancesInstanceGpuDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceGpuDevice)(nil)).Elem()
}

func (i InstancesInstanceGpuDeviceArgs) ToInstancesInstanceGpuDeviceOutput() InstancesInstanceGpuDeviceOutput {
	return i.ToInstancesInstanceGpuDeviceOutputWithContext(context.Background())
}

func (i InstancesInstanceGpuDeviceArgs) ToInstancesInstanceGpuDeviceOutputWithContext(ctx context.Context) InstancesInstanceGpuDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceGpuDeviceOutput)
}

// InstancesInstanceGpuDeviceArrayInput is an input type that accepts InstancesInstanceGpuDeviceArray and InstancesInstanceGpuDeviceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceGpuDeviceArrayInput` via:
//
//	InstancesInstanceGpuDeviceArray{ InstancesInstanceGpuDeviceArgs{...} }
type InstancesInstanceGpuDeviceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceGpuDeviceArrayOutput() InstancesInstanceGpuDeviceArrayOutput
	ToInstancesInstanceGpuDeviceArrayOutputWithContext(context.Context) InstancesInstanceGpuDeviceArrayOutput
}

type InstancesInstanceGpuDeviceArray []InstancesInstanceGpuDeviceInput

func (InstancesInstanceGpuDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceGpuDevice)(nil)).Elem()
}

func (i InstancesInstanceGpuDeviceArray) ToInstancesInstanceGpuDeviceArrayOutput() InstancesInstanceGpuDeviceArrayOutput {
	return i.ToInstancesInstanceGpuDeviceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceGpuDeviceArray) ToInstancesInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) InstancesInstanceGpuDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceGpuDeviceArrayOutput)
}

type InstancesInstanceGpuDeviceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceGpuDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceGpuDevice)(nil)).Elem()
}

func (o InstancesInstanceGpuDeviceOutput) ToInstancesInstanceGpuDeviceOutput() InstancesInstanceGpuDeviceOutput {
	return o
}

func (o InstancesInstanceGpuDeviceOutput) ToInstancesInstanceGpuDeviceOutputWithContext(ctx context.Context) InstancesInstanceGpuDeviceOutput {
	return o
}

// The Count of GPU device.
func (o InstancesInstanceGpuDeviceOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceGpuDevice) int { return v.Count }).(pulumi.IntOutput)
}

// The Encrypted Memory Size of GPU device.
func (o InstancesInstanceGpuDeviceOutput) EncryptedMemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceGpuDevice) int { return v.EncryptedMemorySize }).(pulumi.IntOutput)
}

// The memory size of ECS instance.
func (o InstancesInstanceGpuDeviceOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceGpuDevice) int { return v.MemorySize }).(pulumi.IntOutput)
}

// The Product Name of GPU device.
func (o InstancesInstanceGpuDeviceOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceGpuDevice) string { return v.ProductName }).(pulumi.StringOutput)
}

type InstancesInstanceGpuDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceGpuDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceGpuDevice)(nil)).Elem()
}

func (o InstancesInstanceGpuDeviceArrayOutput) ToInstancesInstanceGpuDeviceArrayOutput() InstancesInstanceGpuDeviceArrayOutput {
	return o
}

func (o InstancesInstanceGpuDeviceArrayOutput) ToInstancesInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) InstancesInstanceGpuDeviceArrayOutput {
	return o
}

func (o InstancesInstanceGpuDeviceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceGpuDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceGpuDevice {
		return vs[0].([]InstancesInstanceGpuDevice)[vs[1].(int)]
	}).(InstancesInstanceGpuDeviceOutput)
}

type InstancesInstanceNetworkInterface struct {
	// The mac address of networkInterface.
	MacAddress string `pulumi:"macAddress"`
	// The ID of networkInterface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress string `pulumi:"primaryIpAddress"`
	// The subnet ID of networkInterface.
	SubnetId string `pulumi:"subnetId"`
	// The type of networkInterface.
	Type string `pulumi:"type"`
	// The VPC ID of ECS instance.
	VpcId string `pulumi:"vpcId"`
}

// InstancesInstanceNetworkInterfaceInput is an input type that accepts InstancesInstanceNetworkInterfaceArgs and InstancesInstanceNetworkInterfaceOutput values.
// You can construct a concrete instance of `InstancesInstanceNetworkInterfaceInput` via:
//
//	InstancesInstanceNetworkInterfaceArgs{...}
type InstancesInstanceNetworkInterfaceInput interface {
	pulumi.Input

	ToInstancesInstanceNetworkInterfaceOutput() InstancesInstanceNetworkInterfaceOutput
	ToInstancesInstanceNetworkInterfaceOutputWithContext(context.Context) InstancesInstanceNetworkInterfaceOutput
}

type InstancesInstanceNetworkInterfaceArgs struct {
	// The mac address of networkInterface.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The ID of networkInterface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress pulumi.StringInput `pulumi:"primaryIpAddress"`
	// The subnet ID of networkInterface.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of networkInterface.
	Type pulumi.StringInput `pulumi:"type"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (InstancesInstanceNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (i InstancesInstanceNetworkInterfaceArgs) ToInstancesInstanceNetworkInterfaceOutput() InstancesInstanceNetworkInterfaceOutput {
	return i.ToInstancesInstanceNetworkInterfaceOutputWithContext(context.Background())
}

func (i InstancesInstanceNetworkInterfaceArgs) ToInstancesInstanceNetworkInterfaceOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNetworkInterfaceOutput)
}

// InstancesInstanceNetworkInterfaceArrayInput is an input type that accepts InstancesInstanceNetworkInterfaceArray and InstancesInstanceNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceNetworkInterfaceArrayInput` via:
//
//	InstancesInstanceNetworkInterfaceArray{ InstancesInstanceNetworkInterfaceArgs{...} }
type InstancesInstanceNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceNetworkInterfaceArrayOutput() InstancesInstanceNetworkInterfaceArrayOutput
	ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(context.Context) InstancesInstanceNetworkInterfaceArrayOutput
}

type InstancesInstanceNetworkInterfaceArray []InstancesInstanceNetworkInterfaceInput

func (InstancesInstanceNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (i InstancesInstanceNetworkInterfaceArray) ToInstancesInstanceNetworkInterfaceArrayOutput() InstancesInstanceNetworkInterfaceArrayOutput {
	return i.ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceNetworkInterfaceArray) ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNetworkInterfaceArrayOutput)
}

type InstancesInstanceNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (o InstancesInstanceNetworkInterfaceOutput) ToInstancesInstanceNetworkInterfaceOutput() InstancesInstanceNetworkInterfaceOutput {
	return o
}

func (o InstancesInstanceNetworkInterfaceOutput) ToInstancesInstanceNetworkInterfaceOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceOutput {
	return o
}

// The mac address of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The ID of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The primary ip address of ECS instance.
func (o InstancesInstanceNetworkInterfaceOutput) PrimaryIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.PrimaryIpAddress }).(pulumi.StringOutput)
}

// The subnet ID of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The type of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.Type }).(pulumi.StringOutput)
}

// The VPC ID of ECS instance.
func (o InstancesInstanceNetworkInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type InstancesInstanceNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (o InstancesInstanceNetworkInterfaceArrayOutput) ToInstancesInstanceNetworkInterfaceArrayOutput() InstancesInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o InstancesInstanceNetworkInterfaceArrayOutput) ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o InstancesInstanceNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceNetworkInterface {
		return vs[0].([]InstancesInstanceNetworkInterface)[vs[1].(int)]
	}).(InstancesInstanceNetworkInterfaceOutput)
}

type InstancesInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesInstanceTagInput is an input type that accepts InstancesInstanceTagArgs and InstancesInstanceTagOutput values.
// You can construct a concrete instance of `InstancesInstanceTagInput` via:
//
//	InstancesInstanceTagArgs{...}
type InstancesInstanceTagInput interface {
	pulumi.Input

	ToInstancesInstanceTagOutput() InstancesInstanceTagOutput
	ToInstancesInstanceTagOutputWithContext(context.Context) InstancesInstanceTagOutput
}

type InstancesInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return i.ToInstancesInstanceTagOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagOutput)
}

// InstancesInstanceTagArrayInput is an input type that accepts InstancesInstanceTagArray and InstancesInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceTagArrayInput` via:
//
//	InstancesInstanceTagArray{ InstancesInstanceTagArgs{...} }
type InstancesInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput
	ToInstancesInstanceTagArrayOutputWithContext(context.Context) InstancesInstanceTagArrayOutput
}

type InstancesInstanceTagArray []InstancesInstanceTagInput

func (InstancesInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return i.ToInstancesInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagArrayOutput)
}

type InstancesInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return o
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceTag {
		return vs[0].([]InstancesInstanceTag)[vs[1].(int)]
	}).(InstancesInstanceTagOutput)
}

type InstancesInstanceVolume struct {
	// The delete with instance flag of volume.
	DeleteWithInstance bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size int `pulumi:"size"`
	// The ID of volume.
	VolumeId string `pulumi:"volumeId"`
	// The Name of volume.
	VolumeName string `pulumi:"volumeName"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// InstancesInstanceVolumeInput is an input type that accepts InstancesInstanceVolumeArgs and InstancesInstanceVolumeOutput values.
// You can construct a concrete instance of `InstancesInstanceVolumeInput` via:
//
//	InstancesInstanceVolumeArgs{...}
type InstancesInstanceVolumeInput interface {
	pulumi.Input

	ToInstancesInstanceVolumeOutput() InstancesInstanceVolumeOutput
	ToInstancesInstanceVolumeOutputWithContext(context.Context) InstancesInstanceVolumeOutput
}

type InstancesInstanceVolumeArgs struct {
	// The delete with instance flag of volume.
	DeleteWithInstance pulumi.BoolInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntInput `pulumi:"size"`
	// The ID of volume.
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
	// The Name of volume.
	VolumeName pulumi.StringInput `pulumi:"volumeName"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (InstancesInstanceVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceVolume)(nil)).Elem()
}

func (i InstancesInstanceVolumeArgs) ToInstancesInstanceVolumeOutput() InstancesInstanceVolumeOutput {
	return i.ToInstancesInstanceVolumeOutputWithContext(context.Background())
}

func (i InstancesInstanceVolumeArgs) ToInstancesInstanceVolumeOutputWithContext(ctx context.Context) InstancesInstanceVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceVolumeOutput)
}

// InstancesInstanceVolumeArrayInput is an input type that accepts InstancesInstanceVolumeArray and InstancesInstanceVolumeArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceVolumeArrayInput` via:
//
//	InstancesInstanceVolumeArray{ InstancesInstanceVolumeArgs{...} }
type InstancesInstanceVolumeArrayInput interface {
	pulumi.Input

	ToInstancesInstanceVolumeArrayOutput() InstancesInstanceVolumeArrayOutput
	ToInstancesInstanceVolumeArrayOutputWithContext(context.Context) InstancesInstanceVolumeArrayOutput
}

type InstancesInstanceVolumeArray []InstancesInstanceVolumeInput

func (InstancesInstanceVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceVolume)(nil)).Elem()
}

func (i InstancesInstanceVolumeArray) ToInstancesInstanceVolumeArrayOutput() InstancesInstanceVolumeArrayOutput {
	return i.ToInstancesInstanceVolumeArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceVolumeArray) ToInstancesInstanceVolumeArrayOutputWithContext(ctx context.Context) InstancesInstanceVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceVolumeArrayOutput)
}

type InstancesInstanceVolumeOutput struct{ *pulumi.OutputState }

func (InstancesInstanceVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceVolume)(nil)).Elem()
}

func (o InstancesInstanceVolumeOutput) ToInstancesInstanceVolumeOutput() InstancesInstanceVolumeOutput {
	return o
}

func (o InstancesInstanceVolumeOutput) ToInstancesInstanceVolumeOutputWithContext(ctx context.Context) InstancesInstanceVolumeOutput {
	return o
}

// The delete with instance flag of volume.
func (o InstancesInstanceVolumeOutput) DeleteWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) bool { return v.DeleteWithInstance }).(pulumi.BoolOutput)
}

// The size of volume.
func (o InstancesInstanceVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The ID of volume.
func (o InstancesInstanceVolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) string { return v.VolumeId }).(pulumi.StringOutput)
}

// The Name of volume.
func (o InstancesInstanceVolumeOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) string { return v.VolumeName }).(pulumi.StringOutput)
}

// The type of volume.
func (o InstancesInstanceVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstancesInstanceVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceVolume)(nil)).Elem()
}

func (o InstancesInstanceVolumeArrayOutput) ToInstancesInstanceVolumeArrayOutput() InstancesInstanceVolumeArrayOutput {
	return o
}

func (o InstancesInstanceVolumeArrayOutput) ToInstancesInstanceVolumeArrayOutputWithContext(ctx context.Context) InstancesInstanceVolumeArrayOutput {
	return o
}

func (o InstancesInstanceVolumeArrayOutput) Index(i pulumi.IntInput) InstancesInstanceVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceVolume {
		return vs[0].([]InstancesInstanceVolume)[vs[1].(int)]
	}).(InstancesInstanceVolumeOutput)
}

type InstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type InvocationResultsInvocationResult struct {
	// The id of ecs command.
	CommandId string `pulumi:"commandId"`
	// The end time of the ecs invocation in the instance.
	EndTime string `pulumi:"endTime"`
	// The error code of the ecs invocation.
	ErrorCode string `pulumi:"errorCode"`
	// The error message of the ecs invocation.
	ErrorMessage string `pulumi:"errorMessage"`
	// The exit code of the ecs command.
	ExitCode int `pulumi:"exitCode"`
	// The id of the ecs invocation result.
	Id string `pulumi:"id"`
	// The id of ecs instance.
	InstanceId string `pulumi:"instanceId"`
	// The id of ecs invocation.
	InvocationId string `pulumi:"invocationId"`
	// The id of the ecs invocation result.
	InvocationResultId string `pulumi:"invocationResultId"`
	// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
	InvocationResultStatus string `pulumi:"invocationResultStatus"`
	// The base64 encoded output message of the ecs invocation.
	Output string `pulumi:"output"`
	// The start time of the ecs invocation in the instance.
	StartTime string `pulumi:"startTime"`
	// The username of the ecs command.
	Username string `pulumi:"username"`
}

// InvocationResultsInvocationResultInput is an input type that accepts InvocationResultsInvocationResultArgs and InvocationResultsInvocationResultOutput values.
// You can construct a concrete instance of `InvocationResultsInvocationResultInput` via:
//
//	InvocationResultsInvocationResultArgs{...}
type InvocationResultsInvocationResultInput interface {
	pulumi.Input

	ToInvocationResultsInvocationResultOutput() InvocationResultsInvocationResultOutput
	ToInvocationResultsInvocationResultOutputWithContext(context.Context) InvocationResultsInvocationResultOutput
}

type InvocationResultsInvocationResultArgs struct {
	// The id of ecs command.
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// The end time of the ecs invocation in the instance.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The error code of the ecs invocation.
	ErrorCode pulumi.StringInput `pulumi:"errorCode"`
	// The error message of the ecs invocation.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// The exit code of the ecs command.
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// The id of the ecs invocation result.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of ecs instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The id of ecs invocation.
	InvocationId pulumi.StringInput `pulumi:"invocationId"`
	// The id of the ecs invocation result.
	InvocationResultId pulumi.StringInput `pulumi:"invocationResultId"`
	// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
	InvocationResultStatus pulumi.StringInput `pulumi:"invocationResultStatus"`
	// The base64 encoded output message of the ecs invocation.
	Output pulumi.StringInput `pulumi:"output"`
	// The start time of the ecs invocation in the instance.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The username of the ecs command.
	Username pulumi.StringInput `pulumi:"username"`
}

func (InvocationResultsInvocationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationResultsInvocationResult)(nil)).Elem()
}

func (i InvocationResultsInvocationResultArgs) ToInvocationResultsInvocationResultOutput() InvocationResultsInvocationResultOutput {
	return i.ToInvocationResultsInvocationResultOutputWithContext(context.Background())
}

func (i InvocationResultsInvocationResultArgs) ToInvocationResultsInvocationResultOutputWithContext(ctx context.Context) InvocationResultsInvocationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationResultsInvocationResultOutput)
}

// InvocationResultsInvocationResultArrayInput is an input type that accepts InvocationResultsInvocationResultArray and InvocationResultsInvocationResultArrayOutput values.
// You can construct a concrete instance of `InvocationResultsInvocationResultArrayInput` via:
//
//	InvocationResultsInvocationResultArray{ InvocationResultsInvocationResultArgs{...} }
type InvocationResultsInvocationResultArrayInput interface {
	pulumi.Input

	ToInvocationResultsInvocationResultArrayOutput() InvocationResultsInvocationResultArrayOutput
	ToInvocationResultsInvocationResultArrayOutputWithContext(context.Context) InvocationResultsInvocationResultArrayOutput
}

type InvocationResultsInvocationResultArray []InvocationResultsInvocationResultInput

func (InvocationResultsInvocationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationResultsInvocationResult)(nil)).Elem()
}

func (i InvocationResultsInvocationResultArray) ToInvocationResultsInvocationResultArrayOutput() InvocationResultsInvocationResultArrayOutput {
	return i.ToInvocationResultsInvocationResultArrayOutputWithContext(context.Background())
}

func (i InvocationResultsInvocationResultArray) ToInvocationResultsInvocationResultArrayOutputWithContext(ctx context.Context) InvocationResultsInvocationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationResultsInvocationResultArrayOutput)
}

type InvocationResultsInvocationResultOutput struct{ *pulumi.OutputState }

func (InvocationResultsInvocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationResultsInvocationResult)(nil)).Elem()
}

func (o InvocationResultsInvocationResultOutput) ToInvocationResultsInvocationResultOutput() InvocationResultsInvocationResultOutput {
	return o
}

func (o InvocationResultsInvocationResultOutput) ToInvocationResultsInvocationResultOutputWithContext(ctx context.Context) InvocationResultsInvocationResultOutput {
	return o
}

// The id of ecs command.
func (o InvocationResultsInvocationResultOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.CommandId }).(pulumi.StringOutput)
}

// The end time of the ecs invocation in the instance.
func (o InvocationResultsInvocationResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// The error code of the ecs invocation.
func (o InvocationResultsInvocationResultOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// The error message of the ecs invocation.
func (o InvocationResultsInvocationResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The exit code of the ecs command.
func (o InvocationResultsInvocationResultOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) int { return v.ExitCode }).(pulumi.IntOutput)
}

// The id of the ecs invocation result.
func (o InvocationResultsInvocationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of ecs instance.
func (o InvocationResultsInvocationResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The id of ecs invocation.
func (o InvocationResultsInvocationResultOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.InvocationId }).(pulumi.StringOutput)
}

// The id of the ecs invocation result.
func (o InvocationResultsInvocationResultOutput) InvocationResultId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.InvocationResultId }).(pulumi.StringOutput)
}

// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
func (o InvocationResultsInvocationResultOutput) InvocationResultStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.InvocationResultStatus }).(pulumi.StringOutput)
}

// The base64 encoded output message of the ecs invocation.
func (o InvocationResultsInvocationResultOutput) Output() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.Output }).(pulumi.StringOutput)
}

// The start time of the ecs invocation in the instance.
func (o InvocationResultsInvocationResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// The username of the ecs command.
func (o InvocationResultsInvocationResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.Username }).(pulumi.StringOutput)
}

type InvocationResultsInvocationResultArrayOutput struct{ *pulumi.OutputState }

func (InvocationResultsInvocationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationResultsInvocationResult)(nil)).Elem()
}

func (o InvocationResultsInvocationResultArrayOutput) ToInvocationResultsInvocationResultArrayOutput() InvocationResultsInvocationResultArrayOutput {
	return o
}

func (o InvocationResultsInvocationResultArrayOutput) ToInvocationResultsInvocationResultArrayOutputWithContext(ctx context.Context) InvocationResultsInvocationResultArrayOutput {
	return o
}

func (o InvocationResultsInvocationResultArrayOutput) Index(i pulumi.IntInput) InvocationResultsInvocationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationResultsInvocationResult {
		return vs[0].([]InvocationResultsInvocationResult)[vs[1].(int)]
	}).(InvocationResultsInvocationResultOutput)
}

type InvocationsInvocation struct {
	// The base64 encoded content of the ecs command.
	CommandContent string `pulumi:"commandContent"`
	// The description of the ecs command.
	CommandDescription string `pulumi:"commandDescription"`
	// The id of ecs command.
	CommandId string `pulumi:"commandId"`
	// The name of ecs command. This field support fuzzy query.
	CommandName string `pulumi:"commandName"`
	// The provider of the ecs command.
	CommandProvider string `pulumi:"commandProvider"`
	// The type of ecs command. Valid values: `Shell`.
	CommandType string `pulumi:"commandType"`
	// The end time of the ecs invocation.
	EndTime string `pulumi:"endTime"`
	// The frequency of the ecs invocation.
	Frequency string `pulumi:"frequency"`
	// The id of the ecs invocation.
	Id string `pulumi:"id"`
	// The list of ECS instance IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// The instance number of the ecs invocation.
	InstanceNumber int `pulumi:"instanceNumber"`
	// The description of the ecs invocation.
	InvocationDescription string `pulumi:"invocationDescription"`
	// The id of ecs invocation.
	InvocationId string `pulumi:"invocationId"`
	// The name of ecs invocation. This field support fuzzy query.
	InvocationName string `pulumi:"invocationName"`
	// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
	InvocationStatus string `pulumi:"invocationStatus"`
	// The launch time of the ecs invocation.
	LaunchTime string `pulumi:"launchTime"`
	// The recurrence end time of the ecs invocation.
	RecurrenceEndTime string `pulumi:"recurrenceEndTime"`
	// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode string `pulumi:"repeatMode"`
	// The start time of the ecs invocation.
	StartTime string `pulumi:"startTime"`
	// The timeout of the ecs command.
	Timeout int `pulumi:"timeout"`
	// The username of the ecs command.
	Username string `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir string `pulumi:"workingDir"`
}

// InvocationsInvocationInput is an input type that accepts InvocationsInvocationArgs and InvocationsInvocationOutput values.
// You can construct a concrete instance of `InvocationsInvocationInput` via:
//
//	InvocationsInvocationArgs{...}
type InvocationsInvocationInput interface {
	pulumi.Input

	ToInvocationsInvocationOutput() InvocationsInvocationOutput
	ToInvocationsInvocationOutputWithContext(context.Context) InvocationsInvocationOutput
}

type InvocationsInvocationArgs struct {
	// The base64 encoded content of the ecs command.
	CommandContent pulumi.StringInput `pulumi:"commandContent"`
	// The description of the ecs command.
	CommandDescription pulumi.StringInput `pulumi:"commandDescription"`
	// The id of ecs command.
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// The name of ecs command. This field support fuzzy query.
	CommandName pulumi.StringInput `pulumi:"commandName"`
	// The provider of the ecs command.
	CommandProvider pulumi.StringInput `pulumi:"commandProvider"`
	// The type of ecs command. Valid values: `Shell`.
	CommandType pulumi.StringInput `pulumi:"commandType"`
	// The end time of the ecs invocation.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The frequency of the ecs invocation.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The id of the ecs invocation.
	Id pulumi.StringInput `pulumi:"id"`
	// The list of ECS instance IDs.
	InstanceIds pulumi.StringArrayInput `pulumi:"instanceIds"`
	// The instance number of the ecs invocation.
	InstanceNumber pulumi.IntInput `pulumi:"instanceNumber"`
	// The description of the ecs invocation.
	InvocationDescription pulumi.StringInput `pulumi:"invocationDescription"`
	// The id of ecs invocation.
	InvocationId pulumi.StringInput `pulumi:"invocationId"`
	// The name of ecs invocation. This field support fuzzy query.
	InvocationName pulumi.StringInput `pulumi:"invocationName"`
	// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
	InvocationStatus pulumi.StringInput `pulumi:"invocationStatus"`
	// The launch time of the ecs invocation.
	LaunchTime pulumi.StringInput `pulumi:"launchTime"`
	// The recurrence end time of the ecs invocation.
	RecurrenceEndTime pulumi.StringInput `pulumi:"recurrenceEndTime"`
	// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode pulumi.StringInput `pulumi:"repeatMode"`
	// The start time of the ecs invocation.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The timeout of the ecs command.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The username of the ecs command.
	Username pulumi.StringInput `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`
}

func (InvocationsInvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationsInvocation)(nil)).Elem()
}

func (i InvocationsInvocationArgs) ToInvocationsInvocationOutput() InvocationsInvocationOutput {
	return i.ToInvocationsInvocationOutputWithContext(context.Background())
}

func (i InvocationsInvocationArgs) ToInvocationsInvocationOutputWithContext(ctx context.Context) InvocationsInvocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationsInvocationOutput)
}

// InvocationsInvocationArrayInput is an input type that accepts InvocationsInvocationArray and InvocationsInvocationArrayOutput values.
// You can construct a concrete instance of `InvocationsInvocationArrayInput` via:
//
//	InvocationsInvocationArray{ InvocationsInvocationArgs{...} }
type InvocationsInvocationArrayInput interface {
	pulumi.Input

	ToInvocationsInvocationArrayOutput() InvocationsInvocationArrayOutput
	ToInvocationsInvocationArrayOutputWithContext(context.Context) InvocationsInvocationArrayOutput
}

type InvocationsInvocationArray []InvocationsInvocationInput

func (InvocationsInvocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationsInvocation)(nil)).Elem()
}

func (i InvocationsInvocationArray) ToInvocationsInvocationArrayOutput() InvocationsInvocationArrayOutput {
	return i.ToInvocationsInvocationArrayOutputWithContext(context.Background())
}

func (i InvocationsInvocationArray) ToInvocationsInvocationArrayOutputWithContext(ctx context.Context) InvocationsInvocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationsInvocationArrayOutput)
}

type InvocationsInvocationOutput struct{ *pulumi.OutputState }

func (InvocationsInvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationsInvocation)(nil)).Elem()
}

func (o InvocationsInvocationOutput) ToInvocationsInvocationOutput() InvocationsInvocationOutput {
	return o
}

func (o InvocationsInvocationOutput) ToInvocationsInvocationOutputWithContext(ctx context.Context) InvocationsInvocationOutput {
	return o
}

// The base64 encoded content of the ecs command.
func (o InvocationsInvocationOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandContent }).(pulumi.StringOutput)
}

// The description of the ecs command.
func (o InvocationsInvocationOutput) CommandDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandDescription }).(pulumi.StringOutput)
}

// The id of ecs command.
func (o InvocationsInvocationOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandId }).(pulumi.StringOutput)
}

// The name of ecs command. This field support fuzzy query.
func (o InvocationsInvocationOutput) CommandName() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandName }).(pulumi.StringOutput)
}

// The provider of the ecs command.
func (o InvocationsInvocationOutput) CommandProvider() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandProvider }).(pulumi.StringOutput)
}

// The type of ecs command. Valid values: `Shell`.
func (o InvocationsInvocationOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandType }).(pulumi.StringOutput)
}

// The end time of the ecs invocation.
func (o InvocationsInvocationOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.EndTime }).(pulumi.StringOutput)
}

// The frequency of the ecs invocation.
func (o InvocationsInvocationOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.Frequency }).(pulumi.StringOutput)
}

// The id of the ecs invocation.
func (o InvocationsInvocationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.Id }).(pulumi.StringOutput)
}

// The list of ECS instance IDs.
func (o InvocationsInvocationOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InvocationsInvocation) []string { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// The instance number of the ecs invocation.
func (o InvocationsInvocationOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InvocationsInvocation) int { return v.InstanceNumber }).(pulumi.IntOutput)
}

// The description of the ecs invocation.
func (o InvocationsInvocationOutput) InvocationDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.InvocationDescription }).(pulumi.StringOutput)
}

// The id of ecs invocation.
func (o InvocationsInvocationOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.InvocationId }).(pulumi.StringOutput)
}

// The name of ecs invocation. This field support fuzzy query.
func (o InvocationsInvocationOutput) InvocationName() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.InvocationName }).(pulumi.StringOutput)
}

// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
func (o InvocationsInvocationOutput) InvocationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.InvocationStatus }).(pulumi.StringOutput)
}

// The launch time of the ecs invocation.
func (o InvocationsInvocationOutput) LaunchTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.LaunchTime }).(pulumi.StringOutput)
}

// The recurrence end time of the ecs invocation.
func (o InvocationsInvocationOutput) RecurrenceEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.RecurrenceEndTime }).(pulumi.StringOutput)
}

// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
func (o InvocationsInvocationOutput) RepeatMode() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.RepeatMode }).(pulumi.StringOutput)
}

// The start time of the ecs invocation.
func (o InvocationsInvocationOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.StartTime }).(pulumi.StringOutput)
}

// The timeout of the ecs command.
func (o InvocationsInvocationOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v InvocationsInvocation) int { return v.Timeout }).(pulumi.IntOutput)
}

// The username of the ecs command.
func (o InvocationsInvocationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.Username }).(pulumi.StringOutput)
}

// The working directory of the ecs command.
func (o InvocationsInvocationOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type InvocationsInvocationArrayOutput struct{ *pulumi.OutputState }

func (InvocationsInvocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationsInvocation)(nil)).Elem()
}

func (o InvocationsInvocationArrayOutput) ToInvocationsInvocationArrayOutput() InvocationsInvocationArrayOutput {
	return o
}

func (o InvocationsInvocationArrayOutput) ToInvocationsInvocationArrayOutputWithContext(ctx context.Context) InvocationsInvocationArrayOutput {
	return o
}

func (o InvocationsInvocationArrayOutput) Index(i pulumi.IntInput) InvocationsInvocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationsInvocation {
		return vs[0].([]InvocationsInvocation)[vs[1].(int)]
	}).(InvocationsInvocationOutput)
}

type KeyPairsKeyPair struct {
	// The creation time of key pair.
	CreatedAt string `pulumi:"createdAt"`
	// The description of key pair.
	Description string `pulumi:"description"`
	// The finger print info.
	FingerPrint string `pulumi:"fingerPrint"`
	// The id of key pair.
	Id string `pulumi:"id"`
	// The id of key pair.
	KeyPairId string `pulumi:"keyPairId"`
	// Name of key pair.
	KeyPairName string `pulumi:"keyPairName"`
	// The update time of key pair.
	UpdatedAt string `pulumi:"updatedAt"`
}

// KeyPairsKeyPairInput is an input type that accepts KeyPairsKeyPairArgs and KeyPairsKeyPairOutput values.
// You can construct a concrete instance of `KeyPairsKeyPairInput` via:
//
//	KeyPairsKeyPairArgs{...}
type KeyPairsKeyPairInput interface {
	pulumi.Input

	ToKeyPairsKeyPairOutput() KeyPairsKeyPairOutput
	ToKeyPairsKeyPairOutputWithContext(context.Context) KeyPairsKeyPairOutput
}

type KeyPairsKeyPairArgs struct {
	// The creation time of key pair.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of key pair.
	Description pulumi.StringInput `pulumi:"description"`
	// The finger print info.
	FingerPrint pulumi.StringInput `pulumi:"fingerPrint"`
	// The id of key pair.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of key pair.
	KeyPairId pulumi.StringInput `pulumi:"keyPairId"`
	// Name of key pair.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The update time of key pair.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (KeyPairsKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPairsKeyPair)(nil)).Elem()
}

func (i KeyPairsKeyPairArgs) ToKeyPairsKeyPairOutput() KeyPairsKeyPairOutput {
	return i.ToKeyPairsKeyPairOutputWithContext(context.Background())
}

func (i KeyPairsKeyPairArgs) ToKeyPairsKeyPairOutputWithContext(ctx context.Context) KeyPairsKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairsKeyPairOutput)
}

// KeyPairsKeyPairArrayInput is an input type that accepts KeyPairsKeyPairArray and KeyPairsKeyPairArrayOutput values.
// You can construct a concrete instance of `KeyPairsKeyPairArrayInput` via:
//
//	KeyPairsKeyPairArray{ KeyPairsKeyPairArgs{...} }
type KeyPairsKeyPairArrayInput interface {
	pulumi.Input

	ToKeyPairsKeyPairArrayOutput() KeyPairsKeyPairArrayOutput
	ToKeyPairsKeyPairArrayOutputWithContext(context.Context) KeyPairsKeyPairArrayOutput
}

type KeyPairsKeyPairArray []KeyPairsKeyPairInput

func (KeyPairsKeyPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyPairsKeyPair)(nil)).Elem()
}

func (i KeyPairsKeyPairArray) ToKeyPairsKeyPairArrayOutput() KeyPairsKeyPairArrayOutput {
	return i.ToKeyPairsKeyPairArrayOutputWithContext(context.Background())
}

func (i KeyPairsKeyPairArray) ToKeyPairsKeyPairArrayOutputWithContext(ctx context.Context) KeyPairsKeyPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairsKeyPairArrayOutput)
}

type KeyPairsKeyPairOutput struct{ *pulumi.OutputState }

func (KeyPairsKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPairsKeyPair)(nil)).Elem()
}

func (o KeyPairsKeyPairOutput) ToKeyPairsKeyPairOutput() KeyPairsKeyPairOutput {
	return o
}

func (o KeyPairsKeyPairOutput) ToKeyPairsKeyPairOutputWithContext(ctx context.Context) KeyPairsKeyPairOutput {
	return o
}

// The creation time of key pair.
func (o KeyPairsKeyPairOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of key pair.
func (o KeyPairsKeyPairOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.Description }).(pulumi.StringOutput)
}

// The finger print info.
func (o KeyPairsKeyPairOutput) FingerPrint() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.FingerPrint }).(pulumi.StringOutput)
}

// The id of key pair.
func (o KeyPairsKeyPairOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.Id }).(pulumi.StringOutput)
}

// The id of key pair.
func (o KeyPairsKeyPairOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.KeyPairId }).(pulumi.StringOutput)
}

// Name of key pair.
func (o KeyPairsKeyPairOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The update time of key pair.
func (o KeyPairsKeyPairOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type KeyPairsKeyPairArrayOutput struct{ *pulumi.OutputState }

func (KeyPairsKeyPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyPairsKeyPair)(nil)).Elem()
}

func (o KeyPairsKeyPairArrayOutput) ToKeyPairsKeyPairArrayOutput() KeyPairsKeyPairArrayOutput {
	return o
}

func (o KeyPairsKeyPairArrayOutput) ToKeyPairsKeyPairArrayOutputWithContext(ctx context.Context) KeyPairsKeyPairArrayOutput {
	return o
}

func (o KeyPairsKeyPairArrayOutput) Index(i pulumi.IntInput) KeyPairsKeyPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyPairsKeyPair {
		return vs[0].([]KeyPairsKeyPair)[vs[1].(int)]
	}).(KeyPairsKeyPairOutput)
}

type LaunchTemplateNetworkInterface struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId *string `pulumi:"subnetId"`
}

// LaunchTemplateNetworkInterfaceInput is an input type that accepts LaunchTemplateNetworkInterfaceArgs and LaunchTemplateNetworkInterfaceOutput values.
// You can construct a concrete instance of `LaunchTemplateNetworkInterfaceInput` via:
//
//	LaunchTemplateNetworkInterfaceArgs{...}
type LaunchTemplateNetworkInterfaceInput interface {
	pulumi.Input

	ToLaunchTemplateNetworkInterfaceOutput() LaunchTemplateNetworkInterfaceOutput
	ToLaunchTemplateNetworkInterfaceOutputWithContext(context.Context) LaunchTemplateNetworkInterfaceOutput
}

type LaunchTemplateNetworkInterfaceArgs struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (LaunchTemplateNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i LaunchTemplateNetworkInterfaceArgs) ToLaunchTemplateNetworkInterfaceOutput() LaunchTemplateNetworkInterfaceOutput {
	return i.ToLaunchTemplateNetworkInterfaceOutputWithContext(context.Background())
}

func (i LaunchTemplateNetworkInterfaceArgs) ToLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) LaunchTemplateNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplateNetworkInterfaceOutput)
}

// LaunchTemplateNetworkInterfaceArrayInput is an input type that accepts LaunchTemplateNetworkInterfaceArray and LaunchTemplateNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `LaunchTemplateNetworkInterfaceArrayInput` via:
//
//	LaunchTemplateNetworkInterfaceArray{ LaunchTemplateNetworkInterfaceArgs{...} }
type LaunchTemplateNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplateNetworkInterfaceArrayOutput
	ToLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Context) LaunchTemplateNetworkInterfaceArrayOutput
}

type LaunchTemplateNetworkInterfaceArray []LaunchTemplateNetworkInterfaceInput

func (LaunchTemplateNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i LaunchTemplateNetworkInterfaceArray) ToLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplateNetworkInterfaceArrayOutput {
	return i.ToLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i LaunchTemplateNetworkInterfaceArray) ToLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) LaunchTemplateNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplateNetworkInterfaceArrayOutput)
}

type LaunchTemplateNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (LaunchTemplateNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o LaunchTemplateNetworkInterfaceOutput) ToLaunchTemplateNetworkInterfaceOutput() LaunchTemplateNetworkInterfaceOutput {
	return o
}

func (o LaunchTemplateNetworkInterfaceOutput) ToLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) LaunchTemplateNetworkInterfaceOutput {
	return o
}

// The security group ID associated with the NIC.
func (o LaunchTemplateNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LaunchTemplateNetworkInterface) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
func (o LaunchTemplateNetworkInterfaceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchTemplateNetworkInterface) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type LaunchTemplateNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplateNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o LaunchTemplateNetworkInterfaceArrayOutput) ToLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o LaunchTemplateNetworkInterfaceArrayOutput) ToLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) LaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o LaunchTemplateNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) LaunchTemplateNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplateNetworkInterface {
		return vs[0].([]LaunchTemplateNetworkInterface)[vs[1].(int)]
	}).(LaunchTemplateNetworkInterfaceOutput)
}

type LaunchTemplateVolume struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size *int `pulumi:"size"`
	// The type of volume.
	VolumeType *string `pulumi:"volumeType"`
}

// LaunchTemplateVolumeInput is an input type that accepts LaunchTemplateVolumeArgs and LaunchTemplateVolumeOutput values.
// You can construct a concrete instance of `LaunchTemplateVolumeInput` via:
//
//	LaunchTemplateVolumeArgs{...}
type LaunchTemplateVolumeInput interface {
	pulumi.Input

	ToLaunchTemplateVolumeOutput() LaunchTemplateVolumeOutput
	ToLaunchTemplateVolumeOutputWithContext(context.Context) LaunchTemplateVolumeOutput
}

type LaunchTemplateVolumeArgs struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance pulumi.BoolPtrInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The type of volume.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (LaunchTemplateVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplateVolume)(nil)).Elem()
}

func (i LaunchTemplateVolumeArgs) ToLaunchTemplateVolumeOutput() LaunchTemplateVolumeOutput {
	return i.ToLaunchTemplateVolumeOutputWithContext(context.Background())
}

func (i LaunchTemplateVolumeArgs) ToLaunchTemplateVolumeOutputWithContext(ctx context.Context) LaunchTemplateVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplateVolumeOutput)
}

// LaunchTemplateVolumeArrayInput is an input type that accepts LaunchTemplateVolumeArray and LaunchTemplateVolumeArrayOutput values.
// You can construct a concrete instance of `LaunchTemplateVolumeArrayInput` via:
//
//	LaunchTemplateVolumeArray{ LaunchTemplateVolumeArgs{...} }
type LaunchTemplateVolumeArrayInput interface {
	pulumi.Input

	ToLaunchTemplateVolumeArrayOutput() LaunchTemplateVolumeArrayOutput
	ToLaunchTemplateVolumeArrayOutputWithContext(context.Context) LaunchTemplateVolumeArrayOutput
}

type LaunchTemplateVolumeArray []LaunchTemplateVolumeInput

func (LaunchTemplateVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplateVolume)(nil)).Elem()
}

func (i LaunchTemplateVolumeArray) ToLaunchTemplateVolumeArrayOutput() LaunchTemplateVolumeArrayOutput {
	return i.ToLaunchTemplateVolumeArrayOutputWithContext(context.Background())
}

func (i LaunchTemplateVolumeArray) ToLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) LaunchTemplateVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplateVolumeArrayOutput)
}

type LaunchTemplateVolumeOutput struct{ *pulumi.OutputState }

func (LaunchTemplateVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplateVolume)(nil)).Elem()
}

func (o LaunchTemplateVolumeOutput) ToLaunchTemplateVolumeOutput() LaunchTemplateVolumeOutput {
	return o
}

func (o LaunchTemplateVolumeOutput) ToLaunchTemplateVolumeOutputWithContext(ctx context.Context) LaunchTemplateVolumeOutput {
	return o
}

// The delete with instance flag of volume. Valid values: true, false. Default value: true.
func (o LaunchTemplateVolumeOutput) DeleteWithInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LaunchTemplateVolume) *bool { return v.DeleteWithInstance }).(pulumi.BoolPtrOutput)
}

// The size of volume.
func (o LaunchTemplateVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LaunchTemplateVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The type of volume.
func (o LaunchTemplateVolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchTemplateVolume) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type LaunchTemplateVolumeArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplateVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplateVolume)(nil)).Elem()
}

func (o LaunchTemplateVolumeArrayOutput) ToLaunchTemplateVolumeArrayOutput() LaunchTemplateVolumeArrayOutput {
	return o
}

func (o LaunchTemplateVolumeArrayOutput) ToLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) LaunchTemplateVolumeArrayOutput {
	return o
}

func (o LaunchTemplateVolumeArrayOutput) Index(i pulumi.IntInput) LaunchTemplateVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplateVolume {
		return vs[0].([]LaunchTemplateVolume)[vs[1].(int)]
	}).(LaunchTemplateVolumeOutput)
}

type LaunchTemplatesLaunchTemplate struct {
	// The created time of the launch template.
	CreatedAt string `pulumi:"createdAt"`
	// The default version of the launch template.
	DefaultVersionNumber int `pulumi:"defaultVersionNumber"`
	// The description of the instance.
	Description string `pulumi:"description"`
	// The EIP bandwidth which the scaling configuration set.
	EipBandwidth int `pulumi:"eipBandwidth"`
	// The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.
	EipBillingType string `pulumi:"eipBillingType"`
	// The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.
	EipIsp string `pulumi:"eipIsp"`
	// The host name of the instance.
	HostName string `pulumi:"hostName"`
	// The hpc cluster id.
	HpcClusterId string `pulumi:"hpcClusterId"`
	// The id of the launch template.
	Id string `pulumi:"id"`
	// The image id.
	ImageId string `pulumi:"imageId"`
	// The charge type of the instance and volume.
	InstanceChargeType string `pulumi:"instanceChargeType"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
	// When you log in to the instance using the SSH key pair, enter the name of the key pair.
	KeyPairName string `pulumi:"keyPairName"`
	// The latest version of the launch template.
	LatestVersionNumber int `pulumi:"latestVersionNumber"`
	// The id of the launch template.
	LaunchTemplateId string `pulumi:"launchTemplateId"`
	// The name of the launch template.
	LaunchTemplateName string `pulumi:"launchTemplateName"`
	// The list of network interfaces.
	NetworkInterfaces []LaunchTemplatesLaunchTemplateNetworkInterface `pulumi:"networkInterfaces"`
	// Whether to open the security reinforcement.
	SecurityEnhancementStrategy string `pulumi:"securityEnhancementStrategy"`
	// The index of the ordered suffix.
	SuffixIndex int `pulumi:"suffixIndex"`
	// Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.
	UniqueSuffix bool `pulumi:"uniqueSuffix"`
	// The updated time of the launch template.
	UpdatedAt string `pulumi:"updatedAt"`
	// The latest version description of the launch template.
	VersionDescription string `pulumi:"versionDescription"`
	// The list of volume of the scaling configuration.
	Volumes []LaunchTemplatesLaunchTemplateVolume `pulumi:"volumes"`
	// The vpc id.
	VpcId string `pulumi:"vpcId"`
	// The zone ID of the instance.
	ZoneId string `pulumi:"zoneId"`
}

// LaunchTemplatesLaunchTemplateInput is an input type that accepts LaunchTemplatesLaunchTemplateArgs and LaunchTemplatesLaunchTemplateOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateInput` via:
//
//	LaunchTemplatesLaunchTemplateArgs{...}
type LaunchTemplatesLaunchTemplateInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateOutput() LaunchTemplatesLaunchTemplateOutput
	ToLaunchTemplatesLaunchTemplateOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateOutput
}

type LaunchTemplatesLaunchTemplateArgs struct {
	// The created time of the launch template.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The default version of the launch template.
	DefaultVersionNumber pulumi.IntInput `pulumi:"defaultVersionNumber"`
	// The description of the instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The EIP bandwidth which the scaling configuration set.
	EipBandwidth pulumi.IntInput `pulumi:"eipBandwidth"`
	// The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.
	EipBillingType pulumi.StringInput `pulumi:"eipBillingType"`
	// The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.
	EipIsp pulumi.StringInput `pulumi:"eipIsp"`
	// The host name of the instance.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// The hpc cluster id.
	HpcClusterId pulumi.StringInput `pulumi:"hpcClusterId"`
	// The id of the launch template.
	Id pulumi.StringInput `pulumi:"id"`
	// The image id.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The charge type of the instance and volume.
	InstanceChargeType pulumi.StringInput `pulumi:"instanceChargeType"`
	// The name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// When you log in to the instance using the SSH key pair, enter the name of the key pair.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The latest version of the launch template.
	LatestVersionNumber pulumi.IntInput `pulumi:"latestVersionNumber"`
	// The id of the launch template.
	LaunchTemplateId pulumi.StringInput `pulumi:"launchTemplateId"`
	// The name of the launch template.
	LaunchTemplateName pulumi.StringInput `pulumi:"launchTemplateName"`
	// The list of network interfaces.
	NetworkInterfaces LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// Whether to open the security reinforcement.
	SecurityEnhancementStrategy pulumi.StringInput `pulumi:"securityEnhancementStrategy"`
	// The index of the ordered suffix.
	SuffixIndex pulumi.IntInput `pulumi:"suffixIndex"`
	// Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.
	UniqueSuffix pulumi.BoolInput `pulumi:"uniqueSuffix"`
	// The updated time of the launch template.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The latest version description of the launch template.
	VersionDescription pulumi.StringInput `pulumi:"versionDescription"`
	// The list of volume of the scaling configuration.
	Volumes LaunchTemplatesLaunchTemplateVolumeArrayInput `pulumi:"volumes"`
	// The vpc id.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone ID of the instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LaunchTemplatesLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateArgs) ToLaunchTemplatesLaunchTemplateOutput() LaunchTemplatesLaunchTemplateOutput {
	return i.ToLaunchTemplatesLaunchTemplateOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateArgs) ToLaunchTemplatesLaunchTemplateOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateOutput)
}

// LaunchTemplatesLaunchTemplateArrayInput is an input type that accepts LaunchTemplatesLaunchTemplateArray and LaunchTemplatesLaunchTemplateArrayOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateArrayInput` via:
//
//	LaunchTemplatesLaunchTemplateArray{ LaunchTemplatesLaunchTemplateArgs{...} }
type LaunchTemplatesLaunchTemplateArrayInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateArrayOutput() LaunchTemplatesLaunchTemplateArrayOutput
	ToLaunchTemplatesLaunchTemplateArrayOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateArrayOutput
}

type LaunchTemplatesLaunchTemplateArray []LaunchTemplatesLaunchTemplateInput

func (LaunchTemplatesLaunchTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateArray) ToLaunchTemplatesLaunchTemplateArrayOutput() LaunchTemplatesLaunchTemplateArrayOutput {
	return i.ToLaunchTemplatesLaunchTemplateArrayOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateArray) ToLaunchTemplatesLaunchTemplateArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateArrayOutput)
}

type LaunchTemplatesLaunchTemplateOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateOutput) ToLaunchTemplatesLaunchTemplateOutput() LaunchTemplatesLaunchTemplateOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateOutput) ToLaunchTemplatesLaunchTemplateOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateOutput {
	return o
}

// The created time of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The default version of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) DefaultVersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) int { return v.DefaultVersionNumber }).(pulumi.IntOutput)
}

// The description of the instance.
func (o LaunchTemplatesLaunchTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.Description }).(pulumi.StringOutput)
}

// The EIP bandwidth which the scaling configuration set.
func (o LaunchTemplatesLaunchTemplateOutput) EipBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) int { return v.EipBandwidth }).(pulumi.IntOutput)
}

// The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.
func (o LaunchTemplatesLaunchTemplateOutput) EipBillingType() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.EipBillingType }).(pulumi.StringOutput)
}

// The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.
func (o LaunchTemplatesLaunchTemplateOutput) EipIsp() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.EipIsp }).(pulumi.StringOutput)
}

// The host name of the instance.
func (o LaunchTemplatesLaunchTemplateOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.HostName }).(pulumi.StringOutput)
}

// The hpc cluster id.
func (o LaunchTemplatesLaunchTemplateOutput) HpcClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.HpcClusterId }).(pulumi.StringOutput)
}

// The id of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.Id }).(pulumi.StringOutput)
}

// The image id.
func (o LaunchTemplatesLaunchTemplateOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.ImageId }).(pulumi.StringOutput)
}

// The charge type of the instance and volume.
func (o LaunchTemplatesLaunchTemplateOutput) InstanceChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.InstanceChargeType }).(pulumi.StringOutput)
}

// The name of the instance.
func (o LaunchTemplatesLaunchTemplateOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.InstanceName }).(pulumi.StringOutput)
}

// When you log in to the instance using the SSH key pair, enter the name of the key pair.
func (o LaunchTemplatesLaunchTemplateOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The latest version of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) LatestVersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) int { return v.LatestVersionNumber }).(pulumi.IntOutput)
}

// The id of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) LaunchTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.LaunchTemplateId }).(pulumi.StringOutput)
}

// The name of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) LaunchTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.LaunchTemplateName }).(pulumi.StringOutput)
}

// The list of network interfaces.
func (o LaunchTemplatesLaunchTemplateOutput) NetworkInterfaces() LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) []LaunchTemplatesLaunchTemplateNetworkInterface {
		return v.NetworkInterfaces
	}).(LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput)
}

// Whether to open the security reinforcement.
func (o LaunchTemplatesLaunchTemplateOutput) SecurityEnhancementStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.SecurityEnhancementStrategy }).(pulumi.StringOutput)
}

// The index of the ordered suffix.
func (o LaunchTemplatesLaunchTemplateOutput) SuffixIndex() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) int { return v.SuffixIndex }).(pulumi.IntOutput)
}

// Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.
func (o LaunchTemplatesLaunchTemplateOutput) UniqueSuffix() pulumi.BoolOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) bool { return v.UniqueSuffix }).(pulumi.BoolOutput)
}

// The updated time of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The latest version description of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) VersionDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.VersionDescription }).(pulumi.StringOutput)
}

// The list of volume of the scaling configuration.
func (o LaunchTemplatesLaunchTemplateOutput) Volumes() LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) []LaunchTemplatesLaunchTemplateVolume { return v.Volumes }).(LaunchTemplatesLaunchTemplateVolumeArrayOutput)
}

// The vpc id.
func (o LaunchTemplatesLaunchTemplateOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone ID of the instance.
func (o LaunchTemplatesLaunchTemplateOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.ZoneId }).(pulumi.StringOutput)
}

type LaunchTemplatesLaunchTemplateArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateArrayOutput) ToLaunchTemplatesLaunchTemplateArrayOutput() LaunchTemplatesLaunchTemplateArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateArrayOutput) ToLaunchTemplatesLaunchTemplateArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateArrayOutput) Index(i pulumi.IntInput) LaunchTemplatesLaunchTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplatesLaunchTemplate {
		return vs[0].([]LaunchTemplatesLaunchTemplate)[vs[1].(int)]
	}).(LaunchTemplatesLaunchTemplateOutput)
}

type LaunchTemplatesLaunchTemplateNetworkInterface struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId string `pulumi:"subnetId"`
}

// LaunchTemplatesLaunchTemplateNetworkInterfaceInput is an input type that accepts LaunchTemplatesLaunchTemplateNetworkInterfaceArgs and LaunchTemplatesLaunchTemplateNetworkInterfaceOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateNetworkInterfaceInput` via:
//
//	LaunchTemplatesLaunchTemplateNetworkInterfaceArgs{...}
type LaunchTemplatesLaunchTemplateNetworkInterfaceInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceOutput
	ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceOutput
}

type LaunchTemplatesLaunchTemplateNetworkInterfaceArgs struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (LaunchTemplatesLaunchTemplateNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateNetworkInterfaceArgs) ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return i.ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateNetworkInterfaceArgs) ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateNetworkInterfaceOutput)
}

// LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput is an input type that accepts LaunchTemplatesLaunchTemplateNetworkInterfaceArray and LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput` via:
//
//	LaunchTemplatesLaunchTemplateNetworkInterfaceArray{ LaunchTemplatesLaunchTemplateNetworkInterfaceArgs{...} }
type LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput
	ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput
}

type LaunchTemplatesLaunchTemplateNetworkInterfaceArray []LaunchTemplatesLaunchTemplateNetworkInterfaceInput

func (LaunchTemplatesLaunchTemplateNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateNetworkInterfaceArray) ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return i.ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateNetworkInterfaceArray) ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput)
}

type LaunchTemplatesLaunchTemplateNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return o
}

// The security group ID associated with the NIC.
func (o LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateNetworkInterface) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
func (o LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

type LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplatesLaunchTemplateNetworkInterface {
		return vs[0].([]LaunchTemplatesLaunchTemplateNetworkInterface)[vs[1].(int)]
	}).(LaunchTemplatesLaunchTemplateNetworkInterfaceOutput)
}

type LaunchTemplatesLaunchTemplateVolume struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size int `pulumi:"size"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// LaunchTemplatesLaunchTemplateVolumeInput is an input type that accepts LaunchTemplatesLaunchTemplateVolumeArgs and LaunchTemplatesLaunchTemplateVolumeOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateVolumeInput` via:
//
//	LaunchTemplatesLaunchTemplateVolumeArgs{...}
type LaunchTemplatesLaunchTemplateVolumeInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateVolumeOutput() LaunchTemplatesLaunchTemplateVolumeOutput
	ToLaunchTemplatesLaunchTemplateVolumeOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateVolumeOutput
}

type LaunchTemplatesLaunchTemplateVolumeArgs struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance pulumi.BoolInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (LaunchTemplatesLaunchTemplateVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateVolumeArgs) ToLaunchTemplatesLaunchTemplateVolumeOutput() LaunchTemplatesLaunchTemplateVolumeOutput {
	return i.ToLaunchTemplatesLaunchTemplateVolumeOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateVolumeArgs) ToLaunchTemplatesLaunchTemplateVolumeOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateVolumeOutput)
}

// LaunchTemplatesLaunchTemplateVolumeArrayInput is an input type that accepts LaunchTemplatesLaunchTemplateVolumeArray and LaunchTemplatesLaunchTemplateVolumeArrayOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateVolumeArrayInput` via:
//
//	LaunchTemplatesLaunchTemplateVolumeArray{ LaunchTemplatesLaunchTemplateVolumeArgs{...} }
type LaunchTemplatesLaunchTemplateVolumeArrayInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateVolumeArrayOutput() LaunchTemplatesLaunchTemplateVolumeArrayOutput
	ToLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateVolumeArrayOutput
}

type LaunchTemplatesLaunchTemplateVolumeArray []LaunchTemplatesLaunchTemplateVolumeInput

func (LaunchTemplatesLaunchTemplateVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateVolumeArray) ToLaunchTemplatesLaunchTemplateVolumeArrayOutput() LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return i.ToLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateVolumeArray) ToLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateVolumeArrayOutput)
}

type LaunchTemplatesLaunchTemplateVolumeOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateVolumeOutput) ToLaunchTemplatesLaunchTemplateVolumeOutput() LaunchTemplatesLaunchTemplateVolumeOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateVolumeOutput) ToLaunchTemplatesLaunchTemplateVolumeOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateVolumeOutput {
	return o
}

// The delete with instance flag of volume. Valid values: true, false. Default value: true.
func (o LaunchTemplatesLaunchTemplateVolumeOutput) DeleteWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateVolume) bool { return v.DeleteWithInstance }).(pulumi.BoolOutput)
}

// The size of volume.
func (o LaunchTemplatesLaunchTemplateVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume.
func (o LaunchTemplatesLaunchTemplateVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type LaunchTemplatesLaunchTemplateVolumeArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateVolumeArrayOutput) ToLaunchTemplatesLaunchTemplateVolumeArrayOutput() LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateVolumeArrayOutput) ToLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateVolumeArrayOutput) Index(i pulumi.IntInput) LaunchTemplatesLaunchTemplateVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplatesLaunchTemplateVolume {
		return vs[0].([]LaunchTemplatesLaunchTemplateVolume)[vs[1].(int)]
	}).(LaunchTemplatesLaunchTemplateVolumeOutput)
}

type RegionsRegion struct {
	// The id of the region.
	Id string `pulumi:"id"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
}

// RegionsRegionInput is an input type that accepts RegionsRegionArgs and RegionsRegionOutput values.
// You can construct a concrete instance of `RegionsRegionInput` via:
//
//	RegionsRegionArgs{...}
type RegionsRegionInput interface {
	pulumi.Input

	ToRegionsRegionOutput() RegionsRegionOutput
	ToRegionsRegionOutputWithContext(context.Context) RegionsRegionOutput
}

type RegionsRegionArgs struct {
	// The id of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
}

func (RegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArgs) ToRegionsRegionOutput() RegionsRegionOutput {
	return i.ToRegionsRegionOutputWithContext(context.Background())
}

func (i RegionsRegionArgs) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionOutput)
}

// RegionsRegionArrayInput is an input type that accepts RegionsRegionArray and RegionsRegionArrayOutput values.
// You can construct a concrete instance of `RegionsRegionArrayInput` via:
//
//	RegionsRegionArray{ RegionsRegionArgs{...} }
type RegionsRegionArrayInput interface {
	pulumi.Input

	ToRegionsRegionArrayOutput() RegionsRegionArrayOutput
	ToRegionsRegionArrayOutputWithContext(context.Context) RegionsRegionArrayOutput
}

type RegionsRegionArray []RegionsRegionInput

func (RegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return i.ToRegionsRegionArrayOutputWithContext(context.Background())
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionArrayOutput)
}

type RegionsRegionOutput struct{ *pulumi.OutputState }

func (RegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionOutput) ToRegionsRegionOutput() RegionsRegionOutput {
	return o
}

func (o RegionsRegionOutput) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return o
}

// The id of the region.
func (o RegionsRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the region.
func (o RegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

type RegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (RegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) Index(i pulumi.IntInput) RegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionsRegion {
		return vs[0].([]RegionsRegion)[vs[1].(int)]
	}).(RegionsRegionOutput)
}

type ZonesZone struct {
	// The id of the zone.
	Id string `pulumi:"id"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//	ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//	ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The id of the zone.
func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneInput)(nil)).Elem(), AvailableResourcesAvailableZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneArrayInput)(nil)).Elem(), AvailableResourcesAvailableZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceInput)(nil)).Elem(), AvailableResourcesAvailableZoneAvailableResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceArrayInput)(nil)).Elem(), AvailableResourcesAvailableZoneAvailableResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput)(nil)).Elem(), AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput)(nil)).Elem(), AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsCommandInput)(nil)).Elem(), CommandsCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsCommandArrayInput)(nil)).Elem(), CommandsCommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSetsDeploymentSetInput)(nil)).Elem(), DeploymentSetsDeploymentSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSetsDeploymentSetArrayInput)(nil)).Elem(), DeploymentSetsDeploymentSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageInput)(nil)).Elem(), ImagesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageArrayInput)(nil)).Elem(), ImagesImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCpuOptionsInput)(nil)).Elem(), InstanceCpuOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCpuOptionsPtrInput)(nil)).Elem(), InstanceCpuOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataVolumeInput)(nil)).Elem(), InstanceDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataVolumeArrayInput)(nil)).Elem(), InstanceDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGpuDeviceInput)(nil)).Elem(), InstanceGpuDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGpuDeviceArrayInput)(nil)).Elem(), InstanceGpuDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecondaryNetworkInterfaceInput)(nil)).Elem(), InstanceSecondaryNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecondaryNetworkInterfaceArrayInput)(nil)).Elem(), InstanceSecondaryNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeInput)(nil)).Elem(), InstanceTypesInstanceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusGpuDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusGpuDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeLocalVolumeInput)(nil)).Elem(), InstanceTypesInstanceTypeLocalVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeLocalVolumeArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeLocalVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeMemoryInput)(nil)).Elem(), InstanceTypesInstanceTypeMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeMemoryArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeMemoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeNetworkInput)(nil)).Elem(), InstanceTypesInstanceTypeNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeNetworkArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeProcessorInput)(nil)).Elem(), InstanceTypesInstanceTypeProcessorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeProcessorArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeProcessorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeRdmaInput)(nil)).Elem(), InstanceTypesInstanceTypeRdmaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeRdmaArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeRdmaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeVolumeInput)(nil)).Elem(), InstanceTypesInstanceTypeVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeVolumeArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceInput)(nil)).Elem(), InstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceArrayInput)(nil)).Elem(), InstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceGpuDeviceInput)(nil)).Elem(), InstancesInstanceGpuDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceGpuDeviceArrayInput)(nil)).Elem(), InstancesInstanceGpuDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNetworkInterfaceInput)(nil)).Elem(), InstancesInstanceNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNetworkInterfaceArrayInput)(nil)).Elem(), InstancesInstanceNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagInput)(nil)).Elem(), InstancesInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagArrayInput)(nil)).Elem(), InstancesInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceVolumeInput)(nil)).Elem(), InstancesInstanceVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceVolumeArrayInput)(nil)).Elem(), InstancesInstanceVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationResultsInvocationResultInput)(nil)).Elem(), InvocationResultsInvocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationResultsInvocationResultArrayInput)(nil)).Elem(), InvocationResultsInvocationResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationsInvocationInput)(nil)).Elem(), InvocationsInvocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationsInvocationArrayInput)(nil)).Elem(), InvocationsInvocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairsKeyPairInput)(nil)).Elem(), KeyPairsKeyPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairsKeyPairArrayInput)(nil)).Elem(), KeyPairsKeyPairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplateNetworkInterfaceInput)(nil)).Elem(), LaunchTemplateNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplateNetworkInterfaceArrayInput)(nil)).Elem(), LaunchTemplateNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplateVolumeInput)(nil)).Elem(), LaunchTemplateVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplateVolumeArrayInput)(nil)).Elem(), LaunchTemplateVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateArrayInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateNetworkInterfaceInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateVolumeInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateVolumeArrayInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionInput)(nil)).Elem(), RegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionArrayInput)(nil)).Elem(), RegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneArrayOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneAvailableResourceOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneAvailableResourceArrayOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput{})
	pulumi.RegisterOutputType(CommandsCommandOutput{})
	pulumi.RegisterOutputType(CommandsCommandArrayOutput{})
	pulumi.RegisterOutputType(DeploymentSetsDeploymentSetOutput{})
	pulumi.RegisterOutputType(DeploymentSetsDeploymentSetArrayOutput{})
	pulumi.RegisterOutputType(ImagesImageOutput{})
	pulumi.RegisterOutputType(ImagesImageArrayOutput{})
	pulumi.RegisterOutputType(InstanceCpuOptionsOutput{})
	pulumi.RegisterOutputType(InstanceCpuOptionsPtrOutput{})
	pulumi.RegisterOutputType(InstanceDataVolumeOutput{})
	pulumi.RegisterOutputType(InstanceDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstanceGpuDeviceOutput{})
	pulumi.RegisterOutputType(InstanceGpuDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstanceSecondaryNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(InstanceSecondaryNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusGpuDeviceOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeLocalVolumeOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeLocalVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeMemoryOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeMemoryArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeNetworkOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeNetworkArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeProcessorOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeProcessorArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeRdmaOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeRdmaArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeVolumeOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceGpuDeviceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceGpuDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceVolumeOutput{})
	pulumi.RegisterOutputType(InstancesInstanceVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(InvocationResultsInvocationResultOutput{})
	pulumi.RegisterOutputType(InvocationResultsInvocationResultArrayOutput{})
	pulumi.RegisterOutputType(InvocationsInvocationOutput{})
	pulumi.RegisterOutputType(InvocationsInvocationArrayOutput{})
	pulumi.RegisterOutputType(KeyPairsKeyPairOutput{})
	pulumi.RegisterOutputType(KeyPairsKeyPairArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplateNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(LaunchTemplateNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplateVolumeOutput{})
	pulumi.RegisterOutputType(LaunchTemplateVolumeArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateVolumeOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateVolumeArrayOutput{})
	pulumi.RegisterOutputType(RegionsRegionOutput{})
	pulumi.RegisterOutputType(RegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
}
