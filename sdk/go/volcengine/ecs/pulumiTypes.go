// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type AvailableResourcesAvailableZone struct {
	// The resource information of the available zone.
	AvailableResources []AvailableResourcesAvailableZoneAvailableResource `pulumi:"availableResources"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status string `pulumi:"status"`
	// The id of available zone.
	ZoneId string `pulumi:"zoneId"`
}

// AvailableResourcesAvailableZoneInput is an input type that accepts AvailableResourcesAvailableZoneArgs and AvailableResourcesAvailableZoneOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneInput` via:
//
//	AvailableResourcesAvailableZoneArgs{...}
type AvailableResourcesAvailableZoneInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneOutput() AvailableResourcesAvailableZoneOutput
	ToAvailableResourcesAvailableZoneOutputWithContext(context.Context) AvailableResourcesAvailableZoneOutput
}

type AvailableResourcesAvailableZoneArgs struct {
	// The resource information of the available zone.
	AvailableResources AvailableResourcesAvailableZoneAvailableResourceArrayInput `pulumi:"availableResources"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status pulumi.StringInput `pulumi:"status"`
	// The id of available zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (AvailableResourcesAvailableZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZone)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneArgs) ToAvailableResourcesAvailableZoneOutput() AvailableResourcesAvailableZoneOutput {
	return i.ToAvailableResourcesAvailableZoneOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneArgs) ToAvailableResourcesAvailableZoneOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneOutput)
}

// AvailableResourcesAvailableZoneArrayInput is an input type that accepts AvailableResourcesAvailableZoneArray and AvailableResourcesAvailableZoneArrayOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneArrayInput` via:
//
//	AvailableResourcesAvailableZoneArray{ AvailableResourcesAvailableZoneArgs{...} }
type AvailableResourcesAvailableZoneArrayInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneArrayOutput() AvailableResourcesAvailableZoneArrayOutput
	ToAvailableResourcesAvailableZoneArrayOutputWithContext(context.Context) AvailableResourcesAvailableZoneArrayOutput
}

type AvailableResourcesAvailableZoneArray []AvailableResourcesAvailableZoneInput

func (AvailableResourcesAvailableZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZone)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneArray) ToAvailableResourcesAvailableZoneArrayOutput() AvailableResourcesAvailableZoneArrayOutput {
	return i.ToAvailableResourcesAvailableZoneArrayOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneArray) ToAvailableResourcesAvailableZoneArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneArrayOutput)
}

type AvailableResourcesAvailableZoneOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZone)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneOutput) ToAvailableResourcesAvailableZoneOutput() AvailableResourcesAvailableZoneOutput {
	return o
}

func (o AvailableResourcesAvailableZoneOutput) ToAvailableResourcesAvailableZoneOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneOutput {
	return o
}

// The resource information of the available zone.
func (o AvailableResourcesAvailableZoneOutput) AvailableResources() AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZone) []AvailableResourcesAvailableZoneAvailableResource {
		return v.AvailableResources
	}).(AvailableResourcesAvailableZoneAvailableResourceArrayOutput)
}

// The id of the region.
func (o AvailableResourcesAvailableZoneOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZone) string { return v.RegionId }).(pulumi.StringOutput)
}

// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
func (o AvailableResourcesAvailableZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZone) string { return v.Status }).(pulumi.StringOutput)
}

// The id of available zone.
func (o AvailableResourcesAvailableZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type AvailableResourcesAvailableZoneArrayOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZone)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneArrayOutput) ToAvailableResourcesAvailableZoneArrayOutput() AvailableResourcesAvailableZoneArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneArrayOutput) ToAvailableResourcesAvailableZoneArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneArrayOutput) Index(i pulumi.IntInput) AvailableResourcesAvailableZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AvailableResourcesAvailableZone {
		return vs[0].([]AvailableResourcesAvailableZone)[vs[1].(int)]
	}).(AvailableResourcesAvailableZoneOutput)
}

type AvailableResourcesAvailableZoneAvailableResource struct {
	// The supported resource information.
	SupportedResources []AvailableResourcesAvailableZoneAvailableResourceSupportedResource `pulumi:"supportedResources"`
	// The type of resource. Valid values: `InstanceType`, `DedicatedHost`.
	Type string `pulumi:"type"`
}

// AvailableResourcesAvailableZoneAvailableResourceInput is an input type that accepts AvailableResourcesAvailableZoneAvailableResourceArgs and AvailableResourcesAvailableZoneAvailableResourceOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneAvailableResourceInput` via:
//
//	AvailableResourcesAvailableZoneAvailableResourceArgs{...}
type AvailableResourcesAvailableZoneAvailableResourceInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneAvailableResourceOutput() AvailableResourcesAvailableZoneAvailableResourceOutput
	ToAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(context.Context) AvailableResourcesAvailableZoneAvailableResourceOutput
}

type AvailableResourcesAvailableZoneAvailableResourceArgs struct {
	// The supported resource information.
	SupportedResources AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput `pulumi:"supportedResources"`
	// The type of resource. Valid values: `InstanceType`, `DedicatedHost`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (AvailableResourcesAvailableZoneAvailableResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneAvailableResourceArgs) ToAvailableResourcesAvailableZoneAvailableResourceOutput() AvailableResourcesAvailableZoneAvailableResourceOutput {
	return i.ToAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneAvailableResourceArgs) ToAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneAvailableResourceOutput)
}

// AvailableResourcesAvailableZoneAvailableResourceArrayInput is an input type that accepts AvailableResourcesAvailableZoneAvailableResourceArray and AvailableResourcesAvailableZoneAvailableResourceArrayOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneAvailableResourceArrayInput` via:
//
//	AvailableResourcesAvailableZoneAvailableResourceArray{ AvailableResourcesAvailableZoneAvailableResourceArgs{...} }
type AvailableResourcesAvailableZoneAvailableResourceArrayInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneAvailableResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceArrayOutput
	ToAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(context.Context) AvailableResourcesAvailableZoneAvailableResourceArrayOutput
}

type AvailableResourcesAvailableZoneAvailableResourceArray []AvailableResourcesAvailableZoneAvailableResourceInput

func (AvailableResourcesAvailableZoneAvailableResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneAvailableResourceArray) ToAvailableResourcesAvailableZoneAvailableResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return i.ToAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneAvailableResourceArray) ToAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneAvailableResourceArrayOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneAvailableResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneAvailableResourceOutput) ToAvailableResourcesAvailableZoneAvailableResourceOutput() AvailableResourcesAvailableZoneAvailableResourceOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceOutput) ToAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceOutput {
	return o
}

// The supported resource information.
func (o AvailableResourcesAvailableZoneAvailableResourceOutput) SupportedResources() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZoneAvailableResource) []AvailableResourcesAvailableZoneAvailableResourceSupportedResource {
		return v.SupportedResources
	}).(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput)
}

// The type of resource. Valid values: `InstanceType`, `DedicatedHost`.
func (o AvailableResourcesAvailableZoneAvailableResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZoneAvailableResource) string { return v.Type }).(pulumi.StringOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceArrayOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneAvailableResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneAvailableResourceArrayOutput) ToAvailableResourcesAvailableZoneAvailableResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceArrayOutput) ToAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceArrayOutput) Index(i pulumi.IntInput) AvailableResourcesAvailableZoneAvailableResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AvailableResourcesAvailableZoneAvailableResource {
		return vs[0].([]AvailableResourcesAvailableZoneAvailableResource)[vs[1].(int)]
	}).(AvailableResourcesAvailableZoneAvailableResourceOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResource struct {
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status string `pulumi:"status"`
	// The value of the resource.
	Value string `pulumi:"value"`
}

// AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput is an input type that accepts AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs and AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput` via:
//
//	AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs{...}
type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput
	ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs struct {
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status pulumi.StringInput `pulumi:"status"`
	// The value of the resource.
	Value pulumi.StringInput `pulumi:"value"`
}

func (AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return i.ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput)
}

// AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput is an input type that accepts AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray and AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput values.
// You can construct a concrete instance of `AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput` via:
//
//	AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray{ AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs{...} }
type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput interface {
	pulumi.Input

	ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput
	ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray []AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput

func (AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (i AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return i.ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(context.Background())
}

func (i AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return o
}

// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZoneAvailableResourceSupportedResource) string { return v.Status }).(pulumi.StringOutput)
}

// The value of the resource.
func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v AvailableResourcesAvailableZoneAvailableResourceSupportedResource) string { return v.Value }).(pulumi.StringOutput)
}

type AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput struct{ *pulumi.OutputState }

func (AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput() AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) ToAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(ctx context.Context) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return o
}

func (o AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) Index(i pulumi.IntInput) AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AvailableResourcesAvailableZoneAvailableResourceSupportedResource {
		return vs[0].([]AvailableResourcesAvailableZoneAvailableResourceSupportedResource)[vs[1].(int)]
	}).(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput)
}

type CommandParameterDefinition struct {
	// The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
	DecimalPrecision *int `pulumi:"decimalPrecision"`
	// The default value of the custom parameter.
	DefaultValue *string `pulumi:"defaultValue"`
	// The maximum length of the custom parameter. This field is required when the parameter type is `String`.
	MaxLength *int `pulumi:"maxLength"`
	// The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MaxValue *string `pulumi:"maxValue"`
	// The minimum length of the custom parameter. This field is required when the parameter type is `String`.
	MinLength *int `pulumi:"minLength"`
	// The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MinValue *string `pulumi:"minValue"`
	// The name of the custom parameter.
	Name string `pulumi:"name"`
	// Whether the custom parameter is required.
	Required *bool `pulumi:"required"`
	// The type of the custom parameter. Valid values: `String`, `Digit`.
	Type string `pulumi:"type"`
}

// CommandParameterDefinitionInput is an input type that accepts CommandParameterDefinitionArgs and CommandParameterDefinitionOutput values.
// You can construct a concrete instance of `CommandParameterDefinitionInput` via:
//
//	CommandParameterDefinitionArgs{...}
type CommandParameterDefinitionInput interface {
	pulumi.Input

	ToCommandParameterDefinitionOutput() CommandParameterDefinitionOutput
	ToCommandParameterDefinitionOutputWithContext(context.Context) CommandParameterDefinitionOutput
}

type CommandParameterDefinitionArgs struct {
	// The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
	DecimalPrecision pulumi.IntPtrInput `pulumi:"decimalPrecision"`
	// The default value of the custom parameter.
	DefaultValue pulumi.StringPtrInput `pulumi:"defaultValue"`
	// The maximum length of the custom parameter. This field is required when the parameter type is `String`.
	MaxLength pulumi.IntPtrInput `pulumi:"maxLength"`
	// The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MaxValue pulumi.StringPtrInput `pulumi:"maxValue"`
	// The minimum length of the custom parameter. This field is required when the parameter type is `String`.
	MinLength pulumi.IntPtrInput `pulumi:"minLength"`
	// The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MinValue pulumi.StringPtrInput `pulumi:"minValue"`
	// The name of the custom parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the custom parameter is required.
	Required pulumi.BoolPtrInput `pulumi:"required"`
	// The type of the custom parameter. Valid values: `String`, `Digit`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CommandParameterDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandParameterDefinition)(nil)).Elem()
}

func (i CommandParameterDefinitionArgs) ToCommandParameterDefinitionOutput() CommandParameterDefinitionOutput {
	return i.ToCommandParameterDefinitionOutputWithContext(context.Background())
}

func (i CommandParameterDefinitionArgs) ToCommandParameterDefinitionOutputWithContext(ctx context.Context) CommandParameterDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandParameterDefinitionOutput)
}

// CommandParameterDefinitionArrayInput is an input type that accepts CommandParameterDefinitionArray and CommandParameterDefinitionArrayOutput values.
// You can construct a concrete instance of `CommandParameterDefinitionArrayInput` via:
//
//	CommandParameterDefinitionArray{ CommandParameterDefinitionArgs{...} }
type CommandParameterDefinitionArrayInput interface {
	pulumi.Input

	ToCommandParameterDefinitionArrayOutput() CommandParameterDefinitionArrayOutput
	ToCommandParameterDefinitionArrayOutputWithContext(context.Context) CommandParameterDefinitionArrayOutput
}

type CommandParameterDefinitionArray []CommandParameterDefinitionInput

func (CommandParameterDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandParameterDefinition)(nil)).Elem()
}

func (i CommandParameterDefinitionArray) ToCommandParameterDefinitionArrayOutput() CommandParameterDefinitionArrayOutput {
	return i.ToCommandParameterDefinitionArrayOutputWithContext(context.Background())
}

func (i CommandParameterDefinitionArray) ToCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) CommandParameterDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandParameterDefinitionArrayOutput)
}

type CommandParameterDefinitionOutput struct{ *pulumi.OutputState }

func (CommandParameterDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandParameterDefinition)(nil)).Elem()
}

func (o CommandParameterDefinitionOutput) ToCommandParameterDefinitionOutput() CommandParameterDefinitionOutput {
	return o
}

func (o CommandParameterDefinitionOutput) ToCommandParameterDefinitionOutputWithContext(ctx context.Context) CommandParameterDefinitionOutput {
	return o
}

// The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
func (o CommandParameterDefinitionOutput) DecimalPrecision() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *int { return v.DecimalPrecision }).(pulumi.IntPtrOutput)
}

// The default value of the custom parameter.
func (o CommandParameterDefinitionOutput) DefaultValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *string { return v.DefaultValue }).(pulumi.StringPtrOutput)
}

// The maximum length of the custom parameter. This field is required when the parameter type is `String`.
func (o CommandParameterDefinitionOutput) MaxLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *int { return v.MaxLength }).(pulumi.IntPtrOutput)
}

// The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
func (o CommandParameterDefinitionOutput) MaxValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *string { return v.MaxValue }).(pulumi.StringPtrOutput)
}

// The minimum length of the custom parameter. This field is required when the parameter type is `String`.
func (o CommandParameterDefinitionOutput) MinLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *int { return v.MinLength }).(pulumi.IntPtrOutput)
}

// The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
func (o CommandParameterDefinitionOutput) MinValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *string { return v.MinValue }).(pulumi.StringPtrOutput)
}

// The name of the custom parameter.
func (o CommandParameterDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandParameterDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the custom parameter is required.
func (o CommandParameterDefinitionOutput) Required() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CommandParameterDefinition) *bool { return v.Required }).(pulumi.BoolPtrOutput)
}

// The type of the custom parameter. Valid values: `String`, `Digit`.
func (o CommandParameterDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommandParameterDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type CommandParameterDefinitionArrayOutput struct{ *pulumi.OutputState }

func (CommandParameterDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandParameterDefinition)(nil)).Elem()
}

func (o CommandParameterDefinitionArrayOutput) ToCommandParameterDefinitionArrayOutput() CommandParameterDefinitionArrayOutput {
	return o
}

func (o CommandParameterDefinitionArrayOutput) ToCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) CommandParameterDefinitionArrayOutput {
	return o
}

func (o CommandParameterDefinitionArrayOutput) Index(i pulumi.IntInput) CommandParameterDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandParameterDefinition {
		return vs[0].([]CommandParameterDefinition)[vs[1].(int)]
	}).(CommandParameterDefinitionOutput)
}

type CommandTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// CommandTagInput is an input type that accepts CommandTagArgs and CommandTagOutput values.
// You can construct a concrete instance of `CommandTagInput` via:
//
//	CommandTagArgs{...}
type CommandTagInput interface {
	pulumi.Input

	ToCommandTagOutput() CommandTagOutput
	ToCommandTagOutputWithContext(context.Context) CommandTagOutput
}

type CommandTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CommandTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandTag)(nil)).Elem()
}

func (i CommandTagArgs) ToCommandTagOutput() CommandTagOutput {
	return i.ToCommandTagOutputWithContext(context.Background())
}

func (i CommandTagArgs) ToCommandTagOutputWithContext(ctx context.Context) CommandTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandTagOutput)
}

// CommandTagArrayInput is an input type that accepts CommandTagArray and CommandTagArrayOutput values.
// You can construct a concrete instance of `CommandTagArrayInput` via:
//
//	CommandTagArray{ CommandTagArgs{...} }
type CommandTagArrayInput interface {
	pulumi.Input

	ToCommandTagArrayOutput() CommandTagArrayOutput
	ToCommandTagArrayOutputWithContext(context.Context) CommandTagArrayOutput
}

type CommandTagArray []CommandTagInput

func (CommandTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandTag)(nil)).Elem()
}

func (i CommandTagArray) ToCommandTagArrayOutput() CommandTagArrayOutput {
	return i.ToCommandTagArrayOutputWithContext(context.Background())
}

func (i CommandTagArray) ToCommandTagArrayOutputWithContext(ctx context.Context) CommandTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandTagArrayOutput)
}

type CommandTagOutput struct{ *pulumi.OutputState }

func (CommandTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandTag)(nil)).Elem()
}

func (o CommandTagOutput) ToCommandTagOutput() CommandTagOutput {
	return o
}

func (o CommandTagOutput) ToCommandTagOutputWithContext(ctx context.Context) CommandTagOutput {
	return o
}

// The Key of Tags.
func (o CommandTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CommandTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o CommandTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CommandTag) string { return v.Value }).(pulumi.StringOutput)
}

type CommandTagArrayOutput struct{ *pulumi.OutputState }

func (CommandTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandTag)(nil)).Elem()
}

func (o CommandTagArrayOutput) ToCommandTagArrayOutput() CommandTagArrayOutput {
	return o
}

func (o CommandTagArrayOutput) ToCommandTagArrayOutputWithContext(ctx context.Context) CommandTagArrayOutput {
	return o
}

func (o CommandTagArrayOutput) Index(i pulumi.IntInput) CommandTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandTag {
		return vs[0].([]CommandTag)[vs[1].(int)]
	}).(CommandTagOutput)
}

type CommandsCommand struct {
	// The base64 encoded content of the ecs command.
	CommandContent string `pulumi:"commandContent"`
	// The id of ecs command.
	CommandId string `pulumi:"commandId"`
	// The provider of public command. When this field is not specified, query for custom commands.
	CommandProvider string `pulumi:"commandProvider"`
	// Whether the command content is base64 encoded. Valid values: `Base64`, `PlainText`. Default is `Base64`.
	ContentEncoding string `pulumi:"contentEncoding"`
	// The create time of the ecs command.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the ecs command.
	Description string `pulumi:"description"`
	// Whether to enable custom parameter. Default is `false`.
	EnableParameter bool `pulumi:"enableParameter"`
	// The id of the ecs command.
	Id string `pulumi:"id"`
	// The invocation times of the ecs command. Public commands do not display the invocation times.
	InvocationTimes int `pulumi:"invocationTimes"`
	// The name of ecs command. This field support fuzzy query.
	Name string `pulumi:"name"`
	// The custom parameter definitions of the ecs command.
	ParameterDefinitions []CommandsCommandParameterDefinition `pulumi:"parameterDefinitions"`
	// The project name of ecs command.
	ProjectName string `pulumi:"projectName"`
	// Tags.
	Tags []CommandsCommandTag `pulumi:"tags"`
	// The timeout of the ecs command.
	Timeout int `pulumi:"timeout"`
	// The type of ecs command. Valid values: `Shell`.
	Type string `pulumi:"type"`
	// The update time of the ecs command.
	UpdatedAt string `pulumi:"updatedAt"`
	// The username of the ecs command.
	Username string `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir string `pulumi:"workingDir"`
}

// CommandsCommandInput is an input type that accepts CommandsCommandArgs and CommandsCommandOutput values.
// You can construct a concrete instance of `CommandsCommandInput` via:
//
//	CommandsCommandArgs{...}
type CommandsCommandInput interface {
	pulumi.Input

	ToCommandsCommandOutput() CommandsCommandOutput
	ToCommandsCommandOutputWithContext(context.Context) CommandsCommandOutput
}

type CommandsCommandArgs struct {
	// The base64 encoded content of the ecs command.
	CommandContent pulumi.StringInput `pulumi:"commandContent"`
	// The id of ecs command.
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// The provider of public command. When this field is not specified, query for custom commands.
	CommandProvider pulumi.StringInput `pulumi:"commandProvider"`
	// Whether the command content is base64 encoded. Valid values: `Base64`, `PlainText`. Default is `Base64`.
	ContentEncoding pulumi.StringInput `pulumi:"contentEncoding"`
	// The create time of the ecs command.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the ecs command.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether to enable custom parameter. Default is `false`.
	EnableParameter pulumi.BoolInput `pulumi:"enableParameter"`
	// The id of the ecs command.
	Id pulumi.StringInput `pulumi:"id"`
	// The invocation times of the ecs command. Public commands do not display the invocation times.
	InvocationTimes pulumi.IntInput `pulumi:"invocationTimes"`
	// The name of ecs command. This field support fuzzy query.
	Name pulumi.StringInput `pulumi:"name"`
	// The custom parameter definitions of the ecs command.
	ParameterDefinitions CommandsCommandParameterDefinitionArrayInput `pulumi:"parameterDefinitions"`
	// The project name of ecs command.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Tags.
	Tags CommandsCommandTagArrayInput `pulumi:"tags"`
	// The timeout of the ecs command.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The type of ecs command. Valid values: `Shell`.
	Type pulumi.StringInput `pulumi:"type"`
	// The update time of the ecs command.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The username of the ecs command.
	Username pulumi.StringInput `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`
}

func (CommandsCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsCommand)(nil)).Elem()
}

func (i CommandsCommandArgs) ToCommandsCommandOutput() CommandsCommandOutput {
	return i.ToCommandsCommandOutputWithContext(context.Background())
}

func (i CommandsCommandArgs) ToCommandsCommandOutputWithContext(ctx context.Context) CommandsCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsCommandOutput)
}

// CommandsCommandArrayInput is an input type that accepts CommandsCommandArray and CommandsCommandArrayOutput values.
// You can construct a concrete instance of `CommandsCommandArrayInput` via:
//
//	CommandsCommandArray{ CommandsCommandArgs{...} }
type CommandsCommandArrayInput interface {
	pulumi.Input

	ToCommandsCommandArrayOutput() CommandsCommandArrayOutput
	ToCommandsCommandArrayOutputWithContext(context.Context) CommandsCommandArrayOutput
}

type CommandsCommandArray []CommandsCommandInput

func (CommandsCommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsCommand)(nil)).Elem()
}

func (i CommandsCommandArray) ToCommandsCommandArrayOutput() CommandsCommandArrayOutput {
	return i.ToCommandsCommandArrayOutputWithContext(context.Background())
}

func (i CommandsCommandArray) ToCommandsCommandArrayOutputWithContext(ctx context.Context) CommandsCommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsCommandArrayOutput)
}

type CommandsCommandOutput struct{ *pulumi.OutputState }

func (CommandsCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsCommand)(nil)).Elem()
}

func (o CommandsCommandOutput) ToCommandsCommandOutput() CommandsCommandOutput {
	return o
}

func (o CommandsCommandOutput) ToCommandsCommandOutputWithContext(ctx context.Context) CommandsCommandOutput {
	return o
}

// The base64 encoded content of the ecs command.
func (o CommandsCommandOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.CommandContent }).(pulumi.StringOutput)
}

// The id of ecs command.
func (o CommandsCommandOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.CommandId }).(pulumi.StringOutput)
}

// The provider of public command. When this field is not specified, query for custom commands.
func (o CommandsCommandOutput) CommandProvider() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.CommandProvider }).(pulumi.StringOutput)
}

// Whether the command content is base64 encoded. Valid values: `Base64`, `PlainText`. Default is `Base64`.
func (o CommandsCommandOutput) ContentEncoding() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.ContentEncoding }).(pulumi.StringOutput)
}

// The create time of the ecs command.
func (o CommandsCommandOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the ecs command.
func (o CommandsCommandOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Description }).(pulumi.StringOutput)
}

// Whether to enable custom parameter. Default is `false`.
func (o CommandsCommandOutput) EnableParameter() pulumi.BoolOutput {
	return o.ApplyT(func(v CommandsCommand) bool { return v.EnableParameter }).(pulumi.BoolOutput)
}

// The id of the ecs command.
func (o CommandsCommandOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Id }).(pulumi.StringOutput)
}

// The invocation times of the ecs command. Public commands do not display the invocation times.
func (o CommandsCommandOutput) InvocationTimes() pulumi.IntOutput {
	return o.ApplyT(func(v CommandsCommand) int { return v.InvocationTimes }).(pulumi.IntOutput)
}

// The name of ecs command. This field support fuzzy query.
func (o CommandsCommandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Name }).(pulumi.StringOutput)
}

// The custom parameter definitions of the ecs command.
func (o CommandsCommandOutput) ParameterDefinitions() CommandsCommandParameterDefinitionArrayOutput {
	return o.ApplyT(func(v CommandsCommand) []CommandsCommandParameterDefinition { return v.ParameterDefinitions }).(CommandsCommandParameterDefinitionArrayOutput)
}

// The project name of ecs command.
func (o CommandsCommandOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Tags.
func (o CommandsCommandOutput) Tags() CommandsCommandTagArrayOutput {
	return o.ApplyT(func(v CommandsCommand) []CommandsCommandTag { return v.Tags }).(CommandsCommandTagArrayOutput)
}

// The timeout of the ecs command.
func (o CommandsCommandOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v CommandsCommand) int { return v.Timeout }).(pulumi.IntOutput)
}

// The type of ecs command. Valid values: `Shell`.
func (o CommandsCommandOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Type }).(pulumi.StringOutput)
}

// The update time of the ecs command.
func (o CommandsCommandOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The username of the ecs command.
func (o CommandsCommandOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.Username }).(pulumi.StringOutput)
}

// The working directory of the ecs command.
func (o CommandsCommandOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommand) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type CommandsCommandArrayOutput struct{ *pulumi.OutputState }

func (CommandsCommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsCommand)(nil)).Elem()
}

func (o CommandsCommandArrayOutput) ToCommandsCommandArrayOutput() CommandsCommandArrayOutput {
	return o
}

func (o CommandsCommandArrayOutput) ToCommandsCommandArrayOutputWithContext(ctx context.Context) CommandsCommandArrayOutput {
	return o
}

func (o CommandsCommandArrayOutput) Index(i pulumi.IntInput) CommandsCommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandsCommand {
		return vs[0].([]CommandsCommand)[vs[1].(int)]
	}).(CommandsCommandOutput)
}

type CommandsCommandParameterDefinition struct {
	// The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
	DecimalPrecision int `pulumi:"decimalPrecision"`
	// The default value of the custom parameter.
	DefaultValue string `pulumi:"defaultValue"`
	// The maximum length of the custom parameter. This field is required when the parameter type is `String`.
	MaxLength int `pulumi:"maxLength"`
	// The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MaxValue string `pulumi:"maxValue"`
	// The minimum length of the custom parameter. This field is required when the parameter type is `String`.
	MinLength int `pulumi:"minLength"`
	// The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MinValue string `pulumi:"minValue"`
	// The name of ecs command. This field support fuzzy query.
	Name string `pulumi:"name"`
	// Whether the custom parameter is required.
	Required bool `pulumi:"required"`
	// The type of ecs command. Valid values: `Shell`.
	Type string `pulumi:"type"`
}

// CommandsCommandParameterDefinitionInput is an input type that accepts CommandsCommandParameterDefinitionArgs and CommandsCommandParameterDefinitionOutput values.
// You can construct a concrete instance of `CommandsCommandParameterDefinitionInput` via:
//
//	CommandsCommandParameterDefinitionArgs{...}
type CommandsCommandParameterDefinitionInput interface {
	pulumi.Input

	ToCommandsCommandParameterDefinitionOutput() CommandsCommandParameterDefinitionOutput
	ToCommandsCommandParameterDefinitionOutputWithContext(context.Context) CommandsCommandParameterDefinitionOutput
}

type CommandsCommandParameterDefinitionArgs struct {
	// The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
	DecimalPrecision pulumi.IntInput `pulumi:"decimalPrecision"`
	// The default value of the custom parameter.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// The maximum length of the custom parameter. This field is required when the parameter type is `String`.
	MaxLength pulumi.IntInput `pulumi:"maxLength"`
	// The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MaxValue pulumi.StringInput `pulumi:"maxValue"`
	// The minimum length of the custom parameter. This field is required when the parameter type is `String`.
	MinLength pulumi.IntInput `pulumi:"minLength"`
	// The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MinValue pulumi.StringInput `pulumi:"minValue"`
	// The name of ecs command. This field support fuzzy query.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the custom parameter is required.
	Required pulumi.BoolInput `pulumi:"required"`
	// The type of ecs command. Valid values: `Shell`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (CommandsCommandParameterDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsCommandParameterDefinition)(nil)).Elem()
}

func (i CommandsCommandParameterDefinitionArgs) ToCommandsCommandParameterDefinitionOutput() CommandsCommandParameterDefinitionOutput {
	return i.ToCommandsCommandParameterDefinitionOutputWithContext(context.Background())
}

func (i CommandsCommandParameterDefinitionArgs) ToCommandsCommandParameterDefinitionOutputWithContext(ctx context.Context) CommandsCommandParameterDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsCommandParameterDefinitionOutput)
}

// CommandsCommandParameterDefinitionArrayInput is an input type that accepts CommandsCommandParameterDefinitionArray and CommandsCommandParameterDefinitionArrayOutput values.
// You can construct a concrete instance of `CommandsCommandParameterDefinitionArrayInput` via:
//
//	CommandsCommandParameterDefinitionArray{ CommandsCommandParameterDefinitionArgs{...} }
type CommandsCommandParameterDefinitionArrayInput interface {
	pulumi.Input

	ToCommandsCommandParameterDefinitionArrayOutput() CommandsCommandParameterDefinitionArrayOutput
	ToCommandsCommandParameterDefinitionArrayOutputWithContext(context.Context) CommandsCommandParameterDefinitionArrayOutput
}

type CommandsCommandParameterDefinitionArray []CommandsCommandParameterDefinitionInput

func (CommandsCommandParameterDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsCommandParameterDefinition)(nil)).Elem()
}

func (i CommandsCommandParameterDefinitionArray) ToCommandsCommandParameterDefinitionArrayOutput() CommandsCommandParameterDefinitionArrayOutput {
	return i.ToCommandsCommandParameterDefinitionArrayOutputWithContext(context.Background())
}

func (i CommandsCommandParameterDefinitionArray) ToCommandsCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) CommandsCommandParameterDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsCommandParameterDefinitionArrayOutput)
}

type CommandsCommandParameterDefinitionOutput struct{ *pulumi.OutputState }

func (CommandsCommandParameterDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsCommandParameterDefinition)(nil)).Elem()
}

func (o CommandsCommandParameterDefinitionOutput) ToCommandsCommandParameterDefinitionOutput() CommandsCommandParameterDefinitionOutput {
	return o
}

func (o CommandsCommandParameterDefinitionOutput) ToCommandsCommandParameterDefinitionOutputWithContext(ctx context.Context) CommandsCommandParameterDefinitionOutput {
	return o
}

// The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
func (o CommandsCommandParameterDefinitionOutput) DecimalPrecision() pulumi.IntOutput {
	return o.ApplyT(func(v CommandsCommandParameterDefinition) int { return v.DecimalPrecision }).(pulumi.IntOutput)
}

// The default value of the custom parameter.
func (o CommandsCommandParameterDefinitionOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommandParameterDefinition) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// The maximum length of the custom parameter. This field is required when the parameter type is `String`.
func (o CommandsCommandParameterDefinitionOutput) MaxLength() pulumi.IntOutput {
	return o.ApplyT(func(v CommandsCommandParameterDefinition) int { return v.MaxLength }).(pulumi.IntOutput)
}

// The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
func (o CommandsCommandParameterDefinitionOutput) MaxValue() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommandParameterDefinition) string { return v.MaxValue }).(pulumi.StringOutput)
}

// The minimum length of the custom parameter. This field is required when the parameter type is `String`.
func (o CommandsCommandParameterDefinitionOutput) MinLength() pulumi.IntOutput {
	return o.ApplyT(func(v CommandsCommandParameterDefinition) int { return v.MinLength }).(pulumi.IntOutput)
}

// The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
func (o CommandsCommandParameterDefinitionOutput) MinValue() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommandParameterDefinition) string { return v.MinValue }).(pulumi.StringOutput)
}

// The name of ecs command. This field support fuzzy query.
func (o CommandsCommandParameterDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommandParameterDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the custom parameter is required.
func (o CommandsCommandParameterDefinitionOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v CommandsCommandParameterDefinition) bool { return v.Required }).(pulumi.BoolOutput)
}

// The type of ecs command. Valid values: `Shell`.
func (o CommandsCommandParameterDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommandParameterDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type CommandsCommandParameterDefinitionArrayOutput struct{ *pulumi.OutputState }

func (CommandsCommandParameterDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsCommandParameterDefinition)(nil)).Elem()
}

func (o CommandsCommandParameterDefinitionArrayOutput) ToCommandsCommandParameterDefinitionArrayOutput() CommandsCommandParameterDefinitionArrayOutput {
	return o
}

func (o CommandsCommandParameterDefinitionArrayOutput) ToCommandsCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) CommandsCommandParameterDefinitionArrayOutput {
	return o
}

func (o CommandsCommandParameterDefinitionArrayOutput) Index(i pulumi.IntInput) CommandsCommandParameterDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandsCommandParameterDefinition {
		return vs[0].([]CommandsCommandParameterDefinition)[vs[1].(int)]
	}).(CommandsCommandParameterDefinitionOutput)
}

type CommandsCommandTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// CommandsCommandTagInput is an input type that accepts CommandsCommandTagArgs and CommandsCommandTagOutput values.
// You can construct a concrete instance of `CommandsCommandTagInput` via:
//
//	CommandsCommandTagArgs{...}
type CommandsCommandTagInput interface {
	pulumi.Input

	ToCommandsCommandTagOutput() CommandsCommandTagOutput
	ToCommandsCommandTagOutputWithContext(context.Context) CommandsCommandTagOutput
}

type CommandsCommandTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CommandsCommandTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsCommandTag)(nil)).Elem()
}

func (i CommandsCommandTagArgs) ToCommandsCommandTagOutput() CommandsCommandTagOutput {
	return i.ToCommandsCommandTagOutputWithContext(context.Background())
}

func (i CommandsCommandTagArgs) ToCommandsCommandTagOutputWithContext(ctx context.Context) CommandsCommandTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsCommandTagOutput)
}

// CommandsCommandTagArrayInput is an input type that accepts CommandsCommandTagArray and CommandsCommandTagArrayOutput values.
// You can construct a concrete instance of `CommandsCommandTagArrayInput` via:
//
//	CommandsCommandTagArray{ CommandsCommandTagArgs{...} }
type CommandsCommandTagArrayInput interface {
	pulumi.Input

	ToCommandsCommandTagArrayOutput() CommandsCommandTagArrayOutput
	ToCommandsCommandTagArrayOutputWithContext(context.Context) CommandsCommandTagArrayOutput
}

type CommandsCommandTagArray []CommandsCommandTagInput

func (CommandsCommandTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsCommandTag)(nil)).Elem()
}

func (i CommandsCommandTagArray) ToCommandsCommandTagArrayOutput() CommandsCommandTagArrayOutput {
	return i.ToCommandsCommandTagArrayOutputWithContext(context.Background())
}

func (i CommandsCommandTagArray) ToCommandsCommandTagArrayOutputWithContext(ctx context.Context) CommandsCommandTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsCommandTagArrayOutput)
}

type CommandsCommandTagOutput struct{ *pulumi.OutputState }

func (CommandsCommandTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsCommandTag)(nil)).Elem()
}

func (o CommandsCommandTagOutput) ToCommandsCommandTagOutput() CommandsCommandTagOutput {
	return o
}

func (o CommandsCommandTagOutput) ToCommandsCommandTagOutputWithContext(ctx context.Context) CommandsCommandTagOutput {
	return o
}

// The Key of Tags.
func (o CommandsCommandTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommandTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o CommandsCommandTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsCommandTag) string { return v.Value }).(pulumi.StringOutput)
}

type CommandsCommandTagArrayOutput struct{ *pulumi.OutputState }

func (CommandsCommandTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsCommandTag)(nil)).Elem()
}

func (o CommandsCommandTagArrayOutput) ToCommandsCommandTagArrayOutput() CommandsCommandTagArrayOutput {
	return o
}

func (o CommandsCommandTagArrayOutput) ToCommandsCommandTagArrayOutputWithContext(ctx context.Context) CommandsCommandTagArrayOutput {
	return o
}

func (o CommandsCommandTagArrayOutput) Index(i pulumi.IntInput) CommandsCommandTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandsCommandTag {
		return vs[0].([]CommandsCommandTag)[vs[1].(int)]
	}).(CommandsCommandTagOutput)
}

type CommandsTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// CommandsTagInput is an input type that accepts CommandsTagArgs and CommandsTagOutput values.
// You can construct a concrete instance of `CommandsTagInput` via:
//
//	CommandsTagArgs{...}
type CommandsTagInput interface {
	pulumi.Input

	ToCommandsTagOutput() CommandsTagOutput
	ToCommandsTagOutputWithContext(context.Context) CommandsTagOutput
}

type CommandsTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CommandsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsTag)(nil)).Elem()
}

func (i CommandsTagArgs) ToCommandsTagOutput() CommandsTagOutput {
	return i.ToCommandsTagOutputWithContext(context.Background())
}

func (i CommandsTagArgs) ToCommandsTagOutputWithContext(ctx context.Context) CommandsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsTagOutput)
}

// CommandsTagArrayInput is an input type that accepts CommandsTagArray and CommandsTagArrayOutput values.
// You can construct a concrete instance of `CommandsTagArrayInput` via:
//
//	CommandsTagArray{ CommandsTagArgs{...} }
type CommandsTagArrayInput interface {
	pulumi.Input

	ToCommandsTagArrayOutput() CommandsTagArrayOutput
	ToCommandsTagArrayOutputWithContext(context.Context) CommandsTagArrayOutput
}

type CommandsTagArray []CommandsTagInput

func (CommandsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsTag)(nil)).Elem()
}

func (i CommandsTagArray) ToCommandsTagArrayOutput() CommandsTagArrayOutput {
	return i.ToCommandsTagArrayOutputWithContext(context.Background())
}

func (i CommandsTagArray) ToCommandsTagArrayOutputWithContext(ctx context.Context) CommandsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CommandsTagArrayOutput)
}

type CommandsTagOutput struct{ *pulumi.OutputState }

func (CommandsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CommandsTag)(nil)).Elem()
}

func (o CommandsTagOutput) ToCommandsTagOutput() CommandsTagOutput {
	return o
}

func (o CommandsTagOutput) ToCommandsTagOutputWithContext(ctx context.Context) CommandsTagOutput {
	return o
}

// The Key of Tags.
func (o CommandsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o CommandsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CommandsTag) string { return v.Value }).(pulumi.StringOutput)
}

type CommandsTagArrayOutput struct{ *pulumi.OutputState }

func (CommandsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CommandsTag)(nil)).Elem()
}

func (o CommandsTagArrayOutput) ToCommandsTagArrayOutput() CommandsTagArrayOutput {
	return o
}

func (o CommandsTagArrayOutput) ToCommandsTagArrayOutputWithContext(ctx context.Context) CommandsTagArrayOutput {
	return o
}

func (o CommandsTagArrayOutput) Index(i pulumi.IntInput) CommandsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CommandsTag {
		return vs[0].([]CommandsTag)[vs[1].(int)]
	}).(CommandsTagOutput)
}

type DeploymentSetsDeploymentSet struct {
	// The ID of ECS DeploymentSet.
	DeploymentSetId string `pulumi:"deploymentSetId"`
	// The name of ECS DeploymentSet.
	DeploymentSetName string `pulumi:"deploymentSetName"`
	// The description of ECS DeploymentSet.
	Description string `pulumi:"description"`
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
	Granularity string `pulumi:"granularity"`
	// The strategy of ECS DeploymentSet.
	Strategy string `pulumi:"strategy"`
}

// DeploymentSetsDeploymentSetInput is an input type that accepts DeploymentSetsDeploymentSetArgs and DeploymentSetsDeploymentSetOutput values.
// You can construct a concrete instance of `DeploymentSetsDeploymentSetInput` via:
//
//	DeploymentSetsDeploymentSetArgs{...}
type DeploymentSetsDeploymentSetInput interface {
	pulumi.Input

	ToDeploymentSetsDeploymentSetOutput() DeploymentSetsDeploymentSetOutput
	ToDeploymentSetsDeploymentSetOutputWithContext(context.Context) DeploymentSetsDeploymentSetOutput
}

type DeploymentSetsDeploymentSetArgs struct {
	// The ID of ECS DeploymentSet.
	DeploymentSetId pulumi.StringInput `pulumi:"deploymentSetId"`
	// The name of ECS DeploymentSet.
	DeploymentSetName pulumi.StringInput `pulumi:"deploymentSetName"`
	// The description of ECS DeploymentSet.
	Description pulumi.StringInput `pulumi:"description"`
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
	Granularity pulumi.StringInput `pulumi:"granularity"`
	// The strategy of ECS DeploymentSet.
	Strategy pulumi.StringInput `pulumi:"strategy"`
}

func (DeploymentSetsDeploymentSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSetsDeploymentSet)(nil)).Elem()
}

func (i DeploymentSetsDeploymentSetArgs) ToDeploymentSetsDeploymentSetOutput() DeploymentSetsDeploymentSetOutput {
	return i.ToDeploymentSetsDeploymentSetOutputWithContext(context.Background())
}

func (i DeploymentSetsDeploymentSetArgs) ToDeploymentSetsDeploymentSetOutputWithContext(ctx context.Context) DeploymentSetsDeploymentSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSetsDeploymentSetOutput)
}

// DeploymentSetsDeploymentSetArrayInput is an input type that accepts DeploymentSetsDeploymentSetArray and DeploymentSetsDeploymentSetArrayOutput values.
// You can construct a concrete instance of `DeploymentSetsDeploymentSetArrayInput` via:
//
//	DeploymentSetsDeploymentSetArray{ DeploymentSetsDeploymentSetArgs{...} }
type DeploymentSetsDeploymentSetArrayInput interface {
	pulumi.Input

	ToDeploymentSetsDeploymentSetArrayOutput() DeploymentSetsDeploymentSetArrayOutput
	ToDeploymentSetsDeploymentSetArrayOutputWithContext(context.Context) DeploymentSetsDeploymentSetArrayOutput
}

type DeploymentSetsDeploymentSetArray []DeploymentSetsDeploymentSetInput

func (DeploymentSetsDeploymentSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentSetsDeploymentSet)(nil)).Elem()
}

func (i DeploymentSetsDeploymentSetArray) ToDeploymentSetsDeploymentSetArrayOutput() DeploymentSetsDeploymentSetArrayOutput {
	return i.ToDeploymentSetsDeploymentSetArrayOutputWithContext(context.Background())
}

func (i DeploymentSetsDeploymentSetArray) ToDeploymentSetsDeploymentSetArrayOutputWithContext(ctx context.Context) DeploymentSetsDeploymentSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSetsDeploymentSetArrayOutput)
}

type DeploymentSetsDeploymentSetOutput struct{ *pulumi.OutputState }

func (DeploymentSetsDeploymentSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DeploymentSetsDeploymentSet)(nil)).Elem()
}

func (o DeploymentSetsDeploymentSetOutput) ToDeploymentSetsDeploymentSetOutput() DeploymentSetsDeploymentSetOutput {
	return o
}

func (o DeploymentSetsDeploymentSetOutput) ToDeploymentSetsDeploymentSetOutputWithContext(ctx context.Context) DeploymentSetsDeploymentSetOutput {
	return o
}

// The ID of ECS DeploymentSet.
func (o DeploymentSetsDeploymentSetOutput) DeploymentSetId() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.DeploymentSetId }).(pulumi.StringOutput)
}

// The name of ECS DeploymentSet.
func (o DeploymentSetsDeploymentSetOutput) DeploymentSetName() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.DeploymentSetName }).(pulumi.StringOutput)
}

// The description of ECS DeploymentSet.
func (o DeploymentSetsDeploymentSetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.Description }).(pulumi.StringOutput)
}

// The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
func (o DeploymentSetsDeploymentSetOutput) Granularity() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.Granularity }).(pulumi.StringOutput)
}

// The strategy of ECS DeploymentSet.
func (o DeploymentSetsDeploymentSetOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v DeploymentSetsDeploymentSet) string { return v.Strategy }).(pulumi.StringOutput)
}

type DeploymentSetsDeploymentSetArrayOutput struct{ *pulumi.OutputState }

func (DeploymentSetsDeploymentSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DeploymentSetsDeploymentSet)(nil)).Elem()
}

func (o DeploymentSetsDeploymentSetArrayOutput) ToDeploymentSetsDeploymentSetArrayOutput() DeploymentSetsDeploymentSetArrayOutput {
	return o
}

func (o DeploymentSetsDeploymentSetArrayOutput) ToDeploymentSetsDeploymentSetArrayOutputWithContext(ctx context.Context) DeploymentSetsDeploymentSetArrayOutput {
	return o
}

func (o DeploymentSetsDeploymentSetArrayOutput) Index(i pulumi.IntInput) DeploymentSetsDeploymentSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DeploymentSetsDeploymentSet {
		return vs[0].([]DeploymentSetsDeploymentSet)[vs[1].(int)]
	}).(DeploymentSetsDeploymentSetOutput)
}

type HpcClustersHpcCluster struct {
	// The created time of the hpc cluster.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the hpc cluster.
	Description string `pulumi:"description"`
	// The id of the hpc cluster.
	HpcClusterId string `pulumi:"hpcClusterId"`
	// The id of the hpc cluster.
	Id string `pulumi:"id"`
	// The name of the hpc cluster.
	Name string `pulumi:"name"`
	// The updated time of the hpc cluster.
	UpdatedAt string `pulumi:"updatedAt"`
	// The vpc id of the hpc cluster.
	VpcId string `pulumi:"vpcId"`
	// The zone id of the hpc cluster.
	ZoneId string `pulumi:"zoneId"`
}

// HpcClustersHpcClusterInput is an input type that accepts HpcClustersHpcClusterArgs and HpcClustersHpcClusterOutput values.
// You can construct a concrete instance of `HpcClustersHpcClusterInput` via:
//
//	HpcClustersHpcClusterArgs{...}
type HpcClustersHpcClusterInput interface {
	pulumi.Input

	ToHpcClustersHpcClusterOutput() HpcClustersHpcClusterOutput
	ToHpcClustersHpcClusterOutputWithContext(context.Context) HpcClustersHpcClusterOutput
}

type HpcClustersHpcClusterArgs struct {
	// The created time of the hpc cluster.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the hpc cluster.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the hpc cluster.
	HpcClusterId pulumi.StringInput `pulumi:"hpcClusterId"`
	// The id of the hpc cluster.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the hpc cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// The updated time of the hpc cluster.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The vpc id of the hpc cluster.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone id of the hpc cluster.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (HpcClustersHpcClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HpcClustersHpcCluster)(nil)).Elem()
}

func (i HpcClustersHpcClusterArgs) ToHpcClustersHpcClusterOutput() HpcClustersHpcClusterOutput {
	return i.ToHpcClustersHpcClusterOutputWithContext(context.Background())
}

func (i HpcClustersHpcClusterArgs) ToHpcClustersHpcClusterOutputWithContext(ctx context.Context) HpcClustersHpcClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HpcClustersHpcClusterOutput)
}

// HpcClustersHpcClusterArrayInput is an input type that accepts HpcClustersHpcClusterArray and HpcClustersHpcClusterArrayOutput values.
// You can construct a concrete instance of `HpcClustersHpcClusterArrayInput` via:
//
//	HpcClustersHpcClusterArray{ HpcClustersHpcClusterArgs{...} }
type HpcClustersHpcClusterArrayInput interface {
	pulumi.Input

	ToHpcClustersHpcClusterArrayOutput() HpcClustersHpcClusterArrayOutput
	ToHpcClustersHpcClusterArrayOutputWithContext(context.Context) HpcClustersHpcClusterArrayOutput
}

type HpcClustersHpcClusterArray []HpcClustersHpcClusterInput

func (HpcClustersHpcClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HpcClustersHpcCluster)(nil)).Elem()
}

func (i HpcClustersHpcClusterArray) ToHpcClustersHpcClusterArrayOutput() HpcClustersHpcClusterArrayOutput {
	return i.ToHpcClustersHpcClusterArrayOutputWithContext(context.Background())
}

func (i HpcClustersHpcClusterArray) ToHpcClustersHpcClusterArrayOutputWithContext(ctx context.Context) HpcClustersHpcClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HpcClustersHpcClusterArrayOutput)
}

type HpcClustersHpcClusterOutput struct{ *pulumi.OutputState }

func (HpcClustersHpcClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HpcClustersHpcCluster)(nil)).Elem()
}

func (o HpcClustersHpcClusterOutput) ToHpcClustersHpcClusterOutput() HpcClustersHpcClusterOutput {
	return o
}

func (o HpcClustersHpcClusterOutput) ToHpcClustersHpcClusterOutputWithContext(ctx context.Context) HpcClustersHpcClusterOutput {
	return o
}

// The created time of the hpc cluster.
func (o HpcClustersHpcClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v HpcClustersHpcCluster) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the hpc cluster.
func (o HpcClustersHpcClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v HpcClustersHpcCluster) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the hpc cluster.
func (o HpcClustersHpcClusterOutput) HpcClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v HpcClustersHpcCluster) string { return v.HpcClusterId }).(pulumi.StringOutput)
}

// The id of the hpc cluster.
func (o HpcClustersHpcClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v HpcClustersHpcCluster) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the hpc cluster.
func (o HpcClustersHpcClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v HpcClustersHpcCluster) string { return v.Name }).(pulumi.StringOutput)
}

// The updated time of the hpc cluster.
func (o HpcClustersHpcClusterOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v HpcClustersHpcCluster) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The vpc id of the hpc cluster.
func (o HpcClustersHpcClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v HpcClustersHpcCluster) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of the hpc cluster.
func (o HpcClustersHpcClusterOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v HpcClustersHpcCluster) string { return v.ZoneId }).(pulumi.StringOutput)
}

type HpcClustersHpcClusterArrayOutput struct{ *pulumi.OutputState }

func (HpcClustersHpcClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HpcClustersHpcCluster)(nil)).Elem()
}

func (o HpcClustersHpcClusterArrayOutput) ToHpcClustersHpcClusterArrayOutput() HpcClustersHpcClusterArrayOutput {
	return o
}

func (o HpcClustersHpcClusterArrayOutput) ToHpcClustersHpcClusterArrayOutputWithContext(ctx context.Context) HpcClustersHpcClusterArrayOutput {
	return o
}

func (o HpcClustersHpcClusterArrayOutput) Index(i pulumi.IntInput) HpcClustersHpcClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HpcClustersHpcCluster {
		return vs[0].([]HpcClustersHpcCluster)[vs[1].(int)]
	}).(HpcClustersHpcClusterOutput)
}

type ImageImportTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ImageImportTagInput is an input type that accepts ImageImportTagArgs and ImageImportTagOutput values.
// You can construct a concrete instance of `ImageImportTagInput` via:
//
//	ImageImportTagArgs{...}
type ImageImportTagInput interface {
	pulumi.Input

	ToImageImportTagOutput() ImageImportTagOutput
	ToImageImportTagOutputWithContext(context.Context) ImageImportTagOutput
}

type ImageImportTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ImageImportTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageImportTag)(nil)).Elem()
}

func (i ImageImportTagArgs) ToImageImportTagOutput() ImageImportTagOutput {
	return i.ToImageImportTagOutputWithContext(context.Background())
}

func (i ImageImportTagArgs) ToImageImportTagOutputWithContext(ctx context.Context) ImageImportTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageImportTagOutput)
}

// ImageImportTagArrayInput is an input type that accepts ImageImportTagArray and ImageImportTagArrayOutput values.
// You can construct a concrete instance of `ImageImportTagArrayInput` via:
//
//	ImageImportTagArray{ ImageImportTagArgs{...} }
type ImageImportTagArrayInput interface {
	pulumi.Input

	ToImageImportTagArrayOutput() ImageImportTagArrayOutput
	ToImageImportTagArrayOutputWithContext(context.Context) ImageImportTagArrayOutput
}

type ImageImportTagArray []ImageImportTagInput

func (ImageImportTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageImportTag)(nil)).Elem()
}

func (i ImageImportTagArray) ToImageImportTagArrayOutput() ImageImportTagArrayOutput {
	return i.ToImageImportTagArrayOutputWithContext(context.Background())
}

func (i ImageImportTagArray) ToImageImportTagArrayOutputWithContext(ctx context.Context) ImageImportTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageImportTagArrayOutput)
}

type ImageImportTagOutput struct{ *pulumi.OutputState }

func (ImageImportTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageImportTag)(nil)).Elem()
}

func (o ImageImportTagOutput) ToImageImportTagOutput() ImageImportTagOutput {
	return o
}

func (o ImageImportTagOutput) ToImageImportTagOutputWithContext(ctx context.Context) ImageImportTagOutput {
	return o
}

// The Key of Tags.
func (o ImageImportTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ImageImportTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ImageImportTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ImageImportTag) string { return v.Value }).(pulumi.StringOutput)
}

type ImageImportTagArrayOutput struct{ *pulumi.OutputState }

func (ImageImportTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageImportTag)(nil)).Elem()
}

func (o ImageImportTagArrayOutput) ToImageImportTagArrayOutput() ImageImportTagArrayOutput {
	return o
}

func (o ImageImportTagArrayOutput) ToImageImportTagArrayOutputWithContext(ctx context.Context) ImageImportTagArrayOutput {
	return o
}

func (o ImageImportTagArrayOutput) Index(i pulumi.IntInput) ImageImportTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageImportTag {
		return vs[0].([]ImageImportTag)[vs[1].(int)]
	}).(ImageImportTagOutput)
}

type ImageSharePermissionsAccount struct {
	// The shared account id of the image.
	AccountId string `pulumi:"accountId"`
}

// ImageSharePermissionsAccountInput is an input type that accepts ImageSharePermissionsAccountArgs and ImageSharePermissionsAccountOutput values.
// You can construct a concrete instance of `ImageSharePermissionsAccountInput` via:
//
//	ImageSharePermissionsAccountArgs{...}
type ImageSharePermissionsAccountInput interface {
	pulumi.Input

	ToImageSharePermissionsAccountOutput() ImageSharePermissionsAccountOutput
	ToImageSharePermissionsAccountOutputWithContext(context.Context) ImageSharePermissionsAccountOutput
}

type ImageSharePermissionsAccountArgs struct {
	// The shared account id of the image.
	AccountId pulumi.StringInput `pulumi:"accountId"`
}

func (ImageSharePermissionsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSharePermissionsAccount)(nil)).Elem()
}

func (i ImageSharePermissionsAccountArgs) ToImageSharePermissionsAccountOutput() ImageSharePermissionsAccountOutput {
	return i.ToImageSharePermissionsAccountOutputWithContext(context.Background())
}

func (i ImageSharePermissionsAccountArgs) ToImageSharePermissionsAccountOutputWithContext(ctx context.Context) ImageSharePermissionsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSharePermissionsAccountOutput)
}

// ImageSharePermissionsAccountArrayInput is an input type that accepts ImageSharePermissionsAccountArray and ImageSharePermissionsAccountArrayOutput values.
// You can construct a concrete instance of `ImageSharePermissionsAccountArrayInput` via:
//
//	ImageSharePermissionsAccountArray{ ImageSharePermissionsAccountArgs{...} }
type ImageSharePermissionsAccountArrayInput interface {
	pulumi.Input

	ToImageSharePermissionsAccountArrayOutput() ImageSharePermissionsAccountArrayOutput
	ToImageSharePermissionsAccountArrayOutputWithContext(context.Context) ImageSharePermissionsAccountArrayOutput
}

type ImageSharePermissionsAccountArray []ImageSharePermissionsAccountInput

func (ImageSharePermissionsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageSharePermissionsAccount)(nil)).Elem()
}

func (i ImageSharePermissionsAccountArray) ToImageSharePermissionsAccountArrayOutput() ImageSharePermissionsAccountArrayOutput {
	return i.ToImageSharePermissionsAccountArrayOutputWithContext(context.Background())
}

func (i ImageSharePermissionsAccountArray) ToImageSharePermissionsAccountArrayOutputWithContext(ctx context.Context) ImageSharePermissionsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageSharePermissionsAccountArrayOutput)
}

type ImageSharePermissionsAccountOutput struct{ *pulumi.OutputState }

func (ImageSharePermissionsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageSharePermissionsAccount)(nil)).Elem()
}

func (o ImageSharePermissionsAccountOutput) ToImageSharePermissionsAccountOutput() ImageSharePermissionsAccountOutput {
	return o
}

func (o ImageSharePermissionsAccountOutput) ToImageSharePermissionsAccountOutputWithContext(ctx context.Context) ImageSharePermissionsAccountOutput {
	return o
}

// The shared account id of the image.
func (o ImageSharePermissionsAccountOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ImageSharePermissionsAccount) string { return v.AccountId }).(pulumi.StringOutput)
}

type ImageSharePermissionsAccountArrayOutput struct{ *pulumi.OutputState }

func (ImageSharePermissionsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageSharePermissionsAccount)(nil)).Elem()
}

func (o ImageSharePermissionsAccountArrayOutput) ToImageSharePermissionsAccountArrayOutput() ImageSharePermissionsAccountArrayOutput {
	return o
}

func (o ImageSharePermissionsAccountArrayOutput) ToImageSharePermissionsAccountArrayOutputWithContext(ctx context.Context) ImageSharePermissionsAccountArrayOutput {
	return o
}

func (o ImageSharePermissionsAccountArrayOutput) Index(i pulumi.IntInput) ImageSharePermissionsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageSharePermissionsAccount {
		return vs[0].([]ImageSharePermissionsAccount)[vs[1].(int)]
	}).(ImageSharePermissionsAccountOutput)
}

type ImageTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ImageTagInput is an input type that accepts ImageTagArgs and ImageTagOutput values.
// You can construct a concrete instance of `ImageTagInput` via:
//
//	ImageTagArgs{...}
type ImageTagInput interface {
	pulumi.Input

	ToImageTagOutput() ImageTagOutput
	ToImageTagOutputWithContext(context.Context) ImageTagOutput
}

type ImageTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ImageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTag)(nil)).Elem()
}

func (i ImageTagArgs) ToImageTagOutput() ImageTagOutput {
	return i.ToImageTagOutputWithContext(context.Background())
}

func (i ImageTagArgs) ToImageTagOutputWithContext(ctx context.Context) ImageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTagOutput)
}

// ImageTagArrayInput is an input type that accepts ImageTagArray and ImageTagArrayOutput values.
// You can construct a concrete instance of `ImageTagArrayInput` via:
//
//	ImageTagArray{ ImageTagArgs{...} }
type ImageTagArrayInput interface {
	pulumi.Input

	ToImageTagArrayOutput() ImageTagArrayOutput
	ToImageTagArrayOutputWithContext(context.Context) ImageTagArrayOutput
}

type ImageTagArray []ImageTagInput

func (ImageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTag)(nil)).Elem()
}

func (i ImageTagArray) ToImageTagArrayOutput() ImageTagArrayOutput {
	return i.ToImageTagArrayOutputWithContext(context.Background())
}

func (i ImageTagArray) ToImageTagArrayOutputWithContext(ctx context.Context) ImageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImageTagArrayOutput)
}

type ImageTagOutput struct{ *pulumi.OutputState }

func (ImageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImageTag)(nil)).Elem()
}

func (o ImageTagOutput) ToImageTagOutput() ImageTagOutput {
	return o
}

func (o ImageTagOutput) ToImageTagOutputWithContext(ctx context.Context) ImageTagOutput {
	return o
}

// The Key of Tags.
func (o ImageTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ImageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ImageTag) string { return v.Value }).(pulumi.StringOutput)
}

type ImageTagArrayOutput struct{ *pulumi.OutputState }

func (ImageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImageTag)(nil)).Elem()
}

func (o ImageTagArrayOutput) ToImageTagArrayOutput() ImageTagArrayOutput {
	return o
}

func (o ImageTagArrayOutput) ToImageTagArrayOutputWithContext(ctx context.Context) ImageTagArrayOutput {
	return o
}

func (o ImageTagArrayOutput) Index(i pulumi.IntInput) ImageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImageTag {
		return vs[0].([]ImageTag)[vs[1].(int)]
	}).(ImageTagOutput)
}

type ImagesImage struct {
	// The architecture of Image.
	Architecture string `pulumi:"architecture"`
	// The boot mode of Image.
	BootMode string `pulumi:"bootMode"`
	// The create time of Image.
	CreatedAt string `pulumi:"createdAt"`
	// The description of Image.
	Description string `pulumi:"description"`
	// The ID of Image.
	ImageId string `pulumi:"imageId"`
	// The name of Image.
	ImageName string `pulumi:"imageName"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit bool `pulumi:"isSupportCloudInit"`
	// The name of Image operating system.
	OsName string `pulumi:"osName"`
	// The operating system type of Image.
	OsType string `pulumi:"osType"`
	// The platform of Image.
	Platform string `pulumi:"platform"`
	// The platform version of Image.
	PlatformVersion string `pulumi:"platformVersion"`
	// The share mode of Image.
	ShareStatus string `pulumi:"shareStatus"`
	// The size(GiB) of Image.
	Size int `pulumi:"size"`
	// A list of Image status, the value can be `available` or `creating` or `error`.
	Status string `pulumi:"status"`
	// Tags.
	Tags []ImagesImageTag `pulumi:"tags"`
	// The update time of Image.
	UpdatedAt string `pulumi:"updatedAt"`
	// The visibility of Image.
	Visibility string `pulumi:"visibility"`
}

// ImagesImageInput is an input type that accepts ImagesImageArgs and ImagesImageOutput values.
// You can construct a concrete instance of `ImagesImageInput` via:
//
//	ImagesImageArgs{...}
type ImagesImageInput interface {
	pulumi.Input

	ToImagesImageOutput() ImagesImageOutput
	ToImagesImageOutputWithContext(context.Context) ImagesImageOutput
}

type ImagesImageArgs struct {
	// The architecture of Image.
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// The boot mode of Image.
	BootMode pulumi.StringInput `pulumi:"bootMode"`
	// The create time of Image.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of Image.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of Image.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The name of Image.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit pulumi.BoolInput `pulumi:"isSupportCloudInit"`
	// The name of Image operating system.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The operating system type of Image.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The platform of Image.
	Platform pulumi.StringInput `pulumi:"platform"`
	// The platform version of Image.
	PlatformVersion pulumi.StringInput `pulumi:"platformVersion"`
	// The share mode of Image.
	ShareStatus pulumi.StringInput `pulumi:"shareStatus"`
	// The size(GiB) of Image.
	Size pulumi.IntInput `pulumi:"size"`
	// A list of Image status, the value can be `available` or `creating` or `error`.
	Status pulumi.StringInput `pulumi:"status"`
	// Tags.
	Tags ImagesImageTagArrayInput `pulumi:"tags"`
	// The update time of Image.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The visibility of Image.
	Visibility pulumi.StringInput `pulumi:"visibility"`
}

func (ImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImage)(nil)).Elem()
}

func (i ImagesImageArgs) ToImagesImageOutput() ImagesImageOutput {
	return i.ToImagesImageOutputWithContext(context.Background())
}

func (i ImagesImageArgs) ToImagesImageOutputWithContext(ctx context.Context) ImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageOutput)
}

// ImagesImageArrayInput is an input type that accepts ImagesImageArray and ImagesImageArrayOutput values.
// You can construct a concrete instance of `ImagesImageArrayInput` via:
//
//	ImagesImageArray{ ImagesImageArgs{...} }
type ImagesImageArrayInput interface {
	pulumi.Input

	ToImagesImageArrayOutput() ImagesImageArrayOutput
	ToImagesImageArrayOutputWithContext(context.Context) ImagesImageArrayOutput
}

type ImagesImageArray []ImagesImageInput

func (ImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImage)(nil)).Elem()
}

func (i ImagesImageArray) ToImagesImageArrayOutput() ImagesImageArrayOutput {
	return i.ToImagesImageArrayOutputWithContext(context.Background())
}

func (i ImagesImageArray) ToImagesImageArrayOutputWithContext(ctx context.Context) ImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageArrayOutput)
}

type ImagesImageOutput struct{ *pulumi.OutputState }

func (ImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImage)(nil)).Elem()
}

func (o ImagesImageOutput) ToImagesImageOutput() ImagesImageOutput {
	return o
}

func (o ImagesImageOutput) ToImagesImageOutputWithContext(ctx context.Context) ImagesImageOutput {
	return o
}

// The architecture of Image.
func (o ImagesImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Architecture }).(pulumi.StringOutput)
}

// The boot mode of Image.
func (o ImagesImageOutput) BootMode() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.BootMode }).(pulumi.StringOutput)
}

// The create time of Image.
func (o ImagesImageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of Image.
func (o ImagesImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of Image.
func (o ImagesImageOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.ImageId }).(pulumi.StringOutput)
}

// The name of Image.
func (o ImagesImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.ImageName }).(pulumi.StringOutput)
}

// Whether the Image support cloud-init.
func (o ImagesImageOutput) IsSupportCloudInit() pulumi.BoolOutput {
	return o.ApplyT(func(v ImagesImage) bool { return v.IsSupportCloudInit }).(pulumi.BoolOutput)
}

// The name of Image operating system.
func (o ImagesImageOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.OsName }).(pulumi.StringOutput)
}

// The operating system type of Image.
func (o ImagesImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.OsType }).(pulumi.StringOutput)
}

// The platform of Image.
func (o ImagesImageOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Platform }).(pulumi.StringOutput)
}

// The platform version of Image.
func (o ImagesImageOutput) PlatformVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.PlatformVersion }).(pulumi.StringOutput)
}

// The share mode of Image.
func (o ImagesImageOutput) ShareStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.ShareStatus }).(pulumi.StringOutput)
}

// The size(GiB) of Image.
func (o ImagesImageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v ImagesImage) int { return v.Size }).(pulumi.IntOutput)
}

// A list of Image status, the value can be `available` or `creating` or `error`.
func (o ImagesImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o ImagesImageOutput) Tags() ImagesImageTagArrayOutput {
	return o.ApplyT(func(v ImagesImage) []ImagesImageTag { return v.Tags }).(ImagesImageTagArrayOutput)
}

// The update time of Image.
func (o ImagesImageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The visibility of Image.
func (o ImagesImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImage) string { return v.Visibility }).(pulumi.StringOutput)
}

type ImagesImageArrayOutput struct{ *pulumi.OutputState }

func (ImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImage)(nil)).Elem()
}

func (o ImagesImageArrayOutput) ToImagesImageArrayOutput() ImagesImageArrayOutput {
	return o
}

func (o ImagesImageArrayOutput) ToImagesImageArrayOutputWithContext(ctx context.Context) ImagesImageArrayOutput {
	return o
}

func (o ImagesImageArrayOutput) Index(i pulumi.IntInput) ImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagesImage {
		return vs[0].([]ImagesImage)[vs[1].(int)]
	}).(ImagesImageOutput)
}

type ImagesImageTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ImagesImageTagInput is an input type that accepts ImagesImageTagArgs and ImagesImageTagOutput values.
// You can construct a concrete instance of `ImagesImageTagInput` via:
//
//	ImagesImageTagArgs{...}
type ImagesImageTagInput interface {
	pulumi.Input

	ToImagesImageTagOutput() ImagesImageTagOutput
	ToImagesImageTagOutputWithContext(context.Context) ImagesImageTagOutput
}

type ImagesImageTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ImagesImageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImageTag)(nil)).Elem()
}

func (i ImagesImageTagArgs) ToImagesImageTagOutput() ImagesImageTagOutput {
	return i.ToImagesImageTagOutputWithContext(context.Background())
}

func (i ImagesImageTagArgs) ToImagesImageTagOutputWithContext(ctx context.Context) ImagesImageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageTagOutput)
}

// ImagesImageTagArrayInput is an input type that accepts ImagesImageTagArray and ImagesImageTagArrayOutput values.
// You can construct a concrete instance of `ImagesImageTagArrayInput` via:
//
//	ImagesImageTagArray{ ImagesImageTagArgs{...} }
type ImagesImageTagArrayInput interface {
	pulumi.Input

	ToImagesImageTagArrayOutput() ImagesImageTagArrayOutput
	ToImagesImageTagArrayOutputWithContext(context.Context) ImagesImageTagArrayOutput
}

type ImagesImageTagArray []ImagesImageTagInput

func (ImagesImageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImageTag)(nil)).Elem()
}

func (i ImagesImageTagArray) ToImagesImageTagArrayOutput() ImagesImageTagArrayOutput {
	return i.ToImagesImageTagArrayOutputWithContext(context.Background())
}

func (i ImagesImageTagArray) ToImagesImageTagArrayOutputWithContext(ctx context.Context) ImagesImageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesImageTagArrayOutput)
}

type ImagesImageTagOutput struct{ *pulumi.OutputState }

func (ImagesImageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesImageTag)(nil)).Elem()
}

func (o ImagesImageTagOutput) ToImagesImageTagOutput() ImagesImageTagOutput {
	return o
}

func (o ImagesImageTagOutput) ToImagesImageTagOutputWithContext(ctx context.Context) ImagesImageTagOutput {
	return o
}

// The Key of Tags.
func (o ImagesImageTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImageTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ImagesImageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesImageTag) string { return v.Value }).(pulumi.StringOutput)
}

type ImagesImageTagArrayOutput struct{ *pulumi.OutputState }

func (ImagesImageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesImageTag)(nil)).Elem()
}

func (o ImagesImageTagArrayOutput) ToImagesImageTagArrayOutput() ImagesImageTagArrayOutput {
	return o
}

func (o ImagesImageTagArrayOutput) ToImagesImageTagArrayOutputWithContext(ctx context.Context) ImagesImageTagArrayOutput {
	return o
}

func (o ImagesImageTagArrayOutput) Index(i pulumi.IntInput) ImagesImageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagesImageTag {
		return vs[0].([]ImagesImageTag)[vs[1].(int)]
	}).(ImagesImageTagOutput)
}

type ImagesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ImagesTagInput is an input type that accepts ImagesTagArgs and ImagesTagOutput values.
// You can construct a concrete instance of `ImagesTagInput` via:
//
//	ImagesTagArgs{...}
type ImagesTagInput interface {
	pulumi.Input

	ToImagesTagOutput() ImagesTagOutput
	ToImagesTagOutputWithContext(context.Context) ImagesTagOutput
}

type ImagesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ImagesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesTag)(nil)).Elem()
}

func (i ImagesTagArgs) ToImagesTagOutput() ImagesTagOutput {
	return i.ToImagesTagOutputWithContext(context.Background())
}

func (i ImagesTagArgs) ToImagesTagOutputWithContext(ctx context.Context) ImagesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesTagOutput)
}

// ImagesTagArrayInput is an input type that accepts ImagesTagArray and ImagesTagArrayOutput values.
// You can construct a concrete instance of `ImagesTagArrayInput` via:
//
//	ImagesTagArray{ ImagesTagArgs{...} }
type ImagesTagArrayInput interface {
	pulumi.Input

	ToImagesTagArrayOutput() ImagesTagArrayOutput
	ToImagesTagArrayOutputWithContext(context.Context) ImagesTagArrayOutput
}

type ImagesTagArray []ImagesTagInput

func (ImagesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesTag)(nil)).Elem()
}

func (i ImagesTagArray) ToImagesTagArrayOutput() ImagesTagArrayOutput {
	return i.ToImagesTagArrayOutputWithContext(context.Background())
}

func (i ImagesTagArray) ToImagesTagArrayOutputWithContext(ctx context.Context) ImagesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImagesTagArrayOutput)
}

type ImagesTagOutput struct{ *pulumi.OutputState }

func (ImagesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesTag)(nil)).Elem()
}

func (o ImagesTagOutput) ToImagesTagOutput() ImagesTagOutput {
	return o
}

func (o ImagesTagOutput) ToImagesTagOutputWithContext(ctx context.Context) ImagesTagOutput {
	return o
}

// The Key of Tags.
func (o ImagesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ImagesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesTag) string { return v.Value }).(pulumi.StringOutput)
}

type ImagesTagArrayOutput struct{ *pulumi.OutputState }

func (ImagesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ImagesTag)(nil)).Elem()
}

func (o ImagesTagArrayOutput) ToImagesTagArrayOutput() ImagesTagArrayOutput {
	return o
}

func (o ImagesTagArrayOutput) ToImagesTagArrayOutputWithContext(ctx context.Context) ImagesTagArrayOutput {
	return o
}

func (o ImagesTagArrayOutput) Index(i pulumi.IntInput) ImagesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ImagesTag {
		return vs[0].([]ImagesTag)[vs[1].(int)]
	}).(ImagesTagOutput)
}

type InstanceCpuOptions struct {
	// The number of subnuma in socket, only support for ebm. `1` indicates disabling SNC/NPS function. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	NumaPerSocket *int `pulumi:"numaPerSocket"`
	// The per core of threads, only support for ebm. `1` indicates disabling hyper threading function.
	ThreadsPerCore *int `pulumi:"threadsPerCore"`
}

// InstanceCpuOptionsInput is an input type that accepts InstanceCpuOptionsArgs and InstanceCpuOptionsOutput values.
// You can construct a concrete instance of `InstanceCpuOptionsInput` via:
//
//	InstanceCpuOptionsArgs{...}
type InstanceCpuOptionsInput interface {
	pulumi.Input

	ToInstanceCpuOptionsOutput() InstanceCpuOptionsOutput
	ToInstanceCpuOptionsOutputWithContext(context.Context) InstanceCpuOptionsOutput
}

type InstanceCpuOptionsArgs struct {
	// The number of subnuma in socket, only support for ebm. `1` indicates disabling SNC/NPS function. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	NumaPerSocket pulumi.IntPtrInput `pulumi:"numaPerSocket"`
	// The per core of threads, only support for ebm. `1` indicates disabling hyper threading function.
	ThreadsPerCore pulumi.IntPtrInput `pulumi:"threadsPerCore"`
}

func (InstanceCpuOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCpuOptions)(nil)).Elem()
}

func (i InstanceCpuOptionsArgs) ToInstanceCpuOptionsOutput() InstanceCpuOptionsOutput {
	return i.ToInstanceCpuOptionsOutputWithContext(context.Background())
}

func (i InstanceCpuOptionsArgs) ToInstanceCpuOptionsOutputWithContext(ctx context.Context) InstanceCpuOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCpuOptionsOutput)
}

func (i InstanceCpuOptionsArgs) ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput {
	return i.ToInstanceCpuOptionsPtrOutputWithContext(context.Background())
}

func (i InstanceCpuOptionsArgs) ToInstanceCpuOptionsPtrOutputWithContext(ctx context.Context) InstanceCpuOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCpuOptionsOutput).ToInstanceCpuOptionsPtrOutputWithContext(ctx)
}

// InstanceCpuOptionsPtrInput is an input type that accepts InstanceCpuOptionsArgs, InstanceCpuOptionsPtr and InstanceCpuOptionsPtrOutput values.
// You can construct a concrete instance of `InstanceCpuOptionsPtrInput` via:
//
//	        InstanceCpuOptionsArgs{...}
//
//	or:
//
//	        nil
type InstanceCpuOptionsPtrInput interface {
	pulumi.Input

	ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput
	ToInstanceCpuOptionsPtrOutputWithContext(context.Context) InstanceCpuOptionsPtrOutput
}

type instanceCpuOptionsPtrType InstanceCpuOptionsArgs

func InstanceCpuOptionsPtr(v *InstanceCpuOptionsArgs) InstanceCpuOptionsPtrInput {
	return (*instanceCpuOptionsPtrType)(v)
}

func (*instanceCpuOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCpuOptions)(nil)).Elem()
}

func (i *instanceCpuOptionsPtrType) ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput {
	return i.ToInstanceCpuOptionsPtrOutputWithContext(context.Background())
}

func (i *instanceCpuOptionsPtrType) ToInstanceCpuOptionsPtrOutputWithContext(ctx context.Context) InstanceCpuOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCpuOptionsPtrOutput)
}

type InstanceCpuOptionsOutput struct{ *pulumi.OutputState }

func (InstanceCpuOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceCpuOptions)(nil)).Elem()
}

func (o InstanceCpuOptionsOutput) ToInstanceCpuOptionsOutput() InstanceCpuOptionsOutput {
	return o
}

func (o InstanceCpuOptionsOutput) ToInstanceCpuOptionsOutputWithContext(ctx context.Context) InstanceCpuOptionsOutput {
	return o
}

func (o InstanceCpuOptionsOutput) ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput {
	return o.ToInstanceCpuOptionsPtrOutputWithContext(context.Background())
}

func (o InstanceCpuOptionsOutput) ToInstanceCpuOptionsPtrOutputWithContext(ctx context.Context) InstanceCpuOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceCpuOptions) *InstanceCpuOptions {
		return &v
	}).(InstanceCpuOptionsPtrOutput)
}

// The number of subnuma in socket, only support for ebm. `1` indicates disabling SNC/NPS function. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o InstanceCpuOptionsOutput) NumaPerSocket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceCpuOptions) *int { return v.NumaPerSocket }).(pulumi.IntPtrOutput)
}

// The per core of threads, only support for ebm. `1` indicates disabling hyper threading function.
func (o InstanceCpuOptionsOutput) ThreadsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceCpuOptions) *int { return v.ThreadsPerCore }).(pulumi.IntPtrOutput)
}

type InstanceCpuOptionsPtrOutput struct{ *pulumi.OutputState }

func (InstanceCpuOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCpuOptions)(nil)).Elem()
}

func (o InstanceCpuOptionsPtrOutput) ToInstanceCpuOptionsPtrOutput() InstanceCpuOptionsPtrOutput {
	return o
}

func (o InstanceCpuOptionsPtrOutput) ToInstanceCpuOptionsPtrOutputWithContext(ctx context.Context) InstanceCpuOptionsPtrOutput {
	return o
}

func (o InstanceCpuOptionsPtrOutput) Elem() InstanceCpuOptionsOutput {
	return o.ApplyT(func(v *InstanceCpuOptions) InstanceCpuOptions {
		if v != nil {
			return *v
		}
		var ret InstanceCpuOptions
		return ret
	}).(InstanceCpuOptionsOutput)
}

// The number of subnuma in socket, only support for ebm. `1` indicates disabling SNC/NPS function. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o InstanceCpuOptionsPtrOutput) NumaPerSocket() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCpuOptions) *int {
		if v == nil {
			return nil
		}
		return v.NumaPerSocket
	}).(pulumi.IntPtrOutput)
}

// The per core of threads, only support for ebm. `1` indicates disabling hyper threading function.
func (o InstanceCpuOptionsPtrOutput) ThreadsPerCore() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceCpuOptions) *int {
		if v == nil {
			return nil
		}
		return v.ThreadsPerCore
	}).(pulumi.IntPtrOutput)
}

type InstanceDataVolume struct {
	// The delete with instance flag of volume.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// The size of volume. The value range of the data volume size is ESSD_PL0: 10~32768, ESSD_FlexPL: 10~32768, PTSSD: 20~8192.
	Size int `pulumi:"size"`
	// The type of volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
	VolumeType string `pulumi:"volumeType"`
}

// InstanceDataVolumeInput is an input type that accepts InstanceDataVolumeArgs and InstanceDataVolumeOutput values.
// You can construct a concrete instance of `InstanceDataVolumeInput` via:
//
//	InstanceDataVolumeArgs{...}
type InstanceDataVolumeInput interface {
	pulumi.Input

	ToInstanceDataVolumeOutput() InstanceDataVolumeOutput
	ToInstanceDataVolumeOutputWithContext(context.Context) InstanceDataVolumeOutput
}

type InstanceDataVolumeArgs struct {
	// The delete with instance flag of volume.
	DeleteWithInstance pulumi.BoolPtrInput `pulumi:"deleteWithInstance"`
	// The size of volume. The value range of the data volume size is ESSD_PL0: 10~32768, ESSD_FlexPL: 10~32768, PTSSD: 20~8192.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (InstanceDataVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataVolume)(nil)).Elem()
}

func (i InstanceDataVolumeArgs) ToInstanceDataVolumeOutput() InstanceDataVolumeOutput {
	return i.ToInstanceDataVolumeOutputWithContext(context.Background())
}

func (i InstanceDataVolumeArgs) ToInstanceDataVolumeOutputWithContext(ctx context.Context) InstanceDataVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataVolumeOutput)
}

// InstanceDataVolumeArrayInput is an input type that accepts InstanceDataVolumeArray and InstanceDataVolumeArrayOutput values.
// You can construct a concrete instance of `InstanceDataVolumeArrayInput` via:
//
//	InstanceDataVolumeArray{ InstanceDataVolumeArgs{...} }
type InstanceDataVolumeArrayInput interface {
	pulumi.Input

	ToInstanceDataVolumeArrayOutput() InstanceDataVolumeArrayOutput
	ToInstanceDataVolumeArrayOutputWithContext(context.Context) InstanceDataVolumeArrayOutput
}

type InstanceDataVolumeArray []InstanceDataVolumeInput

func (InstanceDataVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDataVolume)(nil)).Elem()
}

func (i InstanceDataVolumeArray) ToInstanceDataVolumeArrayOutput() InstanceDataVolumeArrayOutput {
	return i.ToInstanceDataVolumeArrayOutputWithContext(context.Background())
}

func (i InstanceDataVolumeArray) ToInstanceDataVolumeArrayOutputWithContext(ctx context.Context) InstanceDataVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceDataVolumeArrayOutput)
}

type InstanceDataVolumeOutput struct{ *pulumi.OutputState }

func (InstanceDataVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceDataVolume)(nil)).Elem()
}

func (o InstanceDataVolumeOutput) ToInstanceDataVolumeOutput() InstanceDataVolumeOutput {
	return o
}

func (o InstanceDataVolumeOutput) ToInstanceDataVolumeOutputWithContext(ctx context.Context) InstanceDataVolumeOutput {
	return o
}

// The delete with instance flag of volume.
func (o InstanceDataVolumeOutput) DeleteWithInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceDataVolume) *bool { return v.DeleteWithInstance }).(pulumi.BoolPtrOutput)
}

// The size of volume. The value range of the data volume size is ESSD_PL0: 10~32768, ESSD_FlexPL: 10~32768, PTSSD: 20~8192.
func (o InstanceDataVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceDataVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
func (o InstanceDataVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceDataVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstanceDataVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstanceDataVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceDataVolume)(nil)).Elem()
}

func (o InstanceDataVolumeArrayOutput) ToInstanceDataVolumeArrayOutput() InstanceDataVolumeArrayOutput {
	return o
}

func (o InstanceDataVolumeArrayOutput) ToInstanceDataVolumeArrayOutputWithContext(ctx context.Context) InstanceDataVolumeArrayOutput {
	return o
}

func (o InstanceDataVolumeArrayOutput) Index(i pulumi.IntInput) InstanceDataVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceDataVolume {
		return vs[0].([]InstanceDataVolume)[vs[1].(int)]
	}).(InstanceDataVolumeOutput)
}

type InstanceEipAddress struct {
	// The peek bandwidth of the EIP. The value range in 1~500 for PostPaidByBandwidth, and 1~200 for PostPaidByTraffic. Default is 1.
	BandwidthMbps *int `pulumi:"bandwidthMbps"`
	// The id of the bandwidth package, indicates that the public IP address will be added to the bandwidth package.
	BandwidthPackageId *string `pulumi:"bandwidthPackageId"`
	// The billing type of the EIP Address. Valid values: `PayByBandwidth`, `PayByTraffic`. Default is `PayByBandwidth`.
	ChargeType *string `pulumi:"chargeType"`
	// The ISP of the EIP. Valid values: `BGP`, `ChinaMobile`, `ChinaUnicom`, `ChinaTelecom`, `SingleLine_BGP`, `Static_BGP`.
	Isp *string `pulumi:"isp"`
}

// InstanceEipAddressInput is an input type that accepts InstanceEipAddressArgs and InstanceEipAddressOutput values.
// You can construct a concrete instance of `InstanceEipAddressInput` via:
//
//	InstanceEipAddressArgs{...}
type InstanceEipAddressInput interface {
	pulumi.Input

	ToInstanceEipAddressOutput() InstanceEipAddressOutput
	ToInstanceEipAddressOutputWithContext(context.Context) InstanceEipAddressOutput
}

type InstanceEipAddressArgs struct {
	// The peek bandwidth of the EIP. The value range in 1~500 for PostPaidByBandwidth, and 1~200 for PostPaidByTraffic. Default is 1.
	BandwidthMbps pulumi.IntPtrInput `pulumi:"bandwidthMbps"`
	// The id of the bandwidth package, indicates that the public IP address will be added to the bandwidth package.
	BandwidthPackageId pulumi.StringPtrInput `pulumi:"bandwidthPackageId"`
	// The billing type of the EIP Address. Valid values: `PayByBandwidth`, `PayByTraffic`. Default is `PayByBandwidth`.
	ChargeType pulumi.StringPtrInput `pulumi:"chargeType"`
	// The ISP of the EIP. Valid values: `BGP`, `ChinaMobile`, `ChinaUnicom`, `ChinaTelecom`, `SingleLine_BGP`, `Static_BGP`.
	Isp pulumi.StringPtrInput `pulumi:"isp"`
}

func (InstanceEipAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEipAddress)(nil)).Elem()
}

func (i InstanceEipAddressArgs) ToInstanceEipAddressOutput() InstanceEipAddressOutput {
	return i.ToInstanceEipAddressOutputWithContext(context.Background())
}

func (i InstanceEipAddressArgs) ToInstanceEipAddressOutputWithContext(ctx context.Context) InstanceEipAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEipAddressOutput)
}

func (i InstanceEipAddressArgs) ToInstanceEipAddressPtrOutput() InstanceEipAddressPtrOutput {
	return i.ToInstanceEipAddressPtrOutputWithContext(context.Background())
}

func (i InstanceEipAddressArgs) ToInstanceEipAddressPtrOutputWithContext(ctx context.Context) InstanceEipAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEipAddressOutput).ToInstanceEipAddressPtrOutputWithContext(ctx)
}

// InstanceEipAddressPtrInput is an input type that accepts InstanceEipAddressArgs, InstanceEipAddressPtr and InstanceEipAddressPtrOutput values.
// You can construct a concrete instance of `InstanceEipAddressPtrInput` via:
//
//	        InstanceEipAddressArgs{...}
//
//	or:
//
//	        nil
type InstanceEipAddressPtrInput interface {
	pulumi.Input

	ToInstanceEipAddressPtrOutput() InstanceEipAddressPtrOutput
	ToInstanceEipAddressPtrOutputWithContext(context.Context) InstanceEipAddressPtrOutput
}

type instanceEipAddressPtrType InstanceEipAddressArgs

func InstanceEipAddressPtr(v *InstanceEipAddressArgs) InstanceEipAddressPtrInput {
	return (*instanceEipAddressPtrType)(v)
}

func (*instanceEipAddressPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceEipAddress)(nil)).Elem()
}

func (i *instanceEipAddressPtrType) ToInstanceEipAddressPtrOutput() InstanceEipAddressPtrOutput {
	return i.ToInstanceEipAddressPtrOutputWithContext(context.Background())
}

func (i *instanceEipAddressPtrType) ToInstanceEipAddressPtrOutputWithContext(ctx context.Context) InstanceEipAddressPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEipAddressPtrOutput)
}

type InstanceEipAddressOutput struct{ *pulumi.OutputState }

func (InstanceEipAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEipAddress)(nil)).Elem()
}

func (o InstanceEipAddressOutput) ToInstanceEipAddressOutput() InstanceEipAddressOutput {
	return o
}

func (o InstanceEipAddressOutput) ToInstanceEipAddressOutputWithContext(ctx context.Context) InstanceEipAddressOutput {
	return o
}

func (o InstanceEipAddressOutput) ToInstanceEipAddressPtrOutput() InstanceEipAddressPtrOutput {
	return o.ToInstanceEipAddressPtrOutputWithContext(context.Background())
}

func (o InstanceEipAddressOutput) ToInstanceEipAddressPtrOutputWithContext(ctx context.Context) InstanceEipAddressPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceEipAddress) *InstanceEipAddress {
		return &v
	}).(InstanceEipAddressPtrOutput)
}

// The peek bandwidth of the EIP. The value range in 1~500 for PostPaidByBandwidth, and 1~200 for PostPaidByTraffic. Default is 1.
func (o InstanceEipAddressOutput) BandwidthMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceEipAddress) *int { return v.BandwidthMbps }).(pulumi.IntPtrOutput)
}

// The id of the bandwidth package, indicates that the public IP address will be added to the bandwidth package.
func (o InstanceEipAddressOutput) BandwidthPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEipAddress) *string { return v.BandwidthPackageId }).(pulumi.StringPtrOutput)
}

// The billing type of the EIP Address. Valid values: `PayByBandwidth`, `PayByTraffic`. Default is `PayByBandwidth`.
func (o InstanceEipAddressOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEipAddress) *string { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// The ISP of the EIP. Valid values: `BGP`, `ChinaMobile`, `ChinaUnicom`, `ChinaTelecom`, `SingleLine_BGP`, `Static_BGP`.
func (o InstanceEipAddressOutput) Isp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEipAddress) *string { return v.Isp }).(pulumi.StringPtrOutput)
}

type InstanceEipAddressPtrOutput struct{ *pulumi.OutputState }

func (InstanceEipAddressPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceEipAddress)(nil)).Elem()
}

func (o InstanceEipAddressPtrOutput) ToInstanceEipAddressPtrOutput() InstanceEipAddressPtrOutput {
	return o
}

func (o InstanceEipAddressPtrOutput) ToInstanceEipAddressPtrOutputWithContext(ctx context.Context) InstanceEipAddressPtrOutput {
	return o
}

func (o InstanceEipAddressPtrOutput) Elem() InstanceEipAddressOutput {
	return o.ApplyT(func(v *InstanceEipAddress) InstanceEipAddress {
		if v != nil {
			return *v
		}
		var ret InstanceEipAddress
		return ret
	}).(InstanceEipAddressOutput)
}

// The peek bandwidth of the EIP. The value range in 1~500 for PostPaidByBandwidth, and 1~200 for PostPaidByTraffic. Default is 1.
func (o InstanceEipAddressPtrOutput) BandwidthMbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceEipAddress) *int {
		if v == nil {
			return nil
		}
		return v.BandwidthMbps
	}).(pulumi.IntPtrOutput)
}

// The id of the bandwidth package, indicates that the public IP address will be added to the bandwidth package.
func (o InstanceEipAddressPtrOutput) BandwidthPackageId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceEipAddress) *string {
		if v == nil {
			return nil
		}
		return v.BandwidthPackageId
	}).(pulumi.StringPtrOutput)
}

// The billing type of the EIP Address. Valid values: `PayByBandwidth`, `PayByTraffic`. Default is `PayByBandwidth`.
func (o InstanceEipAddressPtrOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceEipAddress) *string {
		if v == nil {
			return nil
		}
		return v.ChargeType
	}).(pulumi.StringPtrOutput)
}

// The ISP of the EIP. Valid values: `BGP`, `ChinaMobile`, `ChinaUnicom`, `ChinaTelecom`, `SingleLine_BGP`, `Static_BGP`.
func (o InstanceEipAddressPtrOutput) Isp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceEipAddress) *string {
		if v == nil {
			return nil
		}
		return v.Isp
	}).(pulumi.StringPtrOutput)
}

type InstanceGpuDevice struct {
	// The Count of GPU device.
	Count *int `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize *int `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize *int `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName *string `pulumi:"productName"`
}

// InstanceGpuDeviceInput is an input type that accepts InstanceGpuDeviceArgs and InstanceGpuDeviceOutput values.
// You can construct a concrete instance of `InstanceGpuDeviceInput` via:
//
//	InstanceGpuDeviceArgs{...}
type InstanceGpuDeviceInput interface {
	pulumi.Input

	ToInstanceGpuDeviceOutput() InstanceGpuDeviceOutput
	ToInstanceGpuDeviceOutputWithContext(context.Context) InstanceGpuDeviceOutput
}

type InstanceGpuDeviceArgs struct {
	// The Count of GPU device.
	Count pulumi.IntPtrInput `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize pulumi.IntPtrInput `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntPtrInput `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName pulumi.StringPtrInput `pulumi:"productName"`
}

func (InstanceGpuDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGpuDevice)(nil)).Elem()
}

func (i InstanceGpuDeviceArgs) ToInstanceGpuDeviceOutput() InstanceGpuDeviceOutput {
	return i.ToInstanceGpuDeviceOutputWithContext(context.Background())
}

func (i InstanceGpuDeviceArgs) ToInstanceGpuDeviceOutputWithContext(ctx context.Context) InstanceGpuDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGpuDeviceOutput)
}

// InstanceGpuDeviceArrayInput is an input type that accepts InstanceGpuDeviceArray and InstanceGpuDeviceArrayOutput values.
// You can construct a concrete instance of `InstanceGpuDeviceArrayInput` via:
//
//	InstanceGpuDeviceArray{ InstanceGpuDeviceArgs{...} }
type InstanceGpuDeviceArrayInput interface {
	pulumi.Input

	ToInstanceGpuDeviceArrayOutput() InstanceGpuDeviceArrayOutput
	ToInstanceGpuDeviceArrayOutputWithContext(context.Context) InstanceGpuDeviceArrayOutput
}

type InstanceGpuDeviceArray []InstanceGpuDeviceInput

func (InstanceGpuDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGpuDevice)(nil)).Elem()
}

func (i InstanceGpuDeviceArray) ToInstanceGpuDeviceArrayOutput() InstanceGpuDeviceArrayOutput {
	return i.ToInstanceGpuDeviceArrayOutputWithContext(context.Background())
}

func (i InstanceGpuDeviceArray) ToInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) InstanceGpuDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceGpuDeviceArrayOutput)
}

type InstanceGpuDeviceOutput struct{ *pulumi.OutputState }

func (InstanceGpuDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceGpuDevice)(nil)).Elem()
}

func (o InstanceGpuDeviceOutput) ToInstanceGpuDeviceOutput() InstanceGpuDeviceOutput {
	return o
}

func (o InstanceGpuDeviceOutput) ToInstanceGpuDeviceOutputWithContext(ctx context.Context) InstanceGpuDeviceOutput {
	return o
}

// The Count of GPU device.
func (o InstanceGpuDeviceOutput) Count() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGpuDevice) *int { return v.Count }).(pulumi.IntPtrOutput)
}

// The Encrypted Memory Size of GPU device.
func (o InstanceGpuDeviceOutput) EncryptedMemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGpuDevice) *int { return v.EncryptedMemorySize }).(pulumi.IntPtrOutput)
}

// The memory size of ECS instance.
func (o InstanceGpuDeviceOutput) MemorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceGpuDevice) *int { return v.MemorySize }).(pulumi.IntPtrOutput)
}

// The Product Name of GPU device.
func (o InstanceGpuDeviceOutput) ProductName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceGpuDevice) *string { return v.ProductName }).(pulumi.StringPtrOutput)
}

type InstanceGpuDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstanceGpuDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceGpuDevice)(nil)).Elem()
}

func (o InstanceGpuDeviceArrayOutput) ToInstanceGpuDeviceArrayOutput() InstanceGpuDeviceArrayOutput {
	return o
}

func (o InstanceGpuDeviceArrayOutput) ToInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) InstanceGpuDeviceArrayOutput {
	return o
}

func (o InstanceGpuDeviceArrayOutput) Index(i pulumi.IntInput) InstanceGpuDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceGpuDevice {
		return vs[0].([]InstanceGpuDevice)[vs[1].(int)]
	}).(InstanceGpuDeviceOutput)
}

type InstanceSecondaryNetworkInterface struct {
	// The private ip address of secondary networkInterface.
	PrimaryIpAddress *string `pulumi:"primaryIpAddress"`
	// The security group ID set of secondary networkInterface.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The subnet ID of secondary networkInterface.
	SubnetId string `pulumi:"subnetId"`
}

// InstanceSecondaryNetworkInterfaceInput is an input type that accepts InstanceSecondaryNetworkInterfaceArgs and InstanceSecondaryNetworkInterfaceOutput values.
// You can construct a concrete instance of `InstanceSecondaryNetworkInterfaceInput` via:
//
//	InstanceSecondaryNetworkInterfaceArgs{...}
type InstanceSecondaryNetworkInterfaceInput interface {
	pulumi.Input

	ToInstanceSecondaryNetworkInterfaceOutput() InstanceSecondaryNetworkInterfaceOutput
	ToInstanceSecondaryNetworkInterfaceOutputWithContext(context.Context) InstanceSecondaryNetworkInterfaceOutput
}

type InstanceSecondaryNetworkInterfaceArgs struct {
	// The private ip address of secondary networkInterface.
	PrimaryIpAddress pulumi.StringPtrInput `pulumi:"primaryIpAddress"`
	// The security group ID set of secondary networkInterface.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The subnet ID of secondary networkInterface.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (InstanceSecondaryNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (i InstanceSecondaryNetworkInterfaceArgs) ToInstanceSecondaryNetworkInterfaceOutput() InstanceSecondaryNetworkInterfaceOutput {
	return i.ToInstanceSecondaryNetworkInterfaceOutputWithContext(context.Background())
}

func (i InstanceSecondaryNetworkInterfaceArgs) ToInstanceSecondaryNetworkInterfaceOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecondaryNetworkInterfaceOutput)
}

// InstanceSecondaryNetworkInterfaceArrayInput is an input type that accepts InstanceSecondaryNetworkInterfaceArray and InstanceSecondaryNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `InstanceSecondaryNetworkInterfaceArrayInput` via:
//
//	InstanceSecondaryNetworkInterfaceArray{ InstanceSecondaryNetworkInterfaceArgs{...} }
type InstanceSecondaryNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToInstanceSecondaryNetworkInterfaceArrayOutput() InstanceSecondaryNetworkInterfaceArrayOutput
	ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(context.Context) InstanceSecondaryNetworkInterfaceArrayOutput
}

type InstanceSecondaryNetworkInterfaceArray []InstanceSecondaryNetworkInterfaceInput

func (InstanceSecondaryNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (i InstanceSecondaryNetworkInterfaceArray) ToInstanceSecondaryNetworkInterfaceArrayOutput() InstanceSecondaryNetworkInterfaceArrayOutput {
	return i.ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i InstanceSecondaryNetworkInterfaceArray) ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSecondaryNetworkInterfaceArrayOutput)
}

type InstanceSecondaryNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (InstanceSecondaryNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (o InstanceSecondaryNetworkInterfaceOutput) ToInstanceSecondaryNetworkInterfaceOutput() InstanceSecondaryNetworkInterfaceOutput {
	return o
}

func (o InstanceSecondaryNetworkInterfaceOutput) ToInstanceSecondaryNetworkInterfaceOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceOutput {
	return o
}

// The private ip address of secondary networkInterface.
func (o InstanceSecondaryNetworkInterfaceOutput) PrimaryIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceSecondaryNetworkInterface) *string { return v.PrimaryIpAddress }).(pulumi.StringPtrOutput)
}

// The security group ID set of secondary networkInterface.
func (o InstanceSecondaryNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceSecondaryNetworkInterface) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The subnet ID of secondary networkInterface.
func (o InstanceSecondaryNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSecondaryNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

type InstanceSecondaryNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (InstanceSecondaryNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSecondaryNetworkInterface)(nil)).Elem()
}

func (o InstanceSecondaryNetworkInterfaceArrayOutput) ToInstanceSecondaryNetworkInterfaceArrayOutput() InstanceSecondaryNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceSecondaryNetworkInterfaceArrayOutput) ToInstanceSecondaryNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstanceSecondaryNetworkInterfaceArrayOutput {
	return o
}

func (o InstanceSecondaryNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) InstanceSecondaryNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSecondaryNetworkInterface {
		return vs[0].([]InstanceSecondaryNetworkInterface)[vs[1].(int)]
	}).(InstanceSecondaryNetworkInterfaceOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstanceTypesInstanceType struct {
	// The CPU benchmark performance that can be provided steadily by on-demand instances is determined by the instance type.
	BaselineCredit int `pulumi:"baselineCredit"`
	// The GPU device info of Instance.
	Gpus []InstanceTypesInstanceTypeGpus `pulumi:"gpus"`
	// The CPU credits obtained at once when creating a on-demand performance instance are fixed at 30 credits per vCPU.
	InitialCredit int `pulumi:"initialCredit"`
	// The instance type family.
	InstanceTypeFamily string `pulumi:"instanceTypeFamily"`
	// The id of the instance type.
	InstanceTypeId string `pulumi:"instanceTypeId"`
	// Local disk configuration information corresponding to instance specifications.
	LocalVolumes []InstanceTypesInstanceTypeLocalVolume `pulumi:"localVolumes"`
	// Memory information of instance specifications.
	Memories []InstanceTypesInstanceTypeMemory `pulumi:"memories"`
	// Network information of instance specifications.
	Networks []InstanceTypesInstanceTypeNetwork `pulumi:"networks"`
	// CPU information of instance specifications.
	Processors []InstanceTypesInstanceTypeProcessor `pulumi:"processors"`
	// RDMA Specification Information.
	Rdmas []InstanceTypesInstanceTypeRdma `pulumi:"rdmas"`
	// Cloud disk information for instance specifications.
	Volumes []InstanceTypesInstanceTypeVolume `pulumi:"volumes"`
}

// InstanceTypesInstanceTypeInput is an input type that accepts InstanceTypesInstanceTypeArgs and InstanceTypesInstanceTypeOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeInput` via:
//
//	InstanceTypesInstanceTypeArgs{...}
type InstanceTypesInstanceTypeInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeOutput() InstanceTypesInstanceTypeOutput
	ToInstanceTypesInstanceTypeOutputWithContext(context.Context) InstanceTypesInstanceTypeOutput
}

type InstanceTypesInstanceTypeArgs struct {
	// The CPU benchmark performance that can be provided steadily by on-demand instances is determined by the instance type.
	BaselineCredit pulumi.IntInput `pulumi:"baselineCredit"`
	// The GPU device info of Instance.
	Gpus InstanceTypesInstanceTypeGpusArrayInput `pulumi:"gpus"`
	// The CPU credits obtained at once when creating a on-demand performance instance are fixed at 30 credits per vCPU.
	InitialCredit pulumi.IntInput `pulumi:"initialCredit"`
	// The instance type family.
	InstanceTypeFamily pulumi.StringInput `pulumi:"instanceTypeFamily"`
	// The id of the instance type.
	InstanceTypeId pulumi.StringInput `pulumi:"instanceTypeId"`
	// Local disk configuration information corresponding to instance specifications.
	LocalVolumes InstanceTypesInstanceTypeLocalVolumeArrayInput `pulumi:"localVolumes"`
	// Memory information of instance specifications.
	Memories InstanceTypesInstanceTypeMemoryArrayInput `pulumi:"memories"`
	// Network information of instance specifications.
	Networks InstanceTypesInstanceTypeNetworkArrayInput `pulumi:"networks"`
	// CPU information of instance specifications.
	Processors InstanceTypesInstanceTypeProcessorArrayInput `pulumi:"processors"`
	// RDMA Specification Information.
	Rdmas InstanceTypesInstanceTypeRdmaArrayInput `pulumi:"rdmas"`
	// Cloud disk information for instance specifications.
	Volumes InstanceTypesInstanceTypeVolumeArrayInput `pulumi:"volumes"`
}

func (InstanceTypesInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceType)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeArgs) ToInstanceTypesInstanceTypeOutput() InstanceTypesInstanceTypeOutput {
	return i.ToInstanceTypesInstanceTypeOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeArgs) ToInstanceTypesInstanceTypeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeOutput)
}

// InstanceTypesInstanceTypeArrayInput is an input type that accepts InstanceTypesInstanceTypeArray and InstanceTypesInstanceTypeArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeArrayInput` via:
//
//	InstanceTypesInstanceTypeArray{ InstanceTypesInstanceTypeArgs{...} }
type InstanceTypesInstanceTypeArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeArrayOutput() InstanceTypesInstanceTypeArrayOutput
	ToInstanceTypesInstanceTypeArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeArrayOutput
}

type InstanceTypesInstanceTypeArray []InstanceTypesInstanceTypeInput

func (InstanceTypesInstanceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceType)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeArray) ToInstanceTypesInstanceTypeArrayOutput() InstanceTypesInstanceTypeArrayOutput {
	return i.ToInstanceTypesInstanceTypeArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeArray) ToInstanceTypesInstanceTypeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeArrayOutput)
}

type InstanceTypesInstanceTypeOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceType)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeOutput) ToInstanceTypesInstanceTypeOutput() InstanceTypesInstanceTypeOutput {
	return o
}

func (o InstanceTypesInstanceTypeOutput) ToInstanceTypesInstanceTypeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeOutput {
	return o
}

// The CPU benchmark performance that can be provided steadily by on-demand instances is determined by the instance type.
func (o InstanceTypesInstanceTypeOutput) BaselineCredit() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) int { return v.BaselineCredit }).(pulumi.IntOutput)
}

// The GPU device info of Instance.
func (o InstanceTypesInstanceTypeOutput) Gpus() InstanceTypesInstanceTypeGpusArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeGpus { return v.Gpus }).(InstanceTypesInstanceTypeGpusArrayOutput)
}

// The CPU credits obtained at once when creating a on-demand performance instance are fixed at 30 credits per vCPU.
func (o InstanceTypesInstanceTypeOutput) InitialCredit() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) int { return v.InitialCredit }).(pulumi.IntOutput)
}

// The instance type family.
func (o InstanceTypesInstanceTypeOutput) InstanceTypeFamily() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) string { return v.InstanceTypeFamily }).(pulumi.StringOutput)
}

// The id of the instance type.
func (o InstanceTypesInstanceTypeOutput) InstanceTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) string { return v.InstanceTypeId }).(pulumi.StringOutput)
}

// Local disk configuration information corresponding to instance specifications.
func (o InstanceTypesInstanceTypeOutput) LocalVolumes() InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeLocalVolume { return v.LocalVolumes }).(InstanceTypesInstanceTypeLocalVolumeArrayOutput)
}

// Memory information of instance specifications.
func (o InstanceTypesInstanceTypeOutput) Memories() InstanceTypesInstanceTypeMemoryArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeMemory { return v.Memories }).(InstanceTypesInstanceTypeMemoryArrayOutput)
}

// Network information of instance specifications.
func (o InstanceTypesInstanceTypeOutput) Networks() InstanceTypesInstanceTypeNetworkArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeNetwork { return v.Networks }).(InstanceTypesInstanceTypeNetworkArrayOutput)
}

// CPU information of instance specifications.
func (o InstanceTypesInstanceTypeOutput) Processors() InstanceTypesInstanceTypeProcessorArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeProcessor { return v.Processors }).(InstanceTypesInstanceTypeProcessorArrayOutput)
}

// RDMA Specification Information.
func (o InstanceTypesInstanceTypeOutput) Rdmas() InstanceTypesInstanceTypeRdmaArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeRdma { return v.Rdmas }).(InstanceTypesInstanceTypeRdmaArrayOutput)
}

// Cloud disk information for instance specifications.
func (o InstanceTypesInstanceTypeOutput) Volumes() InstanceTypesInstanceTypeVolumeArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceType) []InstanceTypesInstanceTypeVolume { return v.Volumes }).(InstanceTypesInstanceTypeVolumeArrayOutput)
}

type InstanceTypesInstanceTypeArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceType)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeArrayOutput) ToInstanceTypesInstanceTypeArrayOutput() InstanceTypesInstanceTypeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeArrayOutput) ToInstanceTypesInstanceTypeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceType {
		return vs[0].([]InstanceTypesInstanceType)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeOutput)
}

type InstanceTypesInstanceTypeGpus struct {
	// GPU device information list.
	GpuDevices []InstanceTypesInstanceTypeGpusGpuDevice `pulumi:"gpuDevices"`
}

// InstanceTypesInstanceTypeGpusInput is an input type that accepts InstanceTypesInstanceTypeGpusArgs and InstanceTypesInstanceTypeGpusOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusInput` via:
//
//	InstanceTypesInstanceTypeGpusArgs{...}
type InstanceTypesInstanceTypeGpusInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusOutput() InstanceTypesInstanceTypeGpusOutput
	ToInstanceTypesInstanceTypeGpusOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusOutput
}

type InstanceTypesInstanceTypeGpusArgs struct {
	// GPU device information list.
	GpuDevices InstanceTypesInstanceTypeGpusGpuDeviceArrayInput `pulumi:"gpuDevices"`
}

func (InstanceTypesInstanceTypeGpusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusArgs) ToInstanceTypesInstanceTypeGpusOutput() InstanceTypesInstanceTypeGpusOutput {
	return i.ToInstanceTypesInstanceTypeGpusOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusArgs) ToInstanceTypesInstanceTypeGpusOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusOutput)
}

// InstanceTypesInstanceTypeGpusArrayInput is an input type that accepts InstanceTypesInstanceTypeGpusArray and InstanceTypesInstanceTypeGpusArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusArrayInput` via:
//
//	InstanceTypesInstanceTypeGpusArray{ InstanceTypesInstanceTypeGpusArgs{...} }
type InstanceTypesInstanceTypeGpusArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusArrayOutput() InstanceTypesInstanceTypeGpusArrayOutput
	ToInstanceTypesInstanceTypeGpusArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusArrayOutput
}

type InstanceTypesInstanceTypeGpusArray []InstanceTypesInstanceTypeGpusInput

func (InstanceTypesInstanceTypeGpusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusArray) ToInstanceTypesInstanceTypeGpusArrayOutput() InstanceTypesInstanceTypeGpusArrayOutput {
	return i.ToInstanceTypesInstanceTypeGpusArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusArray) ToInstanceTypesInstanceTypeGpusArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusArrayOutput)
}

type InstanceTypesInstanceTypeGpusOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusOutput) ToInstanceTypesInstanceTypeGpusOutput() InstanceTypesInstanceTypeGpusOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusOutput) ToInstanceTypesInstanceTypeGpusOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusOutput {
	return o
}

// GPU device information list.
func (o InstanceTypesInstanceTypeGpusOutput) GpuDevices() InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpus) []InstanceTypesInstanceTypeGpusGpuDevice { return v.GpuDevices }).(InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput)
}

type InstanceTypesInstanceTypeGpusArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusArrayOutput) ToInstanceTypesInstanceTypeGpusArrayOutput() InstanceTypesInstanceTypeGpusArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusArrayOutput) ToInstanceTypesInstanceTypeGpusArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeGpusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeGpus {
		return vs[0].([]InstanceTypesInstanceTypeGpus)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeGpusOutput)
}

type InstanceTypesInstanceTypeGpusGpuDevice struct {
	// The number of local disks mounted on the instance.
	Count int `pulumi:"count"`
	// Memory information of instance specifications.
	Memories []InstanceTypesInstanceTypeGpusGpuDeviceMemory `pulumi:"memories"`
	// The Product Name of GPU device.
	ProductName string `pulumi:"productName"`
}

// InstanceTypesInstanceTypeGpusGpuDeviceInput is an input type that accepts InstanceTypesInstanceTypeGpusGpuDeviceArgs and InstanceTypesInstanceTypeGpusGpuDeviceOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusGpuDeviceInput` via:
//
//	InstanceTypesInstanceTypeGpusGpuDeviceArgs{...}
type InstanceTypesInstanceTypeGpusGpuDeviceInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusGpuDeviceOutput() InstanceTypesInstanceTypeGpusGpuDeviceOutput
	ToInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusGpuDeviceOutput
}

type InstanceTypesInstanceTypeGpusGpuDeviceArgs struct {
	// The number of local disks mounted on the instance.
	Count pulumi.IntInput `pulumi:"count"`
	// Memory information of instance specifications.
	Memories InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput `pulumi:"memories"`
	// The Product Name of GPU device.
	ProductName pulumi.StringInput `pulumi:"productName"`
}

func (InstanceTypesInstanceTypeGpusGpuDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceArgs) ToInstanceTypesInstanceTypeGpusGpuDeviceOutput() InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return i.ToInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceArgs) ToInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusGpuDeviceOutput)
}

// InstanceTypesInstanceTypeGpusGpuDeviceArrayInput is an input type that accepts InstanceTypesInstanceTypeGpusGpuDeviceArray and InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusGpuDeviceArrayInput` via:
//
//	InstanceTypesInstanceTypeGpusGpuDeviceArray{ InstanceTypesInstanceTypeGpusGpuDeviceArgs{...} }
type InstanceTypesInstanceTypeGpusGpuDeviceArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput
	ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput
}

type InstanceTypesInstanceTypeGpusGpuDeviceArray []InstanceTypesInstanceTypeGpusGpuDeviceInput

func (InstanceTypesInstanceTypeGpusGpuDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceArray) ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return i.ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceArray) ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusGpuDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceOutput() InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return o
}

// The number of local disks mounted on the instance.
func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDevice) int { return v.Count }).(pulumi.IntOutput)
}

// Memory information of instance specifications.
func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) Memories() InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDevice) []InstanceTypesInstanceTypeGpusGpuDeviceMemory {
		return v.Memories
	}).(InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput)
}

// The Product Name of GPU device.
func (o InstanceTypesInstanceTypeGpusGpuDeviceOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDevice) string { return v.ProductName }).(pulumi.StringOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeGpusGpuDevice {
		return vs[0].([]InstanceTypesInstanceTypeGpusGpuDevice)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeGpusGpuDeviceOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemory struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize int `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size int `pulumi:"size"`
}

// InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput is an input type that accepts InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs and InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput` via:
//
//	InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs{...}
type InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput
	ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize pulumi.IntInput `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size pulumi.IntInput `pulumi:"size"`
}

func (InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return i.ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput)
}

// InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput is an input type that accepts InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray and InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput` via:
//
//	InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray{ InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs{...} }
type InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput
	ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray []InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput

func (InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return i.ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return o
}

// The Encrypted Memory Size of GPU device.
func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) EncryptedSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDeviceMemory) int { return v.EncryptedSize }).(pulumi.IntOutput)
}

// Memory size, unit: MiB.
func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeGpusGpuDeviceMemory) int { return v.Size }).(pulumi.IntOutput)
}

type InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput() InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) ToInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeGpusGpuDeviceMemory {
		return vs[0].([]InstanceTypesInstanceTypeGpusGpuDeviceMemory)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput)
}

type InstanceTypesInstanceTypeLocalVolume struct {
	// The number of local disks mounted on the instance.
	Count int `pulumi:"count"`
	// Memory size, unit: MiB.
	Size int `pulumi:"size"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// InstanceTypesInstanceTypeLocalVolumeInput is an input type that accepts InstanceTypesInstanceTypeLocalVolumeArgs and InstanceTypesInstanceTypeLocalVolumeOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeLocalVolumeInput` via:
//
//	InstanceTypesInstanceTypeLocalVolumeArgs{...}
type InstanceTypesInstanceTypeLocalVolumeInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeLocalVolumeOutput() InstanceTypesInstanceTypeLocalVolumeOutput
	ToInstanceTypesInstanceTypeLocalVolumeOutputWithContext(context.Context) InstanceTypesInstanceTypeLocalVolumeOutput
}

type InstanceTypesInstanceTypeLocalVolumeArgs struct {
	// The number of local disks mounted on the instance.
	Count pulumi.IntInput `pulumi:"count"`
	// Memory size, unit: MiB.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (InstanceTypesInstanceTypeLocalVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeLocalVolumeArgs) ToInstanceTypesInstanceTypeLocalVolumeOutput() InstanceTypesInstanceTypeLocalVolumeOutput {
	return i.ToInstanceTypesInstanceTypeLocalVolumeOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeLocalVolumeArgs) ToInstanceTypesInstanceTypeLocalVolumeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeLocalVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeLocalVolumeOutput)
}

// InstanceTypesInstanceTypeLocalVolumeArrayInput is an input type that accepts InstanceTypesInstanceTypeLocalVolumeArray and InstanceTypesInstanceTypeLocalVolumeArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeLocalVolumeArrayInput` via:
//
//	InstanceTypesInstanceTypeLocalVolumeArray{ InstanceTypesInstanceTypeLocalVolumeArgs{...} }
type InstanceTypesInstanceTypeLocalVolumeArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeLocalVolumeArrayOutput() InstanceTypesInstanceTypeLocalVolumeArrayOutput
	ToInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeLocalVolumeArrayOutput
}

type InstanceTypesInstanceTypeLocalVolumeArray []InstanceTypesInstanceTypeLocalVolumeInput

func (InstanceTypesInstanceTypeLocalVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeLocalVolumeArray) ToInstanceTypesInstanceTypeLocalVolumeArrayOutput() InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return i.ToInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeLocalVolumeArray) ToInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeLocalVolumeArrayOutput)
}

type InstanceTypesInstanceTypeLocalVolumeOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeLocalVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeLocalVolumeOutput) ToInstanceTypesInstanceTypeLocalVolumeOutput() InstanceTypesInstanceTypeLocalVolumeOutput {
	return o
}

func (o InstanceTypesInstanceTypeLocalVolumeOutput) ToInstanceTypesInstanceTypeLocalVolumeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeLocalVolumeOutput {
	return o
}

// The number of local disks mounted on the instance.
func (o InstanceTypesInstanceTypeLocalVolumeOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeLocalVolume) int { return v.Count }).(pulumi.IntOutput)
}

// Memory size, unit: MiB.
func (o InstanceTypesInstanceTypeLocalVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeLocalVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume.
func (o InstanceTypesInstanceTypeLocalVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeLocalVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstanceTypesInstanceTypeLocalVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeLocalVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeLocalVolumeArrayOutput) ToInstanceTypesInstanceTypeLocalVolumeArrayOutput() InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeLocalVolumeArrayOutput) ToInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeLocalVolumeArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeLocalVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeLocalVolume {
		return vs[0].([]InstanceTypesInstanceTypeLocalVolume)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeLocalVolumeOutput)
}

type InstanceTypesInstanceTypeMemory struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize int `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size int `pulumi:"size"`
}

// InstanceTypesInstanceTypeMemoryInput is an input type that accepts InstanceTypesInstanceTypeMemoryArgs and InstanceTypesInstanceTypeMemoryOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeMemoryInput` via:
//
//	InstanceTypesInstanceTypeMemoryArgs{...}
type InstanceTypesInstanceTypeMemoryInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeMemoryOutput() InstanceTypesInstanceTypeMemoryOutput
	ToInstanceTypesInstanceTypeMemoryOutputWithContext(context.Context) InstanceTypesInstanceTypeMemoryOutput
}

type InstanceTypesInstanceTypeMemoryArgs struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize pulumi.IntInput `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size pulumi.IntInput `pulumi:"size"`
}

func (InstanceTypesInstanceTypeMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeMemoryArgs) ToInstanceTypesInstanceTypeMemoryOutput() InstanceTypesInstanceTypeMemoryOutput {
	return i.ToInstanceTypesInstanceTypeMemoryOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeMemoryArgs) ToInstanceTypesInstanceTypeMemoryOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeMemoryOutput)
}

// InstanceTypesInstanceTypeMemoryArrayInput is an input type that accepts InstanceTypesInstanceTypeMemoryArray and InstanceTypesInstanceTypeMemoryArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeMemoryArrayInput` via:
//
//	InstanceTypesInstanceTypeMemoryArray{ InstanceTypesInstanceTypeMemoryArgs{...} }
type InstanceTypesInstanceTypeMemoryArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeMemoryArrayOutput() InstanceTypesInstanceTypeMemoryArrayOutput
	ToInstanceTypesInstanceTypeMemoryArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeMemoryArrayOutput
}

type InstanceTypesInstanceTypeMemoryArray []InstanceTypesInstanceTypeMemoryInput

func (InstanceTypesInstanceTypeMemoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeMemoryArray) ToInstanceTypesInstanceTypeMemoryArrayOutput() InstanceTypesInstanceTypeMemoryArrayOutput {
	return i.ToInstanceTypesInstanceTypeMemoryArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeMemoryArray) ToInstanceTypesInstanceTypeMemoryArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeMemoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeMemoryArrayOutput)
}

type InstanceTypesInstanceTypeMemoryOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeMemoryOutput) ToInstanceTypesInstanceTypeMemoryOutput() InstanceTypesInstanceTypeMemoryOutput {
	return o
}

func (o InstanceTypesInstanceTypeMemoryOutput) ToInstanceTypesInstanceTypeMemoryOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeMemoryOutput {
	return o
}

// The Encrypted Memory Size of GPU device.
func (o InstanceTypesInstanceTypeMemoryOutput) EncryptedSize() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeMemory) int { return v.EncryptedSize }).(pulumi.IntOutput)
}

// Memory size, unit: MiB.
func (o InstanceTypesInstanceTypeMemoryOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeMemory) int { return v.Size }).(pulumi.IntOutput)
}

type InstanceTypesInstanceTypeMemoryArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeMemoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeMemoryArrayOutput) ToInstanceTypesInstanceTypeMemoryArrayOutput() InstanceTypesInstanceTypeMemoryArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeMemoryArrayOutput) ToInstanceTypesInstanceTypeMemoryArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeMemoryArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeMemoryArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeMemoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeMemory {
		return vs[0].([]InstanceTypesInstanceTypeMemory)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeMemoryOutput)
}

type InstanceTypesInstanceTypeNetwork struct {
	// Network benchmark bandwidth capacity (out/in), unit: Mbps.
	BaselineBandwidthMbps int `pulumi:"baselineBandwidthMbps"`
	// Peak network bandwidth capacity (out/in), unit: Mbps.
	MaximumBandwidthMbps int `pulumi:"maximumBandwidthMbps"`
	// Maximum number of elastic network interfaces supported for attachment.
	MaximumNetworkInterfaces int `pulumi:"maximumNetworkInterfaces"`
	// Maximum number of IPv4 addresses for a single elastic network interface.
	MaximumPrivateIpv4AddressesPerNetworkInterface int `pulumi:"maximumPrivateIpv4AddressesPerNetworkInterface"`
	// Maximum queue number for a single elastic network interface, including the queue number supported by the primary network interface and the auxiliary network interface.
	MaximumQueuesPerNetworkInterface int `pulumi:"maximumQueuesPerNetworkInterface"`
	// Network packet sending and receiving capacity (in+out), unit: Kpps.
	MaximumThroughputKpps int `pulumi:"maximumThroughputKpps"`
}

// InstanceTypesInstanceTypeNetworkInput is an input type that accepts InstanceTypesInstanceTypeNetworkArgs and InstanceTypesInstanceTypeNetworkOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeNetworkInput` via:
//
//	InstanceTypesInstanceTypeNetworkArgs{...}
type InstanceTypesInstanceTypeNetworkInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeNetworkOutput() InstanceTypesInstanceTypeNetworkOutput
	ToInstanceTypesInstanceTypeNetworkOutputWithContext(context.Context) InstanceTypesInstanceTypeNetworkOutput
}

type InstanceTypesInstanceTypeNetworkArgs struct {
	// Network benchmark bandwidth capacity (out/in), unit: Mbps.
	BaselineBandwidthMbps pulumi.IntInput `pulumi:"baselineBandwidthMbps"`
	// Peak network bandwidth capacity (out/in), unit: Mbps.
	MaximumBandwidthMbps pulumi.IntInput `pulumi:"maximumBandwidthMbps"`
	// Maximum number of elastic network interfaces supported for attachment.
	MaximumNetworkInterfaces pulumi.IntInput `pulumi:"maximumNetworkInterfaces"`
	// Maximum number of IPv4 addresses for a single elastic network interface.
	MaximumPrivateIpv4AddressesPerNetworkInterface pulumi.IntInput `pulumi:"maximumPrivateIpv4AddressesPerNetworkInterface"`
	// Maximum queue number for a single elastic network interface, including the queue number supported by the primary network interface and the auxiliary network interface.
	MaximumQueuesPerNetworkInterface pulumi.IntInput `pulumi:"maximumQueuesPerNetworkInterface"`
	// Network packet sending and receiving capacity (in+out), unit: Kpps.
	MaximumThroughputKpps pulumi.IntInput `pulumi:"maximumThroughputKpps"`
}

func (InstanceTypesInstanceTypeNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeNetworkArgs) ToInstanceTypesInstanceTypeNetworkOutput() InstanceTypesInstanceTypeNetworkOutput {
	return i.ToInstanceTypesInstanceTypeNetworkOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeNetworkArgs) ToInstanceTypesInstanceTypeNetworkOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeNetworkOutput)
}

// InstanceTypesInstanceTypeNetworkArrayInput is an input type that accepts InstanceTypesInstanceTypeNetworkArray and InstanceTypesInstanceTypeNetworkArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeNetworkArrayInput` via:
//
//	InstanceTypesInstanceTypeNetworkArray{ InstanceTypesInstanceTypeNetworkArgs{...} }
type InstanceTypesInstanceTypeNetworkArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeNetworkArrayOutput() InstanceTypesInstanceTypeNetworkArrayOutput
	ToInstanceTypesInstanceTypeNetworkArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeNetworkArrayOutput
}

type InstanceTypesInstanceTypeNetworkArray []InstanceTypesInstanceTypeNetworkInput

func (InstanceTypesInstanceTypeNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeNetworkArray) ToInstanceTypesInstanceTypeNetworkArrayOutput() InstanceTypesInstanceTypeNetworkArrayOutput {
	return i.ToInstanceTypesInstanceTypeNetworkArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeNetworkArray) ToInstanceTypesInstanceTypeNetworkArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeNetworkArrayOutput)
}

type InstanceTypesInstanceTypeNetworkOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeNetworkOutput) ToInstanceTypesInstanceTypeNetworkOutput() InstanceTypesInstanceTypeNetworkOutput {
	return o
}

func (o InstanceTypesInstanceTypeNetworkOutput) ToInstanceTypesInstanceTypeNetworkOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeNetworkOutput {
	return o
}

// Network benchmark bandwidth capacity (out/in), unit: Mbps.
func (o InstanceTypesInstanceTypeNetworkOutput) BaselineBandwidthMbps() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.BaselineBandwidthMbps }).(pulumi.IntOutput)
}

// Peak network bandwidth capacity (out/in), unit: Mbps.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumBandwidthMbps() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumBandwidthMbps }).(pulumi.IntOutput)
}

// Maximum number of elastic network interfaces supported for attachment.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumNetworkInterfaces() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumNetworkInterfaces }).(pulumi.IntOutput)
}

// Maximum number of IPv4 addresses for a single elastic network interface.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumPrivateIpv4AddressesPerNetworkInterface() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumPrivateIpv4AddressesPerNetworkInterface }).(pulumi.IntOutput)
}

// Maximum queue number for a single elastic network interface, including the queue number supported by the primary network interface and the auxiliary network interface.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumQueuesPerNetworkInterface() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumQueuesPerNetworkInterface }).(pulumi.IntOutput)
}

// Network packet sending and receiving capacity (in+out), unit: Kpps.
func (o InstanceTypesInstanceTypeNetworkOutput) MaximumThroughputKpps() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeNetwork) int { return v.MaximumThroughputKpps }).(pulumi.IntOutput)
}

type InstanceTypesInstanceTypeNetworkArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeNetworkArrayOutput) ToInstanceTypesInstanceTypeNetworkArrayOutput() InstanceTypesInstanceTypeNetworkArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeNetworkArrayOutput) ToInstanceTypesInstanceTypeNetworkArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeNetworkArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeNetworkArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeNetwork {
		return vs[0].([]InstanceTypesInstanceTypeNetwork)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeNetworkOutput)
}

type InstanceTypesInstanceTypeProcessor struct {
	// CPU clock speed, unit: GHz.
	BaseFrequency float64 `pulumi:"baseFrequency"`
	// The number of ECS instance CPU cores.
	Cpus int `pulumi:"cpus"`
	// CPU model.
	Model string `pulumi:"model"`
	// CPU Turbo Boost, unit: GHz.
	TurboFrequency float64 `pulumi:"turboFrequency"`
}

// InstanceTypesInstanceTypeProcessorInput is an input type that accepts InstanceTypesInstanceTypeProcessorArgs and InstanceTypesInstanceTypeProcessorOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeProcessorInput` via:
//
//	InstanceTypesInstanceTypeProcessorArgs{...}
type InstanceTypesInstanceTypeProcessorInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeProcessorOutput() InstanceTypesInstanceTypeProcessorOutput
	ToInstanceTypesInstanceTypeProcessorOutputWithContext(context.Context) InstanceTypesInstanceTypeProcessorOutput
}

type InstanceTypesInstanceTypeProcessorArgs struct {
	// CPU clock speed, unit: GHz.
	BaseFrequency pulumi.Float64Input `pulumi:"baseFrequency"`
	// The number of ECS instance CPU cores.
	Cpus pulumi.IntInput `pulumi:"cpus"`
	// CPU model.
	Model pulumi.StringInput `pulumi:"model"`
	// CPU Turbo Boost, unit: GHz.
	TurboFrequency pulumi.Float64Input `pulumi:"turboFrequency"`
}

func (InstanceTypesInstanceTypeProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeProcessorArgs) ToInstanceTypesInstanceTypeProcessorOutput() InstanceTypesInstanceTypeProcessorOutput {
	return i.ToInstanceTypesInstanceTypeProcessorOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeProcessorArgs) ToInstanceTypesInstanceTypeProcessorOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeProcessorOutput)
}

// InstanceTypesInstanceTypeProcessorArrayInput is an input type that accepts InstanceTypesInstanceTypeProcessorArray and InstanceTypesInstanceTypeProcessorArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeProcessorArrayInput` via:
//
//	InstanceTypesInstanceTypeProcessorArray{ InstanceTypesInstanceTypeProcessorArgs{...} }
type InstanceTypesInstanceTypeProcessorArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeProcessorArrayOutput() InstanceTypesInstanceTypeProcessorArrayOutput
	ToInstanceTypesInstanceTypeProcessorArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeProcessorArrayOutput
}

type InstanceTypesInstanceTypeProcessorArray []InstanceTypesInstanceTypeProcessorInput

func (InstanceTypesInstanceTypeProcessorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeProcessorArray) ToInstanceTypesInstanceTypeProcessorArrayOutput() InstanceTypesInstanceTypeProcessorArrayOutput {
	return i.ToInstanceTypesInstanceTypeProcessorArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeProcessorArray) ToInstanceTypesInstanceTypeProcessorArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeProcessorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeProcessorArrayOutput)
}

type InstanceTypesInstanceTypeProcessorOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeProcessorOutput) ToInstanceTypesInstanceTypeProcessorOutput() InstanceTypesInstanceTypeProcessorOutput {
	return o
}

func (o InstanceTypesInstanceTypeProcessorOutput) ToInstanceTypesInstanceTypeProcessorOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeProcessorOutput {
	return o
}

// CPU clock speed, unit: GHz.
func (o InstanceTypesInstanceTypeProcessorOutput) BaseFrequency() pulumi.Float64Output {
	return o.ApplyT(func(v InstanceTypesInstanceTypeProcessor) float64 { return v.BaseFrequency }).(pulumi.Float64Output)
}

// The number of ECS instance CPU cores.
func (o InstanceTypesInstanceTypeProcessorOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeProcessor) int { return v.Cpus }).(pulumi.IntOutput)
}

// CPU model.
func (o InstanceTypesInstanceTypeProcessorOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeProcessor) string { return v.Model }).(pulumi.StringOutput)
}

// CPU Turbo Boost, unit: GHz.
func (o InstanceTypesInstanceTypeProcessorOutput) TurboFrequency() pulumi.Float64Output {
	return o.ApplyT(func(v InstanceTypesInstanceTypeProcessor) float64 { return v.TurboFrequency }).(pulumi.Float64Output)
}

type InstanceTypesInstanceTypeProcessorArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeProcessorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeProcessorArrayOutput) ToInstanceTypesInstanceTypeProcessorArrayOutput() InstanceTypesInstanceTypeProcessorArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeProcessorArrayOutput) ToInstanceTypesInstanceTypeProcessorArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeProcessorArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeProcessorArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeProcessorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeProcessor {
		return vs[0].([]InstanceTypesInstanceTypeProcessor)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeProcessorOutput)
}

type InstanceTypesInstanceTypeRdma struct {
	// Number of RDMA network cards.
	RdmaNetworkInterfaces int `pulumi:"rdmaNetworkInterfaces"`
}

// InstanceTypesInstanceTypeRdmaInput is an input type that accepts InstanceTypesInstanceTypeRdmaArgs and InstanceTypesInstanceTypeRdmaOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeRdmaInput` via:
//
//	InstanceTypesInstanceTypeRdmaArgs{...}
type InstanceTypesInstanceTypeRdmaInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeRdmaOutput() InstanceTypesInstanceTypeRdmaOutput
	ToInstanceTypesInstanceTypeRdmaOutputWithContext(context.Context) InstanceTypesInstanceTypeRdmaOutput
}

type InstanceTypesInstanceTypeRdmaArgs struct {
	// Number of RDMA network cards.
	RdmaNetworkInterfaces pulumi.IntInput `pulumi:"rdmaNetworkInterfaces"`
}

func (InstanceTypesInstanceTypeRdmaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeRdmaArgs) ToInstanceTypesInstanceTypeRdmaOutput() InstanceTypesInstanceTypeRdmaOutput {
	return i.ToInstanceTypesInstanceTypeRdmaOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeRdmaArgs) ToInstanceTypesInstanceTypeRdmaOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeRdmaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeRdmaOutput)
}

// InstanceTypesInstanceTypeRdmaArrayInput is an input type that accepts InstanceTypesInstanceTypeRdmaArray and InstanceTypesInstanceTypeRdmaArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeRdmaArrayInput` via:
//
//	InstanceTypesInstanceTypeRdmaArray{ InstanceTypesInstanceTypeRdmaArgs{...} }
type InstanceTypesInstanceTypeRdmaArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeRdmaArrayOutput() InstanceTypesInstanceTypeRdmaArrayOutput
	ToInstanceTypesInstanceTypeRdmaArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeRdmaArrayOutput
}

type InstanceTypesInstanceTypeRdmaArray []InstanceTypesInstanceTypeRdmaInput

func (InstanceTypesInstanceTypeRdmaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeRdmaArray) ToInstanceTypesInstanceTypeRdmaArrayOutput() InstanceTypesInstanceTypeRdmaArrayOutput {
	return i.ToInstanceTypesInstanceTypeRdmaArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeRdmaArray) ToInstanceTypesInstanceTypeRdmaArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeRdmaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeRdmaArrayOutput)
}

type InstanceTypesInstanceTypeRdmaOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeRdmaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeRdmaOutput) ToInstanceTypesInstanceTypeRdmaOutput() InstanceTypesInstanceTypeRdmaOutput {
	return o
}

func (o InstanceTypesInstanceTypeRdmaOutput) ToInstanceTypesInstanceTypeRdmaOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeRdmaOutput {
	return o
}

// Number of RDMA network cards.
func (o InstanceTypesInstanceTypeRdmaOutput) RdmaNetworkInterfaces() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeRdma) int { return v.RdmaNetworkInterfaces }).(pulumi.IntOutput)
}

type InstanceTypesInstanceTypeRdmaArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeRdmaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeRdmaArrayOutput) ToInstanceTypesInstanceTypeRdmaArrayOutput() InstanceTypesInstanceTypeRdmaArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeRdmaArrayOutput) ToInstanceTypesInstanceTypeRdmaArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeRdmaArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeRdmaArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeRdmaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeRdma {
		return vs[0].([]InstanceTypesInstanceTypeRdma)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeRdmaOutput)
}

type InstanceTypesInstanceTypeVolume struct {
	// The maximum number of volumes.
	MaximumCount int `pulumi:"maximumCount"`
	// List of supported volume types.
	SupportedVolumeTypes []string `pulumi:"supportedVolumeTypes"`
}

// InstanceTypesInstanceTypeVolumeInput is an input type that accepts InstanceTypesInstanceTypeVolumeArgs and InstanceTypesInstanceTypeVolumeOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeVolumeInput` via:
//
//	InstanceTypesInstanceTypeVolumeArgs{...}
type InstanceTypesInstanceTypeVolumeInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeVolumeOutput() InstanceTypesInstanceTypeVolumeOutput
	ToInstanceTypesInstanceTypeVolumeOutputWithContext(context.Context) InstanceTypesInstanceTypeVolumeOutput
}

type InstanceTypesInstanceTypeVolumeArgs struct {
	// The maximum number of volumes.
	MaximumCount pulumi.IntInput `pulumi:"maximumCount"`
	// List of supported volume types.
	SupportedVolumeTypes pulumi.StringArrayInput `pulumi:"supportedVolumeTypes"`
}

func (InstanceTypesInstanceTypeVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeVolumeArgs) ToInstanceTypesInstanceTypeVolumeOutput() InstanceTypesInstanceTypeVolumeOutput {
	return i.ToInstanceTypesInstanceTypeVolumeOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeVolumeArgs) ToInstanceTypesInstanceTypeVolumeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeVolumeOutput)
}

// InstanceTypesInstanceTypeVolumeArrayInput is an input type that accepts InstanceTypesInstanceTypeVolumeArray and InstanceTypesInstanceTypeVolumeArrayOutput values.
// You can construct a concrete instance of `InstanceTypesInstanceTypeVolumeArrayInput` via:
//
//	InstanceTypesInstanceTypeVolumeArray{ InstanceTypesInstanceTypeVolumeArgs{...} }
type InstanceTypesInstanceTypeVolumeArrayInput interface {
	pulumi.Input

	ToInstanceTypesInstanceTypeVolumeArrayOutput() InstanceTypesInstanceTypeVolumeArrayOutput
	ToInstanceTypesInstanceTypeVolumeArrayOutputWithContext(context.Context) InstanceTypesInstanceTypeVolumeArrayOutput
}

type InstanceTypesInstanceTypeVolumeArray []InstanceTypesInstanceTypeVolumeInput

func (InstanceTypesInstanceTypeVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (i InstanceTypesInstanceTypeVolumeArray) ToInstanceTypesInstanceTypeVolumeArrayOutput() InstanceTypesInstanceTypeVolumeArrayOutput {
	return i.ToInstanceTypesInstanceTypeVolumeArrayOutputWithContext(context.Background())
}

func (i InstanceTypesInstanceTypeVolumeArray) ToInstanceTypesInstanceTypeVolumeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTypesInstanceTypeVolumeArrayOutput)
}

type InstanceTypesInstanceTypeVolumeOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeVolumeOutput) ToInstanceTypesInstanceTypeVolumeOutput() InstanceTypesInstanceTypeVolumeOutput {
	return o
}

func (o InstanceTypesInstanceTypeVolumeOutput) ToInstanceTypesInstanceTypeVolumeOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeVolumeOutput {
	return o
}

// The maximum number of volumes.
func (o InstanceTypesInstanceTypeVolumeOutput) MaximumCount() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeVolume) int { return v.MaximumCount }).(pulumi.IntOutput)
}

// List of supported volume types.
func (o InstanceTypesInstanceTypeVolumeOutput) SupportedVolumeTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceTypesInstanceTypeVolume) []string { return v.SupportedVolumeTypes }).(pulumi.StringArrayOutput)
}

type InstanceTypesInstanceTypeVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstanceTypesInstanceTypeVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (o InstanceTypesInstanceTypeVolumeArrayOutput) ToInstanceTypesInstanceTypeVolumeArrayOutput() InstanceTypesInstanceTypeVolumeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeVolumeArrayOutput) ToInstanceTypesInstanceTypeVolumeArrayOutputWithContext(ctx context.Context) InstanceTypesInstanceTypeVolumeArrayOutput {
	return o
}

func (o InstanceTypesInstanceTypeVolumeArrayOutput) Index(i pulumi.IntInput) InstanceTypesInstanceTypeVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTypesInstanceTypeVolume {
		return vs[0].([]InstanceTypesInstanceTypeVolume)[vs[1].(int)]
	}).(InstanceTypesInstanceTypeVolumeOutput)
}

type InstancesInstance struct {
	// The number of ECS instance CPU cores.
	Cpus int `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of DeploymentSet.
	DeploymentSetId string `pulumi:"deploymentSetId"`
	// The description of ECS instance.
	Description string `pulumi:"description"`
	// The EIP address of the ECS instance.
	EipAddresses []InstancesInstanceEipAddress `pulumi:"eipAddresses"`
	// The GPU device info of Instance.
	GpuDevices []InstancesInstanceGpuDevice `pulumi:"gpuDevices"`
	// The host name of ECS instance.
	HostName string `pulumi:"hostName"`
	// The image ID of ECS instance.
	ImageId string `pulumi:"imageId"`
	// The charge type of ECS instance.
	InstanceChargeType string `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of ECS instance. This field support fuzzy query.
	InstanceName string `pulumi:"instanceName"`
	// The spec type of ECS instance.
	InstanceType string `pulumi:"instanceType"`
	// The number of IPv6 addresses of the ECS instance.
	Ipv6AddressCount int `pulumi:"ipv6AddressCount"`
	// A list of ipv6 addresses.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// The Flag of GPU instance.If the instance is GPU,The flag is true.
	IsGpu bool `pulumi:"isGpu"`
	// The ssh key ID of ECS instance.
	KeyPairId string `pulumi:"keyPairId"`
	// The key pair name of ECS instance.
	KeyPairName string `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize int `pulumi:"memorySize"`
	// The networkInterface detail collection of ECS instance.
	NetworkInterfaces []InstancesInstanceNetworkInterface `pulumi:"networkInterfaces"`
	// The os name of ECS instance.
	OsName string `pulumi:"osName"`
	// The os type of ECS instance.
	OsType string `pulumi:"osType"`
	// The ProjectName of ECS instance.
	ProjectName string `pulumi:"projectName"`
	// The spot price limit of ECS instance.
	SpotPriceLimit float64 `pulumi:"spotPriceLimit"`
	// The spot strategy of ECS instance.
	SpotStrategy string `pulumi:"spotStrategy"`
	// The status of ECS instance.
	Status string `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode string `pulumi:"stoppedMode"`
	// Tags.
	Tags []InstancesInstanceTag `pulumi:"tags"`
	// The update time of ECS instance.
	UpdatedAt string `pulumi:"updatedAt"`
	// The volume ID list of ECS instance.
	VolumeIds []string `pulumi:"volumeIds"`
	// The volume detail collection of volume.
	Volumes []InstancesInstanceVolume `pulumi:"volumes"`
	// The VPC ID of ECS instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceInput is an input type that accepts InstancesInstanceArgs and InstancesInstanceOutput values.
// You can construct a concrete instance of `InstancesInstanceInput` via:
//
//	InstancesInstanceArgs{...}
type InstancesInstanceInput interface {
	pulumi.Input

	ToInstancesInstanceOutput() InstancesInstanceOutput
	ToInstancesInstanceOutputWithContext(context.Context) InstancesInstanceOutput
}

type InstancesInstanceArgs struct {
	// The number of ECS instance CPU cores.
	Cpus pulumi.IntInput `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of DeploymentSet.
	DeploymentSetId pulumi.StringInput `pulumi:"deploymentSetId"`
	// The description of ECS instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The EIP address of the ECS instance.
	EipAddresses InstancesInstanceEipAddressArrayInput `pulumi:"eipAddresses"`
	// The GPU device info of Instance.
	GpuDevices InstancesInstanceGpuDeviceArrayInput `pulumi:"gpuDevices"`
	// The host name of ECS instance.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// The image ID of ECS instance.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The charge type of ECS instance.
	InstanceChargeType pulumi.StringInput `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of ECS instance. This field support fuzzy query.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The spec type of ECS instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// The number of IPv6 addresses of the ECS instance.
	Ipv6AddressCount pulumi.IntInput `pulumi:"ipv6AddressCount"`
	// A list of ipv6 addresses.
	Ipv6Addresses pulumi.StringArrayInput `pulumi:"ipv6Addresses"`
	// The Flag of GPU instance.If the instance is GPU,The flag is true.
	IsGpu pulumi.BoolInput `pulumi:"isGpu"`
	// The ssh key ID of ECS instance.
	KeyPairId pulumi.StringInput `pulumi:"keyPairId"`
	// The key pair name of ECS instance.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntInput `pulumi:"memorySize"`
	// The networkInterface detail collection of ECS instance.
	NetworkInterfaces InstancesInstanceNetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// The os name of ECS instance.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The os type of ECS instance.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The ProjectName of ECS instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The spot price limit of ECS instance.
	SpotPriceLimit pulumi.Float64Input `pulumi:"spotPriceLimit"`
	// The spot strategy of ECS instance.
	SpotStrategy pulumi.StringInput `pulumi:"spotStrategy"`
	// The status of ECS instance.
	Status pulumi.StringInput `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode pulumi.StringInput `pulumi:"stoppedMode"`
	// Tags.
	Tags InstancesInstanceTagArrayInput `pulumi:"tags"`
	// The update time of ECS instance.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The volume ID list of ECS instance.
	VolumeIds pulumi.StringArrayInput `pulumi:"volumeIds"`
	// The volume detail collection of volume.
	Volumes InstancesInstanceVolumeArrayInput `pulumi:"volumes"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return i.ToInstancesInstanceOutputWithContext(context.Background())
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceOutput)
}

// InstancesInstanceArrayInput is an input type that accepts InstancesInstanceArray and InstancesInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceArrayInput` via:
//
//	InstancesInstanceArray{ InstancesInstanceArgs{...} }
type InstancesInstanceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput
	ToInstancesInstanceArrayOutputWithContext(context.Context) InstancesInstanceArrayOutput
}

type InstancesInstanceArray []InstancesInstanceInput

func (InstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return i.ToInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceArrayOutput)
}

type InstancesInstanceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return o
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return o
}

// The number of ECS instance CPU cores.
func (o InstancesInstanceOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.Cpus }).(pulumi.IntOutput)
}

// The create time of ECS instance.
func (o InstancesInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of DeploymentSet.
func (o InstancesInstanceOutput) DeploymentSetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.DeploymentSetId }).(pulumi.StringOutput)
}

// The description of ECS instance.
func (o InstancesInstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Description }).(pulumi.StringOutput)
}

// The EIP address of the ECS instance.
func (o InstancesInstanceOutput) EipAddresses() InstancesInstanceEipAddressArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceEipAddress { return v.EipAddresses }).(InstancesInstanceEipAddressArrayOutput)
}

// The GPU device info of Instance.
func (o InstancesInstanceOutput) GpuDevices() InstancesInstanceGpuDeviceArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceGpuDevice { return v.GpuDevices }).(InstancesInstanceGpuDeviceArrayOutput)
}

// The host name of ECS instance.
func (o InstancesInstanceOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.HostName }).(pulumi.StringOutput)
}

// The image ID of ECS instance.
func (o InstancesInstanceOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ImageId }).(pulumi.StringOutput)
}

// The charge type of ECS instance.
func (o InstancesInstanceOutput) InstanceChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceChargeType }).(pulumi.StringOutput)
}

// The ID of ECS instance.
func (o InstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of ECS instance. This field support fuzzy query.
func (o InstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The spec type of ECS instance.
func (o InstancesInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// The number of IPv6 addresses of the ECS instance.
func (o InstancesInstanceOutput) Ipv6AddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.Ipv6AddressCount }).(pulumi.IntOutput)
}

// A list of ipv6 addresses.
func (o InstancesInstanceOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []string { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

// The Flag of GPU instance.If the instance is GPU,The flag is true.
func (o InstancesInstanceOutput) IsGpu() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.IsGpu }).(pulumi.BoolOutput)
}

// The ssh key ID of ECS instance.
func (o InstancesInstanceOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.KeyPairId }).(pulumi.StringOutput)
}

// The key pair name of ECS instance.
func (o InstancesInstanceOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The memory size of ECS instance.
func (o InstancesInstanceOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.MemorySize }).(pulumi.IntOutput)
}

// The networkInterface detail collection of ECS instance.
func (o InstancesInstanceOutput) NetworkInterfaces() InstancesInstanceNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceNetworkInterface { return v.NetworkInterfaces }).(InstancesInstanceNetworkInterfaceArrayOutput)
}

// The os name of ECS instance.
func (o InstancesInstanceOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OsName }).(pulumi.StringOutput)
}

// The os type of ECS instance.
func (o InstancesInstanceOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OsType }).(pulumi.StringOutput)
}

// The ProjectName of ECS instance.
func (o InstancesInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The spot price limit of ECS instance.
func (o InstancesInstanceOutput) SpotPriceLimit() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstance) float64 { return v.SpotPriceLimit }).(pulumi.Float64Output)
}

// The spot strategy of ECS instance.
func (o InstancesInstanceOutput) SpotStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.SpotStrategy }).(pulumi.StringOutput)
}

// The status of ECS instance.
func (o InstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// The stop mode of ECS instance.
func (o InstancesInstanceOutput) StoppedMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.StoppedMode }).(pulumi.StringOutput)
}

// Tags.
func (o InstancesInstanceOutput) Tags() InstancesInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceTag { return v.Tags }).(InstancesInstanceTagArrayOutput)
}

// The update time of ECS instance.
func (o InstancesInstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The volume ID list of ECS instance.
func (o InstancesInstanceOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []string { return v.VolumeIds }).(pulumi.StringArrayOutput)
}

// The volume detail collection of volume.
func (o InstancesInstanceOutput) Volumes() InstancesInstanceVolumeArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceVolume { return v.Volumes }).(InstancesInstanceVolumeArrayOutput)
}

// The VPC ID of ECS instance.
func (o InstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone ID of ECS instance.
func (o InstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstance {
		return vs[0].([]InstancesInstance)[vs[1].(int)]
	}).(InstancesInstanceOutput)
}

type InstancesInstanceEipAddress struct {
	// The EIP ID of the ECS instance.
	AllocationId string `pulumi:"allocationId"`
	// The EIP address of the ECS instance.
	IpAddress string `pulumi:"ipAddress"`
}

// InstancesInstanceEipAddressInput is an input type that accepts InstancesInstanceEipAddressArgs and InstancesInstanceEipAddressOutput values.
// You can construct a concrete instance of `InstancesInstanceEipAddressInput` via:
//
//	InstancesInstanceEipAddressArgs{...}
type InstancesInstanceEipAddressInput interface {
	pulumi.Input

	ToInstancesInstanceEipAddressOutput() InstancesInstanceEipAddressOutput
	ToInstancesInstanceEipAddressOutputWithContext(context.Context) InstancesInstanceEipAddressOutput
}

type InstancesInstanceEipAddressArgs struct {
	// The EIP ID of the ECS instance.
	AllocationId pulumi.StringInput `pulumi:"allocationId"`
	// The EIP address of the ECS instance.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
}

func (InstancesInstanceEipAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceEipAddress)(nil)).Elem()
}

func (i InstancesInstanceEipAddressArgs) ToInstancesInstanceEipAddressOutput() InstancesInstanceEipAddressOutput {
	return i.ToInstancesInstanceEipAddressOutputWithContext(context.Background())
}

func (i InstancesInstanceEipAddressArgs) ToInstancesInstanceEipAddressOutputWithContext(ctx context.Context) InstancesInstanceEipAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceEipAddressOutput)
}

// InstancesInstanceEipAddressArrayInput is an input type that accepts InstancesInstanceEipAddressArray and InstancesInstanceEipAddressArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceEipAddressArrayInput` via:
//
//	InstancesInstanceEipAddressArray{ InstancesInstanceEipAddressArgs{...} }
type InstancesInstanceEipAddressArrayInput interface {
	pulumi.Input

	ToInstancesInstanceEipAddressArrayOutput() InstancesInstanceEipAddressArrayOutput
	ToInstancesInstanceEipAddressArrayOutputWithContext(context.Context) InstancesInstanceEipAddressArrayOutput
}

type InstancesInstanceEipAddressArray []InstancesInstanceEipAddressInput

func (InstancesInstanceEipAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceEipAddress)(nil)).Elem()
}

func (i InstancesInstanceEipAddressArray) ToInstancesInstanceEipAddressArrayOutput() InstancesInstanceEipAddressArrayOutput {
	return i.ToInstancesInstanceEipAddressArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceEipAddressArray) ToInstancesInstanceEipAddressArrayOutputWithContext(ctx context.Context) InstancesInstanceEipAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceEipAddressArrayOutput)
}

type InstancesInstanceEipAddressOutput struct{ *pulumi.OutputState }

func (InstancesInstanceEipAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceEipAddress)(nil)).Elem()
}

func (o InstancesInstanceEipAddressOutput) ToInstancesInstanceEipAddressOutput() InstancesInstanceEipAddressOutput {
	return o
}

func (o InstancesInstanceEipAddressOutput) ToInstancesInstanceEipAddressOutputWithContext(ctx context.Context) InstancesInstanceEipAddressOutput {
	return o
}

// The EIP ID of the ECS instance.
func (o InstancesInstanceEipAddressOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEipAddress) string { return v.AllocationId }).(pulumi.StringOutput)
}

// The EIP address of the ECS instance.
func (o InstancesInstanceEipAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEipAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

type InstancesInstanceEipAddressArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceEipAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceEipAddress)(nil)).Elem()
}

func (o InstancesInstanceEipAddressArrayOutput) ToInstancesInstanceEipAddressArrayOutput() InstancesInstanceEipAddressArrayOutput {
	return o
}

func (o InstancesInstanceEipAddressArrayOutput) ToInstancesInstanceEipAddressArrayOutputWithContext(ctx context.Context) InstancesInstanceEipAddressArrayOutput {
	return o
}

func (o InstancesInstanceEipAddressArrayOutput) Index(i pulumi.IntInput) InstancesInstanceEipAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceEipAddress {
		return vs[0].([]InstancesInstanceEipAddress)[vs[1].(int)]
	}).(InstancesInstanceEipAddressOutput)
}

type InstancesInstanceGpuDevice struct {
	// The Count of GPU device.
	Count int `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize int `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize int `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName string `pulumi:"productName"`
}

// InstancesInstanceGpuDeviceInput is an input type that accepts InstancesInstanceGpuDeviceArgs and InstancesInstanceGpuDeviceOutput values.
// You can construct a concrete instance of `InstancesInstanceGpuDeviceInput` via:
//
//	InstancesInstanceGpuDeviceArgs{...}
type InstancesInstanceGpuDeviceInput interface {
	pulumi.Input

	ToInstancesInstanceGpuDeviceOutput() InstancesInstanceGpuDeviceOutput
	ToInstancesInstanceGpuDeviceOutputWithContext(context.Context) InstancesInstanceGpuDeviceOutput
}

type InstancesInstanceGpuDeviceArgs struct {
	// The Count of GPU device.
	Count pulumi.IntInput `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize pulumi.IntInput `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntInput `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName pulumi.StringInput `pulumi:"productName"`
}

func (InstancesInstanceGpuDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceGpuDevice)(nil)).Elem()
}

func (i InstancesInstanceGpuDeviceArgs) ToInstancesInstanceGpuDeviceOutput() InstancesInstanceGpuDeviceOutput {
	return i.ToInstancesInstanceGpuDeviceOutputWithContext(context.Background())
}

func (i InstancesInstanceGpuDeviceArgs) ToInstancesInstanceGpuDeviceOutputWithContext(ctx context.Context) InstancesInstanceGpuDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceGpuDeviceOutput)
}

// InstancesInstanceGpuDeviceArrayInput is an input type that accepts InstancesInstanceGpuDeviceArray and InstancesInstanceGpuDeviceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceGpuDeviceArrayInput` via:
//
//	InstancesInstanceGpuDeviceArray{ InstancesInstanceGpuDeviceArgs{...} }
type InstancesInstanceGpuDeviceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceGpuDeviceArrayOutput() InstancesInstanceGpuDeviceArrayOutput
	ToInstancesInstanceGpuDeviceArrayOutputWithContext(context.Context) InstancesInstanceGpuDeviceArrayOutput
}

type InstancesInstanceGpuDeviceArray []InstancesInstanceGpuDeviceInput

func (InstancesInstanceGpuDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceGpuDevice)(nil)).Elem()
}

func (i InstancesInstanceGpuDeviceArray) ToInstancesInstanceGpuDeviceArrayOutput() InstancesInstanceGpuDeviceArrayOutput {
	return i.ToInstancesInstanceGpuDeviceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceGpuDeviceArray) ToInstancesInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) InstancesInstanceGpuDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceGpuDeviceArrayOutput)
}

type InstancesInstanceGpuDeviceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceGpuDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceGpuDevice)(nil)).Elem()
}

func (o InstancesInstanceGpuDeviceOutput) ToInstancesInstanceGpuDeviceOutput() InstancesInstanceGpuDeviceOutput {
	return o
}

func (o InstancesInstanceGpuDeviceOutput) ToInstancesInstanceGpuDeviceOutputWithContext(ctx context.Context) InstancesInstanceGpuDeviceOutput {
	return o
}

// The Count of GPU device.
func (o InstancesInstanceGpuDeviceOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceGpuDevice) int { return v.Count }).(pulumi.IntOutput)
}

// The Encrypted Memory Size of GPU device.
func (o InstancesInstanceGpuDeviceOutput) EncryptedMemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceGpuDevice) int { return v.EncryptedMemorySize }).(pulumi.IntOutput)
}

// The memory size of ECS instance.
func (o InstancesInstanceGpuDeviceOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceGpuDevice) int { return v.MemorySize }).(pulumi.IntOutput)
}

// The Product Name of GPU device.
func (o InstancesInstanceGpuDeviceOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceGpuDevice) string { return v.ProductName }).(pulumi.StringOutput)
}

type InstancesInstanceGpuDeviceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceGpuDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceGpuDevice)(nil)).Elem()
}

func (o InstancesInstanceGpuDeviceArrayOutput) ToInstancesInstanceGpuDeviceArrayOutput() InstancesInstanceGpuDeviceArrayOutput {
	return o
}

func (o InstancesInstanceGpuDeviceArrayOutput) ToInstancesInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) InstancesInstanceGpuDeviceArrayOutput {
	return o
}

func (o InstancesInstanceGpuDeviceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceGpuDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceGpuDevice {
		return vs[0].([]InstancesInstanceGpuDevice)[vs[1].(int)]
	}).(InstancesInstanceGpuDeviceOutput)
}

type InstancesInstanceNetworkInterface struct {
	// The mac address of networkInterface.
	MacAddress string `pulumi:"macAddress"`
	// The ID of networkInterface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress string `pulumi:"primaryIpAddress"`
	// The subnet ID of networkInterface.
	SubnetId string `pulumi:"subnetId"`
	// The type of networkInterface.
	Type string `pulumi:"type"`
	// The VPC ID of ECS instance.
	VpcId string `pulumi:"vpcId"`
}

// InstancesInstanceNetworkInterfaceInput is an input type that accepts InstancesInstanceNetworkInterfaceArgs and InstancesInstanceNetworkInterfaceOutput values.
// You can construct a concrete instance of `InstancesInstanceNetworkInterfaceInput` via:
//
//	InstancesInstanceNetworkInterfaceArgs{...}
type InstancesInstanceNetworkInterfaceInput interface {
	pulumi.Input

	ToInstancesInstanceNetworkInterfaceOutput() InstancesInstanceNetworkInterfaceOutput
	ToInstancesInstanceNetworkInterfaceOutputWithContext(context.Context) InstancesInstanceNetworkInterfaceOutput
}

type InstancesInstanceNetworkInterfaceArgs struct {
	// The mac address of networkInterface.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The ID of networkInterface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress pulumi.StringInput `pulumi:"primaryIpAddress"`
	// The subnet ID of networkInterface.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of networkInterface.
	Type pulumi.StringInput `pulumi:"type"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (InstancesInstanceNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (i InstancesInstanceNetworkInterfaceArgs) ToInstancesInstanceNetworkInterfaceOutput() InstancesInstanceNetworkInterfaceOutput {
	return i.ToInstancesInstanceNetworkInterfaceOutputWithContext(context.Background())
}

func (i InstancesInstanceNetworkInterfaceArgs) ToInstancesInstanceNetworkInterfaceOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNetworkInterfaceOutput)
}

// InstancesInstanceNetworkInterfaceArrayInput is an input type that accepts InstancesInstanceNetworkInterfaceArray and InstancesInstanceNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceNetworkInterfaceArrayInput` via:
//
//	InstancesInstanceNetworkInterfaceArray{ InstancesInstanceNetworkInterfaceArgs{...} }
type InstancesInstanceNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceNetworkInterfaceArrayOutput() InstancesInstanceNetworkInterfaceArrayOutput
	ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(context.Context) InstancesInstanceNetworkInterfaceArrayOutput
}

type InstancesInstanceNetworkInterfaceArray []InstancesInstanceNetworkInterfaceInput

func (InstancesInstanceNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (i InstancesInstanceNetworkInterfaceArray) ToInstancesInstanceNetworkInterfaceArrayOutput() InstancesInstanceNetworkInterfaceArrayOutput {
	return i.ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceNetworkInterfaceArray) ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNetworkInterfaceArrayOutput)
}

type InstancesInstanceNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (o InstancesInstanceNetworkInterfaceOutput) ToInstancesInstanceNetworkInterfaceOutput() InstancesInstanceNetworkInterfaceOutput {
	return o
}

func (o InstancesInstanceNetworkInterfaceOutput) ToInstancesInstanceNetworkInterfaceOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceOutput {
	return o
}

// The mac address of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The ID of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The primary ip address of ECS instance.
func (o InstancesInstanceNetworkInterfaceOutput) PrimaryIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.PrimaryIpAddress }).(pulumi.StringOutput)
}

// The subnet ID of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The type of networkInterface.
func (o InstancesInstanceNetworkInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.Type }).(pulumi.StringOutput)
}

// The VPC ID of ECS instance.
func (o InstancesInstanceNetworkInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNetworkInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type InstancesInstanceNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNetworkInterface)(nil)).Elem()
}

func (o InstancesInstanceNetworkInterfaceArrayOutput) ToInstancesInstanceNetworkInterfaceArrayOutput() InstancesInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o InstancesInstanceNetworkInterfaceArrayOutput) ToInstancesInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) InstancesInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o InstancesInstanceNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceNetworkInterface {
		return vs[0].([]InstancesInstanceNetworkInterface)[vs[1].(int)]
	}).(InstancesInstanceNetworkInterfaceOutput)
}

type InstancesInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesInstanceTagInput is an input type that accepts InstancesInstanceTagArgs and InstancesInstanceTagOutput values.
// You can construct a concrete instance of `InstancesInstanceTagInput` via:
//
//	InstancesInstanceTagArgs{...}
type InstancesInstanceTagInput interface {
	pulumi.Input

	ToInstancesInstanceTagOutput() InstancesInstanceTagOutput
	ToInstancesInstanceTagOutputWithContext(context.Context) InstancesInstanceTagOutput
}

type InstancesInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return i.ToInstancesInstanceTagOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagOutput)
}

// InstancesInstanceTagArrayInput is an input type that accepts InstancesInstanceTagArray and InstancesInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceTagArrayInput` via:
//
//	InstancesInstanceTagArray{ InstancesInstanceTagArgs{...} }
type InstancesInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput
	ToInstancesInstanceTagArrayOutputWithContext(context.Context) InstancesInstanceTagArrayOutput
}

type InstancesInstanceTagArray []InstancesInstanceTagInput

func (InstancesInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return i.ToInstancesInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagArrayOutput)
}

type InstancesInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return o
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceTag {
		return vs[0].([]InstancesInstanceTag)[vs[1].(int)]
	}).(InstancesInstanceTagOutput)
}

type InstancesInstanceVolume struct {
	// The delete with instance flag of volume.
	DeleteWithInstance bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size int `pulumi:"size"`
	// The ID of volume.
	VolumeId string `pulumi:"volumeId"`
	// The Name of volume.
	VolumeName string `pulumi:"volumeName"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// InstancesInstanceVolumeInput is an input type that accepts InstancesInstanceVolumeArgs and InstancesInstanceVolumeOutput values.
// You can construct a concrete instance of `InstancesInstanceVolumeInput` via:
//
//	InstancesInstanceVolumeArgs{...}
type InstancesInstanceVolumeInput interface {
	pulumi.Input

	ToInstancesInstanceVolumeOutput() InstancesInstanceVolumeOutput
	ToInstancesInstanceVolumeOutputWithContext(context.Context) InstancesInstanceVolumeOutput
}

type InstancesInstanceVolumeArgs struct {
	// The delete with instance flag of volume.
	DeleteWithInstance pulumi.BoolInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntInput `pulumi:"size"`
	// The ID of volume.
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
	// The Name of volume.
	VolumeName pulumi.StringInput `pulumi:"volumeName"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (InstancesInstanceVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceVolume)(nil)).Elem()
}

func (i InstancesInstanceVolumeArgs) ToInstancesInstanceVolumeOutput() InstancesInstanceVolumeOutput {
	return i.ToInstancesInstanceVolumeOutputWithContext(context.Background())
}

func (i InstancesInstanceVolumeArgs) ToInstancesInstanceVolumeOutputWithContext(ctx context.Context) InstancesInstanceVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceVolumeOutput)
}

// InstancesInstanceVolumeArrayInput is an input type that accepts InstancesInstanceVolumeArray and InstancesInstanceVolumeArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceVolumeArrayInput` via:
//
//	InstancesInstanceVolumeArray{ InstancesInstanceVolumeArgs{...} }
type InstancesInstanceVolumeArrayInput interface {
	pulumi.Input

	ToInstancesInstanceVolumeArrayOutput() InstancesInstanceVolumeArrayOutput
	ToInstancesInstanceVolumeArrayOutputWithContext(context.Context) InstancesInstanceVolumeArrayOutput
}

type InstancesInstanceVolumeArray []InstancesInstanceVolumeInput

func (InstancesInstanceVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceVolume)(nil)).Elem()
}

func (i InstancesInstanceVolumeArray) ToInstancesInstanceVolumeArrayOutput() InstancesInstanceVolumeArrayOutput {
	return i.ToInstancesInstanceVolumeArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceVolumeArray) ToInstancesInstanceVolumeArrayOutputWithContext(ctx context.Context) InstancesInstanceVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceVolumeArrayOutput)
}

type InstancesInstanceVolumeOutput struct{ *pulumi.OutputState }

func (InstancesInstanceVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceVolume)(nil)).Elem()
}

func (o InstancesInstanceVolumeOutput) ToInstancesInstanceVolumeOutput() InstancesInstanceVolumeOutput {
	return o
}

func (o InstancesInstanceVolumeOutput) ToInstancesInstanceVolumeOutputWithContext(ctx context.Context) InstancesInstanceVolumeOutput {
	return o
}

// The delete with instance flag of volume.
func (o InstancesInstanceVolumeOutput) DeleteWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) bool { return v.DeleteWithInstance }).(pulumi.BoolOutput)
}

// The size of volume.
func (o InstancesInstanceVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The ID of volume.
func (o InstancesInstanceVolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) string { return v.VolumeId }).(pulumi.StringOutput)
}

// The Name of volume.
func (o InstancesInstanceVolumeOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) string { return v.VolumeName }).(pulumi.StringOutput)
}

// The type of volume.
func (o InstancesInstanceVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type InstancesInstanceVolumeArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceVolume)(nil)).Elem()
}

func (o InstancesInstanceVolumeArrayOutput) ToInstancesInstanceVolumeArrayOutput() InstancesInstanceVolumeArrayOutput {
	return o
}

func (o InstancesInstanceVolumeArrayOutput) ToInstancesInstanceVolumeArrayOutputWithContext(ctx context.Context) InstancesInstanceVolumeArrayOutput {
	return o
}

func (o InstancesInstanceVolumeArrayOutput) Index(i pulumi.IntInput) InstancesInstanceVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceVolume {
		return vs[0].([]InstancesInstanceVolume)[vs[1].(int)]
	}).(InstancesInstanceVolumeOutput)
}

type InstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type InvocationParameter struct {
	// The name of the parameter.
	Name string `pulumi:"name"`
	// The value of the parameter.
	Value string `pulumi:"value"`
}

// InvocationParameterInput is an input type that accepts InvocationParameterArgs and InvocationParameterOutput values.
// You can construct a concrete instance of `InvocationParameterInput` via:
//
//	InvocationParameterArgs{...}
type InvocationParameterInput interface {
	pulumi.Input

	ToInvocationParameterOutput() InvocationParameterOutput
	ToInvocationParameterOutputWithContext(context.Context) InvocationParameterOutput
}

type InvocationParameterArgs struct {
	// The name of the parameter.
	Name pulumi.StringInput `pulumi:"name"`
	// The value of the parameter.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InvocationParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationParameter)(nil)).Elem()
}

func (i InvocationParameterArgs) ToInvocationParameterOutput() InvocationParameterOutput {
	return i.ToInvocationParameterOutputWithContext(context.Background())
}

func (i InvocationParameterArgs) ToInvocationParameterOutputWithContext(ctx context.Context) InvocationParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationParameterOutput)
}

// InvocationParameterArrayInput is an input type that accepts InvocationParameterArray and InvocationParameterArrayOutput values.
// You can construct a concrete instance of `InvocationParameterArrayInput` via:
//
//	InvocationParameterArray{ InvocationParameterArgs{...} }
type InvocationParameterArrayInput interface {
	pulumi.Input

	ToInvocationParameterArrayOutput() InvocationParameterArrayOutput
	ToInvocationParameterArrayOutputWithContext(context.Context) InvocationParameterArrayOutput
}

type InvocationParameterArray []InvocationParameterInput

func (InvocationParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationParameter)(nil)).Elem()
}

func (i InvocationParameterArray) ToInvocationParameterArrayOutput() InvocationParameterArrayOutput {
	return i.ToInvocationParameterArrayOutputWithContext(context.Background())
}

func (i InvocationParameterArray) ToInvocationParameterArrayOutputWithContext(ctx context.Context) InvocationParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationParameterArrayOutput)
}

type InvocationParameterOutput struct{ *pulumi.OutputState }

func (InvocationParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationParameter)(nil)).Elem()
}

func (o InvocationParameterOutput) ToInvocationParameterOutput() InvocationParameterOutput {
	return o
}

func (o InvocationParameterOutput) ToInvocationParameterOutputWithContext(ctx context.Context) InvocationParameterOutput {
	return o
}

// The name of the parameter.
func (o InvocationParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationParameter) string { return v.Name }).(pulumi.StringOutput)
}

// The value of the parameter.
func (o InvocationParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationParameter) string { return v.Value }).(pulumi.StringOutput)
}

type InvocationParameterArrayOutput struct{ *pulumi.OutputState }

func (InvocationParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationParameter)(nil)).Elem()
}

func (o InvocationParameterArrayOutput) ToInvocationParameterArrayOutput() InvocationParameterArrayOutput {
	return o
}

func (o InvocationParameterArrayOutput) ToInvocationParameterArrayOutputWithContext(ctx context.Context) InvocationParameterArrayOutput {
	return o
}

func (o InvocationParameterArrayOutput) Index(i pulumi.IntInput) InvocationParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationParameter {
		return vs[0].([]InvocationParameter)[vs[1].(int)]
	}).(InvocationParameterOutput)
}

type InvocationResultsInvocationResult struct {
	// The id of ecs command.
	CommandId string `pulumi:"commandId"`
	// The end time of the ecs invocation in the instance.
	EndTime string `pulumi:"endTime"`
	// The error code of the ecs invocation.
	ErrorCode string `pulumi:"errorCode"`
	// The error message of the ecs invocation.
	ErrorMessage string `pulumi:"errorMessage"`
	// The exit code of the ecs command.
	ExitCode int `pulumi:"exitCode"`
	// The id of the ecs invocation result.
	Id string `pulumi:"id"`
	// The id of ecs instance.
	InstanceId string `pulumi:"instanceId"`
	// The id of ecs invocation.
	InvocationId string `pulumi:"invocationId"`
	// The id of the ecs invocation result.
	InvocationResultId string `pulumi:"invocationResultId"`
	// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
	InvocationResultStatus string `pulumi:"invocationResultStatus"`
	// The base64 encoded output message of the ecs invocation.
	Output string `pulumi:"output"`
	// The start time of the ecs invocation in the instance.
	StartTime string `pulumi:"startTime"`
	// The username of the ecs command.
	Username string `pulumi:"username"`
}

// InvocationResultsInvocationResultInput is an input type that accepts InvocationResultsInvocationResultArgs and InvocationResultsInvocationResultOutput values.
// You can construct a concrete instance of `InvocationResultsInvocationResultInput` via:
//
//	InvocationResultsInvocationResultArgs{...}
type InvocationResultsInvocationResultInput interface {
	pulumi.Input

	ToInvocationResultsInvocationResultOutput() InvocationResultsInvocationResultOutput
	ToInvocationResultsInvocationResultOutputWithContext(context.Context) InvocationResultsInvocationResultOutput
}

type InvocationResultsInvocationResultArgs struct {
	// The id of ecs command.
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// The end time of the ecs invocation in the instance.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The error code of the ecs invocation.
	ErrorCode pulumi.StringInput `pulumi:"errorCode"`
	// The error message of the ecs invocation.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// The exit code of the ecs command.
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// The id of the ecs invocation result.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of ecs instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The id of ecs invocation.
	InvocationId pulumi.StringInput `pulumi:"invocationId"`
	// The id of the ecs invocation result.
	InvocationResultId pulumi.StringInput `pulumi:"invocationResultId"`
	// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
	InvocationResultStatus pulumi.StringInput `pulumi:"invocationResultStatus"`
	// The base64 encoded output message of the ecs invocation.
	Output pulumi.StringInput `pulumi:"output"`
	// The start time of the ecs invocation in the instance.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The username of the ecs command.
	Username pulumi.StringInput `pulumi:"username"`
}

func (InvocationResultsInvocationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationResultsInvocationResult)(nil)).Elem()
}

func (i InvocationResultsInvocationResultArgs) ToInvocationResultsInvocationResultOutput() InvocationResultsInvocationResultOutput {
	return i.ToInvocationResultsInvocationResultOutputWithContext(context.Background())
}

func (i InvocationResultsInvocationResultArgs) ToInvocationResultsInvocationResultOutputWithContext(ctx context.Context) InvocationResultsInvocationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationResultsInvocationResultOutput)
}

// InvocationResultsInvocationResultArrayInput is an input type that accepts InvocationResultsInvocationResultArray and InvocationResultsInvocationResultArrayOutput values.
// You can construct a concrete instance of `InvocationResultsInvocationResultArrayInput` via:
//
//	InvocationResultsInvocationResultArray{ InvocationResultsInvocationResultArgs{...} }
type InvocationResultsInvocationResultArrayInput interface {
	pulumi.Input

	ToInvocationResultsInvocationResultArrayOutput() InvocationResultsInvocationResultArrayOutput
	ToInvocationResultsInvocationResultArrayOutputWithContext(context.Context) InvocationResultsInvocationResultArrayOutput
}

type InvocationResultsInvocationResultArray []InvocationResultsInvocationResultInput

func (InvocationResultsInvocationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationResultsInvocationResult)(nil)).Elem()
}

func (i InvocationResultsInvocationResultArray) ToInvocationResultsInvocationResultArrayOutput() InvocationResultsInvocationResultArrayOutput {
	return i.ToInvocationResultsInvocationResultArrayOutputWithContext(context.Background())
}

func (i InvocationResultsInvocationResultArray) ToInvocationResultsInvocationResultArrayOutputWithContext(ctx context.Context) InvocationResultsInvocationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationResultsInvocationResultArrayOutput)
}

type InvocationResultsInvocationResultOutput struct{ *pulumi.OutputState }

func (InvocationResultsInvocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationResultsInvocationResult)(nil)).Elem()
}

func (o InvocationResultsInvocationResultOutput) ToInvocationResultsInvocationResultOutput() InvocationResultsInvocationResultOutput {
	return o
}

func (o InvocationResultsInvocationResultOutput) ToInvocationResultsInvocationResultOutputWithContext(ctx context.Context) InvocationResultsInvocationResultOutput {
	return o
}

// The id of ecs command.
func (o InvocationResultsInvocationResultOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.CommandId }).(pulumi.StringOutput)
}

// The end time of the ecs invocation in the instance.
func (o InvocationResultsInvocationResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// The error code of the ecs invocation.
func (o InvocationResultsInvocationResultOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// The error message of the ecs invocation.
func (o InvocationResultsInvocationResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The exit code of the ecs command.
func (o InvocationResultsInvocationResultOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) int { return v.ExitCode }).(pulumi.IntOutput)
}

// The id of the ecs invocation result.
func (o InvocationResultsInvocationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of ecs instance.
func (o InvocationResultsInvocationResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The id of ecs invocation.
func (o InvocationResultsInvocationResultOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.InvocationId }).(pulumi.StringOutput)
}

// The id of the ecs invocation result.
func (o InvocationResultsInvocationResultOutput) InvocationResultId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.InvocationResultId }).(pulumi.StringOutput)
}

// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
func (o InvocationResultsInvocationResultOutput) InvocationResultStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.InvocationResultStatus }).(pulumi.StringOutput)
}

// The base64 encoded output message of the ecs invocation.
func (o InvocationResultsInvocationResultOutput) Output() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.Output }).(pulumi.StringOutput)
}

// The start time of the ecs invocation in the instance.
func (o InvocationResultsInvocationResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// The username of the ecs command.
func (o InvocationResultsInvocationResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationResultsInvocationResult) string { return v.Username }).(pulumi.StringOutput)
}

type InvocationResultsInvocationResultArrayOutput struct{ *pulumi.OutputState }

func (InvocationResultsInvocationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationResultsInvocationResult)(nil)).Elem()
}

func (o InvocationResultsInvocationResultArrayOutput) ToInvocationResultsInvocationResultArrayOutput() InvocationResultsInvocationResultArrayOutput {
	return o
}

func (o InvocationResultsInvocationResultArrayOutput) ToInvocationResultsInvocationResultArrayOutputWithContext(ctx context.Context) InvocationResultsInvocationResultArrayOutput {
	return o
}

func (o InvocationResultsInvocationResultArrayOutput) Index(i pulumi.IntInput) InvocationResultsInvocationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationResultsInvocationResult {
		return vs[0].([]InvocationResultsInvocationResult)[vs[1].(int)]
	}).(InvocationResultsInvocationResultOutput)
}

type InvocationTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InvocationTagInput is an input type that accepts InvocationTagArgs and InvocationTagOutput values.
// You can construct a concrete instance of `InvocationTagInput` via:
//
//	InvocationTagArgs{...}
type InvocationTagInput interface {
	pulumi.Input

	ToInvocationTagOutput() InvocationTagOutput
	ToInvocationTagOutputWithContext(context.Context) InvocationTagOutput
}

type InvocationTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InvocationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationTag)(nil)).Elem()
}

func (i InvocationTagArgs) ToInvocationTagOutput() InvocationTagOutput {
	return i.ToInvocationTagOutputWithContext(context.Background())
}

func (i InvocationTagArgs) ToInvocationTagOutputWithContext(ctx context.Context) InvocationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationTagOutput)
}

// InvocationTagArrayInput is an input type that accepts InvocationTagArray and InvocationTagArrayOutput values.
// You can construct a concrete instance of `InvocationTagArrayInput` via:
//
//	InvocationTagArray{ InvocationTagArgs{...} }
type InvocationTagArrayInput interface {
	pulumi.Input

	ToInvocationTagArrayOutput() InvocationTagArrayOutput
	ToInvocationTagArrayOutputWithContext(context.Context) InvocationTagArrayOutput
}

type InvocationTagArray []InvocationTagInput

func (InvocationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationTag)(nil)).Elem()
}

func (i InvocationTagArray) ToInvocationTagArrayOutput() InvocationTagArrayOutput {
	return i.ToInvocationTagArrayOutputWithContext(context.Background())
}

func (i InvocationTagArray) ToInvocationTagArrayOutputWithContext(ctx context.Context) InvocationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationTagArrayOutput)
}

type InvocationTagOutput struct{ *pulumi.OutputState }

func (InvocationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationTag)(nil)).Elem()
}

func (o InvocationTagOutput) ToInvocationTagOutput() InvocationTagOutput {
	return o
}

func (o InvocationTagOutput) ToInvocationTagOutputWithContext(ctx context.Context) InvocationTagOutput {
	return o
}

// The Key of Tags.
func (o InvocationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InvocationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationTag) string { return v.Value }).(pulumi.StringOutput)
}

type InvocationTagArrayOutput struct{ *pulumi.OutputState }

func (InvocationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationTag)(nil)).Elem()
}

func (o InvocationTagArrayOutput) ToInvocationTagArrayOutput() InvocationTagArrayOutput {
	return o
}

func (o InvocationTagArrayOutput) ToInvocationTagArrayOutputWithContext(ctx context.Context) InvocationTagArrayOutput {
	return o
}

func (o InvocationTagArrayOutput) Index(i pulumi.IntInput) InvocationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationTag {
		return vs[0].([]InvocationTag)[vs[1].(int)]
	}).(InvocationTagOutput)
}

type InvocationsInvocation struct {
	// The base64 encoded content of the ecs command.
	CommandContent string `pulumi:"commandContent"`
	// The description of the ecs command.
	CommandDescription string `pulumi:"commandDescription"`
	// The id of ecs command.
	CommandId string `pulumi:"commandId"`
	// The name of ecs command. This field support fuzzy query.
	CommandName string `pulumi:"commandName"`
	// The provider of the ecs command.
	CommandProvider string `pulumi:"commandProvider"`
	// The type of ecs command. Valid values: `Shell`.
	CommandType string `pulumi:"commandType"`
	// The end time of the ecs invocation.
	EndTime string `pulumi:"endTime"`
	// The frequency of the ecs invocation.
	Frequency string `pulumi:"frequency"`
	// The id of the ecs invocation.
	Id string `pulumi:"id"`
	// The list of ECS instance IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// The instance number of the ecs invocation.
	InstanceNumber int `pulumi:"instanceNumber"`
	// The description of the ecs invocation.
	InvocationDescription string `pulumi:"invocationDescription"`
	// The id of ecs invocation.
	InvocationId string `pulumi:"invocationId"`
	// The name of ecs invocation. This field support fuzzy query.
	InvocationName string `pulumi:"invocationName"`
	// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
	InvocationStatus string `pulumi:"invocationStatus"`
	// The launch time of the ecs invocation.
	LaunchTime string `pulumi:"launchTime"`
	// The custom parameters of the ecs invocation.
	Parameters string `pulumi:"parameters"`
	// The project name of ecs invocation.
	ProjectName string `pulumi:"projectName"`
	// The recurrence end time of the ecs invocation.
	RecurrenceEndTime string `pulumi:"recurrenceEndTime"`
	// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode string `pulumi:"repeatMode"`
	// The start time of the ecs invocation.
	StartTime string `pulumi:"startTime"`
	// Tags.
	Tags []InvocationsInvocationTag `pulumi:"tags"`
	// The timeout of the ecs command.
	Timeout int `pulumi:"timeout"`
	// The username of the ecs command.
	Username string `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir string `pulumi:"workingDir"`
}

// InvocationsInvocationInput is an input type that accepts InvocationsInvocationArgs and InvocationsInvocationOutput values.
// You can construct a concrete instance of `InvocationsInvocationInput` via:
//
//	InvocationsInvocationArgs{...}
type InvocationsInvocationInput interface {
	pulumi.Input

	ToInvocationsInvocationOutput() InvocationsInvocationOutput
	ToInvocationsInvocationOutputWithContext(context.Context) InvocationsInvocationOutput
}

type InvocationsInvocationArgs struct {
	// The base64 encoded content of the ecs command.
	CommandContent pulumi.StringInput `pulumi:"commandContent"`
	// The description of the ecs command.
	CommandDescription pulumi.StringInput `pulumi:"commandDescription"`
	// The id of ecs command.
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// The name of ecs command. This field support fuzzy query.
	CommandName pulumi.StringInput `pulumi:"commandName"`
	// The provider of the ecs command.
	CommandProvider pulumi.StringInput `pulumi:"commandProvider"`
	// The type of ecs command. Valid values: `Shell`.
	CommandType pulumi.StringInput `pulumi:"commandType"`
	// The end time of the ecs invocation.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The frequency of the ecs invocation.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The id of the ecs invocation.
	Id pulumi.StringInput `pulumi:"id"`
	// The list of ECS instance IDs.
	InstanceIds pulumi.StringArrayInput `pulumi:"instanceIds"`
	// The instance number of the ecs invocation.
	InstanceNumber pulumi.IntInput `pulumi:"instanceNumber"`
	// The description of the ecs invocation.
	InvocationDescription pulumi.StringInput `pulumi:"invocationDescription"`
	// The id of ecs invocation.
	InvocationId pulumi.StringInput `pulumi:"invocationId"`
	// The name of ecs invocation. This field support fuzzy query.
	InvocationName pulumi.StringInput `pulumi:"invocationName"`
	// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
	InvocationStatus pulumi.StringInput `pulumi:"invocationStatus"`
	// The launch time of the ecs invocation.
	LaunchTime pulumi.StringInput `pulumi:"launchTime"`
	// The custom parameters of the ecs invocation.
	Parameters pulumi.StringInput `pulumi:"parameters"`
	// The project name of ecs invocation.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The recurrence end time of the ecs invocation.
	RecurrenceEndTime pulumi.StringInput `pulumi:"recurrenceEndTime"`
	// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode pulumi.StringInput `pulumi:"repeatMode"`
	// The start time of the ecs invocation.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Tags.
	Tags InvocationsInvocationTagArrayInput `pulumi:"tags"`
	// The timeout of the ecs command.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The username of the ecs command.
	Username pulumi.StringInput `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`
}

func (InvocationsInvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationsInvocation)(nil)).Elem()
}

func (i InvocationsInvocationArgs) ToInvocationsInvocationOutput() InvocationsInvocationOutput {
	return i.ToInvocationsInvocationOutputWithContext(context.Background())
}

func (i InvocationsInvocationArgs) ToInvocationsInvocationOutputWithContext(ctx context.Context) InvocationsInvocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationsInvocationOutput)
}

// InvocationsInvocationArrayInput is an input type that accepts InvocationsInvocationArray and InvocationsInvocationArrayOutput values.
// You can construct a concrete instance of `InvocationsInvocationArrayInput` via:
//
//	InvocationsInvocationArray{ InvocationsInvocationArgs{...} }
type InvocationsInvocationArrayInput interface {
	pulumi.Input

	ToInvocationsInvocationArrayOutput() InvocationsInvocationArrayOutput
	ToInvocationsInvocationArrayOutputWithContext(context.Context) InvocationsInvocationArrayOutput
}

type InvocationsInvocationArray []InvocationsInvocationInput

func (InvocationsInvocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationsInvocation)(nil)).Elem()
}

func (i InvocationsInvocationArray) ToInvocationsInvocationArrayOutput() InvocationsInvocationArrayOutput {
	return i.ToInvocationsInvocationArrayOutputWithContext(context.Background())
}

func (i InvocationsInvocationArray) ToInvocationsInvocationArrayOutputWithContext(ctx context.Context) InvocationsInvocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationsInvocationArrayOutput)
}

type InvocationsInvocationOutput struct{ *pulumi.OutputState }

func (InvocationsInvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationsInvocation)(nil)).Elem()
}

func (o InvocationsInvocationOutput) ToInvocationsInvocationOutput() InvocationsInvocationOutput {
	return o
}

func (o InvocationsInvocationOutput) ToInvocationsInvocationOutputWithContext(ctx context.Context) InvocationsInvocationOutput {
	return o
}

// The base64 encoded content of the ecs command.
func (o InvocationsInvocationOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandContent }).(pulumi.StringOutput)
}

// The description of the ecs command.
func (o InvocationsInvocationOutput) CommandDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandDescription }).(pulumi.StringOutput)
}

// The id of ecs command.
func (o InvocationsInvocationOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandId }).(pulumi.StringOutput)
}

// The name of ecs command. This field support fuzzy query.
func (o InvocationsInvocationOutput) CommandName() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandName }).(pulumi.StringOutput)
}

// The provider of the ecs command.
func (o InvocationsInvocationOutput) CommandProvider() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandProvider }).(pulumi.StringOutput)
}

// The type of ecs command. Valid values: `Shell`.
func (o InvocationsInvocationOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.CommandType }).(pulumi.StringOutput)
}

// The end time of the ecs invocation.
func (o InvocationsInvocationOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.EndTime }).(pulumi.StringOutput)
}

// The frequency of the ecs invocation.
func (o InvocationsInvocationOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.Frequency }).(pulumi.StringOutput)
}

// The id of the ecs invocation.
func (o InvocationsInvocationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.Id }).(pulumi.StringOutput)
}

// The list of ECS instance IDs.
func (o InvocationsInvocationOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InvocationsInvocation) []string { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// The instance number of the ecs invocation.
func (o InvocationsInvocationOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InvocationsInvocation) int { return v.InstanceNumber }).(pulumi.IntOutput)
}

// The description of the ecs invocation.
func (o InvocationsInvocationOutput) InvocationDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.InvocationDescription }).(pulumi.StringOutput)
}

// The id of ecs invocation.
func (o InvocationsInvocationOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.InvocationId }).(pulumi.StringOutput)
}

// The name of ecs invocation. This field support fuzzy query.
func (o InvocationsInvocationOutput) InvocationName() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.InvocationName }).(pulumi.StringOutput)
}

// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
func (o InvocationsInvocationOutput) InvocationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.InvocationStatus }).(pulumi.StringOutput)
}

// The launch time of the ecs invocation.
func (o InvocationsInvocationOutput) LaunchTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.LaunchTime }).(pulumi.StringOutput)
}

// The custom parameters of the ecs invocation.
func (o InvocationsInvocationOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.Parameters }).(pulumi.StringOutput)
}

// The project name of ecs invocation.
func (o InvocationsInvocationOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The recurrence end time of the ecs invocation.
func (o InvocationsInvocationOutput) RecurrenceEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.RecurrenceEndTime }).(pulumi.StringOutput)
}

// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
func (o InvocationsInvocationOutput) RepeatMode() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.RepeatMode }).(pulumi.StringOutput)
}

// The start time of the ecs invocation.
func (o InvocationsInvocationOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.StartTime }).(pulumi.StringOutput)
}

// Tags.
func (o InvocationsInvocationOutput) Tags() InvocationsInvocationTagArrayOutput {
	return o.ApplyT(func(v InvocationsInvocation) []InvocationsInvocationTag { return v.Tags }).(InvocationsInvocationTagArrayOutput)
}

// The timeout of the ecs command.
func (o InvocationsInvocationOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v InvocationsInvocation) int { return v.Timeout }).(pulumi.IntOutput)
}

// The username of the ecs command.
func (o InvocationsInvocationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.Username }).(pulumi.StringOutput)
}

// The working directory of the ecs command.
func (o InvocationsInvocationOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocation) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type InvocationsInvocationArrayOutput struct{ *pulumi.OutputState }

func (InvocationsInvocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationsInvocation)(nil)).Elem()
}

func (o InvocationsInvocationArrayOutput) ToInvocationsInvocationArrayOutput() InvocationsInvocationArrayOutput {
	return o
}

func (o InvocationsInvocationArrayOutput) ToInvocationsInvocationArrayOutputWithContext(ctx context.Context) InvocationsInvocationArrayOutput {
	return o
}

func (o InvocationsInvocationArrayOutput) Index(i pulumi.IntInput) InvocationsInvocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationsInvocation {
		return vs[0].([]InvocationsInvocation)[vs[1].(int)]
	}).(InvocationsInvocationOutput)
}

type InvocationsInvocationTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InvocationsInvocationTagInput is an input type that accepts InvocationsInvocationTagArgs and InvocationsInvocationTagOutput values.
// You can construct a concrete instance of `InvocationsInvocationTagInput` via:
//
//	InvocationsInvocationTagArgs{...}
type InvocationsInvocationTagInput interface {
	pulumi.Input

	ToInvocationsInvocationTagOutput() InvocationsInvocationTagOutput
	ToInvocationsInvocationTagOutputWithContext(context.Context) InvocationsInvocationTagOutput
}

type InvocationsInvocationTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InvocationsInvocationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationsInvocationTag)(nil)).Elem()
}

func (i InvocationsInvocationTagArgs) ToInvocationsInvocationTagOutput() InvocationsInvocationTagOutput {
	return i.ToInvocationsInvocationTagOutputWithContext(context.Background())
}

func (i InvocationsInvocationTagArgs) ToInvocationsInvocationTagOutputWithContext(ctx context.Context) InvocationsInvocationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationsInvocationTagOutput)
}

// InvocationsInvocationTagArrayInput is an input type that accepts InvocationsInvocationTagArray and InvocationsInvocationTagArrayOutput values.
// You can construct a concrete instance of `InvocationsInvocationTagArrayInput` via:
//
//	InvocationsInvocationTagArray{ InvocationsInvocationTagArgs{...} }
type InvocationsInvocationTagArrayInput interface {
	pulumi.Input

	ToInvocationsInvocationTagArrayOutput() InvocationsInvocationTagArrayOutput
	ToInvocationsInvocationTagArrayOutputWithContext(context.Context) InvocationsInvocationTagArrayOutput
}

type InvocationsInvocationTagArray []InvocationsInvocationTagInput

func (InvocationsInvocationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationsInvocationTag)(nil)).Elem()
}

func (i InvocationsInvocationTagArray) ToInvocationsInvocationTagArrayOutput() InvocationsInvocationTagArrayOutput {
	return i.ToInvocationsInvocationTagArrayOutputWithContext(context.Background())
}

func (i InvocationsInvocationTagArray) ToInvocationsInvocationTagArrayOutputWithContext(ctx context.Context) InvocationsInvocationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationsInvocationTagArrayOutput)
}

type InvocationsInvocationTagOutput struct{ *pulumi.OutputState }

func (InvocationsInvocationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationsInvocationTag)(nil)).Elem()
}

func (o InvocationsInvocationTagOutput) ToInvocationsInvocationTagOutput() InvocationsInvocationTagOutput {
	return o
}

func (o InvocationsInvocationTagOutput) ToInvocationsInvocationTagOutputWithContext(ctx context.Context) InvocationsInvocationTagOutput {
	return o
}

// The Key of Tags.
func (o InvocationsInvocationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocationTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InvocationsInvocationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsInvocationTag) string { return v.Value }).(pulumi.StringOutput)
}

type InvocationsInvocationTagArrayOutput struct{ *pulumi.OutputState }

func (InvocationsInvocationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationsInvocationTag)(nil)).Elem()
}

func (o InvocationsInvocationTagArrayOutput) ToInvocationsInvocationTagArrayOutput() InvocationsInvocationTagArrayOutput {
	return o
}

func (o InvocationsInvocationTagArrayOutput) ToInvocationsInvocationTagArrayOutputWithContext(ctx context.Context) InvocationsInvocationTagArrayOutput {
	return o
}

func (o InvocationsInvocationTagArrayOutput) Index(i pulumi.IntInput) InvocationsInvocationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationsInvocationTag {
		return vs[0].([]InvocationsInvocationTag)[vs[1].(int)]
	}).(InvocationsInvocationTagOutput)
}

type InvocationsTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InvocationsTagInput is an input type that accepts InvocationsTagArgs and InvocationsTagOutput values.
// You can construct a concrete instance of `InvocationsTagInput` via:
//
//	InvocationsTagArgs{...}
type InvocationsTagInput interface {
	pulumi.Input

	ToInvocationsTagOutput() InvocationsTagOutput
	ToInvocationsTagOutputWithContext(context.Context) InvocationsTagOutput
}

type InvocationsTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InvocationsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationsTag)(nil)).Elem()
}

func (i InvocationsTagArgs) ToInvocationsTagOutput() InvocationsTagOutput {
	return i.ToInvocationsTagOutputWithContext(context.Background())
}

func (i InvocationsTagArgs) ToInvocationsTagOutputWithContext(ctx context.Context) InvocationsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationsTagOutput)
}

// InvocationsTagArrayInput is an input type that accepts InvocationsTagArray and InvocationsTagArrayOutput values.
// You can construct a concrete instance of `InvocationsTagArrayInput` via:
//
//	InvocationsTagArray{ InvocationsTagArgs{...} }
type InvocationsTagArrayInput interface {
	pulumi.Input

	ToInvocationsTagArrayOutput() InvocationsTagArrayOutput
	ToInvocationsTagArrayOutputWithContext(context.Context) InvocationsTagArrayOutput
}

type InvocationsTagArray []InvocationsTagInput

func (InvocationsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationsTag)(nil)).Elem()
}

func (i InvocationsTagArray) ToInvocationsTagArrayOutput() InvocationsTagArrayOutput {
	return i.ToInvocationsTagArrayOutputWithContext(context.Background())
}

func (i InvocationsTagArray) ToInvocationsTagArrayOutputWithContext(ctx context.Context) InvocationsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationsTagArrayOutput)
}

type InvocationsTagOutput struct{ *pulumi.OutputState }

func (InvocationsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InvocationsTag)(nil)).Elem()
}

func (o InvocationsTagOutput) ToInvocationsTagOutput() InvocationsTagOutput {
	return o
}

func (o InvocationsTagOutput) ToInvocationsTagOutputWithContext(ctx context.Context) InvocationsTagOutput {
	return o
}

// The Key of Tags.
func (o InvocationsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InvocationsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InvocationsTag) string { return v.Value }).(pulumi.StringOutput)
}

type InvocationsTagArrayOutput struct{ *pulumi.OutputState }

func (InvocationsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InvocationsTag)(nil)).Elem()
}

func (o InvocationsTagArrayOutput) ToInvocationsTagArrayOutput() InvocationsTagArrayOutput {
	return o
}

func (o InvocationsTagArrayOutput) ToInvocationsTagArrayOutputWithContext(ctx context.Context) InvocationsTagArrayOutput {
	return o
}

func (o InvocationsTagArrayOutput) Index(i pulumi.IntInput) InvocationsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InvocationsTag {
		return vs[0].([]InvocationsTag)[vs[1].(int)]
	}).(InvocationsTagOutput)
}

type KeyPairsKeyPair struct {
	// The creation time of key pair.
	CreatedAt string `pulumi:"createdAt"`
	// The description of key pair.
	Description string `pulumi:"description"`
	// The finger print info.
	FingerPrint string `pulumi:"fingerPrint"`
	// The id of key pair.
	Id string `pulumi:"id"`
	// The id of key pair.
	KeyPairId string `pulumi:"keyPairId"`
	// Name of key pair.
	KeyPairName string `pulumi:"keyPairName"`
	// The update time of key pair.
	UpdatedAt string `pulumi:"updatedAt"`
}

// KeyPairsKeyPairInput is an input type that accepts KeyPairsKeyPairArgs and KeyPairsKeyPairOutput values.
// You can construct a concrete instance of `KeyPairsKeyPairInput` via:
//
//	KeyPairsKeyPairArgs{...}
type KeyPairsKeyPairInput interface {
	pulumi.Input

	ToKeyPairsKeyPairOutput() KeyPairsKeyPairOutput
	ToKeyPairsKeyPairOutputWithContext(context.Context) KeyPairsKeyPairOutput
}

type KeyPairsKeyPairArgs struct {
	// The creation time of key pair.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of key pair.
	Description pulumi.StringInput `pulumi:"description"`
	// The finger print info.
	FingerPrint pulumi.StringInput `pulumi:"fingerPrint"`
	// The id of key pair.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of key pair.
	KeyPairId pulumi.StringInput `pulumi:"keyPairId"`
	// Name of key pair.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The update time of key pair.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (KeyPairsKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPairsKeyPair)(nil)).Elem()
}

func (i KeyPairsKeyPairArgs) ToKeyPairsKeyPairOutput() KeyPairsKeyPairOutput {
	return i.ToKeyPairsKeyPairOutputWithContext(context.Background())
}

func (i KeyPairsKeyPairArgs) ToKeyPairsKeyPairOutputWithContext(ctx context.Context) KeyPairsKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairsKeyPairOutput)
}

// KeyPairsKeyPairArrayInput is an input type that accepts KeyPairsKeyPairArray and KeyPairsKeyPairArrayOutput values.
// You can construct a concrete instance of `KeyPairsKeyPairArrayInput` via:
//
//	KeyPairsKeyPairArray{ KeyPairsKeyPairArgs{...} }
type KeyPairsKeyPairArrayInput interface {
	pulumi.Input

	ToKeyPairsKeyPairArrayOutput() KeyPairsKeyPairArrayOutput
	ToKeyPairsKeyPairArrayOutputWithContext(context.Context) KeyPairsKeyPairArrayOutput
}

type KeyPairsKeyPairArray []KeyPairsKeyPairInput

func (KeyPairsKeyPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyPairsKeyPair)(nil)).Elem()
}

func (i KeyPairsKeyPairArray) ToKeyPairsKeyPairArrayOutput() KeyPairsKeyPairArrayOutput {
	return i.ToKeyPairsKeyPairArrayOutputWithContext(context.Background())
}

func (i KeyPairsKeyPairArray) ToKeyPairsKeyPairArrayOutputWithContext(ctx context.Context) KeyPairsKeyPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KeyPairsKeyPairArrayOutput)
}

type KeyPairsKeyPairOutput struct{ *pulumi.OutputState }

func (KeyPairsKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KeyPairsKeyPair)(nil)).Elem()
}

func (o KeyPairsKeyPairOutput) ToKeyPairsKeyPairOutput() KeyPairsKeyPairOutput {
	return o
}

func (o KeyPairsKeyPairOutput) ToKeyPairsKeyPairOutputWithContext(ctx context.Context) KeyPairsKeyPairOutput {
	return o
}

// The creation time of key pair.
func (o KeyPairsKeyPairOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of key pair.
func (o KeyPairsKeyPairOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.Description }).(pulumi.StringOutput)
}

// The finger print info.
func (o KeyPairsKeyPairOutput) FingerPrint() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.FingerPrint }).(pulumi.StringOutput)
}

// The id of key pair.
func (o KeyPairsKeyPairOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.Id }).(pulumi.StringOutput)
}

// The id of key pair.
func (o KeyPairsKeyPairOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.KeyPairId }).(pulumi.StringOutput)
}

// Name of key pair.
func (o KeyPairsKeyPairOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The update time of key pair.
func (o KeyPairsKeyPairOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v KeyPairsKeyPair) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type KeyPairsKeyPairArrayOutput struct{ *pulumi.OutputState }

func (KeyPairsKeyPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KeyPairsKeyPair)(nil)).Elem()
}

func (o KeyPairsKeyPairArrayOutput) ToKeyPairsKeyPairArrayOutput() KeyPairsKeyPairArrayOutput {
	return o
}

func (o KeyPairsKeyPairArrayOutput) ToKeyPairsKeyPairArrayOutputWithContext(ctx context.Context) KeyPairsKeyPairArrayOutput {
	return o
}

func (o KeyPairsKeyPairArrayOutput) Index(i pulumi.IntInput) KeyPairsKeyPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KeyPairsKeyPair {
		return vs[0].([]KeyPairsKeyPair)[vs[1].(int)]
	}).(KeyPairsKeyPairOutput)
}

type LaunchTemplateNetworkInterface struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId *string `pulumi:"subnetId"`
}

// LaunchTemplateNetworkInterfaceInput is an input type that accepts LaunchTemplateNetworkInterfaceArgs and LaunchTemplateNetworkInterfaceOutput values.
// You can construct a concrete instance of `LaunchTemplateNetworkInterfaceInput` via:
//
//	LaunchTemplateNetworkInterfaceArgs{...}
type LaunchTemplateNetworkInterfaceInput interface {
	pulumi.Input

	ToLaunchTemplateNetworkInterfaceOutput() LaunchTemplateNetworkInterfaceOutput
	ToLaunchTemplateNetworkInterfaceOutputWithContext(context.Context) LaunchTemplateNetworkInterfaceOutput
}

type LaunchTemplateNetworkInterfaceArgs struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (LaunchTemplateNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i LaunchTemplateNetworkInterfaceArgs) ToLaunchTemplateNetworkInterfaceOutput() LaunchTemplateNetworkInterfaceOutput {
	return i.ToLaunchTemplateNetworkInterfaceOutputWithContext(context.Background())
}

func (i LaunchTemplateNetworkInterfaceArgs) ToLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) LaunchTemplateNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplateNetworkInterfaceOutput)
}

// LaunchTemplateNetworkInterfaceArrayInput is an input type that accepts LaunchTemplateNetworkInterfaceArray and LaunchTemplateNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `LaunchTemplateNetworkInterfaceArrayInput` via:
//
//	LaunchTemplateNetworkInterfaceArray{ LaunchTemplateNetworkInterfaceArgs{...} }
type LaunchTemplateNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplateNetworkInterfaceArrayOutput
	ToLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Context) LaunchTemplateNetworkInterfaceArrayOutput
}

type LaunchTemplateNetworkInterfaceArray []LaunchTemplateNetworkInterfaceInput

func (LaunchTemplateNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i LaunchTemplateNetworkInterfaceArray) ToLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplateNetworkInterfaceArrayOutput {
	return i.ToLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i LaunchTemplateNetworkInterfaceArray) ToLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) LaunchTemplateNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplateNetworkInterfaceArrayOutput)
}

type LaunchTemplateNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (LaunchTemplateNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o LaunchTemplateNetworkInterfaceOutput) ToLaunchTemplateNetworkInterfaceOutput() LaunchTemplateNetworkInterfaceOutput {
	return o
}

func (o LaunchTemplateNetworkInterfaceOutput) ToLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) LaunchTemplateNetworkInterfaceOutput {
	return o
}

// The security group ID associated with the NIC.
func (o LaunchTemplateNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LaunchTemplateNetworkInterface) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
func (o LaunchTemplateNetworkInterfaceOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchTemplateNetworkInterface) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type LaunchTemplateNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplateNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o LaunchTemplateNetworkInterfaceArrayOutput) ToLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o LaunchTemplateNetworkInterfaceArrayOutput) ToLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) LaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o LaunchTemplateNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) LaunchTemplateNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplateNetworkInterface {
		return vs[0].([]LaunchTemplateNetworkInterface)[vs[1].(int)]
	}).(LaunchTemplateNetworkInterfaceOutput)
}

type LaunchTemplateVolume struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance *bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size *int `pulumi:"size"`
	// The type of volume.
	VolumeType *string `pulumi:"volumeType"`
}

// LaunchTemplateVolumeInput is an input type that accepts LaunchTemplateVolumeArgs and LaunchTemplateVolumeOutput values.
// You can construct a concrete instance of `LaunchTemplateVolumeInput` via:
//
//	LaunchTemplateVolumeArgs{...}
type LaunchTemplateVolumeInput interface {
	pulumi.Input

	ToLaunchTemplateVolumeOutput() LaunchTemplateVolumeOutput
	ToLaunchTemplateVolumeOutputWithContext(context.Context) LaunchTemplateVolumeOutput
}

type LaunchTemplateVolumeArgs struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance pulumi.BoolPtrInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntPtrInput `pulumi:"size"`
	// The type of volume.
	VolumeType pulumi.StringPtrInput `pulumi:"volumeType"`
}

func (LaunchTemplateVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplateVolume)(nil)).Elem()
}

func (i LaunchTemplateVolumeArgs) ToLaunchTemplateVolumeOutput() LaunchTemplateVolumeOutput {
	return i.ToLaunchTemplateVolumeOutputWithContext(context.Background())
}

func (i LaunchTemplateVolumeArgs) ToLaunchTemplateVolumeOutputWithContext(ctx context.Context) LaunchTemplateVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplateVolumeOutput)
}

// LaunchTemplateVolumeArrayInput is an input type that accepts LaunchTemplateVolumeArray and LaunchTemplateVolumeArrayOutput values.
// You can construct a concrete instance of `LaunchTemplateVolumeArrayInput` via:
//
//	LaunchTemplateVolumeArray{ LaunchTemplateVolumeArgs{...} }
type LaunchTemplateVolumeArrayInput interface {
	pulumi.Input

	ToLaunchTemplateVolumeArrayOutput() LaunchTemplateVolumeArrayOutput
	ToLaunchTemplateVolumeArrayOutputWithContext(context.Context) LaunchTemplateVolumeArrayOutput
}

type LaunchTemplateVolumeArray []LaunchTemplateVolumeInput

func (LaunchTemplateVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplateVolume)(nil)).Elem()
}

func (i LaunchTemplateVolumeArray) ToLaunchTemplateVolumeArrayOutput() LaunchTemplateVolumeArrayOutput {
	return i.ToLaunchTemplateVolumeArrayOutputWithContext(context.Background())
}

func (i LaunchTemplateVolumeArray) ToLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) LaunchTemplateVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplateVolumeArrayOutput)
}

type LaunchTemplateVolumeOutput struct{ *pulumi.OutputState }

func (LaunchTemplateVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplateVolume)(nil)).Elem()
}

func (o LaunchTemplateVolumeOutput) ToLaunchTemplateVolumeOutput() LaunchTemplateVolumeOutput {
	return o
}

func (o LaunchTemplateVolumeOutput) ToLaunchTemplateVolumeOutputWithContext(ctx context.Context) LaunchTemplateVolumeOutput {
	return o
}

// The delete with instance flag of volume. Valid values: true, false. Default value: true.
func (o LaunchTemplateVolumeOutput) DeleteWithInstance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LaunchTemplateVolume) *bool { return v.DeleteWithInstance }).(pulumi.BoolPtrOutput)
}

// The size of volume.
func (o LaunchTemplateVolumeOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LaunchTemplateVolume) *int { return v.Size }).(pulumi.IntPtrOutput)
}

// The type of volume.
func (o LaunchTemplateVolumeOutput) VolumeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LaunchTemplateVolume) *string { return v.VolumeType }).(pulumi.StringPtrOutput)
}

type LaunchTemplateVolumeArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplateVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplateVolume)(nil)).Elem()
}

func (o LaunchTemplateVolumeArrayOutput) ToLaunchTemplateVolumeArrayOutput() LaunchTemplateVolumeArrayOutput {
	return o
}

func (o LaunchTemplateVolumeArrayOutput) ToLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) LaunchTemplateVolumeArrayOutput {
	return o
}

func (o LaunchTemplateVolumeArrayOutput) Index(i pulumi.IntInput) LaunchTemplateVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplateVolume {
		return vs[0].([]LaunchTemplateVolume)[vs[1].(int)]
	}).(LaunchTemplateVolumeOutput)
}

type LaunchTemplatesLaunchTemplate struct {
	// The created time of the launch template.
	CreatedAt string `pulumi:"createdAt"`
	// The default version of the launch template.
	DefaultVersionNumber int `pulumi:"defaultVersionNumber"`
	// The description of the instance.
	Description string `pulumi:"description"`
	// The EIP bandwidth which the scaling configuration set.
	EipBandwidth int `pulumi:"eipBandwidth"`
	// The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.
	EipBillingType string `pulumi:"eipBillingType"`
	// The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.
	EipIsp string `pulumi:"eipIsp"`
	// The host name of the instance.
	HostName string `pulumi:"hostName"`
	// The hpc cluster id.
	HpcClusterId string `pulumi:"hpcClusterId"`
	// The id of the launch template.
	Id string `pulumi:"id"`
	// The image id.
	ImageId string `pulumi:"imageId"`
	// The charge type of the instance and volume.
	InstanceChargeType string `pulumi:"instanceChargeType"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
	// When you log in to the instance using the SSH key pair, enter the name of the key pair.
	KeyPairName string `pulumi:"keyPairName"`
	// The latest version of the launch template.
	LatestVersionNumber int `pulumi:"latestVersionNumber"`
	// The id of the launch template.
	LaunchTemplateId string `pulumi:"launchTemplateId"`
	// The name of the launch template.
	LaunchTemplateName string `pulumi:"launchTemplateName"`
	// The list of network interfaces.
	NetworkInterfaces []LaunchTemplatesLaunchTemplateNetworkInterface `pulumi:"networkInterfaces"`
	// Whether to open the security reinforcement.
	SecurityEnhancementStrategy string `pulumi:"securityEnhancementStrategy"`
	// The index of the ordered suffix.
	SuffixIndex int `pulumi:"suffixIndex"`
	// Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.
	UniqueSuffix bool `pulumi:"uniqueSuffix"`
	// The updated time of the launch template.
	UpdatedAt string `pulumi:"updatedAt"`
	// The latest version description of the launch template.
	VersionDescription string `pulumi:"versionDescription"`
	// The list of volume of the scaling configuration.
	Volumes []LaunchTemplatesLaunchTemplateVolume `pulumi:"volumes"`
	// The vpc id.
	VpcId string `pulumi:"vpcId"`
	// The zone ID of the instance.
	ZoneId string `pulumi:"zoneId"`
}

// LaunchTemplatesLaunchTemplateInput is an input type that accepts LaunchTemplatesLaunchTemplateArgs and LaunchTemplatesLaunchTemplateOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateInput` via:
//
//	LaunchTemplatesLaunchTemplateArgs{...}
type LaunchTemplatesLaunchTemplateInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateOutput() LaunchTemplatesLaunchTemplateOutput
	ToLaunchTemplatesLaunchTemplateOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateOutput
}

type LaunchTemplatesLaunchTemplateArgs struct {
	// The created time of the launch template.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The default version of the launch template.
	DefaultVersionNumber pulumi.IntInput `pulumi:"defaultVersionNumber"`
	// The description of the instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The EIP bandwidth which the scaling configuration set.
	EipBandwidth pulumi.IntInput `pulumi:"eipBandwidth"`
	// The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.
	EipBillingType pulumi.StringInput `pulumi:"eipBillingType"`
	// The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.
	EipIsp pulumi.StringInput `pulumi:"eipIsp"`
	// The host name of the instance.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// The hpc cluster id.
	HpcClusterId pulumi.StringInput `pulumi:"hpcClusterId"`
	// The id of the launch template.
	Id pulumi.StringInput `pulumi:"id"`
	// The image id.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The charge type of the instance and volume.
	InstanceChargeType pulumi.StringInput `pulumi:"instanceChargeType"`
	// The name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// When you log in to the instance using the SSH key pair, enter the name of the key pair.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The latest version of the launch template.
	LatestVersionNumber pulumi.IntInput `pulumi:"latestVersionNumber"`
	// The id of the launch template.
	LaunchTemplateId pulumi.StringInput `pulumi:"launchTemplateId"`
	// The name of the launch template.
	LaunchTemplateName pulumi.StringInput `pulumi:"launchTemplateName"`
	// The list of network interfaces.
	NetworkInterfaces LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// Whether to open the security reinforcement.
	SecurityEnhancementStrategy pulumi.StringInput `pulumi:"securityEnhancementStrategy"`
	// The index of the ordered suffix.
	SuffixIndex pulumi.IntInput `pulumi:"suffixIndex"`
	// Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.
	UniqueSuffix pulumi.BoolInput `pulumi:"uniqueSuffix"`
	// The updated time of the launch template.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The latest version description of the launch template.
	VersionDescription pulumi.StringInput `pulumi:"versionDescription"`
	// The list of volume of the scaling configuration.
	Volumes LaunchTemplatesLaunchTemplateVolumeArrayInput `pulumi:"volumes"`
	// The vpc id.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone ID of the instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (LaunchTemplatesLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateArgs) ToLaunchTemplatesLaunchTemplateOutput() LaunchTemplatesLaunchTemplateOutput {
	return i.ToLaunchTemplatesLaunchTemplateOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateArgs) ToLaunchTemplatesLaunchTemplateOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateOutput)
}

// LaunchTemplatesLaunchTemplateArrayInput is an input type that accepts LaunchTemplatesLaunchTemplateArray and LaunchTemplatesLaunchTemplateArrayOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateArrayInput` via:
//
//	LaunchTemplatesLaunchTemplateArray{ LaunchTemplatesLaunchTemplateArgs{...} }
type LaunchTemplatesLaunchTemplateArrayInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateArrayOutput() LaunchTemplatesLaunchTemplateArrayOutput
	ToLaunchTemplatesLaunchTemplateArrayOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateArrayOutput
}

type LaunchTemplatesLaunchTemplateArray []LaunchTemplatesLaunchTemplateInput

func (LaunchTemplatesLaunchTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateArray) ToLaunchTemplatesLaunchTemplateArrayOutput() LaunchTemplatesLaunchTemplateArrayOutput {
	return i.ToLaunchTemplatesLaunchTemplateArrayOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateArray) ToLaunchTemplatesLaunchTemplateArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateArrayOutput)
}

type LaunchTemplatesLaunchTemplateOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateOutput) ToLaunchTemplatesLaunchTemplateOutput() LaunchTemplatesLaunchTemplateOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateOutput) ToLaunchTemplatesLaunchTemplateOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateOutput {
	return o
}

// The created time of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The default version of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) DefaultVersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) int { return v.DefaultVersionNumber }).(pulumi.IntOutput)
}

// The description of the instance.
func (o LaunchTemplatesLaunchTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.Description }).(pulumi.StringOutput)
}

// The EIP bandwidth which the scaling configuration set.
func (o LaunchTemplatesLaunchTemplateOutput) EipBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) int { return v.EipBandwidth }).(pulumi.IntOutput)
}

// The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.
func (o LaunchTemplatesLaunchTemplateOutput) EipBillingType() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.EipBillingType }).(pulumi.StringOutput)
}

// The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.
func (o LaunchTemplatesLaunchTemplateOutput) EipIsp() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.EipIsp }).(pulumi.StringOutput)
}

// The host name of the instance.
func (o LaunchTemplatesLaunchTemplateOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.HostName }).(pulumi.StringOutput)
}

// The hpc cluster id.
func (o LaunchTemplatesLaunchTemplateOutput) HpcClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.HpcClusterId }).(pulumi.StringOutput)
}

// The id of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.Id }).(pulumi.StringOutput)
}

// The image id.
func (o LaunchTemplatesLaunchTemplateOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.ImageId }).(pulumi.StringOutput)
}

// The charge type of the instance and volume.
func (o LaunchTemplatesLaunchTemplateOutput) InstanceChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.InstanceChargeType }).(pulumi.StringOutput)
}

// The name of the instance.
func (o LaunchTemplatesLaunchTemplateOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.InstanceName }).(pulumi.StringOutput)
}

// When you log in to the instance using the SSH key pair, enter the name of the key pair.
func (o LaunchTemplatesLaunchTemplateOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The latest version of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) LatestVersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) int { return v.LatestVersionNumber }).(pulumi.IntOutput)
}

// The id of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) LaunchTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.LaunchTemplateId }).(pulumi.StringOutput)
}

// The name of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) LaunchTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.LaunchTemplateName }).(pulumi.StringOutput)
}

// The list of network interfaces.
func (o LaunchTemplatesLaunchTemplateOutput) NetworkInterfaces() LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) []LaunchTemplatesLaunchTemplateNetworkInterface {
		return v.NetworkInterfaces
	}).(LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput)
}

// Whether to open the security reinforcement.
func (o LaunchTemplatesLaunchTemplateOutput) SecurityEnhancementStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.SecurityEnhancementStrategy }).(pulumi.StringOutput)
}

// The index of the ordered suffix.
func (o LaunchTemplatesLaunchTemplateOutput) SuffixIndex() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) int { return v.SuffixIndex }).(pulumi.IntOutput)
}

// Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.
func (o LaunchTemplatesLaunchTemplateOutput) UniqueSuffix() pulumi.BoolOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) bool { return v.UniqueSuffix }).(pulumi.BoolOutput)
}

// The updated time of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The latest version description of the launch template.
func (o LaunchTemplatesLaunchTemplateOutput) VersionDescription() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.VersionDescription }).(pulumi.StringOutput)
}

// The list of volume of the scaling configuration.
func (o LaunchTemplatesLaunchTemplateOutput) Volumes() LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) []LaunchTemplatesLaunchTemplateVolume { return v.Volumes }).(LaunchTemplatesLaunchTemplateVolumeArrayOutput)
}

// The vpc id.
func (o LaunchTemplatesLaunchTemplateOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone ID of the instance.
func (o LaunchTemplatesLaunchTemplateOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplate) string { return v.ZoneId }).(pulumi.StringOutput)
}

type LaunchTemplatesLaunchTemplateArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateArrayOutput) ToLaunchTemplatesLaunchTemplateArrayOutput() LaunchTemplatesLaunchTemplateArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateArrayOutput) ToLaunchTemplatesLaunchTemplateArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateArrayOutput) Index(i pulumi.IntInput) LaunchTemplatesLaunchTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplatesLaunchTemplate {
		return vs[0].([]LaunchTemplatesLaunchTemplate)[vs[1].(int)]
	}).(LaunchTemplatesLaunchTemplateOutput)
}

type LaunchTemplatesLaunchTemplateNetworkInterface struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId string `pulumi:"subnetId"`
}

// LaunchTemplatesLaunchTemplateNetworkInterfaceInput is an input type that accepts LaunchTemplatesLaunchTemplateNetworkInterfaceArgs and LaunchTemplatesLaunchTemplateNetworkInterfaceOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateNetworkInterfaceInput` via:
//
//	LaunchTemplatesLaunchTemplateNetworkInterfaceArgs{...}
type LaunchTemplatesLaunchTemplateNetworkInterfaceInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceOutput
	ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceOutput
}

type LaunchTemplatesLaunchTemplateNetworkInterfaceArgs struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (LaunchTemplatesLaunchTemplateNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateNetworkInterfaceArgs) ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return i.ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateNetworkInterfaceArgs) ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateNetworkInterfaceOutput)
}

// LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput is an input type that accepts LaunchTemplatesLaunchTemplateNetworkInterfaceArray and LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput` via:
//
//	LaunchTemplatesLaunchTemplateNetworkInterfaceArray{ LaunchTemplatesLaunchTemplateNetworkInterfaceArgs{...} }
type LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput
	ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput
}

type LaunchTemplatesLaunchTemplateNetworkInterfaceArray []LaunchTemplatesLaunchTemplateNetworkInterfaceInput

func (LaunchTemplatesLaunchTemplateNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateNetworkInterfaceArray) ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return i.ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateNetworkInterfaceArray) ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput)
}

type LaunchTemplatesLaunchTemplateNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) ToLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return o
}

// The security group ID associated with the NIC.
func (o LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateNetworkInterface) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
func (o LaunchTemplatesLaunchTemplateNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

type LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput() LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) ToLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) LaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplatesLaunchTemplateNetworkInterface {
		return vs[0].([]LaunchTemplatesLaunchTemplateNetworkInterface)[vs[1].(int)]
	}).(LaunchTemplatesLaunchTemplateNetworkInterfaceOutput)
}

type LaunchTemplatesLaunchTemplateVolume struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size int `pulumi:"size"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// LaunchTemplatesLaunchTemplateVolumeInput is an input type that accepts LaunchTemplatesLaunchTemplateVolumeArgs and LaunchTemplatesLaunchTemplateVolumeOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateVolumeInput` via:
//
//	LaunchTemplatesLaunchTemplateVolumeArgs{...}
type LaunchTemplatesLaunchTemplateVolumeInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateVolumeOutput() LaunchTemplatesLaunchTemplateVolumeOutput
	ToLaunchTemplatesLaunchTemplateVolumeOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateVolumeOutput
}

type LaunchTemplatesLaunchTemplateVolumeArgs struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance pulumi.BoolInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (LaunchTemplatesLaunchTemplateVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateVolumeArgs) ToLaunchTemplatesLaunchTemplateVolumeOutput() LaunchTemplatesLaunchTemplateVolumeOutput {
	return i.ToLaunchTemplatesLaunchTemplateVolumeOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateVolumeArgs) ToLaunchTemplatesLaunchTemplateVolumeOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateVolumeOutput)
}

// LaunchTemplatesLaunchTemplateVolumeArrayInput is an input type that accepts LaunchTemplatesLaunchTemplateVolumeArray and LaunchTemplatesLaunchTemplateVolumeArrayOutput values.
// You can construct a concrete instance of `LaunchTemplatesLaunchTemplateVolumeArrayInput` via:
//
//	LaunchTemplatesLaunchTemplateVolumeArray{ LaunchTemplatesLaunchTemplateVolumeArgs{...} }
type LaunchTemplatesLaunchTemplateVolumeArrayInput interface {
	pulumi.Input

	ToLaunchTemplatesLaunchTemplateVolumeArrayOutput() LaunchTemplatesLaunchTemplateVolumeArrayOutput
	ToLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(context.Context) LaunchTemplatesLaunchTemplateVolumeArrayOutput
}

type LaunchTemplatesLaunchTemplateVolumeArray []LaunchTemplatesLaunchTemplateVolumeInput

func (LaunchTemplatesLaunchTemplateVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (i LaunchTemplatesLaunchTemplateVolumeArray) ToLaunchTemplatesLaunchTemplateVolumeArrayOutput() LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return i.ToLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(context.Background())
}

func (i LaunchTemplatesLaunchTemplateVolumeArray) ToLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LaunchTemplatesLaunchTemplateVolumeArrayOutput)
}

type LaunchTemplatesLaunchTemplateVolumeOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateVolumeOutput) ToLaunchTemplatesLaunchTemplateVolumeOutput() LaunchTemplatesLaunchTemplateVolumeOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateVolumeOutput) ToLaunchTemplatesLaunchTemplateVolumeOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateVolumeOutput {
	return o
}

// The delete with instance flag of volume. Valid values: true, false. Default value: true.
func (o LaunchTemplatesLaunchTemplateVolumeOutput) DeleteWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateVolume) bool { return v.DeleteWithInstance }).(pulumi.BoolOutput)
}

// The size of volume.
func (o LaunchTemplatesLaunchTemplateVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume.
func (o LaunchTemplatesLaunchTemplateVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v LaunchTemplatesLaunchTemplateVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type LaunchTemplatesLaunchTemplateVolumeArrayOutput struct{ *pulumi.OutputState }

func (LaunchTemplatesLaunchTemplateVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (o LaunchTemplatesLaunchTemplateVolumeArrayOutput) ToLaunchTemplatesLaunchTemplateVolumeArrayOutput() LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateVolumeArrayOutput) ToLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) LaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return o
}

func (o LaunchTemplatesLaunchTemplateVolumeArrayOutput) Index(i pulumi.IntInput) LaunchTemplatesLaunchTemplateVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LaunchTemplatesLaunchTemplateVolume {
		return vs[0].([]LaunchTemplatesLaunchTemplateVolume)[vs[1].(int)]
	}).(LaunchTemplatesLaunchTemplateVolumeOutput)
}

type RegionsRegion struct {
	// The id of the region.
	Id string `pulumi:"id"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
}

// RegionsRegionInput is an input type that accepts RegionsRegionArgs and RegionsRegionOutput values.
// You can construct a concrete instance of `RegionsRegionInput` via:
//
//	RegionsRegionArgs{...}
type RegionsRegionInput interface {
	pulumi.Input

	ToRegionsRegionOutput() RegionsRegionOutput
	ToRegionsRegionOutputWithContext(context.Context) RegionsRegionOutput
}

type RegionsRegionArgs struct {
	// The id of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
}

func (RegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArgs) ToRegionsRegionOutput() RegionsRegionOutput {
	return i.ToRegionsRegionOutputWithContext(context.Background())
}

func (i RegionsRegionArgs) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionOutput)
}

// RegionsRegionArrayInput is an input type that accepts RegionsRegionArray and RegionsRegionArrayOutput values.
// You can construct a concrete instance of `RegionsRegionArrayInput` via:
//
//	RegionsRegionArray{ RegionsRegionArgs{...} }
type RegionsRegionArrayInput interface {
	pulumi.Input

	ToRegionsRegionArrayOutput() RegionsRegionArrayOutput
	ToRegionsRegionArrayOutputWithContext(context.Context) RegionsRegionArrayOutput
}

type RegionsRegionArray []RegionsRegionInput

func (RegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return i.ToRegionsRegionArrayOutputWithContext(context.Background())
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionArrayOutput)
}

type RegionsRegionOutput struct{ *pulumi.OutputState }

func (RegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionOutput) ToRegionsRegionOutput() RegionsRegionOutput {
	return o
}

func (o RegionsRegionOutput) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return o
}

// The id of the region.
func (o RegionsRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the region.
func (o RegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

type RegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (RegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) Index(i pulumi.IntInput) RegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionsRegion {
		return vs[0].([]RegionsRegion)[vs[1].(int)]
	}).(RegionsRegionOutput)
}

type ZonesZone struct {
	// The id of the zone.
	Id string `pulumi:"id"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//	ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//	ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The id of the zone.
func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

type GetAvailableResourcesAvailableZone struct {
	// The resource information of the available zone.
	AvailableResources []GetAvailableResourcesAvailableZoneAvailableResource `pulumi:"availableResources"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status string `pulumi:"status"`
	// The id of available zone.
	ZoneId string `pulumi:"zoneId"`
}

// GetAvailableResourcesAvailableZoneInput is an input type that accepts GetAvailableResourcesAvailableZoneArgs and GetAvailableResourcesAvailableZoneOutput values.
// You can construct a concrete instance of `GetAvailableResourcesAvailableZoneInput` via:
//
//	GetAvailableResourcesAvailableZoneArgs{...}
type GetAvailableResourcesAvailableZoneInput interface {
	pulumi.Input

	ToGetAvailableResourcesAvailableZoneOutput() GetAvailableResourcesAvailableZoneOutput
	ToGetAvailableResourcesAvailableZoneOutputWithContext(context.Context) GetAvailableResourcesAvailableZoneOutput
}

type GetAvailableResourcesAvailableZoneArgs struct {
	// The resource information of the available zone.
	AvailableResources GetAvailableResourcesAvailableZoneAvailableResourceArrayInput `pulumi:"availableResources"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status pulumi.StringInput `pulumi:"status"`
	// The id of available zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetAvailableResourcesAvailableZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableResourcesAvailableZone)(nil)).Elem()
}

func (i GetAvailableResourcesAvailableZoneArgs) ToGetAvailableResourcesAvailableZoneOutput() GetAvailableResourcesAvailableZoneOutput {
	return i.ToGetAvailableResourcesAvailableZoneOutputWithContext(context.Background())
}

func (i GetAvailableResourcesAvailableZoneArgs) ToGetAvailableResourcesAvailableZoneOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAvailableResourcesAvailableZoneOutput)
}

// GetAvailableResourcesAvailableZoneArrayInput is an input type that accepts GetAvailableResourcesAvailableZoneArray and GetAvailableResourcesAvailableZoneArrayOutput values.
// You can construct a concrete instance of `GetAvailableResourcesAvailableZoneArrayInput` via:
//
//	GetAvailableResourcesAvailableZoneArray{ GetAvailableResourcesAvailableZoneArgs{...} }
type GetAvailableResourcesAvailableZoneArrayInput interface {
	pulumi.Input

	ToGetAvailableResourcesAvailableZoneArrayOutput() GetAvailableResourcesAvailableZoneArrayOutput
	ToGetAvailableResourcesAvailableZoneArrayOutputWithContext(context.Context) GetAvailableResourcesAvailableZoneArrayOutput
}

type GetAvailableResourcesAvailableZoneArray []GetAvailableResourcesAvailableZoneInput

func (GetAvailableResourcesAvailableZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAvailableResourcesAvailableZone)(nil)).Elem()
}

func (i GetAvailableResourcesAvailableZoneArray) ToGetAvailableResourcesAvailableZoneArrayOutput() GetAvailableResourcesAvailableZoneArrayOutput {
	return i.ToGetAvailableResourcesAvailableZoneArrayOutputWithContext(context.Background())
}

func (i GetAvailableResourcesAvailableZoneArray) ToGetAvailableResourcesAvailableZoneArrayOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAvailableResourcesAvailableZoneArrayOutput)
}

type GetAvailableResourcesAvailableZoneOutput struct{ *pulumi.OutputState }

func (GetAvailableResourcesAvailableZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableResourcesAvailableZone)(nil)).Elem()
}

func (o GetAvailableResourcesAvailableZoneOutput) ToGetAvailableResourcesAvailableZoneOutput() GetAvailableResourcesAvailableZoneOutput {
	return o
}

func (o GetAvailableResourcesAvailableZoneOutput) ToGetAvailableResourcesAvailableZoneOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneOutput {
	return o
}

// The resource information of the available zone.
func (o GetAvailableResourcesAvailableZoneOutput) AvailableResources() GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return o.ApplyT(func(v GetAvailableResourcesAvailableZone) []GetAvailableResourcesAvailableZoneAvailableResource {
		return v.AvailableResources
	}).(GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput)
}

// The id of the region.
func (o GetAvailableResourcesAvailableZoneOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableResourcesAvailableZone) string { return v.RegionId }).(pulumi.StringOutput)
}

// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
func (o GetAvailableResourcesAvailableZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableResourcesAvailableZone) string { return v.Status }).(pulumi.StringOutput)
}

// The id of available zone.
func (o GetAvailableResourcesAvailableZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableResourcesAvailableZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetAvailableResourcesAvailableZoneArrayOutput struct{ *pulumi.OutputState }

func (GetAvailableResourcesAvailableZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAvailableResourcesAvailableZone)(nil)).Elem()
}

func (o GetAvailableResourcesAvailableZoneArrayOutput) ToGetAvailableResourcesAvailableZoneArrayOutput() GetAvailableResourcesAvailableZoneArrayOutput {
	return o
}

func (o GetAvailableResourcesAvailableZoneArrayOutput) ToGetAvailableResourcesAvailableZoneArrayOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneArrayOutput {
	return o
}

func (o GetAvailableResourcesAvailableZoneArrayOutput) Index(i pulumi.IntInput) GetAvailableResourcesAvailableZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAvailableResourcesAvailableZone {
		return vs[0].([]GetAvailableResourcesAvailableZone)[vs[1].(int)]
	}).(GetAvailableResourcesAvailableZoneOutput)
}

type GetAvailableResourcesAvailableZoneAvailableResource struct {
	// The supported resource information.
	SupportedResources []GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource `pulumi:"supportedResources"`
	// The type of resource. Valid values: `InstanceType`, `DedicatedHost`.
	Type string `pulumi:"type"`
}

// GetAvailableResourcesAvailableZoneAvailableResourceInput is an input type that accepts GetAvailableResourcesAvailableZoneAvailableResourceArgs and GetAvailableResourcesAvailableZoneAvailableResourceOutput values.
// You can construct a concrete instance of `GetAvailableResourcesAvailableZoneAvailableResourceInput` via:
//
//	GetAvailableResourcesAvailableZoneAvailableResourceArgs{...}
type GetAvailableResourcesAvailableZoneAvailableResourceInput interface {
	pulumi.Input

	ToGetAvailableResourcesAvailableZoneAvailableResourceOutput() GetAvailableResourcesAvailableZoneAvailableResourceOutput
	ToGetAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(context.Context) GetAvailableResourcesAvailableZoneAvailableResourceOutput
}

type GetAvailableResourcesAvailableZoneAvailableResourceArgs struct {
	// The supported resource information.
	SupportedResources GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput `pulumi:"supportedResources"`
	// The type of resource. Valid values: `InstanceType`, `DedicatedHost`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetAvailableResourcesAvailableZoneAvailableResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (i GetAvailableResourcesAvailableZoneAvailableResourceArgs) ToGetAvailableResourcesAvailableZoneAvailableResourceOutput() GetAvailableResourcesAvailableZoneAvailableResourceOutput {
	return i.ToGetAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(context.Background())
}

func (i GetAvailableResourcesAvailableZoneAvailableResourceArgs) ToGetAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneAvailableResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAvailableResourcesAvailableZoneAvailableResourceOutput)
}

// GetAvailableResourcesAvailableZoneAvailableResourceArrayInput is an input type that accepts GetAvailableResourcesAvailableZoneAvailableResourceArray and GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput values.
// You can construct a concrete instance of `GetAvailableResourcesAvailableZoneAvailableResourceArrayInput` via:
//
//	GetAvailableResourcesAvailableZoneAvailableResourceArray{ GetAvailableResourcesAvailableZoneAvailableResourceArgs{...} }
type GetAvailableResourcesAvailableZoneAvailableResourceArrayInput interface {
	pulumi.Input

	ToGetAvailableResourcesAvailableZoneAvailableResourceArrayOutput() GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput
	ToGetAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(context.Context) GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput
}

type GetAvailableResourcesAvailableZoneAvailableResourceArray []GetAvailableResourcesAvailableZoneAvailableResourceInput

func (GetAvailableResourcesAvailableZoneAvailableResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (i GetAvailableResourcesAvailableZoneAvailableResourceArray) ToGetAvailableResourcesAvailableZoneAvailableResourceArrayOutput() GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return i.ToGetAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(context.Background())
}

func (i GetAvailableResourcesAvailableZoneAvailableResourceArray) ToGetAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput)
}

type GetAvailableResourcesAvailableZoneAvailableResourceOutput struct{ *pulumi.OutputState }

func (GetAvailableResourcesAvailableZoneAvailableResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceOutput) ToGetAvailableResourcesAvailableZoneAvailableResourceOutput() GetAvailableResourcesAvailableZoneAvailableResourceOutput {
	return o
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceOutput) ToGetAvailableResourcesAvailableZoneAvailableResourceOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneAvailableResourceOutput {
	return o
}

// The supported resource information.
func (o GetAvailableResourcesAvailableZoneAvailableResourceOutput) SupportedResources() GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return o.ApplyT(func(v GetAvailableResourcesAvailableZoneAvailableResource) []GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource {
		return v.SupportedResources
	}).(GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput)
}

// The type of resource. Valid values: `InstanceType`, `DedicatedHost`.
func (o GetAvailableResourcesAvailableZoneAvailableResourceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableResourcesAvailableZoneAvailableResource) string { return v.Type }).(pulumi.StringOutput)
}

type GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput struct{ *pulumi.OutputState }

func (GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAvailableResourcesAvailableZoneAvailableResource)(nil)).Elem()
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput) ToGetAvailableResourcesAvailableZoneAvailableResourceArrayOutput() GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return o
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput) ToGetAvailableResourcesAvailableZoneAvailableResourceArrayOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput {
	return o
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput) Index(i pulumi.IntInput) GetAvailableResourcesAvailableZoneAvailableResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAvailableResourcesAvailableZoneAvailableResource {
		return vs[0].([]GetAvailableResourcesAvailableZoneAvailableResource)[vs[1].(int)]
	}).(GetAvailableResourcesAvailableZoneAvailableResourceOutput)
}

type GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource struct {
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status string `pulumi:"status"`
	// The value of the resource.
	Value string `pulumi:"value"`
}

// GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput is an input type that accepts GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs and GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput values.
// You can construct a concrete instance of `GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput` via:
//
//	GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs{...}
type GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput interface {
	pulumi.Input

	ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput() GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput
	ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(context.Context) GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput
}

type GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs struct {
	// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
	Status pulumi.StringInput `pulumi:"status"`
	// The value of the resource.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (i GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs) ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput() GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return i.ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(context.Background())
}

func (i GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs) ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput)
}

// GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput is an input type that accepts GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray and GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput values.
// You can construct a concrete instance of `GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput` via:
//
//	GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray{ GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs{...} }
type GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput interface {
	pulumi.Input

	ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput() GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput
	ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(context.Context) GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput
}

type GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray []GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput

func (GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (i GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray) ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput() GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return i.ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(context.Background())
}

func (i GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray) ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput)
}

type GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput struct{ *pulumi.OutputState }

func (GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput() GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return o
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return o
}

// The resource status of the available zone. Valid values: `Available`, `SoldOut`.
func (o GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource) string { return v.Status }).(pulumi.StringOutput)
}

// The value of the resource.
func (o GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource) string { return v.Value }).(pulumi.StringOutput)
}

type GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput struct{ *pulumi.OutputState }

func (GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource)(nil)).Elem()
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput() GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return o
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) ToGetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutputWithContext(ctx context.Context) GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput {
	return o
}

func (o GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput) Index(i pulumi.IntInput) GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource {
		return vs[0].([]GetAvailableResourcesAvailableZoneAvailableResourceSupportedResource)[vs[1].(int)]
	}).(GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput)
}

type GetCommandsCommand struct {
	// The base64 encoded content of the ecs command.
	CommandContent string `pulumi:"commandContent"`
	// The id of ecs command.
	CommandId string `pulumi:"commandId"`
	// The provider of public command. When this field is not specified, query for custom commands.
	CommandProvider string `pulumi:"commandProvider"`
	// Whether the command content is base64 encoded. Valid values: `Base64`, `PlainText`. Default is `Base64`.
	ContentEncoding string `pulumi:"contentEncoding"`
	// The create time of the ecs command.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the ecs command.
	Description string `pulumi:"description"`
	// Whether to enable custom parameter. Default is `false`.
	EnableParameter bool `pulumi:"enableParameter"`
	// The id of the ecs command.
	Id string `pulumi:"id"`
	// The invocation times of the ecs command. Public commands do not display the invocation times.
	InvocationTimes int `pulumi:"invocationTimes"`
	// The name of ecs command. This field support fuzzy query.
	Name string `pulumi:"name"`
	// The custom parameter definitions of the ecs command.
	ParameterDefinitions []GetCommandsCommandParameterDefinition `pulumi:"parameterDefinitions"`
	// The project name of ecs command.
	ProjectName string `pulumi:"projectName"`
	// Tags.
	Tags []GetCommandsCommandTag `pulumi:"tags"`
	// The timeout of the ecs command.
	Timeout int `pulumi:"timeout"`
	// The type of ecs command. Valid values: `Shell`.
	Type string `pulumi:"type"`
	// The update time of the ecs command.
	UpdatedAt string `pulumi:"updatedAt"`
	// The username of the ecs command.
	Username string `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir string `pulumi:"workingDir"`
}

// GetCommandsCommandInput is an input type that accepts GetCommandsCommandArgs and GetCommandsCommandOutput values.
// You can construct a concrete instance of `GetCommandsCommandInput` via:
//
//	GetCommandsCommandArgs{...}
type GetCommandsCommandInput interface {
	pulumi.Input

	ToGetCommandsCommandOutput() GetCommandsCommandOutput
	ToGetCommandsCommandOutputWithContext(context.Context) GetCommandsCommandOutput
}

type GetCommandsCommandArgs struct {
	// The base64 encoded content of the ecs command.
	CommandContent pulumi.StringInput `pulumi:"commandContent"`
	// The id of ecs command.
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// The provider of public command. When this field is not specified, query for custom commands.
	CommandProvider pulumi.StringInput `pulumi:"commandProvider"`
	// Whether the command content is base64 encoded. Valid values: `Base64`, `PlainText`. Default is `Base64`.
	ContentEncoding pulumi.StringInput `pulumi:"contentEncoding"`
	// The create time of the ecs command.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the ecs command.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether to enable custom parameter. Default is `false`.
	EnableParameter pulumi.BoolInput `pulumi:"enableParameter"`
	// The id of the ecs command.
	Id pulumi.StringInput `pulumi:"id"`
	// The invocation times of the ecs command. Public commands do not display the invocation times.
	InvocationTimes pulumi.IntInput `pulumi:"invocationTimes"`
	// The name of ecs command. This field support fuzzy query.
	Name pulumi.StringInput `pulumi:"name"`
	// The custom parameter definitions of the ecs command.
	ParameterDefinitions GetCommandsCommandParameterDefinitionArrayInput `pulumi:"parameterDefinitions"`
	// The project name of ecs command.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Tags.
	Tags GetCommandsCommandTagArrayInput `pulumi:"tags"`
	// The timeout of the ecs command.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The type of ecs command. Valid values: `Shell`.
	Type pulumi.StringInput `pulumi:"type"`
	// The update time of the ecs command.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The username of the ecs command.
	Username pulumi.StringInput `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`
}

func (GetCommandsCommandArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsCommand)(nil)).Elem()
}

func (i GetCommandsCommandArgs) ToGetCommandsCommandOutput() GetCommandsCommandOutput {
	return i.ToGetCommandsCommandOutputWithContext(context.Background())
}

func (i GetCommandsCommandArgs) ToGetCommandsCommandOutputWithContext(ctx context.Context) GetCommandsCommandOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandsCommandOutput)
}

// GetCommandsCommandArrayInput is an input type that accepts GetCommandsCommandArray and GetCommandsCommandArrayOutput values.
// You can construct a concrete instance of `GetCommandsCommandArrayInput` via:
//
//	GetCommandsCommandArray{ GetCommandsCommandArgs{...} }
type GetCommandsCommandArrayInput interface {
	pulumi.Input

	ToGetCommandsCommandArrayOutput() GetCommandsCommandArrayOutput
	ToGetCommandsCommandArrayOutputWithContext(context.Context) GetCommandsCommandArrayOutput
}

type GetCommandsCommandArray []GetCommandsCommandInput

func (GetCommandsCommandArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandsCommand)(nil)).Elem()
}

func (i GetCommandsCommandArray) ToGetCommandsCommandArrayOutput() GetCommandsCommandArrayOutput {
	return i.ToGetCommandsCommandArrayOutputWithContext(context.Background())
}

func (i GetCommandsCommandArray) ToGetCommandsCommandArrayOutputWithContext(ctx context.Context) GetCommandsCommandArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandsCommandArrayOutput)
}

type GetCommandsCommandOutput struct{ *pulumi.OutputState }

func (GetCommandsCommandOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsCommand)(nil)).Elem()
}

func (o GetCommandsCommandOutput) ToGetCommandsCommandOutput() GetCommandsCommandOutput {
	return o
}

func (o GetCommandsCommandOutput) ToGetCommandsCommandOutputWithContext(ctx context.Context) GetCommandsCommandOutput {
	return o
}

// The base64 encoded content of the ecs command.
func (o GetCommandsCommandOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.CommandContent }).(pulumi.StringOutput)
}

// The id of ecs command.
func (o GetCommandsCommandOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.CommandId }).(pulumi.StringOutput)
}

// The provider of public command. When this field is not specified, query for custom commands.
func (o GetCommandsCommandOutput) CommandProvider() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.CommandProvider }).(pulumi.StringOutput)
}

// Whether the command content is base64 encoded. Valid values: `Base64`, `PlainText`. Default is `Base64`.
func (o GetCommandsCommandOutput) ContentEncoding() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.ContentEncoding }).(pulumi.StringOutput)
}

// The create time of the ecs command.
func (o GetCommandsCommandOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the ecs command.
func (o GetCommandsCommandOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.Description }).(pulumi.StringOutput)
}

// Whether to enable custom parameter. Default is `false`.
func (o GetCommandsCommandOutput) EnableParameter() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCommandsCommand) bool { return v.EnableParameter }).(pulumi.BoolOutput)
}

// The id of the ecs command.
func (o GetCommandsCommandOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.Id }).(pulumi.StringOutput)
}

// The invocation times of the ecs command. Public commands do not display the invocation times.
func (o GetCommandsCommandOutput) InvocationTimes() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommandsCommand) int { return v.InvocationTimes }).(pulumi.IntOutput)
}

// The name of ecs command. This field support fuzzy query.
func (o GetCommandsCommandOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.Name }).(pulumi.StringOutput)
}

// The custom parameter definitions of the ecs command.
func (o GetCommandsCommandOutput) ParameterDefinitions() GetCommandsCommandParameterDefinitionArrayOutput {
	return o.ApplyT(func(v GetCommandsCommand) []GetCommandsCommandParameterDefinition { return v.ParameterDefinitions }).(GetCommandsCommandParameterDefinitionArrayOutput)
}

// The project name of ecs command.
func (o GetCommandsCommandOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Tags.
func (o GetCommandsCommandOutput) Tags() GetCommandsCommandTagArrayOutput {
	return o.ApplyT(func(v GetCommandsCommand) []GetCommandsCommandTag { return v.Tags }).(GetCommandsCommandTagArrayOutput)
}

// The timeout of the ecs command.
func (o GetCommandsCommandOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommandsCommand) int { return v.Timeout }).(pulumi.IntOutput)
}

// The type of ecs command. Valid values: `Shell`.
func (o GetCommandsCommandOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.Type }).(pulumi.StringOutput)
}

// The update time of the ecs command.
func (o GetCommandsCommandOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The username of the ecs command.
func (o GetCommandsCommandOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.Username }).(pulumi.StringOutput)
}

// The working directory of the ecs command.
func (o GetCommandsCommandOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommand) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type GetCommandsCommandArrayOutput struct{ *pulumi.OutputState }

func (GetCommandsCommandArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandsCommand)(nil)).Elem()
}

func (o GetCommandsCommandArrayOutput) ToGetCommandsCommandArrayOutput() GetCommandsCommandArrayOutput {
	return o
}

func (o GetCommandsCommandArrayOutput) ToGetCommandsCommandArrayOutputWithContext(ctx context.Context) GetCommandsCommandArrayOutput {
	return o
}

func (o GetCommandsCommandArrayOutput) Index(i pulumi.IntInput) GetCommandsCommandOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCommandsCommand {
		return vs[0].([]GetCommandsCommand)[vs[1].(int)]
	}).(GetCommandsCommandOutput)
}

type GetCommandsCommandParameterDefinition struct {
	// The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
	DecimalPrecision int `pulumi:"decimalPrecision"`
	// The default value of the custom parameter.
	DefaultValue string `pulumi:"defaultValue"`
	// The maximum length of the custom parameter. This field is required when the parameter type is `String`.
	MaxLength int `pulumi:"maxLength"`
	// The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MaxValue string `pulumi:"maxValue"`
	// The minimum length of the custom parameter. This field is required when the parameter type is `String`.
	MinLength int `pulumi:"minLength"`
	// The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MinValue string `pulumi:"minValue"`
	// The name of ecs command. This field support fuzzy query.
	Name string `pulumi:"name"`
	// Whether the custom parameter is required.
	Required bool `pulumi:"required"`
	// The type of ecs command. Valid values: `Shell`.
	Type string `pulumi:"type"`
}

// GetCommandsCommandParameterDefinitionInput is an input type that accepts GetCommandsCommandParameterDefinitionArgs and GetCommandsCommandParameterDefinitionOutput values.
// You can construct a concrete instance of `GetCommandsCommandParameterDefinitionInput` via:
//
//	GetCommandsCommandParameterDefinitionArgs{...}
type GetCommandsCommandParameterDefinitionInput interface {
	pulumi.Input

	ToGetCommandsCommandParameterDefinitionOutput() GetCommandsCommandParameterDefinitionOutput
	ToGetCommandsCommandParameterDefinitionOutputWithContext(context.Context) GetCommandsCommandParameterDefinitionOutput
}

type GetCommandsCommandParameterDefinitionArgs struct {
	// The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
	DecimalPrecision pulumi.IntInput `pulumi:"decimalPrecision"`
	// The default value of the custom parameter.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// The maximum length of the custom parameter. This field is required when the parameter type is `String`.
	MaxLength pulumi.IntInput `pulumi:"maxLength"`
	// The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MaxValue pulumi.StringInput `pulumi:"maxValue"`
	// The minimum length of the custom parameter. This field is required when the parameter type is `String`.
	MinLength pulumi.IntInput `pulumi:"minLength"`
	// The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
	MinValue pulumi.StringInput `pulumi:"minValue"`
	// The name of ecs command. This field support fuzzy query.
	Name pulumi.StringInput `pulumi:"name"`
	// Whether the custom parameter is required.
	Required pulumi.BoolInput `pulumi:"required"`
	// The type of ecs command. Valid values: `Shell`.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetCommandsCommandParameterDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsCommandParameterDefinition)(nil)).Elem()
}

func (i GetCommandsCommandParameterDefinitionArgs) ToGetCommandsCommandParameterDefinitionOutput() GetCommandsCommandParameterDefinitionOutput {
	return i.ToGetCommandsCommandParameterDefinitionOutputWithContext(context.Background())
}

func (i GetCommandsCommandParameterDefinitionArgs) ToGetCommandsCommandParameterDefinitionOutputWithContext(ctx context.Context) GetCommandsCommandParameterDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandsCommandParameterDefinitionOutput)
}

// GetCommandsCommandParameterDefinitionArrayInput is an input type that accepts GetCommandsCommandParameterDefinitionArray and GetCommandsCommandParameterDefinitionArrayOutput values.
// You can construct a concrete instance of `GetCommandsCommandParameterDefinitionArrayInput` via:
//
//	GetCommandsCommandParameterDefinitionArray{ GetCommandsCommandParameterDefinitionArgs{...} }
type GetCommandsCommandParameterDefinitionArrayInput interface {
	pulumi.Input

	ToGetCommandsCommandParameterDefinitionArrayOutput() GetCommandsCommandParameterDefinitionArrayOutput
	ToGetCommandsCommandParameterDefinitionArrayOutputWithContext(context.Context) GetCommandsCommandParameterDefinitionArrayOutput
}

type GetCommandsCommandParameterDefinitionArray []GetCommandsCommandParameterDefinitionInput

func (GetCommandsCommandParameterDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandsCommandParameterDefinition)(nil)).Elem()
}

func (i GetCommandsCommandParameterDefinitionArray) ToGetCommandsCommandParameterDefinitionArrayOutput() GetCommandsCommandParameterDefinitionArrayOutput {
	return i.ToGetCommandsCommandParameterDefinitionArrayOutputWithContext(context.Background())
}

func (i GetCommandsCommandParameterDefinitionArray) ToGetCommandsCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) GetCommandsCommandParameterDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandsCommandParameterDefinitionArrayOutput)
}

type GetCommandsCommandParameterDefinitionOutput struct{ *pulumi.OutputState }

func (GetCommandsCommandParameterDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsCommandParameterDefinition)(nil)).Elem()
}

func (o GetCommandsCommandParameterDefinitionOutput) ToGetCommandsCommandParameterDefinitionOutput() GetCommandsCommandParameterDefinitionOutput {
	return o
}

func (o GetCommandsCommandParameterDefinitionOutput) ToGetCommandsCommandParameterDefinitionOutputWithContext(ctx context.Context) GetCommandsCommandParameterDefinitionOutput {
	return o
}

// The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
func (o GetCommandsCommandParameterDefinitionOutput) DecimalPrecision() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommandsCommandParameterDefinition) int { return v.DecimalPrecision }).(pulumi.IntOutput)
}

// The default value of the custom parameter.
func (o GetCommandsCommandParameterDefinitionOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommandParameterDefinition) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// The maximum length of the custom parameter. This field is required when the parameter type is `String`.
func (o GetCommandsCommandParameterDefinitionOutput) MaxLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommandsCommandParameterDefinition) int { return v.MaxLength }).(pulumi.IntOutput)
}

// The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
func (o GetCommandsCommandParameterDefinitionOutput) MaxValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommandParameterDefinition) string { return v.MaxValue }).(pulumi.StringOutput)
}

// The minimum length of the custom parameter. This field is required when the parameter type is `String`.
func (o GetCommandsCommandParameterDefinitionOutput) MinLength() pulumi.IntOutput {
	return o.ApplyT(func(v GetCommandsCommandParameterDefinition) int { return v.MinLength }).(pulumi.IntOutput)
}

// The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
func (o GetCommandsCommandParameterDefinitionOutput) MinValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommandParameterDefinition) string { return v.MinValue }).(pulumi.StringOutput)
}

// The name of ecs command. This field support fuzzy query.
func (o GetCommandsCommandParameterDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommandParameterDefinition) string { return v.Name }).(pulumi.StringOutput)
}

// Whether the custom parameter is required.
func (o GetCommandsCommandParameterDefinitionOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCommandsCommandParameterDefinition) bool { return v.Required }).(pulumi.BoolOutput)
}

// The type of ecs command. Valid values: `Shell`.
func (o GetCommandsCommandParameterDefinitionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommandParameterDefinition) string { return v.Type }).(pulumi.StringOutput)
}

type GetCommandsCommandParameterDefinitionArrayOutput struct{ *pulumi.OutputState }

func (GetCommandsCommandParameterDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandsCommandParameterDefinition)(nil)).Elem()
}

func (o GetCommandsCommandParameterDefinitionArrayOutput) ToGetCommandsCommandParameterDefinitionArrayOutput() GetCommandsCommandParameterDefinitionArrayOutput {
	return o
}

func (o GetCommandsCommandParameterDefinitionArrayOutput) ToGetCommandsCommandParameterDefinitionArrayOutputWithContext(ctx context.Context) GetCommandsCommandParameterDefinitionArrayOutput {
	return o
}

func (o GetCommandsCommandParameterDefinitionArrayOutput) Index(i pulumi.IntInput) GetCommandsCommandParameterDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCommandsCommandParameterDefinition {
		return vs[0].([]GetCommandsCommandParameterDefinition)[vs[1].(int)]
	}).(GetCommandsCommandParameterDefinitionOutput)
}

type GetCommandsCommandTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetCommandsCommandTagInput is an input type that accepts GetCommandsCommandTagArgs and GetCommandsCommandTagOutput values.
// You can construct a concrete instance of `GetCommandsCommandTagInput` via:
//
//	GetCommandsCommandTagArgs{...}
type GetCommandsCommandTagInput interface {
	pulumi.Input

	ToGetCommandsCommandTagOutput() GetCommandsCommandTagOutput
	ToGetCommandsCommandTagOutputWithContext(context.Context) GetCommandsCommandTagOutput
}

type GetCommandsCommandTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetCommandsCommandTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsCommandTag)(nil)).Elem()
}

func (i GetCommandsCommandTagArgs) ToGetCommandsCommandTagOutput() GetCommandsCommandTagOutput {
	return i.ToGetCommandsCommandTagOutputWithContext(context.Background())
}

func (i GetCommandsCommandTagArgs) ToGetCommandsCommandTagOutputWithContext(ctx context.Context) GetCommandsCommandTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandsCommandTagOutput)
}

// GetCommandsCommandTagArrayInput is an input type that accepts GetCommandsCommandTagArray and GetCommandsCommandTagArrayOutput values.
// You can construct a concrete instance of `GetCommandsCommandTagArrayInput` via:
//
//	GetCommandsCommandTagArray{ GetCommandsCommandTagArgs{...} }
type GetCommandsCommandTagArrayInput interface {
	pulumi.Input

	ToGetCommandsCommandTagArrayOutput() GetCommandsCommandTagArrayOutput
	ToGetCommandsCommandTagArrayOutputWithContext(context.Context) GetCommandsCommandTagArrayOutput
}

type GetCommandsCommandTagArray []GetCommandsCommandTagInput

func (GetCommandsCommandTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandsCommandTag)(nil)).Elem()
}

func (i GetCommandsCommandTagArray) ToGetCommandsCommandTagArrayOutput() GetCommandsCommandTagArrayOutput {
	return i.ToGetCommandsCommandTagArrayOutputWithContext(context.Background())
}

func (i GetCommandsCommandTagArray) ToGetCommandsCommandTagArrayOutputWithContext(ctx context.Context) GetCommandsCommandTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandsCommandTagArrayOutput)
}

type GetCommandsCommandTagOutput struct{ *pulumi.OutputState }

func (GetCommandsCommandTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsCommandTag)(nil)).Elem()
}

func (o GetCommandsCommandTagOutput) ToGetCommandsCommandTagOutput() GetCommandsCommandTagOutput {
	return o
}

func (o GetCommandsCommandTagOutput) ToGetCommandsCommandTagOutputWithContext(ctx context.Context) GetCommandsCommandTagOutput {
	return o
}

// The Key of Tags.
func (o GetCommandsCommandTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommandTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetCommandsCommandTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsCommandTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetCommandsCommandTagArrayOutput struct{ *pulumi.OutputState }

func (GetCommandsCommandTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandsCommandTag)(nil)).Elem()
}

func (o GetCommandsCommandTagArrayOutput) ToGetCommandsCommandTagArrayOutput() GetCommandsCommandTagArrayOutput {
	return o
}

func (o GetCommandsCommandTagArrayOutput) ToGetCommandsCommandTagArrayOutputWithContext(ctx context.Context) GetCommandsCommandTagArrayOutput {
	return o
}

func (o GetCommandsCommandTagArrayOutput) Index(i pulumi.IntInput) GetCommandsCommandTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCommandsCommandTag {
		return vs[0].([]GetCommandsCommandTag)[vs[1].(int)]
	}).(GetCommandsCommandTagOutput)
}

type GetCommandsTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetCommandsTagInput is an input type that accepts GetCommandsTagArgs and GetCommandsTagOutput values.
// You can construct a concrete instance of `GetCommandsTagInput` via:
//
//	GetCommandsTagArgs{...}
type GetCommandsTagInput interface {
	pulumi.Input

	ToGetCommandsTagOutput() GetCommandsTagOutput
	ToGetCommandsTagOutputWithContext(context.Context) GetCommandsTagOutput
}

type GetCommandsTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetCommandsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsTag)(nil)).Elem()
}

func (i GetCommandsTagArgs) ToGetCommandsTagOutput() GetCommandsTagOutput {
	return i.ToGetCommandsTagOutputWithContext(context.Background())
}

func (i GetCommandsTagArgs) ToGetCommandsTagOutputWithContext(ctx context.Context) GetCommandsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandsTagOutput)
}

// GetCommandsTagArrayInput is an input type that accepts GetCommandsTagArray and GetCommandsTagArrayOutput values.
// You can construct a concrete instance of `GetCommandsTagArrayInput` via:
//
//	GetCommandsTagArray{ GetCommandsTagArgs{...} }
type GetCommandsTagArrayInput interface {
	pulumi.Input

	ToGetCommandsTagArrayOutput() GetCommandsTagArrayOutput
	ToGetCommandsTagArrayOutputWithContext(context.Context) GetCommandsTagArrayOutput
}

type GetCommandsTagArray []GetCommandsTagInput

func (GetCommandsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandsTag)(nil)).Elem()
}

func (i GetCommandsTagArray) ToGetCommandsTagArrayOutput() GetCommandsTagArrayOutput {
	return i.ToGetCommandsTagArrayOutputWithContext(context.Background())
}

func (i GetCommandsTagArray) ToGetCommandsTagArrayOutputWithContext(ctx context.Context) GetCommandsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCommandsTagArrayOutput)
}

type GetCommandsTagOutput struct{ *pulumi.OutputState }

func (GetCommandsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCommandsTag)(nil)).Elem()
}

func (o GetCommandsTagOutput) ToGetCommandsTagOutput() GetCommandsTagOutput {
	return o
}

func (o GetCommandsTagOutput) ToGetCommandsTagOutputWithContext(ctx context.Context) GetCommandsTagOutput {
	return o
}

// The Key of Tags.
func (o GetCommandsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetCommandsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetCommandsTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetCommandsTagArrayOutput struct{ *pulumi.OutputState }

func (GetCommandsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCommandsTag)(nil)).Elem()
}

func (o GetCommandsTagArrayOutput) ToGetCommandsTagArrayOutput() GetCommandsTagArrayOutput {
	return o
}

func (o GetCommandsTagArrayOutput) ToGetCommandsTagArrayOutputWithContext(ctx context.Context) GetCommandsTagArrayOutput {
	return o
}

func (o GetCommandsTagArrayOutput) Index(i pulumi.IntInput) GetCommandsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCommandsTag {
		return vs[0].([]GetCommandsTag)[vs[1].(int)]
	}).(GetCommandsTagOutput)
}

type GetDeploymentSetsDeploymentSet struct {
	// The ID of ECS DeploymentSet.
	DeploymentSetId string `pulumi:"deploymentSetId"`
	// The name of ECS DeploymentSet.
	DeploymentSetName string `pulumi:"deploymentSetName"`
	// The description of ECS DeploymentSet.
	Description string `pulumi:"description"`
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
	Granularity string `pulumi:"granularity"`
	// The strategy of ECS DeploymentSet.
	Strategy string `pulumi:"strategy"`
}

// GetDeploymentSetsDeploymentSetInput is an input type that accepts GetDeploymentSetsDeploymentSetArgs and GetDeploymentSetsDeploymentSetOutput values.
// You can construct a concrete instance of `GetDeploymentSetsDeploymentSetInput` via:
//
//	GetDeploymentSetsDeploymentSetArgs{...}
type GetDeploymentSetsDeploymentSetInput interface {
	pulumi.Input

	ToGetDeploymentSetsDeploymentSetOutput() GetDeploymentSetsDeploymentSetOutput
	ToGetDeploymentSetsDeploymentSetOutputWithContext(context.Context) GetDeploymentSetsDeploymentSetOutput
}

type GetDeploymentSetsDeploymentSetArgs struct {
	// The ID of ECS DeploymentSet.
	DeploymentSetId pulumi.StringInput `pulumi:"deploymentSetId"`
	// The name of ECS DeploymentSet.
	DeploymentSetName pulumi.StringInput `pulumi:"deploymentSetName"`
	// The description of ECS DeploymentSet.
	Description pulumi.StringInput `pulumi:"description"`
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
	Granularity pulumi.StringInput `pulumi:"granularity"`
	// The strategy of ECS DeploymentSet.
	Strategy pulumi.StringInput `pulumi:"strategy"`
}

func (GetDeploymentSetsDeploymentSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeploymentSetsDeploymentSet)(nil)).Elem()
}

func (i GetDeploymentSetsDeploymentSetArgs) ToGetDeploymentSetsDeploymentSetOutput() GetDeploymentSetsDeploymentSetOutput {
	return i.ToGetDeploymentSetsDeploymentSetOutputWithContext(context.Background())
}

func (i GetDeploymentSetsDeploymentSetArgs) ToGetDeploymentSetsDeploymentSetOutputWithContext(ctx context.Context) GetDeploymentSetsDeploymentSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeploymentSetsDeploymentSetOutput)
}

// GetDeploymentSetsDeploymentSetArrayInput is an input type that accepts GetDeploymentSetsDeploymentSetArray and GetDeploymentSetsDeploymentSetArrayOutput values.
// You can construct a concrete instance of `GetDeploymentSetsDeploymentSetArrayInput` via:
//
//	GetDeploymentSetsDeploymentSetArray{ GetDeploymentSetsDeploymentSetArgs{...} }
type GetDeploymentSetsDeploymentSetArrayInput interface {
	pulumi.Input

	ToGetDeploymentSetsDeploymentSetArrayOutput() GetDeploymentSetsDeploymentSetArrayOutput
	ToGetDeploymentSetsDeploymentSetArrayOutputWithContext(context.Context) GetDeploymentSetsDeploymentSetArrayOutput
}

type GetDeploymentSetsDeploymentSetArray []GetDeploymentSetsDeploymentSetInput

func (GetDeploymentSetsDeploymentSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeploymentSetsDeploymentSet)(nil)).Elem()
}

func (i GetDeploymentSetsDeploymentSetArray) ToGetDeploymentSetsDeploymentSetArrayOutput() GetDeploymentSetsDeploymentSetArrayOutput {
	return i.ToGetDeploymentSetsDeploymentSetArrayOutputWithContext(context.Background())
}

func (i GetDeploymentSetsDeploymentSetArray) ToGetDeploymentSetsDeploymentSetArrayOutputWithContext(ctx context.Context) GetDeploymentSetsDeploymentSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDeploymentSetsDeploymentSetArrayOutput)
}

type GetDeploymentSetsDeploymentSetOutput struct{ *pulumi.OutputState }

func (GetDeploymentSetsDeploymentSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDeploymentSetsDeploymentSet)(nil)).Elem()
}

func (o GetDeploymentSetsDeploymentSetOutput) ToGetDeploymentSetsDeploymentSetOutput() GetDeploymentSetsDeploymentSetOutput {
	return o
}

func (o GetDeploymentSetsDeploymentSetOutput) ToGetDeploymentSetsDeploymentSetOutputWithContext(ctx context.Context) GetDeploymentSetsDeploymentSetOutput {
	return o
}

// The ID of ECS DeploymentSet.
func (o GetDeploymentSetsDeploymentSetOutput) DeploymentSetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentSetsDeploymentSet) string { return v.DeploymentSetId }).(pulumi.StringOutput)
}

// The name of ECS DeploymentSet.
func (o GetDeploymentSetsDeploymentSetOutput) DeploymentSetName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentSetsDeploymentSet) string { return v.DeploymentSetName }).(pulumi.StringOutput)
}

// The description of ECS DeploymentSet.
func (o GetDeploymentSetsDeploymentSetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentSetsDeploymentSet) string { return v.Description }).(pulumi.StringOutput)
}

// The granularity of ECS DeploymentSet.Valid values: switch, host, rack.
func (o GetDeploymentSetsDeploymentSetOutput) Granularity() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentSetsDeploymentSet) string { return v.Granularity }).(pulumi.StringOutput)
}

// The strategy of ECS DeploymentSet.
func (o GetDeploymentSetsDeploymentSetOutput) Strategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetDeploymentSetsDeploymentSet) string { return v.Strategy }).(pulumi.StringOutput)
}

type GetDeploymentSetsDeploymentSetArrayOutput struct{ *pulumi.OutputState }

func (GetDeploymentSetsDeploymentSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDeploymentSetsDeploymentSet)(nil)).Elem()
}

func (o GetDeploymentSetsDeploymentSetArrayOutput) ToGetDeploymentSetsDeploymentSetArrayOutput() GetDeploymentSetsDeploymentSetArrayOutput {
	return o
}

func (o GetDeploymentSetsDeploymentSetArrayOutput) ToGetDeploymentSetsDeploymentSetArrayOutputWithContext(ctx context.Context) GetDeploymentSetsDeploymentSetArrayOutput {
	return o
}

func (o GetDeploymentSetsDeploymentSetArrayOutput) Index(i pulumi.IntInput) GetDeploymentSetsDeploymentSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDeploymentSetsDeploymentSet {
		return vs[0].([]GetDeploymentSetsDeploymentSet)[vs[1].(int)]
	}).(GetDeploymentSetsDeploymentSetOutput)
}

type GetHpcClustersHpcCluster struct {
	// The created time of the hpc cluster.
	CreatedAt string `pulumi:"createdAt"`
	// The description of the hpc cluster.
	Description string `pulumi:"description"`
	// The id of the hpc cluster.
	HpcClusterId string `pulumi:"hpcClusterId"`
	// The id of the hpc cluster.
	Id string `pulumi:"id"`
	// The name of the hpc cluster.
	Name string `pulumi:"name"`
	// The updated time of the hpc cluster.
	UpdatedAt string `pulumi:"updatedAt"`
	// The vpc id of the hpc cluster.
	VpcId string `pulumi:"vpcId"`
	// The zone id of the hpc cluster.
	ZoneId string `pulumi:"zoneId"`
}

// GetHpcClustersHpcClusterInput is an input type that accepts GetHpcClustersHpcClusterArgs and GetHpcClustersHpcClusterOutput values.
// You can construct a concrete instance of `GetHpcClustersHpcClusterInput` via:
//
//	GetHpcClustersHpcClusterArgs{...}
type GetHpcClustersHpcClusterInput interface {
	pulumi.Input

	ToGetHpcClustersHpcClusterOutput() GetHpcClustersHpcClusterOutput
	ToGetHpcClustersHpcClusterOutputWithContext(context.Context) GetHpcClustersHpcClusterOutput
}

type GetHpcClustersHpcClusterArgs struct {
	// The created time of the hpc cluster.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of the hpc cluster.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the hpc cluster.
	HpcClusterId pulumi.StringInput `pulumi:"hpcClusterId"`
	// The id of the hpc cluster.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the hpc cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// The updated time of the hpc cluster.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The vpc id of the hpc cluster.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone id of the hpc cluster.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetHpcClustersHpcClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHpcClustersHpcCluster)(nil)).Elem()
}

func (i GetHpcClustersHpcClusterArgs) ToGetHpcClustersHpcClusterOutput() GetHpcClustersHpcClusterOutput {
	return i.ToGetHpcClustersHpcClusterOutputWithContext(context.Background())
}

func (i GetHpcClustersHpcClusterArgs) ToGetHpcClustersHpcClusterOutputWithContext(ctx context.Context) GetHpcClustersHpcClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHpcClustersHpcClusterOutput)
}

// GetHpcClustersHpcClusterArrayInput is an input type that accepts GetHpcClustersHpcClusterArray and GetHpcClustersHpcClusterArrayOutput values.
// You can construct a concrete instance of `GetHpcClustersHpcClusterArrayInput` via:
//
//	GetHpcClustersHpcClusterArray{ GetHpcClustersHpcClusterArgs{...} }
type GetHpcClustersHpcClusterArrayInput interface {
	pulumi.Input

	ToGetHpcClustersHpcClusterArrayOutput() GetHpcClustersHpcClusterArrayOutput
	ToGetHpcClustersHpcClusterArrayOutputWithContext(context.Context) GetHpcClustersHpcClusterArrayOutput
}

type GetHpcClustersHpcClusterArray []GetHpcClustersHpcClusterInput

func (GetHpcClustersHpcClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHpcClustersHpcCluster)(nil)).Elem()
}

func (i GetHpcClustersHpcClusterArray) ToGetHpcClustersHpcClusterArrayOutput() GetHpcClustersHpcClusterArrayOutput {
	return i.ToGetHpcClustersHpcClusterArrayOutputWithContext(context.Background())
}

func (i GetHpcClustersHpcClusterArray) ToGetHpcClustersHpcClusterArrayOutputWithContext(ctx context.Context) GetHpcClustersHpcClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetHpcClustersHpcClusterArrayOutput)
}

type GetHpcClustersHpcClusterOutput struct{ *pulumi.OutputState }

func (GetHpcClustersHpcClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetHpcClustersHpcCluster)(nil)).Elem()
}

func (o GetHpcClustersHpcClusterOutput) ToGetHpcClustersHpcClusterOutput() GetHpcClustersHpcClusterOutput {
	return o
}

func (o GetHpcClustersHpcClusterOutput) ToGetHpcClustersHpcClusterOutputWithContext(ctx context.Context) GetHpcClustersHpcClusterOutput {
	return o
}

// The created time of the hpc cluster.
func (o GetHpcClustersHpcClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetHpcClustersHpcCluster) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of the hpc cluster.
func (o GetHpcClustersHpcClusterOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetHpcClustersHpcCluster) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the hpc cluster.
func (o GetHpcClustersHpcClusterOutput) HpcClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHpcClustersHpcCluster) string { return v.HpcClusterId }).(pulumi.StringOutput)
}

// The id of the hpc cluster.
func (o GetHpcClustersHpcClusterOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetHpcClustersHpcCluster) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the hpc cluster.
func (o GetHpcClustersHpcClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetHpcClustersHpcCluster) string { return v.Name }).(pulumi.StringOutput)
}

// The updated time of the hpc cluster.
func (o GetHpcClustersHpcClusterOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetHpcClustersHpcCluster) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The vpc id of the hpc cluster.
func (o GetHpcClustersHpcClusterOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHpcClustersHpcCluster) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of the hpc cluster.
func (o GetHpcClustersHpcClusterOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetHpcClustersHpcCluster) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetHpcClustersHpcClusterArrayOutput struct{ *pulumi.OutputState }

func (GetHpcClustersHpcClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetHpcClustersHpcCluster)(nil)).Elem()
}

func (o GetHpcClustersHpcClusterArrayOutput) ToGetHpcClustersHpcClusterArrayOutput() GetHpcClustersHpcClusterArrayOutput {
	return o
}

func (o GetHpcClustersHpcClusterArrayOutput) ToGetHpcClustersHpcClusterArrayOutputWithContext(ctx context.Context) GetHpcClustersHpcClusterArrayOutput {
	return o
}

func (o GetHpcClustersHpcClusterArrayOutput) Index(i pulumi.IntInput) GetHpcClustersHpcClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetHpcClustersHpcCluster {
		return vs[0].([]GetHpcClustersHpcCluster)[vs[1].(int)]
	}).(GetHpcClustersHpcClusterOutput)
}

type GetImageSharePermissionsAccount struct {
	// The shared account id of the image.
	AccountId string `pulumi:"accountId"`
}

// GetImageSharePermissionsAccountInput is an input type that accepts GetImageSharePermissionsAccountArgs and GetImageSharePermissionsAccountOutput values.
// You can construct a concrete instance of `GetImageSharePermissionsAccountInput` via:
//
//	GetImageSharePermissionsAccountArgs{...}
type GetImageSharePermissionsAccountInput interface {
	pulumi.Input

	ToGetImageSharePermissionsAccountOutput() GetImageSharePermissionsAccountOutput
	ToGetImageSharePermissionsAccountOutputWithContext(context.Context) GetImageSharePermissionsAccountOutput
}

type GetImageSharePermissionsAccountArgs struct {
	// The shared account id of the image.
	AccountId pulumi.StringInput `pulumi:"accountId"`
}

func (GetImageSharePermissionsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageSharePermissionsAccount)(nil)).Elem()
}

func (i GetImageSharePermissionsAccountArgs) ToGetImageSharePermissionsAccountOutput() GetImageSharePermissionsAccountOutput {
	return i.ToGetImageSharePermissionsAccountOutputWithContext(context.Background())
}

func (i GetImageSharePermissionsAccountArgs) ToGetImageSharePermissionsAccountOutputWithContext(ctx context.Context) GetImageSharePermissionsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageSharePermissionsAccountOutput)
}

// GetImageSharePermissionsAccountArrayInput is an input type that accepts GetImageSharePermissionsAccountArray and GetImageSharePermissionsAccountArrayOutput values.
// You can construct a concrete instance of `GetImageSharePermissionsAccountArrayInput` via:
//
//	GetImageSharePermissionsAccountArray{ GetImageSharePermissionsAccountArgs{...} }
type GetImageSharePermissionsAccountArrayInput interface {
	pulumi.Input

	ToGetImageSharePermissionsAccountArrayOutput() GetImageSharePermissionsAccountArrayOutput
	ToGetImageSharePermissionsAccountArrayOutputWithContext(context.Context) GetImageSharePermissionsAccountArrayOutput
}

type GetImageSharePermissionsAccountArray []GetImageSharePermissionsAccountInput

func (GetImageSharePermissionsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageSharePermissionsAccount)(nil)).Elem()
}

func (i GetImageSharePermissionsAccountArray) ToGetImageSharePermissionsAccountArrayOutput() GetImageSharePermissionsAccountArrayOutput {
	return i.ToGetImageSharePermissionsAccountArrayOutputWithContext(context.Background())
}

func (i GetImageSharePermissionsAccountArray) ToGetImageSharePermissionsAccountArrayOutputWithContext(ctx context.Context) GetImageSharePermissionsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImageSharePermissionsAccountArrayOutput)
}

type GetImageSharePermissionsAccountOutput struct{ *pulumi.OutputState }

func (GetImageSharePermissionsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageSharePermissionsAccount)(nil)).Elem()
}

func (o GetImageSharePermissionsAccountOutput) ToGetImageSharePermissionsAccountOutput() GetImageSharePermissionsAccountOutput {
	return o
}

func (o GetImageSharePermissionsAccountOutput) ToGetImageSharePermissionsAccountOutputWithContext(ctx context.Context) GetImageSharePermissionsAccountOutput {
	return o
}

// The shared account id of the image.
func (o GetImageSharePermissionsAccountOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageSharePermissionsAccount) string { return v.AccountId }).(pulumi.StringOutput)
}

type GetImageSharePermissionsAccountArrayOutput struct{ *pulumi.OutputState }

func (GetImageSharePermissionsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImageSharePermissionsAccount)(nil)).Elem()
}

func (o GetImageSharePermissionsAccountArrayOutput) ToGetImageSharePermissionsAccountArrayOutput() GetImageSharePermissionsAccountArrayOutput {
	return o
}

func (o GetImageSharePermissionsAccountArrayOutput) ToGetImageSharePermissionsAccountArrayOutputWithContext(ctx context.Context) GetImageSharePermissionsAccountArrayOutput {
	return o
}

func (o GetImageSharePermissionsAccountArrayOutput) Index(i pulumi.IntInput) GetImageSharePermissionsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImageSharePermissionsAccount {
		return vs[0].([]GetImageSharePermissionsAccount)[vs[1].(int)]
	}).(GetImageSharePermissionsAccountOutput)
}

type GetImagesImage struct {
	// The architecture of Image.
	Architecture string `pulumi:"architecture"`
	// The boot mode of Image.
	BootMode string `pulumi:"bootMode"`
	// The create time of Image.
	CreatedAt string `pulumi:"createdAt"`
	// The description of Image.
	Description string `pulumi:"description"`
	// The ID of Image.
	ImageId string `pulumi:"imageId"`
	// The name of Image.
	ImageName string `pulumi:"imageName"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit bool `pulumi:"isSupportCloudInit"`
	// The name of Image operating system.
	OsName string `pulumi:"osName"`
	// The operating system type of Image.
	OsType string `pulumi:"osType"`
	// The platform of Image.
	Platform string `pulumi:"platform"`
	// The platform version of Image.
	PlatformVersion string `pulumi:"platformVersion"`
	// The share mode of Image.
	ShareStatus string `pulumi:"shareStatus"`
	// The size(GiB) of Image.
	Size int `pulumi:"size"`
	// A list of Image status, the value can be `available` or `creating` or `error`.
	Status string `pulumi:"status"`
	// Tags.
	Tags []GetImagesImageTag `pulumi:"tags"`
	// The update time of Image.
	UpdatedAt string `pulumi:"updatedAt"`
	// The visibility of Image.
	Visibility string `pulumi:"visibility"`
}

// GetImagesImageInput is an input type that accepts GetImagesImageArgs and GetImagesImageOutput values.
// You can construct a concrete instance of `GetImagesImageInput` via:
//
//	GetImagesImageArgs{...}
type GetImagesImageInput interface {
	pulumi.Input

	ToGetImagesImageOutput() GetImagesImageOutput
	ToGetImagesImageOutputWithContext(context.Context) GetImagesImageOutput
}

type GetImagesImageArgs struct {
	// The architecture of Image.
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// The boot mode of Image.
	BootMode pulumi.StringInput `pulumi:"bootMode"`
	// The create time of Image.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of Image.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of Image.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The name of Image.
	ImageName pulumi.StringInput `pulumi:"imageName"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit pulumi.BoolInput `pulumi:"isSupportCloudInit"`
	// The name of Image operating system.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The operating system type of Image.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The platform of Image.
	Platform pulumi.StringInput `pulumi:"platform"`
	// The platform version of Image.
	PlatformVersion pulumi.StringInput `pulumi:"platformVersion"`
	// The share mode of Image.
	ShareStatus pulumi.StringInput `pulumi:"shareStatus"`
	// The size(GiB) of Image.
	Size pulumi.IntInput `pulumi:"size"`
	// A list of Image status, the value can be `available` or `creating` or `error`.
	Status pulumi.StringInput `pulumi:"status"`
	// Tags.
	Tags GetImagesImageTagArrayInput `pulumi:"tags"`
	// The update time of Image.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The visibility of Image.
	Visibility pulumi.StringInput `pulumi:"visibility"`
}

func (GetImagesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImage)(nil)).Elem()
}

func (i GetImagesImageArgs) ToGetImagesImageOutput() GetImagesImageOutput {
	return i.ToGetImagesImageOutputWithContext(context.Background())
}

func (i GetImagesImageArgs) ToGetImagesImageOutputWithContext(ctx context.Context) GetImagesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageOutput)
}

// GetImagesImageArrayInput is an input type that accepts GetImagesImageArray and GetImagesImageArrayOutput values.
// You can construct a concrete instance of `GetImagesImageArrayInput` via:
//
//	GetImagesImageArray{ GetImagesImageArgs{...} }
type GetImagesImageArrayInput interface {
	pulumi.Input

	ToGetImagesImageArrayOutput() GetImagesImageArrayOutput
	ToGetImagesImageArrayOutputWithContext(context.Context) GetImagesImageArrayOutput
}

type GetImagesImageArray []GetImagesImageInput

func (GetImagesImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImage)(nil)).Elem()
}

func (i GetImagesImageArray) ToGetImagesImageArrayOutput() GetImagesImageArrayOutput {
	return i.ToGetImagesImageArrayOutputWithContext(context.Background())
}

func (i GetImagesImageArray) ToGetImagesImageArrayOutputWithContext(ctx context.Context) GetImagesImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageArrayOutput)
}

type GetImagesImageOutput struct{ *pulumi.OutputState }

func (GetImagesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImage)(nil)).Elem()
}

func (o GetImagesImageOutput) ToGetImagesImageOutput() GetImagesImageOutput {
	return o
}

func (o GetImagesImageOutput) ToGetImagesImageOutputWithContext(ctx context.Context) GetImagesImageOutput {
	return o
}

// The architecture of Image.
func (o GetImagesImageOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Architecture }).(pulumi.StringOutput)
}

// The boot mode of Image.
func (o GetImagesImageOutput) BootMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.BootMode }).(pulumi.StringOutput)
}

// The create time of Image.
func (o GetImagesImageOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of Image.
func (o GetImagesImageOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of Image.
func (o GetImagesImageOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.ImageId }).(pulumi.StringOutput)
}

// The name of Image.
func (o GetImagesImageOutput) ImageName() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.ImageName }).(pulumi.StringOutput)
}

// Whether the Image support cloud-init.
func (o GetImagesImageOutput) IsSupportCloudInit() pulumi.BoolOutput {
	return o.ApplyT(func(v GetImagesImage) bool { return v.IsSupportCloudInit }).(pulumi.BoolOutput)
}

// The name of Image operating system.
func (o GetImagesImageOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.OsName }).(pulumi.StringOutput)
}

// The operating system type of Image.
func (o GetImagesImageOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.OsType }).(pulumi.StringOutput)
}

// The platform of Image.
func (o GetImagesImageOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Platform }).(pulumi.StringOutput)
}

// The platform version of Image.
func (o GetImagesImageOutput) PlatformVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.PlatformVersion }).(pulumi.StringOutput)
}

// The share mode of Image.
func (o GetImagesImageOutput) ShareStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.ShareStatus }).(pulumi.StringOutput)
}

// The size(GiB) of Image.
func (o GetImagesImageOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetImagesImage) int { return v.Size }).(pulumi.IntOutput)
}

// A list of Image status, the value can be `available` or `creating` or `error`.
func (o GetImagesImageOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o GetImagesImageOutput) Tags() GetImagesImageTagArrayOutput {
	return o.ApplyT(func(v GetImagesImage) []GetImagesImageTag { return v.Tags }).(GetImagesImageTagArrayOutput)
}

// The update time of Image.
func (o GetImagesImageOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The visibility of Image.
func (o GetImagesImageOutput) Visibility() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImage) string { return v.Visibility }).(pulumi.StringOutput)
}

type GetImagesImageArrayOutput struct{ *pulumi.OutputState }

func (GetImagesImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImage)(nil)).Elem()
}

func (o GetImagesImageArrayOutput) ToGetImagesImageArrayOutput() GetImagesImageArrayOutput {
	return o
}

func (o GetImagesImageArrayOutput) ToGetImagesImageArrayOutputWithContext(ctx context.Context) GetImagesImageArrayOutput {
	return o
}

func (o GetImagesImageArrayOutput) Index(i pulumi.IntInput) GetImagesImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImagesImage {
		return vs[0].([]GetImagesImage)[vs[1].(int)]
	}).(GetImagesImageOutput)
}

type GetImagesImageTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetImagesImageTagInput is an input type that accepts GetImagesImageTagArgs and GetImagesImageTagOutput values.
// You can construct a concrete instance of `GetImagesImageTagInput` via:
//
//	GetImagesImageTagArgs{...}
type GetImagesImageTagInput interface {
	pulumi.Input

	ToGetImagesImageTagOutput() GetImagesImageTagOutput
	ToGetImagesImageTagOutputWithContext(context.Context) GetImagesImageTagOutput
}

type GetImagesImageTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetImagesImageTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImageTag)(nil)).Elem()
}

func (i GetImagesImageTagArgs) ToGetImagesImageTagOutput() GetImagesImageTagOutput {
	return i.ToGetImagesImageTagOutputWithContext(context.Background())
}

func (i GetImagesImageTagArgs) ToGetImagesImageTagOutputWithContext(ctx context.Context) GetImagesImageTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageTagOutput)
}

// GetImagesImageTagArrayInput is an input type that accepts GetImagesImageTagArray and GetImagesImageTagArrayOutput values.
// You can construct a concrete instance of `GetImagesImageTagArrayInput` via:
//
//	GetImagesImageTagArray{ GetImagesImageTagArgs{...} }
type GetImagesImageTagArrayInput interface {
	pulumi.Input

	ToGetImagesImageTagArrayOutput() GetImagesImageTagArrayOutput
	ToGetImagesImageTagArrayOutputWithContext(context.Context) GetImagesImageTagArrayOutput
}

type GetImagesImageTagArray []GetImagesImageTagInput

func (GetImagesImageTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImageTag)(nil)).Elem()
}

func (i GetImagesImageTagArray) ToGetImagesImageTagArrayOutput() GetImagesImageTagArrayOutput {
	return i.ToGetImagesImageTagArrayOutputWithContext(context.Background())
}

func (i GetImagesImageTagArray) ToGetImagesImageTagArrayOutputWithContext(ctx context.Context) GetImagesImageTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesImageTagArrayOutput)
}

type GetImagesImageTagOutput struct{ *pulumi.OutputState }

func (GetImagesImageTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesImageTag)(nil)).Elem()
}

func (o GetImagesImageTagOutput) ToGetImagesImageTagOutput() GetImagesImageTagOutput {
	return o
}

func (o GetImagesImageTagOutput) ToGetImagesImageTagOutputWithContext(ctx context.Context) GetImagesImageTagOutput {
	return o
}

// The Key of Tags.
func (o GetImagesImageTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImageTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetImagesImageTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesImageTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetImagesImageTagArrayOutput struct{ *pulumi.OutputState }

func (GetImagesImageTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesImageTag)(nil)).Elem()
}

func (o GetImagesImageTagArrayOutput) ToGetImagesImageTagArrayOutput() GetImagesImageTagArrayOutput {
	return o
}

func (o GetImagesImageTagArrayOutput) ToGetImagesImageTagArrayOutputWithContext(ctx context.Context) GetImagesImageTagArrayOutput {
	return o
}

func (o GetImagesImageTagArrayOutput) Index(i pulumi.IntInput) GetImagesImageTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImagesImageTag {
		return vs[0].([]GetImagesImageTag)[vs[1].(int)]
	}).(GetImagesImageTagOutput)
}

type GetImagesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetImagesTagInput is an input type that accepts GetImagesTagArgs and GetImagesTagOutput values.
// You can construct a concrete instance of `GetImagesTagInput` via:
//
//	GetImagesTagArgs{...}
type GetImagesTagInput interface {
	pulumi.Input

	ToGetImagesTagOutput() GetImagesTagOutput
	ToGetImagesTagOutputWithContext(context.Context) GetImagesTagOutput
}

type GetImagesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetImagesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesTag)(nil)).Elem()
}

func (i GetImagesTagArgs) ToGetImagesTagOutput() GetImagesTagOutput {
	return i.ToGetImagesTagOutputWithContext(context.Background())
}

func (i GetImagesTagArgs) ToGetImagesTagOutputWithContext(ctx context.Context) GetImagesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesTagOutput)
}

// GetImagesTagArrayInput is an input type that accepts GetImagesTagArray and GetImagesTagArrayOutput values.
// You can construct a concrete instance of `GetImagesTagArrayInput` via:
//
//	GetImagesTagArray{ GetImagesTagArgs{...} }
type GetImagesTagArrayInput interface {
	pulumi.Input

	ToGetImagesTagArrayOutput() GetImagesTagArrayOutput
	ToGetImagesTagArrayOutputWithContext(context.Context) GetImagesTagArrayOutput
}

type GetImagesTagArray []GetImagesTagInput

func (GetImagesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesTag)(nil)).Elem()
}

func (i GetImagesTagArray) ToGetImagesTagArrayOutput() GetImagesTagArrayOutput {
	return i.ToGetImagesTagArrayOutputWithContext(context.Background())
}

func (i GetImagesTagArray) ToGetImagesTagArrayOutputWithContext(ctx context.Context) GetImagesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetImagesTagArrayOutput)
}

type GetImagesTagOutput struct{ *pulumi.OutputState }

func (GetImagesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImagesTag)(nil)).Elem()
}

func (o GetImagesTagOutput) ToGetImagesTagOutput() GetImagesTagOutput {
	return o
}

func (o GetImagesTagOutput) ToGetImagesTagOutputWithContext(ctx context.Context) GetImagesTagOutput {
	return o
}

// The Key of Tags.
func (o GetImagesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetImagesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetImagesTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetImagesTagArrayOutput struct{ *pulumi.OutputState }

func (GetImagesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetImagesTag)(nil)).Elem()
}

func (o GetImagesTagArrayOutput) ToGetImagesTagArrayOutput() GetImagesTagArrayOutput {
	return o
}

func (o GetImagesTagArrayOutput) ToGetImagesTagArrayOutputWithContext(ctx context.Context) GetImagesTagArrayOutput {
	return o
}

func (o GetImagesTagArrayOutput) Index(i pulumi.IntInput) GetImagesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetImagesTag {
		return vs[0].([]GetImagesTag)[vs[1].(int)]
	}).(GetImagesTagOutput)
}

type GetInstanceTypesInstanceType struct {
	// The CPU benchmark performance that can be provided steadily by on-demand instances is determined by the instance type.
	BaselineCredit int `pulumi:"baselineCredit"`
	// The GPU device info of Instance.
	Gpus []GetInstanceTypesInstanceTypeGpus `pulumi:"gpus"`
	// The CPU credits obtained at once when creating a on-demand performance instance are fixed at 30 credits per vCPU.
	InitialCredit int `pulumi:"initialCredit"`
	// The instance type family.
	InstanceTypeFamily string `pulumi:"instanceTypeFamily"`
	// The id of the instance type.
	InstanceTypeId string `pulumi:"instanceTypeId"`
	// Local disk configuration information corresponding to instance specifications.
	LocalVolumes []GetInstanceTypesInstanceTypeLocalVolume `pulumi:"localVolumes"`
	// Memory information of instance specifications.
	Memories []GetInstanceTypesInstanceTypeMemory `pulumi:"memories"`
	// Network information of instance specifications.
	Networks []GetInstanceTypesInstanceTypeNetwork `pulumi:"networks"`
	// CPU information of instance specifications.
	Processors []GetInstanceTypesInstanceTypeProcessor `pulumi:"processors"`
	// RDMA Specification Information.
	Rdmas []GetInstanceTypesInstanceTypeRdma `pulumi:"rdmas"`
	// Cloud disk information for instance specifications.
	Volumes []GetInstanceTypesInstanceTypeVolume `pulumi:"volumes"`
}

// GetInstanceTypesInstanceTypeInput is an input type that accepts GetInstanceTypesInstanceTypeArgs and GetInstanceTypesInstanceTypeOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeInput` via:
//
//	GetInstanceTypesInstanceTypeArgs{...}
type GetInstanceTypesInstanceTypeInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeOutput() GetInstanceTypesInstanceTypeOutput
	ToGetInstanceTypesInstanceTypeOutputWithContext(context.Context) GetInstanceTypesInstanceTypeOutput
}

type GetInstanceTypesInstanceTypeArgs struct {
	// The CPU benchmark performance that can be provided steadily by on-demand instances is determined by the instance type.
	BaselineCredit pulumi.IntInput `pulumi:"baselineCredit"`
	// The GPU device info of Instance.
	Gpus GetInstanceTypesInstanceTypeGpusArrayInput `pulumi:"gpus"`
	// The CPU credits obtained at once when creating a on-demand performance instance are fixed at 30 credits per vCPU.
	InitialCredit pulumi.IntInput `pulumi:"initialCredit"`
	// The instance type family.
	InstanceTypeFamily pulumi.StringInput `pulumi:"instanceTypeFamily"`
	// The id of the instance type.
	InstanceTypeId pulumi.StringInput `pulumi:"instanceTypeId"`
	// Local disk configuration information corresponding to instance specifications.
	LocalVolumes GetInstanceTypesInstanceTypeLocalVolumeArrayInput `pulumi:"localVolumes"`
	// Memory information of instance specifications.
	Memories GetInstanceTypesInstanceTypeMemoryArrayInput `pulumi:"memories"`
	// Network information of instance specifications.
	Networks GetInstanceTypesInstanceTypeNetworkArrayInput `pulumi:"networks"`
	// CPU information of instance specifications.
	Processors GetInstanceTypesInstanceTypeProcessorArrayInput `pulumi:"processors"`
	// RDMA Specification Information.
	Rdmas GetInstanceTypesInstanceTypeRdmaArrayInput `pulumi:"rdmas"`
	// Cloud disk information for instance specifications.
	Volumes GetInstanceTypesInstanceTypeVolumeArrayInput `pulumi:"volumes"`
}

func (GetInstanceTypesInstanceTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceType)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeArgs) ToGetInstanceTypesInstanceTypeOutput() GetInstanceTypesInstanceTypeOutput {
	return i.ToGetInstanceTypesInstanceTypeOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeArgs) ToGetInstanceTypesInstanceTypeOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeOutput)
}

// GetInstanceTypesInstanceTypeArrayInput is an input type that accepts GetInstanceTypesInstanceTypeArray and GetInstanceTypesInstanceTypeArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeArrayInput` via:
//
//	GetInstanceTypesInstanceTypeArray{ GetInstanceTypesInstanceTypeArgs{...} }
type GetInstanceTypesInstanceTypeArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeArrayOutput() GetInstanceTypesInstanceTypeArrayOutput
	ToGetInstanceTypesInstanceTypeArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeArrayOutput
}

type GetInstanceTypesInstanceTypeArray []GetInstanceTypesInstanceTypeInput

func (GetInstanceTypesInstanceTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceType)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeArray) ToGetInstanceTypesInstanceTypeArrayOutput() GetInstanceTypesInstanceTypeArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeArray) ToGetInstanceTypesInstanceTypeArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeArrayOutput)
}

type GetInstanceTypesInstanceTypeOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceType)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeOutput) ToGetInstanceTypesInstanceTypeOutput() GetInstanceTypesInstanceTypeOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeOutput) ToGetInstanceTypesInstanceTypeOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeOutput {
	return o
}

// The CPU benchmark performance that can be provided steadily by on-demand instances is determined by the instance type.
func (o GetInstanceTypesInstanceTypeOutput) BaselineCredit() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) int { return v.BaselineCredit }).(pulumi.IntOutput)
}

// The GPU device info of Instance.
func (o GetInstanceTypesInstanceTypeOutput) Gpus() GetInstanceTypesInstanceTypeGpusArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) []GetInstanceTypesInstanceTypeGpus { return v.Gpus }).(GetInstanceTypesInstanceTypeGpusArrayOutput)
}

// The CPU credits obtained at once when creating a on-demand performance instance are fixed at 30 credits per vCPU.
func (o GetInstanceTypesInstanceTypeOutput) InitialCredit() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) int { return v.InitialCredit }).(pulumi.IntOutput)
}

// The instance type family.
func (o GetInstanceTypesInstanceTypeOutput) InstanceTypeFamily() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) string { return v.InstanceTypeFamily }).(pulumi.StringOutput)
}

// The id of the instance type.
func (o GetInstanceTypesInstanceTypeOutput) InstanceTypeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) string { return v.InstanceTypeId }).(pulumi.StringOutput)
}

// Local disk configuration information corresponding to instance specifications.
func (o GetInstanceTypesInstanceTypeOutput) LocalVolumes() GetInstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) []GetInstanceTypesInstanceTypeLocalVolume { return v.LocalVolumes }).(GetInstanceTypesInstanceTypeLocalVolumeArrayOutput)
}

// Memory information of instance specifications.
func (o GetInstanceTypesInstanceTypeOutput) Memories() GetInstanceTypesInstanceTypeMemoryArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) []GetInstanceTypesInstanceTypeMemory { return v.Memories }).(GetInstanceTypesInstanceTypeMemoryArrayOutput)
}

// Network information of instance specifications.
func (o GetInstanceTypesInstanceTypeOutput) Networks() GetInstanceTypesInstanceTypeNetworkArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) []GetInstanceTypesInstanceTypeNetwork { return v.Networks }).(GetInstanceTypesInstanceTypeNetworkArrayOutput)
}

// CPU information of instance specifications.
func (o GetInstanceTypesInstanceTypeOutput) Processors() GetInstanceTypesInstanceTypeProcessorArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) []GetInstanceTypesInstanceTypeProcessor { return v.Processors }).(GetInstanceTypesInstanceTypeProcessorArrayOutput)
}

// RDMA Specification Information.
func (o GetInstanceTypesInstanceTypeOutput) Rdmas() GetInstanceTypesInstanceTypeRdmaArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) []GetInstanceTypesInstanceTypeRdma { return v.Rdmas }).(GetInstanceTypesInstanceTypeRdmaArrayOutput)
}

// Cloud disk information for instance specifications.
func (o GetInstanceTypesInstanceTypeOutput) Volumes() GetInstanceTypesInstanceTypeVolumeArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceType) []GetInstanceTypesInstanceTypeVolume { return v.Volumes }).(GetInstanceTypesInstanceTypeVolumeArrayOutput)
}

type GetInstanceTypesInstanceTypeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceType)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeArrayOutput) ToGetInstanceTypesInstanceTypeArrayOutput() GetInstanceTypesInstanceTypeArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeArrayOutput) ToGetInstanceTypesInstanceTypeArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceType {
		return vs[0].([]GetInstanceTypesInstanceType)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeOutput)
}

type GetInstanceTypesInstanceTypeGpus struct {
	// GPU device information list.
	GpuDevices []GetInstanceTypesInstanceTypeGpusGpuDevice `pulumi:"gpuDevices"`
}

// GetInstanceTypesInstanceTypeGpusInput is an input type that accepts GetInstanceTypesInstanceTypeGpusArgs and GetInstanceTypesInstanceTypeGpusOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeGpusInput` via:
//
//	GetInstanceTypesInstanceTypeGpusArgs{...}
type GetInstanceTypesInstanceTypeGpusInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeGpusOutput() GetInstanceTypesInstanceTypeGpusOutput
	ToGetInstanceTypesInstanceTypeGpusOutputWithContext(context.Context) GetInstanceTypesInstanceTypeGpusOutput
}

type GetInstanceTypesInstanceTypeGpusArgs struct {
	// GPU device information list.
	GpuDevices GetInstanceTypesInstanceTypeGpusGpuDeviceArrayInput `pulumi:"gpuDevices"`
}

func (GetInstanceTypesInstanceTypeGpusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeGpusArgs) ToGetInstanceTypesInstanceTypeGpusOutput() GetInstanceTypesInstanceTypeGpusOutput {
	return i.ToGetInstanceTypesInstanceTypeGpusOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeGpusArgs) ToGetInstanceTypesInstanceTypeGpusOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeGpusOutput)
}

// GetInstanceTypesInstanceTypeGpusArrayInput is an input type that accepts GetInstanceTypesInstanceTypeGpusArray and GetInstanceTypesInstanceTypeGpusArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeGpusArrayInput` via:
//
//	GetInstanceTypesInstanceTypeGpusArray{ GetInstanceTypesInstanceTypeGpusArgs{...} }
type GetInstanceTypesInstanceTypeGpusArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeGpusArrayOutput() GetInstanceTypesInstanceTypeGpusArrayOutput
	ToGetInstanceTypesInstanceTypeGpusArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeGpusArrayOutput
}

type GetInstanceTypesInstanceTypeGpusArray []GetInstanceTypesInstanceTypeGpusInput

func (GetInstanceTypesInstanceTypeGpusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeGpusArray) ToGetInstanceTypesInstanceTypeGpusArrayOutput() GetInstanceTypesInstanceTypeGpusArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeGpusArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeGpusArray) ToGetInstanceTypesInstanceTypeGpusArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeGpusArrayOutput)
}

type GetInstanceTypesInstanceTypeGpusOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeGpusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeGpusOutput) ToGetInstanceTypesInstanceTypeGpusOutput() GetInstanceTypesInstanceTypeGpusOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeGpusOutput) ToGetInstanceTypesInstanceTypeGpusOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusOutput {
	return o
}

// GPU device information list.
func (o GetInstanceTypesInstanceTypeGpusOutput) GpuDevices() GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeGpus) []GetInstanceTypesInstanceTypeGpusGpuDevice {
		return v.GpuDevices
	}).(GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput)
}

type GetInstanceTypesInstanceTypeGpusArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeGpusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeGpus)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeGpusArrayOutput) ToGetInstanceTypesInstanceTypeGpusArrayOutput() GetInstanceTypesInstanceTypeGpusArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeGpusArrayOutput) ToGetInstanceTypesInstanceTypeGpusArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeGpusArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeGpusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceTypeGpus {
		return vs[0].([]GetInstanceTypesInstanceTypeGpus)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeGpusOutput)
}

type GetInstanceTypesInstanceTypeGpusGpuDevice struct {
	// The number of local disks mounted on the instance.
	Count int `pulumi:"count"`
	// Memory information of instance specifications.
	Memories []GetInstanceTypesInstanceTypeGpusGpuDeviceMemory `pulumi:"memories"`
	// The Product Name of GPU device.
	ProductName string `pulumi:"productName"`
}

// GetInstanceTypesInstanceTypeGpusGpuDeviceInput is an input type that accepts GetInstanceTypesInstanceTypeGpusGpuDeviceArgs and GetInstanceTypesInstanceTypeGpusGpuDeviceOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeGpusGpuDeviceInput` via:
//
//	GetInstanceTypesInstanceTypeGpusGpuDeviceArgs{...}
type GetInstanceTypesInstanceTypeGpusGpuDeviceInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeGpusGpuDeviceOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceOutput
	ToGetInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceOutput
}

type GetInstanceTypesInstanceTypeGpusGpuDeviceArgs struct {
	// The number of local disks mounted on the instance.
	Count pulumi.IntInput `pulumi:"count"`
	// Memory information of instance specifications.
	Memories GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput `pulumi:"memories"`
	// The Product Name of GPU device.
	ProductName pulumi.StringInput `pulumi:"productName"`
}

func (GetInstanceTypesInstanceTypeGpusGpuDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeGpusGpuDeviceArgs) ToGetInstanceTypesInstanceTypeGpusGpuDeviceOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return i.ToGetInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeGpusGpuDeviceArgs) ToGetInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeGpusGpuDeviceOutput)
}

// GetInstanceTypesInstanceTypeGpusGpuDeviceArrayInput is an input type that accepts GetInstanceTypesInstanceTypeGpusGpuDeviceArray and GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeGpusGpuDeviceArrayInput` via:
//
//	GetInstanceTypesInstanceTypeGpusGpuDeviceArray{ GetInstanceTypesInstanceTypeGpusGpuDeviceArgs{...} }
type GetInstanceTypesInstanceTypeGpusGpuDeviceArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput
	ToGetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput
}

type GetInstanceTypesInstanceTypeGpusGpuDeviceArray []GetInstanceTypesInstanceTypeGpusGpuDeviceInput

func (GetInstanceTypesInstanceTypeGpusGpuDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeGpusGpuDeviceArray) ToGetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeGpusGpuDeviceArray) ToGetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput)
}

type GetInstanceTypesInstanceTypeGpusGpuDeviceOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeGpusGpuDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceOutput) ToGetInstanceTypesInstanceTypeGpusGpuDeviceOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceOutput) ToGetInstanceTypesInstanceTypeGpusGpuDeviceOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return o
}

// The number of local disks mounted on the instance.
func (o GetInstanceTypesInstanceTypeGpusGpuDeviceOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeGpusGpuDevice) int { return v.Count }).(pulumi.IntOutput)
}

// Memory information of instance specifications.
func (o GetInstanceTypesInstanceTypeGpusGpuDeviceOutput) Memories() GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeGpusGpuDevice) []GetInstanceTypesInstanceTypeGpusGpuDeviceMemory {
		return v.Memories
	}).(GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput)
}

// The Product Name of GPU device.
func (o GetInstanceTypesInstanceTypeGpusGpuDeviceOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeGpusGpuDevice) string { return v.ProductName }).(pulumi.StringOutput)
}

type GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeGpusGpuDevice)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) ToGetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) ToGetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeGpusGpuDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceTypeGpusGpuDevice {
		return vs[0].([]GetInstanceTypesInstanceTypeGpusGpuDevice)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeGpusGpuDeviceOutput)
}

type GetInstanceTypesInstanceTypeGpusGpuDeviceMemory struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize int `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size int `pulumi:"size"`
}

// GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryInput is an input type that accepts GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs and GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryInput` via:
//
//	GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs{...}
type GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput
	ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput
}

type GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize pulumi.IntInput `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size pulumi.IntInput `pulumi:"size"`
}

func (GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs) ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return i.ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs) ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput)
}

// GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput is an input type that accepts GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArray and GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput` via:
//
//	GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArray{ GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs{...} }
type GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput
	ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput
}

type GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArray []GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryInput

func (GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArray) ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArray) ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput)
}

type GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return o
}

// The Encrypted Memory Size of GPU device.
func (o GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) EncryptedSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeGpusGpuDeviceMemory) int { return v.EncryptedSize }).(pulumi.IntOutput)
}

// Memory size, unit: MiB.
func (o GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeGpusGpuDeviceMemory) int { return v.Size }).(pulumi.IntOutput)
}

type GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeGpusGpuDeviceMemory)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput() GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) ToGetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceTypeGpusGpuDeviceMemory {
		return vs[0].([]GetInstanceTypesInstanceTypeGpusGpuDeviceMemory)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput)
}

type GetInstanceTypesInstanceTypeLocalVolume struct {
	// The number of local disks mounted on the instance.
	Count int `pulumi:"count"`
	// Memory size, unit: MiB.
	Size int `pulumi:"size"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// GetInstanceTypesInstanceTypeLocalVolumeInput is an input type that accepts GetInstanceTypesInstanceTypeLocalVolumeArgs and GetInstanceTypesInstanceTypeLocalVolumeOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeLocalVolumeInput` via:
//
//	GetInstanceTypesInstanceTypeLocalVolumeArgs{...}
type GetInstanceTypesInstanceTypeLocalVolumeInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeLocalVolumeOutput() GetInstanceTypesInstanceTypeLocalVolumeOutput
	ToGetInstanceTypesInstanceTypeLocalVolumeOutputWithContext(context.Context) GetInstanceTypesInstanceTypeLocalVolumeOutput
}

type GetInstanceTypesInstanceTypeLocalVolumeArgs struct {
	// The number of local disks mounted on the instance.
	Count pulumi.IntInput `pulumi:"count"`
	// Memory size, unit: MiB.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (GetInstanceTypesInstanceTypeLocalVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeLocalVolumeArgs) ToGetInstanceTypesInstanceTypeLocalVolumeOutput() GetInstanceTypesInstanceTypeLocalVolumeOutput {
	return i.ToGetInstanceTypesInstanceTypeLocalVolumeOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeLocalVolumeArgs) ToGetInstanceTypesInstanceTypeLocalVolumeOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeLocalVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeLocalVolumeOutput)
}

// GetInstanceTypesInstanceTypeLocalVolumeArrayInput is an input type that accepts GetInstanceTypesInstanceTypeLocalVolumeArray and GetInstanceTypesInstanceTypeLocalVolumeArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeLocalVolumeArrayInput` via:
//
//	GetInstanceTypesInstanceTypeLocalVolumeArray{ GetInstanceTypesInstanceTypeLocalVolumeArgs{...} }
type GetInstanceTypesInstanceTypeLocalVolumeArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeLocalVolumeArrayOutput() GetInstanceTypesInstanceTypeLocalVolumeArrayOutput
	ToGetInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeLocalVolumeArrayOutput
}

type GetInstanceTypesInstanceTypeLocalVolumeArray []GetInstanceTypesInstanceTypeLocalVolumeInput

func (GetInstanceTypesInstanceTypeLocalVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeLocalVolumeArray) ToGetInstanceTypesInstanceTypeLocalVolumeArrayOutput() GetInstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeLocalVolumeArray) ToGetInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeLocalVolumeArrayOutput)
}

type GetInstanceTypesInstanceTypeLocalVolumeOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeLocalVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeLocalVolumeOutput) ToGetInstanceTypesInstanceTypeLocalVolumeOutput() GetInstanceTypesInstanceTypeLocalVolumeOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeLocalVolumeOutput) ToGetInstanceTypesInstanceTypeLocalVolumeOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeLocalVolumeOutput {
	return o
}

// The number of local disks mounted on the instance.
func (o GetInstanceTypesInstanceTypeLocalVolumeOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeLocalVolume) int { return v.Count }).(pulumi.IntOutput)
}

// Memory size, unit: MiB.
func (o GetInstanceTypesInstanceTypeLocalVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeLocalVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume.
func (o GetInstanceTypesInstanceTypeLocalVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeLocalVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type GetInstanceTypesInstanceTypeLocalVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeLocalVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeLocalVolume)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeLocalVolumeArrayOutput) ToGetInstanceTypesInstanceTypeLocalVolumeArrayOutput() GetInstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeLocalVolumeArrayOutput) ToGetInstanceTypesInstanceTypeLocalVolumeArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeLocalVolumeArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeLocalVolumeArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeLocalVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceTypeLocalVolume {
		return vs[0].([]GetInstanceTypesInstanceTypeLocalVolume)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeLocalVolumeOutput)
}

type GetInstanceTypesInstanceTypeMemory struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize int `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size int `pulumi:"size"`
}

// GetInstanceTypesInstanceTypeMemoryInput is an input type that accepts GetInstanceTypesInstanceTypeMemoryArgs and GetInstanceTypesInstanceTypeMemoryOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeMemoryInput` via:
//
//	GetInstanceTypesInstanceTypeMemoryArgs{...}
type GetInstanceTypesInstanceTypeMemoryInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeMemoryOutput() GetInstanceTypesInstanceTypeMemoryOutput
	ToGetInstanceTypesInstanceTypeMemoryOutputWithContext(context.Context) GetInstanceTypesInstanceTypeMemoryOutput
}

type GetInstanceTypesInstanceTypeMemoryArgs struct {
	// The Encrypted Memory Size of GPU device.
	EncryptedSize pulumi.IntInput `pulumi:"encryptedSize"`
	// Memory size, unit: MiB.
	Size pulumi.IntInput `pulumi:"size"`
}

func (GetInstanceTypesInstanceTypeMemoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeMemoryArgs) ToGetInstanceTypesInstanceTypeMemoryOutput() GetInstanceTypesInstanceTypeMemoryOutput {
	return i.ToGetInstanceTypesInstanceTypeMemoryOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeMemoryArgs) ToGetInstanceTypesInstanceTypeMemoryOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeMemoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeMemoryOutput)
}

// GetInstanceTypesInstanceTypeMemoryArrayInput is an input type that accepts GetInstanceTypesInstanceTypeMemoryArray and GetInstanceTypesInstanceTypeMemoryArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeMemoryArrayInput` via:
//
//	GetInstanceTypesInstanceTypeMemoryArray{ GetInstanceTypesInstanceTypeMemoryArgs{...} }
type GetInstanceTypesInstanceTypeMemoryArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeMemoryArrayOutput() GetInstanceTypesInstanceTypeMemoryArrayOutput
	ToGetInstanceTypesInstanceTypeMemoryArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeMemoryArrayOutput
}

type GetInstanceTypesInstanceTypeMemoryArray []GetInstanceTypesInstanceTypeMemoryInput

func (GetInstanceTypesInstanceTypeMemoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeMemoryArray) ToGetInstanceTypesInstanceTypeMemoryArrayOutput() GetInstanceTypesInstanceTypeMemoryArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeMemoryArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeMemoryArray) ToGetInstanceTypesInstanceTypeMemoryArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeMemoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeMemoryArrayOutput)
}

type GetInstanceTypesInstanceTypeMemoryOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeMemoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeMemoryOutput) ToGetInstanceTypesInstanceTypeMemoryOutput() GetInstanceTypesInstanceTypeMemoryOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeMemoryOutput) ToGetInstanceTypesInstanceTypeMemoryOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeMemoryOutput {
	return o
}

// The Encrypted Memory Size of GPU device.
func (o GetInstanceTypesInstanceTypeMemoryOutput) EncryptedSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeMemory) int { return v.EncryptedSize }).(pulumi.IntOutput)
}

// Memory size, unit: MiB.
func (o GetInstanceTypesInstanceTypeMemoryOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeMemory) int { return v.Size }).(pulumi.IntOutput)
}

type GetInstanceTypesInstanceTypeMemoryArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeMemoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeMemory)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeMemoryArrayOutput) ToGetInstanceTypesInstanceTypeMemoryArrayOutput() GetInstanceTypesInstanceTypeMemoryArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeMemoryArrayOutput) ToGetInstanceTypesInstanceTypeMemoryArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeMemoryArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeMemoryArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeMemoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceTypeMemory {
		return vs[0].([]GetInstanceTypesInstanceTypeMemory)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeMemoryOutput)
}

type GetInstanceTypesInstanceTypeNetwork struct {
	// Network benchmark bandwidth capacity (out/in), unit: Mbps.
	BaselineBandwidthMbps int `pulumi:"baselineBandwidthMbps"`
	// Peak network bandwidth capacity (out/in), unit: Mbps.
	MaximumBandwidthMbps int `pulumi:"maximumBandwidthMbps"`
	// Maximum number of elastic network interfaces supported for attachment.
	MaximumNetworkInterfaces int `pulumi:"maximumNetworkInterfaces"`
	// Maximum number of IPv4 addresses for a single elastic network interface.
	MaximumPrivateIpv4AddressesPerNetworkInterface int `pulumi:"maximumPrivateIpv4AddressesPerNetworkInterface"`
	// Maximum queue number for a single elastic network interface, including the queue number supported by the primary network interface and the auxiliary network interface.
	MaximumQueuesPerNetworkInterface int `pulumi:"maximumQueuesPerNetworkInterface"`
	// Network packet sending and receiving capacity (in+out), unit: Kpps.
	MaximumThroughputKpps int `pulumi:"maximumThroughputKpps"`
}

// GetInstanceTypesInstanceTypeNetworkInput is an input type that accepts GetInstanceTypesInstanceTypeNetworkArgs and GetInstanceTypesInstanceTypeNetworkOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeNetworkInput` via:
//
//	GetInstanceTypesInstanceTypeNetworkArgs{...}
type GetInstanceTypesInstanceTypeNetworkInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeNetworkOutput() GetInstanceTypesInstanceTypeNetworkOutput
	ToGetInstanceTypesInstanceTypeNetworkOutputWithContext(context.Context) GetInstanceTypesInstanceTypeNetworkOutput
}

type GetInstanceTypesInstanceTypeNetworkArgs struct {
	// Network benchmark bandwidth capacity (out/in), unit: Mbps.
	BaselineBandwidthMbps pulumi.IntInput `pulumi:"baselineBandwidthMbps"`
	// Peak network bandwidth capacity (out/in), unit: Mbps.
	MaximumBandwidthMbps pulumi.IntInput `pulumi:"maximumBandwidthMbps"`
	// Maximum number of elastic network interfaces supported for attachment.
	MaximumNetworkInterfaces pulumi.IntInput `pulumi:"maximumNetworkInterfaces"`
	// Maximum number of IPv4 addresses for a single elastic network interface.
	MaximumPrivateIpv4AddressesPerNetworkInterface pulumi.IntInput `pulumi:"maximumPrivateIpv4AddressesPerNetworkInterface"`
	// Maximum queue number for a single elastic network interface, including the queue number supported by the primary network interface and the auxiliary network interface.
	MaximumQueuesPerNetworkInterface pulumi.IntInput `pulumi:"maximumQueuesPerNetworkInterface"`
	// Network packet sending and receiving capacity (in+out), unit: Kpps.
	MaximumThroughputKpps pulumi.IntInput `pulumi:"maximumThroughputKpps"`
}

func (GetInstanceTypesInstanceTypeNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeNetworkArgs) ToGetInstanceTypesInstanceTypeNetworkOutput() GetInstanceTypesInstanceTypeNetworkOutput {
	return i.ToGetInstanceTypesInstanceTypeNetworkOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeNetworkArgs) ToGetInstanceTypesInstanceTypeNetworkOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeNetworkOutput)
}

// GetInstanceTypesInstanceTypeNetworkArrayInput is an input type that accepts GetInstanceTypesInstanceTypeNetworkArray and GetInstanceTypesInstanceTypeNetworkArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeNetworkArrayInput` via:
//
//	GetInstanceTypesInstanceTypeNetworkArray{ GetInstanceTypesInstanceTypeNetworkArgs{...} }
type GetInstanceTypesInstanceTypeNetworkArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeNetworkArrayOutput() GetInstanceTypesInstanceTypeNetworkArrayOutput
	ToGetInstanceTypesInstanceTypeNetworkArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeNetworkArrayOutput
}

type GetInstanceTypesInstanceTypeNetworkArray []GetInstanceTypesInstanceTypeNetworkInput

func (GetInstanceTypesInstanceTypeNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeNetworkArray) ToGetInstanceTypesInstanceTypeNetworkArrayOutput() GetInstanceTypesInstanceTypeNetworkArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeNetworkArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeNetworkArray) ToGetInstanceTypesInstanceTypeNetworkArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeNetworkArrayOutput)
}

type GetInstanceTypesInstanceTypeNetworkOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeNetworkOutput) ToGetInstanceTypesInstanceTypeNetworkOutput() GetInstanceTypesInstanceTypeNetworkOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeNetworkOutput) ToGetInstanceTypesInstanceTypeNetworkOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeNetworkOutput {
	return o
}

// Network benchmark bandwidth capacity (out/in), unit: Mbps.
func (o GetInstanceTypesInstanceTypeNetworkOutput) BaselineBandwidthMbps() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeNetwork) int { return v.BaselineBandwidthMbps }).(pulumi.IntOutput)
}

// Peak network bandwidth capacity (out/in), unit: Mbps.
func (o GetInstanceTypesInstanceTypeNetworkOutput) MaximumBandwidthMbps() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeNetwork) int { return v.MaximumBandwidthMbps }).(pulumi.IntOutput)
}

// Maximum number of elastic network interfaces supported for attachment.
func (o GetInstanceTypesInstanceTypeNetworkOutput) MaximumNetworkInterfaces() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeNetwork) int { return v.MaximumNetworkInterfaces }).(pulumi.IntOutput)
}

// Maximum number of IPv4 addresses for a single elastic network interface.
func (o GetInstanceTypesInstanceTypeNetworkOutput) MaximumPrivateIpv4AddressesPerNetworkInterface() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeNetwork) int {
		return v.MaximumPrivateIpv4AddressesPerNetworkInterface
	}).(pulumi.IntOutput)
}

// Maximum queue number for a single elastic network interface, including the queue number supported by the primary network interface and the auxiliary network interface.
func (o GetInstanceTypesInstanceTypeNetworkOutput) MaximumQueuesPerNetworkInterface() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeNetwork) int { return v.MaximumQueuesPerNetworkInterface }).(pulumi.IntOutput)
}

// Network packet sending and receiving capacity (in+out), unit: Kpps.
func (o GetInstanceTypesInstanceTypeNetworkOutput) MaximumThroughputKpps() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeNetwork) int { return v.MaximumThroughputKpps }).(pulumi.IntOutput)
}

type GetInstanceTypesInstanceTypeNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeNetwork)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeNetworkArrayOutput) ToGetInstanceTypesInstanceTypeNetworkArrayOutput() GetInstanceTypesInstanceTypeNetworkArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeNetworkArrayOutput) ToGetInstanceTypesInstanceTypeNetworkArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeNetworkArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeNetworkArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceTypeNetwork {
		return vs[0].([]GetInstanceTypesInstanceTypeNetwork)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeNetworkOutput)
}

type GetInstanceTypesInstanceTypeProcessor struct {
	// CPU clock speed, unit: GHz.
	BaseFrequency float64 `pulumi:"baseFrequency"`
	// The number of ECS instance CPU cores.
	Cpus int `pulumi:"cpus"`
	// CPU model.
	Model string `pulumi:"model"`
	// CPU Turbo Boost, unit: GHz.
	TurboFrequency float64 `pulumi:"turboFrequency"`
}

// GetInstanceTypesInstanceTypeProcessorInput is an input type that accepts GetInstanceTypesInstanceTypeProcessorArgs and GetInstanceTypesInstanceTypeProcessorOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeProcessorInput` via:
//
//	GetInstanceTypesInstanceTypeProcessorArgs{...}
type GetInstanceTypesInstanceTypeProcessorInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeProcessorOutput() GetInstanceTypesInstanceTypeProcessorOutput
	ToGetInstanceTypesInstanceTypeProcessorOutputWithContext(context.Context) GetInstanceTypesInstanceTypeProcessorOutput
}

type GetInstanceTypesInstanceTypeProcessorArgs struct {
	// CPU clock speed, unit: GHz.
	BaseFrequency pulumi.Float64Input `pulumi:"baseFrequency"`
	// The number of ECS instance CPU cores.
	Cpus pulumi.IntInput `pulumi:"cpus"`
	// CPU model.
	Model pulumi.StringInput `pulumi:"model"`
	// CPU Turbo Boost, unit: GHz.
	TurboFrequency pulumi.Float64Input `pulumi:"turboFrequency"`
}

func (GetInstanceTypesInstanceTypeProcessorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeProcessorArgs) ToGetInstanceTypesInstanceTypeProcessorOutput() GetInstanceTypesInstanceTypeProcessorOutput {
	return i.ToGetInstanceTypesInstanceTypeProcessorOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeProcessorArgs) ToGetInstanceTypesInstanceTypeProcessorOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeProcessorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeProcessorOutput)
}

// GetInstanceTypesInstanceTypeProcessorArrayInput is an input type that accepts GetInstanceTypesInstanceTypeProcessorArray and GetInstanceTypesInstanceTypeProcessorArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeProcessorArrayInput` via:
//
//	GetInstanceTypesInstanceTypeProcessorArray{ GetInstanceTypesInstanceTypeProcessorArgs{...} }
type GetInstanceTypesInstanceTypeProcessorArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeProcessorArrayOutput() GetInstanceTypesInstanceTypeProcessorArrayOutput
	ToGetInstanceTypesInstanceTypeProcessorArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeProcessorArrayOutput
}

type GetInstanceTypesInstanceTypeProcessorArray []GetInstanceTypesInstanceTypeProcessorInput

func (GetInstanceTypesInstanceTypeProcessorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeProcessorArray) ToGetInstanceTypesInstanceTypeProcessorArrayOutput() GetInstanceTypesInstanceTypeProcessorArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeProcessorArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeProcessorArray) ToGetInstanceTypesInstanceTypeProcessorArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeProcessorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeProcessorArrayOutput)
}

type GetInstanceTypesInstanceTypeProcessorOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeProcessorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeProcessorOutput) ToGetInstanceTypesInstanceTypeProcessorOutput() GetInstanceTypesInstanceTypeProcessorOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeProcessorOutput) ToGetInstanceTypesInstanceTypeProcessorOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeProcessorOutput {
	return o
}

// CPU clock speed, unit: GHz.
func (o GetInstanceTypesInstanceTypeProcessorOutput) BaseFrequency() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeProcessor) float64 { return v.BaseFrequency }).(pulumi.Float64Output)
}

// The number of ECS instance CPU cores.
func (o GetInstanceTypesInstanceTypeProcessorOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeProcessor) int { return v.Cpus }).(pulumi.IntOutput)
}

// CPU model.
func (o GetInstanceTypesInstanceTypeProcessorOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeProcessor) string { return v.Model }).(pulumi.StringOutput)
}

// CPU Turbo Boost, unit: GHz.
func (o GetInstanceTypesInstanceTypeProcessorOutput) TurboFrequency() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeProcessor) float64 { return v.TurboFrequency }).(pulumi.Float64Output)
}

type GetInstanceTypesInstanceTypeProcessorArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeProcessorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeProcessor)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeProcessorArrayOutput) ToGetInstanceTypesInstanceTypeProcessorArrayOutput() GetInstanceTypesInstanceTypeProcessorArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeProcessorArrayOutput) ToGetInstanceTypesInstanceTypeProcessorArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeProcessorArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeProcessorArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeProcessorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceTypeProcessor {
		return vs[0].([]GetInstanceTypesInstanceTypeProcessor)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeProcessorOutput)
}

type GetInstanceTypesInstanceTypeRdma struct {
	// Number of RDMA network cards.
	RdmaNetworkInterfaces int `pulumi:"rdmaNetworkInterfaces"`
}

// GetInstanceTypesInstanceTypeRdmaInput is an input type that accepts GetInstanceTypesInstanceTypeRdmaArgs and GetInstanceTypesInstanceTypeRdmaOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeRdmaInput` via:
//
//	GetInstanceTypesInstanceTypeRdmaArgs{...}
type GetInstanceTypesInstanceTypeRdmaInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeRdmaOutput() GetInstanceTypesInstanceTypeRdmaOutput
	ToGetInstanceTypesInstanceTypeRdmaOutputWithContext(context.Context) GetInstanceTypesInstanceTypeRdmaOutput
}

type GetInstanceTypesInstanceTypeRdmaArgs struct {
	// Number of RDMA network cards.
	RdmaNetworkInterfaces pulumi.IntInput `pulumi:"rdmaNetworkInterfaces"`
}

func (GetInstanceTypesInstanceTypeRdmaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeRdmaArgs) ToGetInstanceTypesInstanceTypeRdmaOutput() GetInstanceTypesInstanceTypeRdmaOutput {
	return i.ToGetInstanceTypesInstanceTypeRdmaOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeRdmaArgs) ToGetInstanceTypesInstanceTypeRdmaOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeRdmaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeRdmaOutput)
}

// GetInstanceTypesInstanceTypeRdmaArrayInput is an input type that accepts GetInstanceTypesInstanceTypeRdmaArray and GetInstanceTypesInstanceTypeRdmaArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeRdmaArrayInput` via:
//
//	GetInstanceTypesInstanceTypeRdmaArray{ GetInstanceTypesInstanceTypeRdmaArgs{...} }
type GetInstanceTypesInstanceTypeRdmaArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeRdmaArrayOutput() GetInstanceTypesInstanceTypeRdmaArrayOutput
	ToGetInstanceTypesInstanceTypeRdmaArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeRdmaArrayOutput
}

type GetInstanceTypesInstanceTypeRdmaArray []GetInstanceTypesInstanceTypeRdmaInput

func (GetInstanceTypesInstanceTypeRdmaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeRdmaArray) ToGetInstanceTypesInstanceTypeRdmaArrayOutput() GetInstanceTypesInstanceTypeRdmaArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeRdmaArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeRdmaArray) ToGetInstanceTypesInstanceTypeRdmaArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeRdmaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeRdmaArrayOutput)
}

type GetInstanceTypesInstanceTypeRdmaOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeRdmaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeRdmaOutput) ToGetInstanceTypesInstanceTypeRdmaOutput() GetInstanceTypesInstanceTypeRdmaOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeRdmaOutput) ToGetInstanceTypesInstanceTypeRdmaOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeRdmaOutput {
	return o
}

// Number of RDMA network cards.
func (o GetInstanceTypesInstanceTypeRdmaOutput) RdmaNetworkInterfaces() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeRdma) int { return v.RdmaNetworkInterfaces }).(pulumi.IntOutput)
}

type GetInstanceTypesInstanceTypeRdmaArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeRdmaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeRdma)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeRdmaArrayOutput) ToGetInstanceTypesInstanceTypeRdmaArrayOutput() GetInstanceTypesInstanceTypeRdmaArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeRdmaArrayOutput) ToGetInstanceTypesInstanceTypeRdmaArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeRdmaArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeRdmaArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeRdmaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceTypeRdma {
		return vs[0].([]GetInstanceTypesInstanceTypeRdma)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeRdmaOutput)
}

type GetInstanceTypesInstanceTypeVolume struct {
	// The maximum number of volumes.
	MaximumCount int `pulumi:"maximumCount"`
	// List of supported volume types.
	SupportedVolumeTypes []string `pulumi:"supportedVolumeTypes"`
}

// GetInstanceTypesInstanceTypeVolumeInput is an input type that accepts GetInstanceTypesInstanceTypeVolumeArgs and GetInstanceTypesInstanceTypeVolumeOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeVolumeInput` via:
//
//	GetInstanceTypesInstanceTypeVolumeArgs{...}
type GetInstanceTypesInstanceTypeVolumeInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeVolumeOutput() GetInstanceTypesInstanceTypeVolumeOutput
	ToGetInstanceTypesInstanceTypeVolumeOutputWithContext(context.Context) GetInstanceTypesInstanceTypeVolumeOutput
}

type GetInstanceTypesInstanceTypeVolumeArgs struct {
	// The maximum number of volumes.
	MaximumCount pulumi.IntInput `pulumi:"maximumCount"`
	// List of supported volume types.
	SupportedVolumeTypes pulumi.StringArrayInput `pulumi:"supportedVolumeTypes"`
}

func (GetInstanceTypesInstanceTypeVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeVolumeArgs) ToGetInstanceTypesInstanceTypeVolumeOutput() GetInstanceTypesInstanceTypeVolumeOutput {
	return i.ToGetInstanceTypesInstanceTypeVolumeOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeVolumeArgs) ToGetInstanceTypesInstanceTypeVolumeOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeVolumeOutput)
}

// GetInstanceTypesInstanceTypeVolumeArrayInput is an input type that accepts GetInstanceTypesInstanceTypeVolumeArray and GetInstanceTypesInstanceTypeVolumeArrayOutput values.
// You can construct a concrete instance of `GetInstanceTypesInstanceTypeVolumeArrayInput` via:
//
//	GetInstanceTypesInstanceTypeVolumeArray{ GetInstanceTypesInstanceTypeVolumeArgs{...} }
type GetInstanceTypesInstanceTypeVolumeArrayInput interface {
	pulumi.Input

	ToGetInstanceTypesInstanceTypeVolumeArrayOutput() GetInstanceTypesInstanceTypeVolumeArrayOutput
	ToGetInstanceTypesInstanceTypeVolumeArrayOutputWithContext(context.Context) GetInstanceTypesInstanceTypeVolumeArrayOutput
}

type GetInstanceTypesInstanceTypeVolumeArray []GetInstanceTypesInstanceTypeVolumeInput

func (GetInstanceTypesInstanceTypeVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (i GetInstanceTypesInstanceTypeVolumeArray) ToGetInstanceTypesInstanceTypeVolumeArrayOutput() GetInstanceTypesInstanceTypeVolumeArrayOutput {
	return i.ToGetInstanceTypesInstanceTypeVolumeArrayOutputWithContext(context.Background())
}

func (i GetInstanceTypesInstanceTypeVolumeArray) ToGetInstanceTypesInstanceTypeVolumeArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceTypesInstanceTypeVolumeArrayOutput)
}

type GetInstanceTypesInstanceTypeVolumeOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeVolumeOutput) ToGetInstanceTypesInstanceTypeVolumeOutput() GetInstanceTypesInstanceTypeVolumeOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeVolumeOutput) ToGetInstanceTypesInstanceTypeVolumeOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeVolumeOutput {
	return o
}

// The maximum number of volumes.
func (o GetInstanceTypesInstanceTypeVolumeOutput) MaximumCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeVolume) int { return v.MaximumCount }).(pulumi.IntOutput)
}

// List of supported volume types.
func (o GetInstanceTypesInstanceTypeVolumeOutput) SupportedVolumeTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstanceTypesInstanceTypeVolume) []string { return v.SupportedVolumeTypes }).(pulumi.StringArrayOutput)
}

type GetInstanceTypesInstanceTypeVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceTypesInstanceTypeVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceTypesInstanceTypeVolume)(nil)).Elem()
}

func (o GetInstanceTypesInstanceTypeVolumeArrayOutput) ToGetInstanceTypesInstanceTypeVolumeArrayOutput() GetInstanceTypesInstanceTypeVolumeArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeVolumeArrayOutput) ToGetInstanceTypesInstanceTypeVolumeArrayOutputWithContext(ctx context.Context) GetInstanceTypesInstanceTypeVolumeArrayOutput {
	return o
}

func (o GetInstanceTypesInstanceTypeVolumeArrayOutput) Index(i pulumi.IntInput) GetInstanceTypesInstanceTypeVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceTypesInstanceTypeVolume {
		return vs[0].([]GetInstanceTypesInstanceTypeVolume)[vs[1].(int)]
	}).(GetInstanceTypesInstanceTypeVolumeOutput)
}

type GetInstancesInstance struct {
	// The number of ECS instance CPU cores.
	Cpus int `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt string `pulumi:"createdAt"`
	// The ID of DeploymentSet.
	DeploymentSetId string `pulumi:"deploymentSetId"`
	// The description of ECS instance.
	Description string `pulumi:"description"`
	// The EIP address of the ECS instance.
	EipAddresses []GetInstancesInstanceEipAddress `pulumi:"eipAddresses"`
	// The GPU device info of Instance.
	GpuDevices []GetInstancesInstanceGpuDevice `pulumi:"gpuDevices"`
	// The host name of ECS instance.
	HostName string `pulumi:"hostName"`
	// The image ID of ECS instance.
	ImageId string `pulumi:"imageId"`
	// The charge type of ECS instance.
	InstanceChargeType string `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of ECS instance. This field support fuzzy query.
	InstanceName string `pulumi:"instanceName"`
	// The spec type of ECS instance.
	InstanceType string `pulumi:"instanceType"`
	// The number of IPv6 addresses of the ECS instance.
	Ipv6AddressCount int `pulumi:"ipv6AddressCount"`
	// A list of ipv6 addresses.
	Ipv6Addresses []string `pulumi:"ipv6Addresses"`
	// The Flag of GPU instance.If the instance is GPU,The flag is true.
	IsGpu bool `pulumi:"isGpu"`
	// The ssh key ID of ECS instance.
	KeyPairId string `pulumi:"keyPairId"`
	// The key pair name of ECS instance.
	KeyPairName string `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize int `pulumi:"memorySize"`
	// The networkInterface detail collection of ECS instance.
	NetworkInterfaces []GetInstancesInstanceNetworkInterface `pulumi:"networkInterfaces"`
	// The os name of ECS instance.
	OsName string `pulumi:"osName"`
	// The os type of ECS instance.
	OsType string `pulumi:"osType"`
	// The ProjectName of ECS instance.
	ProjectName string `pulumi:"projectName"`
	// The spot price limit of ECS instance.
	SpotPriceLimit float64 `pulumi:"spotPriceLimit"`
	// The spot strategy of ECS instance.
	SpotStrategy string `pulumi:"spotStrategy"`
	// The status of ECS instance.
	Status string `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode string `pulumi:"stoppedMode"`
	// Tags.
	Tags []GetInstancesInstanceTag `pulumi:"tags"`
	// The update time of ECS instance.
	UpdatedAt string `pulumi:"updatedAt"`
	// The volume ID list of ECS instance.
	VolumeIds []string `pulumi:"volumeIds"`
	// The volume detail collection of volume.
	Volumes []GetInstancesInstanceVolume `pulumi:"volumes"`
	// The VPC ID of ECS instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId string `pulumi:"zoneId"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//	GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// The number of ECS instance CPU cores.
	Cpus pulumi.IntInput `pulumi:"cpus"`
	// The create time of ECS instance.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The ID of DeploymentSet.
	DeploymentSetId pulumi.StringInput `pulumi:"deploymentSetId"`
	// The description of ECS instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The EIP address of the ECS instance.
	EipAddresses GetInstancesInstanceEipAddressArrayInput `pulumi:"eipAddresses"`
	// The GPU device info of Instance.
	GpuDevices GetInstancesInstanceGpuDeviceArrayInput `pulumi:"gpuDevices"`
	// The host name of ECS instance.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// The image ID of ECS instance.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The charge type of ECS instance.
	InstanceChargeType pulumi.StringInput `pulumi:"instanceChargeType"`
	// The ID of ECS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of ECS instance. This field support fuzzy query.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The spec type of ECS instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// The number of IPv6 addresses of the ECS instance.
	Ipv6AddressCount pulumi.IntInput `pulumi:"ipv6AddressCount"`
	// A list of ipv6 addresses.
	Ipv6Addresses pulumi.StringArrayInput `pulumi:"ipv6Addresses"`
	// The Flag of GPU instance.If the instance is GPU,The flag is true.
	IsGpu pulumi.BoolInput `pulumi:"isGpu"`
	// The ssh key ID of ECS instance.
	KeyPairId pulumi.StringInput `pulumi:"keyPairId"`
	// The key pair name of ECS instance.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntInput `pulumi:"memorySize"`
	// The networkInterface detail collection of ECS instance.
	NetworkInterfaces GetInstancesInstanceNetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// The os name of ECS instance.
	OsName pulumi.StringInput `pulumi:"osName"`
	// The os type of ECS instance.
	OsType pulumi.StringInput `pulumi:"osType"`
	// The ProjectName of ECS instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The spot price limit of ECS instance.
	SpotPriceLimit pulumi.Float64Input `pulumi:"spotPriceLimit"`
	// The spot strategy of ECS instance.
	SpotStrategy pulumi.StringInput `pulumi:"spotStrategy"`
	// The status of ECS instance.
	Status pulumi.StringInput `pulumi:"status"`
	// The stop mode of ECS instance.
	StoppedMode pulumi.StringInput `pulumi:"stoppedMode"`
	// Tags.
	Tags GetInstancesInstanceTagArrayInput `pulumi:"tags"`
	// The update time of ECS instance.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The volume ID list of ECS instance.
	VolumeIds pulumi.StringArrayInput `pulumi:"volumeIds"`
	// The volume detail collection of volume.
	Volumes GetInstancesInstanceVolumeArrayInput `pulumi:"volumes"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone ID of ECS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//	GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

// The number of ECS instance CPU cores.
func (o GetInstancesInstanceOutput) Cpus() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.Cpus }).(pulumi.IntOutput)
}

// The create time of ECS instance.
func (o GetInstancesInstanceOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The ID of DeploymentSet.
func (o GetInstancesInstanceOutput) DeploymentSetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.DeploymentSetId }).(pulumi.StringOutput)
}

// The description of ECS instance.
func (o GetInstancesInstanceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Description }).(pulumi.StringOutput)
}

// The EIP address of the ECS instance.
func (o GetInstancesInstanceOutput) EipAddresses() GetInstancesInstanceEipAddressArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceEipAddress { return v.EipAddresses }).(GetInstancesInstanceEipAddressArrayOutput)
}

// The GPU device info of Instance.
func (o GetInstancesInstanceOutput) GpuDevices() GetInstancesInstanceGpuDeviceArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceGpuDevice { return v.GpuDevices }).(GetInstancesInstanceGpuDeviceArrayOutput)
}

// The host name of ECS instance.
func (o GetInstancesInstanceOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.HostName }).(pulumi.StringOutput)
}

// The image ID of ECS instance.
func (o GetInstancesInstanceOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ImageId }).(pulumi.StringOutput)
}

// The charge type of ECS instance.
func (o GetInstancesInstanceOutput) InstanceChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceChargeType }).(pulumi.StringOutput)
}

// The ID of ECS instance.
func (o GetInstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of ECS instance. This field support fuzzy query.
func (o GetInstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The spec type of ECS instance.
func (o GetInstancesInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// The number of IPv6 addresses of the ECS instance.
func (o GetInstancesInstanceOutput) Ipv6AddressCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.Ipv6AddressCount }).(pulumi.IntOutput)
}

// A list of ipv6 addresses.
func (o GetInstancesInstanceOutput) Ipv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []string { return v.Ipv6Addresses }).(pulumi.StringArrayOutput)
}

// The Flag of GPU instance.If the instance is GPU,The flag is true.
func (o GetInstancesInstanceOutput) IsGpu() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstance) bool { return v.IsGpu }).(pulumi.BoolOutput)
}

// The ssh key ID of ECS instance.
func (o GetInstancesInstanceOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.KeyPairId }).(pulumi.StringOutput)
}

// The key pair name of ECS instance.
func (o GetInstancesInstanceOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The memory size of ECS instance.
func (o GetInstancesInstanceOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.MemorySize }).(pulumi.IntOutput)
}

// The networkInterface detail collection of ECS instance.
func (o GetInstancesInstanceOutput) NetworkInterfaces() GetInstancesInstanceNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceNetworkInterface { return v.NetworkInterfaces }).(GetInstancesInstanceNetworkInterfaceArrayOutput)
}

// The os name of ECS instance.
func (o GetInstancesInstanceOutput) OsName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.OsName }).(pulumi.StringOutput)
}

// The os type of ECS instance.
func (o GetInstancesInstanceOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.OsType }).(pulumi.StringOutput)
}

// The ProjectName of ECS instance.
func (o GetInstancesInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The spot price limit of ECS instance.
func (o GetInstancesInstanceOutput) SpotPriceLimit() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstancesInstance) float64 { return v.SpotPriceLimit }).(pulumi.Float64Output)
}

// The spot strategy of ECS instance.
func (o GetInstancesInstanceOutput) SpotStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.SpotStrategy }).(pulumi.StringOutput)
}

// The status of ECS instance.
func (o GetInstancesInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Status }).(pulumi.StringOutput)
}

// The stop mode of ECS instance.
func (o GetInstancesInstanceOutput) StoppedMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.StoppedMode }).(pulumi.StringOutput)
}

// Tags.
func (o GetInstancesInstanceOutput) Tags() GetInstancesInstanceTagArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceTag { return v.Tags }).(GetInstancesInstanceTagArrayOutput)
}

// The update time of ECS instance.
func (o GetInstancesInstanceOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The volume ID list of ECS instance.
func (o GetInstancesInstanceOutput) VolumeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []string { return v.VolumeIds }).(pulumi.StringArrayOutput)
}

// The volume detail collection of volume.
func (o GetInstancesInstanceOutput) Volumes() GetInstancesInstanceVolumeArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceVolume { return v.Volumes }).(GetInstancesInstanceVolumeArrayOutput)
}

// The VPC ID of ECS instance.
func (o GetInstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone ID of ECS instance.
func (o GetInstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetInstancesInstanceEipAddress struct {
	// The EIP ID of the ECS instance.
	AllocationId string `pulumi:"allocationId"`
	// The EIP address of the ECS instance.
	IpAddress string `pulumi:"ipAddress"`
}

// GetInstancesInstanceEipAddressInput is an input type that accepts GetInstancesInstanceEipAddressArgs and GetInstancesInstanceEipAddressOutput values.
// You can construct a concrete instance of `GetInstancesInstanceEipAddressInput` via:
//
//	GetInstancesInstanceEipAddressArgs{...}
type GetInstancesInstanceEipAddressInput interface {
	pulumi.Input

	ToGetInstancesInstanceEipAddressOutput() GetInstancesInstanceEipAddressOutput
	ToGetInstancesInstanceEipAddressOutputWithContext(context.Context) GetInstancesInstanceEipAddressOutput
}

type GetInstancesInstanceEipAddressArgs struct {
	// The EIP ID of the ECS instance.
	AllocationId pulumi.StringInput `pulumi:"allocationId"`
	// The EIP address of the ECS instance.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
}

func (GetInstancesInstanceEipAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceEipAddress)(nil)).Elem()
}

func (i GetInstancesInstanceEipAddressArgs) ToGetInstancesInstanceEipAddressOutput() GetInstancesInstanceEipAddressOutput {
	return i.ToGetInstancesInstanceEipAddressOutputWithContext(context.Background())
}

func (i GetInstancesInstanceEipAddressArgs) ToGetInstancesInstanceEipAddressOutputWithContext(ctx context.Context) GetInstancesInstanceEipAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceEipAddressOutput)
}

// GetInstancesInstanceEipAddressArrayInput is an input type that accepts GetInstancesInstanceEipAddressArray and GetInstancesInstanceEipAddressArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceEipAddressArrayInput` via:
//
//	GetInstancesInstanceEipAddressArray{ GetInstancesInstanceEipAddressArgs{...} }
type GetInstancesInstanceEipAddressArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceEipAddressArrayOutput() GetInstancesInstanceEipAddressArrayOutput
	ToGetInstancesInstanceEipAddressArrayOutputWithContext(context.Context) GetInstancesInstanceEipAddressArrayOutput
}

type GetInstancesInstanceEipAddressArray []GetInstancesInstanceEipAddressInput

func (GetInstancesInstanceEipAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceEipAddress)(nil)).Elem()
}

func (i GetInstancesInstanceEipAddressArray) ToGetInstancesInstanceEipAddressArrayOutput() GetInstancesInstanceEipAddressArrayOutput {
	return i.ToGetInstancesInstanceEipAddressArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceEipAddressArray) ToGetInstancesInstanceEipAddressArrayOutputWithContext(ctx context.Context) GetInstancesInstanceEipAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceEipAddressArrayOutput)
}

type GetInstancesInstanceEipAddressOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceEipAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceEipAddress)(nil)).Elem()
}

func (o GetInstancesInstanceEipAddressOutput) ToGetInstancesInstanceEipAddressOutput() GetInstancesInstanceEipAddressOutput {
	return o
}

func (o GetInstancesInstanceEipAddressOutput) ToGetInstancesInstanceEipAddressOutputWithContext(ctx context.Context) GetInstancesInstanceEipAddressOutput {
	return o
}

// The EIP ID of the ECS instance.
func (o GetInstancesInstanceEipAddressOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceEipAddress) string { return v.AllocationId }).(pulumi.StringOutput)
}

// The EIP address of the ECS instance.
func (o GetInstancesInstanceEipAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceEipAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

type GetInstancesInstanceEipAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceEipAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceEipAddress)(nil)).Elem()
}

func (o GetInstancesInstanceEipAddressArrayOutput) ToGetInstancesInstanceEipAddressArrayOutput() GetInstancesInstanceEipAddressArrayOutput {
	return o
}

func (o GetInstancesInstanceEipAddressArrayOutput) ToGetInstancesInstanceEipAddressArrayOutputWithContext(ctx context.Context) GetInstancesInstanceEipAddressArrayOutput {
	return o
}

func (o GetInstancesInstanceEipAddressArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceEipAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceEipAddress {
		return vs[0].([]GetInstancesInstanceEipAddress)[vs[1].(int)]
	}).(GetInstancesInstanceEipAddressOutput)
}

type GetInstancesInstanceGpuDevice struct {
	// The Count of GPU device.
	Count int `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize int `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize int `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName string `pulumi:"productName"`
}

// GetInstancesInstanceGpuDeviceInput is an input type that accepts GetInstancesInstanceGpuDeviceArgs and GetInstancesInstanceGpuDeviceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceGpuDeviceInput` via:
//
//	GetInstancesInstanceGpuDeviceArgs{...}
type GetInstancesInstanceGpuDeviceInput interface {
	pulumi.Input

	ToGetInstancesInstanceGpuDeviceOutput() GetInstancesInstanceGpuDeviceOutput
	ToGetInstancesInstanceGpuDeviceOutputWithContext(context.Context) GetInstancesInstanceGpuDeviceOutput
}

type GetInstancesInstanceGpuDeviceArgs struct {
	// The Count of GPU device.
	Count pulumi.IntInput `pulumi:"count"`
	// The Encrypted Memory Size of GPU device.
	EncryptedMemorySize pulumi.IntInput `pulumi:"encryptedMemorySize"`
	// The memory size of ECS instance.
	MemorySize pulumi.IntInput `pulumi:"memorySize"`
	// The Product Name of GPU device.
	ProductName pulumi.StringInput `pulumi:"productName"`
}

func (GetInstancesInstanceGpuDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceGpuDevice)(nil)).Elem()
}

func (i GetInstancesInstanceGpuDeviceArgs) ToGetInstancesInstanceGpuDeviceOutput() GetInstancesInstanceGpuDeviceOutput {
	return i.ToGetInstancesInstanceGpuDeviceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceGpuDeviceArgs) ToGetInstancesInstanceGpuDeviceOutputWithContext(ctx context.Context) GetInstancesInstanceGpuDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceGpuDeviceOutput)
}

// GetInstancesInstanceGpuDeviceArrayInput is an input type that accepts GetInstancesInstanceGpuDeviceArray and GetInstancesInstanceGpuDeviceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceGpuDeviceArrayInput` via:
//
//	GetInstancesInstanceGpuDeviceArray{ GetInstancesInstanceGpuDeviceArgs{...} }
type GetInstancesInstanceGpuDeviceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceGpuDeviceArrayOutput() GetInstancesInstanceGpuDeviceArrayOutput
	ToGetInstancesInstanceGpuDeviceArrayOutputWithContext(context.Context) GetInstancesInstanceGpuDeviceArrayOutput
}

type GetInstancesInstanceGpuDeviceArray []GetInstancesInstanceGpuDeviceInput

func (GetInstancesInstanceGpuDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceGpuDevice)(nil)).Elem()
}

func (i GetInstancesInstanceGpuDeviceArray) ToGetInstancesInstanceGpuDeviceArrayOutput() GetInstancesInstanceGpuDeviceArrayOutput {
	return i.ToGetInstancesInstanceGpuDeviceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceGpuDeviceArray) ToGetInstancesInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceGpuDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceGpuDeviceArrayOutput)
}

type GetInstancesInstanceGpuDeviceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceGpuDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceGpuDevice)(nil)).Elem()
}

func (o GetInstancesInstanceGpuDeviceOutput) ToGetInstancesInstanceGpuDeviceOutput() GetInstancesInstanceGpuDeviceOutput {
	return o
}

func (o GetInstancesInstanceGpuDeviceOutput) ToGetInstancesInstanceGpuDeviceOutputWithContext(ctx context.Context) GetInstancesInstanceGpuDeviceOutput {
	return o
}

// The Count of GPU device.
func (o GetInstancesInstanceGpuDeviceOutput) Count() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstanceGpuDevice) int { return v.Count }).(pulumi.IntOutput)
}

// The Encrypted Memory Size of GPU device.
func (o GetInstancesInstanceGpuDeviceOutput) EncryptedMemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstanceGpuDevice) int { return v.EncryptedMemorySize }).(pulumi.IntOutput)
}

// The memory size of ECS instance.
func (o GetInstancesInstanceGpuDeviceOutput) MemorySize() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstanceGpuDevice) int { return v.MemorySize }).(pulumi.IntOutput)
}

// The Product Name of GPU device.
func (o GetInstancesInstanceGpuDeviceOutput) ProductName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceGpuDevice) string { return v.ProductName }).(pulumi.StringOutput)
}

type GetInstancesInstanceGpuDeviceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceGpuDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceGpuDevice)(nil)).Elem()
}

func (o GetInstancesInstanceGpuDeviceArrayOutput) ToGetInstancesInstanceGpuDeviceArrayOutput() GetInstancesInstanceGpuDeviceArrayOutput {
	return o
}

func (o GetInstancesInstanceGpuDeviceArrayOutput) ToGetInstancesInstanceGpuDeviceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceGpuDeviceArrayOutput {
	return o
}

func (o GetInstancesInstanceGpuDeviceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceGpuDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceGpuDevice {
		return vs[0].([]GetInstancesInstanceGpuDevice)[vs[1].(int)]
	}).(GetInstancesInstanceGpuDeviceOutput)
}

type GetInstancesInstanceNetworkInterface struct {
	// The mac address of networkInterface.
	MacAddress string `pulumi:"macAddress"`
	// The ID of networkInterface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress string `pulumi:"primaryIpAddress"`
	// The subnet ID of networkInterface.
	SubnetId string `pulumi:"subnetId"`
	// The type of networkInterface.
	Type string `pulumi:"type"`
	// The VPC ID of ECS instance.
	VpcId string `pulumi:"vpcId"`
}

// GetInstancesInstanceNetworkInterfaceInput is an input type that accepts GetInstancesInstanceNetworkInterfaceArgs and GetInstancesInstanceNetworkInterfaceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceNetworkInterfaceInput` via:
//
//	GetInstancesInstanceNetworkInterfaceArgs{...}
type GetInstancesInstanceNetworkInterfaceInput interface {
	pulumi.Input

	ToGetInstancesInstanceNetworkInterfaceOutput() GetInstancesInstanceNetworkInterfaceOutput
	ToGetInstancesInstanceNetworkInterfaceOutputWithContext(context.Context) GetInstancesInstanceNetworkInterfaceOutput
}

type GetInstancesInstanceNetworkInterfaceArgs struct {
	// The mac address of networkInterface.
	MacAddress pulumi.StringInput `pulumi:"macAddress"`
	// The ID of networkInterface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// The primary ip address of ECS instance.
	PrimaryIpAddress pulumi.StringInput `pulumi:"primaryIpAddress"`
	// The subnet ID of networkInterface.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The type of networkInterface.
	Type pulumi.StringInput `pulumi:"type"`
	// The VPC ID of ECS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetInstancesInstanceNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceNetworkInterface)(nil)).Elem()
}

func (i GetInstancesInstanceNetworkInterfaceArgs) ToGetInstancesInstanceNetworkInterfaceOutput() GetInstancesInstanceNetworkInterfaceOutput {
	return i.ToGetInstancesInstanceNetworkInterfaceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceNetworkInterfaceArgs) ToGetInstancesInstanceNetworkInterfaceOutputWithContext(ctx context.Context) GetInstancesInstanceNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceNetworkInterfaceOutput)
}

// GetInstancesInstanceNetworkInterfaceArrayInput is an input type that accepts GetInstancesInstanceNetworkInterfaceArray and GetInstancesInstanceNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceNetworkInterfaceArrayInput` via:
//
//	GetInstancesInstanceNetworkInterfaceArray{ GetInstancesInstanceNetworkInterfaceArgs{...} }
type GetInstancesInstanceNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceNetworkInterfaceArrayOutput() GetInstancesInstanceNetworkInterfaceArrayOutput
	ToGetInstancesInstanceNetworkInterfaceArrayOutputWithContext(context.Context) GetInstancesInstanceNetworkInterfaceArrayOutput
}

type GetInstancesInstanceNetworkInterfaceArray []GetInstancesInstanceNetworkInterfaceInput

func (GetInstancesInstanceNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceNetworkInterface)(nil)).Elem()
}

func (i GetInstancesInstanceNetworkInterfaceArray) ToGetInstancesInstanceNetworkInterfaceArrayOutput() GetInstancesInstanceNetworkInterfaceArrayOutput {
	return i.ToGetInstancesInstanceNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceNetworkInterfaceArray) ToGetInstancesInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceNetworkInterfaceArrayOutput)
}

type GetInstancesInstanceNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceNetworkInterface)(nil)).Elem()
}

func (o GetInstancesInstanceNetworkInterfaceOutput) ToGetInstancesInstanceNetworkInterfaceOutput() GetInstancesInstanceNetworkInterfaceOutput {
	return o
}

func (o GetInstancesInstanceNetworkInterfaceOutput) ToGetInstancesInstanceNetworkInterfaceOutputWithContext(ctx context.Context) GetInstancesInstanceNetworkInterfaceOutput {
	return o
}

// The mac address of networkInterface.
func (o GetInstancesInstanceNetworkInterfaceOutput) MacAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetworkInterface) string { return v.MacAddress }).(pulumi.StringOutput)
}

// The ID of networkInterface.
func (o GetInstancesInstanceNetworkInterfaceOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetworkInterface) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The primary ip address of ECS instance.
func (o GetInstancesInstanceNetworkInterfaceOutput) PrimaryIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetworkInterface) string { return v.PrimaryIpAddress }).(pulumi.StringOutput)
}

// The subnet ID of networkInterface.
func (o GetInstancesInstanceNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The type of networkInterface.
func (o GetInstancesInstanceNetworkInterfaceOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetworkInterface) string { return v.Type }).(pulumi.StringOutput)
}

// The VPC ID of ECS instance.
func (o GetInstancesInstanceNetworkInterfaceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceNetworkInterface) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetInstancesInstanceNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceNetworkInterface)(nil)).Elem()
}

func (o GetInstancesInstanceNetworkInterfaceArrayOutput) ToGetInstancesInstanceNetworkInterfaceArrayOutput() GetInstancesInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o GetInstancesInstanceNetworkInterfaceArrayOutput) ToGetInstancesInstanceNetworkInterfaceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceNetworkInterfaceArrayOutput {
	return o
}

func (o GetInstancesInstanceNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceNetworkInterface {
		return vs[0].([]GetInstancesInstanceNetworkInterface)[vs[1].(int)]
	}).(GetInstancesInstanceNetworkInterfaceOutput)
}

type GetInstancesInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInstancesInstanceTagInput is an input type that accepts GetInstancesInstanceTagArgs and GetInstancesInstanceTagOutput values.
// You can construct a concrete instance of `GetInstancesInstanceTagInput` via:
//
//	GetInstancesInstanceTagArgs{...}
type GetInstancesInstanceTagInput interface {
	pulumi.Input

	ToGetInstancesInstanceTagOutput() GetInstancesInstanceTagOutput
	ToGetInstancesInstanceTagOutputWithContext(context.Context) GetInstancesInstanceTagOutput
}

type GetInstancesInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceTag)(nil)).Elem()
}

func (i GetInstancesInstanceTagArgs) ToGetInstancesInstanceTagOutput() GetInstancesInstanceTagOutput {
	return i.ToGetInstancesInstanceTagOutputWithContext(context.Background())
}

func (i GetInstancesInstanceTagArgs) ToGetInstancesInstanceTagOutputWithContext(ctx context.Context) GetInstancesInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceTagOutput)
}

// GetInstancesInstanceTagArrayInput is an input type that accepts GetInstancesInstanceTagArray and GetInstancesInstanceTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceTagArrayInput` via:
//
//	GetInstancesInstanceTagArray{ GetInstancesInstanceTagArgs{...} }
type GetInstancesInstanceTagArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceTagArrayOutput() GetInstancesInstanceTagArrayOutput
	ToGetInstancesInstanceTagArrayOutputWithContext(context.Context) GetInstancesInstanceTagArrayOutput
}

type GetInstancesInstanceTagArray []GetInstancesInstanceTagInput

func (GetInstancesInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceTag)(nil)).Elem()
}

func (i GetInstancesInstanceTagArray) ToGetInstancesInstanceTagArrayOutput() GetInstancesInstanceTagArrayOutput {
	return i.ToGetInstancesInstanceTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceTagArray) ToGetInstancesInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceTagArrayOutput)
}

type GetInstancesInstanceTagOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceTag)(nil)).Elem()
}

func (o GetInstancesInstanceTagOutput) ToGetInstancesInstanceTagOutput() GetInstancesInstanceTagOutput {
	return o
}

func (o GetInstancesInstanceTagOutput) ToGetInstancesInstanceTagOutputWithContext(ctx context.Context) GetInstancesInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o GetInstancesInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInstancesInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceTag)(nil)).Elem()
}

func (o GetInstancesInstanceTagArrayOutput) ToGetInstancesInstanceTagArrayOutput() GetInstancesInstanceTagArrayOutput {
	return o
}

func (o GetInstancesInstanceTagArrayOutput) ToGetInstancesInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesInstanceTagArrayOutput {
	return o
}

func (o GetInstancesInstanceTagArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceTag {
		return vs[0].([]GetInstancesInstanceTag)[vs[1].(int)]
	}).(GetInstancesInstanceTagOutput)
}

type GetInstancesInstanceVolume struct {
	// The delete with instance flag of volume.
	DeleteWithInstance bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size int `pulumi:"size"`
	// The ID of volume.
	VolumeId string `pulumi:"volumeId"`
	// The Name of volume.
	VolumeName string `pulumi:"volumeName"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// GetInstancesInstanceVolumeInput is an input type that accepts GetInstancesInstanceVolumeArgs and GetInstancesInstanceVolumeOutput values.
// You can construct a concrete instance of `GetInstancesInstanceVolumeInput` via:
//
//	GetInstancesInstanceVolumeArgs{...}
type GetInstancesInstanceVolumeInput interface {
	pulumi.Input

	ToGetInstancesInstanceVolumeOutput() GetInstancesInstanceVolumeOutput
	ToGetInstancesInstanceVolumeOutputWithContext(context.Context) GetInstancesInstanceVolumeOutput
}

type GetInstancesInstanceVolumeArgs struct {
	// The delete with instance flag of volume.
	DeleteWithInstance pulumi.BoolInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntInput `pulumi:"size"`
	// The ID of volume.
	VolumeId pulumi.StringInput `pulumi:"volumeId"`
	// The Name of volume.
	VolumeName pulumi.StringInput `pulumi:"volumeName"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (GetInstancesInstanceVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceVolume)(nil)).Elem()
}

func (i GetInstancesInstanceVolumeArgs) ToGetInstancesInstanceVolumeOutput() GetInstancesInstanceVolumeOutput {
	return i.ToGetInstancesInstanceVolumeOutputWithContext(context.Background())
}

func (i GetInstancesInstanceVolumeArgs) ToGetInstancesInstanceVolumeOutputWithContext(ctx context.Context) GetInstancesInstanceVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceVolumeOutput)
}

// GetInstancesInstanceVolumeArrayInput is an input type that accepts GetInstancesInstanceVolumeArray and GetInstancesInstanceVolumeArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceVolumeArrayInput` via:
//
//	GetInstancesInstanceVolumeArray{ GetInstancesInstanceVolumeArgs{...} }
type GetInstancesInstanceVolumeArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceVolumeArrayOutput() GetInstancesInstanceVolumeArrayOutput
	ToGetInstancesInstanceVolumeArrayOutputWithContext(context.Context) GetInstancesInstanceVolumeArrayOutput
}

type GetInstancesInstanceVolumeArray []GetInstancesInstanceVolumeInput

func (GetInstancesInstanceVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceVolume)(nil)).Elem()
}

func (i GetInstancesInstanceVolumeArray) ToGetInstancesInstanceVolumeArrayOutput() GetInstancesInstanceVolumeArrayOutput {
	return i.ToGetInstancesInstanceVolumeArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceVolumeArray) ToGetInstancesInstanceVolumeArrayOutputWithContext(ctx context.Context) GetInstancesInstanceVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceVolumeArrayOutput)
}

type GetInstancesInstanceVolumeOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceVolume)(nil)).Elem()
}

func (o GetInstancesInstanceVolumeOutput) ToGetInstancesInstanceVolumeOutput() GetInstancesInstanceVolumeOutput {
	return o
}

func (o GetInstancesInstanceVolumeOutput) ToGetInstancesInstanceVolumeOutputWithContext(ctx context.Context) GetInstancesInstanceVolumeOutput {
	return o
}

// The delete with instance flag of volume.
func (o GetInstancesInstanceVolumeOutput) DeleteWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolume) bool { return v.DeleteWithInstance }).(pulumi.BoolOutput)
}

// The size of volume.
func (o GetInstancesInstanceVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The ID of volume.
func (o GetInstancesInstanceVolumeOutput) VolumeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolume) string { return v.VolumeId }).(pulumi.StringOutput)
}

// The Name of volume.
func (o GetInstancesInstanceVolumeOutput) VolumeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolume) string { return v.VolumeName }).(pulumi.StringOutput)
}

// The type of volume.
func (o GetInstancesInstanceVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type GetInstancesInstanceVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceVolume)(nil)).Elem()
}

func (o GetInstancesInstanceVolumeArrayOutput) ToGetInstancesInstanceVolumeArrayOutput() GetInstancesInstanceVolumeArrayOutput {
	return o
}

func (o GetInstancesInstanceVolumeArrayOutput) ToGetInstancesInstanceVolumeArrayOutputWithContext(ctx context.Context) GetInstancesInstanceVolumeArrayOutput {
	return o
}

func (o GetInstancesInstanceVolumeArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceVolume {
		return vs[0].([]GetInstancesInstanceVolume)[vs[1].(int)]
	}).(GetInstancesInstanceVolumeOutput)
}

type GetInstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInstancesTagInput is an input type that accepts GetInstancesTagArgs and GetInstancesTagOutput values.
// You can construct a concrete instance of `GetInstancesTagInput` via:
//
//	GetInstancesTagArgs{...}
type GetInstancesTagInput interface {
	pulumi.Input

	ToGetInstancesTagOutput() GetInstancesTagOutput
	ToGetInstancesTagOutputWithContext(context.Context) GetInstancesTagOutput
}

type GetInstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return i.ToGetInstancesTagOutputWithContext(context.Background())
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagOutput)
}

// GetInstancesTagArrayInput is an input type that accepts GetInstancesTagArray and GetInstancesTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesTagArrayInput` via:
//
//	GetInstancesTagArray{ GetInstancesTagArgs{...} }
type GetInstancesTagArrayInput interface {
	pulumi.Input

	ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput
	ToGetInstancesTagArrayOutputWithContext(context.Context) GetInstancesTagArrayOutput
}

type GetInstancesTagArray []GetInstancesTagInput

func (GetInstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return i.ToGetInstancesTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagArrayOutput)
}

type GetInstancesTagOutput struct{ *pulumi.OutputState }

func (GetInstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return o
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return o
}

// The Key of Tags.
func (o GetInstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) Index(i pulumi.IntInput) GetInstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesTag {
		return vs[0].([]GetInstancesTag)[vs[1].(int)]
	}).(GetInstancesTagOutput)
}

type GetInvocationResultsInvocationResult struct {
	// The id of ecs command.
	CommandId string `pulumi:"commandId"`
	// The end time of the ecs invocation in the instance.
	EndTime string `pulumi:"endTime"`
	// The error code of the ecs invocation.
	ErrorCode string `pulumi:"errorCode"`
	// The error message of the ecs invocation.
	ErrorMessage string `pulumi:"errorMessage"`
	// The exit code of the ecs command.
	ExitCode int `pulumi:"exitCode"`
	// The id of the ecs invocation result.
	Id string `pulumi:"id"`
	// The id of ecs instance.
	InstanceId string `pulumi:"instanceId"`
	// The id of ecs invocation.
	InvocationId string `pulumi:"invocationId"`
	// The id of the ecs invocation result.
	InvocationResultId string `pulumi:"invocationResultId"`
	// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
	InvocationResultStatus string `pulumi:"invocationResultStatus"`
	// The base64 encoded output message of the ecs invocation.
	Output string `pulumi:"output"`
	// The start time of the ecs invocation in the instance.
	StartTime string `pulumi:"startTime"`
	// The username of the ecs command.
	Username string `pulumi:"username"`
}

// GetInvocationResultsInvocationResultInput is an input type that accepts GetInvocationResultsInvocationResultArgs and GetInvocationResultsInvocationResultOutput values.
// You can construct a concrete instance of `GetInvocationResultsInvocationResultInput` via:
//
//	GetInvocationResultsInvocationResultArgs{...}
type GetInvocationResultsInvocationResultInput interface {
	pulumi.Input

	ToGetInvocationResultsInvocationResultOutput() GetInvocationResultsInvocationResultOutput
	ToGetInvocationResultsInvocationResultOutputWithContext(context.Context) GetInvocationResultsInvocationResultOutput
}

type GetInvocationResultsInvocationResultArgs struct {
	// The id of ecs command.
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// The end time of the ecs invocation in the instance.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The error code of the ecs invocation.
	ErrorCode pulumi.StringInput `pulumi:"errorCode"`
	// The error message of the ecs invocation.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// The exit code of the ecs command.
	ExitCode pulumi.IntInput `pulumi:"exitCode"`
	// The id of the ecs invocation result.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of ecs instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The id of ecs invocation.
	InvocationId pulumi.StringInput `pulumi:"invocationId"`
	// The id of the ecs invocation result.
	InvocationResultId pulumi.StringInput `pulumi:"invocationResultId"`
	// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
	InvocationResultStatus pulumi.StringInput `pulumi:"invocationResultStatus"`
	// The base64 encoded output message of the ecs invocation.
	Output pulumi.StringInput `pulumi:"output"`
	// The start time of the ecs invocation in the instance.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// The username of the ecs command.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetInvocationResultsInvocationResultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationResultsInvocationResult)(nil)).Elem()
}

func (i GetInvocationResultsInvocationResultArgs) ToGetInvocationResultsInvocationResultOutput() GetInvocationResultsInvocationResultOutput {
	return i.ToGetInvocationResultsInvocationResultOutputWithContext(context.Background())
}

func (i GetInvocationResultsInvocationResultArgs) ToGetInvocationResultsInvocationResultOutputWithContext(ctx context.Context) GetInvocationResultsInvocationResultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationResultsInvocationResultOutput)
}

// GetInvocationResultsInvocationResultArrayInput is an input type that accepts GetInvocationResultsInvocationResultArray and GetInvocationResultsInvocationResultArrayOutput values.
// You can construct a concrete instance of `GetInvocationResultsInvocationResultArrayInput` via:
//
//	GetInvocationResultsInvocationResultArray{ GetInvocationResultsInvocationResultArgs{...} }
type GetInvocationResultsInvocationResultArrayInput interface {
	pulumi.Input

	ToGetInvocationResultsInvocationResultArrayOutput() GetInvocationResultsInvocationResultArrayOutput
	ToGetInvocationResultsInvocationResultArrayOutputWithContext(context.Context) GetInvocationResultsInvocationResultArrayOutput
}

type GetInvocationResultsInvocationResultArray []GetInvocationResultsInvocationResultInput

func (GetInvocationResultsInvocationResultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationResultsInvocationResult)(nil)).Elem()
}

func (i GetInvocationResultsInvocationResultArray) ToGetInvocationResultsInvocationResultArrayOutput() GetInvocationResultsInvocationResultArrayOutput {
	return i.ToGetInvocationResultsInvocationResultArrayOutputWithContext(context.Background())
}

func (i GetInvocationResultsInvocationResultArray) ToGetInvocationResultsInvocationResultArrayOutputWithContext(ctx context.Context) GetInvocationResultsInvocationResultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationResultsInvocationResultArrayOutput)
}

type GetInvocationResultsInvocationResultOutput struct{ *pulumi.OutputState }

func (GetInvocationResultsInvocationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationResultsInvocationResult)(nil)).Elem()
}

func (o GetInvocationResultsInvocationResultOutput) ToGetInvocationResultsInvocationResultOutput() GetInvocationResultsInvocationResultOutput {
	return o
}

func (o GetInvocationResultsInvocationResultOutput) ToGetInvocationResultsInvocationResultOutputWithContext(ctx context.Context) GetInvocationResultsInvocationResultOutput {
	return o
}

// The id of ecs command.
func (o GetInvocationResultsInvocationResultOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.CommandId }).(pulumi.StringOutput)
}

// The end time of the ecs invocation in the instance.
func (o GetInvocationResultsInvocationResultOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.EndTime }).(pulumi.StringOutput)
}

// The error code of the ecs invocation.
func (o GetInvocationResultsInvocationResultOutput) ErrorCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.ErrorCode }).(pulumi.StringOutput)
}

// The error message of the ecs invocation.
func (o GetInvocationResultsInvocationResultOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// The exit code of the ecs command.
func (o GetInvocationResultsInvocationResultOutput) ExitCode() pulumi.IntOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) int { return v.ExitCode }).(pulumi.IntOutput)
}

// The id of the ecs invocation result.
func (o GetInvocationResultsInvocationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of ecs instance.
func (o GetInvocationResultsInvocationResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The id of ecs invocation.
func (o GetInvocationResultsInvocationResultOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.InvocationId }).(pulumi.StringOutput)
}

// The id of the ecs invocation result.
func (o GetInvocationResultsInvocationResultOutput) InvocationResultId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.InvocationResultId }).(pulumi.StringOutput)
}

// The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
func (o GetInvocationResultsInvocationResultOutput) InvocationResultStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.InvocationResultStatus }).(pulumi.StringOutput)
}

// The base64 encoded output message of the ecs invocation.
func (o GetInvocationResultsInvocationResultOutput) Output() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.Output }).(pulumi.StringOutput)
}

// The start time of the ecs invocation in the instance.
func (o GetInvocationResultsInvocationResultOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.StartTime }).(pulumi.StringOutput)
}

// The username of the ecs command.
func (o GetInvocationResultsInvocationResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationResultsInvocationResult) string { return v.Username }).(pulumi.StringOutput)
}

type GetInvocationResultsInvocationResultArrayOutput struct{ *pulumi.OutputState }

func (GetInvocationResultsInvocationResultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationResultsInvocationResult)(nil)).Elem()
}

func (o GetInvocationResultsInvocationResultArrayOutput) ToGetInvocationResultsInvocationResultArrayOutput() GetInvocationResultsInvocationResultArrayOutput {
	return o
}

func (o GetInvocationResultsInvocationResultArrayOutput) ToGetInvocationResultsInvocationResultArrayOutputWithContext(ctx context.Context) GetInvocationResultsInvocationResultArrayOutput {
	return o
}

func (o GetInvocationResultsInvocationResultArrayOutput) Index(i pulumi.IntInput) GetInvocationResultsInvocationResultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInvocationResultsInvocationResult {
		return vs[0].([]GetInvocationResultsInvocationResult)[vs[1].(int)]
	}).(GetInvocationResultsInvocationResultOutput)
}

type GetInvocationsInvocation struct {
	// The base64 encoded content of the ecs command.
	CommandContent string `pulumi:"commandContent"`
	// The description of the ecs command.
	CommandDescription string `pulumi:"commandDescription"`
	// The id of ecs command.
	CommandId string `pulumi:"commandId"`
	// The name of ecs command. This field support fuzzy query.
	CommandName string `pulumi:"commandName"`
	// The provider of the ecs command.
	CommandProvider string `pulumi:"commandProvider"`
	// The type of ecs command. Valid values: `Shell`.
	CommandType string `pulumi:"commandType"`
	// The end time of the ecs invocation.
	EndTime string `pulumi:"endTime"`
	// The frequency of the ecs invocation.
	Frequency string `pulumi:"frequency"`
	// The id of the ecs invocation.
	Id string `pulumi:"id"`
	// The list of ECS instance IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// The instance number of the ecs invocation.
	InstanceNumber int `pulumi:"instanceNumber"`
	// The description of the ecs invocation.
	InvocationDescription string `pulumi:"invocationDescription"`
	// The id of ecs invocation.
	InvocationId string `pulumi:"invocationId"`
	// The name of ecs invocation. This field support fuzzy query.
	InvocationName string `pulumi:"invocationName"`
	// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
	InvocationStatus string `pulumi:"invocationStatus"`
	// The launch time of the ecs invocation.
	LaunchTime string `pulumi:"launchTime"`
	// The custom parameters of the ecs invocation.
	Parameters string `pulumi:"parameters"`
	// The project name of ecs invocation.
	ProjectName string `pulumi:"projectName"`
	// The recurrence end time of the ecs invocation.
	RecurrenceEndTime string `pulumi:"recurrenceEndTime"`
	// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode string `pulumi:"repeatMode"`
	// The start time of the ecs invocation.
	StartTime string `pulumi:"startTime"`
	// Tags.
	Tags []GetInvocationsInvocationTag `pulumi:"tags"`
	// The timeout of the ecs command.
	Timeout int `pulumi:"timeout"`
	// The username of the ecs command.
	Username string `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir string `pulumi:"workingDir"`
}

// GetInvocationsInvocationInput is an input type that accepts GetInvocationsInvocationArgs and GetInvocationsInvocationOutput values.
// You can construct a concrete instance of `GetInvocationsInvocationInput` via:
//
//	GetInvocationsInvocationArgs{...}
type GetInvocationsInvocationInput interface {
	pulumi.Input

	ToGetInvocationsInvocationOutput() GetInvocationsInvocationOutput
	ToGetInvocationsInvocationOutputWithContext(context.Context) GetInvocationsInvocationOutput
}

type GetInvocationsInvocationArgs struct {
	// The base64 encoded content of the ecs command.
	CommandContent pulumi.StringInput `pulumi:"commandContent"`
	// The description of the ecs command.
	CommandDescription pulumi.StringInput `pulumi:"commandDescription"`
	// The id of ecs command.
	CommandId pulumi.StringInput `pulumi:"commandId"`
	// The name of ecs command. This field support fuzzy query.
	CommandName pulumi.StringInput `pulumi:"commandName"`
	// The provider of the ecs command.
	CommandProvider pulumi.StringInput `pulumi:"commandProvider"`
	// The type of ecs command. Valid values: `Shell`.
	CommandType pulumi.StringInput `pulumi:"commandType"`
	// The end time of the ecs invocation.
	EndTime pulumi.StringInput `pulumi:"endTime"`
	// The frequency of the ecs invocation.
	Frequency pulumi.StringInput `pulumi:"frequency"`
	// The id of the ecs invocation.
	Id pulumi.StringInput `pulumi:"id"`
	// The list of ECS instance IDs.
	InstanceIds pulumi.StringArrayInput `pulumi:"instanceIds"`
	// The instance number of the ecs invocation.
	InstanceNumber pulumi.IntInput `pulumi:"instanceNumber"`
	// The description of the ecs invocation.
	InvocationDescription pulumi.StringInput `pulumi:"invocationDescription"`
	// The id of ecs invocation.
	InvocationId pulumi.StringInput `pulumi:"invocationId"`
	// The name of ecs invocation. This field support fuzzy query.
	InvocationName pulumi.StringInput `pulumi:"invocationName"`
	// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
	InvocationStatus pulumi.StringInput `pulumi:"invocationStatus"`
	// The launch time of the ecs invocation.
	LaunchTime pulumi.StringInput `pulumi:"launchTime"`
	// The custom parameters of the ecs invocation.
	Parameters pulumi.StringInput `pulumi:"parameters"`
	// The project name of ecs invocation.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The recurrence end time of the ecs invocation.
	RecurrenceEndTime pulumi.StringInput `pulumi:"recurrenceEndTime"`
	// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode pulumi.StringInput `pulumi:"repeatMode"`
	// The start time of the ecs invocation.
	StartTime pulumi.StringInput `pulumi:"startTime"`
	// Tags.
	Tags GetInvocationsInvocationTagArrayInput `pulumi:"tags"`
	// The timeout of the ecs command.
	Timeout pulumi.IntInput `pulumi:"timeout"`
	// The username of the ecs command.
	Username pulumi.StringInput `pulumi:"username"`
	// The working directory of the ecs command.
	WorkingDir pulumi.StringInput `pulumi:"workingDir"`
}

func (GetInvocationsInvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationsInvocation)(nil)).Elem()
}

func (i GetInvocationsInvocationArgs) ToGetInvocationsInvocationOutput() GetInvocationsInvocationOutput {
	return i.ToGetInvocationsInvocationOutputWithContext(context.Background())
}

func (i GetInvocationsInvocationArgs) ToGetInvocationsInvocationOutputWithContext(ctx context.Context) GetInvocationsInvocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationsInvocationOutput)
}

// GetInvocationsInvocationArrayInput is an input type that accepts GetInvocationsInvocationArray and GetInvocationsInvocationArrayOutput values.
// You can construct a concrete instance of `GetInvocationsInvocationArrayInput` via:
//
//	GetInvocationsInvocationArray{ GetInvocationsInvocationArgs{...} }
type GetInvocationsInvocationArrayInput interface {
	pulumi.Input

	ToGetInvocationsInvocationArrayOutput() GetInvocationsInvocationArrayOutput
	ToGetInvocationsInvocationArrayOutputWithContext(context.Context) GetInvocationsInvocationArrayOutput
}

type GetInvocationsInvocationArray []GetInvocationsInvocationInput

func (GetInvocationsInvocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationsInvocation)(nil)).Elem()
}

func (i GetInvocationsInvocationArray) ToGetInvocationsInvocationArrayOutput() GetInvocationsInvocationArrayOutput {
	return i.ToGetInvocationsInvocationArrayOutputWithContext(context.Background())
}

func (i GetInvocationsInvocationArray) ToGetInvocationsInvocationArrayOutputWithContext(ctx context.Context) GetInvocationsInvocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationsInvocationArrayOutput)
}

type GetInvocationsInvocationOutput struct{ *pulumi.OutputState }

func (GetInvocationsInvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationsInvocation)(nil)).Elem()
}

func (o GetInvocationsInvocationOutput) ToGetInvocationsInvocationOutput() GetInvocationsInvocationOutput {
	return o
}

func (o GetInvocationsInvocationOutput) ToGetInvocationsInvocationOutputWithContext(ctx context.Context) GetInvocationsInvocationOutput {
	return o
}

// The base64 encoded content of the ecs command.
func (o GetInvocationsInvocationOutput) CommandContent() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.CommandContent }).(pulumi.StringOutput)
}

// The description of the ecs command.
func (o GetInvocationsInvocationOutput) CommandDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.CommandDescription }).(pulumi.StringOutput)
}

// The id of ecs command.
func (o GetInvocationsInvocationOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.CommandId }).(pulumi.StringOutput)
}

// The name of ecs command. This field support fuzzy query.
func (o GetInvocationsInvocationOutput) CommandName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.CommandName }).(pulumi.StringOutput)
}

// The provider of the ecs command.
func (o GetInvocationsInvocationOutput) CommandProvider() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.CommandProvider }).(pulumi.StringOutput)
}

// The type of ecs command. Valid values: `Shell`.
func (o GetInvocationsInvocationOutput) CommandType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.CommandType }).(pulumi.StringOutput)
}

// The end time of the ecs invocation.
func (o GetInvocationsInvocationOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.EndTime }).(pulumi.StringOutput)
}

// The frequency of the ecs invocation.
func (o GetInvocationsInvocationOutput) Frequency() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.Frequency }).(pulumi.StringOutput)
}

// The id of the ecs invocation.
func (o GetInvocationsInvocationOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.Id }).(pulumi.StringOutput)
}

// The list of ECS instance IDs.
func (o GetInvocationsInvocationOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) []string { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// The instance number of the ecs invocation.
func (o GetInvocationsInvocationOutput) InstanceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) int { return v.InstanceNumber }).(pulumi.IntOutput)
}

// The description of the ecs invocation.
func (o GetInvocationsInvocationOutput) InvocationDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.InvocationDescription }).(pulumi.StringOutput)
}

// The id of ecs invocation.
func (o GetInvocationsInvocationOutput) InvocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.InvocationId }).(pulumi.StringOutput)
}

// The name of ecs invocation. This field support fuzzy query.
func (o GetInvocationsInvocationOutput) InvocationName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.InvocationName }).(pulumi.StringOutput)
}

// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
func (o GetInvocationsInvocationOutput) InvocationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.InvocationStatus }).(pulumi.StringOutput)
}

// The launch time of the ecs invocation.
func (o GetInvocationsInvocationOutput) LaunchTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.LaunchTime }).(pulumi.StringOutput)
}

// The custom parameters of the ecs invocation.
func (o GetInvocationsInvocationOutput) Parameters() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.Parameters }).(pulumi.StringOutput)
}

// The project name of ecs invocation.
func (o GetInvocationsInvocationOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The recurrence end time of the ecs invocation.
func (o GetInvocationsInvocationOutput) RecurrenceEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.RecurrenceEndTime }).(pulumi.StringOutput)
}

// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
func (o GetInvocationsInvocationOutput) RepeatMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.RepeatMode }).(pulumi.StringOutput)
}

// The start time of the ecs invocation.
func (o GetInvocationsInvocationOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.StartTime }).(pulumi.StringOutput)
}

// Tags.
func (o GetInvocationsInvocationOutput) Tags() GetInvocationsInvocationTagArrayOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) []GetInvocationsInvocationTag { return v.Tags }).(GetInvocationsInvocationTagArrayOutput)
}

// The timeout of the ecs command.
func (o GetInvocationsInvocationOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) int { return v.Timeout }).(pulumi.IntOutput)
}

// The username of the ecs command.
func (o GetInvocationsInvocationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.Username }).(pulumi.StringOutput)
}

// The working directory of the ecs command.
func (o GetInvocationsInvocationOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocation) string { return v.WorkingDir }).(pulumi.StringOutput)
}

type GetInvocationsInvocationArrayOutput struct{ *pulumi.OutputState }

func (GetInvocationsInvocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationsInvocation)(nil)).Elem()
}

func (o GetInvocationsInvocationArrayOutput) ToGetInvocationsInvocationArrayOutput() GetInvocationsInvocationArrayOutput {
	return o
}

func (o GetInvocationsInvocationArrayOutput) ToGetInvocationsInvocationArrayOutputWithContext(ctx context.Context) GetInvocationsInvocationArrayOutput {
	return o
}

func (o GetInvocationsInvocationArrayOutput) Index(i pulumi.IntInput) GetInvocationsInvocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInvocationsInvocation {
		return vs[0].([]GetInvocationsInvocation)[vs[1].(int)]
	}).(GetInvocationsInvocationOutput)
}

type GetInvocationsInvocationTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInvocationsInvocationTagInput is an input type that accepts GetInvocationsInvocationTagArgs and GetInvocationsInvocationTagOutput values.
// You can construct a concrete instance of `GetInvocationsInvocationTagInput` via:
//
//	GetInvocationsInvocationTagArgs{...}
type GetInvocationsInvocationTagInput interface {
	pulumi.Input

	ToGetInvocationsInvocationTagOutput() GetInvocationsInvocationTagOutput
	ToGetInvocationsInvocationTagOutputWithContext(context.Context) GetInvocationsInvocationTagOutput
}

type GetInvocationsInvocationTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInvocationsInvocationTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationsInvocationTag)(nil)).Elem()
}

func (i GetInvocationsInvocationTagArgs) ToGetInvocationsInvocationTagOutput() GetInvocationsInvocationTagOutput {
	return i.ToGetInvocationsInvocationTagOutputWithContext(context.Background())
}

func (i GetInvocationsInvocationTagArgs) ToGetInvocationsInvocationTagOutputWithContext(ctx context.Context) GetInvocationsInvocationTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationsInvocationTagOutput)
}

// GetInvocationsInvocationTagArrayInput is an input type that accepts GetInvocationsInvocationTagArray and GetInvocationsInvocationTagArrayOutput values.
// You can construct a concrete instance of `GetInvocationsInvocationTagArrayInput` via:
//
//	GetInvocationsInvocationTagArray{ GetInvocationsInvocationTagArgs{...} }
type GetInvocationsInvocationTagArrayInput interface {
	pulumi.Input

	ToGetInvocationsInvocationTagArrayOutput() GetInvocationsInvocationTagArrayOutput
	ToGetInvocationsInvocationTagArrayOutputWithContext(context.Context) GetInvocationsInvocationTagArrayOutput
}

type GetInvocationsInvocationTagArray []GetInvocationsInvocationTagInput

func (GetInvocationsInvocationTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationsInvocationTag)(nil)).Elem()
}

func (i GetInvocationsInvocationTagArray) ToGetInvocationsInvocationTagArrayOutput() GetInvocationsInvocationTagArrayOutput {
	return i.ToGetInvocationsInvocationTagArrayOutputWithContext(context.Background())
}

func (i GetInvocationsInvocationTagArray) ToGetInvocationsInvocationTagArrayOutputWithContext(ctx context.Context) GetInvocationsInvocationTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationsInvocationTagArrayOutput)
}

type GetInvocationsInvocationTagOutput struct{ *pulumi.OutputState }

func (GetInvocationsInvocationTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationsInvocationTag)(nil)).Elem()
}

func (o GetInvocationsInvocationTagOutput) ToGetInvocationsInvocationTagOutput() GetInvocationsInvocationTagOutput {
	return o
}

func (o GetInvocationsInvocationTagOutput) ToGetInvocationsInvocationTagOutputWithContext(ctx context.Context) GetInvocationsInvocationTagOutput {
	return o
}

// The Key of Tags.
func (o GetInvocationsInvocationTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocationTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInvocationsInvocationTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsInvocationTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInvocationsInvocationTagArrayOutput struct{ *pulumi.OutputState }

func (GetInvocationsInvocationTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationsInvocationTag)(nil)).Elem()
}

func (o GetInvocationsInvocationTagArrayOutput) ToGetInvocationsInvocationTagArrayOutput() GetInvocationsInvocationTagArrayOutput {
	return o
}

func (o GetInvocationsInvocationTagArrayOutput) ToGetInvocationsInvocationTagArrayOutputWithContext(ctx context.Context) GetInvocationsInvocationTagArrayOutput {
	return o
}

func (o GetInvocationsInvocationTagArrayOutput) Index(i pulumi.IntInput) GetInvocationsInvocationTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInvocationsInvocationTag {
		return vs[0].([]GetInvocationsInvocationTag)[vs[1].(int)]
	}).(GetInvocationsInvocationTagOutput)
}

type GetInvocationsTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInvocationsTagInput is an input type that accepts GetInvocationsTagArgs and GetInvocationsTagOutput values.
// You can construct a concrete instance of `GetInvocationsTagInput` via:
//
//	GetInvocationsTagArgs{...}
type GetInvocationsTagInput interface {
	pulumi.Input

	ToGetInvocationsTagOutput() GetInvocationsTagOutput
	ToGetInvocationsTagOutputWithContext(context.Context) GetInvocationsTagOutput
}

type GetInvocationsTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInvocationsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationsTag)(nil)).Elem()
}

func (i GetInvocationsTagArgs) ToGetInvocationsTagOutput() GetInvocationsTagOutput {
	return i.ToGetInvocationsTagOutputWithContext(context.Background())
}

func (i GetInvocationsTagArgs) ToGetInvocationsTagOutputWithContext(ctx context.Context) GetInvocationsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationsTagOutput)
}

// GetInvocationsTagArrayInput is an input type that accepts GetInvocationsTagArray and GetInvocationsTagArrayOutput values.
// You can construct a concrete instance of `GetInvocationsTagArrayInput` via:
//
//	GetInvocationsTagArray{ GetInvocationsTagArgs{...} }
type GetInvocationsTagArrayInput interface {
	pulumi.Input

	ToGetInvocationsTagArrayOutput() GetInvocationsTagArrayOutput
	ToGetInvocationsTagArrayOutputWithContext(context.Context) GetInvocationsTagArrayOutput
}

type GetInvocationsTagArray []GetInvocationsTagInput

func (GetInvocationsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationsTag)(nil)).Elem()
}

func (i GetInvocationsTagArray) ToGetInvocationsTagArrayOutput() GetInvocationsTagArrayOutput {
	return i.ToGetInvocationsTagArrayOutputWithContext(context.Background())
}

func (i GetInvocationsTagArray) ToGetInvocationsTagArrayOutputWithContext(ctx context.Context) GetInvocationsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInvocationsTagArrayOutput)
}

type GetInvocationsTagOutput struct{ *pulumi.OutputState }

func (GetInvocationsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInvocationsTag)(nil)).Elem()
}

func (o GetInvocationsTagOutput) ToGetInvocationsTagOutput() GetInvocationsTagOutput {
	return o
}

func (o GetInvocationsTagOutput) ToGetInvocationsTagOutputWithContext(ctx context.Context) GetInvocationsTagOutput {
	return o
}

// The Key of Tags.
func (o GetInvocationsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInvocationsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInvocationsTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInvocationsTagArrayOutput struct{ *pulumi.OutputState }

func (GetInvocationsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInvocationsTag)(nil)).Elem()
}

func (o GetInvocationsTagArrayOutput) ToGetInvocationsTagArrayOutput() GetInvocationsTagArrayOutput {
	return o
}

func (o GetInvocationsTagArrayOutput) ToGetInvocationsTagArrayOutputWithContext(ctx context.Context) GetInvocationsTagArrayOutput {
	return o
}

func (o GetInvocationsTagArrayOutput) Index(i pulumi.IntInput) GetInvocationsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInvocationsTag {
		return vs[0].([]GetInvocationsTag)[vs[1].(int)]
	}).(GetInvocationsTagOutput)
}

type GetKeyPairsKeyPair struct {
	// The creation time of key pair.
	CreatedAt string `pulumi:"createdAt"`
	// The description of key pair.
	Description string `pulumi:"description"`
	// The finger print info.
	FingerPrint string `pulumi:"fingerPrint"`
	// The id of key pair.
	Id string `pulumi:"id"`
	// The id of key pair.
	KeyPairId string `pulumi:"keyPairId"`
	// Name of key pair.
	KeyPairName string `pulumi:"keyPairName"`
	// The update time of key pair.
	UpdatedAt string `pulumi:"updatedAt"`
}

// GetKeyPairsKeyPairInput is an input type that accepts GetKeyPairsKeyPairArgs and GetKeyPairsKeyPairOutput values.
// You can construct a concrete instance of `GetKeyPairsKeyPairInput` via:
//
//	GetKeyPairsKeyPairArgs{...}
type GetKeyPairsKeyPairInput interface {
	pulumi.Input

	ToGetKeyPairsKeyPairOutput() GetKeyPairsKeyPairOutput
	ToGetKeyPairsKeyPairOutputWithContext(context.Context) GetKeyPairsKeyPairOutput
}

type GetKeyPairsKeyPairArgs struct {
	// The creation time of key pair.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The description of key pair.
	Description pulumi.StringInput `pulumi:"description"`
	// The finger print info.
	FingerPrint pulumi.StringInput `pulumi:"fingerPrint"`
	// The id of key pair.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of key pair.
	KeyPairId pulumi.StringInput `pulumi:"keyPairId"`
	// Name of key pair.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The update time of key pair.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
}

func (GetKeyPairsKeyPairArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyPairsKeyPair)(nil)).Elem()
}

func (i GetKeyPairsKeyPairArgs) ToGetKeyPairsKeyPairOutput() GetKeyPairsKeyPairOutput {
	return i.ToGetKeyPairsKeyPairOutputWithContext(context.Background())
}

func (i GetKeyPairsKeyPairArgs) ToGetKeyPairsKeyPairOutputWithContext(ctx context.Context) GetKeyPairsKeyPairOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyPairsKeyPairOutput)
}

// GetKeyPairsKeyPairArrayInput is an input type that accepts GetKeyPairsKeyPairArray and GetKeyPairsKeyPairArrayOutput values.
// You can construct a concrete instance of `GetKeyPairsKeyPairArrayInput` via:
//
//	GetKeyPairsKeyPairArray{ GetKeyPairsKeyPairArgs{...} }
type GetKeyPairsKeyPairArrayInput interface {
	pulumi.Input

	ToGetKeyPairsKeyPairArrayOutput() GetKeyPairsKeyPairArrayOutput
	ToGetKeyPairsKeyPairArrayOutputWithContext(context.Context) GetKeyPairsKeyPairArrayOutput
}

type GetKeyPairsKeyPairArray []GetKeyPairsKeyPairInput

func (GetKeyPairsKeyPairArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyPairsKeyPair)(nil)).Elem()
}

func (i GetKeyPairsKeyPairArray) ToGetKeyPairsKeyPairArrayOutput() GetKeyPairsKeyPairArrayOutput {
	return i.ToGetKeyPairsKeyPairArrayOutputWithContext(context.Background())
}

func (i GetKeyPairsKeyPairArray) ToGetKeyPairsKeyPairArrayOutputWithContext(ctx context.Context) GetKeyPairsKeyPairArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetKeyPairsKeyPairArrayOutput)
}

type GetKeyPairsKeyPairOutput struct{ *pulumi.OutputState }

func (GetKeyPairsKeyPairOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKeyPairsKeyPair)(nil)).Elem()
}

func (o GetKeyPairsKeyPairOutput) ToGetKeyPairsKeyPairOutput() GetKeyPairsKeyPairOutput {
	return o
}

func (o GetKeyPairsKeyPairOutput) ToGetKeyPairsKeyPairOutputWithContext(ctx context.Context) GetKeyPairsKeyPairOutput {
	return o
}

// The creation time of key pair.
func (o GetKeyPairsKeyPairOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPairsKeyPair) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The description of key pair.
func (o GetKeyPairsKeyPairOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPairsKeyPair) string { return v.Description }).(pulumi.StringOutput)
}

// The finger print info.
func (o GetKeyPairsKeyPairOutput) FingerPrint() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPairsKeyPair) string { return v.FingerPrint }).(pulumi.StringOutput)
}

// The id of key pair.
func (o GetKeyPairsKeyPairOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPairsKeyPair) string { return v.Id }).(pulumi.StringOutput)
}

// The id of key pair.
func (o GetKeyPairsKeyPairOutput) KeyPairId() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPairsKeyPair) string { return v.KeyPairId }).(pulumi.StringOutput)
}

// Name of key pair.
func (o GetKeyPairsKeyPairOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPairsKeyPair) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The update time of key pair.
func (o GetKeyPairsKeyPairOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetKeyPairsKeyPair) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

type GetKeyPairsKeyPairArrayOutput struct{ *pulumi.OutputState }

func (GetKeyPairsKeyPairArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetKeyPairsKeyPair)(nil)).Elem()
}

func (o GetKeyPairsKeyPairArrayOutput) ToGetKeyPairsKeyPairArrayOutput() GetKeyPairsKeyPairArrayOutput {
	return o
}

func (o GetKeyPairsKeyPairArrayOutput) ToGetKeyPairsKeyPairArrayOutputWithContext(ctx context.Context) GetKeyPairsKeyPairArrayOutput {
	return o
}

func (o GetKeyPairsKeyPairArrayOutput) Index(i pulumi.IntInput) GetKeyPairsKeyPairOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetKeyPairsKeyPair {
		return vs[0].([]GetKeyPairsKeyPair)[vs[1].(int)]
	}).(GetKeyPairsKeyPairOutput)
}

type GetLaunchTemplatesLaunchTemplate struct {
	// The created time of the launch template.
	CreatedAt string `pulumi:"createdAt"`
	// The default version of the launch template.
	DefaultVersionNumber int `pulumi:"defaultVersionNumber"`
	// The description of the instance.
	Description string `pulumi:"description"`
	// The EIP bandwidth which the scaling configuration set.
	EipBandwidth int `pulumi:"eipBandwidth"`
	// The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.
	EipBillingType string `pulumi:"eipBillingType"`
	// The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.
	EipIsp string `pulumi:"eipIsp"`
	// The host name of the instance.
	HostName string `pulumi:"hostName"`
	// The hpc cluster id.
	HpcClusterId string `pulumi:"hpcClusterId"`
	// The id of the launch template.
	Id string `pulumi:"id"`
	// The image id.
	ImageId string `pulumi:"imageId"`
	// The charge type of the instance and volume.
	InstanceChargeType string `pulumi:"instanceChargeType"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
	// When you log in to the instance using the SSH key pair, enter the name of the key pair.
	KeyPairName string `pulumi:"keyPairName"`
	// The latest version of the launch template.
	LatestVersionNumber int `pulumi:"latestVersionNumber"`
	// The id of the launch template.
	LaunchTemplateId string `pulumi:"launchTemplateId"`
	// The name of the launch template.
	LaunchTemplateName string `pulumi:"launchTemplateName"`
	// The list of network interfaces.
	NetworkInterfaces []GetLaunchTemplatesLaunchTemplateNetworkInterface `pulumi:"networkInterfaces"`
	// Whether to open the security reinforcement.
	SecurityEnhancementStrategy string `pulumi:"securityEnhancementStrategy"`
	// The index of the ordered suffix.
	SuffixIndex int `pulumi:"suffixIndex"`
	// Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.
	UniqueSuffix bool `pulumi:"uniqueSuffix"`
	// The updated time of the launch template.
	UpdatedAt string `pulumi:"updatedAt"`
	// The latest version description of the launch template.
	VersionDescription string `pulumi:"versionDescription"`
	// The list of volume of the scaling configuration.
	Volumes []GetLaunchTemplatesLaunchTemplateVolume `pulumi:"volumes"`
	// The vpc id.
	VpcId string `pulumi:"vpcId"`
	// The zone ID of the instance.
	ZoneId string `pulumi:"zoneId"`
}

// GetLaunchTemplatesLaunchTemplateInput is an input type that accepts GetLaunchTemplatesLaunchTemplateArgs and GetLaunchTemplatesLaunchTemplateOutput values.
// You can construct a concrete instance of `GetLaunchTemplatesLaunchTemplateInput` via:
//
//	GetLaunchTemplatesLaunchTemplateArgs{...}
type GetLaunchTemplatesLaunchTemplateInput interface {
	pulumi.Input

	ToGetLaunchTemplatesLaunchTemplateOutput() GetLaunchTemplatesLaunchTemplateOutput
	ToGetLaunchTemplatesLaunchTemplateOutputWithContext(context.Context) GetLaunchTemplatesLaunchTemplateOutput
}

type GetLaunchTemplatesLaunchTemplateArgs struct {
	// The created time of the launch template.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The default version of the launch template.
	DefaultVersionNumber pulumi.IntInput `pulumi:"defaultVersionNumber"`
	// The description of the instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The EIP bandwidth which the scaling configuration set.
	EipBandwidth pulumi.IntInput `pulumi:"eipBandwidth"`
	// The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.
	EipBillingType pulumi.StringInput `pulumi:"eipBillingType"`
	// The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.
	EipIsp pulumi.StringInput `pulumi:"eipIsp"`
	// The host name of the instance.
	HostName pulumi.StringInput `pulumi:"hostName"`
	// The hpc cluster id.
	HpcClusterId pulumi.StringInput `pulumi:"hpcClusterId"`
	// The id of the launch template.
	Id pulumi.StringInput `pulumi:"id"`
	// The image id.
	ImageId pulumi.StringInput `pulumi:"imageId"`
	// The charge type of the instance and volume.
	InstanceChargeType pulumi.StringInput `pulumi:"instanceChargeType"`
	// The name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// When you log in to the instance using the SSH key pair, enter the name of the key pair.
	KeyPairName pulumi.StringInput `pulumi:"keyPairName"`
	// The latest version of the launch template.
	LatestVersionNumber pulumi.IntInput `pulumi:"latestVersionNumber"`
	// The id of the launch template.
	LaunchTemplateId pulumi.StringInput `pulumi:"launchTemplateId"`
	// The name of the launch template.
	LaunchTemplateName pulumi.StringInput `pulumi:"launchTemplateName"`
	// The list of network interfaces.
	NetworkInterfaces GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput `pulumi:"networkInterfaces"`
	// Whether to open the security reinforcement.
	SecurityEnhancementStrategy pulumi.StringInput `pulumi:"securityEnhancementStrategy"`
	// The index of the ordered suffix.
	SuffixIndex pulumi.IntInput `pulumi:"suffixIndex"`
	// Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.
	UniqueSuffix pulumi.BoolInput `pulumi:"uniqueSuffix"`
	// The updated time of the launch template.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The latest version description of the launch template.
	VersionDescription pulumi.StringInput `pulumi:"versionDescription"`
	// The list of volume of the scaling configuration.
	Volumes GetLaunchTemplatesLaunchTemplateVolumeArrayInput `pulumi:"volumes"`
	// The vpc id.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone ID of the instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetLaunchTemplatesLaunchTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (i GetLaunchTemplatesLaunchTemplateArgs) ToGetLaunchTemplatesLaunchTemplateOutput() GetLaunchTemplatesLaunchTemplateOutput {
	return i.ToGetLaunchTemplatesLaunchTemplateOutputWithContext(context.Background())
}

func (i GetLaunchTemplatesLaunchTemplateArgs) ToGetLaunchTemplatesLaunchTemplateOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLaunchTemplatesLaunchTemplateOutput)
}

// GetLaunchTemplatesLaunchTemplateArrayInput is an input type that accepts GetLaunchTemplatesLaunchTemplateArray and GetLaunchTemplatesLaunchTemplateArrayOutput values.
// You can construct a concrete instance of `GetLaunchTemplatesLaunchTemplateArrayInput` via:
//
//	GetLaunchTemplatesLaunchTemplateArray{ GetLaunchTemplatesLaunchTemplateArgs{...} }
type GetLaunchTemplatesLaunchTemplateArrayInput interface {
	pulumi.Input

	ToGetLaunchTemplatesLaunchTemplateArrayOutput() GetLaunchTemplatesLaunchTemplateArrayOutput
	ToGetLaunchTemplatesLaunchTemplateArrayOutputWithContext(context.Context) GetLaunchTemplatesLaunchTemplateArrayOutput
}

type GetLaunchTemplatesLaunchTemplateArray []GetLaunchTemplatesLaunchTemplateInput

func (GetLaunchTemplatesLaunchTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (i GetLaunchTemplatesLaunchTemplateArray) ToGetLaunchTemplatesLaunchTemplateArrayOutput() GetLaunchTemplatesLaunchTemplateArrayOutput {
	return i.ToGetLaunchTemplatesLaunchTemplateArrayOutputWithContext(context.Background())
}

func (i GetLaunchTemplatesLaunchTemplateArray) ToGetLaunchTemplatesLaunchTemplateArrayOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLaunchTemplatesLaunchTemplateArrayOutput)
}

type GetLaunchTemplatesLaunchTemplateOutput struct{ *pulumi.OutputState }

func (GetLaunchTemplatesLaunchTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (o GetLaunchTemplatesLaunchTemplateOutput) ToGetLaunchTemplatesLaunchTemplateOutput() GetLaunchTemplatesLaunchTemplateOutput {
	return o
}

func (o GetLaunchTemplatesLaunchTemplateOutput) ToGetLaunchTemplatesLaunchTemplateOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateOutput {
	return o
}

// The created time of the launch template.
func (o GetLaunchTemplatesLaunchTemplateOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The default version of the launch template.
func (o GetLaunchTemplatesLaunchTemplateOutput) DefaultVersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) int { return v.DefaultVersionNumber }).(pulumi.IntOutput)
}

// The description of the instance.
func (o GetLaunchTemplatesLaunchTemplateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.Description }).(pulumi.StringOutput)
}

// The EIP bandwidth which the scaling configuration set.
func (o GetLaunchTemplatesLaunchTemplateOutput) EipBandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) int { return v.EipBandwidth }).(pulumi.IntOutput)
}

// The EIP billing type which the scaling configuration set. Valid values: PostPaidByBandwidth, PostPaidByTraffic.
func (o GetLaunchTemplatesLaunchTemplateOutput) EipBillingType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.EipBillingType }).(pulumi.StringOutput)
}

// The EIP ISP which the scaling configuration set. Valid values: BGP, ChinaMobile, ChinaUnicom, ChinaTelecom.
func (o GetLaunchTemplatesLaunchTemplateOutput) EipIsp() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.EipIsp }).(pulumi.StringOutput)
}

// The host name of the instance.
func (o GetLaunchTemplatesLaunchTemplateOutput) HostName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.HostName }).(pulumi.StringOutput)
}

// The hpc cluster id.
func (o GetLaunchTemplatesLaunchTemplateOutput) HpcClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.HpcClusterId }).(pulumi.StringOutput)
}

// The id of the launch template.
func (o GetLaunchTemplatesLaunchTemplateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.Id }).(pulumi.StringOutput)
}

// The image id.
func (o GetLaunchTemplatesLaunchTemplateOutput) ImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.ImageId }).(pulumi.StringOutput)
}

// The charge type of the instance and volume.
func (o GetLaunchTemplatesLaunchTemplateOutput) InstanceChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.InstanceChargeType }).(pulumi.StringOutput)
}

// The name of the instance.
func (o GetLaunchTemplatesLaunchTemplateOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.InstanceName }).(pulumi.StringOutput)
}

// When you log in to the instance using the SSH key pair, enter the name of the key pair.
func (o GetLaunchTemplatesLaunchTemplateOutput) KeyPairName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.KeyPairName }).(pulumi.StringOutput)
}

// The latest version of the launch template.
func (o GetLaunchTemplatesLaunchTemplateOutput) LatestVersionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) int { return v.LatestVersionNumber }).(pulumi.IntOutput)
}

// The id of the launch template.
func (o GetLaunchTemplatesLaunchTemplateOutput) LaunchTemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.LaunchTemplateId }).(pulumi.StringOutput)
}

// The name of the launch template.
func (o GetLaunchTemplatesLaunchTemplateOutput) LaunchTemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.LaunchTemplateName }).(pulumi.StringOutput)
}

// The list of network interfaces.
func (o GetLaunchTemplatesLaunchTemplateOutput) NetworkInterfaces() GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) []GetLaunchTemplatesLaunchTemplateNetworkInterface {
		return v.NetworkInterfaces
	}).(GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput)
}

// Whether to open the security reinforcement.
func (o GetLaunchTemplatesLaunchTemplateOutput) SecurityEnhancementStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.SecurityEnhancementStrategy }).(pulumi.StringOutput)
}

// The index of the ordered suffix.
func (o GetLaunchTemplatesLaunchTemplateOutput) SuffixIndex() pulumi.IntOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) int { return v.SuffixIndex }).(pulumi.IntOutput)
}

// Indicates whether the ordered suffix is automatically added to Hostname and InstanceName when multiple instances are created.
func (o GetLaunchTemplatesLaunchTemplateOutput) UniqueSuffix() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) bool { return v.UniqueSuffix }).(pulumi.BoolOutput)
}

// The updated time of the launch template.
func (o GetLaunchTemplatesLaunchTemplateOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The latest version description of the launch template.
func (o GetLaunchTemplatesLaunchTemplateOutput) VersionDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.VersionDescription }).(pulumi.StringOutput)
}

// The list of volume of the scaling configuration.
func (o GetLaunchTemplatesLaunchTemplateOutput) Volumes() GetLaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) []GetLaunchTemplatesLaunchTemplateVolume { return v.Volumes }).(GetLaunchTemplatesLaunchTemplateVolumeArrayOutput)
}

// The vpc id.
func (o GetLaunchTemplatesLaunchTemplateOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone ID of the instance.
func (o GetLaunchTemplatesLaunchTemplateOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplate) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetLaunchTemplatesLaunchTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetLaunchTemplatesLaunchTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLaunchTemplatesLaunchTemplate)(nil)).Elem()
}

func (o GetLaunchTemplatesLaunchTemplateArrayOutput) ToGetLaunchTemplatesLaunchTemplateArrayOutput() GetLaunchTemplatesLaunchTemplateArrayOutput {
	return o
}

func (o GetLaunchTemplatesLaunchTemplateArrayOutput) ToGetLaunchTemplatesLaunchTemplateArrayOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateArrayOutput {
	return o
}

func (o GetLaunchTemplatesLaunchTemplateArrayOutput) Index(i pulumi.IntInput) GetLaunchTemplatesLaunchTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLaunchTemplatesLaunchTemplate {
		return vs[0].([]GetLaunchTemplatesLaunchTemplate)[vs[1].(int)]
	}).(GetLaunchTemplatesLaunchTemplateOutput)
}

type GetLaunchTemplatesLaunchTemplateNetworkInterface struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId string `pulumi:"subnetId"`
}

// GetLaunchTemplatesLaunchTemplateNetworkInterfaceInput is an input type that accepts GetLaunchTemplatesLaunchTemplateNetworkInterfaceArgs and GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput values.
// You can construct a concrete instance of `GetLaunchTemplatesLaunchTemplateNetworkInterfaceInput` via:
//
//	GetLaunchTemplatesLaunchTemplateNetworkInterfaceArgs{...}
type GetLaunchTemplatesLaunchTemplateNetworkInterfaceInput interface {
	pulumi.Input

	ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput() GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput
	ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(context.Context) GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput
}

type GetLaunchTemplatesLaunchTemplateNetworkInterfaceArgs struct {
	// The security group ID associated with the NIC.
	SecurityGroupIds pulumi.StringArrayInput `pulumi:"securityGroupIds"`
	// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetLaunchTemplatesLaunchTemplateNetworkInterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i GetLaunchTemplatesLaunchTemplateNetworkInterfaceArgs) ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput() GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return i.ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(context.Background())
}

func (i GetLaunchTemplatesLaunchTemplateNetworkInterfaceArgs) ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput)
}

// GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput is an input type that accepts GetLaunchTemplatesLaunchTemplateNetworkInterfaceArray and GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput values.
// You can construct a concrete instance of `GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput` via:
//
//	GetLaunchTemplatesLaunchTemplateNetworkInterfaceArray{ GetLaunchTemplatesLaunchTemplateNetworkInterfaceArgs{...} }
type GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput interface {
	pulumi.Input

	ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput() GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput
	ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Context) GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput
}

type GetLaunchTemplatesLaunchTemplateNetworkInterfaceArray []GetLaunchTemplatesLaunchTemplateNetworkInterfaceInput

func (GetLaunchTemplatesLaunchTemplateNetworkInterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (i GetLaunchTemplatesLaunchTemplateNetworkInterfaceArray) ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput() GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return i.ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(context.Background())
}

func (i GetLaunchTemplatesLaunchTemplateNetworkInterfaceArray) ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput)
}

type GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput struct{ *pulumi.OutputState }

func (GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput) ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput() GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return o
}

func (o GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput) ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return o
}

// The security group ID associated with the NIC.
func (o GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput) SecurityGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplateNetworkInterface) []string { return v.SecurityGroupIds }).(pulumi.StringArrayOutput)
}

// The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
func (o GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplateNetworkInterface) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput struct{ *pulumi.OutputState }

func (GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLaunchTemplatesLaunchTemplateNetworkInterface)(nil)).Elem()
}

func (o GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput() GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) ToGetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput {
	return o
}

func (o GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput) Index(i pulumi.IntInput) GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLaunchTemplatesLaunchTemplateNetworkInterface {
		return vs[0].([]GetLaunchTemplatesLaunchTemplateNetworkInterface)[vs[1].(int)]
	}).(GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput)
}

type GetLaunchTemplatesLaunchTemplateVolume struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance bool `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size int `pulumi:"size"`
	// The type of volume.
	VolumeType string `pulumi:"volumeType"`
}

// GetLaunchTemplatesLaunchTemplateVolumeInput is an input type that accepts GetLaunchTemplatesLaunchTemplateVolumeArgs and GetLaunchTemplatesLaunchTemplateVolumeOutput values.
// You can construct a concrete instance of `GetLaunchTemplatesLaunchTemplateVolumeInput` via:
//
//	GetLaunchTemplatesLaunchTemplateVolumeArgs{...}
type GetLaunchTemplatesLaunchTemplateVolumeInput interface {
	pulumi.Input

	ToGetLaunchTemplatesLaunchTemplateVolumeOutput() GetLaunchTemplatesLaunchTemplateVolumeOutput
	ToGetLaunchTemplatesLaunchTemplateVolumeOutputWithContext(context.Context) GetLaunchTemplatesLaunchTemplateVolumeOutput
}

type GetLaunchTemplatesLaunchTemplateVolumeArgs struct {
	// The delete with instance flag of volume. Valid values: true, false. Default value: true.
	DeleteWithInstance pulumi.BoolInput `pulumi:"deleteWithInstance"`
	// The size of volume.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of volume.
	VolumeType pulumi.StringInput `pulumi:"volumeType"`
}

func (GetLaunchTemplatesLaunchTemplateVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (i GetLaunchTemplatesLaunchTemplateVolumeArgs) ToGetLaunchTemplatesLaunchTemplateVolumeOutput() GetLaunchTemplatesLaunchTemplateVolumeOutput {
	return i.ToGetLaunchTemplatesLaunchTemplateVolumeOutputWithContext(context.Background())
}

func (i GetLaunchTemplatesLaunchTemplateVolumeArgs) ToGetLaunchTemplatesLaunchTemplateVolumeOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLaunchTemplatesLaunchTemplateVolumeOutput)
}

// GetLaunchTemplatesLaunchTemplateVolumeArrayInput is an input type that accepts GetLaunchTemplatesLaunchTemplateVolumeArray and GetLaunchTemplatesLaunchTemplateVolumeArrayOutput values.
// You can construct a concrete instance of `GetLaunchTemplatesLaunchTemplateVolumeArrayInput` via:
//
//	GetLaunchTemplatesLaunchTemplateVolumeArray{ GetLaunchTemplatesLaunchTemplateVolumeArgs{...} }
type GetLaunchTemplatesLaunchTemplateVolumeArrayInput interface {
	pulumi.Input

	ToGetLaunchTemplatesLaunchTemplateVolumeArrayOutput() GetLaunchTemplatesLaunchTemplateVolumeArrayOutput
	ToGetLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(context.Context) GetLaunchTemplatesLaunchTemplateVolumeArrayOutput
}

type GetLaunchTemplatesLaunchTemplateVolumeArray []GetLaunchTemplatesLaunchTemplateVolumeInput

func (GetLaunchTemplatesLaunchTemplateVolumeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (i GetLaunchTemplatesLaunchTemplateVolumeArray) ToGetLaunchTemplatesLaunchTemplateVolumeArrayOutput() GetLaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return i.ToGetLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(context.Background())
}

func (i GetLaunchTemplatesLaunchTemplateVolumeArray) ToGetLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLaunchTemplatesLaunchTemplateVolumeArrayOutput)
}

type GetLaunchTemplatesLaunchTemplateVolumeOutput struct{ *pulumi.OutputState }

func (GetLaunchTemplatesLaunchTemplateVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (o GetLaunchTemplatesLaunchTemplateVolumeOutput) ToGetLaunchTemplatesLaunchTemplateVolumeOutput() GetLaunchTemplatesLaunchTemplateVolumeOutput {
	return o
}

func (o GetLaunchTemplatesLaunchTemplateVolumeOutput) ToGetLaunchTemplatesLaunchTemplateVolumeOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateVolumeOutput {
	return o
}

// The delete with instance flag of volume. Valid values: true, false. Default value: true.
func (o GetLaunchTemplatesLaunchTemplateVolumeOutput) DeleteWithInstance() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplateVolume) bool { return v.DeleteWithInstance }).(pulumi.BoolOutput)
}

// The size of volume.
func (o GetLaunchTemplatesLaunchTemplateVolumeOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplateVolume) int { return v.Size }).(pulumi.IntOutput)
}

// The type of volume.
func (o GetLaunchTemplatesLaunchTemplateVolumeOutput) VolumeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLaunchTemplatesLaunchTemplateVolume) string { return v.VolumeType }).(pulumi.StringOutput)
}

type GetLaunchTemplatesLaunchTemplateVolumeArrayOutput struct{ *pulumi.OutputState }

func (GetLaunchTemplatesLaunchTemplateVolumeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLaunchTemplatesLaunchTemplateVolume)(nil)).Elem()
}

func (o GetLaunchTemplatesLaunchTemplateVolumeArrayOutput) ToGetLaunchTemplatesLaunchTemplateVolumeArrayOutput() GetLaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return o
}

func (o GetLaunchTemplatesLaunchTemplateVolumeArrayOutput) ToGetLaunchTemplatesLaunchTemplateVolumeArrayOutputWithContext(ctx context.Context) GetLaunchTemplatesLaunchTemplateVolumeArrayOutput {
	return o
}

func (o GetLaunchTemplatesLaunchTemplateVolumeArrayOutput) Index(i pulumi.IntInput) GetLaunchTemplatesLaunchTemplateVolumeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLaunchTemplatesLaunchTemplateVolume {
		return vs[0].([]GetLaunchTemplatesLaunchTemplateVolume)[vs[1].(int)]
	}).(GetLaunchTemplatesLaunchTemplateVolumeOutput)
}

type GetRegionsRegion struct {
	// The id of the region.
	Id string `pulumi:"id"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
}

// GetRegionsRegionInput is an input type that accepts GetRegionsRegionArgs and GetRegionsRegionOutput values.
// You can construct a concrete instance of `GetRegionsRegionInput` via:
//
//	GetRegionsRegionArgs{...}
type GetRegionsRegionInput interface {
	pulumi.Input

	ToGetRegionsRegionOutput() GetRegionsRegionOutput
	ToGetRegionsRegionOutputWithContext(context.Context) GetRegionsRegionOutput
}

type GetRegionsRegionArgs struct {
	// The id of the region.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
}

func (GetRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return i.ToGetRegionsRegionOutputWithContext(context.Background())
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionOutput)
}

// GetRegionsRegionArrayInput is an input type that accepts GetRegionsRegionArray and GetRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetRegionsRegionArrayInput` via:
//
//	GetRegionsRegionArray{ GetRegionsRegionArgs{...} }
type GetRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput
	ToGetRegionsRegionArrayOutputWithContext(context.Context) GetRegionsRegionArrayOutput
}

type GetRegionsRegionArray []GetRegionsRegionInput

func (GetRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return i.ToGetRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionArrayOutput)
}

type GetRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return o
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return o
}

// The id of the region.
func (o GetRegionsRegionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the region.
func (o GetRegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

type GetRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionsRegion {
		return vs[0].([]GetRegionsRegion)[vs[1].(int)]
	}).(GetRegionsRegionOutput)
}

type GetZonesZone struct {
	// The id of the zone.
	Id string `pulumi:"id"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
}

// GetZonesZoneInput is an input type that accepts GetZonesZoneArgs and GetZonesZoneOutput values.
// You can construct a concrete instance of `GetZonesZoneInput` via:
//
//	GetZonesZoneArgs{...}
type GetZonesZoneInput interface {
	pulumi.Input

	ToGetZonesZoneOutput() GetZonesZoneOutput
	ToGetZonesZoneOutputWithContext(context.Context) GetZonesZoneOutput
}

type GetZonesZoneArgs struct {
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return i.ToGetZonesZoneOutputWithContext(context.Background())
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneOutput)
}

// GetZonesZoneArrayInput is an input type that accepts GetZonesZoneArray and GetZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetZonesZoneArrayInput` via:
//
//	GetZonesZoneArray{ GetZonesZoneArgs{...} }
type GetZonesZoneArrayInput interface {
	pulumi.Input

	ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput
	ToGetZonesZoneArrayOutputWithContext(context.Context) GetZonesZoneArrayOutput
}

type GetZonesZoneArray []GetZonesZoneInput

func (GetZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return i.ToGetZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneArrayOutput)
}

type GetZonesZoneOutput struct{ *pulumi.OutputState }

func (GetZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return o
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return o
}

// The id of the zone.
func (o GetZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the zone.
func (o GetZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) Index(i pulumi.IntInput) GetZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesZone {
		return vs[0].([]GetZonesZone)[vs[1].(int)]
	}).(GetZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneInput)(nil)).Elem(), AvailableResourcesAvailableZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneArrayInput)(nil)).Elem(), AvailableResourcesAvailableZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceInput)(nil)).Elem(), AvailableResourcesAvailableZoneAvailableResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceArrayInput)(nil)).Elem(), AvailableResourcesAvailableZoneAvailableResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput)(nil)).Elem(), AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput)(nil)).Elem(), AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandParameterDefinitionInput)(nil)).Elem(), CommandParameterDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandParameterDefinitionArrayInput)(nil)).Elem(), CommandParameterDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandTagInput)(nil)).Elem(), CommandTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandTagArrayInput)(nil)).Elem(), CommandTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsCommandInput)(nil)).Elem(), CommandsCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsCommandArrayInput)(nil)).Elem(), CommandsCommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsCommandParameterDefinitionInput)(nil)).Elem(), CommandsCommandParameterDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsCommandParameterDefinitionArrayInput)(nil)).Elem(), CommandsCommandParameterDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsCommandTagInput)(nil)).Elem(), CommandsCommandTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsCommandTagArrayInput)(nil)).Elem(), CommandsCommandTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsTagInput)(nil)).Elem(), CommandsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CommandsTagArrayInput)(nil)).Elem(), CommandsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSetsDeploymentSetInput)(nil)).Elem(), DeploymentSetsDeploymentSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSetsDeploymentSetArrayInput)(nil)).Elem(), DeploymentSetsDeploymentSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HpcClustersHpcClusterInput)(nil)).Elem(), HpcClustersHpcClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*HpcClustersHpcClusterArrayInput)(nil)).Elem(), HpcClustersHpcClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageImportTagInput)(nil)).Elem(), ImageImportTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageImportTagArrayInput)(nil)).Elem(), ImageImportTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageSharePermissionsAccountInput)(nil)).Elem(), ImageSharePermissionsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageSharePermissionsAccountArrayInput)(nil)).Elem(), ImageSharePermissionsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTagInput)(nil)).Elem(), ImageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImageTagArrayInput)(nil)).Elem(), ImageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageInput)(nil)).Elem(), ImagesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageArrayInput)(nil)).Elem(), ImagesImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageTagInput)(nil)).Elem(), ImagesImageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesImageTagArrayInput)(nil)).Elem(), ImagesImageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesTagInput)(nil)).Elem(), ImagesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImagesTagArrayInput)(nil)).Elem(), ImagesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCpuOptionsInput)(nil)).Elem(), InstanceCpuOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCpuOptionsPtrInput)(nil)).Elem(), InstanceCpuOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataVolumeInput)(nil)).Elem(), InstanceDataVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceDataVolumeArrayInput)(nil)).Elem(), InstanceDataVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEipAddressInput)(nil)).Elem(), InstanceEipAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEipAddressPtrInput)(nil)).Elem(), InstanceEipAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGpuDeviceInput)(nil)).Elem(), InstanceGpuDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceGpuDeviceArrayInput)(nil)).Elem(), InstanceGpuDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecondaryNetworkInterfaceInput)(nil)).Elem(), InstanceSecondaryNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSecondaryNetworkInterfaceArrayInput)(nil)).Elem(), InstanceSecondaryNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeInput)(nil)).Elem(), InstanceTypesInstanceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusGpuDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusGpuDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceMemoryInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeGpusGpuDeviceMemoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeLocalVolumeInput)(nil)).Elem(), InstanceTypesInstanceTypeLocalVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeLocalVolumeArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeLocalVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeMemoryInput)(nil)).Elem(), InstanceTypesInstanceTypeMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeMemoryArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeMemoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeNetworkInput)(nil)).Elem(), InstanceTypesInstanceTypeNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeNetworkArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeProcessorInput)(nil)).Elem(), InstanceTypesInstanceTypeProcessorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeProcessorArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeProcessorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeRdmaInput)(nil)).Elem(), InstanceTypesInstanceTypeRdmaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeRdmaArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeRdmaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeVolumeInput)(nil)).Elem(), InstanceTypesInstanceTypeVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTypesInstanceTypeVolumeArrayInput)(nil)).Elem(), InstanceTypesInstanceTypeVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceInput)(nil)).Elem(), InstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceArrayInput)(nil)).Elem(), InstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceEipAddressInput)(nil)).Elem(), InstancesInstanceEipAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceEipAddressArrayInput)(nil)).Elem(), InstancesInstanceEipAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceGpuDeviceInput)(nil)).Elem(), InstancesInstanceGpuDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceGpuDeviceArrayInput)(nil)).Elem(), InstancesInstanceGpuDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNetworkInterfaceInput)(nil)).Elem(), InstancesInstanceNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNetworkInterfaceArrayInput)(nil)).Elem(), InstancesInstanceNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagInput)(nil)).Elem(), InstancesInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagArrayInput)(nil)).Elem(), InstancesInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceVolumeInput)(nil)).Elem(), InstancesInstanceVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceVolumeArrayInput)(nil)).Elem(), InstancesInstanceVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationParameterInput)(nil)).Elem(), InvocationParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationParameterArrayInput)(nil)).Elem(), InvocationParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationResultsInvocationResultInput)(nil)).Elem(), InvocationResultsInvocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationResultsInvocationResultArrayInput)(nil)).Elem(), InvocationResultsInvocationResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationTagInput)(nil)).Elem(), InvocationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationTagArrayInput)(nil)).Elem(), InvocationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationsInvocationInput)(nil)).Elem(), InvocationsInvocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationsInvocationArrayInput)(nil)).Elem(), InvocationsInvocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationsInvocationTagInput)(nil)).Elem(), InvocationsInvocationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationsInvocationTagArrayInput)(nil)).Elem(), InvocationsInvocationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationsTagInput)(nil)).Elem(), InvocationsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationsTagArrayInput)(nil)).Elem(), InvocationsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairsKeyPairInput)(nil)).Elem(), KeyPairsKeyPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*KeyPairsKeyPairArrayInput)(nil)).Elem(), KeyPairsKeyPairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplateNetworkInterfaceInput)(nil)).Elem(), LaunchTemplateNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplateNetworkInterfaceArrayInput)(nil)).Elem(), LaunchTemplateNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplateVolumeInput)(nil)).Elem(), LaunchTemplateVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplateVolumeArrayInput)(nil)).Elem(), LaunchTemplateVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateArrayInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateNetworkInterfaceInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateVolumeInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LaunchTemplatesLaunchTemplateVolumeArrayInput)(nil)).Elem(), LaunchTemplatesLaunchTemplateVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionInput)(nil)).Elem(), RegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionArrayInput)(nil)).Elem(), RegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAvailableResourcesAvailableZoneInput)(nil)).Elem(), GetAvailableResourcesAvailableZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAvailableResourcesAvailableZoneArrayInput)(nil)).Elem(), GetAvailableResourcesAvailableZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAvailableResourcesAvailableZoneAvailableResourceInput)(nil)).Elem(), GetAvailableResourcesAvailableZoneAvailableResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAvailableResourcesAvailableZoneAvailableResourceArrayInput)(nil)).Elem(), GetAvailableResourcesAvailableZoneAvailableResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceInput)(nil)).Elem(), GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayInput)(nil)).Elem(), GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandsCommandInput)(nil)).Elem(), GetCommandsCommandArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandsCommandArrayInput)(nil)).Elem(), GetCommandsCommandArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandsCommandParameterDefinitionInput)(nil)).Elem(), GetCommandsCommandParameterDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandsCommandParameterDefinitionArrayInput)(nil)).Elem(), GetCommandsCommandParameterDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandsCommandTagInput)(nil)).Elem(), GetCommandsCommandTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandsCommandTagArrayInput)(nil)).Elem(), GetCommandsCommandTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandsTagInput)(nil)).Elem(), GetCommandsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCommandsTagArrayInput)(nil)).Elem(), GetCommandsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeploymentSetsDeploymentSetInput)(nil)).Elem(), GetDeploymentSetsDeploymentSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDeploymentSetsDeploymentSetArrayInput)(nil)).Elem(), GetDeploymentSetsDeploymentSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHpcClustersHpcClusterInput)(nil)).Elem(), GetHpcClustersHpcClusterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetHpcClustersHpcClusterArrayInput)(nil)).Elem(), GetHpcClustersHpcClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageSharePermissionsAccountInput)(nil)).Elem(), GetImageSharePermissionsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImageSharePermissionsAccountArrayInput)(nil)).Elem(), GetImageSharePermissionsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesImageInput)(nil)).Elem(), GetImagesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesImageArrayInput)(nil)).Elem(), GetImagesImageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesImageTagInput)(nil)).Elem(), GetImagesImageTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesImageTagArrayInput)(nil)).Elem(), GetImagesImageTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesTagInput)(nil)).Elem(), GetImagesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetImagesTagArrayInput)(nil)).Elem(), GetImagesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeInput)(nil)).Elem(), GetInstanceTypesInstanceTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusInput)(nil)).Elem(), GetInstanceTypesInstanceTypeGpusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeGpusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusGpuDeviceInput)(nil)).Elem(), GetInstanceTypesInstanceTypeGpusGpuDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusGpuDeviceArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeGpusGpuDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryInput)(nil)).Elem(), GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeLocalVolumeInput)(nil)).Elem(), GetInstanceTypesInstanceTypeLocalVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeLocalVolumeArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeLocalVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeMemoryInput)(nil)).Elem(), GetInstanceTypesInstanceTypeMemoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeMemoryArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeMemoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeNetworkInput)(nil)).Elem(), GetInstanceTypesInstanceTypeNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeNetworkArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeProcessorInput)(nil)).Elem(), GetInstanceTypesInstanceTypeProcessorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeProcessorArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeProcessorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeRdmaInput)(nil)).Elem(), GetInstanceTypesInstanceTypeRdmaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeRdmaArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeRdmaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeVolumeInput)(nil)).Elem(), GetInstanceTypesInstanceTypeVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceTypesInstanceTypeVolumeArrayInput)(nil)).Elem(), GetInstanceTypesInstanceTypeVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceInput)(nil)).Elem(), GetInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceArrayInput)(nil)).Elem(), GetInstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceEipAddressInput)(nil)).Elem(), GetInstancesInstanceEipAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceEipAddressArrayInput)(nil)).Elem(), GetInstancesInstanceEipAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceGpuDeviceInput)(nil)).Elem(), GetInstancesInstanceGpuDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceGpuDeviceArrayInput)(nil)).Elem(), GetInstancesInstanceGpuDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceNetworkInterfaceInput)(nil)).Elem(), GetInstancesInstanceNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceNetworkInterfaceArrayInput)(nil)).Elem(), GetInstancesInstanceNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceTagInput)(nil)).Elem(), GetInstancesInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceTagArrayInput)(nil)).Elem(), GetInstancesInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceVolumeInput)(nil)).Elem(), GetInstancesInstanceVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceVolumeArrayInput)(nil)).Elem(), GetInstancesInstanceVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagInput)(nil)).Elem(), GetInstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagArrayInput)(nil)).Elem(), GetInstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationResultsInvocationResultInput)(nil)).Elem(), GetInvocationResultsInvocationResultArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationResultsInvocationResultArrayInput)(nil)).Elem(), GetInvocationResultsInvocationResultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationsInvocationInput)(nil)).Elem(), GetInvocationsInvocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationsInvocationArrayInput)(nil)).Elem(), GetInvocationsInvocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationsInvocationTagInput)(nil)).Elem(), GetInvocationsInvocationTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationsInvocationTagArrayInput)(nil)).Elem(), GetInvocationsInvocationTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationsTagInput)(nil)).Elem(), GetInvocationsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInvocationsTagArrayInput)(nil)).Elem(), GetInvocationsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyPairsKeyPairInput)(nil)).Elem(), GetKeyPairsKeyPairArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetKeyPairsKeyPairArrayInput)(nil)).Elem(), GetKeyPairsKeyPairArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateInput)(nil)).Elem(), GetLaunchTemplatesLaunchTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateArrayInput)(nil)).Elem(), GetLaunchTemplatesLaunchTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateNetworkInterfaceInput)(nil)).Elem(), GetLaunchTemplatesLaunchTemplateNetworkInterfaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayInput)(nil)).Elem(), GetLaunchTemplatesLaunchTemplateNetworkInterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateVolumeInput)(nil)).Elem(), GetLaunchTemplatesLaunchTemplateVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLaunchTemplatesLaunchTemplateVolumeArrayInput)(nil)).Elem(), GetLaunchTemplatesLaunchTemplateVolumeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionInput)(nil)).Elem(), GetRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionArrayInput)(nil)).Elem(), GetRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneInput)(nil)).Elem(), GetZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneArrayInput)(nil)).Elem(), GetZonesZoneArray{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneArrayOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneAvailableResourceOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneAvailableResourceArrayOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput{})
	pulumi.RegisterOutputType(AvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput{})
	pulumi.RegisterOutputType(CommandParameterDefinitionOutput{})
	pulumi.RegisterOutputType(CommandParameterDefinitionArrayOutput{})
	pulumi.RegisterOutputType(CommandTagOutput{})
	pulumi.RegisterOutputType(CommandTagArrayOutput{})
	pulumi.RegisterOutputType(CommandsCommandOutput{})
	pulumi.RegisterOutputType(CommandsCommandArrayOutput{})
	pulumi.RegisterOutputType(CommandsCommandParameterDefinitionOutput{})
	pulumi.RegisterOutputType(CommandsCommandParameterDefinitionArrayOutput{})
	pulumi.RegisterOutputType(CommandsCommandTagOutput{})
	pulumi.RegisterOutputType(CommandsCommandTagArrayOutput{})
	pulumi.RegisterOutputType(CommandsTagOutput{})
	pulumi.RegisterOutputType(CommandsTagArrayOutput{})
	pulumi.RegisterOutputType(DeploymentSetsDeploymentSetOutput{})
	pulumi.RegisterOutputType(DeploymentSetsDeploymentSetArrayOutput{})
	pulumi.RegisterOutputType(HpcClustersHpcClusterOutput{})
	pulumi.RegisterOutputType(HpcClustersHpcClusterArrayOutput{})
	pulumi.RegisterOutputType(ImageImportTagOutput{})
	pulumi.RegisterOutputType(ImageImportTagArrayOutput{})
	pulumi.RegisterOutputType(ImageSharePermissionsAccountOutput{})
	pulumi.RegisterOutputType(ImageSharePermissionsAccountArrayOutput{})
	pulumi.RegisterOutputType(ImageTagOutput{})
	pulumi.RegisterOutputType(ImageTagArrayOutput{})
	pulumi.RegisterOutputType(ImagesImageOutput{})
	pulumi.RegisterOutputType(ImagesImageArrayOutput{})
	pulumi.RegisterOutputType(ImagesImageTagOutput{})
	pulumi.RegisterOutputType(ImagesImageTagArrayOutput{})
	pulumi.RegisterOutputType(ImagesTagOutput{})
	pulumi.RegisterOutputType(ImagesTagArrayOutput{})
	pulumi.RegisterOutputType(InstanceCpuOptionsOutput{})
	pulumi.RegisterOutputType(InstanceCpuOptionsPtrOutput{})
	pulumi.RegisterOutputType(InstanceDataVolumeOutput{})
	pulumi.RegisterOutputType(InstanceDataVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstanceEipAddressOutput{})
	pulumi.RegisterOutputType(InstanceEipAddressPtrOutput{})
	pulumi.RegisterOutputType(InstanceGpuDeviceOutput{})
	pulumi.RegisterOutputType(InstanceGpuDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstanceSecondaryNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(InstanceSecondaryNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusGpuDeviceOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusGpuDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeLocalVolumeOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeLocalVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeMemoryOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeMemoryArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeNetworkOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeNetworkArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeProcessorOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeProcessorArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeRdmaOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeRdmaArrayOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeVolumeOutput{})
	pulumi.RegisterOutputType(InstanceTypesInstanceTypeVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceEipAddressOutput{})
	pulumi.RegisterOutputType(InstancesInstanceEipAddressArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceGpuDeviceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceGpuDeviceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceVolumeOutput{})
	pulumi.RegisterOutputType(InstancesInstanceVolumeArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(InvocationParameterOutput{})
	pulumi.RegisterOutputType(InvocationParameterArrayOutput{})
	pulumi.RegisterOutputType(InvocationResultsInvocationResultOutput{})
	pulumi.RegisterOutputType(InvocationResultsInvocationResultArrayOutput{})
	pulumi.RegisterOutputType(InvocationTagOutput{})
	pulumi.RegisterOutputType(InvocationTagArrayOutput{})
	pulumi.RegisterOutputType(InvocationsInvocationOutput{})
	pulumi.RegisterOutputType(InvocationsInvocationArrayOutput{})
	pulumi.RegisterOutputType(InvocationsInvocationTagOutput{})
	pulumi.RegisterOutputType(InvocationsInvocationTagArrayOutput{})
	pulumi.RegisterOutputType(InvocationsTagOutput{})
	pulumi.RegisterOutputType(InvocationsTagArrayOutput{})
	pulumi.RegisterOutputType(KeyPairsKeyPairOutput{})
	pulumi.RegisterOutputType(KeyPairsKeyPairArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplateNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(LaunchTemplateNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplateVolumeOutput{})
	pulumi.RegisterOutputType(LaunchTemplateVolumeArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateVolumeOutput{})
	pulumi.RegisterOutputType(LaunchTemplatesLaunchTemplateVolumeArrayOutput{})
	pulumi.RegisterOutputType(RegionsRegionOutput{})
	pulumi.RegisterOutputType(RegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
	pulumi.RegisterOutputType(GetAvailableResourcesAvailableZoneOutput{})
	pulumi.RegisterOutputType(GetAvailableResourcesAvailableZoneArrayOutput{})
	pulumi.RegisterOutputType(GetAvailableResourcesAvailableZoneAvailableResourceOutput{})
	pulumi.RegisterOutputType(GetAvailableResourcesAvailableZoneAvailableResourceArrayOutput{})
	pulumi.RegisterOutputType(GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceOutput{})
	pulumi.RegisterOutputType(GetAvailableResourcesAvailableZoneAvailableResourceSupportedResourceArrayOutput{})
	pulumi.RegisterOutputType(GetCommandsCommandOutput{})
	pulumi.RegisterOutputType(GetCommandsCommandArrayOutput{})
	pulumi.RegisterOutputType(GetCommandsCommandParameterDefinitionOutput{})
	pulumi.RegisterOutputType(GetCommandsCommandParameterDefinitionArrayOutput{})
	pulumi.RegisterOutputType(GetCommandsCommandTagOutput{})
	pulumi.RegisterOutputType(GetCommandsCommandTagArrayOutput{})
	pulumi.RegisterOutputType(GetCommandsTagOutput{})
	pulumi.RegisterOutputType(GetCommandsTagArrayOutput{})
	pulumi.RegisterOutputType(GetDeploymentSetsDeploymentSetOutput{})
	pulumi.RegisterOutputType(GetDeploymentSetsDeploymentSetArrayOutput{})
	pulumi.RegisterOutputType(GetHpcClustersHpcClusterOutput{})
	pulumi.RegisterOutputType(GetHpcClustersHpcClusterArrayOutput{})
	pulumi.RegisterOutputType(GetImageSharePermissionsAccountOutput{})
	pulumi.RegisterOutputType(GetImageSharePermissionsAccountArrayOutput{})
	pulumi.RegisterOutputType(GetImagesImageOutput{})
	pulumi.RegisterOutputType(GetImagesImageArrayOutput{})
	pulumi.RegisterOutputType(GetImagesImageTagOutput{})
	pulumi.RegisterOutputType(GetImagesImageTagArrayOutput{})
	pulumi.RegisterOutputType(GetImagesTagOutput{})
	pulumi.RegisterOutputType(GetImagesTagArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeGpusOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeGpusArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeGpusGpuDeviceOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeGpusGpuDeviceArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeGpusGpuDeviceMemoryArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeLocalVolumeOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeLocalVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeMemoryOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeMemoryArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeNetworkOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeProcessorOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeProcessorArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeRdmaOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeRdmaArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeVolumeOutput{})
	pulumi.RegisterOutputType(GetInstanceTypesInstanceTypeVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceEipAddressOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceEipAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceGpuDeviceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceGpuDeviceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceTagOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceVolumeOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesTagOutput{})
	pulumi.RegisterOutputType(GetInstancesTagArrayOutput{})
	pulumi.RegisterOutputType(GetInvocationResultsInvocationResultOutput{})
	pulumi.RegisterOutputType(GetInvocationResultsInvocationResultArrayOutput{})
	pulumi.RegisterOutputType(GetInvocationsInvocationOutput{})
	pulumi.RegisterOutputType(GetInvocationsInvocationArrayOutput{})
	pulumi.RegisterOutputType(GetInvocationsInvocationTagOutput{})
	pulumi.RegisterOutputType(GetInvocationsInvocationTagArrayOutput{})
	pulumi.RegisterOutputType(GetInvocationsTagOutput{})
	pulumi.RegisterOutputType(GetInvocationsTagArrayOutput{})
	pulumi.RegisterOutputType(GetKeyPairsKeyPairOutput{})
	pulumi.RegisterOutputType(GetKeyPairsKeyPairArrayOutput{})
	pulumi.RegisterOutputType(GetLaunchTemplatesLaunchTemplateOutput{})
	pulumi.RegisterOutputType(GetLaunchTemplatesLaunchTemplateArrayOutput{})
	pulumi.RegisterOutputType(GetLaunchTemplatesLaunchTemplateNetworkInterfaceOutput{})
	pulumi.RegisterOutputType(GetLaunchTemplatesLaunchTemplateNetworkInterfaceArrayOutput{})
	pulumi.RegisterOutputType(GetLaunchTemplatesLaunchTemplateVolumeOutput{})
	pulumi.RegisterOutputType(GetLaunchTemplatesLaunchTemplateVolumeArrayOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetZonesZoneOutput{})
	pulumi.RegisterOutputType(GetZonesZoneArrayOutput{})
}
