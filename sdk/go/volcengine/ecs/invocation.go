// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage ecs invocation
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewInvocation(ctx, "foo", &ecs.InvocationArgs{
//				CommandId: pulumi.String("cmd-ychkepkhtim0tr3b****"),
//				Frequency: pulumi.String("5m"),
//				InstanceIds: pulumi.StringArray{
//					pulumi.String("i-ychmz92487l8j00o****"),
//				},
//				InvocationDescription: pulumi.String("tf"),
//				InvocationName:        pulumi.String("tf-test"),
//				LaunchTime:            pulumi.String("2023-06-20T09:48:00Z"),
//				RecurrenceEndTime:     pulumi.String("2023-06-20T09:59:00Z"),
//				RepeatMode:            pulumi.String("Rate"),
//				Timeout:               pulumi.Int(90),
//				Username:              pulumi.String("root"),
//				WorkingDir:            pulumi.String("/home"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EcsInvocation can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:ecs/invocation:Invocation default ivk-ychnxnm45dl8j0mm****
// ```
type Invocation struct {
	pulumi.CustomResourceState

	// The command id of the ecs invocation.
	CommandId pulumi.StringOutput `pulumi:"commandId"`
	// The end time of the ecs invocation.
	EndTime pulumi.StringOutput `pulumi:"endTime"`
	// The frequency of the ecs invocation. This field is valid and required when the value of the repeatMode field is `Rate`.
	Frequency pulumi.StringPtrOutput `pulumi:"frequency"`
	// The list of ECS instance IDs.
	InstanceIds pulumi.StringArrayOutput `pulumi:"instanceIds"`
	// The description of the ecs invocation.
	InvocationDescription pulumi.StringPtrOutput `pulumi:"invocationDescription"`
	// The name of the ecs invocation.
	InvocationName pulumi.StringOutput `pulumi:"invocationName"`
	// The status of the ecs invocation.
	InvocationStatus pulumi.StringOutput `pulumi:"invocationStatus"`
	// The launch time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate` or `Fixed`.
	LaunchTime pulumi.StringPtrOutput `pulumi:"launchTime"`
	// The recurrence end time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate`.
	RecurrenceEndTime pulumi.StringPtrOutput `pulumi:"recurrenceEndTime"`
	// The repeat mode of the ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode pulumi.StringPtrOutput `pulumi:"repeatMode"`
	// The start time of the ecs invocation.
	StartTime pulumi.StringOutput `pulumi:"startTime"`
	// The timeout of the ecs command. Valid value range: 10-600. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Timeout pulumi.IntOutput `pulumi:"timeout"`
	// The username of the ecs command. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Username pulumi.StringOutput `pulumi:"username"`
	// The working directory of the ecs invocation. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	WorkingDir pulumi.StringOutput `pulumi:"workingDir"`
}

// NewInvocation registers a new resource with the given unique name, arguments, and options.
func NewInvocation(ctx *pulumi.Context,
	name string, args *InvocationArgs, opts ...pulumi.ResourceOption) (*Invocation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CommandId == nil {
		return nil, errors.New("invalid value for required argument 'CommandId'")
	}
	if args.InstanceIds == nil {
		return nil, errors.New("invalid value for required argument 'InstanceIds'")
	}
	if args.InvocationName == nil {
		return nil, errors.New("invalid value for required argument 'InvocationName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Invocation
	err := ctx.RegisterResource("volcengine:ecs/invocation:Invocation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInvocation gets an existing Invocation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInvocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InvocationState, opts ...pulumi.ResourceOption) (*Invocation, error) {
	var resource Invocation
	err := ctx.ReadResource("volcengine:ecs/invocation:Invocation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Invocation resources.
type invocationState struct {
	// The command id of the ecs invocation.
	CommandId *string `pulumi:"commandId"`
	// The end time of the ecs invocation.
	EndTime *string `pulumi:"endTime"`
	// The frequency of the ecs invocation. This field is valid and required when the value of the repeatMode field is `Rate`.
	Frequency *string `pulumi:"frequency"`
	// The list of ECS instance IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// The description of the ecs invocation.
	InvocationDescription *string `pulumi:"invocationDescription"`
	// The name of the ecs invocation.
	InvocationName *string `pulumi:"invocationName"`
	// The status of the ecs invocation.
	InvocationStatus *string `pulumi:"invocationStatus"`
	// The launch time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate` or `Fixed`.
	LaunchTime *string `pulumi:"launchTime"`
	// The recurrence end time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate`.
	RecurrenceEndTime *string `pulumi:"recurrenceEndTime"`
	// The repeat mode of the ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode *string `pulumi:"repeatMode"`
	// The start time of the ecs invocation.
	StartTime *string `pulumi:"startTime"`
	// The timeout of the ecs command. Valid value range: 10-600. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Timeout *int `pulumi:"timeout"`
	// The username of the ecs command. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Username *string `pulumi:"username"`
	// The working directory of the ecs invocation. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	WorkingDir *string `pulumi:"workingDir"`
}

type InvocationState struct {
	// The command id of the ecs invocation.
	CommandId pulumi.StringPtrInput
	// The end time of the ecs invocation.
	EndTime pulumi.StringPtrInput
	// The frequency of the ecs invocation. This field is valid and required when the value of the repeatMode field is `Rate`.
	Frequency pulumi.StringPtrInput
	// The list of ECS instance IDs.
	InstanceIds pulumi.StringArrayInput
	// The description of the ecs invocation.
	InvocationDescription pulumi.StringPtrInput
	// The name of the ecs invocation.
	InvocationName pulumi.StringPtrInput
	// The status of the ecs invocation.
	InvocationStatus pulumi.StringPtrInput
	// The launch time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate` or `Fixed`.
	LaunchTime pulumi.StringPtrInput
	// The recurrence end time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate`.
	RecurrenceEndTime pulumi.StringPtrInput
	// The repeat mode of the ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode pulumi.StringPtrInput
	// The start time of the ecs invocation.
	StartTime pulumi.StringPtrInput
	// The timeout of the ecs command. Valid value range: 10-600. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Timeout pulumi.IntPtrInput
	// The username of the ecs command. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Username pulumi.StringPtrInput
	// The working directory of the ecs invocation. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	WorkingDir pulumi.StringPtrInput
}

func (InvocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationState)(nil)).Elem()
}

type invocationArgs struct {
	// The command id of the ecs invocation.
	CommandId string `pulumi:"commandId"`
	// The frequency of the ecs invocation. This field is valid and required when the value of the repeatMode field is `Rate`.
	Frequency *string `pulumi:"frequency"`
	// The list of ECS instance IDs.
	InstanceIds []string `pulumi:"instanceIds"`
	// The description of the ecs invocation.
	InvocationDescription *string `pulumi:"invocationDescription"`
	// The name of the ecs invocation.
	InvocationName string `pulumi:"invocationName"`
	// The launch time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate` or `Fixed`.
	LaunchTime *string `pulumi:"launchTime"`
	// The recurrence end time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate`.
	RecurrenceEndTime *string `pulumi:"recurrenceEndTime"`
	// The repeat mode of the ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode *string `pulumi:"repeatMode"`
	// The timeout of the ecs command. Valid value range: 10-600. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Timeout *int `pulumi:"timeout"`
	// The username of the ecs command. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Username string `pulumi:"username"`
	// The working directory of the ecs invocation. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	WorkingDir *string `pulumi:"workingDir"`
}

// The set of arguments for constructing a Invocation resource.
type InvocationArgs struct {
	// The command id of the ecs invocation.
	CommandId pulumi.StringInput
	// The frequency of the ecs invocation. This field is valid and required when the value of the repeatMode field is `Rate`.
	Frequency pulumi.StringPtrInput
	// The list of ECS instance IDs.
	InstanceIds pulumi.StringArrayInput
	// The description of the ecs invocation.
	InvocationDescription pulumi.StringPtrInput
	// The name of the ecs invocation.
	InvocationName pulumi.StringInput
	// The launch time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate` or `Fixed`.
	LaunchTime pulumi.StringPtrInput
	// The recurrence end time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate`.
	RecurrenceEndTime pulumi.StringPtrInput
	// The repeat mode of the ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
	RepeatMode pulumi.StringPtrInput
	// The timeout of the ecs command. Valid value range: 10-600. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Timeout pulumi.IntPtrInput
	// The username of the ecs command. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	Username pulumi.StringInput
	// The working directory of the ecs invocation. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
	WorkingDir pulumi.StringPtrInput
}

func (InvocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*invocationArgs)(nil)).Elem()
}

type InvocationInput interface {
	pulumi.Input

	ToInvocationOutput() InvocationOutput
	ToInvocationOutputWithContext(ctx context.Context) InvocationOutput
}

func (*Invocation) ElementType() reflect.Type {
	return reflect.TypeOf((**Invocation)(nil)).Elem()
}

func (i *Invocation) ToInvocationOutput() InvocationOutput {
	return i.ToInvocationOutputWithContext(context.Background())
}

func (i *Invocation) ToInvocationOutputWithContext(ctx context.Context) InvocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationOutput)
}

// InvocationArrayInput is an input type that accepts InvocationArray and InvocationArrayOutput values.
// You can construct a concrete instance of `InvocationArrayInput` via:
//
//	InvocationArray{ InvocationArgs{...} }
type InvocationArrayInput interface {
	pulumi.Input

	ToInvocationArrayOutput() InvocationArrayOutput
	ToInvocationArrayOutputWithContext(context.Context) InvocationArrayOutput
}

type InvocationArray []InvocationInput

func (InvocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invocation)(nil)).Elem()
}

func (i InvocationArray) ToInvocationArrayOutput() InvocationArrayOutput {
	return i.ToInvocationArrayOutputWithContext(context.Background())
}

func (i InvocationArray) ToInvocationArrayOutputWithContext(ctx context.Context) InvocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationArrayOutput)
}

// InvocationMapInput is an input type that accepts InvocationMap and InvocationMapOutput values.
// You can construct a concrete instance of `InvocationMapInput` via:
//
//	InvocationMap{ "key": InvocationArgs{...} }
type InvocationMapInput interface {
	pulumi.Input

	ToInvocationMapOutput() InvocationMapOutput
	ToInvocationMapOutputWithContext(context.Context) InvocationMapOutput
}

type InvocationMap map[string]InvocationInput

func (InvocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invocation)(nil)).Elem()
}

func (i InvocationMap) ToInvocationMapOutput() InvocationMapOutput {
	return i.ToInvocationMapOutputWithContext(context.Background())
}

func (i InvocationMap) ToInvocationMapOutputWithContext(ctx context.Context) InvocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InvocationMapOutput)
}

type InvocationOutput struct{ *pulumi.OutputState }

func (InvocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Invocation)(nil)).Elem()
}

func (o InvocationOutput) ToInvocationOutput() InvocationOutput {
	return o
}

func (o InvocationOutput) ToInvocationOutputWithContext(ctx context.Context) InvocationOutput {
	return o
}

// The command id of the ecs invocation.
func (o InvocationOutput) CommandId() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.CommandId }).(pulumi.StringOutput)
}

// The end time of the ecs invocation.
func (o InvocationOutput) EndTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.EndTime }).(pulumi.StringOutput)
}

// The frequency of the ecs invocation. This field is valid and required when the value of the repeatMode field is `Rate`.
func (o InvocationOutput) Frequency() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringPtrOutput { return v.Frequency }).(pulumi.StringPtrOutput)
}

// The list of ECS instance IDs.
func (o InvocationOutput) InstanceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringArrayOutput { return v.InstanceIds }).(pulumi.StringArrayOutput)
}

// The description of the ecs invocation.
func (o InvocationOutput) InvocationDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringPtrOutput { return v.InvocationDescription }).(pulumi.StringPtrOutput)
}

// The name of the ecs invocation.
func (o InvocationOutput) InvocationName() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.InvocationName }).(pulumi.StringOutput)
}

// The status of the ecs invocation.
func (o InvocationOutput) InvocationStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.InvocationStatus }).(pulumi.StringOutput)
}

// The launch time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate` or `Fixed`.
func (o InvocationOutput) LaunchTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringPtrOutput { return v.LaunchTime }).(pulumi.StringPtrOutput)
}

// The recurrence end time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate`.
func (o InvocationOutput) RecurrenceEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringPtrOutput { return v.RecurrenceEndTime }).(pulumi.StringPtrOutput)
}

// The repeat mode of the ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
func (o InvocationOutput) RepeatMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringPtrOutput { return v.RepeatMode }).(pulumi.StringPtrOutput)
}

// The start time of the ecs invocation.
func (o InvocationOutput) StartTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.StartTime }).(pulumi.StringOutput)
}

// The timeout of the ecs command. Valid value range: 10-600. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
func (o InvocationOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Invocation) pulumi.IntOutput { return v.Timeout }).(pulumi.IntOutput)
}

// The username of the ecs command. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
func (o InvocationOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// The working directory of the ecs invocation. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
func (o InvocationOutput) WorkingDir() pulumi.StringOutput {
	return o.ApplyT(func(v *Invocation) pulumi.StringOutput { return v.WorkingDir }).(pulumi.StringOutput)
}

type InvocationArrayOutput struct{ *pulumi.OutputState }

func (InvocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Invocation)(nil)).Elem()
}

func (o InvocationArrayOutput) ToInvocationArrayOutput() InvocationArrayOutput {
	return o
}

func (o InvocationArrayOutput) ToInvocationArrayOutputWithContext(ctx context.Context) InvocationArrayOutput {
	return o
}

func (o InvocationArrayOutput) Index(i pulumi.IntInput) InvocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Invocation {
		return vs[0].([]*Invocation)[vs[1].(int)]
	}).(InvocationOutput)
}

type InvocationMapOutput struct{ *pulumi.OutputState }

func (InvocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Invocation)(nil)).Elem()
}

func (o InvocationMapOutput) ToInvocationMapOutput() InvocationMapOutput {
	return o
}

func (o InvocationMapOutput) ToInvocationMapOutputWithContext(ctx context.Context) InvocationMapOutput {
	return o
}

func (o InvocationMapOutput) MapIndex(k pulumi.StringInput) InvocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Invocation {
		return vs[0].(map[string]*Invocation)[vs[1].(string)]
	}).(InvocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationInput)(nil)).Elem(), &Invocation{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationArrayInput)(nil)).Elem(), InvocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InvocationMapInput)(nil)).Elem(), InvocationMap{})
	pulumi.RegisterOutputType(InvocationOutput{})
	pulumi.RegisterOutputType(InvocationArrayOutput{})
	pulumi.RegisterOutputType(InvocationMapOutput{})
}
