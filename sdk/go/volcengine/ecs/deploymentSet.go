// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage ecs deployment set
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.NewDeploymentSet(ctx, "foo", &ecs.DeploymentSetArgs{
//				DeploymentSetName: pulumi.String("acc-test-ecs-ds"),
//				Description:       pulumi.String("acc-test"),
//				Granularity:       pulumi.String("switch"),
//				Strategy:          pulumi.String("Availability"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ECS deployment set can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:ecs/deploymentSet:DeploymentSet default i-mizl7m1kqccg5smt1bdpijuj
//
// ```
type DeploymentSet struct {
	pulumi.CustomResourceState

	// The ID of ECS DeploymentSet.
	DeploymentSetId pulumi.StringOutput `pulumi:"deploymentSetId"`
	// The name of ECS DeploymentSet.
	DeploymentSetName pulumi.StringOutput `pulumi:"deploymentSetName"`
	// The description of ECS DeploymentSet.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack,Default is host.
	Granularity pulumi.StringPtrOutput `pulumi:"granularity"`
	// The strategy of ECS DeploymentSet.Valid values: Availability.Default is Availability.
	Strategy pulumi.StringPtrOutput `pulumi:"strategy"`
}

// NewDeploymentSet registers a new resource with the given unique name, arguments, and options.
func NewDeploymentSet(ctx *pulumi.Context,
	name string, args *DeploymentSetArgs, opts ...pulumi.ResourceOption) (*DeploymentSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeploymentSetName == nil {
		return nil, errors.New("invalid value for required argument 'DeploymentSetName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DeploymentSet
	err := ctx.RegisterResource("volcengine:ecs/deploymentSet:DeploymentSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDeploymentSet gets an existing DeploymentSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDeploymentSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DeploymentSetState, opts ...pulumi.ResourceOption) (*DeploymentSet, error) {
	var resource DeploymentSet
	err := ctx.ReadResource("volcengine:ecs/deploymentSet:DeploymentSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DeploymentSet resources.
type deploymentSetState struct {
	// The ID of ECS DeploymentSet.
	DeploymentSetId *string `pulumi:"deploymentSetId"`
	// The name of ECS DeploymentSet.
	DeploymentSetName *string `pulumi:"deploymentSetName"`
	// The description of ECS DeploymentSet.
	Description *string `pulumi:"description"`
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack,Default is host.
	Granularity *string `pulumi:"granularity"`
	// The strategy of ECS DeploymentSet.Valid values: Availability.Default is Availability.
	Strategy *string `pulumi:"strategy"`
}

type DeploymentSetState struct {
	// The ID of ECS DeploymentSet.
	DeploymentSetId pulumi.StringPtrInput
	// The name of ECS DeploymentSet.
	DeploymentSetName pulumi.StringPtrInput
	// The description of ECS DeploymentSet.
	Description pulumi.StringPtrInput
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack,Default is host.
	Granularity pulumi.StringPtrInput
	// The strategy of ECS DeploymentSet.Valid values: Availability.Default is Availability.
	Strategy pulumi.StringPtrInput
}

func (DeploymentSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentSetState)(nil)).Elem()
}

type deploymentSetArgs struct {
	// The name of ECS DeploymentSet.
	DeploymentSetName string `pulumi:"deploymentSetName"`
	// The description of ECS DeploymentSet.
	Description *string `pulumi:"description"`
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack,Default is host.
	Granularity *string `pulumi:"granularity"`
	// The strategy of ECS DeploymentSet.Valid values: Availability.Default is Availability.
	Strategy *string `pulumi:"strategy"`
}

// The set of arguments for constructing a DeploymentSet resource.
type DeploymentSetArgs struct {
	// The name of ECS DeploymentSet.
	DeploymentSetName pulumi.StringInput
	// The description of ECS DeploymentSet.
	Description pulumi.StringPtrInput
	// The granularity of ECS DeploymentSet.Valid values: switch, host, rack,Default is host.
	Granularity pulumi.StringPtrInput
	// The strategy of ECS DeploymentSet.Valid values: Availability.Default is Availability.
	Strategy pulumi.StringPtrInput
}

func (DeploymentSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*deploymentSetArgs)(nil)).Elem()
}

type DeploymentSetInput interface {
	pulumi.Input

	ToDeploymentSetOutput() DeploymentSetOutput
	ToDeploymentSetOutputWithContext(ctx context.Context) DeploymentSetOutput
}

func (*DeploymentSet) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentSet)(nil)).Elem()
}

func (i *DeploymentSet) ToDeploymentSetOutput() DeploymentSetOutput {
	return i.ToDeploymentSetOutputWithContext(context.Background())
}

func (i *DeploymentSet) ToDeploymentSetOutputWithContext(ctx context.Context) DeploymentSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSetOutput)
}

// DeploymentSetArrayInput is an input type that accepts DeploymentSetArray and DeploymentSetArrayOutput values.
// You can construct a concrete instance of `DeploymentSetArrayInput` via:
//
//	DeploymentSetArray{ DeploymentSetArgs{...} }
type DeploymentSetArrayInput interface {
	pulumi.Input

	ToDeploymentSetArrayOutput() DeploymentSetArrayOutput
	ToDeploymentSetArrayOutputWithContext(context.Context) DeploymentSetArrayOutput
}

type DeploymentSetArray []DeploymentSetInput

func (DeploymentSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeploymentSet)(nil)).Elem()
}

func (i DeploymentSetArray) ToDeploymentSetArrayOutput() DeploymentSetArrayOutput {
	return i.ToDeploymentSetArrayOutputWithContext(context.Background())
}

func (i DeploymentSetArray) ToDeploymentSetArrayOutputWithContext(ctx context.Context) DeploymentSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSetArrayOutput)
}

// DeploymentSetMapInput is an input type that accepts DeploymentSetMap and DeploymentSetMapOutput values.
// You can construct a concrete instance of `DeploymentSetMapInput` via:
//
//	DeploymentSetMap{ "key": DeploymentSetArgs{...} }
type DeploymentSetMapInput interface {
	pulumi.Input

	ToDeploymentSetMapOutput() DeploymentSetMapOutput
	ToDeploymentSetMapOutputWithContext(context.Context) DeploymentSetMapOutput
}

type DeploymentSetMap map[string]DeploymentSetInput

func (DeploymentSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeploymentSet)(nil)).Elem()
}

func (i DeploymentSetMap) ToDeploymentSetMapOutput() DeploymentSetMapOutput {
	return i.ToDeploymentSetMapOutputWithContext(context.Background())
}

func (i DeploymentSetMap) ToDeploymentSetMapOutputWithContext(ctx context.Context) DeploymentSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DeploymentSetMapOutput)
}

type DeploymentSetOutput struct{ *pulumi.OutputState }

func (DeploymentSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DeploymentSet)(nil)).Elem()
}

func (o DeploymentSetOutput) ToDeploymentSetOutput() DeploymentSetOutput {
	return o
}

func (o DeploymentSetOutput) ToDeploymentSetOutputWithContext(ctx context.Context) DeploymentSetOutput {
	return o
}

// The ID of ECS DeploymentSet.
func (o DeploymentSetOutput) DeploymentSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentSet) pulumi.StringOutput { return v.DeploymentSetId }).(pulumi.StringOutput)
}

// The name of ECS DeploymentSet.
func (o DeploymentSetOutput) DeploymentSetName() pulumi.StringOutput {
	return o.ApplyT(func(v *DeploymentSet) pulumi.StringOutput { return v.DeploymentSetName }).(pulumi.StringOutput)
}

// The description of ECS DeploymentSet.
func (o DeploymentSetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentSet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The granularity of ECS DeploymentSet.Valid values: switch, host, rack,Default is host.
func (o DeploymentSetOutput) Granularity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentSet) pulumi.StringPtrOutput { return v.Granularity }).(pulumi.StringPtrOutput)
}

// The strategy of ECS DeploymentSet.Valid values: Availability.Default is Availability.
func (o DeploymentSetOutput) Strategy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DeploymentSet) pulumi.StringPtrOutput { return v.Strategy }).(pulumi.StringPtrOutput)
}

type DeploymentSetArrayOutput struct{ *pulumi.OutputState }

func (DeploymentSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DeploymentSet)(nil)).Elem()
}

func (o DeploymentSetArrayOutput) ToDeploymentSetArrayOutput() DeploymentSetArrayOutput {
	return o
}

func (o DeploymentSetArrayOutput) ToDeploymentSetArrayOutputWithContext(ctx context.Context) DeploymentSetArrayOutput {
	return o
}

func (o DeploymentSetArrayOutput) Index(i pulumi.IntInput) DeploymentSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DeploymentSet {
		return vs[0].([]*DeploymentSet)[vs[1].(int)]
	}).(DeploymentSetOutput)
}

type DeploymentSetMapOutput struct{ *pulumi.OutputState }

func (DeploymentSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DeploymentSet)(nil)).Elem()
}

func (o DeploymentSetMapOutput) ToDeploymentSetMapOutput() DeploymentSetMapOutput {
	return o
}

func (o DeploymentSetMapOutput) ToDeploymentSetMapOutputWithContext(ctx context.Context) DeploymentSetMapOutput {
	return o
}

func (o DeploymentSetMapOutput) MapIndex(k pulumi.StringInput) DeploymentSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DeploymentSet {
		return vs[0].(map[string]*DeploymentSet)[vs[1].(string)]
	}).(DeploymentSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSetInput)(nil)).Elem(), &DeploymentSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSetArrayInput)(nil)).Elem(), DeploymentSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DeploymentSetMapInput)(nil)).Elem(), DeploymentSetMap{})
	pulumi.RegisterOutputType(DeploymentSetOutput{})
	pulumi.RegisterOutputType(DeploymentSetArrayOutput{})
	pulumi.RegisterOutputType(DeploymentSetMapOutput{})
}
