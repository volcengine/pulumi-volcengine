// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of images
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := ecs.GetImages(ctx, &ecs.GetImagesArgs{
//				InstanceTypeId: pulumi.StringRef("ecs.g1.large"),
//				OsType:         pulumi.StringRef("Linux"),
//				Visibility:     pulumi.StringRef("public"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.ecs.Images has been deprecated in favor of volcengine.ecs.getImages
func Images(ctx *pulumi.Context, args *ImagesArgs, opts ...pulumi.InvokeOption) (*ImagesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ImagesResult
	err := ctx.Invoke("volcengine:ecs/images:Images", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Images.
type ImagesArgs struct {
	// A list of Image IDs.
	Ids []string `pulumi:"ids"`
	// The name of Image.
	ImageName *string `pulumi:"imageName"`
	// The specification of  Instance.
	InstanceTypeId *string `pulumi:"instanceTypeId"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit *bool `pulumi:"isSupportCloudInit"`
	// Whether the Image maintained for a long time.
	IsTls *bool `pulumi:"isTls"`
	// A Name Regex of Image.
	NameRegex *string `pulumi:"nameRegex"`
	// The operating system type of Image.
	OsType *string `pulumi:"osType"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The platform of Image.
	Platform *string `pulumi:"platform"`
	// A list of Image status, the value can be `available` or `creating` or `error`.
	Statuses []string `pulumi:"statuses"`
	// Tags.
	Tags []ImagesTag `pulumi:"tags"`
	// The visibility of Image.
	Visibility *string `pulumi:"visibility"`
}

// A collection of values returned by Images.
type ImagesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of Image.
	ImageName *string `pulumi:"imageName"`
	// The collection of Image query.
	Images         []ImagesImage `pulumi:"images"`
	InstanceTypeId *string       `pulumi:"instanceTypeId"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit *bool   `pulumi:"isSupportCloudInit"`
	IsTls              *bool   `pulumi:"isTls"`
	NameRegex          *string `pulumi:"nameRegex"`
	// The operating system type of Image.
	OsType     *string `pulumi:"osType"`
	OutputFile *string `pulumi:"outputFile"`
	// The platform of Image.
	Platform *string `pulumi:"platform"`
	// The status of Image.
	Statuses []string `pulumi:"statuses"`
	// Tags.
	Tags []ImagesTag `pulumi:"tags"`
	// The total count of Image query.
	TotalCount int `pulumi:"totalCount"`
	// The visibility of Image.
	Visibility *string `pulumi:"visibility"`
}

func ImagesOutput(ctx *pulumi.Context, args ImagesOutputArgs, opts ...pulumi.InvokeOption) ImagesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ImagesResult, error) {
			args := v.(ImagesArgs)
			r, err := Images(ctx, &args, opts...)
			var s ImagesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ImagesResultOutput)
}

// A collection of arguments for invoking Images.
type ImagesOutputArgs struct {
	// A list of Image IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of Image.
	ImageName pulumi.StringPtrInput `pulumi:"imageName"`
	// The specification of  Instance.
	InstanceTypeId pulumi.StringPtrInput `pulumi:"instanceTypeId"`
	// Whether the Image support cloud-init.
	IsSupportCloudInit pulumi.BoolPtrInput `pulumi:"isSupportCloudInit"`
	// Whether the Image maintained for a long time.
	IsTls pulumi.BoolPtrInput `pulumi:"isTls"`
	// A Name Regex of Image.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// The operating system type of Image.
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The platform of Image.
	Platform pulumi.StringPtrInput `pulumi:"platform"`
	// A list of Image status, the value can be `available` or `creating` or `error`.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
	// Tags.
	Tags ImagesTagArrayInput `pulumi:"tags"`
	// The visibility of Image.
	Visibility pulumi.StringPtrInput `pulumi:"visibility"`
}

func (ImagesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesArgs)(nil)).Elem()
}

// A collection of values returned by Images.
type ImagesResultOutput struct{ *pulumi.OutputState }

func (ImagesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImagesResult)(nil)).Elem()
}

func (o ImagesResultOutput) ToImagesResultOutput() ImagesResultOutput {
	return o
}

func (o ImagesResultOutput) ToImagesResultOutputWithContext(ctx context.Context) ImagesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o ImagesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImagesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ImagesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImagesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of Image.
func (o ImagesResultOutput) ImageName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.ImageName }).(pulumi.StringPtrOutput)
}

// The collection of Image query.
func (o ImagesResultOutput) Images() ImagesImageArrayOutput {
	return o.ApplyT(func(v ImagesResult) []ImagesImage { return v.Images }).(ImagesImageArrayOutput)
}

func (o ImagesResultOutput) InstanceTypeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.InstanceTypeId }).(pulumi.StringPtrOutput)
}

// Whether the Image support cloud-init.
func (o ImagesResultOutput) IsSupportCloudInit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImagesResult) *bool { return v.IsSupportCloudInit }).(pulumi.BoolPtrOutput)
}

func (o ImagesResultOutput) IsTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ImagesResult) *bool { return v.IsTls }).(pulumi.BoolPtrOutput)
}

func (o ImagesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// The operating system type of Image.
func (o ImagesResultOutput) OsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.OsType }).(pulumi.StringPtrOutput)
}

func (o ImagesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The platform of Image.
func (o ImagesResultOutput) Platform() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.Platform }).(pulumi.StringPtrOutput)
}

// The status of Image.
func (o ImagesResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ImagesResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// Tags.
func (o ImagesResultOutput) Tags() ImagesTagArrayOutput {
	return o.ApplyT(func(v ImagesResult) []ImagesTag { return v.Tags }).(ImagesTagArrayOutput)
}

// The total count of Image query.
func (o ImagesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ImagesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The visibility of Image.
func (o ImagesResultOutput) Visibility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImagesResult) *string { return v.Visibility }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ImagesResultOutput{})
}
