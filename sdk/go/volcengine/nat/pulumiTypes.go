// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type DnatEntriesDnatEntry struct {
	// The ID of the DNAT entry.
	DnatEntryId string `pulumi:"dnatEntryId"`
	// The name of the DNAT entry.
	DnatEntryName string `pulumi:"dnatEntryName"`
	// Provides the public IP address for public network access.
	ExternalIp string `pulumi:"externalIp"`
	// The port or port segment that receives requests from the public network. If InternalPort is passed into the port segment, ExternalPort must also be passed into the port segment.
	ExternalPort string `pulumi:"externalPort"`
	// Provides the internal IP address.
	InternalIp string `pulumi:"internalIp"`
	// The port or port segment on which the cloud server instance provides services to the public network.
	InternalPort string `pulumi:"internalPort"`
	// The id of the NAT gateway.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The network protocol.
	Protocol string `pulumi:"protocol"`
	// The network status.
	Status string `pulumi:"status"`
}

// DnatEntriesDnatEntryInput is an input type that accepts DnatEntriesDnatEntryArgs and DnatEntriesDnatEntryOutput values.
// You can construct a concrete instance of `DnatEntriesDnatEntryInput` via:
//
//	DnatEntriesDnatEntryArgs{...}
type DnatEntriesDnatEntryInput interface {
	pulumi.Input

	ToDnatEntriesDnatEntryOutput() DnatEntriesDnatEntryOutput
	ToDnatEntriesDnatEntryOutputWithContext(context.Context) DnatEntriesDnatEntryOutput
}

type DnatEntriesDnatEntryArgs struct {
	// The ID of the DNAT entry.
	DnatEntryId pulumi.StringInput `pulumi:"dnatEntryId"`
	// The name of the DNAT entry.
	DnatEntryName pulumi.StringInput `pulumi:"dnatEntryName"`
	// Provides the public IP address for public network access.
	ExternalIp pulumi.StringInput `pulumi:"externalIp"`
	// The port or port segment that receives requests from the public network. If InternalPort is passed into the port segment, ExternalPort must also be passed into the port segment.
	ExternalPort pulumi.StringInput `pulumi:"externalPort"`
	// Provides the internal IP address.
	InternalIp pulumi.StringInput `pulumi:"internalIp"`
	// The port or port segment on which the cloud server instance provides services to the public network.
	InternalPort pulumi.StringInput `pulumi:"internalPort"`
	// The id of the NAT gateway.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// The network protocol.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The network status.
	Status pulumi.StringInput `pulumi:"status"`
}

func (DnatEntriesDnatEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DnatEntriesDnatEntry)(nil)).Elem()
}

func (i DnatEntriesDnatEntryArgs) ToDnatEntriesDnatEntryOutput() DnatEntriesDnatEntryOutput {
	return i.ToDnatEntriesDnatEntryOutputWithContext(context.Background())
}

func (i DnatEntriesDnatEntryArgs) ToDnatEntriesDnatEntryOutputWithContext(ctx context.Context) DnatEntriesDnatEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatEntriesDnatEntryOutput)
}

// DnatEntriesDnatEntryArrayInput is an input type that accepts DnatEntriesDnatEntryArray and DnatEntriesDnatEntryArrayOutput values.
// You can construct a concrete instance of `DnatEntriesDnatEntryArrayInput` via:
//
//	DnatEntriesDnatEntryArray{ DnatEntriesDnatEntryArgs{...} }
type DnatEntriesDnatEntryArrayInput interface {
	pulumi.Input

	ToDnatEntriesDnatEntryArrayOutput() DnatEntriesDnatEntryArrayOutput
	ToDnatEntriesDnatEntryArrayOutputWithContext(context.Context) DnatEntriesDnatEntryArrayOutput
}

type DnatEntriesDnatEntryArray []DnatEntriesDnatEntryInput

func (DnatEntriesDnatEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnatEntriesDnatEntry)(nil)).Elem()
}

func (i DnatEntriesDnatEntryArray) ToDnatEntriesDnatEntryArrayOutput() DnatEntriesDnatEntryArrayOutput {
	return i.ToDnatEntriesDnatEntryArrayOutputWithContext(context.Background())
}

func (i DnatEntriesDnatEntryArray) ToDnatEntriesDnatEntryArrayOutputWithContext(ctx context.Context) DnatEntriesDnatEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnatEntriesDnatEntryArrayOutput)
}

type DnatEntriesDnatEntryOutput struct{ *pulumi.OutputState }

func (DnatEntriesDnatEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnatEntriesDnatEntry)(nil)).Elem()
}

func (o DnatEntriesDnatEntryOutput) ToDnatEntriesDnatEntryOutput() DnatEntriesDnatEntryOutput {
	return o
}

func (o DnatEntriesDnatEntryOutput) ToDnatEntriesDnatEntryOutputWithContext(ctx context.Context) DnatEntriesDnatEntryOutput {
	return o
}

// The ID of the DNAT entry.
func (o DnatEntriesDnatEntryOutput) DnatEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v DnatEntriesDnatEntry) string { return v.DnatEntryId }).(pulumi.StringOutput)
}

// The name of the DNAT entry.
func (o DnatEntriesDnatEntryOutput) DnatEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v DnatEntriesDnatEntry) string { return v.DnatEntryName }).(pulumi.StringOutput)
}

// Provides the public IP address for public network access.
func (o DnatEntriesDnatEntryOutput) ExternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v DnatEntriesDnatEntry) string { return v.ExternalIp }).(pulumi.StringOutput)
}

// The port or port segment that receives requests from the public network. If InternalPort is passed into the port segment, ExternalPort must also be passed into the port segment.
func (o DnatEntriesDnatEntryOutput) ExternalPort() pulumi.StringOutput {
	return o.ApplyT(func(v DnatEntriesDnatEntry) string { return v.ExternalPort }).(pulumi.StringOutput)
}

// Provides the internal IP address.
func (o DnatEntriesDnatEntryOutput) InternalIp() pulumi.StringOutput {
	return o.ApplyT(func(v DnatEntriesDnatEntry) string { return v.InternalIp }).(pulumi.StringOutput)
}

// The port or port segment on which the cloud server instance provides services to the public network.
func (o DnatEntriesDnatEntryOutput) InternalPort() pulumi.StringOutput {
	return o.ApplyT(func(v DnatEntriesDnatEntry) string { return v.InternalPort }).(pulumi.StringOutput)
}

// The id of the NAT gateway.
func (o DnatEntriesDnatEntryOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v DnatEntriesDnatEntry) string { return v.NatGatewayId }).(pulumi.StringOutput)
}

// The network protocol.
func (o DnatEntriesDnatEntryOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v DnatEntriesDnatEntry) string { return v.Protocol }).(pulumi.StringOutput)
}

// The network status.
func (o DnatEntriesDnatEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v DnatEntriesDnatEntry) string { return v.Status }).(pulumi.StringOutput)
}

type DnatEntriesDnatEntryArrayOutput struct{ *pulumi.OutputState }

func (DnatEntriesDnatEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnatEntriesDnatEntry)(nil)).Elem()
}

func (o DnatEntriesDnatEntryArrayOutput) ToDnatEntriesDnatEntryArrayOutput() DnatEntriesDnatEntryArrayOutput {
	return o
}

func (o DnatEntriesDnatEntryArrayOutput) ToDnatEntriesDnatEntryArrayOutputWithContext(ctx context.Context) DnatEntriesDnatEntryArrayOutput {
	return o
}

func (o DnatEntriesDnatEntryArrayOutput) Index(i pulumi.IntInput) DnatEntriesDnatEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnatEntriesDnatEntry {
		return vs[0].([]DnatEntriesDnatEntry)[vs[1].(int)]
	}).(DnatEntriesDnatEntryOutput)
}

type GatewayTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GatewayTagInput is an input type that accepts GatewayTagArgs and GatewayTagOutput values.
// You can construct a concrete instance of `GatewayTagInput` via:
//
//	GatewayTagArgs{...}
type GatewayTagInput interface {
	pulumi.Input

	ToGatewayTagOutput() GatewayTagOutput
	ToGatewayTagOutputWithContext(context.Context) GatewayTagOutput
}

type GatewayTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GatewayTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayTag)(nil)).Elem()
}

func (i GatewayTagArgs) ToGatewayTagOutput() GatewayTagOutput {
	return i.ToGatewayTagOutputWithContext(context.Background())
}

func (i GatewayTagArgs) ToGatewayTagOutputWithContext(ctx context.Context) GatewayTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayTagOutput)
}

// GatewayTagArrayInput is an input type that accepts GatewayTagArray and GatewayTagArrayOutput values.
// You can construct a concrete instance of `GatewayTagArrayInput` via:
//
//	GatewayTagArray{ GatewayTagArgs{...} }
type GatewayTagArrayInput interface {
	pulumi.Input

	ToGatewayTagArrayOutput() GatewayTagArrayOutput
	ToGatewayTagArrayOutputWithContext(context.Context) GatewayTagArrayOutput
}

type GatewayTagArray []GatewayTagInput

func (GatewayTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewayTag)(nil)).Elem()
}

func (i GatewayTagArray) ToGatewayTagArrayOutput() GatewayTagArrayOutput {
	return i.ToGatewayTagArrayOutputWithContext(context.Background())
}

func (i GatewayTagArray) ToGatewayTagArrayOutputWithContext(ctx context.Context) GatewayTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayTagArrayOutput)
}

type GatewayTagOutput struct{ *pulumi.OutputState }

func (GatewayTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayTag)(nil)).Elem()
}

func (o GatewayTagOutput) ToGatewayTagOutput() GatewayTagOutput {
	return o
}

func (o GatewayTagOutput) ToGatewayTagOutputWithContext(ctx context.Context) GatewayTagOutput {
	return o
}

// The Key of Tags.
func (o GatewayTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GatewayTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayTag) string { return v.Value }).(pulumi.StringOutput)
}

type GatewayTagArrayOutput struct{ *pulumi.OutputState }

func (GatewayTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewayTag)(nil)).Elem()
}

func (o GatewayTagArrayOutput) ToGatewayTagArrayOutput() GatewayTagArrayOutput {
	return o
}

func (o GatewayTagArrayOutput) ToGatewayTagArrayOutputWithContext(ctx context.Context) GatewayTagArrayOutput {
	return o
}

func (o GatewayTagArrayOutput) Index(i pulumi.IntInput) GatewayTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewayTag {
		return vs[0].([]GatewayTag)[vs[1].(int)]
	}).(GatewayTagOutput)
}

type GatewaysNatGateway struct {
	// The billing type of the NatGateway.
	BillingType string `pulumi:"billingType"`
	// Whether the NatGateway is locked.
	BusinessStatus string `pulumi:"businessStatus"`
	// The creation time of the NatGateway.
	CreationTime string `pulumi:"creationTime"`
	// The deleted time of the NatGateway.
	DeletedTime string `pulumi:"deletedTime"`
	// The description of the NatGateway.
	Description string `pulumi:"description"`
	// The eip addresses of the NatGateway.
	EipAddresses []GatewaysNatGatewayEipAddress `pulumi:"eipAddresses"`
	// The ID of the NatGateway.
	Id string `pulumi:"id"`
	// The reason why locking NatGateway.
	LockReason string `pulumi:"lockReason"`
	// The ID of the NatGateway.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The name of the NatGateway.
	NatGatewayName string `pulumi:"natGatewayName"`
	// The ID of the network interface.
	NetworkInterfaceId string `pulumi:"networkInterfaceId"`
	// The overdue time of the NatGateway.
	OverdueTime string `pulumi:"overdueTime"`
	// The specification of the NatGateway.
	Spec string `pulumi:"spec"`
	// The status of the NatGateway.
	Status string `pulumi:"status"`
	// The id of the Subnet.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []GatewaysNatGatewayTag `pulumi:"tags"`
	// The update time of the NatGateway.
	UpdatedAt string `pulumi:"updatedAt"`
	// The id of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// GatewaysNatGatewayInput is an input type that accepts GatewaysNatGatewayArgs and GatewaysNatGatewayOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayInput` via:
//
//	GatewaysNatGatewayArgs{...}
type GatewaysNatGatewayInput interface {
	pulumi.Input

	ToGatewaysNatGatewayOutput() GatewaysNatGatewayOutput
	ToGatewaysNatGatewayOutputWithContext(context.Context) GatewaysNatGatewayOutput
}

type GatewaysNatGatewayArgs struct {
	// The billing type of the NatGateway.
	BillingType pulumi.StringInput `pulumi:"billingType"`
	// Whether the NatGateway is locked.
	BusinessStatus pulumi.StringInput `pulumi:"businessStatus"`
	// The creation time of the NatGateway.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// The deleted time of the NatGateway.
	DeletedTime pulumi.StringInput `pulumi:"deletedTime"`
	// The description of the NatGateway.
	Description pulumi.StringInput `pulumi:"description"`
	// The eip addresses of the NatGateway.
	EipAddresses GatewaysNatGatewayEipAddressArrayInput `pulumi:"eipAddresses"`
	// The ID of the NatGateway.
	Id pulumi.StringInput `pulumi:"id"`
	// The reason why locking NatGateway.
	LockReason pulumi.StringInput `pulumi:"lockReason"`
	// The ID of the NatGateway.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// The name of the NatGateway.
	NatGatewayName pulumi.StringInput `pulumi:"natGatewayName"`
	// The ID of the network interface.
	NetworkInterfaceId pulumi.StringInput `pulumi:"networkInterfaceId"`
	// The overdue time of the NatGateway.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// The specification of the NatGateway.
	Spec pulumi.StringInput `pulumi:"spec"`
	// The status of the NatGateway.
	Status pulumi.StringInput `pulumi:"status"`
	// The id of the Subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags GatewaysNatGatewayTagArrayInput `pulumi:"tags"`
	// The update time of the NatGateway.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The id of the VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GatewaysNatGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGateway)(nil)).Elem()
}

func (i GatewaysNatGatewayArgs) ToGatewaysNatGatewayOutput() GatewaysNatGatewayOutput {
	return i.ToGatewaysNatGatewayOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayArgs) ToGatewaysNatGatewayOutputWithContext(ctx context.Context) GatewaysNatGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayOutput)
}

// GatewaysNatGatewayArrayInput is an input type that accepts GatewaysNatGatewayArray and GatewaysNatGatewayArrayOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayArrayInput` via:
//
//	GatewaysNatGatewayArray{ GatewaysNatGatewayArgs{...} }
type GatewaysNatGatewayArrayInput interface {
	pulumi.Input

	ToGatewaysNatGatewayArrayOutput() GatewaysNatGatewayArrayOutput
	ToGatewaysNatGatewayArrayOutputWithContext(context.Context) GatewaysNatGatewayArrayOutput
}

type GatewaysNatGatewayArray []GatewaysNatGatewayInput

func (GatewaysNatGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGateway)(nil)).Elem()
}

func (i GatewaysNatGatewayArray) ToGatewaysNatGatewayArrayOutput() GatewaysNatGatewayArrayOutput {
	return i.ToGatewaysNatGatewayArrayOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayArray) ToGatewaysNatGatewayArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayArrayOutput)
}

type GatewaysNatGatewayOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGateway)(nil)).Elem()
}

func (o GatewaysNatGatewayOutput) ToGatewaysNatGatewayOutput() GatewaysNatGatewayOutput {
	return o
}

func (o GatewaysNatGatewayOutput) ToGatewaysNatGatewayOutputWithContext(ctx context.Context) GatewaysNatGatewayOutput {
	return o
}

// The billing type of the NatGateway.
func (o GatewaysNatGatewayOutput) BillingType() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.BillingType }).(pulumi.StringOutput)
}

// Whether the NatGateway is locked.
func (o GatewaysNatGatewayOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The creation time of the NatGateway.
func (o GatewaysNatGatewayOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The deleted time of the NatGateway.
func (o GatewaysNatGatewayOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.DeletedTime }).(pulumi.StringOutput)
}

// The description of the NatGateway.
func (o GatewaysNatGatewayOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.Description }).(pulumi.StringOutput)
}

// The eip addresses of the NatGateway.
func (o GatewaysNatGatewayOutput) EipAddresses() GatewaysNatGatewayEipAddressArrayOutput {
	return o.ApplyT(func(v GatewaysNatGateway) []GatewaysNatGatewayEipAddress { return v.EipAddresses }).(GatewaysNatGatewayEipAddressArrayOutput)
}

// The ID of the NatGateway.
func (o GatewaysNatGatewayOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.Id }).(pulumi.StringOutput)
}

// The reason why locking NatGateway.
func (o GatewaysNatGatewayOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.LockReason }).(pulumi.StringOutput)
}

// The ID of the NatGateway.
func (o GatewaysNatGatewayOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.NatGatewayId }).(pulumi.StringOutput)
}

// The name of the NatGateway.
func (o GatewaysNatGatewayOutput) NatGatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.NatGatewayName }).(pulumi.StringOutput)
}

// The ID of the network interface.
func (o GatewaysNatGatewayOutput) NetworkInterfaceId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.NetworkInterfaceId }).(pulumi.StringOutput)
}

// The overdue time of the NatGateway.
func (o GatewaysNatGatewayOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// The specification of the NatGateway.
func (o GatewaysNatGatewayOutput) Spec() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.Spec }).(pulumi.StringOutput)
}

// The status of the NatGateway.
func (o GatewaysNatGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.Status }).(pulumi.StringOutput)
}

// The id of the Subnet.
func (o GatewaysNatGatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o GatewaysNatGatewayOutput) Tags() GatewaysNatGatewayTagArrayOutput {
	return o.ApplyT(func(v GatewaysNatGateway) []GatewaysNatGatewayTag { return v.Tags }).(GatewaysNatGatewayTagArrayOutput)
}

// The update time of the NatGateway.
func (o GatewaysNatGatewayOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The id of the VPC.
func (o GatewaysNatGatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGateway) string { return v.VpcId }).(pulumi.StringOutput)
}

type GatewaysNatGatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGateway)(nil)).Elem()
}

func (o GatewaysNatGatewayArrayOutput) ToGatewaysNatGatewayArrayOutput() GatewaysNatGatewayArrayOutput {
	return o
}

func (o GatewaysNatGatewayArrayOutput) ToGatewaysNatGatewayArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayArrayOutput {
	return o
}

func (o GatewaysNatGatewayArrayOutput) Index(i pulumi.IntInput) GatewaysNatGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaysNatGateway {
		return vs[0].([]GatewaysNatGateway)[vs[1].(int)]
	}).(GatewaysNatGatewayOutput)
}

type GatewaysNatGatewayEipAddress struct {
	// The ID of Eip.
	AllocationId string `pulumi:"allocationId"`
	// The address of Eip.
	EipAddress string `pulumi:"eipAddress"`
	// The using status of Eip.
	UsingStatus string `pulumi:"usingStatus"`
}

// GatewaysNatGatewayEipAddressInput is an input type that accepts GatewaysNatGatewayEipAddressArgs and GatewaysNatGatewayEipAddressOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayEipAddressInput` via:
//
//	GatewaysNatGatewayEipAddressArgs{...}
type GatewaysNatGatewayEipAddressInput interface {
	pulumi.Input

	ToGatewaysNatGatewayEipAddressOutput() GatewaysNatGatewayEipAddressOutput
	ToGatewaysNatGatewayEipAddressOutputWithContext(context.Context) GatewaysNatGatewayEipAddressOutput
}

type GatewaysNatGatewayEipAddressArgs struct {
	// The ID of Eip.
	AllocationId pulumi.StringInput `pulumi:"allocationId"`
	// The address of Eip.
	EipAddress pulumi.StringInput `pulumi:"eipAddress"`
	// The using status of Eip.
	UsingStatus pulumi.StringInput `pulumi:"usingStatus"`
}

func (GatewaysNatGatewayEipAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGatewayEipAddress)(nil)).Elem()
}

func (i GatewaysNatGatewayEipAddressArgs) ToGatewaysNatGatewayEipAddressOutput() GatewaysNatGatewayEipAddressOutput {
	return i.ToGatewaysNatGatewayEipAddressOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayEipAddressArgs) ToGatewaysNatGatewayEipAddressOutputWithContext(ctx context.Context) GatewaysNatGatewayEipAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayEipAddressOutput)
}

// GatewaysNatGatewayEipAddressArrayInput is an input type that accepts GatewaysNatGatewayEipAddressArray and GatewaysNatGatewayEipAddressArrayOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayEipAddressArrayInput` via:
//
//	GatewaysNatGatewayEipAddressArray{ GatewaysNatGatewayEipAddressArgs{...} }
type GatewaysNatGatewayEipAddressArrayInput interface {
	pulumi.Input

	ToGatewaysNatGatewayEipAddressArrayOutput() GatewaysNatGatewayEipAddressArrayOutput
	ToGatewaysNatGatewayEipAddressArrayOutputWithContext(context.Context) GatewaysNatGatewayEipAddressArrayOutput
}

type GatewaysNatGatewayEipAddressArray []GatewaysNatGatewayEipAddressInput

func (GatewaysNatGatewayEipAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGatewayEipAddress)(nil)).Elem()
}

func (i GatewaysNatGatewayEipAddressArray) ToGatewaysNatGatewayEipAddressArrayOutput() GatewaysNatGatewayEipAddressArrayOutput {
	return i.ToGatewaysNatGatewayEipAddressArrayOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayEipAddressArray) ToGatewaysNatGatewayEipAddressArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayEipAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayEipAddressArrayOutput)
}

type GatewaysNatGatewayEipAddressOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayEipAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGatewayEipAddress)(nil)).Elem()
}

func (o GatewaysNatGatewayEipAddressOutput) ToGatewaysNatGatewayEipAddressOutput() GatewaysNatGatewayEipAddressOutput {
	return o
}

func (o GatewaysNatGatewayEipAddressOutput) ToGatewaysNatGatewayEipAddressOutputWithContext(ctx context.Context) GatewaysNatGatewayEipAddressOutput {
	return o
}

// The ID of Eip.
func (o GatewaysNatGatewayEipAddressOutput) AllocationId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGatewayEipAddress) string { return v.AllocationId }).(pulumi.StringOutput)
}

// The address of Eip.
func (o GatewaysNatGatewayEipAddressOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGatewayEipAddress) string { return v.EipAddress }).(pulumi.StringOutput)
}

// The using status of Eip.
func (o GatewaysNatGatewayEipAddressOutput) UsingStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGatewayEipAddress) string { return v.UsingStatus }).(pulumi.StringOutput)
}

type GatewaysNatGatewayEipAddressArrayOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayEipAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGatewayEipAddress)(nil)).Elem()
}

func (o GatewaysNatGatewayEipAddressArrayOutput) ToGatewaysNatGatewayEipAddressArrayOutput() GatewaysNatGatewayEipAddressArrayOutput {
	return o
}

func (o GatewaysNatGatewayEipAddressArrayOutput) ToGatewaysNatGatewayEipAddressArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayEipAddressArrayOutput {
	return o
}

func (o GatewaysNatGatewayEipAddressArrayOutput) Index(i pulumi.IntInput) GatewaysNatGatewayEipAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaysNatGatewayEipAddress {
		return vs[0].([]GatewaysNatGatewayEipAddress)[vs[1].(int)]
	}).(GatewaysNatGatewayEipAddressOutput)
}

type GatewaysNatGatewayTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GatewaysNatGatewayTagInput is an input type that accepts GatewaysNatGatewayTagArgs and GatewaysNatGatewayTagOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayTagInput` via:
//
//	GatewaysNatGatewayTagArgs{...}
type GatewaysNatGatewayTagInput interface {
	pulumi.Input

	ToGatewaysNatGatewayTagOutput() GatewaysNatGatewayTagOutput
	ToGatewaysNatGatewayTagOutputWithContext(context.Context) GatewaysNatGatewayTagOutput
}

type GatewaysNatGatewayTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GatewaysNatGatewayTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGatewayTag)(nil)).Elem()
}

func (i GatewaysNatGatewayTagArgs) ToGatewaysNatGatewayTagOutput() GatewaysNatGatewayTagOutput {
	return i.ToGatewaysNatGatewayTagOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayTagArgs) ToGatewaysNatGatewayTagOutputWithContext(ctx context.Context) GatewaysNatGatewayTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayTagOutput)
}

// GatewaysNatGatewayTagArrayInput is an input type that accepts GatewaysNatGatewayTagArray and GatewaysNatGatewayTagArrayOutput values.
// You can construct a concrete instance of `GatewaysNatGatewayTagArrayInput` via:
//
//	GatewaysNatGatewayTagArray{ GatewaysNatGatewayTagArgs{...} }
type GatewaysNatGatewayTagArrayInput interface {
	pulumi.Input

	ToGatewaysNatGatewayTagArrayOutput() GatewaysNatGatewayTagArrayOutput
	ToGatewaysNatGatewayTagArrayOutputWithContext(context.Context) GatewaysNatGatewayTagArrayOutput
}

type GatewaysNatGatewayTagArray []GatewaysNatGatewayTagInput

func (GatewaysNatGatewayTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGatewayTag)(nil)).Elem()
}

func (i GatewaysNatGatewayTagArray) ToGatewaysNatGatewayTagArrayOutput() GatewaysNatGatewayTagArrayOutput {
	return i.ToGatewaysNatGatewayTagArrayOutputWithContext(context.Background())
}

func (i GatewaysNatGatewayTagArray) ToGatewaysNatGatewayTagArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysNatGatewayTagArrayOutput)
}

type GatewaysNatGatewayTagOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysNatGatewayTag)(nil)).Elem()
}

func (o GatewaysNatGatewayTagOutput) ToGatewaysNatGatewayTagOutput() GatewaysNatGatewayTagOutput {
	return o
}

func (o GatewaysNatGatewayTagOutput) ToGatewaysNatGatewayTagOutputWithContext(ctx context.Context) GatewaysNatGatewayTagOutput {
	return o
}

// The Key of Tags.
func (o GatewaysNatGatewayTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGatewayTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GatewaysNatGatewayTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysNatGatewayTag) string { return v.Value }).(pulumi.StringOutput)
}

type GatewaysNatGatewayTagArrayOutput struct{ *pulumi.OutputState }

func (GatewaysNatGatewayTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysNatGatewayTag)(nil)).Elem()
}

func (o GatewaysNatGatewayTagArrayOutput) ToGatewaysNatGatewayTagArrayOutput() GatewaysNatGatewayTagArrayOutput {
	return o
}

func (o GatewaysNatGatewayTagArrayOutput) ToGatewaysNatGatewayTagArrayOutputWithContext(ctx context.Context) GatewaysNatGatewayTagArrayOutput {
	return o
}

func (o GatewaysNatGatewayTagArrayOutput) Index(i pulumi.IntInput) GatewaysNatGatewayTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaysNatGatewayTag {
		return vs[0].([]GatewaysNatGatewayTag)[vs[1].(int)]
	}).(GatewaysNatGatewayTagOutput)
}

type GatewaysTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GatewaysTagInput is an input type that accepts GatewaysTagArgs and GatewaysTagOutput values.
// You can construct a concrete instance of `GatewaysTagInput` via:
//
//	GatewaysTagArgs{...}
type GatewaysTagInput interface {
	pulumi.Input

	ToGatewaysTagOutput() GatewaysTagOutput
	ToGatewaysTagOutputWithContext(context.Context) GatewaysTagOutput
}

type GatewaysTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GatewaysTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysTag)(nil)).Elem()
}

func (i GatewaysTagArgs) ToGatewaysTagOutput() GatewaysTagOutput {
	return i.ToGatewaysTagOutputWithContext(context.Background())
}

func (i GatewaysTagArgs) ToGatewaysTagOutputWithContext(ctx context.Context) GatewaysTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysTagOutput)
}

// GatewaysTagArrayInput is an input type that accepts GatewaysTagArray and GatewaysTagArrayOutput values.
// You can construct a concrete instance of `GatewaysTagArrayInput` via:
//
//	GatewaysTagArray{ GatewaysTagArgs{...} }
type GatewaysTagArrayInput interface {
	pulumi.Input

	ToGatewaysTagArrayOutput() GatewaysTagArrayOutput
	ToGatewaysTagArrayOutputWithContext(context.Context) GatewaysTagArrayOutput
}

type GatewaysTagArray []GatewaysTagInput

func (GatewaysTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysTag)(nil)).Elem()
}

func (i GatewaysTagArray) ToGatewaysTagArrayOutput() GatewaysTagArrayOutput {
	return i.ToGatewaysTagArrayOutputWithContext(context.Background())
}

func (i GatewaysTagArray) ToGatewaysTagArrayOutputWithContext(ctx context.Context) GatewaysTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysTagArrayOutput)
}

type GatewaysTagOutput struct{ *pulumi.OutputState }

func (GatewaysTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysTag)(nil)).Elem()
}

func (o GatewaysTagOutput) ToGatewaysTagOutput() GatewaysTagOutput {
	return o
}

func (o GatewaysTagOutput) ToGatewaysTagOutputWithContext(ctx context.Context) GatewaysTagOutput {
	return o
}

// The Key of Tags.
func (o GatewaysTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GatewaysTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysTag) string { return v.Value }).(pulumi.StringOutput)
}

type GatewaysTagArrayOutput struct{ *pulumi.OutputState }

func (GatewaysTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysTag)(nil)).Elem()
}

func (o GatewaysTagArrayOutput) ToGatewaysTagArrayOutput() GatewaysTagArrayOutput {
	return o
}

func (o GatewaysTagArrayOutput) ToGatewaysTagArrayOutputWithContext(ctx context.Context) GatewaysTagArrayOutput {
	return o
}

func (o GatewaysTagArrayOutput) Index(i pulumi.IntInput) GatewaysTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaysTag {
		return vs[0].([]GatewaysTag)[vs[1].(int)]
	}).(GatewaysTagOutput)
}

type SnatEntriesSnatEntry struct {
	// The public ip address used by the SNAT entry.
	EipAddress string `pulumi:"eipAddress"`
	// An id of the public ip address used by the SNAT entry.
	EipId string `pulumi:"eipId"`
	// The id of the SNAT entry.
	Id string `pulumi:"id"`
	// An id of the nat gateway to which the entry belongs.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The id of the SNAT entry.
	SnatEntryId string `pulumi:"snatEntryId"`
	// A name of SNAT entry.
	SnatEntryName string `pulumi:"snatEntryName"`
	// The SourceCidr of SNAT entry.
	SourceCidr string `pulumi:"sourceCidr"`
	// The status of the SNAT entry.
	Status string `pulumi:"status"`
	// An id of the subnet that is required to access the Internet.
	SubnetId string `pulumi:"subnetId"`
}

// SnatEntriesSnatEntryInput is an input type that accepts SnatEntriesSnatEntryArgs and SnatEntriesSnatEntryOutput values.
// You can construct a concrete instance of `SnatEntriesSnatEntryInput` via:
//
//	SnatEntriesSnatEntryArgs{...}
type SnatEntriesSnatEntryInput interface {
	pulumi.Input

	ToSnatEntriesSnatEntryOutput() SnatEntriesSnatEntryOutput
	ToSnatEntriesSnatEntryOutputWithContext(context.Context) SnatEntriesSnatEntryOutput
}

type SnatEntriesSnatEntryArgs struct {
	// The public ip address used by the SNAT entry.
	EipAddress pulumi.StringInput `pulumi:"eipAddress"`
	// An id of the public ip address used by the SNAT entry.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The id of the SNAT entry.
	Id pulumi.StringInput `pulumi:"id"`
	// An id of the nat gateway to which the entry belongs.
	NatGatewayId pulumi.StringInput `pulumi:"natGatewayId"`
	// The id of the SNAT entry.
	SnatEntryId pulumi.StringInput `pulumi:"snatEntryId"`
	// A name of SNAT entry.
	SnatEntryName pulumi.StringInput `pulumi:"snatEntryName"`
	// The SourceCidr of SNAT entry.
	SourceCidr pulumi.StringInput `pulumi:"sourceCidr"`
	// The status of the SNAT entry.
	Status pulumi.StringInput `pulumi:"status"`
	// An id of the subnet that is required to access the Internet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (SnatEntriesSnatEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnatEntriesSnatEntry)(nil)).Elem()
}

func (i SnatEntriesSnatEntryArgs) ToSnatEntriesSnatEntryOutput() SnatEntriesSnatEntryOutput {
	return i.ToSnatEntriesSnatEntryOutputWithContext(context.Background())
}

func (i SnatEntriesSnatEntryArgs) ToSnatEntriesSnatEntryOutputWithContext(ctx context.Context) SnatEntriesSnatEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntriesSnatEntryOutput)
}

// SnatEntriesSnatEntryArrayInput is an input type that accepts SnatEntriesSnatEntryArray and SnatEntriesSnatEntryArrayOutput values.
// You can construct a concrete instance of `SnatEntriesSnatEntryArrayInput` via:
//
//	SnatEntriesSnatEntryArray{ SnatEntriesSnatEntryArgs{...} }
type SnatEntriesSnatEntryArrayInput interface {
	pulumi.Input

	ToSnatEntriesSnatEntryArrayOutput() SnatEntriesSnatEntryArrayOutput
	ToSnatEntriesSnatEntryArrayOutputWithContext(context.Context) SnatEntriesSnatEntryArrayOutput
}

type SnatEntriesSnatEntryArray []SnatEntriesSnatEntryInput

func (SnatEntriesSnatEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnatEntriesSnatEntry)(nil)).Elem()
}

func (i SnatEntriesSnatEntryArray) ToSnatEntriesSnatEntryArrayOutput() SnatEntriesSnatEntryArrayOutput {
	return i.ToSnatEntriesSnatEntryArrayOutputWithContext(context.Background())
}

func (i SnatEntriesSnatEntryArray) ToSnatEntriesSnatEntryArrayOutputWithContext(ctx context.Context) SnatEntriesSnatEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntriesSnatEntryArrayOutput)
}

type SnatEntriesSnatEntryOutput struct{ *pulumi.OutputState }

func (SnatEntriesSnatEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnatEntriesSnatEntry)(nil)).Elem()
}

func (o SnatEntriesSnatEntryOutput) ToSnatEntriesSnatEntryOutput() SnatEntriesSnatEntryOutput {
	return o
}

func (o SnatEntriesSnatEntryOutput) ToSnatEntriesSnatEntryOutputWithContext(ctx context.Context) SnatEntriesSnatEntryOutput {
	return o
}

// The public ip address used by the SNAT entry.
func (o SnatEntriesSnatEntryOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.EipAddress }).(pulumi.StringOutput)
}

// An id of the public ip address used by the SNAT entry.
func (o SnatEntriesSnatEntryOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.EipId }).(pulumi.StringOutput)
}

// The id of the SNAT entry.
func (o SnatEntriesSnatEntryOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.Id }).(pulumi.StringOutput)
}

// An id of the nat gateway to which the entry belongs.
func (o SnatEntriesSnatEntryOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.NatGatewayId }).(pulumi.StringOutput)
}

// The id of the SNAT entry.
func (o SnatEntriesSnatEntryOutput) SnatEntryId() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.SnatEntryId }).(pulumi.StringOutput)
}

// A name of SNAT entry.
func (o SnatEntriesSnatEntryOutput) SnatEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.SnatEntryName }).(pulumi.StringOutput)
}

// The SourceCidr of SNAT entry.
func (o SnatEntriesSnatEntryOutput) SourceCidr() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.SourceCidr }).(pulumi.StringOutput)
}

// The status of the SNAT entry.
func (o SnatEntriesSnatEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.Status }).(pulumi.StringOutput)
}

// An id of the subnet that is required to access the Internet.
func (o SnatEntriesSnatEntryOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v SnatEntriesSnatEntry) string { return v.SubnetId }).(pulumi.StringOutput)
}

type SnatEntriesSnatEntryArrayOutput struct{ *pulumi.OutputState }

func (SnatEntriesSnatEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnatEntriesSnatEntry)(nil)).Elem()
}

func (o SnatEntriesSnatEntryArrayOutput) ToSnatEntriesSnatEntryArrayOutput() SnatEntriesSnatEntryArrayOutput {
	return o
}

func (o SnatEntriesSnatEntryArrayOutput) ToSnatEntriesSnatEntryArrayOutputWithContext(ctx context.Context) SnatEntriesSnatEntryArrayOutput {
	return o
}

func (o SnatEntriesSnatEntryArrayOutput) Index(i pulumi.IntInput) SnatEntriesSnatEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnatEntriesSnatEntry {
		return vs[0].([]SnatEntriesSnatEntry)[vs[1].(int)]
	}).(SnatEntriesSnatEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnatEntriesDnatEntryInput)(nil)).Elem(), DnatEntriesDnatEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnatEntriesDnatEntryArrayInput)(nil)).Elem(), DnatEntriesDnatEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayTagInput)(nil)).Elem(), GatewayTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayTagArrayInput)(nil)).Elem(), GatewayTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayInput)(nil)).Elem(), GatewaysNatGatewayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayArrayInput)(nil)).Elem(), GatewaysNatGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayEipAddressInput)(nil)).Elem(), GatewaysNatGatewayEipAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayEipAddressArrayInput)(nil)).Elem(), GatewaysNatGatewayEipAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayTagInput)(nil)).Elem(), GatewaysNatGatewayTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysNatGatewayTagArrayInput)(nil)).Elem(), GatewaysNatGatewayTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysTagInput)(nil)).Elem(), GatewaysTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysTagArrayInput)(nil)).Elem(), GatewaysTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatEntriesSnatEntryInput)(nil)).Elem(), SnatEntriesSnatEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatEntriesSnatEntryArrayInput)(nil)).Elem(), SnatEntriesSnatEntryArray{})
	pulumi.RegisterOutputType(DnatEntriesDnatEntryOutput{})
	pulumi.RegisterOutputType(DnatEntriesDnatEntryArrayOutput{})
	pulumi.RegisterOutputType(GatewayTagOutput{})
	pulumi.RegisterOutputType(GatewayTagArrayOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayEipAddressOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayEipAddressArrayOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayTagOutput{})
	pulumi.RegisterOutputType(GatewaysNatGatewayTagArrayOutput{})
	pulumi.RegisterOutputType(GatewaysTagOutput{})
	pulumi.RegisterOutputType(GatewaysTagArrayOutput{})
	pulumi.RegisterOutputType(SnatEntriesSnatEntryOutput{})
	pulumi.RegisterOutputType(SnatEntriesSnatEntryArrayOutput{})
}
