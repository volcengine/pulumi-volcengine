// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nat"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nat.NewGateway(ctx, "foo", &nat.GatewayArgs{
//				BillingType:    pulumi.String("PostPaid"),
//				Description:    pulumi.String("This nat gateway auto-created by terraform. "),
//				NatGatewayName: pulumi.String("tf-auto-demo-1"),
//				ProjectName:    pulumi.String("default"),
//				Spec:           pulumi.String("Medium"),
//				SubnetId:       pulumi.String("subnet-im67x70vxla88gbssz1hy1z2"),
//				VpcId:          pulumi.String("vpc-im67wjcikxkw8gbssx8ufpj8"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NatGateway can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:nat/gateway:Gateway default ngw-vv3t043k05sm****
//
// ```
type Gateway struct {
	pulumi.CustomResourceState

	// The billing type of the NatGateway, the value is `PostPaid` or `PrePaid`.
	BillingType pulumi.StringPtrOutput `pulumi:"billingType"`
	// The description of the NatGateway.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the NatGateway.
	NatGatewayName pulumi.StringPtrOutput `pulumi:"natGatewayName"`
	// The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The ProjectName of the NatGateway.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.
	Spec pulumi.StringPtrOutput `pulumi:"spec"`
	// The ID of the Subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Tags.
	Tags GatewayTagArrayOutput `pulumi:"tags"`
	// The ID of the VPC.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
}

// NewGateway registers a new resource with the given unique name, arguments, and options.
func NewGateway(ctx *pulumi.Context,
	name string, args *GatewayArgs, opts ...pulumi.ResourceOption) (*Gateway, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Gateway
	err := ctx.RegisterResource("volcengine:nat/gateway:Gateway", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGateway gets an existing Gateway resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGateway(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayState, opts ...pulumi.ResourceOption) (*Gateway, error) {
	var resource Gateway
	err := ctx.ReadResource("volcengine:nat/gateway:Gateway", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Gateway resources.
type gatewayState struct {
	// The billing type of the NatGateway, the value is `PostPaid` or `PrePaid`.
	BillingType *string `pulumi:"billingType"`
	// The description of the NatGateway.
	Description *string `pulumi:"description"`
	// The name of the NatGateway.
	NatGatewayName *string `pulumi:"natGatewayName"`
	// The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Period *int `pulumi:"period"`
	// The ProjectName of the NatGateway.
	ProjectName *string `pulumi:"projectName"`
	// The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.
	Spec *string `pulumi:"spec"`
	// The ID of the Subnet.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []GatewayTag `pulumi:"tags"`
	// The ID of the VPC.
	VpcId *string `pulumi:"vpcId"`
}

type GatewayState struct {
	// The billing type of the NatGateway, the value is `PostPaid` or `PrePaid`.
	BillingType pulumi.StringPtrInput
	// The description of the NatGateway.
	Description pulumi.StringPtrInput
	// The name of the NatGateway.
	NatGatewayName pulumi.StringPtrInput
	// The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Period pulumi.IntPtrInput
	// The ProjectName of the NatGateway.
	ProjectName pulumi.StringPtrInput
	// The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.
	Spec pulumi.StringPtrInput
	// The ID of the Subnet.
	SubnetId pulumi.StringPtrInput
	// Tags.
	Tags GatewayTagArrayInput
	// The ID of the VPC.
	VpcId pulumi.StringPtrInput
}

func (GatewayState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayState)(nil)).Elem()
}

type gatewayArgs struct {
	// The billing type of the NatGateway, the value is `PostPaid` or `PrePaid`.
	BillingType *string `pulumi:"billingType"`
	// The description of the NatGateway.
	Description *string `pulumi:"description"`
	// The name of the NatGateway.
	NatGatewayName *string `pulumi:"natGatewayName"`
	// The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Period *int `pulumi:"period"`
	// The ProjectName of the NatGateway.
	ProjectName *string `pulumi:"projectName"`
	// The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.
	Spec *string `pulumi:"spec"`
	// The ID of the Subnet.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []GatewayTag `pulumi:"tags"`
	// The ID of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// The set of arguments for constructing a Gateway resource.
type GatewayArgs struct {
	// The billing type of the NatGateway, the value is `PostPaid` or `PrePaid`.
	BillingType pulumi.StringPtrInput
	// The description of the NatGateway.
	Description pulumi.StringPtrInput
	// The name of the NatGateway.
	NatGatewayName pulumi.StringPtrInput
	// The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	Period pulumi.IntPtrInput
	// The ProjectName of the NatGateway.
	ProjectName pulumi.StringPtrInput
	// The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.
	Spec pulumi.StringPtrInput
	// The ID of the Subnet.
	SubnetId pulumi.StringInput
	// Tags.
	Tags GatewayTagArrayInput
	// The ID of the VPC.
	VpcId pulumi.StringInput
}

func (GatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayArgs)(nil)).Elem()
}

type GatewayInput interface {
	pulumi.Input

	ToGatewayOutput() GatewayOutput
	ToGatewayOutputWithContext(ctx context.Context) GatewayOutput
}

func (*Gateway) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (i *Gateway) ToGatewayOutput() GatewayOutput {
	return i.ToGatewayOutputWithContext(context.Background())
}

func (i *Gateway) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayOutput)
}

// GatewayArrayInput is an input type that accepts GatewayArray and GatewayArrayOutput values.
// You can construct a concrete instance of `GatewayArrayInput` via:
//
//	GatewayArray{ GatewayArgs{...} }
type GatewayArrayInput interface {
	pulumi.Input

	ToGatewayArrayOutput() GatewayArrayOutput
	ToGatewayArrayOutputWithContext(context.Context) GatewayArrayOutput
}

type GatewayArray []GatewayInput

func (GatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (i GatewayArray) ToGatewayArrayOutput() GatewayArrayOutput {
	return i.ToGatewayArrayOutputWithContext(context.Background())
}

func (i GatewayArray) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayArrayOutput)
}

// GatewayMapInput is an input type that accepts GatewayMap and GatewayMapOutput values.
// You can construct a concrete instance of `GatewayMapInput` via:
//
//	GatewayMap{ "key": GatewayArgs{...} }
type GatewayMapInput interface {
	pulumi.Input

	ToGatewayMapOutput() GatewayMapOutput
	ToGatewayMapOutputWithContext(context.Context) GatewayMapOutput
}

type GatewayMap map[string]GatewayInput

func (GatewayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (i GatewayMap) ToGatewayMapOutput() GatewayMapOutput {
	return i.ToGatewayMapOutputWithContext(context.Background())
}

func (i GatewayMap) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayMapOutput)
}

type GatewayOutput struct{ *pulumi.OutputState }

func (GatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Gateway)(nil)).Elem()
}

func (o GatewayOutput) ToGatewayOutput() GatewayOutput {
	return o
}

func (o GatewayOutput) ToGatewayOutputWithContext(ctx context.Context) GatewayOutput {
	return o
}

// The billing type of the NatGateway, the value is `PostPaid` or `PrePaid`.
func (o GatewayOutput) BillingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.BillingType }).(pulumi.StringPtrOutput)
}

// The description of the NatGateway.
func (o GatewayOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of the NatGateway.
func (o GatewayOutput) NatGatewayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.NatGatewayName }).(pulumi.StringPtrOutput)
}

// The period of the NatGateway, the valid value range in 1~9 or 12 or 24 or 36. Default value is 12. The period unit defaults to `Month`.This field is only effective when creating a PrePaid NatGateway. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o GatewayOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The ProjectName of the NatGateway.
func (o GatewayOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The specification of the NatGateway. Optional choice contains `Small`(default), `Medium`, `Large`.
func (o GatewayOutput) Spec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringPtrOutput { return v.Spec }).(pulumi.StringPtrOutput)
}

// The ID of the Subnet.
func (o GatewayOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o GatewayOutput) Tags() GatewayTagArrayOutput {
	return o.ApplyT(func(v *Gateway) GatewayTagArrayOutput { return v.Tags }).(GatewayTagArrayOutput)
}

// The ID of the VPC.
func (o GatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Gateway) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

type GatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Gateway)(nil)).Elem()
}

func (o GatewayArrayOutput) ToGatewayArrayOutput() GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) ToGatewayArrayOutputWithContext(ctx context.Context) GatewayArrayOutput {
	return o
}

func (o GatewayArrayOutput) Index(i pulumi.IntInput) GatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].([]*Gateway)[vs[1].(int)]
	}).(GatewayOutput)
}

type GatewayMapOutput struct{ *pulumi.OutputState }

func (GatewayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Gateway)(nil)).Elem()
}

func (o GatewayMapOutput) ToGatewayMapOutput() GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) ToGatewayMapOutputWithContext(ctx context.Context) GatewayMapOutput {
	return o
}

func (o GatewayMapOutput) MapIndex(k pulumi.StringInput) GatewayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Gateway {
		return vs[0].(map[string]*Gateway)[vs[1].(string)]
	}).(GatewayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayInput)(nil)).Elem(), &Gateway{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayArrayInput)(nil)).Elem(), GatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayMapInput)(nil)).Elem(), GatewayMap{})
	pulumi.RegisterOutputType(GatewayOutput{})
	pulumi.RegisterOutputType(GatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayMapOutput{})
}
