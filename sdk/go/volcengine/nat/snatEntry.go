// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nat

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage snat entry
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nat"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     *pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooGateway, err := nat.NewGateway(ctx, "fooGateway", &nat.GatewayArgs{
//				VpcId:          fooVpc.ID(),
//				SubnetId:       fooSubnet.ID(),
//				Spec:           pulumi.String("Small"),
//				NatGatewayName: pulumi.String("acc-test-ng"),
//				Description:    pulumi.String("acc-test"),
//				BillingType:    pulumi.String("PostPaid"),
//				ProjectName:    pulumi.String("default"),
//				Tags: nat.GatewayTagArray{
//					&nat.GatewayTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooAddress, err := eip.NewAddress(ctx, "fooAddress", &eip.AddressArgs{
//				Description: pulumi.String("acc-test"),
//				Bandwidth:   pulumi.Int(1),
//				BillingType: pulumi.String("PostPaidByBandwidth"),
//				Isp:         pulumi.String("BGP"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = eip.NewAssociate(ctx, "fooAssociate", &eip.AssociateArgs{
//				AllocationId: fooAddress.ID(),
//				InstanceId:   fooGateway.ID(),
//				InstanceType: pulumi.String("Nat"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nat.NewSnatEntry(ctx, "fooSnatEntry", &nat.SnatEntryArgs{
//				SnatEntryName: pulumi.String("acc-test-snat-entry"),
//				NatGatewayId:  fooGateway.ID(),
//				EipId:         fooAddress.ID(),
//				SourceCidr:    pulumi.String("172.16.0.0/24"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				pulumi.Resource("volcengine_eip_associate.foo"),
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Snat entry can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:nat/snatEntry:SnatEntry default snat-3fvhk47kf56****
//
// ```
type SnatEntry struct {
	pulumi.CustomResourceState

	// The id of the public ip address used by the SNAT entry.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// The id of the nat gateway to which the entry belongs.
	NatGatewayId pulumi.StringOutput `pulumi:"natGatewayId"`
	// The name of the SNAT entry.
	SnatEntryName pulumi.StringOutput `pulumi:"snatEntryName"`
	// The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.
	SourceCidr pulumi.StringOutput `pulumi:"sourceCidr"`
	// The status of the SNAT entry.
	Status pulumi.StringOutput `pulumi:"status"`
	// The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewSnatEntry registers a new resource with the given unique name, arguments, and options.
func NewSnatEntry(ctx *pulumi.Context,
	name string, args *SnatEntryArgs, opts ...pulumi.ResourceOption) (*SnatEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EipId == nil {
		return nil, errors.New("invalid value for required argument 'EipId'")
	}
	if args.NatGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'NatGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnatEntry
	err := ctx.RegisterResource("volcengine:nat/snatEntry:SnatEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnatEntry gets an existing SnatEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnatEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnatEntryState, opts ...pulumi.ResourceOption) (*SnatEntry, error) {
	var resource SnatEntry
	err := ctx.ReadResource("volcengine:nat/snatEntry:SnatEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnatEntry resources.
type snatEntryState struct {
	// The id of the public ip address used by the SNAT entry.
	EipId *string `pulumi:"eipId"`
	// The id of the nat gateway to which the entry belongs.
	NatGatewayId *string `pulumi:"natGatewayId"`
	// The name of the SNAT entry.
	SnatEntryName *string `pulumi:"snatEntryName"`
	// The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.
	SourceCidr *string `pulumi:"sourceCidr"`
	// The status of the SNAT entry.
	Status *string `pulumi:"status"`
	// The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.
	SubnetId *string `pulumi:"subnetId"`
}

type SnatEntryState struct {
	// The id of the public ip address used by the SNAT entry.
	EipId pulumi.StringPtrInput
	// The id of the nat gateway to which the entry belongs.
	NatGatewayId pulumi.StringPtrInput
	// The name of the SNAT entry.
	SnatEntryName pulumi.StringPtrInput
	// The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.
	SourceCidr pulumi.StringPtrInput
	// The status of the SNAT entry.
	Status pulumi.StringPtrInput
	// The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.
	SubnetId pulumi.StringPtrInput
}

func (SnatEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*snatEntryState)(nil)).Elem()
}

type snatEntryArgs struct {
	// The id of the public ip address used by the SNAT entry.
	EipId string `pulumi:"eipId"`
	// The id of the nat gateway to which the entry belongs.
	NatGatewayId string `pulumi:"natGatewayId"`
	// The name of the SNAT entry.
	SnatEntryName *string `pulumi:"snatEntryName"`
	// The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.
	SourceCidr *string `pulumi:"sourceCidr"`
	// The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.
	SubnetId *string `pulumi:"subnetId"`
}

// The set of arguments for constructing a SnatEntry resource.
type SnatEntryArgs struct {
	// The id of the public ip address used by the SNAT entry.
	EipId pulumi.StringInput
	// The id of the nat gateway to which the entry belongs.
	NatGatewayId pulumi.StringInput
	// The name of the SNAT entry.
	SnatEntryName pulumi.StringPtrInput
	// The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.
	SourceCidr pulumi.StringPtrInput
	// The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.
	SubnetId pulumi.StringPtrInput
}

func (SnatEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snatEntryArgs)(nil)).Elem()
}

type SnatEntryInput interface {
	pulumi.Input

	ToSnatEntryOutput() SnatEntryOutput
	ToSnatEntryOutputWithContext(ctx context.Context) SnatEntryOutput
}

func (*SnatEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**SnatEntry)(nil)).Elem()
}

func (i *SnatEntry) ToSnatEntryOutput() SnatEntryOutput {
	return i.ToSnatEntryOutputWithContext(context.Background())
}

func (i *SnatEntry) ToSnatEntryOutputWithContext(ctx context.Context) SnatEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntryOutput)
}

// SnatEntryArrayInput is an input type that accepts SnatEntryArray and SnatEntryArrayOutput values.
// You can construct a concrete instance of `SnatEntryArrayInput` via:
//
//	SnatEntryArray{ SnatEntryArgs{...} }
type SnatEntryArrayInput interface {
	pulumi.Input

	ToSnatEntryArrayOutput() SnatEntryArrayOutput
	ToSnatEntryArrayOutputWithContext(context.Context) SnatEntryArrayOutput
}

type SnatEntryArray []SnatEntryInput

func (SnatEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnatEntry)(nil)).Elem()
}

func (i SnatEntryArray) ToSnatEntryArrayOutput() SnatEntryArrayOutput {
	return i.ToSnatEntryArrayOutputWithContext(context.Background())
}

func (i SnatEntryArray) ToSnatEntryArrayOutputWithContext(ctx context.Context) SnatEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntryArrayOutput)
}

// SnatEntryMapInput is an input type that accepts SnatEntryMap and SnatEntryMapOutput values.
// You can construct a concrete instance of `SnatEntryMapInput` via:
//
//	SnatEntryMap{ "key": SnatEntryArgs{...} }
type SnatEntryMapInput interface {
	pulumi.Input

	ToSnatEntryMapOutput() SnatEntryMapOutput
	ToSnatEntryMapOutputWithContext(context.Context) SnatEntryMapOutput
}

type SnatEntryMap map[string]SnatEntryInput

func (SnatEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnatEntry)(nil)).Elem()
}

func (i SnatEntryMap) ToSnatEntryMapOutput() SnatEntryMapOutput {
	return i.ToSnatEntryMapOutputWithContext(context.Background())
}

func (i SnatEntryMap) ToSnatEntryMapOutputWithContext(ctx context.Context) SnatEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnatEntryMapOutput)
}

type SnatEntryOutput struct{ *pulumi.OutputState }

func (SnatEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnatEntry)(nil)).Elem()
}

func (o SnatEntryOutput) ToSnatEntryOutput() SnatEntryOutput {
	return o
}

func (o SnatEntryOutput) ToSnatEntryOutputWithContext(ctx context.Context) SnatEntryOutput {
	return o
}

// The id of the public ip address used by the SNAT entry.
func (o SnatEntryOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatEntry) pulumi.StringOutput { return v.EipId }).(pulumi.StringOutput)
}

// The id of the nat gateway to which the entry belongs.
func (o SnatEntryOutput) NatGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatEntry) pulumi.StringOutput { return v.NatGatewayId }).(pulumi.StringOutput)
}

// The name of the SNAT entry.
func (o SnatEntryOutput) SnatEntryName() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatEntry) pulumi.StringOutput { return v.SnatEntryName }).(pulumi.StringOutput)
}

// The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.
func (o SnatEntryOutput) SourceCidr() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatEntry) pulumi.StringOutput { return v.SourceCidr }).(pulumi.StringOutput)
}

// The status of the SNAT entry.
func (o SnatEntryOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatEntry) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.
func (o SnatEntryOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *SnatEntry) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type SnatEntryArrayOutput struct{ *pulumi.OutputState }

func (SnatEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnatEntry)(nil)).Elem()
}

func (o SnatEntryArrayOutput) ToSnatEntryArrayOutput() SnatEntryArrayOutput {
	return o
}

func (o SnatEntryArrayOutput) ToSnatEntryArrayOutputWithContext(ctx context.Context) SnatEntryArrayOutput {
	return o
}

func (o SnatEntryArrayOutput) Index(i pulumi.IntInput) SnatEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnatEntry {
		return vs[0].([]*SnatEntry)[vs[1].(int)]
	}).(SnatEntryOutput)
}

type SnatEntryMapOutput struct{ *pulumi.OutputState }

func (SnatEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnatEntry)(nil)).Elem()
}

func (o SnatEntryMapOutput) ToSnatEntryMapOutput() SnatEntryMapOutput {
	return o
}

func (o SnatEntryMapOutput) ToSnatEntryMapOutputWithContext(ctx context.Context) SnatEntryMapOutput {
	return o
}

func (o SnatEntryMapOutput) MapIndex(k pulumi.StringInput) SnatEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnatEntry {
		return vs[0].(map[string]*SnatEntry)[vs[1].(string)]
	}).(SnatEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnatEntryInput)(nil)).Elem(), &SnatEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatEntryArrayInput)(nil)).Elem(), SnatEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnatEntryMapInput)(nil)).Elem(), SnatEntryMap{})
	pulumi.RegisterOutputType(SnatEntryOutput{})
	pulumi.RegisterOutputType(SnatEntryArrayOutput{})
	pulumi.RegisterOutputType(SnatEntryMapOutput{})
}
