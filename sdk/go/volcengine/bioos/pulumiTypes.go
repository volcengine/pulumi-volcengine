// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package bioos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type ClusterSharedConfig struct {
	// Whether to enable a shared cluster.
	Enable bool `pulumi:"enable"`
}

// ClusterSharedConfigInput is an input type that accepts ClusterSharedConfigArgs and ClusterSharedConfigOutput values.
// You can construct a concrete instance of `ClusterSharedConfigInput` via:
//
//	ClusterSharedConfigArgs{...}
type ClusterSharedConfigInput interface {
	pulumi.Input

	ToClusterSharedConfigOutput() ClusterSharedConfigOutput
	ToClusterSharedConfigOutputWithContext(context.Context) ClusterSharedConfigOutput
}

type ClusterSharedConfigArgs struct {
	// Whether to enable a shared cluster.
	Enable pulumi.BoolInput `pulumi:"enable"`
}

func (ClusterSharedConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSharedConfig)(nil)).Elem()
}

func (i ClusterSharedConfigArgs) ToClusterSharedConfigOutput() ClusterSharedConfigOutput {
	return i.ToClusterSharedConfigOutputWithContext(context.Background())
}

func (i ClusterSharedConfigArgs) ToClusterSharedConfigOutputWithContext(ctx context.Context) ClusterSharedConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSharedConfigOutput)
}

// ClusterSharedConfigArrayInput is an input type that accepts ClusterSharedConfigArray and ClusterSharedConfigArrayOutput values.
// You can construct a concrete instance of `ClusterSharedConfigArrayInput` via:
//
//	ClusterSharedConfigArray{ ClusterSharedConfigArgs{...} }
type ClusterSharedConfigArrayInput interface {
	pulumi.Input

	ToClusterSharedConfigArrayOutput() ClusterSharedConfigArrayOutput
	ToClusterSharedConfigArrayOutputWithContext(context.Context) ClusterSharedConfigArrayOutput
}

type ClusterSharedConfigArray []ClusterSharedConfigInput

func (ClusterSharedConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterSharedConfig)(nil)).Elem()
}

func (i ClusterSharedConfigArray) ToClusterSharedConfigArrayOutput() ClusterSharedConfigArrayOutput {
	return i.ToClusterSharedConfigArrayOutputWithContext(context.Background())
}

func (i ClusterSharedConfigArray) ToClusterSharedConfigArrayOutputWithContext(ctx context.Context) ClusterSharedConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterSharedConfigArrayOutput)
}

type ClusterSharedConfigOutput struct{ *pulumi.OutputState }

func (ClusterSharedConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterSharedConfig)(nil)).Elem()
}

func (o ClusterSharedConfigOutput) ToClusterSharedConfigOutput() ClusterSharedConfigOutput {
	return o
}

func (o ClusterSharedConfigOutput) ToClusterSharedConfigOutputWithContext(ctx context.Context) ClusterSharedConfigOutput {
	return o
}

// Whether to enable a shared cluster.
func (o ClusterSharedConfigOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v ClusterSharedConfig) bool { return v.Enable }).(pulumi.BoolOutput)
}

type ClusterSharedConfigArrayOutput struct{ *pulumi.OutputState }

func (ClusterSharedConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterSharedConfig)(nil)).Elem()
}

func (o ClusterSharedConfigArrayOutput) ToClusterSharedConfigArrayOutput() ClusterSharedConfigArrayOutput {
	return o
}

func (o ClusterSharedConfigArrayOutput) ToClusterSharedConfigArrayOutputWithContext(ctx context.Context) ClusterSharedConfigArrayOutput {
	return o
}

func (o ClusterSharedConfigArrayOutput) Index(i pulumi.IntInput) ClusterSharedConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterSharedConfig {
		return vs[0].([]ClusterSharedConfig)[vs[1].(int)]
	}).(ClusterSharedConfigOutput)
}

type ClusterVkeConfig struct {
	// The id of the vke cluster.
	ClusterId string `pulumi:"clusterId"`
	// The name of the StorageClass that the vke cluster has installed.
	StorageClass string `pulumi:"storageClass"`
}

// ClusterVkeConfigInput is an input type that accepts ClusterVkeConfigArgs and ClusterVkeConfigOutput values.
// You can construct a concrete instance of `ClusterVkeConfigInput` via:
//
//	ClusterVkeConfigArgs{...}
type ClusterVkeConfigInput interface {
	pulumi.Input

	ToClusterVkeConfigOutput() ClusterVkeConfigOutput
	ToClusterVkeConfigOutputWithContext(context.Context) ClusterVkeConfigOutput
}

type ClusterVkeConfigArgs struct {
	// The id of the vke cluster.
	ClusterId pulumi.StringInput `pulumi:"clusterId"`
	// The name of the StorageClass that the vke cluster has installed.
	StorageClass pulumi.StringInput `pulumi:"storageClass"`
}

func (ClusterVkeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVkeConfig)(nil)).Elem()
}

func (i ClusterVkeConfigArgs) ToClusterVkeConfigOutput() ClusterVkeConfigOutput {
	return i.ToClusterVkeConfigOutputWithContext(context.Background())
}

func (i ClusterVkeConfigArgs) ToClusterVkeConfigOutputWithContext(ctx context.Context) ClusterVkeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVkeConfigOutput)
}

// ClusterVkeConfigArrayInput is an input type that accepts ClusterVkeConfigArray and ClusterVkeConfigArrayOutput values.
// You can construct a concrete instance of `ClusterVkeConfigArrayInput` via:
//
//	ClusterVkeConfigArray{ ClusterVkeConfigArgs{...} }
type ClusterVkeConfigArrayInput interface {
	pulumi.Input

	ToClusterVkeConfigArrayOutput() ClusterVkeConfigArrayOutput
	ToClusterVkeConfigArrayOutputWithContext(context.Context) ClusterVkeConfigArrayOutput
}

type ClusterVkeConfigArray []ClusterVkeConfigInput

func (ClusterVkeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterVkeConfig)(nil)).Elem()
}

func (i ClusterVkeConfigArray) ToClusterVkeConfigArrayOutput() ClusterVkeConfigArrayOutput {
	return i.ToClusterVkeConfigArrayOutputWithContext(context.Background())
}

func (i ClusterVkeConfigArray) ToClusterVkeConfigArrayOutputWithContext(ctx context.Context) ClusterVkeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClusterVkeConfigArrayOutput)
}

type ClusterVkeConfigOutput struct{ *pulumi.OutputState }

func (ClusterVkeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClusterVkeConfig)(nil)).Elem()
}

func (o ClusterVkeConfigOutput) ToClusterVkeConfigOutput() ClusterVkeConfigOutput {
	return o
}

func (o ClusterVkeConfigOutput) ToClusterVkeConfigOutputWithContext(ctx context.Context) ClusterVkeConfigOutput {
	return o
}

// The id of the vke cluster.
func (o ClusterVkeConfigOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterVkeConfig) string { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of the StorageClass that the vke cluster has installed.
func (o ClusterVkeConfigOutput) StorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v ClusterVkeConfig) string { return v.StorageClass }).(pulumi.StringOutput)
}

type ClusterVkeConfigArrayOutput struct{ *pulumi.OutputState }

func (ClusterVkeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClusterVkeConfig)(nil)).Elem()
}

func (o ClusterVkeConfigArrayOutput) ToClusterVkeConfigArrayOutput() ClusterVkeConfigArrayOutput {
	return o
}

func (o ClusterVkeConfigArrayOutput) ToClusterVkeConfigArrayOutputWithContext(ctx context.Context) ClusterVkeConfigArrayOutput {
	return o
}

func (o ClusterVkeConfigArrayOutput) Index(i pulumi.IntInput) ClusterVkeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClusterVkeConfig {
		return vs[0].([]ClusterVkeConfig)[vs[1].(int)]
	}).(ClusterVkeConfigOutput)
}

type ClustersItem struct {
	// Whether there is a bound workspace.
	Bound bool `pulumi:"bound"`
	// The description of the cluster.
	Description string `pulumi:"description"`
	// The id of the bioos cluster.
	Id string `pulumi:"id"`
	// The name of the cluster.
	Name string `pulumi:"name"`
	// whether it is a public cluster.
	Public bool `pulumi:"public"`
	// The start time of the cluster.
	StartTime int `pulumi:"startTime"`
	// The end time of the cluster.
	StoppedTime int `pulumi:"stoppedTime"`
	// The id of the vke cluster.
	VkeConfigId string `pulumi:"vkeConfigId"`
	// The name of the StorageClass that the vke cluster has installed.
	VkeConfigStorageClass string `pulumi:"vkeConfigStorageClass"`
}

// ClustersItemInput is an input type that accepts ClustersItemArgs and ClustersItemOutput values.
// You can construct a concrete instance of `ClustersItemInput` via:
//
//	ClustersItemArgs{...}
type ClustersItemInput interface {
	pulumi.Input

	ToClustersItemOutput() ClustersItemOutput
	ToClustersItemOutputWithContext(context.Context) ClustersItemOutput
}

type ClustersItemArgs struct {
	// Whether there is a bound workspace.
	Bound pulumi.BoolInput `pulumi:"bound"`
	// The description of the cluster.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the bioos cluster.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the cluster.
	Name pulumi.StringInput `pulumi:"name"`
	// whether it is a public cluster.
	Public pulumi.BoolInput `pulumi:"public"`
	// The start time of the cluster.
	StartTime pulumi.IntInput `pulumi:"startTime"`
	// The end time of the cluster.
	StoppedTime pulumi.IntInput `pulumi:"stoppedTime"`
	// The id of the vke cluster.
	VkeConfigId pulumi.StringInput `pulumi:"vkeConfigId"`
	// The name of the StorageClass that the vke cluster has installed.
	VkeConfigStorageClass pulumi.StringInput `pulumi:"vkeConfigStorageClass"`
}

func (ClustersItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClustersItem)(nil)).Elem()
}

func (i ClustersItemArgs) ToClustersItemOutput() ClustersItemOutput {
	return i.ToClustersItemOutputWithContext(context.Background())
}

func (i ClustersItemArgs) ToClustersItemOutputWithContext(ctx context.Context) ClustersItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersItemOutput)
}

// ClustersItemArrayInput is an input type that accepts ClustersItemArray and ClustersItemArrayOutput values.
// You can construct a concrete instance of `ClustersItemArrayInput` via:
//
//	ClustersItemArray{ ClustersItemArgs{...} }
type ClustersItemArrayInput interface {
	pulumi.Input

	ToClustersItemArrayOutput() ClustersItemArrayOutput
	ToClustersItemArrayOutputWithContext(context.Context) ClustersItemArrayOutput
}

type ClustersItemArray []ClustersItemInput

func (ClustersItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClustersItem)(nil)).Elem()
}

func (i ClustersItemArray) ToClustersItemArrayOutput() ClustersItemArrayOutput {
	return i.ToClustersItemArrayOutputWithContext(context.Background())
}

func (i ClustersItemArray) ToClustersItemArrayOutputWithContext(ctx context.Context) ClustersItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClustersItemArrayOutput)
}

type ClustersItemOutput struct{ *pulumi.OutputState }

func (ClustersItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClustersItem)(nil)).Elem()
}

func (o ClustersItemOutput) ToClustersItemOutput() ClustersItemOutput {
	return o
}

func (o ClustersItemOutput) ToClustersItemOutputWithContext(ctx context.Context) ClustersItemOutput {
	return o
}

// Whether there is a bound workspace.
func (o ClustersItemOutput) Bound() pulumi.BoolOutput {
	return o.ApplyT(func(v ClustersItem) bool { return v.Bound }).(pulumi.BoolOutput)
}

// The description of the cluster.
func (o ClustersItemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersItem) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the bioos cluster.
func (o ClustersItemOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersItem) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the cluster.
func (o ClustersItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersItem) string { return v.Name }).(pulumi.StringOutput)
}

// whether it is a public cluster.
func (o ClustersItemOutput) Public() pulumi.BoolOutput {
	return o.ApplyT(func(v ClustersItem) bool { return v.Public }).(pulumi.BoolOutput)
}

// The start time of the cluster.
func (o ClustersItemOutput) StartTime() pulumi.IntOutput {
	return o.ApplyT(func(v ClustersItem) int { return v.StartTime }).(pulumi.IntOutput)
}

// The end time of the cluster.
func (o ClustersItemOutput) StoppedTime() pulumi.IntOutput {
	return o.ApplyT(func(v ClustersItem) int { return v.StoppedTime }).(pulumi.IntOutput)
}

// The id of the vke cluster.
func (o ClustersItemOutput) VkeConfigId() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersItem) string { return v.VkeConfigId }).(pulumi.StringOutput)
}

// The name of the StorageClass that the vke cluster has installed.
func (o ClustersItemOutput) VkeConfigStorageClass() pulumi.StringOutput {
	return o.ApplyT(func(v ClustersItem) string { return v.VkeConfigStorageClass }).(pulumi.StringOutput)
}

type ClustersItemArrayOutput struct{ *pulumi.OutputState }

func (ClustersItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClustersItem)(nil)).Elem()
}

func (o ClustersItemArrayOutput) ToClustersItemArrayOutput() ClustersItemArrayOutput {
	return o
}

func (o ClustersItemArrayOutput) ToClustersItemArrayOutputWithContext(ctx context.Context) ClustersItemArrayOutput {
	return o
}

func (o ClustersItemArrayOutput) Index(i pulumi.IntInput) ClustersItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClustersItem {
		return vs[0].([]ClustersItem)[vs[1].(int)]
	}).(ClustersItemOutput)
}

type WorkspacesItem struct {
	// The URL of the cover.
	CoverDownloadUrl string `pulumi:"coverDownloadUrl"`
	// The creation time of the workspace.
	CreateTime int `pulumi:"createTime"`
	// The description of the workspace.
	Description string `pulumi:"description"`
	// The id of the workspace.
	Id string `pulumi:"id"`
	// The name of the workspace.
	Name string `pulumi:"name"`
	// The name of the owner of the workspace.
	OwnerName string `pulumi:"ownerName"`
	// The role of the user.
	Role string `pulumi:"role"`
	// S3 bucket address.
	S3Bucket string `pulumi:"s3Bucket"`
	// The update time of the workspace.
	UpdateTime int `pulumi:"updateTime"`
}

// WorkspacesItemInput is an input type that accepts WorkspacesItemArgs and WorkspacesItemOutput values.
// You can construct a concrete instance of `WorkspacesItemInput` via:
//
//	WorkspacesItemArgs{...}
type WorkspacesItemInput interface {
	pulumi.Input

	ToWorkspacesItemOutput() WorkspacesItemOutput
	ToWorkspacesItemOutputWithContext(context.Context) WorkspacesItemOutput
}

type WorkspacesItemArgs struct {
	// The URL of the cover.
	CoverDownloadUrl pulumi.StringInput `pulumi:"coverDownloadUrl"`
	// The creation time of the workspace.
	CreateTime pulumi.IntInput `pulumi:"createTime"`
	// The description of the workspace.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the workspace.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the workspace.
	Name pulumi.StringInput `pulumi:"name"`
	// The name of the owner of the workspace.
	OwnerName pulumi.StringInput `pulumi:"ownerName"`
	// The role of the user.
	Role pulumi.StringInput `pulumi:"role"`
	// S3 bucket address.
	S3Bucket pulumi.StringInput `pulumi:"s3Bucket"`
	// The update time of the workspace.
	UpdateTime pulumi.IntInput `pulumi:"updateTime"`
}

func (WorkspacesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspacesItem)(nil)).Elem()
}

func (i WorkspacesItemArgs) ToWorkspacesItemOutput() WorkspacesItemOutput {
	return i.ToWorkspacesItemOutputWithContext(context.Background())
}

func (i WorkspacesItemArgs) ToWorkspacesItemOutputWithContext(ctx context.Context) WorkspacesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspacesItemOutput)
}

// WorkspacesItemArrayInput is an input type that accepts WorkspacesItemArray and WorkspacesItemArrayOutput values.
// You can construct a concrete instance of `WorkspacesItemArrayInput` via:
//
//	WorkspacesItemArray{ WorkspacesItemArgs{...} }
type WorkspacesItemArrayInput interface {
	pulumi.Input

	ToWorkspacesItemArrayOutput() WorkspacesItemArrayOutput
	ToWorkspacesItemArrayOutputWithContext(context.Context) WorkspacesItemArrayOutput
}

type WorkspacesItemArray []WorkspacesItemInput

func (WorkspacesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkspacesItem)(nil)).Elem()
}

func (i WorkspacesItemArray) ToWorkspacesItemArrayOutput() WorkspacesItemArrayOutput {
	return i.ToWorkspacesItemArrayOutputWithContext(context.Background())
}

func (i WorkspacesItemArray) ToWorkspacesItemArrayOutputWithContext(ctx context.Context) WorkspacesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkspacesItemArrayOutput)
}

type WorkspacesItemOutput struct{ *pulumi.OutputState }

func (WorkspacesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*WorkspacesItem)(nil)).Elem()
}

func (o WorkspacesItemOutput) ToWorkspacesItemOutput() WorkspacesItemOutput {
	return o
}

func (o WorkspacesItemOutput) ToWorkspacesItemOutputWithContext(ctx context.Context) WorkspacesItemOutput {
	return o
}

// The URL of the cover.
func (o WorkspacesItemOutput) CoverDownloadUrl() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacesItem) string { return v.CoverDownloadUrl }).(pulumi.StringOutput)
}

// The creation time of the workspace.
func (o WorkspacesItemOutput) CreateTime() pulumi.IntOutput {
	return o.ApplyT(func(v WorkspacesItem) int { return v.CreateTime }).(pulumi.IntOutput)
}

// The description of the workspace.
func (o WorkspacesItemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacesItem) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the workspace.
func (o WorkspacesItemOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacesItem) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the workspace.
func (o WorkspacesItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacesItem) string { return v.Name }).(pulumi.StringOutput)
}

// The name of the owner of the workspace.
func (o WorkspacesItemOutput) OwnerName() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacesItem) string { return v.OwnerName }).(pulumi.StringOutput)
}

// The role of the user.
func (o WorkspacesItemOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacesItem) string { return v.Role }).(pulumi.StringOutput)
}

// S3 bucket address.
func (o WorkspacesItemOutput) S3Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v WorkspacesItem) string { return v.S3Bucket }).(pulumi.StringOutput)
}

// The update time of the workspace.
func (o WorkspacesItemOutput) UpdateTime() pulumi.IntOutput {
	return o.ApplyT(func(v WorkspacesItem) int { return v.UpdateTime }).(pulumi.IntOutput)
}

type WorkspacesItemArrayOutput struct{ *pulumi.OutputState }

func (WorkspacesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]WorkspacesItem)(nil)).Elem()
}

func (o WorkspacesItemArrayOutput) ToWorkspacesItemArrayOutput() WorkspacesItemArrayOutput {
	return o
}

func (o WorkspacesItemArrayOutput) ToWorkspacesItemArrayOutputWithContext(ctx context.Context) WorkspacesItemArrayOutput {
	return o
}

func (o WorkspacesItemArrayOutput) Index(i pulumi.IntInput) WorkspacesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) WorkspacesItem {
		return vs[0].([]WorkspacesItem)[vs[1].(int)]
	}).(WorkspacesItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSharedConfigInput)(nil)).Elem(), ClusterSharedConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterSharedConfigArrayInput)(nil)).Elem(), ClusterSharedConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVkeConfigInput)(nil)).Elem(), ClusterVkeConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClusterVkeConfigArrayInput)(nil)).Elem(), ClusterVkeConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersItemInput)(nil)).Elem(), ClustersItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClustersItemArrayInput)(nil)).Elem(), ClustersItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspacesItemInput)(nil)).Elem(), WorkspacesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkspacesItemArrayInput)(nil)).Elem(), WorkspacesItemArray{})
	pulumi.RegisterOutputType(ClusterSharedConfigOutput{})
	pulumi.RegisterOutputType(ClusterSharedConfigArrayOutput{})
	pulumi.RegisterOutputType(ClusterVkeConfigOutput{})
	pulumi.RegisterOutputType(ClusterVkeConfigArrayOutput{})
	pulumi.RegisterOutputType(ClustersItemOutput{})
	pulumi.RegisterOutputType(ClustersItemArrayOutput{})
	pulumi.RegisterOutputType(WorkspacesItemOutput{})
	pulumi.RegisterOutputType(WorkspacesItemArrayOutput{})
}
