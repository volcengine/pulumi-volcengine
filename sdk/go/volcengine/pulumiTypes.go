// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package volcengine

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type ProviderAssumeRole struct {
	// The session name to use when making the AssumeRole call.
	AssumeRoleSessionName string `pulumi:"assumeRoleSessionName"`
	// The TRN of the role to assume.
	AssumeRoleTrn string `pulumi:"assumeRoleTrn"`
	// The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
	DurationSeconds int `pulumi:"durationSeconds"`
	// A more restrictive policy when making the AssumeRole call.
	Policy *string `pulumi:"policy"`
}

// ProviderAssumeRoleInput is an input type that accepts ProviderAssumeRoleArgs and ProviderAssumeRoleOutput values.
// You can construct a concrete instance of `ProviderAssumeRoleInput` via:
//
//	ProviderAssumeRoleArgs{...}
type ProviderAssumeRoleInput interface {
	pulumi.Input

	ToProviderAssumeRoleOutput() ProviderAssumeRoleOutput
	ToProviderAssumeRoleOutputWithContext(context.Context) ProviderAssumeRoleOutput
}

type ProviderAssumeRoleArgs struct {
	// The session name to use when making the AssumeRole call.
	AssumeRoleSessionName pulumi.StringInput `pulumi:"assumeRoleSessionName"`
	// The TRN of the role to assume.
	AssumeRoleTrn pulumi.StringInput `pulumi:"assumeRoleTrn"`
	// The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
	DurationSeconds pulumi.IntInput `pulumi:"durationSeconds"`
	// A more restrictive policy when making the AssumeRole call.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
}

func (ProviderAssumeRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAssumeRole)(nil)).Elem()
}

func (i ProviderAssumeRoleArgs) ToProviderAssumeRoleOutput() ProviderAssumeRoleOutput {
	return i.ToProviderAssumeRoleOutputWithContext(context.Background())
}

func (i ProviderAssumeRoleArgs) ToProviderAssumeRoleOutputWithContext(ctx context.Context) ProviderAssumeRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAssumeRoleOutput)
}

func (i ProviderAssumeRoleArgs) ToProviderAssumeRolePtrOutput() ProviderAssumeRolePtrOutput {
	return i.ToProviderAssumeRolePtrOutputWithContext(context.Background())
}

func (i ProviderAssumeRoleArgs) ToProviderAssumeRolePtrOutputWithContext(ctx context.Context) ProviderAssumeRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAssumeRoleOutput).ToProviderAssumeRolePtrOutputWithContext(ctx)
}

// ProviderAssumeRolePtrInput is an input type that accepts ProviderAssumeRoleArgs, ProviderAssumeRolePtr and ProviderAssumeRolePtrOutput values.
// You can construct a concrete instance of `ProviderAssumeRolePtrInput` via:
//
//	        ProviderAssumeRoleArgs{...}
//
//	or:
//
//	        nil
type ProviderAssumeRolePtrInput interface {
	pulumi.Input

	ToProviderAssumeRolePtrOutput() ProviderAssumeRolePtrOutput
	ToProviderAssumeRolePtrOutputWithContext(context.Context) ProviderAssumeRolePtrOutput
}

type providerAssumeRolePtrType ProviderAssumeRoleArgs

func ProviderAssumeRolePtr(v *ProviderAssumeRoleArgs) ProviderAssumeRolePtrInput {
	return (*providerAssumeRolePtrType)(v)
}

func (*providerAssumeRolePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAssumeRole)(nil)).Elem()
}

func (i *providerAssumeRolePtrType) ToProviderAssumeRolePtrOutput() ProviderAssumeRolePtrOutput {
	return i.ToProviderAssumeRolePtrOutputWithContext(context.Background())
}

func (i *providerAssumeRolePtrType) ToProviderAssumeRolePtrOutputWithContext(ctx context.Context) ProviderAssumeRolePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAssumeRolePtrOutput)
}

type ProviderAssumeRoleOutput struct{ *pulumi.OutputState }

func (ProviderAssumeRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAssumeRole)(nil)).Elem()
}

func (o ProviderAssumeRoleOutput) ToProviderAssumeRoleOutput() ProviderAssumeRoleOutput {
	return o
}

func (o ProviderAssumeRoleOutput) ToProviderAssumeRoleOutputWithContext(ctx context.Context) ProviderAssumeRoleOutput {
	return o
}

func (o ProviderAssumeRoleOutput) ToProviderAssumeRolePtrOutput() ProviderAssumeRolePtrOutput {
	return o.ToProviderAssumeRolePtrOutputWithContext(context.Background())
}

func (o ProviderAssumeRoleOutput) ToProviderAssumeRolePtrOutputWithContext(ctx context.Context) ProviderAssumeRolePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAssumeRole) *ProviderAssumeRole {
		return &v
	}).(ProviderAssumeRolePtrOutput)
}

// The session name to use when making the AssumeRole call.
func (o ProviderAssumeRoleOutput) AssumeRoleSessionName() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAssumeRole) string { return v.AssumeRoleSessionName }).(pulumi.StringOutput)
}

// The TRN of the role to assume.
func (o ProviderAssumeRoleOutput) AssumeRoleTrn() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAssumeRole) string { return v.AssumeRoleTrn }).(pulumi.StringOutput)
}

// The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
func (o ProviderAssumeRoleOutput) DurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ProviderAssumeRole) int { return v.DurationSeconds }).(pulumi.IntOutput)
}

// A more restrictive policy when making the AssumeRole call.
func (o ProviderAssumeRoleOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAssumeRole) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

type ProviderAssumeRolePtrOutput struct{ *pulumi.OutputState }

func (ProviderAssumeRolePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAssumeRole)(nil)).Elem()
}

func (o ProviderAssumeRolePtrOutput) ToProviderAssumeRolePtrOutput() ProviderAssumeRolePtrOutput {
	return o
}

func (o ProviderAssumeRolePtrOutput) ToProviderAssumeRolePtrOutputWithContext(ctx context.Context) ProviderAssumeRolePtrOutput {
	return o
}

func (o ProviderAssumeRolePtrOutput) Elem() ProviderAssumeRoleOutput {
	return o.ApplyT(func(v *ProviderAssumeRole) ProviderAssumeRole {
		if v != nil {
			return *v
		}
		var ret ProviderAssumeRole
		return ret
	}).(ProviderAssumeRoleOutput)
}

// The session name to use when making the AssumeRole call.
func (o ProviderAssumeRolePtrOutput) AssumeRoleSessionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAssumeRole) *string {
		if v == nil {
			return nil
		}
		return &v.AssumeRoleSessionName
	}).(pulumi.StringPtrOutput)
}

// The TRN of the role to assume.
func (o ProviderAssumeRolePtrOutput) AssumeRoleTrn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAssumeRole) *string {
		if v == nil {
			return nil
		}
		return &v.AssumeRoleTrn
	}).(pulumi.StringPtrOutput)
}

// The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
func (o ProviderAssumeRolePtrOutput) DurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProviderAssumeRole) *int {
		if v == nil {
			return nil
		}
		return &v.DurationSeconds
	}).(pulumi.IntPtrOutput)
}

// A more restrictive policy when making the AssumeRole call.
func (o ProviderAssumeRolePtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAssumeRole) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

type ProviderAssumeRoleWithOidc struct {
	// The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
	DurationSeconds int `pulumi:"durationSeconds"`
	// The OIDC token to use when making the AssumeRole call.
	OidcToken string `pulumi:"oidcToken"`
	// A more restrictive policy when making the AssumeRole call.
	Policy *string `pulumi:"policy"`
	// The session name to use when making the AssumeRole call.
	RoleSessionName string `pulumi:"roleSessionName"`
	// The TRN of the role to assume, in the format `trn:iam:${AccountId}:role/${RoleName}`.
	RoleTrn string `pulumi:"roleTrn"`
}

// ProviderAssumeRoleWithOidcInput is an input type that accepts ProviderAssumeRoleWithOidcArgs and ProviderAssumeRoleWithOidcOutput values.
// You can construct a concrete instance of `ProviderAssumeRoleWithOidcInput` via:
//
//	ProviderAssumeRoleWithOidcArgs{...}
type ProviderAssumeRoleWithOidcInput interface {
	pulumi.Input

	ToProviderAssumeRoleWithOidcOutput() ProviderAssumeRoleWithOidcOutput
	ToProviderAssumeRoleWithOidcOutputWithContext(context.Context) ProviderAssumeRoleWithOidcOutput
}

type ProviderAssumeRoleWithOidcArgs struct {
	// The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
	DurationSeconds pulumi.IntInput `pulumi:"durationSeconds"`
	// The OIDC token to use when making the AssumeRole call.
	OidcToken pulumi.StringInput `pulumi:"oidcToken"`
	// A more restrictive policy when making the AssumeRole call.
	Policy pulumi.StringPtrInput `pulumi:"policy"`
	// The session name to use when making the AssumeRole call.
	RoleSessionName pulumi.StringInput `pulumi:"roleSessionName"`
	// The TRN of the role to assume, in the format `trn:iam:${AccountId}:role/${RoleName}`.
	RoleTrn pulumi.StringInput `pulumi:"roleTrn"`
}

func (ProviderAssumeRoleWithOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAssumeRoleWithOidc)(nil)).Elem()
}

func (i ProviderAssumeRoleWithOidcArgs) ToProviderAssumeRoleWithOidcOutput() ProviderAssumeRoleWithOidcOutput {
	return i.ToProviderAssumeRoleWithOidcOutputWithContext(context.Background())
}

func (i ProviderAssumeRoleWithOidcArgs) ToProviderAssumeRoleWithOidcOutputWithContext(ctx context.Context) ProviderAssumeRoleWithOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAssumeRoleWithOidcOutput)
}

func (i ProviderAssumeRoleWithOidcArgs) ToProviderAssumeRoleWithOidcPtrOutput() ProviderAssumeRoleWithOidcPtrOutput {
	return i.ToProviderAssumeRoleWithOidcPtrOutputWithContext(context.Background())
}

func (i ProviderAssumeRoleWithOidcArgs) ToProviderAssumeRoleWithOidcPtrOutputWithContext(ctx context.Context) ProviderAssumeRoleWithOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAssumeRoleWithOidcOutput).ToProviderAssumeRoleWithOidcPtrOutputWithContext(ctx)
}

// ProviderAssumeRoleWithOidcPtrInput is an input type that accepts ProviderAssumeRoleWithOidcArgs, ProviderAssumeRoleWithOidcPtr and ProviderAssumeRoleWithOidcPtrOutput values.
// You can construct a concrete instance of `ProviderAssumeRoleWithOidcPtrInput` via:
//
//	        ProviderAssumeRoleWithOidcArgs{...}
//
//	or:
//
//	        nil
type ProviderAssumeRoleWithOidcPtrInput interface {
	pulumi.Input

	ToProviderAssumeRoleWithOidcPtrOutput() ProviderAssumeRoleWithOidcPtrOutput
	ToProviderAssumeRoleWithOidcPtrOutputWithContext(context.Context) ProviderAssumeRoleWithOidcPtrOutput
}

type providerAssumeRoleWithOidcPtrType ProviderAssumeRoleWithOidcArgs

func ProviderAssumeRoleWithOidcPtr(v *ProviderAssumeRoleWithOidcArgs) ProviderAssumeRoleWithOidcPtrInput {
	return (*providerAssumeRoleWithOidcPtrType)(v)
}

func (*providerAssumeRoleWithOidcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAssumeRoleWithOidc)(nil)).Elem()
}

func (i *providerAssumeRoleWithOidcPtrType) ToProviderAssumeRoleWithOidcPtrOutput() ProviderAssumeRoleWithOidcPtrOutput {
	return i.ToProviderAssumeRoleWithOidcPtrOutputWithContext(context.Background())
}

func (i *providerAssumeRoleWithOidcPtrType) ToProviderAssumeRoleWithOidcPtrOutputWithContext(ctx context.Context) ProviderAssumeRoleWithOidcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderAssumeRoleWithOidcPtrOutput)
}

type ProviderAssumeRoleWithOidcOutput struct{ *pulumi.OutputState }

func (ProviderAssumeRoleWithOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderAssumeRoleWithOidc)(nil)).Elem()
}

func (o ProviderAssumeRoleWithOidcOutput) ToProviderAssumeRoleWithOidcOutput() ProviderAssumeRoleWithOidcOutput {
	return o
}

func (o ProviderAssumeRoleWithOidcOutput) ToProviderAssumeRoleWithOidcOutputWithContext(ctx context.Context) ProviderAssumeRoleWithOidcOutput {
	return o
}

func (o ProviderAssumeRoleWithOidcOutput) ToProviderAssumeRoleWithOidcPtrOutput() ProviderAssumeRoleWithOidcPtrOutput {
	return o.ToProviderAssumeRoleWithOidcPtrOutputWithContext(context.Background())
}

func (o ProviderAssumeRoleWithOidcOutput) ToProviderAssumeRoleWithOidcPtrOutputWithContext(ctx context.Context) ProviderAssumeRoleWithOidcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ProviderAssumeRoleWithOidc) *ProviderAssumeRoleWithOidc {
		return &v
	}).(ProviderAssumeRoleWithOidcPtrOutput)
}

// The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
func (o ProviderAssumeRoleWithOidcOutput) DurationSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v ProviderAssumeRoleWithOidc) int { return v.DurationSeconds }).(pulumi.IntOutput)
}

// The OIDC token to use when making the AssumeRole call.
func (o ProviderAssumeRoleWithOidcOutput) OidcToken() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAssumeRoleWithOidc) string { return v.OidcToken }).(pulumi.StringOutput)
}

// A more restrictive policy when making the AssumeRole call.
func (o ProviderAssumeRoleWithOidcOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProviderAssumeRoleWithOidc) *string { return v.Policy }).(pulumi.StringPtrOutput)
}

// The session name to use when making the AssumeRole call.
func (o ProviderAssumeRoleWithOidcOutput) RoleSessionName() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAssumeRoleWithOidc) string { return v.RoleSessionName }).(pulumi.StringOutput)
}

// The TRN of the role to assume, in the format `trn:iam:${AccountId}:role/${RoleName}`.
func (o ProviderAssumeRoleWithOidcOutput) RoleTrn() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderAssumeRoleWithOidc) string { return v.RoleTrn }).(pulumi.StringOutput)
}

type ProviderAssumeRoleWithOidcPtrOutput struct{ *pulumi.OutputState }

func (ProviderAssumeRoleWithOidcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProviderAssumeRoleWithOidc)(nil)).Elem()
}

func (o ProviderAssumeRoleWithOidcPtrOutput) ToProviderAssumeRoleWithOidcPtrOutput() ProviderAssumeRoleWithOidcPtrOutput {
	return o
}

func (o ProviderAssumeRoleWithOidcPtrOutput) ToProviderAssumeRoleWithOidcPtrOutputWithContext(ctx context.Context) ProviderAssumeRoleWithOidcPtrOutput {
	return o
}

func (o ProviderAssumeRoleWithOidcPtrOutput) Elem() ProviderAssumeRoleWithOidcOutput {
	return o.ApplyT(func(v *ProviderAssumeRoleWithOidc) ProviderAssumeRoleWithOidc {
		if v != nil {
			return *v
		}
		var ret ProviderAssumeRoleWithOidc
		return ret
	}).(ProviderAssumeRoleWithOidcOutput)
}

// The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
func (o ProviderAssumeRoleWithOidcPtrOutput) DurationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ProviderAssumeRoleWithOidc) *int {
		if v == nil {
			return nil
		}
		return &v.DurationSeconds
	}).(pulumi.IntPtrOutput)
}

// The OIDC token to use when making the AssumeRole call.
func (o ProviderAssumeRoleWithOidcPtrOutput) OidcToken() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAssumeRoleWithOidc) *string {
		if v == nil {
			return nil
		}
		return &v.OidcToken
	}).(pulumi.StringPtrOutput)
}

// A more restrictive policy when making the AssumeRole call.
func (o ProviderAssumeRoleWithOidcPtrOutput) Policy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAssumeRoleWithOidc) *string {
		if v == nil {
			return nil
		}
		return v.Policy
	}).(pulumi.StringPtrOutput)
}

// The session name to use when making the AssumeRole call.
func (o ProviderAssumeRoleWithOidcPtrOutput) RoleSessionName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAssumeRoleWithOidc) *string {
		if v == nil {
			return nil
		}
		return &v.RoleSessionName
	}).(pulumi.StringPtrOutput)
}

// The TRN of the role to assume, in the format `trn:iam:${AccountId}:role/${RoleName}`.
func (o ProviderAssumeRoleWithOidcPtrOutput) RoleTrn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProviderAssumeRoleWithOidc) *string {
		if v == nil {
			return nil
		}
		return &v.RoleTrn
	}).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAssumeRoleInput)(nil)).Elem(), ProviderAssumeRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAssumeRolePtrInput)(nil)).Elem(), ProviderAssumeRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAssumeRoleWithOidcInput)(nil)).Elem(), ProviderAssumeRoleWithOidcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderAssumeRoleWithOidcPtrInput)(nil)).Elem(), ProviderAssumeRoleWithOidcArgs{})
	pulumi.RegisterOutputType(ProviderAssumeRoleOutput{})
	pulumi.RegisterOutputType(ProviderAssumeRolePtrOutput{})
	pulumi.RegisterOutputType(ProviderAssumeRoleWithOidcOutput{})
	pulumi.RegisterOutputType(ProviderAssumeRoleWithOidcPtrOutput{})
}
