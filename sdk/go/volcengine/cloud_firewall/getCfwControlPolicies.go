// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cfw control policies
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloud_firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cloud_firewall.GetCfwControlPolicies(ctx, &cloud_firewall.GetCfwControlPoliciesArgs{
//				Actions: []string{
//					"deny",
//				},
//				Direction: "in",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetCfwControlPolicies(ctx *pulumi.Context, args *GetCfwControlPoliciesArgs, opts ...pulumi.InvokeOption) (*GetCfwControlPoliciesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCfwControlPoliciesResult
	err := ctx.Invoke("volcengine:cloud_firewall/getCfwControlPolicies:getCfwControlPolicies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCfwControlPolicies.
type GetCfwControlPoliciesArgs struct {
	// The action list of the control policy. Valid values: `accept`, `deny`, `monitor`.
	Actions []string `pulumi:"actions"`
	// The description of the control policy. This field support fuzzy query.
	Description *string `pulumi:"description"`
	// The destination of the control policy. This field support fuzzy query.
	Destination *string `pulumi:"destination"`
	// The direction of control policy. Valid values: `in`, `out`.
	Direction string `pulumi:"direction"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The proto list of the control policy. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destinationType is `domain`, The proto must be `TCP`.
	Protos []string `pulumi:"protos"`
	// The repeat type of the control policy. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
	RepeatTypes []string `pulumi:"repeatTypes"`
	// The rule id of the control policy. This field support fuzzy query.
	RuleId *string `pulumi:"ruleId"`
	// The source of the control policy. This field support fuzzy query.
	Source *string `pulumi:"source"`
	// The enable status list of the control policy.
	Statuses []bool `pulumi:"statuses"`
}

// A collection of values returned by getCfwControlPolicies.
type GetCfwControlPoliciesResult struct {
	// The action of the control policy.
	Actions []string `pulumi:"actions"`
	// The collection of query.
	ControlPolicies []GetCfwControlPoliciesControlPolicy `pulumi:"controlPolicies"`
	// The description of the control policy.
	Description *string `pulumi:"description"`
	// The destination of the control policy.
	Destination *string `pulumi:"destination"`
	// The direction of the control policy.
	Direction string `pulumi:"direction"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The proto of the control policy.
	Protos []string `pulumi:"protos"`
	// The repeat type of the control policy.
	RepeatTypes []string `pulumi:"repeatTypes"`
	// The id of the control policy.
	RuleId *string `pulumi:"ruleId"`
	// The source of the control policy.
	Source *string `pulumi:"source"`
	// Whether to enable the control policy.
	Statuses []bool `pulumi:"statuses"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetCfwControlPoliciesOutput(ctx *pulumi.Context, args GetCfwControlPoliciesOutputArgs, opts ...pulumi.InvokeOption) GetCfwControlPoliciesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCfwControlPoliciesResult, error) {
			args := v.(GetCfwControlPoliciesArgs)
			r, err := GetCfwControlPolicies(ctx, &args, opts...)
			var s GetCfwControlPoliciesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCfwControlPoliciesResultOutput)
}

// A collection of arguments for invoking getCfwControlPolicies.
type GetCfwControlPoliciesOutputArgs struct {
	// The action list of the control policy. Valid values: `accept`, `deny`, `monitor`.
	Actions pulumi.StringArrayInput `pulumi:"actions"`
	// The description of the control policy. This field support fuzzy query.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The destination of the control policy. This field support fuzzy query.
	Destination pulumi.StringPtrInput `pulumi:"destination"`
	// The direction of control policy. Valid values: `in`, `out`.
	Direction pulumi.StringInput `pulumi:"direction"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The proto list of the control policy. Valid values: `TCP`, `ICMP`, `UDP`, `ANY`. When the destinationType is `domain`, The proto must be `TCP`.
	Protos pulumi.StringArrayInput `pulumi:"protos"`
	// The repeat type of the control policy. Valid values: `Permanent`, `Once`, `Daily`, `Weekly`, `Monthly`.
	RepeatTypes pulumi.StringArrayInput `pulumi:"repeatTypes"`
	// The rule id of the control policy. This field support fuzzy query.
	RuleId pulumi.StringPtrInput `pulumi:"ruleId"`
	// The source of the control policy. This field support fuzzy query.
	Source pulumi.StringPtrInput `pulumi:"source"`
	// The enable status list of the control policy.
	Statuses pulumi.BoolArrayInput `pulumi:"statuses"`
}

func (GetCfwControlPoliciesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCfwControlPoliciesArgs)(nil)).Elem()
}

// A collection of values returned by getCfwControlPolicies.
type GetCfwControlPoliciesResultOutput struct{ *pulumi.OutputState }

func (GetCfwControlPoliciesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCfwControlPoliciesResult)(nil)).Elem()
}

func (o GetCfwControlPoliciesResultOutput) ToGetCfwControlPoliciesResultOutput() GetCfwControlPoliciesResultOutput {
	return o
}

func (o GetCfwControlPoliciesResultOutput) ToGetCfwControlPoliciesResultOutputWithContext(ctx context.Context) GetCfwControlPoliciesResultOutput {
	return o
}

// The action of the control policy.
func (o GetCfwControlPoliciesResultOutput) Actions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) []string { return v.Actions }).(pulumi.StringArrayOutput)
}

// The collection of query.
func (o GetCfwControlPoliciesResultOutput) ControlPolicies() GetCfwControlPoliciesControlPolicyArrayOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) []GetCfwControlPoliciesControlPolicy { return v.ControlPolicies }).(GetCfwControlPoliciesControlPolicyArrayOutput)
}

// The description of the control policy.
func (o GetCfwControlPoliciesResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination of the control policy.
func (o GetCfwControlPoliciesResultOutput) Destination() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) *string { return v.Destination }).(pulumi.StringPtrOutput)
}

// The direction of the control policy.
func (o GetCfwControlPoliciesResultOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) string { return v.Direction }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCfwControlPoliciesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCfwControlPoliciesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The proto of the control policy.
func (o GetCfwControlPoliciesResultOutput) Protos() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) []string { return v.Protos }).(pulumi.StringArrayOutput)
}

// The repeat type of the control policy.
func (o GetCfwControlPoliciesResultOutput) RepeatTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) []string { return v.RepeatTypes }).(pulumi.StringArrayOutput)
}

// The id of the control policy.
func (o GetCfwControlPoliciesResultOutput) RuleId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) *string { return v.RuleId }).(pulumi.StringPtrOutput)
}

// The source of the control policy.
func (o GetCfwControlPoliciesResultOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) *string { return v.Source }).(pulumi.StringPtrOutput)
}

// Whether to enable the control policy.
func (o GetCfwControlPoliciesResultOutput) Statuses() pulumi.BoolArrayOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) []bool { return v.Statuses }).(pulumi.BoolArrayOutput)
}

// The total count of query.
func (o GetCfwControlPoliciesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetCfwControlPoliciesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCfwControlPoliciesResultOutput{})
}
