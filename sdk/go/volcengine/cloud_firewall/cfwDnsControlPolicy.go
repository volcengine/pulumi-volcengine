// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_firewall

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cfw dns control policy
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cloud_firewall"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cloud_firewall.NewCfwDnsControlPolicy(ctx, "fooCfwDnsControlPolicy", &cloud_firewall.CfwDnsControlPolicyArgs{
//				Description:     pulumi.String("acc-test-dns-control-policy"),
//				DestinationType: pulumi.String("domain"),
//				Destination:     pulumi.String("www.test.com"),
//				Sources: cloud_firewall.CfwDnsControlPolicySourceArray{
//					&cloud_firewall.CfwDnsControlPolicySourceArgs{
//						VpcId:  fooVpc.ID(),
//						Region: pulumi.String("cn-beijing"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DnsControlPolicy can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy default resource_id
// ```
type CfwDnsControlPolicy struct {
	pulumi.CustomResourceState

	// The account id of the dns control policy.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The description of the dns control policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The destination of the dns control policy.
	Destination pulumi.StringOutput `pulumi:"destination"`
	// The destination type of the dns control policy. Valid values: `group`, `domain`.
	DestinationType pulumi.StringOutput `pulumi:"destinationType"`
	// The hit count of the dns control policy.
	HitCnt pulumi.IntOutput `pulumi:"hitCnt"`
	// The internet firewall id of the control policy.
	InternetFirewallId pulumi.StringOutput `pulumi:"internetFirewallId"`
	// The last hit time of the dns control policy. Unix timestamp.
	LastHitTime pulumi.IntOutput `pulumi:"lastHitTime"`
	// The source vpc list of the dns control policy.
	Sources CfwDnsControlPolicySourceArrayOutput `pulumi:"sources"`
	// Whether to enable the dns control policy.
	Status pulumi.BoolOutput `pulumi:"status"`
	// The use count of the dns control policy.
	UseCount pulumi.IntOutput `pulumi:"useCount"`
}

// NewCfwDnsControlPolicy registers a new resource with the given unique name, arguments, and options.
func NewCfwDnsControlPolicy(ctx *pulumi.Context,
	name string, args *CfwDnsControlPolicyArgs, opts ...pulumi.ResourceOption) (*CfwDnsControlPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Destination == nil {
		return nil, errors.New("invalid value for required argument 'Destination'")
	}
	if args.DestinationType == nil {
		return nil, errors.New("invalid value for required argument 'DestinationType'")
	}
	if args.Sources == nil {
		return nil, errors.New("invalid value for required argument 'Sources'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CfwDnsControlPolicy
	err := ctx.RegisterResource("volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCfwDnsControlPolicy gets an existing CfwDnsControlPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCfwDnsControlPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CfwDnsControlPolicyState, opts ...pulumi.ResourceOption) (*CfwDnsControlPolicy, error) {
	var resource CfwDnsControlPolicy
	err := ctx.ReadResource("volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CfwDnsControlPolicy resources.
type cfwDnsControlPolicyState struct {
	// The account id of the dns control policy.
	AccountId *string `pulumi:"accountId"`
	// The description of the dns control policy.
	Description *string `pulumi:"description"`
	// The destination of the dns control policy.
	Destination *string `pulumi:"destination"`
	// The destination type of the dns control policy. Valid values: `group`, `domain`.
	DestinationType *string `pulumi:"destinationType"`
	// The hit count of the dns control policy.
	HitCnt *int `pulumi:"hitCnt"`
	// The internet firewall id of the control policy.
	InternetFirewallId *string `pulumi:"internetFirewallId"`
	// The last hit time of the dns control policy. Unix timestamp.
	LastHitTime *int `pulumi:"lastHitTime"`
	// The source vpc list of the dns control policy.
	Sources []CfwDnsControlPolicySource `pulumi:"sources"`
	// Whether to enable the dns control policy.
	Status *bool `pulumi:"status"`
	// The use count of the dns control policy.
	UseCount *int `pulumi:"useCount"`
}

type CfwDnsControlPolicyState struct {
	// The account id of the dns control policy.
	AccountId pulumi.StringPtrInput
	// The description of the dns control policy.
	Description pulumi.StringPtrInput
	// The destination of the dns control policy.
	Destination pulumi.StringPtrInput
	// The destination type of the dns control policy. Valid values: `group`, `domain`.
	DestinationType pulumi.StringPtrInput
	// The hit count of the dns control policy.
	HitCnt pulumi.IntPtrInput
	// The internet firewall id of the control policy.
	InternetFirewallId pulumi.StringPtrInput
	// The last hit time of the dns control policy. Unix timestamp.
	LastHitTime pulumi.IntPtrInput
	// The source vpc list of the dns control policy.
	Sources CfwDnsControlPolicySourceArrayInput
	// Whether to enable the dns control policy.
	Status pulumi.BoolPtrInput
	// The use count of the dns control policy.
	UseCount pulumi.IntPtrInput
}

func (CfwDnsControlPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cfwDnsControlPolicyState)(nil)).Elem()
}

type cfwDnsControlPolicyArgs struct {
	// The description of the dns control policy.
	Description *string `pulumi:"description"`
	// The destination of the dns control policy.
	Destination string `pulumi:"destination"`
	// The destination type of the dns control policy. Valid values: `group`, `domain`.
	DestinationType string `pulumi:"destinationType"`
	// The internet firewall id of the control policy.
	InternetFirewallId *string `pulumi:"internetFirewallId"`
	// The source vpc list of the dns control policy.
	Sources []CfwDnsControlPolicySource `pulumi:"sources"`
	// Whether to enable the dns control policy.
	Status *bool `pulumi:"status"`
}

// The set of arguments for constructing a CfwDnsControlPolicy resource.
type CfwDnsControlPolicyArgs struct {
	// The description of the dns control policy.
	Description pulumi.StringPtrInput
	// The destination of the dns control policy.
	Destination pulumi.StringInput
	// The destination type of the dns control policy. Valid values: `group`, `domain`.
	DestinationType pulumi.StringInput
	// The internet firewall id of the control policy.
	InternetFirewallId pulumi.StringPtrInput
	// The source vpc list of the dns control policy.
	Sources CfwDnsControlPolicySourceArrayInput
	// Whether to enable the dns control policy.
	Status pulumi.BoolPtrInput
}

func (CfwDnsControlPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cfwDnsControlPolicyArgs)(nil)).Elem()
}

type CfwDnsControlPolicyInput interface {
	pulumi.Input

	ToCfwDnsControlPolicyOutput() CfwDnsControlPolicyOutput
	ToCfwDnsControlPolicyOutputWithContext(ctx context.Context) CfwDnsControlPolicyOutput
}

func (*CfwDnsControlPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CfwDnsControlPolicy)(nil)).Elem()
}

func (i *CfwDnsControlPolicy) ToCfwDnsControlPolicyOutput() CfwDnsControlPolicyOutput {
	return i.ToCfwDnsControlPolicyOutputWithContext(context.Background())
}

func (i *CfwDnsControlPolicy) ToCfwDnsControlPolicyOutputWithContext(ctx context.Context) CfwDnsControlPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CfwDnsControlPolicyOutput)
}

// CfwDnsControlPolicyArrayInput is an input type that accepts CfwDnsControlPolicyArray and CfwDnsControlPolicyArrayOutput values.
// You can construct a concrete instance of `CfwDnsControlPolicyArrayInput` via:
//
//	CfwDnsControlPolicyArray{ CfwDnsControlPolicyArgs{...} }
type CfwDnsControlPolicyArrayInput interface {
	pulumi.Input

	ToCfwDnsControlPolicyArrayOutput() CfwDnsControlPolicyArrayOutput
	ToCfwDnsControlPolicyArrayOutputWithContext(context.Context) CfwDnsControlPolicyArrayOutput
}

type CfwDnsControlPolicyArray []CfwDnsControlPolicyInput

func (CfwDnsControlPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CfwDnsControlPolicy)(nil)).Elem()
}

func (i CfwDnsControlPolicyArray) ToCfwDnsControlPolicyArrayOutput() CfwDnsControlPolicyArrayOutput {
	return i.ToCfwDnsControlPolicyArrayOutputWithContext(context.Background())
}

func (i CfwDnsControlPolicyArray) ToCfwDnsControlPolicyArrayOutputWithContext(ctx context.Context) CfwDnsControlPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CfwDnsControlPolicyArrayOutput)
}

// CfwDnsControlPolicyMapInput is an input type that accepts CfwDnsControlPolicyMap and CfwDnsControlPolicyMapOutput values.
// You can construct a concrete instance of `CfwDnsControlPolicyMapInput` via:
//
//	CfwDnsControlPolicyMap{ "key": CfwDnsControlPolicyArgs{...} }
type CfwDnsControlPolicyMapInput interface {
	pulumi.Input

	ToCfwDnsControlPolicyMapOutput() CfwDnsControlPolicyMapOutput
	ToCfwDnsControlPolicyMapOutputWithContext(context.Context) CfwDnsControlPolicyMapOutput
}

type CfwDnsControlPolicyMap map[string]CfwDnsControlPolicyInput

func (CfwDnsControlPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CfwDnsControlPolicy)(nil)).Elem()
}

func (i CfwDnsControlPolicyMap) ToCfwDnsControlPolicyMapOutput() CfwDnsControlPolicyMapOutput {
	return i.ToCfwDnsControlPolicyMapOutputWithContext(context.Background())
}

func (i CfwDnsControlPolicyMap) ToCfwDnsControlPolicyMapOutputWithContext(ctx context.Context) CfwDnsControlPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CfwDnsControlPolicyMapOutput)
}

type CfwDnsControlPolicyOutput struct{ *pulumi.OutputState }

func (CfwDnsControlPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CfwDnsControlPolicy)(nil)).Elem()
}

func (o CfwDnsControlPolicyOutput) ToCfwDnsControlPolicyOutput() CfwDnsControlPolicyOutput {
	return o
}

func (o CfwDnsControlPolicyOutput) ToCfwDnsControlPolicyOutputWithContext(ctx context.Context) CfwDnsControlPolicyOutput {
	return o
}

// The account id of the dns control policy.
func (o CfwDnsControlPolicyOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The description of the dns control policy.
func (o CfwDnsControlPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The destination of the dns control policy.
func (o CfwDnsControlPolicyOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) pulumi.StringOutput { return v.Destination }).(pulumi.StringOutput)
}

// The destination type of the dns control policy. Valid values: `group`, `domain`.
func (o CfwDnsControlPolicyOutput) DestinationType() pulumi.StringOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) pulumi.StringOutput { return v.DestinationType }).(pulumi.StringOutput)
}

// The hit count of the dns control policy.
func (o CfwDnsControlPolicyOutput) HitCnt() pulumi.IntOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) pulumi.IntOutput { return v.HitCnt }).(pulumi.IntOutput)
}

// The internet firewall id of the control policy.
func (o CfwDnsControlPolicyOutput) InternetFirewallId() pulumi.StringOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) pulumi.StringOutput { return v.InternetFirewallId }).(pulumi.StringOutput)
}

// The last hit time of the dns control policy. Unix timestamp.
func (o CfwDnsControlPolicyOutput) LastHitTime() pulumi.IntOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) pulumi.IntOutput { return v.LastHitTime }).(pulumi.IntOutput)
}

// The source vpc list of the dns control policy.
func (o CfwDnsControlPolicyOutput) Sources() CfwDnsControlPolicySourceArrayOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) CfwDnsControlPolicySourceArrayOutput { return v.Sources }).(CfwDnsControlPolicySourceArrayOutput)
}

// Whether to enable the dns control policy.
func (o CfwDnsControlPolicyOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) pulumi.BoolOutput { return v.Status }).(pulumi.BoolOutput)
}

// The use count of the dns control policy.
func (o CfwDnsControlPolicyOutput) UseCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CfwDnsControlPolicy) pulumi.IntOutput { return v.UseCount }).(pulumi.IntOutput)
}

type CfwDnsControlPolicyArrayOutput struct{ *pulumi.OutputState }

func (CfwDnsControlPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CfwDnsControlPolicy)(nil)).Elem()
}

func (o CfwDnsControlPolicyArrayOutput) ToCfwDnsControlPolicyArrayOutput() CfwDnsControlPolicyArrayOutput {
	return o
}

func (o CfwDnsControlPolicyArrayOutput) ToCfwDnsControlPolicyArrayOutputWithContext(ctx context.Context) CfwDnsControlPolicyArrayOutput {
	return o
}

func (o CfwDnsControlPolicyArrayOutput) Index(i pulumi.IntInput) CfwDnsControlPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CfwDnsControlPolicy {
		return vs[0].([]*CfwDnsControlPolicy)[vs[1].(int)]
	}).(CfwDnsControlPolicyOutput)
}

type CfwDnsControlPolicyMapOutput struct{ *pulumi.OutputState }

func (CfwDnsControlPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CfwDnsControlPolicy)(nil)).Elem()
}

func (o CfwDnsControlPolicyMapOutput) ToCfwDnsControlPolicyMapOutput() CfwDnsControlPolicyMapOutput {
	return o
}

func (o CfwDnsControlPolicyMapOutput) ToCfwDnsControlPolicyMapOutputWithContext(ctx context.Context) CfwDnsControlPolicyMapOutput {
	return o
}

func (o CfwDnsControlPolicyMapOutput) MapIndex(k pulumi.StringInput) CfwDnsControlPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CfwDnsControlPolicy {
		return vs[0].(map[string]*CfwDnsControlPolicy)[vs[1].(string)]
	}).(CfwDnsControlPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CfwDnsControlPolicyInput)(nil)).Elem(), &CfwDnsControlPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CfwDnsControlPolicyArrayInput)(nil)).Elem(), CfwDnsControlPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CfwDnsControlPolicyMapInput)(nil)).Elem(), CfwDnsControlPolicyMap{})
	pulumi.RegisterOutputType(CfwDnsControlPolicyOutput{})
	pulumi.RegisterOutputType(CfwDnsControlPolicyArrayOutput{})
	pulumi.RegisterOutputType(CfwDnsControlPolicyMapOutput{})
}
