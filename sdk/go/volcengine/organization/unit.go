// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package organization

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage organization unit
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/organization"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := organization.NewOrganization(ctx, "fooOrganization", nil)
//			if err != nil {
//				return err
//			}
//			fooUnits, err := organization.Units(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = organization.NewUnit(ctx, "fooUnit", &organization.UnitArgs{
//				ParentId:    "TODO: For expression"[0],
//				Description: pulumi.String("tf-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// OrganizationUnit can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:organization/unit:Unit default ID
// ```
type Unit struct {
	pulumi.CustomResourceState

	// The depth of the organization unit.
	Depth pulumi.IntOutput `pulumi:"depth"`
	// Description of the organization unit.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Name of the organization unit.
	Name pulumi.StringOutput `pulumi:"name"`
	// The id of the organization.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// The organization type.
	OrgType pulumi.IntOutput `pulumi:"orgType"`
	// The owner of the organization unit.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// Parent Organization Unit ID.
	ParentId pulumi.StringOutput `pulumi:"parentId"`
}

// NewUnit registers a new resource with the given unique name, arguments, and options.
func NewUnit(ctx *pulumi.Context,
	name string, args *UnitArgs, opts ...pulumi.ResourceOption) (*Unit, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ParentId == nil {
		return nil, errors.New("invalid value for required argument 'ParentId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Unit
	err := ctx.RegisterResource("volcengine:organization/unit:Unit", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUnit gets an existing Unit resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUnit(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UnitState, opts ...pulumi.ResourceOption) (*Unit, error) {
	var resource Unit
	err := ctx.ReadResource("volcengine:organization/unit:Unit", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Unit resources.
type unitState struct {
	// The depth of the organization unit.
	Depth *int `pulumi:"depth"`
	// Description of the organization unit.
	Description *string `pulumi:"description"`
	// Name of the organization unit.
	Name *string `pulumi:"name"`
	// The id of the organization.
	OrgId *string `pulumi:"orgId"`
	// The organization type.
	OrgType *int `pulumi:"orgType"`
	// The owner of the organization unit.
	Owner *string `pulumi:"owner"`
	// Parent Organization Unit ID.
	ParentId *string `pulumi:"parentId"`
}

type UnitState struct {
	// The depth of the organization unit.
	Depth pulumi.IntPtrInput
	// Description of the organization unit.
	Description pulumi.StringPtrInput
	// Name of the organization unit.
	Name pulumi.StringPtrInput
	// The id of the organization.
	OrgId pulumi.StringPtrInput
	// The organization type.
	OrgType pulumi.IntPtrInput
	// The owner of the organization unit.
	Owner pulumi.StringPtrInput
	// Parent Organization Unit ID.
	ParentId pulumi.StringPtrInput
}

func (UnitState) ElementType() reflect.Type {
	return reflect.TypeOf((*unitState)(nil)).Elem()
}

type unitArgs struct {
	// Description of the organization unit.
	Description *string `pulumi:"description"`
	// Name of the organization unit.
	Name *string `pulumi:"name"`
	// Parent Organization Unit ID.
	ParentId string `pulumi:"parentId"`
}

// The set of arguments for constructing a Unit resource.
type UnitArgs struct {
	// Description of the organization unit.
	Description pulumi.StringPtrInput
	// Name of the organization unit.
	Name pulumi.StringPtrInput
	// Parent Organization Unit ID.
	ParentId pulumi.StringInput
}

func (UnitArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*unitArgs)(nil)).Elem()
}

type UnitInput interface {
	pulumi.Input

	ToUnitOutput() UnitOutput
	ToUnitOutputWithContext(ctx context.Context) UnitOutput
}

func (*Unit) ElementType() reflect.Type {
	return reflect.TypeOf((**Unit)(nil)).Elem()
}

func (i *Unit) ToUnitOutput() UnitOutput {
	return i.ToUnitOutputWithContext(context.Background())
}

func (i *Unit) ToUnitOutputWithContext(ctx context.Context) UnitOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitOutput)
}

// UnitArrayInput is an input type that accepts UnitArray and UnitArrayOutput values.
// You can construct a concrete instance of `UnitArrayInput` via:
//
//	UnitArray{ UnitArgs{...} }
type UnitArrayInput interface {
	pulumi.Input

	ToUnitArrayOutput() UnitArrayOutput
	ToUnitArrayOutputWithContext(context.Context) UnitArrayOutput
}

type UnitArray []UnitInput

func (UnitArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Unit)(nil)).Elem()
}

func (i UnitArray) ToUnitArrayOutput() UnitArrayOutput {
	return i.ToUnitArrayOutputWithContext(context.Background())
}

func (i UnitArray) ToUnitArrayOutputWithContext(ctx context.Context) UnitArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitArrayOutput)
}

// UnitMapInput is an input type that accepts UnitMap and UnitMapOutput values.
// You can construct a concrete instance of `UnitMapInput` via:
//
//	UnitMap{ "key": UnitArgs{...} }
type UnitMapInput interface {
	pulumi.Input

	ToUnitMapOutput() UnitMapOutput
	ToUnitMapOutputWithContext(context.Context) UnitMapOutput
}

type UnitMap map[string]UnitInput

func (UnitMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Unit)(nil)).Elem()
}

func (i UnitMap) ToUnitMapOutput() UnitMapOutput {
	return i.ToUnitMapOutputWithContext(context.Background())
}

func (i UnitMap) ToUnitMapOutputWithContext(ctx context.Context) UnitMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UnitMapOutput)
}

type UnitOutput struct{ *pulumi.OutputState }

func (UnitOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Unit)(nil)).Elem()
}

func (o UnitOutput) ToUnitOutput() UnitOutput {
	return o
}

func (o UnitOutput) ToUnitOutputWithContext(ctx context.Context) UnitOutput {
	return o
}

// The depth of the organization unit.
func (o UnitOutput) Depth() pulumi.IntOutput {
	return o.ApplyT(func(v *Unit) pulumi.IntOutput { return v.Depth }).(pulumi.IntOutput)
}

// Description of the organization unit.
func (o UnitOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Unit) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Name of the organization unit.
func (o UnitOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Unit) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The id of the organization.
func (o UnitOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *Unit) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// The organization type.
func (o UnitOutput) OrgType() pulumi.IntOutput {
	return o.ApplyT(func(v *Unit) pulumi.IntOutput { return v.OrgType }).(pulumi.IntOutput)
}

// The owner of the organization unit.
func (o UnitOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Unit) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// Parent Organization Unit ID.
func (o UnitOutput) ParentId() pulumi.StringOutput {
	return o.ApplyT(func(v *Unit) pulumi.StringOutput { return v.ParentId }).(pulumi.StringOutput)
}

type UnitArrayOutput struct{ *pulumi.OutputState }

func (UnitArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Unit)(nil)).Elem()
}

func (o UnitArrayOutput) ToUnitArrayOutput() UnitArrayOutput {
	return o
}

func (o UnitArrayOutput) ToUnitArrayOutputWithContext(ctx context.Context) UnitArrayOutput {
	return o
}

func (o UnitArrayOutput) Index(i pulumi.IntInput) UnitOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Unit {
		return vs[0].([]*Unit)[vs[1].(int)]
	}).(UnitOutput)
}

type UnitMapOutput struct{ *pulumi.OutputState }

func (UnitMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Unit)(nil)).Elem()
}

func (o UnitMapOutput) ToUnitMapOutput() UnitMapOutput {
	return o
}

func (o UnitMapOutput) ToUnitMapOutputWithContext(ctx context.Context) UnitMapOutput {
	return o
}

func (o UnitMapOutput) MapIndex(k pulumi.StringInput) UnitOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Unit {
		return vs[0].(map[string]*Unit)[vs[1].(string)]
	}).(UnitOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UnitInput)(nil)).Elem(), &Unit{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitArrayInput)(nil)).Elem(), UnitArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UnitMapInput)(nil)).Elem(), UnitMap{})
	pulumi.RegisterOutputType(UnitOutput{})
	pulumi.RegisterOutputType(UnitArrayOutput{})
	pulumi.RegisterOutputType(UnitMapOutput{})
}
