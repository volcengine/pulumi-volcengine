// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// (Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds account privilege
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			appName, err := rds.NewAccount(ctx, "appName", &rds.AccountArgs{
//				InstanceId:      pulumi.String("mysql-0fdd3bab2e7c"),
//				AccountName:     pulumi.String("terraform-test-app"),
//				AccountPassword: pulumi.String("Aatest123"),
//				AccountType:     pulumi.String("Normal"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rds.NewAccountPrivilege(ctx, "foo", &rds.AccountPrivilegeArgs{
//				InstanceId:  pulumi.String("mysql-0fdd3bab2e7c"),
//				AccountName: appName.AccountName,
//				DbPrivileges: rds.AccountPrivilegeDbPrivilegeArray{
//					&rds.AccountPrivilegeDbPrivilegeArgs{
//						DbName:              pulumi.String("foo"),
//						AccountPrivilege:    pulumi.String("Custom"),
//						AccountPrivilegeStr: pulumi.String("ALTER,ALTER ROUTINE,CREATE,CREATE ROUTINE,CREATE TEMPORARY TABLES"),
//					},
//					&rds.AccountPrivilegeDbPrivilegeArgs{
//						DbName:           pulumi.String("bar"),
//						AccountPrivilege: pulumi.String("DDLOnly"),
//					},
//					&rds.AccountPrivilegeDbPrivilegeArgs{
//						DbName:           pulumi.String("demo"),
//						AccountPrivilege: pulumi.String("ReadWrite"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RDS account privilege can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:rds/accountPrivilege:AccountPrivilege default mysql-42b38c769c4b:account_name
//
// ```
type AccountPrivilege struct {
	pulumi.CustomResourceState

	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// The privileges of the account.
	DbPrivileges AccountPrivilegeDbPrivilegeArrayOutput `pulumi:"dbPrivileges"`
	// The ID of the RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewAccountPrivilege registers a new resource with the given unique name, arguments, and options.
func NewAccountPrivilege(ctx *pulumi.Context,
	name string, args *AccountPrivilegeArgs, opts ...pulumi.ResourceOption) (*AccountPrivilege, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.DbPrivileges == nil {
		return nil, errors.New("invalid value for required argument 'DbPrivileges'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AccountPrivilege
	err := ctx.RegisterResource("volcengine:rds/accountPrivilege:AccountPrivilege", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccountPrivilege gets an existing AccountPrivilege resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccountPrivilege(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountPrivilegeState, opts ...pulumi.ResourceOption) (*AccountPrivilege, error) {
	var resource AccountPrivilege
	err := ctx.ReadResource("volcengine:rds/accountPrivilege:AccountPrivilege", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccountPrivilege resources.
type accountPrivilegeState struct {
	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName *string `pulumi:"accountName"`
	// The privileges of the account.
	DbPrivileges []AccountPrivilegeDbPrivilege `pulumi:"dbPrivileges"`
	// The ID of the RDS instance.
	InstanceId *string `pulumi:"instanceId"`
}

type AccountPrivilegeState struct {
	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName pulumi.StringPtrInput
	// The privileges of the account.
	DbPrivileges AccountPrivilegeDbPrivilegeArrayInput
	// The ID of the RDS instance.
	InstanceId pulumi.StringPtrInput
}

func (AccountPrivilegeState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPrivilegeState)(nil)).Elem()
}

type accountPrivilegeArgs struct {
	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName string `pulumi:"accountName"`
	// The privileges of the account.
	DbPrivileges []AccountPrivilegeDbPrivilege `pulumi:"dbPrivileges"`
	// The ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a AccountPrivilege resource.
type AccountPrivilegeArgs struct {
	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName pulumi.StringInput
	// The privileges of the account.
	DbPrivileges AccountPrivilegeDbPrivilegeArrayInput
	// The ID of the RDS instance.
	InstanceId pulumi.StringInput
}

func (AccountPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountPrivilegeArgs)(nil)).Elem()
}

type AccountPrivilegeInput interface {
	pulumi.Input

	ToAccountPrivilegeOutput() AccountPrivilegeOutput
	ToAccountPrivilegeOutputWithContext(ctx context.Context) AccountPrivilegeOutput
}

func (*AccountPrivilege) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPrivilege)(nil)).Elem()
}

func (i *AccountPrivilege) ToAccountPrivilegeOutput() AccountPrivilegeOutput {
	return i.ToAccountPrivilegeOutputWithContext(context.Background())
}

func (i *AccountPrivilege) ToAccountPrivilegeOutputWithContext(ctx context.Context) AccountPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPrivilegeOutput)
}

// AccountPrivilegeArrayInput is an input type that accepts AccountPrivilegeArray and AccountPrivilegeArrayOutput values.
// You can construct a concrete instance of `AccountPrivilegeArrayInput` via:
//
//	AccountPrivilegeArray{ AccountPrivilegeArgs{...} }
type AccountPrivilegeArrayInput interface {
	pulumi.Input

	ToAccountPrivilegeArrayOutput() AccountPrivilegeArrayOutput
	ToAccountPrivilegeArrayOutputWithContext(context.Context) AccountPrivilegeArrayOutput
}

type AccountPrivilegeArray []AccountPrivilegeInput

func (AccountPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountPrivilege)(nil)).Elem()
}

func (i AccountPrivilegeArray) ToAccountPrivilegeArrayOutput() AccountPrivilegeArrayOutput {
	return i.ToAccountPrivilegeArrayOutputWithContext(context.Background())
}

func (i AccountPrivilegeArray) ToAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPrivilegeArrayOutput)
}

// AccountPrivilegeMapInput is an input type that accepts AccountPrivilegeMap and AccountPrivilegeMapOutput values.
// You can construct a concrete instance of `AccountPrivilegeMapInput` via:
//
//	AccountPrivilegeMap{ "key": AccountPrivilegeArgs{...} }
type AccountPrivilegeMapInput interface {
	pulumi.Input

	ToAccountPrivilegeMapOutput() AccountPrivilegeMapOutput
	ToAccountPrivilegeMapOutputWithContext(context.Context) AccountPrivilegeMapOutput
}

type AccountPrivilegeMap map[string]AccountPrivilegeInput

func (AccountPrivilegeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountPrivilege)(nil)).Elem()
}

func (i AccountPrivilegeMap) ToAccountPrivilegeMapOutput() AccountPrivilegeMapOutput {
	return i.ToAccountPrivilegeMapOutputWithContext(context.Background())
}

func (i AccountPrivilegeMap) ToAccountPrivilegeMapOutputWithContext(ctx context.Context) AccountPrivilegeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountPrivilegeMapOutput)
}

type AccountPrivilegeOutput struct{ *pulumi.OutputState }

func (AccountPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccountPrivilege)(nil)).Elem()
}

func (o AccountPrivilegeOutput) ToAccountPrivilegeOutput() AccountPrivilegeOutput {
	return o
}

func (o AccountPrivilegeOutput) ToAccountPrivilegeOutputWithContext(ctx context.Context) AccountPrivilegeOutput {
	return o
}

// Database account name. The rules are as follows:
// Unique name.
// Start with a letter and end with a letter or number.
// Consists of lowercase letters, numbers, or underscores (_).
// The length is 2~32 characters.
// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
func (o AccountPrivilegeOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPrivilege) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// The privileges of the account.
func (o AccountPrivilegeOutput) DbPrivileges() AccountPrivilegeDbPrivilegeArrayOutput {
	return o.ApplyT(func(v *AccountPrivilege) AccountPrivilegeDbPrivilegeArrayOutput { return v.DbPrivileges }).(AccountPrivilegeDbPrivilegeArrayOutput)
}

// The ID of the RDS instance.
func (o AccountPrivilegeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AccountPrivilege) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type AccountPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (AccountPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccountPrivilege)(nil)).Elem()
}

func (o AccountPrivilegeArrayOutput) ToAccountPrivilegeArrayOutput() AccountPrivilegeArrayOutput {
	return o
}

func (o AccountPrivilegeArrayOutput) ToAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountPrivilegeArrayOutput {
	return o
}

func (o AccountPrivilegeArrayOutput) Index(i pulumi.IntInput) AccountPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccountPrivilege {
		return vs[0].([]*AccountPrivilege)[vs[1].(int)]
	}).(AccountPrivilegeOutput)
}

type AccountPrivilegeMapOutput struct{ *pulumi.OutputState }

func (AccountPrivilegeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccountPrivilege)(nil)).Elem()
}

func (o AccountPrivilegeMapOutput) ToAccountPrivilegeMapOutput() AccountPrivilegeMapOutput {
	return o
}

func (o AccountPrivilegeMapOutput) ToAccountPrivilegeMapOutputWithContext(ctx context.Context) AccountPrivilegeMapOutput {
	return o
}

func (o AccountPrivilegeMapOutput) MapIndex(k pulumi.StringInput) AccountPrivilegeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccountPrivilege {
		return vs[0].(map[string]*AccountPrivilege)[vs[1].(string)]
	}).(AccountPrivilegeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPrivilegeInput)(nil)).Elem(), &AccountPrivilege{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPrivilegeArrayInput)(nil)).Elem(), AccountPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountPrivilegeMapInput)(nil)).Elem(), AccountPrivilegeMap{})
	pulumi.RegisterOutputType(AccountPrivilegeOutput{})
	pulumi.RegisterOutputType(AccountPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(AccountPrivilegeMapOutput{})
}
