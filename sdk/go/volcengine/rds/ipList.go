// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// (Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds ip list
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rds.NewIpList(ctx, "foo", &rds.IpListArgs{
//				GroupName:  pulumi.String("foo"),
//				InstanceId: pulumi.String("mysql-0fdd3bab2e7c"),
//				IpLists: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//					pulumi.String("2.2.2.2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RDSIPList can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:rds/ipList:IpList default mysql-42b38c769c4b:group_name
//
// ```
type IpList struct {
	pulumi.CustomResourceState

	// The name of the RDS ip list.
	GroupName pulumi.StringOutput `pulumi:"groupName"`
	// The ID of the RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The list of IP address.
	IpLists pulumi.StringArrayOutput `pulumi:"ipLists"`
}

// NewIpList registers a new resource with the given unique name, arguments, and options.
func NewIpList(ctx *pulumi.Context,
	name string, args *IpListArgs, opts ...pulumi.ResourceOption) (*IpList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupName == nil {
		return nil, errors.New("invalid value for required argument 'GroupName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.IpLists == nil {
		return nil, errors.New("invalid value for required argument 'IpLists'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource IpList
	err := ctx.RegisterResource("volcengine:rds/ipList:IpList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpList gets an existing IpList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpListState, opts ...pulumi.ResourceOption) (*IpList, error) {
	var resource IpList
	err := ctx.ReadResource("volcengine:rds/ipList:IpList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpList resources.
type ipListState struct {
	// The name of the RDS ip list.
	GroupName *string `pulumi:"groupName"`
	// The ID of the RDS instance.
	InstanceId *string `pulumi:"instanceId"`
	// The list of IP address.
	IpLists []string `pulumi:"ipLists"`
}

type IpListState struct {
	// The name of the RDS ip list.
	GroupName pulumi.StringPtrInput
	// The ID of the RDS instance.
	InstanceId pulumi.StringPtrInput
	// The list of IP address.
	IpLists pulumi.StringArrayInput
}

func (IpListState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipListState)(nil)).Elem()
}

type ipListArgs struct {
	// The name of the RDS ip list.
	GroupName string `pulumi:"groupName"`
	// The ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// The list of IP address.
	IpLists []string `pulumi:"ipLists"`
}

// The set of arguments for constructing a IpList resource.
type IpListArgs struct {
	// The name of the RDS ip list.
	GroupName pulumi.StringInput
	// The ID of the RDS instance.
	InstanceId pulumi.StringInput
	// The list of IP address.
	IpLists pulumi.StringArrayInput
}

func (IpListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipListArgs)(nil)).Elem()
}

type IpListInput interface {
	pulumi.Input

	ToIpListOutput() IpListOutput
	ToIpListOutputWithContext(ctx context.Context) IpListOutput
}

func (*IpList) ElementType() reflect.Type {
	return reflect.TypeOf((**IpList)(nil)).Elem()
}

func (i *IpList) ToIpListOutput() IpListOutput {
	return i.ToIpListOutputWithContext(context.Background())
}

func (i *IpList) ToIpListOutputWithContext(ctx context.Context) IpListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpListOutput)
}

// IpListArrayInput is an input type that accepts IpListArray and IpListArrayOutput values.
// You can construct a concrete instance of `IpListArrayInput` via:
//
//	IpListArray{ IpListArgs{...} }
type IpListArrayInput interface {
	pulumi.Input

	ToIpListArrayOutput() IpListArrayOutput
	ToIpListArrayOutputWithContext(context.Context) IpListArrayOutput
}

type IpListArray []IpListInput

func (IpListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpList)(nil)).Elem()
}

func (i IpListArray) ToIpListArrayOutput() IpListArrayOutput {
	return i.ToIpListArrayOutputWithContext(context.Background())
}

func (i IpListArray) ToIpListArrayOutputWithContext(ctx context.Context) IpListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpListArrayOutput)
}

// IpListMapInput is an input type that accepts IpListMap and IpListMapOutput values.
// You can construct a concrete instance of `IpListMapInput` via:
//
//	IpListMap{ "key": IpListArgs{...} }
type IpListMapInput interface {
	pulumi.Input

	ToIpListMapOutput() IpListMapOutput
	ToIpListMapOutputWithContext(context.Context) IpListMapOutput
}

type IpListMap map[string]IpListInput

func (IpListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpList)(nil)).Elem()
}

func (i IpListMap) ToIpListMapOutput() IpListMapOutput {
	return i.ToIpListMapOutputWithContext(context.Background())
}

func (i IpListMap) ToIpListMapOutputWithContext(ctx context.Context) IpListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpListMapOutput)
}

type IpListOutput struct{ *pulumi.OutputState }

func (IpListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpList)(nil)).Elem()
}

func (o IpListOutput) ToIpListOutput() IpListOutput {
	return o
}

func (o IpListOutput) ToIpListOutputWithContext(ctx context.Context) IpListOutput {
	return o
}

// The name of the RDS ip list.
func (o IpListOutput) GroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *IpList) pulumi.StringOutput { return v.GroupName }).(pulumi.StringOutput)
}

// The ID of the RDS instance.
func (o IpListOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *IpList) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The list of IP address.
func (o IpListOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpList) pulumi.StringArrayOutput { return v.IpLists }).(pulumi.StringArrayOutput)
}

type IpListArrayOutput struct{ *pulumi.OutputState }

func (IpListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpList)(nil)).Elem()
}

func (o IpListArrayOutput) ToIpListArrayOutput() IpListArrayOutput {
	return o
}

func (o IpListArrayOutput) ToIpListArrayOutputWithContext(ctx context.Context) IpListArrayOutput {
	return o
}

func (o IpListArrayOutput) Index(i pulumi.IntInput) IpListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpList {
		return vs[0].([]*IpList)[vs[1].(int)]
	}).(IpListOutput)
}

type IpListMapOutput struct{ *pulumi.OutputState }

func (IpListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpList)(nil)).Elem()
}

func (o IpListMapOutput) ToIpListMapOutput() IpListMapOutput {
	return o
}

func (o IpListMapOutput) ToIpListMapOutputWithContext(ctx context.Context) IpListMapOutput {
	return o
}

func (o IpListMapOutput) MapIndex(k pulumi.StringInput) IpListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpList {
		return vs[0].(map[string]*IpList)[vs[1].(string)]
	}).(IpListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpListInput)(nil)).Elem(), &IpList{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpListArrayInput)(nil)).Elem(), IpListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpListMapInput)(nil)).Elem(), IpListMap{})
	pulumi.RegisterOutputType(IpListOutput{})
	pulumi.RegisterOutputType(IpListArrayOutput{})
	pulumi.RegisterOutputType(IpListMapOutput{})
}
