// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage waf ip group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := waf.NewIpGroup(ctx, "foo", &waf.IpGroupArgs{
//				AddType: pulumi.String("List"),
//				IpLists: pulumi.StringArray{
//					pulumi.String("1.1.1.1"),
//					pulumi.String("1.1.1.2"),
//					pulumi.String("1.1.1.3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WafIpGroup can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:waf/ipGroup:IpGroup default resource_id
// ```
type IpGroup struct {
	pulumi.CustomResourceState

	// The way of addition.
	AddType pulumi.StringOutput `pulumi:"addType"`
	// The number of IP addresses within the address group.
	IpCount pulumi.IntOutput `pulumi:"ipCount"`
	// The ID of the ip group.
	IpGroupId pulumi.IntOutput `pulumi:"ipGroupId"`
	// The IP address to be added.
	IpLists pulumi.StringArrayOutput `pulumi:"ipLists"`
	// The name of ip group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The list of associated rules.
	RelatedRules IpGroupRelatedRuleArrayOutput `pulumi:"relatedRules"`
	// ip group update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewIpGroup registers a new resource with the given unique name, arguments, and options.
func NewIpGroup(ctx *pulumi.Context,
	name string, args *IpGroupArgs, opts ...pulumi.ResourceOption) (*IpGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AddType == nil {
		return nil, errors.New("invalid value for required argument 'AddType'")
	}
	if args.IpLists == nil {
		return nil, errors.New("invalid value for required argument 'IpLists'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IpGroup
	err := ctx.RegisterResource("volcengine:waf/ipGroup:IpGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIpGroup gets an existing IpGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIpGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IpGroupState, opts ...pulumi.ResourceOption) (*IpGroup, error) {
	var resource IpGroup
	err := ctx.ReadResource("volcengine:waf/ipGroup:IpGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IpGroup resources.
type ipGroupState struct {
	// The way of addition.
	AddType *string `pulumi:"addType"`
	// The number of IP addresses within the address group.
	IpCount *int `pulumi:"ipCount"`
	// The ID of the ip group.
	IpGroupId *int `pulumi:"ipGroupId"`
	// The IP address to be added.
	IpLists []string `pulumi:"ipLists"`
	// The name of ip group.
	Name *string `pulumi:"name"`
	// The list of associated rules.
	RelatedRules []IpGroupRelatedRule `pulumi:"relatedRules"`
	// ip group update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type IpGroupState struct {
	// The way of addition.
	AddType pulumi.StringPtrInput
	// The number of IP addresses within the address group.
	IpCount pulumi.IntPtrInput
	// The ID of the ip group.
	IpGroupId pulumi.IntPtrInput
	// The IP address to be added.
	IpLists pulumi.StringArrayInput
	// The name of ip group.
	Name pulumi.StringPtrInput
	// The list of associated rules.
	RelatedRules IpGroupRelatedRuleArrayInput
	// ip group update time.
	UpdateTime pulumi.StringPtrInput
}

func (IpGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*ipGroupState)(nil)).Elem()
}

type ipGroupArgs struct {
	// The way of addition.
	AddType string `pulumi:"addType"`
	// The IP address to be added.
	IpLists []string `pulumi:"ipLists"`
	// The name of ip group.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IpGroup resource.
type IpGroupArgs struct {
	// The way of addition.
	AddType pulumi.StringInput
	// The IP address to be added.
	IpLists pulumi.StringArrayInput
	// The name of ip group.
	Name pulumi.StringPtrInput
}

func (IpGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ipGroupArgs)(nil)).Elem()
}

type IpGroupInput interface {
	pulumi.Input

	ToIpGroupOutput() IpGroupOutput
	ToIpGroupOutputWithContext(ctx context.Context) IpGroupOutput
}

func (*IpGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**IpGroup)(nil)).Elem()
}

func (i *IpGroup) ToIpGroupOutput() IpGroupOutput {
	return i.ToIpGroupOutputWithContext(context.Background())
}

func (i *IpGroup) ToIpGroupOutputWithContext(ctx context.Context) IpGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpGroupOutput)
}

// IpGroupArrayInput is an input type that accepts IpGroupArray and IpGroupArrayOutput values.
// You can construct a concrete instance of `IpGroupArrayInput` via:
//
//	IpGroupArray{ IpGroupArgs{...} }
type IpGroupArrayInput interface {
	pulumi.Input

	ToIpGroupArrayOutput() IpGroupArrayOutput
	ToIpGroupArrayOutputWithContext(context.Context) IpGroupArrayOutput
}

type IpGroupArray []IpGroupInput

func (IpGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpGroup)(nil)).Elem()
}

func (i IpGroupArray) ToIpGroupArrayOutput() IpGroupArrayOutput {
	return i.ToIpGroupArrayOutputWithContext(context.Background())
}

func (i IpGroupArray) ToIpGroupArrayOutputWithContext(ctx context.Context) IpGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpGroupArrayOutput)
}

// IpGroupMapInput is an input type that accepts IpGroupMap and IpGroupMapOutput values.
// You can construct a concrete instance of `IpGroupMapInput` via:
//
//	IpGroupMap{ "key": IpGroupArgs{...} }
type IpGroupMapInput interface {
	pulumi.Input

	ToIpGroupMapOutput() IpGroupMapOutput
	ToIpGroupMapOutputWithContext(context.Context) IpGroupMapOutput
}

type IpGroupMap map[string]IpGroupInput

func (IpGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpGroup)(nil)).Elem()
}

func (i IpGroupMap) ToIpGroupMapOutput() IpGroupMapOutput {
	return i.ToIpGroupMapOutputWithContext(context.Background())
}

func (i IpGroupMap) ToIpGroupMapOutputWithContext(ctx context.Context) IpGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IpGroupMapOutput)
}

type IpGroupOutput struct{ *pulumi.OutputState }

func (IpGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IpGroup)(nil)).Elem()
}

func (o IpGroupOutput) ToIpGroupOutput() IpGroupOutput {
	return o
}

func (o IpGroupOutput) ToIpGroupOutputWithContext(ctx context.Context) IpGroupOutput {
	return o
}

// The way of addition.
func (o IpGroupOutput) AddType() pulumi.StringOutput {
	return o.ApplyT(func(v *IpGroup) pulumi.StringOutput { return v.AddType }).(pulumi.StringOutput)
}

// The number of IP addresses within the address group.
func (o IpGroupOutput) IpCount() pulumi.IntOutput {
	return o.ApplyT(func(v *IpGroup) pulumi.IntOutput { return v.IpCount }).(pulumi.IntOutput)
}

// The ID of the ip group.
func (o IpGroupOutput) IpGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *IpGroup) pulumi.IntOutput { return v.IpGroupId }).(pulumi.IntOutput)
}

// The IP address to be added.
func (o IpGroupOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *IpGroup) pulumi.StringArrayOutput { return v.IpLists }).(pulumi.StringArrayOutput)
}

// The name of ip group.
func (o IpGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *IpGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The list of associated rules.
func (o IpGroupOutput) RelatedRules() IpGroupRelatedRuleArrayOutput {
	return o.ApplyT(func(v *IpGroup) IpGroupRelatedRuleArrayOutput { return v.RelatedRules }).(IpGroupRelatedRuleArrayOutput)
}

// ip group update time.
func (o IpGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *IpGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type IpGroupArrayOutput struct{ *pulumi.OutputState }

func (IpGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IpGroup)(nil)).Elem()
}

func (o IpGroupArrayOutput) ToIpGroupArrayOutput() IpGroupArrayOutput {
	return o
}

func (o IpGroupArrayOutput) ToIpGroupArrayOutputWithContext(ctx context.Context) IpGroupArrayOutput {
	return o
}

func (o IpGroupArrayOutput) Index(i pulumi.IntInput) IpGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IpGroup {
		return vs[0].([]*IpGroup)[vs[1].(int)]
	}).(IpGroupOutput)
}

type IpGroupMapOutput struct{ *pulumi.OutputState }

func (IpGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IpGroup)(nil)).Elem()
}

func (o IpGroupMapOutput) ToIpGroupMapOutput() IpGroupMapOutput {
	return o
}

func (o IpGroupMapOutput) ToIpGroupMapOutputWithContext(ctx context.Context) IpGroupMapOutput {
	return o
}

func (o IpGroupMapOutput) MapIndex(k pulumi.StringInput) IpGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IpGroup {
		return vs[0].(map[string]*IpGroup)[vs[1].(string)]
	}).(IpGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IpGroupInput)(nil)).Elem(), &IpGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpGroupArrayInput)(nil)).Elem(), IpGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IpGroupMapInput)(nil)).Elem(), IpGroupMap{})
	pulumi.RegisterOutputType(IpGroupOutput{})
	pulumi.RegisterOutputType(IpGroupArrayOutput{})
	pulumi.RegisterOutputType(IpGroupMapOutput{})
}
