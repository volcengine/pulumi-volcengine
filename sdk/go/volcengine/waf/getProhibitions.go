// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of waf prohibitions
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := waf.GetProhibitions(ctx, &waf.GetProhibitionsArgs{
//				EndTime:   1749808824,
//				Host:      "www.tf-test.com",
//				StartTime: 1749805224,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetProhibitions(ctx *pulumi.Context, args *GetProhibitionsArgs, opts ...pulumi.InvokeOption) (*GetProhibitionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetProhibitionsResult
	err := ctx.Invoke("volcengine:waf/getProhibitions:getProhibitions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProhibitions.
type GetProhibitionsArgs struct {
	// end time.
	EndTime int `pulumi:"endTime"`
	// The domain name of the website that needs to be queried.
	Host string `pulumi:"host"`
	// The list shows the order.
	LetterOrderBy *string `pulumi:"letterOrderBy"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Attack type filtering.
	Reasons []string `pulumi:"reasons"`
	// starting time.
	StartTime int `pulumi:"startTime"`
}

// A collection of values returned by getProhibitions.
type GetProhibitionsResult struct {
	EndTime int    `pulumi:"endTime"`
	Host    string `pulumi:"host"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Details of the attack IP.
	IpAggGroups   []GetProhibitionsIpAggGroup `pulumi:"ipAggGroups"`
	LetterOrderBy *string                     `pulumi:"letterOrderBy"`
	NameRegex     *string                     `pulumi:"nameRegex"`
	OutputFile    *string                     `pulumi:"outputFile"`
	// Reason for the ban.
	Reasons   []string `pulumi:"reasons"`
	StartTime int      `pulumi:"startTime"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetProhibitionsOutput(ctx *pulumi.Context, args GetProhibitionsOutputArgs, opts ...pulumi.InvokeOption) GetProhibitionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetProhibitionsResult, error) {
			args := v.(GetProhibitionsArgs)
			r, err := GetProhibitions(ctx, &args, opts...)
			var s GetProhibitionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetProhibitionsResultOutput)
}

// A collection of arguments for invoking getProhibitions.
type GetProhibitionsOutputArgs struct {
	// end time.
	EndTime pulumi.IntInput `pulumi:"endTime"`
	// The domain name of the website that needs to be queried.
	Host pulumi.StringInput `pulumi:"host"`
	// The list shows the order.
	LetterOrderBy pulumi.StringPtrInput `pulumi:"letterOrderBy"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Attack type filtering.
	Reasons pulumi.StringArrayInput `pulumi:"reasons"`
	// starting time.
	StartTime pulumi.IntInput `pulumi:"startTime"`
}

func (GetProhibitionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProhibitionsArgs)(nil)).Elem()
}

// A collection of values returned by getProhibitions.
type GetProhibitionsResultOutput struct{ *pulumi.OutputState }

func (GetProhibitionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetProhibitionsResult)(nil)).Elem()
}

func (o GetProhibitionsResultOutput) ToGetProhibitionsResultOutput() GetProhibitionsResultOutput {
	return o
}

func (o GetProhibitionsResultOutput) ToGetProhibitionsResultOutputWithContext(ctx context.Context) GetProhibitionsResultOutput {
	return o
}

func (o GetProhibitionsResultOutput) EndTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetProhibitionsResult) int { return v.EndTime }).(pulumi.IntOutput)
}

func (o GetProhibitionsResultOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetProhibitionsResult) string { return v.Host }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetProhibitionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetProhibitionsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Details of the attack IP.
func (o GetProhibitionsResultOutput) IpAggGroups() GetProhibitionsIpAggGroupArrayOutput {
	return o.ApplyT(func(v GetProhibitionsResult) []GetProhibitionsIpAggGroup { return v.IpAggGroups }).(GetProhibitionsIpAggGroupArrayOutput)
}

func (o GetProhibitionsResultOutput) LetterOrderBy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProhibitionsResult) *string { return v.LetterOrderBy }).(pulumi.StringPtrOutput)
}

func (o GetProhibitionsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProhibitionsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetProhibitionsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetProhibitionsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// Reason for the ban.
func (o GetProhibitionsResultOutput) Reasons() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetProhibitionsResult) []string { return v.Reasons }).(pulumi.StringArrayOutput)
}

func (o GetProhibitionsResultOutput) StartTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetProhibitionsResult) int { return v.StartTime }).(pulumi.IntOutput)
}

// The total count of query.
func (o GetProhibitionsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetProhibitionsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetProhibitionsResultOutput{})
}
