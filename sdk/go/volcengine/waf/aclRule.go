// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage waf acl rule
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := waf.NewAclRule(ctx, "foo", &waf.AclRuleArgs{
//				AccurateGroup: &waf.AclRuleAccurateGroupArgs{
//					AccurateRules: waf.AclRuleAccurateGroupAccurateRuleArray{
//						&waf.AclRuleAccurateGroupAccurateRuleArgs{
//							HttpObj:     pulumi.String("request.uri"),
//							ObjType:     pulumi.Int(1),
//							Opretar:     pulumi.Int(2),
//							Property:    pulumi.Int(0),
//							ValueString: pulumi.String("GET"),
//						},
//					},
//					Logic: pulumi.Int(1),
//				},
//				AclType:     pulumi.String("Allow"),
//				Action:      pulumi.String("block"),
//				Advanced:    pulumi.Int(1),
//				Description: pulumi.String("tf-test"),
//				Enable:      pulumi.Int(1),
//				HostAddType: pulumi.Int(3),
//				HostLists: pulumi.StringArray{
//					pulumi.String("www.tf-test.com"),
//				},
//				IpAddType: pulumi.Int(3),
//				IpLists: pulumi.StringArray{
//					pulumi.String("1.2.2.2"),
//					pulumi.String("1.2.3.30"),
//				},
//				ProjectName: pulumi.String("default"),
//				Url:         pulumi.String("/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WafAclRule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:waf/aclRule:AclRule default resource_id:AclType
// ```
type AclRule struct {
	pulumi.CustomResourceState

	// Advanced conditions.
	AccurateGroup AclRuleAccurateGroupOutput `pulumi:"accurateGroup"`
	// The type of access control rules.
	AclType pulumi.StringOutput `pulumi:"aclType"`
	// Action to be taken on requests that match the rule.
	Action pulumi.StringOutput `pulumi:"action"`
	// Whether to set advanced conditions.
	Advanced pulumi.IntOutput `pulumi:"advanced"`
	// IP address.
	ClientIp pulumi.StringOutput `pulumi:"clientIp"`
	// Rule description.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether to enable the rule.
	Enable pulumi.IntOutput `pulumi:"enable"`
	// Type of domain name addition.
	HostAddType pulumi.IntOutput `pulumi:"hostAddType"`
	// The ID of the domain group.
	HostGroupIds pulumi.IntArrayOutput `pulumi:"hostGroupIds"`
	// The list of domain name groups.
	HostGroups AclRuleHostGroupArrayOutput `pulumi:"hostGroups"`
	// Required if HostAddType = 3. Single or multiple domain names are supported.
	HostLists pulumi.StringArrayOutput `pulumi:"hostLists"`
	// Type of IP address addition.
	IpAddType pulumi.IntOutput `pulumi:"ipAddType"`
	// Required if IpAddType = 2.
	IpGroupIds pulumi.IntArrayOutput `pulumi:"ipGroupIds"`
	// The list of domain name groups.
	IpGroups AclRuleIpGroupArrayOutput `pulumi:"ipGroups"`
	// Required if IpAddType = 3. Single or multiple IP addresses are supported.
	IpLists pulumi.StringArrayOutput `pulumi:"ipLists"`
	// Country or region code.
	IpLocationCountries pulumi.StringArrayOutput `pulumi:"ipLocationCountries"`
	// Domestic region code.
	IpLocationSubregions pulumi.StringArrayOutput `pulumi:"ipLocationSubregions"`
	// Rule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The name of the project to which your domain names belong.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// Rule unique identifier.
	RuleTag pulumi.StringOutput `pulumi:"ruleTag"`
	// Update time of the rule.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The path of Matching.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewAclRule registers a new resource with the given unique name, arguments, and options.
func NewAclRule(ctx *pulumi.Context,
	name string, args *AclRuleArgs, opts ...pulumi.ResourceOption) (*AclRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclType == nil {
		return nil, errors.New("invalid value for required argument 'AclType'")
	}
	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.HostAddType == nil {
		return nil, errors.New("invalid value for required argument 'HostAddType'")
	}
	if args.IpAddType == nil {
		return nil, errors.New("invalid value for required argument 'IpAddType'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AclRule
	err := ctx.RegisterResource("volcengine:waf/aclRule:AclRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclRule gets an existing AclRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclRuleState, opts ...pulumi.ResourceOption) (*AclRule, error) {
	var resource AclRule
	err := ctx.ReadResource("volcengine:waf/aclRule:AclRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclRule resources.
type aclRuleState struct {
	// Advanced conditions.
	AccurateGroup *AclRuleAccurateGroup `pulumi:"accurateGroup"`
	// The type of access control rules.
	AclType *string `pulumi:"aclType"`
	// Action to be taken on requests that match the rule.
	Action *string `pulumi:"action"`
	// Whether to set advanced conditions.
	Advanced *int `pulumi:"advanced"`
	// IP address.
	ClientIp *string `pulumi:"clientIp"`
	// Rule description.
	Description *string `pulumi:"description"`
	// Whether to enable the rule.
	Enable *int `pulumi:"enable"`
	// Type of domain name addition.
	HostAddType *int `pulumi:"hostAddType"`
	// The ID of the domain group.
	HostGroupIds []int `pulumi:"hostGroupIds"`
	// The list of domain name groups.
	HostGroups []AclRuleHostGroup `pulumi:"hostGroups"`
	// Required if HostAddType = 3. Single or multiple domain names are supported.
	HostLists []string `pulumi:"hostLists"`
	// Type of IP address addition.
	IpAddType *int `pulumi:"ipAddType"`
	// Required if IpAddType = 2.
	IpGroupIds []int `pulumi:"ipGroupIds"`
	// The list of domain name groups.
	IpGroups []AclRuleIpGroup `pulumi:"ipGroups"`
	// Required if IpAddType = 3. Single or multiple IP addresses are supported.
	IpLists []string `pulumi:"ipLists"`
	// Country or region code.
	IpLocationCountries []string `pulumi:"ipLocationCountries"`
	// Domestic region code.
	IpLocationSubregions []string `pulumi:"ipLocationSubregions"`
	// Rule name.
	Name *string `pulumi:"name"`
	// The name of the project to which your domain names belong.
	ProjectName *string `pulumi:"projectName"`
	// Rule unique identifier.
	RuleTag *string `pulumi:"ruleTag"`
	// Update time of the rule.
	UpdateTime *string `pulumi:"updateTime"`
	// The path of Matching.
	Url *string `pulumi:"url"`
}

type AclRuleState struct {
	// Advanced conditions.
	AccurateGroup AclRuleAccurateGroupPtrInput
	// The type of access control rules.
	AclType pulumi.StringPtrInput
	// Action to be taken on requests that match the rule.
	Action pulumi.StringPtrInput
	// Whether to set advanced conditions.
	Advanced pulumi.IntPtrInput
	// IP address.
	ClientIp pulumi.StringPtrInput
	// Rule description.
	Description pulumi.StringPtrInput
	// Whether to enable the rule.
	Enable pulumi.IntPtrInput
	// Type of domain name addition.
	HostAddType pulumi.IntPtrInput
	// The ID of the domain group.
	HostGroupIds pulumi.IntArrayInput
	// The list of domain name groups.
	HostGroups AclRuleHostGroupArrayInput
	// Required if HostAddType = 3. Single or multiple domain names are supported.
	HostLists pulumi.StringArrayInput
	// Type of IP address addition.
	IpAddType pulumi.IntPtrInput
	// Required if IpAddType = 2.
	IpGroupIds pulumi.IntArrayInput
	// The list of domain name groups.
	IpGroups AclRuleIpGroupArrayInput
	// Required if IpAddType = 3. Single or multiple IP addresses are supported.
	IpLists pulumi.StringArrayInput
	// Country or region code.
	IpLocationCountries pulumi.StringArrayInput
	// Domestic region code.
	IpLocationSubregions pulumi.StringArrayInput
	// Rule name.
	Name pulumi.StringPtrInput
	// The name of the project to which your domain names belong.
	ProjectName pulumi.StringPtrInput
	// Rule unique identifier.
	RuleTag pulumi.StringPtrInput
	// Update time of the rule.
	UpdateTime pulumi.StringPtrInput
	// The path of Matching.
	Url pulumi.StringPtrInput
}

func (AclRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRuleState)(nil)).Elem()
}

type aclRuleArgs struct {
	// Advanced conditions.
	AccurateGroup *AclRuleAccurateGroup `pulumi:"accurateGroup"`
	// The type of access control rules.
	AclType string `pulumi:"aclType"`
	// Action to be taken on requests that match the rule.
	Action *string `pulumi:"action"`
	// Whether to set advanced conditions.
	Advanced *int `pulumi:"advanced"`
	// Rule description.
	Description *string `pulumi:"description"`
	// Whether to enable the rule.
	Enable int `pulumi:"enable"`
	// Type of domain name addition.
	HostAddType int `pulumi:"hostAddType"`
	// The ID of the domain group.
	HostGroupIds []int `pulumi:"hostGroupIds"`
	// Required if HostAddType = 3. Single or multiple domain names are supported.
	HostLists []string `pulumi:"hostLists"`
	// Type of IP address addition.
	IpAddType int `pulumi:"ipAddType"`
	// Required if IpAddType = 2.
	IpGroupIds []int `pulumi:"ipGroupIds"`
	// Required if IpAddType = 3. Single or multiple IP addresses are supported.
	IpLists []string `pulumi:"ipLists"`
	// Country or region code.
	IpLocationCountries []string `pulumi:"ipLocationCountries"`
	// Domestic region code.
	IpLocationSubregions []string `pulumi:"ipLocationSubregions"`
	// Rule name.
	Name *string `pulumi:"name"`
	// The name of the project to which your domain names belong.
	ProjectName *string `pulumi:"projectName"`
	// The path of Matching.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a AclRule resource.
type AclRuleArgs struct {
	// Advanced conditions.
	AccurateGroup AclRuleAccurateGroupPtrInput
	// The type of access control rules.
	AclType pulumi.StringInput
	// Action to be taken on requests that match the rule.
	Action pulumi.StringPtrInput
	// Whether to set advanced conditions.
	Advanced pulumi.IntPtrInput
	// Rule description.
	Description pulumi.StringPtrInput
	// Whether to enable the rule.
	Enable pulumi.IntInput
	// Type of domain name addition.
	HostAddType pulumi.IntInput
	// The ID of the domain group.
	HostGroupIds pulumi.IntArrayInput
	// Required if HostAddType = 3. Single or multiple domain names are supported.
	HostLists pulumi.StringArrayInput
	// Type of IP address addition.
	IpAddType pulumi.IntInput
	// Required if IpAddType = 2.
	IpGroupIds pulumi.IntArrayInput
	// Required if IpAddType = 3. Single or multiple IP addresses are supported.
	IpLists pulumi.StringArrayInput
	// Country or region code.
	IpLocationCountries pulumi.StringArrayInput
	// Domestic region code.
	IpLocationSubregions pulumi.StringArrayInput
	// Rule name.
	Name pulumi.StringPtrInput
	// The name of the project to which your domain names belong.
	ProjectName pulumi.StringPtrInput
	// The path of Matching.
	Url pulumi.StringInput
}

func (AclRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclRuleArgs)(nil)).Elem()
}

type AclRuleInput interface {
	pulumi.Input

	ToAclRuleOutput() AclRuleOutput
	ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput
}

func (*AclRule) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRule)(nil)).Elem()
}

func (i *AclRule) ToAclRuleOutput() AclRuleOutput {
	return i.ToAclRuleOutputWithContext(context.Background())
}

func (i *AclRule) ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleOutput)
}

// AclRuleArrayInput is an input type that accepts AclRuleArray and AclRuleArrayOutput values.
// You can construct a concrete instance of `AclRuleArrayInput` via:
//
//	AclRuleArray{ AclRuleArgs{...} }
type AclRuleArrayInput interface {
	pulumi.Input

	ToAclRuleArrayOutput() AclRuleArrayOutput
	ToAclRuleArrayOutputWithContext(context.Context) AclRuleArrayOutput
}

type AclRuleArray []AclRuleInput

func (AclRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRule)(nil)).Elem()
}

func (i AclRuleArray) ToAclRuleArrayOutput() AclRuleArrayOutput {
	return i.ToAclRuleArrayOutputWithContext(context.Background())
}

func (i AclRuleArray) ToAclRuleArrayOutputWithContext(ctx context.Context) AclRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleArrayOutput)
}

// AclRuleMapInput is an input type that accepts AclRuleMap and AclRuleMapOutput values.
// You can construct a concrete instance of `AclRuleMapInput` via:
//
//	AclRuleMap{ "key": AclRuleArgs{...} }
type AclRuleMapInput interface {
	pulumi.Input

	ToAclRuleMapOutput() AclRuleMapOutput
	ToAclRuleMapOutputWithContext(context.Context) AclRuleMapOutput
}

type AclRuleMap map[string]AclRuleInput

func (AclRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRule)(nil)).Elem()
}

func (i AclRuleMap) ToAclRuleMapOutput() AclRuleMapOutput {
	return i.ToAclRuleMapOutputWithContext(context.Background())
}

func (i AclRuleMap) ToAclRuleMapOutputWithContext(ctx context.Context) AclRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclRuleMapOutput)
}

type AclRuleOutput struct{ *pulumi.OutputState }

func (AclRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclRule)(nil)).Elem()
}

func (o AclRuleOutput) ToAclRuleOutput() AclRuleOutput {
	return o
}

func (o AclRuleOutput) ToAclRuleOutputWithContext(ctx context.Context) AclRuleOutput {
	return o
}

// Advanced conditions.
func (o AclRuleOutput) AccurateGroup() AclRuleAccurateGroupOutput {
	return o.ApplyT(func(v *AclRule) AclRuleAccurateGroupOutput { return v.AccurateGroup }).(AclRuleAccurateGroupOutput)
}

// The type of access control rules.
func (o AclRuleOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.AclType }).(pulumi.StringOutput)
}

// Action to be taken on requests that match the rule.
func (o AclRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Whether to set advanced conditions.
func (o AclRuleOutput) Advanced() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.Advanced }).(pulumi.IntOutput)
}

// IP address.
func (o AclRuleOutput) ClientIp() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.ClientIp }).(pulumi.StringOutput)
}

// Rule description.
func (o AclRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether to enable the rule.
func (o AclRuleOutput) Enable() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.Enable }).(pulumi.IntOutput)
}

// Type of domain name addition.
func (o AclRuleOutput) HostAddType() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.HostAddType }).(pulumi.IntOutput)
}

// The ID of the domain group.
func (o AclRuleOutput) HostGroupIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntArrayOutput { return v.HostGroupIds }).(pulumi.IntArrayOutput)
}

// The list of domain name groups.
func (o AclRuleOutput) HostGroups() AclRuleHostGroupArrayOutput {
	return o.ApplyT(func(v *AclRule) AclRuleHostGroupArrayOutput { return v.HostGroups }).(AclRuleHostGroupArrayOutput)
}

// Required if HostAddType = 3. Single or multiple domain names are supported.
func (o AclRuleOutput) HostLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.HostLists }).(pulumi.StringArrayOutput)
}

// Type of IP address addition.
func (o AclRuleOutput) IpAddType() pulumi.IntOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntOutput { return v.IpAddType }).(pulumi.IntOutput)
}

// Required if IpAddType = 2.
func (o AclRuleOutput) IpGroupIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.IntArrayOutput { return v.IpGroupIds }).(pulumi.IntArrayOutput)
}

// The list of domain name groups.
func (o AclRuleOutput) IpGroups() AclRuleIpGroupArrayOutput {
	return o.ApplyT(func(v *AclRule) AclRuleIpGroupArrayOutput { return v.IpGroups }).(AclRuleIpGroupArrayOutput)
}

// Required if IpAddType = 3. Single or multiple IP addresses are supported.
func (o AclRuleOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.IpLists }).(pulumi.StringArrayOutput)
}

// Country or region code.
func (o AclRuleOutput) IpLocationCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.IpLocationCountries }).(pulumi.StringArrayOutput)
}

// Domestic region code.
func (o AclRuleOutput) IpLocationSubregions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringArrayOutput { return v.IpLocationSubregions }).(pulumi.StringArrayOutput)
}

// Rule name.
func (o AclRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The name of the project to which your domain names belong.
func (o AclRuleOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// Rule unique identifier.
func (o AclRuleOutput) RuleTag() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.RuleTag }).(pulumi.StringOutput)
}

// Update time of the rule.
func (o AclRuleOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The path of Matching.
func (o AclRuleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *AclRule) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type AclRuleArrayOutput struct{ *pulumi.OutputState }

func (AclRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclRule)(nil)).Elem()
}

func (o AclRuleArrayOutput) ToAclRuleArrayOutput() AclRuleArrayOutput {
	return o
}

func (o AclRuleArrayOutput) ToAclRuleArrayOutputWithContext(ctx context.Context) AclRuleArrayOutput {
	return o
}

func (o AclRuleArrayOutput) Index(i pulumi.IntInput) AclRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclRule {
		return vs[0].([]*AclRule)[vs[1].(int)]
	}).(AclRuleOutput)
}

type AclRuleMapOutput struct{ *pulumi.OutputState }

func (AclRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclRule)(nil)).Elem()
}

func (o AclRuleMapOutput) ToAclRuleMapOutput() AclRuleMapOutput {
	return o
}

func (o AclRuleMapOutput) ToAclRuleMapOutputWithContext(ctx context.Context) AclRuleMapOutput {
	return o
}

func (o AclRuleMapOutput) MapIndex(k pulumi.StringInput) AclRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclRule {
		return vs[0].(map[string]*AclRule)[vs[1].(string)]
	}).(AclRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleInput)(nil)).Elem(), &AclRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleArrayInput)(nil)).Elem(), AclRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclRuleMapInput)(nil)).Elem(), AclRuleMap{})
	pulumi.RegisterOutputType(AclRuleOutput{})
	pulumi.RegisterOutputType(AclRuleArrayOutput{})
	pulumi.RegisterOutputType(AclRuleMapOutput{})
}
