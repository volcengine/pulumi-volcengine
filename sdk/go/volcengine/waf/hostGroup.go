// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage waf host group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := waf.NewHostGroup(ctx, "foo", &waf.HostGroupArgs{
//				Description: pulumi.String("tf-test"),
//				HostLists: pulumi.StringArray{
//					pulumi.String("www.tf-test.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WafHostGroup can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:waf/hostGroup:HostGroup default resource_id
// ```
type HostGroup struct {
	pulumi.CustomResourceState

	// Domain name list modification action. Works only on modified scenes.
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// Domain name group description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The number of domain names contained in the domain name group.
	HostCount pulumi.IntOutput `pulumi:"hostCount"`
	// The ID of the domain name group.
	HostGroupId pulumi.IntOutput `pulumi:"hostGroupId"`
	// Domain names that need to be added to this domain name group.
	HostLists pulumi.StringArrayOutput `pulumi:"hostLists"`
	// The name of the domain name group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The project of Domain name group.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// The list of associated rules.
	RelatedRules HostGroupRelatedRuleArrayOutput `pulumi:"relatedRules"`
	// Domain name group update time.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewHostGroup registers a new resource with the given unique name, arguments, and options.
func NewHostGroup(ctx *pulumi.Context,
	name string, args *HostGroupArgs, opts ...pulumi.ResourceOption) (*HostGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HostLists == nil {
		return nil, errors.New("invalid value for required argument 'HostLists'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource HostGroup
	err := ctx.RegisterResource("volcengine:waf/hostGroup:HostGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHostGroup gets an existing HostGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHostGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HostGroupState, opts ...pulumi.ResourceOption) (*HostGroup, error) {
	var resource HostGroup
	err := ctx.ReadResource("volcengine:waf/hostGroup:HostGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HostGroup resources.
type hostGroupState struct {
	// Domain name list modification action. Works only on modified scenes.
	Action *string `pulumi:"action"`
	// Domain name group description.
	Description *string `pulumi:"description"`
	// The number of domain names contained in the domain name group.
	HostCount *int `pulumi:"hostCount"`
	// The ID of the domain name group.
	HostGroupId *int `pulumi:"hostGroupId"`
	// Domain names that need to be added to this domain name group.
	HostLists []string `pulumi:"hostLists"`
	// The name of the domain name group.
	Name *string `pulumi:"name"`
	// The project of Domain name group.
	ProjectName *string `pulumi:"projectName"`
	// The list of associated rules.
	RelatedRules []HostGroupRelatedRule `pulumi:"relatedRules"`
	// Domain name group update time.
	UpdateTime *string `pulumi:"updateTime"`
}

type HostGroupState struct {
	// Domain name list modification action. Works only on modified scenes.
	Action pulumi.StringPtrInput
	// Domain name group description.
	Description pulumi.StringPtrInput
	// The number of domain names contained in the domain name group.
	HostCount pulumi.IntPtrInput
	// The ID of the domain name group.
	HostGroupId pulumi.IntPtrInput
	// Domain names that need to be added to this domain name group.
	HostLists pulumi.StringArrayInput
	// The name of the domain name group.
	Name pulumi.StringPtrInput
	// The project of Domain name group.
	ProjectName pulumi.StringPtrInput
	// The list of associated rules.
	RelatedRules HostGroupRelatedRuleArrayInput
	// Domain name group update time.
	UpdateTime pulumi.StringPtrInput
}

func (HostGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*hostGroupState)(nil)).Elem()
}

type hostGroupArgs struct {
	// Domain name list modification action. Works only on modified scenes.
	Action *string `pulumi:"action"`
	// Domain name group description.
	Description *string `pulumi:"description"`
	// Domain names that need to be added to this domain name group.
	HostLists []string `pulumi:"hostLists"`
	// The name of the domain name group.
	Name *string `pulumi:"name"`
	// The project of Domain name group.
	ProjectName *string `pulumi:"projectName"`
}

// The set of arguments for constructing a HostGroup resource.
type HostGroupArgs struct {
	// Domain name list modification action. Works only on modified scenes.
	Action pulumi.StringPtrInput
	// Domain name group description.
	Description pulumi.StringPtrInput
	// Domain names that need to be added to this domain name group.
	HostLists pulumi.StringArrayInput
	// The name of the domain name group.
	Name pulumi.StringPtrInput
	// The project of Domain name group.
	ProjectName pulumi.StringPtrInput
}

func (HostGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*hostGroupArgs)(nil)).Elem()
}

type HostGroupInput interface {
	pulumi.Input

	ToHostGroupOutput() HostGroupOutput
	ToHostGroupOutputWithContext(ctx context.Context) HostGroupOutput
}

func (*HostGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**HostGroup)(nil)).Elem()
}

func (i *HostGroup) ToHostGroupOutput() HostGroupOutput {
	return i.ToHostGroupOutputWithContext(context.Background())
}

func (i *HostGroup) ToHostGroupOutputWithContext(ctx context.Context) HostGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostGroupOutput)
}

// HostGroupArrayInput is an input type that accepts HostGroupArray and HostGroupArrayOutput values.
// You can construct a concrete instance of `HostGroupArrayInput` via:
//
//	HostGroupArray{ HostGroupArgs{...} }
type HostGroupArrayInput interface {
	pulumi.Input

	ToHostGroupArrayOutput() HostGroupArrayOutput
	ToHostGroupArrayOutputWithContext(context.Context) HostGroupArrayOutput
}

type HostGroupArray []HostGroupInput

func (HostGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostGroup)(nil)).Elem()
}

func (i HostGroupArray) ToHostGroupArrayOutput() HostGroupArrayOutput {
	return i.ToHostGroupArrayOutputWithContext(context.Background())
}

func (i HostGroupArray) ToHostGroupArrayOutputWithContext(ctx context.Context) HostGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostGroupArrayOutput)
}

// HostGroupMapInput is an input type that accepts HostGroupMap and HostGroupMapOutput values.
// You can construct a concrete instance of `HostGroupMapInput` via:
//
//	HostGroupMap{ "key": HostGroupArgs{...} }
type HostGroupMapInput interface {
	pulumi.Input

	ToHostGroupMapOutput() HostGroupMapOutput
	ToHostGroupMapOutputWithContext(context.Context) HostGroupMapOutput
}

type HostGroupMap map[string]HostGroupInput

func (HostGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostGroup)(nil)).Elem()
}

func (i HostGroupMap) ToHostGroupMapOutput() HostGroupMapOutput {
	return i.ToHostGroupMapOutputWithContext(context.Background())
}

func (i HostGroupMap) ToHostGroupMapOutputWithContext(ctx context.Context) HostGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HostGroupMapOutput)
}

type HostGroupOutput struct{ *pulumi.OutputState }

func (HostGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HostGroup)(nil)).Elem()
}

func (o HostGroupOutput) ToHostGroupOutput() HostGroupOutput {
	return o
}

func (o HostGroupOutput) ToHostGroupOutputWithContext(ctx context.Context) HostGroupOutput {
	return o
}

// Domain name list modification action. Works only on modified scenes.
func (o HostGroupOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// Domain name group description.
func (o HostGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The number of domain names contained in the domain name group.
func (o HostGroupOutput) HostCount() pulumi.IntOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.IntOutput { return v.HostCount }).(pulumi.IntOutput)
}

// The ID of the domain name group.
func (o HostGroupOutput) HostGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.IntOutput { return v.HostGroupId }).(pulumi.IntOutput)
}

// Domain names that need to be added to this domain name group.
func (o HostGroupOutput) HostLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringArrayOutput { return v.HostLists }).(pulumi.StringArrayOutput)
}

// The name of the domain name group.
func (o HostGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The project of Domain name group.
func (o HostGroupOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The list of associated rules.
func (o HostGroupOutput) RelatedRules() HostGroupRelatedRuleArrayOutput {
	return o.ApplyT(func(v *HostGroup) HostGroupRelatedRuleArrayOutput { return v.RelatedRules }).(HostGroupRelatedRuleArrayOutput)
}

// Domain name group update time.
func (o HostGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *HostGroup) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type HostGroupArrayOutput struct{ *pulumi.OutputState }

func (HostGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HostGroup)(nil)).Elem()
}

func (o HostGroupArrayOutput) ToHostGroupArrayOutput() HostGroupArrayOutput {
	return o
}

func (o HostGroupArrayOutput) ToHostGroupArrayOutputWithContext(ctx context.Context) HostGroupArrayOutput {
	return o
}

func (o HostGroupArrayOutput) Index(i pulumi.IntInput) HostGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *HostGroup {
		return vs[0].([]*HostGroup)[vs[1].(int)]
	}).(HostGroupOutput)
}

type HostGroupMapOutput struct{ *pulumi.OutputState }

func (HostGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HostGroup)(nil)).Elem()
}

func (o HostGroupMapOutput) ToHostGroupMapOutput() HostGroupMapOutput {
	return o
}

func (o HostGroupMapOutput) ToHostGroupMapOutputWithContext(ctx context.Context) HostGroupMapOutput {
	return o
}

func (o HostGroupMapOutput) MapIndex(k pulumi.StringInput) HostGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *HostGroup {
		return vs[0].(map[string]*HostGroup)[vs[1].(string)]
	}).(HostGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HostGroupInput)(nil)).Elem(), &HostGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostGroupArrayInput)(nil)).Elem(), HostGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HostGroupMapInput)(nil)).Elem(), HostGroupMap{})
	pulumi.RegisterOutputType(HostGroupOutput{})
	pulumi.RegisterOutputType(HostGroupArrayOutput{})
	pulumi.RegisterOutputType(HostGroupMapOutput{})
}
