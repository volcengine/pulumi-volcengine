// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage waf system bot
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := waf.NewSystemBot(ctx, "foo", &waf.SystemBotArgs{
//				Action:      pulumi.String("observe"),
//				BotType:     pulumi.String("feed_fetcher"),
//				Enable:      pulumi.Int(0),
//				Host:        pulumi.String("www.tf-test.com"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WafSystemBot can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:waf/systemBot:SystemBot default BotType:Host
// ```
type SystemBot struct {
	pulumi.CustomResourceState

	// The execution action of the Bot.
	Action pulumi.StringOutput `pulumi:"action"`
	// The name of bot.
	BotType pulumi.StringOutput `pulumi:"botType"`
	// The description of the Bot.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether to enable bot.
	Enable pulumi.IntOutput `pulumi:"enable"`
	// Domain name information.
	Host pulumi.StringOutput `pulumi:"host"`
	// The Name of the affiliated project resource.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// The ID of the Bot rule.
	RuleTag pulumi.StringOutput `pulumi:"ruleTag"`
}

// NewSystemBot registers a new resource with the given unique name, arguments, and options.
func NewSystemBot(ctx *pulumi.Context,
	name string, args *SystemBotArgs, opts ...pulumi.ResourceOption) (*SystemBot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BotType == nil {
		return nil, errors.New("invalid value for required argument 'BotType'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SystemBot
	err := ctx.RegisterResource("volcengine:waf/systemBot:SystemBot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystemBot gets an existing SystemBot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystemBot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemBotState, opts ...pulumi.ResourceOption) (*SystemBot, error) {
	var resource SystemBot
	err := ctx.ReadResource("volcengine:waf/systemBot:SystemBot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SystemBot resources.
type systemBotState struct {
	// The execution action of the Bot.
	Action *string `pulumi:"action"`
	// The name of bot.
	BotType *string `pulumi:"botType"`
	// The description of the Bot.
	Description *string `pulumi:"description"`
	// Whether to enable bot.
	Enable *int `pulumi:"enable"`
	// Domain name information.
	Host *string `pulumi:"host"`
	// The Name of the affiliated project resource.
	ProjectName *string `pulumi:"projectName"`
	// The ID of the Bot rule.
	RuleTag *string `pulumi:"ruleTag"`
}

type SystemBotState struct {
	// The execution action of the Bot.
	Action pulumi.StringPtrInput
	// The name of bot.
	BotType pulumi.StringPtrInput
	// The description of the Bot.
	Description pulumi.StringPtrInput
	// Whether to enable bot.
	Enable pulumi.IntPtrInput
	// Domain name information.
	Host pulumi.StringPtrInput
	// The Name of the affiliated project resource.
	ProjectName pulumi.StringPtrInput
	// The ID of the Bot rule.
	RuleTag pulumi.StringPtrInput
}

func (SystemBotState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemBotState)(nil)).Elem()
}

type systemBotArgs struct {
	// The execution action of the Bot.
	Action *string `pulumi:"action"`
	// The name of bot.
	BotType string `pulumi:"botType"`
	// Whether to enable bot.
	Enable *int `pulumi:"enable"`
	// Domain name information.
	Host string `pulumi:"host"`
	// The Name of the affiliated project resource.
	ProjectName *string `pulumi:"projectName"`
}

// The set of arguments for constructing a SystemBot resource.
type SystemBotArgs struct {
	// The execution action of the Bot.
	Action pulumi.StringPtrInput
	// The name of bot.
	BotType pulumi.StringInput
	// Whether to enable bot.
	Enable pulumi.IntPtrInput
	// Domain name information.
	Host pulumi.StringInput
	// The Name of the affiliated project resource.
	ProjectName pulumi.StringPtrInput
}

func (SystemBotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemBotArgs)(nil)).Elem()
}

type SystemBotInput interface {
	pulumi.Input

	ToSystemBotOutput() SystemBotOutput
	ToSystemBotOutputWithContext(ctx context.Context) SystemBotOutput
}

func (*SystemBot) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemBot)(nil)).Elem()
}

func (i *SystemBot) ToSystemBotOutput() SystemBotOutput {
	return i.ToSystemBotOutputWithContext(context.Background())
}

func (i *SystemBot) ToSystemBotOutputWithContext(ctx context.Context) SystemBotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemBotOutput)
}

// SystemBotArrayInput is an input type that accepts SystemBotArray and SystemBotArrayOutput values.
// You can construct a concrete instance of `SystemBotArrayInput` via:
//
//	SystemBotArray{ SystemBotArgs{...} }
type SystemBotArrayInput interface {
	pulumi.Input

	ToSystemBotArrayOutput() SystemBotArrayOutput
	ToSystemBotArrayOutputWithContext(context.Context) SystemBotArrayOutput
}

type SystemBotArray []SystemBotInput

func (SystemBotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemBot)(nil)).Elem()
}

func (i SystemBotArray) ToSystemBotArrayOutput() SystemBotArrayOutput {
	return i.ToSystemBotArrayOutputWithContext(context.Background())
}

func (i SystemBotArray) ToSystemBotArrayOutputWithContext(ctx context.Context) SystemBotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemBotArrayOutput)
}

// SystemBotMapInput is an input type that accepts SystemBotMap and SystemBotMapOutput values.
// You can construct a concrete instance of `SystemBotMapInput` via:
//
//	SystemBotMap{ "key": SystemBotArgs{...} }
type SystemBotMapInput interface {
	pulumi.Input

	ToSystemBotMapOutput() SystemBotMapOutput
	ToSystemBotMapOutputWithContext(context.Context) SystemBotMapOutput
}

type SystemBotMap map[string]SystemBotInput

func (SystemBotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemBot)(nil)).Elem()
}

func (i SystemBotMap) ToSystemBotMapOutput() SystemBotMapOutput {
	return i.ToSystemBotMapOutputWithContext(context.Background())
}

func (i SystemBotMap) ToSystemBotMapOutputWithContext(ctx context.Context) SystemBotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemBotMapOutput)
}

type SystemBotOutput struct{ *pulumi.OutputState }

func (SystemBotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SystemBot)(nil)).Elem()
}

func (o SystemBotOutput) ToSystemBotOutput() SystemBotOutput {
	return o
}

func (o SystemBotOutput) ToSystemBotOutputWithContext(ctx context.Context) SystemBotOutput {
	return o
}

// The execution action of the Bot.
func (o SystemBotOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemBot) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The name of bot.
func (o SystemBotOutput) BotType() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemBot) pulumi.StringOutput { return v.BotType }).(pulumi.StringOutput)
}

// The description of the Bot.
func (o SystemBotOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemBot) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether to enable bot.
func (o SystemBotOutput) Enable() pulumi.IntOutput {
	return o.ApplyT(func(v *SystemBot) pulumi.IntOutput { return v.Enable }).(pulumi.IntOutput)
}

// Domain name information.
func (o SystemBotOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemBot) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The Name of the affiliated project resource.
func (o SystemBotOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SystemBot) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The ID of the Bot rule.
func (o SystemBotOutput) RuleTag() pulumi.StringOutput {
	return o.ApplyT(func(v *SystemBot) pulumi.StringOutput { return v.RuleTag }).(pulumi.StringOutput)
}

type SystemBotArrayOutput struct{ *pulumi.OutputState }

func (SystemBotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SystemBot)(nil)).Elem()
}

func (o SystemBotArrayOutput) ToSystemBotArrayOutput() SystemBotArrayOutput {
	return o
}

func (o SystemBotArrayOutput) ToSystemBotArrayOutputWithContext(ctx context.Context) SystemBotArrayOutput {
	return o
}

func (o SystemBotArrayOutput) Index(i pulumi.IntInput) SystemBotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SystemBot {
		return vs[0].([]*SystemBot)[vs[1].(int)]
	}).(SystemBotOutput)
}

type SystemBotMapOutput struct{ *pulumi.OutputState }

func (SystemBotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SystemBot)(nil)).Elem()
}

func (o SystemBotMapOutput) ToSystemBotMapOutput() SystemBotMapOutput {
	return o
}

func (o SystemBotMapOutput) ToSystemBotMapOutputWithContext(ctx context.Context) SystemBotMapOutput {
	return o
}

func (o SystemBotMapOutput) MapIndex(k pulumi.StringInput) SystemBotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SystemBot {
		return vs[0].(map[string]*SystemBot)[vs[1].(string)]
	}).(SystemBotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemBotInput)(nil)).Elem(), &SystemBot{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemBotArrayInput)(nil)).Elem(), SystemBotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemBotMapInput)(nil)).Elem(), SystemBotMap{})
	pulumi.RegisterOutputType(SystemBotOutput{})
	pulumi.RegisterOutputType(SystemBotArrayOutput{})
	pulumi.RegisterOutputType(SystemBotMapOutput{})
}
