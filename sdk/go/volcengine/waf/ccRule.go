// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage waf cc rule
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := waf.NewCcRule(ctx, "foo", &waf.CcRuleArgs{
//				AccurateGroup: &waf.CcRuleAccurateGroupArgs{
//					AccurateRules: waf.CcRuleAccurateGroupAccurateRuleArray{
//						&waf.CcRuleAccurateGroupAccurateRuleArgs{
//							HttpObj:     pulumi.String("request.uri"),
//							ObjType:     pulumi.Int(1),
//							Opretar:     pulumi.Int(2),
//							Property:    pulumi.Int(0),
//							ValueString: pulumi.String("tf"),
//						},
//						&waf.CcRuleAccurateGroupAccurateRuleArgs{
//							HttpObj:     pulumi.String("request.schema"),
//							ObjType:     pulumi.Int(0),
//							Opretar:     pulumi.Int(2),
//							Property:    pulumi.Int(0),
//							ValueString: pulumi.String("tf-2"),
//						},
//					},
//					Logic: pulumi.Int(2),
//				},
//				CcType:    pulumi.Int(1),
//				CountTime: pulumi.Int(102),
//				CronConfs: waf.CcRuleCronConfArray{
//					&waf.CcRuleCronConfArgs{
//						Crontab:         pulumi.String("* 0 * * 1,2,3,4,5,6,0"),
//						PathThreshold:   pulumi.Int(123),
//						SingleThreshold: pulumi.Int(234),
//					},
//					&waf.CcRuleCronConfArgs{
//						Crontab:         pulumi.String("* 3-8 * * 1,2,3,4,5,6,0"),
//						PathThreshold:   pulumi.Int(345),
//						SingleThreshold: pulumi.Int(456),
//					},
//				},
//				CronEnable:      pulumi.Int(1),
//				EffectTime:      pulumi.Int(200),
//				Enable:          pulumi.Int(1),
//				ExemptionTime:   pulumi.Int(0),
//				Field:           pulumi.String("HEADER:User-Agemnt"),
//				Host:            pulumi.String("www.tf-test.com"),
//				PathThreshold:   pulumi.Int(101),
//				RulePriority:    pulumi.Int(2),
//				SingleThreshold: pulumi.Int(100),
//				Url:             pulumi.String("/"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WafCcRule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:waf/ccRule:CcRule default resource_id:Host
// ```
type CcRule struct {
	pulumi.CustomResourceState

	// Advanced conditions.
	AccurateGroup CcRuleAccurateGroupPtrOutput `pulumi:"accurateGroup"`
	// Whether to enable advanced conditions.
	AdvancedEnable pulumi.BoolPtrOutput `pulumi:"advancedEnable"`
	// The actions performed on subsequent requests after meeting the statistical conditions.
	CcType pulumi.IntOutput `pulumi:"ccType"`
	// The statistical period of the strategy.
	CountTime pulumi.IntOutput `pulumi:"countTime"`
	// Details of the periodic loop configuration.
	CronConfs CcRuleCronConfArrayOutput `pulumi:"cronConfs"`
	// Whether to set the cycle to take effect.
	CronEnable pulumi.IntPtrOutput `pulumi:"cronEnable"`
	// Limit the duration, that is, the effective duration of the action.
	EffectTime pulumi.IntOutput `pulumi:"effectTime"`
	// Whether to enable the rules.
	Enable pulumi.IntOutput `pulumi:"enable"`
	// The total number of enabled rules within the rule group.
	EnableCount pulumi.IntOutput `pulumi:"enableCount"`
	// Strategy exemption time.
	ExemptionTime pulumi.IntPtrOutput `pulumi:"exemptionTime"`
	// statistical object.
	Field pulumi.StringOutput `pulumi:"field"`
	// Website domain names that require the setting of protection rules.
	Host pulumi.StringOutput `pulumi:"host"`
	// The creation time of the rule group.
	InsertTime pulumi.StringOutput `pulumi:"insertTime"`
	// The name of cc rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// The threshold of the total number of times the request path is accessed.
	PathThreshold pulumi.IntOutput `pulumi:"pathThreshold"`
	// The Name of the affiliated project resource.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// Details of the rule group.
	RuleGroups CcRuleRuleGroupArrayOutput `pulumi:"ruleGroups"`
	// Rule execution priority.
	RulePriority pulumi.IntOutput `pulumi:"rulePriority"`
	// The threshold of the number of times each statistical object accesses the request path.
	SingleThreshold pulumi.IntOutput `pulumi:"singleThreshold"`
	// The total number of rules within the rule group.
	TotalCount pulumi.IntOutput `pulumi:"totalCount"`
	// The website request path that needs protection.
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewCcRule registers a new resource with the given unique name, arguments, and options.
func NewCcRule(ctx *pulumi.Context,
	name string, args *CcRuleArgs, opts ...pulumi.ResourceOption) (*CcRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CcType == nil {
		return nil, errors.New("invalid value for required argument 'CcType'")
	}
	if args.CountTime == nil {
		return nil, errors.New("invalid value for required argument 'CountTime'")
	}
	if args.EffectTime == nil {
		return nil, errors.New("invalid value for required argument 'EffectTime'")
	}
	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.Field == nil {
		return nil, errors.New("invalid value for required argument 'Field'")
	}
	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.PathThreshold == nil {
		return nil, errors.New("invalid value for required argument 'PathThreshold'")
	}
	if args.RulePriority == nil {
		return nil, errors.New("invalid value for required argument 'RulePriority'")
	}
	if args.SingleThreshold == nil {
		return nil, errors.New("invalid value for required argument 'SingleThreshold'")
	}
	if args.Url == nil {
		return nil, errors.New("invalid value for required argument 'Url'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CcRule
	err := ctx.RegisterResource("volcengine:waf/ccRule:CcRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCcRule gets an existing CcRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCcRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CcRuleState, opts ...pulumi.ResourceOption) (*CcRule, error) {
	var resource CcRule
	err := ctx.ReadResource("volcengine:waf/ccRule:CcRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CcRule resources.
type ccRuleState struct {
	// Advanced conditions.
	AccurateGroup *CcRuleAccurateGroup `pulumi:"accurateGroup"`
	// Whether to enable advanced conditions.
	AdvancedEnable *bool `pulumi:"advancedEnable"`
	// The actions performed on subsequent requests after meeting the statistical conditions.
	CcType *int `pulumi:"ccType"`
	// The statistical period of the strategy.
	CountTime *int `pulumi:"countTime"`
	// Details of the periodic loop configuration.
	CronConfs []CcRuleCronConf `pulumi:"cronConfs"`
	// Whether to set the cycle to take effect.
	CronEnable *int `pulumi:"cronEnable"`
	// Limit the duration, that is, the effective duration of the action.
	EffectTime *int `pulumi:"effectTime"`
	// Whether to enable the rules.
	Enable *int `pulumi:"enable"`
	// The total number of enabled rules within the rule group.
	EnableCount *int `pulumi:"enableCount"`
	// Strategy exemption time.
	ExemptionTime *int `pulumi:"exemptionTime"`
	// statistical object.
	Field *string `pulumi:"field"`
	// Website domain names that require the setting of protection rules.
	Host *string `pulumi:"host"`
	// The creation time of the rule group.
	InsertTime *string `pulumi:"insertTime"`
	// The name of cc rule.
	Name *string `pulumi:"name"`
	// The threshold of the total number of times the request path is accessed.
	PathThreshold *int `pulumi:"pathThreshold"`
	// The Name of the affiliated project resource.
	ProjectName *string `pulumi:"projectName"`
	// Details of the rule group.
	RuleGroups []CcRuleRuleGroup `pulumi:"ruleGroups"`
	// Rule execution priority.
	RulePriority *int `pulumi:"rulePriority"`
	// The threshold of the number of times each statistical object accesses the request path.
	SingleThreshold *int `pulumi:"singleThreshold"`
	// The total number of rules within the rule group.
	TotalCount *int `pulumi:"totalCount"`
	// The website request path that needs protection.
	Url *string `pulumi:"url"`
}

type CcRuleState struct {
	// Advanced conditions.
	AccurateGroup CcRuleAccurateGroupPtrInput
	// Whether to enable advanced conditions.
	AdvancedEnable pulumi.BoolPtrInput
	// The actions performed on subsequent requests after meeting the statistical conditions.
	CcType pulumi.IntPtrInput
	// The statistical period of the strategy.
	CountTime pulumi.IntPtrInput
	// Details of the periodic loop configuration.
	CronConfs CcRuleCronConfArrayInput
	// Whether to set the cycle to take effect.
	CronEnable pulumi.IntPtrInput
	// Limit the duration, that is, the effective duration of the action.
	EffectTime pulumi.IntPtrInput
	// Whether to enable the rules.
	Enable pulumi.IntPtrInput
	// The total number of enabled rules within the rule group.
	EnableCount pulumi.IntPtrInput
	// Strategy exemption time.
	ExemptionTime pulumi.IntPtrInput
	// statistical object.
	Field pulumi.StringPtrInput
	// Website domain names that require the setting of protection rules.
	Host pulumi.StringPtrInput
	// The creation time of the rule group.
	InsertTime pulumi.StringPtrInput
	// The name of cc rule.
	Name pulumi.StringPtrInput
	// The threshold of the total number of times the request path is accessed.
	PathThreshold pulumi.IntPtrInput
	// The Name of the affiliated project resource.
	ProjectName pulumi.StringPtrInput
	// Details of the rule group.
	RuleGroups CcRuleRuleGroupArrayInput
	// Rule execution priority.
	RulePriority pulumi.IntPtrInput
	// The threshold of the number of times each statistical object accesses the request path.
	SingleThreshold pulumi.IntPtrInput
	// The total number of rules within the rule group.
	TotalCount pulumi.IntPtrInput
	// The website request path that needs protection.
	Url pulumi.StringPtrInput
}

func (CcRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ccRuleState)(nil)).Elem()
}

type ccRuleArgs struct {
	// Advanced conditions.
	AccurateGroup *CcRuleAccurateGroup `pulumi:"accurateGroup"`
	// Whether to enable advanced conditions.
	AdvancedEnable *bool `pulumi:"advancedEnable"`
	// The actions performed on subsequent requests after meeting the statistical conditions.
	CcType int `pulumi:"ccType"`
	// The statistical period of the strategy.
	CountTime int `pulumi:"countTime"`
	// Details of the periodic loop configuration.
	CronConfs []CcRuleCronConf `pulumi:"cronConfs"`
	// Whether to set the cycle to take effect.
	CronEnable *int `pulumi:"cronEnable"`
	// Limit the duration, that is, the effective duration of the action.
	EffectTime int `pulumi:"effectTime"`
	// Whether to enable the rules.
	Enable int `pulumi:"enable"`
	// Strategy exemption time.
	ExemptionTime *int `pulumi:"exemptionTime"`
	// statistical object.
	Field string `pulumi:"field"`
	// Website domain names that require the setting of protection rules.
	Host string `pulumi:"host"`
	// The name of cc rule.
	Name *string `pulumi:"name"`
	// The threshold of the total number of times the request path is accessed.
	PathThreshold int `pulumi:"pathThreshold"`
	// The Name of the affiliated project resource.
	ProjectName *string `pulumi:"projectName"`
	// Rule execution priority.
	RulePriority int `pulumi:"rulePriority"`
	// The threshold of the number of times each statistical object accesses the request path.
	SingleThreshold int `pulumi:"singleThreshold"`
	// The website request path that needs protection.
	Url string `pulumi:"url"`
}

// The set of arguments for constructing a CcRule resource.
type CcRuleArgs struct {
	// Advanced conditions.
	AccurateGroup CcRuleAccurateGroupPtrInput
	// Whether to enable advanced conditions.
	AdvancedEnable pulumi.BoolPtrInput
	// The actions performed on subsequent requests after meeting the statistical conditions.
	CcType pulumi.IntInput
	// The statistical period of the strategy.
	CountTime pulumi.IntInput
	// Details of the periodic loop configuration.
	CronConfs CcRuleCronConfArrayInput
	// Whether to set the cycle to take effect.
	CronEnable pulumi.IntPtrInput
	// Limit the duration, that is, the effective duration of the action.
	EffectTime pulumi.IntInput
	// Whether to enable the rules.
	Enable pulumi.IntInput
	// Strategy exemption time.
	ExemptionTime pulumi.IntPtrInput
	// statistical object.
	Field pulumi.StringInput
	// Website domain names that require the setting of protection rules.
	Host pulumi.StringInput
	// The name of cc rule.
	Name pulumi.StringPtrInput
	// The threshold of the total number of times the request path is accessed.
	PathThreshold pulumi.IntInput
	// The Name of the affiliated project resource.
	ProjectName pulumi.StringPtrInput
	// Rule execution priority.
	RulePriority pulumi.IntInput
	// The threshold of the number of times each statistical object accesses the request path.
	SingleThreshold pulumi.IntInput
	// The website request path that needs protection.
	Url pulumi.StringInput
}

func (CcRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ccRuleArgs)(nil)).Elem()
}

type CcRuleInput interface {
	pulumi.Input

	ToCcRuleOutput() CcRuleOutput
	ToCcRuleOutputWithContext(ctx context.Context) CcRuleOutput
}

func (*CcRule) ElementType() reflect.Type {
	return reflect.TypeOf((**CcRule)(nil)).Elem()
}

func (i *CcRule) ToCcRuleOutput() CcRuleOutput {
	return i.ToCcRuleOutputWithContext(context.Background())
}

func (i *CcRule) ToCcRuleOutputWithContext(ctx context.Context) CcRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcRuleOutput)
}

// CcRuleArrayInput is an input type that accepts CcRuleArray and CcRuleArrayOutput values.
// You can construct a concrete instance of `CcRuleArrayInput` via:
//
//	CcRuleArray{ CcRuleArgs{...} }
type CcRuleArrayInput interface {
	pulumi.Input

	ToCcRuleArrayOutput() CcRuleArrayOutput
	ToCcRuleArrayOutputWithContext(context.Context) CcRuleArrayOutput
}

type CcRuleArray []CcRuleInput

func (CcRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcRule)(nil)).Elem()
}

func (i CcRuleArray) ToCcRuleArrayOutput() CcRuleArrayOutput {
	return i.ToCcRuleArrayOutputWithContext(context.Background())
}

func (i CcRuleArray) ToCcRuleArrayOutputWithContext(ctx context.Context) CcRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcRuleArrayOutput)
}

// CcRuleMapInput is an input type that accepts CcRuleMap and CcRuleMapOutput values.
// You can construct a concrete instance of `CcRuleMapInput` via:
//
//	CcRuleMap{ "key": CcRuleArgs{...} }
type CcRuleMapInput interface {
	pulumi.Input

	ToCcRuleMapOutput() CcRuleMapOutput
	ToCcRuleMapOutputWithContext(context.Context) CcRuleMapOutput
}

type CcRuleMap map[string]CcRuleInput

func (CcRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcRule)(nil)).Elem()
}

func (i CcRuleMap) ToCcRuleMapOutput() CcRuleMapOutput {
	return i.ToCcRuleMapOutputWithContext(context.Background())
}

func (i CcRuleMap) ToCcRuleMapOutputWithContext(ctx context.Context) CcRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CcRuleMapOutput)
}

type CcRuleOutput struct{ *pulumi.OutputState }

func (CcRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CcRule)(nil)).Elem()
}

func (o CcRuleOutput) ToCcRuleOutput() CcRuleOutput {
	return o
}

func (o CcRuleOutput) ToCcRuleOutputWithContext(ctx context.Context) CcRuleOutput {
	return o
}

// Advanced conditions.
func (o CcRuleOutput) AccurateGroup() CcRuleAccurateGroupPtrOutput {
	return o.ApplyT(func(v *CcRule) CcRuleAccurateGroupPtrOutput { return v.AccurateGroup }).(CcRuleAccurateGroupPtrOutput)
}

// Whether to enable advanced conditions.
func (o CcRuleOutput) AdvancedEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CcRule) pulumi.BoolPtrOutput { return v.AdvancedEnable }).(pulumi.BoolPtrOutput)
}

// The actions performed on subsequent requests after meeting the statistical conditions.
func (o CcRuleOutput) CcType() pulumi.IntOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntOutput { return v.CcType }).(pulumi.IntOutput)
}

// The statistical period of the strategy.
func (o CcRuleOutput) CountTime() pulumi.IntOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntOutput { return v.CountTime }).(pulumi.IntOutput)
}

// Details of the periodic loop configuration.
func (o CcRuleOutput) CronConfs() CcRuleCronConfArrayOutput {
	return o.ApplyT(func(v *CcRule) CcRuleCronConfArrayOutput { return v.CronConfs }).(CcRuleCronConfArrayOutput)
}

// Whether to set the cycle to take effect.
func (o CcRuleOutput) CronEnable() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntPtrOutput { return v.CronEnable }).(pulumi.IntPtrOutput)
}

// Limit the duration, that is, the effective duration of the action.
func (o CcRuleOutput) EffectTime() pulumi.IntOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntOutput { return v.EffectTime }).(pulumi.IntOutput)
}

// Whether to enable the rules.
func (o CcRuleOutput) Enable() pulumi.IntOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntOutput { return v.Enable }).(pulumi.IntOutput)
}

// The total number of enabled rules within the rule group.
func (o CcRuleOutput) EnableCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntOutput { return v.EnableCount }).(pulumi.IntOutput)
}

// Strategy exemption time.
func (o CcRuleOutput) ExemptionTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntPtrOutput { return v.ExemptionTime }).(pulumi.IntPtrOutput)
}

// statistical object.
func (o CcRuleOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v *CcRule) pulumi.StringOutput { return v.Field }).(pulumi.StringOutput)
}

// Website domain names that require the setting of protection rules.
func (o CcRuleOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *CcRule) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The creation time of the rule group.
func (o CcRuleOutput) InsertTime() pulumi.StringOutput {
	return o.ApplyT(func(v *CcRule) pulumi.StringOutput { return v.InsertTime }).(pulumi.StringOutput)
}

// The name of cc rule.
func (o CcRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CcRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The threshold of the total number of times the request path is accessed.
func (o CcRuleOutput) PathThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntOutput { return v.PathThreshold }).(pulumi.IntOutput)
}

// The Name of the affiliated project resource.
func (o CcRuleOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CcRule) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// Details of the rule group.
func (o CcRuleOutput) RuleGroups() CcRuleRuleGroupArrayOutput {
	return o.ApplyT(func(v *CcRule) CcRuleRuleGroupArrayOutput { return v.RuleGroups }).(CcRuleRuleGroupArrayOutput)
}

// Rule execution priority.
func (o CcRuleOutput) RulePriority() pulumi.IntOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntOutput { return v.RulePriority }).(pulumi.IntOutput)
}

// The threshold of the number of times each statistical object accesses the request path.
func (o CcRuleOutput) SingleThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntOutput { return v.SingleThreshold }).(pulumi.IntOutput)
}

// The total number of rules within the rule group.
func (o CcRuleOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v *CcRule) pulumi.IntOutput { return v.TotalCount }).(pulumi.IntOutput)
}

// The website request path that needs protection.
func (o CcRuleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v *CcRule) pulumi.StringOutput { return v.Url }).(pulumi.StringOutput)
}

type CcRuleArrayOutput struct{ *pulumi.OutputState }

func (CcRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CcRule)(nil)).Elem()
}

func (o CcRuleArrayOutput) ToCcRuleArrayOutput() CcRuleArrayOutput {
	return o
}

func (o CcRuleArrayOutput) ToCcRuleArrayOutputWithContext(ctx context.Context) CcRuleArrayOutput {
	return o
}

func (o CcRuleArrayOutput) Index(i pulumi.IntInput) CcRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CcRule {
		return vs[0].([]*CcRule)[vs[1].(int)]
	}).(CcRuleOutput)
}

type CcRuleMapOutput struct{ *pulumi.OutputState }

func (CcRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CcRule)(nil)).Elem()
}

func (o CcRuleMapOutput) ToCcRuleMapOutput() CcRuleMapOutput {
	return o
}

func (o CcRuleMapOutput) ToCcRuleMapOutputWithContext(ctx context.Context) CcRuleMapOutput {
	return o
}

func (o CcRuleMapOutput) MapIndex(k pulumi.StringInput) CcRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CcRule {
		return vs[0].(map[string]*CcRule)[vs[1].(string)]
	}).(CcRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CcRuleInput)(nil)).Elem(), &CcRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcRuleArrayInput)(nil)).Elem(), CcRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CcRuleMapInput)(nil)).Elem(), CcRuleMap{})
	pulumi.RegisterOutputType(CcRuleOutput{})
	pulumi.RegisterOutputType(CcRuleArrayOutput{})
	pulumi.RegisterOutputType(CcRuleMapOutput{})
}
