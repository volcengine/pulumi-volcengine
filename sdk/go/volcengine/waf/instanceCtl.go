// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage waf instance ctl
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/waf"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := waf.NewInstanceCtl(ctx, "foo", &waf.InstanceCtlArgs{
//				AllowEnable: pulumi.Int(0),
//				BlockEnable: pulumi.Int(1),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// WafInstanceCtl can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:waf/instanceCtl:InstanceCtl default resource_id
// ```
type InstanceCtl struct {
	pulumi.CustomResourceState

	// Whether to enable the allowed access list policy for the instance corresponding to the current region.
	AllowEnable pulumi.IntOutput `pulumi:"allowEnable"`
	// Whether to enable the prohibited access list policy for the instance corresponding to the current region.
	BlockEnable pulumi.IntOutput `pulumi:"blockEnable"`
	// The name of the project associated with the current resource.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
}

// NewInstanceCtl registers a new resource with the given unique name, arguments, and options.
func NewInstanceCtl(ctx *pulumi.Context,
	name string, args *InstanceCtlArgs, opts ...pulumi.ResourceOption) (*InstanceCtl, error) {
	if args == nil {
		args = &InstanceCtlArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstanceCtl
	err := ctx.RegisterResource("volcengine:waf/instanceCtl:InstanceCtl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstanceCtl gets an existing InstanceCtl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstanceCtl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceCtlState, opts ...pulumi.ResourceOption) (*InstanceCtl, error) {
	var resource InstanceCtl
	err := ctx.ReadResource("volcengine:waf/instanceCtl:InstanceCtl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstanceCtl resources.
type instanceCtlState struct {
	// Whether to enable the allowed access list policy for the instance corresponding to the current region.
	AllowEnable *int `pulumi:"allowEnable"`
	// Whether to enable the prohibited access list policy for the instance corresponding to the current region.
	BlockEnable *int `pulumi:"blockEnable"`
	// The name of the project associated with the current resource.
	ProjectName *string `pulumi:"projectName"`
}

type InstanceCtlState struct {
	// Whether to enable the allowed access list policy for the instance corresponding to the current region.
	AllowEnable pulumi.IntPtrInput
	// Whether to enable the prohibited access list policy for the instance corresponding to the current region.
	BlockEnable pulumi.IntPtrInput
	// The name of the project associated with the current resource.
	ProjectName pulumi.StringPtrInput
}

func (InstanceCtlState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceCtlState)(nil)).Elem()
}

type instanceCtlArgs struct {
	// Whether to enable the allowed access list policy for the instance corresponding to the current region.
	AllowEnable *int `pulumi:"allowEnable"`
	// Whether to enable the prohibited access list policy for the instance corresponding to the current region.
	BlockEnable *int `pulumi:"blockEnable"`
	// The name of the project associated with the current resource.
	ProjectName *string `pulumi:"projectName"`
}

// The set of arguments for constructing a InstanceCtl resource.
type InstanceCtlArgs struct {
	// Whether to enable the allowed access list policy for the instance corresponding to the current region.
	AllowEnable pulumi.IntPtrInput
	// Whether to enable the prohibited access list policy for the instance corresponding to the current region.
	BlockEnable pulumi.IntPtrInput
	// The name of the project associated with the current resource.
	ProjectName pulumi.StringPtrInput
}

func (InstanceCtlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceCtlArgs)(nil)).Elem()
}

type InstanceCtlInput interface {
	pulumi.Input

	ToInstanceCtlOutput() InstanceCtlOutput
	ToInstanceCtlOutputWithContext(ctx context.Context) InstanceCtlOutput
}

func (*InstanceCtl) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCtl)(nil)).Elem()
}

func (i *InstanceCtl) ToInstanceCtlOutput() InstanceCtlOutput {
	return i.ToInstanceCtlOutputWithContext(context.Background())
}

func (i *InstanceCtl) ToInstanceCtlOutputWithContext(ctx context.Context) InstanceCtlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCtlOutput)
}

// InstanceCtlArrayInput is an input type that accepts InstanceCtlArray and InstanceCtlArrayOutput values.
// You can construct a concrete instance of `InstanceCtlArrayInput` via:
//
//	InstanceCtlArray{ InstanceCtlArgs{...} }
type InstanceCtlArrayInput interface {
	pulumi.Input

	ToInstanceCtlArrayOutput() InstanceCtlArrayOutput
	ToInstanceCtlArrayOutputWithContext(context.Context) InstanceCtlArrayOutput
}

type InstanceCtlArray []InstanceCtlInput

func (InstanceCtlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceCtl)(nil)).Elem()
}

func (i InstanceCtlArray) ToInstanceCtlArrayOutput() InstanceCtlArrayOutput {
	return i.ToInstanceCtlArrayOutputWithContext(context.Background())
}

func (i InstanceCtlArray) ToInstanceCtlArrayOutputWithContext(ctx context.Context) InstanceCtlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCtlArrayOutput)
}

// InstanceCtlMapInput is an input type that accepts InstanceCtlMap and InstanceCtlMapOutput values.
// You can construct a concrete instance of `InstanceCtlMapInput` via:
//
//	InstanceCtlMap{ "key": InstanceCtlArgs{...} }
type InstanceCtlMapInput interface {
	pulumi.Input

	ToInstanceCtlMapOutput() InstanceCtlMapOutput
	ToInstanceCtlMapOutputWithContext(context.Context) InstanceCtlMapOutput
}

type InstanceCtlMap map[string]InstanceCtlInput

func (InstanceCtlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceCtl)(nil)).Elem()
}

func (i InstanceCtlMap) ToInstanceCtlMapOutput() InstanceCtlMapOutput {
	return i.ToInstanceCtlMapOutputWithContext(context.Background())
}

func (i InstanceCtlMap) ToInstanceCtlMapOutputWithContext(ctx context.Context) InstanceCtlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceCtlMapOutput)
}

type InstanceCtlOutput struct{ *pulumi.OutputState }

func (InstanceCtlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceCtl)(nil)).Elem()
}

func (o InstanceCtlOutput) ToInstanceCtlOutput() InstanceCtlOutput {
	return o
}

func (o InstanceCtlOutput) ToInstanceCtlOutputWithContext(ctx context.Context) InstanceCtlOutput {
	return o
}

// Whether to enable the allowed access list policy for the instance corresponding to the current region.
func (o InstanceCtlOutput) AllowEnable() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceCtl) pulumi.IntOutput { return v.AllowEnable }).(pulumi.IntOutput)
}

// Whether to enable the prohibited access list policy for the instance corresponding to the current region.
func (o InstanceCtlOutput) BlockEnable() pulumi.IntOutput {
	return o.ApplyT(func(v *InstanceCtl) pulumi.IntOutput { return v.BlockEnable }).(pulumi.IntOutput)
}

// The name of the project associated with the current resource.
func (o InstanceCtlOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceCtl) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

type InstanceCtlArrayOutput struct{ *pulumi.OutputState }

func (InstanceCtlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstanceCtl)(nil)).Elem()
}

func (o InstanceCtlArrayOutput) ToInstanceCtlArrayOutput() InstanceCtlArrayOutput {
	return o
}

func (o InstanceCtlArrayOutput) ToInstanceCtlArrayOutputWithContext(ctx context.Context) InstanceCtlArrayOutput {
	return o
}

func (o InstanceCtlArrayOutput) Index(i pulumi.IntInput) InstanceCtlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstanceCtl {
		return vs[0].([]*InstanceCtl)[vs[1].(int)]
	}).(InstanceCtlOutput)
}

type InstanceCtlMapOutput struct{ *pulumi.OutputState }

func (InstanceCtlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstanceCtl)(nil)).Elem()
}

func (o InstanceCtlMapOutput) ToInstanceCtlMapOutput() InstanceCtlMapOutput {
	return o
}

func (o InstanceCtlMapOutput) ToInstanceCtlMapOutputWithContext(ctx context.Context) InstanceCtlMapOutput {
	return o
}

func (o InstanceCtlMapOutput) MapIndex(k pulumi.StringInput) InstanceCtlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstanceCtl {
		return vs[0].(map[string]*InstanceCtl)[vs[1].(string)]
	}).(InstanceCtlOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCtlInput)(nil)).Elem(), &InstanceCtl{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCtlArrayInput)(nil)).Elem(), InstanceCtlArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceCtlMapInput)(nil)).Elem(), InstanceCtlMap{})
	pulumi.RegisterOutputType(InstanceCtlOutput{})
	pulumi.RegisterOutputType(InstanceCtlArrayOutput{})
	pulumi.RegisterOutputType(InstanceCtlMapOutput{})
}
