// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package waf

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage waf vulnerability
// ## Import
//
// WafVulnerability can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:waf/vulnerability:Vulnerability default resource_id
// ```
type Vulnerability struct {
	pulumi.CustomResourceState

	// Protection mode.
	Action pulumi.StringOutput `pulumi:"action"`
	// The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
	AdvanceConfig VulnerabilityAdvanceConfigOutput `pulumi:"advanceConfig"`
	// Protect website domain names.
	Host pulumi.StringOutput `pulumi:"host"`
	// Detailed information of the vulnerability rules. By default, only the vulnerability protection rules of the custom mode are displayed.
	RuleDetails VulnerabilityRuleDetailArrayOutput `pulumi:"ruleDetails"`
	// The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
	RuleMode pulumi.StringOutput `pulumi:"ruleMode"`
	// Custom rule switch.
	SystemRuleSwitches VulnerabilitySystemRuleSwitchArrayOutput `pulumi:"systemRuleSwitches"`
}

// NewVulnerability registers a new resource with the given unique name, arguments, and options.
func NewVulnerability(ctx *pulumi.Context,
	name string, args *VulnerabilityArgs, opts ...pulumi.ResourceOption) (*Vulnerability, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vulnerability
	err := ctx.RegisterResource("volcengine:waf/vulnerability:Vulnerability", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVulnerability gets an existing Vulnerability resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVulnerability(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VulnerabilityState, opts ...pulumi.ResourceOption) (*Vulnerability, error) {
	var resource Vulnerability
	err := ctx.ReadResource("volcengine:waf/vulnerability:Vulnerability", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vulnerability resources.
type vulnerabilityState struct {
	// Protection mode.
	Action *string `pulumi:"action"`
	// The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
	AdvanceConfig *VulnerabilityAdvanceConfig `pulumi:"advanceConfig"`
	// Protect website domain names.
	Host *string `pulumi:"host"`
	// Detailed information of the vulnerability rules. By default, only the vulnerability protection rules of the custom mode are displayed.
	RuleDetails []VulnerabilityRuleDetail `pulumi:"ruleDetails"`
	// The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
	RuleMode *string `pulumi:"ruleMode"`
	// Custom rule switch.
	SystemRuleSwitches []VulnerabilitySystemRuleSwitch `pulumi:"systemRuleSwitches"`
}

type VulnerabilityState struct {
	// Protection mode.
	Action pulumi.StringPtrInput
	// The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
	AdvanceConfig VulnerabilityAdvanceConfigPtrInput
	// Protect website domain names.
	Host pulumi.StringPtrInput
	// Detailed information of the vulnerability rules. By default, only the vulnerability protection rules of the custom mode are displayed.
	RuleDetails VulnerabilityRuleDetailArrayInput
	// The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
	RuleMode pulumi.StringPtrInput
	// Custom rule switch.
	SystemRuleSwitches VulnerabilitySystemRuleSwitchArrayInput
}

func (VulnerabilityState) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityState)(nil)).Elem()
}

type vulnerabilityArgs struct {
	// Protection mode.
	Action *string `pulumi:"action"`
	// The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
	AdvanceConfig *VulnerabilityAdvanceConfig `pulumi:"advanceConfig"`
	// Protect website domain names.
	Host string `pulumi:"host"`
	// The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
	RuleMode *string `pulumi:"ruleMode"`
	// Custom rule switch.
	SystemRuleSwitches []VulnerabilitySystemRuleSwitch `pulumi:"systemRuleSwitches"`
}

// The set of arguments for constructing a Vulnerability resource.
type VulnerabilityArgs struct {
	// Protection mode.
	Action pulumi.StringPtrInput
	// The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
	AdvanceConfig VulnerabilityAdvanceConfigPtrInput
	// Protect website domain names.
	Host pulumi.StringInput
	// The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
	RuleMode pulumi.StringPtrInput
	// Custom rule switch.
	SystemRuleSwitches VulnerabilitySystemRuleSwitchArrayInput
}

func (VulnerabilityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vulnerabilityArgs)(nil)).Elem()
}

type VulnerabilityInput interface {
	pulumi.Input

	ToVulnerabilityOutput() VulnerabilityOutput
	ToVulnerabilityOutputWithContext(ctx context.Context) VulnerabilityOutput
}

func (*Vulnerability) ElementType() reflect.Type {
	return reflect.TypeOf((**Vulnerability)(nil)).Elem()
}

func (i *Vulnerability) ToVulnerabilityOutput() VulnerabilityOutput {
	return i.ToVulnerabilityOutputWithContext(context.Background())
}

func (i *Vulnerability) ToVulnerabilityOutputWithContext(ctx context.Context) VulnerabilityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityOutput)
}

// VulnerabilityArrayInput is an input type that accepts VulnerabilityArray and VulnerabilityArrayOutput values.
// You can construct a concrete instance of `VulnerabilityArrayInput` via:
//
//	VulnerabilityArray{ VulnerabilityArgs{...} }
type VulnerabilityArrayInput interface {
	pulumi.Input

	ToVulnerabilityArrayOutput() VulnerabilityArrayOutput
	ToVulnerabilityArrayOutputWithContext(context.Context) VulnerabilityArrayOutput
}

type VulnerabilityArray []VulnerabilityInput

func (VulnerabilityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vulnerability)(nil)).Elem()
}

func (i VulnerabilityArray) ToVulnerabilityArrayOutput() VulnerabilityArrayOutput {
	return i.ToVulnerabilityArrayOutputWithContext(context.Background())
}

func (i VulnerabilityArray) ToVulnerabilityArrayOutputWithContext(ctx context.Context) VulnerabilityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityArrayOutput)
}

// VulnerabilityMapInput is an input type that accepts VulnerabilityMap and VulnerabilityMapOutput values.
// You can construct a concrete instance of `VulnerabilityMapInput` via:
//
//	VulnerabilityMap{ "key": VulnerabilityArgs{...} }
type VulnerabilityMapInput interface {
	pulumi.Input

	ToVulnerabilityMapOutput() VulnerabilityMapOutput
	ToVulnerabilityMapOutputWithContext(context.Context) VulnerabilityMapOutput
}

type VulnerabilityMap map[string]VulnerabilityInput

func (VulnerabilityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vulnerability)(nil)).Elem()
}

func (i VulnerabilityMap) ToVulnerabilityMapOutput() VulnerabilityMapOutput {
	return i.ToVulnerabilityMapOutputWithContext(context.Background())
}

func (i VulnerabilityMap) ToVulnerabilityMapOutputWithContext(ctx context.Context) VulnerabilityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VulnerabilityMapOutput)
}

type VulnerabilityOutput struct{ *pulumi.OutputState }

func (VulnerabilityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vulnerability)(nil)).Elem()
}

func (o VulnerabilityOutput) ToVulnerabilityOutput() VulnerabilityOutput {
	return o
}

func (o VulnerabilityOutput) ToVulnerabilityOutputWithContext(ctx context.Context) VulnerabilityOutput {
	return o
}

// Protection mode.
func (o VulnerabilityOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *Vulnerability) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The advanced configuration of vulnerability protection currently supports automatic blocking of directory traversal attacks and high-frequency scanning attacks.
func (o VulnerabilityOutput) AdvanceConfig() VulnerabilityAdvanceConfigOutput {
	return o.ApplyT(func(v *Vulnerability) VulnerabilityAdvanceConfigOutput { return v.AdvanceConfig }).(VulnerabilityAdvanceConfigOutput)
}

// Protect website domain names.
func (o VulnerabilityOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *Vulnerability) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// Detailed information of the vulnerability rules. By default, only the vulnerability protection rules of the custom mode are displayed.
func (o VulnerabilityOutput) RuleDetails() VulnerabilityRuleDetailArrayOutput {
	return o.ApplyT(func(v *Vulnerability) VulnerabilityRuleDetailArrayOutput { return v.RuleDetails }).(VulnerabilityRuleDetailArrayOutput)
}

// The enabled vulnerability rule categories, WAF has classified the managed rules according to their strictness.
func (o VulnerabilityOutput) RuleMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Vulnerability) pulumi.StringOutput { return v.RuleMode }).(pulumi.StringOutput)
}

// Custom rule switch.
func (o VulnerabilityOutput) SystemRuleSwitches() VulnerabilitySystemRuleSwitchArrayOutput {
	return o.ApplyT(func(v *Vulnerability) VulnerabilitySystemRuleSwitchArrayOutput { return v.SystemRuleSwitches }).(VulnerabilitySystemRuleSwitchArrayOutput)
}

type VulnerabilityArrayOutput struct{ *pulumi.OutputState }

func (VulnerabilityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vulnerability)(nil)).Elem()
}

func (o VulnerabilityArrayOutput) ToVulnerabilityArrayOutput() VulnerabilityArrayOutput {
	return o
}

func (o VulnerabilityArrayOutput) ToVulnerabilityArrayOutputWithContext(ctx context.Context) VulnerabilityArrayOutput {
	return o
}

func (o VulnerabilityArrayOutput) Index(i pulumi.IntInput) VulnerabilityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vulnerability {
		return vs[0].([]*Vulnerability)[vs[1].(int)]
	}).(VulnerabilityOutput)
}

type VulnerabilityMapOutput struct{ *pulumi.OutputState }

func (VulnerabilityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vulnerability)(nil)).Elem()
}

func (o VulnerabilityMapOutput) ToVulnerabilityMapOutput() VulnerabilityMapOutput {
	return o
}

func (o VulnerabilityMapOutput) ToVulnerabilityMapOutputWithContext(ctx context.Context) VulnerabilityMapOutput {
	return o
}

func (o VulnerabilityMapOutput) MapIndex(k pulumi.StringInput) VulnerabilityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vulnerability {
		return vs[0].(map[string]*Vulnerability)[vs[1].(string)]
	}).(VulnerabilityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityInput)(nil)).Elem(), &Vulnerability{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityArrayInput)(nil)).Elem(), VulnerabilityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VulnerabilityMapInput)(nil)).Elem(), VulnerabilityMap{})
	pulumi.RegisterOutputType(VulnerabilityOutput{})
	pulumi.RegisterOutputType(VulnerabilityArrayOutput{})
	pulumi.RegisterOutputType(VulnerabilityMapOutput{})
}
