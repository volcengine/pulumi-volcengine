// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vepfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vepfs mount service attachment
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vepfs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String("cn-beijing-a"),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooFileSystem, err := vepfs.NewFileSystem(ctx, "fooFileSystem", &vepfs.FileSystemArgs{
//				FileSystemName: pulumi.String("acc-test-file-system"),
//				SubnetId:       fooSubnet.ID(),
//				StoreType:      pulumi.String("Advance_100"),
//				Description:    pulumi.String("tf-test"),
//				Capacity:       pulumi.Int(12),
//				Project:        pulumi.String("default"),
//				EnableRestripe: pulumi.Bool(false),
//				Tags: vepfs.FileSystemTagArray{
//					&vepfs.FileSystemTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooMountService, err := vepfs.NewMountService(ctx, "fooMountService", &vepfs.MountServiceArgs{
//				MountServiceName: pulumi.String("acc-test-mount-service"),
//				SubnetId:         fooSubnet.ID(),
//				NodeType:         pulumi.String("ecs.g1ie.large"),
//				Project:          pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vepfs.NewMountServiceAttachment(ctx, "fooMountServiceAttachment", &vepfs.MountServiceAttachmentArgs{
//				MountServiceId: fooMountService.ID(),
//				FileSystemId:   fooFileSystem.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VepfsMountServiceAttachment can be imported using the mount_service_id:file_system_id, e.g.
//
// ```sh
// $ pulumi import volcengine:vepfs/mountServiceAttachment:MountServiceAttachment default mount_service_id:file_system_id
// ```
type MountServiceAttachment struct {
	pulumi.CustomResourceState

	// The attach status of the vepfs file system.
	AttachStatus pulumi.StringOutput `pulumi:"attachStatus"`
	// The custom mount directory, the default value is file system id.
	CustomerPath pulumi.StringOutput `pulumi:"customerPath"`
	// The id of the vepfs file system.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// The id of the mount service.
	MountServiceId pulumi.StringOutput `pulumi:"mountServiceId"`
}

// NewMountServiceAttachment registers a new resource with the given unique name, arguments, and options.
func NewMountServiceAttachment(ctx *pulumi.Context,
	name string, args *MountServiceAttachmentArgs, opts ...pulumi.ResourceOption) (*MountServiceAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.MountServiceId == nil {
		return nil, errors.New("invalid value for required argument 'MountServiceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MountServiceAttachment
	err := ctx.RegisterResource("volcengine:vepfs/mountServiceAttachment:MountServiceAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMountServiceAttachment gets an existing MountServiceAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountServiceAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountServiceAttachmentState, opts ...pulumi.ResourceOption) (*MountServiceAttachment, error) {
	var resource MountServiceAttachment
	err := ctx.ReadResource("volcengine:vepfs/mountServiceAttachment:MountServiceAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MountServiceAttachment resources.
type mountServiceAttachmentState struct {
	// The attach status of the vepfs file system.
	AttachStatus *string `pulumi:"attachStatus"`
	// The custom mount directory, the default value is file system id.
	CustomerPath *string `pulumi:"customerPath"`
	// The id of the vepfs file system.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The id of the mount service.
	MountServiceId *string `pulumi:"mountServiceId"`
}

type MountServiceAttachmentState struct {
	// The attach status of the vepfs file system.
	AttachStatus pulumi.StringPtrInput
	// The custom mount directory, the default value is file system id.
	CustomerPath pulumi.StringPtrInput
	// The id of the vepfs file system.
	FileSystemId pulumi.StringPtrInput
	// The id of the mount service.
	MountServiceId pulumi.StringPtrInput
}

func (MountServiceAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*mountServiceAttachmentState)(nil)).Elem()
}

type mountServiceAttachmentArgs struct {
	// The custom mount directory, the default value is file system id.
	CustomerPath *string `pulumi:"customerPath"`
	// The id of the vepfs file system.
	FileSystemId string `pulumi:"fileSystemId"`
	// The id of the mount service.
	MountServiceId string `pulumi:"mountServiceId"`
}

// The set of arguments for constructing a MountServiceAttachment resource.
type MountServiceAttachmentArgs struct {
	// The custom mount directory, the default value is file system id.
	CustomerPath pulumi.StringPtrInput
	// The id of the vepfs file system.
	FileSystemId pulumi.StringInput
	// The id of the mount service.
	MountServiceId pulumi.StringInput
}

func (MountServiceAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mountServiceAttachmentArgs)(nil)).Elem()
}

type MountServiceAttachmentInput interface {
	pulumi.Input

	ToMountServiceAttachmentOutput() MountServiceAttachmentOutput
	ToMountServiceAttachmentOutputWithContext(ctx context.Context) MountServiceAttachmentOutput
}

func (*MountServiceAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**MountServiceAttachment)(nil)).Elem()
}

func (i *MountServiceAttachment) ToMountServiceAttachmentOutput() MountServiceAttachmentOutput {
	return i.ToMountServiceAttachmentOutputWithContext(context.Background())
}

func (i *MountServiceAttachment) ToMountServiceAttachmentOutputWithContext(ctx context.Context) MountServiceAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountServiceAttachmentOutput)
}

// MountServiceAttachmentArrayInput is an input type that accepts MountServiceAttachmentArray and MountServiceAttachmentArrayOutput values.
// You can construct a concrete instance of `MountServiceAttachmentArrayInput` via:
//
//	MountServiceAttachmentArray{ MountServiceAttachmentArgs{...} }
type MountServiceAttachmentArrayInput interface {
	pulumi.Input

	ToMountServiceAttachmentArrayOutput() MountServiceAttachmentArrayOutput
	ToMountServiceAttachmentArrayOutputWithContext(context.Context) MountServiceAttachmentArrayOutput
}

type MountServiceAttachmentArray []MountServiceAttachmentInput

func (MountServiceAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MountServiceAttachment)(nil)).Elem()
}

func (i MountServiceAttachmentArray) ToMountServiceAttachmentArrayOutput() MountServiceAttachmentArrayOutput {
	return i.ToMountServiceAttachmentArrayOutputWithContext(context.Background())
}

func (i MountServiceAttachmentArray) ToMountServiceAttachmentArrayOutputWithContext(ctx context.Context) MountServiceAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountServiceAttachmentArrayOutput)
}

// MountServiceAttachmentMapInput is an input type that accepts MountServiceAttachmentMap and MountServiceAttachmentMapOutput values.
// You can construct a concrete instance of `MountServiceAttachmentMapInput` via:
//
//	MountServiceAttachmentMap{ "key": MountServiceAttachmentArgs{...} }
type MountServiceAttachmentMapInput interface {
	pulumi.Input

	ToMountServiceAttachmentMapOutput() MountServiceAttachmentMapOutput
	ToMountServiceAttachmentMapOutputWithContext(context.Context) MountServiceAttachmentMapOutput
}

type MountServiceAttachmentMap map[string]MountServiceAttachmentInput

func (MountServiceAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MountServiceAttachment)(nil)).Elem()
}

func (i MountServiceAttachmentMap) ToMountServiceAttachmentMapOutput() MountServiceAttachmentMapOutput {
	return i.ToMountServiceAttachmentMapOutputWithContext(context.Background())
}

func (i MountServiceAttachmentMap) ToMountServiceAttachmentMapOutputWithContext(ctx context.Context) MountServiceAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountServiceAttachmentMapOutput)
}

type MountServiceAttachmentOutput struct{ *pulumi.OutputState }

func (MountServiceAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountServiceAttachment)(nil)).Elem()
}

func (o MountServiceAttachmentOutput) ToMountServiceAttachmentOutput() MountServiceAttachmentOutput {
	return o
}

func (o MountServiceAttachmentOutput) ToMountServiceAttachmentOutputWithContext(ctx context.Context) MountServiceAttachmentOutput {
	return o
}

// The attach status of the vepfs file system.
func (o MountServiceAttachmentOutput) AttachStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *MountServiceAttachment) pulumi.StringOutput { return v.AttachStatus }).(pulumi.StringOutput)
}

// The custom mount directory, the default value is file system id.
func (o MountServiceAttachmentOutput) CustomerPath() pulumi.StringOutput {
	return o.ApplyT(func(v *MountServiceAttachment) pulumi.StringOutput { return v.CustomerPath }).(pulumi.StringOutput)
}

// The id of the vepfs file system.
func (o MountServiceAttachmentOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountServiceAttachment) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

// The id of the mount service.
func (o MountServiceAttachmentOutput) MountServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountServiceAttachment) pulumi.StringOutput { return v.MountServiceId }).(pulumi.StringOutput)
}

type MountServiceAttachmentArrayOutput struct{ *pulumi.OutputState }

func (MountServiceAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MountServiceAttachment)(nil)).Elem()
}

func (o MountServiceAttachmentArrayOutput) ToMountServiceAttachmentArrayOutput() MountServiceAttachmentArrayOutput {
	return o
}

func (o MountServiceAttachmentArrayOutput) ToMountServiceAttachmentArrayOutputWithContext(ctx context.Context) MountServiceAttachmentArrayOutput {
	return o
}

func (o MountServiceAttachmentArrayOutput) Index(i pulumi.IntInput) MountServiceAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MountServiceAttachment {
		return vs[0].([]*MountServiceAttachment)[vs[1].(int)]
	}).(MountServiceAttachmentOutput)
}

type MountServiceAttachmentMapOutput struct{ *pulumi.OutputState }

func (MountServiceAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MountServiceAttachment)(nil)).Elem()
}

func (o MountServiceAttachmentMapOutput) ToMountServiceAttachmentMapOutput() MountServiceAttachmentMapOutput {
	return o
}

func (o MountServiceAttachmentMapOutput) ToMountServiceAttachmentMapOutputWithContext(ctx context.Context) MountServiceAttachmentMapOutput {
	return o
}

func (o MountServiceAttachmentMapOutput) MapIndex(k pulumi.StringInput) MountServiceAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MountServiceAttachment {
		return vs[0].(map[string]*MountServiceAttachment)[vs[1].(string)]
	}).(MountServiceAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MountServiceAttachmentInput)(nil)).Elem(), &MountServiceAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountServiceAttachmentArrayInput)(nil)).Elem(), MountServiceAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountServiceAttachmentMapInput)(nil)).Elem(), MountServiceAttachmentMap{})
	pulumi.RegisterOutputType(MountServiceAttachmentOutput{})
	pulumi.RegisterOutputType(MountServiceAttachmentArrayOutput{})
	pulumi.RegisterOutputType(MountServiceAttachmentMapOutput{})
}
