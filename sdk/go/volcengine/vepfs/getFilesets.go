// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vepfs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vepfs filesets
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vepfs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String("cn-beijing-a"),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooFileSystem, err := vepfs.NewFileSystem(ctx, "fooFileSystem", &vepfs.FileSystemArgs{
//				FileSystemName: pulumi.String("acc-test-file-system"),
//				SubnetId:       fooSubnet.ID(),
//				StoreType:      pulumi.String("Advance_100"),
//				Description:    pulumi.String("tf-test"),
//				Capacity:       pulumi.Int(12),
//				Project:        pulumi.String("default"),
//				EnableRestripe: pulumi.Bool(false),
//				Tags: vepfs.FileSystemTagArray{
//					&vepfs.FileSystemTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooFileset, err := vepfs.NewFileset(ctx, "fooFileset", &vepfs.FilesetArgs{
//				FileSystemId:  fooFileSystem.ID(),
//				FilesetName:   pulumi.String("acc-test-fileset"),
//				FilesetPath:   pulumi.String("/tf-test/"),
//				MaxIops:       pulumi.Int(100),
//				MaxBandwidth:  pulumi.Int(10),
//				FileLimit:     pulumi.Int(20),
//				CapacityLimit: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			_ = vepfs.GetFilesetsOutput(ctx, vepfs.GetFilesetsOutputArgs{
//				FileSystemId: fooFileSystem.ID(),
//				FilesetId:    fooFileset.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetFilesets(ctx *pulumi.Context, args *GetFilesetsArgs, opts ...pulumi.InvokeOption) (*GetFilesetsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFilesetsResult
	err := ctx.Invoke("volcengine:vepfs/getFilesets:getFilesets", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFilesets.
type GetFilesetsArgs struct {
	// The id of Vepfs File System.
	FileSystemId string `pulumi:"fileSystemId"`
	// The id of Vepfs Fileset.
	FilesetId *string `pulumi:"filesetId"`
	// The name of Vepfs Fileset. This field support fuzzy query.
	FilesetName *string `pulumi:"filesetName"`
	// The path of Vepfs Fileset. This field support fuzzy query.
	FilesetPath *string `pulumi:"filesetPath"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The query status list of Vepfs Fileset.
	Statuses []string `pulumi:"statuses"`
}

// A collection of values returned by getFilesets.
type GetFilesetsResult struct {
	FileSystemId string `pulumi:"fileSystemId"`
	// The id of the vepfs fileset.
	FilesetId *string `pulumi:"filesetId"`
	// The name of the vepfs fileset.
	FilesetName *string `pulumi:"filesetName"`
	// The path of the vepfs fileset.
	FilesetPath *string `pulumi:"filesetPath"`
	// The collection of query.
	Filesets []GetFilesetsFileset `pulumi:"filesets"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The status of the vepfs fileset.
	Statuses []string `pulumi:"statuses"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetFilesetsOutput(ctx *pulumi.Context, args GetFilesetsOutputArgs, opts ...pulumi.InvokeOption) GetFilesetsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFilesetsResult, error) {
			args := v.(GetFilesetsArgs)
			r, err := GetFilesets(ctx, &args, opts...)
			var s GetFilesetsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetFilesetsResultOutput)
}

// A collection of arguments for invoking getFilesets.
type GetFilesetsOutputArgs struct {
	// The id of Vepfs File System.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The id of Vepfs Fileset.
	FilesetId pulumi.StringPtrInput `pulumi:"filesetId"`
	// The name of Vepfs Fileset. This field support fuzzy query.
	FilesetName pulumi.StringPtrInput `pulumi:"filesetName"`
	// The path of Vepfs Fileset. This field support fuzzy query.
	FilesetPath pulumi.StringPtrInput `pulumi:"filesetPath"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The query status list of Vepfs Fileset.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetFilesetsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFilesetsArgs)(nil)).Elem()
}

// A collection of values returned by getFilesets.
type GetFilesetsResultOutput struct{ *pulumi.OutputState }

func (GetFilesetsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFilesetsResult)(nil)).Elem()
}

func (o GetFilesetsResultOutput) ToGetFilesetsResultOutput() GetFilesetsResultOutput {
	return o
}

func (o GetFilesetsResultOutput) ToGetFilesetsResultOutputWithContext(ctx context.Context) GetFilesetsResultOutput {
	return o
}

func (o GetFilesetsResultOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetFilesetsResult) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The id of the vepfs fileset.
func (o GetFilesetsResultOutput) FilesetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFilesetsResult) *string { return v.FilesetId }).(pulumi.StringPtrOutput)
}

// The name of the vepfs fileset.
func (o GetFilesetsResultOutput) FilesetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFilesetsResult) *string { return v.FilesetName }).(pulumi.StringPtrOutput)
}

// The path of the vepfs fileset.
func (o GetFilesetsResultOutput) FilesetPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFilesetsResult) *string { return v.FilesetPath }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GetFilesetsResultOutput) Filesets() GetFilesetsFilesetArrayOutput {
	return o.ApplyT(func(v GetFilesetsResult) []GetFilesetsFileset { return v.Filesets }).(GetFilesetsFilesetArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFilesetsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFilesetsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetFilesetsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFilesetsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetFilesetsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFilesetsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The status of the vepfs fileset.
func (o GetFilesetsResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFilesetsResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// The total count of query.
func (o GetFilesetsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetFilesetsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFilesetsResultOutput{})
}
