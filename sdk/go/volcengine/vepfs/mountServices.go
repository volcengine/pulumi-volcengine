// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vepfs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vepfs mount services
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vepfs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String("cn-beijing-a"),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooMountService, err := vepfs.NewMountService(ctx, "fooMountService", &vepfs.MountServiceArgs{
//				MountServiceName: pulumi.String("acc-test-mount-service"),
//				SubnetId:         fooSubnet.ID(),
//				NodeType:         pulumi.String("ecs.g1ie.large"),
//				Project:          pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = vepfs.GetMountServicesOutput(ctx, vepfs.GetMountServicesOutputArgs{
//				MountServiceId: fooMountService.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.vepfs.MountServices has been deprecated in favor of volcengine.vepfs.getMountServices
func MountServices(ctx *pulumi.Context, args *MountServicesArgs, opts ...pulumi.InvokeOption) (*MountServicesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv MountServicesResult
	err := ctx.Invoke("volcengine:vepfs/mountServices:MountServices", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking MountServices.
type MountServicesArgs struct {
	// The id of Vepfs File System.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The id of mount service.
	MountServiceId *string `pulumi:"mountServiceId"`
	// The name of mount service. This field support fuzzy query.
	MountServiceName *string `pulumi:"mountServiceName"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The query status list of mount service.
	Statuses []string `pulumi:"statuses"`
}

// A collection of values returned by MountServices.
type MountServicesResult struct {
	// The id of the vepfs file system.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The id of the mount service.
	MountServiceId *string `pulumi:"mountServiceId"`
	// The name of the mount service.
	MountServiceName *string `pulumi:"mountServiceName"`
	// The collection of query.
	MountServices []MountServicesMountService `pulumi:"mountServices"`
	NameRegex     *string                     `pulumi:"nameRegex"`
	OutputFile    *string                     `pulumi:"outputFile"`
	// The status of the mount service.
	Statuses []string `pulumi:"statuses"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func MountServicesOutput(ctx *pulumi.Context, args MountServicesOutputArgs, opts ...pulumi.InvokeOption) MountServicesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (MountServicesResult, error) {
			args := v.(MountServicesArgs)
			r, err := MountServices(ctx, &args, opts...)
			var s MountServicesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(MountServicesResultOutput)
}

// A collection of arguments for invoking MountServices.
type MountServicesOutputArgs struct {
	// The id of Vepfs File System.
	FileSystemId pulumi.StringPtrInput `pulumi:"fileSystemId"`
	// The id of mount service.
	MountServiceId pulumi.StringPtrInput `pulumi:"mountServiceId"`
	// The name of mount service. This field support fuzzy query.
	MountServiceName pulumi.StringPtrInput `pulumi:"mountServiceName"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The query status list of mount service.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (MountServicesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MountServicesArgs)(nil)).Elem()
}

// A collection of values returned by MountServices.
type MountServicesResultOutput struct{ *pulumi.OutputState }

func (MountServicesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MountServicesResult)(nil)).Elem()
}

func (o MountServicesResultOutput) ToMountServicesResultOutput() MountServicesResultOutput {
	return o
}

func (o MountServicesResultOutput) ToMountServicesResultOutputWithContext(ctx context.Context) MountServicesResultOutput {
	return o
}

// The id of the vepfs file system.
func (o MountServicesResultOutput) FileSystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountServicesResult) *string { return v.FileSystemId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o MountServicesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v MountServicesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the mount service.
func (o MountServicesResultOutput) MountServiceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountServicesResult) *string { return v.MountServiceId }).(pulumi.StringPtrOutput)
}

// The name of the mount service.
func (o MountServicesResultOutput) MountServiceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountServicesResult) *string { return v.MountServiceName }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o MountServicesResultOutput) MountServices() MountServicesMountServiceArrayOutput {
	return o.ApplyT(func(v MountServicesResult) []MountServicesMountService { return v.MountServices }).(MountServicesMountServiceArrayOutput)
}

func (o MountServicesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountServicesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o MountServicesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v MountServicesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The status of the mount service.
func (o MountServicesResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v MountServicesResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// The total count of query.
func (o MountServicesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v MountServicesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(MountServicesResultOutput{})
}
