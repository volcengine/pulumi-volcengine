// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vepfs

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vepfs file systems
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vepfs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String("cn-beijing-a"),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooFileSystem, err := vepfs.NewFileSystem(ctx, "fooFileSystem", &vepfs.FileSystemArgs{
//				FileSystemName: pulumi.String("acc-test-file-system"),
//				SubnetId:       fooSubnet.ID(),
//				StoreType:      pulumi.String("Advance_100"),
//				Description:    pulumi.String("tf-test"),
//				Capacity:       pulumi.Int(12),
//				Project:        pulumi.String("default"),
//				EnableRestripe: pulumi.Bool(false),
//				Tags: vepfs.FileSystemTagArray{
//					&vepfs.FileSystemTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = vepfs.GetFileSystemsOutput(ctx, vepfs.GetFileSystemsOutputArgs{
//				Ids: pulumi.StringArray{
//					fooFileSystem.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetFileSystems(ctx *pulumi.Context, args *GetFileSystemsArgs, opts ...pulumi.InvokeOption) (*GetFileSystemsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetFileSystemsResult
	err := ctx.Invoke("volcengine:vepfs/getFileSystems:getFileSystems", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFileSystems.
type GetFileSystemsArgs struct {
	// The Name of Vepfs File System. This field support fuzzy query.
	FileSystemName *string `pulumi:"fileSystemName"`
	// A list of Vepfs File System IDs.
	Ids []string `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project of Vepfs File System.
	Project *string `pulumi:"project"`
	// The query status list of Vepfs File System.
	Statuses []string `pulumi:"statuses"`
	// The Store Type of Vepfs File System.
	StoreType *string `pulumi:"storeType"`
	// The zone id of File System.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getFileSystems.
type GetFileSystemsResult struct {
	// The name of the vepfs file system.
	FileSystemName *string `pulumi:"fileSystemName"`
	// The collection of query.
	FileSystems []GetFileSystemsFileSystem `pulumi:"fileSystems"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// The project name of the vepfs file system.
	Project *string `pulumi:"project"`
	// The status of the vepfs file system.
	Statuses []string `pulumi:"statuses"`
	// The store type of the vepfs file system.
	StoreType *string `pulumi:"storeType"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The id of the zone.
	ZoneId *string `pulumi:"zoneId"`
}

func GetFileSystemsOutput(ctx *pulumi.Context, args GetFileSystemsOutputArgs, opts ...pulumi.InvokeOption) GetFileSystemsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetFileSystemsResult, error) {
			args := v.(GetFileSystemsArgs)
			r, err := GetFileSystems(ctx, &args, opts...)
			var s GetFileSystemsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetFileSystemsResultOutput)
}

// A collection of arguments for invoking getFileSystems.
type GetFileSystemsOutputArgs struct {
	// The Name of Vepfs File System. This field support fuzzy query.
	FileSystemName pulumi.StringPtrInput `pulumi:"fileSystemName"`
	// A list of Vepfs File System IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project of Vepfs File System.
	Project pulumi.StringPtrInput `pulumi:"project"`
	// The query status list of Vepfs File System.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
	// The Store Type of Vepfs File System.
	StoreType pulumi.StringPtrInput `pulumi:"storeType"`
	// The zone id of File System.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (GetFileSystemsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileSystemsArgs)(nil)).Elem()
}

// A collection of values returned by getFileSystems.
type GetFileSystemsResultOutput struct{ *pulumi.OutputState }

func (GetFileSystemsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetFileSystemsResult)(nil)).Elem()
}

func (o GetFileSystemsResultOutput) ToGetFileSystemsResultOutput() GetFileSystemsResultOutput {
	return o
}

func (o GetFileSystemsResultOutput) ToGetFileSystemsResultOutputWithContext(ctx context.Context) GetFileSystemsResultOutput {
	return o
}

// The name of the vepfs file system.
func (o GetFileSystemsResultOutput) FileSystemName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFileSystemsResult) *string { return v.FileSystemName }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GetFileSystemsResultOutput) FileSystems() GetFileSystemsFileSystemArrayOutput {
	return o.ApplyT(func(v GetFileSystemsResult) []GetFileSystemsFileSystem { return v.FileSystems }).(GetFileSystemsFileSystemArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetFileSystemsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetFileSystemsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetFileSystemsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFileSystemsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetFileSystemsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFileSystemsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetFileSystemsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFileSystemsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The project name of the vepfs file system.
func (o GetFileSystemsResultOutput) Project() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFileSystemsResult) *string { return v.Project }).(pulumi.StringPtrOutput)
}

// The status of the vepfs file system.
func (o GetFileSystemsResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetFileSystemsResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// The store type of the vepfs file system.
func (o GetFileSystemsResultOutput) StoreType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFileSystemsResult) *string { return v.StoreType }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetFileSystemsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetFileSystemsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The id of the zone.
func (o GetFileSystemsResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetFileSystemsResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetFileSystemsResultOutput{})
}
