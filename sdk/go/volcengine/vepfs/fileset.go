// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vepfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vepfs fileset
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vepfs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String("cn-beijing-a"),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooFileSystem, err := vepfs.NewFileSystem(ctx, "fooFileSystem", &vepfs.FileSystemArgs{
//				FileSystemName: pulumi.String("acc-test-file-system"),
//				SubnetId:       fooSubnet.ID(),
//				StoreType:      pulumi.String("Advance_100"),
//				Description:    pulumi.String("tf-test"),
//				Capacity:       pulumi.Int(12),
//				Project:        pulumi.String("default"),
//				EnableRestripe: pulumi.Bool(false),
//				Tags: vepfs.FileSystemTagArray{
//					&vepfs.FileSystemTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vepfs.NewFileset(ctx, "fooFileset", &vepfs.FilesetArgs{
//				FileSystemId:  fooFileSystem.ID(),
//				FilesetName:   pulumi.String("acc-test-fileset"),
//				FilesetPath:   pulumi.String("/tf-test/"),
//				MaxIops:       pulumi.Int(100),
//				MaxBandwidth:  pulumi.Int(10),
//				FileLimit:     pulumi.Int(20),
//				CapacityLimit: pulumi.Int(30),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VepfsFileset can be imported using the file_system_id:fileset_id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vepfs/fileset:Fileset default file_system_id:fileset_id
//
// ```
type Fileset struct {
	pulumi.CustomResourceState

	// The capacity limit of the vepfs fileset. Unit: Gib.
	CapacityLimit pulumi.IntPtrOutput `pulumi:"capacityLimit"`
	// The used capacity of the vepfs fileset. Unit: GiB.
	CapacityUsed pulumi.IntOutput `pulumi:"capacityUsed"`
	// The create time of the vepfs fileset.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The file number limit of the vepfs fileset.
	FileLimit pulumi.IntPtrOutput `pulumi:"fileLimit"`
	// The id of the vepfs file system.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// The used file number of the vepfs fileset.
	FileUsed pulumi.IntOutput `pulumi:"fileUsed"`
	// The name of the vepfs fileset.
	FilesetName pulumi.StringOutput `pulumi:"filesetName"`
	// The path of the vepfs fileset.
	FilesetPath pulumi.StringOutput `pulumi:"filesetPath"`
	// The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
	MaxBandwidth pulumi.IntPtrOutput `pulumi:"maxBandwidth"`
	// The max number of inode in the vepfs fileset.
	MaxInodeNum pulumi.IntOutput `pulumi:"maxInodeNum"`
	// The max IOPS qos limit of the vepfs fileset.
	MaxIops pulumi.IntPtrOutput `pulumi:"maxIops"`
	// The status of the vepfs fileset.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewFileset registers a new resource with the given unique name, arguments, and options.
func NewFileset(ctx *pulumi.Context,
	name string, args *FilesetArgs, opts ...pulumi.ResourceOption) (*Fileset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.FilesetName == nil {
		return nil, errors.New("invalid value for required argument 'FilesetName'")
	}
	if args.FilesetPath == nil {
		return nil, errors.New("invalid value for required argument 'FilesetPath'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Fileset
	err := ctx.RegisterResource("volcengine:vepfs/fileset:Fileset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileset gets an existing Fileset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FilesetState, opts ...pulumi.ResourceOption) (*Fileset, error) {
	var resource Fileset
	err := ctx.ReadResource("volcengine:vepfs/fileset:Fileset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Fileset resources.
type filesetState struct {
	// The capacity limit of the vepfs fileset. Unit: Gib.
	CapacityLimit *int `pulumi:"capacityLimit"`
	// The used capacity of the vepfs fileset. Unit: GiB.
	CapacityUsed *int `pulumi:"capacityUsed"`
	// The create time of the vepfs fileset.
	CreateTime *string `pulumi:"createTime"`
	// The file number limit of the vepfs fileset.
	FileLimit *int `pulumi:"fileLimit"`
	// The id of the vepfs file system.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The used file number of the vepfs fileset.
	FileUsed *int `pulumi:"fileUsed"`
	// The name of the vepfs fileset.
	FilesetName *string `pulumi:"filesetName"`
	// The path of the vepfs fileset.
	FilesetPath *string `pulumi:"filesetPath"`
	// The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
	MaxBandwidth *int `pulumi:"maxBandwidth"`
	// The max number of inode in the vepfs fileset.
	MaxInodeNum *int `pulumi:"maxInodeNum"`
	// The max IOPS qos limit of the vepfs fileset.
	MaxIops *int `pulumi:"maxIops"`
	// The status of the vepfs fileset.
	Status *string `pulumi:"status"`
}

type FilesetState struct {
	// The capacity limit of the vepfs fileset. Unit: Gib.
	CapacityLimit pulumi.IntPtrInput
	// The used capacity of the vepfs fileset. Unit: GiB.
	CapacityUsed pulumi.IntPtrInput
	// The create time of the vepfs fileset.
	CreateTime pulumi.StringPtrInput
	// The file number limit of the vepfs fileset.
	FileLimit pulumi.IntPtrInput
	// The id of the vepfs file system.
	FileSystemId pulumi.StringPtrInput
	// The used file number of the vepfs fileset.
	FileUsed pulumi.IntPtrInput
	// The name of the vepfs fileset.
	FilesetName pulumi.StringPtrInput
	// The path of the vepfs fileset.
	FilesetPath pulumi.StringPtrInput
	// The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
	MaxBandwidth pulumi.IntPtrInput
	// The max number of inode in the vepfs fileset.
	MaxInodeNum pulumi.IntPtrInput
	// The max IOPS qos limit of the vepfs fileset.
	MaxIops pulumi.IntPtrInput
	// The status of the vepfs fileset.
	Status pulumi.StringPtrInput
}

func (FilesetState) ElementType() reflect.Type {
	return reflect.TypeOf((*filesetState)(nil)).Elem()
}

type filesetArgs struct {
	// The capacity limit of the vepfs fileset. Unit: Gib.
	CapacityLimit *int `pulumi:"capacityLimit"`
	// The file number limit of the vepfs fileset.
	FileLimit *int `pulumi:"fileLimit"`
	// The id of the vepfs file system.
	FileSystemId string `pulumi:"fileSystemId"`
	// The name of the vepfs fileset.
	FilesetName string `pulumi:"filesetName"`
	// The path of the vepfs fileset.
	FilesetPath string `pulumi:"filesetPath"`
	// The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
	MaxBandwidth *int `pulumi:"maxBandwidth"`
	// The max IOPS qos limit of the vepfs fileset.
	MaxIops *int `pulumi:"maxIops"`
}

// The set of arguments for constructing a Fileset resource.
type FilesetArgs struct {
	// The capacity limit of the vepfs fileset. Unit: Gib.
	CapacityLimit pulumi.IntPtrInput
	// The file number limit of the vepfs fileset.
	FileLimit pulumi.IntPtrInput
	// The id of the vepfs file system.
	FileSystemId pulumi.StringInput
	// The name of the vepfs fileset.
	FilesetName pulumi.StringInput
	// The path of the vepfs fileset.
	FilesetPath pulumi.StringInput
	// The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
	MaxBandwidth pulumi.IntPtrInput
	// The max IOPS qos limit of the vepfs fileset.
	MaxIops pulumi.IntPtrInput
}

func (FilesetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*filesetArgs)(nil)).Elem()
}

type FilesetInput interface {
	pulumi.Input

	ToFilesetOutput() FilesetOutput
	ToFilesetOutputWithContext(ctx context.Context) FilesetOutput
}

func (*Fileset) ElementType() reflect.Type {
	return reflect.TypeOf((**Fileset)(nil)).Elem()
}

func (i *Fileset) ToFilesetOutput() FilesetOutput {
	return i.ToFilesetOutputWithContext(context.Background())
}

func (i *Fileset) ToFilesetOutputWithContext(ctx context.Context) FilesetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilesetOutput)
}

// FilesetArrayInput is an input type that accepts FilesetArray and FilesetArrayOutput values.
// You can construct a concrete instance of `FilesetArrayInput` via:
//
//	FilesetArray{ FilesetArgs{...} }
type FilesetArrayInput interface {
	pulumi.Input

	ToFilesetArrayOutput() FilesetArrayOutput
	ToFilesetArrayOutputWithContext(context.Context) FilesetArrayOutput
}

type FilesetArray []FilesetInput

func (FilesetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fileset)(nil)).Elem()
}

func (i FilesetArray) ToFilesetArrayOutput() FilesetArrayOutput {
	return i.ToFilesetArrayOutputWithContext(context.Background())
}

func (i FilesetArray) ToFilesetArrayOutputWithContext(ctx context.Context) FilesetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilesetArrayOutput)
}

// FilesetMapInput is an input type that accepts FilesetMap and FilesetMapOutput values.
// You can construct a concrete instance of `FilesetMapInput` via:
//
//	FilesetMap{ "key": FilesetArgs{...} }
type FilesetMapInput interface {
	pulumi.Input

	ToFilesetMapOutput() FilesetMapOutput
	ToFilesetMapOutputWithContext(context.Context) FilesetMapOutput
}

type FilesetMap map[string]FilesetInput

func (FilesetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fileset)(nil)).Elem()
}

func (i FilesetMap) ToFilesetMapOutput() FilesetMapOutput {
	return i.ToFilesetMapOutputWithContext(context.Background())
}

func (i FilesetMap) ToFilesetMapOutputWithContext(ctx context.Context) FilesetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FilesetMapOutput)
}

type FilesetOutput struct{ *pulumi.OutputState }

func (FilesetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Fileset)(nil)).Elem()
}

func (o FilesetOutput) ToFilesetOutput() FilesetOutput {
	return o
}

func (o FilesetOutput) ToFilesetOutputWithContext(ctx context.Context) FilesetOutput {
	return o
}

// The capacity limit of the vepfs fileset. Unit: Gib.
func (o FilesetOutput) CapacityLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Fileset) pulumi.IntPtrOutput { return v.CapacityLimit }).(pulumi.IntPtrOutput)
}

// The used capacity of the vepfs fileset. Unit: GiB.
func (o FilesetOutput) CapacityUsed() pulumi.IntOutput {
	return o.ApplyT(func(v *Fileset) pulumi.IntOutput { return v.CapacityUsed }).(pulumi.IntOutput)
}

// The create time of the vepfs fileset.
func (o FilesetOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Fileset) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The file number limit of the vepfs fileset.
func (o FilesetOutput) FileLimit() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Fileset) pulumi.IntPtrOutput { return v.FileLimit }).(pulumi.IntPtrOutput)
}

// The id of the vepfs file system.
func (o FilesetOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *Fileset) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

// The used file number of the vepfs fileset.
func (o FilesetOutput) FileUsed() pulumi.IntOutput {
	return o.ApplyT(func(v *Fileset) pulumi.IntOutput { return v.FileUsed }).(pulumi.IntOutput)
}

// The name of the vepfs fileset.
func (o FilesetOutput) FilesetName() pulumi.StringOutput {
	return o.ApplyT(func(v *Fileset) pulumi.StringOutput { return v.FilesetName }).(pulumi.StringOutput)
}

// The path of the vepfs fileset.
func (o FilesetOutput) FilesetPath() pulumi.StringOutput {
	return o.ApplyT(func(v *Fileset) pulumi.StringOutput { return v.FilesetPath }).(pulumi.StringOutput)
}

// The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
func (o FilesetOutput) MaxBandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Fileset) pulumi.IntPtrOutput { return v.MaxBandwidth }).(pulumi.IntPtrOutput)
}

// The max number of inode in the vepfs fileset.
func (o FilesetOutput) MaxInodeNum() pulumi.IntOutput {
	return o.ApplyT(func(v *Fileset) pulumi.IntOutput { return v.MaxInodeNum }).(pulumi.IntOutput)
}

// The max IOPS qos limit of the vepfs fileset.
func (o FilesetOutput) MaxIops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Fileset) pulumi.IntPtrOutput { return v.MaxIops }).(pulumi.IntPtrOutput)
}

// The status of the vepfs fileset.
func (o FilesetOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Fileset) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type FilesetArrayOutput struct{ *pulumi.OutputState }

func (FilesetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Fileset)(nil)).Elem()
}

func (o FilesetArrayOutput) ToFilesetArrayOutput() FilesetArrayOutput {
	return o
}

func (o FilesetArrayOutput) ToFilesetArrayOutputWithContext(ctx context.Context) FilesetArrayOutput {
	return o
}

func (o FilesetArrayOutput) Index(i pulumi.IntInput) FilesetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Fileset {
		return vs[0].([]*Fileset)[vs[1].(int)]
	}).(FilesetOutput)
}

type FilesetMapOutput struct{ *pulumi.OutputState }

func (FilesetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Fileset)(nil)).Elem()
}

func (o FilesetMapOutput) ToFilesetMapOutput() FilesetMapOutput {
	return o
}

func (o FilesetMapOutput) ToFilesetMapOutputWithContext(ctx context.Context) FilesetMapOutput {
	return o
}

func (o FilesetMapOutput) MapIndex(k pulumi.StringInput) FilesetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Fileset {
		return vs[0].(map[string]*Fileset)[vs[1].(string)]
	}).(FilesetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FilesetInput)(nil)).Elem(), &Fileset{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilesetArrayInput)(nil)).Elem(), FilesetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FilesetMapInput)(nil)).Elem(), FilesetMap{})
	pulumi.RegisterOutputType(FilesetOutput{})
	pulumi.RegisterOutputType(FilesetArrayOutput{})
	pulumi.RegisterOutputType(FilesetMapOutput{})
}
