// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vepfs

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vepfs mount service
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vepfs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String("cn-beijing-a"),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vepfs.NewMountService(ctx, "fooMountService", &vepfs.MountServiceArgs{
//				MountServiceName: pulumi.String("acc-test-mount-service"),
//				SubnetId:         fooSubnet.ID(),
//				NodeType:         pulumi.String("ecs.g1ie.large"),
//				Project:          pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VepfsMountService can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vepfs/mountService:MountService default resource_id
// ```
type MountService struct {
	pulumi.CustomResourceState

	// The account id of the vepfs file system.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The attached file system info of the mount service.
	AttachFileSystems MountServiceAttachFileSystemArrayOutput `pulumi:"attachFileSystems"`
	// The created time of the mount service.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The name of the mount service.
	MountServiceName pulumi.StringOutput `pulumi:"mountServiceName"`
	// The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	NodeType pulumi.StringOutput `pulumi:"nodeType"`
	// The nodes info of the mount service.
	Nodes MountServiceNodeArrayOutput `pulumi:"nodes"`
	// The node type of the mount service.
	Project pulumi.StringOutput `pulumi:"project"`
	// The region id of the mount service.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The status of the mount service.
	Status pulumi.StringOutput `pulumi:"status"`
	// The subnet id of the mount service.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The vpc id of the mount service.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The zone id of the mount service.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
	// The zone name of the mount service.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewMountService registers a new resource with the given unique name, arguments, and options.
func NewMountService(ctx *pulumi.Context,
	name string, args *MountServiceArgs, opts ...pulumi.ResourceOption) (*MountService, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MountServiceName == nil {
		return nil, errors.New("invalid value for required argument 'MountServiceName'")
	}
	if args.NodeType == nil {
		return nil, errors.New("invalid value for required argument 'NodeType'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MountService
	err := ctx.RegisterResource("volcengine:vepfs/mountService:MountService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMountService gets an existing MountService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountServiceState, opts ...pulumi.ResourceOption) (*MountService, error) {
	var resource MountService
	err := ctx.ReadResource("volcengine:vepfs/mountService:MountService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MountService resources.
type mountServiceState struct {
	// The account id of the vepfs file system.
	AccountId *string `pulumi:"accountId"`
	// The attached file system info of the mount service.
	AttachFileSystems []MountServiceAttachFileSystem `pulumi:"attachFileSystems"`
	// The created time of the mount service.
	CreateTime *string `pulumi:"createTime"`
	// The name of the mount service.
	MountServiceName *string `pulumi:"mountServiceName"`
	// The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	NodeType *string `pulumi:"nodeType"`
	// The nodes info of the mount service.
	Nodes []MountServiceNode `pulumi:"nodes"`
	// The node type of the mount service.
	Project *string `pulumi:"project"`
	// The region id of the mount service.
	RegionId *string `pulumi:"regionId"`
	// The status of the mount service.
	Status *string `pulumi:"status"`
	// The subnet id of the mount service.
	SubnetId *string `pulumi:"subnetId"`
	// The vpc id of the mount service.
	VpcId *string `pulumi:"vpcId"`
	// The zone id of the mount service.
	ZoneId *string `pulumi:"zoneId"`
	// The zone name of the mount service.
	ZoneName *string `pulumi:"zoneName"`
}

type MountServiceState struct {
	// The account id of the vepfs file system.
	AccountId pulumi.StringPtrInput
	// The attached file system info of the mount service.
	AttachFileSystems MountServiceAttachFileSystemArrayInput
	// The created time of the mount service.
	CreateTime pulumi.StringPtrInput
	// The name of the mount service.
	MountServiceName pulumi.StringPtrInput
	// The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	NodeType pulumi.StringPtrInput
	// The nodes info of the mount service.
	Nodes MountServiceNodeArrayInput
	// The node type of the mount service.
	Project pulumi.StringPtrInput
	// The region id of the mount service.
	RegionId pulumi.StringPtrInput
	// The status of the mount service.
	Status pulumi.StringPtrInput
	// The subnet id of the mount service.
	SubnetId pulumi.StringPtrInput
	// The vpc id of the mount service.
	VpcId pulumi.StringPtrInput
	// The zone id of the mount service.
	ZoneId pulumi.StringPtrInput
	// The zone name of the mount service.
	ZoneName pulumi.StringPtrInput
}

func (MountServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*mountServiceState)(nil)).Elem()
}

type mountServiceArgs struct {
	// The name of the mount service.
	MountServiceName string `pulumi:"mountServiceName"`
	// The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	NodeType string `pulumi:"nodeType"`
	// The node type of the mount service.
	Project *string `pulumi:"project"`
	// The subnet id of the mount service.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a MountService resource.
type MountServiceArgs struct {
	// The name of the mount service.
	MountServiceName pulumi.StringInput
	// The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	NodeType pulumi.StringInput
	// The node type of the mount service.
	Project pulumi.StringPtrInput
	// The subnet id of the mount service.
	SubnetId pulumi.StringInput
}

func (MountServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mountServiceArgs)(nil)).Elem()
}

type MountServiceInput interface {
	pulumi.Input

	ToMountServiceOutput() MountServiceOutput
	ToMountServiceOutputWithContext(ctx context.Context) MountServiceOutput
}

func (*MountService) ElementType() reflect.Type {
	return reflect.TypeOf((**MountService)(nil)).Elem()
}

func (i *MountService) ToMountServiceOutput() MountServiceOutput {
	return i.ToMountServiceOutputWithContext(context.Background())
}

func (i *MountService) ToMountServiceOutputWithContext(ctx context.Context) MountServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountServiceOutput)
}

// MountServiceArrayInput is an input type that accepts MountServiceArray and MountServiceArrayOutput values.
// You can construct a concrete instance of `MountServiceArrayInput` via:
//
//	MountServiceArray{ MountServiceArgs{...} }
type MountServiceArrayInput interface {
	pulumi.Input

	ToMountServiceArrayOutput() MountServiceArrayOutput
	ToMountServiceArrayOutputWithContext(context.Context) MountServiceArrayOutput
}

type MountServiceArray []MountServiceInput

func (MountServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MountService)(nil)).Elem()
}

func (i MountServiceArray) ToMountServiceArrayOutput() MountServiceArrayOutput {
	return i.ToMountServiceArrayOutputWithContext(context.Background())
}

func (i MountServiceArray) ToMountServiceArrayOutputWithContext(ctx context.Context) MountServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountServiceArrayOutput)
}

// MountServiceMapInput is an input type that accepts MountServiceMap and MountServiceMapOutput values.
// You can construct a concrete instance of `MountServiceMapInput` via:
//
//	MountServiceMap{ "key": MountServiceArgs{...} }
type MountServiceMapInput interface {
	pulumi.Input

	ToMountServiceMapOutput() MountServiceMapOutput
	ToMountServiceMapOutputWithContext(context.Context) MountServiceMapOutput
}

type MountServiceMap map[string]MountServiceInput

func (MountServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MountService)(nil)).Elem()
}

func (i MountServiceMap) ToMountServiceMapOutput() MountServiceMapOutput {
	return i.ToMountServiceMapOutputWithContext(context.Background())
}

func (i MountServiceMap) ToMountServiceMapOutputWithContext(ctx context.Context) MountServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountServiceMapOutput)
}

type MountServiceOutput struct{ *pulumi.OutputState }

func (MountServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountService)(nil)).Elem()
}

func (o MountServiceOutput) ToMountServiceOutput() MountServiceOutput {
	return o
}

func (o MountServiceOutput) ToMountServiceOutputWithContext(ctx context.Context) MountServiceOutput {
	return o
}

// The account id of the vepfs file system.
func (o MountServiceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The attached file system info of the mount service.
func (o MountServiceOutput) AttachFileSystems() MountServiceAttachFileSystemArrayOutput {
	return o.ApplyT(func(v *MountService) MountServiceAttachFileSystemArrayOutput { return v.AttachFileSystems }).(MountServiceAttachFileSystemArrayOutput)
}

// The created time of the mount service.
func (o MountServiceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of the mount service.
func (o MountServiceOutput) MountServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.MountServiceName }).(pulumi.StringOutput)
}

// The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o MountServiceOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.NodeType }).(pulumi.StringOutput)
}

// The nodes info of the mount service.
func (o MountServiceOutput) Nodes() MountServiceNodeArrayOutput {
	return o.ApplyT(func(v *MountService) MountServiceNodeArrayOutput { return v.Nodes }).(MountServiceNodeArrayOutput)
}

// The node type of the mount service.
func (o MountServiceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

// The region id of the mount service.
func (o MountServiceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The status of the mount service.
func (o MountServiceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The subnet id of the mount service.
func (o MountServiceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The vpc id of the mount service.
func (o MountServiceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of the mount service.
func (o MountServiceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

// The zone name of the mount service.
func (o MountServiceOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *MountService) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type MountServiceArrayOutput struct{ *pulumi.OutputState }

func (MountServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MountService)(nil)).Elem()
}

func (o MountServiceArrayOutput) ToMountServiceArrayOutput() MountServiceArrayOutput {
	return o
}

func (o MountServiceArrayOutput) ToMountServiceArrayOutputWithContext(ctx context.Context) MountServiceArrayOutput {
	return o
}

func (o MountServiceArrayOutput) Index(i pulumi.IntInput) MountServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MountService {
		return vs[0].([]*MountService)[vs[1].(int)]
	}).(MountServiceOutput)
}

type MountServiceMapOutput struct{ *pulumi.OutputState }

func (MountServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MountService)(nil)).Elem()
}

func (o MountServiceMapOutput) ToMountServiceMapOutput() MountServiceMapOutput {
	return o
}

func (o MountServiceMapOutput) ToMountServiceMapOutputWithContext(ctx context.Context) MountServiceMapOutput {
	return o
}

func (o MountServiceMapOutput) MapIndex(k pulumi.StringInput) MountServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MountService {
		return vs[0].(map[string]*MountService)[vs[1].(string)]
	}).(MountServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MountServiceInput)(nil)).Elem(), &MountService{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountServiceArrayInput)(nil)).Elem(), MountServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountServiceMapInput)(nil)).Elem(), MountServiceMap{})
	pulumi.RegisterOutputType(MountServiceOutput{})
	pulumi.RegisterOutputType(MountServiceArrayOutput{})
	pulumi.RegisterOutputType(MountServiceMapOutput{})
}
