// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package private_zone

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of private zone resolver rules
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/private_zone"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := private_zone.ResolverRules(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func ResolverRules(ctx *pulumi.Context, args *ResolverRulesArgs, opts ...pulumi.InvokeOption) (*ResolverRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ResolverRulesResult
	err := ctx.Invoke("volcengine:private_zone/resolverRules:ResolverRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ResolverRules.
type ResolverRulesArgs struct {
	// ID of the exit terminal node.
	EndpointId *int `pulumi:"endpointId"`
	// The name of the rule.
	Name *string `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
	ZoneName *string `pulumi:"zoneName"`
}

// A collection of values returned by ResolverRules.
type ResolverRulesResult struct {
	// The endpoint ID of the rule.
	EndpointId *int `pulumi:"endpointId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the rule.
	Name       *string `pulumi:"name"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of query.
	Rules []ResolverRulesRule `pulumi:"rules"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The zone name of the rule.
	ZoneName *string `pulumi:"zoneName"`
}

func ResolverRulesOutput(ctx *pulumi.Context, args ResolverRulesOutputArgs, opts ...pulumi.InvokeOption) ResolverRulesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ResolverRulesResult, error) {
			args := v.(ResolverRulesArgs)
			r, err := ResolverRules(ctx, &args, opts...)
			var s ResolverRulesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ResolverRulesResultOutput)
}

// A collection of arguments for invoking ResolverRules.
type ResolverRulesOutputArgs struct {
	// ID of the exit terminal node.
	EndpointId pulumi.IntPtrInput `pulumi:"endpointId"`
	// The name of the rule.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
	ZoneName pulumi.StringPtrInput `pulumi:"zoneName"`
}

func (ResolverRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesArgs)(nil)).Elem()
}

// A collection of values returned by ResolverRules.
type ResolverRulesResultOutput struct{ *pulumi.OutputState }

func (ResolverRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesResult)(nil)).Elem()
}

func (o ResolverRulesResultOutput) ToResolverRulesResultOutput() ResolverRulesResultOutput {
	return o
}

func (o ResolverRulesResultOutput) ToResolverRulesResultOutputWithContext(ctx context.Context) ResolverRulesResultOutput {
	return o
}

// The endpoint ID of the rule.
func (o ResolverRulesResultOutput) EndpointId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResolverRulesResult) *int { return v.EndpointId }).(pulumi.IntPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ResolverRulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the rule.
func (o ResolverRulesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRulesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ResolverRulesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRulesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ResolverRulesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRulesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o ResolverRulesResultOutput) Rules() ResolverRulesRuleArrayOutput {
	return o.ApplyT(func(v ResolverRulesResult) []ResolverRulesRule { return v.Rules }).(ResolverRulesRuleArrayOutput)
}

// The total count of query.
func (o ResolverRulesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverRulesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The zone name of the rule.
func (o ResolverRulesResultOutput) ZoneName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRulesResult) *string { return v.ZoneName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ResolverRulesResultOutput{})
}
