// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package private_zone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage private zone record weight enabler
//
// ## Import
//
// PrivateZoneRecordWeightEnabler can be imported using the zid:record_set_id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:private_zone/recordWeightEnabler:RecordWeightEnabler default resource_id
//
// ```
type RecordWeightEnabler struct {
	pulumi.CustomResourceState

	// The id of the private zone record set.
	RecordSetId pulumi.StringOutput `pulumi:"recordSetId"`
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled pulumi.BoolOutput `pulumi:"weightEnabled"`
	// The zid of the private zone record set.
	Zid pulumi.IntOutput `pulumi:"zid"`
}

// NewRecordWeightEnabler registers a new resource with the given unique name, arguments, and options.
func NewRecordWeightEnabler(ctx *pulumi.Context,
	name string, args *RecordWeightEnablerArgs, opts ...pulumi.ResourceOption) (*RecordWeightEnabler, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecordSetId == nil {
		return nil, errors.New("invalid value for required argument 'RecordSetId'")
	}
	if args.WeightEnabled == nil {
		return nil, errors.New("invalid value for required argument 'WeightEnabled'")
	}
	if args.Zid == nil {
		return nil, errors.New("invalid value for required argument 'Zid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RecordWeightEnabler
	err := ctx.RegisterResource("volcengine:private_zone/recordWeightEnabler:RecordWeightEnabler", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecordWeightEnabler gets an existing RecordWeightEnabler resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecordWeightEnabler(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordWeightEnablerState, opts ...pulumi.ResourceOption) (*RecordWeightEnabler, error) {
	var resource RecordWeightEnabler
	err := ctx.ReadResource("volcengine:private_zone/recordWeightEnabler:RecordWeightEnabler", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RecordWeightEnabler resources.
type recordWeightEnablerState struct {
	// The id of the private zone record set.
	RecordSetId *string `pulumi:"recordSetId"`
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled *bool `pulumi:"weightEnabled"`
	// The zid of the private zone record set.
	Zid *int `pulumi:"zid"`
}

type RecordWeightEnablerState struct {
	// The id of the private zone record set.
	RecordSetId pulumi.StringPtrInput
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled pulumi.BoolPtrInput
	// The zid of the private zone record set.
	Zid pulumi.IntPtrInput
}

func (RecordWeightEnablerState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordWeightEnablerState)(nil)).Elem()
}

type recordWeightEnablerArgs struct {
	// The id of the private zone record set.
	RecordSetId string `pulumi:"recordSetId"`
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled bool `pulumi:"weightEnabled"`
	// The zid of the private zone record set.
	Zid int `pulumi:"zid"`
}

// The set of arguments for constructing a RecordWeightEnabler resource.
type RecordWeightEnablerArgs struct {
	// The id of the private zone record set.
	RecordSetId pulumi.StringInput
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled pulumi.BoolInput
	// The zid of the private zone record set.
	Zid pulumi.IntInput
}

func (RecordWeightEnablerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordWeightEnablerArgs)(nil)).Elem()
}

type RecordWeightEnablerInput interface {
	pulumi.Input

	ToRecordWeightEnablerOutput() RecordWeightEnablerOutput
	ToRecordWeightEnablerOutputWithContext(ctx context.Context) RecordWeightEnablerOutput
}

func (*RecordWeightEnabler) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordWeightEnabler)(nil)).Elem()
}

func (i *RecordWeightEnabler) ToRecordWeightEnablerOutput() RecordWeightEnablerOutput {
	return i.ToRecordWeightEnablerOutputWithContext(context.Background())
}

func (i *RecordWeightEnabler) ToRecordWeightEnablerOutputWithContext(ctx context.Context) RecordWeightEnablerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightEnablerOutput)
}

// RecordWeightEnablerArrayInput is an input type that accepts RecordWeightEnablerArray and RecordWeightEnablerArrayOutput values.
// You can construct a concrete instance of `RecordWeightEnablerArrayInput` via:
//
//	RecordWeightEnablerArray{ RecordWeightEnablerArgs{...} }
type RecordWeightEnablerArrayInput interface {
	pulumi.Input

	ToRecordWeightEnablerArrayOutput() RecordWeightEnablerArrayOutput
	ToRecordWeightEnablerArrayOutputWithContext(context.Context) RecordWeightEnablerArrayOutput
}

type RecordWeightEnablerArray []RecordWeightEnablerInput

func (RecordWeightEnablerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordWeightEnabler)(nil)).Elem()
}

func (i RecordWeightEnablerArray) ToRecordWeightEnablerArrayOutput() RecordWeightEnablerArrayOutput {
	return i.ToRecordWeightEnablerArrayOutputWithContext(context.Background())
}

func (i RecordWeightEnablerArray) ToRecordWeightEnablerArrayOutputWithContext(ctx context.Context) RecordWeightEnablerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightEnablerArrayOutput)
}

// RecordWeightEnablerMapInput is an input type that accepts RecordWeightEnablerMap and RecordWeightEnablerMapOutput values.
// You can construct a concrete instance of `RecordWeightEnablerMapInput` via:
//
//	RecordWeightEnablerMap{ "key": RecordWeightEnablerArgs{...} }
type RecordWeightEnablerMapInput interface {
	pulumi.Input

	ToRecordWeightEnablerMapOutput() RecordWeightEnablerMapOutput
	ToRecordWeightEnablerMapOutputWithContext(context.Context) RecordWeightEnablerMapOutput
}

type RecordWeightEnablerMap map[string]RecordWeightEnablerInput

func (RecordWeightEnablerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordWeightEnabler)(nil)).Elem()
}

func (i RecordWeightEnablerMap) ToRecordWeightEnablerMapOutput() RecordWeightEnablerMapOutput {
	return i.ToRecordWeightEnablerMapOutputWithContext(context.Background())
}

func (i RecordWeightEnablerMap) ToRecordWeightEnablerMapOutputWithContext(ctx context.Context) RecordWeightEnablerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordWeightEnablerMapOutput)
}

type RecordWeightEnablerOutput struct{ *pulumi.OutputState }

func (RecordWeightEnablerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RecordWeightEnabler)(nil)).Elem()
}

func (o RecordWeightEnablerOutput) ToRecordWeightEnablerOutput() RecordWeightEnablerOutput {
	return o
}

func (o RecordWeightEnablerOutput) ToRecordWeightEnablerOutputWithContext(ctx context.Context) RecordWeightEnablerOutput {
	return o
}

// The id of the private zone record set.
func (o RecordWeightEnablerOutput) RecordSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RecordWeightEnabler) pulumi.StringOutput { return v.RecordSetId }).(pulumi.StringOutput)
}

// Whether to enable the load balance of the private zone record set.
func (o RecordWeightEnablerOutput) WeightEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *RecordWeightEnabler) pulumi.BoolOutput { return v.WeightEnabled }).(pulumi.BoolOutput)
}

// The zid of the private zone record set.
func (o RecordWeightEnablerOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v *RecordWeightEnabler) pulumi.IntOutput { return v.Zid }).(pulumi.IntOutput)
}

type RecordWeightEnablerArrayOutput struct{ *pulumi.OutputState }

func (RecordWeightEnablerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RecordWeightEnabler)(nil)).Elem()
}

func (o RecordWeightEnablerArrayOutput) ToRecordWeightEnablerArrayOutput() RecordWeightEnablerArrayOutput {
	return o
}

func (o RecordWeightEnablerArrayOutput) ToRecordWeightEnablerArrayOutputWithContext(ctx context.Context) RecordWeightEnablerArrayOutput {
	return o
}

func (o RecordWeightEnablerArrayOutput) Index(i pulumi.IntInput) RecordWeightEnablerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RecordWeightEnabler {
		return vs[0].([]*RecordWeightEnabler)[vs[1].(int)]
	}).(RecordWeightEnablerOutput)
}

type RecordWeightEnablerMapOutput struct{ *pulumi.OutputState }

func (RecordWeightEnablerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RecordWeightEnabler)(nil)).Elem()
}

func (o RecordWeightEnablerMapOutput) ToRecordWeightEnablerMapOutput() RecordWeightEnablerMapOutput {
	return o
}

func (o RecordWeightEnablerMapOutput) ToRecordWeightEnablerMapOutputWithContext(ctx context.Context) RecordWeightEnablerMapOutput {
	return o
}

func (o RecordWeightEnablerMapOutput) MapIndex(k pulumi.StringInput) RecordWeightEnablerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RecordWeightEnabler {
		return vs[0].(map[string]*RecordWeightEnabler)[vs[1].(string)]
	}).(RecordWeightEnablerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordWeightEnablerInput)(nil)).Elem(), &RecordWeightEnabler{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordWeightEnablerArrayInput)(nil)).Elem(), RecordWeightEnablerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordWeightEnablerMapInput)(nil)).Elem(), RecordWeightEnablerMap{})
	pulumi.RegisterOutputType(RecordWeightEnablerOutput{})
	pulumi.RegisterOutputType(RecordWeightEnablerArrayOutput{})
	pulumi.RegisterOutputType(RecordWeightEnablerMapOutput{})
}
