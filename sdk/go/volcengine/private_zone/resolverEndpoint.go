// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package private_zone

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage private zone resolver endpoint
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/private_zone"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := private_zone.NewResolverEndpoint(ctx, "foo", &private_zone.ResolverEndpointArgs{
//				IpConfigs: private_zone.ResolverEndpointIpConfigArray{
//					&private_zone.ResolverEndpointIpConfigArgs{
//						AzId:     pulumi.String("cn-beijing-a"),
//						Ip:       pulumi.String("172.16.0.2"),
//						SubnetId: pulumi.String("subnet-mj2o4co2m2v45smt1bx1****"),
//					},
//					&private_zone.ResolverEndpointIpConfigArgs{
//						AzId:     pulumi.String("cn-beijing-a"),
//						Ip:       pulumi.String("172.16.0.3"),
//						SubnetId: pulumi.String("subnet-mj2o4co2m2v45smt1bx1****"),
//					},
//					&private_zone.ResolverEndpointIpConfigArgs{
//						AzId:     pulumi.String("cn-beijing-a"),
//						Ip:       pulumi.String("172.16.0.4"),
//						SubnetId: pulumi.String("subnet-mj2o4co2m2v45smt1bx1****"),
//					},
//					&private_zone.ResolverEndpointIpConfigArgs{
//						AzId:     pulumi.String("cn-beijing-a"),
//						Ip:       pulumi.String("172.16.0.5"),
//						SubnetId: pulumi.String("subnet-mj2o4co2m2v45smt1bx1****"),
//					},
//				},
//				SecurityGroupId: pulumi.String("sg-mj2nsckay29s5smt1b0d****"),
//				VpcId:           pulumi.String("vpc-13f9uuuqfdjb43n6nu5p1****"),
//				VpcRegion:       pulumi.String("cn-beijing"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// PrivateZoneResolverEndpoint can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:private_zone/resolverEndpoint:ResolverEndpoint default resource_id
// ```
type ResolverEndpoint struct {
	pulumi.CustomResourceState

	// DNS request forwarding direction for terminal nodes. OUTBOUND: (default) Outbound terminal nodes forward DNS query requests from within the VPC to external DNS servers. INBOUND: Inbound terminal nodes forward DNS query requests from external sources to resolvers.
	Direction pulumi.StringPtrOutput `pulumi:"direction"`
	// Availability zones, subnets, and IP configurations of terminal nodes.
	IpConfigs ResolverEndpointIpConfigArrayOutput `pulumi:"ipConfigs"`
	// The name of the private zone resolver endpoint.
	Name pulumi.StringOutput `pulumi:"name"`
	// The security group ID of the endpoint.
	SecurityGroupId pulumi.StringOutput `pulumi:"securityGroupId"`
	// The VPC ID of the endpoint.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The VPC region of the endpoint.
	VpcRegion pulumi.StringOutput `pulumi:"vpcRegion"`
}

// NewResolverEndpoint registers a new resource with the given unique name, arguments, and options.
func NewResolverEndpoint(ctx *pulumi.Context,
	name string, args *ResolverEndpointArgs, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpConfigs == nil {
		return nil, errors.New("invalid value for required argument 'IpConfigs'")
	}
	if args.SecurityGroupId == nil {
		return nil, errors.New("invalid value for required argument 'SecurityGroupId'")
	}
	if args.VpcId == nil {
		return nil, errors.New("invalid value for required argument 'VpcId'")
	}
	if args.VpcRegion == nil {
		return nil, errors.New("invalid value for required argument 'VpcRegion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ResolverEndpoint
	err := ctx.RegisterResource("volcengine:private_zone/resolverEndpoint:ResolverEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResolverEndpoint gets an existing ResolverEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResolverEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResolverEndpointState, opts ...pulumi.ResourceOption) (*ResolverEndpoint, error) {
	var resource ResolverEndpoint
	err := ctx.ReadResource("volcengine:private_zone/resolverEndpoint:ResolverEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResolverEndpoint resources.
type resolverEndpointState struct {
	// DNS request forwarding direction for terminal nodes. OUTBOUND: (default) Outbound terminal nodes forward DNS query requests from within the VPC to external DNS servers. INBOUND: Inbound terminal nodes forward DNS query requests from external sources to resolvers.
	Direction *string `pulumi:"direction"`
	// Availability zones, subnets, and IP configurations of terminal nodes.
	IpConfigs []ResolverEndpointIpConfig `pulumi:"ipConfigs"`
	// The name of the private zone resolver endpoint.
	Name *string `pulumi:"name"`
	// The security group ID of the endpoint.
	SecurityGroupId *string `pulumi:"securityGroupId"`
	// The VPC ID of the endpoint.
	VpcId *string `pulumi:"vpcId"`
	// The VPC region of the endpoint.
	VpcRegion *string `pulumi:"vpcRegion"`
}

type ResolverEndpointState struct {
	// DNS request forwarding direction for terminal nodes. OUTBOUND: (default) Outbound terminal nodes forward DNS query requests from within the VPC to external DNS servers. INBOUND: Inbound terminal nodes forward DNS query requests from external sources to resolvers.
	Direction pulumi.StringPtrInput
	// Availability zones, subnets, and IP configurations of terminal nodes.
	IpConfigs ResolverEndpointIpConfigArrayInput
	// The name of the private zone resolver endpoint.
	Name pulumi.StringPtrInput
	// The security group ID of the endpoint.
	SecurityGroupId pulumi.StringPtrInput
	// The VPC ID of the endpoint.
	VpcId pulumi.StringPtrInput
	// The VPC region of the endpoint.
	VpcRegion pulumi.StringPtrInput
}

func (ResolverEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointState)(nil)).Elem()
}

type resolverEndpointArgs struct {
	// DNS request forwarding direction for terminal nodes. OUTBOUND: (default) Outbound terminal nodes forward DNS query requests from within the VPC to external DNS servers. INBOUND: Inbound terminal nodes forward DNS query requests from external sources to resolvers.
	Direction *string `pulumi:"direction"`
	// Availability zones, subnets, and IP configurations of terminal nodes.
	IpConfigs []ResolverEndpointIpConfig `pulumi:"ipConfigs"`
	// The name of the private zone resolver endpoint.
	Name *string `pulumi:"name"`
	// The security group ID of the endpoint.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The VPC ID of the endpoint.
	VpcId string `pulumi:"vpcId"`
	// The VPC region of the endpoint.
	VpcRegion string `pulumi:"vpcRegion"`
}

// The set of arguments for constructing a ResolverEndpoint resource.
type ResolverEndpointArgs struct {
	// DNS request forwarding direction for terminal nodes. OUTBOUND: (default) Outbound terminal nodes forward DNS query requests from within the VPC to external DNS servers. INBOUND: Inbound terminal nodes forward DNS query requests from external sources to resolvers.
	Direction pulumi.StringPtrInput
	// Availability zones, subnets, and IP configurations of terminal nodes.
	IpConfigs ResolverEndpointIpConfigArrayInput
	// The name of the private zone resolver endpoint.
	Name pulumi.StringPtrInput
	// The security group ID of the endpoint.
	SecurityGroupId pulumi.StringInput
	// The VPC ID of the endpoint.
	VpcId pulumi.StringInput
	// The VPC region of the endpoint.
	VpcRegion pulumi.StringInput
}

func (ResolverEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resolverEndpointArgs)(nil)).Elem()
}

type ResolverEndpointInput interface {
	pulumi.Input

	ToResolverEndpointOutput() ResolverEndpointOutput
	ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput
}

func (*ResolverEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverEndpoint)(nil)).Elem()
}

func (i *ResolverEndpoint) ToResolverEndpointOutput() ResolverEndpointOutput {
	return i.ToResolverEndpointOutputWithContext(context.Background())
}

func (i *ResolverEndpoint) ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointOutput)
}

// ResolverEndpointArrayInput is an input type that accepts ResolverEndpointArray and ResolverEndpointArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointArrayInput` via:
//
//	ResolverEndpointArray{ ResolverEndpointArgs{...} }
type ResolverEndpointArrayInput interface {
	pulumi.Input

	ToResolverEndpointArrayOutput() ResolverEndpointArrayOutput
	ToResolverEndpointArrayOutputWithContext(context.Context) ResolverEndpointArrayOutput
}

type ResolverEndpointArray []ResolverEndpointInput

func (ResolverEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverEndpoint)(nil)).Elem()
}

func (i ResolverEndpointArray) ToResolverEndpointArrayOutput() ResolverEndpointArrayOutput {
	return i.ToResolverEndpointArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointArray) ToResolverEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointArrayOutput)
}

// ResolverEndpointMapInput is an input type that accepts ResolverEndpointMap and ResolverEndpointMapOutput values.
// You can construct a concrete instance of `ResolverEndpointMapInput` via:
//
//	ResolverEndpointMap{ "key": ResolverEndpointArgs{...} }
type ResolverEndpointMapInput interface {
	pulumi.Input

	ToResolverEndpointMapOutput() ResolverEndpointMapOutput
	ToResolverEndpointMapOutputWithContext(context.Context) ResolverEndpointMapOutput
}

type ResolverEndpointMap map[string]ResolverEndpointInput

func (ResolverEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverEndpoint)(nil)).Elem()
}

func (i ResolverEndpointMap) ToResolverEndpointMapOutput() ResolverEndpointMapOutput {
	return i.ToResolverEndpointMapOutputWithContext(context.Background())
}

func (i ResolverEndpointMap) ToResolverEndpointMapOutputWithContext(ctx context.Context) ResolverEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointMapOutput)
}

type ResolverEndpointOutput struct{ *pulumi.OutputState }

func (ResolverEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointOutput) ToResolverEndpointOutput() ResolverEndpointOutput {
	return o
}

func (o ResolverEndpointOutput) ToResolverEndpointOutputWithContext(ctx context.Context) ResolverEndpointOutput {
	return o
}

// DNS request forwarding direction for terminal nodes. OUTBOUND: (default) Outbound terminal nodes forward DNS query requests from within the VPC to external DNS servers. INBOUND: Inbound terminal nodes forward DNS query requests from external sources to resolvers.
func (o ResolverEndpointOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringPtrOutput { return v.Direction }).(pulumi.StringPtrOutput)
}

// Availability zones, subnets, and IP configurations of terminal nodes.
func (o ResolverEndpointOutput) IpConfigs() ResolverEndpointIpConfigArrayOutput {
	return o.ApplyT(func(v *ResolverEndpoint) ResolverEndpointIpConfigArrayOutput { return v.IpConfigs }).(ResolverEndpointIpConfigArrayOutput)
}

// The name of the private zone resolver endpoint.
func (o ResolverEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The security group ID of the endpoint.
func (o ResolverEndpointOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The VPC ID of the endpoint.
func (o ResolverEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The VPC region of the endpoint.
func (o ResolverEndpointOutput) VpcRegion() pulumi.StringOutput {
	return o.ApplyT(func(v *ResolverEndpoint) pulumi.StringOutput { return v.VpcRegion }).(pulumi.StringOutput)
}

type ResolverEndpointArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointArrayOutput) ToResolverEndpointArrayOutput() ResolverEndpointArrayOutput {
	return o
}

func (o ResolverEndpointArrayOutput) ToResolverEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointArrayOutput {
	return o
}

func (o ResolverEndpointArrayOutput) Index(i pulumi.IntInput) ResolverEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResolverEndpoint {
		return vs[0].([]*ResolverEndpoint)[vs[1].(int)]
	}).(ResolverEndpointOutput)
}

type ResolverEndpointMapOutput struct{ *pulumi.OutputState }

func (ResolverEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResolverEndpoint)(nil)).Elem()
}

func (o ResolverEndpointMapOutput) ToResolverEndpointMapOutput() ResolverEndpointMapOutput {
	return o
}

func (o ResolverEndpointMapOutput) ToResolverEndpointMapOutputWithContext(ctx context.Context) ResolverEndpointMapOutput {
	return o
}

func (o ResolverEndpointMapOutput) MapIndex(k pulumi.StringInput) ResolverEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResolverEndpoint {
		return vs[0].(map[string]*ResolverEndpoint)[vs[1].(string)]
	}).(ResolverEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointInput)(nil)).Elem(), &ResolverEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointArrayInput)(nil)).Elem(), ResolverEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointMapInput)(nil)).Elem(), ResolverEndpointMap{})
	pulumi.RegisterOutputType(ResolverEndpointOutput{})
	pulumi.RegisterOutputType(ResolverEndpointArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointMapOutput{})
}
