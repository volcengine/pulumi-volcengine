// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package private_zone

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type PrivateZoneVpc struct {
	// The region of the bind vpc. The default value is the region of the default provider config.
	Region *string `pulumi:"region"`
	// The id of the bind vpc.
	VpcId string `pulumi:"vpcId"`
}

// PrivateZoneVpcInput is an input type that accepts PrivateZoneVpcArgs and PrivateZoneVpcOutput values.
// You can construct a concrete instance of `PrivateZoneVpcInput` via:
//
//	PrivateZoneVpcArgs{...}
type PrivateZoneVpcInput interface {
	pulumi.Input

	ToPrivateZoneVpcOutput() PrivateZoneVpcOutput
	ToPrivateZoneVpcOutputWithContext(context.Context) PrivateZoneVpcOutput
}

type PrivateZoneVpcArgs struct {
	// The region of the bind vpc. The default value is the region of the default provider config.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The id of the bind vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (PrivateZoneVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZoneVpc)(nil)).Elem()
}

func (i PrivateZoneVpcArgs) ToPrivateZoneVpcOutput() PrivateZoneVpcOutput {
	return i.ToPrivateZoneVpcOutputWithContext(context.Background())
}

func (i PrivateZoneVpcArgs) ToPrivateZoneVpcOutputWithContext(ctx context.Context) PrivateZoneVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZoneVpcOutput)
}

// PrivateZoneVpcArrayInput is an input type that accepts PrivateZoneVpcArray and PrivateZoneVpcArrayOutput values.
// You can construct a concrete instance of `PrivateZoneVpcArrayInput` via:
//
//	PrivateZoneVpcArray{ PrivateZoneVpcArgs{...} }
type PrivateZoneVpcArrayInput interface {
	pulumi.Input

	ToPrivateZoneVpcArrayOutput() PrivateZoneVpcArrayOutput
	ToPrivateZoneVpcArrayOutputWithContext(context.Context) PrivateZoneVpcArrayOutput
}

type PrivateZoneVpcArray []PrivateZoneVpcInput

func (PrivateZoneVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZoneVpc)(nil)).Elem()
}

func (i PrivateZoneVpcArray) ToPrivateZoneVpcArrayOutput() PrivateZoneVpcArrayOutput {
	return i.ToPrivateZoneVpcArrayOutputWithContext(context.Background())
}

func (i PrivateZoneVpcArray) ToPrivateZoneVpcArrayOutputWithContext(ctx context.Context) PrivateZoneVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZoneVpcArrayOutput)
}

type PrivateZoneVpcOutput struct{ *pulumi.OutputState }

func (PrivateZoneVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZoneVpc)(nil)).Elem()
}

func (o PrivateZoneVpcOutput) ToPrivateZoneVpcOutput() PrivateZoneVpcOutput {
	return o
}

func (o PrivateZoneVpcOutput) ToPrivateZoneVpcOutputWithContext(ctx context.Context) PrivateZoneVpcOutput {
	return o
}

// The region of the bind vpc. The default value is the region of the default provider config.
func (o PrivateZoneVpcOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateZoneVpc) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The id of the bind vpc.
func (o PrivateZoneVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZoneVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

type PrivateZoneVpcArrayOutput struct{ *pulumi.OutputState }

func (PrivateZoneVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZoneVpc)(nil)).Elem()
}

func (o PrivateZoneVpcArrayOutput) ToPrivateZoneVpcArrayOutput() PrivateZoneVpcArrayOutput {
	return o
}

func (o PrivateZoneVpcArrayOutput) ToPrivateZoneVpcArrayOutputWithContext(ctx context.Context) PrivateZoneVpcArrayOutput {
	return o
}

func (o PrivateZoneVpcArrayOutput) Index(i pulumi.IntInput) PrivateZoneVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateZoneVpc {
		return vs[0].([]PrivateZoneVpc)[vs[1].(int)]
	}).(PrivateZoneVpcOutput)
}

type PrivateZonesPrivateZone struct {
	// The Bind vpc info of the private zone.
	BindVpcs []PrivateZonesPrivateZoneBindVpc `pulumi:"bindVpcs"`
	// The created time of the private zone.
	CreatedAt string `pulumi:"createdAt"`
	// The id of the private zone.
	Id string `pulumi:"id"`
	// The account id of the last operator who created the private zone.
	LastOperator string `pulumi:"lastOperator"`
	// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
	LineMode int `pulumi:"lineMode"`
	// The record count of the private zone.
	RecordCount int `pulumi:"recordCount"`
	// Whether the recursion mode of Private Zone is enabled.
	RecursionMode bool `pulumi:"recursionMode"`
	// The region of Private Zone.
	Regions []string `pulumi:"regions"`
	// The remark of the private zone.
	Remark string `pulumi:"remark"`
	// The updated time of the private zone.
	UpdatedAt string `pulumi:"updatedAt"`
	// The zid of Private Zone.
	Zid int `pulumi:"zid"`
	// The name of Private Zone.
	ZoneName string `pulumi:"zoneName"`
}

// PrivateZonesPrivateZoneInput is an input type that accepts PrivateZonesPrivateZoneArgs and PrivateZonesPrivateZoneOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneInput` via:
//
//	PrivateZonesPrivateZoneArgs{...}
type PrivateZonesPrivateZoneInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneOutput() PrivateZonesPrivateZoneOutput
	ToPrivateZonesPrivateZoneOutputWithContext(context.Context) PrivateZonesPrivateZoneOutput
}

type PrivateZonesPrivateZoneArgs struct {
	// The Bind vpc info of the private zone.
	BindVpcs PrivateZonesPrivateZoneBindVpcArrayInput `pulumi:"bindVpcs"`
	// The created time of the private zone.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The id of the private zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The account id of the last operator who created the private zone.
	LastOperator pulumi.StringInput `pulumi:"lastOperator"`
	// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
	LineMode pulumi.IntInput `pulumi:"lineMode"`
	// The record count of the private zone.
	RecordCount pulumi.IntInput `pulumi:"recordCount"`
	// Whether the recursion mode of Private Zone is enabled.
	RecursionMode pulumi.BoolInput `pulumi:"recursionMode"`
	// The region of Private Zone.
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// The remark of the private zone.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The updated time of the private zone.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The zid of Private Zone.
	Zid pulumi.IntInput `pulumi:"zid"`
	// The name of Private Zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (PrivateZonesPrivateZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZone)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneArgs) ToPrivateZonesPrivateZoneOutput() PrivateZonesPrivateZoneOutput {
	return i.ToPrivateZonesPrivateZoneOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneArgs) ToPrivateZonesPrivateZoneOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneOutput)
}

// PrivateZonesPrivateZoneArrayInput is an input type that accepts PrivateZonesPrivateZoneArray and PrivateZonesPrivateZoneArrayOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneArrayInput` via:
//
//	PrivateZonesPrivateZoneArray{ PrivateZonesPrivateZoneArgs{...} }
type PrivateZonesPrivateZoneArrayInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneArrayOutput() PrivateZonesPrivateZoneArrayOutput
	ToPrivateZonesPrivateZoneArrayOutputWithContext(context.Context) PrivateZonesPrivateZoneArrayOutput
}

type PrivateZonesPrivateZoneArray []PrivateZonesPrivateZoneInput

func (PrivateZonesPrivateZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZone)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneArray) ToPrivateZonesPrivateZoneArrayOutput() PrivateZonesPrivateZoneArrayOutput {
	return i.ToPrivateZonesPrivateZoneArrayOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneArray) ToPrivateZonesPrivateZoneArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneArrayOutput)
}

type PrivateZonesPrivateZoneOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZone)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneOutput) ToPrivateZonesPrivateZoneOutput() PrivateZonesPrivateZoneOutput {
	return o
}

func (o PrivateZonesPrivateZoneOutput) ToPrivateZonesPrivateZoneOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneOutput {
	return o
}

// The Bind vpc info of the private zone.
func (o PrivateZonesPrivateZoneOutput) BindVpcs() PrivateZonesPrivateZoneBindVpcArrayOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) []PrivateZonesPrivateZoneBindVpc { return v.BindVpcs }).(PrivateZonesPrivateZoneBindVpcArrayOutput)
}

// The created time of the private zone.
func (o PrivateZonesPrivateZoneOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The id of the private zone.
func (o PrivateZonesPrivateZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.Id }).(pulumi.StringOutput)
}

// The account id of the last operator who created the private zone.
func (o PrivateZonesPrivateZoneOutput) LastOperator() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.LastOperator }).(pulumi.StringOutput)
}

// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
func (o PrivateZonesPrivateZoneOutput) LineMode() pulumi.IntOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) int { return v.LineMode }).(pulumi.IntOutput)
}

// The record count of the private zone.
func (o PrivateZonesPrivateZoneOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) int { return v.RecordCount }).(pulumi.IntOutput)
}

// Whether the recursion mode of Private Zone is enabled.
func (o PrivateZonesPrivateZoneOutput) RecursionMode() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) bool { return v.RecursionMode }).(pulumi.BoolOutput)
}

// The region of Private Zone.
func (o PrivateZonesPrivateZoneOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// The remark of the private zone.
func (o PrivateZonesPrivateZoneOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.Remark }).(pulumi.StringOutput)
}

// The updated time of the private zone.
func (o PrivateZonesPrivateZoneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The zid of Private Zone.
func (o PrivateZonesPrivateZoneOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) int { return v.Zid }).(pulumi.IntOutput)
}

// The name of Private Zone.
func (o PrivateZonesPrivateZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type PrivateZonesPrivateZoneArrayOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZone)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneArrayOutput) ToPrivateZonesPrivateZoneArrayOutput() PrivateZonesPrivateZoneArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneArrayOutput) ToPrivateZonesPrivateZoneArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneArrayOutput) Index(i pulumi.IntInput) PrivateZonesPrivateZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateZonesPrivateZone {
		return vs[0].([]PrivateZonesPrivateZone)[vs[1].(int)]
	}).(PrivateZonesPrivateZoneOutput)
}

type PrivateZonesPrivateZoneBindVpc struct {
	// The account id of the bind vpc.
	AccountId string `pulumi:"accountId"`
	// The id of the private zone.
	Id string `pulumi:"id"`
	// The region of Private Zone.
	Region string `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName string `pulumi:"regionName"`
}

// PrivateZonesPrivateZoneBindVpcInput is an input type that accepts PrivateZonesPrivateZoneBindVpcArgs and PrivateZonesPrivateZoneBindVpcOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneBindVpcInput` via:
//
//	PrivateZonesPrivateZoneBindVpcArgs{...}
type PrivateZonesPrivateZoneBindVpcInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneBindVpcOutput() PrivateZonesPrivateZoneBindVpcOutput
	ToPrivateZonesPrivateZoneBindVpcOutputWithContext(context.Context) PrivateZonesPrivateZoneBindVpcOutput
}

type PrivateZonesPrivateZoneBindVpcArgs struct {
	// The account id of the bind vpc.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The id of the private zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The region of Private Zone.
	Region pulumi.StringInput `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (PrivateZonesPrivateZoneBindVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneBindVpcArgs) ToPrivateZonesPrivateZoneBindVpcOutput() PrivateZonesPrivateZoneBindVpcOutput {
	return i.ToPrivateZonesPrivateZoneBindVpcOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneBindVpcArgs) ToPrivateZonesPrivateZoneBindVpcOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneBindVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneBindVpcOutput)
}

// PrivateZonesPrivateZoneBindVpcArrayInput is an input type that accepts PrivateZonesPrivateZoneBindVpcArray and PrivateZonesPrivateZoneBindVpcArrayOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneBindVpcArrayInput` via:
//
//	PrivateZonesPrivateZoneBindVpcArray{ PrivateZonesPrivateZoneBindVpcArgs{...} }
type PrivateZonesPrivateZoneBindVpcArrayInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneBindVpcArrayOutput() PrivateZonesPrivateZoneBindVpcArrayOutput
	ToPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(context.Context) PrivateZonesPrivateZoneBindVpcArrayOutput
}

type PrivateZonesPrivateZoneBindVpcArray []PrivateZonesPrivateZoneBindVpcInput

func (PrivateZonesPrivateZoneBindVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneBindVpcArray) ToPrivateZonesPrivateZoneBindVpcArrayOutput() PrivateZonesPrivateZoneBindVpcArrayOutput {
	return i.ToPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneBindVpcArray) ToPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneBindVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneBindVpcArrayOutput)
}

type PrivateZonesPrivateZoneBindVpcOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneBindVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneBindVpcOutput) ToPrivateZonesPrivateZoneBindVpcOutput() PrivateZonesPrivateZoneBindVpcOutput {
	return o
}

func (o PrivateZonesPrivateZoneBindVpcOutput) ToPrivateZonesPrivateZoneBindVpcOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneBindVpcOutput {
	return o
}

// The account id of the bind vpc.
func (o PrivateZonesPrivateZoneBindVpcOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneBindVpc) string { return v.AccountId }).(pulumi.StringOutput)
}

// The id of the private zone.
func (o PrivateZonesPrivateZoneBindVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneBindVpc) string { return v.Id }).(pulumi.StringOutput)
}

// The region of Private Zone.
func (o PrivateZonesPrivateZoneBindVpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneBindVpc) string { return v.Region }).(pulumi.StringOutput)
}

// The region name of the bind vpc.
func (o PrivateZonesPrivateZoneBindVpcOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneBindVpc) string { return v.RegionName }).(pulumi.StringOutput)
}

type PrivateZonesPrivateZoneBindVpcArrayOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneBindVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneBindVpcArrayOutput) ToPrivateZonesPrivateZoneBindVpcArrayOutput() PrivateZonesPrivateZoneBindVpcArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneBindVpcArrayOutput) ToPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneBindVpcArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneBindVpcArrayOutput) Index(i pulumi.IntInput) PrivateZonesPrivateZoneBindVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateZonesPrivateZoneBindVpc {
		return vs[0].([]PrivateZonesPrivateZoneBindVpc)[vs[1].(int)]
	}).(PrivateZonesPrivateZoneBindVpcOutput)
}

type RecordSetsRecordSet struct {
	// The Complete domain name of the private zone record.
	Fqdn string `pulumi:"fqdn"`
	// The host of Private Zone Record Set.
	Host string `pulumi:"host"`
	// The subnet id of the private zone record. This field is only effected when the `intelligentMode` of the private zone is true.
	Line string `pulumi:"line"`
	// The id of Private Zone Record Set.
	RecordSetId string `pulumi:"recordSetId"`
	// The type of the private zone record.
	Type string `pulumi:"type"`
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled bool `pulumi:"weightEnabled"`
}

// RecordSetsRecordSetInput is an input type that accepts RecordSetsRecordSetArgs and RecordSetsRecordSetOutput values.
// You can construct a concrete instance of `RecordSetsRecordSetInput` via:
//
//	RecordSetsRecordSetArgs{...}
type RecordSetsRecordSetInput interface {
	pulumi.Input

	ToRecordSetsRecordSetOutput() RecordSetsRecordSetOutput
	ToRecordSetsRecordSetOutputWithContext(context.Context) RecordSetsRecordSetOutput
}

type RecordSetsRecordSetArgs struct {
	// The Complete domain name of the private zone record.
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// The host of Private Zone Record Set.
	Host pulumi.StringInput `pulumi:"host"`
	// The subnet id of the private zone record. This field is only effected when the `intelligentMode` of the private zone is true.
	Line pulumi.StringInput `pulumi:"line"`
	// The id of Private Zone Record Set.
	RecordSetId pulumi.StringInput `pulumi:"recordSetId"`
	// The type of the private zone record.
	Type pulumi.StringInput `pulumi:"type"`
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled pulumi.BoolInput `pulumi:"weightEnabled"`
}

func (RecordSetsRecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetsRecordSet)(nil)).Elem()
}

func (i RecordSetsRecordSetArgs) ToRecordSetsRecordSetOutput() RecordSetsRecordSetOutput {
	return i.ToRecordSetsRecordSetOutputWithContext(context.Background())
}

func (i RecordSetsRecordSetArgs) ToRecordSetsRecordSetOutputWithContext(ctx context.Context) RecordSetsRecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetsRecordSetOutput)
}

// RecordSetsRecordSetArrayInput is an input type that accepts RecordSetsRecordSetArray and RecordSetsRecordSetArrayOutput values.
// You can construct a concrete instance of `RecordSetsRecordSetArrayInput` via:
//
//	RecordSetsRecordSetArray{ RecordSetsRecordSetArgs{...} }
type RecordSetsRecordSetArrayInput interface {
	pulumi.Input

	ToRecordSetsRecordSetArrayOutput() RecordSetsRecordSetArrayOutput
	ToRecordSetsRecordSetArrayOutputWithContext(context.Context) RecordSetsRecordSetArrayOutput
}

type RecordSetsRecordSetArray []RecordSetsRecordSetInput

func (RecordSetsRecordSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordSetsRecordSet)(nil)).Elem()
}

func (i RecordSetsRecordSetArray) ToRecordSetsRecordSetArrayOutput() RecordSetsRecordSetArrayOutput {
	return i.ToRecordSetsRecordSetArrayOutputWithContext(context.Background())
}

func (i RecordSetsRecordSetArray) ToRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) RecordSetsRecordSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetsRecordSetArrayOutput)
}

type RecordSetsRecordSetOutput struct{ *pulumi.OutputState }

func (RecordSetsRecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetsRecordSet)(nil)).Elem()
}

func (o RecordSetsRecordSetOutput) ToRecordSetsRecordSetOutput() RecordSetsRecordSetOutput {
	return o
}

func (o RecordSetsRecordSetOutput) ToRecordSetsRecordSetOutputWithContext(ctx context.Context) RecordSetsRecordSetOutput {
	return o
}

// The Complete domain name of the private zone record.
func (o RecordSetsRecordSetOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The host of Private Zone Record Set.
func (o RecordSetsRecordSetOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Host }).(pulumi.StringOutput)
}

// The subnet id of the private zone record. This field is only effected when the `intelligentMode` of the private zone is true.
func (o RecordSetsRecordSetOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Line }).(pulumi.StringOutput)
}

// The id of Private Zone Record Set.
func (o RecordSetsRecordSetOutput) RecordSetId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.RecordSetId }).(pulumi.StringOutput)
}

// The type of the private zone record.
func (o RecordSetsRecordSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Type }).(pulumi.StringOutput)
}

// Whether to enable the load balance of the private zone record set.
func (o RecordSetsRecordSetOutput) WeightEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) bool { return v.WeightEnabled }).(pulumi.BoolOutput)
}

type RecordSetsRecordSetArrayOutput struct{ *pulumi.OutputState }

func (RecordSetsRecordSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordSetsRecordSet)(nil)).Elem()
}

func (o RecordSetsRecordSetArrayOutput) ToRecordSetsRecordSetArrayOutput() RecordSetsRecordSetArrayOutput {
	return o
}

func (o RecordSetsRecordSetArrayOutput) ToRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) RecordSetsRecordSetArrayOutput {
	return o
}

func (o RecordSetsRecordSetArrayOutput) Index(i pulumi.IntInput) RecordSetsRecordSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordSetsRecordSet {
		return vs[0].([]RecordSetsRecordSet)[vs[1].(int)]
	}).(RecordSetsRecordSetOutput)
}

type RecordsRecord struct {
	// The created time of the private zone record.
	CreatedAt string `pulumi:"createdAt"`
	// Whether the private zone record is enabling.
	Enable bool `pulumi:"enable"`
	// The host of Private Zone Record.
	Host string `pulumi:"host"`
	// The last operator account id of Private Zone Record.
	LastOperator string `pulumi:"lastOperator"`
	// The subnet id of Private Zone Record. This field is only effected when the `intelligentMode` of the private zone is true.
	Line string `pulumi:"line"`
	// The id of Private Zone Record.
	RecordId string `pulumi:"recordId"`
	// The remark of the private zone record.
	Remark string `pulumi:"remark"`
	// The ttl of the private zone record. Unit: second.
	Ttl int `pulumi:"ttl"`
	// The type of Private Zone Record.
	Type string `pulumi:"type"`
	// The updated time of the private zone record.
	UpdatedAt string `pulumi:"updatedAt"`
	// The value of Private Zone Record.
	Value string `pulumi:"value"`
	// The weight of the private zone record.
	Weight int `pulumi:"weight"`
	// The zid of Private Zone.
	Zid int `pulumi:"zid"`
}

// RecordsRecordInput is an input type that accepts RecordsRecordArgs and RecordsRecordOutput values.
// You can construct a concrete instance of `RecordsRecordInput` via:
//
//	RecordsRecordArgs{...}
type RecordsRecordInput interface {
	pulumi.Input

	ToRecordsRecordOutput() RecordsRecordOutput
	ToRecordsRecordOutputWithContext(context.Context) RecordsRecordOutput
}

type RecordsRecordArgs struct {
	// The created time of the private zone record.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Whether the private zone record is enabling.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// The host of Private Zone Record.
	Host pulumi.StringInput `pulumi:"host"`
	// The last operator account id of Private Zone Record.
	LastOperator pulumi.StringInput `pulumi:"lastOperator"`
	// The subnet id of Private Zone Record. This field is only effected when the `intelligentMode` of the private zone is true.
	Line pulumi.StringInput `pulumi:"line"`
	// The id of Private Zone Record.
	RecordId pulumi.StringInput `pulumi:"recordId"`
	// The remark of the private zone record.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The ttl of the private zone record. Unit: second.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// The type of Private Zone Record.
	Type pulumi.StringInput `pulumi:"type"`
	// The updated time of the private zone record.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The value of Private Zone Record.
	Value pulumi.StringInput `pulumi:"value"`
	// The weight of the private zone record.
	Weight pulumi.IntInput `pulumi:"weight"`
	// The zid of Private Zone.
	Zid pulumi.IntInput `pulumi:"zid"`
}

func (RecordsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsRecord)(nil)).Elem()
}

func (i RecordsRecordArgs) ToRecordsRecordOutput() RecordsRecordOutput {
	return i.ToRecordsRecordOutputWithContext(context.Background())
}

func (i RecordsRecordArgs) ToRecordsRecordOutputWithContext(ctx context.Context) RecordsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsRecordOutput)
}

// RecordsRecordArrayInput is an input type that accepts RecordsRecordArray and RecordsRecordArrayOutput values.
// You can construct a concrete instance of `RecordsRecordArrayInput` via:
//
//	RecordsRecordArray{ RecordsRecordArgs{...} }
type RecordsRecordArrayInput interface {
	pulumi.Input

	ToRecordsRecordArrayOutput() RecordsRecordArrayOutput
	ToRecordsRecordArrayOutputWithContext(context.Context) RecordsRecordArrayOutput
}

type RecordsRecordArray []RecordsRecordInput

func (RecordsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsRecord)(nil)).Elem()
}

func (i RecordsRecordArray) ToRecordsRecordArrayOutput() RecordsRecordArrayOutput {
	return i.ToRecordsRecordArrayOutputWithContext(context.Background())
}

func (i RecordsRecordArray) ToRecordsRecordArrayOutputWithContext(ctx context.Context) RecordsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsRecordArrayOutput)
}

type RecordsRecordOutput struct{ *pulumi.OutputState }

func (RecordsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsRecord)(nil)).Elem()
}

func (o RecordsRecordOutput) ToRecordsRecordOutput() RecordsRecordOutput {
	return o
}

func (o RecordsRecordOutput) ToRecordsRecordOutputWithContext(ctx context.Context) RecordsRecordOutput {
	return o
}

// The created time of the private zone record.
func (o RecordsRecordOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Whether the private zone record is enabling.
func (o RecordsRecordOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordsRecord) bool { return v.Enable }).(pulumi.BoolOutput)
}

// The host of Private Zone Record.
func (o RecordsRecordOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Host }).(pulumi.StringOutput)
}

// The last operator account id of Private Zone Record.
func (o RecordsRecordOutput) LastOperator() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.LastOperator }).(pulumi.StringOutput)
}

// The subnet id of Private Zone Record. This field is only effected when the `intelligentMode` of the private zone is true.
func (o RecordsRecordOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Line }).(pulumi.StringOutput)
}

// The id of Private Zone Record.
func (o RecordsRecordOutput) RecordId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.RecordId }).(pulumi.StringOutput)
}

// The remark of the private zone record.
func (o RecordsRecordOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Remark }).(pulumi.StringOutput)
}

// The ttl of the private zone record. Unit: second.
func (o RecordsRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v RecordsRecord) int { return v.Ttl }).(pulumi.IntOutput)
}

// The type of Private Zone Record.
func (o RecordsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Type }).(pulumi.StringOutput)
}

// The updated time of the private zone record.
func (o RecordsRecordOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The value of Private Zone Record.
func (o RecordsRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Value }).(pulumi.StringOutput)
}

// The weight of the private zone record.
func (o RecordsRecordOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RecordsRecord) int { return v.Weight }).(pulumi.IntOutput)
}

// The zid of Private Zone.
func (o RecordsRecordOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v RecordsRecord) int { return v.Zid }).(pulumi.IntOutput)
}

type RecordsRecordArrayOutput struct{ *pulumi.OutputState }

func (RecordsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsRecord)(nil)).Elem()
}

func (o RecordsRecordArrayOutput) ToRecordsRecordArrayOutput() RecordsRecordArrayOutput {
	return o
}

func (o RecordsRecordArrayOutput) ToRecordsRecordArrayOutputWithContext(ctx context.Context) RecordsRecordArrayOutput {
	return o
}

func (o RecordsRecordArrayOutput) Index(i pulumi.IntInput) RecordsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordsRecord {
		return vs[0].([]RecordsRecord)[vs[1].(int)]
	}).(RecordsRecordOutput)
}

type ResolverEndpointIpConfig struct {
	// Id of the availability zone.
	AzId string `pulumi:"azId"`
	// Source IP address of traffic. You can add up to 6 IP addresses at most. To ensure high availability, you must add at least two IP addresses.
	Ip string `pulumi:"ip"`
	// Id of the subnet.
	SubnetId string `pulumi:"subnetId"`
}

// ResolverEndpointIpConfigInput is an input type that accepts ResolverEndpointIpConfigArgs and ResolverEndpointIpConfigOutput values.
// You can construct a concrete instance of `ResolverEndpointIpConfigInput` via:
//
//	ResolverEndpointIpConfigArgs{...}
type ResolverEndpointIpConfigInput interface {
	pulumi.Input

	ToResolverEndpointIpConfigOutput() ResolverEndpointIpConfigOutput
	ToResolverEndpointIpConfigOutputWithContext(context.Context) ResolverEndpointIpConfigOutput
}

type ResolverEndpointIpConfigArgs struct {
	// Id of the availability zone.
	AzId pulumi.StringInput `pulumi:"azId"`
	// Source IP address of traffic. You can add up to 6 IP addresses at most. To ensure high availability, you must add at least two IP addresses.
	Ip pulumi.StringInput `pulumi:"ip"`
	// Id of the subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (ResolverEndpointIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpConfig)(nil)).Elem()
}

func (i ResolverEndpointIpConfigArgs) ToResolverEndpointIpConfigOutput() ResolverEndpointIpConfigOutput {
	return i.ToResolverEndpointIpConfigOutputWithContext(context.Background())
}

func (i ResolverEndpointIpConfigArgs) ToResolverEndpointIpConfigOutputWithContext(ctx context.Context) ResolverEndpointIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpConfigOutput)
}

// ResolverEndpointIpConfigArrayInput is an input type that accepts ResolverEndpointIpConfigArray and ResolverEndpointIpConfigArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointIpConfigArrayInput` via:
//
//	ResolverEndpointIpConfigArray{ ResolverEndpointIpConfigArgs{...} }
type ResolverEndpointIpConfigArrayInput interface {
	pulumi.Input

	ToResolverEndpointIpConfigArrayOutput() ResolverEndpointIpConfigArrayOutput
	ToResolverEndpointIpConfigArrayOutputWithContext(context.Context) ResolverEndpointIpConfigArrayOutput
}

type ResolverEndpointIpConfigArray []ResolverEndpointIpConfigInput

func (ResolverEndpointIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpConfig)(nil)).Elem()
}

func (i ResolverEndpointIpConfigArray) ToResolverEndpointIpConfigArrayOutput() ResolverEndpointIpConfigArrayOutput {
	return i.ToResolverEndpointIpConfigArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointIpConfigArray) ToResolverEndpointIpConfigArrayOutputWithContext(ctx context.Context) ResolverEndpointIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpConfigArrayOutput)
}

type ResolverEndpointIpConfigOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpConfig)(nil)).Elem()
}

func (o ResolverEndpointIpConfigOutput) ToResolverEndpointIpConfigOutput() ResolverEndpointIpConfigOutput {
	return o
}

func (o ResolverEndpointIpConfigOutput) ToResolverEndpointIpConfigOutputWithContext(ctx context.Context) ResolverEndpointIpConfigOutput {
	return o
}

// Id of the availability zone.
func (o ResolverEndpointIpConfigOutput) AzId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpConfig) string { return v.AzId }).(pulumi.StringOutput)
}

// Source IP address of traffic. You can add up to 6 IP addresses at most. To ensure high availability, you must add at least two IP addresses.
func (o ResolverEndpointIpConfigOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpConfig) string { return v.Ip }).(pulumi.StringOutput)
}

// Id of the subnet.
func (o ResolverEndpointIpConfigOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpConfig) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverEndpointIpConfigArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpConfig)(nil)).Elem()
}

func (o ResolverEndpointIpConfigArrayOutput) ToResolverEndpointIpConfigArrayOutput() ResolverEndpointIpConfigArrayOutput {
	return o
}

func (o ResolverEndpointIpConfigArrayOutput) ToResolverEndpointIpConfigArrayOutputWithContext(ctx context.Context) ResolverEndpointIpConfigArrayOutput {
	return o
}

func (o ResolverEndpointIpConfigArrayOutput) Index(i pulumi.IntInput) ResolverEndpointIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointIpConfig {
		return vs[0].([]ResolverEndpointIpConfig)[vs[1].(int)]
	}).(ResolverEndpointIpConfigOutput)
}

type ResolverEndpointsEndpoint struct {
	// The created time of the endpoint.
	CreatedAt string `pulumi:"createdAt"`
	// The direction of the private zone resolver endpoint.
	Direction string `pulumi:"direction"`
	// The endpoint id.
	EndpointId int `pulumi:"endpointId"`
	// The id of the endpoint.
	Id string `pulumi:"id"`
	// List of IP configurations.
	IpConfigs []ResolverEndpointsEndpointIpConfig `pulumi:"ipConfigs"`
	// The name of the private zone resolver endpoint.
	Name string `pulumi:"name"`
	// The security group id of the endpoint.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The status of the private zone resolver endpoint.
	Status string `pulumi:"status"`
	// The updated time of the endpoint.
	UpdatedAt string `pulumi:"updatedAt"`
	// The vpc ID of the private zone resolver endpoint.
	VpcId string `pulumi:"vpcId"`
	// The vpc region of the endpoint.
	VpcRegion string `pulumi:"vpcRegion"`
}

// ResolverEndpointsEndpointInput is an input type that accepts ResolverEndpointsEndpointArgs and ResolverEndpointsEndpointOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointInput` via:
//
//	ResolverEndpointsEndpointArgs{...}
type ResolverEndpointsEndpointInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointOutput() ResolverEndpointsEndpointOutput
	ToResolverEndpointsEndpointOutputWithContext(context.Context) ResolverEndpointsEndpointOutput
}

type ResolverEndpointsEndpointArgs struct {
	// The created time of the endpoint.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The direction of the private zone resolver endpoint.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The endpoint id.
	EndpointId pulumi.IntInput `pulumi:"endpointId"`
	// The id of the endpoint.
	Id pulumi.StringInput `pulumi:"id"`
	// List of IP configurations.
	IpConfigs ResolverEndpointsEndpointIpConfigArrayInput `pulumi:"ipConfigs"`
	// The name of the private zone resolver endpoint.
	Name pulumi.StringInput `pulumi:"name"`
	// The security group id of the endpoint.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The status of the private zone resolver endpoint.
	Status pulumi.StringInput `pulumi:"status"`
	// The updated time of the endpoint.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The vpc ID of the private zone resolver endpoint.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The vpc region of the endpoint.
	VpcRegion pulumi.StringInput `pulumi:"vpcRegion"`
}

func (ResolverEndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpoint)(nil)).Elem()
}

func (i ResolverEndpointsEndpointArgs) ToResolverEndpointsEndpointOutput() ResolverEndpointsEndpointOutput {
	return i.ToResolverEndpointsEndpointOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointArgs) ToResolverEndpointsEndpointOutputWithContext(ctx context.Context) ResolverEndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointOutput)
}

// ResolverEndpointsEndpointArrayInput is an input type that accepts ResolverEndpointsEndpointArray and ResolverEndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointArrayInput` via:
//
//	ResolverEndpointsEndpointArray{ ResolverEndpointsEndpointArgs{...} }
type ResolverEndpointsEndpointArrayInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointArrayOutput() ResolverEndpointsEndpointArrayOutput
	ToResolverEndpointsEndpointArrayOutputWithContext(context.Context) ResolverEndpointsEndpointArrayOutput
}

type ResolverEndpointsEndpointArray []ResolverEndpointsEndpointInput

func (ResolverEndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpoint)(nil)).Elem()
}

func (i ResolverEndpointsEndpointArray) ToResolverEndpointsEndpointArrayOutput() ResolverEndpointsEndpointArrayOutput {
	return i.ToResolverEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointArray) ToResolverEndpointsEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointArrayOutput)
}

type ResolverEndpointsEndpointOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpoint)(nil)).Elem()
}

func (o ResolverEndpointsEndpointOutput) ToResolverEndpointsEndpointOutput() ResolverEndpointsEndpointOutput {
	return o
}

func (o ResolverEndpointsEndpointOutput) ToResolverEndpointsEndpointOutputWithContext(ctx context.Context) ResolverEndpointsEndpointOutput {
	return o
}

// The created time of the endpoint.
func (o ResolverEndpointsEndpointOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The direction of the private zone resolver endpoint.
func (o ResolverEndpointsEndpointOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.Direction }).(pulumi.StringOutput)
}

// The endpoint id.
func (o ResolverEndpointsEndpointOutput) EndpointId() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) int { return v.EndpointId }).(pulumi.IntOutput)
}

// The id of the endpoint.
func (o ResolverEndpointsEndpointOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.Id }).(pulumi.StringOutput)
}

// List of IP configurations.
func (o ResolverEndpointsEndpointOutput) IpConfigs() ResolverEndpointsEndpointIpConfigArrayOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) []ResolverEndpointsEndpointIpConfig { return v.IpConfigs }).(ResolverEndpointsEndpointIpConfigArrayOutput)
}

// The name of the private zone resolver endpoint.
func (o ResolverEndpointsEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.Name }).(pulumi.StringOutput)
}

// The security group id of the endpoint.
func (o ResolverEndpointsEndpointOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The status of the private zone resolver endpoint.
func (o ResolverEndpointsEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.Status }).(pulumi.StringOutput)
}

// The updated time of the endpoint.
func (o ResolverEndpointsEndpointOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The vpc ID of the private zone resolver endpoint.
func (o ResolverEndpointsEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.VpcId }).(pulumi.StringOutput)
}

// The vpc region of the endpoint.
func (o ResolverEndpointsEndpointOutput) VpcRegion() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.VpcRegion }).(pulumi.StringOutput)
}

type ResolverEndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpoint)(nil)).Elem()
}

func (o ResolverEndpointsEndpointArrayOutput) ToResolverEndpointsEndpointArrayOutput() ResolverEndpointsEndpointArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointArrayOutput) ToResolverEndpointsEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointArrayOutput) Index(i pulumi.IntInput) ResolverEndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointsEndpoint {
		return vs[0].([]ResolverEndpointsEndpoint)[vs[1].(int)]
	}).(ResolverEndpointsEndpointOutput)
}

type ResolverEndpointsEndpointIpConfig struct {
	// The availability zone id of the endpoint.
	AzId string `pulumi:"azId"`
	// The IP address of the endpoint.
	Ip string `pulumi:"ip"`
	// The subnet id of the endpoint.
	SubnetId string `pulumi:"subnetId"`
}

// ResolverEndpointsEndpointIpConfigInput is an input type that accepts ResolverEndpointsEndpointIpConfigArgs and ResolverEndpointsEndpointIpConfigOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointIpConfigInput` via:
//
//	ResolverEndpointsEndpointIpConfigArgs{...}
type ResolverEndpointsEndpointIpConfigInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointIpConfigOutput() ResolverEndpointsEndpointIpConfigOutput
	ToResolverEndpointsEndpointIpConfigOutputWithContext(context.Context) ResolverEndpointsEndpointIpConfigOutput
}

type ResolverEndpointsEndpointIpConfigArgs struct {
	// The availability zone id of the endpoint.
	AzId pulumi.StringInput `pulumi:"azId"`
	// The IP address of the endpoint.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The subnet id of the endpoint.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (ResolverEndpointsEndpointIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (i ResolverEndpointsEndpointIpConfigArgs) ToResolverEndpointsEndpointIpConfigOutput() ResolverEndpointsEndpointIpConfigOutput {
	return i.ToResolverEndpointsEndpointIpConfigOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointIpConfigArgs) ToResolverEndpointsEndpointIpConfigOutputWithContext(ctx context.Context) ResolverEndpointsEndpointIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointIpConfigOutput)
}

// ResolverEndpointsEndpointIpConfigArrayInput is an input type that accepts ResolverEndpointsEndpointIpConfigArray and ResolverEndpointsEndpointIpConfigArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointIpConfigArrayInput` via:
//
//	ResolverEndpointsEndpointIpConfigArray{ ResolverEndpointsEndpointIpConfigArgs{...} }
type ResolverEndpointsEndpointIpConfigArrayInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointIpConfigArrayOutput() ResolverEndpointsEndpointIpConfigArrayOutput
	ToResolverEndpointsEndpointIpConfigArrayOutputWithContext(context.Context) ResolverEndpointsEndpointIpConfigArrayOutput
}

type ResolverEndpointsEndpointIpConfigArray []ResolverEndpointsEndpointIpConfigInput

func (ResolverEndpointsEndpointIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (i ResolverEndpointsEndpointIpConfigArray) ToResolverEndpointsEndpointIpConfigArrayOutput() ResolverEndpointsEndpointIpConfigArrayOutput {
	return i.ToResolverEndpointsEndpointIpConfigArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointIpConfigArray) ToResolverEndpointsEndpointIpConfigArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointIpConfigArrayOutput)
}

type ResolverEndpointsEndpointIpConfigOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (o ResolverEndpointsEndpointIpConfigOutput) ToResolverEndpointsEndpointIpConfigOutput() ResolverEndpointsEndpointIpConfigOutput {
	return o
}

func (o ResolverEndpointsEndpointIpConfigOutput) ToResolverEndpointsEndpointIpConfigOutputWithContext(ctx context.Context) ResolverEndpointsEndpointIpConfigOutput {
	return o
}

// The availability zone id of the endpoint.
func (o ResolverEndpointsEndpointIpConfigOutput) AzId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpointIpConfig) string { return v.AzId }).(pulumi.StringOutput)
}

// The IP address of the endpoint.
func (o ResolverEndpointsEndpointIpConfigOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpointIpConfig) string { return v.Ip }).(pulumi.StringOutput)
}

// The subnet id of the endpoint.
func (o ResolverEndpointsEndpointIpConfigOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpointIpConfig) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverEndpointsEndpointIpConfigArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (o ResolverEndpointsEndpointIpConfigArrayOutput) ToResolverEndpointsEndpointIpConfigArrayOutput() ResolverEndpointsEndpointIpConfigArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointIpConfigArrayOutput) ToResolverEndpointsEndpointIpConfigArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointIpConfigArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointIpConfigArrayOutput) Index(i pulumi.IntInput) ResolverEndpointsEndpointIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointsEndpointIpConfig {
		return vs[0].([]ResolverEndpointsEndpointIpConfig)[vs[1].(int)]
	}).(ResolverEndpointsEndpointIpConfigOutput)
}

type ResolverRuleForwardIp struct {
	// IP address of the external DNS server. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
	Ip string `pulumi:"ip"`
	// The port of the external DNS server. Default is 53. This parameter is only valid and optional when the Type parameter is OUTBOUND.
	Port *int `pulumi:"port"`
}

// ResolverRuleForwardIpInput is an input type that accepts ResolverRuleForwardIpArgs and ResolverRuleForwardIpOutput values.
// You can construct a concrete instance of `ResolverRuleForwardIpInput` via:
//
//	ResolverRuleForwardIpArgs{...}
type ResolverRuleForwardIpInput interface {
	pulumi.Input

	ToResolverRuleForwardIpOutput() ResolverRuleForwardIpOutput
	ToResolverRuleForwardIpOutputWithContext(context.Context) ResolverRuleForwardIpOutput
}

type ResolverRuleForwardIpArgs struct {
	// IP address of the external DNS server. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port of the external DNS server. Default is 53. This parameter is only valid and optional when the Type parameter is OUTBOUND.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ResolverRuleForwardIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleForwardIp)(nil)).Elem()
}

func (i ResolverRuleForwardIpArgs) ToResolverRuleForwardIpOutput() ResolverRuleForwardIpOutput {
	return i.ToResolverRuleForwardIpOutputWithContext(context.Background())
}

func (i ResolverRuleForwardIpArgs) ToResolverRuleForwardIpOutputWithContext(ctx context.Context) ResolverRuleForwardIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleForwardIpOutput)
}

// ResolverRuleForwardIpArrayInput is an input type that accepts ResolverRuleForwardIpArray and ResolverRuleForwardIpArrayOutput values.
// You can construct a concrete instance of `ResolverRuleForwardIpArrayInput` via:
//
//	ResolverRuleForwardIpArray{ ResolverRuleForwardIpArgs{...} }
type ResolverRuleForwardIpArrayInput interface {
	pulumi.Input

	ToResolverRuleForwardIpArrayOutput() ResolverRuleForwardIpArrayOutput
	ToResolverRuleForwardIpArrayOutputWithContext(context.Context) ResolverRuleForwardIpArrayOutput
}

type ResolverRuleForwardIpArray []ResolverRuleForwardIpInput

func (ResolverRuleForwardIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleForwardIp)(nil)).Elem()
}

func (i ResolverRuleForwardIpArray) ToResolverRuleForwardIpArrayOutput() ResolverRuleForwardIpArrayOutput {
	return i.ToResolverRuleForwardIpArrayOutputWithContext(context.Background())
}

func (i ResolverRuleForwardIpArray) ToResolverRuleForwardIpArrayOutputWithContext(ctx context.Context) ResolverRuleForwardIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleForwardIpArrayOutput)
}

type ResolverRuleForwardIpOutput struct{ *pulumi.OutputState }

func (ResolverRuleForwardIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleForwardIp)(nil)).Elem()
}

func (o ResolverRuleForwardIpOutput) ToResolverRuleForwardIpOutput() ResolverRuleForwardIpOutput {
	return o
}

func (o ResolverRuleForwardIpOutput) ToResolverRuleForwardIpOutputWithContext(ctx context.Context) ResolverRuleForwardIpOutput {
	return o
}

// IP address of the external DNS server. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
func (o ResolverRuleForwardIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleForwardIp) string { return v.Ip }).(pulumi.StringOutput)
}

// The port of the external DNS server. Default is 53. This parameter is only valid and optional when the Type parameter is OUTBOUND.
func (o ResolverRuleForwardIpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResolverRuleForwardIp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ResolverRuleForwardIpArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleForwardIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleForwardIp)(nil)).Elem()
}

func (o ResolverRuleForwardIpArrayOutput) ToResolverRuleForwardIpArrayOutput() ResolverRuleForwardIpArrayOutput {
	return o
}

func (o ResolverRuleForwardIpArrayOutput) ToResolverRuleForwardIpArrayOutputWithContext(ctx context.Context) ResolverRuleForwardIpArrayOutput {
	return o
}

func (o ResolverRuleForwardIpArrayOutput) Index(i pulumi.IntInput) ResolverRuleForwardIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleForwardIp {
		return vs[0].([]ResolverRuleForwardIp)[vs[1].(int)]
	}).(ResolverRuleForwardIpOutput)
}

type ResolverRuleVpc struct {
	// The region of the bind vpc. The default value is the region of the default provider config.
	Region *string `pulumi:"region"`
	// The id of the bind vpc.
	VpcId string `pulumi:"vpcId"`
}

// ResolverRuleVpcInput is an input type that accepts ResolverRuleVpcArgs and ResolverRuleVpcOutput values.
// You can construct a concrete instance of `ResolverRuleVpcInput` via:
//
//	ResolverRuleVpcArgs{...}
type ResolverRuleVpcInput interface {
	pulumi.Input

	ToResolverRuleVpcOutput() ResolverRuleVpcOutput
	ToResolverRuleVpcOutputWithContext(context.Context) ResolverRuleVpcOutput
}

type ResolverRuleVpcArgs struct {
	// The region of the bind vpc. The default value is the region of the default provider config.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The id of the bind vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (ResolverRuleVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleVpc)(nil)).Elem()
}

func (i ResolverRuleVpcArgs) ToResolverRuleVpcOutput() ResolverRuleVpcOutput {
	return i.ToResolverRuleVpcOutputWithContext(context.Background())
}

func (i ResolverRuleVpcArgs) ToResolverRuleVpcOutputWithContext(ctx context.Context) ResolverRuleVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleVpcOutput)
}

// ResolverRuleVpcArrayInput is an input type that accepts ResolverRuleVpcArray and ResolverRuleVpcArrayOutput values.
// You can construct a concrete instance of `ResolverRuleVpcArrayInput` via:
//
//	ResolverRuleVpcArray{ ResolverRuleVpcArgs{...} }
type ResolverRuleVpcArrayInput interface {
	pulumi.Input

	ToResolverRuleVpcArrayOutput() ResolverRuleVpcArrayOutput
	ToResolverRuleVpcArrayOutputWithContext(context.Context) ResolverRuleVpcArrayOutput
}

type ResolverRuleVpcArray []ResolverRuleVpcInput

func (ResolverRuleVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleVpc)(nil)).Elem()
}

func (i ResolverRuleVpcArray) ToResolverRuleVpcArrayOutput() ResolverRuleVpcArrayOutput {
	return i.ToResolverRuleVpcArrayOutputWithContext(context.Background())
}

func (i ResolverRuleVpcArray) ToResolverRuleVpcArrayOutputWithContext(ctx context.Context) ResolverRuleVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleVpcArrayOutput)
}

type ResolverRuleVpcOutput struct{ *pulumi.OutputState }

func (ResolverRuleVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleVpc)(nil)).Elem()
}

func (o ResolverRuleVpcOutput) ToResolverRuleVpcOutput() ResolverRuleVpcOutput {
	return o
}

func (o ResolverRuleVpcOutput) ToResolverRuleVpcOutputWithContext(ctx context.Context) ResolverRuleVpcOutput {
	return o
}

// The region of the bind vpc. The default value is the region of the default provider config.
func (o ResolverRuleVpcOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleVpc) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The id of the bind vpc.
func (o ResolverRuleVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

type ResolverRuleVpcArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleVpc)(nil)).Elem()
}

func (o ResolverRuleVpcArrayOutput) ToResolverRuleVpcArrayOutput() ResolverRuleVpcArrayOutput {
	return o
}

func (o ResolverRuleVpcArrayOutput) ToResolverRuleVpcArrayOutputWithContext(ctx context.Context) ResolverRuleVpcArrayOutput {
	return o
}

func (o ResolverRuleVpcArrayOutput) Index(i pulumi.IntInput) ResolverRuleVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleVpc {
		return vs[0].([]ResolverRuleVpc)[vs[1].(int)]
	}).(ResolverRuleVpcOutput)
}

type ResolverRulesRule struct {
	BindVpcs []ResolverRulesRuleBindVpc `pulumi:"bindVpcs"`
	// The created time of the rule.
	CreatedAt string `pulumi:"createdAt"`
	// ID of the exit terminal node.
	EndpointId int `pulumi:"endpointId"`
	// The IP address and port of the DNS server outside of the VPC.
	ForwardIps []ResolverRulesRuleForwardIp `pulumi:"forwardIps"`
	// The id of the rule.
	Id string `pulumi:"id"`
	// The ISP of the exit IP address of the recursive DNS server.
	Line int `pulumi:"line"`
	// The name of the rule.
	Name string `pulumi:"name"`
	// The id of the rule.
	RuleId int `pulumi:"ruleId"`
	// The type of the rule.
	Type string `pulumi:"type"`
	// The updated time of the rule.
	UpdatedAt string `pulumi:"updatedAt"`
	// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
	ZoneNames []string `pulumi:"zoneNames"`
}

// ResolverRulesRuleInput is an input type that accepts ResolverRulesRuleArgs and ResolverRulesRuleOutput values.
// You can construct a concrete instance of `ResolverRulesRuleInput` via:
//
//	ResolverRulesRuleArgs{...}
type ResolverRulesRuleInput interface {
	pulumi.Input

	ToResolverRulesRuleOutput() ResolverRulesRuleOutput
	ToResolverRulesRuleOutputWithContext(context.Context) ResolverRulesRuleOutput
}

type ResolverRulesRuleArgs struct {
	BindVpcs ResolverRulesRuleBindVpcArrayInput `pulumi:"bindVpcs"`
	// The created time of the rule.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// ID of the exit terminal node.
	EndpointId pulumi.IntInput `pulumi:"endpointId"`
	// The IP address and port of the DNS server outside of the VPC.
	ForwardIps ResolverRulesRuleForwardIpArrayInput `pulumi:"forwardIps"`
	// The id of the rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The ISP of the exit IP address of the recursive DNS server.
	Line pulumi.IntInput `pulumi:"line"`
	// The name of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The id of the rule.
	RuleId pulumi.IntInput `pulumi:"ruleId"`
	// The type of the rule.
	Type pulumi.StringInput `pulumi:"type"`
	// The updated time of the rule.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
	ZoneNames pulumi.StringArrayInput `pulumi:"zoneNames"`
}

func (ResolverRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRule)(nil)).Elem()
}

func (i ResolverRulesRuleArgs) ToResolverRulesRuleOutput() ResolverRulesRuleOutput {
	return i.ToResolverRulesRuleOutputWithContext(context.Background())
}

func (i ResolverRulesRuleArgs) ToResolverRulesRuleOutputWithContext(ctx context.Context) ResolverRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleOutput)
}

// ResolverRulesRuleArrayInput is an input type that accepts ResolverRulesRuleArray and ResolverRulesRuleArrayOutput values.
// You can construct a concrete instance of `ResolverRulesRuleArrayInput` via:
//
//	ResolverRulesRuleArray{ ResolverRulesRuleArgs{...} }
type ResolverRulesRuleArrayInput interface {
	pulumi.Input

	ToResolverRulesRuleArrayOutput() ResolverRulesRuleArrayOutput
	ToResolverRulesRuleArrayOutputWithContext(context.Context) ResolverRulesRuleArrayOutput
}

type ResolverRulesRuleArray []ResolverRulesRuleInput

func (ResolverRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRule)(nil)).Elem()
}

func (i ResolverRulesRuleArray) ToResolverRulesRuleArrayOutput() ResolverRulesRuleArrayOutput {
	return i.ToResolverRulesRuleArrayOutputWithContext(context.Background())
}

func (i ResolverRulesRuleArray) ToResolverRulesRuleArrayOutputWithContext(ctx context.Context) ResolverRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleArrayOutput)
}

type ResolverRulesRuleOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRule)(nil)).Elem()
}

func (o ResolverRulesRuleOutput) ToResolverRulesRuleOutput() ResolverRulesRuleOutput {
	return o
}

func (o ResolverRulesRuleOutput) ToResolverRulesRuleOutputWithContext(ctx context.Context) ResolverRulesRuleOutput {
	return o
}

func (o ResolverRulesRuleOutput) BindVpcs() ResolverRulesRuleBindVpcArrayOutput {
	return o.ApplyT(func(v ResolverRulesRule) []ResolverRulesRuleBindVpc { return v.BindVpcs }).(ResolverRulesRuleBindVpcArrayOutput)
}

// The created time of the rule.
func (o ResolverRulesRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// ID of the exit terminal node.
func (o ResolverRulesRuleOutput) EndpointId() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverRulesRule) int { return v.EndpointId }).(pulumi.IntOutput)
}

// The IP address and port of the DNS server outside of the VPC.
func (o ResolverRulesRuleOutput) ForwardIps() ResolverRulesRuleForwardIpArrayOutput {
	return o.ApplyT(func(v ResolverRulesRule) []ResolverRulesRuleForwardIp { return v.ForwardIps }).(ResolverRulesRuleForwardIpArrayOutput)
}

// The id of the rule.
func (o ResolverRulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// The ISP of the exit IP address of the recursive DNS server.
func (o ResolverRulesRuleOutput) Line() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverRulesRule) int { return v.Line }).(pulumi.IntOutput)
}

// The name of the rule.
func (o ResolverRulesRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.Name }).(pulumi.StringOutput)
}

// The id of the rule.
func (o ResolverRulesRuleOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverRulesRule) int { return v.RuleId }).(pulumi.IntOutput)
}

// The type of the rule.
func (o ResolverRulesRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.Type }).(pulumi.StringOutput)
}

// The updated time of the rule.
func (o ResolverRulesRuleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
func (o ResolverRulesRuleOutput) ZoneNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResolverRulesRule) []string { return v.ZoneNames }).(pulumi.StringArrayOutput)
}

type ResolverRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRule)(nil)).Elem()
}

func (o ResolverRulesRuleArrayOutput) ToResolverRulesRuleArrayOutput() ResolverRulesRuleArrayOutput {
	return o
}

func (o ResolverRulesRuleArrayOutput) ToResolverRulesRuleArrayOutputWithContext(ctx context.Context) ResolverRulesRuleArrayOutput {
	return o
}

func (o ResolverRulesRuleArrayOutput) Index(i pulumi.IntInput) ResolverRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRulesRule {
		return vs[0].([]ResolverRulesRule)[vs[1].(int)]
	}).(ResolverRulesRuleOutput)
}

type ResolverRulesRuleBindVpc struct {
	// The account id of the bind vpc.
	AccountId string `pulumi:"accountId"`
	// The id of the rule.
	Id string `pulumi:"id"`
	// The region of the bind vpc.
	Region string `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName string `pulumi:"regionName"`
}

// ResolverRulesRuleBindVpcInput is an input type that accepts ResolverRulesRuleBindVpcArgs and ResolverRulesRuleBindVpcOutput values.
// You can construct a concrete instance of `ResolverRulesRuleBindVpcInput` via:
//
//	ResolverRulesRuleBindVpcArgs{...}
type ResolverRulesRuleBindVpcInput interface {
	pulumi.Input

	ToResolverRulesRuleBindVpcOutput() ResolverRulesRuleBindVpcOutput
	ToResolverRulesRuleBindVpcOutputWithContext(context.Context) ResolverRulesRuleBindVpcOutput
}

type ResolverRulesRuleBindVpcArgs struct {
	// The account id of the bind vpc.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The id of the rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The region of the bind vpc.
	Region pulumi.StringInput `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (ResolverRulesRuleBindVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleBindVpc)(nil)).Elem()
}

func (i ResolverRulesRuleBindVpcArgs) ToResolverRulesRuleBindVpcOutput() ResolverRulesRuleBindVpcOutput {
	return i.ToResolverRulesRuleBindVpcOutputWithContext(context.Background())
}

func (i ResolverRulesRuleBindVpcArgs) ToResolverRulesRuleBindVpcOutputWithContext(ctx context.Context) ResolverRulesRuleBindVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleBindVpcOutput)
}

// ResolverRulesRuleBindVpcArrayInput is an input type that accepts ResolverRulesRuleBindVpcArray and ResolverRulesRuleBindVpcArrayOutput values.
// You can construct a concrete instance of `ResolverRulesRuleBindVpcArrayInput` via:
//
//	ResolverRulesRuleBindVpcArray{ ResolverRulesRuleBindVpcArgs{...} }
type ResolverRulesRuleBindVpcArrayInput interface {
	pulumi.Input

	ToResolverRulesRuleBindVpcArrayOutput() ResolverRulesRuleBindVpcArrayOutput
	ToResolverRulesRuleBindVpcArrayOutputWithContext(context.Context) ResolverRulesRuleBindVpcArrayOutput
}

type ResolverRulesRuleBindVpcArray []ResolverRulesRuleBindVpcInput

func (ResolverRulesRuleBindVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleBindVpc)(nil)).Elem()
}

func (i ResolverRulesRuleBindVpcArray) ToResolverRulesRuleBindVpcArrayOutput() ResolverRulesRuleBindVpcArrayOutput {
	return i.ToResolverRulesRuleBindVpcArrayOutputWithContext(context.Background())
}

func (i ResolverRulesRuleBindVpcArray) ToResolverRulesRuleBindVpcArrayOutputWithContext(ctx context.Context) ResolverRulesRuleBindVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleBindVpcArrayOutput)
}

type ResolverRulesRuleBindVpcOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleBindVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleBindVpc)(nil)).Elem()
}

func (o ResolverRulesRuleBindVpcOutput) ToResolverRulesRuleBindVpcOutput() ResolverRulesRuleBindVpcOutput {
	return o
}

func (o ResolverRulesRuleBindVpcOutput) ToResolverRulesRuleBindVpcOutputWithContext(ctx context.Context) ResolverRulesRuleBindVpcOutput {
	return o
}

// The account id of the bind vpc.
func (o ResolverRulesRuleBindVpcOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleBindVpc) string { return v.AccountId }).(pulumi.StringOutput)
}

// The id of the rule.
func (o ResolverRulesRuleBindVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleBindVpc) string { return v.Id }).(pulumi.StringOutput)
}

// The region of the bind vpc.
func (o ResolverRulesRuleBindVpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleBindVpc) string { return v.Region }).(pulumi.StringOutput)
}

// The region name of the bind vpc.
func (o ResolverRulesRuleBindVpcOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleBindVpc) string { return v.RegionName }).(pulumi.StringOutput)
}

type ResolverRulesRuleBindVpcArrayOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleBindVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleBindVpc)(nil)).Elem()
}

func (o ResolverRulesRuleBindVpcArrayOutput) ToResolverRulesRuleBindVpcArrayOutput() ResolverRulesRuleBindVpcArrayOutput {
	return o
}

func (o ResolverRulesRuleBindVpcArrayOutput) ToResolverRulesRuleBindVpcArrayOutputWithContext(ctx context.Context) ResolverRulesRuleBindVpcArrayOutput {
	return o
}

func (o ResolverRulesRuleBindVpcArrayOutput) Index(i pulumi.IntInput) ResolverRulesRuleBindVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRulesRuleBindVpc {
		return vs[0].([]ResolverRulesRuleBindVpc)[vs[1].(int)]
	}).(ResolverRulesRuleBindVpcOutput)
}

type ResolverRulesRuleForwardIp struct {
	// The IP address of the DNS server outside of the VPC.
	Ip string `pulumi:"ip"`
	// The port of the DNS server outside of the VPC.
	Port int `pulumi:"port"`
}

// ResolverRulesRuleForwardIpInput is an input type that accepts ResolverRulesRuleForwardIpArgs and ResolverRulesRuleForwardIpOutput values.
// You can construct a concrete instance of `ResolverRulesRuleForwardIpInput` via:
//
//	ResolverRulesRuleForwardIpArgs{...}
type ResolverRulesRuleForwardIpInput interface {
	pulumi.Input

	ToResolverRulesRuleForwardIpOutput() ResolverRulesRuleForwardIpOutput
	ToResolverRulesRuleForwardIpOutputWithContext(context.Context) ResolverRulesRuleForwardIpOutput
}

type ResolverRulesRuleForwardIpArgs struct {
	// The IP address of the DNS server outside of the VPC.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port of the DNS server outside of the VPC.
	Port pulumi.IntInput `pulumi:"port"`
}

func (ResolverRulesRuleForwardIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleForwardIp)(nil)).Elem()
}

func (i ResolverRulesRuleForwardIpArgs) ToResolverRulesRuleForwardIpOutput() ResolverRulesRuleForwardIpOutput {
	return i.ToResolverRulesRuleForwardIpOutputWithContext(context.Background())
}

func (i ResolverRulesRuleForwardIpArgs) ToResolverRulesRuleForwardIpOutputWithContext(ctx context.Context) ResolverRulesRuleForwardIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleForwardIpOutput)
}

// ResolverRulesRuleForwardIpArrayInput is an input type that accepts ResolverRulesRuleForwardIpArray and ResolverRulesRuleForwardIpArrayOutput values.
// You can construct a concrete instance of `ResolverRulesRuleForwardIpArrayInput` via:
//
//	ResolverRulesRuleForwardIpArray{ ResolverRulesRuleForwardIpArgs{...} }
type ResolverRulesRuleForwardIpArrayInput interface {
	pulumi.Input

	ToResolverRulesRuleForwardIpArrayOutput() ResolverRulesRuleForwardIpArrayOutput
	ToResolverRulesRuleForwardIpArrayOutputWithContext(context.Context) ResolverRulesRuleForwardIpArrayOutput
}

type ResolverRulesRuleForwardIpArray []ResolverRulesRuleForwardIpInput

func (ResolverRulesRuleForwardIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleForwardIp)(nil)).Elem()
}

func (i ResolverRulesRuleForwardIpArray) ToResolverRulesRuleForwardIpArrayOutput() ResolverRulesRuleForwardIpArrayOutput {
	return i.ToResolverRulesRuleForwardIpArrayOutputWithContext(context.Background())
}

func (i ResolverRulesRuleForwardIpArray) ToResolverRulesRuleForwardIpArrayOutputWithContext(ctx context.Context) ResolverRulesRuleForwardIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleForwardIpArrayOutput)
}

type ResolverRulesRuleForwardIpOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleForwardIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleForwardIp)(nil)).Elem()
}

func (o ResolverRulesRuleForwardIpOutput) ToResolverRulesRuleForwardIpOutput() ResolverRulesRuleForwardIpOutput {
	return o
}

func (o ResolverRulesRuleForwardIpOutput) ToResolverRulesRuleForwardIpOutputWithContext(ctx context.Context) ResolverRulesRuleForwardIpOutput {
	return o
}

// The IP address of the DNS server outside of the VPC.
func (o ResolverRulesRuleForwardIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleForwardIp) string { return v.Ip }).(pulumi.StringOutput)
}

// The port of the DNS server outside of the VPC.
func (o ResolverRulesRuleForwardIpOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverRulesRuleForwardIp) int { return v.Port }).(pulumi.IntOutput)
}

type ResolverRulesRuleForwardIpArrayOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleForwardIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleForwardIp)(nil)).Elem()
}

func (o ResolverRulesRuleForwardIpArrayOutput) ToResolverRulesRuleForwardIpArrayOutput() ResolverRulesRuleForwardIpArrayOutput {
	return o
}

func (o ResolverRulesRuleForwardIpArrayOutput) ToResolverRulesRuleForwardIpArrayOutputWithContext(ctx context.Context) ResolverRulesRuleForwardIpArrayOutput {
	return o
}

func (o ResolverRulesRuleForwardIpArrayOutput) Index(i pulumi.IntInput) ResolverRulesRuleForwardIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRulesRuleForwardIp {
		return vs[0].([]ResolverRulesRuleForwardIp)[vs[1].(int)]
	}).(ResolverRulesRuleForwardIpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZoneVpcInput)(nil)).Elem(), PrivateZoneVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZoneVpcArrayInput)(nil)).Elem(), PrivateZoneVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneInput)(nil)).Elem(), PrivateZonesPrivateZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneArrayInput)(nil)).Elem(), PrivateZonesPrivateZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneBindVpcInput)(nil)).Elem(), PrivateZonesPrivateZoneBindVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneBindVpcArrayInput)(nil)).Elem(), PrivateZonesPrivateZoneBindVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordSetsRecordSetInput)(nil)).Elem(), RecordSetsRecordSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordSetsRecordSetArrayInput)(nil)).Elem(), RecordSetsRecordSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsRecordInput)(nil)).Elem(), RecordsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsRecordArrayInput)(nil)).Elem(), RecordsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpConfigInput)(nil)).Elem(), ResolverEndpointIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpConfigArrayInput)(nil)).Elem(), ResolverEndpointIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointInput)(nil)).Elem(), ResolverEndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointArrayInput)(nil)).Elem(), ResolverEndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointIpConfigInput)(nil)).Elem(), ResolverEndpointsEndpointIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointIpConfigArrayInput)(nil)).Elem(), ResolverEndpointsEndpointIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleForwardIpInput)(nil)).Elem(), ResolverRuleForwardIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleForwardIpArrayInput)(nil)).Elem(), ResolverRuleForwardIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleVpcInput)(nil)).Elem(), ResolverRuleVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleVpcArrayInput)(nil)).Elem(), ResolverRuleVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleInput)(nil)).Elem(), ResolverRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleArrayInput)(nil)).Elem(), ResolverRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleBindVpcInput)(nil)).Elem(), ResolverRulesRuleBindVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleBindVpcArrayInput)(nil)).Elem(), ResolverRulesRuleBindVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleForwardIpInput)(nil)).Elem(), ResolverRulesRuleForwardIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleForwardIpArrayInput)(nil)).Elem(), ResolverRulesRuleForwardIpArray{})
	pulumi.RegisterOutputType(PrivateZoneVpcOutput{})
	pulumi.RegisterOutputType(PrivateZoneVpcArrayOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneArrayOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneBindVpcOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneBindVpcArrayOutput{})
	pulumi.RegisterOutputType(RecordSetsRecordSetOutput{})
	pulumi.RegisterOutputType(RecordSetsRecordSetArrayOutput{})
	pulumi.RegisterOutputType(RecordsRecordOutput{})
	pulumi.RegisterOutputType(RecordsRecordArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpConfigOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpConfigArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointIpConfigOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointIpConfigArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleForwardIpOutput{})
	pulumi.RegisterOutputType(ResolverRuleForwardIpArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleVpcOutput{})
	pulumi.RegisterOutputType(ResolverRuleVpcArrayOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleBindVpcOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleBindVpcArrayOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleForwardIpOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleForwardIpArrayOutput{})
}
