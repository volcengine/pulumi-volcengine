// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package private_zone

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type PrivateZoneTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// PrivateZoneTagInput is an input type that accepts PrivateZoneTagArgs and PrivateZoneTagOutput values.
// You can construct a concrete instance of `PrivateZoneTagInput` via:
//
//	PrivateZoneTagArgs{...}
type PrivateZoneTagInput interface {
	pulumi.Input

	ToPrivateZoneTagOutput() PrivateZoneTagOutput
	ToPrivateZoneTagOutputWithContext(context.Context) PrivateZoneTagOutput
}

type PrivateZoneTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (PrivateZoneTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZoneTag)(nil)).Elem()
}

func (i PrivateZoneTagArgs) ToPrivateZoneTagOutput() PrivateZoneTagOutput {
	return i.ToPrivateZoneTagOutputWithContext(context.Background())
}

func (i PrivateZoneTagArgs) ToPrivateZoneTagOutputWithContext(ctx context.Context) PrivateZoneTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZoneTagOutput)
}

// PrivateZoneTagArrayInput is an input type that accepts PrivateZoneTagArray and PrivateZoneTagArrayOutput values.
// You can construct a concrete instance of `PrivateZoneTagArrayInput` via:
//
//	PrivateZoneTagArray{ PrivateZoneTagArgs{...} }
type PrivateZoneTagArrayInput interface {
	pulumi.Input

	ToPrivateZoneTagArrayOutput() PrivateZoneTagArrayOutput
	ToPrivateZoneTagArrayOutputWithContext(context.Context) PrivateZoneTagArrayOutput
}

type PrivateZoneTagArray []PrivateZoneTagInput

func (PrivateZoneTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZoneTag)(nil)).Elem()
}

func (i PrivateZoneTagArray) ToPrivateZoneTagArrayOutput() PrivateZoneTagArrayOutput {
	return i.ToPrivateZoneTagArrayOutputWithContext(context.Background())
}

func (i PrivateZoneTagArray) ToPrivateZoneTagArrayOutputWithContext(ctx context.Context) PrivateZoneTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZoneTagArrayOutput)
}

type PrivateZoneTagOutput struct{ *pulumi.OutputState }

func (PrivateZoneTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZoneTag)(nil)).Elem()
}

func (o PrivateZoneTagOutput) ToPrivateZoneTagOutput() PrivateZoneTagOutput {
	return o
}

func (o PrivateZoneTagOutput) ToPrivateZoneTagOutputWithContext(ctx context.Context) PrivateZoneTagOutput {
	return o
}

// The Key of Tags.
func (o PrivateZoneTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZoneTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o PrivateZoneTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZoneTag) string { return v.Value }).(pulumi.StringOutput)
}

type PrivateZoneTagArrayOutput struct{ *pulumi.OutputState }

func (PrivateZoneTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZoneTag)(nil)).Elem()
}

func (o PrivateZoneTagArrayOutput) ToPrivateZoneTagArrayOutput() PrivateZoneTagArrayOutput {
	return o
}

func (o PrivateZoneTagArrayOutput) ToPrivateZoneTagArrayOutputWithContext(ctx context.Context) PrivateZoneTagArrayOutput {
	return o
}

func (o PrivateZoneTagArrayOutput) Index(i pulumi.IntInput) PrivateZoneTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateZoneTag {
		return vs[0].([]PrivateZoneTag)[vs[1].(int)]
	}).(PrivateZoneTagOutput)
}

type PrivateZoneVpc struct {
	// The region of the bind vpc. The default value is the region of the default provider config.
	Region *string `pulumi:"region"`
	// The id of the bind vpc.
	VpcId string `pulumi:"vpcId"`
}

// PrivateZoneVpcInput is an input type that accepts PrivateZoneVpcArgs and PrivateZoneVpcOutput values.
// You can construct a concrete instance of `PrivateZoneVpcInput` via:
//
//	PrivateZoneVpcArgs{...}
type PrivateZoneVpcInput interface {
	pulumi.Input

	ToPrivateZoneVpcOutput() PrivateZoneVpcOutput
	ToPrivateZoneVpcOutputWithContext(context.Context) PrivateZoneVpcOutput
}

type PrivateZoneVpcArgs struct {
	// The region of the bind vpc. The default value is the region of the default provider config.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The id of the bind vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (PrivateZoneVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZoneVpc)(nil)).Elem()
}

func (i PrivateZoneVpcArgs) ToPrivateZoneVpcOutput() PrivateZoneVpcOutput {
	return i.ToPrivateZoneVpcOutputWithContext(context.Background())
}

func (i PrivateZoneVpcArgs) ToPrivateZoneVpcOutputWithContext(ctx context.Context) PrivateZoneVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZoneVpcOutput)
}

// PrivateZoneVpcArrayInput is an input type that accepts PrivateZoneVpcArray and PrivateZoneVpcArrayOutput values.
// You can construct a concrete instance of `PrivateZoneVpcArrayInput` via:
//
//	PrivateZoneVpcArray{ PrivateZoneVpcArgs{...} }
type PrivateZoneVpcArrayInput interface {
	pulumi.Input

	ToPrivateZoneVpcArrayOutput() PrivateZoneVpcArrayOutput
	ToPrivateZoneVpcArrayOutputWithContext(context.Context) PrivateZoneVpcArrayOutput
}

type PrivateZoneVpcArray []PrivateZoneVpcInput

func (PrivateZoneVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZoneVpc)(nil)).Elem()
}

func (i PrivateZoneVpcArray) ToPrivateZoneVpcArrayOutput() PrivateZoneVpcArrayOutput {
	return i.ToPrivateZoneVpcArrayOutputWithContext(context.Background())
}

func (i PrivateZoneVpcArray) ToPrivateZoneVpcArrayOutputWithContext(ctx context.Context) PrivateZoneVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZoneVpcArrayOutput)
}

type PrivateZoneVpcOutput struct{ *pulumi.OutputState }

func (PrivateZoneVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZoneVpc)(nil)).Elem()
}

func (o PrivateZoneVpcOutput) ToPrivateZoneVpcOutput() PrivateZoneVpcOutput {
	return o
}

func (o PrivateZoneVpcOutput) ToPrivateZoneVpcOutputWithContext(ctx context.Context) PrivateZoneVpcOutput {
	return o
}

// The region of the bind vpc. The default value is the region of the default provider config.
func (o PrivateZoneVpcOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateZoneVpc) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The id of the bind vpc.
func (o PrivateZoneVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZoneVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

type PrivateZoneVpcArrayOutput struct{ *pulumi.OutputState }

func (PrivateZoneVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZoneVpc)(nil)).Elem()
}

func (o PrivateZoneVpcArrayOutput) ToPrivateZoneVpcArrayOutput() PrivateZoneVpcArrayOutput {
	return o
}

func (o PrivateZoneVpcArrayOutput) ToPrivateZoneVpcArrayOutputWithContext(ctx context.Context) PrivateZoneVpcArrayOutput {
	return o
}

func (o PrivateZoneVpcArrayOutput) Index(i pulumi.IntInput) PrivateZoneVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateZoneVpc {
		return vs[0].([]PrivateZoneVpc)[vs[1].(int)]
	}).(PrivateZoneVpcOutput)
}

type PrivateZonesPrivateZone struct {
	// The Bind vpc info of the private zone.
	BindVpcs []PrivateZonesPrivateZoneBindVpc `pulumi:"bindVpcs"`
	// The created time of the private zone.
	CreatedAt string `pulumi:"createdAt"`
	// The id of the private zone.
	Id string `pulumi:"id"`
	// The account id of the last operator who created the private zone.
	LastOperator string `pulumi:"lastOperator"`
	// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
	LineMode int `pulumi:"lineMode"`
	// The project name of the private zone.
	ProjectName string `pulumi:"projectName"`
	// The record count of the private zone.
	RecordCount int `pulumi:"recordCount"`
	// Whether the recursion mode of Private Zone is enabled.
	RecursionMode bool `pulumi:"recursionMode"`
	// The region of Private Zone.
	Regions []string `pulumi:"regions"`
	// The remark of the private zone.
	Remark string `pulumi:"remark"`
	// Tags.
	Tags []PrivateZonesPrivateZoneTag `pulumi:"tags"`
	// The updated time of the private zone.
	UpdatedAt string `pulumi:"updatedAt"`
	// The zid of Private Zone.
	Zid int `pulumi:"zid"`
	// The name of Private Zone.
	ZoneName string `pulumi:"zoneName"`
}

// PrivateZonesPrivateZoneInput is an input type that accepts PrivateZonesPrivateZoneArgs and PrivateZonesPrivateZoneOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneInput` via:
//
//	PrivateZonesPrivateZoneArgs{...}
type PrivateZonesPrivateZoneInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneOutput() PrivateZonesPrivateZoneOutput
	ToPrivateZonesPrivateZoneOutputWithContext(context.Context) PrivateZonesPrivateZoneOutput
}

type PrivateZonesPrivateZoneArgs struct {
	// The Bind vpc info of the private zone.
	BindVpcs PrivateZonesPrivateZoneBindVpcArrayInput `pulumi:"bindVpcs"`
	// The created time of the private zone.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The id of the private zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The account id of the last operator who created the private zone.
	LastOperator pulumi.StringInput `pulumi:"lastOperator"`
	// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
	LineMode pulumi.IntInput `pulumi:"lineMode"`
	// The project name of the private zone.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The record count of the private zone.
	RecordCount pulumi.IntInput `pulumi:"recordCount"`
	// Whether the recursion mode of Private Zone is enabled.
	RecursionMode pulumi.BoolInput `pulumi:"recursionMode"`
	// The region of Private Zone.
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// The remark of the private zone.
	Remark pulumi.StringInput `pulumi:"remark"`
	// Tags.
	Tags PrivateZonesPrivateZoneTagArrayInput `pulumi:"tags"`
	// The updated time of the private zone.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The zid of Private Zone.
	Zid pulumi.IntInput `pulumi:"zid"`
	// The name of Private Zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (PrivateZonesPrivateZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZone)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneArgs) ToPrivateZonesPrivateZoneOutput() PrivateZonesPrivateZoneOutput {
	return i.ToPrivateZonesPrivateZoneOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneArgs) ToPrivateZonesPrivateZoneOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneOutput)
}

// PrivateZonesPrivateZoneArrayInput is an input type that accepts PrivateZonesPrivateZoneArray and PrivateZonesPrivateZoneArrayOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneArrayInput` via:
//
//	PrivateZonesPrivateZoneArray{ PrivateZonesPrivateZoneArgs{...} }
type PrivateZonesPrivateZoneArrayInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneArrayOutput() PrivateZonesPrivateZoneArrayOutput
	ToPrivateZonesPrivateZoneArrayOutputWithContext(context.Context) PrivateZonesPrivateZoneArrayOutput
}

type PrivateZonesPrivateZoneArray []PrivateZonesPrivateZoneInput

func (PrivateZonesPrivateZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZone)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneArray) ToPrivateZonesPrivateZoneArrayOutput() PrivateZonesPrivateZoneArrayOutput {
	return i.ToPrivateZonesPrivateZoneArrayOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneArray) ToPrivateZonesPrivateZoneArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneArrayOutput)
}

type PrivateZonesPrivateZoneOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZone)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneOutput) ToPrivateZonesPrivateZoneOutput() PrivateZonesPrivateZoneOutput {
	return o
}

func (o PrivateZonesPrivateZoneOutput) ToPrivateZonesPrivateZoneOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneOutput {
	return o
}

// The Bind vpc info of the private zone.
func (o PrivateZonesPrivateZoneOutput) BindVpcs() PrivateZonesPrivateZoneBindVpcArrayOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) []PrivateZonesPrivateZoneBindVpc { return v.BindVpcs }).(PrivateZonesPrivateZoneBindVpcArrayOutput)
}

// The created time of the private zone.
func (o PrivateZonesPrivateZoneOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The id of the private zone.
func (o PrivateZonesPrivateZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.Id }).(pulumi.StringOutput)
}

// The account id of the last operator who created the private zone.
func (o PrivateZonesPrivateZoneOutput) LastOperator() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.LastOperator }).(pulumi.StringOutput)
}

// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
func (o PrivateZonesPrivateZoneOutput) LineMode() pulumi.IntOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) int { return v.LineMode }).(pulumi.IntOutput)
}

// The project name of the private zone.
func (o PrivateZonesPrivateZoneOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The record count of the private zone.
func (o PrivateZonesPrivateZoneOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) int { return v.RecordCount }).(pulumi.IntOutput)
}

// Whether the recursion mode of Private Zone is enabled.
func (o PrivateZonesPrivateZoneOutput) RecursionMode() pulumi.BoolOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) bool { return v.RecursionMode }).(pulumi.BoolOutput)
}

// The region of Private Zone.
func (o PrivateZonesPrivateZoneOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// The remark of the private zone.
func (o PrivateZonesPrivateZoneOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.Remark }).(pulumi.StringOutput)
}

// Tags.
func (o PrivateZonesPrivateZoneOutput) Tags() PrivateZonesPrivateZoneTagArrayOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) []PrivateZonesPrivateZoneTag { return v.Tags }).(PrivateZonesPrivateZoneTagArrayOutput)
}

// The updated time of the private zone.
func (o PrivateZonesPrivateZoneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The zid of Private Zone.
func (o PrivateZonesPrivateZoneOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) int { return v.Zid }).(pulumi.IntOutput)
}

// The name of Private Zone.
func (o PrivateZonesPrivateZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type PrivateZonesPrivateZoneArrayOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZone)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneArrayOutput) ToPrivateZonesPrivateZoneArrayOutput() PrivateZonesPrivateZoneArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneArrayOutput) ToPrivateZonesPrivateZoneArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneArrayOutput) Index(i pulumi.IntInput) PrivateZonesPrivateZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateZonesPrivateZone {
		return vs[0].([]PrivateZonesPrivateZone)[vs[1].(int)]
	}).(PrivateZonesPrivateZoneOutput)
}

type PrivateZonesPrivateZoneBindVpc struct {
	// The account id of the bind vpc.
	AccountId string `pulumi:"accountId"`
	// The id of the private zone.
	Id string `pulumi:"id"`
	// The region of Private Zone.
	Region string `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName string `pulumi:"regionName"`
}

// PrivateZonesPrivateZoneBindVpcInput is an input type that accepts PrivateZonesPrivateZoneBindVpcArgs and PrivateZonesPrivateZoneBindVpcOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneBindVpcInput` via:
//
//	PrivateZonesPrivateZoneBindVpcArgs{...}
type PrivateZonesPrivateZoneBindVpcInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneBindVpcOutput() PrivateZonesPrivateZoneBindVpcOutput
	ToPrivateZonesPrivateZoneBindVpcOutputWithContext(context.Context) PrivateZonesPrivateZoneBindVpcOutput
}

type PrivateZonesPrivateZoneBindVpcArgs struct {
	// The account id of the bind vpc.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The id of the private zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The region of Private Zone.
	Region pulumi.StringInput `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (PrivateZonesPrivateZoneBindVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneBindVpcArgs) ToPrivateZonesPrivateZoneBindVpcOutput() PrivateZonesPrivateZoneBindVpcOutput {
	return i.ToPrivateZonesPrivateZoneBindVpcOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneBindVpcArgs) ToPrivateZonesPrivateZoneBindVpcOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneBindVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneBindVpcOutput)
}

// PrivateZonesPrivateZoneBindVpcArrayInput is an input type that accepts PrivateZonesPrivateZoneBindVpcArray and PrivateZonesPrivateZoneBindVpcArrayOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneBindVpcArrayInput` via:
//
//	PrivateZonesPrivateZoneBindVpcArray{ PrivateZonesPrivateZoneBindVpcArgs{...} }
type PrivateZonesPrivateZoneBindVpcArrayInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneBindVpcArrayOutput() PrivateZonesPrivateZoneBindVpcArrayOutput
	ToPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(context.Context) PrivateZonesPrivateZoneBindVpcArrayOutput
}

type PrivateZonesPrivateZoneBindVpcArray []PrivateZonesPrivateZoneBindVpcInput

func (PrivateZonesPrivateZoneBindVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneBindVpcArray) ToPrivateZonesPrivateZoneBindVpcArrayOutput() PrivateZonesPrivateZoneBindVpcArrayOutput {
	return i.ToPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneBindVpcArray) ToPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneBindVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneBindVpcArrayOutput)
}

type PrivateZonesPrivateZoneBindVpcOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneBindVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneBindVpcOutput) ToPrivateZonesPrivateZoneBindVpcOutput() PrivateZonesPrivateZoneBindVpcOutput {
	return o
}

func (o PrivateZonesPrivateZoneBindVpcOutput) ToPrivateZonesPrivateZoneBindVpcOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneBindVpcOutput {
	return o
}

// The account id of the bind vpc.
func (o PrivateZonesPrivateZoneBindVpcOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneBindVpc) string { return v.AccountId }).(pulumi.StringOutput)
}

// The id of the private zone.
func (o PrivateZonesPrivateZoneBindVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneBindVpc) string { return v.Id }).(pulumi.StringOutput)
}

// The region of Private Zone.
func (o PrivateZonesPrivateZoneBindVpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneBindVpc) string { return v.Region }).(pulumi.StringOutput)
}

// The region name of the bind vpc.
func (o PrivateZonesPrivateZoneBindVpcOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneBindVpc) string { return v.RegionName }).(pulumi.StringOutput)
}

type PrivateZonesPrivateZoneBindVpcArrayOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneBindVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneBindVpcArrayOutput) ToPrivateZonesPrivateZoneBindVpcArrayOutput() PrivateZonesPrivateZoneBindVpcArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneBindVpcArrayOutput) ToPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneBindVpcArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneBindVpcArrayOutput) Index(i pulumi.IntInput) PrivateZonesPrivateZoneBindVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateZonesPrivateZoneBindVpc {
		return vs[0].([]PrivateZonesPrivateZoneBindVpc)[vs[1].(int)]
	}).(PrivateZonesPrivateZoneBindVpcOutput)
}

type PrivateZonesPrivateZoneTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// PrivateZonesPrivateZoneTagInput is an input type that accepts PrivateZonesPrivateZoneTagArgs and PrivateZonesPrivateZoneTagOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneTagInput` via:
//
//	PrivateZonesPrivateZoneTagArgs{...}
type PrivateZonesPrivateZoneTagInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneTagOutput() PrivateZonesPrivateZoneTagOutput
	ToPrivateZonesPrivateZoneTagOutputWithContext(context.Context) PrivateZonesPrivateZoneTagOutput
}

type PrivateZonesPrivateZoneTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (PrivateZonesPrivateZoneTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZoneTag)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneTagArgs) ToPrivateZonesPrivateZoneTagOutput() PrivateZonesPrivateZoneTagOutput {
	return i.ToPrivateZonesPrivateZoneTagOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneTagArgs) ToPrivateZonesPrivateZoneTagOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneTagOutput)
}

// PrivateZonesPrivateZoneTagArrayInput is an input type that accepts PrivateZonesPrivateZoneTagArray and PrivateZonesPrivateZoneTagArrayOutput values.
// You can construct a concrete instance of `PrivateZonesPrivateZoneTagArrayInput` via:
//
//	PrivateZonesPrivateZoneTagArray{ PrivateZonesPrivateZoneTagArgs{...} }
type PrivateZonesPrivateZoneTagArrayInput interface {
	pulumi.Input

	ToPrivateZonesPrivateZoneTagArrayOutput() PrivateZonesPrivateZoneTagArrayOutput
	ToPrivateZonesPrivateZoneTagArrayOutputWithContext(context.Context) PrivateZonesPrivateZoneTagArrayOutput
}

type PrivateZonesPrivateZoneTagArray []PrivateZonesPrivateZoneTagInput

func (PrivateZonesPrivateZoneTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZoneTag)(nil)).Elem()
}

func (i PrivateZonesPrivateZoneTagArray) ToPrivateZonesPrivateZoneTagArrayOutput() PrivateZonesPrivateZoneTagArrayOutput {
	return i.ToPrivateZonesPrivateZoneTagArrayOutputWithContext(context.Background())
}

func (i PrivateZonesPrivateZoneTagArray) ToPrivateZonesPrivateZoneTagArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesPrivateZoneTagArrayOutput)
}

type PrivateZonesPrivateZoneTagOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesPrivateZoneTag)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneTagOutput) ToPrivateZonesPrivateZoneTagOutput() PrivateZonesPrivateZoneTagOutput {
	return o
}

func (o PrivateZonesPrivateZoneTagOutput) ToPrivateZonesPrivateZoneTagOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneTagOutput {
	return o
}

// The Key of Tags.
func (o PrivateZonesPrivateZoneTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o PrivateZonesPrivateZoneTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v PrivateZonesPrivateZoneTag) string { return v.Value }).(pulumi.StringOutput)
}

type PrivateZonesPrivateZoneTagArrayOutput struct{ *pulumi.OutputState }

func (PrivateZonesPrivateZoneTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesPrivateZoneTag)(nil)).Elem()
}

func (o PrivateZonesPrivateZoneTagArrayOutput) ToPrivateZonesPrivateZoneTagArrayOutput() PrivateZonesPrivateZoneTagArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneTagArrayOutput) ToPrivateZonesPrivateZoneTagArrayOutputWithContext(ctx context.Context) PrivateZonesPrivateZoneTagArrayOutput {
	return o
}

func (o PrivateZonesPrivateZoneTagArrayOutput) Index(i pulumi.IntInput) PrivateZonesPrivateZoneTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateZonesPrivateZoneTag {
		return vs[0].([]PrivateZonesPrivateZoneTag)[vs[1].(int)]
	}).(PrivateZonesPrivateZoneTagOutput)
}

type PrivateZonesTagFilter struct {
	// The key of the tag.
	Key *string `pulumi:"key"`
	// The values of the tag.
	Values []string `pulumi:"values"`
}

// PrivateZonesTagFilterInput is an input type that accepts PrivateZonesTagFilterArgs and PrivateZonesTagFilterOutput values.
// You can construct a concrete instance of `PrivateZonesTagFilterInput` via:
//
//	PrivateZonesTagFilterArgs{...}
type PrivateZonesTagFilterInput interface {
	pulumi.Input

	ToPrivateZonesTagFilterOutput() PrivateZonesTagFilterOutput
	ToPrivateZonesTagFilterOutputWithContext(context.Context) PrivateZonesTagFilterOutput
}

type PrivateZonesTagFilterArgs struct {
	// The key of the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The values of the tag.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (PrivateZonesTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesTagFilter)(nil)).Elem()
}

func (i PrivateZonesTagFilterArgs) ToPrivateZonesTagFilterOutput() PrivateZonesTagFilterOutput {
	return i.ToPrivateZonesTagFilterOutputWithContext(context.Background())
}

func (i PrivateZonesTagFilterArgs) ToPrivateZonesTagFilterOutputWithContext(ctx context.Context) PrivateZonesTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesTagFilterOutput)
}

// PrivateZonesTagFilterArrayInput is an input type that accepts PrivateZonesTagFilterArray and PrivateZonesTagFilterArrayOutput values.
// You can construct a concrete instance of `PrivateZonesTagFilterArrayInput` via:
//
//	PrivateZonesTagFilterArray{ PrivateZonesTagFilterArgs{...} }
type PrivateZonesTagFilterArrayInput interface {
	pulumi.Input

	ToPrivateZonesTagFilterArrayOutput() PrivateZonesTagFilterArrayOutput
	ToPrivateZonesTagFilterArrayOutputWithContext(context.Context) PrivateZonesTagFilterArrayOutput
}

type PrivateZonesTagFilterArray []PrivateZonesTagFilterInput

func (PrivateZonesTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesTagFilter)(nil)).Elem()
}

func (i PrivateZonesTagFilterArray) ToPrivateZonesTagFilterArrayOutput() PrivateZonesTagFilterArrayOutput {
	return i.ToPrivateZonesTagFilterArrayOutputWithContext(context.Background())
}

func (i PrivateZonesTagFilterArray) ToPrivateZonesTagFilterArrayOutputWithContext(ctx context.Context) PrivateZonesTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateZonesTagFilterArrayOutput)
}

type PrivateZonesTagFilterOutput struct{ *pulumi.OutputState }

func (PrivateZonesTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrivateZonesTagFilter)(nil)).Elem()
}

func (o PrivateZonesTagFilterOutput) ToPrivateZonesTagFilterOutput() PrivateZonesTagFilterOutput {
	return o
}

func (o PrivateZonesTagFilterOutput) ToPrivateZonesTagFilterOutputWithContext(ctx context.Context) PrivateZonesTagFilterOutput {
	return o
}

// The key of the tag.
func (o PrivateZonesTagFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrivateZonesTagFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The values of the tag.
func (o PrivateZonesTagFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v PrivateZonesTagFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type PrivateZonesTagFilterArrayOutput struct{ *pulumi.OutputState }

func (PrivateZonesTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrivateZonesTagFilter)(nil)).Elem()
}

func (o PrivateZonesTagFilterArrayOutput) ToPrivateZonesTagFilterArrayOutput() PrivateZonesTagFilterArrayOutput {
	return o
}

func (o PrivateZonesTagFilterArrayOutput) ToPrivateZonesTagFilterArrayOutputWithContext(ctx context.Context) PrivateZonesTagFilterArrayOutput {
	return o
}

func (o PrivateZonesTagFilterArrayOutput) Index(i pulumi.IntInput) PrivateZonesTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrivateZonesTagFilter {
		return vs[0].([]PrivateZonesTagFilter)[vs[1].(int)]
	}).(PrivateZonesTagFilterOutput)
}

type RecordSetsRecordSet struct {
	// The Complete domain name of the private zone record.
	Fqdn string `pulumi:"fqdn"`
	// The host of Private Zone Record Set.
	Host string `pulumi:"host"`
	// The subnet id of the private zone record. This field is only effected when the `intelligentMode` of the private zone is true.
	Line string `pulumi:"line"`
	// The id of Private Zone Record Set.
	RecordSetId string `pulumi:"recordSetId"`
	// The type of the private zone record.
	Type string `pulumi:"type"`
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled bool `pulumi:"weightEnabled"`
}

// RecordSetsRecordSetInput is an input type that accepts RecordSetsRecordSetArgs and RecordSetsRecordSetOutput values.
// You can construct a concrete instance of `RecordSetsRecordSetInput` via:
//
//	RecordSetsRecordSetArgs{...}
type RecordSetsRecordSetInput interface {
	pulumi.Input

	ToRecordSetsRecordSetOutput() RecordSetsRecordSetOutput
	ToRecordSetsRecordSetOutputWithContext(context.Context) RecordSetsRecordSetOutput
}

type RecordSetsRecordSetArgs struct {
	// The Complete domain name of the private zone record.
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// The host of Private Zone Record Set.
	Host pulumi.StringInput `pulumi:"host"`
	// The subnet id of the private zone record. This field is only effected when the `intelligentMode` of the private zone is true.
	Line pulumi.StringInput `pulumi:"line"`
	// The id of Private Zone Record Set.
	RecordSetId pulumi.StringInput `pulumi:"recordSetId"`
	// The type of the private zone record.
	Type pulumi.StringInput `pulumi:"type"`
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled pulumi.BoolInput `pulumi:"weightEnabled"`
}

func (RecordSetsRecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetsRecordSet)(nil)).Elem()
}

func (i RecordSetsRecordSetArgs) ToRecordSetsRecordSetOutput() RecordSetsRecordSetOutput {
	return i.ToRecordSetsRecordSetOutputWithContext(context.Background())
}

func (i RecordSetsRecordSetArgs) ToRecordSetsRecordSetOutputWithContext(ctx context.Context) RecordSetsRecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetsRecordSetOutput)
}

// RecordSetsRecordSetArrayInput is an input type that accepts RecordSetsRecordSetArray and RecordSetsRecordSetArrayOutput values.
// You can construct a concrete instance of `RecordSetsRecordSetArrayInput` via:
//
//	RecordSetsRecordSetArray{ RecordSetsRecordSetArgs{...} }
type RecordSetsRecordSetArrayInput interface {
	pulumi.Input

	ToRecordSetsRecordSetArrayOutput() RecordSetsRecordSetArrayOutput
	ToRecordSetsRecordSetArrayOutputWithContext(context.Context) RecordSetsRecordSetArrayOutput
}

type RecordSetsRecordSetArray []RecordSetsRecordSetInput

func (RecordSetsRecordSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordSetsRecordSet)(nil)).Elem()
}

func (i RecordSetsRecordSetArray) ToRecordSetsRecordSetArrayOutput() RecordSetsRecordSetArrayOutput {
	return i.ToRecordSetsRecordSetArrayOutputWithContext(context.Background())
}

func (i RecordSetsRecordSetArray) ToRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) RecordSetsRecordSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetsRecordSetArrayOutput)
}

type RecordSetsRecordSetOutput struct{ *pulumi.OutputState }

func (RecordSetsRecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetsRecordSet)(nil)).Elem()
}

func (o RecordSetsRecordSetOutput) ToRecordSetsRecordSetOutput() RecordSetsRecordSetOutput {
	return o
}

func (o RecordSetsRecordSetOutput) ToRecordSetsRecordSetOutputWithContext(ctx context.Context) RecordSetsRecordSetOutput {
	return o
}

// The Complete domain name of the private zone record.
func (o RecordSetsRecordSetOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The host of Private Zone Record Set.
func (o RecordSetsRecordSetOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Host }).(pulumi.StringOutput)
}

// The subnet id of the private zone record. This field is only effected when the `intelligentMode` of the private zone is true.
func (o RecordSetsRecordSetOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Line }).(pulumi.StringOutput)
}

// The id of Private Zone Record Set.
func (o RecordSetsRecordSetOutput) RecordSetId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.RecordSetId }).(pulumi.StringOutput)
}

// The type of the private zone record.
func (o RecordSetsRecordSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Type }).(pulumi.StringOutput)
}

// Whether to enable the load balance of the private zone record set.
func (o RecordSetsRecordSetOutput) WeightEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) bool { return v.WeightEnabled }).(pulumi.BoolOutput)
}

type RecordSetsRecordSetArrayOutput struct{ *pulumi.OutputState }

func (RecordSetsRecordSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordSetsRecordSet)(nil)).Elem()
}

func (o RecordSetsRecordSetArrayOutput) ToRecordSetsRecordSetArrayOutput() RecordSetsRecordSetArrayOutput {
	return o
}

func (o RecordSetsRecordSetArrayOutput) ToRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) RecordSetsRecordSetArrayOutput {
	return o
}

func (o RecordSetsRecordSetArrayOutput) Index(i pulumi.IntInput) RecordSetsRecordSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordSetsRecordSet {
		return vs[0].([]RecordSetsRecordSet)[vs[1].(int)]
	}).(RecordSetsRecordSetOutput)
}

type RecordsRecord struct {
	// The created time of the private zone record.
	CreatedAt string `pulumi:"createdAt"`
	// Whether the private zone record is enabling.
	Enable bool `pulumi:"enable"`
	// The host of Private Zone Record.
	Host string `pulumi:"host"`
	// The last operator account id of Private Zone Record.
	LastOperator string `pulumi:"lastOperator"`
	// The subnet id of Private Zone Record.
	Line string `pulumi:"line"`
	// This field is deprecated, please use `recordIds` instead. The id of Private Zone Record.
	RecordId string `pulumi:"recordId"`
	// The remark of the private zone record.
	Remark string `pulumi:"remark"`
	// The ttl of the private zone record. Unit: second.
	Ttl int `pulumi:"ttl"`
	// The type of Private Zone Record.
	Type string `pulumi:"type"`
	// The updated time of the private zone record.
	UpdatedAt string `pulumi:"updatedAt"`
	// The value of Private Zone Record.
	Value string `pulumi:"value"`
	// The weight of the private zone record.
	Weight int `pulumi:"weight"`
	// The zid of Private Zone.
	Zid int `pulumi:"zid"`
}

// RecordsRecordInput is an input type that accepts RecordsRecordArgs and RecordsRecordOutput values.
// You can construct a concrete instance of `RecordsRecordInput` via:
//
//	RecordsRecordArgs{...}
type RecordsRecordInput interface {
	pulumi.Input

	ToRecordsRecordOutput() RecordsRecordOutput
	ToRecordsRecordOutputWithContext(context.Context) RecordsRecordOutput
}

type RecordsRecordArgs struct {
	// The created time of the private zone record.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Whether the private zone record is enabling.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// The host of Private Zone Record.
	Host pulumi.StringInput `pulumi:"host"`
	// The last operator account id of Private Zone Record.
	LastOperator pulumi.StringInput `pulumi:"lastOperator"`
	// The subnet id of Private Zone Record.
	Line pulumi.StringInput `pulumi:"line"`
	// This field is deprecated, please use `recordIds` instead. The id of Private Zone Record.
	RecordId pulumi.StringInput `pulumi:"recordId"`
	// The remark of the private zone record.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The ttl of the private zone record. Unit: second.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// The type of Private Zone Record.
	Type pulumi.StringInput `pulumi:"type"`
	// The updated time of the private zone record.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The value of Private Zone Record.
	Value pulumi.StringInput `pulumi:"value"`
	// The weight of the private zone record.
	Weight pulumi.IntInput `pulumi:"weight"`
	// The zid of Private Zone.
	Zid pulumi.IntInput `pulumi:"zid"`
}

func (RecordsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsRecord)(nil)).Elem()
}

func (i RecordsRecordArgs) ToRecordsRecordOutput() RecordsRecordOutput {
	return i.ToRecordsRecordOutputWithContext(context.Background())
}

func (i RecordsRecordArgs) ToRecordsRecordOutputWithContext(ctx context.Context) RecordsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsRecordOutput)
}

// RecordsRecordArrayInput is an input type that accepts RecordsRecordArray and RecordsRecordArrayOutput values.
// You can construct a concrete instance of `RecordsRecordArrayInput` via:
//
//	RecordsRecordArray{ RecordsRecordArgs{...} }
type RecordsRecordArrayInput interface {
	pulumi.Input

	ToRecordsRecordArrayOutput() RecordsRecordArrayOutput
	ToRecordsRecordArrayOutputWithContext(context.Context) RecordsRecordArrayOutput
}

type RecordsRecordArray []RecordsRecordInput

func (RecordsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsRecord)(nil)).Elem()
}

func (i RecordsRecordArray) ToRecordsRecordArrayOutput() RecordsRecordArrayOutput {
	return i.ToRecordsRecordArrayOutputWithContext(context.Background())
}

func (i RecordsRecordArray) ToRecordsRecordArrayOutputWithContext(ctx context.Context) RecordsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsRecordArrayOutput)
}

type RecordsRecordOutput struct{ *pulumi.OutputState }

func (RecordsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsRecord)(nil)).Elem()
}

func (o RecordsRecordOutput) ToRecordsRecordOutput() RecordsRecordOutput {
	return o
}

func (o RecordsRecordOutput) ToRecordsRecordOutputWithContext(ctx context.Context) RecordsRecordOutput {
	return o
}

// The created time of the private zone record.
func (o RecordsRecordOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Whether the private zone record is enabling.
func (o RecordsRecordOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordsRecord) bool { return v.Enable }).(pulumi.BoolOutput)
}

// The host of Private Zone Record.
func (o RecordsRecordOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Host }).(pulumi.StringOutput)
}

// The last operator account id of Private Zone Record.
func (o RecordsRecordOutput) LastOperator() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.LastOperator }).(pulumi.StringOutput)
}

// The subnet id of Private Zone Record.
func (o RecordsRecordOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Line }).(pulumi.StringOutput)
}

// This field is deprecated, please use `recordIds` instead. The id of Private Zone Record.
func (o RecordsRecordOutput) RecordId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.RecordId }).(pulumi.StringOutput)
}

// The remark of the private zone record.
func (o RecordsRecordOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Remark }).(pulumi.StringOutput)
}

// The ttl of the private zone record. Unit: second.
func (o RecordsRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v RecordsRecord) int { return v.Ttl }).(pulumi.IntOutput)
}

// The type of Private Zone Record.
func (o RecordsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Type }).(pulumi.StringOutput)
}

// The updated time of the private zone record.
func (o RecordsRecordOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The value of Private Zone Record.
func (o RecordsRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Value }).(pulumi.StringOutput)
}

// The weight of the private zone record.
func (o RecordsRecordOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RecordsRecord) int { return v.Weight }).(pulumi.IntOutput)
}

// The zid of Private Zone.
func (o RecordsRecordOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v RecordsRecord) int { return v.Zid }).(pulumi.IntOutput)
}

type RecordsRecordArrayOutput struct{ *pulumi.OutputState }

func (RecordsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsRecord)(nil)).Elem()
}

func (o RecordsRecordArrayOutput) ToRecordsRecordArrayOutput() RecordsRecordArrayOutput {
	return o
}

func (o RecordsRecordArrayOutput) ToRecordsRecordArrayOutputWithContext(ctx context.Context) RecordsRecordArrayOutput {
	return o
}

func (o RecordsRecordArrayOutput) Index(i pulumi.IntInput) RecordsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordsRecord {
		return vs[0].([]RecordsRecord)[vs[1].(int)]
	}).(RecordsRecordOutput)
}

type ResolverEndpointIpConfig struct {
	// Id of the availability zone.
	AzId string `pulumi:"azId"`
	// Source IP address of traffic. You can add up to 6 IP addresses at most. To ensure high availability, you must add at least two IP addresses.
	Ip string `pulumi:"ip"`
	// Id of the subnet.
	SubnetId string `pulumi:"subnetId"`
}

// ResolverEndpointIpConfigInput is an input type that accepts ResolverEndpointIpConfigArgs and ResolverEndpointIpConfigOutput values.
// You can construct a concrete instance of `ResolverEndpointIpConfigInput` via:
//
//	ResolverEndpointIpConfigArgs{...}
type ResolverEndpointIpConfigInput interface {
	pulumi.Input

	ToResolverEndpointIpConfigOutput() ResolverEndpointIpConfigOutput
	ToResolverEndpointIpConfigOutputWithContext(context.Context) ResolverEndpointIpConfigOutput
}

type ResolverEndpointIpConfigArgs struct {
	// Id of the availability zone.
	AzId pulumi.StringInput `pulumi:"azId"`
	// Source IP address of traffic. You can add up to 6 IP addresses at most. To ensure high availability, you must add at least two IP addresses.
	Ip pulumi.StringInput `pulumi:"ip"`
	// Id of the subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (ResolverEndpointIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpConfig)(nil)).Elem()
}

func (i ResolverEndpointIpConfigArgs) ToResolverEndpointIpConfigOutput() ResolverEndpointIpConfigOutput {
	return i.ToResolverEndpointIpConfigOutputWithContext(context.Background())
}

func (i ResolverEndpointIpConfigArgs) ToResolverEndpointIpConfigOutputWithContext(ctx context.Context) ResolverEndpointIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpConfigOutput)
}

// ResolverEndpointIpConfigArrayInput is an input type that accepts ResolverEndpointIpConfigArray and ResolverEndpointIpConfigArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointIpConfigArrayInput` via:
//
//	ResolverEndpointIpConfigArray{ ResolverEndpointIpConfigArgs{...} }
type ResolverEndpointIpConfigArrayInput interface {
	pulumi.Input

	ToResolverEndpointIpConfigArrayOutput() ResolverEndpointIpConfigArrayOutput
	ToResolverEndpointIpConfigArrayOutputWithContext(context.Context) ResolverEndpointIpConfigArrayOutput
}

type ResolverEndpointIpConfigArray []ResolverEndpointIpConfigInput

func (ResolverEndpointIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpConfig)(nil)).Elem()
}

func (i ResolverEndpointIpConfigArray) ToResolverEndpointIpConfigArrayOutput() ResolverEndpointIpConfigArrayOutput {
	return i.ToResolverEndpointIpConfigArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointIpConfigArray) ToResolverEndpointIpConfigArrayOutputWithContext(ctx context.Context) ResolverEndpointIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointIpConfigArrayOutput)
}

type ResolverEndpointIpConfigOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointIpConfig)(nil)).Elem()
}

func (o ResolverEndpointIpConfigOutput) ToResolverEndpointIpConfigOutput() ResolverEndpointIpConfigOutput {
	return o
}

func (o ResolverEndpointIpConfigOutput) ToResolverEndpointIpConfigOutputWithContext(ctx context.Context) ResolverEndpointIpConfigOutput {
	return o
}

// Id of the availability zone.
func (o ResolverEndpointIpConfigOutput) AzId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpConfig) string { return v.AzId }).(pulumi.StringOutput)
}

// Source IP address of traffic. You can add up to 6 IP addresses at most. To ensure high availability, you must add at least two IP addresses.
func (o ResolverEndpointIpConfigOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpConfig) string { return v.Ip }).(pulumi.StringOutput)
}

// Id of the subnet.
func (o ResolverEndpointIpConfigOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointIpConfig) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverEndpointIpConfigArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointIpConfig)(nil)).Elem()
}

func (o ResolverEndpointIpConfigArrayOutput) ToResolverEndpointIpConfigArrayOutput() ResolverEndpointIpConfigArrayOutput {
	return o
}

func (o ResolverEndpointIpConfigArrayOutput) ToResolverEndpointIpConfigArrayOutputWithContext(ctx context.Context) ResolverEndpointIpConfigArrayOutput {
	return o
}

func (o ResolverEndpointIpConfigArrayOutput) Index(i pulumi.IntInput) ResolverEndpointIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointIpConfig {
		return vs[0].([]ResolverEndpointIpConfig)[vs[1].(int)]
	}).(ResolverEndpointIpConfigOutput)
}

type ResolverEndpointTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ResolverEndpointTagInput is an input type that accepts ResolverEndpointTagArgs and ResolverEndpointTagOutput values.
// You can construct a concrete instance of `ResolverEndpointTagInput` via:
//
//	ResolverEndpointTagArgs{...}
type ResolverEndpointTagInput interface {
	pulumi.Input

	ToResolverEndpointTagOutput() ResolverEndpointTagOutput
	ToResolverEndpointTagOutputWithContext(context.Context) ResolverEndpointTagOutput
}

type ResolverEndpointTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ResolverEndpointTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointTag)(nil)).Elem()
}

func (i ResolverEndpointTagArgs) ToResolverEndpointTagOutput() ResolverEndpointTagOutput {
	return i.ToResolverEndpointTagOutputWithContext(context.Background())
}

func (i ResolverEndpointTagArgs) ToResolverEndpointTagOutputWithContext(ctx context.Context) ResolverEndpointTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointTagOutput)
}

// ResolverEndpointTagArrayInput is an input type that accepts ResolverEndpointTagArray and ResolverEndpointTagArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointTagArrayInput` via:
//
//	ResolverEndpointTagArray{ ResolverEndpointTagArgs{...} }
type ResolverEndpointTagArrayInput interface {
	pulumi.Input

	ToResolverEndpointTagArrayOutput() ResolverEndpointTagArrayOutput
	ToResolverEndpointTagArrayOutputWithContext(context.Context) ResolverEndpointTagArrayOutput
}

type ResolverEndpointTagArray []ResolverEndpointTagInput

func (ResolverEndpointTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointTag)(nil)).Elem()
}

func (i ResolverEndpointTagArray) ToResolverEndpointTagArrayOutput() ResolverEndpointTagArrayOutput {
	return i.ToResolverEndpointTagArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointTagArray) ToResolverEndpointTagArrayOutputWithContext(ctx context.Context) ResolverEndpointTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointTagArrayOutput)
}

type ResolverEndpointTagOutput struct{ *pulumi.OutputState }

func (ResolverEndpointTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointTag)(nil)).Elem()
}

func (o ResolverEndpointTagOutput) ToResolverEndpointTagOutput() ResolverEndpointTagOutput {
	return o
}

func (o ResolverEndpointTagOutput) ToResolverEndpointTagOutputWithContext(ctx context.Context) ResolverEndpointTagOutput {
	return o
}

// The Key of Tags.
func (o ResolverEndpointTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ResolverEndpointTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointTag) string { return v.Value }).(pulumi.StringOutput)
}

type ResolverEndpointTagArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointTag)(nil)).Elem()
}

func (o ResolverEndpointTagArrayOutput) ToResolverEndpointTagArrayOutput() ResolverEndpointTagArrayOutput {
	return o
}

func (o ResolverEndpointTagArrayOutput) ToResolverEndpointTagArrayOutputWithContext(ctx context.Context) ResolverEndpointTagArrayOutput {
	return o
}

func (o ResolverEndpointTagArrayOutput) Index(i pulumi.IntInput) ResolverEndpointTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointTag {
		return vs[0].([]ResolverEndpointTag)[vs[1].(int)]
	}).(ResolverEndpointTagOutput)
}

type ResolverEndpointsEndpoint struct {
	// The created time of the endpoint.
	CreatedAt string `pulumi:"createdAt"`
	// The direction of the private zone resolver endpoint.
	Direction string `pulumi:"direction"`
	// The endpoint id.
	EndpointId int `pulumi:"endpointId"`
	// The id of the endpoint.
	Id string `pulumi:"id"`
	// List of IP configurations.
	IpConfigs []ResolverEndpointsEndpointIpConfig `pulumi:"ipConfigs"`
	// The name of the private zone resolver endpoint.
	Name string `pulumi:"name"`
	// The project name of the private zone resolver endpoint.
	ProjectName string `pulumi:"projectName"`
	// The security group id of the endpoint.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The status of the private zone resolver endpoint.
	Status string `pulumi:"status"`
	// Tags.
	Tags []ResolverEndpointsEndpointTag `pulumi:"tags"`
	// The updated time of the endpoint.
	UpdatedAt string `pulumi:"updatedAt"`
	// The vpc ID of the private zone resolver endpoint.
	VpcId string `pulumi:"vpcId"`
	// The vpc region of the endpoint.
	VpcRegion string `pulumi:"vpcRegion"`
}

// ResolverEndpointsEndpointInput is an input type that accepts ResolverEndpointsEndpointArgs and ResolverEndpointsEndpointOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointInput` via:
//
//	ResolverEndpointsEndpointArgs{...}
type ResolverEndpointsEndpointInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointOutput() ResolverEndpointsEndpointOutput
	ToResolverEndpointsEndpointOutputWithContext(context.Context) ResolverEndpointsEndpointOutput
}

type ResolverEndpointsEndpointArgs struct {
	// The created time of the endpoint.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The direction of the private zone resolver endpoint.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The endpoint id.
	EndpointId pulumi.IntInput `pulumi:"endpointId"`
	// The id of the endpoint.
	Id pulumi.StringInput `pulumi:"id"`
	// List of IP configurations.
	IpConfigs ResolverEndpointsEndpointIpConfigArrayInput `pulumi:"ipConfigs"`
	// The name of the private zone resolver endpoint.
	Name pulumi.StringInput `pulumi:"name"`
	// The project name of the private zone resolver endpoint.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The security group id of the endpoint.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The status of the private zone resolver endpoint.
	Status pulumi.StringInput `pulumi:"status"`
	// Tags.
	Tags ResolverEndpointsEndpointTagArrayInput `pulumi:"tags"`
	// The updated time of the endpoint.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The vpc ID of the private zone resolver endpoint.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The vpc region of the endpoint.
	VpcRegion pulumi.StringInput `pulumi:"vpcRegion"`
}

func (ResolverEndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpoint)(nil)).Elem()
}

func (i ResolverEndpointsEndpointArgs) ToResolverEndpointsEndpointOutput() ResolverEndpointsEndpointOutput {
	return i.ToResolverEndpointsEndpointOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointArgs) ToResolverEndpointsEndpointOutputWithContext(ctx context.Context) ResolverEndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointOutput)
}

// ResolverEndpointsEndpointArrayInput is an input type that accepts ResolverEndpointsEndpointArray and ResolverEndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointArrayInput` via:
//
//	ResolverEndpointsEndpointArray{ ResolverEndpointsEndpointArgs{...} }
type ResolverEndpointsEndpointArrayInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointArrayOutput() ResolverEndpointsEndpointArrayOutput
	ToResolverEndpointsEndpointArrayOutputWithContext(context.Context) ResolverEndpointsEndpointArrayOutput
}

type ResolverEndpointsEndpointArray []ResolverEndpointsEndpointInput

func (ResolverEndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpoint)(nil)).Elem()
}

func (i ResolverEndpointsEndpointArray) ToResolverEndpointsEndpointArrayOutput() ResolverEndpointsEndpointArrayOutput {
	return i.ToResolverEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointArray) ToResolverEndpointsEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointArrayOutput)
}

type ResolverEndpointsEndpointOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpoint)(nil)).Elem()
}

func (o ResolverEndpointsEndpointOutput) ToResolverEndpointsEndpointOutput() ResolverEndpointsEndpointOutput {
	return o
}

func (o ResolverEndpointsEndpointOutput) ToResolverEndpointsEndpointOutputWithContext(ctx context.Context) ResolverEndpointsEndpointOutput {
	return o
}

// The created time of the endpoint.
func (o ResolverEndpointsEndpointOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The direction of the private zone resolver endpoint.
func (o ResolverEndpointsEndpointOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.Direction }).(pulumi.StringOutput)
}

// The endpoint id.
func (o ResolverEndpointsEndpointOutput) EndpointId() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) int { return v.EndpointId }).(pulumi.IntOutput)
}

// The id of the endpoint.
func (o ResolverEndpointsEndpointOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.Id }).(pulumi.StringOutput)
}

// List of IP configurations.
func (o ResolverEndpointsEndpointOutput) IpConfigs() ResolverEndpointsEndpointIpConfigArrayOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) []ResolverEndpointsEndpointIpConfig { return v.IpConfigs }).(ResolverEndpointsEndpointIpConfigArrayOutput)
}

// The name of the private zone resolver endpoint.
func (o ResolverEndpointsEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.Name }).(pulumi.StringOutput)
}

// The project name of the private zone resolver endpoint.
func (o ResolverEndpointsEndpointOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The security group id of the endpoint.
func (o ResolverEndpointsEndpointOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The status of the private zone resolver endpoint.
func (o ResolverEndpointsEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o ResolverEndpointsEndpointOutput) Tags() ResolverEndpointsEndpointTagArrayOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) []ResolverEndpointsEndpointTag { return v.Tags }).(ResolverEndpointsEndpointTagArrayOutput)
}

// The updated time of the endpoint.
func (o ResolverEndpointsEndpointOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The vpc ID of the private zone resolver endpoint.
func (o ResolverEndpointsEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.VpcId }).(pulumi.StringOutput)
}

// The vpc region of the endpoint.
func (o ResolverEndpointsEndpointOutput) VpcRegion() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpoint) string { return v.VpcRegion }).(pulumi.StringOutput)
}

type ResolverEndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpoint)(nil)).Elem()
}

func (o ResolverEndpointsEndpointArrayOutput) ToResolverEndpointsEndpointArrayOutput() ResolverEndpointsEndpointArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointArrayOutput) ToResolverEndpointsEndpointArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointArrayOutput) Index(i pulumi.IntInput) ResolverEndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointsEndpoint {
		return vs[0].([]ResolverEndpointsEndpoint)[vs[1].(int)]
	}).(ResolverEndpointsEndpointOutput)
}

type ResolverEndpointsEndpointIpConfig struct {
	// The availability zone id of the endpoint.
	AzId string `pulumi:"azId"`
	// The IP address of the endpoint.
	Ip string `pulumi:"ip"`
	// The subnet id of the endpoint.
	SubnetId string `pulumi:"subnetId"`
}

// ResolverEndpointsEndpointIpConfigInput is an input type that accepts ResolverEndpointsEndpointIpConfigArgs and ResolverEndpointsEndpointIpConfigOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointIpConfigInput` via:
//
//	ResolverEndpointsEndpointIpConfigArgs{...}
type ResolverEndpointsEndpointIpConfigInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointIpConfigOutput() ResolverEndpointsEndpointIpConfigOutput
	ToResolverEndpointsEndpointIpConfigOutputWithContext(context.Context) ResolverEndpointsEndpointIpConfigOutput
}

type ResolverEndpointsEndpointIpConfigArgs struct {
	// The availability zone id of the endpoint.
	AzId pulumi.StringInput `pulumi:"azId"`
	// The IP address of the endpoint.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The subnet id of the endpoint.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (ResolverEndpointsEndpointIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (i ResolverEndpointsEndpointIpConfigArgs) ToResolverEndpointsEndpointIpConfigOutput() ResolverEndpointsEndpointIpConfigOutput {
	return i.ToResolverEndpointsEndpointIpConfigOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointIpConfigArgs) ToResolverEndpointsEndpointIpConfigOutputWithContext(ctx context.Context) ResolverEndpointsEndpointIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointIpConfigOutput)
}

// ResolverEndpointsEndpointIpConfigArrayInput is an input type that accepts ResolverEndpointsEndpointIpConfigArray and ResolverEndpointsEndpointIpConfigArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointIpConfigArrayInput` via:
//
//	ResolverEndpointsEndpointIpConfigArray{ ResolverEndpointsEndpointIpConfigArgs{...} }
type ResolverEndpointsEndpointIpConfigArrayInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointIpConfigArrayOutput() ResolverEndpointsEndpointIpConfigArrayOutput
	ToResolverEndpointsEndpointIpConfigArrayOutputWithContext(context.Context) ResolverEndpointsEndpointIpConfigArrayOutput
}

type ResolverEndpointsEndpointIpConfigArray []ResolverEndpointsEndpointIpConfigInput

func (ResolverEndpointsEndpointIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (i ResolverEndpointsEndpointIpConfigArray) ToResolverEndpointsEndpointIpConfigArrayOutput() ResolverEndpointsEndpointIpConfigArrayOutput {
	return i.ToResolverEndpointsEndpointIpConfigArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointIpConfigArray) ToResolverEndpointsEndpointIpConfigArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointIpConfigArrayOutput)
}

type ResolverEndpointsEndpointIpConfigOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (o ResolverEndpointsEndpointIpConfigOutput) ToResolverEndpointsEndpointIpConfigOutput() ResolverEndpointsEndpointIpConfigOutput {
	return o
}

func (o ResolverEndpointsEndpointIpConfigOutput) ToResolverEndpointsEndpointIpConfigOutputWithContext(ctx context.Context) ResolverEndpointsEndpointIpConfigOutput {
	return o
}

// The availability zone id of the endpoint.
func (o ResolverEndpointsEndpointIpConfigOutput) AzId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpointIpConfig) string { return v.AzId }).(pulumi.StringOutput)
}

// The IP address of the endpoint.
func (o ResolverEndpointsEndpointIpConfigOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpointIpConfig) string { return v.Ip }).(pulumi.StringOutput)
}

// The subnet id of the endpoint.
func (o ResolverEndpointsEndpointIpConfigOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpointIpConfig) string { return v.SubnetId }).(pulumi.StringOutput)
}

type ResolverEndpointsEndpointIpConfigArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (o ResolverEndpointsEndpointIpConfigArrayOutput) ToResolverEndpointsEndpointIpConfigArrayOutput() ResolverEndpointsEndpointIpConfigArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointIpConfigArrayOutput) ToResolverEndpointsEndpointIpConfigArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointIpConfigArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointIpConfigArrayOutput) Index(i pulumi.IntInput) ResolverEndpointsEndpointIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointsEndpointIpConfig {
		return vs[0].([]ResolverEndpointsEndpointIpConfig)[vs[1].(int)]
	}).(ResolverEndpointsEndpointIpConfigOutput)
}

type ResolverEndpointsEndpointTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ResolverEndpointsEndpointTagInput is an input type that accepts ResolverEndpointsEndpointTagArgs and ResolverEndpointsEndpointTagOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointTagInput` via:
//
//	ResolverEndpointsEndpointTagArgs{...}
type ResolverEndpointsEndpointTagInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointTagOutput() ResolverEndpointsEndpointTagOutput
	ToResolverEndpointsEndpointTagOutputWithContext(context.Context) ResolverEndpointsEndpointTagOutput
}

type ResolverEndpointsEndpointTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ResolverEndpointsEndpointTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpointTag)(nil)).Elem()
}

func (i ResolverEndpointsEndpointTagArgs) ToResolverEndpointsEndpointTagOutput() ResolverEndpointsEndpointTagOutput {
	return i.ToResolverEndpointsEndpointTagOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointTagArgs) ToResolverEndpointsEndpointTagOutputWithContext(ctx context.Context) ResolverEndpointsEndpointTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointTagOutput)
}

// ResolverEndpointsEndpointTagArrayInput is an input type that accepts ResolverEndpointsEndpointTagArray and ResolverEndpointsEndpointTagArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointsEndpointTagArrayInput` via:
//
//	ResolverEndpointsEndpointTagArray{ ResolverEndpointsEndpointTagArgs{...} }
type ResolverEndpointsEndpointTagArrayInput interface {
	pulumi.Input

	ToResolverEndpointsEndpointTagArrayOutput() ResolverEndpointsEndpointTagArrayOutput
	ToResolverEndpointsEndpointTagArrayOutputWithContext(context.Context) ResolverEndpointsEndpointTagArrayOutput
}

type ResolverEndpointsEndpointTagArray []ResolverEndpointsEndpointTagInput

func (ResolverEndpointsEndpointTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpointTag)(nil)).Elem()
}

func (i ResolverEndpointsEndpointTagArray) ToResolverEndpointsEndpointTagArrayOutput() ResolverEndpointsEndpointTagArrayOutput {
	return i.ToResolverEndpointsEndpointTagArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointsEndpointTagArray) ToResolverEndpointsEndpointTagArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsEndpointTagArrayOutput)
}

type ResolverEndpointsEndpointTagOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsEndpointTag)(nil)).Elem()
}

func (o ResolverEndpointsEndpointTagOutput) ToResolverEndpointsEndpointTagOutput() ResolverEndpointsEndpointTagOutput {
	return o
}

func (o ResolverEndpointsEndpointTagOutput) ToResolverEndpointsEndpointTagOutputWithContext(ctx context.Context) ResolverEndpointsEndpointTagOutput {
	return o
}

// The Key of Tags.
func (o ResolverEndpointsEndpointTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpointTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ResolverEndpointsEndpointTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsEndpointTag) string { return v.Value }).(pulumi.StringOutput)
}

type ResolverEndpointsEndpointTagArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsEndpointTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsEndpointTag)(nil)).Elem()
}

func (o ResolverEndpointsEndpointTagArrayOutput) ToResolverEndpointsEndpointTagArrayOutput() ResolverEndpointsEndpointTagArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointTagArrayOutput) ToResolverEndpointsEndpointTagArrayOutputWithContext(ctx context.Context) ResolverEndpointsEndpointTagArrayOutput {
	return o
}

func (o ResolverEndpointsEndpointTagArrayOutput) Index(i pulumi.IntInput) ResolverEndpointsEndpointTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointsEndpointTag {
		return vs[0].([]ResolverEndpointsEndpointTag)[vs[1].(int)]
	}).(ResolverEndpointsEndpointTagOutput)
}

type ResolverEndpointsTagFilter struct {
	// The key of the tag.
	Key *string `pulumi:"key"`
	// The values of the tag.
	Values []string `pulumi:"values"`
}

// ResolverEndpointsTagFilterInput is an input type that accepts ResolverEndpointsTagFilterArgs and ResolverEndpointsTagFilterOutput values.
// You can construct a concrete instance of `ResolverEndpointsTagFilterInput` via:
//
//	ResolverEndpointsTagFilterArgs{...}
type ResolverEndpointsTagFilterInput interface {
	pulumi.Input

	ToResolverEndpointsTagFilterOutput() ResolverEndpointsTagFilterOutput
	ToResolverEndpointsTagFilterOutputWithContext(context.Context) ResolverEndpointsTagFilterOutput
}

type ResolverEndpointsTagFilterArgs struct {
	// The key of the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The values of the tag.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ResolverEndpointsTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsTagFilter)(nil)).Elem()
}

func (i ResolverEndpointsTagFilterArgs) ToResolverEndpointsTagFilterOutput() ResolverEndpointsTagFilterOutput {
	return i.ToResolverEndpointsTagFilterOutputWithContext(context.Background())
}

func (i ResolverEndpointsTagFilterArgs) ToResolverEndpointsTagFilterOutputWithContext(ctx context.Context) ResolverEndpointsTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsTagFilterOutput)
}

// ResolverEndpointsTagFilterArrayInput is an input type that accepts ResolverEndpointsTagFilterArray and ResolverEndpointsTagFilterArrayOutput values.
// You can construct a concrete instance of `ResolverEndpointsTagFilterArrayInput` via:
//
//	ResolverEndpointsTagFilterArray{ ResolverEndpointsTagFilterArgs{...} }
type ResolverEndpointsTagFilterArrayInput interface {
	pulumi.Input

	ToResolverEndpointsTagFilterArrayOutput() ResolverEndpointsTagFilterArrayOutput
	ToResolverEndpointsTagFilterArrayOutputWithContext(context.Context) ResolverEndpointsTagFilterArrayOutput
}

type ResolverEndpointsTagFilterArray []ResolverEndpointsTagFilterInput

func (ResolverEndpointsTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsTagFilter)(nil)).Elem()
}

func (i ResolverEndpointsTagFilterArray) ToResolverEndpointsTagFilterArrayOutput() ResolverEndpointsTagFilterArrayOutput {
	return i.ToResolverEndpointsTagFilterArrayOutputWithContext(context.Background())
}

func (i ResolverEndpointsTagFilterArray) ToResolverEndpointsTagFilterArrayOutputWithContext(ctx context.Context) ResolverEndpointsTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverEndpointsTagFilterArrayOutput)
}

type ResolverEndpointsTagFilterOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsTagFilter)(nil)).Elem()
}

func (o ResolverEndpointsTagFilterOutput) ToResolverEndpointsTagFilterOutput() ResolverEndpointsTagFilterOutput {
	return o
}

func (o ResolverEndpointsTagFilterOutput) ToResolverEndpointsTagFilterOutputWithContext(ctx context.Context) ResolverEndpointsTagFilterOutput {
	return o
}

// The key of the tag.
func (o ResolverEndpointsTagFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointsTagFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The values of the tag.
func (o ResolverEndpointsTagFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResolverEndpointsTagFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ResolverEndpointsTagFilterArrayOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverEndpointsTagFilter)(nil)).Elem()
}

func (o ResolverEndpointsTagFilterArrayOutput) ToResolverEndpointsTagFilterArrayOutput() ResolverEndpointsTagFilterArrayOutput {
	return o
}

func (o ResolverEndpointsTagFilterArrayOutput) ToResolverEndpointsTagFilterArrayOutputWithContext(ctx context.Context) ResolverEndpointsTagFilterArrayOutput {
	return o
}

func (o ResolverEndpointsTagFilterArrayOutput) Index(i pulumi.IntInput) ResolverEndpointsTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverEndpointsTagFilter {
		return vs[0].([]ResolverEndpointsTagFilter)[vs[1].(int)]
	}).(ResolverEndpointsTagFilterOutput)
}

type ResolverRuleForwardIp struct {
	// IP address of the external DNS server. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
	Ip string `pulumi:"ip"`
	// The port of the external DNS server. Default is 53. This parameter is only valid and optional when the Type parameter is OUTBOUND.
	Port *int `pulumi:"port"`
}

// ResolverRuleForwardIpInput is an input type that accepts ResolverRuleForwardIpArgs and ResolverRuleForwardIpOutput values.
// You can construct a concrete instance of `ResolverRuleForwardIpInput` via:
//
//	ResolverRuleForwardIpArgs{...}
type ResolverRuleForwardIpInput interface {
	pulumi.Input

	ToResolverRuleForwardIpOutput() ResolverRuleForwardIpOutput
	ToResolverRuleForwardIpOutputWithContext(context.Context) ResolverRuleForwardIpOutput
}

type ResolverRuleForwardIpArgs struct {
	// IP address of the external DNS server. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port of the external DNS server. Default is 53. This parameter is only valid and optional when the Type parameter is OUTBOUND.
	Port pulumi.IntPtrInput `pulumi:"port"`
}

func (ResolverRuleForwardIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleForwardIp)(nil)).Elem()
}

func (i ResolverRuleForwardIpArgs) ToResolverRuleForwardIpOutput() ResolverRuleForwardIpOutput {
	return i.ToResolverRuleForwardIpOutputWithContext(context.Background())
}

func (i ResolverRuleForwardIpArgs) ToResolverRuleForwardIpOutputWithContext(ctx context.Context) ResolverRuleForwardIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleForwardIpOutput)
}

// ResolverRuleForwardIpArrayInput is an input type that accepts ResolverRuleForwardIpArray and ResolverRuleForwardIpArrayOutput values.
// You can construct a concrete instance of `ResolverRuleForwardIpArrayInput` via:
//
//	ResolverRuleForwardIpArray{ ResolverRuleForwardIpArgs{...} }
type ResolverRuleForwardIpArrayInput interface {
	pulumi.Input

	ToResolverRuleForwardIpArrayOutput() ResolverRuleForwardIpArrayOutput
	ToResolverRuleForwardIpArrayOutputWithContext(context.Context) ResolverRuleForwardIpArrayOutput
}

type ResolverRuleForwardIpArray []ResolverRuleForwardIpInput

func (ResolverRuleForwardIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleForwardIp)(nil)).Elem()
}

func (i ResolverRuleForwardIpArray) ToResolverRuleForwardIpArrayOutput() ResolverRuleForwardIpArrayOutput {
	return i.ToResolverRuleForwardIpArrayOutputWithContext(context.Background())
}

func (i ResolverRuleForwardIpArray) ToResolverRuleForwardIpArrayOutputWithContext(ctx context.Context) ResolverRuleForwardIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleForwardIpArrayOutput)
}

type ResolverRuleForwardIpOutput struct{ *pulumi.OutputState }

func (ResolverRuleForwardIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleForwardIp)(nil)).Elem()
}

func (o ResolverRuleForwardIpOutput) ToResolverRuleForwardIpOutput() ResolverRuleForwardIpOutput {
	return o
}

func (o ResolverRuleForwardIpOutput) ToResolverRuleForwardIpOutputWithContext(ctx context.Context) ResolverRuleForwardIpOutput {
	return o
}

// IP address of the external DNS server. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
func (o ResolverRuleForwardIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleForwardIp) string { return v.Ip }).(pulumi.StringOutput)
}

// The port of the external DNS server. Default is 53. This parameter is only valid and optional when the Type parameter is OUTBOUND.
func (o ResolverRuleForwardIpOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ResolverRuleForwardIp) *int { return v.Port }).(pulumi.IntPtrOutput)
}

type ResolverRuleForwardIpArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleForwardIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleForwardIp)(nil)).Elem()
}

func (o ResolverRuleForwardIpArrayOutput) ToResolverRuleForwardIpArrayOutput() ResolverRuleForwardIpArrayOutput {
	return o
}

func (o ResolverRuleForwardIpArrayOutput) ToResolverRuleForwardIpArrayOutputWithContext(ctx context.Context) ResolverRuleForwardIpArrayOutput {
	return o
}

func (o ResolverRuleForwardIpArrayOutput) Index(i pulumi.IntInput) ResolverRuleForwardIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleForwardIp {
		return vs[0].([]ResolverRuleForwardIp)[vs[1].(int)]
	}).(ResolverRuleForwardIpOutput)
}

type ResolverRuleTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ResolverRuleTagInput is an input type that accepts ResolverRuleTagArgs and ResolverRuleTagOutput values.
// You can construct a concrete instance of `ResolverRuleTagInput` via:
//
//	ResolverRuleTagArgs{...}
type ResolverRuleTagInput interface {
	pulumi.Input

	ToResolverRuleTagOutput() ResolverRuleTagOutput
	ToResolverRuleTagOutputWithContext(context.Context) ResolverRuleTagOutput
}

type ResolverRuleTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ResolverRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTag)(nil)).Elem()
}

func (i ResolverRuleTagArgs) ToResolverRuleTagOutput() ResolverRuleTagOutput {
	return i.ToResolverRuleTagOutputWithContext(context.Background())
}

func (i ResolverRuleTagArgs) ToResolverRuleTagOutputWithContext(ctx context.Context) ResolverRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTagOutput)
}

// ResolverRuleTagArrayInput is an input type that accepts ResolverRuleTagArray and ResolverRuleTagArrayOutput values.
// You can construct a concrete instance of `ResolverRuleTagArrayInput` via:
//
//	ResolverRuleTagArray{ ResolverRuleTagArgs{...} }
type ResolverRuleTagArrayInput interface {
	pulumi.Input

	ToResolverRuleTagArrayOutput() ResolverRuleTagArrayOutput
	ToResolverRuleTagArrayOutputWithContext(context.Context) ResolverRuleTagArrayOutput
}

type ResolverRuleTagArray []ResolverRuleTagInput

func (ResolverRuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTag)(nil)).Elem()
}

func (i ResolverRuleTagArray) ToResolverRuleTagArrayOutput() ResolverRuleTagArrayOutput {
	return i.ToResolverRuleTagArrayOutputWithContext(context.Background())
}

func (i ResolverRuleTagArray) ToResolverRuleTagArrayOutputWithContext(ctx context.Context) ResolverRuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleTagArrayOutput)
}

type ResolverRuleTagOutput struct{ *pulumi.OutputState }

func (ResolverRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleTag)(nil)).Elem()
}

func (o ResolverRuleTagOutput) ToResolverRuleTagOutput() ResolverRuleTagOutput {
	return o
}

func (o ResolverRuleTagOutput) ToResolverRuleTagOutputWithContext(ctx context.Context) ResolverRuleTagOutput {
	return o
}

// The Key of Tags.
func (o ResolverRuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ResolverRuleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleTag) string { return v.Value }).(pulumi.StringOutput)
}

type ResolverRuleTagArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleTag)(nil)).Elem()
}

func (o ResolverRuleTagArrayOutput) ToResolverRuleTagArrayOutput() ResolverRuleTagArrayOutput {
	return o
}

func (o ResolverRuleTagArrayOutput) ToResolverRuleTagArrayOutputWithContext(ctx context.Context) ResolverRuleTagArrayOutput {
	return o
}

func (o ResolverRuleTagArrayOutput) Index(i pulumi.IntInput) ResolverRuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleTag {
		return vs[0].([]ResolverRuleTag)[vs[1].(int)]
	}).(ResolverRuleTagOutput)
}

type ResolverRuleVpc struct {
	// The region of the bind vpc. The default value is the region of the default provider config.
	Region *string `pulumi:"region"`
	// The id of the bind vpc.
	VpcId string `pulumi:"vpcId"`
}

// ResolverRuleVpcInput is an input type that accepts ResolverRuleVpcArgs and ResolverRuleVpcOutput values.
// You can construct a concrete instance of `ResolverRuleVpcInput` via:
//
//	ResolverRuleVpcArgs{...}
type ResolverRuleVpcInput interface {
	pulumi.Input

	ToResolverRuleVpcOutput() ResolverRuleVpcOutput
	ToResolverRuleVpcOutputWithContext(context.Context) ResolverRuleVpcOutput
}

type ResolverRuleVpcArgs struct {
	// The region of the bind vpc. The default value is the region of the default provider config.
	Region pulumi.StringPtrInput `pulumi:"region"`
	// The id of the bind vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (ResolverRuleVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleVpc)(nil)).Elem()
}

func (i ResolverRuleVpcArgs) ToResolverRuleVpcOutput() ResolverRuleVpcOutput {
	return i.ToResolverRuleVpcOutputWithContext(context.Background())
}

func (i ResolverRuleVpcArgs) ToResolverRuleVpcOutputWithContext(ctx context.Context) ResolverRuleVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleVpcOutput)
}

// ResolverRuleVpcArrayInput is an input type that accepts ResolverRuleVpcArray and ResolverRuleVpcArrayOutput values.
// You can construct a concrete instance of `ResolverRuleVpcArrayInput` via:
//
//	ResolverRuleVpcArray{ ResolverRuleVpcArgs{...} }
type ResolverRuleVpcArrayInput interface {
	pulumi.Input

	ToResolverRuleVpcArrayOutput() ResolverRuleVpcArrayOutput
	ToResolverRuleVpcArrayOutputWithContext(context.Context) ResolverRuleVpcArrayOutput
}

type ResolverRuleVpcArray []ResolverRuleVpcInput

func (ResolverRuleVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleVpc)(nil)).Elem()
}

func (i ResolverRuleVpcArray) ToResolverRuleVpcArrayOutput() ResolverRuleVpcArrayOutput {
	return i.ToResolverRuleVpcArrayOutputWithContext(context.Background())
}

func (i ResolverRuleVpcArray) ToResolverRuleVpcArrayOutputWithContext(ctx context.Context) ResolverRuleVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRuleVpcArrayOutput)
}

type ResolverRuleVpcOutput struct{ *pulumi.OutputState }

func (ResolverRuleVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRuleVpc)(nil)).Elem()
}

func (o ResolverRuleVpcOutput) ToResolverRuleVpcOutput() ResolverRuleVpcOutput {
	return o
}

func (o ResolverRuleVpcOutput) ToResolverRuleVpcOutputWithContext(ctx context.Context) ResolverRuleVpcOutput {
	return o
}

// The region of the bind vpc. The default value is the region of the default provider config.
func (o ResolverRuleVpcOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRuleVpc) *string { return v.Region }).(pulumi.StringPtrOutput)
}

// The id of the bind vpc.
func (o ResolverRuleVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRuleVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

type ResolverRuleVpcArrayOutput struct{ *pulumi.OutputState }

func (ResolverRuleVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRuleVpc)(nil)).Elem()
}

func (o ResolverRuleVpcArrayOutput) ToResolverRuleVpcArrayOutput() ResolverRuleVpcArrayOutput {
	return o
}

func (o ResolverRuleVpcArrayOutput) ToResolverRuleVpcArrayOutputWithContext(ctx context.Context) ResolverRuleVpcArrayOutput {
	return o
}

func (o ResolverRuleVpcArrayOutput) Index(i pulumi.IntInput) ResolverRuleVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRuleVpc {
		return vs[0].([]ResolverRuleVpc)[vs[1].(int)]
	}).(ResolverRuleVpcOutput)
}

type ResolverRulesRule struct {
	BindVpcs []ResolverRulesRuleBindVpc `pulumi:"bindVpcs"`
	// The created time of the rule.
	CreatedAt string `pulumi:"createdAt"`
	// ID of the exit terminal node.
	EndpointId int `pulumi:"endpointId"`
	// The IP address and port of the DNS server outside of the VPC.
	ForwardIps []ResolverRulesRuleForwardIp `pulumi:"forwardIps"`
	// The id of the rule.
	Id string `pulumi:"id"`
	// The ISP of the exit IP address of the recursive DNS server.
	Line string `pulumi:"line"`
	// The name of the rule.
	Name string `pulumi:"name"`
	// The project name of the private zone resolver rule.
	ProjectName string `pulumi:"projectName"`
	// The id of the rule.
	RuleId int `pulumi:"ruleId"`
	// Tags.
	Tags []ResolverRulesRuleTag `pulumi:"tags"`
	// The type of the rule.
	Type string `pulumi:"type"`
	// The updated time of the rule.
	UpdatedAt string `pulumi:"updatedAt"`
	// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
	ZoneNames []string `pulumi:"zoneNames"`
}

// ResolverRulesRuleInput is an input type that accepts ResolverRulesRuleArgs and ResolverRulesRuleOutput values.
// You can construct a concrete instance of `ResolverRulesRuleInput` via:
//
//	ResolverRulesRuleArgs{...}
type ResolverRulesRuleInput interface {
	pulumi.Input

	ToResolverRulesRuleOutput() ResolverRulesRuleOutput
	ToResolverRulesRuleOutputWithContext(context.Context) ResolverRulesRuleOutput
}

type ResolverRulesRuleArgs struct {
	BindVpcs ResolverRulesRuleBindVpcArrayInput `pulumi:"bindVpcs"`
	// The created time of the rule.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// ID of the exit terminal node.
	EndpointId pulumi.IntInput `pulumi:"endpointId"`
	// The IP address and port of the DNS server outside of the VPC.
	ForwardIps ResolverRulesRuleForwardIpArrayInput `pulumi:"forwardIps"`
	// The id of the rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The ISP of the exit IP address of the recursive DNS server.
	Line pulumi.StringInput `pulumi:"line"`
	// The name of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The project name of the private zone resolver rule.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The id of the rule.
	RuleId pulumi.IntInput `pulumi:"ruleId"`
	// Tags.
	Tags ResolverRulesRuleTagArrayInput `pulumi:"tags"`
	// The type of the rule.
	Type pulumi.StringInput `pulumi:"type"`
	// The updated time of the rule.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
	ZoneNames pulumi.StringArrayInput `pulumi:"zoneNames"`
}

func (ResolverRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRule)(nil)).Elem()
}

func (i ResolverRulesRuleArgs) ToResolverRulesRuleOutput() ResolverRulesRuleOutput {
	return i.ToResolverRulesRuleOutputWithContext(context.Background())
}

func (i ResolverRulesRuleArgs) ToResolverRulesRuleOutputWithContext(ctx context.Context) ResolverRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleOutput)
}

// ResolverRulesRuleArrayInput is an input type that accepts ResolverRulesRuleArray and ResolverRulesRuleArrayOutput values.
// You can construct a concrete instance of `ResolverRulesRuleArrayInput` via:
//
//	ResolverRulesRuleArray{ ResolverRulesRuleArgs{...} }
type ResolverRulesRuleArrayInput interface {
	pulumi.Input

	ToResolverRulesRuleArrayOutput() ResolverRulesRuleArrayOutput
	ToResolverRulesRuleArrayOutputWithContext(context.Context) ResolverRulesRuleArrayOutput
}

type ResolverRulesRuleArray []ResolverRulesRuleInput

func (ResolverRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRule)(nil)).Elem()
}

func (i ResolverRulesRuleArray) ToResolverRulesRuleArrayOutput() ResolverRulesRuleArrayOutput {
	return i.ToResolverRulesRuleArrayOutputWithContext(context.Background())
}

func (i ResolverRulesRuleArray) ToResolverRulesRuleArrayOutputWithContext(ctx context.Context) ResolverRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleArrayOutput)
}

type ResolverRulesRuleOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRule)(nil)).Elem()
}

func (o ResolverRulesRuleOutput) ToResolverRulesRuleOutput() ResolverRulesRuleOutput {
	return o
}

func (o ResolverRulesRuleOutput) ToResolverRulesRuleOutputWithContext(ctx context.Context) ResolverRulesRuleOutput {
	return o
}

func (o ResolverRulesRuleOutput) BindVpcs() ResolverRulesRuleBindVpcArrayOutput {
	return o.ApplyT(func(v ResolverRulesRule) []ResolverRulesRuleBindVpc { return v.BindVpcs }).(ResolverRulesRuleBindVpcArrayOutput)
}

// The created time of the rule.
func (o ResolverRulesRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// ID of the exit terminal node.
func (o ResolverRulesRuleOutput) EndpointId() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverRulesRule) int { return v.EndpointId }).(pulumi.IntOutput)
}

// The IP address and port of the DNS server outside of the VPC.
func (o ResolverRulesRuleOutput) ForwardIps() ResolverRulesRuleForwardIpArrayOutput {
	return o.ApplyT(func(v ResolverRulesRule) []ResolverRulesRuleForwardIp { return v.ForwardIps }).(ResolverRulesRuleForwardIpArrayOutput)
}

// The id of the rule.
func (o ResolverRulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// The ISP of the exit IP address of the recursive DNS server.
func (o ResolverRulesRuleOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.Line }).(pulumi.StringOutput)
}

// The name of the rule.
func (o ResolverRulesRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.Name }).(pulumi.StringOutput)
}

// The project name of the private zone resolver rule.
func (o ResolverRulesRuleOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The id of the rule.
func (o ResolverRulesRuleOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverRulesRule) int { return v.RuleId }).(pulumi.IntOutput)
}

// Tags.
func (o ResolverRulesRuleOutput) Tags() ResolverRulesRuleTagArrayOutput {
	return o.ApplyT(func(v ResolverRulesRule) []ResolverRulesRuleTag { return v.Tags }).(ResolverRulesRuleTagArrayOutput)
}

// The type of the rule.
func (o ResolverRulesRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.Type }).(pulumi.StringOutput)
}

// The updated time of the rule.
func (o ResolverRulesRuleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRule) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
func (o ResolverRulesRuleOutput) ZoneNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResolverRulesRule) []string { return v.ZoneNames }).(pulumi.StringArrayOutput)
}

type ResolverRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRule)(nil)).Elem()
}

func (o ResolverRulesRuleArrayOutput) ToResolverRulesRuleArrayOutput() ResolverRulesRuleArrayOutput {
	return o
}

func (o ResolverRulesRuleArrayOutput) ToResolverRulesRuleArrayOutputWithContext(ctx context.Context) ResolverRulesRuleArrayOutput {
	return o
}

func (o ResolverRulesRuleArrayOutput) Index(i pulumi.IntInput) ResolverRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRulesRule {
		return vs[0].([]ResolverRulesRule)[vs[1].(int)]
	}).(ResolverRulesRuleOutput)
}

type ResolverRulesRuleBindVpc struct {
	// The account id of the bind vpc.
	AccountId string `pulumi:"accountId"`
	// The id of the rule.
	Id string `pulumi:"id"`
	// The region of the bind vpc.
	Region string `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName string `pulumi:"regionName"`
}

// ResolverRulesRuleBindVpcInput is an input type that accepts ResolverRulesRuleBindVpcArgs and ResolverRulesRuleBindVpcOutput values.
// You can construct a concrete instance of `ResolverRulesRuleBindVpcInput` via:
//
//	ResolverRulesRuleBindVpcArgs{...}
type ResolverRulesRuleBindVpcInput interface {
	pulumi.Input

	ToResolverRulesRuleBindVpcOutput() ResolverRulesRuleBindVpcOutput
	ToResolverRulesRuleBindVpcOutputWithContext(context.Context) ResolverRulesRuleBindVpcOutput
}

type ResolverRulesRuleBindVpcArgs struct {
	// The account id of the bind vpc.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The id of the rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The region of the bind vpc.
	Region pulumi.StringInput `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (ResolverRulesRuleBindVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleBindVpc)(nil)).Elem()
}

func (i ResolverRulesRuleBindVpcArgs) ToResolverRulesRuleBindVpcOutput() ResolverRulesRuleBindVpcOutput {
	return i.ToResolverRulesRuleBindVpcOutputWithContext(context.Background())
}

func (i ResolverRulesRuleBindVpcArgs) ToResolverRulesRuleBindVpcOutputWithContext(ctx context.Context) ResolverRulesRuleBindVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleBindVpcOutput)
}

// ResolverRulesRuleBindVpcArrayInput is an input type that accepts ResolverRulesRuleBindVpcArray and ResolverRulesRuleBindVpcArrayOutput values.
// You can construct a concrete instance of `ResolverRulesRuleBindVpcArrayInput` via:
//
//	ResolverRulesRuleBindVpcArray{ ResolverRulesRuleBindVpcArgs{...} }
type ResolverRulesRuleBindVpcArrayInput interface {
	pulumi.Input

	ToResolverRulesRuleBindVpcArrayOutput() ResolverRulesRuleBindVpcArrayOutput
	ToResolverRulesRuleBindVpcArrayOutputWithContext(context.Context) ResolverRulesRuleBindVpcArrayOutput
}

type ResolverRulesRuleBindVpcArray []ResolverRulesRuleBindVpcInput

func (ResolverRulesRuleBindVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleBindVpc)(nil)).Elem()
}

func (i ResolverRulesRuleBindVpcArray) ToResolverRulesRuleBindVpcArrayOutput() ResolverRulesRuleBindVpcArrayOutput {
	return i.ToResolverRulesRuleBindVpcArrayOutputWithContext(context.Background())
}

func (i ResolverRulesRuleBindVpcArray) ToResolverRulesRuleBindVpcArrayOutputWithContext(ctx context.Context) ResolverRulesRuleBindVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleBindVpcArrayOutput)
}

type ResolverRulesRuleBindVpcOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleBindVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleBindVpc)(nil)).Elem()
}

func (o ResolverRulesRuleBindVpcOutput) ToResolverRulesRuleBindVpcOutput() ResolverRulesRuleBindVpcOutput {
	return o
}

func (o ResolverRulesRuleBindVpcOutput) ToResolverRulesRuleBindVpcOutputWithContext(ctx context.Context) ResolverRulesRuleBindVpcOutput {
	return o
}

// The account id of the bind vpc.
func (o ResolverRulesRuleBindVpcOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleBindVpc) string { return v.AccountId }).(pulumi.StringOutput)
}

// The id of the rule.
func (o ResolverRulesRuleBindVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleBindVpc) string { return v.Id }).(pulumi.StringOutput)
}

// The region of the bind vpc.
func (o ResolverRulesRuleBindVpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleBindVpc) string { return v.Region }).(pulumi.StringOutput)
}

// The region name of the bind vpc.
func (o ResolverRulesRuleBindVpcOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleBindVpc) string { return v.RegionName }).(pulumi.StringOutput)
}

type ResolverRulesRuleBindVpcArrayOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleBindVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleBindVpc)(nil)).Elem()
}

func (o ResolverRulesRuleBindVpcArrayOutput) ToResolverRulesRuleBindVpcArrayOutput() ResolverRulesRuleBindVpcArrayOutput {
	return o
}

func (o ResolverRulesRuleBindVpcArrayOutput) ToResolverRulesRuleBindVpcArrayOutputWithContext(ctx context.Context) ResolverRulesRuleBindVpcArrayOutput {
	return o
}

func (o ResolverRulesRuleBindVpcArrayOutput) Index(i pulumi.IntInput) ResolverRulesRuleBindVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRulesRuleBindVpc {
		return vs[0].([]ResolverRulesRuleBindVpc)[vs[1].(int)]
	}).(ResolverRulesRuleBindVpcOutput)
}

type ResolverRulesRuleForwardIp struct {
	// The IP address of the DNS server outside of the VPC.
	Ip string `pulumi:"ip"`
	// The port of the DNS server outside of the VPC.
	Port int `pulumi:"port"`
}

// ResolverRulesRuleForwardIpInput is an input type that accepts ResolverRulesRuleForwardIpArgs and ResolverRulesRuleForwardIpOutput values.
// You can construct a concrete instance of `ResolverRulesRuleForwardIpInput` via:
//
//	ResolverRulesRuleForwardIpArgs{...}
type ResolverRulesRuleForwardIpInput interface {
	pulumi.Input

	ToResolverRulesRuleForwardIpOutput() ResolverRulesRuleForwardIpOutput
	ToResolverRulesRuleForwardIpOutputWithContext(context.Context) ResolverRulesRuleForwardIpOutput
}

type ResolverRulesRuleForwardIpArgs struct {
	// The IP address of the DNS server outside of the VPC.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port of the DNS server outside of the VPC.
	Port pulumi.IntInput `pulumi:"port"`
}

func (ResolverRulesRuleForwardIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleForwardIp)(nil)).Elem()
}

func (i ResolverRulesRuleForwardIpArgs) ToResolverRulesRuleForwardIpOutput() ResolverRulesRuleForwardIpOutput {
	return i.ToResolverRulesRuleForwardIpOutputWithContext(context.Background())
}

func (i ResolverRulesRuleForwardIpArgs) ToResolverRulesRuleForwardIpOutputWithContext(ctx context.Context) ResolverRulesRuleForwardIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleForwardIpOutput)
}

// ResolverRulesRuleForwardIpArrayInput is an input type that accepts ResolverRulesRuleForwardIpArray and ResolverRulesRuleForwardIpArrayOutput values.
// You can construct a concrete instance of `ResolverRulesRuleForwardIpArrayInput` via:
//
//	ResolverRulesRuleForwardIpArray{ ResolverRulesRuleForwardIpArgs{...} }
type ResolverRulesRuleForwardIpArrayInput interface {
	pulumi.Input

	ToResolverRulesRuleForwardIpArrayOutput() ResolverRulesRuleForwardIpArrayOutput
	ToResolverRulesRuleForwardIpArrayOutputWithContext(context.Context) ResolverRulesRuleForwardIpArrayOutput
}

type ResolverRulesRuleForwardIpArray []ResolverRulesRuleForwardIpInput

func (ResolverRulesRuleForwardIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleForwardIp)(nil)).Elem()
}

func (i ResolverRulesRuleForwardIpArray) ToResolverRulesRuleForwardIpArrayOutput() ResolverRulesRuleForwardIpArrayOutput {
	return i.ToResolverRulesRuleForwardIpArrayOutputWithContext(context.Background())
}

func (i ResolverRulesRuleForwardIpArray) ToResolverRulesRuleForwardIpArrayOutputWithContext(ctx context.Context) ResolverRulesRuleForwardIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleForwardIpArrayOutput)
}

type ResolverRulesRuleForwardIpOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleForwardIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleForwardIp)(nil)).Elem()
}

func (o ResolverRulesRuleForwardIpOutput) ToResolverRulesRuleForwardIpOutput() ResolverRulesRuleForwardIpOutput {
	return o
}

func (o ResolverRulesRuleForwardIpOutput) ToResolverRulesRuleForwardIpOutputWithContext(ctx context.Context) ResolverRulesRuleForwardIpOutput {
	return o
}

// The IP address of the DNS server outside of the VPC.
func (o ResolverRulesRuleForwardIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleForwardIp) string { return v.Ip }).(pulumi.StringOutput)
}

// The port of the DNS server outside of the VPC.
func (o ResolverRulesRuleForwardIpOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverRulesRuleForwardIp) int { return v.Port }).(pulumi.IntOutput)
}

type ResolverRulesRuleForwardIpArrayOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleForwardIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleForwardIp)(nil)).Elem()
}

func (o ResolverRulesRuleForwardIpArrayOutput) ToResolverRulesRuleForwardIpArrayOutput() ResolverRulesRuleForwardIpArrayOutput {
	return o
}

func (o ResolverRulesRuleForwardIpArrayOutput) ToResolverRulesRuleForwardIpArrayOutputWithContext(ctx context.Context) ResolverRulesRuleForwardIpArrayOutput {
	return o
}

func (o ResolverRulesRuleForwardIpArrayOutput) Index(i pulumi.IntInput) ResolverRulesRuleForwardIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRulesRuleForwardIp {
		return vs[0].([]ResolverRulesRuleForwardIp)[vs[1].(int)]
	}).(ResolverRulesRuleForwardIpOutput)
}

type ResolverRulesRuleTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ResolverRulesRuleTagInput is an input type that accepts ResolverRulesRuleTagArgs and ResolverRulesRuleTagOutput values.
// You can construct a concrete instance of `ResolverRulesRuleTagInput` via:
//
//	ResolverRulesRuleTagArgs{...}
type ResolverRulesRuleTagInput interface {
	pulumi.Input

	ToResolverRulesRuleTagOutput() ResolverRulesRuleTagOutput
	ToResolverRulesRuleTagOutputWithContext(context.Context) ResolverRulesRuleTagOutput
}

type ResolverRulesRuleTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ResolverRulesRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleTag)(nil)).Elem()
}

func (i ResolverRulesRuleTagArgs) ToResolverRulesRuleTagOutput() ResolverRulesRuleTagOutput {
	return i.ToResolverRulesRuleTagOutputWithContext(context.Background())
}

func (i ResolverRulesRuleTagArgs) ToResolverRulesRuleTagOutputWithContext(ctx context.Context) ResolverRulesRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleTagOutput)
}

// ResolverRulesRuleTagArrayInput is an input type that accepts ResolverRulesRuleTagArray and ResolverRulesRuleTagArrayOutput values.
// You can construct a concrete instance of `ResolverRulesRuleTagArrayInput` via:
//
//	ResolverRulesRuleTagArray{ ResolverRulesRuleTagArgs{...} }
type ResolverRulesRuleTagArrayInput interface {
	pulumi.Input

	ToResolverRulesRuleTagArrayOutput() ResolverRulesRuleTagArrayOutput
	ToResolverRulesRuleTagArrayOutputWithContext(context.Context) ResolverRulesRuleTagArrayOutput
}

type ResolverRulesRuleTagArray []ResolverRulesRuleTagInput

func (ResolverRulesRuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleTag)(nil)).Elem()
}

func (i ResolverRulesRuleTagArray) ToResolverRulesRuleTagArrayOutput() ResolverRulesRuleTagArrayOutput {
	return i.ToResolverRulesRuleTagArrayOutputWithContext(context.Background())
}

func (i ResolverRulesRuleTagArray) ToResolverRulesRuleTagArrayOutputWithContext(ctx context.Context) ResolverRulesRuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesRuleTagArrayOutput)
}

type ResolverRulesRuleTagOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesRuleTag)(nil)).Elem()
}

func (o ResolverRulesRuleTagOutput) ToResolverRulesRuleTagOutput() ResolverRulesRuleTagOutput {
	return o
}

func (o ResolverRulesRuleTagOutput) ToResolverRulesRuleTagOutputWithContext(ctx context.Context) ResolverRulesRuleTagOutput {
	return o
}

// The Key of Tags.
func (o ResolverRulesRuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ResolverRulesRuleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverRulesRuleTag) string { return v.Value }).(pulumi.StringOutput)
}

type ResolverRulesRuleTagArrayOutput struct{ *pulumi.OutputState }

func (ResolverRulesRuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesRuleTag)(nil)).Elem()
}

func (o ResolverRulesRuleTagArrayOutput) ToResolverRulesRuleTagArrayOutput() ResolverRulesRuleTagArrayOutput {
	return o
}

func (o ResolverRulesRuleTagArrayOutput) ToResolverRulesRuleTagArrayOutputWithContext(ctx context.Context) ResolverRulesRuleTagArrayOutput {
	return o
}

func (o ResolverRulesRuleTagArrayOutput) Index(i pulumi.IntInput) ResolverRulesRuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRulesRuleTag {
		return vs[0].([]ResolverRulesRuleTag)[vs[1].(int)]
	}).(ResolverRulesRuleTagOutput)
}

type ResolverRulesTagFilter struct {
	// The key of the tag.
	Key *string `pulumi:"key"`
	// The values of the tag.
	Values []string `pulumi:"values"`
}

// ResolverRulesTagFilterInput is an input type that accepts ResolverRulesTagFilterArgs and ResolverRulesTagFilterOutput values.
// You can construct a concrete instance of `ResolverRulesTagFilterInput` via:
//
//	ResolverRulesTagFilterArgs{...}
type ResolverRulesTagFilterInput interface {
	pulumi.Input

	ToResolverRulesTagFilterOutput() ResolverRulesTagFilterOutput
	ToResolverRulesTagFilterOutputWithContext(context.Context) ResolverRulesTagFilterOutput
}

type ResolverRulesTagFilterArgs struct {
	// The key of the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The values of the tag.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ResolverRulesTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesTagFilter)(nil)).Elem()
}

func (i ResolverRulesTagFilterArgs) ToResolverRulesTagFilterOutput() ResolverRulesTagFilterOutput {
	return i.ToResolverRulesTagFilterOutputWithContext(context.Background())
}

func (i ResolverRulesTagFilterArgs) ToResolverRulesTagFilterOutputWithContext(ctx context.Context) ResolverRulesTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesTagFilterOutput)
}

// ResolverRulesTagFilterArrayInput is an input type that accepts ResolverRulesTagFilterArray and ResolverRulesTagFilterArrayOutput values.
// You can construct a concrete instance of `ResolverRulesTagFilterArrayInput` via:
//
//	ResolverRulesTagFilterArray{ ResolverRulesTagFilterArgs{...} }
type ResolverRulesTagFilterArrayInput interface {
	pulumi.Input

	ToResolverRulesTagFilterArrayOutput() ResolverRulesTagFilterArrayOutput
	ToResolverRulesTagFilterArrayOutputWithContext(context.Context) ResolverRulesTagFilterArrayOutput
}

type ResolverRulesTagFilterArray []ResolverRulesTagFilterInput

func (ResolverRulesTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesTagFilter)(nil)).Elem()
}

func (i ResolverRulesTagFilterArray) ToResolverRulesTagFilterArrayOutput() ResolverRulesTagFilterArrayOutput {
	return i.ToResolverRulesTagFilterArrayOutputWithContext(context.Background())
}

func (i ResolverRulesTagFilterArray) ToResolverRulesTagFilterArrayOutputWithContext(ctx context.Context) ResolverRulesTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResolverRulesTagFilterArrayOutput)
}

type ResolverRulesTagFilterOutput struct{ *pulumi.OutputState }

func (ResolverRulesTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverRulesTagFilter)(nil)).Elem()
}

func (o ResolverRulesTagFilterOutput) ToResolverRulesTagFilterOutput() ResolverRulesTagFilterOutput {
	return o
}

func (o ResolverRulesTagFilterOutput) ToResolverRulesTagFilterOutputWithContext(ctx context.Context) ResolverRulesTagFilterOutput {
	return o
}

// The key of the tag.
func (o ResolverRulesTagFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverRulesTagFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The values of the tag.
func (o ResolverRulesTagFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ResolverRulesTagFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ResolverRulesTagFilterArrayOutput struct{ *pulumi.OutputState }

func (ResolverRulesTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ResolverRulesTagFilter)(nil)).Elem()
}

func (o ResolverRulesTagFilterArrayOutput) ToResolverRulesTagFilterArrayOutput() ResolverRulesTagFilterArrayOutput {
	return o
}

func (o ResolverRulesTagFilterArrayOutput) ToResolverRulesTagFilterArrayOutputWithContext(ctx context.Context) ResolverRulesTagFilterArrayOutput {
	return o
}

func (o ResolverRulesTagFilterArrayOutput) Index(i pulumi.IntInput) ResolverRulesTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ResolverRulesTagFilter {
		return vs[0].([]ResolverRulesTagFilter)[vs[1].(int)]
	}).(ResolverRulesTagFilterOutput)
}

type GetPrivateZonesPrivateZone struct {
	// The Bind vpc info of the private zone.
	BindVpcs []GetPrivateZonesPrivateZoneBindVpc `pulumi:"bindVpcs"`
	// The created time of the private zone.
	CreatedAt string `pulumi:"createdAt"`
	// The id of the private zone.
	Id string `pulumi:"id"`
	// The account id of the last operator who created the private zone.
	LastOperator string `pulumi:"lastOperator"`
	// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
	LineMode int `pulumi:"lineMode"`
	// The project name of the private zone.
	ProjectName string `pulumi:"projectName"`
	// The record count of the private zone.
	RecordCount int `pulumi:"recordCount"`
	// Whether the recursion mode of Private Zone is enabled.
	RecursionMode bool `pulumi:"recursionMode"`
	// The region of Private Zone.
	Regions []string `pulumi:"regions"`
	// The remark of the private zone.
	Remark string `pulumi:"remark"`
	// Tags.
	Tags []GetPrivateZonesPrivateZoneTag `pulumi:"tags"`
	// The updated time of the private zone.
	UpdatedAt string `pulumi:"updatedAt"`
	// The zid of Private Zone.
	Zid int `pulumi:"zid"`
	// The name of Private Zone.
	ZoneName string `pulumi:"zoneName"`
}

// GetPrivateZonesPrivateZoneInput is an input type that accepts GetPrivateZonesPrivateZoneArgs and GetPrivateZonesPrivateZoneOutput values.
// You can construct a concrete instance of `GetPrivateZonesPrivateZoneInput` via:
//
//	GetPrivateZonesPrivateZoneArgs{...}
type GetPrivateZonesPrivateZoneInput interface {
	pulumi.Input

	ToGetPrivateZonesPrivateZoneOutput() GetPrivateZonesPrivateZoneOutput
	ToGetPrivateZonesPrivateZoneOutputWithContext(context.Context) GetPrivateZonesPrivateZoneOutput
}

type GetPrivateZonesPrivateZoneArgs struct {
	// The Bind vpc info of the private zone.
	BindVpcs GetPrivateZonesPrivateZoneBindVpcArrayInput `pulumi:"bindVpcs"`
	// The created time of the private zone.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The id of the private zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The account id of the last operator who created the private zone.
	LastOperator pulumi.StringInput `pulumi:"lastOperator"`
	// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
	LineMode pulumi.IntInput `pulumi:"lineMode"`
	// The project name of the private zone.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The record count of the private zone.
	RecordCount pulumi.IntInput `pulumi:"recordCount"`
	// Whether the recursion mode of Private Zone is enabled.
	RecursionMode pulumi.BoolInput `pulumi:"recursionMode"`
	// The region of Private Zone.
	Regions pulumi.StringArrayInput `pulumi:"regions"`
	// The remark of the private zone.
	Remark pulumi.StringInput `pulumi:"remark"`
	// Tags.
	Tags GetPrivateZonesPrivateZoneTagArrayInput `pulumi:"tags"`
	// The updated time of the private zone.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The zid of Private Zone.
	Zid pulumi.IntInput `pulumi:"zid"`
	// The name of Private Zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (GetPrivateZonesPrivateZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesPrivateZone)(nil)).Elem()
}

func (i GetPrivateZonesPrivateZoneArgs) ToGetPrivateZonesPrivateZoneOutput() GetPrivateZonesPrivateZoneOutput {
	return i.ToGetPrivateZonesPrivateZoneOutputWithContext(context.Background())
}

func (i GetPrivateZonesPrivateZoneArgs) ToGetPrivateZonesPrivateZoneOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesPrivateZoneOutput)
}

// GetPrivateZonesPrivateZoneArrayInput is an input type that accepts GetPrivateZonesPrivateZoneArray and GetPrivateZonesPrivateZoneArrayOutput values.
// You can construct a concrete instance of `GetPrivateZonesPrivateZoneArrayInput` via:
//
//	GetPrivateZonesPrivateZoneArray{ GetPrivateZonesPrivateZoneArgs{...} }
type GetPrivateZonesPrivateZoneArrayInput interface {
	pulumi.Input

	ToGetPrivateZonesPrivateZoneArrayOutput() GetPrivateZonesPrivateZoneArrayOutput
	ToGetPrivateZonesPrivateZoneArrayOutputWithContext(context.Context) GetPrivateZonesPrivateZoneArrayOutput
}

type GetPrivateZonesPrivateZoneArray []GetPrivateZonesPrivateZoneInput

func (GetPrivateZonesPrivateZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesPrivateZone)(nil)).Elem()
}

func (i GetPrivateZonesPrivateZoneArray) ToGetPrivateZonesPrivateZoneArrayOutput() GetPrivateZonesPrivateZoneArrayOutput {
	return i.ToGetPrivateZonesPrivateZoneArrayOutputWithContext(context.Background())
}

func (i GetPrivateZonesPrivateZoneArray) ToGetPrivateZonesPrivateZoneArrayOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesPrivateZoneArrayOutput)
}

type GetPrivateZonesPrivateZoneOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesPrivateZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesPrivateZone)(nil)).Elem()
}

func (o GetPrivateZonesPrivateZoneOutput) ToGetPrivateZonesPrivateZoneOutput() GetPrivateZonesPrivateZoneOutput {
	return o
}

func (o GetPrivateZonesPrivateZoneOutput) ToGetPrivateZonesPrivateZoneOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneOutput {
	return o
}

// The Bind vpc info of the private zone.
func (o GetPrivateZonesPrivateZoneOutput) BindVpcs() GetPrivateZonesPrivateZoneBindVpcArrayOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) []GetPrivateZonesPrivateZoneBindVpc { return v.BindVpcs }).(GetPrivateZonesPrivateZoneBindVpcArrayOutput)
}

// The created time of the private zone.
func (o GetPrivateZonesPrivateZoneOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The id of the private zone.
func (o GetPrivateZonesPrivateZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) string { return v.Id }).(pulumi.StringOutput)
}

// The account id of the last operator who created the private zone.
func (o GetPrivateZonesPrivateZoneOutput) LastOperator() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) string { return v.LastOperator }).(pulumi.StringOutput)
}

// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
func (o GetPrivateZonesPrivateZoneOutput) LineMode() pulumi.IntOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) int { return v.LineMode }).(pulumi.IntOutput)
}

// The project name of the private zone.
func (o GetPrivateZonesPrivateZoneOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The record count of the private zone.
func (o GetPrivateZonesPrivateZoneOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) int { return v.RecordCount }).(pulumi.IntOutput)
}

// Whether the recursion mode of Private Zone is enabled.
func (o GetPrivateZonesPrivateZoneOutput) RecursionMode() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) bool { return v.RecursionMode }).(pulumi.BoolOutput)
}

// The region of Private Zone.
func (o GetPrivateZonesPrivateZoneOutput) Regions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) []string { return v.Regions }).(pulumi.StringArrayOutput)
}

// The remark of the private zone.
func (o GetPrivateZonesPrivateZoneOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) string { return v.Remark }).(pulumi.StringOutput)
}

// Tags.
func (o GetPrivateZonesPrivateZoneOutput) Tags() GetPrivateZonesPrivateZoneTagArrayOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) []GetPrivateZonesPrivateZoneTag { return v.Tags }).(GetPrivateZonesPrivateZoneTagArrayOutput)
}

// The updated time of the private zone.
func (o GetPrivateZonesPrivateZoneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The zid of Private Zone.
func (o GetPrivateZonesPrivateZoneOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) int { return v.Zid }).(pulumi.IntOutput)
}

// The name of Private Zone.
func (o GetPrivateZonesPrivateZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type GetPrivateZonesPrivateZoneArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesPrivateZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesPrivateZone)(nil)).Elem()
}

func (o GetPrivateZonesPrivateZoneArrayOutput) ToGetPrivateZonesPrivateZoneArrayOutput() GetPrivateZonesPrivateZoneArrayOutput {
	return o
}

func (o GetPrivateZonesPrivateZoneArrayOutput) ToGetPrivateZonesPrivateZoneArrayOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneArrayOutput {
	return o
}

func (o GetPrivateZonesPrivateZoneArrayOutput) Index(i pulumi.IntInput) GetPrivateZonesPrivateZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateZonesPrivateZone {
		return vs[0].([]GetPrivateZonesPrivateZone)[vs[1].(int)]
	}).(GetPrivateZonesPrivateZoneOutput)
}

type GetPrivateZonesPrivateZoneBindVpc struct {
	// The account id of the bind vpc.
	AccountId string `pulumi:"accountId"`
	// The id of the private zone.
	Id string `pulumi:"id"`
	// The region of Private Zone.
	Region string `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName string `pulumi:"regionName"`
}

// GetPrivateZonesPrivateZoneBindVpcInput is an input type that accepts GetPrivateZonesPrivateZoneBindVpcArgs and GetPrivateZonesPrivateZoneBindVpcOutput values.
// You can construct a concrete instance of `GetPrivateZonesPrivateZoneBindVpcInput` via:
//
//	GetPrivateZonesPrivateZoneBindVpcArgs{...}
type GetPrivateZonesPrivateZoneBindVpcInput interface {
	pulumi.Input

	ToGetPrivateZonesPrivateZoneBindVpcOutput() GetPrivateZonesPrivateZoneBindVpcOutput
	ToGetPrivateZonesPrivateZoneBindVpcOutputWithContext(context.Context) GetPrivateZonesPrivateZoneBindVpcOutput
}

type GetPrivateZonesPrivateZoneBindVpcArgs struct {
	// The account id of the bind vpc.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The id of the private zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The region of Private Zone.
	Region pulumi.StringInput `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (GetPrivateZonesPrivateZoneBindVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (i GetPrivateZonesPrivateZoneBindVpcArgs) ToGetPrivateZonesPrivateZoneBindVpcOutput() GetPrivateZonesPrivateZoneBindVpcOutput {
	return i.ToGetPrivateZonesPrivateZoneBindVpcOutputWithContext(context.Background())
}

func (i GetPrivateZonesPrivateZoneBindVpcArgs) ToGetPrivateZonesPrivateZoneBindVpcOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneBindVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesPrivateZoneBindVpcOutput)
}

// GetPrivateZonesPrivateZoneBindVpcArrayInput is an input type that accepts GetPrivateZonesPrivateZoneBindVpcArray and GetPrivateZonesPrivateZoneBindVpcArrayOutput values.
// You can construct a concrete instance of `GetPrivateZonesPrivateZoneBindVpcArrayInput` via:
//
//	GetPrivateZonesPrivateZoneBindVpcArray{ GetPrivateZonesPrivateZoneBindVpcArgs{...} }
type GetPrivateZonesPrivateZoneBindVpcArrayInput interface {
	pulumi.Input

	ToGetPrivateZonesPrivateZoneBindVpcArrayOutput() GetPrivateZonesPrivateZoneBindVpcArrayOutput
	ToGetPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(context.Context) GetPrivateZonesPrivateZoneBindVpcArrayOutput
}

type GetPrivateZonesPrivateZoneBindVpcArray []GetPrivateZonesPrivateZoneBindVpcInput

func (GetPrivateZonesPrivateZoneBindVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (i GetPrivateZonesPrivateZoneBindVpcArray) ToGetPrivateZonesPrivateZoneBindVpcArrayOutput() GetPrivateZonesPrivateZoneBindVpcArrayOutput {
	return i.ToGetPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(context.Background())
}

func (i GetPrivateZonesPrivateZoneBindVpcArray) ToGetPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneBindVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesPrivateZoneBindVpcArrayOutput)
}

type GetPrivateZonesPrivateZoneBindVpcOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesPrivateZoneBindVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (o GetPrivateZonesPrivateZoneBindVpcOutput) ToGetPrivateZonesPrivateZoneBindVpcOutput() GetPrivateZonesPrivateZoneBindVpcOutput {
	return o
}

func (o GetPrivateZonesPrivateZoneBindVpcOutput) ToGetPrivateZonesPrivateZoneBindVpcOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneBindVpcOutput {
	return o
}

// The account id of the bind vpc.
func (o GetPrivateZonesPrivateZoneBindVpcOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZoneBindVpc) string { return v.AccountId }).(pulumi.StringOutput)
}

// The id of the private zone.
func (o GetPrivateZonesPrivateZoneBindVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZoneBindVpc) string { return v.Id }).(pulumi.StringOutput)
}

// The region of Private Zone.
func (o GetPrivateZonesPrivateZoneBindVpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZoneBindVpc) string { return v.Region }).(pulumi.StringOutput)
}

// The region name of the bind vpc.
func (o GetPrivateZonesPrivateZoneBindVpcOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZoneBindVpc) string { return v.RegionName }).(pulumi.StringOutput)
}

type GetPrivateZonesPrivateZoneBindVpcArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesPrivateZoneBindVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesPrivateZoneBindVpc)(nil)).Elem()
}

func (o GetPrivateZonesPrivateZoneBindVpcArrayOutput) ToGetPrivateZonesPrivateZoneBindVpcArrayOutput() GetPrivateZonesPrivateZoneBindVpcArrayOutput {
	return o
}

func (o GetPrivateZonesPrivateZoneBindVpcArrayOutput) ToGetPrivateZonesPrivateZoneBindVpcArrayOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneBindVpcArrayOutput {
	return o
}

func (o GetPrivateZonesPrivateZoneBindVpcArrayOutput) Index(i pulumi.IntInput) GetPrivateZonesPrivateZoneBindVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateZonesPrivateZoneBindVpc {
		return vs[0].([]GetPrivateZonesPrivateZoneBindVpc)[vs[1].(int)]
	}).(GetPrivateZonesPrivateZoneBindVpcOutput)
}

type GetPrivateZonesPrivateZoneTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetPrivateZonesPrivateZoneTagInput is an input type that accepts GetPrivateZonesPrivateZoneTagArgs and GetPrivateZonesPrivateZoneTagOutput values.
// You can construct a concrete instance of `GetPrivateZonesPrivateZoneTagInput` via:
//
//	GetPrivateZonesPrivateZoneTagArgs{...}
type GetPrivateZonesPrivateZoneTagInput interface {
	pulumi.Input

	ToGetPrivateZonesPrivateZoneTagOutput() GetPrivateZonesPrivateZoneTagOutput
	ToGetPrivateZonesPrivateZoneTagOutputWithContext(context.Context) GetPrivateZonesPrivateZoneTagOutput
}

type GetPrivateZonesPrivateZoneTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetPrivateZonesPrivateZoneTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesPrivateZoneTag)(nil)).Elem()
}

func (i GetPrivateZonesPrivateZoneTagArgs) ToGetPrivateZonesPrivateZoneTagOutput() GetPrivateZonesPrivateZoneTagOutput {
	return i.ToGetPrivateZonesPrivateZoneTagOutputWithContext(context.Background())
}

func (i GetPrivateZonesPrivateZoneTagArgs) ToGetPrivateZonesPrivateZoneTagOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesPrivateZoneTagOutput)
}

// GetPrivateZonesPrivateZoneTagArrayInput is an input type that accepts GetPrivateZonesPrivateZoneTagArray and GetPrivateZonesPrivateZoneTagArrayOutput values.
// You can construct a concrete instance of `GetPrivateZonesPrivateZoneTagArrayInput` via:
//
//	GetPrivateZonesPrivateZoneTagArray{ GetPrivateZonesPrivateZoneTagArgs{...} }
type GetPrivateZonesPrivateZoneTagArrayInput interface {
	pulumi.Input

	ToGetPrivateZonesPrivateZoneTagArrayOutput() GetPrivateZonesPrivateZoneTagArrayOutput
	ToGetPrivateZonesPrivateZoneTagArrayOutputWithContext(context.Context) GetPrivateZonesPrivateZoneTagArrayOutput
}

type GetPrivateZonesPrivateZoneTagArray []GetPrivateZonesPrivateZoneTagInput

func (GetPrivateZonesPrivateZoneTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesPrivateZoneTag)(nil)).Elem()
}

func (i GetPrivateZonesPrivateZoneTagArray) ToGetPrivateZonesPrivateZoneTagArrayOutput() GetPrivateZonesPrivateZoneTagArrayOutput {
	return i.ToGetPrivateZonesPrivateZoneTagArrayOutputWithContext(context.Background())
}

func (i GetPrivateZonesPrivateZoneTagArray) ToGetPrivateZonesPrivateZoneTagArrayOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesPrivateZoneTagArrayOutput)
}

type GetPrivateZonesPrivateZoneTagOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesPrivateZoneTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesPrivateZoneTag)(nil)).Elem()
}

func (o GetPrivateZonesPrivateZoneTagOutput) ToGetPrivateZonesPrivateZoneTagOutput() GetPrivateZonesPrivateZoneTagOutput {
	return o
}

func (o GetPrivateZonesPrivateZoneTagOutput) ToGetPrivateZonesPrivateZoneTagOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneTagOutput {
	return o
}

// The Key of Tags.
func (o GetPrivateZonesPrivateZoneTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZoneTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetPrivateZonesPrivateZoneTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivateZonesPrivateZoneTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetPrivateZonesPrivateZoneTagArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesPrivateZoneTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesPrivateZoneTag)(nil)).Elem()
}

func (o GetPrivateZonesPrivateZoneTagArrayOutput) ToGetPrivateZonesPrivateZoneTagArrayOutput() GetPrivateZonesPrivateZoneTagArrayOutput {
	return o
}

func (o GetPrivateZonesPrivateZoneTagArrayOutput) ToGetPrivateZonesPrivateZoneTagArrayOutputWithContext(ctx context.Context) GetPrivateZonesPrivateZoneTagArrayOutput {
	return o
}

func (o GetPrivateZonesPrivateZoneTagArrayOutput) Index(i pulumi.IntInput) GetPrivateZonesPrivateZoneTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateZonesPrivateZoneTag {
		return vs[0].([]GetPrivateZonesPrivateZoneTag)[vs[1].(int)]
	}).(GetPrivateZonesPrivateZoneTagOutput)
}

type GetPrivateZonesTagFilter struct {
	// The key of the tag.
	Key *string `pulumi:"key"`
	// The values of the tag.
	Values []string `pulumi:"values"`
}

// GetPrivateZonesTagFilterInput is an input type that accepts GetPrivateZonesTagFilterArgs and GetPrivateZonesTagFilterOutput values.
// You can construct a concrete instance of `GetPrivateZonesTagFilterInput` via:
//
//	GetPrivateZonesTagFilterArgs{...}
type GetPrivateZonesTagFilterInput interface {
	pulumi.Input

	ToGetPrivateZonesTagFilterOutput() GetPrivateZonesTagFilterOutput
	ToGetPrivateZonesTagFilterOutputWithContext(context.Context) GetPrivateZonesTagFilterOutput
}

type GetPrivateZonesTagFilterArgs struct {
	// The key of the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The values of the tag.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetPrivateZonesTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesTagFilter)(nil)).Elem()
}

func (i GetPrivateZonesTagFilterArgs) ToGetPrivateZonesTagFilterOutput() GetPrivateZonesTagFilterOutput {
	return i.ToGetPrivateZonesTagFilterOutputWithContext(context.Background())
}

func (i GetPrivateZonesTagFilterArgs) ToGetPrivateZonesTagFilterOutputWithContext(ctx context.Context) GetPrivateZonesTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesTagFilterOutput)
}

// GetPrivateZonesTagFilterArrayInput is an input type that accepts GetPrivateZonesTagFilterArray and GetPrivateZonesTagFilterArrayOutput values.
// You can construct a concrete instance of `GetPrivateZonesTagFilterArrayInput` via:
//
//	GetPrivateZonesTagFilterArray{ GetPrivateZonesTagFilterArgs{...} }
type GetPrivateZonesTagFilterArrayInput interface {
	pulumi.Input

	ToGetPrivateZonesTagFilterArrayOutput() GetPrivateZonesTagFilterArrayOutput
	ToGetPrivateZonesTagFilterArrayOutputWithContext(context.Context) GetPrivateZonesTagFilterArrayOutput
}

type GetPrivateZonesTagFilterArray []GetPrivateZonesTagFilterInput

func (GetPrivateZonesTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesTagFilter)(nil)).Elem()
}

func (i GetPrivateZonesTagFilterArray) ToGetPrivateZonesTagFilterArrayOutput() GetPrivateZonesTagFilterArrayOutput {
	return i.ToGetPrivateZonesTagFilterArrayOutputWithContext(context.Background())
}

func (i GetPrivateZonesTagFilterArray) ToGetPrivateZonesTagFilterArrayOutputWithContext(ctx context.Context) GetPrivateZonesTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivateZonesTagFilterArrayOutput)
}

type GetPrivateZonesTagFilterOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivateZonesTagFilter)(nil)).Elem()
}

func (o GetPrivateZonesTagFilterOutput) ToGetPrivateZonesTagFilterOutput() GetPrivateZonesTagFilterOutput {
	return o
}

func (o GetPrivateZonesTagFilterOutput) ToGetPrivateZonesTagFilterOutputWithContext(ctx context.Context) GetPrivateZonesTagFilterOutput {
	return o
}

// The key of the tag.
func (o GetPrivateZonesTagFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPrivateZonesTagFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The values of the tag.
func (o GetPrivateZonesTagFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetPrivateZonesTagFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetPrivateZonesTagFilterArrayOutput struct{ *pulumi.OutputState }

func (GetPrivateZonesTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivateZonesTagFilter)(nil)).Elem()
}

func (o GetPrivateZonesTagFilterArrayOutput) ToGetPrivateZonesTagFilterArrayOutput() GetPrivateZonesTagFilterArrayOutput {
	return o
}

func (o GetPrivateZonesTagFilterArrayOutput) ToGetPrivateZonesTagFilterArrayOutputWithContext(ctx context.Context) GetPrivateZonesTagFilterArrayOutput {
	return o
}

func (o GetPrivateZonesTagFilterArrayOutput) Index(i pulumi.IntInput) GetPrivateZonesTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivateZonesTagFilter {
		return vs[0].([]GetPrivateZonesTagFilter)[vs[1].(int)]
	}).(GetPrivateZonesTagFilterOutput)
}

type GetRecordSetsRecordSet struct {
	// The Complete domain name of the private zone record.
	Fqdn string `pulumi:"fqdn"`
	// The host of Private Zone Record Set.
	Host string `pulumi:"host"`
	// The subnet id of the private zone record. This field is only effected when the `intelligentMode` of the private zone is true.
	Line string `pulumi:"line"`
	// The id of Private Zone Record Set.
	RecordSetId string `pulumi:"recordSetId"`
	// The type of the private zone record.
	Type string `pulumi:"type"`
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled bool `pulumi:"weightEnabled"`
}

// GetRecordSetsRecordSetInput is an input type that accepts GetRecordSetsRecordSetArgs and GetRecordSetsRecordSetOutput values.
// You can construct a concrete instance of `GetRecordSetsRecordSetInput` via:
//
//	GetRecordSetsRecordSetArgs{...}
type GetRecordSetsRecordSetInput interface {
	pulumi.Input

	ToGetRecordSetsRecordSetOutput() GetRecordSetsRecordSetOutput
	ToGetRecordSetsRecordSetOutputWithContext(context.Context) GetRecordSetsRecordSetOutput
}

type GetRecordSetsRecordSetArgs struct {
	// The Complete domain name of the private zone record.
	Fqdn pulumi.StringInput `pulumi:"fqdn"`
	// The host of Private Zone Record Set.
	Host pulumi.StringInput `pulumi:"host"`
	// The subnet id of the private zone record. This field is only effected when the `intelligentMode` of the private zone is true.
	Line pulumi.StringInput `pulumi:"line"`
	// The id of Private Zone Record Set.
	RecordSetId pulumi.StringInput `pulumi:"recordSetId"`
	// The type of the private zone record.
	Type pulumi.StringInput `pulumi:"type"`
	// Whether to enable the load balance of the private zone record set.
	WeightEnabled pulumi.BoolInput `pulumi:"weightEnabled"`
}

func (GetRecordSetsRecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordSetsRecordSet)(nil)).Elem()
}

func (i GetRecordSetsRecordSetArgs) ToGetRecordSetsRecordSetOutput() GetRecordSetsRecordSetOutput {
	return i.ToGetRecordSetsRecordSetOutputWithContext(context.Background())
}

func (i GetRecordSetsRecordSetArgs) ToGetRecordSetsRecordSetOutputWithContext(ctx context.Context) GetRecordSetsRecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordSetsRecordSetOutput)
}

// GetRecordSetsRecordSetArrayInput is an input type that accepts GetRecordSetsRecordSetArray and GetRecordSetsRecordSetArrayOutput values.
// You can construct a concrete instance of `GetRecordSetsRecordSetArrayInput` via:
//
//	GetRecordSetsRecordSetArray{ GetRecordSetsRecordSetArgs{...} }
type GetRecordSetsRecordSetArrayInput interface {
	pulumi.Input

	ToGetRecordSetsRecordSetArrayOutput() GetRecordSetsRecordSetArrayOutput
	ToGetRecordSetsRecordSetArrayOutputWithContext(context.Context) GetRecordSetsRecordSetArrayOutput
}

type GetRecordSetsRecordSetArray []GetRecordSetsRecordSetInput

func (GetRecordSetsRecordSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordSetsRecordSet)(nil)).Elem()
}

func (i GetRecordSetsRecordSetArray) ToGetRecordSetsRecordSetArrayOutput() GetRecordSetsRecordSetArrayOutput {
	return i.ToGetRecordSetsRecordSetArrayOutputWithContext(context.Background())
}

func (i GetRecordSetsRecordSetArray) ToGetRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) GetRecordSetsRecordSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordSetsRecordSetArrayOutput)
}

type GetRecordSetsRecordSetOutput struct{ *pulumi.OutputState }

func (GetRecordSetsRecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordSetsRecordSet)(nil)).Elem()
}

func (o GetRecordSetsRecordSetOutput) ToGetRecordSetsRecordSetOutput() GetRecordSetsRecordSetOutput {
	return o
}

func (o GetRecordSetsRecordSetOutput) ToGetRecordSetsRecordSetOutputWithContext(ctx context.Context) GetRecordSetsRecordSetOutput {
	return o
}

// The Complete domain name of the private zone record.
func (o GetRecordSetsRecordSetOutput) Fqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.Fqdn }).(pulumi.StringOutput)
}

// The host of Private Zone Record Set.
func (o GetRecordSetsRecordSetOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.Host }).(pulumi.StringOutput)
}

// The subnet id of the private zone record. This field is only effected when the `intelligentMode` of the private zone is true.
func (o GetRecordSetsRecordSetOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.Line }).(pulumi.StringOutput)
}

// The id of Private Zone Record Set.
func (o GetRecordSetsRecordSetOutput) RecordSetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.RecordSetId }).(pulumi.StringOutput)
}

// The type of the private zone record.
func (o GetRecordSetsRecordSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.Type }).(pulumi.StringOutput)
}

// Whether to enable the load balance of the private zone record set.
func (o GetRecordSetsRecordSetOutput) WeightEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) bool { return v.WeightEnabled }).(pulumi.BoolOutput)
}

type GetRecordSetsRecordSetArrayOutput struct{ *pulumi.OutputState }

func (GetRecordSetsRecordSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordSetsRecordSet)(nil)).Elem()
}

func (o GetRecordSetsRecordSetArrayOutput) ToGetRecordSetsRecordSetArrayOutput() GetRecordSetsRecordSetArrayOutput {
	return o
}

func (o GetRecordSetsRecordSetArrayOutput) ToGetRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) GetRecordSetsRecordSetArrayOutput {
	return o
}

func (o GetRecordSetsRecordSetArrayOutput) Index(i pulumi.IntInput) GetRecordSetsRecordSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordSetsRecordSet {
		return vs[0].([]GetRecordSetsRecordSet)[vs[1].(int)]
	}).(GetRecordSetsRecordSetOutput)
}

type GetRecordsRecord struct {
	// The created time of the private zone record.
	CreatedAt string `pulumi:"createdAt"`
	// Whether the private zone record is enabling.
	Enable bool `pulumi:"enable"`
	// The host of Private Zone Record.
	Host string `pulumi:"host"`
	// The last operator account id of Private Zone Record.
	LastOperator string `pulumi:"lastOperator"`
	// The subnet id of Private Zone Record.
	Line string `pulumi:"line"`
	// This field is deprecated, please use `recordIds` instead. The id of Private Zone Record.
	RecordId string `pulumi:"recordId"`
	// The remark of the private zone record.
	Remark string `pulumi:"remark"`
	// The ttl of the private zone record. Unit: second.
	Ttl int `pulumi:"ttl"`
	// The type of Private Zone Record.
	Type string `pulumi:"type"`
	// The updated time of the private zone record.
	UpdatedAt string `pulumi:"updatedAt"`
	// The value of Private Zone Record.
	Value string `pulumi:"value"`
	// The weight of the private zone record.
	Weight int `pulumi:"weight"`
	// The zid of Private Zone.
	Zid int `pulumi:"zid"`
}

// GetRecordsRecordInput is an input type that accepts GetRecordsRecordArgs and GetRecordsRecordOutput values.
// You can construct a concrete instance of `GetRecordsRecordInput` via:
//
//	GetRecordsRecordArgs{...}
type GetRecordsRecordInput interface {
	pulumi.Input

	ToGetRecordsRecordOutput() GetRecordsRecordOutput
	ToGetRecordsRecordOutputWithContext(context.Context) GetRecordsRecordOutput
}

type GetRecordsRecordArgs struct {
	// The created time of the private zone record.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Whether the private zone record is enabling.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// The host of Private Zone Record.
	Host pulumi.StringInput `pulumi:"host"`
	// The last operator account id of Private Zone Record.
	LastOperator pulumi.StringInput `pulumi:"lastOperator"`
	// The subnet id of Private Zone Record.
	Line pulumi.StringInput `pulumi:"line"`
	// This field is deprecated, please use `recordIds` instead. The id of Private Zone Record.
	RecordId pulumi.StringInput `pulumi:"recordId"`
	// The remark of the private zone record.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The ttl of the private zone record. Unit: second.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// The type of Private Zone Record.
	Type pulumi.StringInput `pulumi:"type"`
	// The updated time of the private zone record.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The value of Private Zone Record.
	Value pulumi.StringInput `pulumi:"value"`
	// The weight of the private zone record.
	Weight pulumi.IntInput `pulumi:"weight"`
	// The zid of Private Zone.
	Zid pulumi.IntInput `pulumi:"zid"`
}

func (GetRecordsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsRecord)(nil)).Elem()
}

func (i GetRecordsRecordArgs) ToGetRecordsRecordOutput() GetRecordsRecordOutput {
	return i.ToGetRecordsRecordOutputWithContext(context.Background())
}

func (i GetRecordsRecordArgs) ToGetRecordsRecordOutputWithContext(ctx context.Context) GetRecordsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsRecordOutput)
}

// GetRecordsRecordArrayInput is an input type that accepts GetRecordsRecordArray and GetRecordsRecordArrayOutput values.
// You can construct a concrete instance of `GetRecordsRecordArrayInput` via:
//
//	GetRecordsRecordArray{ GetRecordsRecordArgs{...} }
type GetRecordsRecordArrayInput interface {
	pulumi.Input

	ToGetRecordsRecordArrayOutput() GetRecordsRecordArrayOutput
	ToGetRecordsRecordArrayOutputWithContext(context.Context) GetRecordsRecordArrayOutput
}

type GetRecordsRecordArray []GetRecordsRecordInput

func (GetRecordsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsRecord)(nil)).Elem()
}

func (i GetRecordsRecordArray) ToGetRecordsRecordArrayOutput() GetRecordsRecordArrayOutput {
	return i.ToGetRecordsRecordArrayOutputWithContext(context.Background())
}

func (i GetRecordsRecordArray) ToGetRecordsRecordArrayOutputWithContext(ctx context.Context) GetRecordsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsRecordArrayOutput)
}

type GetRecordsRecordOutput struct{ *pulumi.OutputState }

func (GetRecordsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsRecord)(nil)).Elem()
}

func (o GetRecordsRecordOutput) ToGetRecordsRecordOutput() GetRecordsRecordOutput {
	return o
}

func (o GetRecordsRecordOutput) ToGetRecordsRecordOutputWithContext(ctx context.Context) GetRecordsRecordOutput {
	return o
}

// The created time of the private zone record.
func (o GetRecordsRecordOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Whether the private zone record is enabling.
func (o GetRecordsRecordOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRecordsRecord) bool { return v.Enable }).(pulumi.BoolOutput)
}

// The host of Private Zone Record.
func (o GetRecordsRecordOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Host }).(pulumi.StringOutput)
}

// The last operator account id of Private Zone Record.
func (o GetRecordsRecordOutput) LastOperator() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.LastOperator }).(pulumi.StringOutput)
}

// The subnet id of Private Zone Record.
func (o GetRecordsRecordOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Line }).(pulumi.StringOutput)
}

// This field is deprecated, please use `recordIds` instead. The id of Private Zone Record.
func (o GetRecordsRecordOutput) RecordId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.RecordId }).(pulumi.StringOutput)
}

// The remark of the private zone record.
func (o GetRecordsRecordOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Remark }).(pulumi.StringOutput)
}

// The ttl of the private zone record. Unit: second.
func (o GetRecordsRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsRecord) int { return v.Ttl }).(pulumi.IntOutput)
}

// The type of Private Zone Record.
func (o GetRecordsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Type }).(pulumi.StringOutput)
}

// The updated time of the private zone record.
func (o GetRecordsRecordOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The value of Private Zone Record.
func (o GetRecordsRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Value }).(pulumi.StringOutput)
}

// The weight of the private zone record.
func (o GetRecordsRecordOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsRecord) int { return v.Weight }).(pulumi.IntOutput)
}

// The zid of Private Zone.
func (o GetRecordsRecordOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsRecord) int { return v.Zid }).(pulumi.IntOutput)
}

type GetRecordsRecordArrayOutput struct{ *pulumi.OutputState }

func (GetRecordsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsRecord)(nil)).Elem()
}

func (o GetRecordsRecordArrayOutput) ToGetRecordsRecordArrayOutput() GetRecordsRecordArrayOutput {
	return o
}

func (o GetRecordsRecordArrayOutput) ToGetRecordsRecordArrayOutputWithContext(ctx context.Context) GetRecordsRecordArrayOutput {
	return o
}

func (o GetRecordsRecordArrayOutput) Index(i pulumi.IntInput) GetRecordsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordsRecord {
		return vs[0].([]GetRecordsRecord)[vs[1].(int)]
	}).(GetRecordsRecordOutput)
}

type GetResolverEndpointsEndpoint struct {
	// The created time of the endpoint.
	CreatedAt string `pulumi:"createdAt"`
	// The direction of the private zone resolver endpoint.
	Direction string `pulumi:"direction"`
	// The endpoint id.
	EndpointId int `pulumi:"endpointId"`
	// The id of the endpoint.
	Id string `pulumi:"id"`
	// List of IP configurations.
	IpConfigs []GetResolverEndpointsEndpointIpConfig `pulumi:"ipConfigs"`
	// The name of the private zone resolver endpoint.
	Name string `pulumi:"name"`
	// The project name of the private zone resolver endpoint.
	ProjectName string `pulumi:"projectName"`
	// The security group id of the endpoint.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The status of the private zone resolver endpoint.
	Status string `pulumi:"status"`
	// Tags.
	Tags []GetResolverEndpointsEndpointTag `pulumi:"tags"`
	// The updated time of the endpoint.
	UpdatedAt string `pulumi:"updatedAt"`
	// The vpc ID of the private zone resolver endpoint.
	VpcId string `pulumi:"vpcId"`
	// The vpc region of the endpoint.
	VpcRegion string `pulumi:"vpcRegion"`
}

// GetResolverEndpointsEndpointInput is an input type that accepts GetResolverEndpointsEndpointArgs and GetResolverEndpointsEndpointOutput values.
// You can construct a concrete instance of `GetResolverEndpointsEndpointInput` via:
//
//	GetResolverEndpointsEndpointArgs{...}
type GetResolverEndpointsEndpointInput interface {
	pulumi.Input

	ToGetResolverEndpointsEndpointOutput() GetResolverEndpointsEndpointOutput
	ToGetResolverEndpointsEndpointOutputWithContext(context.Context) GetResolverEndpointsEndpointOutput
}

type GetResolverEndpointsEndpointArgs struct {
	// The created time of the endpoint.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The direction of the private zone resolver endpoint.
	Direction pulumi.StringInput `pulumi:"direction"`
	// The endpoint id.
	EndpointId pulumi.IntInput `pulumi:"endpointId"`
	// The id of the endpoint.
	Id pulumi.StringInput `pulumi:"id"`
	// List of IP configurations.
	IpConfigs GetResolverEndpointsEndpointIpConfigArrayInput `pulumi:"ipConfigs"`
	// The name of the private zone resolver endpoint.
	Name pulumi.StringInput `pulumi:"name"`
	// The project name of the private zone resolver endpoint.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The security group id of the endpoint.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The status of the private zone resolver endpoint.
	Status pulumi.StringInput `pulumi:"status"`
	// Tags.
	Tags GetResolverEndpointsEndpointTagArrayInput `pulumi:"tags"`
	// The updated time of the endpoint.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The vpc ID of the private zone resolver endpoint.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The vpc region of the endpoint.
	VpcRegion pulumi.StringInput `pulumi:"vpcRegion"`
}

func (GetResolverEndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointsEndpoint)(nil)).Elem()
}

func (i GetResolverEndpointsEndpointArgs) ToGetResolverEndpointsEndpointOutput() GetResolverEndpointsEndpointOutput {
	return i.ToGetResolverEndpointsEndpointOutputWithContext(context.Background())
}

func (i GetResolverEndpointsEndpointArgs) ToGetResolverEndpointsEndpointOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointsEndpointOutput)
}

// GetResolverEndpointsEndpointArrayInput is an input type that accepts GetResolverEndpointsEndpointArray and GetResolverEndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `GetResolverEndpointsEndpointArrayInput` via:
//
//	GetResolverEndpointsEndpointArray{ GetResolverEndpointsEndpointArgs{...} }
type GetResolverEndpointsEndpointArrayInput interface {
	pulumi.Input

	ToGetResolverEndpointsEndpointArrayOutput() GetResolverEndpointsEndpointArrayOutput
	ToGetResolverEndpointsEndpointArrayOutputWithContext(context.Context) GetResolverEndpointsEndpointArrayOutput
}

type GetResolverEndpointsEndpointArray []GetResolverEndpointsEndpointInput

func (GetResolverEndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointsEndpoint)(nil)).Elem()
}

func (i GetResolverEndpointsEndpointArray) ToGetResolverEndpointsEndpointArrayOutput() GetResolverEndpointsEndpointArrayOutput {
	return i.ToGetResolverEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i GetResolverEndpointsEndpointArray) ToGetResolverEndpointsEndpointArrayOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointsEndpointArrayOutput)
}

type GetResolverEndpointsEndpointOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointsEndpoint)(nil)).Elem()
}

func (o GetResolverEndpointsEndpointOutput) ToGetResolverEndpointsEndpointOutput() GetResolverEndpointsEndpointOutput {
	return o
}

func (o GetResolverEndpointsEndpointOutput) ToGetResolverEndpointsEndpointOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointOutput {
	return o
}

// The created time of the endpoint.
func (o GetResolverEndpointsEndpointOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The direction of the private zone resolver endpoint.
func (o GetResolverEndpointsEndpointOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.Direction }).(pulumi.StringOutput)
}

// The endpoint id.
func (o GetResolverEndpointsEndpointOutput) EndpointId() pulumi.IntOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) int { return v.EndpointId }).(pulumi.IntOutput)
}

// The id of the endpoint.
func (o GetResolverEndpointsEndpointOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.Id }).(pulumi.StringOutput)
}

// List of IP configurations.
func (o GetResolverEndpointsEndpointOutput) IpConfigs() GetResolverEndpointsEndpointIpConfigArrayOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) []GetResolverEndpointsEndpointIpConfig { return v.IpConfigs }).(GetResolverEndpointsEndpointIpConfigArrayOutput)
}

// The name of the private zone resolver endpoint.
func (o GetResolverEndpointsEndpointOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.Name }).(pulumi.StringOutput)
}

// The project name of the private zone resolver endpoint.
func (o GetResolverEndpointsEndpointOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The security group id of the endpoint.
func (o GetResolverEndpointsEndpointOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The status of the private zone resolver endpoint.
func (o GetResolverEndpointsEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.Status }).(pulumi.StringOutput)
}

// Tags.
func (o GetResolverEndpointsEndpointOutput) Tags() GetResolverEndpointsEndpointTagArrayOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) []GetResolverEndpointsEndpointTag { return v.Tags }).(GetResolverEndpointsEndpointTagArrayOutput)
}

// The updated time of the endpoint.
func (o GetResolverEndpointsEndpointOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The vpc ID of the private zone resolver endpoint.
func (o GetResolverEndpointsEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.VpcId }).(pulumi.StringOutput)
}

// The vpc region of the endpoint.
func (o GetResolverEndpointsEndpointOutput) VpcRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpoint) string { return v.VpcRegion }).(pulumi.StringOutput)
}

type GetResolverEndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointsEndpoint)(nil)).Elem()
}

func (o GetResolverEndpointsEndpointArrayOutput) ToGetResolverEndpointsEndpointArrayOutput() GetResolverEndpointsEndpointArrayOutput {
	return o
}

func (o GetResolverEndpointsEndpointArrayOutput) ToGetResolverEndpointsEndpointArrayOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointArrayOutput {
	return o
}

func (o GetResolverEndpointsEndpointArrayOutput) Index(i pulumi.IntInput) GetResolverEndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverEndpointsEndpoint {
		return vs[0].([]GetResolverEndpointsEndpoint)[vs[1].(int)]
	}).(GetResolverEndpointsEndpointOutput)
}

type GetResolverEndpointsEndpointIpConfig struct {
	// The availability zone id of the endpoint.
	AzId string `pulumi:"azId"`
	// The IP address of the endpoint.
	Ip string `pulumi:"ip"`
	// The subnet id of the endpoint.
	SubnetId string `pulumi:"subnetId"`
}

// GetResolverEndpointsEndpointIpConfigInput is an input type that accepts GetResolverEndpointsEndpointIpConfigArgs and GetResolverEndpointsEndpointIpConfigOutput values.
// You can construct a concrete instance of `GetResolverEndpointsEndpointIpConfigInput` via:
//
//	GetResolverEndpointsEndpointIpConfigArgs{...}
type GetResolverEndpointsEndpointIpConfigInput interface {
	pulumi.Input

	ToGetResolverEndpointsEndpointIpConfigOutput() GetResolverEndpointsEndpointIpConfigOutput
	ToGetResolverEndpointsEndpointIpConfigOutputWithContext(context.Context) GetResolverEndpointsEndpointIpConfigOutput
}

type GetResolverEndpointsEndpointIpConfigArgs struct {
	// The availability zone id of the endpoint.
	AzId pulumi.StringInput `pulumi:"azId"`
	// The IP address of the endpoint.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The subnet id of the endpoint.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetResolverEndpointsEndpointIpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (i GetResolverEndpointsEndpointIpConfigArgs) ToGetResolverEndpointsEndpointIpConfigOutput() GetResolverEndpointsEndpointIpConfigOutput {
	return i.ToGetResolverEndpointsEndpointIpConfigOutputWithContext(context.Background())
}

func (i GetResolverEndpointsEndpointIpConfigArgs) ToGetResolverEndpointsEndpointIpConfigOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointIpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointsEndpointIpConfigOutput)
}

// GetResolverEndpointsEndpointIpConfigArrayInput is an input type that accepts GetResolverEndpointsEndpointIpConfigArray and GetResolverEndpointsEndpointIpConfigArrayOutput values.
// You can construct a concrete instance of `GetResolverEndpointsEndpointIpConfigArrayInput` via:
//
//	GetResolverEndpointsEndpointIpConfigArray{ GetResolverEndpointsEndpointIpConfigArgs{...} }
type GetResolverEndpointsEndpointIpConfigArrayInput interface {
	pulumi.Input

	ToGetResolverEndpointsEndpointIpConfigArrayOutput() GetResolverEndpointsEndpointIpConfigArrayOutput
	ToGetResolverEndpointsEndpointIpConfigArrayOutputWithContext(context.Context) GetResolverEndpointsEndpointIpConfigArrayOutput
}

type GetResolverEndpointsEndpointIpConfigArray []GetResolverEndpointsEndpointIpConfigInput

func (GetResolverEndpointsEndpointIpConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (i GetResolverEndpointsEndpointIpConfigArray) ToGetResolverEndpointsEndpointIpConfigArrayOutput() GetResolverEndpointsEndpointIpConfigArrayOutput {
	return i.ToGetResolverEndpointsEndpointIpConfigArrayOutputWithContext(context.Background())
}

func (i GetResolverEndpointsEndpointIpConfigArray) ToGetResolverEndpointsEndpointIpConfigArrayOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointIpConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointsEndpointIpConfigArrayOutput)
}

type GetResolverEndpointsEndpointIpConfigOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointsEndpointIpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (o GetResolverEndpointsEndpointIpConfigOutput) ToGetResolverEndpointsEndpointIpConfigOutput() GetResolverEndpointsEndpointIpConfigOutput {
	return o
}

func (o GetResolverEndpointsEndpointIpConfigOutput) ToGetResolverEndpointsEndpointIpConfigOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointIpConfigOutput {
	return o
}

// The availability zone id of the endpoint.
func (o GetResolverEndpointsEndpointIpConfigOutput) AzId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpointIpConfig) string { return v.AzId }).(pulumi.StringOutput)
}

// The IP address of the endpoint.
func (o GetResolverEndpointsEndpointIpConfigOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpointIpConfig) string { return v.Ip }).(pulumi.StringOutput)
}

// The subnet id of the endpoint.
func (o GetResolverEndpointsEndpointIpConfigOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpointIpConfig) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetResolverEndpointsEndpointIpConfigArrayOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointsEndpointIpConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointsEndpointIpConfig)(nil)).Elem()
}

func (o GetResolverEndpointsEndpointIpConfigArrayOutput) ToGetResolverEndpointsEndpointIpConfigArrayOutput() GetResolverEndpointsEndpointIpConfigArrayOutput {
	return o
}

func (o GetResolverEndpointsEndpointIpConfigArrayOutput) ToGetResolverEndpointsEndpointIpConfigArrayOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointIpConfigArrayOutput {
	return o
}

func (o GetResolverEndpointsEndpointIpConfigArrayOutput) Index(i pulumi.IntInput) GetResolverEndpointsEndpointIpConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverEndpointsEndpointIpConfig {
		return vs[0].([]GetResolverEndpointsEndpointIpConfig)[vs[1].(int)]
	}).(GetResolverEndpointsEndpointIpConfigOutput)
}

type GetResolverEndpointsEndpointTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetResolverEndpointsEndpointTagInput is an input type that accepts GetResolverEndpointsEndpointTagArgs and GetResolverEndpointsEndpointTagOutput values.
// You can construct a concrete instance of `GetResolverEndpointsEndpointTagInput` via:
//
//	GetResolverEndpointsEndpointTagArgs{...}
type GetResolverEndpointsEndpointTagInput interface {
	pulumi.Input

	ToGetResolverEndpointsEndpointTagOutput() GetResolverEndpointsEndpointTagOutput
	ToGetResolverEndpointsEndpointTagOutputWithContext(context.Context) GetResolverEndpointsEndpointTagOutput
}

type GetResolverEndpointsEndpointTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetResolverEndpointsEndpointTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointsEndpointTag)(nil)).Elem()
}

func (i GetResolverEndpointsEndpointTagArgs) ToGetResolverEndpointsEndpointTagOutput() GetResolverEndpointsEndpointTagOutput {
	return i.ToGetResolverEndpointsEndpointTagOutputWithContext(context.Background())
}

func (i GetResolverEndpointsEndpointTagArgs) ToGetResolverEndpointsEndpointTagOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointsEndpointTagOutput)
}

// GetResolverEndpointsEndpointTagArrayInput is an input type that accepts GetResolverEndpointsEndpointTagArray and GetResolverEndpointsEndpointTagArrayOutput values.
// You can construct a concrete instance of `GetResolverEndpointsEndpointTagArrayInput` via:
//
//	GetResolverEndpointsEndpointTagArray{ GetResolverEndpointsEndpointTagArgs{...} }
type GetResolverEndpointsEndpointTagArrayInput interface {
	pulumi.Input

	ToGetResolverEndpointsEndpointTagArrayOutput() GetResolverEndpointsEndpointTagArrayOutput
	ToGetResolverEndpointsEndpointTagArrayOutputWithContext(context.Context) GetResolverEndpointsEndpointTagArrayOutput
}

type GetResolverEndpointsEndpointTagArray []GetResolverEndpointsEndpointTagInput

func (GetResolverEndpointsEndpointTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointsEndpointTag)(nil)).Elem()
}

func (i GetResolverEndpointsEndpointTagArray) ToGetResolverEndpointsEndpointTagArrayOutput() GetResolverEndpointsEndpointTagArrayOutput {
	return i.ToGetResolverEndpointsEndpointTagArrayOutputWithContext(context.Background())
}

func (i GetResolverEndpointsEndpointTagArray) ToGetResolverEndpointsEndpointTagArrayOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointsEndpointTagArrayOutput)
}

type GetResolverEndpointsEndpointTagOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointsEndpointTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointsEndpointTag)(nil)).Elem()
}

func (o GetResolverEndpointsEndpointTagOutput) ToGetResolverEndpointsEndpointTagOutput() GetResolverEndpointsEndpointTagOutput {
	return o
}

func (o GetResolverEndpointsEndpointTagOutput) ToGetResolverEndpointsEndpointTagOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointTagOutput {
	return o
}

// The Key of Tags.
func (o GetResolverEndpointsEndpointTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpointTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetResolverEndpointsEndpointTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverEndpointsEndpointTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetResolverEndpointsEndpointTagArrayOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointsEndpointTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointsEndpointTag)(nil)).Elem()
}

func (o GetResolverEndpointsEndpointTagArrayOutput) ToGetResolverEndpointsEndpointTagArrayOutput() GetResolverEndpointsEndpointTagArrayOutput {
	return o
}

func (o GetResolverEndpointsEndpointTagArrayOutput) ToGetResolverEndpointsEndpointTagArrayOutputWithContext(ctx context.Context) GetResolverEndpointsEndpointTagArrayOutput {
	return o
}

func (o GetResolverEndpointsEndpointTagArrayOutput) Index(i pulumi.IntInput) GetResolverEndpointsEndpointTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverEndpointsEndpointTag {
		return vs[0].([]GetResolverEndpointsEndpointTag)[vs[1].(int)]
	}).(GetResolverEndpointsEndpointTagOutput)
}

type GetResolverEndpointsTagFilter struct {
	// The key of the tag.
	Key *string `pulumi:"key"`
	// The values of the tag.
	Values []string `pulumi:"values"`
}

// GetResolverEndpointsTagFilterInput is an input type that accepts GetResolverEndpointsTagFilterArgs and GetResolverEndpointsTagFilterOutput values.
// You can construct a concrete instance of `GetResolverEndpointsTagFilterInput` via:
//
//	GetResolverEndpointsTagFilterArgs{...}
type GetResolverEndpointsTagFilterInput interface {
	pulumi.Input

	ToGetResolverEndpointsTagFilterOutput() GetResolverEndpointsTagFilterOutput
	ToGetResolverEndpointsTagFilterOutputWithContext(context.Context) GetResolverEndpointsTagFilterOutput
}

type GetResolverEndpointsTagFilterArgs struct {
	// The key of the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The values of the tag.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetResolverEndpointsTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointsTagFilter)(nil)).Elem()
}

func (i GetResolverEndpointsTagFilterArgs) ToGetResolverEndpointsTagFilterOutput() GetResolverEndpointsTagFilterOutput {
	return i.ToGetResolverEndpointsTagFilterOutputWithContext(context.Background())
}

func (i GetResolverEndpointsTagFilterArgs) ToGetResolverEndpointsTagFilterOutputWithContext(ctx context.Context) GetResolverEndpointsTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointsTagFilterOutput)
}

// GetResolverEndpointsTagFilterArrayInput is an input type that accepts GetResolverEndpointsTagFilterArray and GetResolverEndpointsTagFilterArrayOutput values.
// You can construct a concrete instance of `GetResolverEndpointsTagFilterArrayInput` via:
//
//	GetResolverEndpointsTagFilterArray{ GetResolverEndpointsTagFilterArgs{...} }
type GetResolverEndpointsTagFilterArrayInput interface {
	pulumi.Input

	ToGetResolverEndpointsTagFilterArrayOutput() GetResolverEndpointsTagFilterArrayOutput
	ToGetResolverEndpointsTagFilterArrayOutputWithContext(context.Context) GetResolverEndpointsTagFilterArrayOutput
}

type GetResolverEndpointsTagFilterArray []GetResolverEndpointsTagFilterInput

func (GetResolverEndpointsTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointsTagFilter)(nil)).Elem()
}

func (i GetResolverEndpointsTagFilterArray) ToGetResolverEndpointsTagFilterArrayOutput() GetResolverEndpointsTagFilterArrayOutput {
	return i.ToGetResolverEndpointsTagFilterArrayOutputWithContext(context.Background())
}

func (i GetResolverEndpointsTagFilterArray) ToGetResolverEndpointsTagFilterArrayOutputWithContext(ctx context.Context) GetResolverEndpointsTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverEndpointsTagFilterArrayOutput)
}

type GetResolverEndpointsTagFilterOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointsTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverEndpointsTagFilter)(nil)).Elem()
}

func (o GetResolverEndpointsTagFilterOutput) ToGetResolverEndpointsTagFilterOutput() GetResolverEndpointsTagFilterOutput {
	return o
}

func (o GetResolverEndpointsTagFilterOutput) ToGetResolverEndpointsTagFilterOutputWithContext(ctx context.Context) GetResolverEndpointsTagFilterOutput {
	return o
}

// The key of the tag.
func (o GetResolverEndpointsTagFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolverEndpointsTagFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The values of the tag.
func (o GetResolverEndpointsTagFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResolverEndpointsTagFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetResolverEndpointsTagFilterArrayOutput struct{ *pulumi.OutputState }

func (GetResolverEndpointsTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverEndpointsTagFilter)(nil)).Elem()
}

func (o GetResolverEndpointsTagFilterArrayOutput) ToGetResolverEndpointsTagFilterArrayOutput() GetResolverEndpointsTagFilterArrayOutput {
	return o
}

func (o GetResolverEndpointsTagFilterArrayOutput) ToGetResolverEndpointsTagFilterArrayOutputWithContext(ctx context.Context) GetResolverEndpointsTagFilterArrayOutput {
	return o
}

func (o GetResolverEndpointsTagFilterArrayOutput) Index(i pulumi.IntInput) GetResolverEndpointsTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverEndpointsTagFilter {
		return vs[0].([]GetResolverEndpointsTagFilter)[vs[1].(int)]
	}).(GetResolverEndpointsTagFilterOutput)
}

type GetResolverRulesRule struct {
	BindVpcs []GetResolverRulesRuleBindVpc `pulumi:"bindVpcs"`
	// The created time of the rule.
	CreatedAt string `pulumi:"createdAt"`
	// ID of the exit terminal node.
	EndpointId int `pulumi:"endpointId"`
	// The IP address and port of the DNS server outside of the VPC.
	ForwardIps []GetResolverRulesRuleForwardIp `pulumi:"forwardIps"`
	// The id of the rule.
	Id string `pulumi:"id"`
	// The ISP of the exit IP address of the recursive DNS server.
	Line string `pulumi:"line"`
	// The name of the rule.
	Name string `pulumi:"name"`
	// The project name of the private zone resolver rule.
	ProjectName string `pulumi:"projectName"`
	// The id of the rule.
	RuleId int `pulumi:"ruleId"`
	// Tags.
	Tags []GetResolverRulesRuleTag `pulumi:"tags"`
	// The type of the rule.
	Type string `pulumi:"type"`
	// The updated time of the rule.
	UpdatedAt string `pulumi:"updatedAt"`
	// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
	ZoneNames []string `pulumi:"zoneNames"`
}

// GetResolverRulesRuleInput is an input type that accepts GetResolverRulesRuleArgs and GetResolverRulesRuleOutput values.
// You can construct a concrete instance of `GetResolverRulesRuleInput` via:
//
//	GetResolverRulesRuleArgs{...}
type GetResolverRulesRuleInput interface {
	pulumi.Input

	ToGetResolverRulesRuleOutput() GetResolverRulesRuleOutput
	ToGetResolverRulesRuleOutputWithContext(context.Context) GetResolverRulesRuleOutput
}

type GetResolverRulesRuleArgs struct {
	BindVpcs GetResolverRulesRuleBindVpcArrayInput `pulumi:"bindVpcs"`
	// The created time of the rule.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// ID of the exit terminal node.
	EndpointId pulumi.IntInput `pulumi:"endpointId"`
	// The IP address and port of the DNS server outside of the VPC.
	ForwardIps GetResolverRulesRuleForwardIpArrayInput `pulumi:"forwardIps"`
	// The id of the rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The ISP of the exit IP address of the recursive DNS server.
	Line pulumi.StringInput `pulumi:"line"`
	// The name of the rule.
	Name pulumi.StringInput `pulumi:"name"`
	// The project name of the private zone resolver rule.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The id of the rule.
	RuleId pulumi.IntInput `pulumi:"ruleId"`
	// Tags.
	Tags GetResolverRulesRuleTagArrayInput `pulumi:"tags"`
	// The type of the rule.
	Type pulumi.StringInput `pulumi:"type"`
	// The updated time of the rule.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
	ZoneNames pulumi.StringArrayInput `pulumi:"zoneNames"`
}

func (GetResolverRulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesRule)(nil)).Elem()
}

func (i GetResolverRulesRuleArgs) ToGetResolverRulesRuleOutput() GetResolverRulesRuleOutput {
	return i.ToGetResolverRulesRuleOutputWithContext(context.Background())
}

func (i GetResolverRulesRuleArgs) ToGetResolverRulesRuleOutputWithContext(ctx context.Context) GetResolverRulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesRuleOutput)
}

// GetResolverRulesRuleArrayInput is an input type that accepts GetResolverRulesRuleArray and GetResolverRulesRuleArrayOutput values.
// You can construct a concrete instance of `GetResolverRulesRuleArrayInput` via:
//
//	GetResolverRulesRuleArray{ GetResolverRulesRuleArgs{...} }
type GetResolverRulesRuleArrayInput interface {
	pulumi.Input

	ToGetResolverRulesRuleArrayOutput() GetResolverRulesRuleArrayOutput
	ToGetResolverRulesRuleArrayOutputWithContext(context.Context) GetResolverRulesRuleArrayOutput
}

type GetResolverRulesRuleArray []GetResolverRulesRuleInput

func (GetResolverRulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesRule)(nil)).Elem()
}

func (i GetResolverRulesRuleArray) ToGetResolverRulesRuleArrayOutput() GetResolverRulesRuleArrayOutput {
	return i.ToGetResolverRulesRuleArrayOutputWithContext(context.Background())
}

func (i GetResolverRulesRuleArray) ToGetResolverRulesRuleArrayOutputWithContext(ctx context.Context) GetResolverRulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesRuleArrayOutput)
}

type GetResolverRulesRuleOutput struct{ *pulumi.OutputState }

func (GetResolverRulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesRule)(nil)).Elem()
}

func (o GetResolverRulesRuleOutput) ToGetResolverRulesRuleOutput() GetResolverRulesRuleOutput {
	return o
}

func (o GetResolverRulesRuleOutput) ToGetResolverRulesRuleOutputWithContext(ctx context.Context) GetResolverRulesRuleOutput {
	return o
}

func (o GetResolverRulesRuleOutput) BindVpcs() GetResolverRulesRuleBindVpcArrayOutput {
	return o.ApplyT(func(v GetResolverRulesRule) []GetResolverRulesRuleBindVpc { return v.BindVpcs }).(GetResolverRulesRuleBindVpcArrayOutput)
}

// The created time of the rule.
func (o GetResolverRulesRuleOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRule) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// ID of the exit terminal node.
func (o GetResolverRulesRuleOutput) EndpointId() pulumi.IntOutput {
	return o.ApplyT(func(v GetResolverRulesRule) int { return v.EndpointId }).(pulumi.IntOutput)
}

// The IP address and port of the DNS server outside of the VPC.
func (o GetResolverRulesRuleOutput) ForwardIps() GetResolverRulesRuleForwardIpArrayOutput {
	return o.ApplyT(func(v GetResolverRulesRule) []GetResolverRulesRuleForwardIp { return v.ForwardIps }).(GetResolverRulesRuleForwardIpArrayOutput)
}

// The id of the rule.
func (o GetResolverRulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// The ISP of the exit IP address of the recursive DNS server.
func (o GetResolverRulesRuleOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRule) string { return v.Line }).(pulumi.StringOutput)
}

// The name of the rule.
func (o GetResolverRulesRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRule) string { return v.Name }).(pulumi.StringOutput)
}

// The project name of the private zone resolver rule.
func (o GetResolverRulesRuleOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRule) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The id of the rule.
func (o GetResolverRulesRuleOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v GetResolverRulesRule) int { return v.RuleId }).(pulumi.IntOutput)
}

// Tags.
func (o GetResolverRulesRuleOutput) Tags() GetResolverRulesRuleTagArrayOutput {
	return o.ApplyT(func(v GetResolverRulesRule) []GetResolverRulesRuleTag { return v.Tags }).(GetResolverRulesRuleTagArrayOutput)
}

// The type of the rule.
func (o GetResolverRulesRuleOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRule) string { return v.Type }).(pulumi.StringOutput)
}

// The updated time of the rule.
func (o GetResolverRulesRuleOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRule) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
func (o GetResolverRulesRuleOutput) ZoneNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResolverRulesRule) []string { return v.ZoneNames }).(pulumi.StringArrayOutput)
}

type GetResolverRulesRuleArrayOutput struct{ *pulumi.OutputState }

func (GetResolverRulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesRule)(nil)).Elem()
}

func (o GetResolverRulesRuleArrayOutput) ToGetResolverRulesRuleArrayOutput() GetResolverRulesRuleArrayOutput {
	return o
}

func (o GetResolverRulesRuleArrayOutput) ToGetResolverRulesRuleArrayOutputWithContext(ctx context.Context) GetResolverRulesRuleArrayOutput {
	return o
}

func (o GetResolverRulesRuleArrayOutput) Index(i pulumi.IntInput) GetResolverRulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverRulesRule {
		return vs[0].([]GetResolverRulesRule)[vs[1].(int)]
	}).(GetResolverRulesRuleOutput)
}

type GetResolverRulesRuleBindVpc struct {
	// The account id of the bind vpc.
	AccountId string `pulumi:"accountId"`
	// The id of the rule.
	Id string `pulumi:"id"`
	// The region of the bind vpc.
	Region string `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName string `pulumi:"regionName"`
}

// GetResolverRulesRuleBindVpcInput is an input type that accepts GetResolverRulesRuleBindVpcArgs and GetResolverRulesRuleBindVpcOutput values.
// You can construct a concrete instance of `GetResolverRulesRuleBindVpcInput` via:
//
//	GetResolverRulesRuleBindVpcArgs{...}
type GetResolverRulesRuleBindVpcInput interface {
	pulumi.Input

	ToGetResolverRulesRuleBindVpcOutput() GetResolverRulesRuleBindVpcOutput
	ToGetResolverRulesRuleBindVpcOutputWithContext(context.Context) GetResolverRulesRuleBindVpcOutput
}

type GetResolverRulesRuleBindVpcArgs struct {
	// The account id of the bind vpc.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The id of the rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The region of the bind vpc.
	Region pulumi.StringInput `pulumi:"region"`
	// The region name of the bind vpc.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (GetResolverRulesRuleBindVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesRuleBindVpc)(nil)).Elem()
}

func (i GetResolverRulesRuleBindVpcArgs) ToGetResolverRulesRuleBindVpcOutput() GetResolverRulesRuleBindVpcOutput {
	return i.ToGetResolverRulesRuleBindVpcOutputWithContext(context.Background())
}

func (i GetResolverRulesRuleBindVpcArgs) ToGetResolverRulesRuleBindVpcOutputWithContext(ctx context.Context) GetResolverRulesRuleBindVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesRuleBindVpcOutput)
}

// GetResolverRulesRuleBindVpcArrayInput is an input type that accepts GetResolverRulesRuleBindVpcArray and GetResolverRulesRuleBindVpcArrayOutput values.
// You can construct a concrete instance of `GetResolverRulesRuleBindVpcArrayInput` via:
//
//	GetResolverRulesRuleBindVpcArray{ GetResolverRulesRuleBindVpcArgs{...} }
type GetResolverRulesRuleBindVpcArrayInput interface {
	pulumi.Input

	ToGetResolverRulesRuleBindVpcArrayOutput() GetResolverRulesRuleBindVpcArrayOutput
	ToGetResolverRulesRuleBindVpcArrayOutputWithContext(context.Context) GetResolverRulesRuleBindVpcArrayOutput
}

type GetResolverRulesRuleBindVpcArray []GetResolverRulesRuleBindVpcInput

func (GetResolverRulesRuleBindVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesRuleBindVpc)(nil)).Elem()
}

func (i GetResolverRulesRuleBindVpcArray) ToGetResolverRulesRuleBindVpcArrayOutput() GetResolverRulesRuleBindVpcArrayOutput {
	return i.ToGetResolverRulesRuleBindVpcArrayOutputWithContext(context.Background())
}

func (i GetResolverRulesRuleBindVpcArray) ToGetResolverRulesRuleBindVpcArrayOutputWithContext(ctx context.Context) GetResolverRulesRuleBindVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesRuleBindVpcArrayOutput)
}

type GetResolverRulesRuleBindVpcOutput struct{ *pulumi.OutputState }

func (GetResolverRulesRuleBindVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesRuleBindVpc)(nil)).Elem()
}

func (o GetResolverRulesRuleBindVpcOutput) ToGetResolverRulesRuleBindVpcOutput() GetResolverRulesRuleBindVpcOutput {
	return o
}

func (o GetResolverRulesRuleBindVpcOutput) ToGetResolverRulesRuleBindVpcOutputWithContext(ctx context.Context) GetResolverRulesRuleBindVpcOutput {
	return o
}

// The account id of the bind vpc.
func (o GetResolverRulesRuleBindVpcOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRuleBindVpc) string { return v.AccountId }).(pulumi.StringOutput)
}

// The id of the rule.
func (o GetResolverRulesRuleBindVpcOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRuleBindVpc) string { return v.Id }).(pulumi.StringOutput)
}

// The region of the bind vpc.
func (o GetResolverRulesRuleBindVpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRuleBindVpc) string { return v.Region }).(pulumi.StringOutput)
}

// The region name of the bind vpc.
func (o GetResolverRulesRuleBindVpcOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRuleBindVpc) string { return v.RegionName }).(pulumi.StringOutput)
}

type GetResolverRulesRuleBindVpcArrayOutput struct{ *pulumi.OutputState }

func (GetResolverRulesRuleBindVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesRuleBindVpc)(nil)).Elem()
}

func (o GetResolverRulesRuleBindVpcArrayOutput) ToGetResolverRulesRuleBindVpcArrayOutput() GetResolverRulesRuleBindVpcArrayOutput {
	return o
}

func (o GetResolverRulesRuleBindVpcArrayOutput) ToGetResolverRulesRuleBindVpcArrayOutputWithContext(ctx context.Context) GetResolverRulesRuleBindVpcArrayOutput {
	return o
}

func (o GetResolverRulesRuleBindVpcArrayOutput) Index(i pulumi.IntInput) GetResolverRulesRuleBindVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverRulesRuleBindVpc {
		return vs[0].([]GetResolverRulesRuleBindVpc)[vs[1].(int)]
	}).(GetResolverRulesRuleBindVpcOutput)
}

type GetResolverRulesRuleForwardIp struct {
	// The IP address of the DNS server outside of the VPC.
	Ip string `pulumi:"ip"`
	// The port of the DNS server outside of the VPC.
	Port int `pulumi:"port"`
}

// GetResolverRulesRuleForwardIpInput is an input type that accepts GetResolverRulesRuleForwardIpArgs and GetResolverRulesRuleForwardIpOutput values.
// You can construct a concrete instance of `GetResolverRulesRuleForwardIpInput` via:
//
//	GetResolverRulesRuleForwardIpArgs{...}
type GetResolverRulesRuleForwardIpInput interface {
	pulumi.Input

	ToGetResolverRulesRuleForwardIpOutput() GetResolverRulesRuleForwardIpOutput
	ToGetResolverRulesRuleForwardIpOutputWithContext(context.Context) GetResolverRulesRuleForwardIpOutput
}

type GetResolverRulesRuleForwardIpArgs struct {
	// The IP address of the DNS server outside of the VPC.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port of the DNS server outside of the VPC.
	Port pulumi.IntInput `pulumi:"port"`
}

func (GetResolverRulesRuleForwardIpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesRuleForwardIp)(nil)).Elem()
}

func (i GetResolverRulesRuleForwardIpArgs) ToGetResolverRulesRuleForwardIpOutput() GetResolverRulesRuleForwardIpOutput {
	return i.ToGetResolverRulesRuleForwardIpOutputWithContext(context.Background())
}

func (i GetResolverRulesRuleForwardIpArgs) ToGetResolverRulesRuleForwardIpOutputWithContext(ctx context.Context) GetResolverRulesRuleForwardIpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesRuleForwardIpOutput)
}

// GetResolverRulesRuleForwardIpArrayInput is an input type that accepts GetResolverRulesRuleForwardIpArray and GetResolverRulesRuleForwardIpArrayOutput values.
// You can construct a concrete instance of `GetResolverRulesRuleForwardIpArrayInput` via:
//
//	GetResolverRulesRuleForwardIpArray{ GetResolverRulesRuleForwardIpArgs{...} }
type GetResolverRulesRuleForwardIpArrayInput interface {
	pulumi.Input

	ToGetResolverRulesRuleForwardIpArrayOutput() GetResolverRulesRuleForwardIpArrayOutput
	ToGetResolverRulesRuleForwardIpArrayOutputWithContext(context.Context) GetResolverRulesRuleForwardIpArrayOutput
}

type GetResolverRulesRuleForwardIpArray []GetResolverRulesRuleForwardIpInput

func (GetResolverRulesRuleForwardIpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesRuleForwardIp)(nil)).Elem()
}

func (i GetResolverRulesRuleForwardIpArray) ToGetResolverRulesRuleForwardIpArrayOutput() GetResolverRulesRuleForwardIpArrayOutput {
	return i.ToGetResolverRulesRuleForwardIpArrayOutputWithContext(context.Background())
}

func (i GetResolverRulesRuleForwardIpArray) ToGetResolverRulesRuleForwardIpArrayOutputWithContext(ctx context.Context) GetResolverRulesRuleForwardIpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesRuleForwardIpArrayOutput)
}

type GetResolverRulesRuleForwardIpOutput struct{ *pulumi.OutputState }

func (GetResolverRulesRuleForwardIpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesRuleForwardIp)(nil)).Elem()
}

func (o GetResolverRulesRuleForwardIpOutput) ToGetResolverRulesRuleForwardIpOutput() GetResolverRulesRuleForwardIpOutput {
	return o
}

func (o GetResolverRulesRuleForwardIpOutput) ToGetResolverRulesRuleForwardIpOutputWithContext(ctx context.Context) GetResolverRulesRuleForwardIpOutput {
	return o
}

// The IP address of the DNS server outside of the VPC.
func (o GetResolverRulesRuleForwardIpOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRuleForwardIp) string { return v.Ip }).(pulumi.StringOutput)
}

// The port of the DNS server outside of the VPC.
func (o GetResolverRulesRuleForwardIpOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetResolverRulesRuleForwardIp) int { return v.Port }).(pulumi.IntOutput)
}

type GetResolverRulesRuleForwardIpArrayOutput struct{ *pulumi.OutputState }

func (GetResolverRulesRuleForwardIpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesRuleForwardIp)(nil)).Elem()
}

func (o GetResolverRulesRuleForwardIpArrayOutput) ToGetResolverRulesRuleForwardIpArrayOutput() GetResolverRulesRuleForwardIpArrayOutput {
	return o
}

func (o GetResolverRulesRuleForwardIpArrayOutput) ToGetResolverRulesRuleForwardIpArrayOutputWithContext(ctx context.Context) GetResolverRulesRuleForwardIpArrayOutput {
	return o
}

func (o GetResolverRulesRuleForwardIpArrayOutput) Index(i pulumi.IntInput) GetResolverRulesRuleForwardIpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverRulesRuleForwardIp {
		return vs[0].([]GetResolverRulesRuleForwardIp)[vs[1].(int)]
	}).(GetResolverRulesRuleForwardIpOutput)
}

type GetResolverRulesRuleTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetResolverRulesRuleTagInput is an input type that accepts GetResolverRulesRuleTagArgs and GetResolverRulesRuleTagOutput values.
// You can construct a concrete instance of `GetResolverRulesRuleTagInput` via:
//
//	GetResolverRulesRuleTagArgs{...}
type GetResolverRulesRuleTagInput interface {
	pulumi.Input

	ToGetResolverRulesRuleTagOutput() GetResolverRulesRuleTagOutput
	ToGetResolverRulesRuleTagOutputWithContext(context.Context) GetResolverRulesRuleTagOutput
}

type GetResolverRulesRuleTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetResolverRulesRuleTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesRuleTag)(nil)).Elem()
}

func (i GetResolverRulesRuleTagArgs) ToGetResolverRulesRuleTagOutput() GetResolverRulesRuleTagOutput {
	return i.ToGetResolverRulesRuleTagOutputWithContext(context.Background())
}

func (i GetResolverRulesRuleTagArgs) ToGetResolverRulesRuleTagOutputWithContext(ctx context.Context) GetResolverRulesRuleTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesRuleTagOutput)
}

// GetResolverRulesRuleTagArrayInput is an input type that accepts GetResolverRulesRuleTagArray and GetResolverRulesRuleTagArrayOutput values.
// You can construct a concrete instance of `GetResolverRulesRuleTagArrayInput` via:
//
//	GetResolverRulesRuleTagArray{ GetResolverRulesRuleTagArgs{...} }
type GetResolverRulesRuleTagArrayInput interface {
	pulumi.Input

	ToGetResolverRulesRuleTagArrayOutput() GetResolverRulesRuleTagArrayOutput
	ToGetResolverRulesRuleTagArrayOutputWithContext(context.Context) GetResolverRulesRuleTagArrayOutput
}

type GetResolverRulesRuleTagArray []GetResolverRulesRuleTagInput

func (GetResolverRulesRuleTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesRuleTag)(nil)).Elem()
}

func (i GetResolverRulesRuleTagArray) ToGetResolverRulesRuleTagArrayOutput() GetResolverRulesRuleTagArrayOutput {
	return i.ToGetResolverRulesRuleTagArrayOutputWithContext(context.Background())
}

func (i GetResolverRulesRuleTagArray) ToGetResolverRulesRuleTagArrayOutputWithContext(ctx context.Context) GetResolverRulesRuleTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesRuleTagArrayOutput)
}

type GetResolverRulesRuleTagOutput struct{ *pulumi.OutputState }

func (GetResolverRulesRuleTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesRuleTag)(nil)).Elem()
}

func (o GetResolverRulesRuleTagOutput) ToGetResolverRulesRuleTagOutput() GetResolverRulesRuleTagOutput {
	return o
}

func (o GetResolverRulesRuleTagOutput) ToGetResolverRulesRuleTagOutputWithContext(ctx context.Context) GetResolverRulesRuleTagOutput {
	return o
}

// The Key of Tags.
func (o GetResolverRulesRuleTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRuleTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetResolverRulesRuleTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetResolverRulesRuleTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetResolverRulesRuleTagArrayOutput struct{ *pulumi.OutputState }

func (GetResolverRulesRuleTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesRuleTag)(nil)).Elem()
}

func (o GetResolverRulesRuleTagArrayOutput) ToGetResolverRulesRuleTagArrayOutput() GetResolverRulesRuleTagArrayOutput {
	return o
}

func (o GetResolverRulesRuleTagArrayOutput) ToGetResolverRulesRuleTagArrayOutputWithContext(ctx context.Context) GetResolverRulesRuleTagArrayOutput {
	return o
}

func (o GetResolverRulesRuleTagArrayOutput) Index(i pulumi.IntInput) GetResolverRulesRuleTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverRulesRuleTag {
		return vs[0].([]GetResolverRulesRuleTag)[vs[1].(int)]
	}).(GetResolverRulesRuleTagOutput)
}

type GetResolverRulesTagFilter struct {
	// The key of the tag.
	Key *string `pulumi:"key"`
	// The values of the tag.
	Values []string `pulumi:"values"`
}

// GetResolverRulesTagFilterInput is an input type that accepts GetResolverRulesTagFilterArgs and GetResolverRulesTagFilterOutput values.
// You can construct a concrete instance of `GetResolverRulesTagFilterInput` via:
//
//	GetResolverRulesTagFilterArgs{...}
type GetResolverRulesTagFilterInput interface {
	pulumi.Input

	ToGetResolverRulesTagFilterOutput() GetResolverRulesTagFilterOutput
	ToGetResolverRulesTagFilterOutputWithContext(context.Context) GetResolverRulesTagFilterOutput
}

type GetResolverRulesTagFilterArgs struct {
	// The key of the tag.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The values of the tag.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetResolverRulesTagFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesTagFilter)(nil)).Elem()
}

func (i GetResolverRulesTagFilterArgs) ToGetResolverRulesTagFilterOutput() GetResolverRulesTagFilterOutput {
	return i.ToGetResolverRulesTagFilterOutputWithContext(context.Background())
}

func (i GetResolverRulesTagFilterArgs) ToGetResolverRulesTagFilterOutputWithContext(ctx context.Context) GetResolverRulesTagFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesTagFilterOutput)
}

// GetResolverRulesTagFilterArrayInput is an input type that accepts GetResolverRulesTagFilterArray and GetResolverRulesTagFilterArrayOutput values.
// You can construct a concrete instance of `GetResolverRulesTagFilterArrayInput` via:
//
//	GetResolverRulesTagFilterArray{ GetResolverRulesTagFilterArgs{...} }
type GetResolverRulesTagFilterArrayInput interface {
	pulumi.Input

	ToGetResolverRulesTagFilterArrayOutput() GetResolverRulesTagFilterArrayOutput
	ToGetResolverRulesTagFilterArrayOutputWithContext(context.Context) GetResolverRulesTagFilterArrayOutput
}

type GetResolverRulesTagFilterArray []GetResolverRulesTagFilterInput

func (GetResolverRulesTagFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesTagFilter)(nil)).Elem()
}

func (i GetResolverRulesTagFilterArray) ToGetResolverRulesTagFilterArrayOutput() GetResolverRulesTagFilterArrayOutput {
	return i.ToGetResolverRulesTagFilterArrayOutputWithContext(context.Background())
}

func (i GetResolverRulesTagFilterArray) ToGetResolverRulesTagFilterArrayOutputWithContext(ctx context.Context) GetResolverRulesTagFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetResolverRulesTagFilterArrayOutput)
}

type GetResolverRulesTagFilterOutput struct{ *pulumi.OutputState }

func (GetResolverRulesTagFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetResolverRulesTagFilter)(nil)).Elem()
}

func (o GetResolverRulesTagFilterOutput) ToGetResolverRulesTagFilterOutput() GetResolverRulesTagFilterOutput {
	return o
}

func (o GetResolverRulesTagFilterOutput) ToGetResolverRulesTagFilterOutputWithContext(ctx context.Context) GetResolverRulesTagFilterOutput {
	return o
}

// The key of the tag.
func (o GetResolverRulesTagFilterOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetResolverRulesTagFilter) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The values of the tag.
func (o GetResolverRulesTagFilterOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetResolverRulesTagFilter) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetResolverRulesTagFilterArrayOutput struct{ *pulumi.OutputState }

func (GetResolverRulesTagFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetResolverRulesTagFilter)(nil)).Elem()
}

func (o GetResolverRulesTagFilterArrayOutput) ToGetResolverRulesTagFilterArrayOutput() GetResolverRulesTagFilterArrayOutput {
	return o
}

func (o GetResolverRulesTagFilterArrayOutput) ToGetResolverRulesTagFilterArrayOutputWithContext(ctx context.Context) GetResolverRulesTagFilterArrayOutput {
	return o
}

func (o GetResolverRulesTagFilterArrayOutput) Index(i pulumi.IntInput) GetResolverRulesTagFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetResolverRulesTagFilter {
		return vs[0].([]GetResolverRulesTagFilter)[vs[1].(int)]
	}).(GetResolverRulesTagFilterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZoneTagInput)(nil)).Elem(), PrivateZoneTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZoneTagArrayInput)(nil)).Elem(), PrivateZoneTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZoneVpcInput)(nil)).Elem(), PrivateZoneVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZoneVpcArrayInput)(nil)).Elem(), PrivateZoneVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneInput)(nil)).Elem(), PrivateZonesPrivateZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneArrayInput)(nil)).Elem(), PrivateZonesPrivateZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneBindVpcInput)(nil)).Elem(), PrivateZonesPrivateZoneBindVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneBindVpcArrayInput)(nil)).Elem(), PrivateZonesPrivateZoneBindVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneTagInput)(nil)).Elem(), PrivateZonesPrivateZoneTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesPrivateZoneTagArrayInput)(nil)).Elem(), PrivateZonesPrivateZoneTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesTagFilterInput)(nil)).Elem(), PrivateZonesTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateZonesTagFilterArrayInput)(nil)).Elem(), PrivateZonesTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordSetsRecordSetInput)(nil)).Elem(), RecordSetsRecordSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordSetsRecordSetArrayInput)(nil)).Elem(), RecordSetsRecordSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsRecordInput)(nil)).Elem(), RecordsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsRecordArrayInput)(nil)).Elem(), RecordsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpConfigInput)(nil)).Elem(), ResolverEndpointIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointIpConfigArrayInput)(nil)).Elem(), ResolverEndpointIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointTagInput)(nil)).Elem(), ResolverEndpointTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointTagArrayInput)(nil)).Elem(), ResolverEndpointTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointInput)(nil)).Elem(), ResolverEndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointArrayInput)(nil)).Elem(), ResolverEndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointIpConfigInput)(nil)).Elem(), ResolverEndpointsEndpointIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointIpConfigArrayInput)(nil)).Elem(), ResolverEndpointsEndpointIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointTagInput)(nil)).Elem(), ResolverEndpointsEndpointTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsEndpointTagArrayInput)(nil)).Elem(), ResolverEndpointsEndpointTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsTagFilterInput)(nil)).Elem(), ResolverEndpointsTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverEndpointsTagFilterArrayInput)(nil)).Elem(), ResolverEndpointsTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleForwardIpInput)(nil)).Elem(), ResolverRuleForwardIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleForwardIpArrayInput)(nil)).Elem(), ResolverRuleForwardIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTagInput)(nil)).Elem(), ResolverRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleTagArrayInput)(nil)).Elem(), ResolverRuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleVpcInput)(nil)).Elem(), ResolverRuleVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRuleVpcArrayInput)(nil)).Elem(), ResolverRuleVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleInput)(nil)).Elem(), ResolverRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleArrayInput)(nil)).Elem(), ResolverRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleBindVpcInput)(nil)).Elem(), ResolverRulesRuleBindVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleBindVpcArrayInput)(nil)).Elem(), ResolverRulesRuleBindVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleForwardIpInput)(nil)).Elem(), ResolverRulesRuleForwardIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleForwardIpArrayInput)(nil)).Elem(), ResolverRulesRuleForwardIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleTagInput)(nil)).Elem(), ResolverRulesRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesRuleTagArrayInput)(nil)).Elem(), ResolverRulesRuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesTagFilterInput)(nil)).Elem(), ResolverRulesTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResolverRulesTagFilterArrayInput)(nil)).Elem(), ResolverRulesTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateZonesPrivateZoneInput)(nil)).Elem(), GetPrivateZonesPrivateZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateZonesPrivateZoneArrayInput)(nil)).Elem(), GetPrivateZonesPrivateZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateZonesPrivateZoneBindVpcInput)(nil)).Elem(), GetPrivateZonesPrivateZoneBindVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateZonesPrivateZoneBindVpcArrayInput)(nil)).Elem(), GetPrivateZonesPrivateZoneBindVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateZonesPrivateZoneTagInput)(nil)).Elem(), GetPrivateZonesPrivateZoneTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateZonesPrivateZoneTagArrayInput)(nil)).Elem(), GetPrivateZonesPrivateZoneTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateZonesTagFilterInput)(nil)).Elem(), GetPrivateZonesTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivateZonesTagFilterArrayInput)(nil)).Elem(), GetPrivateZonesTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordSetsRecordSetInput)(nil)).Elem(), GetRecordSetsRecordSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordSetsRecordSetArrayInput)(nil)).Elem(), GetRecordSetsRecordSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsRecordInput)(nil)).Elem(), GetRecordsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsRecordArrayInput)(nil)).Elem(), GetRecordsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointsEndpointInput)(nil)).Elem(), GetResolverEndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointsEndpointArrayInput)(nil)).Elem(), GetResolverEndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointsEndpointIpConfigInput)(nil)).Elem(), GetResolverEndpointsEndpointIpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointsEndpointIpConfigArrayInput)(nil)).Elem(), GetResolverEndpointsEndpointIpConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointsEndpointTagInput)(nil)).Elem(), GetResolverEndpointsEndpointTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointsEndpointTagArrayInput)(nil)).Elem(), GetResolverEndpointsEndpointTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointsTagFilterInput)(nil)).Elem(), GetResolverEndpointsTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverEndpointsTagFilterArrayInput)(nil)).Elem(), GetResolverEndpointsTagFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesRuleInput)(nil)).Elem(), GetResolverRulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesRuleArrayInput)(nil)).Elem(), GetResolverRulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesRuleBindVpcInput)(nil)).Elem(), GetResolverRulesRuleBindVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesRuleBindVpcArrayInput)(nil)).Elem(), GetResolverRulesRuleBindVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesRuleForwardIpInput)(nil)).Elem(), GetResolverRulesRuleForwardIpArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesRuleForwardIpArrayInput)(nil)).Elem(), GetResolverRulesRuleForwardIpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesRuleTagInput)(nil)).Elem(), GetResolverRulesRuleTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesRuleTagArrayInput)(nil)).Elem(), GetResolverRulesRuleTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesTagFilterInput)(nil)).Elem(), GetResolverRulesTagFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetResolverRulesTagFilterArrayInput)(nil)).Elem(), GetResolverRulesTagFilterArray{})
	pulumi.RegisterOutputType(PrivateZoneTagOutput{})
	pulumi.RegisterOutputType(PrivateZoneTagArrayOutput{})
	pulumi.RegisterOutputType(PrivateZoneVpcOutput{})
	pulumi.RegisterOutputType(PrivateZoneVpcArrayOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneArrayOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneBindVpcOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneBindVpcArrayOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneTagOutput{})
	pulumi.RegisterOutputType(PrivateZonesPrivateZoneTagArrayOutput{})
	pulumi.RegisterOutputType(PrivateZonesTagFilterOutput{})
	pulumi.RegisterOutputType(PrivateZonesTagFilterArrayOutput{})
	pulumi.RegisterOutputType(RecordSetsRecordSetOutput{})
	pulumi.RegisterOutputType(RecordSetsRecordSetArrayOutput{})
	pulumi.RegisterOutputType(RecordsRecordOutput{})
	pulumi.RegisterOutputType(RecordsRecordArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpConfigOutput{})
	pulumi.RegisterOutputType(ResolverEndpointIpConfigArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointTagOutput{})
	pulumi.RegisterOutputType(ResolverEndpointTagArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointIpConfigOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointIpConfigArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointTagOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsEndpointTagArrayOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsTagFilterOutput{})
	pulumi.RegisterOutputType(ResolverEndpointsTagFilterArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleForwardIpOutput{})
	pulumi.RegisterOutputType(ResolverRuleForwardIpArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleTagOutput{})
	pulumi.RegisterOutputType(ResolverRuleTagArrayOutput{})
	pulumi.RegisterOutputType(ResolverRuleVpcOutput{})
	pulumi.RegisterOutputType(ResolverRuleVpcArrayOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleBindVpcOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleBindVpcArrayOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleForwardIpOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleForwardIpArrayOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleTagOutput{})
	pulumi.RegisterOutputType(ResolverRulesRuleTagArrayOutput{})
	pulumi.RegisterOutputType(ResolverRulesTagFilterOutput{})
	pulumi.RegisterOutputType(ResolverRulesTagFilterArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesPrivateZoneOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesPrivateZoneArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesPrivateZoneBindVpcOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesPrivateZoneBindVpcArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesPrivateZoneTagOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesPrivateZoneTagArrayOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesTagFilterOutput{})
	pulumi.RegisterOutputType(GetPrivateZonesTagFilterArrayOutput{})
	pulumi.RegisterOutputType(GetRecordSetsRecordSetOutput{})
	pulumi.RegisterOutputType(GetRecordSetsRecordSetArrayOutput{})
	pulumi.RegisterOutputType(GetRecordsRecordOutput{})
	pulumi.RegisterOutputType(GetRecordsRecordArrayOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointsEndpointOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointsEndpointIpConfigOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointsEndpointIpConfigArrayOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointsEndpointTagOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointsEndpointTagArrayOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointsTagFilterOutput{})
	pulumi.RegisterOutputType(GetResolverEndpointsTagFilterArrayOutput{})
	pulumi.RegisterOutputType(GetResolverRulesRuleOutput{})
	pulumi.RegisterOutputType(GetResolverRulesRuleArrayOutput{})
	pulumi.RegisterOutputType(GetResolverRulesRuleBindVpcOutput{})
	pulumi.RegisterOutputType(GetResolverRulesRuleBindVpcArrayOutput{})
	pulumi.RegisterOutputType(GetResolverRulesRuleForwardIpOutput{})
	pulumi.RegisterOutputType(GetResolverRulesRuleForwardIpArrayOutput{})
	pulumi.RegisterOutputType(GetResolverRulesRuleTagOutput{})
	pulumi.RegisterOutputType(GetResolverRulesRuleTagArrayOutput{})
	pulumi.RegisterOutputType(GetResolverRulesTagFilterOutput{})
	pulumi.RegisterOutputType(GetResolverRulesTagFilterArrayOutput{})
}
