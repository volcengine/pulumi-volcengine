// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package private_zone

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of private zone resolver endpoints
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/private_zone"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := private_zone.ResolverEndpoints(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func ResolverEndpoints(ctx *pulumi.Context, args *ResolverEndpointsArgs, opts ...pulumi.InvokeOption) (*ResolverEndpointsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ResolverEndpointsResult
	err := ctx.Invoke("volcengine:private_zone/resolverEndpoints:ResolverEndpoints", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ResolverEndpoints.
type ResolverEndpointsArgs struct {
	// The direction of the private zone resolver endpoint.
	Direction *string `pulumi:"direction"`
	// The name of the private zone resolver endpoint.
	Name *string `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The status of the private zone resolver endpoint.
	Status *string `pulumi:"status"`
	// The vpc ID of the private zone resolver endpoint.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by ResolverEndpoints.
type ResolverEndpointsResult struct {
	// The direction of the endpoint.
	Direction *string `pulumi:"direction"`
	// The collection of query.
	Endpoints []ResolverEndpointsEndpoint `pulumi:"endpoints"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The name of the endpoint.
	Name       *string `pulumi:"name"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The status of the endpoint.
	Status *string `pulumi:"status"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The vpc id of the endpoint.
	VpcId *string `pulumi:"vpcId"`
}

func ResolverEndpointsOutput(ctx *pulumi.Context, args ResolverEndpointsOutputArgs, opts ...pulumi.InvokeOption) ResolverEndpointsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ResolverEndpointsResult, error) {
			args := v.(ResolverEndpointsArgs)
			r, err := ResolverEndpoints(ctx, &args, opts...)
			var s ResolverEndpointsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ResolverEndpointsResultOutput)
}

// A collection of arguments for invoking ResolverEndpoints.
type ResolverEndpointsOutputArgs struct {
	// The direction of the private zone resolver endpoint.
	Direction pulumi.StringPtrInput `pulumi:"direction"`
	// The name of the private zone resolver endpoint.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The status of the private zone resolver endpoint.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The vpc ID of the private zone resolver endpoint.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (ResolverEndpointsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsArgs)(nil)).Elem()
}

// A collection of values returned by ResolverEndpoints.
type ResolverEndpointsResultOutput struct{ *pulumi.OutputState }

func (ResolverEndpointsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ResolverEndpointsResult)(nil)).Elem()
}

func (o ResolverEndpointsResultOutput) ToResolverEndpointsResultOutput() ResolverEndpointsResultOutput {
	return o
}

func (o ResolverEndpointsResultOutput) ToResolverEndpointsResultOutputWithContext(ctx context.Context) ResolverEndpointsResultOutput {
	return o
}

// The direction of the endpoint.
func (o ResolverEndpointsResultOutput) Direction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointsResult) *string { return v.Direction }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o ResolverEndpointsResultOutput) Endpoints() ResolverEndpointsEndpointArrayOutput {
	return o.ApplyT(func(v ResolverEndpointsResult) []ResolverEndpointsEndpoint { return v.Endpoints }).(ResolverEndpointsEndpointArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ResolverEndpointsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ResolverEndpointsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the endpoint.
func (o ResolverEndpointsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ResolverEndpointsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ResolverEndpointsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The status of the endpoint.
func (o ResolverEndpointsResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointsResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o ResolverEndpointsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ResolverEndpointsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The vpc id of the endpoint.
func (o ResolverEndpointsResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ResolverEndpointsResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ResolverEndpointsResultOutput{})
}
