// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rds mysql backup policy
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rds_mysql.NewBackupPolicy(ctx, "foo", &rds_mysql.BackupPolicyArgs{
//				BinlogFileCountsEnable: pulumi.Bool(true),
//				BinlogSpaceLimitEnable: pulumi.Bool(true),
//				DataFullBackupPeriods: pulumi.StringArray{
//					pulumi.String("Monday"),
//					pulumi.String("Sunday"),
//				},
//				InstanceId:  pulumi.String("mysql-c8c3f45c4b07"),
//				LockDdlTime: pulumi.Int(80),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RdsMysqlBackupPolicy can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:rds_mysql/backupPolicy:BackupPolicy default instanceId:backupPolicy
// ```
// Warning:The resource cannot be deleted, and the destroy operation will not perform any actions.
type BackupPolicy struct {
	pulumi.CustomResourceState

	// Whether to retain all log backups before releasing an instance. Values:
	// true: Yes.
	// false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
	BinlogBackupAllRetention pulumi.BoolOutput `pulumi:"binlogBackupAllRetention"`
	// Whether to enable log backup function. Values:
	// true: Yes.
	// false: No.
	BinlogBackupEnabled pulumi.BoolOutput `pulumi:"binlogBackupEnabled"`
	// Is encryption enabled for log backups? Values:
	// true: Yes.
	// false: No.
	BinlogBackupEncryptionEnabled pulumi.BoolOutput `pulumi:"binlogBackupEncryptionEnabled"`
	// Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
	BinlogFileCountsEnable pulumi.BoolOutput `pulumi:"binlogFileCountsEnable"`
	// Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogLimitCount pulumi.IntOutput `pulumi:"binlogLimitCount"`
	// Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
	BinlogLocalRetentionHour pulumi.IntOutput `pulumi:"binlogLocalRetentionHour"`
	// Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
	BinlogSpaceLimitEnable pulumi.BoolOutput `pulumi:"binlogSpaceLimitEnable"`
	// Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogStoragePercentage pulumi.IntOutput `pulumi:"binlogStoragePercentage"`
	// Whether to retain all data backups before releasing the instance. Values:
	// true: Yes.
	// false: No.
	DataBackupAllRetention pulumi.BoolOutput `pulumi:"dataBackupAllRetention"`
	// Whether to enable encryption for data backup. Values:
	// true: Yes.
	// false: No.
	DataBackupEncryptionEnabled pulumi.BoolOutput `pulumi:"dataBackupEncryptionEnabled"`
	// Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
	DataBackupRetentionDay pulumi.IntOutput `pulumi:"dataBackupRetentionDay"`
	// Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
	DataFullBackupPeriods pulumi.StringArrayOutput `pulumi:"dataFullBackupPeriods"`
	// The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
	DataFullBackupStartUtcHour pulumi.IntOutput `pulumi:"dataFullBackupStartUtcHour"`
	// Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
	DataFullBackupTime pulumi.StringOutput `pulumi:"dataFullBackupTime"`
	// Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
	DataIncrBackupPeriods pulumi.StringArrayOutput `pulumi:"dataIncrBackupPeriods"`
	// Backup retention days when an instance is released. Currently, only a value of 7 is supported.
	DataKeepDaysAfterReleased pulumi.IntOutput `pulumi:"dataKeepDaysAfterReleased"`
	// Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
	DataKeepPolicyAfterReleased pulumi.StringOutput `pulumi:"dataKeepPolicyAfterReleased"`
	// Whether to enable high-frequency backup function. Values:
	// true: Yes.
	// false: No.
	HourlyIncrBackupEnable pulumi.BoolOutput `pulumi:"hourlyIncrBackupEnable"`
	// Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
	IncrBackupHourPeriod pulumi.IntOutput `pulumi:"incrBackupHourPeriod"`
	// The ID of the RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
	LockDdlTime pulumi.IntOutput `pulumi:"lockDdlTime"`
	// Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	LogBackupRetentionDay pulumi.IntOutput `pulumi:"logBackupRetentionDay"`
	// Is the retention policy for log backups the same as that for data backups?
	// Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
	RetentionPolicySynced pulumi.BoolOutput `pulumi:"retentionPolicySynced"`
}

// NewBackupPolicy registers a new resource with the given unique name, arguments, and options.
func NewBackupPolicy(ctx *pulumi.Context,
	name string, args *BackupPolicyArgs, opts ...pulumi.ResourceOption) (*BackupPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupPolicy
	err := ctx.RegisterResource("volcengine:rds_mysql/backupPolicy:BackupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupPolicy gets an existing BackupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupPolicyState, opts ...pulumi.ResourceOption) (*BackupPolicy, error) {
	var resource BackupPolicy
	err := ctx.ReadResource("volcengine:rds_mysql/backupPolicy:BackupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupPolicy resources.
type backupPolicyState struct {
	// Whether to retain all log backups before releasing an instance. Values:
	// true: Yes.
	// false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
	BinlogBackupAllRetention *bool `pulumi:"binlogBackupAllRetention"`
	// Whether to enable log backup function. Values:
	// true: Yes.
	// false: No.
	BinlogBackupEnabled *bool `pulumi:"binlogBackupEnabled"`
	// Is encryption enabled for log backups? Values:
	// true: Yes.
	// false: No.
	BinlogBackupEncryptionEnabled *bool `pulumi:"binlogBackupEncryptionEnabled"`
	// Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
	BinlogFileCountsEnable *bool `pulumi:"binlogFileCountsEnable"`
	// Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogLimitCount *int `pulumi:"binlogLimitCount"`
	// Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
	BinlogLocalRetentionHour *int `pulumi:"binlogLocalRetentionHour"`
	// Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
	BinlogSpaceLimitEnable *bool `pulumi:"binlogSpaceLimitEnable"`
	// Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogStoragePercentage *int `pulumi:"binlogStoragePercentage"`
	// Whether to retain all data backups before releasing the instance. Values:
	// true: Yes.
	// false: No.
	DataBackupAllRetention *bool `pulumi:"dataBackupAllRetention"`
	// Whether to enable encryption for data backup. Values:
	// true: Yes.
	// false: No.
	DataBackupEncryptionEnabled *bool `pulumi:"dataBackupEncryptionEnabled"`
	// Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
	DataBackupRetentionDay *int `pulumi:"dataBackupRetentionDay"`
	// Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
	DataFullBackupPeriods []string `pulumi:"dataFullBackupPeriods"`
	// The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
	DataFullBackupStartUtcHour *int `pulumi:"dataFullBackupStartUtcHour"`
	// Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
	DataFullBackupTime *string `pulumi:"dataFullBackupTime"`
	// Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
	DataIncrBackupPeriods []string `pulumi:"dataIncrBackupPeriods"`
	// Backup retention days when an instance is released. Currently, only a value of 7 is supported.
	DataKeepDaysAfterReleased *int `pulumi:"dataKeepDaysAfterReleased"`
	// Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
	DataKeepPolicyAfterReleased *string `pulumi:"dataKeepPolicyAfterReleased"`
	// Whether to enable high-frequency backup function. Values:
	// true: Yes.
	// false: No.
	HourlyIncrBackupEnable *bool `pulumi:"hourlyIncrBackupEnable"`
	// Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
	IncrBackupHourPeriod *int `pulumi:"incrBackupHourPeriod"`
	// The ID of the RDS instance.
	InstanceId *string `pulumi:"instanceId"`
	// Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
	LockDdlTime *int `pulumi:"lockDdlTime"`
	// Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	LogBackupRetentionDay *int `pulumi:"logBackupRetentionDay"`
	// Is the retention policy for log backups the same as that for data backups?
	// Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
	RetentionPolicySynced *bool `pulumi:"retentionPolicySynced"`
}

type BackupPolicyState struct {
	// Whether to retain all log backups before releasing an instance. Values:
	// true: Yes.
	// false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
	BinlogBackupAllRetention pulumi.BoolPtrInput
	// Whether to enable log backup function. Values:
	// true: Yes.
	// false: No.
	BinlogBackupEnabled pulumi.BoolPtrInput
	// Is encryption enabled for log backups? Values:
	// true: Yes.
	// false: No.
	BinlogBackupEncryptionEnabled pulumi.BoolPtrInput
	// Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
	BinlogFileCountsEnable pulumi.BoolPtrInput
	// Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogLimitCount pulumi.IntPtrInput
	// Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
	BinlogLocalRetentionHour pulumi.IntPtrInput
	// Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
	BinlogSpaceLimitEnable pulumi.BoolPtrInput
	// Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogStoragePercentage pulumi.IntPtrInput
	// Whether to retain all data backups before releasing the instance. Values:
	// true: Yes.
	// false: No.
	DataBackupAllRetention pulumi.BoolPtrInput
	// Whether to enable encryption for data backup. Values:
	// true: Yes.
	// false: No.
	DataBackupEncryptionEnabled pulumi.BoolPtrInput
	// Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
	DataBackupRetentionDay pulumi.IntPtrInput
	// Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
	DataFullBackupPeriods pulumi.StringArrayInput
	// The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
	DataFullBackupStartUtcHour pulumi.IntPtrInput
	// Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
	DataFullBackupTime pulumi.StringPtrInput
	// Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
	DataIncrBackupPeriods pulumi.StringArrayInput
	// Backup retention days when an instance is released. Currently, only a value of 7 is supported.
	DataKeepDaysAfterReleased pulumi.IntPtrInput
	// Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
	DataKeepPolicyAfterReleased pulumi.StringPtrInput
	// Whether to enable high-frequency backup function. Values:
	// true: Yes.
	// false: No.
	HourlyIncrBackupEnable pulumi.BoolPtrInput
	// Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
	IncrBackupHourPeriod pulumi.IntPtrInput
	// The ID of the RDS instance.
	InstanceId pulumi.StringPtrInput
	// Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
	LockDdlTime pulumi.IntPtrInput
	// Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	LogBackupRetentionDay pulumi.IntPtrInput
	// Is the retention policy for log backups the same as that for data backups?
	// Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
	RetentionPolicySynced pulumi.BoolPtrInput
}

func (BackupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyState)(nil)).Elem()
}

type backupPolicyArgs struct {
	// Whether to retain all log backups before releasing an instance. Values:
	// true: Yes.
	// false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
	BinlogBackupAllRetention *bool `pulumi:"binlogBackupAllRetention"`
	// Whether to enable log backup function. Values:
	// true: Yes.
	// false: No.
	BinlogBackupEnabled *bool `pulumi:"binlogBackupEnabled"`
	// Is encryption enabled for log backups? Values:
	// true: Yes.
	// false: No.
	BinlogBackupEncryptionEnabled *bool `pulumi:"binlogBackupEncryptionEnabled"`
	// Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
	BinlogFileCountsEnable *bool `pulumi:"binlogFileCountsEnable"`
	// Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogLimitCount *int `pulumi:"binlogLimitCount"`
	// Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
	BinlogLocalRetentionHour *int `pulumi:"binlogLocalRetentionHour"`
	// Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
	BinlogSpaceLimitEnable *bool `pulumi:"binlogSpaceLimitEnable"`
	// Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogStoragePercentage *int `pulumi:"binlogStoragePercentage"`
	// Whether to retain all data backups before releasing the instance. Values:
	// true: Yes.
	// false: No.
	DataBackupAllRetention *bool `pulumi:"dataBackupAllRetention"`
	// Whether to enable encryption for data backup. Values:
	// true: Yes.
	// false: No.
	DataBackupEncryptionEnabled *bool `pulumi:"dataBackupEncryptionEnabled"`
	// Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
	DataBackupRetentionDay *int `pulumi:"dataBackupRetentionDay"`
	// Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
	DataFullBackupPeriods []string `pulumi:"dataFullBackupPeriods"`
	// The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
	DataFullBackupStartUtcHour *int `pulumi:"dataFullBackupStartUtcHour"`
	// Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
	DataFullBackupTime *string `pulumi:"dataFullBackupTime"`
	// Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
	DataIncrBackupPeriods []string `pulumi:"dataIncrBackupPeriods"`
	// Backup retention days when an instance is released. Currently, only a value of 7 is supported.
	DataKeepDaysAfterReleased *int `pulumi:"dataKeepDaysAfterReleased"`
	// Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
	DataKeepPolicyAfterReleased *string `pulumi:"dataKeepPolicyAfterReleased"`
	// Whether to enable high-frequency backup function. Values:
	// true: Yes.
	// false: No.
	HourlyIncrBackupEnable *bool `pulumi:"hourlyIncrBackupEnable"`
	// Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
	IncrBackupHourPeriod *int `pulumi:"incrBackupHourPeriod"`
	// The ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
	LockDdlTime *int `pulumi:"lockDdlTime"`
	// Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	LogBackupRetentionDay *int `pulumi:"logBackupRetentionDay"`
	// Is the retention policy for log backups the same as that for data backups?
	// Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
	RetentionPolicySynced *bool `pulumi:"retentionPolicySynced"`
}

// The set of arguments for constructing a BackupPolicy resource.
type BackupPolicyArgs struct {
	// Whether to retain all log backups before releasing an instance. Values:
	// true: Yes.
	// false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
	BinlogBackupAllRetention pulumi.BoolPtrInput
	// Whether to enable log backup function. Values:
	// true: Yes.
	// false: No.
	BinlogBackupEnabled pulumi.BoolPtrInput
	// Is encryption enabled for log backups? Values:
	// true: Yes.
	// false: No.
	BinlogBackupEncryptionEnabled pulumi.BoolPtrInput
	// Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
	BinlogFileCountsEnable pulumi.BoolPtrInput
	// Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogLimitCount pulumi.IntPtrInput
	// Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
	BinlogLocalRetentionHour pulumi.IntPtrInput
	// Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
	BinlogSpaceLimitEnable pulumi.BoolPtrInput
	// Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	BinlogStoragePercentage pulumi.IntPtrInput
	// Whether to retain all data backups before releasing the instance. Values:
	// true: Yes.
	// false: No.
	DataBackupAllRetention pulumi.BoolPtrInput
	// Whether to enable encryption for data backup. Values:
	// true: Yes.
	// false: No.
	DataBackupEncryptionEnabled pulumi.BoolPtrInput
	// Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
	DataBackupRetentionDay pulumi.IntPtrInput
	// Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
	DataFullBackupPeriods pulumi.StringArrayInput
	// The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
	DataFullBackupStartUtcHour pulumi.IntPtrInput
	// Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
	DataFullBackupTime pulumi.StringPtrInput
	// Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
	DataIncrBackupPeriods pulumi.StringArrayInput
	// Backup retention days when an instance is released. Currently, only a value of 7 is supported.
	DataKeepDaysAfterReleased pulumi.IntPtrInput
	// Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
	DataKeepPolicyAfterReleased pulumi.StringPtrInput
	// Whether to enable high-frequency backup function. Values:
	// true: Yes.
	// false: No.
	HourlyIncrBackupEnable pulumi.BoolPtrInput
	// Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
	IncrBackupHourPeriod pulumi.IntPtrInput
	// The ID of the RDS instance.
	InstanceId pulumi.StringInput
	// Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
	LockDdlTime pulumi.IntPtrInput
	// Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
	LogBackupRetentionDay pulumi.IntPtrInput
	// Is the retention policy for log backups the same as that for data backups?
	// Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
	RetentionPolicySynced pulumi.BoolPtrInput
}

func (BackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupPolicyArgs)(nil)).Elem()
}

type BackupPolicyInput interface {
	pulumi.Input

	ToBackupPolicyOutput() BackupPolicyOutput
	ToBackupPolicyOutputWithContext(ctx context.Context) BackupPolicyOutput
}

func (*BackupPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPolicy)(nil)).Elem()
}

func (i *BackupPolicy) ToBackupPolicyOutput() BackupPolicyOutput {
	return i.ToBackupPolicyOutputWithContext(context.Background())
}

func (i *BackupPolicy) ToBackupPolicyOutputWithContext(ctx context.Context) BackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyOutput)
}

// BackupPolicyArrayInput is an input type that accepts BackupPolicyArray and BackupPolicyArrayOutput values.
// You can construct a concrete instance of `BackupPolicyArrayInput` via:
//
//	BackupPolicyArray{ BackupPolicyArgs{...} }
type BackupPolicyArrayInput interface {
	pulumi.Input

	ToBackupPolicyArrayOutput() BackupPolicyArrayOutput
	ToBackupPolicyArrayOutputWithContext(context.Context) BackupPolicyArrayOutput
}

type BackupPolicyArray []BackupPolicyInput

func (BackupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPolicy)(nil)).Elem()
}

func (i BackupPolicyArray) ToBackupPolicyArrayOutput() BackupPolicyArrayOutput {
	return i.ToBackupPolicyArrayOutputWithContext(context.Background())
}

func (i BackupPolicyArray) ToBackupPolicyArrayOutputWithContext(ctx context.Context) BackupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyArrayOutput)
}

// BackupPolicyMapInput is an input type that accepts BackupPolicyMap and BackupPolicyMapOutput values.
// You can construct a concrete instance of `BackupPolicyMapInput` via:
//
//	BackupPolicyMap{ "key": BackupPolicyArgs{...} }
type BackupPolicyMapInput interface {
	pulumi.Input

	ToBackupPolicyMapOutput() BackupPolicyMapOutput
	ToBackupPolicyMapOutputWithContext(context.Context) BackupPolicyMapOutput
}

type BackupPolicyMap map[string]BackupPolicyInput

func (BackupPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPolicy)(nil)).Elem()
}

func (i BackupPolicyMap) ToBackupPolicyMapOutput() BackupPolicyMapOutput {
	return i.ToBackupPolicyMapOutputWithContext(context.Background())
}

func (i BackupPolicyMap) ToBackupPolicyMapOutputWithContext(ctx context.Context) BackupPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupPolicyMapOutput)
}

type BackupPolicyOutput struct{ *pulumi.OutputState }

func (BackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupPolicy)(nil)).Elem()
}

func (o BackupPolicyOutput) ToBackupPolicyOutput() BackupPolicyOutput {
	return o
}

func (o BackupPolicyOutput) ToBackupPolicyOutputWithContext(ctx context.Context) BackupPolicyOutput {
	return o
}

// Whether to retain all log backups before releasing an instance. Values:
// true: Yes.
// false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
func (o BackupPolicyOutput) BinlogBackupAllRetention() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.BinlogBackupAllRetention }).(pulumi.BoolOutput)
}

// Whether to enable log backup function. Values:
// true: Yes.
// false: No.
func (o BackupPolicyOutput) BinlogBackupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.BinlogBackupEnabled }).(pulumi.BoolOutput)
}

// Is encryption enabled for log backups? Values:
// true: Yes.
// false: No.
func (o BackupPolicyOutput) BinlogBackupEncryptionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.BinlogBackupEncryptionEnabled }).(pulumi.BoolOutput)
}

// Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
func (o BackupPolicyOutput) BinlogFileCountsEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.BinlogFileCountsEnable }).(pulumi.BoolOutput)
}

// Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
func (o BackupPolicyOutput) BinlogLimitCount() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.IntOutput { return v.BinlogLimitCount }).(pulumi.IntOutput)
}

// Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
func (o BackupPolicyOutput) BinlogLocalRetentionHour() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.IntOutput { return v.BinlogLocalRetentionHour }).(pulumi.IntOutput)
}

// Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
func (o BackupPolicyOutput) BinlogSpaceLimitEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.BinlogSpaceLimitEnable }).(pulumi.BoolOutput)
}

// Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
func (o BackupPolicyOutput) BinlogStoragePercentage() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.IntOutput { return v.BinlogStoragePercentage }).(pulumi.IntOutput)
}

// Whether to retain all data backups before releasing the instance. Values:
// true: Yes.
// false: No.
func (o BackupPolicyOutput) DataBackupAllRetention() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.DataBackupAllRetention }).(pulumi.BoolOutput)
}

// Whether to enable encryption for data backup. Values:
// true: Yes.
// false: No.
func (o BackupPolicyOutput) DataBackupEncryptionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.DataBackupEncryptionEnabled }).(pulumi.BoolOutput)
}

// Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
func (o BackupPolicyOutput) DataBackupRetentionDay() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.IntOutput { return v.DataBackupRetentionDay }).(pulumi.IntOutput)
}

// Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
func (o BackupPolicyOutput) DataFullBackupPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringArrayOutput { return v.DataFullBackupPeriods }).(pulumi.StringArrayOutput)
}

// The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
func (o BackupPolicyOutput) DataFullBackupStartUtcHour() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.IntOutput { return v.DataFullBackupStartUtcHour }).(pulumi.IntOutput)
}

// Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
func (o BackupPolicyOutput) DataFullBackupTime() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringOutput { return v.DataFullBackupTime }).(pulumi.StringOutput)
}

// Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
func (o BackupPolicyOutput) DataIncrBackupPeriods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringArrayOutput { return v.DataIncrBackupPeriods }).(pulumi.StringArrayOutput)
}

// Backup retention days when an instance is released. Currently, only a value of 7 is supported.
func (o BackupPolicyOutput) DataKeepDaysAfterReleased() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.IntOutput { return v.DataKeepDaysAfterReleased }).(pulumi.IntOutput)
}

// Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
func (o BackupPolicyOutput) DataKeepPolicyAfterReleased() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringOutput { return v.DataKeepPolicyAfterReleased }).(pulumi.StringOutput)
}

// Whether to enable high-frequency backup function. Values:
// true: Yes.
// false: No.
func (o BackupPolicyOutput) HourlyIncrBackupEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.HourlyIncrBackupEnable }).(pulumi.BoolOutput)
}

// Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
func (o BackupPolicyOutput) IncrBackupHourPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.IntOutput { return v.IncrBackupHourPeriod }).(pulumi.IntOutput)
}

// The ID of the RDS instance.
func (o BackupPolicyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
func (o BackupPolicyOutput) LockDdlTime() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.IntOutput { return v.LockDdlTime }).(pulumi.IntOutput)
}

// Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
func (o BackupPolicyOutput) LogBackupRetentionDay() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.IntOutput { return v.LogBackupRetentionDay }).(pulumi.IntOutput)
}

// Is the retention policy for log backups the same as that for data backups?
// Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
func (o BackupPolicyOutput) RetentionPolicySynced() pulumi.BoolOutput {
	return o.ApplyT(func(v *BackupPolicy) pulumi.BoolOutput { return v.RetentionPolicySynced }).(pulumi.BoolOutput)
}

type BackupPolicyArrayOutput struct{ *pulumi.OutputState }

func (BackupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupPolicy)(nil)).Elem()
}

func (o BackupPolicyArrayOutput) ToBackupPolicyArrayOutput() BackupPolicyArrayOutput {
	return o
}

func (o BackupPolicyArrayOutput) ToBackupPolicyArrayOutputWithContext(ctx context.Context) BackupPolicyArrayOutput {
	return o
}

func (o BackupPolicyArrayOutput) Index(i pulumi.IntInput) BackupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupPolicy {
		return vs[0].([]*BackupPolicy)[vs[1].(int)]
	}).(BackupPolicyOutput)
}

type BackupPolicyMapOutput struct{ *pulumi.OutputState }

func (BackupPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupPolicy)(nil)).Elem()
}

func (o BackupPolicyMapOutput) ToBackupPolicyMapOutput() BackupPolicyMapOutput {
	return o
}

func (o BackupPolicyMapOutput) ToBackupPolicyMapOutputWithContext(ctx context.Context) BackupPolicyMapOutput {
	return o
}

func (o BackupPolicyMapOutput) MapIndex(k pulumi.StringInput) BackupPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupPolicy {
		return vs[0].(map[string]*BackupPolicy)[vs[1].(string)]
	}).(BackupPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyInput)(nil)).Elem(), &BackupPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyArrayInput)(nil)).Elem(), BackupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupPolicyMapInput)(nil)).Elem(), BackupPolicyMap{})
	pulumi.RegisterOutputType(BackupPolicyOutput{})
	pulumi.RegisterOutputType(BackupPolicyArrayOutput{})
	pulumi.RegisterOutputType(BackupPolicyMapOutput{})
}
