// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of rds mysql parameter templates
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rds_mysql.GetParameterTemplates(ctx, &rds_mysql.GetParameterTemplatesArgs{
//				TemplateCategory: pulumi.StringRef("DBEngine"),
//				TemplateSource:   pulumi.StringRef("User"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.rds_mysql.ParameterTemplates has been deprecated in favor of volcengine.rds_mysql.getParameterTemplates
func ParameterTemplates(ctx *pulumi.Context, args *ParameterTemplatesArgs, opts ...pulumi.InvokeOption) (*ParameterTemplatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ParameterTemplatesResult
	err := ctx.Invoke("volcengine:rds_mysql/parameterTemplates:ParameterTemplates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ParameterTemplates.
type ParameterTemplatesArgs struct {
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Template category, with a value of DBEngine (database engine parameters).
	TemplateCategory *string `pulumi:"templateCategory"`
	// Parameter template source, value range: System. User.
	TemplateSource *string `pulumi:"templateSource"`
	// Database type of parameter template. The default value is Mysql.
	TemplateType *string `pulumi:"templateType"`
	// Database version of parameter template. Value range:
	// MySQL_5_7: Default value. MySQL 5.7 version.
	// MySQL_8_0: MySQL 8.0 version.
	TemplateTypeVersion *string `pulumi:"templateTypeVersion"`
}

// A collection of values returned by ParameterTemplates.
type ParameterTemplatesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// Template category, with a value of DBEngine (database engine parameter).
	TemplateCategory *string `pulumi:"templateCategory"`
	// The type of parameter template. Values:
	// System: System template.
	// User: User template.
	TemplateSource *string `pulumi:"templateSource"`
	// The database type of the parameter template. The default value is Mysql.
	TemplateType *string `pulumi:"templateType"`
	// Parameter template database version, value range:
	// "MySQL_5_7": MySQL 5.7 version.
	// "MySQL_8_0": MySQL 8.0 version.
	TemplateTypeVersion *string `pulumi:"templateTypeVersion"`
	// The collection of query.
	Templates []ParameterTemplatesTemplate `pulumi:"templates"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ParameterTemplatesOutput(ctx *pulumi.Context, args ParameterTemplatesOutputArgs, opts ...pulumi.InvokeOption) ParameterTemplatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ParameterTemplatesResult, error) {
			args := v.(ParameterTemplatesArgs)
			r, err := ParameterTemplates(ctx, &args, opts...)
			var s ParameterTemplatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ParameterTemplatesResultOutput)
}

// A collection of arguments for invoking ParameterTemplates.
type ParameterTemplatesOutputArgs struct {
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Template category, with a value of DBEngine (database engine parameters).
	TemplateCategory pulumi.StringPtrInput `pulumi:"templateCategory"`
	// Parameter template source, value range: System. User.
	TemplateSource pulumi.StringPtrInput `pulumi:"templateSource"`
	// Database type of parameter template. The default value is Mysql.
	TemplateType pulumi.StringPtrInput `pulumi:"templateType"`
	// Database version of parameter template. Value range:
	// MySQL_5_7: Default value. MySQL 5.7 version.
	// MySQL_8_0: MySQL 8.0 version.
	TemplateTypeVersion pulumi.StringPtrInput `pulumi:"templateTypeVersion"`
}

func (ParameterTemplatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterTemplatesArgs)(nil)).Elem()
}

// A collection of values returned by ParameterTemplates.
type ParameterTemplatesResultOutput struct{ *pulumi.OutputState }

func (ParameterTemplatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterTemplatesResult)(nil)).Elem()
}

func (o ParameterTemplatesResultOutput) ToParameterTemplatesResultOutput() ParameterTemplatesResultOutput {
	return o
}

func (o ParameterTemplatesResultOutput) ToParameterTemplatesResultOutputWithContext(ctx context.Context) ParameterTemplatesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o ParameterTemplatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ParameterTemplatesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterTemplatesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// Template category, with a value of DBEngine (database engine parameter).
func (o ParameterTemplatesResultOutput) TemplateCategory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterTemplatesResult) *string { return v.TemplateCategory }).(pulumi.StringPtrOutput)
}

// The type of parameter template. Values:
// System: System template.
// User: User template.
func (o ParameterTemplatesResultOutput) TemplateSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterTemplatesResult) *string { return v.TemplateSource }).(pulumi.StringPtrOutput)
}

// The database type of the parameter template. The default value is Mysql.
func (o ParameterTemplatesResultOutput) TemplateType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterTemplatesResult) *string { return v.TemplateType }).(pulumi.StringPtrOutput)
}

// Parameter template database version, value range:
// "MySQL_5_7": MySQL 5.7 version.
// "MySQL_8_0": MySQL 8.0 version.
func (o ParameterTemplatesResultOutput) TemplateTypeVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ParameterTemplatesResult) *string { return v.TemplateTypeVersion }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o ParameterTemplatesResultOutput) Templates() ParameterTemplatesTemplateArrayOutput {
	return o.ApplyT(func(v ParameterTemplatesResult) []ParameterTemplatesTemplate { return v.Templates }).(ParameterTemplatesTemplateArrayOutput)
}

// The total count of query.
func (o ParameterTemplatesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ParameterTemplatesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ParameterTemplatesResultOutput{})
}
