// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type AccountAccountPrivilege struct {
	// The privilege type of the account.
	AccountPrivilege string `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail *string `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName string `pulumi:"dbName"`
}

// AccountAccountPrivilegeInput is an input type that accepts AccountAccountPrivilegeArgs and AccountAccountPrivilegeOutput values.
// You can construct a concrete instance of `AccountAccountPrivilegeInput` via:
//
//	AccountAccountPrivilegeArgs{...}
type AccountAccountPrivilegeInput interface {
	pulumi.Input

	ToAccountAccountPrivilegeOutput() AccountAccountPrivilegeOutput
	ToAccountAccountPrivilegeOutputWithContext(context.Context) AccountAccountPrivilegeOutput
}

type AccountAccountPrivilegeArgs struct {
	// The privilege type of the account.
	AccountPrivilege pulumi.StringInput `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail pulumi.StringPtrInput `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName pulumi.StringInput `pulumi:"dbName"`
}

func (AccountAccountPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountAccountPrivilege)(nil)).Elem()
}

func (i AccountAccountPrivilegeArgs) ToAccountAccountPrivilegeOutput() AccountAccountPrivilegeOutput {
	return i.ToAccountAccountPrivilegeOutputWithContext(context.Background())
}

func (i AccountAccountPrivilegeArgs) ToAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountAccountPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountAccountPrivilegeOutput)
}

// AccountAccountPrivilegeArrayInput is an input type that accepts AccountAccountPrivilegeArray and AccountAccountPrivilegeArrayOutput values.
// You can construct a concrete instance of `AccountAccountPrivilegeArrayInput` via:
//
//	AccountAccountPrivilegeArray{ AccountAccountPrivilegeArgs{...} }
type AccountAccountPrivilegeArrayInput interface {
	pulumi.Input

	ToAccountAccountPrivilegeArrayOutput() AccountAccountPrivilegeArrayOutput
	ToAccountAccountPrivilegeArrayOutputWithContext(context.Context) AccountAccountPrivilegeArrayOutput
}

type AccountAccountPrivilegeArray []AccountAccountPrivilegeInput

func (AccountAccountPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountAccountPrivilege)(nil)).Elem()
}

func (i AccountAccountPrivilegeArray) ToAccountAccountPrivilegeArrayOutput() AccountAccountPrivilegeArrayOutput {
	return i.ToAccountAccountPrivilegeArrayOutputWithContext(context.Background())
}

func (i AccountAccountPrivilegeArray) ToAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountAccountPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountAccountPrivilegeArrayOutput)
}

type AccountAccountPrivilegeOutput struct{ *pulumi.OutputState }

func (AccountAccountPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountAccountPrivilege)(nil)).Elem()
}

func (o AccountAccountPrivilegeOutput) ToAccountAccountPrivilegeOutput() AccountAccountPrivilegeOutput {
	return o
}

func (o AccountAccountPrivilegeOutput) ToAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountAccountPrivilegeOutput {
	return o
}

// The privilege type of the account.
func (o AccountAccountPrivilegeOutput) AccountPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v AccountAccountPrivilege) string { return v.AccountPrivilege }).(pulumi.StringOutput)
}

// The privilege detail of the account.
func (o AccountAccountPrivilegeOutput) AccountPrivilegeDetail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountAccountPrivilege) *string { return v.AccountPrivilegeDetail }).(pulumi.StringPtrOutput)
}

// The name of database.
func (o AccountAccountPrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountAccountPrivilege) string { return v.DbName }).(pulumi.StringOutput)
}

type AccountAccountPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (AccountAccountPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountAccountPrivilege)(nil)).Elem()
}

func (o AccountAccountPrivilegeArrayOutput) ToAccountAccountPrivilegeArrayOutput() AccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountAccountPrivilegeArrayOutput) ToAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountAccountPrivilegeArrayOutput) Index(i pulumi.IntInput) AccountAccountPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountAccountPrivilege {
		return vs[0].([]AccountAccountPrivilege)[vs[1].(int)]
	}).(AccountAccountPrivilegeOutput)
}

type AccountsAccount struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName string `pulumi:"accountName"`
	// The privilege detail list of RDS mysql instance account.
	AccountPrivileges []AccountsAccountAccountPrivilege `pulumi:"accountPrivileges"`
	// The status of the database account.
	AccountStatus string `pulumi:"accountStatus"`
	// The type of the database account.
	AccountType string `pulumi:"accountType"`
}

// AccountsAccountInput is an input type that accepts AccountsAccountArgs and AccountsAccountOutput values.
// You can construct a concrete instance of `AccountsAccountInput` via:
//
//	AccountsAccountArgs{...}
type AccountsAccountInput interface {
	pulumi.Input

	ToAccountsAccountOutput() AccountsAccountOutput
	ToAccountsAccountOutputWithContext(context.Context) AccountsAccountOutput
}

type AccountsAccountArgs struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The privilege detail list of RDS mysql instance account.
	AccountPrivileges AccountsAccountAccountPrivilegeArrayInput `pulumi:"accountPrivileges"`
	// The status of the database account.
	AccountStatus pulumi.StringInput `pulumi:"accountStatus"`
	// The type of the database account.
	AccountType pulumi.StringInput `pulumi:"accountType"`
}

func (AccountsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccount)(nil)).Elem()
}

func (i AccountsAccountArgs) ToAccountsAccountOutput() AccountsAccountOutput {
	return i.ToAccountsAccountOutputWithContext(context.Background())
}

func (i AccountsAccountArgs) ToAccountsAccountOutputWithContext(ctx context.Context) AccountsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountOutput)
}

// AccountsAccountArrayInput is an input type that accepts AccountsAccountArray and AccountsAccountArrayOutput values.
// You can construct a concrete instance of `AccountsAccountArrayInput` via:
//
//	AccountsAccountArray{ AccountsAccountArgs{...} }
type AccountsAccountArrayInput interface {
	pulumi.Input

	ToAccountsAccountArrayOutput() AccountsAccountArrayOutput
	ToAccountsAccountArrayOutputWithContext(context.Context) AccountsAccountArrayOutput
}

type AccountsAccountArray []AccountsAccountInput

func (AccountsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccount)(nil)).Elem()
}

func (i AccountsAccountArray) ToAccountsAccountArrayOutput() AccountsAccountArrayOutput {
	return i.ToAccountsAccountArrayOutputWithContext(context.Background())
}

func (i AccountsAccountArray) ToAccountsAccountArrayOutputWithContext(ctx context.Context) AccountsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountArrayOutput)
}

type AccountsAccountOutput struct{ *pulumi.OutputState }

func (AccountsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccount)(nil)).Elem()
}

func (o AccountsAccountOutput) ToAccountsAccountOutput() AccountsAccountOutput {
	return o
}

func (o AccountsAccountOutput) ToAccountsAccountOutputWithContext(ctx context.Context) AccountsAccountOutput {
	return o
}

// The name of the database account. This field supports fuzzy query.
func (o AccountsAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountName }).(pulumi.StringOutput)
}

// The privilege detail list of RDS mysql instance account.
func (o AccountsAccountOutput) AccountPrivileges() AccountsAccountAccountPrivilegeArrayOutput {
	return o.ApplyT(func(v AccountsAccount) []AccountsAccountAccountPrivilege { return v.AccountPrivileges }).(AccountsAccountAccountPrivilegeArrayOutput)
}

// The status of the database account.
func (o AccountsAccountOutput) AccountStatus() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountStatus }).(pulumi.StringOutput)
}

// The type of the database account.
func (o AccountsAccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountType }).(pulumi.StringOutput)
}

type AccountsAccountArrayOutput struct{ *pulumi.OutputState }

func (AccountsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccount)(nil)).Elem()
}

func (o AccountsAccountArrayOutput) ToAccountsAccountArrayOutput() AccountsAccountArrayOutput {
	return o
}

func (o AccountsAccountArrayOutput) ToAccountsAccountArrayOutputWithContext(ctx context.Context) AccountsAccountArrayOutput {
	return o
}

func (o AccountsAccountArrayOutput) Index(i pulumi.IntInput) AccountsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountsAccount {
		return vs[0].([]AccountsAccount)[vs[1].(int)]
	}).(AccountsAccountOutput)
}

type AccountsAccountAccountPrivilege struct {
	// The privilege type of the account.
	AccountPrivilege string `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail string `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName string `pulumi:"dbName"`
}

// AccountsAccountAccountPrivilegeInput is an input type that accepts AccountsAccountAccountPrivilegeArgs and AccountsAccountAccountPrivilegeOutput values.
// You can construct a concrete instance of `AccountsAccountAccountPrivilegeInput` via:
//
//	AccountsAccountAccountPrivilegeArgs{...}
type AccountsAccountAccountPrivilegeInput interface {
	pulumi.Input

	ToAccountsAccountAccountPrivilegeOutput() AccountsAccountAccountPrivilegeOutput
	ToAccountsAccountAccountPrivilegeOutputWithContext(context.Context) AccountsAccountAccountPrivilegeOutput
}

type AccountsAccountAccountPrivilegeArgs struct {
	// The privilege type of the account.
	AccountPrivilege pulumi.StringInput `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail pulumi.StringInput `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName pulumi.StringInput `pulumi:"dbName"`
}

func (AccountsAccountAccountPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (i AccountsAccountAccountPrivilegeArgs) ToAccountsAccountAccountPrivilegeOutput() AccountsAccountAccountPrivilegeOutput {
	return i.ToAccountsAccountAccountPrivilegeOutputWithContext(context.Background())
}

func (i AccountsAccountAccountPrivilegeArgs) ToAccountsAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountAccountPrivilegeOutput)
}

// AccountsAccountAccountPrivilegeArrayInput is an input type that accepts AccountsAccountAccountPrivilegeArray and AccountsAccountAccountPrivilegeArrayOutput values.
// You can construct a concrete instance of `AccountsAccountAccountPrivilegeArrayInput` via:
//
//	AccountsAccountAccountPrivilegeArray{ AccountsAccountAccountPrivilegeArgs{...} }
type AccountsAccountAccountPrivilegeArrayInput interface {
	pulumi.Input

	ToAccountsAccountAccountPrivilegeArrayOutput() AccountsAccountAccountPrivilegeArrayOutput
	ToAccountsAccountAccountPrivilegeArrayOutputWithContext(context.Context) AccountsAccountAccountPrivilegeArrayOutput
}

type AccountsAccountAccountPrivilegeArray []AccountsAccountAccountPrivilegeInput

func (AccountsAccountAccountPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (i AccountsAccountAccountPrivilegeArray) ToAccountsAccountAccountPrivilegeArrayOutput() AccountsAccountAccountPrivilegeArrayOutput {
	return i.ToAccountsAccountAccountPrivilegeArrayOutputWithContext(context.Background())
}

func (i AccountsAccountAccountPrivilegeArray) ToAccountsAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountAccountPrivilegeArrayOutput)
}

type AccountsAccountAccountPrivilegeOutput struct{ *pulumi.OutputState }

func (AccountsAccountAccountPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (o AccountsAccountAccountPrivilegeOutput) ToAccountsAccountAccountPrivilegeOutput() AccountsAccountAccountPrivilegeOutput {
	return o
}

func (o AccountsAccountAccountPrivilegeOutput) ToAccountsAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeOutput {
	return o
}

// The privilege type of the account.
func (o AccountsAccountAccountPrivilegeOutput) AccountPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccountAccountPrivilege) string { return v.AccountPrivilege }).(pulumi.StringOutput)
}

// The privilege detail of the account.
func (o AccountsAccountAccountPrivilegeOutput) AccountPrivilegeDetail() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccountAccountPrivilege) string { return v.AccountPrivilegeDetail }).(pulumi.StringOutput)
}

// The name of database.
func (o AccountsAccountAccountPrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccountAccountPrivilege) string { return v.DbName }).(pulumi.StringOutput)
}

type AccountsAccountAccountPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (AccountsAccountAccountPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (o AccountsAccountAccountPrivilegeArrayOutput) ToAccountsAccountAccountPrivilegeArrayOutput() AccountsAccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountsAccountAccountPrivilegeArrayOutput) ToAccountsAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountsAccountAccountPrivilegeArrayOutput) Index(i pulumi.IntInput) AccountsAccountAccountPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountsAccountAccountPrivilege {
		return vs[0].([]AccountsAccountAccountPrivilege)[vs[1].(int)]
	}).(AccountsAccountAccountPrivilegeOutput)
}

type AllowlistSecurityGroupBindInfo struct {
	// The schema for the associated security group.
	// IngressDirectionIp: Incoming Direction IP.
	// AssociateEcsIp: Associate ECSIP.
	// explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
	BindMode string `pulumi:"bindMode"`
	// The security group id of the allow list.
	SecurityGroupId string `pulumi:"securityGroupId"`
}

// AllowlistSecurityGroupBindInfoInput is an input type that accepts AllowlistSecurityGroupBindInfoArgs and AllowlistSecurityGroupBindInfoOutput values.
// You can construct a concrete instance of `AllowlistSecurityGroupBindInfoInput` via:
//
//	AllowlistSecurityGroupBindInfoArgs{...}
type AllowlistSecurityGroupBindInfoInput interface {
	pulumi.Input

	ToAllowlistSecurityGroupBindInfoOutput() AllowlistSecurityGroupBindInfoOutput
	ToAllowlistSecurityGroupBindInfoOutputWithContext(context.Context) AllowlistSecurityGroupBindInfoOutput
}

type AllowlistSecurityGroupBindInfoArgs struct {
	// The schema for the associated security group.
	// IngressDirectionIp: Incoming Direction IP.
	// AssociateEcsIp: Associate ECSIP.
	// explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
	BindMode pulumi.StringInput `pulumi:"bindMode"`
	// The security group id of the allow list.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
}

func (AllowlistSecurityGroupBindInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistSecurityGroupBindInfo)(nil)).Elem()
}

func (i AllowlistSecurityGroupBindInfoArgs) ToAllowlistSecurityGroupBindInfoOutput() AllowlistSecurityGroupBindInfoOutput {
	return i.ToAllowlistSecurityGroupBindInfoOutputWithContext(context.Background())
}

func (i AllowlistSecurityGroupBindInfoArgs) ToAllowlistSecurityGroupBindInfoOutputWithContext(ctx context.Context) AllowlistSecurityGroupBindInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistSecurityGroupBindInfoOutput)
}

// AllowlistSecurityGroupBindInfoArrayInput is an input type that accepts AllowlistSecurityGroupBindInfoArray and AllowlistSecurityGroupBindInfoArrayOutput values.
// You can construct a concrete instance of `AllowlistSecurityGroupBindInfoArrayInput` via:
//
//	AllowlistSecurityGroupBindInfoArray{ AllowlistSecurityGroupBindInfoArgs{...} }
type AllowlistSecurityGroupBindInfoArrayInput interface {
	pulumi.Input

	ToAllowlistSecurityGroupBindInfoArrayOutput() AllowlistSecurityGroupBindInfoArrayOutput
	ToAllowlistSecurityGroupBindInfoArrayOutputWithContext(context.Context) AllowlistSecurityGroupBindInfoArrayOutput
}

type AllowlistSecurityGroupBindInfoArray []AllowlistSecurityGroupBindInfoInput

func (AllowlistSecurityGroupBindInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistSecurityGroupBindInfo)(nil)).Elem()
}

func (i AllowlistSecurityGroupBindInfoArray) ToAllowlistSecurityGroupBindInfoArrayOutput() AllowlistSecurityGroupBindInfoArrayOutput {
	return i.ToAllowlistSecurityGroupBindInfoArrayOutputWithContext(context.Background())
}

func (i AllowlistSecurityGroupBindInfoArray) ToAllowlistSecurityGroupBindInfoArrayOutputWithContext(ctx context.Context) AllowlistSecurityGroupBindInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistSecurityGroupBindInfoArrayOutput)
}

type AllowlistSecurityGroupBindInfoOutput struct{ *pulumi.OutputState }

func (AllowlistSecurityGroupBindInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistSecurityGroupBindInfo)(nil)).Elem()
}

func (o AllowlistSecurityGroupBindInfoOutput) ToAllowlistSecurityGroupBindInfoOutput() AllowlistSecurityGroupBindInfoOutput {
	return o
}

func (o AllowlistSecurityGroupBindInfoOutput) ToAllowlistSecurityGroupBindInfoOutputWithContext(ctx context.Context) AllowlistSecurityGroupBindInfoOutput {
	return o
}

// The schema for the associated security group.
// IngressDirectionIp: Incoming Direction IP.
// AssociateEcsIp: Associate ECSIP.
// explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
func (o AllowlistSecurityGroupBindInfoOutput) BindMode() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistSecurityGroupBindInfo) string { return v.BindMode }).(pulumi.StringOutput)
}

// The security group id of the allow list.
func (o AllowlistSecurityGroupBindInfoOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistSecurityGroupBindInfo) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

type AllowlistSecurityGroupBindInfoArrayOutput struct{ *pulumi.OutputState }

func (AllowlistSecurityGroupBindInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistSecurityGroupBindInfo)(nil)).Elem()
}

func (o AllowlistSecurityGroupBindInfoArrayOutput) ToAllowlistSecurityGroupBindInfoArrayOutput() AllowlistSecurityGroupBindInfoArrayOutput {
	return o
}

func (o AllowlistSecurityGroupBindInfoArrayOutput) ToAllowlistSecurityGroupBindInfoArrayOutputWithContext(ctx context.Context) AllowlistSecurityGroupBindInfoArrayOutput {
	return o
}

func (o AllowlistSecurityGroupBindInfoArrayOutput) Index(i pulumi.IntInput) AllowlistSecurityGroupBindInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowlistSecurityGroupBindInfo {
		return vs[0].([]AllowlistSecurityGroupBindInfo)[vs[1].(int)]
	}).(AllowlistSecurityGroupBindInfoOutput)
}

type AllowlistsAllowList struct {
	// White list category. Values:
	// Ordinary: Ordinary white list. Default: Default white list. Description: When this parameter is used as a request parameter, the default value is Ordinary.
	AllowListCategory string `pulumi:"allowListCategory"`
	// The description of the allow list.
	AllowListDesc string `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId string `pulumi:"allowListId"`
	// The total number of IP addresses (or address ranges) in the whitelist.
	AllowListIpNum int `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName string `pulumi:"allowListName"`
	// The type of the allow list.
	AllowListType string `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format.
	AllowLists []string `pulumi:"allowLists"`
	// The total number of instances bound under the whitelist.
	AssociatedInstanceNum int `pulumi:"associatedInstanceNum"`
	// The list of instances.
	AssociatedInstances []AllowlistsAllowListAssociatedInstance `pulumi:"associatedInstances"`
	// Whitelist information for the associated security group.
	SecurityGroupBindInfos []AllowlistsAllowListSecurityGroupBindInfo `pulumi:"securityGroupBindInfos"`
	// IP addresses outside the security group that need to be added to the whitelist. IP addresses or IP address segments in CIDR format can be entered. Note: This field cannot be used simultaneously with AllowList.
	UserAllowLists []string `pulumi:"userAllowLists"`
}

// AllowlistsAllowListInput is an input type that accepts AllowlistsAllowListArgs and AllowlistsAllowListOutput values.
// You can construct a concrete instance of `AllowlistsAllowListInput` via:
//
//	AllowlistsAllowListArgs{...}
type AllowlistsAllowListInput interface {
	pulumi.Input

	ToAllowlistsAllowListOutput() AllowlistsAllowListOutput
	ToAllowlistsAllowListOutputWithContext(context.Context) AllowlistsAllowListOutput
}

type AllowlistsAllowListArgs struct {
	// White list category. Values:
	// Ordinary: Ordinary white list. Default: Default white list. Description: When this parameter is used as a request parameter, the default value is Ordinary.
	AllowListCategory pulumi.StringInput `pulumi:"allowListCategory"`
	// The description of the allow list.
	AllowListDesc pulumi.StringInput `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId pulumi.StringInput `pulumi:"allowListId"`
	// The total number of IP addresses (or address ranges) in the whitelist.
	AllowListIpNum pulumi.IntInput `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName pulumi.StringInput `pulumi:"allowListName"`
	// The type of the allow list.
	AllowListType pulumi.StringInput `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format.
	AllowLists pulumi.StringArrayInput `pulumi:"allowLists"`
	// The total number of instances bound under the whitelist.
	AssociatedInstanceNum pulumi.IntInput `pulumi:"associatedInstanceNum"`
	// The list of instances.
	AssociatedInstances AllowlistsAllowListAssociatedInstanceArrayInput `pulumi:"associatedInstances"`
	// Whitelist information for the associated security group.
	SecurityGroupBindInfos AllowlistsAllowListSecurityGroupBindInfoArrayInput `pulumi:"securityGroupBindInfos"`
	// IP addresses outside the security group that need to be added to the whitelist. IP addresses or IP address segments in CIDR format can be entered. Note: This field cannot be used simultaneously with AllowList.
	UserAllowLists pulumi.StringArrayInput `pulumi:"userAllowLists"`
}

func (AllowlistsAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowList)(nil)).Elem()
}

func (i AllowlistsAllowListArgs) ToAllowlistsAllowListOutput() AllowlistsAllowListOutput {
	return i.ToAllowlistsAllowListOutputWithContext(context.Background())
}

func (i AllowlistsAllowListArgs) ToAllowlistsAllowListOutputWithContext(ctx context.Context) AllowlistsAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListOutput)
}

// AllowlistsAllowListArrayInput is an input type that accepts AllowlistsAllowListArray and AllowlistsAllowListArrayOutput values.
// You can construct a concrete instance of `AllowlistsAllowListArrayInput` via:
//
//	AllowlistsAllowListArray{ AllowlistsAllowListArgs{...} }
type AllowlistsAllowListArrayInput interface {
	pulumi.Input

	ToAllowlistsAllowListArrayOutput() AllowlistsAllowListArrayOutput
	ToAllowlistsAllowListArrayOutputWithContext(context.Context) AllowlistsAllowListArrayOutput
}

type AllowlistsAllowListArray []AllowlistsAllowListInput

func (AllowlistsAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowList)(nil)).Elem()
}

func (i AllowlistsAllowListArray) ToAllowlistsAllowListArrayOutput() AllowlistsAllowListArrayOutput {
	return i.ToAllowlistsAllowListArrayOutputWithContext(context.Background())
}

func (i AllowlistsAllowListArray) ToAllowlistsAllowListArrayOutputWithContext(ctx context.Context) AllowlistsAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListArrayOutput)
}

type AllowlistsAllowListOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowList)(nil)).Elem()
}

func (o AllowlistsAllowListOutput) ToAllowlistsAllowListOutput() AllowlistsAllowListOutput {
	return o
}

func (o AllowlistsAllowListOutput) ToAllowlistsAllowListOutputWithContext(ctx context.Context) AllowlistsAllowListOutput {
	return o
}

// White list category. Values:
// Ordinary: Ordinary white list. Default: Default white list. Description: When this parameter is used as a request parameter, the default value is Ordinary.
func (o AllowlistsAllowListOutput) AllowListCategory() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowList) string { return v.AllowListCategory }).(pulumi.StringOutput)
}

// The description of the allow list.
func (o AllowlistsAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowList) string { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The id of the allow list.
func (o AllowlistsAllowListOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowList) string { return v.AllowListId }).(pulumi.StringOutput)
}

// The total number of IP addresses (or address ranges) in the whitelist.
func (o AllowlistsAllowListOutput) AllowListIpNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowlistsAllowList) int { return v.AllowListIpNum }).(pulumi.IntOutput)
}

// The name of the allow list.
func (o AllowlistsAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowList) string { return v.AllowListName }).(pulumi.StringOutput)
}

// The type of the allow list.
func (o AllowlistsAllowListOutput) AllowListType() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowList) string { return v.AllowListType }).(pulumi.StringOutput)
}

// The IP address or a range of IP addresses in CIDR format.
func (o AllowlistsAllowListOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowlistsAllowList) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The total number of instances bound under the whitelist.
func (o AllowlistsAllowListOutput) AssociatedInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowlistsAllowList) int { return v.AssociatedInstanceNum }).(pulumi.IntOutput)
}

// The list of instances.
func (o AllowlistsAllowListOutput) AssociatedInstances() AllowlistsAllowListAssociatedInstanceArrayOutput {
	return o.ApplyT(func(v AllowlistsAllowList) []AllowlistsAllowListAssociatedInstance { return v.AssociatedInstances }).(AllowlistsAllowListAssociatedInstanceArrayOutput)
}

// Whitelist information for the associated security group.
func (o AllowlistsAllowListOutput) SecurityGroupBindInfos() AllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return o.ApplyT(func(v AllowlistsAllowList) []AllowlistsAllowListSecurityGroupBindInfo {
		return v.SecurityGroupBindInfos
	}).(AllowlistsAllowListSecurityGroupBindInfoArrayOutput)
}

// IP addresses outside the security group that need to be added to the whitelist. IP addresses or IP address segments in CIDR format can be entered. Note: This field cannot be used simultaneously with AllowList.
func (o AllowlistsAllowListOutput) UserAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowlistsAllowList) []string { return v.UserAllowLists }).(pulumi.StringArrayOutput)
}

type AllowlistsAllowListArrayOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowList)(nil)).Elem()
}

func (o AllowlistsAllowListArrayOutput) ToAllowlistsAllowListArrayOutput() AllowlistsAllowListArrayOutput {
	return o
}

func (o AllowlistsAllowListArrayOutput) ToAllowlistsAllowListArrayOutputWithContext(ctx context.Context) AllowlistsAllowListArrayOutput {
	return o
}

func (o AllowlistsAllowListArrayOutput) Index(i pulumi.IntInput) AllowlistsAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowlistsAllowList {
		return vs[0].([]AllowlistsAllowList)[vs[1].(int)]
	}).(AllowlistsAllowListOutput)
}

type AllowlistsAllowListAssociatedInstance struct {
	// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc string `pulumi:"vpc"`
}

// AllowlistsAllowListAssociatedInstanceInput is an input type that accepts AllowlistsAllowListAssociatedInstanceArgs and AllowlistsAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `AllowlistsAllowListAssociatedInstanceInput` via:
//
//	AllowlistsAllowListAssociatedInstanceArgs{...}
type AllowlistsAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToAllowlistsAllowListAssociatedInstanceOutput() AllowlistsAllowListAssociatedInstanceOutput
	ToAllowlistsAllowListAssociatedInstanceOutputWithContext(context.Context) AllowlistsAllowListAssociatedInstanceOutput
}

type AllowlistsAllowListAssociatedInstanceArgs struct {
	// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (AllowlistsAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowlistsAllowListAssociatedInstanceArgs) ToAllowlistsAllowListAssociatedInstanceOutput() AllowlistsAllowListAssociatedInstanceOutput {
	return i.ToAllowlistsAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i AllowlistsAllowListAssociatedInstanceArgs) ToAllowlistsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowlistsAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListAssociatedInstanceOutput)
}

// AllowlistsAllowListAssociatedInstanceArrayInput is an input type that accepts AllowlistsAllowListAssociatedInstanceArray and AllowlistsAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `AllowlistsAllowListAssociatedInstanceArrayInput` via:
//
//	AllowlistsAllowListAssociatedInstanceArray{ AllowlistsAllowListAssociatedInstanceArgs{...} }
type AllowlistsAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToAllowlistsAllowListAssociatedInstanceArrayOutput() AllowlistsAllowListAssociatedInstanceArrayOutput
	ToAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(context.Context) AllowlistsAllowListAssociatedInstanceArrayOutput
}

type AllowlistsAllowListAssociatedInstanceArray []AllowlistsAllowListAssociatedInstanceInput

func (AllowlistsAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowlistsAllowListAssociatedInstanceArray) ToAllowlistsAllowListAssociatedInstanceArrayOutput() AllowlistsAllowListAssociatedInstanceArrayOutput {
	return i.ToAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i AllowlistsAllowListAssociatedInstanceArray) ToAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowlistsAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListAssociatedInstanceArrayOutput)
}

type AllowlistsAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowlistsAllowListAssociatedInstanceOutput) ToAllowlistsAllowListAssociatedInstanceOutput() AllowlistsAllowListAssociatedInstanceOutput {
	return o
}

func (o AllowlistsAllowListAssociatedInstanceOutput) ToAllowlistsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowlistsAllowListAssociatedInstanceOutput {
	return o
}

// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
func (o AllowlistsAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowListAssociatedInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the instance.
func (o AllowlistsAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowListAssociatedInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The id of the vpc.
func (o AllowlistsAllowListAssociatedInstanceOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowListAssociatedInstance) string { return v.Vpc }).(pulumi.StringOutput)
}

type AllowlistsAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowlistsAllowListAssociatedInstanceArrayOutput) ToAllowlistsAllowListAssociatedInstanceArrayOutput() AllowlistsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowlistsAllowListAssociatedInstanceArrayOutput) ToAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowlistsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowlistsAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) AllowlistsAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowlistsAllowListAssociatedInstance {
		return vs[0].([]AllowlistsAllowListAssociatedInstance)[vs[1].(int)]
	}).(AllowlistsAllowListAssociatedInstanceOutput)
}

type AllowlistsAllowListSecurityGroupBindInfo struct {
	// The schema for the associated security group.
	// IngressDirectionIp: Incoming Direction IP.
	// AssociateEcsIp: Associate ECSIP.
	// explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
	BindMode string `pulumi:"bindMode"`
	// The ip list of the security group.
	IpLists []string `pulumi:"ipLists"`
	// The security group id of the allow list.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The name of the security group.
	SecurityGroupName string `pulumi:"securityGroupName"`
}

// AllowlistsAllowListSecurityGroupBindInfoInput is an input type that accepts AllowlistsAllowListSecurityGroupBindInfoArgs and AllowlistsAllowListSecurityGroupBindInfoOutput values.
// You can construct a concrete instance of `AllowlistsAllowListSecurityGroupBindInfoInput` via:
//
//	AllowlistsAllowListSecurityGroupBindInfoArgs{...}
type AllowlistsAllowListSecurityGroupBindInfoInput interface {
	pulumi.Input

	ToAllowlistsAllowListSecurityGroupBindInfoOutput() AllowlistsAllowListSecurityGroupBindInfoOutput
	ToAllowlistsAllowListSecurityGroupBindInfoOutputWithContext(context.Context) AllowlistsAllowListSecurityGroupBindInfoOutput
}

type AllowlistsAllowListSecurityGroupBindInfoArgs struct {
	// The schema for the associated security group.
	// IngressDirectionIp: Incoming Direction IP.
	// AssociateEcsIp: Associate ECSIP.
	// explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
	BindMode pulumi.StringInput `pulumi:"bindMode"`
	// The ip list of the security group.
	IpLists pulumi.StringArrayInput `pulumi:"ipLists"`
	// The security group id of the allow list.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The name of the security group.
	SecurityGroupName pulumi.StringInput `pulumi:"securityGroupName"`
}

func (AllowlistsAllowListSecurityGroupBindInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowListSecurityGroupBindInfo)(nil)).Elem()
}

func (i AllowlistsAllowListSecurityGroupBindInfoArgs) ToAllowlistsAllowListSecurityGroupBindInfoOutput() AllowlistsAllowListSecurityGroupBindInfoOutput {
	return i.ToAllowlistsAllowListSecurityGroupBindInfoOutputWithContext(context.Background())
}

func (i AllowlistsAllowListSecurityGroupBindInfoArgs) ToAllowlistsAllowListSecurityGroupBindInfoOutputWithContext(ctx context.Context) AllowlistsAllowListSecurityGroupBindInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListSecurityGroupBindInfoOutput)
}

// AllowlistsAllowListSecurityGroupBindInfoArrayInput is an input type that accepts AllowlistsAllowListSecurityGroupBindInfoArray and AllowlistsAllowListSecurityGroupBindInfoArrayOutput values.
// You can construct a concrete instance of `AllowlistsAllowListSecurityGroupBindInfoArrayInput` via:
//
//	AllowlistsAllowListSecurityGroupBindInfoArray{ AllowlistsAllowListSecurityGroupBindInfoArgs{...} }
type AllowlistsAllowListSecurityGroupBindInfoArrayInput interface {
	pulumi.Input

	ToAllowlistsAllowListSecurityGroupBindInfoArrayOutput() AllowlistsAllowListSecurityGroupBindInfoArrayOutput
	ToAllowlistsAllowListSecurityGroupBindInfoArrayOutputWithContext(context.Context) AllowlistsAllowListSecurityGroupBindInfoArrayOutput
}

type AllowlistsAllowListSecurityGroupBindInfoArray []AllowlistsAllowListSecurityGroupBindInfoInput

func (AllowlistsAllowListSecurityGroupBindInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowListSecurityGroupBindInfo)(nil)).Elem()
}

func (i AllowlistsAllowListSecurityGroupBindInfoArray) ToAllowlistsAllowListSecurityGroupBindInfoArrayOutput() AllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return i.ToAllowlistsAllowListSecurityGroupBindInfoArrayOutputWithContext(context.Background())
}

func (i AllowlistsAllowListSecurityGroupBindInfoArray) ToAllowlistsAllowListSecurityGroupBindInfoArrayOutputWithContext(ctx context.Context) AllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListSecurityGroupBindInfoArrayOutput)
}

type AllowlistsAllowListSecurityGroupBindInfoOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListSecurityGroupBindInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowListSecurityGroupBindInfo)(nil)).Elem()
}

func (o AllowlistsAllowListSecurityGroupBindInfoOutput) ToAllowlistsAllowListSecurityGroupBindInfoOutput() AllowlistsAllowListSecurityGroupBindInfoOutput {
	return o
}

func (o AllowlistsAllowListSecurityGroupBindInfoOutput) ToAllowlistsAllowListSecurityGroupBindInfoOutputWithContext(ctx context.Context) AllowlistsAllowListSecurityGroupBindInfoOutput {
	return o
}

// The schema for the associated security group.
// IngressDirectionIp: Incoming Direction IP.
// AssociateEcsIp: Associate ECSIP.
// explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
func (o AllowlistsAllowListSecurityGroupBindInfoOutput) BindMode() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowListSecurityGroupBindInfo) string { return v.BindMode }).(pulumi.StringOutput)
}

// The ip list of the security group.
func (o AllowlistsAllowListSecurityGroupBindInfoOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowlistsAllowListSecurityGroupBindInfo) []string { return v.IpLists }).(pulumi.StringArrayOutput)
}

// The security group id of the allow list.
func (o AllowlistsAllowListSecurityGroupBindInfoOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowListSecurityGroupBindInfo) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The name of the security group.
func (o AllowlistsAllowListSecurityGroupBindInfoOutput) SecurityGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowListSecurityGroupBindInfo) string { return v.SecurityGroupName }).(pulumi.StringOutput)
}

type AllowlistsAllowListSecurityGroupBindInfoArrayOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListSecurityGroupBindInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowListSecurityGroupBindInfo)(nil)).Elem()
}

func (o AllowlistsAllowListSecurityGroupBindInfoArrayOutput) ToAllowlistsAllowListSecurityGroupBindInfoArrayOutput() AllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return o
}

func (o AllowlistsAllowListSecurityGroupBindInfoArrayOutput) ToAllowlistsAllowListSecurityGroupBindInfoArrayOutputWithContext(ctx context.Context) AllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return o
}

func (o AllowlistsAllowListSecurityGroupBindInfoArrayOutput) Index(i pulumi.IntInput) AllowlistsAllowListSecurityGroupBindInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowlistsAllowListSecurityGroupBindInfo {
		return vs[0].([]AllowlistsAllowListSecurityGroupBindInfo)[vs[1].(int)]
	}).(AllowlistsAllowListSecurityGroupBindInfoOutput)
}

type BackupBackupMeta struct {
	// Specify the database that needs to be backed up.
	DbName string `pulumi:"dbName"`
	// Specify the tables to be backed up in the specified database. When this field is empty, it defaults to full database backup.
	TableNames []string `pulumi:"tableNames"`
}

// BackupBackupMetaInput is an input type that accepts BackupBackupMetaArgs and BackupBackupMetaOutput values.
// You can construct a concrete instance of `BackupBackupMetaInput` via:
//
//	BackupBackupMetaArgs{...}
type BackupBackupMetaInput interface {
	pulumi.Input

	ToBackupBackupMetaOutput() BackupBackupMetaOutput
	ToBackupBackupMetaOutputWithContext(context.Context) BackupBackupMetaOutput
}

type BackupBackupMetaArgs struct {
	// Specify the database that needs to be backed up.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// Specify the tables to be backed up in the specified database. When this field is empty, it defaults to full database backup.
	TableNames pulumi.StringArrayInput `pulumi:"tableNames"`
}

func (BackupBackupMetaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupBackupMeta)(nil)).Elem()
}

func (i BackupBackupMetaArgs) ToBackupBackupMetaOutput() BackupBackupMetaOutput {
	return i.ToBackupBackupMetaOutputWithContext(context.Background())
}

func (i BackupBackupMetaArgs) ToBackupBackupMetaOutputWithContext(ctx context.Context) BackupBackupMetaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupBackupMetaOutput)
}

// BackupBackupMetaArrayInput is an input type that accepts BackupBackupMetaArray and BackupBackupMetaArrayOutput values.
// You can construct a concrete instance of `BackupBackupMetaArrayInput` via:
//
//	BackupBackupMetaArray{ BackupBackupMetaArgs{...} }
type BackupBackupMetaArrayInput interface {
	pulumi.Input

	ToBackupBackupMetaArrayOutput() BackupBackupMetaArrayOutput
	ToBackupBackupMetaArrayOutputWithContext(context.Context) BackupBackupMetaArrayOutput
}

type BackupBackupMetaArray []BackupBackupMetaInput

func (BackupBackupMetaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupBackupMeta)(nil)).Elem()
}

func (i BackupBackupMetaArray) ToBackupBackupMetaArrayOutput() BackupBackupMetaArrayOutput {
	return i.ToBackupBackupMetaArrayOutputWithContext(context.Background())
}

func (i BackupBackupMetaArray) ToBackupBackupMetaArrayOutputWithContext(ctx context.Context) BackupBackupMetaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupBackupMetaArrayOutput)
}

type BackupBackupMetaOutput struct{ *pulumi.OutputState }

func (BackupBackupMetaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupBackupMeta)(nil)).Elem()
}

func (o BackupBackupMetaOutput) ToBackupBackupMetaOutput() BackupBackupMetaOutput {
	return o
}

func (o BackupBackupMetaOutput) ToBackupBackupMetaOutputWithContext(ctx context.Context) BackupBackupMetaOutput {
	return o
}

// Specify the database that needs to be backed up.
func (o BackupBackupMetaOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupBackupMeta) string { return v.DbName }).(pulumi.StringOutput)
}

// Specify the tables to be backed up in the specified database. When this field is empty, it defaults to full database backup.
func (o BackupBackupMetaOutput) TableNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupBackupMeta) []string { return v.TableNames }).(pulumi.StringArrayOutput)
}

type BackupBackupMetaArrayOutput struct{ *pulumi.OutputState }

func (BackupBackupMetaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupBackupMeta)(nil)).Elem()
}

func (o BackupBackupMetaArrayOutput) ToBackupBackupMetaArrayOutput() BackupBackupMetaArrayOutput {
	return o
}

func (o BackupBackupMetaArrayOutput) ToBackupBackupMetaArrayOutputWithContext(ctx context.Context) BackupBackupMetaArrayOutput {
	return o
}

func (o BackupBackupMetaArrayOutput) Index(i pulumi.IntInput) BackupBackupMetaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupBackupMeta {
		return vs[0].([]BackupBackupMeta)[vs[1].(int)]
	}).(BackupBackupMetaOutput)
}

type BackupsBackup struct {
	// The end time of the backup.
	BackupEndTime string `pulumi:"backupEndTime"`
	// Backup file name.
	BackupFileName string `pulumi:"backupFileName"`
	// Backup file size, in bytes.
	BackupFileSize int `pulumi:"backupFileSize"`
	// The id of the backup.
	BackupId string `pulumi:"backupId"`
	// Backup type, value: Physical: Physical backup. Default value. Logical: Logical backup. Description: There is no default value. When this field is not passed, backups of all states under the query conditions limited by other fields are returned.
	BackupMethod string `pulumi:"backupMethod"`
	// The region where the backup is located.
	BackupRegion string `pulumi:"backupRegion"`
	// The start time of the backup.
	BackupStartTime string `pulumi:"backupStartTime"`
	// Backup status, values: Success: Success. Failed: Failed. Running: In progress. Description: There is no default value. When this field is not passed, all backups in all states under the query conditions limited by other fields are returned.
	BackupStatus string `pulumi:"backupStatus"`
	// Backup method, value: Full: Full backup under physical backup type or library table backup under logical backup type. Increment: Incremental backup under physical backup type. DumpAll: Full database backup under logical backup type. Description: There is no default value. When this field is not passed, all backups of all methods under the query conditions limited by other fields are returned.
	BackupType string `pulumi:"backupType"`
	// The time point of a consistent snapshot is in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
	ConsistentTime string `pulumi:"consistentTime"`
	// Creator of backup. Values: System: System. User: User. Description: There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
	CreateType string `pulumi:"createType"`
	// The database table information contained in the backup set can include up to 10,000 tables.
	// Explanation:
	// When the database is empty, this field is not returned.
	DbTableInfos []BackupsBackupDbTableInfo `pulumi:"dbTableInfos"`
	// Download status. Values:
	// NotDownload: Not downloaded.
	// Success: Downloaded.
	// Failed: Download failed.
	// Running: Downloading.
	DownloadStatus string `pulumi:"downloadStatus"`
	// Error message.
	ErrorMessage string `pulumi:"errorMessage"`
	// Expired time of backup, in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
	ExpiredTime string `pulumi:"expiredTime"`
	// The id of the backup.
	Id string `pulumi:"id"`
	// Is the data backup encrypted? Value:
	// true: Encrypted.
	// false: Not encrypted.
	IsEncrypted bool `pulumi:"isEncrypted"`
	// Whether the backup has expired. Value:
	// true: Expired.
	// false: Not expired.
	IsExpired bool `pulumi:"isExpired"`
}

// BackupsBackupInput is an input type that accepts BackupsBackupArgs and BackupsBackupOutput values.
// You can construct a concrete instance of `BackupsBackupInput` via:
//
//	BackupsBackupArgs{...}
type BackupsBackupInput interface {
	pulumi.Input

	ToBackupsBackupOutput() BackupsBackupOutput
	ToBackupsBackupOutputWithContext(context.Context) BackupsBackupOutput
}

type BackupsBackupArgs struct {
	// The end time of the backup.
	BackupEndTime pulumi.StringInput `pulumi:"backupEndTime"`
	// Backup file name.
	BackupFileName pulumi.StringInput `pulumi:"backupFileName"`
	// Backup file size, in bytes.
	BackupFileSize pulumi.IntInput `pulumi:"backupFileSize"`
	// The id of the backup.
	BackupId pulumi.StringInput `pulumi:"backupId"`
	// Backup type, value: Physical: Physical backup. Default value. Logical: Logical backup. Description: There is no default value. When this field is not passed, backups of all states under the query conditions limited by other fields are returned.
	BackupMethod pulumi.StringInput `pulumi:"backupMethod"`
	// The region where the backup is located.
	BackupRegion pulumi.StringInput `pulumi:"backupRegion"`
	// The start time of the backup.
	BackupStartTime pulumi.StringInput `pulumi:"backupStartTime"`
	// Backup status, values: Success: Success. Failed: Failed. Running: In progress. Description: There is no default value. When this field is not passed, all backups in all states under the query conditions limited by other fields are returned.
	BackupStatus pulumi.StringInput `pulumi:"backupStatus"`
	// Backup method, value: Full: Full backup under physical backup type or library table backup under logical backup type. Increment: Incremental backup under physical backup type. DumpAll: Full database backup under logical backup type. Description: There is no default value. When this field is not passed, all backups of all methods under the query conditions limited by other fields are returned.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The time point of a consistent snapshot is in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
	ConsistentTime pulumi.StringInput `pulumi:"consistentTime"`
	// Creator of backup. Values: System: System. User: User. Description: There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
	CreateType pulumi.StringInput `pulumi:"createType"`
	// The database table information contained in the backup set can include up to 10,000 tables.
	// Explanation:
	// When the database is empty, this field is not returned.
	DbTableInfos BackupsBackupDbTableInfoArrayInput `pulumi:"dbTableInfos"`
	// Download status. Values:
	// NotDownload: Not downloaded.
	// Success: Downloaded.
	// Failed: Download failed.
	// Running: Downloading.
	DownloadStatus pulumi.StringInput `pulumi:"downloadStatus"`
	// Error message.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// Expired time of backup, in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
	ExpiredTime pulumi.StringInput `pulumi:"expiredTime"`
	// The id of the backup.
	Id pulumi.StringInput `pulumi:"id"`
	// Is the data backup encrypted? Value:
	// true: Encrypted.
	// false: Not encrypted.
	IsEncrypted pulumi.BoolInput `pulumi:"isEncrypted"`
	// Whether the backup has expired. Value:
	// true: Expired.
	// false: Not expired.
	IsExpired pulumi.BoolInput `pulumi:"isExpired"`
}

func (BackupsBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackup)(nil)).Elem()
}

func (i BackupsBackupArgs) ToBackupsBackupOutput() BackupsBackupOutput {
	return i.ToBackupsBackupOutputWithContext(context.Background())
}

func (i BackupsBackupArgs) ToBackupsBackupOutputWithContext(ctx context.Context) BackupsBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupOutput)
}

// BackupsBackupArrayInput is an input type that accepts BackupsBackupArray and BackupsBackupArrayOutput values.
// You can construct a concrete instance of `BackupsBackupArrayInput` via:
//
//	BackupsBackupArray{ BackupsBackupArgs{...} }
type BackupsBackupArrayInput interface {
	pulumi.Input

	ToBackupsBackupArrayOutput() BackupsBackupArrayOutput
	ToBackupsBackupArrayOutputWithContext(context.Context) BackupsBackupArrayOutput
}

type BackupsBackupArray []BackupsBackupInput

func (BackupsBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackup)(nil)).Elem()
}

func (i BackupsBackupArray) ToBackupsBackupArrayOutput() BackupsBackupArrayOutput {
	return i.ToBackupsBackupArrayOutputWithContext(context.Background())
}

func (i BackupsBackupArray) ToBackupsBackupArrayOutputWithContext(ctx context.Context) BackupsBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupArrayOutput)
}

type BackupsBackupOutput struct{ *pulumi.OutputState }

func (BackupsBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackup)(nil)).Elem()
}

func (o BackupsBackupOutput) ToBackupsBackupOutput() BackupsBackupOutput {
	return o
}

func (o BackupsBackupOutput) ToBackupsBackupOutputWithContext(ctx context.Context) BackupsBackupOutput {
	return o
}

// The end time of the backup.
func (o BackupsBackupOutput) BackupEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupEndTime }).(pulumi.StringOutput)
}

// Backup file name.
func (o BackupsBackupOutput) BackupFileName() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupFileName }).(pulumi.StringOutput)
}

// Backup file size, in bytes.
func (o BackupsBackupOutput) BackupFileSize() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsBackup) int { return v.BackupFileSize }).(pulumi.IntOutput)
}

// The id of the backup.
func (o BackupsBackupOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupId }).(pulumi.StringOutput)
}

// Backup type, value: Physical: Physical backup. Default value. Logical: Logical backup. Description: There is no default value. When this field is not passed, backups of all states under the query conditions limited by other fields are returned.
func (o BackupsBackupOutput) BackupMethod() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupMethod }).(pulumi.StringOutput)
}

// The region where the backup is located.
func (o BackupsBackupOutput) BackupRegion() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupRegion }).(pulumi.StringOutput)
}

// The start time of the backup.
func (o BackupsBackupOutput) BackupStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupStartTime }).(pulumi.StringOutput)
}

// Backup status, values: Success: Success. Failed: Failed. Running: In progress. Description: There is no default value. When this field is not passed, all backups in all states under the query conditions limited by other fields are returned.
func (o BackupsBackupOutput) BackupStatus() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupStatus }).(pulumi.StringOutput)
}

// Backup method, value: Full: Full backup under physical backup type or library table backup under logical backup type. Increment: Incremental backup under physical backup type. DumpAll: Full database backup under logical backup type. Description: There is no default value. When this field is not passed, all backups of all methods under the query conditions limited by other fields are returned.
func (o BackupsBackupOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.BackupType }).(pulumi.StringOutput)
}

// The time point of a consistent snapshot is in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
func (o BackupsBackupOutput) ConsistentTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.ConsistentTime }).(pulumi.StringOutput)
}

// Creator of backup. Values: System: System. User: User. Description: There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
func (o BackupsBackupOutput) CreateType() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.CreateType }).(pulumi.StringOutput)
}

// The database table information contained in the backup set can include up to 10,000 tables.
// Explanation:
// When the database is empty, this field is not returned.
func (o BackupsBackupOutput) DbTableInfos() BackupsBackupDbTableInfoArrayOutput {
	return o.ApplyT(func(v BackupsBackup) []BackupsBackupDbTableInfo { return v.DbTableInfos }).(BackupsBackupDbTableInfoArrayOutput)
}

// Download status. Values:
// NotDownload: Not downloaded.
// Success: Downloaded.
// Failed: Download failed.
// Running: Downloading.
func (o BackupsBackupOutput) DownloadStatus() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.DownloadStatus }).(pulumi.StringOutput)
}

// Error message.
func (o BackupsBackupOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Expired time of backup, in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
func (o BackupsBackupOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// The id of the backup.
func (o BackupsBackupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackup) string { return v.Id }).(pulumi.StringOutput)
}

// Is the data backup encrypted? Value:
// true: Encrypted.
// false: Not encrypted.
func (o BackupsBackupOutput) IsEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupsBackup) bool { return v.IsEncrypted }).(pulumi.BoolOutput)
}

// Whether the backup has expired. Value:
// true: Expired.
// false: Not expired.
func (o BackupsBackupOutput) IsExpired() pulumi.BoolOutput {
	return o.ApplyT(func(v BackupsBackup) bool { return v.IsExpired }).(pulumi.BoolOutput)
}

type BackupsBackupArrayOutput struct{ *pulumi.OutputState }

func (BackupsBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackup)(nil)).Elem()
}

func (o BackupsBackupArrayOutput) ToBackupsBackupArrayOutput() BackupsBackupArrayOutput {
	return o
}

func (o BackupsBackupArrayOutput) ToBackupsBackupArrayOutputWithContext(ctx context.Context) BackupsBackupArrayOutput {
	return o
}

func (o BackupsBackupArrayOutput) Index(i pulumi.IntInput) BackupsBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupsBackup {
		return vs[0].([]BackupsBackup)[vs[1].(int)]
	}).(BackupsBackupOutput)
}

type BackupsBackupDbTableInfo struct {
	// Database name.
	Database string `pulumi:"database"`
	// Table names.
	Tables []string `pulumi:"tables"`
}

// BackupsBackupDbTableInfoInput is an input type that accepts BackupsBackupDbTableInfoArgs and BackupsBackupDbTableInfoOutput values.
// You can construct a concrete instance of `BackupsBackupDbTableInfoInput` via:
//
//	BackupsBackupDbTableInfoArgs{...}
type BackupsBackupDbTableInfoInput interface {
	pulumi.Input

	ToBackupsBackupDbTableInfoOutput() BackupsBackupDbTableInfoOutput
	ToBackupsBackupDbTableInfoOutputWithContext(context.Context) BackupsBackupDbTableInfoOutput
}

type BackupsBackupDbTableInfoArgs struct {
	// Database name.
	Database pulumi.StringInput `pulumi:"database"`
	// Table names.
	Tables pulumi.StringArrayInput `pulumi:"tables"`
}

func (BackupsBackupDbTableInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackupDbTableInfo)(nil)).Elem()
}

func (i BackupsBackupDbTableInfoArgs) ToBackupsBackupDbTableInfoOutput() BackupsBackupDbTableInfoOutput {
	return i.ToBackupsBackupDbTableInfoOutputWithContext(context.Background())
}

func (i BackupsBackupDbTableInfoArgs) ToBackupsBackupDbTableInfoOutputWithContext(ctx context.Context) BackupsBackupDbTableInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupDbTableInfoOutput)
}

// BackupsBackupDbTableInfoArrayInput is an input type that accepts BackupsBackupDbTableInfoArray and BackupsBackupDbTableInfoArrayOutput values.
// You can construct a concrete instance of `BackupsBackupDbTableInfoArrayInput` via:
//
//	BackupsBackupDbTableInfoArray{ BackupsBackupDbTableInfoArgs{...} }
type BackupsBackupDbTableInfoArrayInput interface {
	pulumi.Input

	ToBackupsBackupDbTableInfoArrayOutput() BackupsBackupDbTableInfoArrayOutput
	ToBackupsBackupDbTableInfoArrayOutputWithContext(context.Context) BackupsBackupDbTableInfoArrayOutput
}

type BackupsBackupDbTableInfoArray []BackupsBackupDbTableInfoInput

func (BackupsBackupDbTableInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackupDbTableInfo)(nil)).Elem()
}

func (i BackupsBackupDbTableInfoArray) ToBackupsBackupDbTableInfoArrayOutput() BackupsBackupDbTableInfoArrayOutput {
	return i.ToBackupsBackupDbTableInfoArrayOutputWithContext(context.Background())
}

func (i BackupsBackupDbTableInfoArray) ToBackupsBackupDbTableInfoArrayOutputWithContext(ctx context.Context) BackupsBackupDbTableInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupDbTableInfoArrayOutput)
}

type BackupsBackupDbTableInfoOutput struct{ *pulumi.OutputState }

func (BackupsBackupDbTableInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackupDbTableInfo)(nil)).Elem()
}

func (o BackupsBackupDbTableInfoOutput) ToBackupsBackupDbTableInfoOutput() BackupsBackupDbTableInfoOutput {
	return o
}

func (o BackupsBackupDbTableInfoOutput) ToBackupsBackupDbTableInfoOutputWithContext(ctx context.Context) BackupsBackupDbTableInfoOutput {
	return o
}

// Database name.
func (o BackupsBackupDbTableInfoOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupDbTableInfo) string { return v.Database }).(pulumi.StringOutput)
}

// Table names.
func (o BackupsBackupDbTableInfoOutput) Tables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v BackupsBackupDbTableInfo) []string { return v.Tables }).(pulumi.StringArrayOutput)
}

type BackupsBackupDbTableInfoArrayOutput struct{ *pulumi.OutputState }

func (BackupsBackupDbTableInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackupDbTableInfo)(nil)).Elem()
}

func (o BackupsBackupDbTableInfoArrayOutput) ToBackupsBackupDbTableInfoArrayOutput() BackupsBackupDbTableInfoArrayOutput {
	return o
}

func (o BackupsBackupDbTableInfoArrayOutput) ToBackupsBackupDbTableInfoArrayOutputWithContext(ctx context.Context) BackupsBackupDbTableInfoArrayOutput {
	return o
}

func (o BackupsBackupDbTableInfoArrayOutput) Index(i pulumi.IntInput) BackupsBackupDbTableInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupsBackupDbTableInfo {
		return vs[0].([]BackupsBackupDbTableInfo)[vs[1].(int)]
	}).(BackupsBackupDbTableInfoOutput)
}

type DatabasesDatabase struct {
	// The character set of the RDS database.
	CharacterSetName string `pulumi:"characterSetName"`
	// The privilege detail list of RDS mysql instance database.
	DatabasePrivileges []DatabasesDatabaseDatabasePrivilege `pulumi:"databasePrivileges"`
	// The name of the RDS database.
	DbName string `pulumi:"dbName"`
}

// DatabasesDatabaseInput is an input type that accepts DatabasesDatabaseArgs and DatabasesDatabaseOutput values.
// You can construct a concrete instance of `DatabasesDatabaseInput` via:
//
//	DatabasesDatabaseArgs{...}
type DatabasesDatabaseInput interface {
	pulumi.Input

	ToDatabasesDatabaseOutput() DatabasesDatabaseOutput
	ToDatabasesDatabaseOutputWithContext(context.Context) DatabasesDatabaseOutput
}

type DatabasesDatabaseArgs struct {
	// The character set of the RDS database.
	CharacterSetName pulumi.StringInput `pulumi:"characterSetName"`
	// The privilege detail list of RDS mysql instance database.
	DatabasePrivileges DatabasesDatabaseDatabasePrivilegeArrayInput `pulumi:"databasePrivileges"`
	// The name of the RDS database.
	DbName pulumi.StringInput `pulumi:"dbName"`
}

func (DatabasesDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabase)(nil)).Elem()
}

func (i DatabasesDatabaseArgs) ToDatabasesDatabaseOutput() DatabasesDatabaseOutput {
	return i.ToDatabasesDatabaseOutputWithContext(context.Background())
}

func (i DatabasesDatabaseArgs) ToDatabasesDatabaseOutputWithContext(ctx context.Context) DatabasesDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseOutput)
}

// DatabasesDatabaseArrayInput is an input type that accepts DatabasesDatabaseArray and DatabasesDatabaseArrayOutput values.
// You can construct a concrete instance of `DatabasesDatabaseArrayInput` via:
//
//	DatabasesDatabaseArray{ DatabasesDatabaseArgs{...} }
type DatabasesDatabaseArrayInput interface {
	pulumi.Input

	ToDatabasesDatabaseArrayOutput() DatabasesDatabaseArrayOutput
	ToDatabasesDatabaseArrayOutputWithContext(context.Context) DatabasesDatabaseArrayOutput
}

type DatabasesDatabaseArray []DatabasesDatabaseInput

func (DatabasesDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabase)(nil)).Elem()
}

func (i DatabasesDatabaseArray) ToDatabasesDatabaseArrayOutput() DatabasesDatabaseArrayOutput {
	return i.ToDatabasesDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabasesDatabaseArray) ToDatabasesDatabaseArrayOutputWithContext(ctx context.Context) DatabasesDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseArrayOutput)
}

type DatabasesDatabaseOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabase)(nil)).Elem()
}

func (o DatabasesDatabaseOutput) ToDatabasesDatabaseOutput() DatabasesDatabaseOutput {
	return o
}

func (o DatabasesDatabaseOutput) ToDatabasesDatabaseOutputWithContext(ctx context.Context) DatabasesDatabaseOutput {
	return o
}

// The character set of the RDS database.
func (o DatabasesDatabaseOutput) CharacterSetName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.CharacterSetName }).(pulumi.StringOutput)
}

// The privilege detail list of RDS mysql instance database.
func (o DatabasesDatabaseOutput) DatabasePrivileges() DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return o.ApplyT(func(v DatabasesDatabase) []DatabasesDatabaseDatabasePrivilege { return v.DatabasePrivileges }).(DatabasesDatabaseDatabasePrivilegeArrayOutput)
}

// The name of the RDS database.
func (o DatabasesDatabaseOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.DbName }).(pulumi.StringOutput)
}

type DatabasesDatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabase)(nil)).Elem()
}

func (o DatabasesDatabaseArrayOutput) ToDatabasesDatabaseArrayOutput() DatabasesDatabaseArrayOutput {
	return o
}

func (o DatabasesDatabaseArrayOutput) ToDatabasesDatabaseArrayOutputWithContext(ctx context.Context) DatabasesDatabaseArrayOutput {
	return o
}

func (o DatabasesDatabaseArrayOutput) Index(i pulumi.IntInput) DatabasesDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasesDatabase {
		return vs[0].([]DatabasesDatabase)[vs[1].(int)]
	}).(DatabasesDatabaseOutput)
}

type DatabasesDatabaseDatabasePrivilege struct {
	// The name of account.
	AccountName string `pulumi:"accountName"`
	// The privilege type of the account.
	AccountPrivilege string `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail string `pulumi:"accountPrivilegeDetail"`
}

// DatabasesDatabaseDatabasePrivilegeInput is an input type that accepts DatabasesDatabaseDatabasePrivilegeArgs and DatabasesDatabaseDatabasePrivilegeOutput values.
// You can construct a concrete instance of `DatabasesDatabaseDatabasePrivilegeInput` via:
//
//	DatabasesDatabaseDatabasePrivilegeArgs{...}
type DatabasesDatabaseDatabasePrivilegeInput interface {
	pulumi.Input

	ToDatabasesDatabaseDatabasePrivilegeOutput() DatabasesDatabaseDatabasePrivilegeOutput
	ToDatabasesDatabaseDatabasePrivilegeOutputWithContext(context.Context) DatabasesDatabaseDatabasePrivilegeOutput
}

type DatabasesDatabaseDatabasePrivilegeArgs struct {
	// The name of account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The privilege type of the account.
	AccountPrivilege pulumi.StringInput `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail pulumi.StringInput `pulumi:"accountPrivilegeDetail"`
}

func (DatabasesDatabaseDatabasePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (i DatabasesDatabaseDatabasePrivilegeArgs) ToDatabasesDatabaseDatabasePrivilegeOutput() DatabasesDatabaseDatabasePrivilegeOutput {
	return i.ToDatabasesDatabaseDatabasePrivilegeOutputWithContext(context.Background())
}

func (i DatabasesDatabaseDatabasePrivilegeArgs) ToDatabasesDatabaseDatabasePrivilegeOutputWithContext(ctx context.Context) DatabasesDatabaseDatabasePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseDatabasePrivilegeOutput)
}

// DatabasesDatabaseDatabasePrivilegeArrayInput is an input type that accepts DatabasesDatabaseDatabasePrivilegeArray and DatabasesDatabaseDatabasePrivilegeArrayOutput values.
// You can construct a concrete instance of `DatabasesDatabaseDatabasePrivilegeArrayInput` via:
//
//	DatabasesDatabaseDatabasePrivilegeArray{ DatabasesDatabaseDatabasePrivilegeArgs{...} }
type DatabasesDatabaseDatabasePrivilegeArrayInput interface {
	pulumi.Input

	ToDatabasesDatabaseDatabasePrivilegeArrayOutput() DatabasesDatabaseDatabasePrivilegeArrayOutput
	ToDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(context.Context) DatabasesDatabaseDatabasePrivilegeArrayOutput
}

type DatabasesDatabaseDatabasePrivilegeArray []DatabasesDatabaseDatabasePrivilegeInput

func (DatabasesDatabaseDatabasePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (i DatabasesDatabaseDatabasePrivilegeArray) ToDatabasesDatabaseDatabasePrivilegeArrayOutput() DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return i.ToDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(context.Background())
}

func (i DatabasesDatabaseDatabasePrivilegeArray) ToDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(ctx context.Context) DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseDatabasePrivilegeArrayOutput)
}

type DatabasesDatabaseDatabasePrivilegeOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseDatabasePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (o DatabasesDatabaseDatabasePrivilegeOutput) ToDatabasesDatabaseDatabasePrivilegeOutput() DatabasesDatabaseDatabasePrivilegeOutput {
	return o
}

func (o DatabasesDatabaseDatabasePrivilegeOutput) ToDatabasesDatabaseDatabasePrivilegeOutputWithContext(ctx context.Context) DatabasesDatabaseDatabasePrivilegeOutput {
	return o
}

// The name of account.
func (o DatabasesDatabaseDatabasePrivilegeOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabaseDatabasePrivilege) string { return v.AccountName }).(pulumi.StringOutput)
}

// The privilege type of the account.
func (o DatabasesDatabaseDatabasePrivilegeOutput) AccountPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabaseDatabasePrivilege) string { return v.AccountPrivilege }).(pulumi.StringOutput)
}

// The privilege detail of the account.
func (o DatabasesDatabaseDatabasePrivilegeOutput) AccountPrivilegeDetail() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabaseDatabasePrivilege) string { return v.AccountPrivilegeDetail }).(pulumi.StringOutput)
}

type DatabasesDatabaseDatabasePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseDatabasePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (o DatabasesDatabaseDatabasePrivilegeArrayOutput) ToDatabasesDatabaseDatabasePrivilegeArrayOutput() DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return o
}

func (o DatabasesDatabaseDatabasePrivilegeArrayOutput) ToDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(ctx context.Context) DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return o
}

func (o DatabasesDatabaseDatabasePrivilegeArrayOutput) Index(i pulumi.IntInput) DatabasesDatabaseDatabasePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasesDatabaseDatabasePrivilege {
		return vs[0].([]DatabasesDatabaseDatabasePrivilege)[vs[1].(int)]
	}).(DatabasesDatabaseDatabasePrivilegeOutput)
}

type EndpointReadOnlyNodeWeight struct {
	// Read-only nodes require NodeId to be passed, while primary nodes do not require it.
	NodeId *string `pulumi:"nodeId"`
	// The primary node needs to pass in the NodeType as Primary, while the read-only node does not need to pass it in.
	NodeType *string `pulumi:"nodeType"`
	// The read weight of the node increases by 100, with a maximum value of 10000.
	Weight int `pulumi:"weight"`
}

// EndpointReadOnlyNodeWeightInput is an input type that accepts EndpointReadOnlyNodeWeightArgs and EndpointReadOnlyNodeWeightOutput values.
// You can construct a concrete instance of `EndpointReadOnlyNodeWeightInput` via:
//
//	EndpointReadOnlyNodeWeightArgs{...}
type EndpointReadOnlyNodeWeightInput interface {
	pulumi.Input

	ToEndpointReadOnlyNodeWeightOutput() EndpointReadOnlyNodeWeightOutput
	ToEndpointReadOnlyNodeWeightOutputWithContext(context.Context) EndpointReadOnlyNodeWeightOutput
}

type EndpointReadOnlyNodeWeightArgs struct {
	// Read-only nodes require NodeId to be passed, while primary nodes do not require it.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// The primary node needs to pass in the NodeType as Primary, while the read-only node does not need to pass it in.
	NodeType pulumi.StringPtrInput `pulumi:"nodeType"`
	// The read weight of the node increases by 100, with a maximum value of 10000.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (EndpointReadOnlyNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i EndpointReadOnlyNodeWeightArgs) ToEndpointReadOnlyNodeWeightOutput() EndpointReadOnlyNodeWeightOutput {
	return i.ToEndpointReadOnlyNodeWeightOutputWithContext(context.Background())
}

func (i EndpointReadOnlyNodeWeightArgs) ToEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) EndpointReadOnlyNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointReadOnlyNodeWeightOutput)
}

// EndpointReadOnlyNodeWeightArrayInput is an input type that accepts EndpointReadOnlyNodeWeightArray and EndpointReadOnlyNodeWeightArrayOutput values.
// You can construct a concrete instance of `EndpointReadOnlyNodeWeightArrayInput` via:
//
//	EndpointReadOnlyNodeWeightArray{ EndpointReadOnlyNodeWeightArgs{...} }
type EndpointReadOnlyNodeWeightArrayInput interface {
	pulumi.Input

	ToEndpointReadOnlyNodeWeightArrayOutput() EndpointReadOnlyNodeWeightArrayOutput
	ToEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Context) EndpointReadOnlyNodeWeightArrayOutput
}

type EndpointReadOnlyNodeWeightArray []EndpointReadOnlyNodeWeightInput

func (EndpointReadOnlyNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i EndpointReadOnlyNodeWeightArray) ToEndpointReadOnlyNodeWeightArrayOutput() EndpointReadOnlyNodeWeightArrayOutput {
	return i.ToEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Background())
}

func (i EndpointReadOnlyNodeWeightArray) ToEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) EndpointReadOnlyNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointReadOnlyNodeWeightArrayOutput)
}

type EndpointReadOnlyNodeWeightOutput struct{ *pulumi.OutputState }

func (EndpointReadOnlyNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o EndpointReadOnlyNodeWeightOutput) ToEndpointReadOnlyNodeWeightOutput() EndpointReadOnlyNodeWeightOutput {
	return o
}

func (o EndpointReadOnlyNodeWeightOutput) ToEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) EndpointReadOnlyNodeWeightOutput {
	return o
}

// Read-only nodes require NodeId to be passed, while primary nodes do not require it.
func (o EndpointReadOnlyNodeWeightOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointReadOnlyNodeWeight) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// The primary node needs to pass in the NodeType as Primary, while the read-only node does not need to pass it in.
func (o EndpointReadOnlyNodeWeightOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointReadOnlyNodeWeight) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The read weight of the node increases by 100, with a maximum value of 10000.
func (o EndpointReadOnlyNodeWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointReadOnlyNodeWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type EndpointReadOnlyNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (EndpointReadOnlyNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o EndpointReadOnlyNodeWeightArrayOutput) ToEndpointReadOnlyNodeWeightArrayOutput() EndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o EndpointReadOnlyNodeWeightArrayOutput) ToEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) EndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o EndpointReadOnlyNodeWeightArrayOutput) Index(i pulumi.IntInput) EndpointReadOnlyNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointReadOnlyNodeWeight {
		return vs[0].([]EndpointReadOnlyNodeWeight)[vs[1].(int)]
	}).(EndpointReadOnlyNodeWeightOutput)
}

type EndpointsEndpoint struct {
	// Address list.
	Addresses []EndpointsEndpointAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes string `pulumi:"autoAddNewNodes"`
	// The description of the mysql endpoint.
	Description string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting string `pulumi:"enableReadWriteSplitting"`
	// The id of the mysql endpoint.
	EndpointId string `pulumi:"endpointId"`
	// The name of the mysql endpoint.
	EndpointName string `pulumi:"endpointName"`
	// The endpoint type of the mysql endpoint.
	EndpointType string `pulumi:"endpointType"`
	// The id of the mysql endpoint.
	Id string `pulumi:"id"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights []EndpointsEndpointReadOnlyNodeWeight `pulumi:"readOnlyNodeWeights"`
	// The read write mode.
	ReadWriteMode string `pulumi:"readWriteMode"`
}

// EndpointsEndpointInput is an input type that accepts EndpointsEndpointArgs and EndpointsEndpointOutput values.
// You can construct a concrete instance of `EndpointsEndpointInput` via:
//
//	EndpointsEndpointArgs{...}
type EndpointsEndpointInput interface {
	pulumi.Input

	ToEndpointsEndpointOutput() EndpointsEndpointOutput
	ToEndpointsEndpointOutputWithContext(context.Context) EndpointsEndpointOutput
}

type EndpointsEndpointArgs struct {
	// Address list.
	Addresses EndpointsEndpointAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringInput `pulumi:"autoAddNewNodes"`
	// The description of the mysql endpoint.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringInput `pulumi:"enableReadWriteSplitting"`
	// The id of the mysql endpoint.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The name of the mysql endpoint.
	EndpointName pulumi.StringInput `pulumi:"endpointName"`
	// The endpoint type of the mysql endpoint.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The id of the mysql endpoint.
	Id pulumi.StringInput `pulumi:"id"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights EndpointsEndpointReadOnlyNodeWeightArrayInput `pulumi:"readOnlyNodeWeights"`
	// The read write mode.
	ReadWriteMode pulumi.StringInput `pulumi:"readWriteMode"`
}

func (EndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpoint)(nil)).Elem()
}

func (i EndpointsEndpointArgs) ToEndpointsEndpointOutput() EndpointsEndpointOutput {
	return i.ToEndpointsEndpointOutputWithContext(context.Background())
}

func (i EndpointsEndpointArgs) ToEndpointsEndpointOutputWithContext(ctx context.Context) EndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointOutput)
}

// EndpointsEndpointArrayInput is an input type that accepts EndpointsEndpointArray and EndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `EndpointsEndpointArrayInput` via:
//
//	EndpointsEndpointArray{ EndpointsEndpointArgs{...} }
type EndpointsEndpointArrayInput interface {
	pulumi.Input

	ToEndpointsEndpointArrayOutput() EndpointsEndpointArrayOutput
	ToEndpointsEndpointArrayOutputWithContext(context.Context) EndpointsEndpointArrayOutput
}

type EndpointsEndpointArray []EndpointsEndpointInput

func (EndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpoint)(nil)).Elem()
}

func (i EndpointsEndpointArray) ToEndpointsEndpointArrayOutput() EndpointsEndpointArrayOutput {
	return i.ToEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointsEndpointArray) ToEndpointsEndpointArrayOutputWithContext(ctx context.Context) EndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointArrayOutput)
}

type EndpointsEndpointOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpoint)(nil)).Elem()
}

func (o EndpointsEndpointOutput) ToEndpointsEndpointOutput() EndpointsEndpointOutput {
	return o
}

func (o EndpointsEndpointOutput) ToEndpointsEndpointOutputWithContext(ctx context.Context) EndpointsEndpointOutput {
	return o
}

// Address list.
func (o EndpointsEndpointOutput) Addresses() EndpointsEndpointAddressArrayOutput {
	return o.ApplyT(func(v EndpointsEndpoint) []EndpointsEndpointAddress { return v.Addresses }).(EndpointsEndpointAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o EndpointsEndpointOutput) AutoAddNewNodes() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.AutoAddNewNodes }).(pulumi.StringOutput)
}

// The description of the mysql endpoint.
func (o EndpointsEndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.Description }).(pulumi.StringOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o EndpointsEndpointOutput) EnableReadOnly() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.EnableReadOnly }).(pulumi.StringOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o EndpointsEndpointOutput) EnableReadWriteSplitting() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.EnableReadWriteSplitting }).(pulumi.StringOutput)
}

// The id of the mysql endpoint.
func (o EndpointsEndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The name of the mysql endpoint.
func (o EndpointsEndpointOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.EndpointName }).(pulumi.StringOutput)
}

// The endpoint type of the mysql endpoint.
func (o EndpointsEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The id of the mysql endpoint.
func (o EndpointsEndpointOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.Id }).(pulumi.StringOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o EndpointsEndpointOutput) ReadOnlyNodeWeights() EndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return o.ApplyT(func(v EndpointsEndpoint) []EndpointsEndpointReadOnlyNodeWeight { return v.ReadOnlyNodeWeights }).(EndpointsEndpointReadOnlyNodeWeightArrayOutput)
}

// The read write mode.
func (o EndpointsEndpointOutput) ReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.ReadWriteMode }).(pulumi.StringOutput)
}

type EndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpoint)(nil)).Elem()
}

func (o EndpointsEndpointArrayOutput) ToEndpointsEndpointArrayOutput() EndpointsEndpointArrayOutput {
	return o
}

func (o EndpointsEndpointArrayOutput) ToEndpointsEndpointArrayOutputWithContext(ctx context.Context) EndpointsEndpointArrayOutput {
	return o
}

func (o EndpointsEndpointArrayOutput) Index(i pulumi.IntInput) EndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointsEndpoint {
		return vs[0].([]EndpointsEndpoint)[vs[1].(int)]
	}).(EndpointsEndpointOutput)
}

type EndpointsEndpointAddress struct {
	// DNS Visibility.
	DnsVisibility bool `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId string `pulumi:"eipId"`
	// The IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType string `pulumi:"networkType"`
	// The Port.
	Port string `pulumi:"port"`
	// Subnet ID, valid only for private addresses.
	SubnetId string `pulumi:"subnetId"`
}

// EndpointsEndpointAddressInput is an input type that accepts EndpointsEndpointAddressArgs and EndpointsEndpointAddressOutput values.
// You can construct a concrete instance of `EndpointsEndpointAddressInput` via:
//
//	EndpointsEndpointAddressArgs{...}
type EndpointsEndpointAddressInput interface {
	pulumi.Input

	ToEndpointsEndpointAddressOutput() EndpointsEndpointAddressOutput
	ToEndpointsEndpointAddressOutputWithContext(context.Context) EndpointsEndpointAddressOutput
}

type EndpointsEndpointAddressArgs struct {
	// DNS Visibility.
	DnsVisibility pulumi.BoolInput `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringInput `pulumi:"port"`
	// Subnet ID, valid only for private addresses.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (EndpointsEndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpointAddress)(nil)).Elem()
}

func (i EndpointsEndpointAddressArgs) ToEndpointsEndpointAddressOutput() EndpointsEndpointAddressOutput {
	return i.ToEndpointsEndpointAddressOutputWithContext(context.Background())
}

func (i EndpointsEndpointAddressArgs) ToEndpointsEndpointAddressOutputWithContext(ctx context.Context) EndpointsEndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointAddressOutput)
}

// EndpointsEndpointAddressArrayInput is an input type that accepts EndpointsEndpointAddressArray and EndpointsEndpointAddressArrayOutput values.
// You can construct a concrete instance of `EndpointsEndpointAddressArrayInput` via:
//
//	EndpointsEndpointAddressArray{ EndpointsEndpointAddressArgs{...} }
type EndpointsEndpointAddressArrayInput interface {
	pulumi.Input

	ToEndpointsEndpointAddressArrayOutput() EndpointsEndpointAddressArrayOutput
	ToEndpointsEndpointAddressArrayOutputWithContext(context.Context) EndpointsEndpointAddressArrayOutput
}

type EndpointsEndpointAddressArray []EndpointsEndpointAddressInput

func (EndpointsEndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpointAddress)(nil)).Elem()
}

func (i EndpointsEndpointAddressArray) ToEndpointsEndpointAddressArrayOutput() EndpointsEndpointAddressArrayOutput {
	return i.ToEndpointsEndpointAddressArrayOutputWithContext(context.Background())
}

func (i EndpointsEndpointAddressArray) ToEndpointsEndpointAddressArrayOutputWithContext(ctx context.Context) EndpointsEndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointAddressArrayOutput)
}

type EndpointsEndpointAddressOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpointAddress)(nil)).Elem()
}

func (o EndpointsEndpointAddressOutput) ToEndpointsEndpointAddressOutput() EndpointsEndpointAddressOutput {
	return o
}

func (o EndpointsEndpointAddressOutput) ToEndpointsEndpointAddressOutputWithContext(ctx context.Context) EndpointsEndpointAddressOutput {
	return o
}

// DNS Visibility.
func (o EndpointsEndpointAddressOutput) DnsVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v EndpointsEndpointAddress) bool { return v.DnsVisibility }).(pulumi.BoolOutput)
}

// Connect domain name.
func (o EndpointsEndpointAddressOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointAddress) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o EndpointsEndpointAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The IP Address.
func (o EndpointsEndpointAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o EndpointsEndpointAddressOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointAddress) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The Port.
func (o EndpointsEndpointAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointAddress) string { return v.Port }).(pulumi.StringOutput)
}

// Subnet ID, valid only for private addresses.
func (o EndpointsEndpointAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type EndpointsEndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpointAddress)(nil)).Elem()
}

func (o EndpointsEndpointAddressArrayOutput) ToEndpointsEndpointAddressArrayOutput() EndpointsEndpointAddressArrayOutput {
	return o
}

func (o EndpointsEndpointAddressArrayOutput) ToEndpointsEndpointAddressArrayOutputWithContext(ctx context.Context) EndpointsEndpointAddressArrayOutput {
	return o
}

func (o EndpointsEndpointAddressArrayOutput) Index(i pulumi.IntInput) EndpointsEndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointsEndpointAddress {
		return vs[0].([]EndpointsEndpointAddress)[vs[1].(int)]
	}).(EndpointsEndpointAddressOutput)
}

type EndpointsEndpointReadOnlyNodeWeight struct {
	// The ID of the node.
	NodeId string `pulumi:"nodeId"`
	// The type of the node.
	NodeType string `pulumi:"nodeType"`
	// The weight of the node.
	Weight int `pulumi:"weight"`
}

// EndpointsEndpointReadOnlyNodeWeightInput is an input type that accepts EndpointsEndpointReadOnlyNodeWeightArgs and EndpointsEndpointReadOnlyNodeWeightOutput values.
// You can construct a concrete instance of `EndpointsEndpointReadOnlyNodeWeightInput` via:
//
//	EndpointsEndpointReadOnlyNodeWeightArgs{...}
type EndpointsEndpointReadOnlyNodeWeightInput interface {
	pulumi.Input

	ToEndpointsEndpointReadOnlyNodeWeightOutput() EndpointsEndpointReadOnlyNodeWeightOutput
	ToEndpointsEndpointReadOnlyNodeWeightOutputWithContext(context.Context) EndpointsEndpointReadOnlyNodeWeightOutput
}

type EndpointsEndpointReadOnlyNodeWeightArgs struct {
	// The ID of the node.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// The type of the node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (EndpointsEndpointReadOnlyNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i EndpointsEndpointReadOnlyNodeWeightArgs) ToEndpointsEndpointReadOnlyNodeWeightOutput() EndpointsEndpointReadOnlyNodeWeightOutput {
	return i.ToEndpointsEndpointReadOnlyNodeWeightOutputWithContext(context.Background())
}

func (i EndpointsEndpointReadOnlyNodeWeightArgs) ToEndpointsEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) EndpointsEndpointReadOnlyNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointReadOnlyNodeWeightOutput)
}

// EndpointsEndpointReadOnlyNodeWeightArrayInput is an input type that accepts EndpointsEndpointReadOnlyNodeWeightArray and EndpointsEndpointReadOnlyNodeWeightArrayOutput values.
// You can construct a concrete instance of `EndpointsEndpointReadOnlyNodeWeightArrayInput` via:
//
//	EndpointsEndpointReadOnlyNodeWeightArray{ EndpointsEndpointReadOnlyNodeWeightArgs{...} }
type EndpointsEndpointReadOnlyNodeWeightArrayInput interface {
	pulumi.Input

	ToEndpointsEndpointReadOnlyNodeWeightArrayOutput() EndpointsEndpointReadOnlyNodeWeightArrayOutput
	ToEndpointsEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Context) EndpointsEndpointReadOnlyNodeWeightArrayOutput
}

type EndpointsEndpointReadOnlyNodeWeightArray []EndpointsEndpointReadOnlyNodeWeightInput

func (EndpointsEndpointReadOnlyNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i EndpointsEndpointReadOnlyNodeWeightArray) ToEndpointsEndpointReadOnlyNodeWeightArrayOutput() EndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return i.ToEndpointsEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Background())
}

func (i EndpointsEndpointReadOnlyNodeWeightArray) ToEndpointsEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) EndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointReadOnlyNodeWeightArrayOutput)
}

type EndpointsEndpointReadOnlyNodeWeightOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointReadOnlyNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o EndpointsEndpointReadOnlyNodeWeightOutput) ToEndpointsEndpointReadOnlyNodeWeightOutput() EndpointsEndpointReadOnlyNodeWeightOutput {
	return o
}

func (o EndpointsEndpointReadOnlyNodeWeightOutput) ToEndpointsEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) EndpointsEndpointReadOnlyNodeWeightOutput {
	return o
}

// The ID of the node.
func (o EndpointsEndpointReadOnlyNodeWeightOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointReadOnlyNodeWeight) string { return v.NodeId }).(pulumi.StringOutput)
}

// The type of the node.
func (o EndpointsEndpointReadOnlyNodeWeightOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointReadOnlyNodeWeight) string { return v.NodeType }).(pulumi.StringOutput)
}

// The weight of the node.
func (o EndpointsEndpointReadOnlyNodeWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v EndpointsEndpointReadOnlyNodeWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type EndpointsEndpointReadOnlyNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointReadOnlyNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o EndpointsEndpointReadOnlyNodeWeightArrayOutput) ToEndpointsEndpointReadOnlyNodeWeightArrayOutput() EndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o EndpointsEndpointReadOnlyNodeWeightArrayOutput) ToEndpointsEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) EndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o EndpointsEndpointReadOnlyNodeWeightArrayOutput) Index(i pulumi.IntInput) EndpointsEndpointReadOnlyNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointsEndpointReadOnlyNodeWeight {
		return vs[0].([]EndpointsEndpointReadOnlyNodeWeight)[vs[1].(int)]
	}).(EndpointsEndpointReadOnlyNodeWeightOutput)
}

type InstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew *bool `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime *string `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime *string `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus *string `pulumi:"chargeStatus"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType *string `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime *string `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime *string `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period *int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Restore time of temporary upgrade.
	TempModifyEndTime *string `pulumi:"tempModifyEndTime"`
	// Temporary upgrade start time.
	TempModifyStartTime *string `pulumi:"tempModifyStartTime"`
}

// InstanceChargeDetailInput is an input type that accepts InstanceChargeDetailArgs and InstanceChargeDetailOutput values.
// You can construct a concrete instance of `InstanceChargeDetailInput` via:
//
//	InstanceChargeDetailArgs{...}
type InstanceChargeDetailInput interface {
	pulumi.Input

	ToInstanceChargeDetailOutput() InstanceChargeDetailOutput
	ToInstanceChargeDetailOutputWithContext(context.Context) InstanceChargeDetailOutput
}

type InstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime pulumi.StringPtrInput `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime pulumi.StringPtrInput `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus pulumi.StringPtrInput `pulumi:"chargeStatus"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType pulumi.StringPtrInput `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime pulumi.StringPtrInput `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime pulumi.StringPtrInput `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringPtrInput `pulumi:"periodUnit"`
	// Restore time of temporary upgrade.
	TempModifyEndTime pulumi.StringPtrInput `pulumi:"tempModifyEndTime"`
	// Temporary upgrade start time.
	TempModifyStartTime pulumi.StringPtrInput `pulumi:"tempModifyStartTime"`
}

func (InstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeDetail)(nil)).Elem()
}

func (i InstanceChargeDetailArgs) ToInstanceChargeDetailOutput() InstanceChargeDetailOutput {
	return i.ToInstanceChargeDetailOutputWithContext(context.Background())
}

func (i InstanceChargeDetailArgs) ToInstanceChargeDetailOutputWithContext(ctx context.Context) InstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeDetailOutput)
}

// InstanceChargeDetailArrayInput is an input type that accepts InstanceChargeDetailArray and InstanceChargeDetailArrayOutput values.
// You can construct a concrete instance of `InstanceChargeDetailArrayInput` via:
//
//	InstanceChargeDetailArray{ InstanceChargeDetailArgs{...} }
type InstanceChargeDetailArrayInput interface {
	pulumi.Input

	ToInstanceChargeDetailArrayOutput() InstanceChargeDetailArrayOutput
	ToInstanceChargeDetailArrayOutputWithContext(context.Context) InstanceChargeDetailArrayOutput
}

type InstanceChargeDetailArray []InstanceChargeDetailInput

func (InstanceChargeDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceChargeDetail)(nil)).Elem()
}

func (i InstanceChargeDetailArray) ToInstanceChargeDetailArrayOutput() InstanceChargeDetailArrayOutput {
	return i.ToInstanceChargeDetailArrayOutputWithContext(context.Background())
}

func (i InstanceChargeDetailArray) ToInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstanceChargeDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeDetailArrayOutput)
}

type InstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (InstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeDetail)(nil)).Elem()
}

func (o InstanceChargeDetailOutput) ToInstanceChargeDetailOutput() InstanceChargeDetailOutput {
	return o
}

func (o InstanceChargeDetailOutput) ToInstanceChargeDetailOutputWithContext(ctx context.Context) InstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
// Autorenew_Enable
// Autorenew_Disable (default).
func (o InstanceChargeDetailOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// Billing expiry time (yearly and monthly only).
func (o InstanceChargeDetailOutput) ChargeEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeEndTime }).(pulumi.StringPtrOutput)
}

// Billing start time (pay-as-you-go & monthly subscription).
func (o InstanceChargeDetailOutput) ChargeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeStartTime }).(pulumi.StringPtrOutput)
}

// Pay status. Value:
// normal - normal
// overdue - overdue
// .
func (o InstanceChargeDetailOutput) ChargeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeStatus }).(pulumi.StringPtrOutput)
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o InstanceChargeDetailOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
func (o InstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.OverdueReclaimTime }).(pulumi.StringPtrOutput)
}

// Shutdown time in arrears (pay-as-you-go & monthly subscription).
func (o InstanceChargeDetailOutput) OverdueTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.OverdueTime }).(pulumi.StringPtrOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstanceChargeDetailOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstanceChargeDetailOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Restore time of temporary upgrade.
func (o InstanceChargeDetailOutput) TempModifyEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.TempModifyEndTime }).(pulumi.StringPtrOutput)
}

// Temporary upgrade start time.
func (o InstanceChargeDetailOutput) TempModifyStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.TempModifyStartTime }).(pulumi.StringPtrOutput)
}

type InstanceChargeDetailArrayOutput struct{ *pulumi.OutputState }

func (InstanceChargeDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceChargeDetail)(nil)).Elem()
}

func (o InstanceChargeDetailArrayOutput) ToInstanceChargeDetailArrayOutput() InstanceChargeDetailArrayOutput {
	return o
}

func (o InstanceChargeDetailArrayOutput) ToInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstanceChargeDetailArrayOutput {
	return o
}

func (o InstanceChargeDetailArrayOutput) Index(i pulumi.IntInput) InstanceChargeDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceChargeDetail {
		return vs[0].([]InstanceChargeDetail)[vs[1].(int)]
	}).(InstanceChargeDetailOutput)
}

type InstanceChargeInfo struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType string `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period *int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit *string `pulumi:"periodUnit"`
}

// InstanceChargeInfoInput is an input type that accepts InstanceChargeInfoArgs and InstanceChargeInfoOutput values.
// You can construct a concrete instance of `InstanceChargeInfoInput` via:
//
//	InstanceChargeInfoArgs{...}
type InstanceChargeInfoInput interface {
	pulumi.Input

	ToInstanceChargeInfoOutput() InstanceChargeInfoOutput
	ToInstanceChargeInfoOutputWithContext(context.Context) InstanceChargeInfoOutput
}

type InstanceChargeInfoArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringPtrInput `pulumi:"periodUnit"`
}

func (InstanceChargeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return i.ToInstanceChargeInfoOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput)
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput).ToInstanceChargeInfoPtrOutputWithContext(ctx)
}

// InstanceChargeInfoPtrInput is an input type that accepts InstanceChargeInfoArgs, InstanceChargeInfoPtr and InstanceChargeInfoPtrOutput values.
// You can construct a concrete instance of `InstanceChargeInfoPtrInput` via:
//
//	        InstanceChargeInfoArgs{...}
//
//	or:
//
//	        nil
type InstanceChargeInfoPtrInput interface {
	pulumi.Input

	ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput
	ToInstanceChargeInfoPtrOutputWithContext(context.Context) InstanceChargeInfoPtrOutput
}

type instanceChargeInfoPtrType InstanceChargeInfoArgs

func InstanceChargeInfoPtr(v *InstanceChargeInfoArgs) InstanceChargeInfoPtrInput {
	return (*instanceChargeInfoPtrType)(v)
}

func (*instanceChargeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoPtrOutput)
}

type InstanceChargeInfoOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceChargeInfo) *InstanceChargeInfo {
		return &v
	}).(InstanceChargeInfoPtrOutput)
}

// Whether to automatically renew in prepaid scenarios.
func (o InstanceChargeInfoOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o InstanceChargeInfoOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceChargeInfo) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstanceChargeInfoOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstanceChargeInfoOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *string { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

type InstanceChargeInfoPtrOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) Elem() InstanceChargeInfoOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) InstanceChargeInfo {
		if v != nil {
			return *v
		}
		var ret InstanceChargeInfo
		return ret
	}).(InstanceChargeInfoOutput)
}

// Whether to automatically renew in prepaid scenarios.
func (o InstanceChargeInfoPtrOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRenew
	}).(pulumi.BoolPtrOutput)
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o InstanceChargeInfoPtrOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ChargeType
	}).(pulumi.StringPtrOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstanceChargeInfoPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *int {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstanceChargeInfoPtrOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.PeriodUnit
	}).(pulumi.StringPtrOutput)
}

type InstanceEndpoint struct {
	// Address list.
	Addresses []InstanceEndpointAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes *string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description *string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly *string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting *string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId *string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName *string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType *string `pulumi:"endpointType"`
	// Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
	IdleConnectionReclaim *bool `pulumi:"idleConnectionReclaim"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights []InstanceEndpointNodeWeight `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode *string `pulumi:"readWriteMode"`
}

// InstanceEndpointInput is an input type that accepts InstanceEndpointArgs and InstanceEndpointOutput values.
// You can construct a concrete instance of `InstanceEndpointInput` via:
//
//	InstanceEndpointArgs{...}
type InstanceEndpointInput interface {
	pulumi.Input

	ToInstanceEndpointOutput() InstanceEndpointOutput
	ToInstanceEndpointOutputWithContext(context.Context) InstanceEndpointOutput
}

type InstanceEndpointArgs struct {
	// Address list.
	Addresses InstanceEndpointAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringPtrInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringPtrInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringPtrInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringPtrInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
	IdleConnectionReclaim pulumi.BoolPtrInput `pulumi:"idleConnectionReclaim"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights InstanceEndpointNodeWeightArrayInput `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringPtrInput `pulumi:"readWriteMode"`
}

func (InstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return i.ToInstanceEndpointOutputWithContext(context.Background())
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointOutput)
}

// InstanceEndpointArrayInput is an input type that accepts InstanceEndpointArray and InstanceEndpointArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointArrayInput` via:
//
//	InstanceEndpointArray{ InstanceEndpointArgs{...} }
type InstanceEndpointArrayInput interface {
	pulumi.Input

	ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput
	ToInstanceEndpointArrayOutputWithContext(context.Context) InstanceEndpointArrayOutput
}

type InstanceEndpointArray []InstanceEndpointInput

func (InstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return i.ToInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointArrayOutput)
}

type InstanceEndpointOutput struct{ *pulumi.OutputState }

func (InstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return o
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return o
}

// Address list.
func (o InstanceEndpointOutput) Addresses() InstanceEndpointAddressArrayOutput {
	return o.ApplyT(func(v InstanceEndpoint) []InstanceEndpointAddress { return v.Addresses }).(InstanceEndpointAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o InstanceEndpointOutput) AutoAddNewNodes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.AutoAddNewNodes }).(pulumi.StringPtrOutput)
}

// Address description.
func (o InstanceEndpointOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstanceEndpointOutput) EnableReadOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EnableReadOnly }).(pulumi.StringPtrOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstanceEndpointOutput) EnableReadWriteSplitting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EnableReadWriteSplitting }).(pulumi.StringPtrOutput)
}

// Instance connection terminal ID.
func (o InstanceEndpointOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// The instance connection terminal name.
func (o InstanceEndpointOutput) EndpointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointName }).(pulumi.StringPtrOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o InstanceEndpointOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
func (o InstanceEndpointOutput) IdleConnectionReclaim() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *bool { return v.IdleConnectionReclaim }).(pulumi.BoolPtrOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o InstanceEndpointOutput) NodeWeights() InstanceEndpointNodeWeightArrayOutput {
	return o.ApplyT(func(v InstanceEndpoint) []InstanceEndpointNodeWeight { return v.NodeWeights }).(InstanceEndpointNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o InstanceEndpointOutput) ReadWriteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.ReadWriteMode }).(pulumi.StringPtrOutput)
}

type InstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) Index(i pulumi.IntInput) InstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpoint {
		return vs[0].([]InstanceEndpoint)[vs[1].(int)]
	}).(InstanceEndpointOutput)
}

type InstanceEndpointAddress struct {
	// DNS Visibility.
	DnsVisibility *bool `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain *string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId *string `pulumi:"eipId"`
	// The IP Address.
	IpAddress *string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType *string `pulumi:"networkType"`
	// The Port.
	Port *string `pulumi:"port"`
	// Subnet ID of the RDS instance.
	SubnetId *string `pulumi:"subnetId"`
}

// InstanceEndpointAddressInput is an input type that accepts InstanceEndpointAddressArgs and InstanceEndpointAddressOutput values.
// You can construct a concrete instance of `InstanceEndpointAddressInput` via:
//
//	InstanceEndpointAddressArgs{...}
type InstanceEndpointAddressInput interface {
	pulumi.Input

	ToInstanceEndpointAddressOutput() InstanceEndpointAddressOutput
	ToInstanceEndpointAddressOutputWithContext(context.Context) InstanceEndpointAddressOutput
}

type InstanceEndpointAddressArgs struct {
	// DNS Visibility.
	DnsVisibility pulumi.BoolPtrInput `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringPtrInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// Subnet ID of the RDS instance.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (InstanceEndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointAddress)(nil)).Elem()
}

func (i InstanceEndpointAddressArgs) ToInstanceEndpointAddressOutput() InstanceEndpointAddressOutput {
	return i.ToInstanceEndpointAddressOutputWithContext(context.Background())
}

func (i InstanceEndpointAddressArgs) ToInstanceEndpointAddressOutputWithContext(ctx context.Context) InstanceEndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointAddressOutput)
}

// InstanceEndpointAddressArrayInput is an input type that accepts InstanceEndpointAddressArray and InstanceEndpointAddressArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointAddressArrayInput` via:
//
//	InstanceEndpointAddressArray{ InstanceEndpointAddressArgs{...} }
type InstanceEndpointAddressArrayInput interface {
	pulumi.Input

	ToInstanceEndpointAddressArrayOutput() InstanceEndpointAddressArrayOutput
	ToInstanceEndpointAddressArrayOutputWithContext(context.Context) InstanceEndpointAddressArrayOutput
}

type InstanceEndpointAddressArray []InstanceEndpointAddressInput

func (InstanceEndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointAddress)(nil)).Elem()
}

func (i InstanceEndpointAddressArray) ToInstanceEndpointAddressArrayOutput() InstanceEndpointAddressArrayOutput {
	return i.ToInstanceEndpointAddressArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointAddressArray) ToInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstanceEndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointAddressArrayOutput)
}

type InstanceEndpointAddressOutput struct{ *pulumi.OutputState }

func (InstanceEndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointAddress)(nil)).Elem()
}

func (o InstanceEndpointAddressOutput) ToInstanceEndpointAddressOutput() InstanceEndpointAddressOutput {
	return o
}

func (o InstanceEndpointAddressOutput) ToInstanceEndpointAddressOutputWithContext(ctx context.Context) InstanceEndpointAddressOutput {
	return o
}

// DNS Visibility.
func (o InstanceEndpointAddressOutput) DnsVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *bool { return v.DnsVisibility }).(pulumi.BoolPtrOutput)
}

// Connect domain name.
func (o InstanceEndpointAddressOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o InstanceEndpointAddressOutput) EipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.EipId }).(pulumi.StringPtrOutput)
}

// The IP Address.
func (o InstanceEndpointAddressOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o InstanceEndpointAddressOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// The Port.
func (o InstanceEndpointAddressOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// Subnet ID of the RDS instance.
func (o InstanceEndpointAddressOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type InstanceEndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointAddress)(nil)).Elem()
}

func (o InstanceEndpointAddressArrayOutput) ToInstanceEndpointAddressArrayOutput() InstanceEndpointAddressArrayOutput {
	return o
}

func (o InstanceEndpointAddressArrayOutput) ToInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstanceEndpointAddressArrayOutput {
	return o
}

func (o InstanceEndpointAddressArrayOutput) Index(i pulumi.IntInput) InstanceEndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpointAddress {
		return vs[0].([]InstanceEndpointAddress)[vs[1].(int)]
	}).(InstanceEndpointAddressOutput)
}

type InstanceEndpointNodeWeight struct {
	// Node ID.
	NodeId *string `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType *string `pulumi:"nodeType"`
	// The weight of the node.
	Weight *int `pulumi:"weight"`
}

// InstanceEndpointNodeWeightInput is an input type that accepts InstanceEndpointNodeWeightArgs and InstanceEndpointNodeWeightOutput values.
// You can construct a concrete instance of `InstanceEndpointNodeWeightInput` via:
//
//	InstanceEndpointNodeWeightArgs{...}
type InstanceEndpointNodeWeightInput interface {
	pulumi.Input

	ToInstanceEndpointNodeWeightOutput() InstanceEndpointNodeWeightOutput
	ToInstanceEndpointNodeWeightOutputWithContext(context.Context) InstanceEndpointNodeWeightOutput
}

type InstanceEndpointNodeWeightArgs struct {
	// Node ID.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringPtrInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (InstanceEndpointNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointNodeWeight)(nil)).Elem()
}

func (i InstanceEndpointNodeWeightArgs) ToInstanceEndpointNodeWeightOutput() InstanceEndpointNodeWeightOutput {
	return i.ToInstanceEndpointNodeWeightOutputWithContext(context.Background())
}

func (i InstanceEndpointNodeWeightArgs) ToInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) InstanceEndpointNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointNodeWeightOutput)
}

// InstanceEndpointNodeWeightArrayInput is an input type that accepts InstanceEndpointNodeWeightArray and InstanceEndpointNodeWeightArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointNodeWeightArrayInput` via:
//
//	InstanceEndpointNodeWeightArray{ InstanceEndpointNodeWeightArgs{...} }
type InstanceEndpointNodeWeightArrayInput interface {
	pulumi.Input

	ToInstanceEndpointNodeWeightArrayOutput() InstanceEndpointNodeWeightArrayOutput
	ToInstanceEndpointNodeWeightArrayOutputWithContext(context.Context) InstanceEndpointNodeWeightArrayOutput
}

type InstanceEndpointNodeWeightArray []InstanceEndpointNodeWeightInput

func (InstanceEndpointNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointNodeWeight)(nil)).Elem()
}

func (i InstanceEndpointNodeWeightArray) ToInstanceEndpointNodeWeightArrayOutput() InstanceEndpointNodeWeightArrayOutput {
	return i.ToInstanceEndpointNodeWeightArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointNodeWeightArray) ToInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) InstanceEndpointNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointNodeWeightArrayOutput)
}

type InstanceEndpointNodeWeightOutput struct{ *pulumi.OutputState }

func (InstanceEndpointNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointNodeWeight)(nil)).Elem()
}

func (o InstanceEndpointNodeWeightOutput) ToInstanceEndpointNodeWeightOutput() InstanceEndpointNodeWeightOutput {
	return o
}

func (o InstanceEndpointNodeWeightOutput) ToInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) InstanceEndpointNodeWeightOutput {
	return o
}

// Node ID.
func (o InstanceEndpointNodeWeightOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointNodeWeight) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstanceEndpointNodeWeightOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointNodeWeight) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The weight of the node.
func (o InstanceEndpointNodeWeightOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceEndpointNodeWeight) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type InstanceEndpointNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointNodeWeight)(nil)).Elem()
}

func (o InstanceEndpointNodeWeightArrayOutput) ToInstanceEndpointNodeWeightArrayOutput() InstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o InstanceEndpointNodeWeightArrayOutput) ToInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) InstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o InstanceEndpointNodeWeightArrayOutput) Index(i pulumi.IntInput) InstanceEndpointNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpointNodeWeight {
		return vs[0].([]InstanceEndpointNodeWeight)[vs[1].(int)]
	}).(InstanceEndpointNodeWeightOutput)
}

type InstanceFeatureState struct {
	// Whether it is enabled. Values:
	// true: Enabled.
	// false: Disabled.
	Enable *bool `pulumi:"enable"`
	// Feature name.
	FeatureName *string `pulumi:"featureName"`
	// Whether it support this function. Value:
	// true: Supported.
	// false: Not supported.
	Support *bool `pulumi:"support"`
}

// InstanceFeatureStateInput is an input type that accepts InstanceFeatureStateArgs and InstanceFeatureStateOutput values.
// You can construct a concrete instance of `InstanceFeatureStateInput` via:
//
//	InstanceFeatureStateArgs{...}
type InstanceFeatureStateInput interface {
	pulumi.Input

	ToInstanceFeatureStateOutput() InstanceFeatureStateOutput
	ToInstanceFeatureStateOutputWithContext(context.Context) InstanceFeatureStateOutput
}

type InstanceFeatureStateArgs struct {
	// Whether it is enabled. Values:
	// true: Enabled.
	// false: Disabled.
	Enable pulumi.BoolPtrInput `pulumi:"enable"`
	// Feature name.
	FeatureName pulumi.StringPtrInput `pulumi:"featureName"`
	// Whether it support this function. Value:
	// true: Supported.
	// false: Not supported.
	Support pulumi.BoolPtrInput `pulumi:"support"`
}

func (InstanceFeatureStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFeatureState)(nil)).Elem()
}

func (i InstanceFeatureStateArgs) ToInstanceFeatureStateOutput() InstanceFeatureStateOutput {
	return i.ToInstanceFeatureStateOutputWithContext(context.Background())
}

func (i InstanceFeatureStateArgs) ToInstanceFeatureStateOutputWithContext(ctx context.Context) InstanceFeatureStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFeatureStateOutput)
}

// InstanceFeatureStateArrayInput is an input type that accepts InstanceFeatureStateArray and InstanceFeatureStateArrayOutput values.
// You can construct a concrete instance of `InstanceFeatureStateArrayInput` via:
//
//	InstanceFeatureStateArray{ InstanceFeatureStateArgs{...} }
type InstanceFeatureStateArrayInput interface {
	pulumi.Input

	ToInstanceFeatureStateArrayOutput() InstanceFeatureStateArrayOutput
	ToInstanceFeatureStateArrayOutputWithContext(context.Context) InstanceFeatureStateArrayOutput
}

type InstanceFeatureStateArray []InstanceFeatureStateInput

func (InstanceFeatureStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFeatureState)(nil)).Elem()
}

func (i InstanceFeatureStateArray) ToInstanceFeatureStateArrayOutput() InstanceFeatureStateArrayOutput {
	return i.ToInstanceFeatureStateArrayOutputWithContext(context.Background())
}

func (i InstanceFeatureStateArray) ToInstanceFeatureStateArrayOutputWithContext(ctx context.Context) InstanceFeatureStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceFeatureStateArrayOutput)
}

type InstanceFeatureStateOutput struct{ *pulumi.OutputState }

func (InstanceFeatureStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceFeatureState)(nil)).Elem()
}

func (o InstanceFeatureStateOutput) ToInstanceFeatureStateOutput() InstanceFeatureStateOutput {
	return o
}

func (o InstanceFeatureStateOutput) ToInstanceFeatureStateOutputWithContext(ctx context.Context) InstanceFeatureStateOutput {
	return o
}

// Whether it is enabled. Values:
// true: Enabled.
// false: Disabled.
func (o InstanceFeatureStateOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFeatureState) *bool { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Feature name.
func (o InstanceFeatureStateOutput) FeatureName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceFeatureState) *string { return v.FeatureName }).(pulumi.StringPtrOutput)
}

// Whether it support this function. Value:
// true: Supported.
// false: Not supported.
func (o InstanceFeatureStateOutput) Support() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceFeatureState) *bool { return v.Support }).(pulumi.BoolPtrOutput)
}

type InstanceFeatureStateArrayOutput struct{ *pulumi.OutputState }

func (InstanceFeatureStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceFeatureState)(nil)).Elem()
}

func (o InstanceFeatureStateArrayOutput) ToInstanceFeatureStateArrayOutput() InstanceFeatureStateArrayOutput {
	return o
}

func (o InstanceFeatureStateArrayOutput) ToInstanceFeatureStateArrayOutputWithContext(ctx context.Context) InstanceFeatureStateArrayOutput {
	return o
}

func (o InstanceFeatureStateArrayOutput) Index(i pulumi.IntInput) InstanceFeatureStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceFeatureState {
		return vs[0].([]InstanceFeatureState)[vs[1].(int)]
	}).(InstanceFeatureStateOutput)
}

type InstanceMaintenanceWindow struct {
	// Maintenance cycle granularity, values: Week: Week. Month: Month.
	DayKind *string `pulumi:"dayKind"`
	// Specify the maintainable time period of a certain day of the week. The values are: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. Multiple selections are allowed. If this value is not specified or is empty, it defaults to specifying all seven days of the week.
	DayOfWeeks []string `pulumi:"dayOfWeeks"`
	// Maintenance period of an instance. Format: HH:mmZ-HH:mmZ (UTC time).
	MaintenanceTime *string `pulumi:"maintenanceTime"`
}

// InstanceMaintenanceWindowInput is an input type that accepts InstanceMaintenanceWindowArgs and InstanceMaintenanceWindowOutput values.
// You can construct a concrete instance of `InstanceMaintenanceWindowInput` via:
//
//	InstanceMaintenanceWindowArgs{...}
type InstanceMaintenanceWindowInput interface {
	pulumi.Input

	ToInstanceMaintenanceWindowOutput() InstanceMaintenanceWindowOutput
	ToInstanceMaintenanceWindowOutputWithContext(context.Context) InstanceMaintenanceWindowOutput
}

type InstanceMaintenanceWindowArgs struct {
	// Maintenance cycle granularity, values: Week: Week. Month: Month.
	DayKind pulumi.StringPtrInput `pulumi:"dayKind"`
	// Specify the maintainable time period of a certain day of the week. The values are: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. Multiple selections are allowed. If this value is not specified or is empty, it defaults to specifying all seven days of the week.
	DayOfWeeks pulumi.StringArrayInput `pulumi:"dayOfWeeks"`
	// Maintenance period of an instance. Format: HH:mmZ-HH:mmZ (UTC time).
	MaintenanceTime pulumi.StringPtrInput `pulumi:"maintenanceTime"`
}

func (InstanceMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMaintenanceWindow)(nil)).Elem()
}

func (i InstanceMaintenanceWindowArgs) ToInstanceMaintenanceWindowOutput() InstanceMaintenanceWindowOutput {
	return i.ToInstanceMaintenanceWindowOutputWithContext(context.Background())
}

func (i InstanceMaintenanceWindowArgs) ToInstanceMaintenanceWindowOutputWithContext(ctx context.Context) InstanceMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMaintenanceWindowOutput)
}

func (i InstanceMaintenanceWindowArgs) ToInstanceMaintenanceWindowPtrOutput() InstanceMaintenanceWindowPtrOutput {
	return i.ToInstanceMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i InstanceMaintenanceWindowArgs) ToInstanceMaintenanceWindowPtrOutputWithContext(ctx context.Context) InstanceMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMaintenanceWindowOutput).ToInstanceMaintenanceWindowPtrOutputWithContext(ctx)
}

// InstanceMaintenanceWindowPtrInput is an input type that accepts InstanceMaintenanceWindowArgs, InstanceMaintenanceWindowPtr and InstanceMaintenanceWindowPtrOutput values.
// You can construct a concrete instance of `InstanceMaintenanceWindowPtrInput` via:
//
//	        InstanceMaintenanceWindowArgs{...}
//
//	or:
//
//	        nil
type InstanceMaintenanceWindowPtrInput interface {
	pulumi.Input

	ToInstanceMaintenanceWindowPtrOutput() InstanceMaintenanceWindowPtrOutput
	ToInstanceMaintenanceWindowPtrOutputWithContext(context.Context) InstanceMaintenanceWindowPtrOutput
}

type instanceMaintenanceWindowPtrType InstanceMaintenanceWindowArgs

func InstanceMaintenanceWindowPtr(v *InstanceMaintenanceWindowArgs) InstanceMaintenanceWindowPtrInput {
	return (*instanceMaintenanceWindowPtrType)(v)
}

func (*instanceMaintenanceWindowPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceMaintenanceWindow)(nil)).Elem()
}

func (i *instanceMaintenanceWindowPtrType) ToInstanceMaintenanceWindowPtrOutput() InstanceMaintenanceWindowPtrOutput {
	return i.ToInstanceMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (i *instanceMaintenanceWindowPtrType) ToInstanceMaintenanceWindowPtrOutputWithContext(ctx context.Context) InstanceMaintenanceWindowPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMaintenanceWindowPtrOutput)
}

type InstanceMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (InstanceMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMaintenanceWindow)(nil)).Elem()
}

func (o InstanceMaintenanceWindowOutput) ToInstanceMaintenanceWindowOutput() InstanceMaintenanceWindowOutput {
	return o
}

func (o InstanceMaintenanceWindowOutput) ToInstanceMaintenanceWindowOutputWithContext(ctx context.Context) InstanceMaintenanceWindowOutput {
	return o
}

func (o InstanceMaintenanceWindowOutput) ToInstanceMaintenanceWindowPtrOutput() InstanceMaintenanceWindowPtrOutput {
	return o.ToInstanceMaintenanceWindowPtrOutputWithContext(context.Background())
}

func (o InstanceMaintenanceWindowOutput) ToInstanceMaintenanceWindowPtrOutputWithContext(ctx context.Context) InstanceMaintenanceWindowPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceMaintenanceWindow) *InstanceMaintenanceWindow {
		return &v
	}).(InstanceMaintenanceWindowPtrOutput)
}

// Maintenance cycle granularity, values: Week: Week. Month: Month.
func (o InstanceMaintenanceWindowOutput) DayKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMaintenanceWindow) *string { return v.DayKind }).(pulumi.StringPtrOutput)
}

// Specify the maintainable time period of a certain day of the week. The values are: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. Multiple selections are allowed. If this value is not specified or is empty, it defaults to specifying all seven days of the week.
func (o InstanceMaintenanceWindowOutput) DayOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceMaintenanceWindow) []string { return v.DayOfWeeks }).(pulumi.StringArrayOutput)
}

// Maintenance period of an instance. Format: HH:mmZ-HH:mmZ (UTC time).
func (o InstanceMaintenanceWindowOutput) MaintenanceTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMaintenanceWindow) *string { return v.MaintenanceTime }).(pulumi.StringPtrOutput)
}

type InstanceMaintenanceWindowPtrOutput struct{ *pulumi.OutputState }

func (InstanceMaintenanceWindowPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceMaintenanceWindow)(nil)).Elem()
}

func (o InstanceMaintenanceWindowPtrOutput) ToInstanceMaintenanceWindowPtrOutput() InstanceMaintenanceWindowPtrOutput {
	return o
}

func (o InstanceMaintenanceWindowPtrOutput) ToInstanceMaintenanceWindowPtrOutputWithContext(ctx context.Context) InstanceMaintenanceWindowPtrOutput {
	return o
}

func (o InstanceMaintenanceWindowPtrOutput) Elem() InstanceMaintenanceWindowOutput {
	return o.ApplyT(func(v *InstanceMaintenanceWindow) InstanceMaintenanceWindow {
		if v != nil {
			return *v
		}
		var ret InstanceMaintenanceWindow
		return ret
	}).(InstanceMaintenanceWindowOutput)
}

// Maintenance cycle granularity, values: Week: Week. Month: Month.
func (o InstanceMaintenanceWindowPtrOutput) DayKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.DayKind
	}).(pulumi.StringPtrOutput)
}

// Specify the maintainable time period of a certain day of the week. The values are: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. Multiple selections are allowed. If this value is not specified or is empty, it defaults to specifying all seven days of the week.
func (o InstanceMaintenanceWindowPtrOutput) DayOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *InstanceMaintenanceWindow) []string {
		if v == nil {
			return nil
		}
		return v.DayOfWeeks
	}).(pulumi.StringArrayOutput)
}

// Maintenance period of an instance. Format: HH:mmZ-HH:mmZ (UTC time).
func (o InstanceMaintenanceWindowPtrOutput) MaintenanceTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceMaintenanceWindow) *string {
		if v == nil {
			return nil
		}
		return v.MaintenanceTime
	}).(pulumi.StringPtrOutput)
}

type InstanceNode struct {
	// Node creation local time.
	CreateTime *string `pulumi:"createTime"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Memory size in GB.
	Memory *int `pulumi:"memory"`
	// Node ID.
	NodeId *string `pulumi:"nodeId"`
	// The specification of primary node and secondary node.
	NodeSpec *string `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus *string `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType *string `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId *string `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime *string `pulumi:"updateTime"`
	// CPU size.
	VCpu *int `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId *string `pulumi:"zoneId"`
}

// InstanceNodeInput is an input type that accepts InstanceNodeArgs and InstanceNodeOutput values.
// You can construct a concrete instance of `InstanceNodeInput` via:
//
//	InstanceNodeArgs{...}
type InstanceNodeInput interface {
	pulumi.Input

	ToInstanceNodeOutput() InstanceNodeOutput
	ToInstanceNodeOutputWithContext(context.Context) InstanceNodeOutput
}

type InstanceNodeArgs struct {
	// Node creation local time.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Instance ID.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// Memory size in GB.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// Node ID.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// The specification of primary node and secondary node.
	NodeSpec pulumi.StringPtrInput `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus pulumi.StringPtrInput `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringPtrInput `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId pulumi.StringPtrInput `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntPtrInput `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (InstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArgs) ToInstanceNodeOutput() InstanceNodeOutput {
	return i.ToInstanceNodeOutputWithContext(context.Background())
}

func (i InstanceNodeArgs) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeOutput)
}

// InstanceNodeArrayInput is an input type that accepts InstanceNodeArray and InstanceNodeArrayOutput values.
// You can construct a concrete instance of `InstanceNodeArrayInput` via:
//
//	InstanceNodeArray{ InstanceNodeArgs{...} }
type InstanceNodeArrayInput interface {
	pulumi.Input

	ToInstanceNodeArrayOutput() InstanceNodeArrayOutput
	ToInstanceNodeArrayOutputWithContext(context.Context) InstanceNodeArrayOutput
}

type InstanceNodeArray []InstanceNodeInput

func (InstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return i.ToInstanceNodeArrayOutputWithContext(context.Background())
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeArrayOutput)
}

type InstanceNodeOutput struct{ *pulumi.OutputState }

func (InstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (o InstanceNodeOutput) ToInstanceNodeOutput() InstanceNodeOutput {
	return o
}

func (o InstanceNodeOutput) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return o
}

// Node creation local time.
func (o InstanceNodeOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Instance ID.
func (o InstanceNodeOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// Memory size in GB.
func (o InstanceNodeOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceNode) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// Node ID.
func (o InstanceNodeOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// The specification of primary node and secondary node.
func (o InstanceNodeOutput) NodeSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeSpec }).(pulumi.StringPtrOutput)
}

// Node state, value: aligned with instance state.
func (o InstanceNodeOutput) NodeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeStatus }).(pulumi.StringPtrOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstanceNodeOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The region of the RDS instance.
func (o InstanceNodeOutput) RegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.RegionId }).(pulumi.StringPtrOutput)
}

// The update time of the RDS instance.
func (o InstanceNodeOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

// CPU size.
func (o InstanceNodeOutput) VCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceNode) *int { return v.VCpu }).(pulumi.IntPtrOutput)
}

// The available zone of the RDS instance.
func (o InstanceNodeOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type InstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (InstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) Index(i pulumi.IntInput) InstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNode {
		return vs[0].([]InstanceNode)[vs[1].(int)]
	}).(InstanceNodeOutput)
}

type InstanceParameter struct {
	// Parameter name.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue string `pulumi:"parameterValue"`
}

// InstanceParameterInput is an input type that accepts InstanceParameterArgs and InstanceParameterOutput values.
// You can construct a concrete instance of `InstanceParameterInput` via:
//
//	InstanceParameterArgs{...}
type InstanceParameterInput interface {
	pulumi.Input

	ToInstanceParameterOutput() InstanceParameterOutput
	ToInstanceParameterOutputWithContext(context.Context) InstanceParameterOutput
}

type InstanceParameterArgs struct {
	// Parameter name.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (InstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArgs) ToInstanceParameterOutput() InstanceParameterOutput {
	return i.ToInstanceParameterOutputWithContext(context.Background())
}

func (i InstanceParameterArgs) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterOutput)
}

// InstanceParameterArrayInput is an input type that accepts InstanceParameterArray and InstanceParameterArrayOutput values.
// You can construct a concrete instance of `InstanceParameterArrayInput` via:
//
//	InstanceParameterArray{ InstanceParameterArgs{...} }
type InstanceParameterArrayInput interface {
	pulumi.Input

	ToInstanceParameterArrayOutput() InstanceParameterArrayOutput
	ToInstanceParameterArrayOutputWithContext(context.Context) InstanceParameterArrayOutput
}

type InstanceParameterArray []InstanceParameterInput

func (InstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return i.ToInstanceParameterArrayOutputWithContext(context.Background())
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterArrayOutput)
}

type InstanceParameterOutput struct{ *pulumi.OutputState }

func (InstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterOutput) ToInstanceParameterOutput() InstanceParameterOutput {
	return o
}

func (o InstanceParameterOutput) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return o
}

// Parameter name.
func (o InstanceParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

// Parameter value.
func (o InstanceParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type InstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (InstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) Index(i pulumi.IntInput) InstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceParameter {
		return vs[0].([]InstanceParameter)[vs[1].(int)]
	}).(InstanceParameterOutput)
}

type InstanceSpecsInstanceSpec struct {
	// Default value of maximum number of connections.
	Connection int `pulumi:"connection"`
	// Compatible version. Values:
	// MySQL_5_7: MySQL 5.7 version. Default value.
	// MySQL_8_0: MySQL 8.0 version.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// Instance type. The value is DoubleNode.
	InstanceType string `pulumi:"instanceType"`
	// Maximum IOPS per second.
	Iops int `pulumi:"iops"`
	// Memory size, in GB.
	Memory int `pulumi:"memory"`
	// Queries Per Second (QPS).
	Qps int `pulumi:"qps"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// Instance specification code.
	SpecCode string `pulumi:"specCode"`
	// Instance specification type. Values:
	// General: Exclusive specification (formerly "General Purpose").
	// Shared: General specification (formerly "Shared Type").
	SpecFamily string `pulumi:"specFamily"`
	// The status of the available zone where the specification is located includes the following statuses:
	// Normal: On sale.
	// Soldout: Sold out.
	SpecStatus string `pulumi:"specStatus"`
	// Maximum storage space, in GB.
	StorageMax int `pulumi:"storageMax"`
	// Minimum storage space, in GB.
	StorageMin int `pulumi:"storageMin"`
	// Disk step size, in GB.
	StorageStep int `pulumi:"storageStep"`
	// Number of vCPUs.
	Vcpu int `pulumi:"vcpu"`
	// Availability zone ID.
	ZoneId string `pulumi:"zoneId"`
}

// InstanceSpecsInstanceSpecInput is an input type that accepts InstanceSpecsInstanceSpecArgs and InstanceSpecsInstanceSpecOutput values.
// You can construct a concrete instance of `InstanceSpecsInstanceSpecInput` via:
//
//	InstanceSpecsInstanceSpecArgs{...}
type InstanceSpecsInstanceSpecInput interface {
	pulumi.Input

	ToInstanceSpecsInstanceSpecOutput() InstanceSpecsInstanceSpecOutput
	ToInstanceSpecsInstanceSpecOutputWithContext(context.Context) InstanceSpecsInstanceSpecOutput
}

type InstanceSpecsInstanceSpecArgs struct {
	// Default value of maximum number of connections.
	Connection pulumi.IntInput `pulumi:"connection"`
	// Compatible version. Values:
	// MySQL_5_7: MySQL 5.7 version. Default value.
	// MySQL_8_0: MySQL 8.0 version.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// Instance type. The value is DoubleNode.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Maximum IOPS per second.
	Iops pulumi.IntInput `pulumi:"iops"`
	// Memory size, in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Queries Per Second (QPS).
	Qps pulumi.IntInput `pulumi:"qps"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Instance specification code.
	SpecCode pulumi.StringInput `pulumi:"specCode"`
	// Instance specification type. Values:
	// General: Exclusive specification (formerly "General Purpose").
	// Shared: General specification (formerly "Shared Type").
	SpecFamily pulumi.StringInput `pulumi:"specFamily"`
	// The status of the available zone where the specification is located includes the following statuses:
	// Normal: On sale.
	// Soldout: Sold out.
	SpecStatus pulumi.StringInput `pulumi:"specStatus"`
	// Maximum storage space, in GB.
	StorageMax pulumi.IntInput `pulumi:"storageMax"`
	// Minimum storage space, in GB.
	StorageMin pulumi.IntInput `pulumi:"storageMin"`
	// Disk step size, in GB.
	StorageStep pulumi.IntInput `pulumi:"storageStep"`
	// Number of vCPUs.
	Vcpu pulumi.IntInput `pulumi:"vcpu"`
	// Availability zone ID.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstanceSpecsInstanceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSpecsInstanceSpec)(nil)).Elem()
}

func (i InstanceSpecsInstanceSpecArgs) ToInstanceSpecsInstanceSpecOutput() InstanceSpecsInstanceSpecOutput {
	return i.ToInstanceSpecsInstanceSpecOutputWithContext(context.Background())
}

func (i InstanceSpecsInstanceSpecArgs) ToInstanceSpecsInstanceSpecOutputWithContext(ctx context.Context) InstanceSpecsInstanceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecsInstanceSpecOutput)
}

// InstanceSpecsInstanceSpecArrayInput is an input type that accepts InstanceSpecsInstanceSpecArray and InstanceSpecsInstanceSpecArrayOutput values.
// You can construct a concrete instance of `InstanceSpecsInstanceSpecArrayInput` via:
//
//	InstanceSpecsInstanceSpecArray{ InstanceSpecsInstanceSpecArgs{...} }
type InstanceSpecsInstanceSpecArrayInput interface {
	pulumi.Input

	ToInstanceSpecsInstanceSpecArrayOutput() InstanceSpecsInstanceSpecArrayOutput
	ToInstanceSpecsInstanceSpecArrayOutputWithContext(context.Context) InstanceSpecsInstanceSpecArrayOutput
}

type InstanceSpecsInstanceSpecArray []InstanceSpecsInstanceSpecInput

func (InstanceSpecsInstanceSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSpecsInstanceSpec)(nil)).Elem()
}

func (i InstanceSpecsInstanceSpecArray) ToInstanceSpecsInstanceSpecArrayOutput() InstanceSpecsInstanceSpecArrayOutput {
	return i.ToInstanceSpecsInstanceSpecArrayOutputWithContext(context.Background())
}

func (i InstanceSpecsInstanceSpecArray) ToInstanceSpecsInstanceSpecArrayOutputWithContext(ctx context.Context) InstanceSpecsInstanceSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceSpecsInstanceSpecArrayOutput)
}

type InstanceSpecsInstanceSpecOutput struct{ *pulumi.OutputState }

func (InstanceSpecsInstanceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceSpecsInstanceSpec)(nil)).Elem()
}

func (o InstanceSpecsInstanceSpecOutput) ToInstanceSpecsInstanceSpecOutput() InstanceSpecsInstanceSpecOutput {
	return o
}

func (o InstanceSpecsInstanceSpecOutput) ToInstanceSpecsInstanceSpecOutputWithContext(ctx context.Context) InstanceSpecsInstanceSpecOutput {
	return o
}

// Default value of maximum number of connections.
func (o InstanceSpecsInstanceSpecOutput) Connection() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) int { return v.Connection }).(pulumi.IntOutput)
}

// Compatible version. Values:
// MySQL_5_7: MySQL 5.7 version. Default value.
// MySQL_8_0: MySQL 8.0 version.
func (o InstanceSpecsInstanceSpecOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// Instance type. The value is DoubleNode.
func (o InstanceSpecsInstanceSpecOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Maximum IOPS per second.
func (o InstanceSpecsInstanceSpecOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) int { return v.Iops }).(pulumi.IntOutput)
}

// Memory size, in GB.
func (o InstanceSpecsInstanceSpecOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) int { return v.Memory }).(pulumi.IntOutput)
}

// Queries Per Second (QPS).
func (o InstanceSpecsInstanceSpecOutput) Qps() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) int { return v.Qps }).(pulumi.IntOutput)
}

// The id of the region.
func (o InstanceSpecsInstanceSpecOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) string { return v.RegionId }).(pulumi.StringOutput)
}

// Instance specification code.
func (o InstanceSpecsInstanceSpecOutput) SpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) string { return v.SpecCode }).(pulumi.StringOutput)
}

// Instance specification type. Values:
// General: Exclusive specification (formerly "General Purpose").
// Shared: General specification (formerly "Shared Type").
func (o InstanceSpecsInstanceSpecOutput) SpecFamily() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) string { return v.SpecFamily }).(pulumi.StringOutput)
}

// The status of the available zone where the specification is located includes the following statuses:
// Normal: On sale.
// Soldout: Sold out.
func (o InstanceSpecsInstanceSpecOutput) SpecStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) string { return v.SpecStatus }).(pulumi.StringOutput)
}

// Maximum storage space, in GB.
func (o InstanceSpecsInstanceSpecOutput) StorageMax() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) int { return v.StorageMax }).(pulumi.IntOutput)
}

// Minimum storage space, in GB.
func (o InstanceSpecsInstanceSpecOutput) StorageMin() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) int { return v.StorageMin }).(pulumi.IntOutput)
}

// Disk step size, in GB.
func (o InstanceSpecsInstanceSpecOutput) StorageStep() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) int { return v.StorageStep }).(pulumi.IntOutput)
}

// Number of vCPUs.
func (o InstanceSpecsInstanceSpecOutput) Vcpu() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) int { return v.Vcpu }).(pulumi.IntOutput)
}

// Availability zone ID.
func (o InstanceSpecsInstanceSpecOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceSpecsInstanceSpec) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstanceSpecsInstanceSpecArrayOutput struct{ *pulumi.OutputState }

func (InstanceSpecsInstanceSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceSpecsInstanceSpec)(nil)).Elem()
}

func (o InstanceSpecsInstanceSpecArrayOutput) ToInstanceSpecsInstanceSpecArrayOutput() InstanceSpecsInstanceSpecArrayOutput {
	return o
}

func (o InstanceSpecsInstanceSpecArrayOutput) ToInstanceSpecsInstanceSpecArrayOutputWithContext(ctx context.Context) InstanceSpecsInstanceSpecArrayOutput {
	return o
}

func (o InstanceSpecsInstanceSpecArrayOutput) Index(i pulumi.IntInput) InstanceSpecsInstanceSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceSpecsInstanceSpec {
		return vs[0].([]InstanceSpecsInstanceSpec)[vs[1].(int)]
	}).(InstanceSpecsInstanceSpecOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstancesRdsMysqlInstance struct {
	// The version of allow list.
	AllowListVersion string `pulumi:"allowListVersion"`
	// The instance has used backup space. Unit: GB.
	BackupUse int `pulumi:"backupUse"`
	// Does it support the binlog capability? This parameter is returned only when the database proxy is enabled. Values:
	// true: Yes.
	// false: No.
	BinlogDump bool `pulumi:"binlogDump"`
	// Payment methods.
	ChargeDetail InstancesRdsMysqlInstanceChargeDetail `pulumi:"chargeDetail"`
	// Connection pool type.
	ConnectionPoolType string `pulumi:"connectionPoolType"`
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode string `pulumi:"dataSyncMode"`
	// The version of the RDS instance.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The running status of the proxy instance. This parameter is returned only when the database proxy is enabled. Values:
	// Creating: The proxy is being started.
	// Running: The proxy is running.
	// Shutdown: The proxy is closed.
	// Deleting: The proxy is being closed.
	DbProxyStatus string `pulumi:"dbProxyStatus"`
	// The endpoint info of the RDS instance.
	Endpoints []InstancesRdsMysqlInstanceEndpoint `pulumi:"endpoints"`
	// Feature status.
	FeatureStates []InstancesRdsMysqlInstanceFeatureState `pulumi:"featureStates"`
	// Whether to enable global read-only.
	// true: Yes.
	// false: No.
	GlobalReadOnly bool `pulumi:"globalReadOnly"`
	// The ID of the RDS instance.
	Id string `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName string `pulumi:"instanceName"`
	// The status of the RDS instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// Whether the table name is case sensitive, the default value is 1.
	// Ranges:
	// 0: Table names are stored as fixed and table names are case-sensitive.
	// 1: Table names will be stored in lowercase and table names are not case sensitive.
	LowerCaseTableNames string `pulumi:"lowerCaseTableNames"`
	// Maintenance Window.
	MaintenanceWindows []InstancesRdsMysqlInstanceMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// Average CPU usage of the instance master node in nearly one minute.
	NodeCpuUsedPercentage float64 `pulumi:"nodeCpuUsedPercentage"`
	// Average memory usage of the instance master node in nearly one minute.
	NodeMemoryUsedPercentage float64 `pulumi:"nodeMemoryUsedPercentage"`
	// The number of nodes.
	NodeNumber int `pulumi:"nodeNumber"`
	// Average disk usage of the instance master node in nearly one minute.
	NodeSpaceUsedPercentage float64 `pulumi:"nodeSpaceUsedPercentage"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes []InstancesRdsMysqlInstanceNode `pulumi:"nodes"`
	// The project name of the RDS instance.
	ProjectName string `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// Total instance storage space. Unit: GB.
	StorageSpace int `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType string `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse int `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstancesRdsMysqlInstanceTag `pulumi:"tags"`
	// Time zone.
	TimeZone string `pulumi:"timeZone"`
	// The update time of the RDS instance.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size.
	VCpu int `pulumi:"vCpu"`
	// The vpc ID of the RDS instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
	// List of availability zones where each node of the instance is located.
	ZoneIds []string `pulumi:"zoneIds"`
}

// InstancesRdsMysqlInstanceInput is an input type that accepts InstancesRdsMysqlInstanceArgs and InstancesRdsMysqlInstanceOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceInput` via:
//
//	InstancesRdsMysqlInstanceArgs{...}
type InstancesRdsMysqlInstanceInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceOutput() InstancesRdsMysqlInstanceOutput
	ToInstancesRdsMysqlInstanceOutputWithContext(context.Context) InstancesRdsMysqlInstanceOutput
}

type InstancesRdsMysqlInstanceArgs struct {
	// The version of allow list.
	AllowListVersion pulumi.StringInput `pulumi:"allowListVersion"`
	// The instance has used backup space. Unit: GB.
	BackupUse pulumi.IntInput `pulumi:"backupUse"`
	// Does it support the binlog capability? This parameter is returned only when the database proxy is enabled. Values:
	// true: Yes.
	// false: No.
	BinlogDump pulumi.BoolInput `pulumi:"binlogDump"`
	// Payment methods.
	ChargeDetail InstancesRdsMysqlInstanceChargeDetailInput `pulumi:"chargeDetail"`
	// Connection pool type.
	ConnectionPoolType pulumi.StringInput `pulumi:"connectionPoolType"`
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode pulumi.StringInput `pulumi:"dataSyncMode"`
	// The version of the RDS instance.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// The running status of the proxy instance. This parameter is returned only when the database proxy is enabled. Values:
	// Creating: The proxy is being started.
	// Running: The proxy is running.
	// Shutdown: The proxy is closed.
	// Deleting: The proxy is being closed.
	DbProxyStatus pulumi.StringInput `pulumi:"dbProxyStatus"`
	// The endpoint info of the RDS instance.
	Endpoints InstancesRdsMysqlInstanceEndpointArrayInput `pulumi:"endpoints"`
	// Feature status.
	FeatureStates InstancesRdsMysqlInstanceFeatureStateArrayInput `pulumi:"featureStates"`
	// Whether to enable global read-only.
	// true: Yes.
	// false: No.
	GlobalReadOnly pulumi.BoolInput `pulumi:"globalReadOnly"`
	// The ID of the RDS instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of the RDS instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// Whether the table name is case sensitive, the default value is 1.
	// Ranges:
	// 0: Table names are stored as fixed and table names are case-sensitive.
	// 1: Table names will be stored in lowercase and table names are not case sensitive.
	LowerCaseTableNames pulumi.StringInput `pulumi:"lowerCaseTableNames"`
	// Maintenance Window.
	MaintenanceWindows InstancesRdsMysqlInstanceMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Average CPU usage of the instance master node in nearly one minute.
	NodeCpuUsedPercentage pulumi.Float64Input `pulumi:"nodeCpuUsedPercentage"`
	// Average memory usage of the instance master node in nearly one minute.
	NodeMemoryUsedPercentage pulumi.Float64Input `pulumi:"nodeMemoryUsedPercentage"`
	// The number of nodes.
	NodeNumber pulumi.IntInput `pulumi:"nodeNumber"`
	// Average disk usage of the instance master node in nearly one minute.
	NodeSpaceUsedPercentage pulumi.Float64Input `pulumi:"nodeSpaceUsedPercentage"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes InstancesRdsMysqlInstanceNodeArrayInput `pulumi:"nodes"`
	// The project name of the RDS instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Total instance storage space. Unit: GB.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse pulumi.IntInput `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags InstancesRdsMysqlInstanceTagArrayInput `pulumi:"tags"`
	// Time zone.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
	// The update time of the RDS instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The vpc ID of the RDS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// List of availability zones where each node of the instance is located.
	ZoneIds pulumi.StringArrayInput `pulumi:"zoneIds"`
}

func (InstancesRdsMysqlInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstance)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceArgs) ToInstancesRdsMysqlInstanceOutput() InstancesRdsMysqlInstanceOutput {
	return i.ToInstancesRdsMysqlInstanceOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceArgs) ToInstancesRdsMysqlInstanceOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceOutput)
}

// InstancesRdsMysqlInstanceArrayInput is an input type that accepts InstancesRdsMysqlInstanceArray and InstancesRdsMysqlInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceArrayInput` via:
//
//	InstancesRdsMysqlInstanceArray{ InstancesRdsMysqlInstanceArgs{...} }
type InstancesRdsMysqlInstanceArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceArrayOutput() InstancesRdsMysqlInstanceArrayOutput
	ToInstancesRdsMysqlInstanceArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceArrayOutput
}

type InstancesRdsMysqlInstanceArray []InstancesRdsMysqlInstanceInput

func (InstancesRdsMysqlInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstance)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceArray) ToInstancesRdsMysqlInstanceArrayOutput() InstancesRdsMysqlInstanceArrayOutput {
	return i.ToInstancesRdsMysqlInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceArray) ToInstancesRdsMysqlInstanceArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceArrayOutput)
}

type InstancesRdsMysqlInstanceOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstance)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceOutput) ToInstancesRdsMysqlInstanceOutput() InstancesRdsMysqlInstanceOutput {
	return o
}

func (o InstancesRdsMysqlInstanceOutput) ToInstancesRdsMysqlInstanceOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceOutput {
	return o
}

// The version of allow list.
func (o InstancesRdsMysqlInstanceOutput) AllowListVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.AllowListVersion }).(pulumi.StringOutput)
}

// The instance has used backup space. Unit: GB.
func (o InstancesRdsMysqlInstanceOutput) BackupUse() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.BackupUse }).(pulumi.IntOutput)
}

// Does it support the binlog capability? This parameter is returned only when the database proxy is enabled. Values:
// true: Yes.
// false: No.
func (o InstancesRdsMysqlInstanceOutput) BinlogDump() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) bool { return v.BinlogDump }).(pulumi.BoolOutput)
}

// Payment methods.
func (o InstancesRdsMysqlInstanceOutput) ChargeDetail() InstancesRdsMysqlInstanceChargeDetailOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) InstancesRdsMysqlInstanceChargeDetail { return v.ChargeDetail }).(InstancesRdsMysqlInstanceChargeDetailOutput)
}

// Connection pool type.
func (o InstancesRdsMysqlInstanceOutput) ConnectionPoolType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.ConnectionPoolType }).(pulumi.StringOutput)
}

// Node creation local time.
func (o InstancesRdsMysqlInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Data synchronization mode.
func (o InstancesRdsMysqlInstanceOutput) DataSyncMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.DataSyncMode }).(pulumi.StringOutput)
}

// The version of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The running status of the proxy instance. This parameter is returned only when the database proxy is enabled. Values:
// Creating: The proxy is being started.
// Running: The proxy is running.
// Shutdown: The proxy is closed.
// Deleting: The proxy is being closed.
func (o InstancesRdsMysqlInstanceOutput) DbProxyStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.DbProxyStatus }).(pulumi.StringOutput)
}

// The endpoint info of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) Endpoints() InstancesRdsMysqlInstanceEndpointArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []InstancesRdsMysqlInstanceEndpoint { return v.Endpoints }).(InstancesRdsMysqlInstanceEndpointArrayOutput)
}

// Feature status.
func (o InstancesRdsMysqlInstanceOutput) FeatureStates() InstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []InstancesRdsMysqlInstanceFeatureState { return v.FeatureStates }).(InstancesRdsMysqlInstanceFeatureStateArrayOutput)
}

// Whether to enable global read-only.
// true: Yes.
// false: No.
func (o InstancesRdsMysqlInstanceOutput) GlobalReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) bool { return v.GlobalReadOnly }).(pulumi.BoolOutput)
}

// The ID of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// Whether the table name is case sensitive, the default value is 1.
// Ranges:
// 0: Table names are stored as fixed and table names are case-sensitive.
// 1: Table names will be stored in lowercase and table names are not case sensitive.
func (o InstancesRdsMysqlInstanceOutput) LowerCaseTableNames() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.LowerCaseTableNames }).(pulumi.StringOutput)
}

// Maintenance Window.
func (o InstancesRdsMysqlInstanceOutput) MaintenanceWindows() InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []InstancesRdsMysqlInstanceMaintenanceWindow {
		return v.MaintenanceWindows
	}).(InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput)
}

// Memory size in GB.
func (o InstancesRdsMysqlInstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.Memory }).(pulumi.IntOutput)
}

// Average CPU usage of the instance master node in nearly one minute.
func (o InstancesRdsMysqlInstanceOutput) NodeCpuUsedPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) float64 { return v.NodeCpuUsedPercentage }).(pulumi.Float64Output)
}

// Average memory usage of the instance master node in nearly one minute.
func (o InstancesRdsMysqlInstanceOutput) NodeMemoryUsedPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) float64 { return v.NodeMemoryUsedPercentage }).(pulumi.Float64Output)
}

// The number of nodes.
func (o InstancesRdsMysqlInstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.NodeNumber }).(pulumi.IntOutput)
}

// Average disk usage of the instance master node in nearly one minute.
func (o InstancesRdsMysqlInstanceOutput) NodeSpaceUsedPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) float64 { return v.NodeSpaceUsedPercentage }).(pulumi.Float64Output)
}

// General instance type, different from Custom instance type.
func (o InstancesRdsMysqlInstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Instance node information.
func (o InstancesRdsMysqlInstanceOutput) Nodes() InstancesRdsMysqlInstanceNodeArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []InstancesRdsMysqlInstanceNode { return v.Nodes }).(InstancesRdsMysqlInstanceNodeArrayOutput)
}

// The project name of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// Total instance storage space. Unit: GB.
func (o InstancesRdsMysqlInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// Instance storage type.
func (o InstancesRdsMysqlInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The instance has used storage space. Unit: GB.
func (o InstancesRdsMysqlInstanceOutput) StorageUse() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.StorageUse }).(pulumi.IntOutput)
}

// The subnet ID of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstancesRdsMysqlInstanceOutput) Tags() InstancesRdsMysqlInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []InstancesRdsMysqlInstanceTag { return v.Tags }).(InstancesRdsMysqlInstanceTagArrayOutput)
}

// Time zone.
func (o InstancesRdsMysqlInstanceOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.TimeZone }).(pulumi.StringOutput)
}

// The update time of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size.
func (o InstancesRdsMysqlInstanceOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.VCpu }).(pulumi.IntOutput)
}

// The vpc ID of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

// List of availability zones where each node of the instance is located.
func (o InstancesRdsMysqlInstanceOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []string { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

type InstancesRdsMysqlInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstance)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceArrayOutput) ToInstancesRdsMysqlInstanceArrayOutput() InstancesRdsMysqlInstanceArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceArrayOutput) ToInstancesRdsMysqlInstanceArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstance {
		return vs[0].([]InstancesRdsMysqlInstance)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceOutput)
}

type InstancesRdsMysqlInstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew bool `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime string `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType string `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime string `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit string `pulumi:"periodUnit"`
	// Restore time of temporary upgrade.
	TempModifyEndTime string `pulumi:"tempModifyEndTime"`
	// Temporary upgrade start time.
	TempModifyStartTime string `pulumi:"tempModifyStartTime"`
}

// InstancesRdsMysqlInstanceChargeDetailInput is an input type that accepts InstancesRdsMysqlInstanceChargeDetailArgs and InstancesRdsMysqlInstanceChargeDetailOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceChargeDetailInput` via:
//
//	InstancesRdsMysqlInstanceChargeDetailArgs{...}
type InstancesRdsMysqlInstanceChargeDetailInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceChargeDetailOutput() InstancesRdsMysqlInstanceChargeDetailOutput
	ToInstancesRdsMysqlInstanceChargeDetailOutputWithContext(context.Context) InstancesRdsMysqlInstanceChargeDetailOutput
}

type InstancesRdsMysqlInstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime pulumi.StringInput `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
	// Restore time of temporary upgrade.
	TempModifyEndTime pulumi.StringInput `pulumi:"tempModifyEndTime"`
	// Temporary upgrade start time.
	TempModifyStartTime pulumi.StringInput `pulumi:"tempModifyStartTime"`
}

func (InstancesRdsMysqlInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceChargeDetailArgs) ToInstancesRdsMysqlInstanceChargeDetailOutput() InstancesRdsMysqlInstanceChargeDetailOutput {
	return i.ToInstancesRdsMysqlInstanceChargeDetailOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceChargeDetailArgs) ToInstancesRdsMysqlInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceChargeDetailOutput)
}

type InstancesRdsMysqlInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceChargeDetailOutput) ToInstancesRdsMysqlInstanceChargeDetailOutput() InstancesRdsMysqlInstanceChargeDetailOutput {
	return o
}

func (o InstancesRdsMysqlInstanceChargeDetailOutput) ToInstancesRdsMysqlInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
// Autorenew_Enable
// Autorenew_Disable (default).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// Billing expiry time (yearly and monthly only).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) ChargeEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeEndTime }).(pulumi.StringOutput)
}

// Billing start time (pay-as-you-go & monthly subscription).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// Pay status. Value:
// normal - normal
// overdue - overdue
// .
func (o InstancesRdsMysqlInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of the RDS instance.
func (o InstancesRdsMysqlInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// Shutdown time in arrears (pay-as-you-go & monthly subscription).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstancesRdsMysqlInstanceChargeDetailOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) int { return v.Period }).(pulumi.IntOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstancesRdsMysqlInstanceChargeDetailOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Restore time of temporary upgrade.
func (o InstancesRdsMysqlInstanceChargeDetailOutput) TempModifyEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.TempModifyEndTime }).(pulumi.StringOutput)
}

// Temporary upgrade start time.
func (o InstancesRdsMysqlInstanceChargeDetailOutput) TempModifyStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.TempModifyStartTime }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceEndpoint struct {
	// Address list.
	Addresses []InstancesRdsMysqlInstanceEndpointAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType string `pulumi:"endpointType"`
	// Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
	IdleConnectionReclaim bool `pulumi:"idleConnectionReclaim"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights []InstancesRdsMysqlInstanceEndpointNodeWeight `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode string `pulumi:"readWriteMode"`
}

// InstancesRdsMysqlInstanceEndpointInput is an input type that accepts InstancesRdsMysqlInstanceEndpointArgs and InstancesRdsMysqlInstanceEndpointOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointInput` via:
//
//	InstancesRdsMysqlInstanceEndpointArgs{...}
type InstancesRdsMysqlInstanceEndpointInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointOutput() InstancesRdsMysqlInstanceEndpointOutput
	ToInstancesRdsMysqlInstanceEndpointOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointOutput
}

type InstancesRdsMysqlInstanceEndpointArgs struct {
	// Address list.
	Addresses InstancesRdsMysqlInstanceEndpointAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
	IdleConnectionReclaim pulumi.BoolInput `pulumi:"idleConnectionReclaim"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringInput `pulumi:"readWriteMode"`
}

func (InstancesRdsMysqlInstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointArgs) ToInstancesRdsMysqlInstanceEndpointOutput() InstancesRdsMysqlInstanceEndpointOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointArgs) ToInstancesRdsMysqlInstanceEndpointOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointOutput)
}

// InstancesRdsMysqlInstanceEndpointArrayInput is an input type that accepts InstancesRdsMysqlInstanceEndpointArray and InstancesRdsMysqlInstanceEndpointArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointArrayInput` via:
//
//	InstancesRdsMysqlInstanceEndpointArray{ InstancesRdsMysqlInstanceEndpointArgs{...} }
type InstancesRdsMysqlInstanceEndpointArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointArrayOutput() InstancesRdsMysqlInstanceEndpointArrayOutput
	ToInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointArrayOutput
}

type InstancesRdsMysqlInstanceEndpointArray []InstancesRdsMysqlInstanceEndpointInput

func (InstancesRdsMysqlInstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointArray) ToInstancesRdsMysqlInstanceEndpointArrayOutput() InstancesRdsMysqlInstanceEndpointArrayOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointArray) ToInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointArrayOutput)
}

type InstancesRdsMysqlInstanceEndpointOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointOutput) ToInstancesRdsMysqlInstanceEndpointOutput() InstancesRdsMysqlInstanceEndpointOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointOutput) ToInstancesRdsMysqlInstanceEndpointOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointOutput {
	return o
}

// Address list.
func (o InstancesRdsMysqlInstanceEndpointOutput) Addresses() InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) []InstancesRdsMysqlInstanceEndpointAddress {
		return v.Addresses
	}).(InstancesRdsMysqlInstanceEndpointAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o InstancesRdsMysqlInstanceEndpointOutput) AutoAddNewNodes() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.AutoAddNewNodes }).(pulumi.StringOutput)
}

// Address description.
func (o InstancesRdsMysqlInstanceEndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.Description }).(pulumi.StringOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstancesRdsMysqlInstanceEndpointOutput) EnableReadOnly() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EnableReadOnly }).(pulumi.StringOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstancesRdsMysqlInstanceEndpointOutput) EnableReadWriteSplitting() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EnableReadWriteSplitting }).(pulumi.StringOutput)
}

// Instance connection terminal ID.
func (o InstancesRdsMysqlInstanceEndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The instance connection terminal name.
func (o InstancesRdsMysqlInstanceEndpointOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EndpointName }).(pulumi.StringOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o InstancesRdsMysqlInstanceEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EndpointType }).(pulumi.StringOutput)
}

// Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
func (o InstancesRdsMysqlInstanceEndpointOutput) IdleConnectionReclaim() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) bool { return v.IdleConnectionReclaim }).(pulumi.BoolOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o InstancesRdsMysqlInstanceEndpointOutput) NodeWeights() InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) []InstancesRdsMysqlInstanceEndpointNodeWeight {
		return v.NodeWeights
	}).(InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o InstancesRdsMysqlInstanceEndpointOutput) ReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.ReadWriteMode }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointArrayOutput) ToInstancesRdsMysqlInstanceEndpointArrayOutput() InstancesRdsMysqlInstanceEndpointArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointArrayOutput) ToInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceEndpoint {
		return vs[0].([]InstancesRdsMysqlInstanceEndpoint)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceEndpointOutput)
}

type InstancesRdsMysqlInstanceEndpointAddress struct {
	// DNS Visibility.
	DnsVisibility bool `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId string `pulumi:"eipId"`
	// The IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType string `pulumi:"networkType"`
	// The Port.
	Port string `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
}

// InstancesRdsMysqlInstanceEndpointAddressInput is an input type that accepts InstancesRdsMysqlInstanceEndpointAddressArgs and InstancesRdsMysqlInstanceEndpointAddressOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointAddressInput` via:
//
//	InstancesRdsMysqlInstanceEndpointAddressArgs{...}
type InstancesRdsMysqlInstanceEndpointAddressInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointAddressOutput() InstancesRdsMysqlInstanceEndpointAddressOutput
	ToInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointAddressOutput
}

type InstancesRdsMysqlInstanceEndpointAddressArgs struct {
	// DNS Visibility.
	DnsVisibility pulumi.BoolInput `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringInput `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (InstancesRdsMysqlInstanceEndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointAddressArgs) ToInstancesRdsMysqlInstanceEndpointAddressOutput() InstancesRdsMysqlInstanceEndpointAddressOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointAddressArgs) ToInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointAddressOutput)
}

// InstancesRdsMysqlInstanceEndpointAddressArrayInput is an input type that accepts InstancesRdsMysqlInstanceEndpointAddressArray and InstancesRdsMysqlInstanceEndpointAddressArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointAddressArrayInput` via:
//
//	InstancesRdsMysqlInstanceEndpointAddressArray{ InstancesRdsMysqlInstanceEndpointAddressArgs{...} }
type InstancesRdsMysqlInstanceEndpointAddressArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointAddressArrayOutput() InstancesRdsMysqlInstanceEndpointAddressArrayOutput
	ToInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointAddressArrayOutput
}

type InstancesRdsMysqlInstanceEndpointAddressArray []InstancesRdsMysqlInstanceEndpointAddressInput

func (InstancesRdsMysqlInstanceEndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointAddressArray) ToInstancesRdsMysqlInstanceEndpointAddressArrayOutput() InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointAddressArray) ToInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointAddressArrayOutput)
}

type InstancesRdsMysqlInstanceEndpointAddressOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointAddressOutput) ToInstancesRdsMysqlInstanceEndpointAddressOutput() InstancesRdsMysqlInstanceEndpointAddressOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointAddressOutput) ToInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointAddressOutput {
	return o
}

// DNS Visibility.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) DnsVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) bool { return v.DnsVisibility }).(pulumi.BoolOutput)
}

// Connect domain name.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The IP Address.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The Port.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.Port }).(pulumi.StringOutput)
}

// The subnet ID of the RDS instance.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceEndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointAddressArrayOutput) ToInstancesRdsMysqlInstanceEndpointAddressArrayOutput() InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointAddressArrayOutput) ToInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointAddressArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceEndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceEndpointAddress {
		return vs[0].([]InstancesRdsMysqlInstanceEndpointAddress)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceEndpointAddressOutput)
}

type InstancesRdsMysqlInstanceEndpointNodeWeight struct {
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The weight of the node.
	Weight int `pulumi:"weight"`
}

// InstancesRdsMysqlInstanceEndpointNodeWeightInput is an input type that accepts InstancesRdsMysqlInstanceEndpointNodeWeightArgs and InstancesRdsMysqlInstanceEndpointNodeWeightOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointNodeWeightInput` via:
//
//	InstancesRdsMysqlInstanceEndpointNodeWeightArgs{...}
type InstancesRdsMysqlInstanceEndpointNodeWeightInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointNodeWeightOutput() InstancesRdsMysqlInstanceEndpointNodeWeightOutput
	ToInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightOutput
}

type InstancesRdsMysqlInstanceEndpointNodeWeightArgs struct {
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (InstancesRdsMysqlInstanceEndpointNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointNodeWeightArgs) ToInstancesRdsMysqlInstanceEndpointNodeWeightOutput() InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointNodeWeightArgs) ToInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointNodeWeightOutput)
}

// InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput is an input type that accepts InstancesRdsMysqlInstanceEndpointNodeWeightArray and InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput` via:
//
//	InstancesRdsMysqlInstanceEndpointNodeWeightArray{ InstancesRdsMysqlInstanceEndpointNodeWeightArgs{...} }
type InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput() InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput
	ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput
}

type InstancesRdsMysqlInstanceEndpointNodeWeightArray []InstancesRdsMysqlInstanceEndpointNodeWeightInput

func (InstancesRdsMysqlInstanceEndpointNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointNodeWeightArray) ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput() InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointNodeWeightArray) ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput)
}

type InstancesRdsMysqlInstanceEndpointNodeWeightOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) ToInstancesRdsMysqlInstanceEndpointNodeWeightOutput() InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) ToInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return o
}

// Node ID.
func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointNodeWeight) string { return v.NodeId }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointNodeWeight) string { return v.NodeType }).(pulumi.StringOutput)
}

// The weight of the node.
func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointNodeWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput() InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceEndpointNodeWeight {
		return vs[0].([]InstancesRdsMysqlInstanceEndpointNodeWeight)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceEndpointNodeWeightOutput)
}

type InstancesRdsMysqlInstanceFeatureState struct {
	// Whether it is enabled. Values:
	// true: Enabled.
	// false: Disabled.
	Enable bool `pulumi:"enable"`
	// Feature name.
	FeatureName string `pulumi:"featureName"`
	// Whether it support this function. Value:
	// true: Supported.
	// false: Not supported.
	Support bool `pulumi:"support"`
}

// InstancesRdsMysqlInstanceFeatureStateInput is an input type that accepts InstancesRdsMysqlInstanceFeatureStateArgs and InstancesRdsMysqlInstanceFeatureStateOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceFeatureStateInput` via:
//
//	InstancesRdsMysqlInstanceFeatureStateArgs{...}
type InstancesRdsMysqlInstanceFeatureStateInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceFeatureStateOutput() InstancesRdsMysqlInstanceFeatureStateOutput
	ToInstancesRdsMysqlInstanceFeatureStateOutputWithContext(context.Context) InstancesRdsMysqlInstanceFeatureStateOutput
}

type InstancesRdsMysqlInstanceFeatureStateArgs struct {
	// Whether it is enabled. Values:
	// true: Enabled.
	// false: Disabled.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Feature name.
	FeatureName pulumi.StringInput `pulumi:"featureName"`
	// Whether it support this function. Value:
	// true: Supported.
	// false: Not supported.
	Support pulumi.BoolInput `pulumi:"support"`
}

func (InstancesRdsMysqlInstanceFeatureStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceFeatureState)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceFeatureStateArgs) ToInstancesRdsMysqlInstanceFeatureStateOutput() InstancesRdsMysqlInstanceFeatureStateOutput {
	return i.ToInstancesRdsMysqlInstanceFeatureStateOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceFeatureStateArgs) ToInstancesRdsMysqlInstanceFeatureStateOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceFeatureStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceFeatureStateOutput)
}

// InstancesRdsMysqlInstanceFeatureStateArrayInput is an input type that accepts InstancesRdsMysqlInstanceFeatureStateArray and InstancesRdsMysqlInstanceFeatureStateArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceFeatureStateArrayInput` via:
//
//	InstancesRdsMysqlInstanceFeatureStateArray{ InstancesRdsMysqlInstanceFeatureStateArgs{...} }
type InstancesRdsMysqlInstanceFeatureStateArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceFeatureStateArrayOutput() InstancesRdsMysqlInstanceFeatureStateArrayOutput
	ToInstancesRdsMysqlInstanceFeatureStateArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceFeatureStateArrayOutput
}

type InstancesRdsMysqlInstanceFeatureStateArray []InstancesRdsMysqlInstanceFeatureStateInput

func (InstancesRdsMysqlInstanceFeatureStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceFeatureState)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceFeatureStateArray) ToInstancesRdsMysqlInstanceFeatureStateArrayOutput() InstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return i.ToInstancesRdsMysqlInstanceFeatureStateArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceFeatureStateArray) ToInstancesRdsMysqlInstanceFeatureStateArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceFeatureStateArrayOutput)
}

type InstancesRdsMysqlInstanceFeatureStateOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceFeatureStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceFeatureState)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceFeatureStateOutput) ToInstancesRdsMysqlInstanceFeatureStateOutput() InstancesRdsMysqlInstanceFeatureStateOutput {
	return o
}

func (o InstancesRdsMysqlInstanceFeatureStateOutput) ToInstancesRdsMysqlInstanceFeatureStateOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceFeatureStateOutput {
	return o
}

// Whether it is enabled. Values:
// true: Enabled.
// false: Disabled.
func (o InstancesRdsMysqlInstanceFeatureStateOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceFeatureState) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Feature name.
func (o InstancesRdsMysqlInstanceFeatureStateOutput) FeatureName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceFeatureState) string { return v.FeatureName }).(pulumi.StringOutput)
}

// Whether it support this function. Value:
// true: Supported.
// false: Not supported.
func (o InstancesRdsMysqlInstanceFeatureStateOutput) Support() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceFeatureState) bool { return v.Support }).(pulumi.BoolOutput)
}

type InstancesRdsMysqlInstanceFeatureStateArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceFeatureStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceFeatureState)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceFeatureStateArrayOutput) ToInstancesRdsMysqlInstanceFeatureStateArrayOutput() InstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceFeatureStateArrayOutput) ToInstancesRdsMysqlInstanceFeatureStateArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceFeatureStateArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceFeatureStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceFeatureState {
		return vs[0].([]InstancesRdsMysqlInstanceFeatureState)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceFeatureStateOutput)
}

type InstancesRdsMysqlInstanceMaintenanceWindow struct {
	// DayKind of maintainable window. Value: Week. Month.
	DayKind string `pulumi:"dayKind"`
	// Days of maintainable window of the month.
	DayOfMonths []int `pulumi:"dayOfMonths"`
	// Days of maintainable window of the week.
	DayOfWeeks []string `pulumi:"dayOfWeeks"`
	// The maintainable time of the RDS instance.
	MaintenanceTime string `pulumi:"maintenanceTime"`
}

// InstancesRdsMysqlInstanceMaintenanceWindowInput is an input type that accepts InstancesRdsMysqlInstanceMaintenanceWindowArgs and InstancesRdsMysqlInstanceMaintenanceWindowOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceMaintenanceWindowInput` via:
//
//	InstancesRdsMysqlInstanceMaintenanceWindowArgs{...}
type InstancesRdsMysqlInstanceMaintenanceWindowInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceMaintenanceWindowOutput() InstancesRdsMysqlInstanceMaintenanceWindowOutput
	ToInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(context.Context) InstancesRdsMysqlInstanceMaintenanceWindowOutput
}

type InstancesRdsMysqlInstanceMaintenanceWindowArgs struct {
	// DayKind of maintainable window. Value: Week. Month.
	DayKind pulumi.StringInput `pulumi:"dayKind"`
	// Days of maintainable window of the month.
	DayOfMonths pulumi.IntArrayInput `pulumi:"dayOfMonths"`
	// Days of maintainable window of the week.
	DayOfWeeks pulumi.StringArrayInput `pulumi:"dayOfWeeks"`
	// The maintainable time of the RDS instance.
	MaintenanceTime pulumi.StringInput `pulumi:"maintenanceTime"`
}

func (InstancesRdsMysqlInstanceMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceMaintenanceWindowArgs) ToInstancesRdsMysqlInstanceMaintenanceWindowOutput() InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return i.ToInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceMaintenanceWindowArgs) ToInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceMaintenanceWindowOutput)
}

// InstancesRdsMysqlInstanceMaintenanceWindowArrayInput is an input type that accepts InstancesRdsMysqlInstanceMaintenanceWindowArray and InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceMaintenanceWindowArrayInput` via:
//
//	InstancesRdsMysqlInstanceMaintenanceWindowArray{ InstancesRdsMysqlInstanceMaintenanceWindowArgs{...} }
type InstancesRdsMysqlInstanceMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput() InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput
	ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput
}

type InstancesRdsMysqlInstanceMaintenanceWindowArray []InstancesRdsMysqlInstanceMaintenanceWindowInput

func (InstancesRdsMysqlInstanceMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceMaintenanceWindowArray) ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput() InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return i.ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceMaintenanceWindowArray) ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput)
}

type InstancesRdsMysqlInstanceMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) ToInstancesRdsMysqlInstanceMaintenanceWindowOutput() InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return o
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) ToInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return o
}

// DayKind of maintainable window. Value: Week. Month.
func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) DayKind() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceMaintenanceWindow) string { return v.DayKind }).(pulumi.StringOutput)
}

// Days of maintainable window of the month.
func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) DayOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceMaintenanceWindow) []int { return v.DayOfMonths }).(pulumi.IntArrayOutput)
}

// Days of maintainable window of the week.
func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) DayOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceMaintenanceWindow) []string { return v.DayOfWeeks }).(pulumi.StringArrayOutput)
}

// The maintainable time of the RDS instance.
func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) MaintenanceTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceMaintenanceWindow) string { return v.MaintenanceTime }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput() InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceMaintenanceWindow {
		return vs[0].([]InstancesRdsMysqlInstanceMaintenanceWindow)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceMaintenanceWindowOutput)
}

type InstancesRdsMysqlInstanceNode struct {
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus string `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size.
	VCpu int `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesRdsMysqlInstanceNodeInput is an input type that accepts InstancesRdsMysqlInstanceNodeArgs and InstancesRdsMysqlInstanceNodeOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceNodeInput` via:
//
//	InstancesRdsMysqlInstanceNodeArgs{...}
type InstancesRdsMysqlInstanceNodeInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceNodeOutput() InstancesRdsMysqlInstanceNodeOutput
	ToInstancesRdsMysqlInstanceNodeOutputWithContext(context.Context) InstancesRdsMysqlInstanceNodeOutput
}

type InstancesRdsMysqlInstanceNodeArgs struct {
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesRdsMysqlInstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceNodeArgs) ToInstancesRdsMysqlInstanceNodeOutput() InstancesRdsMysqlInstanceNodeOutput {
	return i.ToInstancesRdsMysqlInstanceNodeOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceNodeArgs) ToInstancesRdsMysqlInstanceNodeOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceNodeOutput)
}

// InstancesRdsMysqlInstanceNodeArrayInput is an input type that accepts InstancesRdsMysqlInstanceNodeArray and InstancesRdsMysqlInstanceNodeArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceNodeArrayInput` via:
//
//	InstancesRdsMysqlInstanceNodeArray{ InstancesRdsMysqlInstanceNodeArgs{...} }
type InstancesRdsMysqlInstanceNodeArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceNodeArrayOutput() InstancesRdsMysqlInstanceNodeArrayOutput
	ToInstancesRdsMysqlInstanceNodeArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceNodeArrayOutput
}

type InstancesRdsMysqlInstanceNodeArray []InstancesRdsMysqlInstanceNodeInput

func (InstancesRdsMysqlInstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceNodeArray) ToInstancesRdsMysqlInstanceNodeArrayOutput() InstancesRdsMysqlInstanceNodeArrayOutput {
	return i.ToInstancesRdsMysqlInstanceNodeArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceNodeArray) ToInstancesRdsMysqlInstanceNodeArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceNodeArrayOutput)
}

type InstancesRdsMysqlInstanceNodeOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceNodeOutput) ToInstancesRdsMysqlInstanceNodeOutput() InstancesRdsMysqlInstanceNodeOutput {
	return o
}

func (o InstancesRdsMysqlInstanceNodeOutput) ToInstancesRdsMysqlInstanceNodeOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceNodeOutput {
	return o
}

// Node creation local time.
func (o InstancesRdsMysqlInstanceNodeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o InstancesRdsMysqlInstanceNodeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Memory size in GB.
func (o InstancesRdsMysqlInstanceNodeOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) int { return v.Memory }).(pulumi.IntOutput)
}

// Node ID.
func (o InstancesRdsMysqlInstanceNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.NodeId }).(pulumi.StringOutput)
}

// General instance type, different from Custom instance type.
func (o InstancesRdsMysqlInstanceNodeOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Node state, value: aligned with instance state.
func (o InstancesRdsMysqlInstanceNodeOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstancesRdsMysqlInstanceNodeOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.NodeType }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o InstancesRdsMysqlInstanceNodeOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.RegionId }).(pulumi.StringOutput)
}

// The update time of the RDS instance.
func (o InstancesRdsMysqlInstanceNodeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size.
func (o InstancesRdsMysqlInstanceNodeOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) int { return v.VCpu }).(pulumi.IntOutput)
}

// The available zone of the RDS instance.
func (o InstancesRdsMysqlInstanceNodeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceNodeArrayOutput) ToInstancesRdsMysqlInstanceNodeArrayOutput() InstancesRdsMysqlInstanceNodeArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceNodeArrayOutput) ToInstancesRdsMysqlInstanceNodeArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceNodeArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceNodeArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceNode {
		return vs[0].([]InstancesRdsMysqlInstanceNode)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceNodeOutput)
}

type InstancesRdsMysqlInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesRdsMysqlInstanceTagInput is an input type that accepts InstancesRdsMysqlInstanceTagArgs and InstancesRdsMysqlInstanceTagOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceTagInput` via:
//
//	InstancesRdsMysqlInstanceTagArgs{...}
type InstancesRdsMysqlInstanceTagInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceTagOutput() InstancesRdsMysqlInstanceTagOutput
	ToInstancesRdsMysqlInstanceTagOutputWithContext(context.Context) InstancesRdsMysqlInstanceTagOutput
}

type InstancesRdsMysqlInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesRdsMysqlInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceTagArgs) ToInstancesRdsMysqlInstanceTagOutput() InstancesRdsMysqlInstanceTagOutput {
	return i.ToInstancesRdsMysqlInstanceTagOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceTagArgs) ToInstancesRdsMysqlInstanceTagOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceTagOutput)
}

// InstancesRdsMysqlInstanceTagArrayInput is an input type that accepts InstancesRdsMysqlInstanceTagArray and InstancesRdsMysqlInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceTagArrayInput` via:
//
//	InstancesRdsMysqlInstanceTagArray{ InstancesRdsMysqlInstanceTagArgs{...} }
type InstancesRdsMysqlInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceTagArrayOutput() InstancesRdsMysqlInstanceTagArrayOutput
	ToInstancesRdsMysqlInstanceTagArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceTagArrayOutput
}

type InstancesRdsMysqlInstanceTagArray []InstancesRdsMysqlInstanceTagInput

func (InstancesRdsMysqlInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceTagArray) ToInstancesRdsMysqlInstanceTagArrayOutput() InstancesRdsMysqlInstanceTagArrayOutput {
	return i.ToInstancesRdsMysqlInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceTagArray) ToInstancesRdsMysqlInstanceTagArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceTagArrayOutput)
}

type InstancesRdsMysqlInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceTagOutput) ToInstancesRdsMysqlInstanceTagOutput() InstancesRdsMysqlInstanceTagOutput {
	return o
}

func (o InstancesRdsMysqlInstanceTagOutput) ToInstancesRdsMysqlInstanceTagOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesRdsMysqlInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesRdsMysqlInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceTagArrayOutput) ToInstancesRdsMysqlInstanceTagArrayOutput() InstancesRdsMysqlInstanceTagArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceTagArrayOutput) ToInstancesRdsMysqlInstanceTagArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceTagArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceTag {
		return vs[0].([]InstancesRdsMysqlInstanceTag)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceTagOutput)
}

type InstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type ParameterTemplateTemplateParam struct {
	// Instance parameter name.
	// Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	Name string `pulumi:"name"`
	// Parameter running value.
	// Description: When making request parameters in CreateParameterTemplate and ModifyParameterTemplate, only Name and RunningValue need to be passed in.
	RunningValue string `pulumi:"runningValue"`
}

// ParameterTemplateTemplateParamInput is an input type that accepts ParameterTemplateTemplateParamArgs and ParameterTemplateTemplateParamOutput values.
// You can construct a concrete instance of `ParameterTemplateTemplateParamInput` via:
//
//	ParameterTemplateTemplateParamArgs{...}
type ParameterTemplateTemplateParamInput interface {
	pulumi.Input

	ToParameterTemplateTemplateParamOutput() ParameterTemplateTemplateParamOutput
	ToParameterTemplateTemplateParamOutputWithContext(context.Context) ParameterTemplateTemplateParamOutput
}

type ParameterTemplateTemplateParamArgs struct {
	// Instance parameter name.
	// Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	Name pulumi.StringInput `pulumi:"name"`
	// Parameter running value.
	// Description: When making request parameters in CreateParameterTemplate and ModifyParameterTemplate, only Name and RunningValue need to be passed in.
	RunningValue pulumi.StringInput `pulumi:"runningValue"`
}

func (ParameterTemplateTemplateParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterTemplateTemplateParam)(nil)).Elem()
}

func (i ParameterTemplateTemplateParamArgs) ToParameterTemplateTemplateParamOutput() ParameterTemplateTemplateParamOutput {
	return i.ToParameterTemplateTemplateParamOutputWithContext(context.Background())
}

func (i ParameterTemplateTemplateParamArgs) ToParameterTemplateTemplateParamOutputWithContext(ctx context.Context) ParameterTemplateTemplateParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterTemplateTemplateParamOutput)
}

// ParameterTemplateTemplateParamArrayInput is an input type that accepts ParameterTemplateTemplateParamArray and ParameterTemplateTemplateParamArrayOutput values.
// You can construct a concrete instance of `ParameterTemplateTemplateParamArrayInput` via:
//
//	ParameterTemplateTemplateParamArray{ ParameterTemplateTemplateParamArgs{...} }
type ParameterTemplateTemplateParamArrayInput interface {
	pulumi.Input

	ToParameterTemplateTemplateParamArrayOutput() ParameterTemplateTemplateParamArrayOutput
	ToParameterTemplateTemplateParamArrayOutputWithContext(context.Context) ParameterTemplateTemplateParamArrayOutput
}

type ParameterTemplateTemplateParamArray []ParameterTemplateTemplateParamInput

func (ParameterTemplateTemplateParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterTemplateTemplateParam)(nil)).Elem()
}

func (i ParameterTemplateTemplateParamArray) ToParameterTemplateTemplateParamArrayOutput() ParameterTemplateTemplateParamArrayOutput {
	return i.ToParameterTemplateTemplateParamArrayOutputWithContext(context.Background())
}

func (i ParameterTemplateTemplateParamArray) ToParameterTemplateTemplateParamArrayOutputWithContext(ctx context.Context) ParameterTemplateTemplateParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterTemplateTemplateParamArrayOutput)
}

type ParameterTemplateTemplateParamOutput struct{ *pulumi.OutputState }

func (ParameterTemplateTemplateParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterTemplateTemplateParam)(nil)).Elem()
}

func (o ParameterTemplateTemplateParamOutput) ToParameterTemplateTemplateParamOutput() ParameterTemplateTemplateParamOutput {
	return o
}

func (o ParameterTemplateTemplateParamOutput) ToParameterTemplateTemplateParamOutputWithContext(ctx context.Context) ParameterTemplateTemplateParamOutput {
	return o
}

// Instance parameter name.
// Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
func (o ParameterTemplateTemplateParamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplateTemplateParam) string { return v.Name }).(pulumi.StringOutput)
}

// Parameter running value.
// Description: When making request parameters in CreateParameterTemplate and ModifyParameterTemplate, only Name and RunningValue need to be passed in.
func (o ParameterTemplateTemplateParamOutput) RunningValue() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplateTemplateParam) string { return v.RunningValue }).(pulumi.StringOutput)
}

type ParameterTemplateTemplateParamArrayOutput struct{ *pulumi.OutputState }

func (ParameterTemplateTemplateParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterTemplateTemplateParam)(nil)).Elem()
}

func (o ParameterTemplateTemplateParamArrayOutput) ToParameterTemplateTemplateParamArrayOutput() ParameterTemplateTemplateParamArrayOutput {
	return o
}

func (o ParameterTemplateTemplateParamArrayOutput) ToParameterTemplateTemplateParamArrayOutputWithContext(ctx context.Context) ParameterTemplateTemplateParamArrayOutput {
	return o
}

func (o ParameterTemplateTemplateParamArrayOutput) Index(i pulumi.IntInput) ParameterTemplateTemplateParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParameterTemplateTemplateParam {
		return vs[0].([]ParameterTemplateTemplateParam)[vs[1].(int)]
	}).(ParameterTemplateTemplateParamOutput)
}

type ParameterTemplatesTemplate struct {
	// The account ID.
	AccountId string `pulumi:"accountId"`
	// Creation time.
	CreateTime string `pulumi:"createTime"`
	// Does the template contain parameters that require restart.
	NeedRestart bool `pulumi:"needRestart"`
	// The number of parameters contained in the template.
	ParameterNum int `pulumi:"parameterNum"`
	// The project to which the template belongs.
	ProjectName string `pulumi:"projectName"`
	// Template category, with a value of DBEngine (database engine parameters).
	TemplateCategory string `pulumi:"templateCategory"`
	// Parameter template description.
	TemplateDesc string `pulumi:"templateDesc"`
	// Parameter template ID.
	TemplateId string `pulumi:"templateId"`
	// Parameter template name.
	TemplateName string `pulumi:"templateName"`
	// Parameters contained in the template.
	TemplateParams []ParameterTemplatesTemplateTemplateParam `pulumi:"templateParams"`
	// Parameter template source, value range: System. User.
	TemplateSource string `pulumi:"templateSource"`
	// Database type of parameter template. The default value is Mysql.
	TemplateType string `pulumi:"templateType"`
	// Database version of parameter template. Value range:
	// MySQL_5_7: Default value. MySQL 5.7 version.
	// MySQL_8_0: MySQL 8.0 version.
	TemplateTypeVersion string `pulumi:"templateTypeVersion"`
	// Modification time of the template.
	UpdateTime string `pulumi:"updateTime"`
}

// ParameterTemplatesTemplateInput is an input type that accepts ParameterTemplatesTemplateArgs and ParameterTemplatesTemplateOutput values.
// You can construct a concrete instance of `ParameterTemplatesTemplateInput` via:
//
//	ParameterTemplatesTemplateArgs{...}
type ParameterTemplatesTemplateInput interface {
	pulumi.Input

	ToParameterTemplatesTemplateOutput() ParameterTemplatesTemplateOutput
	ToParameterTemplatesTemplateOutputWithContext(context.Context) ParameterTemplatesTemplateOutput
}

type ParameterTemplatesTemplateArgs struct {
	// The account ID.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Creation time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Does the template contain parameters that require restart.
	NeedRestart pulumi.BoolInput `pulumi:"needRestart"`
	// The number of parameters contained in the template.
	ParameterNum pulumi.IntInput `pulumi:"parameterNum"`
	// The project to which the template belongs.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Template category, with a value of DBEngine (database engine parameters).
	TemplateCategory pulumi.StringInput `pulumi:"templateCategory"`
	// Parameter template description.
	TemplateDesc pulumi.StringInput `pulumi:"templateDesc"`
	// Parameter template ID.
	TemplateId pulumi.StringInput `pulumi:"templateId"`
	// Parameter template name.
	TemplateName pulumi.StringInput `pulumi:"templateName"`
	// Parameters contained in the template.
	TemplateParams ParameterTemplatesTemplateTemplateParamArrayInput `pulumi:"templateParams"`
	// Parameter template source, value range: System. User.
	TemplateSource pulumi.StringInput `pulumi:"templateSource"`
	// Database type of parameter template. The default value is Mysql.
	TemplateType pulumi.StringInput `pulumi:"templateType"`
	// Database version of parameter template. Value range:
	// MySQL_5_7: Default value. MySQL 5.7 version.
	// MySQL_8_0: MySQL 8.0 version.
	TemplateTypeVersion pulumi.StringInput `pulumi:"templateTypeVersion"`
	// Modification time of the template.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (ParameterTemplatesTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterTemplatesTemplate)(nil)).Elem()
}

func (i ParameterTemplatesTemplateArgs) ToParameterTemplatesTemplateOutput() ParameterTemplatesTemplateOutput {
	return i.ToParameterTemplatesTemplateOutputWithContext(context.Background())
}

func (i ParameterTemplatesTemplateArgs) ToParameterTemplatesTemplateOutputWithContext(ctx context.Context) ParameterTemplatesTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterTemplatesTemplateOutput)
}

// ParameterTemplatesTemplateArrayInput is an input type that accepts ParameterTemplatesTemplateArray and ParameterTemplatesTemplateArrayOutput values.
// You can construct a concrete instance of `ParameterTemplatesTemplateArrayInput` via:
//
//	ParameterTemplatesTemplateArray{ ParameterTemplatesTemplateArgs{...} }
type ParameterTemplatesTemplateArrayInput interface {
	pulumi.Input

	ToParameterTemplatesTemplateArrayOutput() ParameterTemplatesTemplateArrayOutput
	ToParameterTemplatesTemplateArrayOutputWithContext(context.Context) ParameterTemplatesTemplateArrayOutput
}

type ParameterTemplatesTemplateArray []ParameterTemplatesTemplateInput

func (ParameterTemplatesTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterTemplatesTemplate)(nil)).Elem()
}

func (i ParameterTemplatesTemplateArray) ToParameterTemplatesTemplateArrayOutput() ParameterTemplatesTemplateArrayOutput {
	return i.ToParameterTemplatesTemplateArrayOutputWithContext(context.Background())
}

func (i ParameterTemplatesTemplateArray) ToParameterTemplatesTemplateArrayOutputWithContext(ctx context.Context) ParameterTemplatesTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterTemplatesTemplateArrayOutput)
}

type ParameterTemplatesTemplateOutput struct{ *pulumi.OutputState }

func (ParameterTemplatesTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterTemplatesTemplate)(nil)).Elem()
}

func (o ParameterTemplatesTemplateOutput) ToParameterTemplatesTemplateOutput() ParameterTemplatesTemplateOutput {
	return o
}

func (o ParameterTemplatesTemplateOutput) ToParameterTemplatesTemplateOutputWithContext(ctx context.Context) ParameterTemplatesTemplateOutput {
	return o
}

// The account ID.
func (o ParameterTemplatesTemplateOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.AccountId }).(pulumi.StringOutput)
}

// Creation time.
func (o ParameterTemplatesTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Does the template contain parameters that require restart.
func (o ParameterTemplatesTemplateOutput) NeedRestart() pulumi.BoolOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) bool { return v.NeedRestart }).(pulumi.BoolOutput)
}

// The number of parameters contained in the template.
func (o ParameterTemplatesTemplateOutput) ParameterNum() pulumi.IntOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) int { return v.ParameterNum }).(pulumi.IntOutput)
}

// The project to which the template belongs.
func (o ParameterTemplatesTemplateOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Template category, with a value of DBEngine (database engine parameters).
func (o ParameterTemplatesTemplateOutput) TemplateCategory() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.TemplateCategory }).(pulumi.StringOutput)
}

// Parameter template description.
func (o ParameterTemplatesTemplateOutput) TemplateDesc() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.TemplateDesc }).(pulumi.StringOutput)
}

// Parameter template ID.
func (o ParameterTemplatesTemplateOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.TemplateId }).(pulumi.StringOutput)
}

// Parameter template name.
func (o ParameterTemplatesTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.TemplateName }).(pulumi.StringOutput)
}

// Parameters contained in the template.
func (o ParameterTemplatesTemplateOutput) TemplateParams() ParameterTemplatesTemplateTemplateParamArrayOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) []ParameterTemplatesTemplateTemplateParam { return v.TemplateParams }).(ParameterTemplatesTemplateTemplateParamArrayOutput)
}

// Parameter template source, value range: System. User.
func (o ParameterTemplatesTemplateOutput) TemplateSource() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.TemplateSource }).(pulumi.StringOutput)
}

// Database type of parameter template. The default value is Mysql.
func (o ParameterTemplatesTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.TemplateType }).(pulumi.StringOutput)
}

// Database version of parameter template. Value range:
// MySQL_5_7: Default value. MySQL 5.7 version.
// MySQL_8_0: MySQL 8.0 version.
func (o ParameterTemplatesTemplateOutput) TemplateTypeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.TemplateTypeVersion }).(pulumi.StringOutput)
}

// Modification time of the template.
func (o ParameterTemplatesTemplateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplate) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type ParameterTemplatesTemplateArrayOutput struct{ *pulumi.OutputState }

func (ParameterTemplatesTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterTemplatesTemplate)(nil)).Elem()
}

func (o ParameterTemplatesTemplateArrayOutput) ToParameterTemplatesTemplateArrayOutput() ParameterTemplatesTemplateArrayOutput {
	return o
}

func (o ParameterTemplatesTemplateArrayOutput) ToParameterTemplatesTemplateArrayOutputWithContext(ctx context.Context) ParameterTemplatesTemplateArrayOutput {
	return o
}

func (o ParameterTemplatesTemplateArrayOutput) Index(i pulumi.IntInput) ParameterTemplatesTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParameterTemplatesTemplate {
		return vs[0].([]ParameterTemplatesTemplate)[vs[1].(int)]
	}).(ParameterTemplatesTemplateOutput)
}

type ParameterTemplatesTemplateTemplateParam struct {
	// Parameter default value.
	DefaultValue string `pulumi:"defaultValue"`
	// Parameter description.
	Description string `pulumi:"description"`
	// Instance parameter name.
	// Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	Name string `pulumi:"name"`
	// Is it necessary to restart the instance for the changes to take effect.
	Restart bool `pulumi:"restart"`
	// Parameter running value.
	// Description: When making requests with CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	RunningValue string `pulumi:"runningValue"`
	// Value range of parameters.
	ValueRange string `pulumi:"valueRange"`
}

// ParameterTemplatesTemplateTemplateParamInput is an input type that accepts ParameterTemplatesTemplateTemplateParamArgs and ParameterTemplatesTemplateTemplateParamOutput values.
// You can construct a concrete instance of `ParameterTemplatesTemplateTemplateParamInput` via:
//
//	ParameterTemplatesTemplateTemplateParamArgs{...}
type ParameterTemplatesTemplateTemplateParamInput interface {
	pulumi.Input

	ToParameterTemplatesTemplateTemplateParamOutput() ParameterTemplatesTemplateTemplateParamOutput
	ToParameterTemplatesTemplateTemplateParamOutputWithContext(context.Context) ParameterTemplatesTemplateTemplateParamOutput
}

type ParameterTemplatesTemplateTemplateParamArgs struct {
	// Parameter default value.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// Parameter description.
	Description pulumi.StringInput `pulumi:"description"`
	// Instance parameter name.
	// Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	Name pulumi.StringInput `pulumi:"name"`
	// Is it necessary to restart the instance for the changes to take effect.
	Restart pulumi.BoolInput `pulumi:"restart"`
	// Parameter running value.
	// Description: When making requests with CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	RunningValue pulumi.StringInput `pulumi:"runningValue"`
	// Value range of parameters.
	ValueRange pulumi.StringInput `pulumi:"valueRange"`
}

func (ParameterTemplatesTemplateTemplateParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterTemplatesTemplateTemplateParam)(nil)).Elem()
}

func (i ParameterTemplatesTemplateTemplateParamArgs) ToParameterTemplatesTemplateTemplateParamOutput() ParameterTemplatesTemplateTemplateParamOutput {
	return i.ToParameterTemplatesTemplateTemplateParamOutputWithContext(context.Background())
}

func (i ParameterTemplatesTemplateTemplateParamArgs) ToParameterTemplatesTemplateTemplateParamOutputWithContext(ctx context.Context) ParameterTemplatesTemplateTemplateParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterTemplatesTemplateTemplateParamOutput)
}

// ParameterTemplatesTemplateTemplateParamArrayInput is an input type that accepts ParameterTemplatesTemplateTemplateParamArray and ParameterTemplatesTemplateTemplateParamArrayOutput values.
// You can construct a concrete instance of `ParameterTemplatesTemplateTemplateParamArrayInput` via:
//
//	ParameterTemplatesTemplateTemplateParamArray{ ParameterTemplatesTemplateTemplateParamArgs{...} }
type ParameterTemplatesTemplateTemplateParamArrayInput interface {
	pulumi.Input

	ToParameterTemplatesTemplateTemplateParamArrayOutput() ParameterTemplatesTemplateTemplateParamArrayOutput
	ToParameterTemplatesTemplateTemplateParamArrayOutputWithContext(context.Context) ParameterTemplatesTemplateTemplateParamArrayOutput
}

type ParameterTemplatesTemplateTemplateParamArray []ParameterTemplatesTemplateTemplateParamInput

func (ParameterTemplatesTemplateTemplateParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterTemplatesTemplateTemplateParam)(nil)).Elem()
}

func (i ParameterTemplatesTemplateTemplateParamArray) ToParameterTemplatesTemplateTemplateParamArrayOutput() ParameterTemplatesTemplateTemplateParamArrayOutput {
	return i.ToParameterTemplatesTemplateTemplateParamArrayOutputWithContext(context.Background())
}

func (i ParameterTemplatesTemplateTemplateParamArray) ToParameterTemplatesTemplateTemplateParamArrayOutputWithContext(ctx context.Context) ParameterTemplatesTemplateTemplateParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ParameterTemplatesTemplateTemplateParamArrayOutput)
}

type ParameterTemplatesTemplateTemplateParamOutput struct{ *pulumi.OutputState }

func (ParameterTemplatesTemplateTemplateParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ParameterTemplatesTemplateTemplateParam)(nil)).Elem()
}

func (o ParameterTemplatesTemplateTemplateParamOutput) ToParameterTemplatesTemplateTemplateParamOutput() ParameterTemplatesTemplateTemplateParamOutput {
	return o
}

func (o ParameterTemplatesTemplateTemplateParamOutput) ToParameterTemplatesTemplateTemplateParamOutputWithContext(ctx context.Context) ParameterTemplatesTemplateTemplateParamOutput {
	return o
}

// Parameter default value.
func (o ParameterTemplatesTemplateTemplateParamOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplateTemplateParam) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Parameter description.
func (o ParameterTemplatesTemplateTemplateParamOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplateTemplateParam) string { return v.Description }).(pulumi.StringOutput)
}

// Instance parameter name.
// Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
func (o ParameterTemplatesTemplateTemplateParamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplateTemplateParam) string { return v.Name }).(pulumi.StringOutput)
}

// Is it necessary to restart the instance for the changes to take effect.
func (o ParameterTemplatesTemplateTemplateParamOutput) Restart() pulumi.BoolOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplateTemplateParam) bool { return v.Restart }).(pulumi.BoolOutput)
}

// Parameter running value.
// Description: When making requests with CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
func (o ParameterTemplatesTemplateTemplateParamOutput) RunningValue() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplateTemplateParam) string { return v.RunningValue }).(pulumi.StringOutput)
}

// Value range of parameters.
func (o ParameterTemplatesTemplateTemplateParamOutput) ValueRange() pulumi.StringOutput {
	return o.ApplyT(func(v ParameterTemplatesTemplateTemplateParam) string { return v.ValueRange }).(pulumi.StringOutput)
}

type ParameterTemplatesTemplateTemplateParamArrayOutput struct{ *pulumi.OutputState }

func (ParameterTemplatesTemplateTemplateParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ParameterTemplatesTemplateTemplateParam)(nil)).Elem()
}

func (o ParameterTemplatesTemplateTemplateParamArrayOutput) ToParameterTemplatesTemplateTemplateParamArrayOutput() ParameterTemplatesTemplateTemplateParamArrayOutput {
	return o
}

func (o ParameterTemplatesTemplateTemplateParamArrayOutput) ToParameterTemplatesTemplateTemplateParamArrayOutputWithContext(ctx context.Context) ParameterTemplatesTemplateTemplateParamArrayOutput {
	return o
}

func (o ParameterTemplatesTemplateTemplateParamArrayOutput) Index(i pulumi.IntInput) ParameterTemplatesTemplateTemplateParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ParameterTemplatesTemplateTemplateParam {
		return vs[0].([]ParameterTemplatesTemplateTemplateParam)[vs[1].(int)]
	}).(ParameterTemplatesTemplateTemplateParamOutput)
}

type RegionsRegion struct {
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The name of region.
	RegionName string `pulumi:"regionName"`
}

// RegionsRegionInput is an input type that accepts RegionsRegionArgs and RegionsRegionOutput values.
// You can construct a concrete instance of `RegionsRegionInput` via:
//
//	RegionsRegionArgs{...}
type RegionsRegionInput interface {
	pulumi.Input

	ToRegionsRegionOutput() RegionsRegionOutput
	ToRegionsRegionOutputWithContext(context.Context) RegionsRegionOutput
}

type RegionsRegionArgs struct {
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The name of region.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (RegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArgs) ToRegionsRegionOutput() RegionsRegionOutput {
	return i.ToRegionsRegionOutputWithContext(context.Background())
}

func (i RegionsRegionArgs) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionOutput)
}

// RegionsRegionArrayInput is an input type that accepts RegionsRegionArray and RegionsRegionArrayOutput values.
// You can construct a concrete instance of `RegionsRegionArrayInput` via:
//
//	RegionsRegionArray{ RegionsRegionArgs{...} }
type RegionsRegionArrayInput interface {
	pulumi.Input

	ToRegionsRegionArrayOutput() RegionsRegionArrayOutput
	ToRegionsRegionArrayOutputWithContext(context.Context) RegionsRegionArrayOutput
}

type RegionsRegionArray []RegionsRegionInput

func (RegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return i.ToRegionsRegionArrayOutputWithContext(context.Background())
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionArrayOutput)
}

type RegionsRegionOutput struct{ *pulumi.OutputState }

func (RegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionOutput) ToRegionsRegionOutput() RegionsRegionOutput {
	return o
}

func (o RegionsRegionOutput) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return o
}

// The id of the region.
func (o RegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

// The name of region.
func (o RegionsRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionName }).(pulumi.StringOutput)
}

type RegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (RegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) Index(i pulumi.IntInput) RegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionsRegion {
		return vs[0].([]RegionsRegion)[vs[1].(int)]
	}).(RegionsRegionOutput)
}

type ZonesZone struct {
	// The description of the zone.
	Description string `pulumi:"description"`
	// The id of the zone.
	Id string `pulumi:"id"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName string `pulumi:"zoneName"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//	ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The description of the zone.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//	ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The description of the zone.
func (o ZonesZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

// The name of the zone.
func (o ZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

type GetAccountsAccount struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName string `pulumi:"accountName"`
	// The privilege detail list of RDS mysql instance account.
	AccountPrivileges []GetAccountsAccountAccountPrivilege `pulumi:"accountPrivileges"`
	// The status of the database account.
	AccountStatus string `pulumi:"accountStatus"`
	// The type of the database account.
	AccountType string `pulumi:"accountType"`
}

// GetAccountsAccountInput is an input type that accepts GetAccountsAccountArgs and GetAccountsAccountOutput values.
// You can construct a concrete instance of `GetAccountsAccountInput` via:
//
//	GetAccountsAccountArgs{...}
type GetAccountsAccountInput interface {
	pulumi.Input

	ToGetAccountsAccountOutput() GetAccountsAccountOutput
	ToGetAccountsAccountOutputWithContext(context.Context) GetAccountsAccountOutput
}

type GetAccountsAccountArgs struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The privilege detail list of RDS mysql instance account.
	AccountPrivileges GetAccountsAccountAccountPrivilegeArrayInput `pulumi:"accountPrivileges"`
	// The status of the database account.
	AccountStatus pulumi.StringInput `pulumi:"accountStatus"`
	// The type of the database account.
	AccountType pulumi.StringInput `pulumi:"accountType"`
}

func (GetAccountsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsAccount)(nil)).Elem()
}

func (i GetAccountsAccountArgs) ToGetAccountsAccountOutput() GetAccountsAccountOutput {
	return i.ToGetAccountsAccountOutputWithContext(context.Background())
}

func (i GetAccountsAccountArgs) ToGetAccountsAccountOutputWithContext(ctx context.Context) GetAccountsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountsAccountOutput)
}

// GetAccountsAccountArrayInput is an input type that accepts GetAccountsAccountArray and GetAccountsAccountArrayOutput values.
// You can construct a concrete instance of `GetAccountsAccountArrayInput` via:
//
//	GetAccountsAccountArray{ GetAccountsAccountArgs{...} }
type GetAccountsAccountArrayInput interface {
	pulumi.Input

	ToGetAccountsAccountArrayOutput() GetAccountsAccountArrayOutput
	ToGetAccountsAccountArrayOutputWithContext(context.Context) GetAccountsAccountArrayOutput
}

type GetAccountsAccountArray []GetAccountsAccountInput

func (GetAccountsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountsAccount)(nil)).Elem()
}

func (i GetAccountsAccountArray) ToGetAccountsAccountArrayOutput() GetAccountsAccountArrayOutput {
	return i.ToGetAccountsAccountArrayOutputWithContext(context.Background())
}

func (i GetAccountsAccountArray) ToGetAccountsAccountArrayOutputWithContext(ctx context.Context) GetAccountsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountsAccountArrayOutput)
}

type GetAccountsAccountOutput struct{ *pulumi.OutputState }

func (GetAccountsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsAccount)(nil)).Elem()
}

func (o GetAccountsAccountOutput) ToGetAccountsAccountOutput() GetAccountsAccountOutput {
	return o
}

func (o GetAccountsAccountOutput) ToGetAccountsAccountOutputWithContext(ctx context.Context) GetAccountsAccountOutput {
	return o
}

// The name of the database account. This field supports fuzzy query.
func (o GetAccountsAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.AccountName }).(pulumi.StringOutput)
}

// The privilege detail list of RDS mysql instance account.
func (o GetAccountsAccountOutput) AccountPrivileges() GetAccountsAccountAccountPrivilegeArrayOutput {
	return o.ApplyT(func(v GetAccountsAccount) []GetAccountsAccountAccountPrivilege { return v.AccountPrivileges }).(GetAccountsAccountAccountPrivilegeArrayOutput)
}

// The status of the database account.
func (o GetAccountsAccountOutput) AccountStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.AccountStatus }).(pulumi.StringOutput)
}

// The type of the database account.
func (o GetAccountsAccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccount) string { return v.AccountType }).(pulumi.StringOutput)
}

type GetAccountsAccountArrayOutput struct{ *pulumi.OutputState }

func (GetAccountsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountsAccount)(nil)).Elem()
}

func (o GetAccountsAccountArrayOutput) ToGetAccountsAccountArrayOutput() GetAccountsAccountArrayOutput {
	return o
}

func (o GetAccountsAccountArrayOutput) ToGetAccountsAccountArrayOutputWithContext(ctx context.Context) GetAccountsAccountArrayOutput {
	return o
}

func (o GetAccountsAccountArrayOutput) Index(i pulumi.IntInput) GetAccountsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountsAccount {
		return vs[0].([]GetAccountsAccount)[vs[1].(int)]
	}).(GetAccountsAccountOutput)
}

type GetAccountsAccountAccountPrivilege struct {
	// The privilege type of the account.
	AccountPrivilege string `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail string `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName string `pulumi:"dbName"`
}

// GetAccountsAccountAccountPrivilegeInput is an input type that accepts GetAccountsAccountAccountPrivilegeArgs and GetAccountsAccountAccountPrivilegeOutput values.
// You can construct a concrete instance of `GetAccountsAccountAccountPrivilegeInput` via:
//
//	GetAccountsAccountAccountPrivilegeArgs{...}
type GetAccountsAccountAccountPrivilegeInput interface {
	pulumi.Input

	ToGetAccountsAccountAccountPrivilegeOutput() GetAccountsAccountAccountPrivilegeOutput
	ToGetAccountsAccountAccountPrivilegeOutputWithContext(context.Context) GetAccountsAccountAccountPrivilegeOutput
}

type GetAccountsAccountAccountPrivilegeArgs struct {
	// The privilege type of the account.
	AccountPrivilege pulumi.StringInput `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail pulumi.StringInput `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName pulumi.StringInput `pulumi:"dbName"`
}

func (GetAccountsAccountAccountPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsAccountAccountPrivilege)(nil)).Elem()
}

func (i GetAccountsAccountAccountPrivilegeArgs) ToGetAccountsAccountAccountPrivilegeOutput() GetAccountsAccountAccountPrivilegeOutput {
	return i.ToGetAccountsAccountAccountPrivilegeOutputWithContext(context.Background())
}

func (i GetAccountsAccountAccountPrivilegeArgs) ToGetAccountsAccountAccountPrivilegeOutputWithContext(ctx context.Context) GetAccountsAccountAccountPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountsAccountAccountPrivilegeOutput)
}

// GetAccountsAccountAccountPrivilegeArrayInput is an input type that accepts GetAccountsAccountAccountPrivilegeArray and GetAccountsAccountAccountPrivilegeArrayOutput values.
// You can construct a concrete instance of `GetAccountsAccountAccountPrivilegeArrayInput` via:
//
//	GetAccountsAccountAccountPrivilegeArray{ GetAccountsAccountAccountPrivilegeArgs{...} }
type GetAccountsAccountAccountPrivilegeArrayInput interface {
	pulumi.Input

	ToGetAccountsAccountAccountPrivilegeArrayOutput() GetAccountsAccountAccountPrivilegeArrayOutput
	ToGetAccountsAccountAccountPrivilegeArrayOutputWithContext(context.Context) GetAccountsAccountAccountPrivilegeArrayOutput
}

type GetAccountsAccountAccountPrivilegeArray []GetAccountsAccountAccountPrivilegeInput

func (GetAccountsAccountAccountPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountsAccountAccountPrivilege)(nil)).Elem()
}

func (i GetAccountsAccountAccountPrivilegeArray) ToGetAccountsAccountAccountPrivilegeArrayOutput() GetAccountsAccountAccountPrivilegeArrayOutput {
	return i.ToGetAccountsAccountAccountPrivilegeArrayOutputWithContext(context.Background())
}

func (i GetAccountsAccountAccountPrivilegeArray) ToGetAccountsAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) GetAccountsAccountAccountPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccountsAccountAccountPrivilegeArrayOutput)
}

type GetAccountsAccountAccountPrivilegeOutput struct{ *pulumi.OutputState }

func (GetAccountsAccountAccountPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsAccountAccountPrivilege)(nil)).Elem()
}

func (o GetAccountsAccountAccountPrivilegeOutput) ToGetAccountsAccountAccountPrivilegeOutput() GetAccountsAccountAccountPrivilegeOutput {
	return o
}

func (o GetAccountsAccountAccountPrivilegeOutput) ToGetAccountsAccountAccountPrivilegeOutputWithContext(ctx context.Context) GetAccountsAccountAccountPrivilegeOutput {
	return o
}

// The privilege type of the account.
func (o GetAccountsAccountAccountPrivilegeOutput) AccountPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccountAccountPrivilege) string { return v.AccountPrivilege }).(pulumi.StringOutput)
}

// The privilege detail of the account.
func (o GetAccountsAccountAccountPrivilegeOutput) AccountPrivilegeDetail() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccountAccountPrivilege) string { return v.AccountPrivilegeDetail }).(pulumi.StringOutput)
}

// The name of database.
func (o GetAccountsAccountAccountPrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsAccountAccountPrivilege) string { return v.DbName }).(pulumi.StringOutput)
}

type GetAccountsAccountAccountPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (GetAccountsAccountAccountPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccountsAccountAccountPrivilege)(nil)).Elem()
}

func (o GetAccountsAccountAccountPrivilegeArrayOutput) ToGetAccountsAccountAccountPrivilegeArrayOutput() GetAccountsAccountAccountPrivilegeArrayOutput {
	return o
}

func (o GetAccountsAccountAccountPrivilegeArrayOutput) ToGetAccountsAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) GetAccountsAccountAccountPrivilegeArrayOutput {
	return o
}

func (o GetAccountsAccountAccountPrivilegeArrayOutput) Index(i pulumi.IntInput) GetAccountsAccountAccountPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccountsAccountAccountPrivilege {
		return vs[0].([]GetAccountsAccountAccountPrivilege)[vs[1].(int)]
	}).(GetAccountsAccountAccountPrivilegeOutput)
}

type GetAllowlistsAllowList struct {
	// White list category. Values:
	// Ordinary: Ordinary white list. Default: Default white list. Description: When this parameter is used as a request parameter, the default value is Ordinary.
	AllowListCategory string `pulumi:"allowListCategory"`
	// The description of the allow list.
	AllowListDesc string `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId string `pulumi:"allowListId"`
	// The total number of IP addresses (or address ranges) in the whitelist.
	AllowListIpNum int `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName string `pulumi:"allowListName"`
	// The type of the allow list.
	AllowListType string `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format.
	AllowLists []string `pulumi:"allowLists"`
	// The total number of instances bound under the whitelist.
	AssociatedInstanceNum int `pulumi:"associatedInstanceNum"`
	// The list of instances.
	AssociatedInstances []GetAllowlistsAllowListAssociatedInstance `pulumi:"associatedInstances"`
	// Whitelist information for the associated security group.
	SecurityGroupBindInfos []GetAllowlistsAllowListSecurityGroupBindInfo `pulumi:"securityGroupBindInfos"`
	// IP addresses outside the security group that need to be added to the whitelist. IP addresses or IP address segments in CIDR format can be entered. Note: This field cannot be used simultaneously with AllowList.
	UserAllowLists []string `pulumi:"userAllowLists"`
}

// GetAllowlistsAllowListInput is an input type that accepts GetAllowlistsAllowListArgs and GetAllowlistsAllowListOutput values.
// You can construct a concrete instance of `GetAllowlistsAllowListInput` via:
//
//	GetAllowlistsAllowListArgs{...}
type GetAllowlistsAllowListInput interface {
	pulumi.Input

	ToGetAllowlistsAllowListOutput() GetAllowlistsAllowListOutput
	ToGetAllowlistsAllowListOutputWithContext(context.Context) GetAllowlistsAllowListOutput
}

type GetAllowlistsAllowListArgs struct {
	// White list category. Values:
	// Ordinary: Ordinary white list. Default: Default white list. Description: When this parameter is used as a request parameter, the default value is Ordinary.
	AllowListCategory pulumi.StringInput `pulumi:"allowListCategory"`
	// The description of the allow list.
	AllowListDesc pulumi.StringInput `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId pulumi.StringInput `pulumi:"allowListId"`
	// The total number of IP addresses (or address ranges) in the whitelist.
	AllowListIpNum pulumi.IntInput `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName pulumi.StringInput `pulumi:"allowListName"`
	// The type of the allow list.
	AllowListType pulumi.StringInput `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format.
	AllowLists pulumi.StringArrayInput `pulumi:"allowLists"`
	// The total number of instances bound under the whitelist.
	AssociatedInstanceNum pulumi.IntInput `pulumi:"associatedInstanceNum"`
	// The list of instances.
	AssociatedInstances GetAllowlistsAllowListAssociatedInstanceArrayInput `pulumi:"associatedInstances"`
	// Whitelist information for the associated security group.
	SecurityGroupBindInfos GetAllowlistsAllowListSecurityGroupBindInfoArrayInput `pulumi:"securityGroupBindInfos"`
	// IP addresses outside the security group that need to be added to the whitelist. IP addresses or IP address segments in CIDR format can be entered. Note: This field cannot be used simultaneously with AllowList.
	UserAllowLists pulumi.StringArrayInput `pulumi:"userAllowLists"`
}

func (GetAllowlistsAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowlistsAllowList)(nil)).Elem()
}

func (i GetAllowlistsAllowListArgs) ToGetAllowlistsAllowListOutput() GetAllowlistsAllowListOutput {
	return i.ToGetAllowlistsAllowListOutputWithContext(context.Background())
}

func (i GetAllowlistsAllowListArgs) ToGetAllowlistsAllowListOutputWithContext(ctx context.Context) GetAllowlistsAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowlistsAllowListOutput)
}

// GetAllowlistsAllowListArrayInput is an input type that accepts GetAllowlistsAllowListArray and GetAllowlistsAllowListArrayOutput values.
// You can construct a concrete instance of `GetAllowlistsAllowListArrayInput` via:
//
//	GetAllowlistsAllowListArray{ GetAllowlistsAllowListArgs{...} }
type GetAllowlistsAllowListArrayInput interface {
	pulumi.Input

	ToGetAllowlistsAllowListArrayOutput() GetAllowlistsAllowListArrayOutput
	ToGetAllowlistsAllowListArrayOutputWithContext(context.Context) GetAllowlistsAllowListArrayOutput
}

type GetAllowlistsAllowListArray []GetAllowlistsAllowListInput

func (GetAllowlistsAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowlistsAllowList)(nil)).Elem()
}

func (i GetAllowlistsAllowListArray) ToGetAllowlistsAllowListArrayOutput() GetAllowlistsAllowListArrayOutput {
	return i.ToGetAllowlistsAllowListArrayOutputWithContext(context.Background())
}

func (i GetAllowlistsAllowListArray) ToGetAllowlistsAllowListArrayOutputWithContext(ctx context.Context) GetAllowlistsAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowlistsAllowListArrayOutput)
}

type GetAllowlistsAllowListOutput struct{ *pulumi.OutputState }

func (GetAllowlistsAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowlistsAllowList)(nil)).Elem()
}

func (o GetAllowlistsAllowListOutput) ToGetAllowlistsAllowListOutput() GetAllowlistsAllowListOutput {
	return o
}

func (o GetAllowlistsAllowListOutput) ToGetAllowlistsAllowListOutputWithContext(ctx context.Context) GetAllowlistsAllowListOutput {
	return o
}

// White list category. Values:
// Ordinary: Ordinary white list. Default: Default white list. Description: When this parameter is used as a request parameter, the default value is Ordinary.
func (o GetAllowlistsAllowListOutput) AllowListCategory() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) string { return v.AllowListCategory }).(pulumi.StringOutput)
}

// The description of the allow list.
func (o GetAllowlistsAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) string { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The id of the allow list.
func (o GetAllowlistsAllowListOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) string { return v.AllowListId }).(pulumi.StringOutput)
}

// The total number of IP addresses (or address ranges) in the whitelist.
func (o GetAllowlistsAllowListOutput) AllowListIpNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) int { return v.AllowListIpNum }).(pulumi.IntOutput)
}

// The name of the allow list.
func (o GetAllowlistsAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) string { return v.AllowListName }).(pulumi.StringOutput)
}

// The type of the allow list.
func (o GetAllowlistsAllowListOutput) AllowListType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) string { return v.AllowListType }).(pulumi.StringOutput)
}

// The IP address or a range of IP addresses in CIDR format.
func (o GetAllowlistsAllowListOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The total number of instances bound under the whitelist.
func (o GetAllowlistsAllowListOutput) AssociatedInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) int { return v.AssociatedInstanceNum }).(pulumi.IntOutput)
}

// The list of instances.
func (o GetAllowlistsAllowListOutput) AssociatedInstances() GetAllowlistsAllowListAssociatedInstanceArrayOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) []GetAllowlistsAllowListAssociatedInstance {
		return v.AssociatedInstances
	}).(GetAllowlistsAllowListAssociatedInstanceArrayOutput)
}

// Whitelist information for the associated security group.
func (o GetAllowlistsAllowListOutput) SecurityGroupBindInfos() GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) []GetAllowlistsAllowListSecurityGroupBindInfo {
		return v.SecurityGroupBindInfos
	}).(GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput)
}

// IP addresses outside the security group that need to be added to the whitelist. IP addresses or IP address segments in CIDR format can be entered. Note: This field cannot be used simultaneously with AllowList.
func (o GetAllowlistsAllowListOutput) UserAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllowlistsAllowList) []string { return v.UserAllowLists }).(pulumi.StringArrayOutput)
}

type GetAllowlistsAllowListArrayOutput struct{ *pulumi.OutputState }

func (GetAllowlistsAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowlistsAllowList)(nil)).Elem()
}

func (o GetAllowlistsAllowListArrayOutput) ToGetAllowlistsAllowListArrayOutput() GetAllowlistsAllowListArrayOutput {
	return o
}

func (o GetAllowlistsAllowListArrayOutput) ToGetAllowlistsAllowListArrayOutputWithContext(ctx context.Context) GetAllowlistsAllowListArrayOutput {
	return o
}

func (o GetAllowlistsAllowListArrayOutput) Index(i pulumi.IntInput) GetAllowlistsAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAllowlistsAllowList {
		return vs[0].([]GetAllowlistsAllowList)[vs[1].(int)]
	}).(GetAllowlistsAllowListOutput)
}

type GetAllowlistsAllowListAssociatedInstance struct {
	// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc string `pulumi:"vpc"`
}

// GetAllowlistsAllowListAssociatedInstanceInput is an input type that accepts GetAllowlistsAllowListAssociatedInstanceArgs and GetAllowlistsAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `GetAllowlistsAllowListAssociatedInstanceInput` via:
//
//	GetAllowlistsAllowListAssociatedInstanceArgs{...}
type GetAllowlistsAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToGetAllowlistsAllowListAssociatedInstanceOutput() GetAllowlistsAllowListAssociatedInstanceOutput
	ToGetAllowlistsAllowListAssociatedInstanceOutputWithContext(context.Context) GetAllowlistsAllowListAssociatedInstanceOutput
}

type GetAllowlistsAllowListAssociatedInstanceArgs struct {
	// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (GetAllowlistsAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (i GetAllowlistsAllowListAssociatedInstanceArgs) ToGetAllowlistsAllowListAssociatedInstanceOutput() GetAllowlistsAllowListAssociatedInstanceOutput {
	return i.ToGetAllowlistsAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i GetAllowlistsAllowListAssociatedInstanceArgs) ToGetAllowlistsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) GetAllowlistsAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowlistsAllowListAssociatedInstanceOutput)
}

// GetAllowlistsAllowListAssociatedInstanceArrayInput is an input type that accepts GetAllowlistsAllowListAssociatedInstanceArray and GetAllowlistsAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `GetAllowlistsAllowListAssociatedInstanceArrayInput` via:
//
//	GetAllowlistsAllowListAssociatedInstanceArray{ GetAllowlistsAllowListAssociatedInstanceArgs{...} }
type GetAllowlistsAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToGetAllowlistsAllowListAssociatedInstanceArrayOutput() GetAllowlistsAllowListAssociatedInstanceArrayOutput
	ToGetAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(context.Context) GetAllowlistsAllowListAssociatedInstanceArrayOutput
}

type GetAllowlistsAllowListAssociatedInstanceArray []GetAllowlistsAllowListAssociatedInstanceInput

func (GetAllowlistsAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (i GetAllowlistsAllowListAssociatedInstanceArray) ToGetAllowlistsAllowListAssociatedInstanceArrayOutput() GetAllowlistsAllowListAssociatedInstanceArrayOutput {
	return i.ToGetAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i GetAllowlistsAllowListAssociatedInstanceArray) ToGetAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) GetAllowlistsAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowlistsAllowListAssociatedInstanceArrayOutput)
}

type GetAllowlistsAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (GetAllowlistsAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (o GetAllowlistsAllowListAssociatedInstanceOutput) ToGetAllowlistsAllowListAssociatedInstanceOutput() GetAllowlistsAllowListAssociatedInstanceOutput {
	return o
}

func (o GetAllowlistsAllowListAssociatedInstanceOutput) ToGetAllowlistsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) GetAllowlistsAllowListAssociatedInstanceOutput {
	return o
}

// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
func (o GetAllowlistsAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowListAssociatedInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the instance.
func (o GetAllowlistsAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowListAssociatedInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The id of the vpc.
func (o GetAllowlistsAllowListAssociatedInstanceOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowListAssociatedInstance) string { return v.Vpc }).(pulumi.StringOutput)
}

type GetAllowlistsAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetAllowlistsAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (o GetAllowlistsAllowListAssociatedInstanceArrayOutput) ToGetAllowlistsAllowListAssociatedInstanceArrayOutput() GetAllowlistsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o GetAllowlistsAllowListAssociatedInstanceArrayOutput) ToGetAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) GetAllowlistsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o GetAllowlistsAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) GetAllowlistsAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAllowlistsAllowListAssociatedInstance {
		return vs[0].([]GetAllowlistsAllowListAssociatedInstance)[vs[1].(int)]
	}).(GetAllowlistsAllowListAssociatedInstanceOutput)
}

type GetAllowlistsAllowListSecurityGroupBindInfo struct {
	// The schema for the associated security group.
	// IngressDirectionIp: Incoming Direction IP.
	// AssociateEcsIp: Associate ECSIP.
	// explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
	BindMode string `pulumi:"bindMode"`
	// The ip list of the security group.
	IpLists []string `pulumi:"ipLists"`
	// The security group id of the allow list.
	SecurityGroupId string `pulumi:"securityGroupId"`
	// The name of the security group.
	SecurityGroupName string `pulumi:"securityGroupName"`
}

// GetAllowlistsAllowListSecurityGroupBindInfoInput is an input type that accepts GetAllowlistsAllowListSecurityGroupBindInfoArgs and GetAllowlistsAllowListSecurityGroupBindInfoOutput values.
// You can construct a concrete instance of `GetAllowlistsAllowListSecurityGroupBindInfoInput` via:
//
//	GetAllowlistsAllowListSecurityGroupBindInfoArgs{...}
type GetAllowlistsAllowListSecurityGroupBindInfoInput interface {
	pulumi.Input

	ToGetAllowlistsAllowListSecurityGroupBindInfoOutput() GetAllowlistsAllowListSecurityGroupBindInfoOutput
	ToGetAllowlistsAllowListSecurityGroupBindInfoOutputWithContext(context.Context) GetAllowlistsAllowListSecurityGroupBindInfoOutput
}

type GetAllowlistsAllowListSecurityGroupBindInfoArgs struct {
	// The schema for the associated security group.
	// IngressDirectionIp: Incoming Direction IP.
	// AssociateEcsIp: Associate ECSIP.
	// explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
	BindMode pulumi.StringInput `pulumi:"bindMode"`
	// The ip list of the security group.
	IpLists pulumi.StringArrayInput `pulumi:"ipLists"`
	// The security group id of the allow list.
	SecurityGroupId pulumi.StringInput `pulumi:"securityGroupId"`
	// The name of the security group.
	SecurityGroupName pulumi.StringInput `pulumi:"securityGroupName"`
}

func (GetAllowlistsAllowListSecurityGroupBindInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowlistsAllowListSecurityGroupBindInfo)(nil)).Elem()
}

func (i GetAllowlistsAllowListSecurityGroupBindInfoArgs) ToGetAllowlistsAllowListSecurityGroupBindInfoOutput() GetAllowlistsAllowListSecurityGroupBindInfoOutput {
	return i.ToGetAllowlistsAllowListSecurityGroupBindInfoOutputWithContext(context.Background())
}

func (i GetAllowlistsAllowListSecurityGroupBindInfoArgs) ToGetAllowlistsAllowListSecurityGroupBindInfoOutputWithContext(ctx context.Context) GetAllowlistsAllowListSecurityGroupBindInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowlistsAllowListSecurityGroupBindInfoOutput)
}

// GetAllowlistsAllowListSecurityGroupBindInfoArrayInput is an input type that accepts GetAllowlistsAllowListSecurityGroupBindInfoArray and GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput values.
// You can construct a concrete instance of `GetAllowlistsAllowListSecurityGroupBindInfoArrayInput` via:
//
//	GetAllowlistsAllowListSecurityGroupBindInfoArray{ GetAllowlistsAllowListSecurityGroupBindInfoArgs{...} }
type GetAllowlistsAllowListSecurityGroupBindInfoArrayInput interface {
	pulumi.Input

	ToGetAllowlistsAllowListSecurityGroupBindInfoArrayOutput() GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput
	ToGetAllowlistsAllowListSecurityGroupBindInfoArrayOutputWithContext(context.Context) GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput
}

type GetAllowlistsAllowListSecurityGroupBindInfoArray []GetAllowlistsAllowListSecurityGroupBindInfoInput

func (GetAllowlistsAllowListSecurityGroupBindInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowlistsAllowListSecurityGroupBindInfo)(nil)).Elem()
}

func (i GetAllowlistsAllowListSecurityGroupBindInfoArray) ToGetAllowlistsAllowListSecurityGroupBindInfoArrayOutput() GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return i.ToGetAllowlistsAllowListSecurityGroupBindInfoArrayOutputWithContext(context.Background())
}

func (i GetAllowlistsAllowListSecurityGroupBindInfoArray) ToGetAllowlistsAllowListSecurityGroupBindInfoArrayOutputWithContext(ctx context.Context) GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput)
}

type GetAllowlistsAllowListSecurityGroupBindInfoOutput struct{ *pulumi.OutputState }

func (GetAllowlistsAllowListSecurityGroupBindInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowlistsAllowListSecurityGroupBindInfo)(nil)).Elem()
}

func (o GetAllowlistsAllowListSecurityGroupBindInfoOutput) ToGetAllowlistsAllowListSecurityGroupBindInfoOutput() GetAllowlistsAllowListSecurityGroupBindInfoOutput {
	return o
}

func (o GetAllowlistsAllowListSecurityGroupBindInfoOutput) ToGetAllowlistsAllowListSecurityGroupBindInfoOutputWithContext(ctx context.Context) GetAllowlistsAllowListSecurityGroupBindInfoOutput {
	return o
}

// The schema for the associated security group.
// IngressDirectionIp: Incoming Direction IP.
// AssociateEcsIp: Associate ECSIP.
// explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
func (o GetAllowlistsAllowListSecurityGroupBindInfoOutput) BindMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowListSecurityGroupBindInfo) string { return v.BindMode }).(pulumi.StringOutput)
}

// The ip list of the security group.
func (o GetAllowlistsAllowListSecurityGroupBindInfoOutput) IpLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllowlistsAllowListSecurityGroupBindInfo) []string { return v.IpLists }).(pulumi.StringArrayOutput)
}

// The security group id of the allow list.
func (o GetAllowlistsAllowListSecurityGroupBindInfoOutput) SecurityGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowListSecurityGroupBindInfo) string { return v.SecurityGroupId }).(pulumi.StringOutput)
}

// The name of the security group.
func (o GetAllowlistsAllowListSecurityGroupBindInfoOutput) SecurityGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowlistsAllowListSecurityGroupBindInfo) string { return v.SecurityGroupName }).(pulumi.StringOutput)
}

type GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput struct{ *pulumi.OutputState }

func (GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowlistsAllowListSecurityGroupBindInfo)(nil)).Elem()
}

func (o GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput) ToGetAllowlistsAllowListSecurityGroupBindInfoArrayOutput() GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return o
}

func (o GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput) ToGetAllowlistsAllowListSecurityGroupBindInfoArrayOutputWithContext(ctx context.Context) GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput {
	return o
}

func (o GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput) Index(i pulumi.IntInput) GetAllowlistsAllowListSecurityGroupBindInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAllowlistsAllowListSecurityGroupBindInfo {
		return vs[0].([]GetAllowlistsAllowListSecurityGroupBindInfo)[vs[1].(int)]
	}).(GetAllowlistsAllowListSecurityGroupBindInfoOutput)
}

type GetBackupsBackup struct {
	// The end time of the backup.
	BackupEndTime string `pulumi:"backupEndTime"`
	// Backup file name.
	BackupFileName string `pulumi:"backupFileName"`
	// Backup file size, in bytes.
	BackupFileSize int `pulumi:"backupFileSize"`
	// The id of the backup.
	BackupId string `pulumi:"backupId"`
	// Backup type, value: Physical: Physical backup. Default value. Logical: Logical backup. Description: There is no default value. When this field is not passed, backups of all states under the query conditions limited by other fields are returned.
	BackupMethod string `pulumi:"backupMethod"`
	// The region where the backup is located.
	BackupRegion string `pulumi:"backupRegion"`
	// The start time of the backup.
	BackupStartTime string `pulumi:"backupStartTime"`
	// Backup status, values: Success: Success. Failed: Failed. Running: In progress. Description: There is no default value. When this field is not passed, all backups in all states under the query conditions limited by other fields are returned.
	BackupStatus string `pulumi:"backupStatus"`
	// Backup method, value: Full: Full backup under physical backup type or library table backup under logical backup type. Increment: Incremental backup under physical backup type. DumpAll: Full database backup under logical backup type. Description: There is no default value. When this field is not passed, all backups of all methods under the query conditions limited by other fields are returned.
	BackupType string `pulumi:"backupType"`
	// The time point of a consistent snapshot is in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
	ConsistentTime string `pulumi:"consistentTime"`
	// Creator of backup. Values: System: System. User: User. Description: There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
	CreateType string `pulumi:"createType"`
	// The database table information contained in the backup set can include up to 10,000 tables.
	// Explanation:
	// When the database is empty, this field is not returned.
	DbTableInfos []GetBackupsBackupDbTableInfo `pulumi:"dbTableInfos"`
	// Download status. Values:
	// NotDownload: Not downloaded.
	// Success: Downloaded.
	// Failed: Download failed.
	// Running: Downloading.
	DownloadStatus string `pulumi:"downloadStatus"`
	// Error message.
	ErrorMessage string `pulumi:"errorMessage"`
	// Expired time of backup, in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
	ExpiredTime string `pulumi:"expiredTime"`
	// The id of the backup.
	Id string `pulumi:"id"`
	// Is the data backup encrypted? Value:
	// true: Encrypted.
	// false: Not encrypted.
	IsEncrypted bool `pulumi:"isEncrypted"`
	// Whether the backup has expired. Value:
	// true: Expired.
	// false: Not expired.
	IsExpired bool `pulumi:"isExpired"`
}

// GetBackupsBackupInput is an input type that accepts GetBackupsBackupArgs and GetBackupsBackupOutput values.
// You can construct a concrete instance of `GetBackupsBackupInput` via:
//
//	GetBackupsBackupArgs{...}
type GetBackupsBackupInput interface {
	pulumi.Input

	ToGetBackupsBackupOutput() GetBackupsBackupOutput
	ToGetBackupsBackupOutputWithContext(context.Context) GetBackupsBackupOutput
}

type GetBackupsBackupArgs struct {
	// The end time of the backup.
	BackupEndTime pulumi.StringInput `pulumi:"backupEndTime"`
	// Backup file name.
	BackupFileName pulumi.StringInput `pulumi:"backupFileName"`
	// Backup file size, in bytes.
	BackupFileSize pulumi.IntInput `pulumi:"backupFileSize"`
	// The id of the backup.
	BackupId pulumi.StringInput `pulumi:"backupId"`
	// Backup type, value: Physical: Physical backup. Default value. Logical: Logical backup. Description: There is no default value. When this field is not passed, backups of all states under the query conditions limited by other fields are returned.
	BackupMethod pulumi.StringInput `pulumi:"backupMethod"`
	// The region where the backup is located.
	BackupRegion pulumi.StringInput `pulumi:"backupRegion"`
	// The start time of the backup.
	BackupStartTime pulumi.StringInput `pulumi:"backupStartTime"`
	// Backup status, values: Success: Success. Failed: Failed. Running: In progress. Description: There is no default value. When this field is not passed, all backups in all states under the query conditions limited by other fields are returned.
	BackupStatus pulumi.StringInput `pulumi:"backupStatus"`
	// Backup method, value: Full: Full backup under physical backup type or library table backup under logical backup type. Increment: Incremental backup under physical backup type. DumpAll: Full database backup under logical backup type. Description: There is no default value. When this field is not passed, all backups of all methods under the query conditions limited by other fields are returned.
	BackupType pulumi.StringInput `pulumi:"backupType"`
	// The time point of a consistent snapshot is in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
	ConsistentTime pulumi.StringInput `pulumi:"consistentTime"`
	// Creator of backup. Values: System: System. User: User. Description: There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
	CreateType pulumi.StringInput `pulumi:"createType"`
	// The database table information contained in the backup set can include up to 10,000 tables.
	// Explanation:
	// When the database is empty, this field is not returned.
	DbTableInfos GetBackupsBackupDbTableInfoArrayInput `pulumi:"dbTableInfos"`
	// Download status. Values:
	// NotDownload: Not downloaded.
	// Success: Downloaded.
	// Failed: Download failed.
	// Running: Downloading.
	DownloadStatus pulumi.StringInput `pulumi:"downloadStatus"`
	// Error message.
	ErrorMessage pulumi.StringInput `pulumi:"errorMessage"`
	// Expired time of backup, in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
	ExpiredTime pulumi.StringInput `pulumi:"expiredTime"`
	// The id of the backup.
	Id pulumi.StringInput `pulumi:"id"`
	// Is the data backup encrypted? Value:
	// true: Encrypted.
	// false: Not encrypted.
	IsEncrypted pulumi.BoolInput `pulumi:"isEncrypted"`
	// Whether the backup has expired. Value:
	// true: Expired.
	// false: Not expired.
	IsExpired pulumi.BoolInput `pulumi:"isExpired"`
}

func (GetBackupsBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackup)(nil)).Elem()
}

func (i GetBackupsBackupArgs) ToGetBackupsBackupOutput() GetBackupsBackupOutput {
	return i.ToGetBackupsBackupOutputWithContext(context.Background())
}

func (i GetBackupsBackupArgs) ToGetBackupsBackupOutputWithContext(ctx context.Context) GetBackupsBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupOutput)
}

// GetBackupsBackupArrayInput is an input type that accepts GetBackupsBackupArray and GetBackupsBackupArrayOutput values.
// You can construct a concrete instance of `GetBackupsBackupArrayInput` via:
//
//	GetBackupsBackupArray{ GetBackupsBackupArgs{...} }
type GetBackupsBackupArrayInput interface {
	pulumi.Input

	ToGetBackupsBackupArrayOutput() GetBackupsBackupArrayOutput
	ToGetBackupsBackupArrayOutputWithContext(context.Context) GetBackupsBackupArrayOutput
}

type GetBackupsBackupArray []GetBackupsBackupInput

func (GetBackupsBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupsBackup)(nil)).Elem()
}

func (i GetBackupsBackupArray) ToGetBackupsBackupArrayOutput() GetBackupsBackupArrayOutput {
	return i.ToGetBackupsBackupArrayOutputWithContext(context.Background())
}

func (i GetBackupsBackupArray) ToGetBackupsBackupArrayOutputWithContext(ctx context.Context) GetBackupsBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupArrayOutput)
}

type GetBackupsBackupOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackup)(nil)).Elem()
}

func (o GetBackupsBackupOutput) ToGetBackupsBackupOutput() GetBackupsBackupOutput {
	return o
}

func (o GetBackupsBackupOutput) ToGetBackupsBackupOutputWithContext(ctx context.Context) GetBackupsBackupOutput {
	return o
}

// The end time of the backup.
func (o GetBackupsBackupOutput) BackupEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.BackupEndTime }).(pulumi.StringOutput)
}

// Backup file name.
func (o GetBackupsBackupOutput) BackupFileName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.BackupFileName }).(pulumi.StringOutput)
}

// Backup file size, in bytes.
func (o GetBackupsBackupOutput) BackupFileSize() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackupsBackup) int { return v.BackupFileSize }).(pulumi.IntOutput)
}

// The id of the backup.
func (o GetBackupsBackupOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.BackupId }).(pulumi.StringOutput)
}

// Backup type, value: Physical: Physical backup. Default value. Logical: Logical backup. Description: There is no default value. When this field is not passed, backups of all states under the query conditions limited by other fields are returned.
func (o GetBackupsBackupOutput) BackupMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.BackupMethod }).(pulumi.StringOutput)
}

// The region where the backup is located.
func (o GetBackupsBackupOutput) BackupRegion() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.BackupRegion }).(pulumi.StringOutput)
}

// The start time of the backup.
func (o GetBackupsBackupOutput) BackupStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.BackupStartTime }).(pulumi.StringOutput)
}

// Backup status, values: Success: Success. Failed: Failed. Running: In progress. Description: There is no default value. When this field is not passed, all backups in all states under the query conditions limited by other fields are returned.
func (o GetBackupsBackupOutput) BackupStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.BackupStatus }).(pulumi.StringOutput)
}

// Backup method, value: Full: Full backup under physical backup type or library table backup under logical backup type. Increment: Incremental backup under physical backup type. DumpAll: Full database backup under logical backup type. Description: There is no default value. When this field is not passed, all backups of all methods under the query conditions limited by other fields are returned.
func (o GetBackupsBackupOutput) BackupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.BackupType }).(pulumi.StringOutput)
}

// The time point of a consistent snapshot is in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
func (o GetBackupsBackupOutput) ConsistentTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.ConsistentTime }).(pulumi.StringOutput)
}

// Creator of backup. Values: System: System. User: User. Description: There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
func (o GetBackupsBackupOutput) CreateType() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.CreateType }).(pulumi.StringOutput)
}

// The database table information contained in the backup set can include up to 10,000 tables.
// Explanation:
// When the database is empty, this field is not returned.
func (o GetBackupsBackupOutput) DbTableInfos() GetBackupsBackupDbTableInfoArrayOutput {
	return o.ApplyT(func(v GetBackupsBackup) []GetBackupsBackupDbTableInfo { return v.DbTableInfos }).(GetBackupsBackupDbTableInfoArrayOutput)
}

// Download status. Values:
// NotDownload: Not downloaded.
// Success: Downloaded.
// Failed: Download failed.
// Running: Downloading.
func (o GetBackupsBackupOutput) DownloadStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.DownloadStatus }).(pulumi.StringOutput)
}

// Error message.
func (o GetBackupsBackupOutput) ErrorMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.ErrorMessage }).(pulumi.StringOutput)
}

// Expired time of backup, in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
func (o GetBackupsBackupOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// The id of the backup.
func (o GetBackupsBackupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackup) string { return v.Id }).(pulumi.StringOutput)
}

// Is the data backup encrypted? Value:
// true: Encrypted.
// false: Not encrypted.
func (o GetBackupsBackupOutput) IsEncrypted() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackupsBackup) bool { return v.IsEncrypted }).(pulumi.BoolOutput)
}

// Whether the backup has expired. Value:
// true: Expired.
// false: Not expired.
func (o GetBackupsBackupOutput) IsExpired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBackupsBackup) bool { return v.IsExpired }).(pulumi.BoolOutput)
}

type GetBackupsBackupArrayOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupsBackup)(nil)).Elem()
}

func (o GetBackupsBackupArrayOutput) ToGetBackupsBackupArrayOutput() GetBackupsBackupArrayOutput {
	return o
}

func (o GetBackupsBackupArrayOutput) ToGetBackupsBackupArrayOutputWithContext(ctx context.Context) GetBackupsBackupArrayOutput {
	return o
}

func (o GetBackupsBackupArrayOutput) Index(i pulumi.IntInput) GetBackupsBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackupsBackup {
		return vs[0].([]GetBackupsBackup)[vs[1].(int)]
	}).(GetBackupsBackupOutput)
}

type GetBackupsBackupDbTableInfo struct {
	// Database name.
	Database string `pulumi:"database"`
	// Table names.
	Tables []string `pulumi:"tables"`
}

// GetBackupsBackupDbTableInfoInput is an input type that accepts GetBackupsBackupDbTableInfoArgs and GetBackupsBackupDbTableInfoOutput values.
// You can construct a concrete instance of `GetBackupsBackupDbTableInfoInput` via:
//
//	GetBackupsBackupDbTableInfoArgs{...}
type GetBackupsBackupDbTableInfoInput interface {
	pulumi.Input

	ToGetBackupsBackupDbTableInfoOutput() GetBackupsBackupDbTableInfoOutput
	ToGetBackupsBackupDbTableInfoOutputWithContext(context.Context) GetBackupsBackupDbTableInfoOutput
}

type GetBackupsBackupDbTableInfoArgs struct {
	// Database name.
	Database pulumi.StringInput `pulumi:"database"`
	// Table names.
	Tables pulumi.StringArrayInput `pulumi:"tables"`
}

func (GetBackupsBackupDbTableInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackupDbTableInfo)(nil)).Elem()
}

func (i GetBackupsBackupDbTableInfoArgs) ToGetBackupsBackupDbTableInfoOutput() GetBackupsBackupDbTableInfoOutput {
	return i.ToGetBackupsBackupDbTableInfoOutputWithContext(context.Background())
}

func (i GetBackupsBackupDbTableInfoArgs) ToGetBackupsBackupDbTableInfoOutputWithContext(ctx context.Context) GetBackupsBackupDbTableInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupDbTableInfoOutput)
}

// GetBackupsBackupDbTableInfoArrayInput is an input type that accepts GetBackupsBackupDbTableInfoArray and GetBackupsBackupDbTableInfoArrayOutput values.
// You can construct a concrete instance of `GetBackupsBackupDbTableInfoArrayInput` via:
//
//	GetBackupsBackupDbTableInfoArray{ GetBackupsBackupDbTableInfoArgs{...} }
type GetBackupsBackupDbTableInfoArrayInput interface {
	pulumi.Input

	ToGetBackupsBackupDbTableInfoArrayOutput() GetBackupsBackupDbTableInfoArrayOutput
	ToGetBackupsBackupDbTableInfoArrayOutputWithContext(context.Context) GetBackupsBackupDbTableInfoArrayOutput
}

type GetBackupsBackupDbTableInfoArray []GetBackupsBackupDbTableInfoInput

func (GetBackupsBackupDbTableInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupsBackupDbTableInfo)(nil)).Elem()
}

func (i GetBackupsBackupDbTableInfoArray) ToGetBackupsBackupDbTableInfoArrayOutput() GetBackupsBackupDbTableInfoArrayOutput {
	return i.ToGetBackupsBackupDbTableInfoArrayOutputWithContext(context.Background())
}

func (i GetBackupsBackupDbTableInfoArray) ToGetBackupsBackupDbTableInfoArrayOutputWithContext(ctx context.Context) GetBackupsBackupDbTableInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupDbTableInfoArrayOutput)
}

type GetBackupsBackupDbTableInfoOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupDbTableInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackupDbTableInfo)(nil)).Elem()
}

func (o GetBackupsBackupDbTableInfoOutput) ToGetBackupsBackupDbTableInfoOutput() GetBackupsBackupDbTableInfoOutput {
	return o
}

func (o GetBackupsBackupDbTableInfoOutput) ToGetBackupsBackupDbTableInfoOutputWithContext(ctx context.Context) GetBackupsBackupDbTableInfoOutput {
	return o
}

// Database name.
func (o GetBackupsBackupDbTableInfoOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupDbTableInfo) string { return v.Database }).(pulumi.StringOutput)
}

// Table names.
func (o GetBackupsBackupDbTableInfoOutput) Tables() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetBackupsBackupDbTableInfo) []string { return v.Tables }).(pulumi.StringArrayOutput)
}

type GetBackupsBackupDbTableInfoArrayOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupDbTableInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupsBackupDbTableInfo)(nil)).Elem()
}

func (o GetBackupsBackupDbTableInfoArrayOutput) ToGetBackupsBackupDbTableInfoArrayOutput() GetBackupsBackupDbTableInfoArrayOutput {
	return o
}

func (o GetBackupsBackupDbTableInfoArrayOutput) ToGetBackupsBackupDbTableInfoArrayOutputWithContext(ctx context.Context) GetBackupsBackupDbTableInfoArrayOutput {
	return o
}

func (o GetBackupsBackupDbTableInfoArrayOutput) Index(i pulumi.IntInput) GetBackupsBackupDbTableInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackupsBackupDbTableInfo {
		return vs[0].([]GetBackupsBackupDbTableInfo)[vs[1].(int)]
	}).(GetBackupsBackupDbTableInfoOutput)
}

type GetDatabasesDatabase struct {
	// The character set of the RDS database.
	CharacterSetName string `pulumi:"characterSetName"`
	// The privilege detail list of RDS mysql instance database.
	DatabasePrivileges []GetDatabasesDatabaseDatabasePrivilege `pulumi:"databasePrivileges"`
	// The name of the RDS database.
	DbName string `pulumi:"dbName"`
}

// GetDatabasesDatabaseInput is an input type that accepts GetDatabasesDatabaseArgs and GetDatabasesDatabaseOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseInput` via:
//
//	GetDatabasesDatabaseArgs{...}
type GetDatabasesDatabaseInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput
	ToGetDatabasesDatabaseOutputWithContext(context.Context) GetDatabasesDatabaseOutput
}

type GetDatabasesDatabaseArgs struct {
	// The character set of the RDS database.
	CharacterSetName pulumi.StringInput `pulumi:"characterSetName"`
	// The privilege detail list of RDS mysql instance database.
	DatabasePrivileges GetDatabasesDatabaseDatabasePrivilegeArrayInput `pulumi:"databasePrivileges"`
	// The name of the RDS database.
	DbName pulumi.StringInput `pulumi:"dbName"`
}

func (GetDatabasesDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return i.ToGetDatabasesDatabaseOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArgs) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseOutput)
}

// GetDatabasesDatabaseArrayInput is an input type that accepts GetDatabasesDatabaseArray and GetDatabasesDatabaseArrayOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseArrayInput` via:
//
//	GetDatabasesDatabaseArray{ GetDatabasesDatabaseArgs{...} }
type GetDatabasesDatabaseArrayInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput
	ToGetDatabasesDatabaseArrayOutputWithContext(context.Context) GetDatabasesDatabaseArrayOutput
}

type GetDatabasesDatabaseArray []GetDatabasesDatabaseInput

func (GetDatabasesDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return i.ToGetDatabasesDatabaseArrayOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseArray) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseArrayOutput)
}

type GetDatabasesDatabaseOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutput() GetDatabasesDatabaseOutput {
	return o
}

func (o GetDatabasesDatabaseOutput) ToGetDatabasesDatabaseOutputWithContext(ctx context.Context) GetDatabasesDatabaseOutput {
	return o
}

// The character set of the RDS database.
func (o GetDatabasesDatabaseOutput) CharacterSetName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.CharacterSetName }).(pulumi.StringOutput)
}

// The privilege detail list of RDS mysql instance database.
func (o GetDatabasesDatabaseOutput) DatabasePrivileges() GetDatabasesDatabaseDatabasePrivilegeArrayOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) []GetDatabasesDatabaseDatabasePrivilege { return v.DatabasePrivileges }).(GetDatabasesDatabaseDatabasePrivilegeArrayOutput)
}

// The name of the RDS database.
func (o GetDatabasesDatabaseOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabase) string { return v.DbName }).(pulumi.StringOutput)
}

type GetDatabasesDatabaseArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabase)(nil)).Elem()
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutput() GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) ToGetDatabasesDatabaseArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseArrayOutput {
	return o
}

func (o GetDatabasesDatabaseArrayOutput) Index(i pulumi.IntInput) GetDatabasesDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasesDatabase {
		return vs[0].([]GetDatabasesDatabase)[vs[1].(int)]
	}).(GetDatabasesDatabaseOutput)
}

type GetDatabasesDatabaseDatabasePrivilege struct {
	// The name of account.
	AccountName string `pulumi:"accountName"`
	// The privilege type of the account.
	AccountPrivilege string `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail string `pulumi:"accountPrivilegeDetail"`
}

// GetDatabasesDatabaseDatabasePrivilegeInput is an input type that accepts GetDatabasesDatabaseDatabasePrivilegeArgs and GetDatabasesDatabaseDatabasePrivilegeOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseDatabasePrivilegeInput` via:
//
//	GetDatabasesDatabaseDatabasePrivilegeArgs{...}
type GetDatabasesDatabaseDatabasePrivilegeInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseDatabasePrivilegeOutput() GetDatabasesDatabaseDatabasePrivilegeOutput
	ToGetDatabasesDatabaseDatabasePrivilegeOutputWithContext(context.Context) GetDatabasesDatabaseDatabasePrivilegeOutput
}

type GetDatabasesDatabaseDatabasePrivilegeArgs struct {
	// The name of account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The privilege type of the account.
	AccountPrivilege pulumi.StringInput `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail pulumi.StringInput `pulumi:"accountPrivilegeDetail"`
}

func (GetDatabasesDatabaseDatabasePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (i GetDatabasesDatabaseDatabasePrivilegeArgs) ToGetDatabasesDatabaseDatabasePrivilegeOutput() GetDatabasesDatabaseDatabasePrivilegeOutput {
	return i.ToGetDatabasesDatabaseDatabasePrivilegeOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseDatabasePrivilegeArgs) ToGetDatabasesDatabaseDatabasePrivilegeOutputWithContext(ctx context.Context) GetDatabasesDatabaseDatabasePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseDatabasePrivilegeOutput)
}

// GetDatabasesDatabaseDatabasePrivilegeArrayInput is an input type that accepts GetDatabasesDatabaseDatabasePrivilegeArray and GetDatabasesDatabaseDatabasePrivilegeArrayOutput values.
// You can construct a concrete instance of `GetDatabasesDatabaseDatabasePrivilegeArrayInput` via:
//
//	GetDatabasesDatabaseDatabasePrivilegeArray{ GetDatabasesDatabaseDatabasePrivilegeArgs{...} }
type GetDatabasesDatabaseDatabasePrivilegeArrayInput interface {
	pulumi.Input

	ToGetDatabasesDatabaseDatabasePrivilegeArrayOutput() GetDatabasesDatabaseDatabasePrivilegeArrayOutput
	ToGetDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(context.Context) GetDatabasesDatabaseDatabasePrivilegeArrayOutput
}

type GetDatabasesDatabaseDatabasePrivilegeArray []GetDatabasesDatabaseDatabasePrivilegeInput

func (GetDatabasesDatabaseDatabasePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (i GetDatabasesDatabaseDatabasePrivilegeArray) ToGetDatabasesDatabaseDatabasePrivilegeArrayOutput() GetDatabasesDatabaseDatabasePrivilegeArrayOutput {
	return i.ToGetDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(context.Background())
}

func (i GetDatabasesDatabaseDatabasePrivilegeArray) ToGetDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseDatabasePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDatabasesDatabaseDatabasePrivilegeArrayOutput)
}

type GetDatabasesDatabaseDatabasePrivilegeOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseDatabasePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (o GetDatabasesDatabaseDatabasePrivilegeOutput) ToGetDatabasesDatabaseDatabasePrivilegeOutput() GetDatabasesDatabaseDatabasePrivilegeOutput {
	return o
}

func (o GetDatabasesDatabaseDatabasePrivilegeOutput) ToGetDatabasesDatabaseDatabasePrivilegeOutputWithContext(ctx context.Context) GetDatabasesDatabaseDatabasePrivilegeOutput {
	return o
}

// The name of account.
func (o GetDatabasesDatabaseDatabasePrivilegeOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDatabasePrivilege) string { return v.AccountName }).(pulumi.StringOutput)
}

// The privilege type of the account.
func (o GetDatabasesDatabaseDatabasePrivilegeOutput) AccountPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDatabasePrivilege) string { return v.AccountPrivilege }).(pulumi.StringOutput)
}

// The privilege detail of the account.
func (o GetDatabasesDatabaseDatabasePrivilegeOutput) AccountPrivilegeDetail() pulumi.StringOutput {
	return o.ApplyT(func(v GetDatabasesDatabaseDatabasePrivilege) string { return v.AccountPrivilegeDetail }).(pulumi.StringOutput)
}

type GetDatabasesDatabaseDatabasePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (GetDatabasesDatabaseDatabasePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (o GetDatabasesDatabaseDatabasePrivilegeArrayOutput) ToGetDatabasesDatabaseDatabasePrivilegeArrayOutput() GetDatabasesDatabaseDatabasePrivilegeArrayOutput {
	return o
}

func (o GetDatabasesDatabaseDatabasePrivilegeArrayOutput) ToGetDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(ctx context.Context) GetDatabasesDatabaseDatabasePrivilegeArrayOutput {
	return o
}

func (o GetDatabasesDatabaseDatabasePrivilegeArrayOutput) Index(i pulumi.IntInput) GetDatabasesDatabaseDatabasePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDatabasesDatabaseDatabasePrivilege {
		return vs[0].([]GetDatabasesDatabaseDatabasePrivilege)[vs[1].(int)]
	}).(GetDatabasesDatabaseDatabasePrivilegeOutput)
}

type GetEndpointsEndpoint struct {
	// Address list.
	Addresses []GetEndpointsEndpointAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes string `pulumi:"autoAddNewNodes"`
	// The description of the mysql endpoint.
	Description string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting string `pulumi:"enableReadWriteSplitting"`
	// The id of the mysql endpoint.
	EndpointId string `pulumi:"endpointId"`
	// The name of the mysql endpoint.
	EndpointName string `pulumi:"endpointName"`
	// The endpoint type of the mysql endpoint.
	EndpointType string `pulumi:"endpointType"`
	// The id of the mysql endpoint.
	Id string `pulumi:"id"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights []GetEndpointsEndpointReadOnlyNodeWeight `pulumi:"readOnlyNodeWeights"`
	// The read write mode.
	ReadWriteMode string `pulumi:"readWriteMode"`
}

// GetEndpointsEndpointInput is an input type that accepts GetEndpointsEndpointArgs and GetEndpointsEndpointOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointInput` via:
//
//	GetEndpointsEndpointArgs{...}
type GetEndpointsEndpointInput interface {
	pulumi.Input

	ToGetEndpointsEndpointOutput() GetEndpointsEndpointOutput
	ToGetEndpointsEndpointOutputWithContext(context.Context) GetEndpointsEndpointOutput
}

type GetEndpointsEndpointArgs struct {
	// Address list.
	Addresses GetEndpointsEndpointAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringInput `pulumi:"autoAddNewNodes"`
	// The description of the mysql endpoint.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringInput `pulumi:"enableReadWriteSplitting"`
	// The id of the mysql endpoint.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The name of the mysql endpoint.
	EndpointName pulumi.StringInput `pulumi:"endpointName"`
	// The endpoint type of the mysql endpoint.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The id of the mysql endpoint.
	Id pulumi.StringInput `pulumi:"id"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights GetEndpointsEndpointReadOnlyNodeWeightArrayInput `pulumi:"readOnlyNodeWeights"`
	// The read write mode.
	ReadWriteMode pulumi.StringInput `pulumi:"readWriteMode"`
}

func (GetEndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpoint)(nil)).Elem()
}

func (i GetEndpointsEndpointArgs) ToGetEndpointsEndpointOutput() GetEndpointsEndpointOutput {
	return i.ToGetEndpointsEndpointOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointArgs) ToGetEndpointsEndpointOutputWithContext(ctx context.Context) GetEndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointOutput)
}

// GetEndpointsEndpointArrayInput is an input type that accepts GetEndpointsEndpointArray and GetEndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointArrayInput` via:
//
//	GetEndpointsEndpointArray{ GetEndpointsEndpointArgs{...} }
type GetEndpointsEndpointArrayInput interface {
	pulumi.Input

	ToGetEndpointsEndpointArrayOutput() GetEndpointsEndpointArrayOutput
	ToGetEndpointsEndpointArrayOutputWithContext(context.Context) GetEndpointsEndpointArrayOutput
}

type GetEndpointsEndpointArray []GetEndpointsEndpointInput

func (GetEndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpoint)(nil)).Elem()
}

func (i GetEndpointsEndpointArray) ToGetEndpointsEndpointArrayOutput() GetEndpointsEndpointArrayOutput {
	return i.ToGetEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointArray) ToGetEndpointsEndpointArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointArrayOutput)
}

type GetEndpointsEndpointOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpoint)(nil)).Elem()
}

func (o GetEndpointsEndpointOutput) ToGetEndpointsEndpointOutput() GetEndpointsEndpointOutput {
	return o
}

func (o GetEndpointsEndpointOutput) ToGetEndpointsEndpointOutputWithContext(ctx context.Context) GetEndpointsEndpointOutput {
	return o
}

// Address list.
func (o GetEndpointsEndpointOutput) Addresses() GetEndpointsEndpointAddressArrayOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) []GetEndpointsEndpointAddress { return v.Addresses }).(GetEndpointsEndpointAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o GetEndpointsEndpointOutput) AutoAddNewNodes() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.AutoAddNewNodes }).(pulumi.StringOutput)
}

// The description of the mysql endpoint.
func (o GetEndpointsEndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.Description }).(pulumi.StringOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o GetEndpointsEndpointOutput) EnableReadOnly() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.EnableReadOnly }).(pulumi.StringOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o GetEndpointsEndpointOutput) EnableReadWriteSplitting() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.EnableReadWriteSplitting }).(pulumi.StringOutput)
}

// The id of the mysql endpoint.
func (o GetEndpointsEndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The name of the mysql endpoint.
func (o GetEndpointsEndpointOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.EndpointName }).(pulumi.StringOutput)
}

// The endpoint type of the mysql endpoint.
func (o GetEndpointsEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The id of the mysql endpoint.
func (o GetEndpointsEndpointOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.Id }).(pulumi.StringOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o GetEndpointsEndpointOutput) ReadOnlyNodeWeights() GetEndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) []GetEndpointsEndpointReadOnlyNodeWeight { return v.ReadOnlyNodeWeights }).(GetEndpointsEndpointReadOnlyNodeWeightArrayOutput)
}

// The read write mode.
func (o GetEndpointsEndpointOutput) ReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.ReadWriteMode }).(pulumi.StringOutput)
}

type GetEndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpoint)(nil)).Elem()
}

func (o GetEndpointsEndpointArrayOutput) ToGetEndpointsEndpointArrayOutput() GetEndpointsEndpointArrayOutput {
	return o
}

func (o GetEndpointsEndpointArrayOutput) ToGetEndpointsEndpointArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointArrayOutput {
	return o
}

func (o GetEndpointsEndpointArrayOutput) Index(i pulumi.IntInput) GetEndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEndpointsEndpoint {
		return vs[0].([]GetEndpointsEndpoint)[vs[1].(int)]
	}).(GetEndpointsEndpointOutput)
}

type GetEndpointsEndpointAddress struct {
	// DNS Visibility.
	DnsVisibility bool `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId string `pulumi:"eipId"`
	// The IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType string `pulumi:"networkType"`
	// The Port.
	Port string `pulumi:"port"`
	// Subnet ID, valid only for private addresses.
	SubnetId string `pulumi:"subnetId"`
}

// GetEndpointsEndpointAddressInput is an input type that accepts GetEndpointsEndpointAddressArgs and GetEndpointsEndpointAddressOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointAddressInput` via:
//
//	GetEndpointsEndpointAddressArgs{...}
type GetEndpointsEndpointAddressInput interface {
	pulumi.Input

	ToGetEndpointsEndpointAddressOutput() GetEndpointsEndpointAddressOutput
	ToGetEndpointsEndpointAddressOutputWithContext(context.Context) GetEndpointsEndpointAddressOutput
}

type GetEndpointsEndpointAddressArgs struct {
	// DNS Visibility.
	DnsVisibility pulumi.BoolInput `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringInput `pulumi:"port"`
	// Subnet ID, valid only for private addresses.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetEndpointsEndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpointAddress)(nil)).Elem()
}

func (i GetEndpointsEndpointAddressArgs) ToGetEndpointsEndpointAddressOutput() GetEndpointsEndpointAddressOutput {
	return i.ToGetEndpointsEndpointAddressOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointAddressArgs) ToGetEndpointsEndpointAddressOutputWithContext(ctx context.Context) GetEndpointsEndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointAddressOutput)
}

// GetEndpointsEndpointAddressArrayInput is an input type that accepts GetEndpointsEndpointAddressArray and GetEndpointsEndpointAddressArrayOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointAddressArrayInput` via:
//
//	GetEndpointsEndpointAddressArray{ GetEndpointsEndpointAddressArgs{...} }
type GetEndpointsEndpointAddressArrayInput interface {
	pulumi.Input

	ToGetEndpointsEndpointAddressArrayOutput() GetEndpointsEndpointAddressArrayOutput
	ToGetEndpointsEndpointAddressArrayOutputWithContext(context.Context) GetEndpointsEndpointAddressArrayOutput
}

type GetEndpointsEndpointAddressArray []GetEndpointsEndpointAddressInput

func (GetEndpointsEndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpointAddress)(nil)).Elem()
}

func (i GetEndpointsEndpointAddressArray) ToGetEndpointsEndpointAddressArrayOutput() GetEndpointsEndpointAddressArrayOutput {
	return i.ToGetEndpointsEndpointAddressArrayOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointAddressArray) ToGetEndpointsEndpointAddressArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointAddressArrayOutput)
}

type GetEndpointsEndpointAddressOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpointAddress)(nil)).Elem()
}

func (o GetEndpointsEndpointAddressOutput) ToGetEndpointsEndpointAddressOutput() GetEndpointsEndpointAddressOutput {
	return o
}

func (o GetEndpointsEndpointAddressOutput) ToGetEndpointsEndpointAddressOutputWithContext(ctx context.Context) GetEndpointsEndpointAddressOutput {
	return o
}

// DNS Visibility.
func (o GetEndpointsEndpointAddressOutput) DnsVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEndpointsEndpointAddress) bool { return v.DnsVisibility }).(pulumi.BoolOutput)
}

// Connect domain name.
func (o GetEndpointsEndpointAddressOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointAddress) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o GetEndpointsEndpointAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The IP Address.
func (o GetEndpointsEndpointAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o GetEndpointsEndpointAddressOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointAddress) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The Port.
func (o GetEndpointsEndpointAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointAddress) string { return v.Port }).(pulumi.StringOutput)
}

// Subnet ID, valid only for private addresses.
func (o GetEndpointsEndpointAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetEndpointsEndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpointAddress)(nil)).Elem()
}

func (o GetEndpointsEndpointAddressArrayOutput) ToGetEndpointsEndpointAddressArrayOutput() GetEndpointsEndpointAddressArrayOutput {
	return o
}

func (o GetEndpointsEndpointAddressArrayOutput) ToGetEndpointsEndpointAddressArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointAddressArrayOutput {
	return o
}

func (o GetEndpointsEndpointAddressArrayOutput) Index(i pulumi.IntInput) GetEndpointsEndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEndpointsEndpointAddress {
		return vs[0].([]GetEndpointsEndpointAddress)[vs[1].(int)]
	}).(GetEndpointsEndpointAddressOutput)
}

type GetEndpointsEndpointReadOnlyNodeWeight struct {
	// The ID of the node.
	NodeId string `pulumi:"nodeId"`
	// The type of the node.
	NodeType string `pulumi:"nodeType"`
	// The weight of the node.
	Weight int `pulumi:"weight"`
}

// GetEndpointsEndpointReadOnlyNodeWeightInput is an input type that accepts GetEndpointsEndpointReadOnlyNodeWeightArgs and GetEndpointsEndpointReadOnlyNodeWeightOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointReadOnlyNodeWeightInput` via:
//
//	GetEndpointsEndpointReadOnlyNodeWeightArgs{...}
type GetEndpointsEndpointReadOnlyNodeWeightInput interface {
	pulumi.Input

	ToGetEndpointsEndpointReadOnlyNodeWeightOutput() GetEndpointsEndpointReadOnlyNodeWeightOutput
	ToGetEndpointsEndpointReadOnlyNodeWeightOutputWithContext(context.Context) GetEndpointsEndpointReadOnlyNodeWeightOutput
}

type GetEndpointsEndpointReadOnlyNodeWeightArgs struct {
	// The ID of the node.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// The type of the node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetEndpointsEndpointReadOnlyNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i GetEndpointsEndpointReadOnlyNodeWeightArgs) ToGetEndpointsEndpointReadOnlyNodeWeightOutput() GetEndpointsEndpointReadOnlyNodeWeightOutput {
	return i.ToGetEndpointsEndpointReadOnlyNodeWeightOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointReadOnlyNodeWeightArgs) ToGetEndpointsEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) GetEndpointsEndpointReadOnlyNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointReadOnlyNodeWeightOutput)
}

// GetEndpointsEndpointReadOnlyNodeWeightArrayInput is an input type that accepts GetEndpointsEndpointReadOnlyNodeWeightArray and GetEndpointsEndpointReadOnlyNodeWeightArrayOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointReadOnlyNodeWeightArrayInput` via:
//
//	GetEndpointsEndpointReadOnlyNodeWeightArray{ GetEndpointsEndpointReadOnlyNodeWeightArgs{...} }
type GetEndpointsEndpointReadOnlyNodeWeightArrayInput interface {
	pulumi.Input

	ToGetEndpointsEndpointReadOnlyNodeWeightArrayOutput() GetEndpointsEndpointReadOnlyNodeWeightArrayOutput
	ToGetEndpointsEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Context) GetEndpointsEndpointReadOnlyNodeWeightArrayOutput
}

type GetEndpointsEndpointReadOnlyNodeWeightArray []GetEndpointsEndpointReadOnlyNodeWeightInput

func (GetEndpointsEndpointReadOnlyNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i GetEndpointsEndpointReadOnlyNodeWeightArray) ToGetEndpointsEndpointReadOnlyNodeWeightArrayOutput() GetEndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return i.ToGetEndpointsEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointReadOnlyNodeWeightArray) ToGetEndpointsEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointReadOnlyNodeWeightArrayOutput)
}

type GetEndpointsEndpointReadOnlyNodeWeightOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointReadOnlyNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o GetEndpointsEndpointReadOnlyNodeWeightOutput) ToGetEndpointsEndpointReadOnlyNodeWeightOutput() GetEndpointsEndpointReadOnlyNodeWeightOutput {
	return o
}

func (o GetEndpointsEndpointReadOnlyNodeWeightOutput) ToGetEndpointsEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) GetEndpointsEndpointReadOnlyNodeWeightOutput {
	return o
}

// The ID of the node.
func (o GetEndpointsEndpointReadOnlyNodeWeightOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointReadOnlyNodeWeight) string { return v.NodeId }).(pulumi.StringOutput)
}

// The type of the node.
func (o GetEndpointsEndpointReadOnlyNodeWeightOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointReadOnlyNodeWeight) string { return v.NodeType }).(pulumi.StringOutput)
}

// The weight of the node.
func (o GetEndpointsEndpointReadOnlyNodeWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetEndpointsEndpointReadOnlyNodeWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type GetEndpointsEndpointReadOnlyNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointReadOnlyNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o GetEndpointsEndpointReadOnlyNodeWeightArrayOutput) ToGetEndpointsEndpointReadOnlyNodeWeightArrayOutput() GetEndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o GetEndpointsEndpointReadOnlyNodeWeightArrayOutput) ToGetEndpointsEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o GetEndpointsEndpointReadOnlyNodeWeightArrayOutput) Index(i pulumi.IntInput) GetEndpointsEndpointReadOnlyNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEndpointsEndpointReadOnlyNodeWeight {
		return vs[0].([]GetEndpointsEndpointReadOnlyNodeWeight)[vs[1].(int)]
	}).(GetEndpointsEndpointReadOnlyNodeWeightOutput)
}

type GetInstanceSpecsInstanceSpec struct {
	// Default value of maximum number of connections.
	Connection int `pulumi:"connection"`
	// Compatible version. Values:
	// MySQL_5_7: MySQL 5.7 version. Default value.
	// MySQL_8_0: MySQL 8.0 version.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// Instance type. The value is DoubleNode.
	InstanceType string `pulumi:"instanceType"`
	// Maximum IOPS per second.
	Iops int `pulumi:"iops"`
	// Memory size, in GB.
	Memory int `pulumi:"memory"`
	// Queries Per Second (QPS).
	Qps int `pulumi:"qps"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// Instance specification code.
	SpecCode string `pulumi:"specCode"`
	// Instance specification type. Values:
	// General: Exclusive specification (formerly "General Purpose").
	// Shared: General specification (formerly "Shared Type").
	SpecFamily string `pulumi:"specFamily"`
	// The status of the available zone where the specification is located includes the following statuses:
	// Normal: On sale.
	// Soldout: Sold out.
	SpecStatus string `pulumi:"specStatus"`
	// Maximum storage space, in GB.
	StorageMax int `pulumi:"storageMax"`
	// Minimum storage space, in GB.
	StorageMin int `pulumi:"storageMin"`
	// Disk step size, in GB.
	StorageStep int `pulumi:"storageStep"`
	// Number of vCPUs.
	Vcpu int `pulumi:"vcpu"`
	// Availability zone ID.
	ZoneId string `pulumi:"zoneId"`
}

// GetInstanceSpecsInstanceSpecInput is an input type that accepts GetInstanceSpecsInstanceSpecArgs and GetInstanceSpecsInstanceSpecOutput values.
// You can construct a concrete instance of `GetInstanceSpecsInstanceSpecInput` via:
//
//	GetInstanceSpecsInstanceSpecArgs{...}
type GetInstanceSpecsInstanceSpecInput interface {
	pulumi.Input

	ToGetInstanceSpecsInstanceSpecOutput() GetInstanceSpecsInstanceSpecOutput
	ToGetInstanceSpecsInstanceSpecOutputWithContext(context.Context) GetInstanceSpecsInstanceSpecOutput
}

type GetInstanceSpecsInstanceSpecArgs struct {
	// Default value of maximum number of connections.
	Connection pulumi.IntInput `pulumi:"connection"`
	// Compatible version. Values:
	// MySQL_5_7: MySQL 5.7 version. Default value.
	// MySQL_8_0: MySQL 8.0 version.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// Instance type. The value is DoubleNode.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Maximum IOPS per second.
	Iops pulumi.IntInput `pulumi:"iops"`
	// Memory size, in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Queries Per Second (QPS).
	Qps pulumi.IntInput `pulumi:"qps"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Instance specification code.
	SpecCode pulumi.StringInput `pulumi:"specCode"`
	// Instance specification type. Values:
	// General: Exclusive specification (formerly "General Purpose").
	// Shared: General specification (formerly "Shared Type").
	SpecFamily pulumi.StringInput `pulumi:"specFamily"`
	// The status of the available zone where the specification is located includes the following statuses:
	// Normal: On sale.
	// Soldout: Sold out.
	SpecStatus pulumi.StringInput `pulumi:"specStatus"`
	// Maximum storage space, in GB.
	StorageMax pulumi.IntInput `pulumi:"storageMax"`
	// Minimum storage space, in GB.
	StorageMin pulumi.IntInput `pulumi:"storageMin"`
	// Disk step size, in GB.
	StorageStep pulumi.IntInput `pulumi:"storageStep"`
	// Number of vCPUs.
	Vcpu pulumi.IntInput `pulumi:"vcpu"`
	// Availability zone ID.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetInstanceSpecsInstanceSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSpecsInstanceSpec)(nil)).Elem()
}

func (i GetInstanceSpecsInstanceSpecArgs) ToGetInstanceSpecsInstanceSpecOutput() GetInstanceSpecsInstanceSpecOutput {
	return i.ToGetInstanceSpecsInstanceSpecOutputWithContext(context.Background())
}

func (i GetInstanceSpecsInstanceSpecArgs) ToGetInstanceSpecsInstanceSpecOutputWithContext(ctx context.Context) GetInstanceSpecsInstanceSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSpecsInstanceSpecOutput)
}

// GetInstanceSpecsInstanceSpecArrayInput is an input type that accepts GetInstanceSpecsInstanceSpecArray and GetInstanceSpecsInstanceSpecArrayOutput values.
// You can construct a concrete instance of `GetInstanceSpecsInstanceSpecArrayInput` via:
//
//	GetInstanceSpecsInstanceSpecArray{ GetInstanceSpecsInstanceSpecArgs{...} }
type GetInstanceSpecsInstanceSpecArrayInput interface {
	pulumi.Input

	ToGetInstanceSpecsInstanceSpecArrayOutput() GetInstanceSpecsInstanceSpecArrayOutput
	ToGetInstanceSpecsInstanceSpecArrayOutputWithContext(context.Context) GetInstanceSpecsInstanceSpecArrayOutput
}

type GetInstanceSpecsInstanceSpecArray []GetInstanceSpecsInstanceSpecInput

func (GetInstanceSpecsInstanceSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSpecsInstanceSpec)(nil)).Elem()
}

func (i GetInstanceSpecsInstanceSpecArray) ToGetInstanceSpecsInstanceSpecArrayOutput() GetInstanceSpecsInstanceSpecArrayOutput {
	return i.ToGetInstanceSpecsInstanceSpecArrayOutputWithContext(context.Background())
}

func (i GetInstanceSpecsInstanceSpecArray) ToGetInstanceSpecsInstanceSpecArrayOutputWithContext(ctx context.Context) GetInstanceSpecsInstanceSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstanceSpecsInstanceSpecArrayOutput)
}

type GetInstanceSpecsInstanceSpecOutput struct{ *pulumi.OutputState }

func (GetInstanceSpecsInstanceSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstanceSpecsInstanceSpec)(nil)).Elem()
}

func (o GetInstanceSpecsInstanceSpecOutput) ToGetInstanceSpecsInstanceSpecOutput() GetInstanceSpecsInstanceSpecOutput {
	return o
}

func (o GetInstanceSpecsInstanceSpecOutput) ToGetInstanceSpecsInstanceSpecOutputWithContext(ctx context.Context) GetInstanceSpecsInstanceSpecOutput {
	return o
}

// Default value of maximum number of connections.
func (o GetInstanceSpecsInstanceSpecOutput) Connection() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) int { return v.Connection }).(pulumi.IntOutput)
}

// Compatible version. Values:
// MySQL_5_7: MySQL 5.7 version. Default value.
// MySQL_8_0: MySQL 8.0 version.
func (o GetInstanceSpecsInstanceSpecOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// Instance type. The value is DoubleNode.
func (o GetInstanceSpecsInstanceSpecOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Maximum IOPS per second.
func (o GetInstanceSpecsInstanceSpecOutput) Iops() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) int { return v.Iops }).(pulumi.IntOutput)
}

// Memory size, in GB.
func (o GetInstanceSpecsInstanceSpecOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) int { return v.Memory }).(pulumi.IntOutput)
}

// Queries Per Second (QPS).
func (o GetInstanceSpecsInstanceSpecOutput) Qps() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) int { return v.Qps }).(pulumi.IntOutput)
}

// The id of the region.
func (o GetInstanceSpecsInstanceSpecOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) string { return v.RegionId }).(pulumi.StringOutput)
}

// Instance specification code.
func (o GetInstanceSpecsInstanceSpecOutput) SpecCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) string { return v.SpecCode }).(pulumi.StringOutput)
}

// Instance specification type. Values:
// General: Exclusive specification (formerly "General Purpose").
// Shared: General specification (formerly "Shared Type").
func (o GetInstanceSpecsInstanceSpecOutput) SpecFamily() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) string { return v.SpecFamily }).(pulumi.StringOutput)
}

// The status of the available zone where the specification is located includes the following statuses:
// Normal: On sale.
// Soldout: Sold out.
func (o GetInstanceSpecsInstanceSpecOutput) SpecStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) string { return v.SpecStatus }).(pulumi.StringOutput)
}

// Maximum storage space, in GB.
func (o GetInstanceSpecsInstanceSpecOutput) StorageMax() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) int { return v.StorageMax }).(pulumi.IntOutput)
}

// Minimum storage space, in GB.
func (o GetInstanceSpecsInstanceSpecOutput) StorageMin() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) int { return v.StorageMin }).(pulumi.IntOutput)
}

// Disk step size, in GB.
func (o GetInstanceSpecsInstanceSpecOutput) StorageStep() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) int { return v.StorageStep }).(pulumi.IntOutput)
}

// Number of vCPUs.
func (o GetInstanceSpecsInstanceSpecOutput) Vcpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) int { return v.Vcpu }).(pulumi.IntOutput)
}

// Availability zone ID.
func (o GetInstanceSpecsInstanceSpecOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstanceSpecsInstanceSpec) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetInstanceSpecsInstanceSpecArrayOutput struct{ *pulumi.OutputState }

func (GetInstanceSpecsInstanceSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstanceSpecsInstanceSpec)(nil)).Elem()
}

func (o GetInstanceSpecsInstanceSpecArrayOutput) ToGetInstanceSpecsInstanceSpecArrayOutput() GetInstanceSpecsInstanceSpecArrayOutput {
	return o
}

func (o GetInstanceSpecsInstanceSpecArrayOutput) ToGetInstanceSpecsInstanceSpecArrayOutputWithContext(ctx context.Context) GetInstanceSpecsInstanceSpecArrayOutput {
	return o
}

func (o GetInstanceSpecsInstanceSpecArrayOutput) Index(i pulumi.IntInput) GetInstanceSpecsInstanceSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstanceSpecsInstanceSpec {
		return vs[0].([]GetInstanceSpecsInstanceSpec)[vs[1].(int)]
	}).(GetInstanceSpecsInstanceSpecOutput)
}

type GetInstancesRdsMysqlInstance struct {
	// The version of allow list.
	AllowListVersion string `pulumi:"allowListVersion"`
	// The instance has used backup space. Unit: GB.
	BackupUse int `pulumi:"backupUse"`
	// Does it support the binlog capability? This parameter is returned only when the database proxy is enabled. Values:
	// true: Yes.
	// false: No.
	BinlogDump bool `pulumi:"binlogDump"`
	// Payment methods.
	ChargeDetail GetInstancesRdsMysqlInstanceChargeDetail `pulumi:"chargeDetail"`
	// Connection pool type.
	ConnectionPoolType string `pulumi:"connectionPoolType"`
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode string `pulumi:"dataSyncMode"`
	// The version of the RDS instance.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The running status of the proxy instance. This parameter is returned only when the database proxy is enabled. Values:
	// Creating: The proxy is being started.
	// Running: The proxy is running.
	// Shutdown: The proxy is closed.
	// Deleting: The proxy is being closed.
	DbProxyStatus string `pulumi:"dbProxyStatus"`
	// The endpoint info of the RDS instance.
	Endpoints []GetInstancesRdsMysqlInstanceEndpoint `pulumi:"endpoints"`
	// Feature status.
	FeatureStates []GetInstancesRdsMysqlInstanceFeatureState `pulumi:"featureStates"`
	// Whether to enable global read-only.
	// true: Yes.
	// false: No.
	GlobalReadOnly bool `pulumi:"globalReadOnly"`
	// The ID of the RDS instance.
	Id string `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName string `pulumi:"instanceName"`
	// The status of the RDS instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// Whether the table name is case sensitive, the default value is 1.
	// Ranges:
	// 0: Table names are stored as fixed and table names are case-sensitive.
	// 1: Table names will be stored in lowercase and table names are not case sensitive.
	LowerCaseTableNames string `pulumi:"lowerCaseTableNames"`
	// Maintenance Window.
	MaintenanceWindows []GetInstancesRdsMysqlInstanceMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// Average CPU usage of the instance master node in nearly one minute.
	NodeCpuUsedPercentage float64 `pulumi:"nodeCpuUsedPercentage"`
	// Average memory usage of the instance master node in nearly one minute.
	NodeMemoryUsedPercentage float64 `pulumi:"nodeMemoryUsedPercentage"`
	// The number of nodes.
	NodeNumber int `pulumi:"nodeNumber"`
	// Average disk usage of the instance master node in nearly one minute.
	NodeSpaceUsedPercentage float64 `pulumi:"nodeSpaceUsedPercentage"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes []GetInstancesRdsMysqlInstanceNode `pulumi:"nodes"`
	// The project name of the RDS instance.
	ProjectName string `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// Total instance storage space. Unit: GB.
	StorageSpace int `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType string `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse int `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []GetInstancesRdsMysqlInstanceTag `pulumi:"tags"`
	// Time zone.
	TimeZone string `pulumi:"timeZone"`
	// The update time of the RDS instance.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size.
	VCpu int `pulumi:"vCpu"`
	// The vpc ID of the RDS instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
	// List of availability zones where each node of the instance is located.
	ZoneIds []string `pulumi:"zoneIds"`
}

// GetInstancesRdsMysqlInstanceInput is an input type that accepts GetInstancesRdsMysqlInstanceArgs and GetInstancesRdsMysqlInstanceOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceInput` via:
//
//	GetInstancesRdsMysqlInstanceArgs{...}
type GetInstancesRdsMysqlInstanceInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceOutput() GetInstancesRdsMysqlInstanceOutput
	ToGetInstancesRdsMysqlInstanceOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceOutput
}

type GetInstancesRdsMysqlInstanceArgs struct {
	// The version of allow list.
	AllowListVersion pulumi.StringInput `pulumi:"allowListVersion"`
	// The instance has used backup space. Unit: GB.
	BackupUse pulumi.IntInput `pulumi:"backupUse"`
	// Does it support the binlog capability? This parameter is returned only when the database proxy is enabled. Values:
	// true: Yes.
	// false: No.
	BinlogDump pulumi.BoolInput `pulumi:"binlogDump"`
	// Payment methods.
	ChargeDetail GetInstancesRdsMysqlInstanceChargeDetailInput `pulumi:"chargeDetail"`
	// Connection pool type.
	ConnectionPoolType pulumi.StringInput `pulumi:"connectionPoolType"`
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode pulumi.StringInput `pulumi:"dataSyncMode"`
	// The version of the RDS instance.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// The running status of the proxy instance. This parameter is returned only when the database proxy is enabled. Values:
	// Creating: The proxy is being started.
	// Running: The proxy is running.
	// Shutdown: The proxy is closed.
	// Deleting: The proxy is being closed.
	DbProxyStatus pulumi.StringInput `pulumi:"dbProxyStatus"`
	// The endpoint info of the RDS instance.
	Endpoints GetInstancesRdsMysqlInstanceEndpointArrayInput `pulumi:"endpoints"`
	// Feature status.
	FeatureStates GetInstancesRdsMysqlInstanceFeatureStateArrayInput `pulumi:"featureStates"`
	// Whether to enable global read-only.
	// true: Yes.
	// false: No.
	GlobalReadOnly pulumi.BoolInput `pulumi:"globalReadOnly"`
	// The ID of the RDS instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of the RDS instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// Whether the table name is case sensitive, the default value is 1.
	// Ranges:
	// 0: Table names are stored as fixed and table names are case-sensitive.
	// 1: Table names will be stored in lowercase and table names are not case sensitive.
	LowerCaseTableNames pulumi.StringInput `pulumi:"lowerCaseTableNames"`
	// Maintenance Window.
	MaintenanceWindows GetInstancesRdsMysqlInstanceMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Average CPU usage of the instance master node in nearly one minute.
	NodeCpuUsedPercentage pulumi.Float64Input `pulumi:"nodeCpuUsedPercentage"`
	// Average memory usage of the instance master node in nearly one minute.
	NodeMemoryUsedPercentage pulumi.Float64Input `pulumi:"nodeMemoryUsedPercentage"`
	// The number of nodes.
	NodeNumber pulumi.IntInput `pulumi:"nodeNumber"`
	// Average disk usage of the instance master node in nearly one minute.
	NodeSpaceUsedPercentage pulumi.Float64Input `pulumi:"nodeSpaceUsedPercentage"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes GetInstancesRdsMysqlInstanceNodeArrayInput `pulumi:"nodes"`
	// The project name of the RDS instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Total instance storage space. Unit: GB.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse pulumi.IntInput `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags GetInstancesRdsMysqlInstanceTagArrayInput `pulumi:"tags"`
	// Time zone.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
	// The update time of the RDS instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The vpc ID of the RDS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// List of availability zones where each node of the instance is located.
	ZoneIds pulumi.StringArrayInput `pulumi:"zoneIds"`
}

func (GetInstancesRdsMysqlInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstance)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceArgs) ToGetInstancesRdsMysqlInstanceOutput() GetInstancesRdsMysqlInstanceOutput {
	return i.ToGetInstancesRdsMysqlInstanceOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceArgs) ToGetInstancesRdsMysqlInstanceOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceOutput)
}

// GetInstancesRdsMysqlInstanceArrayInput is an input type that accepts GetInstancesRdsMysqlInstanceArray and GetInstancesRdsMysqlInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceArrayInput` via:
//
//	GetInstancesRdsMysqlInstanceArray{ GetInstancesRdsMysqlInstanceArgs{...} }
type GetInstancesRdsMysqlInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceArrayOutput() GetInstancesRdsMysqlInstanceArrayOutput
	ToGetInstancesRdsMysqlInstanceArrayOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceArrayOutput
}

type GetInstancesRdsMysqlInstanceArray []GetInstancesRdsMysqlInstanceInput

func (GetInstancesRdsMysqlInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstance)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceArray) ToGetInstancesRdsMysqlInstanceArrayOutput() GetInstancesRdsMysqlInstanceArrayOutput {
	return i.ToGetInstancesRdsMysqlInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceArray) ToGetInstancesRdsMysqlInstanceArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceArrayOutput)
}

type GetInstancesRdsMysqlInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstance)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceOutput) ToGetInstancesRdsMysqlInstanceOutput() GetInstancesRdsMysqlInstanceOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceOutput) ToGetInstancesRdsMysqlInstanceOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceOutput {
	return o
}

// The version of allow list.
func (o GetInstancesRdsMysqlInstanceOutput) AllowListVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.AllowListVersion }).(pulumi.StringOutput)
}

// The instance has used backup space. Unit: GB.
func (o GetInstancesRdsMysqlInstanceOutput) BackupUse() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) int { return v.BackupUse }).(pulumi.IntOutput)
}

// Does it support the binlog capability? This parameter is returned only when the database proxy is enabled. Values:
// true: Yes.
// false: No.
func (o GetInstancesRdsMysqlInstanceOutput) BinlogDump() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) bool { return v.BinlogDump }).(pulumi.BoolOutput)
}

// Payment methods.
func (o GetInstancesRdsMysqlInstanceOutput) ChargeDetail() GetInstancesRdsMysqlInstanceChargeDetailOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) GetInstancesRdsMysqlInstanceChargeDetail { return v.ChargeDetail }).(GetInstancesRdsMysqlInstanceChargeDetailOutput)
}

// Connection pool type.
func (o GetInstancesRdsMysqlInstanceOutput) ConnectionPoolType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.ConnectionPoolType }).(pulumi.StringOutput)
}

// Node creation local time.
func (o GetInstancesRdsMysqlInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Data synchronization mode.
func (o GetInstancesRdsMysqlInstanceOutput) DataSyncMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.DataSyncMode }).(pulumi.StringOutput)
}

// The version of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The running status of the proxy instance. This parameter is returned only when the database proxy is enabled. Values:
// Creating: The proxy is being started.
// Running: The proxy is running.
// Shutdown: The proxy is closed.
// Deleting: The proxy is being closed.
func (o GetInstancesRdsMysqlInstanceOutput) DbProxyStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.DbProxyStatus }).(pulumi.StringOutput)
}

// The endpoint info of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) Endpoints() GetInstancesRdsMysqlInstanceEndpointArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) []GetInstancesRdsMysqlInstanceEndpoint { return v.Endpoints }).(GetInstancesRdsMysqlInstanceEndpointArrayOutput)
}

// Feature status.
func (o GetInstancesRdsMysqlInstanceOutput) FeatureStates() GetInstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) []GetInstancesRdsMysqlInstanceFeatureState {
		return v.FeatureStates
	}).(GetInstancesRdsMysqlInstanceFeatureStateArrayOutput)
}

// Whether to enable global read-only.
// true: Yes.
// false: No.
func (o GetInstancesRdsMysqlInstanceOutput) GlobalReadOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) bool { return v.GlobalReadOnly }).(pulumi.BoolOutput)
}

// The ID of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// Whether the table name is case sensitive, the default value is 1.
// Ranges:
// 0: Table names are stored as fixed and table names are case-sensitive.
// 1: Table names will be stored in lowercase and table names are not case sensitive.
func (o GetInstancesRdsMysqlInstanceOutput) LowerCaseTableNames() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.LowerCaseTableNames }).(pulumi.StringOutput)
}

// Maintenance Window.
func (o GetInstancesRdsMysqlInstanceOutput) MaintenanceWindows() GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) []GetInstancesRdsMysqlInstanceMaintenanceWindow {
		return v.MaintenanceWindows
	}).(GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput)
}

// Memory size in GB.
func (o GetInstancesRdsMysqlInstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) int { return v.Memory }).(pulumi.IntOutput)
}

// Average CPU usage of the instance master node in nearly one minute.
func (o GetInstancesRdsMysqlInstanceOutput) NodeCpuUsedPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) float64 { return v.NodeCpuUsedPercentage }).(pulumi.Float64Output)
}

// Average memory usage of the instance master node in nearly one minute.
func (o GetInstancesRdsMysqlInstanceOutput) NodeMemoryUsedPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) float64 { return v.NodeMemoryUsedPercentage }).(pulumi.Float64Output)
}

// The number of nodes.
func (o GetInstancesRdsMysqlInstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) int { return v.NodeNumber }).(pulumi.IntOutput)
}

// Average disk usage of the instance master node in nearly one minute.
func (o GetInstancesRdsMysqlInstanceOutput) NodeSpaceUsedPercentage() pulumi.Float64Output {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) float64 { return v.NodeSpaceUsedPercentage }).(pulumi.Float64Output)
}

// General instance type, different from Custom instance type.
func (o GetInstancesRdsMysqlInstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Instance node information.
func (o GetInstancesRdsMysqlInstanceOutput) Nodes() GetInstancesRdsMysqlInstanceNodeArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) []GetInstancesRdsMysqlInstanceNode { return v.Nodes }).(GetInstancesRdsMysqlInstanceNodeArrayOutput)
}

// The project name of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// Total instance storage space. Unit: GB.
func (o GetInstancesRdsMysqlInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// Instance storage type.
func (o GetInstancesRdsMysqlInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The instance has used storage space. Unit: GB.
func (o GetInstancesRdsMysqlInstanceOutput) StorageUse() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) int { return v.StorageUse }).(pulumi.IntOutput)
}

// The subnet ID of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o GetInstancesRdsMysqlInstanceOutput) Tags() GetInstancesRdsMysqlInstanceTagArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) []GetInstancesRdsMysqlInstanceTag { return v.Tags }).(GetInstancesRdsMysqlInstanceTagArrayOutput)
}

// Time zone.
func (o GetInstancesRdsMysqlInstanceOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.TimeZone }).(pulumi.StringOutput)
}

// The update time of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size.
func (o GetInstancesRdsMysqlInstanceOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) int { return v.VCpu }).(pulumi.IntOutput)
}

// The vpc ID of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone of the RDS instance.
func (o GetInstancesRdsMysqlInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

// List of availability zones where each node of the instance is located.
func (o GetInstancesRdsMysqlInstanceOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstance) []string { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

type GetInstancesRdsMysqlInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstance)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceArrayOutput) ToGetInstancesRdsMysqlInstanceArrayOutput() GetInstancesRdsMysqlInstanceArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceArrayOutput) ToGetInstancesRdsMysqlInstanceArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesRdsMysqlInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRdsMysqlInstance {
		return vs[0].([]GetInstancesRdsMysqlInstance)[vs[1].(int)]
	}).(GetInstancesRdsMysqlInstanceOutput)
}

type GetInstancesRdsMysqlInstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew bool `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime string `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType string `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime string `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit string `pulumi:"periodUnit"`
	// Restore time of temporary upgrade.
	TempModifyEndTime string `pulumi:"tempModifyEndTime"`
	// Temporary upgrade start time.
	TempModifyStartTime string `pulumi:"tempModifyStartTime"`
}

// GetInstancesRdsMysqlInstanceChargeDetailInput is an input type that accepts GetInstancesRdsMysqlInstanceChargeDetailArgs and GetInstancesRdsMysqlInstanceChargeDetailOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceChargeDetailInput` via:
//
//	GetInstancesRdsMysqlInstanceChargeDetailArgs{...}
type GetInstancesRdsMysqlInstanceChargeDetailInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceChargeDetailOutput() GetInstancesRdsMysqlInstanceChargeDetailOutput
	ToGetInstancesRdsMysqlInstanceChargeDetailOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceChargeDetailOutput
}

type GetInstancesRdsMysqlInstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime pulumi.StringInput `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
	// Restore time of temporary upgrade.
	TempModifyEndTime pulumi.StringInput `pulumi:"tempModifyEndTime"`
	// Temporary upgrade start time.
	TempModifyStartTime pulumi.StringInput `pulumi:"tempModifyStartTime"`
}

func (GetInstancesRdsMysqlInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceChargeDetail)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceChargeDetailArgs) ToGetInstancesRdsMysqlInstanceChargeDetailOutput() GetInstancesRdsMysqlInstanceChargeDetailOutput {
	return i.ToGetInstancesRdsMysqlInstanceChargeDetailOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceChargeDetailArgs) ToGetInstancesRdsMysqlInstanceChargeDetailOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceChargeDetailOutput)
}

type GetInstancesRdsMysqlInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceChargeDetail)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) ToGetInstancesRdsMysqlInstanceChargeDetailOutput() GetInstancesRdsMysqlInstanceChargeDetailOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) ToGetInstancesRdsMysqlInstanceChargeDetailOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
// Autorenew_Enable
// Autorenew_Disable (default).
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// Billing expiry time (yearly and monthly only).
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) ChargeEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeEndTime }).(pulumi.StringOutput)
}

// Billing start time (pay-as-you-go & monthly subscription).
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// Pay status. Value:
// normal - normal
// overdue - overdue
// .
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of the RDS instance.
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// Shutdown time in arrears (pay-as-you-go & monthly subscription).
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) int { return v.Period }).(pulumi.IntOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Restore time of temporary upgrade.
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) TempModifyEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) string { return v.TempModifyEndTime }).(pulumi.StringOutput)
}

// Temporary upgrade start time.
func (o GetInstancesRdsMysqlInstanceChargeDetailOutput) TempModifyStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceChargeDetail) string { return v.TempModifyStartTime }).(pulumi.StringOutput)
}

type GetInstancesRdsMysqlInstanceEndpoint struct {
	// Address list.
	Addresses []GetInstancesRdsMysqlInstanceEndpointAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType string `pulumi:"endpointType"`
	// Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
	IdleConnectionReclaim bool `pulumi:"idleConnectionReclaim"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights []GetInstancesRdsMysqlInstanceEndpointNodeWeight `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode string `pulumi:"readWriteMode"`
}

// GetInstancesRdsMysqlInstanceEndpointInput is an input type that accepts GetInstancesRdsMysqlInstanceEndpointArgs and GetInstancesRdsMysqlInstanceEndpointOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceEndpointInput` via:
//
//	GetInstancesRdsMysqlInstanceEndpointArgs{...}
type GetInstancesRdsMysqlInstanceEndpointInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceEndpointOutput() GetInstancesRdsMysqlInstanceEndpointOutput
	ToGetInstancesRdsMysqlInstanceEndpointOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceEndpointOutput
}

type GetInstancesRdsMysqlInstanceEndpointArgs struct {
	// Address list.
	Addresses GetInstancesRdsMysqlInstanceEndpointAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
	IdleConnectionReclaim pulumi.BoolInput `pulumi:"idleConnectionReclaim"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayInput `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringInput `pulumi:"readWriteMode"`
}

func (GetInstancesRdsMysqlInstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceEndpointArgs) ToGetInstancesRdsMysqlInstanceEndpointOutput() GetInstancesRdsMysqlInstanceEndpointOutput {
	return i.ToGetInstancesRdsMysqlInstanceEndpointOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceEndpointArgs) ToGetInstancesRdsMysqlInstanceEndpointOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceEndpointOutput)
}

// GetInstancesRdsMysqlInstanceEndpointArrayInput is an input type that accepts GetInstancesRdsMysqlInstanceEndpointArray and GetInstancesRdsMysqlInstanceEndpointArrayOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceEndpointArrayInput` via:
//
//	GetInstancesRdsMysqlInstanceEndpointArray{ GetInstancesRdsMysqlInstanceEndpointArgs{...} }
type GetInstancesRdsMysqlInstanceEndpointArrayInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceEndpointArrayOutput() GetInstancesRdsMysqlInstanceEndpointArrayOutput
	ToGetInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceEndpointArrayOutput
}

type GetInstancesRdsMysqlInstanceEndpointArray []GetInstancesRdsMysqlInstanceEndpointInput

func (GetInstancesRdsMysqlInstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceEndpointArray) ToGetInstancesRdsMysqlInstanceEndpointArrayOutput() GetInstancesRdsMysqlInstanceEndpointArrayOutput {
	return i.ToGetInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceEndpointArray) ToGetInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceEndpointArrayOutput)
}

type GetInstancesRdsMysqlInstanceEndpointOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceEndpointOutput) ToGetInstancesRdsMysqlInstanceEndpointOutput() GetInstancesRdsMysqlInstanceEndpointOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceEndpointOutput) ToGetInstancesRdsMysqlInstanceEndpointOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointOutput {
	return o
}

// Address list.
func (o GetInstancesRdsMysqlInstanceEndpointOutput) Addresses() GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) []GetInstancesRdsMysqlInstanceEndpointAddress {
		return v.Addresses
	}).(GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o GetInstancesRdsMysqlInstanceEndpointOutput) AutoAddNewNodes() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) string { return v.AutoAddNewNodes }).(pulumi.StringOutput)
}

// Address description.
func (o GetInstancesRdsMysqlInstanceEndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) string { return v.Description }).(pulumi.StringOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o GetInstancesRdsMysqlInstanceEndpointOutput) EnableReadOnly() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) string { return v.EnableReadOnly }).(pulumi.StringOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o GetInstancesRdsMysqlInstanceEndpointOutput) EnableReadWriteSplitting() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) string { return v.EnableReadWriteSplitting }).(pulumi.StringOutput)
}

// Instance connection terminal ID.
func (o GetInstancesRdsMysqlInstanceEndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The instance connection terminal name.
func (o GetInstancesRdsMysqlInstanceEndpointOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) string { return v.EndpointName }).(pulumi.StringOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o GetInstancesRdsMysqlInstanceEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) string { return v.EndpointType }).(pulumi.StringOutput)
}

// Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
func (o GetInstancesRdsMysqlInstanceEndpointOutput) IdleConnectionReclaim() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) bool { return v.IdleConnectionReclaim }).(pulumi.BoolOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o GetInstancesRdsMysqlInstanceEndpointOutput) NodeWeights() GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) []GetInstancesRdsMysqlInstanceEndpointNodeWeight {
		return v.NodeWeights
	}).(GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o GetInstancesRdsMysqlInstanceEndpointOutput) ReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpoint) string { return v.ReadWriteMode }).(pulumi.StringOutput)
}

type GetInstancesRdsMysqlInstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceEndpointArrayOutput) ToGetInstancesRdsMysqlInstanceEndpointArrayOutput() GetInstancesRdsMysqlInstanceEndpointArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceEndpointArrayOutput) ToGetInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceEndpointArrayOutput) Index(i pulumi.IntInput) GetInstancesRdsMysqlInstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRdsMysqlInstanceEndpoint {
		return vs[0].([]GetInstancesRdsMysqlInstanceEndpoint)[vs[1].(int)]
	}).(GetInstancesRdsMysqlInstanceEndpointOutput)
}

type GetInstancesRdsMysqlInstanceEndpointAddress struct {
	// DNS Visibility.
	DnsVisibility bool `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId string `pulumi:"eipId"`
	// The IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType string `pulumi:"networkType"`
	// The Port.
	Port string `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
}

// GetInstancesRdsMysqlInstanceEndpointAddressInput is an input type that accepts GetInstancesRdsMysqlInstanceEndpointAddressArgs and GetInstancesRdsMysqlInstanceEndpointAddressOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceEndpointAddressInput` via:
//
//	GetInstancesRdsMysqlInstanceEndpointAddressArgs{...}
type GetInstancesRdsMysqlInstanceEndpointAddressInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceEndpointAddressOutput() GetInstancesRdsMysqlInstanceEndpointAddressOutput
	ToGetInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceEndpointAddressOutput
}

type GetInstancesRdsMysqlInstanceEndpointAddressArgs struct {
	// DNS Visibility.
	DnsVisibility pulumi.BoolInput `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringInput `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (GetInstancesRdsMysqlInstanceEndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceEndpointAddressArgs) ToGetInstancesRdsMysqlInstanceEndpointAddressOutput() GetInstancesRdsMysqlInstanceEndpointAddressOutput {
	return i.ToGetInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceEndpointAddressArgs) ToGetInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceEndpointAddressOutput)
}

// GetInstancesRdsMysqlInstanceEndpointAddressArrayInput is an input type that accepts GetInstancesRdsMysqlInstanceEndpointAddressArray and GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceEndpointAddressArrayInput` via:
//
//	GetInstancesRdsMysqlInstanceEndpointAddressArray{ GetInstancesRdsMysqlInstanceEndpointAddressArgs{...} }
type GetInstancesRdsMysqlInstanceEndpointAddressArrayInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceEndpointAddressArrayOutput() GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput
	ToGetInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput
}

type GetInstancesRdsMysqlInstanceEndpointAddressArray []GetInstancesRdsMysqlInstanceEndpointAddressInput

func (GetInstancesRdsMysqlInstanceEndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceEndpointAddressArray) ToGetInstancesRdsMysqlInstanceEndpointAddressArrayOutput() GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return i.ToGetInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceEndpointAddressArray) ToGetInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput)
}

type GetInstancesRdsMysqlInstanceEndpointAddressOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceEndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceEndpointAddressOutput) ToGetInstancesRdsMysqlInstanceEndpointAddressOutput() GetInstancesRdsMysqlInstanceEndpointAddressOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceEndpointAddressOutput) ToGetInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointAddressOutput {
	return o
}

// DNS Visibility.
func (o GetInstancesRdsMysqlInstanceEndpointAddressOutput) DnsVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointAddress) bool { return v.DnsVisibility }).(pulumi.BoolOutput)
}

// Connect domain name.
func (o GetInstancesRdsMysqlInstanceEndpointAddressOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointAddress) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o GetInstancesRdsMysqlInstanceEndpointAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The IP Address.
func (o GetInstancesRdsMysqlInstanceEndpointAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o GetInstancesRdsMysqlInstanceEndpointAddressOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointAddress) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The Port.
func (o GetInstancesRdsMysqlInstanceEndpointAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointAddress) string { return v.Port }).(pulumi.StringOutput)
}

// The subnet ID of the RDS instance.
func (o GetInstancesRdsMysqlInstanceEndpointAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput) ToGetInstancesRdsMysqlInstanceEndpointAddressArrayOutput() GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput) ToGetInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput) Index(i pulumi.IntInput) GetInstancesRdsMysqlInstanceEndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRdsMysqlInstanceEndpointAddress {
		return vs[0].([]GetInstancesRdsMysqlInstanceEndpointAddress)[vs[1].(int)]
	}).(GetInstancesRdsMysqlInstanceEndpointAddressOutput)
}

type GetInstancesRdsMysqlInstanceEndpointNodeWeight struct {
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The weight of the node.
	Weight int `pulumi:"weight"`
}

// GetInstancesRdsMysqlInstanceEndpointNodeWeightInput is an input type that accepts GetInstancesRdsMysqlInstanceEndpointNodeWeightArgs and GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceEndpointNodeWeightInput` via:
//
//	GetInstancesRdsMysqlInstanceEndpointNodeWeightArgs{...}
type GetInstancesRdsMysqlInstanceEndpointNodeWeightInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceEndpointNodeWeightOutput() GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput
	ToGetInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput
}

type GetInstancesRdsMysqlInstanceEndpointNodeWeightArgs struct {
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetInstancesRdsMysqlInstanceEndpointNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceEndpointNodeWeightArgs) ToGetInstancesRdsMysqlInstanceEndpointNodeWeightOutput() GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return i.ToGetInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceEndpointNodeWeightArgs) ToGetInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput)
}

// GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayInput is an input type that accepts GetInstancesRdsMysqlInstanceEndpointNodeWeightArray and GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayInput` via:
//
//	GetInstancesRdsMysqlInstanceEndpointNodeWeightArray{ GetInstancesRdsMysqlInstanceEndpointNodeWeightArgs{...} }
type GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput() GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput
	ToGetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput
}

type GetInstancesRdsMysqlInstanceEndpointNodeWeightArray []GetInstancesRdsMysqlInstanceEndpointNodeWeightInput

func (GetInstancesRdsMysqlInstanceEndpointNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceEndpointNodeWeightArray) ToGetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput() GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return i.ToGetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceEndpointNodeWeightArray) ToGetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput)
}

type GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput) ToGetInstancesRdsMysqlInstanceEndpointNodeWeightOutput() GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput) ToGetInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return o
}

// Node ID.
func (o GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointNodeWeight) string { return v.NodeId }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointNodeWeight) string { return v.NodeType }).(pulumi.StringOutput)
}

// The weight of the node.
func (o GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceEndpointNodeWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) ToGetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput() GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) ToGetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) Index(i pulumi.IntInput) GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRdsMysqlInstanceEndpointNodeWeight {
		return vs[0].([]GetInstancesRdsMysqlInstanceEndpointNodeWeight)[vs[1].(int)]
	}).(GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput)
}

type GetInstancesRdsMysqlInstanceFeatureState struct {
	// Whether it is enabled. Values:
	// true: Enabled.
	// false: Disabled.
	Enable bool `pulumi:"enable"`
	// Feature name.
	FeatureName string `pulumi:"featureName"`
	// Whether it support this function. Value:
	// true: Supported.
	// false: Not supported.
	Support bool `pulumi:"support"`
}

// GetInstancesRdsMysqlInstanceFeatureStateInput is an input type that accepts GetInstancesRdsMysqlInstanceFeatureStateArgs and GetInstancesRdsMysqlInstanceFeatureStateOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceFeatureStateInput` via:
//
//	GetInstancesRdsMysqlInstanceFeatureStateArgs{...}
type GetInstancesRdsMysqlInstanceFeatureStateInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceFeatureStateOutput() GetInstancesRdsMysqlInstanceFeatureStateOutput
	ToGetInstancesRdsMysqlInstanceFeatureStateOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceFeatureStateOutput
}

type GetInstancesRdsMysqlInstanceFeatureStateArgs struct {
	// Whether it is enabled. Values:
	// true: Enabled.
	// false: Disabled.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Feature name.
	FeatureName pulumi.StringInput `pulumi:"featureName"`
	// Whether it support this function. Value:
	// true: Supported.
	// false: Not supported.
	Support pulumi.BoolInput `pulumi:"support"`
}

func (GetInstancesRdsMysqlInstanceFeatureStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceFeatureState)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceFeatureStateArgs) ToGetInstancesRdsMysqlInstanceFeatureStateOutput() GetInstancesRdsMysqlInstanceFeatureStateOutput {
	return i.ToGetInstancesRdsMysqlInstanceFeatureStateOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceFeatureStateArgs) ToGetInstancesRdsMysqlInstanceFeatureStateOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceFeatureStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceFeatureStateOutput)
}

// GetInstancesRdsMysqlInstanceFeatureStateArrayInput is an input type that accepts GetInstancesRdsMysqlInstanceFeatureStateArray and GetInstancesRdsMysqlInstanceFeatureStateArrayOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceFeatureStateArrayInput` via:
//
//	GetInstancesRdsMysqlInstanceFeatureStateArray{ GetInstancesRdsMysqlInstanceFeatureStateArgs{...} }
type GetInstancesRdsMysqlInstanceFeatureStateArrayInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceFeatureStateArrayOutput() GetInstancesRdsMysqlInstanceFeatureStateArrayOutput
	ToGetInstancesRdsMysqlInstanceFeatureStateArrayOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceFeatureStateArrayOutput
}

type GetInstancesRdsMysqlInstanceFeatureStateArray []GetInstancesRdsMysqlInstanceFeatureStateInput

func (GetInstancesRdsMysqlInstanceFeatureStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceFeatureState)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceFeatureStateArray) ToGetInstancesRdsMysqlInstanceFeatureStateArrayOutput() GetInstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return i.ToGetInstancesRdsMysqlInstanceFeatureStateArrayOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceFeatureStateArray) ToGetInstancesRdsMysqlInstanceFeatureStateArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceFeatureStateArrayOutput)
}

type GetInstancesRdsMysqlInstanceFeatureStateOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceFeatureStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceFeatureState)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceFeatureStateOutput) ToGetInstancesRdsMysqlInstanceFeatureStateOutput() GetInstancesRdsMysqlInstanceFeatureStateOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceFeatureStateOutput) ToGetInstancesRdsMysqlInstanceFeatureStateOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceFeatureStateOutput {
	return o
}

// Whether it is enabled. Values:
// true: Enabled.
// false: Disabled.
func (o GetInstancesRdsMysqlInstanceFeatureStateOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceFeatureState) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Feature name.
func (o GetInstancesRdsMysqlInstanceFeatureStateOutput) FeatureName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceFeatureState) string { return v.FeatureName }).(pulumi.StringOutput)
}

// Whether it support this function. Value:
// true: Supported.
// false: Not supported.
func (o GetInstancesRdsMysqlInstanceFeatureStateOutput) Support() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceFeatureState) bool { return v.Support }).(pulumi.BoolOutput)
}

type GetInstancesRdsMysqlInstanceFeatureStateArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceFeatureStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceFeatureState)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceFeatureStateArrayOutput) ToGetInstancesRdsMysqlInstanceFeatureStateArrayOutput() GetInstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceFeatureStateArrayOutput) ToGetInstancesRdsMysqlInstanceFeatureStateArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceFeatureStateArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceFeatureStateArrayOutput) Index(i pulumi.IntInput) GetInstancesRdsMysqlInstanceFeatureStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRdsMysqlInstanceFeatureState {
		return vs[0].([]GetInstancesRdsMysqlInstanceFeatureState)[vs[1].(int)]
	}).(GetInstancesRdsMysqlInstanceFeatureStateOutput)
}

type GetInstancesRdsMysqlInstanceMaintenanceWindow struct {
	// DayKind of maintainable window. Value: Week. Month.
	DayKind string `pulumi:"dayKind"`
	// Days of maintainable window of the month.
	DayOfMonths []int `pulumi:"dayOfMonths"`
	// Days of maintainable window of the week.
	DayOfWeeks []string `pulumi:"dayOfWeeks"`
	// The maintainable time of the RDS instance.
	MaintenanceTime string `pulumi:"maintenanceTime"`
}

// GetInstancesRdsMysqlInstanceMaintenanceWindowInput is an input type that accepts GetInstancesRdsMysqlInstanceMaintenanceWindowArgs and GetInstancesRdsMysqlInstanceMaintenanceWindowOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceMaintenanceWindowInput` via:
//
//	GetInstancesRdsMysqlInstanceMaintenanceWindowArgs{...}
type GetInstancesRdsMysqlInstanceMaintenanceWindowInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceMaintenanceWindowOutput() GetInstancesRdsMysqlInstanceMaintenanceWindowOutput
	ToGetInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceMaintenanceWindowOutput
}

type GetInstancesRdsMysqlInstanceMaintenanceWindowArgs struct {
	// DayKind of maintainable window. Value: Week. Month.
	DayKind pulumi.StringInput `pulumi:"dayKind"`
	// Days of maintainable window of the month.
	DayOfMonths pulumi.IntArrayInput `pulumi:"dayOfMonths"`
	// Days of maintainable window of the week.
	DayOfWeeks pulumi.StringArrayInput `pulumi:"dayOfWeeks"`
	// The maintainable time of the RDS instance.
	MaintenanceTime pulumi.StringInput `pulumi:"maintenanceTime"`
}

func (GetInstancesRdsMysqlInstanceMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceMaintenanceWindowArgs) ToGetInstancesRdsMysqlInstanceMaintenanceWindowOutput() GetInstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return i.ToGetInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceMaintenanceWindowArgs) ToGetInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceMaintenanceWindowOutput)
}

// GetInstancesRdsMysqlInstanceMaintenanceWindowArrayInput is an input type that accepts GetInstancesRdsMysqlInstanceMaintenanceWindowArray and GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceMaintenanceWindowArrayInput` via:
//
//	GetInstancesRdsMysqlInstanceMaintenanceWindowArray{ GetInstancesRdsMysqlInstanceMaintenanceWindowArgs{...} }
type GetInstancesRdsMysqlInstanceMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput() GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput
	ToGetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput
}

type GetInstancesRdsMysqlInstanceMaintenanceWindowArray []GetInstancesRdsMysqlInstanceMaintenanceWindowInput

func (GetInstancesRdsMysqlInstanceMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceMaintenanceWindowArray) ToGetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput() GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return i.ToGetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceMaintenanceWindowArray) ToGetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput)
}

type GetInstancesRdsMysqlInstanceMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceMaintenanceWindowOutput) ToGetInstancesRdsMysqlInstanceMaintenanceWindowOutput() GetInstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceMaintenanceWindowOutput) ToGetInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return o
}

// DayKind of maintainable window. Value: Week. Month.
func (o GetInstancesRdsMysqlInstanceMaintenanceWindowOutput) DayKind() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceMaintenanceWindow) string { return v.DayKind }).(pulumi.StringOutput)
}

// Days of maintainable window of the month.
func (o GetInstancesRdsMysqlInstanceMaintenanceWindowOutput) DayOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceMaintenanceWindow) []int { return v.DayOfMonths }).(pulumi.IntArrayOutput)
}

// Days of maintainable window of the week.
func (o GetInstancesRdsMysqlInstanceMaintenanceWindowOutput) DayOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceMaintenanceWindow) []string { return v.DayOfWeeks }).(pulumi.StringArrayOutput)
}

// The maintainable time of the RDS instance.
func (o GetInstancesRdsMysqlInstanceMaintenanceWindowOutput) MaintenanceTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceMaintenanceWindow) string { return v.MaintenanceTime }).(pulumi.StringOutput)
}

type GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) ToGetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput() GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) ToGetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) GetInstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRdsMysqlInstanceMaintenanceWindow {
		return vs[0].([]GetInstancesRdsMysqlInstanceMaintenanceWindow)[vs[1].(int)]
	}).(GetInstancesRdsMysqlInstanceMaintenanceWindowOutput)
}

type GetInstancesRdsMysqlInstanceNode struct {
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus string `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size.
	VCpu int `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
}

// GetInstancesRdsMysqlInstanceNodeInput is an input type that accepts GetInstancesRdsMysqlInstanceNodeArgs and GetInstancesRdsMysqlInstanceNodeOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceNodeInput` via:
//
//	GetInstancesRdsMysqlInstanceNodeArgs{...}
type GetInstancesRdsMysqlInstanceNodeInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceNodeOutput() GetInstancesRdsMysqlInstanceNodeOutput
	ToGetInstancesRdsMysqlInstanceNodeOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceNodeOutput
}

type GetInstancesRdsMysqlInstanceNodeArgs struct {
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetInstancesRdsMysqlInstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceNodeArgs) ToGetInstancesRdsMysqlInstanceNodeOutput() GetInstancesRdsMysqlInstanceNodeOutput {
	return i.ToGetInstancesRdsMysqlInstanceNodeOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceNodeArgs) ToGetInstancesRdsMysqlInstanceNodeOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceNodeOutput)
}

// GetInstancesRdsMysqlInstanceNodeArrayInput is an input type that accepts GetInstancesRdsMysqlInstanceNodeArray and GetInstancesRdsMysqlInstanceNodeArrayOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceNodeArrayInput` via:
//
//	GetInstancesRdsMysqlInstanceNodeArray{ GetInstancesRdsMysqlInstanceNodeArgs{...} }
type GetInstancesRdsMysqlInstanceNodeArrayInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceNodeArrayOutput() GetInstancesRdsMysqlInstanceNodeArrayOutput
	ToGetInstancesRdsMysqlInstanceNodeArrayOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceNodeArrayOutput
}

type GetInstancesRdsMysqlInstanceNodeArray []GetInstancesRdsMysqlInstanceNodeInput

func (GetInstancesRdsMysqlInstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceNodeArray) ToGetInstancesRdsMysqlInstanceNodeArrayOutput() GetInstancesRdsMysqlInstanceNodeArrayOutput {
	return i.ToGetInstancesRdsMysqlInstanceNodeArrayOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceNodeArray) ToGetInstancesRdsMysqlInstanceNodeArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceNodeArrayOutput)
}

type GetInstancesRdsMysqlInstanceNodeOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceNodeOutput) ToGetInstancesRdsMysqlInstanceNodeOutput() GetInstancesRdsMysqlInstanceNodeOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceNodeOutput) ToGetInstancesRdsMysqlInstanceNodeOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceNodeOutput {
	return o
}

// Node creation local time.
func (o GetInstancesRdsMysqlInstanceNodeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o GetInstancesRdsMysqlInstanceNodeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Memory size in GB.
func (o GetInstancesRdsMysqlInstanceNodeOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) int { return v.Memory }).(pulumi.IntOutput)
}

// Node ID.
func (o GetInstancesRdsMysqlInstanceNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) string { return v.NodeId }).(pulumi.StringOutput)
}

// General instance type, different from Custom instance type.
func (o GetInstancesRdsMysqlInstanceNodeOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Node state, value: aligned with instance state.
func (o GetInstancesRdsMysqlInstanceNodeOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o GetInstancesRdsMysqlInstanceNodeOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) string { return v.NodeType }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o GetInstancesRdsMysqlInstanceNodeOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) string { return v.RegionId }).(pulumi.StringOutput)
}

// The update time of the RDS instance.
func (o GetInstancesRdsMysqlInstanceNodeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size.
func (o GetInstancesRdsMysqlInstanceNodeOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) int { return v.VCpu }).(pulumi.IntOutput)
}

// The available zone of the RDS instance.
func (o GetInstancesRdsMysqlInstanceNodeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceNode) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetInstancesRdsMysqlInstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceNodeArrayOutput) ToGetInstancesRdsMysqlInstanceNodeArrayOutput() GetInstancesRdsMysqlInstanceNodeArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceNodeArrayOutput) ToGetInstancesRdsMysqlInstanceNodeArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceNodeArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceNodeArrayOutput) Index(i pulumi.IntInput) GetInstancesRdsMysqlInstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRdsMysqlInstanceNode {
		return vs[0].([]GetInstancesRdsMysqlInstanceNode)[vs[1].(int)]
	}).(GetInstancesRdsMysqlInstanceNodeOutput)
}

type GetInstancesRdsMysqlInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInstancesRdsMysqlInstanceTagInput is an input type that accepts GetInstancesRdsMysqlInstanceTagArgs and GetInstancesRdsMysqlInstanceTagOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceTagInput` via:
//
//	GetInstancesRdsMysqlInstanceTagArgs{...}
type GetInstancesRdsMysqlInstanceTagInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceTagOutput() GetInstancesRdsMysqlInstanceTagOutput
	ToGetInstancesRdsMysqlInstanceTagOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceTagOutput
}

type GetInstancesRdsMysqlInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesRdsMysqlInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceTagArgs) ToGetInstancesRdsMysqlInstanceTagOutput() GetInstancesRdsMysqlInstanceTagOutput {
	return i.ToGetInstancesRdsMysqlInstanceTagOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceTagArgs) ToGetInstancesRdsMysqlInstanceTagOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceTagOutput)
}

// GetInstancesRdsMysqlInstanceTagArrayInput is an input type that accepts GetInstancesRdsMysqlInstanceTagArray and GetInstancesRdsMysqlInstanceTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesRdsMysqlInstanceTagArrayInput` via:
//
//	GetInstancesRdsMysqlInstanceTagArray{ GetInstancesRdsMysqlInstanceTagArgs{...} }
type GetInstancesRdsMysqlInstanceTagArrayInput interface {
	pulumi.Input

	ToGetInstancesRdsMysqlInstanceTagArrayOutput() GetInstancesRdsMysqlInstanceTagArrayOutput
	ToGetInstancesRdsMysqlInstanceTagArrayOutputWithContext(context.Context) GetInstancesRdsMysqlInstanceTagArrayOutput
}

type GetInstancesRdsMysqlInstanceTagArray []GetInstancesRdsMysqlInstanceTagInput

func (GetInstancesRdsMysqlInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (i GetInstancesRdsMysqlInstanceTagArray) ToGetInstancesRdsMysqlInstanceTagArrayOutput() GetInstancesRdsMysqlInstanceTagArrayOutput {
	return i.ToGetInstancesRdsMysqlInstanceTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesRdsMysqlInstanceTagArray) ToGetInstancesRdsMysqlInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRdsMysqlInstanceTagArrayOutput)
}

type GetInstancesRdsMysqlInstanceTagOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceTagOutput) ToGetInstancesRdsMysqlInstanceTagOutput() GetInstancesRdsMysqlInstanceTagOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceTagOutput) ToGetInstancesRdsMysqlInstanceTagOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o GetInstancesRdsMysqlInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInstancesRdsMysqlInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRdsMysqlInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesRdsMysqlInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRdsMysqlInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (o GetInstancesRdsMysqlInstanceTagArrayOutput) ToGetInstancesRdsMysqlInstanceTagArrayOutput() GetInstancesRdsMysqlInstanceTagArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceTagArrayOutput) ToGetInstancesRdsMysqlInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesRdsMysqlInstanceTagArrayOutput {
	return o
}

func (o GetInstancesRdsMysqlInstanceTagArrayOutput) Index(i pulumi.IntInput) GetInstancesRdsMysqlInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRdsMysqlInstanceTag {
		return vs[0].([]GetInstancesRdsMysqlInstanceTag)[vs[1].(int)]
	}).(GetInstancesRdsMysqlInstanceTagOutput)
}

type GetInstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInstancesTagInput is an input type that accepts GetInstancesTagArgs and GetInstancesTagOutput values.
// You can construct a concrete instance of `GetInstancesTagInput` via:
//
//	GetInstancesTagArgs{...}
type GetInstancesTagInput interface {
	pulumi.Input

	ToGetInstancesTagOutput() GetInstancesTagOutput
	ToGetInstancesTagOutputWithContext(context.Context) GetInstancesTagOutput
}

type GetInstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return i.ToGetInstancesTagOutputWithContext(context.Background())
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagOutput)
}

// GetInstancesTagArrayInput is an input type that accepts GetInstancesTagArray and GetInstancesTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesTagArrayInput` via:
//
//	GetInstancesTagArray{ GetInstancesTagArgs{...} }
type GetInstancesTagArrayInput interface {
	pulumi.Input

	ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput
	ToGetInstancesTagArrayOutputWithContext(context.Context) GetInstancesTagArrayOutput
}

type GetInstancesTagArray []GetInstancesTagInput

func (GetInstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return i.ToGetInstancesTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagArrayOutput)
}

type GetInstancesTagOutput struct{ *pulumi.OutputState }

func (GetInstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return o
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return o
}

// The Key of Tags.
func (o GetInstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) Index(i pulumi.IntInput) GetInstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesTag {
		return vs[0].([]GetInstancesTag)[vs[1].(int)]
	}).(GetInstancesTagOutput)
}

type GetParameterTemplatesTemplate struct {
	// The account ID.
	AccountId string `pulumi:"accountId"`
	// Creation time.
	CreateTime string `pulumi:"createTime"`
	// Does the template contain parameters that require restart.
	NeedRestart bool `pulumi:"needRestart"`
	// The number of parameters contained in the template.
	ParameterNum int `pulumi:"parameterNum"`
	// The project to which the template belongs.
	ProjectName string `pulumi:"projectName"`
	// Template category, with a value of DBEngine (database engine parameters).
	TemplateCategory string `pulumi:"templateCategory"`
	// Parameter template description.
	TemplateDesc string `pulumi:"templateDesc"`
	// Parameter template ID.
	TemplateId string `pulumi:"templateId"`
	// Parameter template name.
	TemplateName string `pulumi:"templateName"`
	// Parameters contained in the template.
	TemplateParams []GetParameterTemplatesTemplateTemplateParam `pulumi:"templateParams"`
	// Parameter template source, value range: System. User.
	TemplateSource string `pulumi:"templateSource"`
	// Database type of parameter template. The default value is Mysql.
	TemplateType string `pulumi:"templateType"`
	// Database version of parameter template. Value range:
	// MySQL_5_7: Default value. MySQL 5.7 version.
	// MySQL_8_0: MySQL 8.0 version.
	TemplateTypeVersion string `pulumi:"templateTypeVersion"`
	// Modification time of the template.
	UpdateTime string `pulumi:"updateTime"`
}

// GetParameterTemplatesTemplateInput is an input type that accepts GetParameterTemplatesTemplateArgs and GetParameterTemplatesTemplateOutput values.
// You can construct a concrete instance of `GetParameterTemplatesTemplateInput` via:
//
//	GetParameterTemplatesTemplateArgs{...}
type GetParameterTemplatesTemplateInput interface {
	pulumi.Input

	ToGetParameterTemplatesTemplateOutput() GetParameterTemplatesTemplateOutput
	ToGetParameterTemplatesTemplateOutputWithContext(context.Context) GetParameterTemplatesTemplateOutput
}

type GetParameterTemplatesTemplateArgs struct {
	// The account ID.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Creation time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Does the template contain parameters that require restart.
	NeedRestart pulumi.BoolInput `pulumi:"needRestart"`
	// The number of parameters contained in the template.
	ParameterNum pulumi.IntInput `pulumi:"parameterNum"`
	// The project to which the template belongs.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Template category, with a value of DBEngine (database engine parameters).
	TemplateCategory pulumi.StringInput `pulumi:"templateCategory"`
	// Parameter template description.
	TemplateDesc pulumi.StringInput `pulumi:"templateDesc"`
	// Parameter template ID.
	TemplateId pulumi.StringInput `pulumi:"templateId"`
	// Parameter template name.
	TemplateName pulumi.StringInput `pulumi:"templateName"`
	// Parameters contained in the template.
	TemplateParams GetParameterTemplatesTemplateTemplateParamArrayInput `pulumi:"templateParams"`
	// Parameter template source, value range: System. User.
	TemplateSource pulumi.StringInput `pulumi:"templateSource"`
	// Database type of parameter template. The default value is Mysql.
	TemplateType pulumi.StringInput `pulumi:"templateType"`
	// Database version of parameter template. Value range:
	// MySQL_5_7: Default value. MySQL 5.7 version.
	// MySQL_8_0: MySQL 8.0 version.
	TemplateTypeVersion pulumi.StringInput `pulumi:"templateTypeVersion"`
	// Modification time of the template.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (GetParameterTemplatesTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParameterTemplatesTemplate)(nil)).Elem()
}

func (i GetParameterTemplatesTemplateArgs) ToGetParameterTemplatesTemplateOutput() GetParameterTemplatesTemplateOutput {
	return i.ToGetParameterTemplatesTemplateOutputWithContext(context.Background())
}

func (i GetParameterTemplatesTemplateArgs) ToGetParameterTemplatesTemplateOutputWithContext(ctx context.Context) GetParameterTemplatesTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetParameterTemplatesTemplateOutput)
}

// GetParameterTemplatesTemplateArrayInput is an input type that accepts GetParameterTemplatesTemplateArray and GetParameterTemplatesTemplateArrayOutput values.
// You can construct a concrete instance of `GetParameterTemplatesTemplateArrayInput` via:
//
//	GetParameterTemplatesTemplateArray{ GetParameterTemplatesTemplateArgs{...} }
type GetParameterTemplatesTemplateArrayInput interface {
	pulumi.Input

	ToGetParameterTemplatesTemplateArrayOutput() GetParameterTemplatesTemplateArrayOutput
	ToGetParameterTemplatesTemplateArrayOutputWithContext(context.Context) GetParameterTemplatesTemplateArrayOutput
}

type GetParameterTemplatesTemplateArray []GetParameterTemplatesTemplateInput

func (GetParameterTemplatesTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetParameterTemplatesTemplate)(nil)).Elem()
}

func (i GetParameterTemplatesTemplateArray) ToGetParameterTemplatesTemplateArrayOutput() GetParameterTemplatesTemplateArrayOutput {
	return i.ToGetParameterTemplatesTemplateArrayOutputWithContext(context.Background())
}

func (i GetParameterTemplatesTemplateArray) ToGetParameterTemplatesTemplateArrayOutputWithContext(ctx context.Context) GetParameterTemplatesTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetParameterTemplatesTemplateArrayOutput)
}

type GetParameterTemplatesTemplateOutput struct{ *pulumi.OutputState }

func (GetParameterTemplatesTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParameterTemplatesTemplate)(nil)).Elem()
}

func (o GetParameterTemplatesTemplateOutput) ToGetParameterTemplatesTemplateOutput() GetParameterTemplatesTemplateOutput {
	return o
}

func (o GetParameterTemplatesTemplateOutput) ToGetParameterTemplatesTemplateOutputWithContext(ctx context.Context) GetParameterTemplatesTemplateOutput {
	return o
}

// The account ID.
func (o GetParameterTemplatesTemplateOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.AccountId }).(pulumi.StringOutput)
}

// Creation time.
func (o GetParameterTemplatesTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Does the template contain parameters that require restart.
func (o GetParameterTemplatesTemplateOutput) NeedRestart() pulumi.BoolOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) bool { return v.NeedRestart }).(pulumi.BoolOutput)
}

// The number of parameters contained in the template.
func (o GetParameterTemplatesTemplateOutput) ParameterNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) int { return v.ParameterNum }).(pulumi.IntOutput)
}

// The project to which the template belongs.
func (o GetParameterTemplatesTemplateOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Template category, with a value of DBEngine (database engine parameters).
func (o GetParameterTemplatesTemplateOutput) TemplateCategory() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.TemplateCategory }).(pulumi.StringOutput)
}

// Parameter template description.
func (o GetParameterTemplatesTemplateOutput) TemplateDesc() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.TemplateDesc }).(pulumi.StringOutput)
}

// Parameter template ID.
func (o GetParameterTemplatesTemplateOutput) TemplateId() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.TemplateId }).(pulumi.StringOutput)
}

// Parameter template name.
func (o GetParameterTemplatesTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.TemplateName }).(pulumi.StringOutput)
}

// Parameters contained in the template.
func (o GetParameterTemplatesTemplateOutput) TemplateParams() GetParameterTemplatesTemplateTemplateParamArrayOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) []GetParameterTemplatesTemplateTemplateParam {
		return v.TemplateParams
	}).(GetParameterTemplatesTemplateTemplateParamArrayOutput)
}

// Parameter template source, value range: System. User.
func (o GetParameterTemplatesTemplateOutput) TemplateSource() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.TemplateSource }).(pulumi.StringOutput)
}

// Database type of parameter template. The default value is Mysql.
func (o GetParameterTemplatesTemplateOutput) TemplateType() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.TemplateType }).(pulumi.StringOutput)
}

// Database version of parameter template. Value range:
// MySQL_5_7: Default value. MySQL 5.7 version.
// MySQL_8_0: MySQL 8.0 version.
func (o GetParameterTemplatesTemplateOutput) TemplateTypeVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.TemplateTypeVersion }).(pulumi.StringOutput)
}

// Modification time of the template.
func (o GetParameterTemplatesTemplateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplate) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type GetParameterTemplatesTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetParameterTemplatesTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetParameterTemplatesTemplate)(nil)).Elem()
}

func (o GetParameterTemplatesTemplateArrayOutput) ToGetParameterTemplatesTemplateArrayOutput() GetParameterTemplatesTemplateArrayOutput {
	return o
}

func (o GetParameterTemplatesTemplateArrayOutput) ToGetParameterTemplatesTemplateArrayOutputWithContext(ctx context.Context) GetParameterTemplatesTemplateArrayOutput {
	return o
}

func (o GetParameterTemplatesTemplateArrayOutput) Index(i pulumi.IntInput) GetParameterTemplatesTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetParameterTemplatesTemplate {
		return vs[0].([]GetParameterTemplatesTemplate)[vs[1].(int)]
	}).(GetParameterTemplatesTemplateOutput)
}

type GetParameterTemplatesTemplateTemplateParam struct {
	// Parameter default value.
	DefaultValue string `pulumi:"defaultValue"`
	// Parameter description.
	Description string `pulumi:"description"`
	// Instance parameter name.
	// Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	Name string `pulumi:"name"`
	// Is it necessary to restart the instance for the changes to take effect.
	Restart bool `pulumi:"restart"`
	// Parameter running value.
	// Description: When making requests with CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	RunningValue string `pulumi:"runningValue"`
	// Value range of parameters.
	ValueRange string `pulumi:"valueRange"`
}

// GetParameterTemplatesTemplateTemplateParamInput is an input type that accepts GetParameterTemplatesTemplateTemplateParamArgs and GetParameterTemplatesTemplateTemplateParamOutput values.
// You can construct a concrete instance of `GetParameterTemplatesTemplateTemplateParamInput` via:
//
//	GetParameterTemplatesTemplateTemplateParamArgs{...}
type GetParameterTemplatesTemplateTemplateParamInput interface {
	pulumi.Input

	ToGetParameterTemplatesTemplateTemplateParamOutput() GetParameterTemplatesTemplateTemplateParamOutput
	ToGetParameterTemplatesTemplateTemplateParamOutputWithContext(context.Context) GetParameterTemplatesTemplateTemplateParamOutput
}

type GetParameterTemplatesTemplateTemplateParamArgs struct {
	// Parameter default value.
	DefaultValue pulumi.StringInput `pulumi:"defaultValue"`
	// Parameter description.
	Description pulumi.StringInput `pulumi:"description"`
	// Instance parameter name.
	// Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	Name pulumi.StringInput `pulumi:"name"`
	// Is it necessary to restart the instance for the changes to take effect.
	Restart pulumi.BoolInput `pulumi:"restart"`
	// Parameter running value.
	// Description: When making requests with CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
	RunningValue pulumi.StringInput `pulumi:"runningValue"`
	// Value range of parameters.
	ValueRange pulumi.StringInput `pulumi:"valueRange"`
}

func (GetParameterTemplatesTemplateTemplateParamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParameterTemplatesTemplateTemplateParam)(nil)).Elem()
}

func (i GetParameterTemplatesTemplateTemplateParamArgs) ToGetParameterTemplatesTemplateTemplateParamOutput() GetParameterTemplatesTemplateTemplateParamOutput {
	return i.ToGetParameterTemplatesTemplateTemplateParamOutputWithContext(context.Background())
}

func (i GetParameterTemplatesTemplateTemplateParamArgs) ToGetParameterTemplatesTemplateTemplateParamOutputWithContext(ctx context.Context) GetParameterTemplatesTemplateTemplateParamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetParameterTemplatesTemplateTemplateParamOutput)
}

// GetParameterTemplatesTemplateTemplateParamArrayInput is an input type that accepts GetParameterTemplatesTemplateTemplateParamArray and GetParameterTemplatesTemplateTemplateParamArrayOutput values.
// You can construct a concrete instance of `GetParameterTemplatesTemplateTemplateParamArrayInput` via:
//
//	GetParameterTemplatesTemplateTemplateParamArray{ GetParameterTemplatesTemplateTemplateParamArgs{...} }
type GetParameterTemplatesTemplateTemplateParamArrayInput interface {
	pulumi.Input

	ToGetParameterTemplatesTemplateTemplateParamArrayOutput() GetParameterTemplatesTemplateTemplateParamArrayOutput
	ToGetParameterTemplatesTemplateTemplateParamArrayOutputWithContext(context.Context) GetParameterTemplatesTemplateTemplateParamArrayOutput
}

type GetParameterTemplatesTemplateTemplateParamArray []GetParameterTemplatesTemplateTemplateParamInput

func (GetParameterTemplatesTemplateTemplateParamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetParameterTemplatesTemplateTemplateParam)(nil)).Elem()
}

func (i GetParameterTemplatesTemplateTemplateParamArray) ToGetParameterTemplatesTemplateTemplateParamArrayOutput() GetParameterTemplatesTemplateTemplateParamArrayOutput {
	return i.ToGetParameterTemplatesTemplateTemplateParamArrayOutputWithContext(context.Background())
}

func (i GetParameterTemplatesTemplateTemplateParamArray) ToGetParameterTemplatesTemplateTemplateParamArrayOutputWithContext(ctx context.Context) GetParameterTemplatesTemplateTemplateParamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetParameterTemplatesTemplateTemplateParamArrayOutput)
}

type GetParameterTemplatesTemplateTemplateParamOutput struct{ *pulumi.OutputState }

func (GetParameterTemplatesTemplateTemplateParamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetParameterTemplatesTemplateTemplateParam)(nil)).Elem()
}

func (o GetParameterTemplatesTemplateTemplateParamOutput) ToGetParameterTemplatesTemplateTemplateParamOutput() GetParameterTemplatesTemplateTemplateParamOutput {
	return o
}

func (o GetParameterTemplatesTemplateTemplateParamOutput) ToGetParameterTemplatesTemplateTemplateParamOutputWithContext(ctx context.Context) GetParameterTemplatesTemplateTemplateParamOutput {
	return o
}

// Parameter default value.
func (o GetParameterTemplatesTemplateTemplateParamOutput) DefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplateTemplateParam) string { return v.DefaultValue }).(pulumi.StringOutput)
}

// Parameter description.
func (o GetParameterTemplatesTemplateTemplateParamOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplateTemplateParam) string { return v.Description }).(pulumi.StringOutput)
}

// Instance parameter name.
// Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
func (o GetParameterTemplatesTemplateTemplateParamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplateTemplateParam) string { return v.Name }).(pulumi.StringOutput)
}

// Is it necessary to restart the instance for the changes to take effect.
func (o GetParameterTemplatesTemplateTemplateParamOutput) Restart() pulumi.BoolOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplateTemplateParam) bool { return v.Restart }).(pulumi.BoolOutput)
}

// Parameter running value.
// Description: When making requests with CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
func (o GetParameterTemplatesTemplateTemplateParamOutput) RunningValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplateTemplateParam) string { return v.RunningValue }).(pulumi.StringOutput)
}

// Value range of parameters.
func (o GetParameterTemplatesTemplateTemplateParamOutput) ValueRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetParameterTemplatesTemplateTemplateParam) string { return v.ValueRange }).(pulumi.StringOutput)
}

type GetParameterTemplatesTemplateTemplateParamArrayOutput struct{ *pulumi.OutputState }

func (GetParameterTemplatesTemplateTemplateParamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetParameterTemplatesTemplateTemplateParam)(nil)).Elem()
}

func (o GetParameterTemplatesTemplateTemplateParamArrayOutput) ToGetParameterTemplatesTemplateTemplateParamArrayOutput() GetParameterTemplatesTemplateTemplateParamArrayOutput {
	return o
}

func (o GetParameterTemplatesTemplateTemplateParamArrayOutput) ToGetParameterTemplatesTemplateTemplateParamArrayOutputWithContext(ctx context.Context) GetParameterTemplatesTemplateTemplateParamArrayOutput {
	return o
}

func (o GetParameterTemplatesTemplateTemplateParamArrayOutput) Index(i pulumi.IntInput) GetParameterTemplatesTemplateTemplateParamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetParameterTemplatesTemplateTemplateParam {
		return vs[0].([]GetParameterTemplatesTemplateTemplateParam)[vs[1].(int)]
	}).(GetParameterTemplatesTemplateTemplateParamOutput)
}

type GetRegionsRegion struct {
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The name of region.
	RegionName string `pulumi:"regionName"`
}

// GetRegionsRegionInput is an input type that accepts GetRegionsRegionArgs and GetRegionsRegionOutput values.
// You can construct a concrete instance of `GetRegionsRegionInput` via:
//
//	GetRegionsRegionArgs{...}
type GetRegionsRegionInput interface {
	pulumi.Input

	ToGetRegionsRegionOutput() GetRegionsRegionOutput
	ToGetRegionsRegionOutputWithContext(context.Context) GetRegionsRegionOutput
}

type GetRegionsRegionArgs struct {
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The name of region.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (GetRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return i.ToGetRegionsRegionOutputWithContext(context.Background())
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionOutput)
}

// GetRegionsRegionArrayInput is an input type that accepts GetRegionsRegionArray and GetRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetRegionsRegionArrayInput` via:
//
//	GetRegionsRegionArray{ GetRegionsRegionArgs{...} }
type GetRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput
	ToGetRegionsRegionArrayOutputWithContext(context.Context) GetRegionsRegionArrayOutput
}

type GetRegionsRegionArray []GetRegionsRegionInput

func (GetRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return i.ToGetRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionArrayOutput)
}

type GetRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return o
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return o
}

// The id of the region.
func (o GetRegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

// The name of region.
func (o GetRegionsRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.RegionName }).(pulumi.StringOutput)
}

type GetRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionsRegion {
		return vs[0].([]GetRegionsRegion)[vs[1].(int)]
	}).(GetRegionsRegionOutput)
}

type GetZonesZone struct {
	// The description of the zone.
	Description string `pulumi:"description"`
	// The id of the zone.
	Id string `pulumi:"id"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName string `pulumi:"zoneName"`
}

// GetZonesZoneInput is an input type that accepts GetZonesZoneArgs and GetZonesZoneOutput values.
// You can construct a concrete instance of `GetZonesZoneInput` via:
//
//	GetZonesZoneArgs{...}
type GetZonesZoneInput interface {
	pulumi.Input

	ToGetZonesZoneOutput() GetZonesZoneOutput
	ToGetZonesZoneOutputWithContext(context.Context) GetZonesZoneOutput
}

type GetZonesZoneArgs struct {
	// The description of the zone.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (GetZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return i.ToGetZonesZoneOutputWithContext(context.Background())
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneOutput)
}

// GetZonesZoneArrayInput is an input type that accepts GetZonesZoneArray and GetZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetZonesZoneArrayInput` via:
//
//	GetZonesZoneArray{ GetZonesZoneArgs{...} }
type GetZonesZoneArrayInput interface {
	pulumi.Input

	ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput
	ToGetZonesZoneArrayOutputWithContext(context.Context) GetZonesZoneArrayOutput
}

type GetZonesZoneArray []GetZonesZoneInput

func (GetZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return i.ToGetZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneArrayOutput)
}

type GetZonesZoneOutput struct{ *pulumi.OutputState }

func (GetZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return o
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return o
}

// The description of the zone.
func (o GetZonesZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the zone.
func (o GetZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the zone.
func (o GetZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

// The name of the zone.
func (o GetZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type GetZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) Index(i pulumi.IntInput) GetZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesZone {
		return vs[0].([]GetZonesZone)[vs[1].(int)]
	}).(GetZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountAccountPrivilegeInput)(nil)).Elem(), AccountAccountPrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountAccountPrivilegeArrayInput)(nil)).Elem(), AccountAccountPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountInput)(nil)).Elem(), AccountsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountArrayInput)(nil)).Elem(), AccountsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountAccountPrivilegeInput)(nil)).Elem(), AccountsAccountAccountPrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountAccountPrivilegeArrayInput)(nil)).Elem(), AccountsAccountAccountPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistSecurityGroupBindInfoInput)(nil)).Elem(), AllowlistSecurityGroupBindInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistSecurityGroupBindInfoArrayInput)(nil)).Elem(), AllowlistSecurityGroupBindInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListInput)(nil)).Elem(), AllowlistsAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListArrayInput)(nil)).Elem(), AllowlistsAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListAssociatedInstanceInput)(nil)).Elem(), AllowlistsAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListAssociatedInstanceArrayInput)(nil)).Elem(), AllowlistsAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListSecurityGroupBindInfoInput)(nil)).Elem(), AllowlistsAllowListSecurityGroupBindInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListSecurityGroupBindInfoArrayInput)(nil)).Elem(), AllowlistsAllowListSecurityGroupBindInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupBackupMetaInput)(nil)).Elem(), BackupBackupMetaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupBackupMetaArrayInput)(nil)).Elem(), BackupBackupMetaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupInput)(nil)).Elem(), BackupsBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupArrayInput)(nil)).Elem(), BackupsBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupDbTableInfoInput)(nil)).Elem(), BackupsBackupDbTableInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupDbTableInfoArrayInput)(nil)).Elem(), BackupsBackupDbTableInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseInput)(nil)).Elem(), DatabasesDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseArrayInput)(nil)).Elem(), DatabasesDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseDatabasePrivilegeInput)(nil)).Elem(), DatabasesDatabaseDatabasePrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseDatabasePrivilegeArrayInput)(nil)).Elem(), DatabasesDatabaseDatabasePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointReadOnlyNodeWeightInput)(nil)).Elem(), EndpointReadOnlyNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointReadOnlyNodeWeightArrayInput)(nil)).Elem(), EndpointReadOnlyNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointInput)(nil)).Elem(), EndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointArrayInput)(nil)).Elem(), EndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointAddressInput)(nil)).Elem(), EndpointsEndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointAddressArrayInput)(nil)).Elem(), EndpointsEndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointReadOnlyNodeWeightInput)(nil)).Elem(), EndpointsEndpointReadOnlyNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointReadOnlyNodeWeightArrayInput)(nil)).Elem(), EndpointsEndpointReadOnlyNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeDetailInput)(nil)).Elem(), InstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeDetailArrayInput)(nil)).Elem(), InstanceChargeDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoPtrInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointInput)(nil)).Elem(), InstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointArrayInput)(nil)).Elem(), InstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointAddressInput)(nil)).Elem(), InstanceEndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointAddressArrayInput)(nil)).Elem(), InstanceEndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointNodeWeightInput)(nil)).Elem(), InstanceEndpointNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointNodeWeightArrayInput)(nil)).Elem(), InstanceEndpointNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFeatureStateInput)(nil)).Elem(), InstanceFeatureStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceFeatureStateArrayInput)(nil)).Elem(), InstanceFeatureStateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMaintenanceWindowInput)(nil)).Elem(), InstanceMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMaintenanceWindowPtrInput)(nil)).Elem(), InstanceMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeInput)(nil)).Elem(), InstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeArrayInput)(nil)).Elem(), InstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterInput)(nil)).Elem(), InstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterArrayInput)(nil)).Elem(), InstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSpecsInstanceSpecInput)(nil)).Elem(), InstanceSpecsInstanceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceSpecsInstanceSpecArrayInput)(nil)).Elem(), InstanceSpecsInstanceSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceInput)(nil)).Elem(), InstancesRdsMysqlInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceChargeDetailInput)(nil)).Elem(), InstancesRdsMysqlInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointAddressInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointAddressArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointNodeWeightInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceFeatureStateInput)(nil)).Elem(), InstancesRdsMysqlInstanceFeatureStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceFeatureStateArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceFeatureStateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceMaintenanceWindowInput)(nil)).Elem(), InstancesRdsMysqlInstanceMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceMaintenanceWindowArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceNodeInput)(nil)).Elem(), InstancesRdsMysqlInstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceNodeArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceTagInput)(nil)).Elem(), InstancesRdsMysqlInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceTagArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterTemplateTemplateParamInput)(nil)).Elem(), ParameterTemplateTemplateParamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterTemplateTemplateParamArrayInput)(nil)).Elem(), ParameterTemplateTemplateParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterTemplatesTemplateInput)(nil)).Elem(), ParameterTemplatesTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterTemplatesTemplateArrayInput)(nil)).Elem(), ParameterTemplatesTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterTemplatesTemplateTemplateParamInput)(nil)).Elem(), ParameterTemplatesTemplateTemplateParamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ParameterTemplatesTemplateTemplateParamArrayInput)(nil)).Elem(), ParameterTemplatesTemplateTemplateParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionInput)(nil)).Elem(), RegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionArrayInput)(nil)).Elem(), RegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountsAccountInput)(nil)).Elem(), GetAccountsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountsAccountArrayInput)(nil)).Elem(), GetAccountsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountsAccountAccountPrivilegeInput)(nil)).Elem(), GetAccountsAccountAccountPrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccountsAccountAccountPrivilegeArrayInput)(nil)).Elem(), GetAccountsAccountAccountPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowlistsAllowListInput)(nil)).Elem(), GetAllowlistsAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowlistsAllowListArrayInput)(nil)).Elem(), GetAllowlistsAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowlistsAllowListAssociatedInstanceInput)(nil)).Elem(), GetAllowlistsAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowlistsAllowListAssociatedInstanceArrayInput)(nil)).Elem(), GetAllowlistsAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowlistsAllowListSecurityGroupBindInfoInput)(nil)).Elem(), GetAllowlistsAllowListSecurityGroupBindInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowlistsAllowListSecurityGroupBindInfoArrayInput)(nil)).Elem(), GetAllowlistsAllowListSecurityGroupBindInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupInput)(nil)).Elem(), GetBackupsBackupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupArrayInput)(nil)).Elem(), GetBackupsBackupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupDbTableInfoInput)(nil)).Elem(), GetBackupsBackupDbTableInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupDbTableInfoArrayInput)(nil)).Elem(), GetBackupsBackupDbTableInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseInput)(nil)).Elem(), GetDatabasesDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseArrayInput)(nil)).Elem(), GetDatabasesDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseDatabasePrivilegeInput)(nil)).Elem(), GetDatabasesDatabaseDatabasePrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDatabasesDatabaseDatabasePrivilegeArrayInput)(nil)).Elem(), GetDatabasesDatabaseDatabasePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointInput)(nil)).Elem(), GetEndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointArrayInput)(nil)).Elem(), GetEndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointAddressInput)(nil)).Elem(), GetEndpointsEndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointAddressArrayInput)(nil)).Elem(), GetEndpointsEndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointReadOnlyNodeWeightInput)(nil)).Elem(), GetEndpointsEndpointReadOnlyNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointReadOnlyNodeWeightArrayInput)(nil)).Elem(), GetEndpointsEndpointReadOnlyNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSpecsInstanceSpecInput)(nil)).Elem(), GetInstanceSpecsInstanceSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstanceSpecsInstanceSpecArrayInput)(nil)).Elem(), GetInstanceSpecsInstanceSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceArrayInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceChargeDetailInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointArrayInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointAddressInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceEndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointAddressArrayInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceEndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointNodeWeightInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceEndpointNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceEndpointNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceFeatureStateInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceFeatureStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceFeatureStateArrayInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceFeatureStateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceMaintenanceWindowInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceMaintenanceWindowArrayInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceNodeInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceNodeArrayInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceTagInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRdsMysqlInstanceTagArrayInput)(nil)).Elem(), GetInstancesRdsMysqlInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagInput)(nil)).Elem(), GetInstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagArrayInput)(nil)).Elem(), GetInstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetParameterTemplatesTemplateInput)(nil)).Elem(), GetParameterTemplatesTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetParameterTemplatesTemplateArrayInput)(nil)).Elem(), GetParameterTemplatesTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetParameterTemplatesTemplateTemplateParamInput)(nil)).Elem(), GetParameterTemplatesTemplateTemplateParamArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetParameterTemplatesTemplateTemplateParamArrayInput)(nil)).Elem(), GetParameterTemplatesTemplateTemplateParamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionInput)(nil)).Elem(), GetRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionArrayInput)(nil)).Elem(), GetRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneInput)(nil)).Elem(), GetZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneArrayInput)(nil)).Elem(), GetZonesZoneArray{})
	pulumi.RegisterOutputType(AccountAccountPrivilegeOutput{})
	pulumi.RegisterOutputType(AccountAccountPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(AccountsAccountOutput{})
	pulumi.RegisterOutputType(AccountsAccountArrayOutput{})
	pulumi.RegisterOutputType(AccountsAccountAccountPrivilegeOutput{})
	pulumi.RegisterOutputType(AccountsAccountAccountPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(AllowlistSecurityGroupBindInfoOutput{})
	pulumi.RegisterOutputType(AllowlistSecurityGroupBindInfoArrayOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListArrayOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListSecurityGroupBindInfoOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListSecurityGroupBindInfoArrayOutput{})
	pulumi.RegisterOutputType(BackupBackupMetaOutput{})
	pulumi.RegisterOutputType(BackupBackupMetaArrayOutput{})
	pulumi.RegisterOutputType(BackupsBackupOutput{})
	pulumi.RegisterOutputType(BackupsBackupArrayOutput{})
	pulumi.RegisterOutputType(BackupsBackupDbTableInfoOutput{})
	pulumi.RegisterOutputType(BackupsBackupDbTableInfoArrayOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseDatabasePrivilegeOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseDatabasePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(EndpointReadOnlyNodeWeightOutput{})
	pulumi.RegisterOutputType(EndpointReadOnlyNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointAddressOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointReadOnlyNodeWeightOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointReadOnlyNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(InstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(InstanceChargeDetailArrayOutput{})
	pulumi.RegisterOutputType(InstanceChargeInfoOutput{})
	pulumi.RegisterOutputType(InstanceChargeInfoPtrOutput{})
	pulumi.RegisterOutputType(InstanceEndpointOutput{})
	pulumi.RegisterOutputType(InstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(InstanceEndpointAddressOutput{})
	pulumi.RegisterOutputType(InstanceEndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(InstanceEndpointNodeWeightOutput{})
	pulumi.RegisterOutputType(InstanceEndpointNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(InstanceFeatureStateOutput{})
	pulumi.RegisterOutputType(InstanceFeatureStateArrayOutput{})
	pulumi.RegisterOutputType(InstanceMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(InstanceMaintenanceWindowPtrOutput{})
	pulumi.RegisterOutputType(InstanceNodeOutput{})
	pulumi.RegisterOutputType(InstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(InstanceParameterOutput{})
	pulumi.RegisterOutputType(InstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(InstanceSpecsInstanceSpecOutput{})
	pulumi.RegisterOutputType(InstanceSpecsInstanceSpecArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointAddressOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointNodeWeightOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceFeatureStateOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceFeatureStateArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceNodeOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(ParameterTemplateTemplateParamOutput{})
	pulumi.RegisterOutputType(ParameterTemplateTemplateParamArrayOutput{})
	pulumi.RegisterOutputType(ParameterTemplatesTemplateOutput{})
	pulumi.RegisterOutputType(ParameterTemplatesTemplateArrayOutput{})
	pulumi.RegisterOutputType(ParameterTemplatesTemplateTemplateParamOutput{})
	pulumi.RegisterOutputType(ParameterTemplatesTemplateTemplateParamArrayOutput{})
	pulumi.RegisterOutputType(RegionsRegionOutput{})
	pulumi.RegisterOutputType(RegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
	pulumi.RegisterOutputType(GetAccountsAccountOutput{})
	pulumi.RegisterOutputType(GetAccountsAccountArrayOutput{})
	pulumi.RegisterOutputType(GetAccountsAccountAccountPrivilegeOutput{})
	pulumi.RegisterOutputType(GetAccountsAccountAccountPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(GetAllowlistsAllowListOutput{})
	pulumi.RegisterOutputType(GetAllowlistsAllowListArrayOutput{})
	pulumi.RegisterOutputType(GetAllowlistsAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(GetAllowlistsAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetAllowlistsAllowListSecurityGroupBindInfoOutput{})
	pulumi.RegisterOutputType(GetAllowlistsAllowListSecurityGroupBindInfoArrayOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupArrayOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupDbTableInfoOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupDbTableInfoArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseArrayOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseDatabasePrivilegeOutput{})
	pulumi.RegisterOutputType(GetDatabasesDatabaseDatabasePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointAddressOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointReadOnlyNodeWeightOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointReadOnlyNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(GetInstanceSpecsInstanceSpecOutput{})
	pulumi.RegisterOutputType(GetInstanceSpecsInstanceSpecArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceEndpointOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceEndpointAddressOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceEndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceEndpointNodeWeightOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceFeatureStateOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceFeatureStateArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceNodeOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceTagOutput{})
	pulumi.RegisterOutputType(GetInstancesRdsMysqlInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesTagOutput{})
	pulumi.RegisterOutputType(GetInstancesTagArrayOutput{})
	pulumi.RegisterOutputType(GetParameterTemplatesTemplateOutput{})
	pulumi.RegisterOutputType(GetParameterTemplatesTemplateArrayOutput{})
	pulumi.RegisterOutputType(GetParameterTemplatesTemplateTemplateParamOutput{})
	pulumi.RegisterOutputType(GetParameterTemplatesTemplateTemplateParamArrayOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetZonesZoneOutput{})
	pulumi.RegisterOutputType(GetZonesZoneArrayOutput{})
}
