// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type AccountAccountPrivilege struct {
	// The privilege type of the account.
	AccountPrivilege string `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail *string `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName string `pulumi:"dbName"`
}

// AccountAccountPrivilegeInput is an input type that accepts AccountAccountPrivilegeArgs and AccountAccountPrivilegeOutput values.
// You can construct a concrete instance of `AccountAccountPrivilegeInput` via:
//
//	AccountAccountPrivilegeArgs{...}
type AccountAccountPrivilegeInput interface {
	pulumi.Input

	ToAccountAccountPrivilegeOutput() AccountAccountPrivilegeOutput
	ToAccountAccountPrivilegeOutputWithContext(context.Context) AccountAccountPrivilegeOutput
}

type AccountAccountPrivilegeArgs struct {
	// The privilege type of the account.
	AccountPrivilege pulumi.StringInput `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail pulumi.StringPtrInput `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName pulumi.StringInput `pulumi:"dbName"`
}

func (AccountAccountPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountAccountPrivilege)(nil)).Elem()
}

func (i AccountAccountPrivilegeArgs) ToAccountAccountPrivilegeOutput() AccountAccountPrivilegeOutput {
	return i.ToAccountAccountPrivilegeOutputWithContext(context.Background())
}

func (i AccountAccountPrivilegeArgs) ToAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountAccountPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountAccountPrivilegeOutput)
}

// AccountAccountPrivilegeArrayInput is an input type that accepts AccountAccountPrivilegeArray and AccountAccountPrivilegeArrayOutput values.
// You can construct a concrete instance of `AccountAccountPrivilegeArrayInput` via:
//
//	AccountAccountPrivilegeArray{ AccountAccountPrivilegeArgs{...} }
type AccountAccountPrivilegeArrayInput interface {
	pulumi.Input

	ToAccountAccountPrivilegeArrayOutput() AccountAccountPrivilegeArrayOutput
	ToAccountAccountPrivilegeArrayOutputWithContext(context.Context) AccountAccountPrivilegeArrayOutput
}

type AccountAccountPrivilegeArray []AccountAccountPrivilegeInput

func (AccountAccountPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountAccountPrivilege)(nil)).Elem()
}

func (i AccountAccountPrivilegeArray) ToAccountAccountPrivilegeArrayOutput() AccountAccountPrivilegeArrayOutput {
	return i.ToAccountAccountPrivilegeArrayOutputWithContext(context.Background())
}

func (i AccountAccountPrivilegeArray) ToAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountAccountPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountAccountPrivilegeArrayOutput)
}

type AccountAccountPrivilegeOutput struct{ *pulumi.OutputState }

func (AccountAccountPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountAccountPrivilege)(nil)).Elem()
}

func (o AccountAccountPrivilegeOutput) ToAccountAccountPrivilegeOutput() AccountAccountPrivilegeOutput {
	return o
}

func (o AccountAccountPrivilegeOutput) ToAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountAccountPrivilegeOutput {
	return o
}

// The privilege type of the account.
func (o AccountAccountPrivilegeOutput) AccountPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v AccountAccountPrivilege) string { return v.AccountPrivilege }).(pulumi.StringOutput)
}

// The privilege detail of the account.
func (o AccountAccountPrivilegeOutput) AccountPrivilegeDetail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccountAccountPrivilege) *string { return v.AccountPrivilegeDetail }).(pulumi.StringPtrOutput)
}

// The name of database.
func (o AccountAccountPrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountAccountPrivilege) string { return v.DbName }).(pulumi.StringOutput)
}

type AccountAccountPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (AccountAccountPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountAccountPrivilege)(nil)).Elem()
}

func (o AccountAccountPrivilegeArrayOutput) ToAccountAccountPrivilegeArrayOutput() AccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountAccountPrivilegeArrayOutput) ToAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountAccountPrivilegeArrayOutput) Index(i pulumi.IntInput) AccountAccountPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountAccountPrivilege {
		return vs[0].([]AccountAccountPrivilege)[vs[1].(int)]
	}).(AccountAccountPrivilegeOutput)
}

type AccountsAccount struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName string `pulumi:"accountName"`
	// The privilege detail list of RDS mysql instance account.
	AccountPrivileges []AccountsAccountAccountPrivilege `pulumi:"accountPrivileges"`
	// The status of the database account.
	AccountStatus string `pulumi:"accountStatus"`
	// The type of the database account.
	AccountType string `pulumi:"accountType"`
}

// AccountsAccountInput is an input type that accepts AccountsAccountArgs and AccountsAccountOutput values.
// You can construct a concrete instance of `AccountsAccountInput` via:
//
//	AccountsAccountArgs{...}
type AccountsAccountInput interface {
	pulumi.Input

	ToAccountsAccountOutput() AccountsAccountOutput
	ToAccountsAccountOutputWithContext(context.Context) AccountsAccountOutput
}

type AccountsAccountArgs struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The privilege detail list of RDS mysql instance account.
	AccountPrivileges AccountsAccountAccountPrivilegeArrayInput `pulumi:"accountPrivileges"`
	// The status of the database account.
	AccountStatus pulumi.StringInput `pulumi:"accountStatus"`
	// The type of the database account.
	AccountType pulumi.StringInput `pulumi:"accountType"`
}

func (AccountsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccount)(nil)).Elem()
}

func (i AccountsAccountArgs) ToAccountsAccountOutput() AccountsAccountOutput {
	return i.ToAccountsAccountOutputWithContext(context.Background())
}

func (i AccountsAccountArgs) ToAccountsAccountOutputWithContext(ctx context.Context) AccountsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountOutput)
}

// AccountsAccountArrayInput is an input type that accepts AccountsAccountArray and AccountsAccountArrayOutput values.
// You can construct a concrete instance of `AccountsAccountArrayInput` via:
//
//	AccountsAccountArray{ AccountsAccountArgs{...} }
type AccountsAccountArrayInput interface {
	pulumi.Input

	ToAccountsAccountArrayOutput() AccountsAccountArrayOutput
	ToAccountsAccountArrayOutputWithContext(context.Context) AccountsAccountArrayOutput
}

type AccountsAccountArray []AccountsAccountInput

func (AccountsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccount)(nil)).Elem()
}

func (i AccountsAccountArray) ToAccountsAccountArrayOutput() AccountsAccountArrayOutput {
	return i.ToAccountsAccountArrayOutputWithContext(context.Background())
}

func (i AccountsAccountArray) ToAccountsAccountArrayOutputWithContext(ctx context.Context) AccountsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountArrayOutput)
}

type AccountsAccountOutput struct{ *pulumi.OutputState }

func (AccountsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccount)(nil)).Elem()
}

func (o AccountsAccountOutput) ToAccountsAccountOutput() AccountsAccountOutput {
	return o
}

func (o AccountsAccountOutput) ToAccountsAccountOutputWithContext(ctx context.Context) AccountsAccountOutput {
	return o
}

// The name of the database account. This field supports fuzzy query.
func (o AccountsAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountName }).(pulumi.StringOutput)
}

// The privilege detail list of RDS mysql instance account.
func (o AccountsAccountOutput) AccountPrivileges() AccountsAccountAccountPrivilegeArrayOutput {
	return o.ApplyT(func(v AccountsAccount) []AccountsAccountAccountPrivilege { return v.AccountPrivileges }).(AccountsAccountAccountPrivilegeArrayOutput)
}

// The status of the database account.
func (o AccountsAccountOutput) AccountStatus() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountStatus }).(pulumi.StringOutput)
}

// The type of the database account.
func (o AccountsAccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountType }).(pulumi.StringOutput)
}

type AccountsAccountArrayOutput struct{ *pulumi.OutputState }

func (AccountsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccount)(nil)).Elem()
}

func (o AccountsAccountArrayOutput) ToAccountsAccountArrayOutput() AccountsAccountArrayOutput {
	return o
}

func (o AccountsAccountArrayOutput) ToAccountsAccountArrayOutputWithContext(ctx context.Context) AccountsAccountArrayOutput {
	return o
}

func (o AccountsAccountArrayOutput) Index(i pulumi.IntInput) AccountsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountsAccount {
		return vs[0].([]AccountsAccount)[vs[1].(int)]
	}).(AccountsAccountOutput)
}

type AccountsAccountAccountPrivilege struct {
	// The privilege type of the account.
	AccountPrivilege string `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail string `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName string `pulumi:"dbName"`
}

// AccountsAccountAccountPrivilegeInput is an input type that accepts AccountsAccountAccountPrivilegeArgs and AccountsAccountAccountPrivilegeOutput values.
// You can construct a concrete instance of `AccountsAccountAccountPrivilegeInput` via:
//
//	AccountsAccountAccountPrivilegeArgs{...}
type AccountsAccountAccountPrivilegeInput interface {
	pulumi.Input

	ToAccountsAccountAccountPrivilegeOutput() AccountsAccountAccountPrivilegeOutput
	ToAccountsAccountAccountPrivilegeOutputWithContext(context.Context) AccountsAccountAccountPrivilegeOutput
}

type AccountsAccountAccountPrivilegeArgs struct {
	// The privilege type of the account.
	AccountPrivilege pulumi.StringInput `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail pulumi.StringInput `pulumi:"accountPrivilegeDetail"`
	// The name of database.
	DbName pulumi.StringInput `pulumi:"dbName"`
}

func (AccountsAccountAccountPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (i AccountsAccountAccountPrivilegeArgs) ToAccountsAccountAccountPrivilegeOutput() AccountsAccountAccountPrivilegeOutput {
	return i.ToAccountsAccountAccountPrivilegeOutputWithContext(context.Background())
}

func (i AccountsAccountAccountPrivilegeArgs) ToAccountsAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountAccountPrivilegeOutput)
}

// AccountsAccountAccountPrivilegeArrayInput is an input type that accepts AccountsAccountAccountPrivilegeArray and AccountsAccountAccountPrivilegeArrayOutput values.
// You can construct a concrete instance of `AccountsAccountAccountPrivilegeArrayInput` via:
//
//	AccountsAccountAccountPrivilegeArray{ AccountsAccountAccountPrivilegeArgs{...} }
type AccountsAccountAccountPrivilegeArrayInput interface {
	pulumi.Input

	ToAccountsAccountAccountPrivilegeArrayOutput() AccountsAccountAccountPrivilegeArrayOutput
	ToAccountsAccountAccountPrivilegeArrayOutputWithContext(context.Context) AccountsAccountAccountPrivilegeArrayOutput
}

type AccountsAccountAccountPrivilegeArray []AccountsAccountAccountPrivilegeInput

func (AccountsAccountAccountPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (i AccountsAccountAccountPrivilegeArray) ToAccountsAccountAccountPrivilegeArrayOutput() AccountsAccountAccountPrivilegeArrayOutput {
	return i.ToAccountsAccountAccountPrivilegeArrayOutputWithContext(context.Background())
}

func (i AccountsAccountAccountPrivilegeArray) ToAccountsAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountAccountPrivilegeArrayOutput)
}

type AccountsAccountAccountPrivilegeOutput struct{ *pulumi.OutputState }

func (AccountsAccountAccountPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (o AccountsAccountAccountPrivilegeOutput) ToAccountsAccountAccountPrivilegeOutput() AccountsAccountAccountPrivilegeOutput {
	return o
}

func (o AccountsAccountAccountPrivilegeOutput) ToAccountsAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeOutput {
	return o
}

// The privilege type of the account.
func (o AccountsAccountAccountPrivilegeOutput) AccountPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccountAccountPrivilege) string { return v.AccountPrivilege }).(pulumi.StringOutput)
}

// The privilege detail of the account.
func (o AccountsAccountAccountPrivilegeOutput) AccountPrivilegeDetail() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccountAccountPrivilege) string { return v.AccountPrivilegeDetail }).(pulumi.StringOutput)
}

// The name of database.
func (o AccountsAccountAccountPrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccountAccountPrivilege) string { return v.DbName }).(pulumi.StringOutput)
}

type AccountsAccountAccountPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (AccountsAccountAccountPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (o AccountsAccountAccountPrivilegeArrayOutput) ToAccountsAccountAccountPrivilegeArrayOutput() AccountsAccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountsAccountAccountPrivilegeArrayOutput) ToAccountsAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountsAccountAccountPrivilegeArrayOutput) Index(i pulumi.IntInput) AccountsAccountAccountPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountsAccountAccountPrivilege {
		return vs[0].([]AccountsAccountAccountPrivilege)[vs[1].(int)]
	}).(AccountsAccountAccountPrivilegeOutput)
}

type AllowlistsAllowList struct {
	// The description of the allow list.
	AllowListDesc string `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId string `pulumi:"allowListId"`
	// The total number of IP addresses (or address ranges) in the whitelist.
	AllowListIpNum int `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName string `pulumi:"allowListName"`
	// The type of the allow list.
	AllowListType string `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format.
	AllowLists []string `pulumi:"allowLists"`
	// The total number of instances bound under the whitelist.
	AssociatedInstanceNum int `pulumi:"associatedInstanceNum"`
	// The list of instances.
	AssociatedInstances []AllowlistsAllowListAssociatedInstance `pulumi:"associatedInstances"`
}

// AllowlistsAllowListInput is an input type that accepts AllowlistsAllowListArgs and AllowlistsAllowListOutput values.
// You can construct a concrete instance of `AllowlistsAllowListInput` via:
//
//	AllowlistsAllowListArgs{...}
type AllowlistsAllowListInput interface {
	pulumi.Input

	ToAllowlistsAllowListOutput() AllowlistsAllowListOutput
	ToAllowlistsAllowListOutputWithContext(context.Context) AllowlistsAllowListOutput
}

type AllowlistsAllowListArgs struct {
	// The description of the allow list.
	AllowListDesc pulumi.StringInput `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId pulumi.StringInput `pulumi:"allowListId"`
	// The total number of IP addresses (or address ranges) in the whitelist.
	AllowListIpNum pulumi.IntInput `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName pulumi.StringInput `pulumi:"allowListName"`
	// The type of the allow list.
	AllowListType pulumi.StringInput `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format.
	AllowLists pulumi.StringArrayInput `pulumi:"allowLists"`
	// The total number of instances bound under the whitelist.
	AssociatedInstanceNum pulumi.IntInput `pulumi:"associatedInstanceNum"`
	// The list of instances.
	AssociatedInstances AllowlistsAllowListAssociatedInstanceArrayInput `pulumi:"associatedInstances"`
}

func (AllowlistsAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowList)(nil)).Elem()
}

func (i AllowlistsAllowListArgs) ToAllowlistsAllowListOutput() AllowlistsAllowListOutput {
	return i.ToAllowlistsAllowListOutputWithContext(context.Background())
}

func (i AllowlistsAllowListArgs) ToAllowlistsAllowListOutputWithContext(ctx context.Context) AllowlistsAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListOutput)
}

// AllowlistsAllowListArrayInput is an input type that accepts AllowlistsAllowListArray and AllowlistsAllowListArrayOutput values.
// You can construct a concrete instance of `AllowlistsAllowListArrayInput` via:
//
//	AllowlistsAllowListArray{ AllowlistsAllowListArgs{...} }
type AllowlistsAllowListArrayInput interface {
	pulumi.Input

	ToAllowlistsAllowListArrayOutput() AllowlistsAllowListArrayOutput
	ToAllowlistsAllowListArrayOutputWithContext(context.Context) AllowlistsAllowListArrayOutput
}

type AllowlistsAllowListArray []AllowlistsAllowListInput

func (AllowlistsAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowList)(nil)).Elem()
}

func (i AllowlistsAllowListArray) ToAllowlistsAllowListArrayOutput() AllowlistsAllowListArrayOutput {
	return i.ToAllowlistsAllowListArrayOutputWithContext(context.Background())
}

func (i AllowlistsAllowListArray) ToAllowlistsAllowListArrayOutputWithContext(ctx context.Context) AllowlistsAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListArrayOutput)
}

type AllowlistsAllowListOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowList)(nil)).Elem()
}

func (o AllowlistsAllowListOutput) ToAllowlistsAllowListOutput() AllowlistsAllowListOutput {
	return o
}

func (o AllowlistsAllowListOutput) ToAllowlistsAllowListOutputWithContext(ctx context.Context) AllowlistsAllowListOutput {
	return o
}

// The description of the allow list.
func (o AllowlistsAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowList) string { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The id of the allow list.
func (o AllowlistsAllowListOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowList) string { return v.AllowListId }).(pulumi.StringOutput)
}

// The total number of IP addresses (or address ranges) in the whitelist.
func (o AllowlistsAllowListOutput) AllowListIpNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowlistsAllowList) int { return v.AllowListIpNum }).(pulumi.IntOutput)
}

// The name of the allow list.
func (o AllowlistsAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowList) string { return v.AllowListName }).(pulumi.StringOutput)
}

// The type of the allow list.
func (o AllowlistsAllowListOutput) AllowListType() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowList) string { return v.AllowListType }).(pulumi.StringOutput)
}

// The IP address or a range of IP addresses in CIDR format.
func (o AllowlistsAllowListOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowlistsAllowList) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The total number of instances bound under the whitelist.
func (o AllowlistsAllowListOutput) AssociatedInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowlistsAllowList) int { return v.AssociatedInstanceNum }).(pulumi.IntOutput)
}

// The list of instances.
func (o AllowlistsAllowListOutput) AssociatedInstances() AllowlistsAllowListAssociatedInstanceArrayOutput {
	return o.ApplyT(func(v AllowlistsAllowList) []AllowlistsAllowListAssociatedInstance { return v.AssociatedInstances }).(AllowlistsAllowListAssociatedInstanceArrayOutput)
}

type AllowlistsAllowListArrayOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowList)(nil)).Elem()
}

func (o AllowlistsAllowListArrayOutput) ToAllowlistsAllowListArrayOutput() AllowlistsAllowListArrayOutput {
	return o
}

func (o AllowlistsAllowListArrayOutput) ToAllowlistsAllowListArrayOutputWithContext(ctx context.Context) AllowlistsAllowListArrayOutput {
	return o
}

func (o AllowlistsAllowListArrayOutput) Index(i pulumi.IntInput) AllowlistsAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowlistsAllowList {
		return vs[0].([]AllowlistsAllowList)[vs[1].(int)]
	}).(AllowlistsAllowListOutput)
}

type AllowlistsAllowListAssociatedInstance struct {
	// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc string `pulumi:"vpc"`
}

// AllowlistsAllowListAssociatedInstanceInput is an input type that accepts AllowlistsAllowListAssociatedInstanceArgs and AllowlistsAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `AllowlistsAllowListAssociatedInstanceInput` via:
//
//	AllowlistsAllowListAssociatedInstanceArgs{...}
type AllowlistsAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToAllowlistsAllowListAssociatedInstanceOutput() AllowlistsAllowListAssociatedInstanceOutput
	ToAllowlistsAllowListAssociatedInstanceOutputWithContext(context.Context) AllowlistsAllowListAssociatedInstanceOutput
}

type AllowlistsAllowListAssociatedInstanceArgs struct {
	// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (AllowlistsAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowlistsAllowListAssociatedInstanceArgs) ToAllowlistsAllowListAssociatedInstanceOutput() AllowlistsAllowListAssociatedInstanceOutput {
	return i.ToAllowlistsAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i AllowlistsAllowListAssociatedInstanceArgs) ToAllowlistsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowlistsAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListAssociatedInstanceOutput)
}

// AllowlistsAllowListAssociatedInstanceArrayInput is an input type that accepts AllowlistsAllowListAssociatedInstanceArray and AllowlistsAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `AllowlistsAllowListAssociatedInstanceArrayInput` via:
//
//	AllowlistsAllowListAssociatedInstanceArray{ AllowlistsAllowListAssociatedInstanceArgs{...} }
type AllowlistsAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToAllowlistsAllowListAssociatedInstanceArrayOutput() AllowlistsAllowListAssociatedInstanceArrayOutput
	ToAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(context.Context) AllowlistsAllowListAssociatedInstanceArrayOutput
}

type AllowlistsAllowListAssociatedInstanceArray []AllowlistsAllowListAssociatedInstanceInput

func (AllowlistsAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowlistsAllowListAssociatedInstanceArray) ToAllowlistsAllowListAssociatedInstanceArrayOutput() AllowlistsAllowListAssociatedInstanceArrayOutput {
	return i.ToAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i AllowlistsAllowListAssociatedInstanceArray) ToAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowlistsAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsAllowListAssociatedInstanceArrayOutput)
}

type AllowlistsAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowlistsAllowListAssociatedInstanceOutput) ToAllowlistsAllowListAssociatedInstanceOutput() AllowlistsAllowListAssociatedInstanceOutput {
	return o
}

func (o AllowlistsAllowListAssociatedInstanceOutput) ToAllowlistsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowlistsAllowListAssociatedInstanceOutput {
	return o
}

// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
func (o AllowlistsAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowListAssociatedInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the instance.
func (o AllowlistsAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowListAssociatedInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The id of the vpc.
func (o AllowlistsAllowListAssociatedInstanceOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsAllowListAssociatedInstance) string { return v.Vpc }).(pulumi.StringOutput)
}

type AllowlistsAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (AllowlistsAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowlistsAllowListAssociatedInstanceArrayOutput) ToAllowlistsAllowListAssociatedInstanceArrayOutput() AllowlistsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowlistsAllowListAssociatedInstanceArrayOutput) ToAllowlistsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowlistsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowlistsAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) AllowlistsAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowlistsAllowListAssociatedInstance {
		return vs[0].([]AllowlistsAllowListAssociatedInstance)[vs[1].(int)]
	}).(AllowlistsAllowListAssociatedInstanceOutput)
}

type DatabasesDatabase struct {
	// The character set of the RDS database.
	CharacterSetName string `pulumi:"characterSetName"`
	// The privilege detail list of RDS mysql instance database.
	DatabasePrivileges []DatabasesDatabaseDatabasePrivilege `pulumi:"databasePrivileges"`
	// The name of the RDS database.
	DbName string `pulumi:"dbName"`
}

// DatabasesDatabaseInput is an input type that accepts DatabasesDatabaseArgs and DatabasesDatabaseOutput values.
// You can construct a concrete instance of `DatabasesDatabaseInput` via:
//
//	DatabasesDatabaseArgs{...}
type DatabasesDatabaseInput interface {
	pulumi.Input

	ToDatabasesDatabaseOutput() DatabasesDatabaseOutput
	ToDatabasesDatabaseOutputWithContext(context.Context) DatabasesDatabaseOutput
}

type DatabasesDatabaseArgs struct {
	// The character set of the RDS database.
	CharacterSetName pulumi.StringInput `pulumi:"characterSetName"`
	// The privilege detail list of RDS mysql instance database.
	DatabasePrivileges DatabasesDatabaseDatabasePrivilegeArrayInput `pulumi:"databasePrivileges"`
	// The name of the RDS database.
	DbName pulumi.StringInput `pulumi:"dbName"`
}

func (DatabasesDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabase)(nil)).Elem()
}

func (i DatabasesDatabaseArgs) ToDatabasesDatabaseOutput() DatabasesDatabaseOutput {
	return i.ToDatabasesDatabaseOutputWithContext(context.Background())
}

func (i DatabasesDatabaseArgs) ToDatabasesDatabaseOutputWithContext(ctx context.Context) DatabasesDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseOutput)
}

// DatabasesDatabaseArrayInput is an input type that accepts DatabasesDatabaseArray and DatabasesDatabaseArrayOutput values.
// You can construct a concrete instance of `DatabasesDatabaseArrayInput` via:
//
//	DatabasesDatabaseArray{ DatabasesDatabaseArgs{...} }
type DatabasesDatabaseArrayInput interface {
	pulumi.Input

	ToDatabasesDatabaseArrayOutput() DatabasesDatabaseArrayOutput
	ToDatabasesDatabaseArrayOutputWithContext(context.Context) DatabasesDatabaseArrayOutput
}

type DatabasesDatabaseArray []DatabasesDatabaseInput

func (DatabasesDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabase)(nil)).Elem()
}

func (i DatabasesDatabaseArray) ToDatabasesDatabaseArrayOutput() DatabasesDatabaseArrayOutput {
	return i.ToDatabasesDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabasesDatabaseArray) ToDatabasesDatabaseArrayOutputWithContext(ctx context.Context) DatabasesDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseArrayOutput)
}

type DatabasesDatabaseOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabase)(nil)).Elem()
}

func (o DatabasesDatabaseOutput) ToDatabasesDatabaseOutput() DatabasesDatabaseOutput {
	return o
}

func (o DatabasesDatabaseOutput) ToDatabasesDatabaseOutputWithContext(ctx context.Context) DatabasesDatabaseOutput {
	return o
}

// The character set of the RDS database.
func (o DatabasesDatabaseOutput) CharacterSetName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.CharacterSetName }).(pulumi.StringOutput)
}

// The privilege detail list of RDS mysql instance database.
func (o DatabasesDatabaseOutput) DatabasePrivileges() DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return o.ApplyT(func(v DatabasesDatabase) []DatabasesDatabaseDatabasePrivilege { return v.DatabasePrivileges }).(DatabasesDatabaseDatabasePrivilegeArrayOutput)
}

// The name of the RDS database.
func (o DatabasesDatabaseOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.DbName }).(pulumi.StringOutput)
}

type DatabasesDatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabase)(nil)).Elem()
}

func (o DatabasesDatabaseArrayOutput) ToDatabasesDatabaseArrayOutput() DatabasesDatabaseArrayOutput {
	return o
}

func (o DatabasesDatabaseArrayOutput) ToDatabasesDatabaseArrayOutputWithContext(ctx context.Context) DatabasesDatabaseArrayOutput {
	return o
}

func (o DatabasesDatabaseArrayOutput) Index(i pulumi.IntInput) DatabasesDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasesDatabase {
		return vs[0].([]DatabasesDatabase)[vs[1].(int)]
	}).(DatabasesDatabaseOutput)
}

type DatabasesDatabaseDatabasePrivilege struct {
	// The name of account.
	AccountName string `pulumi:"accountName"`
	// The privilege type of the account.
	AccountPrivilege string `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail string `pulumi:"accountPrivilegeDetail"`
}

// DatabasesDatabaseDatabasePrivilegeInput is an input type that accepts DatabasesDatabaseDatabasePrivilegeArgs and DatabasesDatabaseDatabasePrivilegeOutput values.
// You can construct a concrete instance of `DatabasesDatabaseDatabasePrivilegeInput` via:
//
//	DatabasesDatabaseDatabasePrivilegeArgs{...}
type DatabasesDatabaseDatabasePrivilegeInput interface {
	pulumi.Input

	ToDatabasesDatabaseDatabasePrivilegeOutput() DatabasesDatabaseDatabasePrivilegeOutput
	ToDatabasesDatabaseDatabasePrivilegeOutputWithContext(context.Context) DatabasesDatabaseDatabasePrivilegeOutput
}

type DatabasesDatabaseDatabasePrivilegeArgs struct {
	// The name of account.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The privilege type of the account.
	AccountPrivilege pulumi.StringInput `pulumi:"accountPrivilege"`
	// The privilege detail of the account.
	AccountPrivilegeDetail pulumi.StringInput `pulumi:"accountPrivilegeDetail"`
}

func (DatabasesDatabaseDatabasePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (i DatabasesDatabaseDatabasePrivilegeArgs) ToDatabasesDatabaseDatabasePrivilegeOutput() DatabasesDatabaseDatabasePrivilegeOutput {
	return i.ToDatabasesDatabaseDatabasePrivilegeOutputWithContext(context.Background())
}

func (i DatabasesDatabaseDatabasePrivilegeArgs) ToDatabasesDatabaseDatabasePrivilegeOutputWithContext(ctx context.Context) DatabasesDatabaseDatabasePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseDatabasePrivilegeOutput)
}

// DatabasesDatabaseDatabasePrivilegeArrayInput is an input type that accepts DatabasesDatabaseDatabasePrivilegeArray and DatabasesDatabaseDatabasePrivilegeArrayOutput values.
// You can construct a concrete instance of `DatabasesDatabaseDatabasePrivilegeArrayInput` via:
//
//	DatabasesDatabaseDatabasePrivilegeArray{ DatabasesDatabaseDatabasePrivilegeArgs{...} }
type DatabasesDatabaseDatabasePrivilegeArrayInput interface {
	pulumi.Input

	ToDatabasesDatabaseDatabasePrivilegeArrayOutput() DatabasesDatabaseDatabasePrivilegeArrayOutput
	ToDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(context.Context) DatabasesDatabaseDatabasePrivilegeArrayOutput
}

type DatabasesDatabaseDatabasePrivilegeArray []DatabasesDatabaseDatabasePrivilegeInput

func (DatabasesDatabaseDatabasePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (i DatabasesDatabaseDatabasePrivilegeArray) ToDatabasesDatabaseDatabasePrivilegeArrayOutput() DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return i.ToDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(context.Background())
}

func (i DatabasesDatabaseDatabasePrivilegeArray) ToDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(ctx context.Context) DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseDatabasePrivilegeArrayOutput)
}

type DatabasesDatabaseDatabasePrivilegeOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseDatabasePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (o DatabasesDatabaseDatabasePrivilegeOutput) ToDatabasesDatabaseDatabasePrivilegeOutput() DatabasesDatabaseDatabasePrivilegeOutput {
	return o
}

func (o DatabasesDatabaseDatabasePrivilegeOutput) ToDatabasesDatabaseDatabasePrivilegeOutputWithContext(ctx context.Context) DatabasesDatabaseDatabasePrivilegeOutput {
	return o
}

// The name of account.
func (o DatabasesDatabaseDatabasePrivilegeOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabaseDatabasePrivilege) string { return v.AccountName }).(pulumi.StringOutput)
}

// The privilege type of the account.
func (o DatabasesDatabaseDatabasePrivilegeOutput) AccountPrivilege() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabaseDatabasePrivilege) string { return v.AccountPrivilege }).(pulumi.StringOutput)
}

// The privilege detail of the account.
func (o DatabasesDatabaseDatabasePrivilegeOutput) AccountPrivilegeDetail() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabaseDatabasePrivilege) string { return v.AccountPrivilegeDetail }).(pulumi.StringOutput)
}

type DatabasesDatabaseDatabasePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseDatabasePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabaseDatabasePrivilege)(nil)).Elem()
}

func (o DatabasesDatabaseDatabasePrivilegeArrayOutput) ToDatabasesDatabaseDatabasePrivilegeArrayOutput() DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return o
}

func (o DatabasesDatabaseDatabasePrivilegeArrayOutput) ToDatabasesDatabaseDatabasePrivilegeArrayOutputWithContext(ctx context.Context) DatabasesDatabaseDatabasePrivilegeArrayOutput {
	return o
}

func (o DatabasesDatabaseDatabasePrivilegeArrayOutput) Index(i pulumi.IntInput) DatabasesDatabaseDatabasePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasesDatabaseDatabasePrivilege {
		return vs[0].([]DatabasesDatabaseDatabasePrivilege)[vs[1].(int)]
	}).(DatabasesDatabaseDatabasePrivilegeOutput)
}

type InstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew *bool `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime *string `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime *string `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus *string `pulumi:"chargeStatus"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType *string `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime *string `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime *string `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period *int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit *string `pulumi:"periodUnit"`
}

// InstanceChargeDetailInput is an input type that accepts InstanceChargeDetailArgs and InstanceChargeDetailOutput values.
// You can construct a concrete instance of `InstanceChargeDetailInput` via:
//
//	InstanceChargeDetailArgs{...}
type InstanceChargeDetailInput interface {
	pulumi.Input

	ToInstanceChargeDetailOutput() InstanceChargeDetailOutput
	ToInstanceChargeDetailOutputWithContext(context.Context) InstanceChargeDetailOutput
}

type InstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime pulumi.StringPtrInput `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime pulumi.StringPtrInput `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus pulumi.StringPtrInput `pulumi:"chargeStatus"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType pulumi.StringPtrInput `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime pulumi.StringPtrInput `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime pulumi.StringPtrInput `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringPtrInput `pulumi:"periodUnit"`
}

func (InstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeDetail)(nil)).Elem()
}

func (i InstanceChargeDetailArgs) ToInstanceChargeDetailOutput() InstanceChargeDetailOutput {
	return i.ToInstanceChargeDetailOutputWithContext(context.Background())
}

func (i InstanceChargeDetailArgs) ToInstanceChargeDetailOutputWithContext(ctx context.Context) InstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeDetailOutput)
}

// InstanceChargeDetailArrayInput is an input type that accepts InstanceChargeDetailArray and InstanceChargeDetailArrayOutput values.
// You can construct a concrete instance of `InstanceChargeDetailArrayInput` via:
//
//	InstanceChargeDetailArray{ InstanceChargeDetailArgs{...} }
type InstanceChargeDetailArrayInput interface {
	pulumi.Input

	ToInstanceChargeDetailArrayOutput() InstanceChargeDetailArrayOutput
	ToInstanceChargeDetailArrayOutputWithContext(context.Context) InstanceChargeDetailArrayOutput
}

type InstanceChargeDetailArray []InstanceChargeDetailInput

func (InstanceChargeDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceChargeDetail)(nil)).Elem()
}

func (i InstanceChargeDetailArray) ToInstanceChargeDetailArrayOutput() InstanceChargeDetailArrayOutput {
	return i.ToInstanceChargeDetailArrayOutputWithContext(context.Background())
}

func (i InstanceChargeDetailArray) ToInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstanceChargeDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeDetailArrayOutput)
}

type InstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (InstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeDetail)(nil)).Elem()
}

func (o InstanceChargeDetailOutput) ToInstanceChargeDetailOutput() InstanceChargeDetailOutput {
	return o
}

func (o InstanceChargeDetailOutput) ToInstanceChargeDetailOutputWithContext(ctx context.Context) InstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
// Autorenew_Enable
// Autorenew_Disable (default).
func (o InstanceChargeDetailOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// Billing expiry time (yearly and monthly only).
func (o InstanceChargeDetailOutput) ChargeEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeEndTime }).(pulumi.StringPtrOutput)
}

// Billing start time (pay-as-you-go & monthly subscription).
func (o InstanceChargeDetailOutput) ChargeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeStartTime }).(pulumi.StringPtrOutput)
}

// Pay status. Value:
// normal - normal
// overdue - overdue
// .
func (o InstanceChargeDetailOutput) ChargeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeStatus }).(pulumi.StringPtrOutput)
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o InstanceChargeDetailOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
func (o InstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.OverdueReclaimTime }).(pulumi.StringPtrOutput)
}

// Shutdown time in arrears (pay-as-you-go & monthly subscription).
func (o InstanceChargeDetailOutput) OverdueTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.OverdueTime }).(pulumi.StringPtrOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstanceChargeDetailOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstanceChargeDetailOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

type InstanceChargeDetailArrayOutput struct{ *pulumi.OutputState }

func (InstanceChargeDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceChargeDetail)(nil)).Elem()
}

func (o InstanceChargeDetailArrayOutput) ToInstanceChargeDetailArrayOutput() InstanceChargeDetailArrayOutput {
	return o
}

func (o InstanceChargeDetailArrayOutput) ToInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstanceChargeDetailArrayOutput {
	return o
}

func (o InstanceChargeDetailArrayOutput) Index(i pulumi.IntInput) InstanceChargeDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceChargeDetail {
		return vs[0].([]InstanceChargeDetail)[vs[1].(int)]
	}).(InstanceChargeDetailOutput)
}

type InstanceChargeInfo struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew  *bool  `pulumi:"autoRenew"`
	ChargeType string `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period *int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit *string `pulumi:"periodUnit"`
}

// InstanceChargeInfoInput is an input type that accepts InstanceChargeInfoArgs and InstanceChargeInfoOutput values.
// You can construct a concrete instance of `InstanceChargeInfoInput` via:
//
//	InstanceChargeInfoArgs{...}
type InstanceChargeInfoInput interface {
	pulumi.Input

	ToInstanceChargeInfoOutput() InstanceChargeInfoOutput
	ToInstanceChargeInfoOutputWithContext(context.Context) InstanceChargeInfoOutput
}

type InstanceChargeInfoArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew  pulumi.BoolPtrInput `pulumi:"autoRenew"`
	ChargeType pulumi.StringInput  `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringPtrInput `pulumi:"periodUnit"`
}

func (InstanceChargeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return i.ToInstanceChargeInfoOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput)
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput).ToInstanceChargeInfoPtrOutputWithContext(ctx)
}

// InstanceChargeInfoPtrInput is an input type that accepts InstanceChargeInfoArgs, InstanceChargeInfoPtr and InstanceChargeInfoPtrOutput values.
// You can construct a concrete instance of `InstanceChargeInfoPtrInput` via:
//
//	        InstanceChargeInfoArgs{...}
//
//	or:
//
//	        nil
type InstanceChargeInfoPtrInput interface {
	pulumi.Input

	ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput
	ToInstanceChargeInfoPtrOutputWithContext(context.Context) InstanceChargeInfoPtrOutput
}

type instanceChargeInfoPtrType InstanceChargeInfoArgs

func InstanceChargeInfoPtr(v *InstanceChargeInfoArgs) InstanceChargeInfoPtrInput {
	return (*instanceChargeInfoPtrType)(v)
}

func (*instanceChargeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoPtrOutput)
}

type InstanceChargeInfoOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceChargeInfo) *InstanceChargeInfo {
		return &v
	}).(InstanceChargeInfoPtrOutput)
}

// Whether to automatically renew in prepaid scenarios.
func (o InstanceChargeInfoOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

func (o InstanceChargeInfoOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceChargeInfo) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstanceChargeInfoOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstanceChargeInfoOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *string { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

type InstanceChargeInfoPtrOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) Elem() InstanceChargeInfoOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) InstanceChargeInfo {
		if v != nil {
			return *v
		}
		var ret InstanceChargeInfo
		return ret
	}).(InstanceChargeInfoOutput)
}

// Whether to automatically renew in prepaid scenarios.
func (o InstanceChargeInfoPtrOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRenew
	}).(pulumi.BoolPtrOutput)
}

func (o InstanceChargeInfoPtrOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ChargeType
	}).(pulumi.StringPtrOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstanceChargeInfoPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *int {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstanceChargeInfoPtrOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.PeriodUnit
	}).(pulumi.StringPtrOutput)
}

type InstanceEndpoint struct {
	// Address list.
	Addresses []InstanceEndpointAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes *string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description *string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly *string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting *string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId *string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName *string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType *string `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights []InstanceEndpointNodeWeight `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode *string `pulumi:"readWriteMode"`
}

// InstanceEndpointInput is an input type that accepts InstanceEndpointArgs and InstanceEndpointOutput values.
// You can construct a concrete instance of `InstanceEndpointInput` via:
//
//	InstanceEndpointArgs{...}
type InstanceEndpointInput interface {
	pulumi.Input

	ToInstanceEndpointOutput() InstanceEndpointOutput
	ToInstanceEndpointOutputWithContext(context.Context) InstanceEndpointOutput
}

type InstanceEndpointArgs struct {
	// Address list.
	Addresses InstanceEndpointAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringPtrInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringPtrInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringPtrInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringPtrInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights InstanceEndpointNodeWeightArrayInput `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringPtrInput `pulumi:"readWriteMode"`
}

func (InstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return i.ToInstanceEndpointOutputWithContext(context.Background())
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointOutput)
}

// InstanceEndpointArrayInput is an input type that accepts InstanceEndpointArray and InstanceEndpointArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointArrayInput` via:
//
//	InstanceEndpointArray{ InstanceEndpointArgs{...} }
type InstanceEndpointArrayInput interface {
	pulumi.Input

	ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput
	ToInstanceEndpointArrayOutputWithContext(context.Context) InstanceEndpointArrayOutput
}

type InstanceEndpointArray []InstanceEndpointInput

func (InstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return i.ToInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointArrayOutput)
}

type InstanceEndpointOutput struct{ *pulumi.OutputState }

func (InstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return o
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return o
}

// Address list.
func (o InstanceEndpointOutput) Addresses() InstanceEndpointAddressArrayOutput {
	return o.ApplyT(func(v InstanceEndpoint) []InstanceEndpointAddress { return v.Addresses }).(InstanceEndpointAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o InstanceEndpointOutput) AutoAddNewNodes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.AutoAddNewNodes }).(pulumi.StringPtrOutput)
}

// Address description.
func (o InstanceEndpointOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstanceEndpointOutput) EnableReadOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EnableReadOnly }).(pulumi.StringPtrOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstanceEndpointOutput) EnableReadWriteSplitting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EnableReadWriteSplitting }).(pulumi.StringPtrOutput)
}

// Instance connection terminal ID.
func (o InstanceEndpointOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// The instance connection terminal name.
func (o InstanceEndpointOutput) EndpointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointName }).(pulumi.StringPtrOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o InstanceEndpointOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o InstanceEndpointOutput) NodeWeights() InstanceEndpointNodeWeightArrayOutput {
	return o.ApplyT(func(v InstanceEndpoint) []InstanceEndpointNodeWeight { return v.NodeWeights }).(InstanceEndpointNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o InstanceEndpointOutput) ReadWriteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.ReadWriteMode }).(pulumi.StringPtrOutput)
}

type InstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) Index(i pulumi.IntInput) InstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpoint {
		return vs[0].([]InstanceEndpoint)[vs[1].(int)]
	}).(InstanceEndpointOutput)
}

type InstanceEndpointAddress struct {
	// DNS Visibility.
	DnsVisibility *bool `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain *string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId *string `pulumi:"eipId"`
	// The IP Address.
	IpAddress *string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType *string `pulumi:"networkType"`
	// The Port.
	Port *string `pulumi:"port"`
	// Subnet ID of the RDS instance.
	SubnetId *string `pulumi:"subnetId"`
}

// InstanceEndpointAddressInput is an input type that accepts InstanceEndpointAddressArgs and InstanceEndpointAddressOutput values.
// You can construct a concrete instance of `InstanceEndpointAddressInput` via:
//
//	InstanceEndpointAddressArgs{...}
type InstanceEndpointAddressInput interface {
	pulumi.Input

	ToInstanceEndpointAddressOutput() InstanceEndpointAddressOutput
	ToInstanceEndpointAddressOutputWithContext(context.Context) InstanceEndpointAddressOutput
}

type InstanceEndpointAddressArgs struct {
	// DNS Visibility.
	DnsVisibility pulumi.BoolPtrInput `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringPtrInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// Subnet ID of the RDS instance.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (InstanceEndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointAddress)(nil)).Elem()
}

func (i InstanceEndpointAddressArgs) ToInstanceEndpointAddressOutput() InstanceEndpointAddressOutput {
	return i.ToInstanceEndpointAddressOutputWithContext(context.Background())
}

func (i InstanceEndpointAddressArgs) ToInstanceEndpointAddressOutputWithContext(ctx context.Context) InstanceEndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointAddressOutput)
}

// InstanceEndpointAddressArrayInput is an input type that accepts InstanceEndpointAddressArray and InstanceEndpointAddressArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointAddressArrayInput` via:
//
//	InstanceEndpointAddressArray{ InstanceEndpointAddressArgs{...} }
type InstanceEndpointAddressArrayInput interface {
	pulumi.Input

	ToInstanceEndpointAddressArrayOutput() InstanceEndpointAddressArrayOutput
	ToInstanceEndpointAddressArrayOutputWithContext(context.Context) InstanceEndpointAddressArrayOutput
}

type InstanceEndpointAddressArray []InstanceEndpointAddressInput

func (InstanceEndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointAddress)(nil)).Elem()
}

func (i InstanceEndpointAddressArray) ToInstanceEndpointAddressArrayOutput() InstanceEndpointAddressArrayOutput {
	return i.ToInstanceEndpointAddressArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointAddressArray) ToInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstanceEndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointAddressArrayOutput)
}

type InstanceEndpointAddressOutput struct{ *pulumi.OutputState }

func (InstanceEndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointAddress)(nil)).Elem()
}

func (o InstanceEndpointAddressOutput) ToInstanceEndpointAddressOutput() InstanceEndpointAddressOutput {
	return o
}

func (o InstanceEndpointAddressOutput) ToInstanceEndpointAddressOutputWithContext(ctx context.Context) InstanceEndpointAddressOutput {
	return o
}

// DNS Visibility.
func (o InstanceEndpointAddressOutput) DnsVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *bool { return v.DnsVisibility }).(pulumi.BoolPtrOutput)
}

// Connect domain name.
func (o InstanceEndpointAddressOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o InstanceEndpointAddressOutput) EipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.EipId }).(pulumi.StringPtrOutput)
}

// The IP Address.
func (o InstanceEndpointAddressOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o InstanceEndpointAddressOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// The Port.
func (o InstanceEndpointAddressOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// Subnet ID of the RDS instance.
func (o InstanceEndpointAddressOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type InstanceEndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointAddress)(nil)).Elem()
}

func (o InstanceEndpointAddressArrayOutput) ToInstanceEndpointAddressArrayOutput() InstanceEndpointAddressArrayOutput {
	return o
}

func (o InstanceEndpointAddressArrayOutput) ToInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstanceEndpointAddressArrayOutput {
	return o
}

func (o InstanceEndpointAddressArrayOutput) Index(i pulumi.IntInput) InstanceEndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpointAddress {
		return vs[0].([]InstanceEndpointAddress)[vs[1].(int)]
	}).(InstanceEndpointAddressOutput)
}

type InstanceEndpointNodeWeight struct {
	// Node ID.
	NodeId *string `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType *string `pulumi:"nodeType"`
	// The weight of the node.
	Weight *int `pulumi:"weight"`
}

// InstanceEndpointNodeWeightInput is an input type that accepts InstanceEndpointNodeWeightArgs and InstanceEndpointNodeWeightOutput values.
// You can construct a concrete instance of `InstanceEndpointNodeWeightInput` via:
//
//	InstanceEndpointNodeWeightArgs{...}
type InstanceEndpointNodeWeightInput interface {
	pulumi.Input

	ToInstanceEndpointNodeWeightOutput() InstanceEndpointNodeWeightOutput
	ToInstanceEndpointNodeWeightOutputWithContext(context.Context) InstanceEndpointNodeWeightOutput
}

type InstanceEndpointNodeWeightArgs struct {
	// Node ID.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringPtrInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (InstanceEndpointNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointNodeWeight)(nil)).Elem()
}

func (i InstanceEndpointNodeWeightArgs) ToInstanceEndpointNodeWeightOutput() InstanceEndpointNodeWeightOutput {
	return i.ToInstanceEndpointNodeWeightOutputWithContext(context.Background())
}

func (i InstanceEndpointNodeWeightArgs) ToInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) InstanceEndpointNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointNodeWeightOutput)
}

// InstanceEndpointNodeWeightArrayInput is an input type that accepts InstanceEndpointNodeWeightArray and InstanceEndpointNodeWeightArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointNodeWeightArrayInput` via:
//
//	InstanceEndpointNodeWeightArray{ InstanceEndpointNodeWeightArgs{...} }
type InstanceEndpointNodeWeightArrayInput interface {
	pulumi.Input

	ToInstanceEndpointNodeWeightArrayOutput() InstanceEndpointNodeWeightArrayOutput
	ToInstanceEndpointNodeWeightArrayOutputWithContext(context.Context) InstanceEndpointNodeWeightArrayOutput
}

type InstanceEndpointNodeWeightArray []InstanceEndpointNodeWeightInput

func (InstanceEndpointNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointNodeWeight)(nil)).Elem()
}

func (i InstanceEndpointNodeWeightArray) ToInstanceEndpointNodeWeightArrayOutput() InstanceEndpointNodeWeightArrayOutput {
	return i.ToInstanceEndpointNodeWeightArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointNodeWeightArray) ToInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) InstanceEndpointNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointNodeWeightArrayOutput)
}

type InstanceEndpointNodeWeightOutput struct{ *pulumi.OutputState }

func (InstanceEndpointNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointNodeWeight)(nil)).Elem()
}

func (o InstanceEndpointNodeWeightOutput) ToInstanceEndpointNodeWeightOutput() InstanceEndpointNodeWeightOutput {
	return o
}

func (o InstanceEndpointNodeWeightOutput) ToInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) InstanceEndpointNodeWeightOutput {
	return o
}

// Node ID.
func (o InstanceEndpointNodeWeightOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointNodeWeight) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstanceEndpointNodeWeightOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointNodeWeight) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The weight of the node.
func (o InstanceEndpointNodeWeightOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceEndpointNodeWeight) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type InstanceEndpointNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointNodeWeight)(nil)).Elem()
}

func (o InstanceEndpointNodeWeightArrayOutput) ToInstanceEndpointNodeWeightArrayOutput() InstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o InstanceEndpointNodeWeightArrayOutput) ToInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) InstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o InstanceEndpointNodeWeightArrayOutput) Index(i pulumi.IntInput) InstanceEndpointNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpointNodeWeight {
		return vs[0].([]InstanceEndpointNodeWeight)[vs[1].(int)]
	}).(InstanceEndpointNodeWeightOutput)
}

type InstanceMaintenanceWindow struct {
	// DayKind of maintainable window. Value: Week. Month.
	DayKind *string `pulumi:"dayKind"`
	// Days of maintainable window of the month.
	DayOfMonths []int `pulumi:"dayOfMonths"`
	// Days of maintainable window of the week.
	DayOfWeeks []string `pulumi:"dayOfWeeks"`
	// The maintainable time of the RDS instance.
	MaintenanceTime *string `pulumi:"maintenanceTime"`
}

// InstanceMaintenanceWindowInput is an input type that accepts InstanceMaintenanceWindowArgs and InstanceMaintenanceWindowOutput values.
// You can construct a concrete instance of `InstanceMaintenanceWindowInput` via:
//
//	InstanceMaintenanceWindowArgs{...}
type InstanceMaintenanceWindowInput interface {
	pulumi.Input

	ToInstanceMaintenanceWindowOutput() InstanceMaintenanceWindowOutput
	ToInstanceMaintenanceWindowOutputWithContext(context.Context) InstanceMaintenanceWindowOutput
}

type InstanceMaintenanceWindowArgs struct {
	// DayKind of maintainable window. Value: Week. Month.
	DayKind pulumi.StringPtrInput `pulumi:"dayKind"`
	// Days of maintainable window of the month.
	DayOfMonths pulumi.IntArrayInput `pulumi:"dayOfMonths"`
	// Days of maintainable window of the week.
	DayOfWeeks pulumi.StringArrayInput `pulumi:"dayOfWeeks"`
	// The maintainable time of the RDS instance.
	MaintenanceTime pulumi.StringPtrInput `pulumi:"maintenanceTime"`
}

func (InstanceMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMaintenanceWindow)(nil)).Elem()
}

func (i InstanceMaintenanceWindowArgs) ToInstanceMaintenanceWindowOutput() InstanceMaintenanceWindowOutput {
	return i.ToInstanceMaintenanceWindowOutputWithContext(context.Background())
}

func (i InstanceMaintenanceWindowArgs) ToInstanceMaintenanceWindowOutputWithContext(ctx context.Context) InstanceMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMaintenanceWindowOutput)
}

// InstanceMaintenanceWindowArrayInput is an input type that accepts InstanceMaintenanceWindowArray and InstanceMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `InstanceMaintenanceWindowArrayInput` via:
//
//	InstanceMaintenanceWindowArray{ InstanceMaintenanceWindowArgs{...} }
type InstanceMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToInstanceMaintenanceWindowArrayOutput() InstanceMaintenanceWindowArrayOutput
	ToInstanceMaintenanceWindowArrayOutputWithContext(context.Context) InstanceMaintenanceWindowArrayOutput
}

type InstanceMaintenanceWindowArray []InstanceMaintenanceWindowInput

func (InstanceMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMaintenanceWindow)(nil)).Elem()
}

func (i InstanceMaintenanceWindowArray) ToInstanceMaintenanceWindowArrayOutput() InstanceMaintenanceWindowArrayOutput {
	return i.ToInstanceMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i InstanceMaintenanceWindowArray) ToInstanceMaintenanceWindowArrayOutputWithContext(ctx context.Context) InstanceMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMaintenanceWindowArrayOutput)
}

type InstanceMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (InstanceMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceMaintenanceWindow)(nil)).Elem()
}

func (o InstanceMaintenanceWindowOutput) ToInstanceMaintenanceWindowOutput() InstanceMaintenanceWindowOutput {
	return o
}

func (o InstanceMaintenanceWindowOutput) ToInstanceMaintenanceWindowOutputWithContext(ctx context.Context) InstanceMaintenanceWindowOutput {
	return o
}

// DayKind of maintainable window. Value: Week. Month.
func (o InstanceMaintenanceWindowOutput) DayKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMaintenanceWindow) *string { return v.DayKind }).(pulumi.StringPtrOutput)
}

// Days of maintainable window of the month.
func (o InstanceMaintenanceWindowOutput) DayOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v InstanceMaintenanceWindow) []int { return v.DayOfMonths }).(pulumi.IntArrayOutput)
}

// Days of maintainable window of the week.
func (o InstanceMaintenanceWindowOutput) DayOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstanceMaintenanceWindow) []string { return v.DayOfWeeks }).(pulumi.StringArrayOutput)
}

// The maintainable time of the RDS instance.
func (o InstanceMaintenanceWindowOutput) MaintenanceTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceMaintenanceWindow) *string { return v.MaintenanceTime }).(pulumi.StringPtrOutput)
}

type InstanceMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (InstanceMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceMaintenanceWindow)(nil)).Elem()
}

func (o InstanceMaintenanceWindowArrayOutput) ToInstanceMaintenanceWindowArrayOutput() InstanceMaintenanceWindowArrayOutput {
	return o
}

func (o InstanceMaintenanceWindowArrayOutput) ToInstanceMaintenanceWindowArrayOutputWithContext(ctx context.Context) InstanceMaintenanceWindowArrayOutput {
	return o
}

func (o InstanceMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) InstanceMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceMaintenanceWindow {
		return vs[0].([]InstanceMaintenanceWindow)[vs[1].(int)]
	}).(InstanceMaintenanceWindowOutput)
}

type InstanceNode struct {
	// Node creation local time.
	CreateTime *string `pulumi:"createTime"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Memory size in GB.
	Memory *int `pulumi:"memory"`
	// Node ID.
	NodeId *string `pulumi:"nodeId"`
	// The specification of primary node and secondary node.
	NodeSpec *string `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus *string `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType *string `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId *string `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime *string `pulumi:"updateTime"`
	// CPU size.
	VCpu *int `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId *string `pulumi:"zoneId"`
}

// InstanceNodeInput is an input type that accepts InstanceNodeArgs and InstanceNodeOutput values.
// You can construct a concrete instance of `InstanceNodeInput` via:
//
//	InstanceNodeArgs{...}
type InstanceNodeInput interface {
	pulumi.Input

	ToInstanceNodeOutput() InstanceNodeOutput
	ToInstanceNodeOutputWithContext(context.Context) InstanceNodeOutput
}

type InstanceNodeArgs struct {
	// Node creation local time.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Instance ID.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// Memory size in GB.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// Node ID.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// The specification of primary node and secondary node.
	NodeSpec pulumi.StringPtrInput `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus pulumi.StringPtrInput `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringPtrInput `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId pulumi.StringPtrInput `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntPtrInput `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (InstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArgs) ToInstanceNodeOutput() InstanceNodeOutput {
	return i.ToInstanceNodeOutputWithContext(context.Background())
}

func (i InstanceNodeArgs) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeOutput)
}

// InstanceNodeArrayInput is an input type that accepts InstanceNodeArray and InstanceNodeArrayOutput values.
// You can construct a concrete instance of `InstanceNodeArrayInput` via:
//
//	InstanceNodeArray{ InstanceNodeArgs{...} }
type InstanceNodeArrayInput interface {
	pulumi.Input

	ToInstanceNodeArrayOutput() InstanceNodeArrayOutput
	ToInstanceNodeArrayOutputWithContext(context.Context) InstanceNodeArrayOutput
}

type InstanceNodeArray []InstanceNodeInput

func (InstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return i.ToInstanceNodeArrayOutputWithContext(context.Background())
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeArrayOutput)
}

type InstanceNodeOutput struct{ *pulumi.OutputState }

func (InstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (o InstanceNodeOutput) ToInstanceNodeOutput() InstanceNodeOutput {
	return o
}

func (o InstanceNodeOutput) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return o
}

// Node creation local time.
func (o InstanceNodeOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Instance ID.
func (o InstanceNodeOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// Memory size in GB.
func (o InstanceNodeOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceNode) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// Node ID.
func (o InstanceNodeOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// The specification of primary node and secondary node.
func (o InstanceNodeOutput) NodeSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeSpec }).(pulumi.StringPtrOutput)
}

// Node state, value: aligned with instance state.
func (o InstanceNodeOutput) NodeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeStatus }).(pulumi.StringPtrOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstanceNodeOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The region of the RDS instance.
func (o InstanceNodeOutput) RegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.RegionId }).(pulumi.StringPtrOutput)
}

// The update time of the RDS instance.
func (o InstanceNodeOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

// CPU size.
func (o InstanceNodeOutput) VCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceNode) *int { return v.VCpu }).(pulumi.IntPtrOutput)
}

// The available zone of the RDS instance.
func (o InstanceNodeOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type InstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (InstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) Index(i pulumi.IntInput) InstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNode {
		return vs[0].([]InstanceNode)[vs[1].(int)]
	}).(InstanceNodeOutput)
}

type InstanceParameter struct {
	// Parameter name.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue string `pulumi:"parameterValue"`
}

// InstanceParameterInput is an input type that accepts InstanceParameterArgs and InstanceParameterOutput values.
// You can construct a concrete instance of `InstanceParameterInput` via:
//
//	InstanceParameterArgs{...}
type InstanceParameterInput interface {
	pulumi.Input

	ToInstanceParameterOutput() InstanceParameterOutput
	ToInstanceParameterOutputWithContext(context.Context) InstanceParameterOutput
}

type InstanceParameterArgs struct {
	// Parameter name.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (InstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArgs) ToInstanceParameterOutput() InstanceParameterOutput {
	return i.ToInstanceParameterOutputWithContext(context.Background())
}

func (i InstanceParameterArgs) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterOutput)
}

// InstanceParameterArrayInput is an input type that accepts InstanceParameterArray and InstanceParameterArrayOutput values.
// You can construct a concrete instance of `InstanceParameterArrayInput` via:
//
//	InstanceParameterArray{ InstanceParameterArgs{...} }
type InstanceParameterArrayInput interface {
	pulumi.Input

	ToInstanceParameterArrayOutput() InstanceParameterArrayOutput
	ToInstanceParameterArrayOutputWithContext(context.Context) InstanceParameterArrayOutput
}

type InstanceParameterArray []InstanceParameterInput

func (InstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return i.ToInstanceParameterArrayOutputWithContext(context.Background())
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterArrayOutput)
}

type InstanceParameterOutput struct{ *pulumi.OutputState }

func (InstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterOutput) ToInstanceParameterOutput() InstanceParameterOutput {
	return o
}

func (o InstanceParameterOutput) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return o
}

// Parameter name.
func (o InstanceParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

// Parameter value.
func (o InstanceParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type InstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (InstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) Index(i pulumi.IntInput) InstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceParameter {
		return vs[0].([]InstanceParameter)[vs[1].(int)]
	}).(InstanceParameterOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstancesRdsMysqlInstance struct {
	// The version of allow list.
	AllowListVersion string `pulumi:"allowListVersion"`
	// The instance has used backup space. Unit: GB.
	BackupUse int `pulumi:"backupUse"`
	// Payment methods.
	ChargeDetail InstancesRdsMysqlInstanceChargeDetail `pulumi:"chargeDetail"`
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode string `pulumi:"dataSyncMode"`
	// The version of the RDS instance.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The endpoint info of the RDS instance.
	Endpoints []InstancesRdsMysqlInstanceEndpoint `pulumi:"endpoints"`
	// The ID of the RDS instance.
	Id string `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName string `pulumi:"instanceName"`
	// The status of the RDS instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// Whether the table name is case sensitive, the default value is 1.
	// Ranges:
	// 0: Table names are stored as fixed and table names are case-sensitive.
	// 1: Table names will be stored in lowercase and table names are not case sensitive.
	LowerCaseTableNames string `pulumi:"lowerCaseTableNames"`
	// Maintenance Window.
	MaintenanceWindows []InstancesRdsMysqlInstanceMaintenanceWindow `pulumi:"maintenanceWindows"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// The number of nodes.
	NodeNumber int `pulumi:"nodeNumber"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes []InstancesRdsMysqlInstanceNode `pulumi:"nodes"`
	// The project name of the RDS instance.
	ProjectName string `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// Total instance storage space. Unit: GB.
	StorageSpace int `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType string `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse int `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstancesRdsMysqlInstanceTag `pulumi:"tags"`
	// Time zone.
	TimeZone string `pulumi:"timeZone"`
	// The update time of the RDS instance.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size.
	VCpu int `pulumi:"vCpu"`
	// The vpc ID of the RDS instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesRdsMysqlInstanceInput is an input type that accepts InstancesRdsMysqlInstanceArgs and InstancesRdsMysqlInstanceOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceInput` via:
//
//	InstancesRdsMysqlInstanceArgs{...}
type InstancesRdsMysqlInstanceInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceOutput() InstancesRdsMysqlInstanceOutput
	ToInstancesRdsMysqlInstanceOutputWithContext(context.Context) InstancesRdsMysqlInstanceOutput
}

type InstancesRdsMysqlInstanceArgs struct {
	// The version of allow list.
	AllowListVersion pulumi.StringInput `pulumi:"allowListVersion"`
	// The instance has used backup space. Unit: GB.
	BackupUse pulumi.IntInput `pulumi:"backupUse"`
	// Payment methods.
	ChargeDetail InstancesRdsMysqlInstanceChargeDetailInput `pulumi:"chargeDetail"`
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode pulumi.StringInput `pulumi:"dataSyncMode"`
	// The version of the RDS instance.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// The endpoint info of the RDS instance.
	Endpoints InstancesRdsMysqlInstanceEndpointArrayInput `pulumi:"endpoints"`
	// The ID of the RDS instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the RDS instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of the RDS instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// Whether the table name is case sensitive, the default value is 1.
	// Ranges:
	// 0: Table names are stored as fixed and table names are case-sensitive.
	// 1: Table names will be stored in lowercase and table names are not case sensitive.
	LowerCaseTableNames pulumi.StringInput `pulumi:"lowerCaseTableNames"`
	// Maintenance Window.
	MaintenanceWindows InstancesRdsMysqlInstanceMaintenanceWindowArrayInput `pulumi:"maintenanceWindows"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// The number of nodes.
	NodeNumber pulumi.IntInput `pulumi:"nodeNumber"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes InstancesRdsMysqlInstanceNodeArrayInput `pulumi:"nodes"`
	// The project name of the RDS instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Total instance storage space. Unit: GB.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The instance has used storage space. Unit: GB.
	StorageUse pulumi.IntInput `pulumi:"storageUse"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags InstancesRdsMysqlInstanceTagArrayInput `pulumi:"tags"`
	// Time zone.
	TimeZone pulumi.StringInput `pulumi:"timeZone"`
	// The update time of the RDS instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The vpc ID of the RDS instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesRdsMysqlInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstance)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceArgs) ToInstancesRdsMysqlInstanceOutput() InstancesRdsMysqlInstanceOutput {
	return i.ToInstancesRdsMysqlInstanceOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceArgs) ToInstancesRdsMysqlInstanceOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceOutput)
}

// InstancesRdsMysqlInstanceArrayInput is an input type that accepts InstancesRdsMysqlInstanceArray and InstancesRdsMysqlInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceArrayInput` via:
//
//	InstancesRdsMysqlInstanceArray{ InstancesRdsMysqlInstanceArgs{...} }
type InstancesRdsMysqlInstanceArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceArrayOutput() InstancesRdsMysqlInstanceArrayOutput
	ToInstancesRdsMysqlInstanceArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceArrayOutput
}

type InstancesRdsMysqlInstanceArray []InstancesRdsMysqlInstanceInput

func (InstancesRdsMysqlInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstance)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceArray) ToInstancesRdsMysqlInstanceArrayOutput() InstancesRdsMysqlInstanceArrayOutput {
	return i.ToInstancesRdsMysqlInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceArray) ToInstancesRdsMysqlInstanceArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceArrayOutput)
}

type InstancesRdsMysqlInstanceOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstance)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceOutput) ToInstancesRdsMysqlInstanceOutput() InstancesRdsMysqlInstanceOutput {
	return o
}

func (o InstancesRdsMysqlInstanceOutput) ToInstancesRdsMysqlInstanceOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceOutput {
	return o
}

// The version of allow list.
func (o InstancesRdsMysqlInstanceOutput) AllowListVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.AllowListVersion }).(pulumi.StringOutput)
}

// The instance has used backup space. Unit: GB.
func (o InstancesRdsMysqlInstanceOutput) BackupUse() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.BackupUse }).(pulumi.IntOutput)
}

// Payment methods.
func (o InstancesRdsMysqlInstanceOutput) ChargeDetail() InstancesRdsMysqlInstanceChargeDetailOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) InstancesRdsMysqlInstanceChargeDetail { return v.ChargeDetail }).(InstancesRdsMysqlInstanceChargeDetailOutput)
}

// Node creation local time.
func (o InstancesRdsMysqlInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Data synchronization mode.
func (o InstancesRdsMysqlInstanceOutput) DataSyncMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.DataSyncMode }).(pulumi.StringOutput)
}

// The version of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The endpoint info of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) Endpoints() InstancesRdsMysqlInstanceEndpointArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []InstancesRdsMysqlInstanceEndpoint { return v.Endpoints }).(InstancesRdsMysqlInstanceEndpointArrayOutput)
}

// The ID of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// Whether the table name is case sensitive, the default value is 1.
// Ranges:
// 0: Table names are stored as fixed and table names are case-sensitive.
// 1: Table names will be stored in lowercase and table names are not case sensitive.
func (o InstancesRdsMysqlInstanceOutput) LowerCaseTableNames() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.LowerCaseTableNames }).(pulumi.StringOutput)
}

// Maintenance Window.
func (o InstancesRdsMysqlInstanceOutput) MaintenanceWindows() InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []InstancesRdsMysqlInstanceMaintenanceWindow {
		return v.MaintenanceWindows
	}).(InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput)
}

// Memory size in GB.
func (o InstancesRdsMysqlInstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.Memory }).(pulumi.IntOutput)
}

// The number of nodes.
func (o InstancesRdsMysqlInstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.NodeNumber }).(pulumi.IntOutput)
}

// General instance type, different from Custom instance type.
func (o InstancesRdsMysqlInstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Instance node information.
func (o InstancesRdsMysqlInstanceOutput) Nodes() InstancesRdsMysqlInstanceNodeArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []InstancesRdsMysqlInstanceNode { return v.Nodes }).(InstancesRdsMysqlInstanceNodeArrayOutput)
}

// The project name of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// Total instance storage space. Unit: GB.
func (o InstancesRdsMysqlInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// Instance storage type.
func (o InstancesRdsMysqlInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The instance has used storage space. Unit: GB.
func (o InstancesRdsMysqlInstanceOutput) StorageUse() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.StorageUse }).(pulumi.IntOutput)
}

// The subnet ID of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstancesRdsMysqlInstanceOutput) Tags() InstancesRdsMysqlInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) []InstancesRdsMysqlInstanceTag { return v.Tags }).(InstancesRdsMysqlInstanceTagArrayOutput)
}

// Time zone.
func (o InstancesRdsMysqlInstanceOutput) TimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.TimeZone }).(pulumi.StringOutput)
}

// The update time of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size.
func (o InstancesRdsMysqlInstanceOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) int { return v.VCpu }).(pulumi.IntOutput)
}

// The vpc ID of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone of the RDS instance.
func (o InstancesRdsMysqlInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstance)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceArrayOutput) ToInstancesRdsMysqlInstanceArrayOutput() InstancesRdsMysqlInstanceArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceArrayOutput) ToInstancesRdsMysqlInstanceArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstance {
		return vs[0].([]InstancesRdsMysqlInstance)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceOutput)
}

type InstancesRdsMysqlInstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew bool `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime string `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType string `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime string `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit string `pulumi:"periodUnit"`
}

// InstancesRdsMysqlInstanceChargeDetailInput is an input type that accepts InstancesRdsMysqlInstanceChargeDetailArgs and InstancesRdsMysqlInstanceChargeDetailOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceChargeDetailInput` via:
//
//	InstancesRdsMysqlInstanceChargeDetailArgs{...}
type InstancesRdsMysqlInstanceChargeDetailInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceChargeDetailOutput() InstancesRdsMysqlInstanceChargeDetailOutput
	ToInstancesRdsMysqlInstanceChargeDetailOutputWithContext(context.Context) InstancesRdsMysqlInstanceChargeDetailOutput
}

type InstancesRdsMysqlInstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime pulumi.StringInput `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
}

func (InstancesRdsMysqlInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceChargeDetailArgs) ToInstancesRdsMysqlInstanceChargeDetailOutput() InstancesRdsMysqlInstanceChargeDetailOutput {
	return i.ToInstancesRdsMysqlInstanceChargeDetailOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceChargeDetailArgs) ToInstancesRdsMysqlInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceChargeDetailOutput)
}

type InstancesRdsMysqlInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceChargeDetailOutput) ToInstancesRdsMysqlInstanceChargeDetailOutput() InstancesRdsMysqlInstanceChargeDetailOutput {
	return o
}

func (o InstancesRdsMysqlInstanceChargeDetailOutput) ToInstancesRdsMysqlInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
// Autorenew_Enable
// Autorenew_Disable (default).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// Billing expiry time (yearly and monthly only).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) ChargeEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeEndTime }).(pulumi.StringOutput)
}

// Billing start time (pay-as-you-go & monthly subscription).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// Pay status. Value:
// normal - normal
// overdue - overdue
// .
func (o InstancesRdsMysqlInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of the RDS instance.
func (o InstancesRdsMysqlInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// Shutdown time in arrears (pay-as-you-go & monthly subscription).
func (o InstancesRdsMysqlInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstancesRdsMysqlInstanceChargeDetailOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) int { return v.Period }).(pulumi.IntOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstancesRdsMysqlInstanceChargeDetailOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceChargeDetail) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceEndpoint struct {
	// Address list.
	Addresses []InstancesRdsMysqlInstanceEndpointAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType string `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights []InstancesRdsMysqlInstanceEndpointNodeWeight `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode string `pulumi:"readWriteMode"`
}

// InstancesRdsMysqlInstanceEndpointInput is an input type that accepts InstancesRdsMysqlInstanceEndpointArgs and InstancesRdsMysqlInstanceEndpointOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointInput` via:
//
//	InstancesRdsMysqlInstanceEndpointArgs{...}
type InstancesRdsMysqlInstanceEndpointInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointOutput() InstancesRdsMysqlInstanceEndpointOutput
	ToInstancesRdsMysqlInstanceEndpointOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointOutput
}

type InstancesRdsMysqlInstanceEndpointArgs struct {
	// Address list.
	Addresses InstancesRdsMysqlInstanceEndpointAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	NodeWeights InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput `pulumi:"nodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringInput `pulumi:"readWriteMode"`
}

func (InstancesRdsMysqlInstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointArgs) ToInstancesRdsMysqlInstanceEndpointOutput() InstancesRdsMysqlInstanceEndpointOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointArgs) ToInstancesRdsMysqlInstanceEndpointOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointOutput)
}

// InstancesRdsMysqlInstanceEndpointArrayInput is an input type that accepts InstancesRdsMysqlInstanceEndpointArray and InstancesRdsMysqlInstanceEndpointArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointArrayInput` via:
//
//	InstancesRdsMysqlInstanceEndpointArray{ InstancesRdsMysqlInstanceEndpointArgs{...} }
type InstancesRdsMysqlInstanceEndpointArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointArrayOutput() InstancesRdsMysqlInstanceEndpointArrayOutput
	ToInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointArrayOutput
}

type InstancesRdsMysqlInstanceEndpointArray []InstancesRdsMysqlInstanceEndpointInput

func (InstancesRdsMysqlInstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointArray) ToInstancesRdsMysqlInstanceEndpointArrayOutput() InstancesRdsMysqlInstanceEndpointArrayOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointArray) ToInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointArrayOutput)
}

type InstancesRdsMysqlInstanceEndpointOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointOutput) ToInstancesRdsMysqlInstanceEndpointOutput() InstancesRdsMysqlInstanceEndpointOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointOutput) ToInstancesRdsMysqlInstanceEndpointOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointOutput {
	return o
}

// Address list.
func (o InstancesRdsMysqlInstanceEndpointOutput) Addresses() InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) []InstancesRdsMysqlInstanceEndpointAddress {
		return v.Addresses
	}).(InstancesRdsMysqlInstanceEndpointAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o InstancesRdsMysqlInstanceEndpointOutput) AutoAddNewNodes() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.AutoAddNewNodes }).(pulumi.StringOutput)
}

// Address description.
func (o InstancesRdsMysqlInstanceEndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.Description }).(pulumi.StringOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstancesRdsMysqlInstanceEndpointOutput) EnableReadOnly() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EnableReadOnly }).(pulumi.StringOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstancesRdsMysqlInstanceEndpointOutput) EnableReadWriteSplitting() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EnableReadWriteSplitting }).(pulumi.StringOutput)
}

// Instance connection terminal ID.
func (o InstancesRdsMysqlInstanceEndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The instance connection terminal name.
func (o InstancesRdsMysqlInstanceEndpointOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EndpointName }).(pulumi.StringOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o InstancesRdsMysqlInstanceEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o InstancesRdsMysqlInstanceEndpointOutput) NodeWeights() InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) []InstancesRdsMysqlInstanceEndpointNodeWeight {
		return v.NodeWeights
	}).(InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o InstancesRdsMysqlInstanceEndpointOutput) ReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpoint) string { return v.ReadWriteMode }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpoint)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointArrayOutput) ToInstancesRdsMysqlInstanceEndpointArrayOutput() InstancesRdsMysqlInstanceEndpointArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointArrayOutput) ToInstancesRdsMysqlInstanceEndpointArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceEndpoint {
		return vs[0].([]InstancesRdsMysqlInstanceEndpoint)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceEndpointOutput)
}

type InstancesRdsMysqlInstanceEndpointAddress struct {
	// DNS Visibility.
	DnsVisibility bool `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId string `pulumi:"eipId"`
	// The IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType string `pulumi:"networkType"`
	// The Port.
	Port string `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId string `pulumi:"subnetId"`
}

// InstancesRdsMysqlInstanceEndpointAddressInput is an input type that accepts InstancesRdsMysqlInstanceEndpointAddressArgs and InstancesRdsMysqlInstanceEndpointAddressOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointAddressInput` via:
//
//	InstancesRdsMysqlInstanceEndpointAddressArgs{...}
type InstancesRdsMysqlInstanceEndpointAddressInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointAddressOutput() InstancesRdsMysqlInstanceEndpointAddressOutput
	ToInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointAddressOutput
}

type InstancesRdsMysqlInstanceEndpointAddressArgs struct {
	// DNS Visibility.
	DnsVisibility pulumi.BoolInput `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringInput `pulumi:"port"`
	// The subnet ID of the RDS instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (InstancesRdsMysqlInstanceEndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointAddressArgs) ToInstancesRdsMysqlInstanceEndpointAddressOutput() InstancesRdsMysqlInstanceEndpointAddressOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointAddressArgs) ToInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointAddressOutput)
}

// InstancesRdsMysqlInstanceEndpointAddressArrayInput is an input type that accepts InstancesRdsMysqlInstanceEndpointAddressArray and InstancesRdsMysqlInstanceEndpointAddressArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointAddressArrayInput` via:
//
//	InstancesRdsMysqlInstanceEndpointAddressArray{ InstancesRdsMysqlInstanceEndpointAddressArgs{...} }
type InstancesRdsMysqlInstanceEndpointAddressArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointAddressArrayOutput() InstancesRdsMysqlInstanceEndpointAddressArrayOutput
	ToInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointAddressArrayOutput
}

type InstancesRdsMysqlInstanceEndpointAddressArray []InstancesRdsMysqlInstanceEndpointAddressInput

func (InstancesRdsMysqlInstanceEndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointAddressArray) ToInstancesRdsMysqlInstanceEndpointAddressArrayOutput() InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointAddressArray) ToInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointAddressArrayOutput)
}

type InstancesRdsMysqlInstanceEndpointAddressOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointAddressOutput) ToInstancesRdsMysqlInstanceEndpointAddressOutput() InstancesRdsMysqlInstanceEndpointAddressOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointAddressOutput) ToInstancesRdsMysqlInstanceEndpointAddressOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointAddressOutput {
	return o
}

// DNS Visibility.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) DnsVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) bool { return v.DnsVisibility }).(pulumi.BoolOutput)
}

// Connect domain name.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The IP Address.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The Port.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.Port }).(pulumi.StringOutput)
}

// The subnet ID of the RDS instance.
func (o InstancesRdsMysqlInstanceEndpointAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceEndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpointAddress)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointAddressArrayOutput) ToInstancesRdsMysqlInstanceEndpointAddressArrayOutput() InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointAddressArrayOutput) ToInstancesRdsMysqlInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointAddressArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointAddressArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceEndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceEndpointAddress {
		return vs[0].([]InstancesRdsMysqlInstanceEndpointAddress)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceEndpointAddressOutput)
}

type InstancesRdsMysqlInstanceEndpointNodeWeight struct {
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The weight of the node.
	Weight int `pulumi:"weight"`
}

// InstancesRdsMysqlInstanceEndpointNodeWeightInput is an input type that accepts InstancesRdsMysqlInstanceEndpointNodeWeightArgs and InstancesRdsMysqlInstanceEndpointNodeWeightOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointNodeWeightInput` via:
//
//	InstancesRdsMysqlInstanceEndpointNodeWeightArgs{...}
type InstancesRdsMysqlInstanceEndpointNodeWeightInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointNodeWeightOutput() InstancesRdsMysqlInstanceEndpointNodeWeightOutput
	ToInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightOutput
}

type InstancesRdsMysqlInstanceEndpointNodeWeightArgs struct {
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (InstancesRdsMysqlInstanceEndpointNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointNodeWeightArgs) ToInstancesRdsMysqlInstanceEndpointNodeWeightOutput() InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointNodeWeightArgs) ToInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointNodeWeightOutput)
}

// InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput is an input type that accepts InstancesRdsMysqlInstanceEndpointNodeWeightArray and InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput` via:
//
//	InstancesRdsMysqlInstanceEndpointNodeWeightArray{ InstancesRdsMysqlInstanceEndpointNodeWeightArgs{...} }
type InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput() InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput
	ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput
}

type InstancesRdsMysqlInstanceEndpointNodeWeightArray []InstancesRdsMysqlInstanceEndpointNodeWeightInput

func (InstancesRdsMysqlInstanceEndpointNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceEndpointNodeWeightArray) ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput() InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return i.ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceEndpointNodeWeightArray) ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput)
}

type InstancesRdsMysqlInstanceEndpointNodeWeightOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) ToInstancesRdsMysqlInstanceEndpointNodeWeightOutput() InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) ToInstancesRdsMysqlInstanceEndpointNodeWeightOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return o
}

// Node ID.
func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointNodeWeight) string { return v.NodeId }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointNodeWeight) string { return v.NodeType }).(pulumi.StringOutput)
}

// The weight of the node.
func (o InstancesRdsMysqlInstanceEndpointNodeWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceEndpointNodeWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceEndpointNodeWeight)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput() InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) ToInstancesRdsMysqlInstanceEndpointNodeWeightArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceEndpointNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceEndpointNodeWeight {
		return vs[0].([]InstancesRdsMysqlInstanceEndpointNodeWeight)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceEndpointNodeWeightOutput)
}

type InstancesRdsMysqlInstanceMaintenanceWindow struct {
	// DayKind of maintainable window. Value: Week. Month.
	DayKind string `pulumi:"dayKind"`
	// Days of maintainable window of the month.
	DayOfMonths []int `pulumi:"dayOfMonths"`
	// Days of maintainable window of the week.
	DayOfWeeks []string `pulumi:"dayOfWeeks"`
	// The maintainable time of the RDS instance.
	MaintenanceTime string `pulumi:"maintenanceTime"`
}

// InstancesRdsMysqlInstanceMaintenanceWindowInput is an input type that accepts InstancesRdsMysqlInstanceMaintenanceWindowArgs and InstancesRdsMysqlInstanceMaintenanceWindowOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceMaintenanceWindowInput` via:
//
//	InstancesRdsMysqlInstanceMaintenanceWindowArgs{...}
type InstancesRdsMysqlInstanceMaintenanceWindowInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceMaintenanceWindowOutput() InstancesRdsMysqlInstanceMaintenanceWindowOutput
	ToInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(context.Context) InstancesRdsMysqlInstanceMaintenanceWindowOutput
}

type InstancesRdsMysqlInstanceMaintenanceWindowArgs struct {
	// DayKind of maintainable window. Value: Week. Month.
	DayKind pulumi.StringInput `pulumi:"dayKind"`
	// Days of maintainable window of the month.
	DayOfMonths pulumi.IntArrayInput `pulumi:"dayOfMonths"`
	// Days of maintainable window of the week.
	DayOfWeeks pulumi.StringArrayInput `pulumi:"dayOfWeeks"`
	// The maintainable time of the RDS instance.
	MaintenanceTime pulumi.StringInput `pulumi:"maintenanceTime"`
}

func (InstancesRdsMysqlInstanceMaintenanceWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceMaintenanceWindowArgs) ToInstancesRdsMysqlInstanceMaintenanceWindowOutput() InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return i.ToInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceMaintenanceWindowArgs) ToInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceMaintenanceWindowOutput)
}

// InstancesRdsMysqlInstanceMaintenanceWindowArrayInput is an input type that accepts InstancesRdsMysqlInstanceMaintenanceWindowArray and InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceMaintenanceWindowArrayInput` via:
//
//	InstancesRdsMysqlInstanceMaintenanceWindowArray{ InstancesRdsMysqlInstanceMaintenanceWindowArgs{...} }
type InstancesRdsMysqlInstanceMaintenanceWindowArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput() InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput
	ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput
}

type InstancesRdsMysqlInstanceMaintenanceWindowArray []InstancesRdsMysqlInstanceMaintenanceWindowInput

func (InstancesRdsMysqlInstanceMaintenanceWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceMaintenanceWindowArray) ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput() InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return i.ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceMaintenanceWindowArray) ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput)
}

type InstancesRdsMysqlInstanceMaintenanceWindowOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceMaintenanceWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) ToInstancesRdsMysqlInstanceMaintenanceWindowOutput() InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return o
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) ToInstancesRdsMysqlInstanceMaintenanceWindowOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return o
}

// DayKind of maintainable window. Value: Week. Month.
func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) DayKind() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceMaintenanceWindow) string { return v.DayKind }).(pulumi.StringOutput)
}

// Days of maintainable window of the month.
func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) DayOfMonths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceMaintenanceWindow) []int { return v.DayOfMonths }).(pulumi.IntArrayOutput)
}

// Days of maintainable window of the week.
func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) DayOfWeeks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceMaintenanceWindow) []string { return v.DayOfWeeks }).(pulumi.StringArrayOutput)
}

// The maintainable time of the RDS instance.
func (o InstancesRdsMysqlInstanceMaintenanceWindowOutput) MaintenanceTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceMaintenanceWindow) string { return v.MaintenanceTime }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceMaintenanceWindow)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutput() InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) ToInstancesRdsMysqlInstanceMaintenanceWindowArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceMaintenanceWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceMaintenanceWindow {
		return vs[0].([]InstancesRdsMysqlInstanceMaintenanceWindow)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceMaintenanceWindowOutput)
}

type InstancesRdsMysqlInstanceNode struct {
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus string `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId string `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size.
	VCpu int `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesRdsMysqlInstanceNodeInput is an input type that accepts InstancesRdsMysqlInstanceNodeArgs and InstancesRdsMysqlInstanceNodeOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceNodeInput` via:
//
//	InstancesRdsMysqlInstanceNodeArgs{...}
type InstancesRdsMysqlInstanceNodeInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceNodeOutput() InstancesRdsMysqlInstanceNodeOutput
	ToInstancesRdsMysqlInstanceNodeOutputWithContext(context.Context) InstancesRdsMysqlInstanceNodeOutput
}

type InstancesRdsMysqlInstanceNodeArgs struct {
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The region of the RDS instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The update time of the RDS instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The available zone of the RDS instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesRdsMysqlInstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceNodeArgs) ToInstancesRdsMysqlInstanceNodeOutput() InstancesRdsMysqlInstanceNodeOutput {
	return i.ToInstancesRdsMysqlInstanceNodeOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceNodeArgs) ToInstancesRdsMysqlInstanceNodeOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceNodeOutput)
}

// InstancesRdsMysqlInstanceNodeArrayInput is an input type that accepts InstancesRdsMysqlInstanceNodeArray and InstancesRdsMysqlInstanceNodeArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceNodeArrayInput` via:
//
//	InstancesRdsMysqlInstanceNodeArray{ InstancesRdsMysqlInstanceNodeArgs{...} }
type InstancesRdsMysqlInstanceNodeArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceNodeArrayOutput() InstancesRdsMysqlInstanceNodeArrayOutput
	ToInstancesRdsMysqlInstanceNodeArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceNodeArrayOutput
}

type InstancesRdsMysqlInstanceNodeArray []InstancesRdsMysqlInstanceNodeInput

func (InstancesRdsMysqlInstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceNodeArray) ToInstancesRdsMysqlInstanceNodeArrayOutput() InstancesRdsMysqlInstanceNodeArrayOutput {
	return i.ToInstancesRdsMysqlInstanceNodeArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceNodeArray) ToInstancesRdsMysqlInstanceNodeArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceNodeArrayOutput)
}

type InstancesRdsMysqlInstanceNodeOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceNodeOutput) ToInstancesRdsMysqlInstanceNodeOutput() InstancesRdsMysqlInstanceNodeOutput {
	return o
}

func (o InstancesRdsMysqlInstanceNodeOutput) ToInstancesRdsMysqlInstanceNodeOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceNodeOutput {
	return o
}

// Node creation local time.
func (o InstancesRdsMysqlInstanceNodeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of the RDS instance.
func (o InstancesRdsMysqlInstanceNodeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Memory size in GB.
func (o InstancesRdsMysqlInstanceNodeOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) int { return v.Memory }).(pulumi.IntOutput)
}

// Node ID.
func (o InstancesRdsMysqlInstanceNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.NodeId }).(pulumi.StringOutput)
}

// General instance type, different from Custom instance type.
func (o InstancesRdsMysqlInstanceNodeOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Node state, value: aligned with instance state.
func (o InstancesRdsMysqlInstanceNodeOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstancesRdsMysqlInstanceNodeOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.NodeType }).(pulumi.StringOutput)
}

// The region of the RDS instance.
func (o InstancesRdsMysqlInstanceNodeOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.RegionId }).(pulumi.StringOutput)
}

// The update time of the RDS instance.
func (o InstancesRdsMysqlInstanceNodeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size.
func (o InstancesRdsMysqlInstanceNodeOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) int { return v.VCpu }).(pulumi.IntOutput)
}

// The available zone of the RDS instance.
func (o InstancesRdsMysqlInstanceNodeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceNode) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceNode)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceNodeArrayOutput) ToInstancesRdsMysqlInstanceNodeArrayOutput() InstancesRdsMysqlInstanceNodeArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceNodeArrayOutput) ToInstancesRdsMysqlInstanceNodeArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceNodeArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceNodeArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceNode {
		return vs[0].([]InstancesRdsMysqlInstanceNode)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceNodeOutput)
}

type InstancesRdsMysqlInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesRdsMysqlInstanceTagInput is an input type that accepts InstancesRdsMysqlInstanceTagArgs and InstancesRdsMysqlInstanceTagOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceTagInput` via:
//
//	InstancesRdsMysqlInstanceTagArgs{...}
type InstancesRdsMysqlInstanceTagInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceTagOutput() InstancesRdsMysqlInstanceTagOutput
	ToInstancesRdsMysqlInstanceTagOutputWithContext(context.Context) InstancesRdsMysqlInstanceTagOutput
}

type InstancesRdsMysqlInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesRdsMysqlInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceTagArgs) ToInstancesRdsMysqlInstanceTagOutput() InstancesRdsMysqlInstanceTagOutput {
	return i.ToInstancesRdsMysqlInstanceTagOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceTagArgs) ToInstancesRdsMysqlInstanceTagOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceTagOutput)
}

// InstancesRdsMysqlInstanceTagArrayInput is an input type that accepts InstancesRdsMysqlInstanceTagArray and InstancesRdsMysqlInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesRdsMysqlInstanceTagArrayInput` via:
//
//	InstancesRdsMysqlInstanceTagArray{ InstancesRdsMysqlInstanceTagArgs{...} }
type InstancesRdsMysqlInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesRdsMysqlInstanceTagArrayOutput() InstancesRdsMysqlInstanceTagArrayOutput
	ToInstancesRdsMysqlInstanceTagArrayOutputWithContext(context.Context) InstancesRdsMysqlInstanceTagArrayOutput
}

type InstancesRdsMysqlInstanceTagArray []InstancesRdsMysqlInstanceTagInput

func (InstancesRdsMysqlInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (i InstancesRdsMysqlInstanceTagArray) ToInstancesRdsMysqlInstanceTagArrayOutput() InstancesRdsMysqlInstanceTagArrayOutput {
	return i.ToInstancesRdsMysqlInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesRdsMysqlInstanceTagArray) ToInstancesRdsMysqlInstanceTagArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRdsMysqlInstanceTagArrayOutput)
}

type InstancesRdsMysqlInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceTagOutput) ToInstancesRdsMysqlInstanceTagOutput() InstancesRdsMysqlInstanceTagOutput {
	return o
}

func (o InstancesRdsMysqlInstanceTagOutput) ToInstancesRdsMysqlInstanceTagOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesRdsMysqlInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesRdsMysqlInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRdsMysqlInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesRdsMysqlInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesRdsMysqlInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRdsMysqlInstanceTag)(nil)).Elem()
}

func (o InstancesRdsMysqlInstanceTagArrayOutput) ToInstancesRdsMysqlInstanceTagArrayOutput() InstancesRdsMysqlInstanceTagArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceTagArrayOutput) ToInstancesRdsMysqlInstanceTagArrayOutputWithContext(ctx context.Context) InstancesRdsMysqlInstanceTagArrayOutput {
	return o
}

func (o InstancesRdsMysqlInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesRdsMysqlInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRdsMysqlInstanceTag {
		return vs[0].([]InstancesRdsMysqlInstanceTag)[vs[1].(int)]
	}).(InstancesRdsMysqlInstanceTagOutput)
}

type InstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountAccountPrivilegeInput)(nil)).Elem(), AccountAccountPrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountAccountPrivilegeArrayInput)(nil)).Elem(), AccountAccountPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountInput)(nil)).Elem(), AccountsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountArrayInput)(nil)).Elem(), AccountsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountAccountPrivilegeInput)(nil)).Elem(), AccountsAccountAccountPrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountAccountPrivilegeArrayInput)(nil)).Elem(), AccountsAccountAccountPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListInput)(nil)).Elem(), AllowlistsAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListArrayInput)(nil)).Elem(), AllowlistsAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListAssociatedInstanceInput)(nil)).Elem(), AllowlistsAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsAllowListAssociatedInstanceArrayInput)(nil)).Elem(), AllowlistsAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseInput)(nil)).Elem(), DatabasesDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseArrayInput)(nil)).Elem(), DatabasesDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseDatabasePrivilegeInput)(nil)).Elem(), DatabasesDatabaseDatabasePrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseDatabasePrivilegeArrayInput)(nil)).Elem(), DatabasesDatabaseDatabasePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeDetailInput)(nil)).Elem(), InstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeDetailArrayInput)(nil)).Elem(), InstanceChargeDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoPtrInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointInput)(nil)).Elem(), InstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointArrayInput)(nil)).Elem(), InstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointAddressInput)(nil)).Elem(), InstanceEndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointAddressArrayInput)(nil)).Elem(), InstanceEndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointNodeWeightInput)(nil)).Elem(), InstanceEndpointNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointNodeWeightArrayInput)(nil)).Elem(), InstanceEndpointNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMaintenanceWindowInput)(nil)).Elem(), InstanceMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMaintenanceWindowArrayInput)(nil)).Elem(), InstanceMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeInput)(nil)).Elem(), InstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeArrayInput)(nil)).Elem(), InstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterInput)(nil)).Elem(), InstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterArrayInput)(nil)).Elem(), InstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceInput)(nil)).Elem(), InstancesRdsMysqlInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceChargeDetailInput)(nil)).Elem(), InstancesRdsMysqlInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointAddressInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointAddressArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointNodeWeightInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceEndpointNodeWeightArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceEndpointNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceMaintenanceWindowInput)(nil)).Elem(), InstancesRdsMysqlInstanceMaintenanceWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceMaintenanceWindowArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceMaintenanceWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceNodeInput)(nil)).Elem(), InstancesRdsMysqlInstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceNodeArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceTagInput)(nil)).Elem(), InstancesRdsMysqlInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRdsMysqlInstanceTagArrayInput)(nil)).Elem(), InstancesRdsMysqlInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterOutputType(AccountAccountPrivilegeOutput{})
	pulumi.RegisterOutputType(AccountAccountPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(AccountsAccountOutput{})
	pulumi.RegisterOutputType(AccountsAccountArrayOutput{})
	pulumi.RegisterOutputType(AccountsAccountAccountPrivilegeOutput{})
	pulumi.RegisterOutputType(AccountsAccountAccountPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListArrayOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(AllowlistsAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseArrayOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseDatabasePrivilegeOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseDatabasePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(InstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(InstanceChargeDetailArrayOutput{})
	pulumi.RegisterOutputType(InstanceChargeInfoOutput{})
	pulumi.RegisterOutputType(InstanceChargeInfoPtrOutput{})
	pulumi.RegisterOutputType(InstanceEndpointOutput{})
	pulumi.RegisterOutputType(InstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(InstanceEndpointAddressOutput{})
	pulumi.RegisterOutputType(InstanceEndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(InstanceEndpointNodeWeightOutput{})
	pulumi.RegisterOutputType(InstanceEndpointNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(InstanceMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(InstanceMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(InstanceNodeOutput{})
	pulumi.RegisterOutputType(InstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(InstanceParameterOutput{})
	pulumi.RegisterOutputType(InstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointAddressOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointNodeWeightOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceEndpointNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceMaintenanceWindowOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceMaintenanceWindowArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceNodeOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesRdsMysqlInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
}
