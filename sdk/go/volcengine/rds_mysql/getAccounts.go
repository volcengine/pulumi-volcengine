// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of rds mysql accounts
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := rds_mysql.NewInstance(ctx, "fooInstance", &rds_mysql.InstanceArgs{
//				InstanceName:        pulumi.String("acc-test-rds-mysql"),
//				DbEngineVersion:     pulumi.String("MySQL_5_7"),
//				NodeSpec:            pulumi.String("rds.mysql.1c2g"),
//				PrimaryZoneId:       pulumi.String(fooZones.Zones[0].Id),
//				SecondaryZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				StorageSpace:        pulumi.Int(80),
//				SubnetId:            fooSubnet.ID(),
//				LowerCaseTableNames: pulumi.String("1"),
//				ChargeInfo: &rds_mysql.InstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				Parameters: rds_mysql.InstanceParameterArray{
//					&rds_mysql.InstanceParameterArgs{
//						ParameterName:  pulumi.String("auto_increment_increment"),
//						ParameterValue: pulumi.String("2"),
//					},
//					&rds_mysql.InstanceParameterArgs{
//						ParameterName:  pulumi.String("auto_increment_offset"),
//						ParameterValue: pulumi.String("4"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooDatabase, err := rds_mysql.NewDatabase(ctx, "fooDatabase", &rds_mysql.DatabaseArgs{
//				DbName:     pulumi.String("acc-test-db"),
//				InstanceId: fooInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooAccount, err := rds_mysql.NewAccount(ctx, "fooAccount", &rds_mysql.AccountArgs{
//				AccountName:     pulumi.String("acc-test-account"),
//				AccountPassword: pulumi.String("93f0cb0614Aab12"),
//				AccountType:     pulumi.String("Normal"),
//				InstanceId:      fooInstance.ID(),
//				AccountPrivileges: rds_mysql.AccountAccountPrivilegeArray{
//					&rds_mysql.AccountAccountPrivilegeArgs{
//						DbName:                 fooDatabase.DbName,
//						AccountPrivilege:       pulumi.String("Custom"),
//						AccountPrivilegeDetail: pulumi.String("SELECT,INSERT"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = rds_mysql.GetAccountsOutput(ctx, rds_mysql.GetAccountsOutputArgs{
//				InstanceId:  fooInstance.ID(),
//				AccountName: fooAccount.AccountName,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetAccounts(ctx *pulumi.Context, args *GetAccountsArgs, opts ...pulumi.InvokeOption) (*GetAccountsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAccountsResult
	err := ctx.Invoke("volcengine:rds_mysql/getAccounts:getAccounts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAccounts.
type GetAccountsArgs struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName *string `pulumi:"accountName"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// A Name Regex of database account.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getAccounts.
type GetAccountsResult struct {
	// The name of the database account.
	AccountName *string `pulumi:"accountName"`
	// The collection of RDS instance account query.
	Accounts []GetAccountsAccount `pulumi:"accounts"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId string  `pulumi:"instanceId"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of database account query.
	TotalCount int `pulumi:"totalCount"`
}

func GetAccountsOutput(ctx *pulumi.Context, args GetAccountsOutputArgs, opts ...pulumi.InvokeOption) GetAccountsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAccountsResult, error) {
			args := v.(GetAccountsArgs)
			r, err := GetAccounts(ctx, &args, opts...)
			var s GetAccountsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAccountsResultOutput)
}

// A collection of arguments for invoking getAccounts.
type GetAccountsOutputArgs struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName pulumi.StringPtrInput `pulumi:"accountName"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// A Name Regex of database account.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetAccountsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsArgs)(nil)).Elem()
}

// A collection of values returned by getAccounts.
type GetAccountsResultOutput struct{ *pulumi.OutputState }

func (GetAccountsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccountsResult)(nil)).Elem()
}

func (o GetAccountsResultOutput) ToGetAccountsResultOutput() GetAccountsResultOutput {
	return o
}

func (o GetAccountsResultOutput) ToGetAccountsResultOutputWithContext(ctx context.Context) GetAccountsResultOutput {
	return o
}

// The name of the database account.
func (o GetAccountsResultOutput) AccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountsResult) *string { return v.AccountName }).(pulumi.StringPtrOutput)
}

// The collection of RDS instance account query.
func (o GetAccountsResultOutput) Accounts() GetAccountsAccountArrayOutput {
	return o.ApplyT(func(v GetAccountsResult) []GetAccountsAccount { return v.Accounts }).(GetAccountsAccountArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAccountsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAccountsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccountsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetAccountsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetAccountsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAccountsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of database account query.
func (o GetAccountsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetAccountsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAccountsResultOutput{})
}
