// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_mysql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of rds mysql databases
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rds_mysql.Databases(ctx, &rds_mysql.DatabasesArgs{
//				DbName:     pulumi.StringRef(""),
//				InstanceId: "",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Databases(ctx *pulumi.Context, args *DatabasesArgs, opts ...pulumi.InvokeOption) (*DatabasesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv DatabasesResult
	err := ctx.Invoke("volcengine:rds_mysql/databases:Databases", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Databases.
type DatabasesArgs struct {
	// The name of the RDS database.
	DbName *string `pulumi:"dbName"`
	// The id of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
	// A Name Regex of RDS database.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Databases.
type DatabasesResult struct {
	// The collection of RDS instance account query.
	Databases []DatabasesDatabase `pulumi:"databases"`
	// The name of the RDS database. This field supports fuzzy queries.
	DbName *string `pulumi:"dbName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId string  `pulumi:"instanceId"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of RDS database query.
	TotalCount int `pulumi:"totalCount"`
}

func DatabasesOutput(ctx *pulumi.Context, args DatabasesOutputArgs, opts ...pulumi.InvokeOption) DatabasesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (DatabasesResult, error) {
			args := v.(DatabasesArgs)
			r, err := Databases(ctx, &args, opts...)
			var s DatabasesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(DatabasesResultOutput)
}

// A collection of arguments for invoking Databases.
type DatabasesOutputArgs struct {
	// The name of the RDS database.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
	// The id of the RDS instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// A Name Regex of RDS database.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (DatabasesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesArgs)(nil)).Elem()
}

// A collection of values returned by Databases.
type DatabasesResultOutput struct{ *pulumi.OutputState }

func (DatabasesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesResult)(nil)).Elem()
}

func (o DatabasesResultOutput) ToDatabasesResultOutput() DatabasesResultOutput {
	return o
}

func (o DatabasesResultOutput) ToDatabasesResultOutputWithContext(ctx context.Context) DatabasesResultOutput {
	return o
}

// The collection of RDS instance account query.
func (o DatabasesResultOutput) Databases() DatabasesDatabaseArrayOutput {
	return o.ApplyT(func(v DatabasesResult) []DatabasesDatabase { return v.Databases }).(DatabasesDatabaseArrayOutput)
}

// The name of the RDS database. This field supports fuzzy queries.
func (o DatabasesResultOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasesResult) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o DatabasesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o DatabasesResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o DatabasesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o DatabasesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DatabasesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of RDS database query.
func (o DatabasesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v DatabasesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabasesResultOutput{})
}
