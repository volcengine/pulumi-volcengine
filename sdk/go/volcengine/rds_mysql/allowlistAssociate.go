// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage rds mysql allowlist associate
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rds_mysql.NewAllowlistAssociate(ctx, "foo", &rds_mysql.AllowlistAssociateArgs{
//				AllowListId: pulumi.String("acl-15451212dcfa473baeda24be4baa02fe"),
//				InstanceId:  pulumi.String("mysql-1b2c7b2d7583"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RDS AllowList Associate can be imported using the instance id and allow list id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:rds_mysql/allowlistAssociate:AllowlistAssociate default rds-mysql-h441603c68aaa:acl-d1fd76693bd54e658912e7337d5b****
//
// ```
type AllowlistAssociate struct {
	pulumi.CustomResourceState

	// The id of the allow list.
	AllowListId pulumi.StringOutput `pulumi:"allowListId"`
	// The id of the mysql instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewAllowlistAssociate registers a new resource with the given unique name, arguments, and options.
func NewAllowlistAssociate(ctx *pulumi.Context,
	name string, args *AllowlistAssociateArgs, opts ...pulumi.ResourceOption) (*AllowlistAssociate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowListId == nil {
		return nil, errors.New("invalid value for required argument 'AllowListId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AllowlistAssociate
	err := ctx.RegisterResource("volcengine:rds_mysql/allowlistAssociate:AllowlistAssociate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAllowlistAssociate gets an existing AllowlistAssociate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAllowlistAssociate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AllowlistAssociateState, opts ...pulumi.ResourceOption) (*AllowlistAssociate, error) {
	var resource AllowlistAssociate
	err := ctx.ReadResource("volcengine:rds_mysql/allowlistAssociate:AllowlistAssociate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AllowlistAssociate resources.
type allowlistAssociateState struct {
	// The id of the allow list.
	AllowListId *string `pulumi:"allowListId"`
	// The id of the mysql instance.
	InstanceId *string `pulumi:"instanceId"`
}

type AllowlistAssociateState struct {
	// The id of the allow list.
	AllowListId pulumi.StringPtrInput
	// The id of the mysql instance.
	InstanceId pulumi.StringPtrInput
}

func (AllowlistAssociateState) ElementType() reflect.Type {
	return reflect.TypeOf((*allowlistAssociateState)(nil)).Elem()
}

type allowlistAssociateArgs struct {
	// The id of the allow list.
	AllowListId string `pulumi:"allowListId"`
	// The id of the mysql instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a AllowlistAssociate resource.
type AllowlistAssociateArgs struct {
	// The id of the allow list.
	AllowListId pulumi.StringInput
	// The id of the mysql instance.
	InstanceId pulumi.StringInput
}

func (AllowlistAssociateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*allowlistAssociateArgs)(nil)).Elem()
}

type AllowlistAssociateInput interface {
	pulumi.Input

	ToAllowlistAssociateOutput() AllowlistAssociateOutput
	ToAllowlistAssociateOutputWithContext(ctx context.Context) AllowlistAssociateOutput
}

func (*AllowlistAssociate) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowlistAssociate)(nil)).Elem()
}

func (i *AllowlistAssociate) ToAllowlistAssociateOutput() AllowlistAssociateOutput {
	return i.ToAllowlistAssociateOutputWithContext(context.Background())
}

func (i *AllowlistAssociate) ToAllowlistAssociateOutputWithContext(ctx context.Context) AllowlistAssociateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistAssociateOutput)
}

// AllowlistAssociateArrayInput is an input type that accepts AllowlistAssociateArray and AllowlistAssociateArrayOutput values.
// You can construct a concrete instance of `AllowlistAssociateArrayInput` via:
//
//	AllowlistAssociateArray{ AllowlistAssociateArgs{...} }
type AllowlistAssociateArrayInput interface {
	pulumi.Input

	ToAllowlistAssociateArrayOutput() AllowlistAssociateArrayOutput
	ToAllowlistAssociateArrayOutputWithContext(context.Context) AllowlistAssociateArrayOutput
}

type AllowlistAssociateArray []AllowlistAssociateInput

func (AllowlistAssociateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllowlistAssociate)(nil)).Elem()
}

func (i AllowlistAssociateArray) ToAllowlistAssociateArrayOutput() AllowlistAssociateArrayOutput {
	return i.ToAllowlistAssociateArrayOutputWithContext(context.Background())
}

func (i AllowlistAssociateArray) ToAllowlistAssociateArrayOutputWithContext(ctx context.Context) AllowlistAssociateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistAssociateArrayOutput)
}

// AllowlistAssociateMapInput is an input type that accepts AllowlistAssociateMap and AllowlistAssociateMapOutput values.
// You can construct a concrete instance of `AllowlistAssociateMapInput` via:
//
//	AllowlistAssociateMap{ "key": AllowlistAssociateArgs{...} }
type AllowlistAssociateMapInput interface {
	pulumi.Input

	ToAllowlistAssociateMapOutput() AllowlistAssociateMapOutput
	ToAllowlistAssociateMapOutputWithContext(context.Context) AllowlistAssociateMapOutput
}

type AllowlistAssociateMap map[string]AllowlistAssociateInput

func (AllowlistAssociateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllowlistAssociate)(nil)).Elem()
}

func (i AllowlistAssociateMap) ToAllowlistAssociateMapOutput() AllowlistAssociateMapOutput {
	return i.ToAllowlistAssociateMapOutputWithContext(context.Background())
}

func (i AllowlistAssociateMap) ToAllowlistAssociateMapOutputWithContext(ctx context.Context) AllowlistAssociateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistAssociateMapOutput)
}

type AllowlistAssociateOutput struct{ *pulumi.OutputState }

func (AllowlistAssociateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AllowlistAssociate)(nil)).Elem()
}

func (o AllowlistAssociateOutput) ToAllowlistAssociateOutput() AllowlistAssociateOutput {
	return o
}

func (o AllowlistAssociateOutput) ToAllowlistAssociateOutputWithContext(ctx context.Context) AllowlistAssociateOutput {
	return o
}

// The id of the allow list.
func (o AllowlistAssociateOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v *AllowlistAssociate) pulumi.StringOutput { return v.AllowListId }).(pulumi.StringOutput)
}

// The id of the mysql instance.
func (o AllowlistAssociateOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AllowlistAssociate) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type AllowlistAssociateArrayOutput struct{ *pulumi.OutputState }

func (AllowlistAssociateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AllowlistAssociate)(nil)).Elem()
}

func (o AllowlistAssociateArrayOutput) ToAllowlistAssociateArrayOutput() AllowlistAssociateArrayOutput {
	return o
}

func (o AllowlistAssociateArrayOutput) ToAllowlistAssociateArrayOutputWithContext(ctx context.Context) AllowlistAssociateArrayOutput {
	return o
}

func (o AllowlistAssociateArrayOutput) Index(i pulumi.IntInput) AllowlistAssociateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AllowlistAssociate {
		return vs[0].([]*AllowlistAssociate)[vs[1].(int)]
	}).(AllowlistAssociateOutput)
}

type AllowlistAssociateMapOutput struct{ *pulumi.OutputState }

func (AllowlistAssociateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AllowlistAssociate)(nil)).Elem()
}

func (o AllowlistAssociateMapOutput) ToAllowlistAssociateMapOutput() AllowlistAssociateMapOutput {
	return o
}

func (o AllowlistAssociateMapOutput) ToAllowlistAssociateMapOutputWithContext(ctx context.Context) AllowlistAssociateMapOutput {
	return o
}

func (o AllowlistAssociateMapOutput) MapIndex(k pulumi.StringInput) AllowlistAssociateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AllowlistAssociate {
		return vs[0].(map[string]*AllowlistAssociate)[vs[1].(string)]
	}).(AllowlistAssociateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistAssociateInput)(nil)).Elem(), &AllowlistAssociate{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistAssociateArrayInput)(nil)).Elem(), AllowlistAssociateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistAssociateMapInput)(nil)).Elem(), AllowlistAssociateMap{})
	pulumi.RegisterOutputType(AllowlistAssociateOutput{})
	pulumi.RegisterOutputType(AllowlistAssociateArrayOutput{})
	pulumi.RegisterOutputType(AllowlistAssociateMapOutput{})
}
