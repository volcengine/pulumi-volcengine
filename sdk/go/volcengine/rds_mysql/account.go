// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage rds mysql account
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_mysql"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rds_mysql.NewAccount(ctx, "default", &rds_mysql.AccountArgs{
//				AccountName:     pulumi.String("test"),
//				AccountPassword: pulumi.String("xdjsuiahHUH@"),
//				AccountType:     pulumi.String("Normal"),
//				InstanceId:      pulumi.String("mysql-e9293705eed6"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RDS mysql account can be imported using the instance_id:account_name, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:rds_mysql/account:Account default mysql-42b38c769c4b:test
//
// ```
type Account struct {
	pulumi.CustomResourceState

	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// The password of the database account.
	// Illustrate:
	// Cannot start with `!` or `@`.
	// The length is 8~32 characters.
	// It consists of any three of uppercase letters, lowercase letters, numbers, and special characters.
	// The special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword pulumi.StringOutput `pulumi:"accountPassword"`
	// The privilege information of account.
	AccountPrivileges AccountAccountPrivilegeArrayOutput `pulumi:"accountPrivileges"`
	// Database account type, value:
	// Super: A high-privilege account. Only one database account can be created for an instance.
	// Normal: An account with ordinary privileges.
	AccountType pulumi.StringOutput `pulumi:"accountType"`
	// The ID of the RDS instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.AccountPassword == nil {
		return nil, errors.New("invalid value for required argument 'AccountPassword'")
	}
	if args.AccountType == nil {
		return nil, errors.New("invalid value for required argument 'AccountType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.AccountPassword != nil {
		args.AccountPassword = pulumi.ToSecret(args.AccountPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountPassword",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource Account
	err := ctx.RegisterResource("volcengine:rds_mysql/account:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("volcengine:rds_mysql/account:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName *string `pulumi:"accountName"`
	// The password of the database account.
	// Illustrate:
	// Cannot start with `!` or `@`.
	// The length is 8~32 characters.
	// It consists of any three of uppercase letters, lowercase letters, numbers, and special characters.
	// The special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword *string `pulumi:"accountPassword"`
	// The privilege information of account.
	AccountPrivileges []AccountAccountPrivilege `pulumi:"accountPrivileges"`
	// Database account type, value:
	// Super: A high-privilege account. Only one database account can be created for an instance.
	// Normal: An account with ordinary privileges.
	AccountType *string `pulumi:"accountType"`
	// The ID of the RDS instance.
	InstanceId *string `pulumi:"instanceId"`
}

type AccountState struct {
	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName pulumi.StringPtrInput
	// The password of the database account.
	// Illustrate:
	// Cannot start with `!` or `@`.
	// The length is 8~32 characters.
	// It consists of any three of uppercase letters, lowercase letters, numbers, and special characters.
	// The special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword pulumi.StringPtrInput
	// The privilege information of account.
	AccountPrivileges AccountAccountPrivilegeArrayInput
	// Database account type, value:
	// Super: A high-privilege account. Only one database account can be created for an instance.
	// Normal: An account with ordinary privileges.
	AccountType pulumi.StringPtrInput
	// The ID of the RDS instance.
	InstanceId pulumi.StringPtrInput
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName string `pulumi:"accountName"`
	// The password of the database account.
	// Illustrate:
	// Cannot start with `!` or `@`.
	// The length is 8~32 characters.
	// It consists of any three of uppercase letters, lowercase letters, numbers, and special characters.
	// The special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword string `pulumi:"accountPassword"`
	// The privilege information of account.
	AccountPrivileges []AccountAccountPrivilege `pulumi:"accountPrivileges"`
	// Database account type, value:
	// Super: A high-privilege account. Only one database account can be created for an instance.
	// Normal: An account with ordinary privileges.
	AccountType string `pulumi:"accountType"`
	// The ID of the RDS instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// Database account name. The rules are as follows:
	// Unique name.
	// Start with a letter and end with a letter or number.
	// Consists of lowercase letters, numbers, or underscores (_).
	// The length is 2~32 characters.
	// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
	AccountName pulumi.StringInput
	// The password of the database account.
	// Illustrate:
	// Cannot start with `!` or `@`.
	// The length is 8~32 characters.
	// It consists of any three of uppercase letters, lowercase letters, numbers, and special characters.
	// The special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword pulumi.StringInput
	// The privilege information of account.
	AccountPrivileges AccountAccountPrivilegeArrayInput
	// Database account type, value:
	// Super: A high-privilege account. Only one database account can be created for an instance.
	// Normal: An account with ordinary privileges.
	AccountType pulumi.StringInput
	// The ID of the RDS instance.
	InstanceId pulumi.StringInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(ctx context.Context) AccountOutput
}

func (*Account) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (i *Account) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i *Account) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

// AccountArrayInput is an input type that accepts AccountArray and AccountArrayOutput values.
// You can construct a concrete instance of `AccountArrayInput` via:
//
//	AccountArray{ AccountArgs{...} }
type AccountArrayInput interface {
	pulumi.Input

	ToAccountArrayOutput() AccountArrayOutput
	ToAccountArrayOutputWithContext(context.Context) AccountArrayOutput
}

type AccountArray []AccountInput

func (AccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (i AccountArray) ToAccountArrayOutput() AccountArrayOutput {
	return i.ToAccountArrayOutputWithContext(context.Background())
}

func (i AccountArray) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountArrayOutput)
}

// AccountMapInput is an input type that accepts AccountMap and AccountMapOutput values.
// You can construct a concrete instance of `AccountMapInput` via:
//
//	AccountMap{ "key": AccountArgs{...} }
type AccountMapInput interface {
	pulumi.Input

	ToAccountMapOutput() AccountMapOutput
	ToAccountMapOutputWithContext(context.Context) AccountMapOutput
}

type AccountMap map[string]AccountInput

func (AccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (i AccountMap) ToAccountMapOutput() AccountMapOutput {
	return i.ToAccountMapOutputWithContext(context.Background())
}

func (i AccountMap) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMapOutput)
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

// Database account name. The rules are as follows:
// Unique name.
// Start with a letter and end with a letter or number.
// Consists of lowercase letters, numbers, or underscores (_).
// The length is 2~32 characters.
// The [keyword list](https://www.volcengine.com/docs/6313/66162) is disabled for database accounts, and certain reserved words, including root, admin, etc., cannot be used.
func (o AccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// The password of the database account.
// Illustrate:
// Cannot start with `!` or `@`.
// The length is 8~32 characters.
// It consists of any three of uppercase letters, lowercase letters, numbers, and special characters.
// The special characters are `!@#$%^*()_+-=`. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o AccountOutput) AccountPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountPassword }).(pulumi.StringOutput)
}

// The privilege information of account.
func (o AccountOutput) AccountPrivileges() AccountAccountPrivilegeArrayOutput {
	return o.ApplyT(func(v *Account) AccountAccountPrivilegeArrayOutput { return v.AccountPrivileges }).(AccountAccountPrivilegeArrayOutput)
}

// Database account type, value:
// Super: A high-privilege account. Only one database account can be created for an instance.
// Normal: An account with ordinary privileges.
func (o AccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountType }).(pulumi.StringOutput)
}

// The ID of the RDS instance.
func (o AccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type AccountArrayOutput struct{ *pulumi.OutputState }

func (AccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (o AccountArrayOutput) ToAccountArrayOutput() AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) Index(i pulumi.IntInput) AccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Account {
		return vs[0].([]*Account)[vs[1].(int)]
	}).(AccountOutput)
}

type AccountMapOutput struct{ *pulumi.OutputState }

func (AccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (o AccountMapOutput) ToAccountMapOutput() AccountMapOutput {
	return o
}

func (o AccountMapOutput) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return o
}

func (o AccountMapOutput) MapIndex(k pulumi.StringInput) AccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Account {
		return vs[0].(map[string]*Account)[vs[1].(string)]
	}).(AccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountInput)(nil)).Elem(), &Account{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountArrayInput)(nil)).Elem(), AccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMapInput)(nil)).Elem(), AccountMap{})
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountArrayOutput{})
	pulumi.RegisterOutputType(AccountMapOutput{})
}
