// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type AclAclEntry struct {
	// The description of the AclEntry.
	Description *string `pulumi:"description"`
	// The content of the AclEntry.
	Entry string `pulumi:"entry"`
}

// AclAclEntryInput is an input type that accepts AclAclEntryArgs and AclAclEntryOutput values.
// You can construct a concrete instance of `AclAclEntryInput` via:
//
//	AclAclEntryArgs{...}
type AclAclEntryInput interface {
	pulumi.Input

	ToAclAclEntryOutput() AclAclEntryOutput
	ToAclAclEntryOutputWithContext(context.Context) AclAclEntryOutput
}

type AclAclEntryArgs struct {
	// The description of the AclEntry.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The content of the AclEntry.
	Entry pulumi.StringInput `pulumi:"entry"`
}

func (AclAclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAclEntry)(nil)).Elem()
}

func (i AclAclEntryArgs) ToAclAclEntryOutput() AclAclEntryOutput {
	return i.ToAclAclEntryOutputWithContext(context.Background())
}

func (i AclAclEntryArgs) ToAclAclEntryOutputWithContext(ctx context.Context) AclAclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAclEntryOutput)
}

// AclAclEntryArrayInput is an input type that accepts AclAclEntryArray and AclAclEntryArrayOutput values.
// You can construct a concrete instance of `AclAclEntryArrayInput` via:
//
//	AclAclEntryArray{ AclAclEntryArgs{...} }
type AclAclEntryArrayInput interface {
	pulumi.Input

	ToAclAclEntryArrayOutput() AclAclEntryArrayOutput
	ToAclAclEntryArrayOutputWithContext(context.Context) AclAclEntryArrayOutput
}

type AclAclEntryArray []AclAclEntryInput

func (AclAclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclAclEntry)(nil)).Elem()
}

func (i AclAclEntryArray) ToAclAclEntryArrayOutput() AclAclEntryArrayOutput {
	return i.ToAclAclEntryArrayOutputWithContext(context.Background())
}

func (i AclAclEntryArray) ToAclAclEntryArrayOutputWithContext(ctx context.Context) AclAclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclAclEntryArrayOutput)
}

type AclAclEntryOutput struct{ *pulumi.OutputState }

func (AclAclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclAclEntry)(nil)).Elem()
}

func (o AclAclEntryOutput) ToAclAclEntryOutput() AclAclEntryOutput {
	return o
}

func (o AclAclEntryOutput) ToAclAclEntryOutputWithContext(ctx context.Context) AclAclEntryOutput {
	return o
}

// The description of the AclEntry.
func (o AclAclEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AclAclEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The content of the AclEntry.
func (o AclAclEntryOutput) Entry() pulumi.StringOutput {
	return o.ApplyT(func(v AclAclEntry) string { return v.Entry }).(pulumi.StringOutput)
}

type AclAclEntryArrayOutput struct{ *pulumi.OutputState }

func (AclAclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclAclEntry)(nil)).Elem()
}

func (o AclAclEntryArrayOutput) ToAclAclEntryArrayOutput() AclAclEntryArrayOutput {
	return o
}

func (o AclAclEntryArrayOutput) ToAclAclEntryArrayOutputWithContext(ctx context.Context) AclAclEntryArrayOutput {
	return o
}

func (o AclAclEntryArrayOutput) Index(i pulumi.IntInput) AclAclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclAclEntry {
		return vs[0].([]AclAclEntry)[vs[1].(int)]
	}).(AclAclEntryOutput)
}

type AclsAcl struct {
	// The count of acl entry.
	AclEntryCount int `pulumi:"aclEntryCount"`
	// The ID of Acl.
	AclId string `pulumi:"aclId"`
	// The name of acl.
	AclName string `pulumi:"aclName"`
	// Creation time of Acl.
	CreateTime string `pulumi:"createTime"`
	// The description of Acl.
	Description string `pulumi:"description"`
	// The ID of Acl.
	Id string `pulumi:"id"`
	// The listeners of Acl.
	Listeners []string `pulumi:"listeners"`
	// The ProjectName of Acl.
	ProjectName string `pulumi:"projectName"`
	// Update time of Acl.
	UpdateTime string `pulumi:"updateTime"`
}

// AclsAclInput is an input type that accepts AclsAclArgs and AclsAclOutput values.
// You can construct a concrete instance of `AclsAclInput` via:
//
//	AclsAclArgs{...}
type AclsAclInput interface {
	pulumi.Input

	ToAclsAclOutput() AclsAclOutput
	ToAclsAclOutputWithContext(context.Context) AclsAclOutput
}

type AclsAclArgs struct {
	// The count of acl entry.
	AclEntryCount pulumi.IntInput `pulumi:"aclEntryCount"`
	// The ID of Acl.
	AclId pulumi.StringInput `pulumi:"aclId"`
	// The name of acl.
	AclName pulumi.StringInput `pulumi:"aclName"`
	// Creation time of Acl.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of Acl.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of Acl.
	Id pulumi.StringInput `pulumi:"id"`
	// The listeners of Acl.
	Listeners pulumi.StringArrayInput `pulumi:"listeners"`
	// The ProjectName of Acl.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Update time of Acl.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (AclsAclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAcl)(nil)).Elem()
}

func (i AclsAclArgs) ToAclsAclOutput() AclsAclOutput {
	return i.ToAclsAclOutputWithContext(context.Background())
}

func (i AclsAclArgs) ToAclsAclOutputWithContext(ctx context.Context) AclsAclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclOutput)
}

// AclsAclArrayInput is an input type that accepts AclsAclArray and AclsAclArrayOutput values.
// You can construct a concrete instance of `AclsAclArrayInput` via:
//
//	AclsAclArray{ AclsAclArgs{...} }
type AclsAclArrayInput interface {
	pulumi.Input

	ToAclsAclArrayOutput() AclsAclArrayOutput
	ToAclsAclArrayOutputWithContext(context.Context) AclsAclArrayOutput
}

type AclsAclArray []AclsAclInput

func (AclsAclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAcl)(nil)).Elem()
}

func (i AclsAclArray) ToAclsAclArrayOutput() AclsAclArrayOutput {
	return i.ToAclsAclArrayOutputWithContext(context.Background())
}

func (i AclsAclArray) ToAclsAclArrayOutputWithContext(ctx context.Context) AclsAclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclsAclArrayOutput)
}

type AclsAclOutput struct{ *pulumi.OutputState }

func (AclsAclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AclsAcl)(nil)).Elem()
}

func (o AclsAclOutput) ToAclsAclOutput() AclsAclOutput {
	return o
}

func (o AclsAclOutput) ToAclsAclOutputWithContext(ctx context.Context) AclsAclOutput {
	return o
}

// The count of acl entry.
func (o AclsAclOutput) AclEntryCount() pulumi.IntOutput {
	return o.ApplyT(func(v AclsAcl) int { return v.AclEntryCount }).(pulumi.IntOutput)
}

// The ID of Acl.
func (o AclsAclOutput) AclId() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.AclId }).(pulumi.StringOutput)
}

// The name of acl.
func (o AclsAclOutput) AclName() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.AclName }).(pulumi.StringOutput)
}

// Creation time of Acl.
func (o AclsAclOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of Acl.
func (o AclsAclOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of Acl.
func (o AclsAclOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.Id }).(pulumi.StringOutput)
}

// The listeners of Acl.
func (o AclsAclOutput) Listeners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AclsAcl) []string { return v.Listeners }).(pulumi.StringArrayOutput)
}

// The ProjectName of Acl.
func (o AclsAclOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Update time of Acl.
func (o AclsAclOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v AclsAcl) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type AclsAclArrayOutput struct{ *pulumi.OutputState }

func (AclsAclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AclsAcl)(nil)).Elem()
}

func (o AclsAclArrayOutput) ToAclsAclArrayOutput() AclsAclArrayOutput {
	return o
}

func (o AclsAclArrayOutput) ToAclsAclArrayOutputWithContext(ctx context.Context) AclsAclArrayOutput {
	return o
}

func (o AclsAclArrayOutput) Index(i pulumi.IntInput) AclsAclOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AclsAcl {
		return vs[0].([]AclsAcl)[vs[1].(int)]
	}).(AclsAclOutput)
}

type CertificateTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// CertificateTagInput is an input type that accepts CertificateTagArgs and CertificateTagOutput values.
// You can construct a concrete instance of `CertificateTagInput` via:
//
//	CertificateTagArgs{...}
type CertificateTagInput interface {
	pulumi.Input

	ToCertificateTagOutput() CertificateTagOutput
	ToCertificateTagOutputWithContext(context.Context) CertificateTagOutput
}

type CertificateTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CertificateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTag)(nil)).Elem()
}

func (i CertificateTagArgs) ToCertificateTagOutput() CertificateTagOutput {
	return i.ToCertificateTagOutputWithContext(context.Background())
}

func (i CertificateTagArgs) ToCertificateTagOutputWithContext(ctx context.Context) CertificateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTagOutput)
}

// CertificateTagArrayInput is an input type that accepts CertificateTagArray and CertificateTagArrayOutput values.
// You can construct a concrete instance of `CertificateTagArrayInput` via:
//
//	CertificateTagArray{ CertificateTagArgs{...} }
type CertificateTagArrayInput interface {
	pulumi.Input

	ToCertificateTagArrayOutput() CertificateTagArrayOutput
	ToCertificateTagArrayOutputWithContext(context.Context) CertificateTagArrayOutput
}

type CertificateTagArray []CertificateTagInput

func (CertificateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateTag)(nil)).Elem()
}

func (i CertificateTagArray) ToCertificateTagArrayOutput() CertificateTagArrayOutput {
	return i.ToCertificateTagArrayOutputWithContext(context.Background())
}

func (i CertificateTagArray) ToCertificateTagArrayOutputWithContext(ctx context.Context) CertificateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificateTagArrayOutput)
}

type CertificateTagOutput struct{ *pulumi.OutputState }

func (CertificateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificateTag)(nil)).Elem()
}

func (o CertificateTagOutput) ToCertificateTagOutput() CertificateTagOutput {
	return o
}

func (o CertificateTagOutput) ToCertificateTagOutputWithContext(ctx context.Context) CertificateTagOutput {
	return o
}

// The Key of Tags.
func (o CertificateTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o CertificateTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CertificateTag) string { return v.Value }).(pulumi.StringOutput)
}

type CertificateTagArrayOutput struct{ *pulumi.OutputState }

func (CertificateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificateTag)(nil)).Elem()
}

func (o CertificateTagArrayOutput) ToCertificateTagArrayOutput() CertificateTagArrayOutput {
	return o
}

func (o CertificateTagArrayOutput) ToCertificateTagArrayOutputWithContext(ctx context.Context) CertificateTagArrayOutput {
	return o
}

func (o CertificateTagArrayOutput) Index(i pulumi.IntInput) CertificateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificateTag {
		return vs[0].([]CertificateTag)[vs[1].(int)]
	}).(CertificateTagOutput)
}

type CertificatesCertificate struct {
	// The ID of the Certificate.
	CertificateId string `pulumi:"certificateId"`
	// The name of the Certificate.
	CertificateName string `pulumi:"certificateName"`
	// The create time of the Certificate.
	CreateTime string `pulumi:"createTime"`
	// The description of the Certificate.
	Description string `pulumi:"description"`
	// The domain name of the Certificate.
	DomainName string `pulumi:"domainName"`
	// The expire time of the Certificate.
	ExpiredAt string `pulumi:"expiredAt"`
	// The ID of the Certificate.
	Id string `pulumi:"id"`
	// The ID list of the Listener.
	Listeners []string `pulumi:"listeners"`
	// The ProjectName of Certificate.
	ProjectName string `pulumi:"projectName"`
	// Tags.
	Tags []CertificatesCertificateTag `pulumi:"tags"`
}

// CertificatesCertificateInput is an input type that accepts CertificatesCertificateArgs and CertificatesCertificateOutput values.
// You can construct a concrete instance of `CertificatesCertificateInput` via:
//
//	CertificatesCertificateArgs{...}
type CertificatesCertificateInput interface {
	pulumi.Input

	ToCertificatesCertificateOutput() CertificatesCertificateOutput
	ToCertificatesCertificateOutputWithContext(context.Context) CertificatesCertificateOutput
}

type CertificatesCertificateArgs struct {
	// The ID of the Certificate.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// The name of the Certificate.
	CertificateName pulumi.StringInput `pulumi:"certificateName"`
	// The create time of the Certificate.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the Certificate.
	Description pulumi.StringInput `pulumi:"description"`
	// The domain name of the Certificate.
	DomainName pulumi.StringInput `pulumi:"domainName"`
	// The expire time of the Certificate.
	ExpiredAt pulumi.StringInput `pulumi:"expiredAt"`
	// The ID of the Certificate.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID list of the Listener.
	Listeners pulumi.StringArrayInput `pulumi:"listeners"`
	// The ProjectName of Certificate.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// Tags.
	Tags CertificatesCertificateTagArrayInput `pulumi:"tags"`
}

func (CertificatesCertificateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesCertificate)(nil)).Elem()
}

func (i CertificatesCertificateArgs) ToCertificatesCertificateOutput() CertificatesCertificateOutput {
	return i.ToCertificatesCertificateOutputWithContext(context.Background())
}

func (i CertificatesCertificateArgs) ToCertificatesCertificateOutputWithContext(ctx context.Context) CertificatesCertificateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesCertificateOutput)
}

// CertificatesCertificateArrayInput is an input type that accepts CertificatesCertificateArray and CertificatesCertificateArrayOutput values.
// You can construct a concrete instance of `CertificatesCertificateArrayInput` via:
//
//	CertificatesCertificateArray{ CertificatesCertificateArgs{...} }
type CertificatesCertificateArrayInput interface {
	pulumi.Input

	ToCertificatesCertificateArrayOutput() CertificatesCertificateArrayOutput
	ToCertificatesCertificateArrayOutputWithContext(context.Context) CertificatesCertificateArrayOutput
}

type CertificatesCertificateArray []CertificatesCertificateInput

func (CertificatesCertificateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesCertificate)(nil)).Elem()
}

func (i CertificatesCertificateArray) ToCertificatesCertificateArrayOutput() CertificatesCertificateArrayOutput {
	return i.ToCertificatesCertificateArrayOutputWithContext(context.Background())
}

func (i CertificatesCertificateArray) ToCertificatesCertificateArrayOutputWithContext(ctx context.Context) CertificatesCertificateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesCertificateArrayOutput)
}

type CertificatesCertificateOutput struct{ *pulumi.OutputState }

func (CertificatesCertificateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesCertificate)(nil)).Elem()
}

func (o CertificatesCertificateOutput) ToCertificatesCertificateOutput() CertificatesCertificateOutput {
	return o
}

func (o CertificatesCertificateOutput) ToCertificatesCertificateOutputWithContext(ctx context.Context) CertificatesCertificateOutput {
	return o
}

// The ID of the Certificate.
func (o CertificatesCertificateOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.CertificateId }).(pulumi.StringOutput)
}

// The name of the Certificate.
func (o CertificatesCertificateOutput) CertificateName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.CertificateName }).(pulumi.StringOutput)
}

// The create time of the Certificate.
func (o CertificatesCertificateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the Certificate.
func (o CertificatesCertificateOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.Description }).(pulumi.StringOutput)
}

// The domain name of the Certificate.
func (o CertificatesCertificateOutput) DomainName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.DomainName }).(pulumi.StringOutput)
}

// The expire time of the Certificate.
func (o CertificatesCertificateOutput) ExpiredAt() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.ExpiredAt }).(pulumi.StringOutput)
}

// The ID of the Certificate.
func (o CertificatesCertificateOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.Id }).(pulumi.StringOutput)
}

// The ID list of the Listener.
func (o CertificatesCertificateOutput) Listeners() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificatesCertificate) []string { return v.Listeners }).(pulumi.StringArrayOutput)
}

// The ProjectName of Certificate.
func (o CertificatesCertificateOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificate) string { return v.ProjectName }).(pulumi.StringOutput)
}

// Tags.
func (o CertificatesCertificateOutput) Tags() CertificatesCertificateTagArrayOutput {
	return o.ApplyT(func(v CertificatesCertificate) []CertificatesCertificateTag { return v.Tags }).(CertificatesCertificateTagArrayOutput)
}

type CertificatesCertificateArrayOutput struct{ *pulumi.OutputState }

func (CertificatesCertificateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesCertificate)(nil)).Elem()
}

func (o CertificatesCertificateArrayOutput) ToCertificatesCertificateArrayOutput() CertificatesCertificateArrayOutput {
	return o
}

func (o CertificatesCertificateArrayOutput) ToCertificatesCertificateArrayOutputWithContext(ctx context.Context) CertificatesCertificateArrayOutput {
	return o
}

func (o CertificatesCertificateArrayOutput) Index(i pulumi.IntInput) CertificatesCertificateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificatesCertificate {
		return vs[0].([]CertificatesCertificate)[vs[1].(int)]
	}).(CertificatesCertificateOutput)
}

type CertificatesCertificateTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// CertificatesCertificateTagInput is an input type that accepts CertificatesCertificateTagArgs and CertificatesCertificateTagOutput values.
// You can construct a concrete instance of `CertificatesCertificateTagInput` via:
//
//	CertificatesCertificateTagArgs{...}
type CertificatesCertificateTagInput interface {
	pulumi.Input

	ToCertificatesCertificateTagOutput() CertificatesCertificateTagOutput
	ToCertificatesCertificateTagOutputWithContext(context.Context) CertificatesCertificateTagOutput
}

type CertificatesCertificateTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CertificatesCertificateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesCertificateTag)(nil)).Elem()
}

func (i CertificatesCertificateTagArgs) ToCertificatesCertificateTagOutput() CertificatesCertificateTagOutput {
	return i.ToCertificatesCertificateTagOutputWithContext(context.Background())
}

func (i CertificatesCertificateTagArgs) ToCertificatesCertificateTagOutputWithContext(ctx context.Context) CertificatesCertificateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesCertificateTagOutput)
}

// CertificatesCertificateTagArrayInput is an input type that accepts CertificatesCertificateTagArray and CertificatesCertificateTagArrayOutput values.
// You can construct a concrete instance of `CertificatesCertificateTagArrayInput` via:
//
//	CertificatesCertificateTagArray{ CertificatesCertificateTagArgs{...} }
type CertificatesCertificateTagArrayInput interface {
	pulumi.Input

	ToCertificatesCertificateTagArrayOutput() CertificatesCertificateTagArrayOutput
	ToCertificatesCertificateTagArrayOutputWithContext(context.Context) CertificatesCertificateTagArrayOutput
}

type CertificatesCertificateTagArray []CertificatesCertificateTagInput

func (CertificatesCertificateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesCertificateTag)(nil)).Elem()
}

func (i CertificatesCertificateTagArray) ToCertificatesCertificateTagArrayOutput() CertificatesCertificateTagArrayOutput {
	return i.ToCertificatesCertificateTagArrayOutputWithContext(context.Background())
}

func (i CertificatesCertificateTagArray) ToCertificatesCertificateTagArrayOutputWithContext(ctx context.Context) CertificatesCertificateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesCertificateTagArrayOutput)
}

type CertificatesCertificateTagOutput struct{ *pulumi.OutputState }

func (CertificatesCertificateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesCertificateTag)(nil)).Elem()
}

func (o CertificatesCertificateTagOutput) ToCertificatesCertificateTagOutput() CertificatesCertificateTagOutput {
	return o
}

func (o CertificatesCertificateTagOutput) ToCertificatesCertificateTagOutputWithContext(ctx context.Context) CertificatesCertificateTagOutput {
	return o
}

// The Key of Tags.
func (o CertificatesCertificateTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificateTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o CertificatesCertificateTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesCertificateTag) string { return v.Value }).(pulumi.StringOutput)
}

type CertificatesCertificateTagArrayOutput struct{ *pulumi.OutputState }

func (CertificatesCertificateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesCertificateTag)(nil)).Elem()
}

func (o CertificatesCertificateTagArrayOutput) ToCertificatesCertificateTagArrayOutput() CertificatesCertificateTagArrayOutput {
	return o
}

func (o CertificatesCertificateTagArrayOutput) ToCertificatesCertificateTagArrayOutputWithContext(ctx context.Context) CertificatesCertificateTagArrayOutput {
	return o
}

func (o CertificatesCertificateTagArrayOutput) Index(i pulumi.IntInput) CertificatesCertificateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificatesCertificateTag {
		return vs[0].([]CertificatesCertificateTag)[vs[1].(int)]
	}).(CertificatesCertificateTagOutput)
}

type CertificatesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// CertificatesTagInput is an input type that accepts CertificatesTagArgs and CertificatesTagOutput values.
// You can construct a concrete instance of `CertificatesTagInput` via:
//
//	CertificatesTagArgs{...}
type CertificatesTagInput interface {
	pulumi.Input

	ToCertificatesTagOutput() CertificatesTagOutput
	ToCertificatesTagOutputWithContext(context.Context) CertificatesTagOutput
}

type CertificatesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (CertificatesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesTag)(nil)).Elem()
}

func (i CertificatesTagArgs) ToCertificatesTagOutput() CertificatesTagOutput {
	return i.ToCertificatesTagOutputWithContext(context.Background())
}

func (i CertificatesTagArgs) ToCertificatesTagOutputWithContext(ctx context.Context) CertificatesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesTagOutput)
}

// CertificatesTagArrayInput is an input type that accepts CertificatesTagArray and CertificatesTagArrayOutput values.
// You can construct a concrete instance of `CertificatesTagArrayInput` via:
//
//	CertificatesTagArray{ CertificatesTagArgs{...} }
type CertificatesTagArrayInput interface {
	pulumi.Input

	ToCertificatesTagArrayOutput() CertificatesTagArrayOutput
	ToCertificatesTagArrayOutputWithContext(context.Context) CertificatesTagArrayOutput
}

type CertificatesTagArray []CertificatesTagInput

func (CertificatesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesTag)(nil)).Elem()
}

func (i CertificatesTagArray) ToCertificatesTagArrayOutput() CertificatesTagArrayOutput {
	return i.ToCertificatesTagArrayOutputWithContext(context.Background())
}

func (i CertificatesTagArray) ToCertificatesTagArrayOutputWithContext(ctx context.Context) CertificatesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertificatesTagArrayOutput)
}

type CertificatesTagOutput struct{ *pulumi.OutputState }

func (CertificatesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesTag)(nil)).Elem()
}

func (o CertificatesTagOutput) ToCertificatesTagOutput() CertificatesTagOutput {
	return o
}

func (o CertificatesTagOutput) ToCertificatesTagOutputWithContext(ctx context.Context) CertificatesTagOutput {
	return o
}

// The Key of Tags.
func (o CertificatesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o CertificatesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesTag) string { return v.Value }).(pulumi.StringOutput)
}

type CertificatesTagArrayOutput struct{ *pulumi.OutputState }

func (CertificatesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CertificatesTag)(nil)).Elem()
}

func (o CertificatesTagArrayOutput) ToCertificatesTagArrayOutput() CertificatesTagArrayOutput {
	return o
}

func (o CertificatesTagArrayOutput) ToCertificatesTagArrayOutputWithContext(ctx context.Context) CertificatesTagArrayOutput {
	return o
}

func (o CertificatesTagArrayOutput) Index(i pulumi.IntInput) CertificatesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CertificatesTag {
		return vs[0].([]CertificatesTag)[vs[1].(int)]
	}).(CertificatesTagOutput)
}

type ClbEipBillingConfig struct {
	// The peek bandwidth of the EIP which automatically assigned to CLB.
	Bandwidth *int `pulumi:"bandwidth"`
	// The billing type of the EIP which automatically assigned to CLB. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic` or `PrePaid`.When creating a `PrePaid` public CLB, this field must be specified as `PrePaid` simultaneously.When the LoadBalancerBillingType changes from `PostPaid` to `PrePaid`, please manually modify the value of this field to `PrePaid` simultaneously.
	EipBillingType string `pulumi:"eipBillingType"`
	// The ISP of the EIP which automatically associated to CLB, the value can be `BGP`.
	Isp string `pulumi:"isp"`
}

// ClbEipBillingConfigInput is an input type that accepts ClbEipBillingConfigArgs and ClbEipBillingConfigOutput values.
// You can construct a concrete instance of `ClbEipBillingConfigInput` via:
//
//	ClbEipBillingConfigArgs{...}
type ClbEipBillingConfigInput interface {
	pulumi.Input

	ToClbEipBillingConfigOutput() ClbEipBillingConfigOutput
	ToClbEipBillingConfigOutputWithContext(context.Context) ClbEipBillingConfigOutput
}

type ClbEipBillingConfigArgs struct {
	// The peek bandwidth of the EIP which automatically assigned to CLB.
	Bandwidth pulumi.IntPtrInput `pulumi:"bandwidth"`
	// The billing type of the EIP which automatically assigned to CLB. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic` or `PrePaid`.When creating a `PrePaid` public CLB, this field must be specified as `PrePaid` simultaneously.When the LoadBalancerBillingType changes from `PostPaid` to `PrePaid`, please manually modify the value of this field to `PrePaid` simultaneously.
	EipBillingType pulumi.StringInput `pulumi:"eipBillingType"`
	// The ISP of the EIP which automatically associated to CLB, the value can be `BGP`.
	Isp pulumi.StringInput `pulumi:"isp"`
}

func (ClbEipBillingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbEipBillingConfig)(nil)).Elem()
}

func (i ClbEipBillingConfigArgs) ToClbEipBillingConfigOutput() ClbEipBillingConfigOutput {
	return i.ToClbEipBillingConfigOutputWithContext(context.Background())
}

func (i ClbEipBillingConfigArgs) ToClbEipBillingConfigOutputWithContext(ctx context.Context) ClbEipBillingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEipBillingConfigOutput)
}

func (i ClbEipBillingConfigArgs) ToClbEipBillingConfigPtrOutput() ClbEipBillingConfigPtrOutput {
	return i.ToClbEipBillingConfigPtrOutputWithContext(context.Background())
}

func (i ClbEipBillingConfigArgs) ToClbEipBillingConfigPtrOutputWithContext(ctx context.Context) ClbEipBillingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEipBillingConfigOutput).ToClbEipBillingConfigPtrOutputWithContext(ctx)
}

// ClbEipBillingConfigPtrInput is an input type that accepts ClbEipBillingConfigArgs, ClbEipBillingConfigPtr and ClbEipBillingConfigPtrOutput values.
// You can construct a concrete instance of `ClbEipBillingConfigPtrInput` via:
//
//	        ClbEipBillingConfigArgs{...}
//
//	or:
//
//	        nil
type ClbEipBillingConfigPtrInput interface {
	pulumi.Input

	ToClbEipBillingConfigPtrOutput() ClbEipBillingConfigPtrOutput
	ToClbEipBillingConfigPtrOutputWithContext(context.Context) ClbEipBillingConfigPtrOutput
}

type clbEipBillingConfigPtrType ClbEipBillingConfigArgs

func ClbEipBillingConfigPtr(v *ClbEipBillingConfigArgs) ClbEipBillingConfigPtrInput {
	return (*clbEipBillingConfigPtrType)(v)
}

func (*clbEipBillingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbEipBillingConfig)(nil)).Elem()
}

func (i *clbEipBillingConfigPtrType) ToClbEipBillingConfigPtrOutput() ClbEipBillingConfigPtrOutput {
	return i.ToClbEipBillingConfigPtrOutputWithContext(context.Background())
}

func (i *clbEipBillingConfigPtrType) ToClbEipBillingConfigPtrOutputWithContext(ctx context.Context) ClbEipBillingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbEipBillingConfigPtrOutput)
}

type ClbEipBillingConfigOutput struct{ *pulumi.OutputState }

func (ClbEipBillingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbEipBillingConfig)(nil)).Elem()
}

func (o ClbEipBillingConfigOutput) ToClbEipBillingConfigOutput() ClbEipBillingConfigOutput {
	return o
}

func (o ClbEipBillingConfigOutput) ToClbEipBillingConfigOutputWithContext(ctx context.Context) ClbEipBillingConfigOutput {
	return o
}

func (o ClbEipBillingConfigOutput) ToClbEipBillingConfigPtrOutput() ClbEipBillingConfigPtrOutput {
	return o.ToClbEipBillingConfigPtrOutputWithContext(context.Background())
}

func (o ClbEipBillingConfigOutput) ToClbEipBillingConfigPtrOutputWithContext(ctx context.Context) ClbEipBillingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ClbEipBillingConfig) *ClbEipBillingConfig {
		return &v
	}).(ClbEipBillingConfigPtrOutput)
}

// The peek bandwidth of the EIP which automatically assigned to CLB.
func (o ClbEipBillingConfigOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ClbEipBillingConfig) *int { return v.Bandwidth }).(pulumi.IntPtrOutput)
}

// The billing type of the EIP which automatically assigned to CLB. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic` or `PrePaid`.When creating a `PrePaid` public CLB, this field must be specified as `PrePaid` simultaneously.When the LoadBalancerBillingType changes from `PostPaid` to `PrePaid`, please manually modify the value of this field to `PrePaid` simultaneously.
func (o ClbEipBillingConfigOutput) EipBillingType() pulumi.StringOutput {
	return o.ApplyT(func(v ClbEipBillingConfig) string { return v.EipBillingType }).(pulumi.StringOutput)
}

// The ISP of the EIP which automatically associated to CLB, the value can be `BGP`.
func (o ClbEipBillingConfigOutput) Isp() pulumi.StringOutput {
	return o.ApplyT(func(v ClbEipBillingConfig) string { return v.Isp }).(pulumi.StringOutput)
}

type ClbEipBillingConfigPtrOutput struct{ *pulumi.OutputState }

func (ClbEipBillingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ClbEipBillingConfig)(nil)).Elem()
}

func (o ClbEipBillingConfigPtrOutput) ToClbEipBillingConfigPtrOutput() ClbEipBillingConfigPtrOutput {
	return o
}

func (o ClbEipBillingConfigPtrOutput) ToClbEipBillingConfigPtrOutputWithContext(ctx context.Context) ClbEipBillingConfigPtrOutput {
	return o
}

func (o ClbEipBillingConfigPtrOutput) Elem() ClbEipBillingConfigOutput {
	return o.ApplyT(func(v *ClbEipBillingConfig) ClbEipBillingConfig {
		if v != nil {
			return *v
		}
		var ret ClbEipBillingConfig
		return ret
	}).(ClbEipBillingConfigOutput)
}

// The peek bandwidth of the EIP which automatically assigned to CLB.
func (o ClbEipBillingConfigPtrOutput) Bandwidth() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ClbEipBillingConfig) *int {
		if v == nil {
			return nil
		}
		return v.Bandwidth
	}).(pulumi.IntPtrOutput)
}

// The billing type of the EIP which automatically assigned to CLB. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic` or `PrePaid`.When creating a `PrePaid` public CLB, this field must be specified as `PrePaid` simultaneously.When the LoadBalancerBillingType changes from `PostPaid` to `PrePaid`, please manually modify the value of this field to `PrePaid` simultaneously.
func (o ClbEipBillingConfigPtrOutput) EipBillingType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbEipBillingConfig) *string {
		if v == nil {
			return nil
		}
		return &v.EipBillingType
	}).(pulumi.StringPtrOutput)
}

// The ISP of the EIP which automatically associated to CLB, the value can be `BGP`.
func (o ClbEipBillingConfigPtrOutput) Isp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ClbEipBillingConfig) *string {
		if v == nil {
			return nil
		}
		return &v.Isp
	}).(pulumi.StringPtrOutput)
}

type ClbTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ClbTagInput is an input type that accepts ClbTagArgs and ClbTagOutput values.
// You can construct a concrete instance of `ClbTagInput` via:
//
//	ClbTagArgs{...}
type ClbTagInput interface {
	pulumi.Input

	ToClbTagOutput() ClbTagOutput
	ToClbTagOutputWithContext(context.Context) ClbTagOutput
}

type ClbTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ClbTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbTag)(nil)).Elem()
}

func (i ClbTagArgs) ToClbTagOutput() ClbTagOutput {
	return i.ToClbTagOutputWithContext(context.Background())
}

func (i ClbTagArgs) ToClbTagOutputWithContext(ctx context.Context) ClbTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbTagOutput)
}

// ClbTagArrayInput is an input type that accepts ClbTagArray and ClbTagArrayOutput values.
// You can construct a concrete instance of `ClbTagArrayInput` via:
//
//	ClbTagArray{ ClbTagArgs{...} }
type ClbTagArrayInput interface {
	pulumi.Input

	ToClbTagArrayOutput() ClbTagArrayOutput
	ToClbTagArrayOutputWithContext(context.Context) ClbTagArrayOutput
}

type ClbTagArray []ClbTagInput

func (ClbTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbTag)(nil)).Elem()
}

func (i ClbTagArray) ToClbTagArrayOutput() ClbTagArrayOutput {
	return i.ToClbTagArrayOutputWithContext(context.Background())
}

func (i ClbTagArray) ToClbTagArrayOutputWithContext(ctx context.Context) ClbTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbTagArrayOutput)
}

type ClbTagOutput struct{ *pulumi.OutputState }

func (ClbTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbTag)(nil)).Elem()
}

func (o ClbTagOutput) ToClbTagOutput() ClbTagOutput {
	return o
}

func (o ClbTagOutput) ToClbTagOutputWithContext(ctx context.Context) ClbTagOutput {
	return o
}

// The Key of Tags.
func (o ClbTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClbTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ClbTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ClbTag) string { return v.Value }).(pulumi.StringOutput)
}

type ClbTagArrayOutput struct{ *pulumi.OutputState }

func (ClbTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbTag)(nil)).Elem()
}

func (o ClbTagArrayOutput) ToClbTagArrayOutput() ClbTagArrayOutput {
	return o
}

func (o ClbTagArrayOutput) ToClbTagArrayOutputWithContext(ctx context.Context) ClbTagArrayOutput {
	return o
}

func (o ClbTagArrayOutput) Index(i pulumi.IntInput) ClbTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbTag {
		return vs[0].([]ClbTag)[vs[1].(int)]
	}).(ClbTagOutput)
}

type ClbsClb struct {
	// The business status of the Clb.
	BusinessStatus string `pulumi:"businessStatus"`
	// The create time of the Clb.
	CreateTime string `pulumi:"createTime"`
	// The expected recycle time of the Clb.
	DeletedTime string `pulumi:"deletedTime"`
	// The description of the Clb.
	Description string `pulumi:"description"`
	// The Eip address of the Clb.
	EipAddress        string                    `pulumi:"eipAddress"`
	EipBillingConfigs []ClbsClbEipBillingConfig `pulumi:"eipBillingConfigs"`
	// The Eip ID of the Clb.
	EipId string `pulumi:"eipId"`
	// The private ip address of the Clb.
	EniAddress string `pulumi:"eniAddress"`
	// The Eni ID of the Clb.
	EniId string `pulumi:"eniId"`
	// The expired time of the CLB.
	ExpiredTime string `pulumi:"expiredTime"`
	// The ID of the Clb.
	Id string `pulumi:"id"`
	// The billing status of the CLB.
	InstanceStatus int `pulumi:"instanceStatus"`
	// The billing type of the Clb.
	LoadBalancerBillingType string `pulumi:"loadBalancerBillingType"`
	// The ID of the Clb.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// The name of the Clb.
	LoadBalancerName string `pulumi:"loadBalancerName"`
	// The specifications of the Clb.
	LoadBalancerSpec string `pulumi:"loadBalancerSpec"`
	// The reason why Clb is locked.
	LockReason string `pulumi:"lockReason"`
	// The master zone ID of the CLB.
	MasterZoneId string `pulumi:"masterZoneId"`
	// The modification protection reason of the Clb.
	ModificationProtectionReason string `pulumi:"modificationProtectionReason"`
	// The modification protection status of the Clb.
	ModificationProtectionStatus string `pulumi:"modificationProtectionStatus"`
	// The over reclaim time of the CLB.
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// The overdue time of the Clb.
	OverdueTime string `pulumi:"overdueTime"`
	// The ProjectName of Clb.
	ProjectName string `pulumi:"projectName"`
	// The reclaim time of the CLB.
	ReclaimTime string `pulumi:"reclaimTime"`
	// The remain renew times of the CLB. When the value of the renewType is `AutoRenew`, the query returns this field.
	RemainRenewTimes int `pulumi:"remainRenewTimes"`
	// The renew period times of the CLB. When the value of the renewType is `AutoRenew`, the query returns this field.
	RenewPeriodTimes int `pulumi:"renewPeriodTimes"`
	// The renew type of the CLB. When the value of the loadBalancerBillingType is `PrePaid`, the query returns this field.
	RenewType string `pulumi:"renewType"`
	// The slave zone ID of the CLB.
	SlaveZoneId string `pulumi:"slaveZoneId"`
	// The status of the Clb.
	Status string `pulumi:"status"`
	// The subnet ID of the Clb.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []ClbsClbTag `pulumi:"tags"`
	// The type of the Clb.
	Type string `pulumi:"type"`
	// The update time of the Clb.
	UpdateTime string `pulumi:"updateTime"`
	// The id of the VPC.
	VpcId string `pulumi:"vpcId"`
}

// ClbsClbInput is an input type that accepts ClbsClbArgs and ClbsClbOutput values.
// You can construct a concrete instance of `ClbsClbInput` via:
//
//	ClbsClbArgs{...}
type ClbsClbInput interface {
	pulumi.Input

	ToClbsClbOutput() ClbsClbOutput
	ToClbsClbOutputWithContext(context.Context) ClbsClbOutput
}

type ClbsClbArgs struct {
	// The business status of the Clb.
	BusinessStatus pulumi.StringInput `pulumi:"businessStatus"`
	// The create time of the Clb.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The expected recycle time of the Clb.
	DeletedTime pulumi.StringInput `pulumi:"deletedTime"`
	// The description of the Clb.
	Description pulumi.StringInput `pulumi:"description"`
	// The Eip address of the Clb.
	EipAddress        pulumi.StringInput                `pulumi:"eipAddress"`
	EipBillingConfigs ClbsClbEipBillingConfigArrayInput `pulumi:"eipBillingConfigs"`
	// The Eip ID of the Clb.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The private ip address of the Clb.
	EniAddress pulumi.StringInput `pulumi:"eniAddress"`
	// The Eni ID of the Clb.
	EniId pulumi.StringInput `pulumi:"eniId"`
	// The expired time of the CLB.
	ExpiredTime pulumi.StringInput `pulumi:"expiredTime"`
	// The ID of the Clb.
	Id pulumi.StringInput `pulumi:"id"`
	// The billing status of the CLB.
	InstanceStatus pulumi.IntInput `pulumi:"instanceStatus"`
	// The billing type of the Clb.
	LoadBalancerBillingType pulumi.StringInput `pulumi:"loadBalancerBillingType"`
	// The ID of the Clb.
	LoadBalancerId pulumi.StringInput `pulumi:"loadBalancerId"`
	// The name of the Clb.
	LoadBalancerName pulumi.StringInput `pulumi:"loadBalancerName"`
	// The specifications of the Clb.
	LoadBalancerSpec pulumi.StringInput `pulumi:"loadBalancerSpec"`
	// The reason why Clb is locked.
	LockReason pulumi.StringInput `pulumi:"lockReason"`
	// The master zone ID of the CLB.
	MasterZoneId pulumi.StringInput `pulumi:"masterZoneId"`
	// The modification protection reason of the Clb.
	ModificationProtectionReason pulumi.StringInput `pulumi:"modificationProtectionReason"`
	// The modification protection status of the Clb.
	ModificationProtectionStatus pulumi.StringInput `pulumi:"modificationProtectionStatus"`
	// The over reclaim time of the CLB.
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// The overdue time of the Clb.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// The ProjectName of Clb.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The reclaim time of the CLB.
	ReclaimTime pulumi.StringInput `pulumi:"reclaimTime"`
	// The remain renew times of the CLB. When the value of the renewType is `AutoRenew`, the query returns this field.
	RemainRenewTimes pulumi.IntInput `pulumi:"remainRenewTimes"`
	// The renew period times of the CLB. When the value of the renewType is `AutoRenew`, the query returns this field.
	RenewPeriodTimes pulumi.IntInput `pulumi:"renewPeriodTimes"`
	// The renew type of the CLB. When the value of the loadBalancerBillingType is `PrePaid`, the query returns this field.
	RenewType pulumi.StringInput `pulumi:"renewType"`
	// The slave zone ID of the CLB.
	SlaveZoneId pulumi.StringInput `pulumi:"slaveZoneId"`
	// The status of the Clb.
	Status pulumi.StringInput `pulumi:"status"`
	// The subnet ID of the Clb.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags ClbsClbTagArrayInput `pulumi:"tags"`
	// The type of the Clb.
	Type pulumi.StringInput `pulumi:"type"`
	// The update time of the Clb.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// The id of the VPC.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (ClbsClbArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsClb)(nil)).Elem()
}

func (i ClbsClbArgs) ToClbsClbOutput() ClbsClbOutput {
	return i.ToClbsClbOutputWithContext(context.Background())
}

func (i ClbsClbArgs) ToClbsClbOutputWithContext(ctx context.Context) ClbsClbOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsClbOutput)
}

// ClbsClbArrayInput is an input type that accepts ClbsClbArray and ClbsClbArrayOutput values.
// You can construct a concrete instance of `ClbsClbArrayInput` via:
//
//	ClbsClbArray{ ClbsClbArgs{...} }
type ClbsClbArrayInput interface {
	pulumi.Input

	ToClbsClbArrayOutput() ClbsClbArrayOutput
	ToClbsClbArrayOutputWithContext(context.Context) ClbsClbArrayOutput
}

type ClbsClbArray []ClbsClbInput

func (ClbsClbArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsClb)(nil)).Elem()
}

func (i ClbsClbArray) ToClbsClbArrayOutput() ClbsClbArrayOutput {
	return i.ToClbsClbArrayOutputWithContext(context.Background())
}

func (i ClbsClbArray) ToClbsClbArrayOutputWithContext(ctx context.Context) ClbsClbArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsClbArrayOutput)
}

type ClbsClbOutput struct{ *pulumi.OutputState }

func (ClbsClbOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsClb)(nil)).Elem()
}

func (o ClbsClbOutput) ToClbsClbOutput() ClbsClbOutput {
	return o
}

func (o ClbsClbOutput) ToClbsClbOutputWithContext(ctx context.Context) ClbsClbOutput {
	return o
}

// The business status of the Clb.
func (o ClbsClbOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The create time of the Clb.
func (o ClbsClbOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The expected recycle time of the Clb.
func (o ClbsClbOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.DeletedTime }).(pulumi.StringOutput)
}

// The description of the Clb.
func (o ClbsClbOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.Description }).(pulumi.StringOutput)
}

// The Eip address of the Clb.
func (o ClbsClbOutput) EipAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.EipAddress }).(pulumi.StringOutput)
}

func (o ClbsClbOutput) EipBillingConfigs() ClbsClbEipBillingConfigArrayOutput {
	return o.ApplyT(func(v ClbsClb) []ClbsClbEipBillingConfig { return v.EipBillingConfigs }).(ClbsClbEipBillingConfigArrayOutput)
}

// The Eip ID of the Clb.
func (o ClbsClbOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.EipId }).(pulumi.StringOutput)
}

// The private ip address of the Clb.
func (o ClbsClbOutput) EniAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.EniAddress }).(pulumi.StringOutput)
}

// The Eni ID of the Clb.
func (o ClbsClbOutput) EniId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.EniId }).(pulumi.StringOutput)
}

// The expired time of the CLB.
func (o ClbsClbOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// The ID of the Clb.
func (o ClbsClbOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.Id }).(pulumi.StringOutput)
}

// The billing status of the CLB.
func (o ClbsClbOutput) InstanceStatus() pulumi.IntOutput {
	return o.ApplyT(func(v ClbsClb) int { return v.InstanceStatus }).(pulumi.IntOutput)
}

// The billing type of the Clb.
func (o ClbsClbOutput) LoadBalancerBillingType() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LoadBalancerBillingType }).(pulumi.StringOutput)
}

// The ID of the Clb.
func (o ClbsClbOutput) LoadBalancerId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LoadBalancerId }).(pulumi.StringOutput)
}

// The name of the Clb.
func (o ClbsClbOutput) LoadBalancerName() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LoadBalancerName }).(pulumi.StringOutput)
}

// The specifications of the Clb.
func (o ClbsClbOutput) LoadBalancerSpec() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LoadBalancerSpec }).(pulumi.StringOutput)
}

// The reason why Clb is locked.
func (o ClbsClbOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.LockReason }).(pulumi.StringOutput)
}

// The master zone ID of the CLB.
func (o ClbsClbOutput) MasterZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.MasterZoneId }).(pulumi.StringOutput)
}

// The modification protection reason of the Clb.
func (o ClbsClbOutput) ModificationProtectionReason() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.ModificationProtectionReason }).(pulumi.StringOutput)
}

// The modification protection status of the Clb.
func (o ClbsClbOutput) ModificationProtectionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.ModificationProtectionStatus }).(pulumi.StringOutput)
}

// The over reclaim time of the CLB.
func (o ClbsClbOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// The overdue time of the Clb.
func (o ClbsClbOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// The ProjectName of Clb.
func (o ClbsClbOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The reclaim time of the CLB.
func (o ClbsClbOutput) ReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.ReclaimTime }).(pulumi.StringOutput)
}

// The remain renew times of the CLB. When the value of the renewType is `AutoRenew`, the query returns this field.
func (o ClbsClbOutput) RemainRenewTimes() pulumi.IntOutput {
	return o.ApplyT(func(v ClbsClb) int { return v.RemainRenewTimes }).(pulumi.IntOutput)
}

// The renew period times of the CLB. When the value of the renewType is `AutoRenew`, the query returns this field.
func (o ClbsClbOutput) RenewPeriodTimes() pulumi.IntOutput {
	return o.ApplyT(func(v ClbsClb) int { return v.RenewPeriodTimes }).(pulumi.IntOutput)
}

// The renew type of the CLB. When the value of the loadBalancerBillingType is `PrePaid`, the query returns this field.
func (o ClbsClbOutput) RenewType() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.RenewType }).(pulumi.StringOutput)
}

// The slave zone ID of the CLB.
func (o ClbsClbOutput) SlaveZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.SlaveZoneId }).(pulumi.StringOutput)
}

// The status of the Clb.
func (o ClbsClbOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.Status }).(pulumi.StringOutput)
}

// The subnet ID of the Clb.
func (o ClbsClbOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o ClbsClbOutput) Tags() ClbsClbTagArrayOutput {
	return o.ApplyT(func(v ClbsClb) []ClbsClbTag { return v.Tags }).(ClbsClbTagArrayOutput)
}

// The type of the Clb.
func (o ClbsClbOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.Type }).(pulumi.StringOutput)
}

// The update time of the Clb.
func (o ClbsClbOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The id of the VPC.
func (o ClbsClbOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClb) string { return v.VpcId }).(pulumi.StringOutput)
}

type ClbsClbArrayOutput struct{ *pulumi.OutputState }

func (ClbsClbArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsClb)(nil)).Elem()
}

func (o ClbsClbArrayOutput) ToClbsClbArrayOutput() ClbsClbArrayOutput {
	return o
}

func (o ClbsClbArrayOutput) ToClbsClbArrayOutputWithContext(ctx context.Context) ClbsClbArrayOutput {
	return o
}

func (o ClbsClbArrayOutput) Index(i pulumi.IntInput) ClbsClbOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbsClb {
		return vs[0].([]ClbsClb)[vs[1].(int)]
	}).(ClbsClbOutput)
}

type ClbsClbEipBillingConfig struct {
	Bandwidth      int    `pulumi:"bandwidth"`
	EipBillingType string `pulumi:"eipBillingType"`
	Isp            string `pulumi:"isp"`
}

// ClbsClbEipBillingConfigInput is an input type that accepts ClbsClbEipBillingConfigArgs and ClbsClbEipBillingConfigOutput values.
// You can construct a concrete instance of `ClbsClbEipBillingConfigInput` via:
//
//	ClbsClbEipBillingConfigArgs{...}
type ClbsClbEipBillingConfigInput interface {
	pulumi.Input

	ToClbsClbEipBillingConfigOutput() ClbsClbEipBillingConfigOutput
	ToClbsClbEipBillingConfigOutputWithContext(context.Context) ClbsClbEipBillingConfigOutput
}

type ClbsClbEipBillingConfigArgs struct {
	Bandwidth      pulumi.IntInput    `pulumi:"bandwidth"`
	EipBillingType pulumi.StringInput `pulumi:"eipBillingType"`
	Isp            pulumi.StringInput `pulumi:"isp"`
}

func (ClbsClbEipBillingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsClbEipBillingConfig)(nil)).Elem()
}

func (i ClbsClbEipBillingConfigArgs) ToClbsClbEipBillingConfigOutput() ClbsClbEipBillingConfigOutput {
	return i.ToClbsClbEipBillingConfigOutputWithContext(context.Background())
}

func (i ClbsClbEipBillingConfigArgs) ToClbsClbEipBillingConfigOutputWithContext(ctx context.Context) ClbsClbEipBillingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsClbEipBillingConfigOutput)
}

// ClbsClbEipBillingConfigArrayInput is an input type that accepts ClbsClbEipBillingConfigArray and ClbsClbEipBillingConfigArrayOutput values.
// You can construct a concrete instance of `ClbsClbEipBillingConfigArrayInput` via:
//
//	ClbsClbEipBillingConfigArray{ ClbsClbEipBillingConfigArgs{...} }
type ClbsClbEipBillingConfigArrayInput interface {
	pulumi.Input

	ToClbsClbEipBillingConfigArrayOutput() ClbsClbEipBillingConfigArrayOutput
	ToClbsClbEipBillingConfigArrayOutputWithContext(context.Context) ClbsClbEipBillingConfigArrayOutput
}

type ClbsClbEipBillingConfigArray []ClbsClbEipBillingConfigInput

func (ClbsClbEipBillingConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsClbEipBillingConfig)(nil)).Elem()
}

func (i ClbsClbEipBillingConfigArray) ToClbsClbEipBillingConfigArrayOutput() ClbsClbEipBillingConfigArrayOutput {
	return i.ToClbsClbEipBillingConfigArrayOutputWithContext(context.Background())
}

func (i ClbsClbEipBillingConfigArray) ToClbsClbEipBillingConfigArrayOutputWithContext(ctx context.Context) ClbsClbEipBillingConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsClbEipBillingConfigArrayOutput)
}

type ClbsClbEipBillingConfigOutput struct{ *pulumi.OutputState }

func (ClbsClbEipBillingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsClbEipBillingConfig)(nil)).Elem()
}

func (o ClbsClbEipBillingConfigOutput) ToClbsClbEipBillingConfigOutput() ClbsClbEipBillingConfigOutput {
	return o
}

func (o ClbsClbEipBillingConfigOutput) ToClbsClbEipBillingConfigOutputWithContext(ctx context.Context) ClbsClbEipBillingConfigOutput {
	return o
}

func (o ClbsClbEipBillingConfigOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v ClbsClbEipBillingConfig) int { return v.Bandwidth }).(pulumi.IntOutput)
}

func (o ClbsClbEipBillingConfigOutput) EipBillingType() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClbEipBillingConfig) string { return v.EipBillingType }).(pulumi.StringOutput)
}

func (o ClbsClbEipBillingConfigOutput) Isp() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClbEipBillingConfig) string { return v.Isp }).(pulumi.StringOutput)
}

type ClbsClbEipBillingConfigArrayOutput struct{ *pulumi.OutputState }

func (ClbsClbEipBillingConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsClbEipBillingConfig)(nil)).Elem()
}

func (o ClbsClbEipBillingConfigArrayOutput) ToClbsClbEipBillingConfigArrayOutput() ClbsClbEipBillingConfigArrayOutput {
	return o
}

func (o ClbsClbEipBillingConfigArrayOutput) ToClbsClbEipBillingConfigArrayOutputWithContext(ctx context.Context) ClbsClbEipBillingConfigArrayOutput {
	return o
}

func (o ClbsClbEipBillingConfigArrayOutput) Index(i pulumi.IntInput) ClbsClbEipBillingConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbsClbEipBillingConfig {
		return vs[0].([]ClbsClbEipBillingConfig)[vs[1].(int)]
	}).(ClbsClbEipBillingConfigOutput)
}

type ClbsClbTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ClbsClbTagInput is an input type that accepts ClbsClbTagArgs and ClbsClbTagOutput values.
// You can construct a concrete instance of `ClbsClbTagInput` via:
//
//	ClbsClbTagArgs{...}
type ClbsClbTagInput interface {
	pulumi.Input

	ToClbsClbTagOutput() ClbsClbTagOutput
	ToClbsClbTagOutputWithContext(context.Context) ClbsClbTagOutput
}

type ClbsClbTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ClbsClbTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsClbTag)(nil)).Elem()
}

func (i ClbsClbTagArgs) ToClbsClbTagOutput() ClbsClbTagOutput {
	return i.ToClbsClbTagOutputWithContext(context.Background())
}

func (i ClbsClbTagArgs) ToClbsClbTagOutputWithContext(ctx context.Context) ClbsClbTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsClbTagOutput)
}

// ClbsClbTagArrayInput is an input type that accepts ClbsClbTagArray and ClbsClbTagArrayOutput values.
// You can construct a concrete instance of `ClbsClbTagArrayInput` via:
//
//	ClbsClbTagArray{ ClbsClbTagArgs{...} }
type ClbsClbTagArrayInput interface {
	pulumi.Input

	ToClbsClbTagArrayOutput() ClbsClbTagArrayOutput
	ToClbsClbTagArrayOutputWithContext(context.Context) ClbsClbTagArrayOutput
}

type ClbsClbTagArray []ClbsClbTagInput

func (ClbsClbTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsClbTag)(nil)).Elem()
}

func (i ClbsClbTagArray) ToClbsClbTagArrayOutput() ClbsClbTagArrayOutput {
	return i.ToClbsClbTagArrayOutputWithContext(context.Background())
}

func (i ClbsClbTagArray) ToClbsClbTagArrayOutputWithContext(ctx context.Context) ClbsClbTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsClbTagArrayOutput)
}

type ClbsClbTagOutput struct{ *pulumi.OutputState }

func (ClbsClbTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsClbTag)(nil)).Elem()
}

func (o ClbsClbTagOutput) ToClbsClbTagOutput() ClbsClbTagOutput {
	return o
}

func (o ClbsClbTagOutput) ToClbsClbTagOutputWithContext(ctx context.Context) ClbsClbTagOutput {
	return o
}

// The Key of Tags.
func (o ClbsClbTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClbTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ClbsClbTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsClbTag) string { return v.Value }).(pulumi.StringOutput)
}

type ClbsClbTagArrayOutput struct{ *pulumi.OutputState }

func (ClbsClbTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsClbTag)(nil)).Elem()
}

func (o ClbsClbTagArrayOutput) ToClbsClbTagArrayOutput() ClbsClbTagArrayOutput {
	return o
}

func (o ClbsClbTagArrayOutput) ToClbsClbTagArrayOutputWithContext(ctx context.Context) ClbsClbTagArrayOutput {
	return o
}

func (o ClbsClbTagArrayOutput) Index(i pulumi.IntInput) ClbsClbTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbsClbTag {
		return vs[0].([]ClbsClbTag)[vs[1].(int)]
	}).(ClbsClbTagOutput)
}

type ClbsTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ClbsTagInput is an input type that accepts ClbsTagArgs and ClbsTagOutput values.
// You can construct a concrete instance of `ClbsTagInput` via:
//
//	ClbsTagArgs{...}
type ClbsTagInput interface {
	pulumi.Input

	ToClbsTagOutput() ClbsTagOutput
	ToClbsTagOutputWithContext(context.Context) ClbsTagOutput
}

type ClbsTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ClbsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsTag)(nil)).Elem()
}

func (i ClbsTagArgs) ToClbsTagOutput() ClbsTagOutput {
	return i.ToClbsTagOutputWithContext(context.Background())
}

func (i ClbsTagArgs) ToClbsTagOutputWithContext(ctx context.Context) ClbsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsTagOutput)
}

// ClbsTagArrayInput is an input type that accepts ClbsTagArray and ClbsTagArrayOutput values.
// You can construct a concrete instance of `ClbsTagArrayInput` via:
//
//	ClbsTagArray{ ClbsTagArgs{...} }
type ClbsTagArrayInput interface {
	pulumi.Input

	ToClbsTagArrayOutput() ClbsTagArrayOutput
	ToClbsTagArrayOutputWithContext(context.Context) ClbsTagArrayOutput
}

type ClbsTagArray []ClbsTagInput

func (ClbsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsTag)(nil)).Elem()
}

func (i ClbsTagArray) ToClbsTagArrayOutput() ClbsTagArrayOutput {
	return i.ToClbsTagArrayOutputWithContext(context.Background())
}

func (i ClbsTagArray) ToClbsTagArrayOutputWithContext(ctx context.Context) ClbsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClbsTagArrayOutput)
}

type ClbsTagOutput struct{ *pulumi.OutputState }

func (ClbsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClbsTag)(nil)).Elem()
}

func (o ClbsTagOutput) ToClbsTagOutput() ClbsTagOutput {
	return o
}

func (o ClbsTagOutput) ToClbsTagOutputWithContext(ctx context.Context) ClbsTagOutput {
	return o
}

// The Key of Tags.
func (o ClbsTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ClbsTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ClbsTag) string { return v.Value }).(pulumi.StringOutput)
}

type ClbsTagArrayOutput struct{ *pulumi.OutputState }

func (ClbsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClbsTag)(nil)).Elem()
}

func (o ClbsTagArrayOutput) ToClbsTagArrayOutput() ClbsTagArrayOutput {
	return o
}

func (o ClbsTagArrayOutput) ToClbsTagArrayOutputWithContext(ctx context.Context) ClbsTagArrayOutput {
	return o
}

func (o ClbsTagArrayOutput) Index(i pulumi.IntInput) ClbsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClbsTag {
		return vs[0].([]ClbsTag)[vs[1].(int)]
	}).(ClbsTagOutput)
}

type ListenerHealthCheck struct {
	// The domain of health check.
	Domain *string `pulumi:"domain"`
	// The enable status of health check function. Optional choice contains `on`, `off`.
	Enabled *string `pulumi:"enabled"`
	// The healthy threshold of health check, default 3, range in 2~10.
	HealthyThreshold *int `pulumi:"healthyThreshold"`
	// The normal http status code of health check, the value can be `http2xx` or `http3xx` or `http4xx` or `http5xx`.
	HttpCode *string `pulumi:"httpCode"`
	// The interval executing health check, default 2, range in 1~300.
	Interval *int `pulumi:"interval"`
	// The method of health check, the value can be `GET` or `HEAD`.
	Method *string `pulumi:"method"`
	// The response timeout of health check, default 2, range in 1~60..
	Timeout *int `pulumi:"timeout"`
	// The UDP expect of health check. This field must be specified simultaneously with field `udpRequest`.
	UdpExpect *string `pulumi:"udpExpect"`
	// The UDP request of health check. This field must be specified simultaneously with field `udpExpect`.
	UdpRequest *string `pulumi:"udpRequest"`
	// The unhealthy threshold of health check, default 3, range in 2~10.
	UnHealthyThreshold *int `pulumi:"unHealthyThreshold"`
	// The uri of health check.
	Uri *string `pulumi:"uri"`
}

// ListenerHealthCheckInput is an input type that accepts ListenerHealthCheckArgs and ListenerHealthCheckOutput values.
// You can construct a concrete instance of `ListenerHealthCheckInput` via:
//
//	ListenerHealthCheckArgs{...}
type ListenerHealthCheckInput interface {
	pulumi.Input

	ToListenerHealthCheckOutput() ListenerHealthCheckOutput
	ToListenerHealthCheckOutputWithContext(context.Context) ListenerHealthCheckOutput
}

type ListenerHealthCheckArgs struct {
	// The domain of health check.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The enable status of health check function. Optional choice contains `on`, `off`.
	Enabled pulumi.StringPtrInput `pulumi:"enabled"`
	// The healthy threshold of health check, default 3, range in 2~10.
	HealthyThreshold pulumi.IntPtrInput `pulumi:"healthyThreshold"`
	// The normal http status code of health check, the value can be `http2xx` or `http3xx` or `http4xx` or `http5xx`.
	HttpCode pulumi.StringPtrInput `pulumi:"httpCode"`
	// The interval executing health check, default 2, range in 1~300.
	Interval pulumi.IntPtrInput `pulumi:"interval"`
	// The method of health check, the value can be `GET` or `HEAD`.
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The response timeout of health check, default 2, range in 1~60..
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	// The UDP expect of health check. This field must be specified simultaneously with field `udpRequest`.
	UdpExpect pulumi.StringPtrInput `pulumi:"udpExpect"`
	// The UDP request of health check. This field must be specified simultaneously with field `udpExpect`.
	UdpRequest pulumi.StringPtrInput `pulumi:"udpRequest"`
	// The unhealthy threshold of health check, default 3, range in 2~10.
	UnHealthyThreshold pulumi.IntPtrInput `pulumi:"unHealthyThreshold"`
	// The uri of health check.
	Uri pulumi.StringPtrInput `pulumi:"uri"`
}

func (ListenerHealthCheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerHealthCheck)(nil)).Elem()
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckOutput() ListenerHealthCheckOutput {
	return i.ToListenerHealthCheckOutputWithContext(context.Background())
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckOutputWithContext(ctx context.Context) ListenerHealthCheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckOutput)
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return i.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i ListenerHealthCheckArgs) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckOutput).ToListenerHealthCheckPtrOutputWithContext(ctx)
}

// ListenerHealthCheckPtrInput is an input type that accepts ListenerHealthCheckArgs, ListenerHealthCheckPtr and ListenerHealthCheckPtrOutput values.
// You can construct a concrete instance of `ListenerHealthCheckPtrInput` via:
//
//	        ListenerHealthCheckArgs{...}
//
//	or:
//
//	        nil
type ListenerHealthCheckPtrInput interface {
	pulumi.Input

	ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput
	ToListenerHealthCheckPtrOutputWithContext(context.Context) ListenerHealthCheckPtrOutput
}

type listenerHealthCheckPtrType ListenerHealthCheckArgs

func ListenerHealthCheckPtr(v *ListenerHealthCheckArgs) ListenerHealthCheckPtrInput {
	return (*listenerHealthCheckPtrType)(v)
}

func (*listenerHealthCheckPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerHealthCheck)(nil)).Elem()
}

func (i *listenerHealthCheckPtrType) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return i.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (i *listenerHealthCheckPtrType) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenerHealthCheckPtrOutput)
}

type ListenerHealthCheckOutput struct{ *pulumi.OutputState }

func (ListenerHealthCheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenerHealthCheck)(nil)).Elem()
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckOutput() ListenerHealthCheckOutput {
	return o
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckOutputWithContext(ctx context.Context) ListenerHealthCheckOutput {
	return o
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return o.ToListenerHealthCheckPtrOutputWithContext(context.Background())
}

func (o ListenerHealthCheckOutput) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ListenerHealthCheck) *ListenerHealthCheck {
		return &v
	}).(ListenerHealthCheckPtrOutput)
}

// The domain of health check.
func (o ListenerHealthCheckOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The enable status of health check function. Optional choice contains `on`, `off`.
func (o ListenerHealthCheckOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Enabled }).(pulumi.StringPtrOutput)
}

// The healthy threshold of health check, default 3, range in 2~10.
func (o ListenerHealthCheckOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.HealthyThreshold }).(pulumi.IntPtrOutput)
}

// The normal http status code of health check, the value can be `http2xx` or `http3xx` or `http4xx` or `http5xx`.
func (o ListenerHealthCheckOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.HttpCode }).(pulumi.StringPtrOutput)
}

// The interval executing health check, default 2, range in 1~300.
func (o ListenerHealthCheckOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

// The method of health check, the value can be `GET` or `HEAD`.
func (o ListenerHealthCheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The response timeout of health check, default 2, range in 1~60..
func (o ListenerHealthCheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

// The UDP expect of health check. This field must be specified simultaneously with field `udpRequest`.
func (o ListenerHealthCheckOutput) UdpExpect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.UdpExpect }).(pulumi.StringPtrOutput)
}

// The UDP request of health check. This field must be specified simultaneously with field `udpExpect`.
func (o ListenerHealthCheckOutput) UdpRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.UdpRequest }).(pulumi.StringPtrOutput)
}

// The unhealthy threshold of health check, default 3, range in 2~10.
func (o ListenerHealthCheckOutput) UnHealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *int { return v.UnHealthyThreshold }).(pulumi.IntPtrOutput)
}

// The uri of health check.
func (o ListenerHealthCheckOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ListenerHealthCheck) *string { return v.Uri }).(pulumi.StringPtrOutput)
}

type ListenerHealthCheckPtrOutput struct{ *pulumi.OutputState }

func (ListenerHealthCheckPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ListenerHealthCheck)(nil)).Elem()
}

func (o ListenerHealthCheckPtrOutput) ToListenerHealthCheckPtrOutput() ListenerHealthCheckPtrOutput {
	return o
}

func (o ListenerHealthCheckPtrOutput) ToListenerHealthCheckPtrOutputWithContext(ctx context.Context) ListenerHealthCheckPtrOutput {
	return o
}

func (o ListenerHealthCheckPtrOutput) Elem() ListenerHealthCheckOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) ListenerHealthCheck {
		if v != nil {
			return *v
		}
		var ret ListenerHealthCheck
		return ret
	}).(ListenerHealthCheckOutput)
}

// The domain of health check.
func (o ListenerHealthCheckPtrOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Domain
	}).(pulumi.StringPtrOutput)
}

// The enable status of health check function. Optional choice contains `on`, `off`.
func (o ListenerHealthCheckPtrOutput) Enabled() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Enabled
	}).(pulumi.StringPtrOutput)
}

// The healthy threshold of health check, default 3, range in 2~10.
func (o ListenerHealthCheckPtrOutput) HealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.HealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// The normal http status code of health check, the value can be `http2xx` or `http3xx` or `http4xx` or `http5xx`.
func (o ListenerHealthCheckPtrOutput) HttpCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.HttpCode
	}).(pulumi.StringPtrOutput)
}

// The interval executing health check, default 2, range in 1~300.
func (o ListenerHealthCheckPtrOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Interval
	}).(pulumi.IntPtrOutput)
}

// The method of health check, the value can be `GET` or `HEAD`.
func (o ListenerHealthCheckPtrOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Method
	}).(pulumi.StringPtrOutput)
}

// The response timeout of health check, default 2, range in 1~60..
func (o ListenerHealthCheckPtrOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.Timeout
	}).(pulumi.IntPtrOutput)
}

// The UDP expect of health check. This field must be specified simultaneously with field `udpRequest`.
func (o ListenerHealthCheckPtrOutput) UdpExpect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.UdpExpect
	}).(pulumi.StringPtrOutput)
}

// The UDP request of health check. This field must be specified simultaneously with field `udpExpect`.
func (o ListenerHealthCheckPtrOutput) UdpRequest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.UdpRequest
	}).(pulumi.StringPtrOutput)
}

// The unhealthy threshold of health check, default 3, range in 2~10.
func (o ListenerHealthCheckPtrOutput) UnHealthyThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *int {
		if v == nil {
			return nil
		}
		return v.UnHealthyThreshold
	}).(pulumi.IntPtrOutput)
}

// The uri of health check.
func (o ListenerHealthCheckPtrOutput) Uri() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ListenerHealthCheck) *string {
		if v == nil {
			return nil
		}
		return v.Uri
	}).(pulumi.StringPtrOutput)
}

type ListenersListener struct {
	// The acl ID list to which the Listener is bound.
	AclIds []string `pulumi:"aclIds"`
	// The acl status of the Listener.
	AclStatus string `pulumi:"aclStatus"`
	// The acl type of the Listener.
	AclType string `pulumi:"aclType"`
	// The ID of the certificate which is associated with the Listener.
	CertificateId string `pulumi:"certificateId"`
	// The create time of the Listener.
	CreateTime string `pulumi:"createTime"`
	// The enable status of the Listener.
	Enabled string `pulumi:"enabled"`
	// The domain of health check.
	HealthCheckDomain string `pulumi:"healthCheckDomain"`
	// The enable status of health check function.
	HealthCheckEnabled string `pulumi:"healthCheckEnabled"`
	// The healthy threshold of health check.
	HealthCheckHealthyThreshold int `pulumi:"healthCheckHealthyThreshold"`
	// The normal http status code of health check.
	HealthCheckHttpCode string `pulumi:"healthCheckHttpCode"`
	// The interval executing health check.
	HealthCheckInterval int `pulumi:"healthCheckInterval"`
	// The method of health check.
	HealthCheckMethod string `pulumi:"healthCheckMethod"`
	// The response timeout of health check.
	HealthCheckTimeout int `pulumi:"healthCheckTimeout"`
	// The expected response string for the health check.
	HealthCheckUdpExpect string `pulumi:"healthCheckUdpExpect"`
	// A request string to perform a health check.
	HealthCheckUdpRequest string `pulumi:"healthCheckUdpRequest"`
	// The unhealthy threshold of health check.
	HealthCheckUnHealthyThreshold int `pulumi:"healthCheckUnHealthyThreshold"`
	// The uri of health check.
	HealthCheckUri string `pulumi:"healthCheckUri"`
	// The ID of the Listener.
	Id string `pulumi:"id"`
	// The ID of the Listener.
	ListenerId string `pulumi:"listenerId"`
	// The name of the Listener.
	ListenerName string `pulumi:"listenerName"`
	// The port receiving request of the Listener.
	Port int `pulumi:"port"`
	// The protocol of the Listener.
	Protocol string `pulumi:"protocol"`
	// The ID of the backend server group which is associated with the Listener.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The status of the Listener.
	Status string `pulumi:"status"`
	// The update time of the Listener.
	UpdateTime string `pulumi:"updateTime"`
}

// ListenersListenerInput is an input type that accepts ListenersListenerArgs and ListenersListenerOutput values.
// You can construct a concrete instance of `ListenersListenerInput` via:
//
//	ListenersListenerArgs{...}
type ListenersListenerInput interface {
	pulumi.Input

	ToListenersListenerOutput() ListenersListenerOutput
	ToListenersListenerOutputWithContext(context.Context) ListenersListenerOutput
}

type ListenersListenerArgs struct {
	// The acl ID list to which the Listener is bound.
	AclIds pulumi.StringArrayInput `pulumi:"aclIds"`
	// The acl status of the Listener.
	AclStatus pulumi.StringInput `pulumi:"aclStatus"`
	// The acl type of the Listener.
	AclType pulumi.StringInput `pulumi:"aclType"`
	// The ID of the certificate which is associated with the Listener.
	CertificateId pulumi.StringInput `pulumi:"certificateId"`
	// The create time of the Listener.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The enable status of the Listener.
	Enabled pulumi.StringInput `pulumi:"enabled"`
	// The domain of health check.
	HealthCheckDomain pulumi.StringInput `pulumi:"healthCheckDomain"`
	// The enable status of health check function.
	HealthCheckEnabled pulumi.StringInput `pulumi:"healthCheckEnabled"`
	// The healthy threshold of health check.
	HealthCheckHealthyThreshold pulumi.IntInput `pulumi:"healthCheckHealthyThreshold"`
	// The normal http status code of health check.
	HealthCheckHttpCode pulumi.StringInput `pulumi:"healthCheckHttpCode"`
	// The interval executing health check.
	HealthCheckInterval pulumi.IntInput `pulumi:"healthCheckInterval"`
	// The method of health check.
	HealthCheckMethod pulumi.StringInput `pulumi:"healthCheckMethod"`
	// The response timeout of health check.
	HealthCheckTimeout pulumi.IntInput `pulumi:"healthCheckTimeout"`
	// The expected response string for the health check.
	HealthCheckUdpExpect pulumi.StringInput `pulumi:"healthCheckUdpExpect"`
	// A request string to perform a health check.
	HealthCheckUdpRequest pulumi.StringInput `pulumi:"healthCheckUdpRequest"`
	// The unhealthy threshold of health check.
	HealthCheckUnHealthyThreshold pulumi.IntInput `pulumi:"healthCheckUnHealthyThreshold"`
	// The uri of health check.
	HealthCheckUri pulumi.StringInput `pulumi:"healthCheckUri"`
	// The ID of the Listener.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the Listener.
	ListenerId pulumi.StringInput `pulumi:"listenerId"`
	// The name of the Listener.
	ListenerName pulumi.StringInput `pulumi:"listenerName"`
	// The port receiving request of the Listener.
	Port pulumi.IntInput `pulumi:"port"`
	// The protocol of the Listener.
	Protocol pulumi.StringInput `pulumi:"protocol"`
	// The ID of the backend server group which is associated with the Listener.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// The status of the Listener.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of the Listener.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (ListenersListenerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenersListener)(nil)).Elem()
}

func (i ListenersListenerArgs) ToListenersListenerOutput() ListenersListenerOutput {
	return i.ToListenersListenerOutputWithContext(context.Background())
}

func (i ListenersListenerArgs) ToListenersListenerOutputWithContext(ctx context.Context) ListenersListenerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenersListenerOutput)
}

// ListenersListenerArrayInput is an input type that accepts ListenersListenerArray and ListenersListenerArrayOutput values.
// You can construct a concrete instance of `ListenersListenerArrayInput` via:
//
//	ListenersListenerArray{ ListenersListenerArgs{...} }
type ListenersListenerArrayInput interface {
	pulumi.Input

	ToListenersListenerArrayOutput() ListenersListenerArrayOutput
	ToListenersListenerArrayOutputWithContext(context.Context) ListenersListenerArrayOutput
}

type ListenersListenerArray []ListenersListenerInput

func (ListenersListenerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenersListener)(nil)).Elem()
}

func (i ListenersListenerArray) ToListenersListenerArrayOutput() ListenersListenerArrayOutput {
	return i.ToListenersListenerArrayOutputWithContext(context.Background())
}

func (i ListenersListenerArray) ToListenersListenerArrayOutputWithContext(ctx context.Context) ListenersListenerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ListenersListenerArrayOutput)
}

type ListenersListenerOutput struct{ *pulumi.OutputState }

func (ListenersListenerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ListenersListener)(nil)).Elem()
}

func (o ListenersListenerOutput) ToListenersListenerOutput() ListenersListenerOutput {
	return o
}

func (o ListenersListenerOutput) ToListenersListenerOutputWithContext(ctx context.Context) ListenersListenerOutput {
	return o
}

// The acl ID list to which the Listener is bound.
func (o ListenersListenerOutput) AclIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ListenersListener) []string { return v.AclIds }).(pulumi.StringArrayOutput)
}

// The acl status of the Listener.
func (o ListenersListenerOutput) AclStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.AclStatus }).(pulumi.StringOutput)
}

// The acl type of the Listener.
func (o ListenersListenerOutput) AclType() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.AclType }).(pulumi.StringOutput)
}

// The ID of the certificate which is associated with the Listener.
func (o ListenersListenerOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.CertificateId }).(pulumi.StringOutput)
}

// The create time of the Listener.
func (o ListenersListenerOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The enable status of the Listener.
func (o ListenersListenerOutput) Enabled() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.Enabled }).(pulumi.StringOutput)
}

// The domain of health check.
func (o ListenersListenerOutput) HealthCheckDomain() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckDomain }).(pulumi.StringOutput)
}

// The enable status of health check function.
func (o ListenersListenerOutput) HealthCheckEnabled() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckEnabled }).(pulumi.StringOutput)
}

// The healthy threshold of health check.
func (o ListenersListenerOutput) HealthCheckHealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.HealthCheckHealthyThreshold }).(pulumi.IntOutput)
}

// The normal http status code of health check.
func (o ListenersListenerOutput) HealthCheckHttpCode() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckHttpCode }).(pulumi.StringOutput)
}

// The interval executing health check.
func (o ListenersListenerOutput) HealthCheckInterval() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.HealthCheckInterval }).(pulumi.IntOutput)
}

// The method of health check.
func (o ListenersListenerOutput) HealthCheckMethod() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckMethod }).(pulumi.StringOutput)
}

// The response timeout of health check.
func (o ListenersListenerOutput) HealthCheckTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.HealthCheckTimeout }).(pulumi.IntOutput)
}

// The expected response string for the health check.
func (o ListenersListenerOutput) HealthCheckUdpExpect() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckUdpExpect }).(pulumi.StringOutput)
}

// A request string to perform a health check.
func (o ListenersListenerOutput) HealthCheckUdpRequest() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckUdpRequest }).(pulumi.StringOutput)
}

// The unhealthy threshold of health check.
func (o ListenersListenerOutput) HealthCheckUnHealthyThreshold() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.HealthCheckUnHealthyThreshold }).(pulumi.IntOutput)
}

// The uri of health check.
func (o ListenersListenerOutput) HealthCheckUri() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.HealthCheckUri }).(pulumi.StringOutput)
}

// The ID of the Listener.
func (o ListenersListenerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the Listener.
func (o ListenersListenerOutput) ListenerId() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.ListenerId }).(pulumi.StringOutput)
}

// The name of the Listener.
func (o ListenersListenerOutput) ListenerName() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.ListenerName }).(pulumi.StringOutput)
}

// The port receiving request of the Listener.
func (o ListenersListenerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ListenersListener) int { return v.Port }).(pulumi.IntOutput)
}

// The protocol of the Listener.
func (o ListenersListenerOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.Protocol }).(pulumi.StringOutput)
}

// The ID of the backend server group which is associated with the Listener.
func (o ListenersListenerOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The status of the Listener.
func (o ListenersListenerOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of the Listener.
func (o ListenersListenerOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ListenersListener) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type ListenersListenerArrayOutput struct{ *pulumi.OutputState }

func (ListenersListenerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ListenersListener)(nil)).Elem()
}

func (o ListenersListenerArrayOutput) ToListenersListenerArrayOutput() ListenersListenerArrayOutput {
	return o
}

func (o ListenersListenerArrayOutput) ToListenersListenerArrayOutputWithContext(ctx context.Context) ListenersListenerArrayOutput {
	return o
}

func (o ListenersListenerArrayOutput) Index(i pulumi.IntInput) ListenersListenerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ListenersListener {
		return vs[0].([]ListenersListener)[vs[1].(int)]
	}).(ListenersListenerOutput)
}

type RulesRule struct {
	// The Description of Rule.
	Description string `pulumi:"description"`
	// The Domain of Rule.
	Domain string `pulumi:"domain"`
	// The Id of Rule.
	Id string `pulumi:"id"`
	// The Id of Rule.
	RuleId string `pulumi:"ruleId"`
	// The Id of Server Group.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The Url of Rule.
	Url string `pulumi:"url"`
}

// RulesRuleInput is an input type that accepts RulesRuleArgs and RulesRuleOutput values.
// You can construct a concrete instance of `RulesRuleInput` via:
//
//	RulesRuleArgs{...}
type RulesRuleInput interface {
	pulumi.Input

	ToRulesRuleOutput() RulesRuleOutput
	ToRulesRuleOutputWithContext(context.Context) RulesRuleOutput
}

type RulesRuleArgs struct {
	// The Description of Rule.
	Description pulumi.StringInput `pulumi:"description"`
	// The Domain of Rule.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The Id of Rule.
	Id pulumi.StringInput `pulumi:"id"`
	// The Id of Rule.
	RuleId pulumi.StringInput `pulumi:"ruleId"`
	// The Id of Server Group.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// The Url of Rule.
	Url pulumi.StringInput `pulumi:"url"`
}

func (RulesRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRule)(nil)).Elem()
}

func (i RulesRuleArgs) ToRulesRuleOutput() RulesRuleOutput {
	return i.ToRulesRuleOutputWithContext(context.Background())
}

func (i RulesRuleArgs) ToRulesRuleOutputWithContext(ctx context.Context) RulesRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleOutput)
}

// RulesRuleArrayInput is an input type that accepts RulesRuleArray and RulesRuleArrayOutput values.
// You can construct a concrete instance of `RulesRuleArrayInput` via:
//
//	RulesRuleArray{ RulesRuleArgs{...} }
type RulesRuleArrayInput interface {
	pulumi.Input

	ToRulesRuleArrayOutput() RulesRuleArrayOutput
	ToRulesRuleArrayOutputWithContext(context.Context) RulesRuleArrayOutput
}

type RulesRuleArray []RulesRuleInput

func (RulesRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRule)(nil)).Elem()
}

func (i RulesRuleArray) ToRulesRuleArrayOutput() RulesRuleArrayOutput {
	return i.ToRulesRuleArrayOutputWithContext(context.Background())
}

func (i RulesRuleArray) ToRulesRuleArrayOutputWithContext(ctx context.Context) RulesRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RulesRuleArrayOutput)
}

type RulesRuleOutput struct{ *pulumi.OutputState }

func (RulesRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RulesRule)(nil)).Elem()
}

func (o RulesRuleOutput) ToRulesRuleOutput() RulesRuleOutput {
	return o
}

func (o RulesRuleOutput) ToRulesRuleOutputWithContext(ctx context.Context) RulesRuleOutput {
	return o
}

// The Description of Rule.
func (o RulesRuleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.Description }).(pulumi.StringOutput)
}

// The Domain of Rule.
func (o RulesRuleOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.Domain }).(pulumi.StringOutput)
}

// The Id of Rule.
func (o RulesRuleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.Id }).(pulumi.StringOutput)
}

// The Id of Rule.
func (o RulesRuleOutput) RuleId() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.RuleId }).(pulumi.StringOutput)
}

// The Id of Server Group.
func (o RulesRuleOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The Url of Rule.
func (o RulesRuleOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v RulesRule) string { return v.Url }).(pulumi.StringOutput)
}

type RulesRuleArrayOutput struct{ *pulumi.OutputState }

func (RulesRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RulesRule)(nil)).Elem()
}

func (o RulesRuleArrayOutput) ToRulesRuleArrayOutput() RulesRuleArrayOutput {
	return o
}

func (o RulesRuleArrayOutput) ToRulesRuleArrayOutputWithContext(ctx context.Context) RulesRuleArrayOutput {
	return o
}

func (o RulesRuleArrayOutput) Index(i pulumi.IntInput) RulesRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RulesRule {
		return vs[0].([]RulesRule)[vs[1].(int)]
	}).(RulesRuleOutput)
}

type ServerGroupServersServer struct {
	// The description of the instance.
	Description string `pulumi:"description"`
	// The server id of instance in ServerGroup.
	Id string `pulumi:"id"`
	// The ID of ecs instance or the network card bound to ecs instance.
	InstanceId string `pulumi:"instanceId"`
	// The private ip of the instance.
	Ip string `pulumi:"ip"`
	// The port receiving request.
	Port int `pulumi:"port"`
	// The server id of instance in ServerGroup.
	ServerId string `pulumi:"serverId"`
	// The type of instance. Optional choice contains `ecs`, `eni`.
	Type string `pulumi:"type"`
	// The weight of the instance.
	Weight int `pulumi:"weight"`
}

// ServerGroupServersServerInput is an input type that accepts ServerGroupServersServerArgs and ServerGroupServersServerOutput values.
// You can construct a concrete instance of `ServerGroupServersServerInput` via:
//
//	ServerGroupServersServerArgs{...}
type ServerGroupServersServerInput interface {
	pulumi.Input

	ToServerGroupServersServerOutput() ServerGroupServersServerOutput
	ToServerGroupServersServerOutputWithContext(context.Context) ServerGroupServersServerOutput
}

type ServerGroupServersServerArgs struct {
	// The description of the instance.
	Description pulumi.StringInput `pulumi:"description"`
	// The server id of instance in ServerGroup.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of ecs instance or the network card bound to ecs instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The private ip of the instance.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The port receiving request.
	Port pulumi.IntInput `pulumi:"port"`
	// The server id of instance in ServerGroup.
	ServerId pulumi.StringInput `pulumi:"serverId"`
	// The type of instance. Optional choice contains `ecs`, `eni`.
	Type pulumi.StringInput `pulumi:"type"`
	// The weight of the instance.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (ServerGroupServersServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServersServer)(nil)).Elem()
}

func (i ServerGroupServersServerArgs) ToServerGroupServersServerOutput() ServerGroupServersServerOutput {
	return i.ToServerGroupServersServerOutputWithContext(context.Background())
}

func (i ServerGroupServersServerArgs) ToServerGroupServersServerOutputWithContext(ctx context.Context) ServerGroupServersServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServersServerOutput)
}

// ServerGroupServersServerArrayInput is an input type that accepts ServerGroupServersServerArray and ServerGroupServersServerArrayOutput values.
// You can construct a concrete instance of `ServerGroupServersServerArrayInput` via:
//
//	ServerGroupServersServerArray{ ServerGroupServersServerArgs{...} }
type ServerGroupServersServerArrayInput interface {
	pulumi.Input

	ToServerGroupServersServerArrayOutput() ServerGroupServersServerArrayOutput
	ToServerGroupServersServerArrayOutputWithContext(context.Context) ServerGroupServersServerArrayOutput
}

type ServerGroupServersServerArray []ServerGroupServersServerInput

func (ServerGroupServersServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServersServer)(nil)).Elem()
}

func (i ServerGroupServersServerArray) ToServerGroupServersServerArrayOutput() ServerGroupServersServerArrayOutput {
	return i.ToServerGroupServersServerArrayOutputWithContext(context.Background())
}

func (i ServerGroupServersServerArray) ToServerGroupServersServerArrayOutputWithContext(ctx context.Context) ServerGroupServersServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupServersServerArrayOutput)
}

type ServerGroupServersServerOutput struct{ *pulumi.OutputState }

func (ServerGroupServersServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServersServer)(nil)).Elem()
}

func (o ServerGroupServersServerOutput) ToServerGroupServersServerOutput() ServerGroupServersServerOutput {
	return o
}

func (o ServerGroupServersServerOutput) ToServerGroupServersServerOutputWithContext(ctx context.Context) ServerGroupServersServerOutput {
	return o
}

// The description of the instance.
func (o ServerGroupServersServerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.Description }).(pulumi.StringOutput)
}

// The server id of instance in ServerGroup.
func (o ServerGroupServersServerOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of ecs instance or the network card bound to ecs instance.
func (o ServerGroupServersServerOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The private ip of the instance.
func (o ServerGroupServersServerOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.Ip }).(pulumi.StringOutput)
}

// The port receiving request.
func (o ServerGroupServersServerOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v ServerGroupServersServer) int { return v.Port }).(pulumi.IntOutput)
}

// The server id of instance in ServerGroup.
func (o ServerGroupServersServerOutput) ServerId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.ServerId }).(pulumi.StringOutput)
}

// The type of instance. Optional choice contains `ecs`, `eni`.
func (o ServerGroupServersServerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersServer) string { return v.Type }).(pulumi.StringOutput)
}

// The weight of the instance.
func (o ServerGroupServersServerOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v ServerGroupServersServer) int { return v.Weight }).(pulumi.IntOutput)
}

type ServerGroupServersServerArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupServersServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupServersServer)(nil)).Elem()
}

func (o ServerGroupServersServerArrayOutput) ToServerGroupServersServerArrayOutput() ServerGroupServersServerArrayOutput {
	return o
}

func (o ServerGroupServersServerArrayOutput) ToServerGroupServersServerArrayOutputWithContext(ctx context.Context) ServerGroupServersServerArrayOutput {
	return o
}

func (o ServerGroupServersServerArrayOutput) Index(i pulumi.IntInput) ServerGroupServersServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerGroupServersServer {
		return vs[0].([]ServerGroupServersServer)[vs[1].(int)]
	}).(ServerGroupServersServerOutput)
}

type ServerGroupsGroup struct {
	// The create time of the ServerGroup.
	CreateTime string `pulumi:"createTime"`
	// The description of the ServerGroup.
	Description string `pulumi:"description"`
	// The ID of the ServerGroup.
	Id string `pulumi:"id"`
	// The ID of the ServerGroup.
	ServerGroupId string `pulumi:"serverGroupId"`
	// The name of the ServerGroup.
	ServerGroupName string `pulumi:"serverGroupName"`
	// The update time of the ServerGroup.
	UpdateTime string `pulumi:"updateTime"`
}

// ServerGroupsGroupInput is an input type that accepts ServerGroupsGroupArgs and ServerGroupsGroupOutput values.
// You can construct a concrete instance of `ServerGroupsGroupInput` via:
//
//	ServerGroupsGroupArgs{...}
type ServerGroupsGroupInput interface {
	pulumi.Input

	ToServerGroupsGroupOutput() ServerGroupsGroupOutput
	ToServerGroupsGroupOutputWithContext(context.Context) ServerGroupsGroupOutput
}

type ServerGroupsGroupArgs struct {
	// The create time of the ServerGroup.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the ServerGroup.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the ServerGroup.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the ServerGroup.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
	// The name of the ServerGroup.
	ServerGroupName pulumi.StringInput `pulumi:"serverGroupName"`
	// The update time of the ServerGroup.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (ServerGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupsGroup)(nil)).Elem()
}

func (i ServerGroupsGroupArgs) ToServerGroupsGroupOutput() ServerGroupsGroupOutput {
	return i.ToServerGroupsGroupOutputWithContext(context.Background())
}

func (i ServerGroupsGroupArgs) ToServerGroupsGroupOutputWithContext(ctx context.Context) ServerGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupsGroupOutput)
}

// ServerGroupsGroupArrayInput is an input type that accepts ServerGroupsGroupArray and ServerGroupsGroupArrayOutput values.
// You can construct a concrete instance of `ServerGroupsGroupArrayInput` via:
//
//	ServerGroupsGroupArray{ ServerGroupsGroupArgs{...} }
type ServerGroupsGroupArrayInput interface {
	pulumi.Input

	ToServerGroupsGroupArrayOutput() ServerGroupsGroupArrayOutput
	ToServerGroupsGroupArrayOutputWithContext(context.Context) ServerGroupsGroupArrayOutput
}

type ServerGroupsGroupArray []ServerGroupsGroupInput

func (ServerGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupsGroup)(nil)).Elem()
}

func (i ServerGroupsGroupArray) ToServerGroupsGroupArrayOutput() ServerGroupsGroupArrayOutput {
	return i.ToServerGroupsGroupArrayOutputWithContext(context.Background())
}

func (i ServerGroupsGroupArray) ToServerGroupsGroupArrayOutputWithContext(ctx context.Context) ServerGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServerGroupsGroupArrayOutput)
}

type ServerGroupsGroupOutput struct{ *pulumi.OutputState }

func (ServerGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupsGroup)(nil)).Elem()
}

func (o ServerGroupsGroupOutput) ToServerGroupsGroupOutput() ServerGroupsGroupOutput {
	return o
}

func (o ServerGroupsGroupOutput) ToServerGroupsGroupOutputWithContext(ctx context.Context) ServerGroupsGroupOutput {
	return o
}

// The create time of the ServerGroup.
func (o ServerGroupsGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the ServerGroup.
func (o ServerGroupsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the ServerGroup.
func (o ServerGroupsGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the ServerGroup.
func (o ServerGroupsGroupOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The name of the ServerGroup.
func (o ServerGroupsGroupOutput) ServerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.ServerGroupName }).(pulumi.StringOutput)
}

// The update time of the ServerGroup.
func (o ServerGroupsGroupOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupsGroup) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type ServerGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (ServerGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServerGroupsGroup)(nil)).Elem()
}

func (o ServerGroupsGroupArrayOutput) ToServerGroupsGroupArrayOutput() ServerGroupsGroupArrayOutput {
	return o
}

func (o ServerGroupsGroupArrayOutput) ToServerGroupsGroupArrayOutputWithContext(ctx context.Context) ServerGroupsGroupArrayOutput {
	return o
}

func (o ServerGroupsGroupArrayOutput) Index(i pulumi.IntInput) ServerGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServerGroupsGroup {
		return vs[0].([]ServerGroupsGroup)[vs[1].(int)]
	}).(ServerGroupsGroupOutput)
}

type ZonesMasterZone struct {
	// The slave zones list.
	SlaveZones []ZonesMasterZoneSlaveZone `pulumi:"slaveZones"`
	// The master zone id.
	ZoneId string `pulumi:"zoneId"`
}

// ZonesMasterZoneInput is an input type that accepts ZonesMasterZoneArgs and ZonesMasterZoneOutput values.
// You can construct a concrete instance of `ZonesMasterZoneInput` via:
//
//	ZonesMasterZoneArgs{...}
type ZonesMasterZoneInput interface {
	pulumi.Input

	ToZonesMasterZoneOutput() ZonesMasterZoneOutput
	ToZonesMasterZoneOutputWithContext(context.Context) ZonesMasterZoneOutput
}

type ZonesMasterZoneArgs struct {
	// The slave zones list.
	SlaveZones ZonesMasterZoneSlaveZoneArrayInput `pulumi:"slaveZones"`
	// The master zone id.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (ZonesMasterZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesMasterZone)(nil)).Elem()
}

func (i ZonesMasterZoneArgs) ToZonesMasterZoneOutput() ZonesMasterZoneOutput {
	return i.ToZonesMasterZoneOutputWithContext(context.Background())
}

func (i ZonesMasterZoneArgs) ToZonesMasterZoneOutputWithContext(ctx context.Context) ZonesMasterZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesMasterZoneOutput)
}

// ZonesMasterZoneArrayInput is an input type that accepts ZonesMasterZoneArray and ZonesMasterZoneArrayOutput values.
// You can construct a concrete instance of `ZonesMasterZoneArrayInput` via:
//
//	ZonesMasterZoneArray{ ZonesMasterZoneArgs{...} }
type ZonesMasterZoneArrayInput interface {
	pulumi.Input

	ToZonesMasterZoneArrayOutput() ZonesMasterZoneArrayOutput
	ToZonesMasterZoneArrayOutputWithContext(context.Context) ZonesMasterZoneArrayOutput
}

type ZonesMasterZoneArray []ZonesMasterZoneInput

func (ZonesMasterZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesMasterZone)(nil)).Elem()
}

func (i ZonesMasterZoneArray) ToZonesMasterZoneArrayOutput() ZonesMasterZoneArrayOutput {
	return i.ToZonesMasterZoneArrayOutputWithContext(context.Background())
}

func (i ZonesMasterZoneArray) ToZonesMasterZoneArrayOutputWithContext(ctx context.Context) ZonesMasterZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesMasterZoneArrayOutput)
}

type ZonesMasterZoneOutput struct{ *pulumi.OutputState }

func (ZonesMasterZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesMasterZone)(nil)).Elem()
}

func (o ZonesMasterZoneOutput) ToZonesMasterZoneOutput() ZonesMasterZoneOutput {
	return o
}

func (o ZonesMasterZoneOutput) ToZonesMasterZoneOutputWithContext(ctx context.Context) ZonesMasterZoneOutput {
	return o
}

// The slave zones list.
func (o ZonesMasterZoneOutput) SlaveZones() ZonesMasterZoneSlaveZoneArrayOutput {
	return o.ApplyT(func(v ZonesMasterZone) []ZonesMasterZoneSlaveZone { return v.SlaveZones }).(ZonesMasterZoneSlaveZoneArrayOutput)
}

// The master zone id.
func (o ZonesMasterZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesMasterZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type ZonesMasterZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesMasterZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesMasterZone)(nil)).Elem()
}

func (o ZonesMasterZoneArrayOutput) ToZonesMasterZoneArrayOutput() ZonesMasterZoneArrayOutput {
	return o
}

func (o ZonesMasterZoneArrayOutput) ToZonesMasterZoneArrayOutputWithContext(ctx context.Context) ZonesMasterZoneArrayOutput {
	return o
}

func (o ZonesMasterZoneArrayOutput) Index(i pulumi.IntInput) ZonesMasterZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesMasterZone {
		return vs[0].([]ZonesMasterZone)[vs[1].(int)]
	}).(ZonesMasterZoneOutput)
}

type ZonesMasterZoneSlaveZone struct {
	// The master zone id.
	ZoneId string `pulumi:"zoneId"`
}

// ZonesMasterZoneSlaveZoneInput is an input type that accepts ZonesMasterZoneSlaveZoneArgs and ZonesMasterZoneSlaveZoneOutput values.
// You can construct a concrete instance of `ZonesMasterZoneSlaveZoneInput` via:
//
//	ZonesMasterZoneSlaveZoneArgs{...}
type ZonesMasterZoneSlaveZoneInput interface {
	pulumi.Input

	ToZonesMasterZoneSlaveZoneOutput() ZonesMasterZoneSlaveZoneOutput
	ToZonesMasterZoneSlaveZoneOutputWithContext(context.Context) ZonesMasterZoneSlaveZoneOutput
}

type ZonesMasterZoneSlaveZoneArgs struct {
	// The master zone id.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (ZonesMasterZoneSlaveZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesMasterZoneSlaveZone)(nil)).Elem()
}

func (i ZonesMasterZoneSlaveZoneArgs) ToZonesMasterZoneSlaveZoneOutput() ZonesMasterZoneSlaveZoneOutput {
	return i.ToZonesMasterZoneSlaveZoneOutputWithContext(context.Background())
}

func (i ZonesMasterZoneSlaveZoneArgs) ToZonesMasterZoneSlaveZoneOutputWithContext(ctx context.Context) ZonesMasterZoneSlaveZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesMasterZoneSlaveZoneOutput)
}

// ZonesMasterZoneSlaveZoneArrayInput is an input type that accepts ZonesMasterZoneSlaveZoneArray and ZonesMasterZoneSlaveZoneArrayOutput values.
// You can construct a concrete instance of `ZonesMasterZoneSlaveZoneArrayInput` via:
//
//	ZonesMasterZoneSlaveZoneArray{ ZonesMasterZoneSlaveZoneArgs{...} }
type ZonesMasterZoneSlaveZoneArrayInput interface {
	pulumi.Input

	ToZonesMasterZoneSlaveZoneArrayOutput() ZonesMasterZoneSlaveZoneArrayOutput
	ToZonesMasterZoneSlaveZoneArrayOutputWithContext(context.Context) ZonesMasterZoneSlaveZoneArrayOutput
}

type ZonesMasterZoneSlaveZoneArray []ZonesMasterZoneSlaveZoneInput

func (ZonesMasterZoneSlaveZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesMasterZoneSlaveZone)(nil)).Elem()
}

func (i ZonesMasterZoneSlaveZoneArray) ToZonesMasterZoneSlaveZoneArrayOutput() ZonesMasterZoneSlaveZoneArrayOutput {
	return i.ToZonesMasterZoneSlaveZoneArrayOutputWithContext(context.Background())
}

func (i ZonesMasterZoneSlaveZoneArray) ToZonesMasterZoneSlaveZoneArrayOutputWithContext(ctx context.Context) ZonesMasterZoneSlaveZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesMasterZoneSlaveZoneArrayOutput)
}

type ZonesMasterZoneSlaveZoneOutput struct{ *pulumi.OutputState }

func (ZonesMasterZoneSlaveZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesMasterZoneSlaveZone)(nil)).Elem()
}

func (o ZonesMasterZoneSlaveZoneOutput) ToZonesMasterZoneSlaveZoneOutput() ZonesMasterZoneSlaveZoneOutput {
	return o
}

func (o ZonesMasterZoneSlaveZoneOutput) ToZonesMasterZoneSlaveZoneOutputWithContext(ctx context.Context) ZonesMasterZoneSlaveZoneOutput {
	return o
}

// The master zone id.
func (o ZonesMasterZoneSlaveZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesMasterZoneSlaveZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

type ZonesMasterZoneSlaveZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesMasterZoneSlaveZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesMasterZoneSlaveZone)(nil)).Elem()
}

func (o ZonesMasterZoneSlaveZoneArrayOutput) ToZonesMasterZoneSlaveZoneArrayOutput() ZonesMasterZoneSlaveZoneArrayOutput {
	return o
}

func (o ZonesMasterZoneSlaveZoneArrayOutput) ToZonesMasterZoneSlaveZoneArrayOutputWithContext(ctx context.Context) ZonesMasterZoneSlaveZoneArrayOutput {
	return o
}

func (o ZonesMasterZoneSlaveZoneArrayOutput) Index(i pulumi.IntInput) ZonesMasterZoneSlaveZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesMasterZoneSlaveZone {
		return vs[0].([]ZonesMasterZoneSlaveZone)[vs[1].(int)]
	}).(ZonesMasterZoneSlaveZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclAclEntryInput)(nil)).Elem(), AclAclEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclAclEntryArrayInput)(nil)).Elem(), AclAclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclInput)(nil)).Elem(), AclsAclArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclsAclArrayInput)(nil)).Elem(), AclsAclArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTagInput)(nil)).Elem(), CertificateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificateTagArrayInput)(nil)).Elem(), CertificateTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesCertificateInput)(nil)).Elem(), CertificatesCertificateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesCertificateArrayInput)(nil)).Elem(), CertificatesCertificateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesCertificateTagInput)(nil)).Elem(), CertificatesCertificateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesCertificateTagArrayInput)(nil)).Elem(), CertificatesCertificateTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesTagInput)(nil)).Elem(), CertificatesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertificatesTagArrayInput)(nil)).Elem(), CertificatesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbEipBillingConfigInput)(nil)).Elem(), ClbEipBillingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbEipBillingConfigPtrInput)(nil)).Elem(), ClbEipBillingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbTagInput)(nil)).Elem(), ClbTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbTagArrayInput)(nil)).Elem(), ClbTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsClbInput)(nil)).Elem(), ClbsClbArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsClbArrayInput)(nil)).Elem(), ClbsClbArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsClbEipBillingConfigInput)(nil)).Elem(), ClbsClbEipBillingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsClbEipBillingConfigArrayInput)(nil)).Elem(), ClbsClbEipBillingConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsClbTagInput)(nil)).Elem(), ClbsClbTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsClbTagArrayInput)(nil)).Elem(), ClbsClbTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsTagInput)(nil)).Elem(), ClbsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClbsTagArrayInput)(nil)).Elem(), ClbsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerHealthCheckInput)(nil)).Elem(), ListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenerHealthCheckPtrInput)(nil)).Elem(), ListenerHealthCheckArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenersListenerInput)(nil)).Elem(), ListenersListenerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ListenersListenerArrayInput)(nil)).Elem(), ListenersListenerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleInput)(nil)).Elem(), RulesRuleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RulesRuleArrayInput)(nil)).Elem(), RulesRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupServersServerInput)(nil)).Elem(), ServerGroupServersServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupServersServerArrayInput)(nil)).Elem(), ServerGroupServersServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupsGroupInput)(nil)).Elem(), ServerGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServerGroupsGroupArrayInput)(nil)).Elem(), ServerGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesMasterZoneInput)(nil)).Elem(), ZonesMasterZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesMasterZoneArrayInput)(nil)).Elem(), ZonesMasterZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesMasterZoneSlaveZoneInput)(nil)).Elem(), ZonesMasterZoneSlaveZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesMasterZoneSlaveZoneArrayInput)(nil)).Elem(), ZonesMasterZoneSlaveZoneArray{})
	pulumi.RegisterOutputType(AclAclEntryOutput{})
	pulumi.RegisterOutputType(AclAclEntryArrayOutput{})
	pulumi.RegisterOutputType(AclsAclOutput{})
	pulumi.RegisterOutputType(AclsAclArrayOutput{})
	pulumi.RegisterOutputType(CertificateTagOutput{})
	pulumi.RegisterOutputType(CertificateTagArrayOutput{})
	pulumi.RegisterOutputType(CertificatesCertificateOutput{})
	pulumi.RegisterOutputType(CertificatesCertificateArrayOutput{})
	pulumi.RegisterOutputType(CertificatesCertificateTagOutput{})
	pulumi.RegisterOutputType(CertificatesCertificateTagArrayOutput{})
	pulumi.RegisterOutputType(CertificatesTagOutput{})
	pulumi.RegisterOutputType(CertificatesTagArrayOutput{})
	pulumi.RegisterOutputType(ClbEipBillingConfigOutput{})
	pulumi.RegisterOutputType(ClbEipBillingConfigPtrOutput{})
	pulumi.RegisterOutputType(ClbTagOutput{})
	pulumi.RegisterOutputType(ClbTagArrayOutput{})
	pulumi.RegisterOutputType(ClbsClbOutput{})
	pulumi.RegisterOutputType(ClbsClbArrayOutput{})
	pulumi.RegisterOutputType(ClbsClbEipBillingConfigOutput{})
	pulumi.RegisterOutputType(ClbsClbEipBillingConfigArrayOutput{})
	pulumi.RegisterOutputType(ClbsClbTagOutput{})
	pulumi.RegisterOutputType(ClbsClbTagArrayOutput{})
	pulumi.RegisterOutputType(ClbsTagOutput{})
	pulumi.RegisterOutputType(ClbsTagArrayOutput{})
	pulumi.RegisterOutputType(ListenerHealthCheckOutput{})
	pulumi.RegisterOutputType(ListenerHealthCheckPtrOutput{})
	pulumi.RegisterOutputType(ListenersListenerOutput{})
	pulumi.RegisterOutputType(ListenersListenerArrayOutput{})
	pulumi.RegisterOutputType(RulesRuleOutput{})
	pulumi.RegisterOutputType(RulesRuleArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupServersServerOutput{})
	pulumi.RegisterOutputType(ServerGroupServersServerArrayOutput{})
	pulumi.RegisterOutputType(ServerGroupsGroupOutput{})
	pulumi.RegisterOutputType(ServerGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(ZonesMasterZoneOutput{})
	pulumi.RegisterOutputType(ZonesMasterZoneArrayOutput{})
	pulumi.RegisterOutputType(ZonesMasterZoneSlaveZoneOutput{})
	pulumi.RegisterOutputType(ZonesMasterZoneSlaveZoneArrayOutput{})
}
