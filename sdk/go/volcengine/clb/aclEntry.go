// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage acl entry
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooAcl, err := clb.NewAcl(ctx, "fooAcl", &clb.AclArgs{
//				AclName:     pulumi.String("tf-test-3"),
//				Description: pulumi.String("tf-test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = clb.NewAclEntry(ctx, "fooAclEntry", &clb.AclEntryArgs{
//				AclId:       fooAcl.ID(),
//				Description: pulumi.String("tf acl entry desc demo"),
//				Entry:       pulumi.String("192.2.2.1/32"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// AclEntry can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:clb/aclEntry:AclEntry default ID is a string concatenated with colons(AclId:Entry)
//
// ```
type AclEntry struct {
	pulumi.CustomResourceState

	// The ID of Acl.
	AclId pulumi.StringOutput `pulumi:"aclId"`
	// The description of the AclEntry.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The content of the AclEntry.
	Entry pulumi.StringOutput `pulumi:"entry"`
}

// NewAclEntry registers a new resource with the given unique name, arguments, and options.
func NewAclEntry(ctx *pulumi.Context,
	name string, args *AclEntryArgs, opts ...pulumi.ResourceOption) (*AclEntry, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AclId == nil {
		return nil, errors.New("invalid value for required argument 'AclId'")
	}
	if args.Entry == nil {
		return nil, errors.New("invalid value for required argument 'Entry'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AclEntry
	err := ctx.RegisterResource("volcengine:clb/aclEntry:AclEntry", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAclEntry gets an existing AclEntry resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAclEntry(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AclEntryState, opts ...pulumi.ResourceOption) (*AclEntry, error) {
	var resource AclEntry
	err := ctx.ReadResource("volcengine:clb/aclEntry:AclEntry", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AclEntry resources.
type aclEntryState struct {
	// The ID of Acl.
	AclId *string `pulumi:"aclId"`
	// The description of the AclEntry.
	Description *string `pulumi:"description"`
	// The content of the AclEntry.
	Entry *string `pulumi:"entry"`
}

type AclEntryState struct {
	// The ID of Acl.
	AclId pulumi.StringPtrInput
	// The description of the AclEntry.
	Description pulumi.StringPtrInput
	// The content of the AclEntry.
	Entry pulumi.StringPtrInput
}

func (AclEntryState) ElementType() reflect.Type {
	return reflect.TypeOf((*aclEntryState)(nil)).Elem()
}

type aclEntryArgs struct {
	// The ID of Acl.
	AclId string `pulumi:"aclId"`
	// The description of the AclEntry.
	Description *string `pulumi:"description"`
	// The content of the AclEntry.
	Entry string `pulumi:"entry"`
}

// The set of arguments for constructing a AclEntry resource.
type AclEntryArgs struct {
	// The ID of Acl.
	AclId pulumi.StringInput
	// The description of the AclEntry.
	Description pulumi.StringPtrInput
	// The content of the AclEntry.
	Entry pulumi.StringInput
}

func (AclEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aclEntryArgs)(nil)).Elem()
}

type AclEntryInput interface {
	pulumi.Input

	ToAclEntryOutput() AclEntryOutput
	ToAclEntryOutputWithContext(ctx context.Context) AclEntryOutput
}

func (*AclEntry) ElementType() reflect.Type {
	return reflect.TypeOf((**AclEntry)(nil)).Elem()
}

func (i *AclEntry) ToAclEntryOutput() AclEntryOutput {
	return i.ToAclEntryOutputWithContext(context.Background())
}

func (i *AclEntry) ToAclEntryOutputWithContext(ctx context.Context) AclEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclEntryOutput)
}

// AclEntryArrayInput is an input type that accepts AclEntryArray and AclEntryArrayOutput values.
// You can construct a concrete instance of `AclEntryArrayInput` via:
//
//	AclEntryArray{ AclEntryArgs{...} }
type AclEntryArrayInput interface {
	pulumi.Input

	ToAclEntryArrayOutput() AclEntryArrayOutput
	ToAclEntryArrayOutputWithContext(context.Context) AclEntryArrayOutput
}

type AclEntryArray []AclEntryInput

func (AclEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclEntry)(nil)).Elem()
}

func (i AclEntryArray) ToAclEntryArrayOutput() AclEntryArrayOutput {
	return i.ToAclEntryArrayOutputWithContext(context.Background())
}

func (i AclEntryArray) ToAclEntryArrayOutputWithContext(ctx context.Context) AclEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclEntryArrayOutput)
}

// AclEntryMapInput is an input type that accepts AclEntryMap and AclEntryMapOutput values.
// You can construct a concrete instance of `AclEntryMapInput` via:
//
//	AclEntryMap{ "key": AclEntryArgs{...} }
type AclEntryMapInput interface {
	pulumi.Input

	ToAclEntryMapOutput() AclEntryMapOutput
	ToAclEntryMapOutputWithContext(context.Context) AclEntryMapOutput
}

type AclEntryMap map[string]AclEntryInput

func (AclEntryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclEntry)(nil)).Elem()
}

func (i AclEntryMap) ToAclEntryMapOutput() AclEntryMapOutput {
	return i.ToAclEntryMapOutputWithContext(context.Background())
}

func (i AclEntryMap) ToAclEntryMapOutputWithContext(ctx context.Context) AclEntryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AclEntryMapOutput)
}

type AclEntryOutput struct{ *pulumi.OutputState }

func (AclEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AclEntry)(nil)).Elem()
}

func (o AclEntryOutput) ToAclEntryOutput() AclEntryOutput {
	return o
}

func (o AclEntryOutput) ToAclEntryOutputWithContext(ctx context.Context) AclEntryOutput {
	return o
}

// The ID of Acl.
func (o AclEntryOutput) AclId() pulumi.StringOutput {
	return o.ApplyT(func(v *AclEntry) pulumi.StringOutput { return v.AclId }).(pulumi.StringOutput)
}

// The description of the AclEntry.
func (o AclEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AclEntry) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The content of the AclEntry.
func (o AclEntryOutput) Entry() pulumi.StringOutput {
	return o.ApplyT(func(v *AclEntry) pulumi.StringOutput { return v.Entry }).(pulumi.StringOutput)
}

type AclEntryArrayOutput struct{ *pulumi.OutputState }

func (AclEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AclEntry)(nil)).Elem()
}

func (o AclEntryArrayOutput) ToAclEntryArrayOutput() AclEntryArrayOutput {
	return o
}

func (o AclEntryArrayOutput) ToAclEntryArrayOutputWithContext(ctx context.Context) AclEntryArrayOutput {
	return o
}

func (o AclEntryArrayOutput) Index(i pulumi.IntInput) AclEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AclEntry {
		return vs[0].([]*AclEntry)[vs[1].(int)]
	}).(AclEntryOutput)
}

type AclEntryMapOutput struct{ *pulumi.OutputState }

func (AclEntryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AclEntry)(nil)).Elem()
}

func (o AclEntryMapOutput) ToAclEntryMapOutput() AclEntryMapOutput {
	return o
}

func (o AclEntryMapOutput) ToAclEntryMapOutputWithContext(ctx context.Context) AclEntryMapOutput {
	return o
}

func (o AclEntryMapOutput) MapIndex(k pulumi.StringInput) AclEntryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AclEntry {
		return vs[0].(map[string]*AclEntry)[vs[1].(string)]
	}).(AclEntryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AclEntryInput)(nil)).Elem(), &AclEntry{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclEntryArrayInput)(nil)).Elem(), AclEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AclEntryMapInput)(nil)).Elem(), AclEntryMap{})
	pulumi.RegisterOutputType(AclEntryOutput{})
	pulumi.RegisterOutputType(AclEntryArrayOutput{})
	pulumi.RegisterOutputType(AclEntryMapOutput{})
}
