// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of server group servers
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     *pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooClb, err := clb.NewClb(ctx, "fooClb", &clb.ClbArgs{
//				Type:             pulumi.String("public"),
//				SubnetId:         fooSubnet.ID(),
//				LoadBalancerSpec: pulumi.String("small_1"),
//				Description:      pulumi.String("acc0Demo"),
//				LoadBalancerName: pulumi.String("acc-test-create"),
//				EipBillingConfig: &clb.ClbEipBillingConfigArgs{
//					Isp:            pulumi.String("BGP"),
//					EipBillingType: pulumi.String("PostPaidByBandwidth"),
//					Bandwidth:      pulumi.Int(1),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooServerGroup, err := clb.NewServerGroup(ctx, "fooServerGroup", &clb.ServerGroupArgs{
//				LoadBalancerId:  fooClb.ID(),
//				ServerGroupName: pulumi.String("acc-test-create"),
//				Description:     pulumi.String("hello demo11"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSecurityGroup, err := vpc.NewSecurityGroup(ctx, "fooSecurityGroup", &vpc.SecurityGroupArgs{
//				VpcId:             fooVpc.ID(),
//				SecurityGroupName: pulumi.String("acc-test-security-group"),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := ecs.NewInstance(ctx, "fooInstance", &ecs.InstanceArgs{
//				ImageId:            pulumi.String("image-ycjwwciuzy5pkh54xx8f"),
//				InstanceType:       pulumi.String("ecs.c3i.large"),
//				InstanceName:       pulumi.String("acc-test-ecs-name"),
//				Password:           pulumi.String("93f0cb0614Aab12"),
//				InstanceChargeType: pulumi.String("PostPaid"),
//				SystemVolumeType:   pulumi.String("ESSD_PL0"),
//				SystemVolumeSize:   pulumi.Int(40),
//				SubnetId:           fooSubnet.ID(),
//				SecurityGroupIds: pulumi.StringArray{
//					fooSecurityGroup.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooServerGroupServer, err := clb.NewServerGroupServer(ctx, "fooServerGroupServer", &clb.ServerGroupServerArgs{
//				ServerGroupId: fooServerGroup.ID(),
//				InstanceId:    fooInstance.ID(),
//				Type:          pulumi.String("ecs"),
//				Weight:        pulumi.Int(100),
//				Port:          pulumi.Int(80),
//				Description:   pulumi.String("This is a acc test server"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = clb.ServerGroupServersOutput(ctx, clb.ServerGroupServersOutputArgs{
//				Ids: pulumi.StringArray{
//					pulumi.All(fooServerGroupServer.ID().ApplyT(func(id string) (pulumi.StringArray, error) {
//						return pulumi.StringArray("TODO: call split"), nil
//					}).(pulumi.StringArrayOutput), len(fooServerGroupServer.ID().ApplyT(func(id string) (pulumi.StringArray, error) {
//						return pulumi.StringArray("TODO: call split"), nil
//					}).(pulumi.StringArrayOutput))).ApplyT(func(_args []interface{}) (string, error) {
//						split := _args[0].([]string)
//						length := _args[1].(int)
//						return "TODO: element", nil
//					}).(pulumi.StringOutput),
//				},
//				ServerGroupId: fooServerGroup.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func ServerGroupServers(ctx *pulumi.Context, args *ServerGroupServersArgs, opts ...pulumi.InvokeOption) (*ServerGroupServersResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv ServerGroupServersResult
	err := ctx.Invoke("volcengine:clb/serverGroupServers:ServerGroupServers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ServerGroupServers.
type ServerGroupServersArgs struct {
	// The list of ServerGroupServer IDs.
	Ids []string `pulumi:"ids"`
	// A Name Regex of ServerGroupServer.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The ID of the ServerGroup.
	ServerGroupId string `pulumi:"serverGroupId"`
}

// A collection of values returned by ServerGroupServers.
type ServerGroupServersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id            string   `pulumi:"id"`
	Ids           []string `pulumi:"ids"`
	NameRegex     *string  `pulumi:"nameRegex"`
	OutputFile    *string  `pulumi:"outputFile"`
	ServerGroupId string   `pulumi:"serverGroupId"`
	// The server list of ServerGroup.
	Servers []ServerGroupServersServer `pulumi:"servers"`
	// The total count of ServerGroupServer query.
	TotalCount int `pulumi:"totalCount"`
}

func ServerGroupServersOutput(ctx *pulumi.Context, args ServerGroupServersOutputArgs, opts ...pulumi.InvokeOption) ServerGroupServersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ServerGroupServersResult, error) {
			args := v.(ServerGroupServersArgs)
			r, err := ServerGroupServers(ctx, &args, opts...)
			var s ServerGroupServersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ServerGroupServersResultOutput)
}

// A collection of arguments for invoking ServerGroupServers.
type ServerGroupServersOutputArgs struct {
	// The list of ServerGroupServer IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of ServerGroupServer.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The ID of the ServerGroup.
	ServerGroupId pulumi.StringInput `pulumi:"serverGroupId"`
}

func (ServerGroupServersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServersArgs)(nil)).Elem()
}

// A collection of values returned by ServerGroupServers.
type ServerGroupServersResultOutput struct{ *pulumi.OutputState }

func (ServerGroupServersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServerGroupServersResult)(nil)).Elem()
}

func (o ServerGroupServersResultOutput) ToServerGroupServersResultOutput() ServerGroupServersResultOutput {
	return o
}

func (o ServerGroupServersResultOutput) ToServerGroupServersResultOutputWithContext(ctx context.Context) ServerGroupServersResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o ServerGroupServersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ServerGroupServersResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ServerGroupServersResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o ServerGroupServersResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServersResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ServerGroupServersResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ServerGroupServersResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o ServerGroupServersResultOutput) ServerGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v ServerGroupServersResult) string { return v.ServerGroupId }).(pulumi.StringOutput)
}

// The server list of ServerGroup.
func (o ServerGroupServersResultOutput) Servers() ServerGroupServersServerArrayOutput {
	return o.ApplyT(func(v ServerGroupServersResult) []ServerGroupServersServer { return v.Servers }).(ServerGroupServersServerArrayOutput)
}

// The total count of ServerGroupServer query.
func (o ServerGroupServersResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ServerGroupServersResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ServerGroupServersResultOutput{})
}
