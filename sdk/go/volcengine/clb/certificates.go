// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of certificates
// ## Example Usage
//
// ```go
// package main
//
// import (
// "fmt"
//
// "github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// "github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb"
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// var fooCertificate []*clb.Certificate
//
//	for index := 0; index < 3; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := clb.NewCertificate(ctx, fmt.Sprintf("fooCertificate-%v", key0), &clb.CertificateArgs{
// CertificateName: pulumi.String(fmt.Sprintf("acc-test-certificate-%v", val0)),
// Description: pulumi.String("acc-test-demo"),
// PublicKey: pulumi.String(`-----BEGIN CERTIFICATE-----
// MIICWDCCAcGgAwIBAgIJAP7vOtjPtQIjMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
// BAYTAkNOMRMwEQYDVQQIDApjbi1iZWlqaW5nMSEwHwYDVQQKDBhJbnRlcm5ldCBX
// aWRnaXRzIFB0eSBMdGQwHhcNMjAxMDIwMDYxOTUxWhcNMjAxMTE5MDYxOTUxWjBF
// MQswCQYDVQQGEwJDTjETMBEGA1UECAwKY24tYmVpamluZzEhMB8GA1UECgwYSW50
// ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB
// gQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9BVuFIBoU8nrP
// Y9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2CNIzxr9DjCzN5
// tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQABo1AwTjAdBgNV
// HQ4EFgQUYDwuuqC2a2UPrfm1v31vE7+GRM4wHwYDVR0jBBgwFoAUYDwuuqC2a2UP
// rfm1v31vE7+GRM4wDAYDVR0TBAUwAwEB/zANBgkqhkiG9w0BAQsFAAOBgQAovSB0
// 5JRKrg7lYR/KlTuKHmozfyL9UER0/dpTSoqsCyt8yc1BbtAKUJWh09BujBE1H22f
// lKvCAjhPmnNdfd/l9GrmAWNDWEDPLdUTkGSkKAScMpdS+mLmOBuYWgdnOtq3eQGf
// t07tlBL+dtzrrohHpfLeuNyYb40g8VQdp3RRRQ==
// -----END CERTIFICATE-----`),
// PrivateKey: pulumi.String(`-----BEGIN RSA PRIVATE KEY-----
// MIICXAIBAAKBgQDEdoyaJ0kdtjtbLRx5X9qwI7FblhJPRcScvhQSE8P5y/b/T8J9
// BVuFIBoU8nrPY9ABz4JFklZ6SznxLbFBqtXoJTmzV6ixyjjH+AGEw6hCiA8Pqy2C
// NIzxr9DjCzN5tWruiHqO60O3Bve6cHipH0VyLAhrB85mflvOZSH4xGsJkwIDAQAB
// AoGARe2oaCo5lTDK+c4Zx3392hoqQ94r0DmWHPBvNmwAooYd+YxLPrLMe5sMjY4t
// dmohnLNevCK1Uzw5eIX6BNSo5CORBcIDRmiAgwiYiS3WOv2+qi9g5uIdMiDr+EED
// K8wZJjB5E2WyfxL507vtW4T5L36yfr8SkmqH3GvzpI2jCqECQQDsy0AmBzyfK0tG
// Nw1+iF9SReJWgb1f5iHvz+6Dt5ueVQngrl/5++Gp5bNoaQMkLEDsy0iHIj9j43ji
// 0DON05uDAkEA1GXgGn8MXXKyuzYuoyYXCBH7aF579d7KEGET/jjnXx9DHcfRJZBY
// B9ghMnnonSOGboF04Zsdd3xwYF/3OHYssQJAekd/SeQEzyE5TvoQ8t2Tc9X4yrlW
// xNX/gmp6/fPr3biGUEtb7qi+4NBodCt+XsingmB7hKUP3RJTk7T2WnAC5wJAMqHi
// jY5x3SkFkHl3Hq9q2CKpQxUbCd7FXqg1wum/xj5GmqfSpNjHE3+jUkwbdrJMTrWP
// rmRy3tQMWf0mixAo0QJBAN4IcZChanq8cZyNqqoNbxGm4hkxUmE0W4hxHmLC2CYZ
// V4JpNm8dpi4CiMWLasF6TYlVMgX+aPxYRUWc/qqf1/Q=
// -----END RSA PRIVATE KEY-----`),
// ProjectName: pulumi.String("default"),
// Tags: clb.CertificateTagArray{
// &clb.CertificateTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooCertificate = append(fooCertificate, __res)
// }
// _ = clb.CertificatesOutput(ctx, clb.CertificatesOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:clb-certificates:Certificates.pp:16,9-29),
// }, nil);
// return nil
// })
// }
// ```
func Certificates(ctx *pulumi.Context, args *CertificatesArgs, opts ...pulumi.InvokeOption) (*CertificatesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv CertificatesResult
	err := ctx.Invoke("volcengine:clb/certificates:Certificates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Certificates.
type CertificatesArgs struct {
	// The name of the Certificate.
	CertificateName *string `pulumi:"certificateName"`
	// The list of Certificate IDs.
	Ids []string `pulumi:"ids"`
	// The Name Regex of Certificate.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The ProjectName of Certificate.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []CertificatesTag `pulumi:"tags"`
}

// A collection of values returned by Certificates.
type CertificatesResult struct {
	// The name of the Certificate.
	CertificateName *string `pulumi:"certificateName"`
	// The collection of Certificate query.
	Certificates []CertificatesCertificate `pulumi:"certificates"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// The ProjectName of the Certificate.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []CertificatesTag `pulumi:"tags"`
	// The total count of Certificate query.
	TotalCount int `pulumi:"totalCount"`
}

func CertificatesOutput(ctx *pulumi.Context, args CertificatesOutputArgs, opts ...pulumi.InvokeOption) CertificatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (CertificatesResult, error) {
			args := v.(CertificatesArgs)
			r, err := Certificates(ctx, &args, opts...)
			var s CertificatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(CertificatesResultOutput)
}

// A collection of arguments for invoking Certificates.
type CertificatesOutputArgs struct {
	// The name of the Certificate.
	CertificateName pulumi.StringPtrInput `pulumi:"certificateName"`
	// The list of Certificate IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The Name Regex of Certificate.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The ProjectName of Certificate.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// Tags.
	Tags CertificatesTagArrayInput `pulumi:"tags"`
}

func (CertificatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesArgs)(nil)).Elem()
}

// A collection of values returned by Certificates.
type CertificatesResultOutput struct{ *pulumi.OutputState }

func (CertificatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CertificatesResult)(nil)).Elem()
}

func (o CertificatesResultOutput) ToCertificatesResultOutput() CertificatesResultOutput {
	return o
}

func (o CertificatesResultOutput) ToCertificatesResultOutputWithContext(ctx context.Context) CertificatesResultOutput {
	return o
}

// The name of the Certificate.
func (o CertificatesResultOutput) CertificateName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificatesResult) *string { return v.CertificateName }).(pulumi.StringPtrOutput)
}

// The collection of Certificate query.
func (o CertificatesResultOutput) Certificates() CertificatesCertificateArrayOutput {
	return o.ApplyT(func(v CertificatesResult) []CertificatesCertificate { return v.Certificates }).(CertificatesCertificateArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o CertificatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CertificatesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o CertificatesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v CertificatesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o CertificatesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificatesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o CertificatesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificatesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The ProjectName of the Certificate.
func (o CertificatesResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CertificatesResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// Tags.
func (o CertificatesResultOutput) Tags() CertificatesTagArrayOutput {
	return o.ApplyT(func(v CertificatesResult) []CertificatesTag { return v.Tags }).(CertificatesTagArrayOutput)
}

// The total count of Certificate query.
func (o CertificatesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v CertificatesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(CertificatesResultOutput{})
}
