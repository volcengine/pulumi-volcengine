// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package clb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of clbs
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/clb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := ecs.GetZones(ctx, nil, nil);
// if err != nil {
// return err
// }
// fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
// VpcName: pulumi.String("acc-test-vpc"),
// CidrBlock: pulumi.String("172.16.0.0/16"),
// })
// if err != nil {
// return err
// }
// fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
// SubnetName: pulumi.String("acc-test-subnet"),
// CidrBlock: pulumi.String("172.16.0.0/24"),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// VpcId: fooVpc.ID(),
// })
// if err != nil {
// return err
// }
// var fooClb []*clb.Clb
//
//	for index := 0; index < 3; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := clb.NewClb(ctx, fmt.Sprintf("fooClb-%v", key0), &clb.ClbArgs{
// Type: pulumi.String("public"),
// SubnetId: fooSubnet.ID(),
// LoadBalancerSpec: pulumi.String("small_1"),
// Description: pulumi.String("acc-test-demo"),
// LoadBalancerName: pulumi.String(fmt.Sprintf("acc-test-clb-%v", val0)),
// LoadBalancerBillingType: pulumi.String("PostPaid"),
// EipBillingConfig: &clb.ClbEipBillingConfigArgs{
// Isp: pulumi.String("BGP"),
// EipBillingType: pulumi.String("PostPaidByBandwidth"),
// Bandwidth: pulumi.Int(1),
// },
// Tags: clb.ClbTagArray{
// &clb.ClbTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooClb = append(fooClb, __res)
// }
// _ = clb.GetClbsOutput(ctx, clb.GetClbsOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:clb-getClbs:getClbs.pp:34,9-21),
// }, nil);
// return nil
// })
// }
// ```
func GetClbs(ctx *pulumi.Context, args *GetClbsArgs, opts ...pulumi.InvokeOption) (*GetClbsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetClbsResult
	err := ctx.Invoke("volcengine:clb/getClbs:getClbs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClbs.
type GetClbsArgs struct {
	// The private ip address of the Clb.
	EniAddress *string `pulumi:"eniAddress"`
	// A list of Clb IDs.
	Ids []string `pulumi:"ids"`
	// The name of the Clb.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	// A Name Regex of Clb.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The ProjectName of Clb.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []GetClbsTag `pulumi:"tags"`
	// The id of the VPC.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getClbs.
type GetClbsResult struct {
	// The collection of Clb query.
	Clbs []GetClbsClb `pulumi:"clbs"`
	// The Eni address of the Clb.
	EniAddress *string `pulumi:"eniAddress"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of the Clb.
	LoadBalancerName *string `pulumi:"loadBalancerName"`
	NameRegex        *string `pulumi:"nameRegex"`
	OutputFile       *string `pulumi:"outputFile"`
	// The ProjectName of the Clb.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []GetClbsTag `pulumi:"tags"`
	// The total count of Clb query.
	TotalCount int `pulumi:"totalCount"`
	// The vpc ID of the Clb.
	VpcId *string `pulumi:"vpcId"`
}

func GetClbsOutput(ctx *pulumi.Context, args GetClbsOutputArgs, opts ...pulumi.InvokeOption) GetClbsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetClbsResult, error) {
			args := v.(GetClbsArgs)
			r, err := GetClbs(ctx, &args, opts...)
			var s GetClbsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetClbsResultOutput)
}

// A collection of arguments for invoking getClbs.
type GetClbsOutputArgs struct {
	// The private ip address of the Clb.
	EniAddress pulumi.StringPtrInput `pulumi:"eniAddress"`
	// A list of Clb IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of the Clb.
	LoadBalancerName pulumi.StringPtrInput `pulumi:"loadBalancerName"`
	// A Name Regex of Clb.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The ProjectName of Clb.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// Tags.
	Tags GetClbsTagArrayInput `pulumi:"tags"`
	// The id of the VPC.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetClbsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbsArgs)(nil)).Elem()
}

// A collection of values returned by getClbs.
type GetClbsResultOutput struct{ *pulumi.OutputState }

func (GetClbsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClbsResult)(nil)).Elem()
}

func (o GetClbsResultOutput) ToGetClbsResultOutput() GetClbsResultOutput {
	return o
}

func (o GetClbsResultOutput) ToGetClbsResultOutputWithContext(ctx context.Context) GetClbsResultOutput {
	return o
}

// The collection of Clb query.
func (o GetClbsResultOutput) Clbs() GetClbsClbArrayOutput {
	return o.ApplyT(func(v GetClbsResult) []GetClbsClb { return v.Clbs }).(GetClbsClbArrayOutput)
}

// The Eni address of the Clb.
func (o GetClbsResultOutput) EniAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClbsResult) *string { return v.EniAddress }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetClbsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetClbsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetClbsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetClbsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of the Clb.
func (o GetClbsResultOutput) LoadBalancerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClbsResult) *string { return v.LoadBalancerName }).(pulumi.StringPtrOutput)
}

func (o GetClbsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClbsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetClbsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClbsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The ProjectName of the Clb.
func (o GetClbsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClbsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// Tags.
func (o GetClbsResultOutput) Tags() GetClbsTagArrayOutput {
	return o.ApplyT(func(v GetClbsResult) []GetClbsTag { return v.Tags }).(GetClbsTagArrayOutput)
}

// The total count of Clb query.
func (o GetClbsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetClbsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The vpc ID of the Clb.
func (o GetClbsResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetClbsResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetClbsResultOutput{})
}
