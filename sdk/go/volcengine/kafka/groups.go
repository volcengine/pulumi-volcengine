// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of kafka groups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kafka"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := kafka.NewInstance(ctx, "fooInstance", &kafka.InstanceArgs{
//				InstanceName:        pulumi.String("acc-test-kafka"),
//				InstanceDescription: pulumi.String("tf-test"),
//				Version:             pulumi.String("2.2.2"),
//				ComputeSpec:         pulumi.String("kafka.20xrate.hw"),
//				SubnetId:            fooSubnet.ID(),
//				UserName:            pulumi.String("tf-user"),
//				UserPassword:        pulumi.String("tf-pass!@q1"),
//				ChargeType:          pulumi.String("PostPaid"),
//				StorageSpace:        pulumi.Int(300),
//				PartitionNumber:     pulumi.Int(350),
//				ProjectName:         pulumi.String("default"),
//				Tags: kafka.InstanceTagArray{
//					&kafka.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//				Parameters: kafka.InstanceParameterArray{
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("MessageMaxByte"),
//						ParameterValue: pulumi.String("12"),
//					},
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("LogRetentionHours"),
//						ParameterValue: pulumi.String("70"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooGroup, err := kafka.NewGroup(ctx, "fooGroup", &kafka.GroupArgs{
//				InstanceId:  fooInstance.ID(),
//				GroupId:     pulumi.String("acc-test-group"),
//				Description: pulumi.String("tf-test"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = kafka.GetGroupsOutput(ctx, kafka.GetGroupsOutputArgs{
//				InstanceId: fooGroup.InstanceId,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.kafka.Groups has been deprecated in favor of volcengine.kafka.getGroups
func Groups(ctx *pulumi.Context, args *GroupsArgs, opts ...pulumi.InvokeOption) (*GroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GroupsResult
	err := ctx.Invoke("volcengine:kafka/groups:Groups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Groups.
type GroupsArgs struct {
	// The id of kafka group, support fuzzy matching.
	GroupId *string `pulumi:"groupId"`
	// The instance id of kafka group.
	InstanceId string `pulumi:"instanceId"`
	// A Name Regex of kafka group.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Groups.
type GroupsResult struct {
	// The id of kafka group.
	GroupId *string `pulumi:"groupId"`
	// The collection of query.
	Groups []GroupsGroup `pulumi:"groups"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId string  `pulumi:"instanceId"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GroupsOutput(ctx *pulumi.Context, args GroupsOutputArgs, opts ...pulumi.InvokeOption) GroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GroupsResult, error) {
			args := v.(GroupsArgs)
			r, err := Groups(ctx, &args, opts...)
			var s GroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GroupsResultOutput)
}

// A collection of arguments for invoking Groups.
type GroupsOutputArgs struct {
	// The id of kafka group, support fuzzy matching.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The instance id of kafka group.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// A Name Regex of kafka group.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsArgs)(nil)).Elem()
}

// A collection of values returned by Groups.
type GroupsResultOutput struct{ *pulumi.OutputState }

func (GroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsResult)(nil)).Elem()
}

func (o GroupsResultOutput) ToGroupsResultOutput() GroupsResultOutput {
	return o
}

func (o GroupsResultOutput) ToGroupsResultOutputWithContext(ctx context.Context) GroupsResultOutput {
	return o
}

// The id of kafka group.
func (o GroupsResultOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupsResult) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GroupsResultOutput) Groups() GroupsGroupArrayOutput {
	return o.ApplyT(func(v GroupsResult) []GroupsGroup { return v.Groups }).(GroupsGroupArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GroupsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GroupsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GroupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GroupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GroupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GroupsResultOutput{})
}
