// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage kafka sasl user
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kafka"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := kafka.NewInstance(ctx, "fooInstance", &kafka.InstanceArgs{
//				InstanceName:        pulumi.String("acc-test-kafka"),
//				InstanceDescription: pulumi.String("tf-test"),
//				Version:             pulumi.String("2.2.2"),
//				ComputeSpec:         pulumi.String("kafka.20xrate.hw"),
//				SubnetId:            fooSubnet.ID(),
//				UserName:            pulumi.String("tf-user"),
//				UserPassword:        pulumi.String("tf-pass!@q1"),
//				ChargeType:          pulumi.String("PostPaid"),
//				StorageSpace:        pulumi.Int(300),
//				PartitionNumber:     pulumi.Int(350),
//				ProjectName:         pulumi.String("default"),
//				Tags: kafka.InstanceTagArray{
//					&kafka.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//				Parameters: kafka.InstanceParameterArray{
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("MessageMaxByte"),
//						ParameterValue: pulumi.String("12"),
//					},
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("LogRetentionHours"),
//						ParameterValue: pulumi.String("70"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kafka.NewSaslUser(ctx, "fooSaslUser", &kafka.SaslUserArgs{
//				UserName:     pulumi.String("acc-test-user"),
//				InstanceId:   fooInstance.ID(),
//				UserPassword: pulumi.String("suqsnis123!"),
//				Description:  pulumi.String("tf-test"),
//				AllAuthority: pulumi.Bool(true),
//				PasswordType: pulumi.String("Scram"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// KafkaSaslUser can be imported using the kafka_id:username, e.g.
//
// ```sh
// $ pulumi import volcengine:kafka/saslUser:SaslUser default kafka-cnngbnntswg1****:tfuser
// ```
type SaslUser struct {
	pulumi.CustomResourceState

	// Whether this user has read and write permissions for all topics. Default is true.
	AllAuthority pulumi.BoolPtrOutput `pulumi:"allAuthority"`
	// The description of user.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The id of instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
	PasswordType pulumi.StringPtrOutput `pulumi:"passwordType"`
	// The name of user.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// The password of user.
	UserPassword pulumi.StringOutput `pulumi:"userPassword"`
}

// NewSaslUser registers a new resource with the given unique name, arguments, and options.
func NewSaslUser(ctx *pulumi.Context,
	name string, args *SaslUserArgs, opts ...pulumi.ResourceOption) (*SaslUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.UserPassword == nil {
		return nil, errors.New("invalid value for required argument 'UserPassword'")
	}
	if args.UserPassword != nil {
		args.UserPassword = pulumi.ToSecret(args.UserPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"userPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SaslUser
	err := ctx.RegisterResource("volcengine:kafka/saslUser:SaslUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSaslUser gets an existing SaslUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSaslUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SaslUserState, opts ...pulumi.ResourceOption) (*SaslUser, error) {
	var resource SaslUser
	err := ctx.ReadResource("volcengine:kafka/saslUser:SaslUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SaslUser resources.
type saslUserState struct {
	// Whether this user has read and write permissions for all topics. Default is true.
	AllAuthority *bool `pulumi:"allAuthority"`
	// The description of user.
	Description *string `pulumi:"description"`
	// The id of instance.
	InstanceId *string `pulumi:"instanceId"`
	// The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
	PasswordType *string `pulumi:"passwordType"`
	// The name of user.
	UserName *string `pulumi:"userName"`
	// The password of user.
	UserPassword *string `pulumi:"userPassword"`
}

type SaslUserState struct {
	// Whether this user has read and write permissions for all topics. Default is true.
	AllAuthority pulumi.BoolPtrInput
	// The description of user.
	Description pulumi.StringPtrInput
	// The id of instance.
	InstanceId pulumi.StringPtrInput
	// The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
	PasswordType pulumi.StringPtrInput
	// The name of user.
	UserName pulumi.StringPtrInput
	// The password of user.
	UserPassword pulumi.StringPtrInput
}

func (SaslUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*saslUserState)(nil)).Elem()
}

type saslUserArgs struct {
	// Whether this user has read and write permissions for all topics. Default is true.
	AllAuthority *bool `pulumi:"allAuthority"`
	// The description of user.
	Description *string `pulumi:"description"`
	// The id of instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
	PasswordType *string `pulumi:"passwordType"`
	// The name of user.
	UserName string `pulumi:"userName"`
	// The password of user.
	UserPassword string `pulumi:"userPassword"`
}

// The set of arguments for constructing a SaslUser resource.
type SaslUserArgs struct {
	// Whether this user has read and write permissions for all topics. Default is true.
	AllAuthority pulumi.BoolPtrInput
	// The description of user.
	Description pulumi.StringPtrInput
	// The id of instance.
	InstanceId pulumi.StringInput
	// The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
	PasswordType pulumi.StringPtrInput
	// The name of user.
	UserName pulumi.StringInput
	// The password of user.
	UserPassword pulumi.StringInput
}

func (SaslUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*saslUserArgs)(nil)).Elem()
}

type SaslUserInput interface {
	pulumi.Input

	ToSaslUserOutput() SaslUserOutput
	ToSaslUserOutputWithContext(ctx context.Context) SaslUserOutput
}

func (*SaslUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SaslUser)(nil)).Elem()
}

func (i *SaslUser) ToSaslUserOutput() SaslUserOutput {
	return i.ToSaslUserOutputWithContext(context.Background())
}

func (i *SaslUser) ToSaslUserOutputWithContext(ctx context.Context) SaslUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslUserOutput)
}

// SaslUserArrayInput is an input type that accepts SaslUserArray and SaslUserArrayOutput values.
// You can construct a concrete instance of `SaslUserArrayInput` via:
//
//	SaslUserArray{ SaslUserArgs{...} }
type SaslUserArrayInput interface {
	pulumi.Input

	ToSaslUserArrayOutput() SaslUserArrayOutput
	ToSaslUserArrayOutputWithContext(context.Context) SaslUserArrayOutput
}

type SaslUserArray []SaslUserInput

func (SaslUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SaslUser)(nil)).Elem()
}

func (i SaslUserArray) ToSaslUserArrayOutput() SaslUserArrayOutput {
	return i.ToSaslUserArrayOutputWithContext(context.Background())
}

func (i SaslUserArray) ToSaslUserArrayOutputWithContext(ctx context.Context) SaslUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslUserArrayOutput)
}

// SaslUserMapInput is an input type that accepts SaslUserMap and SaslUserMapOutput values.
// You can construct a concrete instance of `SaslUserMapInput` via:
//
//	SaslUserMap{ "key": SaslUserArgs{...} }
type SaslUserMapInput interface {
	pulumi.Input

	ToSaslUserMapOutput() SaslUserMapOutput
	ToSaslUserMapOutputWithContext(context.Context) SaslUserMapOutput
}

type SaslUserMap map[string]SaslUserInput

func (SaslUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SaslUser)(nil)).Elem()
}

func (i SaslUserMap) ToSaslUserMapOutput() SaslUserMapOutput {
	return i.ToSaslUserMapOutputWithContext(context.Background())
}

func (i SaslUserMap) ToSaslUserMapOutputWithContext(ctx context.Context) SaslUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslUserMapOutput)
}

type SaslUserOutput struct{ *pulumi.OutputState }

func (SaslUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SaslUser)(nil)).Elem()
}

func (o SaslUserOutput) ToSaslUserOutput() SaslUserOutput {
	return o
}

func (o SaslUserOutput) ToSaslUserOutputWithContext(ctx context.Context) SaslUserOutput {
	return o
}

// Whether this user has read and write permissions for all topics. Default is true.
func (o SaslUserOutput) AllAuthority() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SaslUser) pulumi.BoolPtrOutput { return v.AllAuthority }).(pulumi.BoolPtrOutput)
}

// The description of user.
func (o SaslUserOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaslUser) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The id of instance.
func (o SaslUserOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *SaslUser) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
func (o SaslUserOutput) PasswordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SaslUser) pulumi.StringPtrOutput { return v.PasswordType }).(pulumi.StringPtrOutput)
}

// The name of user.
func (o SaslUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *SaslUser) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// The password of user.
func (o SaslUserOutput) UserPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *SaslUser) pulumi.StringOutput { return v.UserPassword }).(pulumi.StringOutput)
}

type SaslUserArrayOutput struct{ *pulumi.OutputState }

func (SaslUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SaslUser)(nil)).Elem()
}

func (o SaslUserArrayOutput) ToSaslUserArrayOutput() SaslUserArrayOutput {
	return o
}

func (o SaslUserArrayOutput) ToSaslUserArrayOutputWithContext(ctx context.Context) SaslUserArrayOutput {
	return o
}

func (o SaslUserArrayOutput) Index(i pulumi.IntInput) SaslUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SaslUser {
		return vs[0].([]*SaslUser)[vs[1].(int)]
	}).(SaslUserOutput)
}

type SaslUserMapOutput struct{ *pulumi.OutputState }

func (SaslUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SaslUser)(nil)).Elem()
}

func (o SaslUserMapOutput) ToSaslUserMapOutput() SaslUserMapOutput {
	return o
}

func (o SaslUserMapOutput) ToSaslUserMapOutputWithContext(ctx context.Context) SaslUserMapOutput {
	return o
}

func (o SaslUserMapOutput) MapIndex(k pulumi.StringInput) SaslUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SaslUser {
		return vs[0].(map[string]*SaslUser)[vs[1].(string)]
	}).(SaslUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SaslUserInput)(nil)).Elem(), &SaslUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaslUserArrayInput)(nil)).Elem(), SaslUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaslUserMapInput)(nil)).Elem(), SaslUserMap{})
	pulumi.RegisterOutputType(SaslUserOutput{})
	pulumi.RegisterOutputType(SaslUserArrayOutput{})
	pulumi.RegisterOutputType(SaslUserMapOutput{})
}
