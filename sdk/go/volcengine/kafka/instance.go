// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kafka"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			// create vpc
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//				DnsServers: pulumi.StringArray{
//					pulumi.String("8.8.8.8"),
//					pulumi.String("114.114.114.114"),
//				},
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			// create subnet
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			// create kafka instance
//			fooInstance, err := kafka.NewInstance(ctx, "fooInstance", &kafka.InstanceArgs{
//				InstanceName:        pulumi.String("acc-test-kafka"),
//				InstanceDescription: pulumi.String("tf-test"),
//				Version:             pulumi.String("2.2.2"),
//				ComputeSpec:         pulumi.String("kafka.20xrate.hw"),
//				SubnetId:            fooSubnet.ID(),
//				UserName:            pulumi.String("tf-user"),
//				UserPassword:        pulumi.String("tf-pass!@q1"),
//				ChargeType:          pulumi.String("PostPaid"),
//				StorageSpace:        pulumi.Int(300),
//				PartitionNumber:     pulumi.Int(350),
//				ProjectName:         pulumi.String("default"),
//				Tags: kafka.InstanceTagArray{
//					&kafka.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//				Parameters: kafka.InstanceParameterArray{
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("MessageMaxByte"),
//						ParameterValue: pulumi.String("12"),
//					},
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("LogRetentionHours"),
//						ParameterValue: pulumi.String("70"),
//					},
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("MessageTimestampType"),
//						ParameterValue: pulumi.String("CreateTime"),
//					},
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("OffsetRetentionMinutes"),
//						ParameterValue: pulumi.String("10080"),
//					},
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("AutoDeleteGroup"),
//						ParameterValue: pulumi.String("false"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooAddress, err := eip.NewAddress(ctx, "fooAddress", &eip.AddressArgs{
//				BillingType: pulumi.String("PostPaidByBandwidth"),
//				Bandwidth:   pulumi.Int(1),
//				Isp:         pulumi.String("BGP"),
//				Description: pulumi.String("tf-test"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kafka.NewPublicAddress(ctx, "fooPublicAddress", &kafka.PublicAddressArgs{
//				InstanceId: fooInstance.ID(),
//				EipId:      fooAddress.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kafka.NewGroup(ctx, "fooGroup", &kafka.GroupArgs{
//				InstanceId:  fooInstance.ID(),
//				GroupId:     pulumi.String("acc-test-group"),
//				Description: pulumi.String("tf-test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = kafka.NewTopic(ctx, "fooTopic", &kafka.TopicArgs{
//				TopicName:       pulumi.String("acc-test-topic"),
//				InstanceId:      fooInstance.ID(),
//				Description:     pulumi.String("tf-test"),
//				PartitionNumber: pulumi.Int(15),
//				ReplicaNumber:   pulumi.Int(3),
//				Parameters: &kafka.TopicParametersArgs{
//					MinInsyncReplicaNumber: pulumi.Int(2),
//					MessageMaxByte:         pulumi.Int(10),
//					LogRetentionHours:      pulumi.Int(96),
//				},
//				AllAuthority: pulumi.Bool(false),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// KafkaInstance can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:kafka/instance:Instance default kafka-insbjwbbwb
// ```
type Instance struct {
	pulumi.CustomResourceState

	// The auto renew flag of instance. Only effective when instanceChargeType is PrePaid. Default is false.
	AutoRenew pulumi.BoolPtrOutput `pulumi:"autoRenew"`
	// The charge type of instance, the value can be `PrePaid` or `PostPaid`.
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// The compute spec of instance.
	ComputeSpec pulumi.StringOutput `pulumi:"computeSpec"`
	// The description of instance.
	InstanceDescription pulumi.StringOutput `pulumi:"instanceDescription"`
	// The name of instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Whether enable rebalance. Only effected in modify when computeSpec field is changed.
	NeedRebalance pulumi.BoolPtrOutput `pulumi:"needRebalance"`
	// Parameter of the instance.
	Parameters InstanceParameterArrayOutput `pulumi:"parameters"`
	// The partition number of instance.
	PartitionNumber pulumi.IntOutput `pulumi:"partitionNumber"`
	// The period of instance. Only effective when instanceChargeType is PrePaid. Unit is Month.
	Period pulumi.IntPtrOutput `pulumi:"period"`
	// The project name of instance.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The rebalance time.
	RebalanceTime pulumi.StringPtrOutput `pulumi:"rebalanceTime"`
	// The storage space of instance.
	StorageSpace pulumi.IntOutput `pulumi:"storageSpace"`
	// The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
	StorageType pulumi.StringPtrOutput `pulumi:"storageType"`
	// The subnet id of instance.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The tags of instance.
	Tags InstanceTagArrayOutput `pulumi:"tags"`
	// The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword pulumi.StringOutput `pulumi:"userPassword"`
	// The version of instance, the value can be `2.2.2` or `2.8.2`.
	Version pulumi.StringOutput `pulumi:"version"`
	// The list of zone ids. If you need to deploy multiple availability zones for a newly created instance, you can specify three availability zone IDs at the same time.
	ZoneIds pulumi.StringArrayOutput `pulumi:"zoneIds"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChargeType == nil {
		return nil, errors.New("invalid value for required argument 'ChargeType'")
	}
	if args.ComputeSpec == nil {
		return nil, errors.New("invalid value for required argument 'ComputeSpec'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.UserPassword == nil {
		return nil, errors.New("invalid value for required argument 'UserPassword'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.UserPassword != nil {
		args.UserPassword = pulumi.ToSecret(args.UserPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"userPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("volcengine:kafka/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("volcengine:kafka/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The auto renew flag of instance. Only effective when instanceChargeType is PrePaid. Default is false.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The charge type of instance, the value can be `PrePaid` or `PostPaid`.
	ChargeType *string `pulumi:"chargeType"`
	// The compute spec of instance.
	ComputeSpec *string `pulumi:"computeSpec"`
	// The description of instance.
	InstanceDescription *string `pulumi:"instanceDescription"`
	// The name of instance.
	InstanceName *string `pulumi:"instanceName"`
	// Whether enable rebalance. Only effected in modify when computeSpec field is changed.
	NeedRebalance *bool `pulumi:"needRebalance"`
	// Parameter of the instance.
	Parameters []InstanceParameter `pulumi:"parameters"`
	// The partition number of instance.
	PartitionNumber *int `pulumi:"partitionNumber"`
	// The period of instance. Only effective when instanceChargeType is PrePaid. Unit is Month.
	Period *int `pulumi:"period"`
	// The project name of instance.
	ProjectName *string `pulumi:"projectName"`
	// The rebalance time.
	RebalanceTime *string `pulumi:"rebalanceTime"`
	// The storage space of instance.
	StorageSpace *int `pulumi:"storageSpace"`
	// The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
	StorageType *string `pulumi:"storageType"`
	// The subnet id of instance.
	SubnetId *string `pulumi:"subnetId"`
	// The tags of instance.
	Tags []InstanceTag `pulumi:"tags"`
	// The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserName *string `pulumi:"userName"`
	// The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword *string `pulumi:"userPassword"`
	// The version of instance, the value can be `2.2.2` or `2.8.2`.
	Version *string `pulumi:"version"`
	// The list of zone ids. If you need to deploy multiple availability zones for a newly created instance, you can specify three availability zone IDs at the same time.
	ZoneIds []string `pulumi:"zoneIds"`
}

type InstanceState struct {
	// The auto renew flag of instance. Only effective when instanceChargeType is PrePaid. Default is false.
	AutoRenew pulumi.BoolPtrInput
	// The charge type of instance, the value can be `PrePaid` or `PostPaid`.
	ChargeType pulumi.StringPtrInput
	// The compute spec of instance.
	ComputeSpec pulumi.StringPtrInput
	// The description of instance.
	InstanceDescription pulumi.StringPtrInput
	// The name of instance.
	InstanceName pulumi.StringPtrInput
	// Whether enable rebalance. Only effected in modify when computeSpec field is changed.
	NeedRebalance pulumi.BoolPtrInput
	// Parameter of the instance.
	Parameters InstanceParameterArrayInput
	// The partition number of instance.
	PartitionNumber pulumi.IntPtrInput
	// The period of instance. Only effective when instanceChargeType is PrePaid. Unit is Month.
	Period pulumi.IntPtrInput
	// The project name of instance.
	ProjectName pulumi.StringPtrInput
	// The rebalance time.
	RebalanceTime pulumi.StringPtrInput
	// The storage space of instance.
	StorageSpace pulumi.IntPtrInput
	// The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
	StorageType pulumi.StringPtrInput
	// The subnet id of instance.
	SubnetId pulumi.StringPtrInput
	// The tags of instance.
	Tags InstanceTagArrayInput
	// The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserName pulumi.StringPtrInput
	// The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword pulumi.StringPtrInput
	// The version of instance, the value can be `2.2.2` or `2.8.2`.
	Version pulumi.StringPtrInput
	// The list of zone ids. If you need to deploy multiple availability zones for a newly created instance, you can specify three availability zone IDs at the same time.
	ZoneIds pulumi.StringArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The auto renew flag of instance. Only effective when instanceChargeType is PrePaid. Default is false.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The charge type of instance, the value can be `PrePaid` or `PostPaid`.
	ChargeType string `pulumi:"chargeType"`
	// The compute spec of instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// The description of instance.
	InstanceDescription *string `pulumi:"instanceDescription"`
	// The name of instance.
	InstanceName *string `pulumi:"instanceName"`
	// Whether enable rebalance. Only effected in modify when computeSpec field is changed.
	NeedRebalance *bool `pulumi:"needRebalance"`
	// Parameter of the instance.
	Parameters []InstanceParameter `pulumi:"parameters"`
	// The partition number of instance.
	PartitionNumber *int `pulumi:"partitionNumber"`
	// The period of instance. Only effective when instanceChargeType is PrePaid. Unit is Month.
	Period *int `pulumi:"period"`
	// The project name of instance.
	ProjectName *string `pulumi:"projectName"`
	// The rebalance time.
	RebalanceTime *string `pulumi:"rebalanceTime"`
	// The storage space of instance.
	StorageSpace *int `pulumi:"storageSpace"`
	// The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
	StorageType *string `pulumi:"storageType"`
	// The subnet id of instance.
	SubnetId string `pulumi:"subnetId"`
	// The tags of instance.
	Tags []InstanceTag `pulumi:"tags"`
	// The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserName string `pulumi:"userName"`
	// The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword string `pulumi:"userPassword"`
	// The version of instance, the value can be `2.2.2` or `2.8.2`.
	Version string `pulumi:"version"`
	// The list of zone ids. If you need to deploy multiple availability zones for a newly created instance, you can specify three availability zone IDs at the same time.
	ZoneIds []string `pulumi:"zoneIds"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The auto renew flag of instance. Only effective when instanceChargeType is PrePaid. Default is false.
	AutoRenew pulumi.BoolPtrInput
	// The charge type of instance, the value can be `PrePaid` or `PostPaid`.
	ChargeType pulumi.StringInput
	// The compute spec of instance.
	ComputeSpec pulumi.StringInput
	// The description of instance.
	InstanceDescription pulumi.StringPtrInput
	// The name of instance.
	InstanceName pulumi.StringPtrInput
	// Whether enable rebalance. Only effected in modify when computeSpec field is changed.
	NeedRebalance pulumi.BoolPtrInput
	// Parameter of the instance.
	Parameters InstanceParameterArrayInput
	// The partition number of instance.
	PartitionNumber pulumi.IntPtrInput
	// The period of instance. Only effective when instanceChargeType is PrePaid. Unit is Month.
	Period pulumi.IntPtrInput
	// The project name of instance.
	ProjectName pulumi.StringPtrInput
	// The rebalance time.
	RebalanceTime pulumi.StringPtrInput
	// The storage space of instance.
	StorageSpace pulumi.IntPtrInput
	// The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
	StorageType pulumi.StringPtrInput
	// The subnet id of instance.
	SubnetId pulumi.StringInput
	// The tags of instance.
	Tags InstanceTagArrayInput
	// The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserName pulumi.StringInput
	// The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword pulumi.StringInput
	// The version of instance, the value can be `2.2.2` or `2.8.2`.
	Version pulumi.StringInput
	// The list of zone ids. If you need to deploy multiple availability zones for a newly created instance, you can specify three availability zone IDs at the same time.
	ZoneIds pulumi.StringArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// The auto renew flag of instance. Only effective when instanceChargeType is PrePaid. Default is false.
func (o InstanceOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// The charge type of instance, the value can be `PrePaid` or `PostPaid`.
func (o InstanceOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ChargeType }).(pulumi.StringOutput)
}

// The compute spec of instance.
func (o InstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ComputeSpec }).(pulumi.StringOutput)
}

// The description of instance.
func (o InstanceOutput) InstanceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceDescription }).(pulumi.StringOutput)
}

// The name of instance.
func (o InstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Whether enable rebalance. Only effected in modify when computeSpec field is changed.
func (o InstanceOutput) NeedRebalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolPtrOutput { return v.NeedRebalance }).(pulumi.BoolPtrOutput)
}

// Parameter of the instance.
func (o InstanceOutput) Parameters() InstanceParameterArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceParameterArrayOutput { return v.Parameters }).(InstanceParameterArrayOutput)
}

// The partition number of instance.
func (o InstanceOutput) PartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.PartitionNumber }).(pulumi.IntOutput)
}

// The period of instance. Only effective when instanceChargeType is PrePaid. Unit is Month.
func (o InstanceOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.Period }).(pulumi.IntPtrOutput)
}

// The project name of instance.
func (o InstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The rebalance time.
func (o InstanceOutput) RebalanceTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.RebalanceTime }).(pulumi.StringPtrOutput)
}

// The storage space of instance.
func (o InstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.StorageSpace }).(pulumi.IntOutput)
}

// The storage type of instance. The value can be ESSD_FlexPL or ESSD_PL0.
func (o InstanceOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.StorageType }).(pulumi.StringPtrOutput)
}

// The subnet id of instance.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The tags of instance.
func (o InstanceOutput) Tags() InstanceTagArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceTagArrayOutput { return v.Tags }).(InstanceTagArrayOutput)
}

// The user name of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o InstanceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// The user password of instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o InstanceOutput) UserPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserPassword }).(pulumi.StringOutput)
}

// The version of instance, the value can be `2.2.2` or `2.8.2`.
func (o InstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The list of zone ids. If you need to deploy multiple availability zones for a newly created instance, you can specify three availability zone IDs at the same time.
func (o InstanceOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
