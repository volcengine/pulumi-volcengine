// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type ConsumedPartitionsConsumedPartition struct {
	// The total amount of message accumulation in this topic partition for the consumer group.
	Accumulation int `pulumi:"accumulation"`
	// The consumed client info of partition.
	ConsumedClient string `pulumi:"consumedClient"`
	// The consumed offset of partition.
	ConsumedOffset int `pulumi:"consumedOffset"`
	// The end offset of partition.
	EndOffset int `pulumi:"endOffset"`
	// The index number of partition.
	PartitionId int `pulumi:"partitionId"`
	// The start offset of partition.
	StartOffset int `pulumi:"startOffset"`
}

// ConsumedPartitionsConsumedPartitionInput is an input type that accepts ConsumedPartitionsConsumedPartitionArgs and ConsumedPartitionsConsumedPartitionOutput values.
// You can construct a concrete instance of `ConsumedPartitionsConsumedPartitionInput` via:
//
//	ConsumedPartitionsConsumedPartitionArgs{...}
type ConsumedPartitionsConsumedPartitionInput interface {
	pulumi.Input

	ToConsumedPartitionsConsumedPartitionOutput() ConsumedPartitionsConsumedPartitionOutput
	ToConsumedPartitionsConsumedPartitionOutputWithContext(context.Context) ConsumedPartitionsConsumedPartitionOutput
}

type ConsumedPartitionsConsumedPartitionArgs struct {
	// The total amount of message accumulation in this topic partition for the consumer group.
	Accumulation pulumi.IntInput `pulumi:"accumulation"`
	// The consumed client info of partition.
	ConsumedClient pulumi.StringInput `pulumi:"consumedClient"`
	// The consumed offset of partition.
	ConsumedOffset pulumi.IntInput `pulumi:"consumedOffset"`
	// The end offset of partition.
	EndOffset pulumi.IntInput `pulumi:"endOffset"`
	// The index number of partition.
	PartitionId pulumi.IntInput `pulumi:"partitionId"`
	// The start offset of partition.
	StartOffset pulumi.IntInput `pulumi:"startOffset"`
}

func (ConsumedPartitionsConsumedPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (i ConsumedPartitionsConsumedPartitionArgs) ToConsumedPartitionsConsumedPartitionOutput() ConsumedPartitionsConsumedPartitionOutput {
	return i.ToConsumedPartitionsConsumedPartitionOutputWithContext(context.Background())
}

func (i ConsumedPartitionsConsumedPartitionArgs) ToConsumedPartitionsConsumedPartitionOutputWithContext(ctx context.Context) ConsumedPartitionsConsumedPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumedPartitionsConsumedPartitionOutput)
}

// ConsumedPartitionsConsumedPartitionArrayInput is an input type that accepts ConsumedPartitionsConsumedPartitionArray and ConsumedPartitionsConsumedPartitionArrayOutput values.
// You can construct a concrete instance of `ConsumedPartitionsConsumedPartitionArrayInput` via:
//
//	ConsumedPartitionsConsumedPartitionArray{ ConsumedPartitionsConsumedPartitionArgs{...} }
type ConsumedPartitionsConsumedPartitionArrayInput interface {
	pulumi.Input

	ToConsumedPartitionsConsumedPartitionArrayOutput() ConsumedPartitionsConsumedPartitionArrayOutput
	ToConsumedPartitionsConsumedPartitionArrayOutputWithContext(context.Context) ConsumedPartitionsConsumedPartitionArrayOutput
}

type ConsumedPartitionsConsumedPartitionArray []ConsumedPartitionsConsumedPartitionInput

func (ConsumedPartitionsConsumedPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (i ConsumedPartitionsConsumedPartitionArray) ToConsumedPartitionsConsumedPartitionArrayOutput() ConsumedPartitionsConsumedPartitionArrayOutput {
	return i.ToConsumedPartitionsConsumedPartitionArrayOutputWithContext(context.Background())
}

func (i ConsumedPartitionsConsumedPartitionArray) ToConsumedPartitionsConsumedPartitionArrayOutputWithContext(ctx context.Context) ConsumedPartitionsConsumedPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumedPartitionsConsumedPartitionArrayOutput)
}

type ConsumedPartitionsConsumedPartitionOutput struct{ *pulumi.OutputState }

func (ConsumedPartitionsConsumedPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (o ConsumedPartitionsConsumedPartitionOutput) ToConsumedPartitionsConsumedPartitionOutput() ConsumedPartitionsConsumedPartitionOutput {
	return o
}

func (o ConsumedPartitionsConsumedPartitionOutput) ToConsumedPartitionsConsumedPartitionOutputWithContext(ctx context.Context) ConsumedPartitionsConsumedPartitionOutput {
	return o
}

// The total amount of message accumulation in this topic partition for the consumer group.
func (o ConsumedPartitionsConsumedPartitionOutput) Accumulation() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.Accumulation }).(pulumi.IntOutput)
}

// The consumed client info of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) ConsumedClient() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) string { return v.ConsumedClient }).(pulumi.StringOutput)
}

// The consumed offset of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) ConsumedOffset() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.ConsumedOffset }).(pulumi.IntOutput)
}

// The end offset of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) EndOffset() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.EndOffset }).(pulumi.IntOutput)
}

// The index number of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) PartitionId() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.PartitionId }).(pulumi.IntOutput)
}

// The start offset of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) StartOffset() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.StartOffset }).(pulumi.IntOutput)
}

type ConsumedPartitionsConsumedPartitionArrayOutput struct{ *pulumi.OutputState }

func (ConsumedPartitionsConsumedPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (o ConsumedPartitionsConsumedPartitionArrayOutput) ToConsumedPartitionsConsumedPartitionArrayOutput() ConsumedPartitionsConsumedPartitionArrayOutput {
	return o
}

func (o ConsumedPartitionsConsumedPartitionArrayOutput) ToConsumedPartitionsConsumedPartitionArrayOutputWithContext(ctx context.Context) ConsumedPartitionsConsumedPartitionArrayOutput {
	return o
}

func (o ConsumedPartitionsConsumedPartitionArrayOutput) Index(i pulumi.IntInput) ConsumedPartitionsConsumedPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumedPartitionsConsumedPartition {
		return vs[0].([]ConsumedPartitionsConsumedPartition)[vs[1].(int)]
	}).(ConsumedPartitionsConsumedPartitionOutput)
}

type ConsumedTopicsConsumedTopic struct {
	// The total amount of message accumulation in this topic for the consumer group.
	Accumulation int `pulumi:"accumulation"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName string `pulumi:"topicName"`
}

// ConsumedTopicsConsumedTopicInput is an input type that accepts ConsumedTopicsConsumedTopicArgs and ConsumedTopicsConsumedTopicOutput values.
// You can construct a concrete instance of `ConsumedTopicsConsumedTopicInput` via:
//
//	ConsumedTopicsConsumedTopicArgs{...}
type ConsumedTopicsConsumedTopicInput interface {
	pulumi.Input

	ToConsumedTopicsConsumedTopicOutput() ConsumedTopicsConsumedTopicOutput
	ToConsumedTopicsConsumedTopicOutputWithContext(context.Context) ConsumedTopicsConsumedTopicOutput
}

type ConsumedTopicsConsumedTopicArgs struct {
	// The total amount of message accumulation in this topic for the consumer group.
	Accumulation pulumi.IntInput `pulumi:"accumulation"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (ConsumedTopicsConsumedTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (i ConsumedTopicsConsumedTopicArgs) ToConsumedTopicsConsumedTopicOutput() ConsumedTopicsConsumedTopicOutput {
	return i.ToConsumedTopicsConsumedTopicOutputWithContext(context.Background())
}

func (i ConsumedTopicsConsumedTopicArgs) ToConsumedTopicsConsumedTopicOutputWithContext(ctx context.Context) ConsumedTopicsConsumedTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumedTopicsConsumedTopicOutput)
}

// ConsumedTopicsConsumedTopicArrayInput is an input type that accepts ConsumedTopicsConsumedTopicArray and ConsumedTopicsConsumedTopicArrayOutput values.
// You can construct a concrete instance of `ConsumedTopicsConsumedTopicArrayInput` via:
//
//	ConsumedTopicsConsumedTopicArray{ ConsumedTopicsConsumedTopicArgs{...} }
type ConsumedTopicsConsumedTopicArrayInput interface {
	pulumi.Input

	ToConsumedTopicsConsumedTopicArrayOutput() ConsumedTopicsConsumedTopicArrayOutput
	ToConsumedTopicsConsumedTopicArrayOutputWithContext(context.Context) ConsumedTopicsConsumedTopicArrayOutput
}

type ConsumedTopicsConsumedTopicArray []ConsumedTopicsConsumedTopicInput

func (ConsumedTopicsConsumedTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (i ConsumedTopicsConsumedTopicArray) ToConsumedTopicsConsumedTopicArrayOutput() ConsumedTopicsConsumedTopicArrayOutput {
	return i.ToConsumedTopicsConsumedTopicArrayOutputWithContext(context.Background())
}

func (i ConsumedTopicsConsumedTopicArray) ToConsumedTopicsConsumedTopicArrayOutputWithContext(ctx context.Context) ConsumedTopicsConsumedTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumedTopicsConsumedTopicArrayOutput)
}

type ConsumedTopicsConsumedTopicOutput struct{ *pulumi.OutputState }

func (ConsumedTopicsConsumedTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (o ConsumedTopicsConsumedTopicOutput) ToConsumedTopicsConsumedTopicOutput() ConsumedTopicsConsumedTopicOutput {
	return o
}

func (o ConsumedTopicsConsumedTopicOutput) ToConsumedTopicsConsumedTopicOutputWithContext(ctx context.Context) ConsumedTopicsConsumedTopicOutput {
	return o
}

// The total amount of message accumulation in this topic for the consumer group.
func (o ConsumedTopicsConsumedTopicOutput) Accumulation() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedTopicsConsumedTopic) int { return v.Accumulation }).(pulumi.IntOutput)
}

// The name of kafka topic. This field supports fuzzy query.
func (o ConsumedTopicsConsumedTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumedTopicsConsumedTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type ConsumedTopicsConsumedTopicArrayOutput struct{ *pulumi.OutputState }

func (ConsumedTopicsConsumedTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (o ConsumedTopicsConsumedTopicArrayOutput) ToConsumedTopicsConsumedTopicArrayOutput() ConsumedTopicsConsumedTopicArrayOutput {
	return o
}

func (o ConsumedTopicsConsumedTopicArrayOutput) ToConsumedTopicsConsumedTopicArrayOutputWithContext(ctx context.Context) ConsumedTopicsConsumedTopicArrayOutput {
	return o
}

func (o ConsumedTopicsConsumedTopicArrayOutput) Index(i pulumi.IntInput) ConsumedTopicsConsumedTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumedTopicsConsumedTopic {
		return vs[0].([]ConsumedTopicsConsumedTopic)[vs[1].(int)]
	}).(ConsumedTopicsConsumedTopicOutput)
}

type GroupsGroup struct {
	// The id of kafka group, support fuzzy matching.
	GroupId string `pulumi:"groupId"`
	// The state of kafka group.
	State string `pulumi:"state"`
}

// GroupsGroupInput is an input type that accepts GroupsGroupArgs and GroupsGroupOutput values.
// You can construct a concrete instance of `GroupsGroupInput` via:
//
//	GroupsGroupArgs{...}
type GroupsGroupInput interface {
	pulumi.Input

	ToGroupsGroupOutput() GroupsGroupOutput
	ToGroupsGroupOutputWithContext(context.Context) GroupsGroupOutput
}

type GroupsGroupArgs struct {
	// The id of kafka group, support fuzzy matching.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The state of kafka group.
	State pulumi.StringInput `pulumi:"state"`
}

func (GroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsGroup)(nil)).Elem()
}

func (i GroupsGroupArgs) ToGroupsGroupOutput() GroupsGroupOutput {
	return i.ToGroupsGroupOutputWithContext(context.Background())
}

func (i GroupsGroupArgs) ToGroupsGroupOutputWithContext(ctx context.Context) GroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsGroupOutput)
}

// GroupsGroupArrayInput is an input type that accepts GroupsGroupArray and GroupsGroupArrayOutput values.
// You can construct a concrete instance of `GroupsGroupArrayInput` via:
//
//	GroupsGroupArray{ GroupsGroupArgs{...} }
type GroupsGroupArrayInput interface {
	pulumi.Input

	ToGroupsGroupArrayOutput() GroupsGroupArrayOutput
	ToGroupsGroupArrayOutputWithContext(context.Context) GroupsGroupArrayOutput
}

type GroupsGroupArray []GroupsGroupInput

func (GroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsGroup)(nil)).Elem()
}

func (i GroupsGroupArray) ToGroupsGroupArrayOutput() GroupsGroupArrayOutput {
	return i.ToGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GroupsGroupArray) ToGroupsGroupArrayOutputWithContext(ctx context.Context) GroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsGroupArrayOutput)
}

type GroupsGroupOutput struct{ *pulumi.OutputState }

func (GroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsGroup)(nil)).Elem()
}

func (o GroupsGroupOutput) ToGroupsGroupOutput() GroupsGroupOutput {
	return o
}

func (o GroupsGroupOutput) ToGroupsGroupOutputWithContext(ctx context.Context) GroupsGroupOutput {
	return o
}

// The id of kafka group, support fuzzy matching.
func (o GroupsGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsGroup) string { return v.GroupId }).(pulumi.StringOutput)
}

// The state of kafka group.
func (o GroupsGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsGroup) string { return v.State }).(pulumi.StringOutput)
}

type GroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsGroup)(nil)).Elem()
}

func (o GroupsGroupArrayOutput) ToGroupsGroupArrayOutput() GroupsGroupArrayOutput {
	return o
}

func (o GroupsGroupArrayOutput) ToGroupsGroupArrayOutputWithContext(ctx context.Context) GroupsGroupArrayOutput {
	return o
}

func (o GroupsGroupArrayOutput) Index(i pulumi.IntInput) GroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupsGroup {
		return vs[0].([]GroupsGroup)[vs[1].(int)]
	}).(GroupsGroupOutput)
}

type InstanceParameter struct {
	// Parameter name.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue string `pulumi:"parameterValue"`
}

// InstanceParameterInput is an input type that accepts InstanceParameterArgs and InstanceParameterOutput values.
// You can construct a concrete instance of `InstanceParameterInput` via:
//
//	InstanceParameterArgs{...}
type InstanceParameterInput interface {
	pulumi.Input

	ToInstanceParameterOutput() InstanceParameterOutput
	ToInstanceParameterOutputWithContext(context.Context) InstanceParameterOutput
}

type InstanceParameterArgs struct {
	// Parameter name.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (InstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArgs) ToInstanceParameterOutput() InstanceParameterOutput {
	return i.ToInstanceParameterOutputWithContext(context.Background())
}

func (i InstanceParameterArgs) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterOutput)
}

// InstanceParameterArrayInput is an input type that accepts InstanceParameterArray and InstanceParameterArrayOutput values.
// You can construct a concrete instance of `InstanceParameterArrayInput` via:
//
//	InstanceParameterArray{ InstanceParameterArgs{...} }
type InstanceParameterArrayInput interface {
	pulumi.Input

	ToInstanceParameterArrayOutput() InstanceParameterArrayOutput
	ToInstanceParameterArrayOutputWithContext(context.Context) InstanceParameterArrayOutput
}

type InstanceParameterArray []InstanceParameterInput

func (InstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return i.ToInstanceParameterArrayOutputWithContext(context.Background())
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterArrayOutput)
}

type InstanceParameterOutput struct{ *pulumi.OutputState }

func (InstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterOutput) ToInstanceParameterOutput() InstanceParameterOutput {
	return o
}

func (o InstanceParameterOutput) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return o
}

// Parameter name.
func (o InstanceParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

// Parameter value.
func (o InstanceParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type InstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (InstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) Index(i pulumi.IntInput) InstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceParameter {
		return vs[0].([]InstanceParameter)[vs[1].(int)]
	}).(InstanceParameterOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstancesInstance struct {
	// The id of account.
	AccountId string `pulumi:"accountId"`
	// The auto renew status of instance.
	AutoRenew bool `pulumi:"autoRenew"`
	// The charge expire time of instance.
	ChargeExpireTime string `pulumi:"chargeExpireTime"`
	// The charge start time of instance.
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// The charge status of instance.
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of instance.
	ChargeType string `pulumi:"chargeType"`
	// The compute spec of instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// Connection info of the instance.
	ConnectionInfos []InstancesInstanceConnectionInfo `pulumi:"connectionInfos"`
	// The create time of instance.
	CreateTime string `pulumi:"createTime"`
	// The id of eip.
	EipId string `pulumi:"eipId"`
	// The id of instance.
	Id string `pulumi:"id"`
	// The description of instance.
	InstanceDescription string `pulumi:"instanceDescription"`
	// The id of instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of instance.
	InstanceName string `pulumi:"instanceName"`
	// The status of instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The overdue reclaim time of instance.
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// The overdue time of instance.
	OverdueTime string `pulumi:"overdueTime"`
	// Parameters of the instance.
	Parameters []InstancesInstanceParameter `pulumi:"parameters"`
	// The period unit of instance.
	PeriodUnit string `pulumi:"periodUnit"`
	// Whether enable private domain on public.
	PrivateDomainOnPublic bool `pulumi:"privateDomainOnPublic"`
	// The name of project.
	ProjectName string `pulumi:"projectName"`
	// The id of region.
	RegionId string `pulumi:"regionId"`
	// The storage space of instance.
	StorageSpace int `pulumi:"storageSpace"`
	// The storage type of instance.
	StorageType string `pulumi:"storageType"`
	// The id of subnet.
	SubnetId string `pulumi:"subnetId"`
	// The tags of instance.
	Tags []InstancesInstanceTag `pulumi:"tags"`
	// The usable partition number of instance.
	UsablePartitionNumber int `pulumi:"usablePartitionNumber"`
	// The used group number of instance.
	UsedGroupNumber int `pulumi:"usedGroupNumber"`
	// The used partition number of instance.
	UsedPartitionNumber int `pulumi:"usedPartitionNumber"`
	// The used storage space of instance.
	UsedStorageSpace int `pulumi:"usedStorageSpace"`
	// The used topic number of instance.
	UsedTopicNumber int `pulumi:"usedTopicNumber"`
	// The version of instance.
	Version string `pulumi:"version"`
	// The id of vpc.
	VpcId string `pulumi:"vpcId"`
	// The zone id of instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceInput is an input type that accepts InstancesInstanceArgs and InstancesInstanceOutput values.
// You can construct a concrete instance of `InstancesInstanceInput` via:
//
//	InstancesInstanceArgs{...}
type InstancesInstanceInput interface {
	pulumi.Input

	ToInstancesInstanceOutput() InstancesInstanceOutput
	ToInstancesInstanceOutputWithContext(context.Context) InstancesInstanceOutput
}

type InstancesInstanceArgs struct {
	// The id of account.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The auto renew status of instance.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The charge expire time of instance.
	ChargeExpireTime pulumi.StringInput `pulumi:"chargeExpireTime"`
	// The charge start time of instance.
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// The charge status of instance.
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The compute spec of instance.
	ComputeSpec pulumi.StringInput `pulumi:"computeSpec"`
	// Connection info of the instance.
	ConnectionInfos InstancesInstanceConnectionInfoArrayInput `pulumi:"connectionInfos"`
	// The create time of instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The id of eip.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The id of instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The description of instance.
	InstanceDescription pulumi.StringInput `pulumi:"instanceDescription"`
	// The id of instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The overdue reclaim time of instance.
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// The overdue time of instance.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Parameters of the instance.
	Parameters InstancesInstanceParameterArrayInput `pulumi:"parameters"`
	// The period unit of instance.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
	// Whether enable private domain on public.
	PrivateDomainOnPublic pulumi.BoolInput `pulumi:"privateDomainOnPublic"`
	// The name of project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The id of region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The storage space of instance.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// The storage type of instance.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The id of subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The tags of instance.
	Tags InstancesInstanceTagArrayInput `pulumi:"tags"`
	// The usable partition number of instance.
	UsablePartitionNumber pulumi.IntInput `pulumi:"usablePartitionNumber"`
	// The used group number of instance.
	UsedGroupNumber pulumi.IntInput `pulumi:"usedGroupNumber"`
	// The used partition number of instance.
	UsedPartitionNumber pulumi.IntInput `pulumi:"usedPartitionNumber"`
	// The used storage space of instance.
	UsedStorageSpace pulumi.IntInput `pulumi:"usedStorageSpace"`
	// The used topic number of instance.
	UsedTopicNumber pulumi.IntInput `pulumi:"usedTopicNumber"`
	// The version of instance.
	Version pulumi.StringInput `pulumi:"version"`
	// The id of vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone id of instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return i.ToInstancesInstanceOutputWithContext(context.Background())
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceOutput)
}

// InstancesInstanceArrayInput is an input type that accepts InstancesInstanceArray and InstancesInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceArrayInput` via:
//
//	InstancesInstanceArray{ InstancesInstanceArgs{...} }
type InstancesInstanceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput
	ToInstancesInstanceArrayOutputWithContext(context.Context) InstancesInstanceArrayOutput
}

type InstancesInstanceArray []InstancesInstanceInput

func (InstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return i.ToInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceArrayOutput)
}

type InstancesInstanceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return o
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return o
}

// The id of account.
func (o InstancesInstanceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.AccountId }).(pulumi.StringOutput)
}

// The auto renew status of instance.
func (o InstancesInstanceOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The charge expire time of instance.
func (o InstancesInstanceOutput) ChargeExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeExpireTime }).(pulumi.StringOutput)
}

// The charge start time of instance.
func (o InstancesInstanceOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// The charge status of instance.
func (o InstancesInstanceOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of instance.
func (o InstancesInstanceOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The compute spec of instance.
func (o InstancesInstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ComputeSpec }).(pulumi.StringOutput)
}

// Connection info of the instance.
func (o InstancesInstanceOutput) ConnectionInfos() InstancesInstanceConnectionInfoArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceConnectionInfo { return v.ConnectionInfos }).(InstancesInstanceConnectionInfoArrayOutput)
}

// The create time of instance.
func (o InstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of eip.
func (o InstancesInstanceOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.EipId }).(pulumi.StringOutput)
}

// The id of instance.
func (o InstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The description of instance.
func (o InstancesInstanceOutput) InstanceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceDescription }).(pulumi.StringOutput)
}

// The id of instance.
func (o InstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of instance.
func (o InstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of instance.
func (o InstancesInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The overdue reclaim time of instance.
func (o InstancesInstanceOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// The overdue time of instance.
func (o InstancesInstanceOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Parameters of the instance.
func (o InstancesInstanceOutput) Parameters() InstancesInstanceParameterArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceParameter { return v.Parameters }).(InstancesInstanceParameterArrayOutput)
}

// The period unit of instance.
func (o InstancesInstanceOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Whether enable private domain on public.
func (o InstancesInstanceOutput) PrivateDomainOnPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.PrivateDomainOnPublic }).(pulumi.BoolOutput)
}

// The name of project.
func (o InstancesInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The id of region.
func (o InstancesInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// The storage space of instance.
func (o InstancesInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// The storage type of instance.
func (o InstancesInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The id of subnet.
func (o InstancesInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The tags of instance.
func (o InstancesInstanceOutput) Tags() InstancesInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceTag { return v.Tags }).(InstancesInstanceTagArrayOutput)
}

// The usable partition number of instance.
func (o InstancesInstanceOutput) UsablePartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsablePartitionNumber }).(pulumi.IntOutput)
}

// The used group number of instance.
func (o InstancesInstanceOutput) UsedGroupNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsedGroupNumber }).(pulumi.IntOutput)
}

// The used partition number of instance.
func (o InstancesInstanceOutput) UsedPartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsedPartitionNumber }).(pulumi.IntOutput)
}

// The used storage space of instance.
func (o InstancesInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// The used topic number of instance.
func (o InstancesInstanceOutput) UsedTopicNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsedTopicNumber }).(pulumi.IntOutput)
}

// The version of instance.
func (o InstancesInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Version }).(pulumi.StringOutput)
}

// The id of vpc.
func (o InstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of instance.
func (o InstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstance {
		return vs[0].([]InstancesInstance)[vs[1].(int)]
	}).(InstancesInstanceOutput)
}

type InstancesInstanceConnectionInfo struct {
	// The endpoint type of instance.
	EndpointType string `pulumi:"endpointType"`
	// The internal endpoint of instance.
	InternalEndpoint string `pulumi:"internalEndpoint"`
	// The network type of instance.
	NetworkType string `pulumi:"networkType"`
	// The public endpoint of instance.
	PublicEndpoint string `pulumi:"publicEndpoint"`
}

// InstancesInstanceConnectionInfoInput is an input type that accepts InstancesInstanceConnectionInfoArgs and InstancesInstanceConnectionInfoOutput values.
// You can construct a concrete instance of `InstancesInstanceConnectionInfoInput` via:
//
//	InstancesInstanceConnectionInfoArgs{...}
type InstancesInstanceConnectionInfoInput interface {
	pulumi.Input

	ToInstancesInstanceConnectionInfoOutput() InstancesInstanceConnectionInfoOutput
	ToInstancesInstanceConnectionInfoOutputWithContext(context.Context) InstancesInstanceConnectionInfoOutput
}

type InstancesInstanceConnectionInfoArgs struct {
	// The endpoint type of instance.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The internal endpoint of instance.
	InternalEndpoint pulumi.StringInput `pulumi:"internalEndpoint"`
	// The network type of instance.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The public endpoint of instance.
	PublicEndpoint pulumi.StringInput `pulumi:"publicEndpoint"`
}

func (InstancesInstanceConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (i InstancesInstanceConnectionInfoArgs) ToInstancesInstanceConnectionInfoOutput() InstancesInstanceConnectionInfoOutput {
	return i.ToInstancesInstanceConnectionInfoOutputWithContext(context.Background())
}

func (i InstancesInstanceConnectionInfoArgs) ToInstancesInstanceConnectionInfoOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConnectionInfoOutput)
}

// InstancesInstanceConnectionInfoArrayInput is an input type that accepts InstancesInstanceConnectionInfoArray and InstancesInstanceConnectionInfoArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceConnectionInfoArrayInput` via:
//
//	InstancesInstanceConnectionInfoArray{ InstancesInstanceConnectionInfoArgs{...} }
type InstancesInstanceConnectionInfoArrayInput interface {
	pulumi.Input

	ToInstancesInstanceConnectionInfoArrayOutput() InstancesInstanceConnectionInfoArrayOutput
	ToInstancesInstanceConnectionInfoArrayOutputWithContext(context.Context) InstancesInstanceConnectionInfoArrayOutput
}

type InstancesInstanceConnectionInfoArray []InstancesInstanceConnectionInfoInput

func (InstancesInstanceConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (i InstancesInstanceConnectionInfoArray) ToInstancesInstanceConnectionInfoArrayOutput() InstancesInstanceConnectionInfoArrayOutput {
	return i.ToInstancesInstanceConnectionInfoArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceConnectionInfoArray) ToInstancesInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConnectionInfoArrayOutput)
}

type InstancesInstanceConnectionInfoOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (o InstancesInstanceConnectionInfoOutput) ToInstancesInstanceConnectionInfoOutput() InstancesInstanceConnectionInfoOutput {
	return o
}

func (o InstancesInstanceConnectionInfoOutput) ToInstancesInstanceConnectionInfoOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoOutput {
	return o
}

// The endpoint type of instance.
func (o InstancesInstanceConnectionInfoOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The internal endpoint of instance.
func (o InstancesInstanceConnectionInfoOutput) InternalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.InternalEndpoint }).(pulumi.StringOutput)
}

// The network type of instance.
func (o InstancesInstanceConnectionInfoOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The public endpoint of instance.
func (o InstancesInstanceConnectionInfoOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.PublicEndpoint }).(pulumi.StringOutput)
}

type InstancesInstanceConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (o InstancesInstanceConnectionInfoArrayOutput) ToInstancesInstanceConnectionInfoArrayOutput() InstancesInstanceConnectionInfoArrayOutput {
	return o
}

func (o InstancesInstanceConnectionInfoArrayOutput) ToInstancesInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoArrayOutput {
	return o
}

func (o InstancesInstanceConnectionInfoArrayOutput) Index(i pulumi.IntInput) InstancesInstanceConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceConnectionInfo {
		return vs[0].([]InstancesInstanceConnectionInfo)[vs[1].(int)]
	}).(InstancesInstanceConnectionInfoOutput)
}

type InstancesInstanceParameter struct {
	// Parameter name.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue string `pulumi:"parameterValue"`
}

// InstancesInstanceParameterInput is an input type that accepts InstancesInstanceParameterArgs and InstancesInstanceParameterOutput values.
// You can construct a concrete instance of `InstancesInstanceParameterInput` via:
//
//	InstancesInstanceParameterArgs{...}
type InstancesInstanceParameterInput interface {
	pulumi.Input

	ToInstancesInstanceParameterOutput() InstancesInstanceParameterOutput
	ToInstancesInstanceParameterOutputWithContext(context.Context) InstancesInstanceParameterOutput
}

type InstancesInstanceParameterArgs struct {
	// Parameter name.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (InstancesInstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceParameter)(nil)).Elem()
}

func (i InstancesInstanceParameterArgs) ToInstancesInstanceParameterOutput() InstancesInstanceParameterOutput {
	return i.ToInstancesInstanceParameterOutputWithContext(context.Background())
}

func (i InstancesInstanceParameterArgs) ToInstancesInstanceParameterOutputWithContext(ctx context.Context) InstancesInstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceParameterOutput)
}

// InstancesInstanceParameterArrayInput is an input type that accepts InstancesInstanceParameterArray and InstancesInstanceParameterArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceParameterArrayInput` via:
//
//	InstancesInstanceParameterArray{ InstancesInstanceParameterArgs{...} }
type InstancesInstanceParameterArrayInput interface {
	pulumi.Input

	ToInstancesInstanceParameterArrayOutput() InstancesInstanceParameterArrayOutput
	ToInstancesInstanceParameterArrayOutputWithContext(context.Context) InstancesInstanceParameterArrayOutput
}

type InstancesInstanceParameterArray []InstancesInstanceParameterInput

func (InstancesInstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceParameter)(nil)).Elem()
}

func (i InstancesInstanceParameterArray) ToInstancesInstanceParameterArrayOutput() InstancesInstanceParameterArrayOutput {
	return i.ToInstancesInstanceParameterArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceParameterArray) ToInstancesInstanceParameterArrayOutputWithContext(ctx context.Context) InstancesInstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceParameterArrayOutput)
}

type InstancesInstanceParameterOutput struct{ *pulumi.OutputState }

func (InstancesInstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceParameter)(nil)).Elem()
}

func (o InstancesInstanceParameterOutput) ToInstancesInstanceParameterOutput() InstancesInstanceParameterOutput {
	return o
}

func (o InstancesInstanceParameterOutput) ToInstancesInstanceParameterOutputWithContext(ctx context.Context) InstancesInstanceParameterOutput {
	return o
}

// Parameter name.
func (o InstancesInstanceParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

// Parameter value.
func (o InstancesInstanceParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type InstancesInstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceParameter)(nil)).Elem()
}

func (o InstancesInstanceParameterArrayOutput) ToInstancesInstanceParameterArrayOutput() InstancesInstanceParameterArrayOutput {
	return o
}

func (o InstancesInstanceParameterArrayOutput) ToInstancesInstanceParameterArrayOutputWithContext(ctx context.Context) InstancesInstanceParameterArrayOutput {
	return o
}

func (o InstancesInstanceParameterArrayOutput) Index(i pulumi.IntInput) InstancesInstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceParameter {
		return vs[0].([]InstancesInstanceParameter)[vs[1].(int)]
	}).(InstancesInstanceParameterOutput)
}

type InstancesInstanceTag struct {
	// The key of tag.
	Key string `pulumi:"key"`
	// The value of tag.
	Value string `pulumi:"value"`
}

// InstancesInstanceTagInput is an input type that accepts InstancesInstanceTagArgs and InstancesInstanceTagOutput values.
// You can construct a concrete instance of `InstancesInstanceTagInput` via:
//
//	InstancesInstanceTagArgs{...}
type InstancesInstanceTagInput interface {
	pulumi.Input

	ToInstancesInstanceTagOutput() InstancesInstanceTagOutput
	ToInstancesInstanceTagOutputWithContext(context.Context) InstancesInstanceTagOutput
}

type InstancesInstanceTagArgs struct {
	// The key of tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return i.ToInstancesInstanceTagOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagOutput)
}

// InstancesInstanceTagArrayInput is an input type that accepts InstancesInstanceTagArray and InstancesInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceTagArrayInput` via:
//
//	InstancesInstanceTagArray{ InstancesInstanceTagArgs{...} }
type InstancesInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput
	ToInstancesInstanceTagArrayOutputWithContext(context.Context) InstancesInstanceTagArrayOutput
}

type InstancesInstanceTagArray []InstancesInstanceTagInput

func (InstancesInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return i.ToInstancesInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagArrayOutput)
}

type InstancesInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return o
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return o
}

// The key of tag.
func (o InstancesInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of tag.
func (o InstancesInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceTag {
		return vs[0].([]InstancesInstanceTag)[vs[1].(int)]
	}).(InstancesInstanceTagOutput)
}

type InstancesTag struct {
	// The key of tag.
	Key string `pulumi:"key"`
	// The value of tag.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The key of tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The key of tag.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of tag.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type RegionsRegion struct {
	// The description of region.
	Description string `pulumi:"description"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The name of region.
	RegionName string `pulumi:"regionName"`
	// The status of region.
	Status string `pulumi:"status"`
}

// RegionsRegionInput is an input type that accepts RegionsRegionArgs and RegionsRegionOutput values.
// You can construct a concrete instance of `RegionsRegionInput` via:
//
//	RegionsRegionArgs{...}
type RegionsRegionInput interface {
	pulumi.Input

	ToRegionsRegionOutput() RegionsRegionOutput
	ToRegionsRegionOutputWithContext(context.Context) RegionsRegionOutput
}

type RegionsRegionArgs struct {
	// The description of region.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The name of region.
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// The status of region.
	Status pulumi.StringInput `pulumi:"status"`
}

func (RegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArgs) ToRegionsRegionOutput() RegionsRegionOutput {
	return i.ToRegionsRegionOutputWithContext(context.Background())
}

func (i RegionsRegionArgs) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionOutput)
}

// RegionsRegionArrayInput is an input type that accepts RegionsRegionArray and RegionsRegionArrayOutput values.
// You can construct a concrete instance of `RegionsRegionArrayInput` via:
//
//	RegionsRegionArray{ RegionsRegionArgs{...} }
type RegionsRegionArrayInput interface {
	pulumi.Input

	ToRegionsRegionArrayOutput() RegionsRegionArrayOutput
	ToRegionsRegionArrayOutputWithContext(context.Context) RegionsRegionArrayOutput
}

type RegionsRegionArray []RegionsRegionInput

func (RegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return i.ToRegionsRegionArrayOutputWithContext(context.Background())
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionArrayOutput)
}

type RegionsRegionOutput struct{ *pulumi.OutputState }

func (RegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionOutput) ToRegionsRegionOutput() RegionsRegionOutput {
	return o
}

func (o RegionsRegionOutput) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return o
}

// The description of region.
func (o RegionsRegionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the region.
func (o RegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

// The name of region.
func (o RegionsRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionName }).(pulumi.StringOutput)
}

// The status of region.
func (o RegionsRegionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.Status }).(pulumi.StringOutput)
}

type RegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (RegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) Index(i pulumi.IntInput) RegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionsRegion {
		return vs[0].([]RegionsRegion)[vs[1].(int)]
	}).(RegionsRegionOutput)
}

type SaslUsersUser struct {
	// Whether this user has read and write permissions for all topics.
	AllAuthority bool `pulumi:"allAuthority"`
	// The create time.
	CreateTime string `pulumi:"createTime"`
	// The description of user.
	Description string `pulumi:"description"`
	// The type of password.
	PasswordType string `pulumi:"passwordType"`
	// The user name, support fuzzy matching.
	UserName string `pulumi:"userName"`
}

// SaslUsersUserInput is an input type that accepts SaslUsersUserArgs and SaslUsersUserOutput values.
// You can construct a concrete instance of `SaslUsersUserInput` via:
//
//	SaslUsersUserArgs{...}
type SaslUsersUserInput interface {
	pulumi.Input

	ToSaslUsersUserOutput() SaslUsersUserOutput
	ToSaslUsersUserOutputWithContext(context.Context) SaslUsersUserOutput
}

type SaslUsersUserArgs struct {
	// Whether this user has read and write permissions for all topics.
	AllAuthority pulumi.BoolInput `pulumi:"allAuthority"`
	// The create time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of user.
	Description pulumi.StringInput `pulumi:"description"`
	// The type of password.
	PasswordType pulumi.StringInput `pulumi:"passwordType"`
	// The user name, support fuzzy matching.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (SaslUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslUsersUser)(nil)).Elem()
}

func (i SaslUsersUserArgs) ToSaslUsersUserOutput() SaslUsersUserOutput {
	return i.ToSaslUsersUserOutputWithContext(context.Background())
}

func (i SaslUsersUserArgs) ToSaslUsersUserOutputWithContext(ctx context.Context) SaslUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslUsersUserOutput)
}

// SaslUsersUserArrayInput is an input type that accepts SaslUsersUserArray and SaslUsersUserArrayOutput values.
// You can construct a concrete instance of `SaslUsersUserArrayInput` via:
//
//	SaslUsersUserArray{ SaslUsersUserArgs{...} }
type SaslUsersUserArrayInput interface {
	pulumi.Input

	ToSaslUsersUserArrayOutput() SaslUsersUserArrayOutput
	ToSaslUsersUserArrayOutputWithContext(context.Context) SaslUsersUserArrayOutput
}

type SaslUsersUserArray []SaslUsersUserInput

func (SaslUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SaslUsersUser)(nil)).Elem()
}

func (i SaslUsersUserArray) ToSaslUsersUserArrayOutput() SaslUsersUserArrayOutput {
	return i.ToSaslUsersUserArrayOutputWithContext(context.Background())
}

func (i SaslUsersUserArray) ToSaslUsersUserArrayOutputWithContext(ctx context.Context) SaslUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslUsersUserArrayOutput)
}

type SaslUsersUserOutput struct{ *pulumi.OutputState }

func (SaslUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslUsersUser)(nil)).Elem()
}

func (o SaslUsersUserOutput) ToSaslUsersUserOutput() SaslUsersUserOutput {
	return o
}

func (o SaslUsersUserOutput) ToSaslUsersUserOutputWithContext(ctx context.Context) SaslUsersUserOutput {
	return o
}

// Whether this user has read and write permissions for all topics.
func (o SaslUsersUserOutput) AllAuthority() pulumi.BoolOutput {
	return o.ApplyT(func(v SaslUsersUser) bool { return v.AllAuthority }).(pulumi.BoolOutput)
}

// The create time.
func (o SaslUsersUserOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SaslUsersUser) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of user.
func (o SaslUsersUserOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v SaslUsersUser) string { return v.Description }).(pulumi.StringOutput)
}

// The type of password.
func (o SaslUsersUserOutput) PasswordType() pulumi.StringOutput {
	return o.ApplyT(func(v SaslUsersUser) string { return v.PasswordType }).(pulumi.StringOutput)
}

// The user name, support fuzzy matching.
func (o SaslUsersUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v SaslUsersUser) string { return v.UserName }).(pulumi.StringOutput)
}

type SaslUsersUserArrayOutput struct{ *pulumi.OutputState }

func (SaslUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SaslUsersUser)(nil)).Elem()
}

func (o SaslUsersUserArrayOutput) ToSaslUsersUserArrayOutput() SaslUsersUserArrayOutput {
	return o
}

func (o SaslUsersUserArrayOutput) ToSaslUsersUserArrayOutputWithContext(ctx context.Context) SaslUsersUserArrayOutput {
	return o
}

func (o SaslUsersUserArrayOutput) Index(i pulumi.IntInput) SaslUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SaslUsersUser {
		return vs[0].([]SaslUsersUser)[vs[1].(int)]
	}).(SaslUsersUserOutput)
}

type TopicAccessPolicy struct {
	// The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
	AccessPolicy string `pulumi:"accessPolicy"`
	// The name of SASL user.
	UserName string `pulumi:"userName"`
}

// TopicAccessPolicyInput is an input type that accepts TopicAccessPolicyArgs and TopicAccessPolicyOutput values.
// You can construct a concrete instance of `TopicAccessPolicyInput` via:
//
//	TopicAccessPolicyArgs{...}
type TopicAccessPolicyInput interface {
	pulumi.Input

	ToTopicAccessPolicyOutput() TopicAccessPolicyOutput
	ToTopicAccessPolicyOutputWithContext(context.Context) TopicAccessPolicyOutput
}

type TopicAccessPolicyArgs struct {
	// The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	// The name of SASL user.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (TopicAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicAccessPolicy)(nil)).Elem()
}

func (i TopicAccessPolicyArgs) ToTopicAccessPolicyOutput() TopicAccessPolicyOutput {
	return i.ToTopicAccessPolicyOutputWithContext(context.Background())
}

func (i TopicAccessPolicyArgs) ToTopicAccessPolicyOutputWithContext(ctx context.Context) TopicAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicAccessPolicyOutput)
}

// TopicAccessPolicyArrayInput is an input type that accepts TopicAccessPolicyArray and TopicAccessPolicyArrayOutput values.
// You can construct a concrete instance of `TopicAccessPolicyArrayInput` via:
//
//	TopicAccessPolicyArray{ TopicAccessPolicyArgs{...} }
type TopicAccessPolicyArrayInput interface {
	pulumi.Input

	ToTopicAccessPolicyArrayOutput() TopicAccessPolicyArrayOutput
	ToTopicAccessPolicyArrayOutputWithContext(context.Context) TopicAccessPolicyArrayOutput
}

type TopicAccessPolicyArray []TopicAccessPolicyInput

func (TopicAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicAccessPolicy)(nil)).Elem()
}

func (i TopicAccessPolicyArray) ToTopicAccessPolicyArrayOutput() TopicAccessPolicyArrayOutput {
	return i.ToTopicAccessPolicyArrayOutputWithContext(context.Background())
}

func (i TopicAccessPolicyArray) ToTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicAccessPolicyArrayOutput)
}

type TopicAccessPolicyOutput struct{ *pulumi.OutputState }

func (TopicAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicAccessPolicy)(nil)).Elem()
}

func (o TopicAccessPolicyOutput) ToTopicAccessPolicyOutput() TopicAccessPolicyOutput {
	return o
}

func (o TopicAccessPolicyOutput) ToTopicAccessPolicyOutputWithContext(ctx context.Context) TopicAccessPolicyOutput {
	return o
}

// The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
func (o TopicAccessPolicyOutput) AccessPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v TopicAccessPolicy) string { return v.AccessPolicy }).(pulumi.StringOutput)
}

// The name of SASL user.
func (o TopicAccessPolicyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicAccessPolicy) string { return v.UserName }).(pulumi.StringOutput)
}

type TopicAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (TopicAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicAccessPolicy)(nil)).Elem()
}

func (o TopicAccessPolicyArrayOutput) ToTopicAccessPolicyArrayOutput() TopicAccessPolicyArrayOutput {
	return o
}

func (o TopicAccessPolicyArrayOutput) ToTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicAccessPolicyArrayOutput {
	return o
}

func (o TopicAccessPolicyArrayOutput) Index(i pulumi.IntInput) TopicAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicAccessPolicy {
		return vs[0].([]TopicAccessPolicy)[vs[1].(int)]
	}).(TopicAccessPolicyOutput)
}

type TopicParameters struct {
	// The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
	LogRetentionHours *int `pulumi:"logRetentionHours"`
	// The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
	MessageMaxByte *int `pulumi:"messageMaxByte"`
	// The min number of sync replica. The default value is the replica number minus 1.
	MinInsyncReplicaNumber *int `pulumi:"minInsyncReplicaNumber"`
}

// TopicParametersInput is an input type that accepts TopicParametersArgs and TopicParametersOutput values.
// You can construct a concrete instance of `TopicParametersInput` via:
//
//	TopicParametersArgs{...}
type TopicParametersInput interface {
	pulumi.Input

	ToTopicParametersOutput() TopicParametersOutput
	ToTopicParametersOutputWithContext(context.Context) TopicParametersOutput
}

type TopicParametersArgs struct {
	// The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
	LogRetentionHours pulumi.IntPtrInput `pulumi:"logRetentionHours"`
	// The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
	MessageMaxByte pulumi.IntPtrInput `pulumi:"messageMaxByte"`
	// The min number of sync replica. The default value is the replica number minus 1.
	MinInsyncReplicaNumber pulumi.IntPtrInput `pulumi:"minInsyncReplicaNumber"`
}

func (TopicParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicParameters)(nil)).Elem()
}

func (i TopicParametersArgs) ToTopicParametersOutput() TopicParametersOutput {
	return i.ToTopicParametersOutputWithContext(context.Background())
}

func (i TopicParametersArgs) ToTopicParametersOutputWithContext(ctx context.Context) TopicParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicParametersOutput)
}

func (i TopicParametersArgs) ToTopicParametersPtrOutput() TopicParametersPtrOutput {
	return i.ToTopicParametersPtrOutputWithContext(context.Background())
}

func (i TopicParametersArgs) ToTopicParametersPtrOutputWithContext(ctx context.Context) TopicParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicParametersOutput).ToTopicParametersPtrOutputWithContext(ctx)
}

// TopicParametersPtrInput is an input type that accepts TopicParametersArgs, TopicParametersPtr and TopicParametersPtrOutput values.
// You can construct a concrete instance of `TopicParametersPtrInput` via:
//
//	        TopicParametersArgs{...}
//
//	or:
//
//	        nil
type TopicParametersPtrInput interface {
	pulumi.Input

	ToTopicParametersPtrOutput() TopicParametersPtrOutput
	ToTopicParametersPtrOutputWithContext(context.Context) TopicParametersPtrOutput
}

type topicParametersPtrType TopicParametersArgs

func TopicParametersPtr(v *TopicParametersArgs) TopicParametersPtrInput {
	return (*topicParametersPtrType)(v)
}

func (*topicParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicParameters)(nil)).Elem()
}

func (i *topicParametersPtrType) ToTopicParametersPtrOutput() TopicParametersPtrOutput {
	return i.ToTopicParametersPtrOutputWithContext(context.Background())
}

func (i *topicParametersPtrType) ToTopicParametersPtrOutputWithContext(ctx context.Context) TopicParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicParametersPtrOutput)
}

type TopicParametersOutput struct{ *pulumi.OutputState }

func (TopicParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicParameters)(nil)).Elem()
}

func (o TopicParametersOutput) ToTopicParametersOutput() TopicParametersOutput {
	return o
}

func (o TopicParametersOutput) ToTopicParametersOutputWithContext(ctx context.Context) TopicParametersOutput {
	return o
}

func (o TopicParametersOutput) ToTopicParametersPtrOutput() TopicParametersPtrOutput {
	return o.ToTopicParametersPtrOutputWithContext(context.Background())
}

func (o TopicParametersOutput) ToTopicParametersPtrOutputWithContext(ctx context.Context) TopicParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicParameters) *TopicParameters {
		return &v
	}).(TopicParametersPtrOutput)
}

// The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
func (o TopicParametersOutput) LogRetentionHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicParameters) *int { return v.LogRetentionHours }).(pulumi.IntPtrOutput)
}

// The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
func (o TopicParametersOutput) MessageMaxByte() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicParameters) *int { return v.MessageMaxByte }).(pulumi.IntPtrOutput)
}

// The min number of sync replica. The default value is the replica number minus 1.
func (o TopicParametersOutput) MinInsyncReplicaNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicParameters) *int { return v.MinInsyncReplicaNumber }).(pulumi.IntPtrOutput)
}

type TopicParametersPtrOutput struct{ *pulumi.OutputState }

func (TopicParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicParameters)(nil)).Elem()
}

func (o TopicParametersPtrOutput) ToTopicParametersPtrOutput() TopicParametersPtrOutput {
	return o
}

func (o TopicParametersPtrOutput) ToTopicParametersPtrOutputWithContext(ctx context.Context) TopicParametersPtrOutput {
	return o
}

func (o TopicParametersPtrOutput) Elem() TopicParametersOutput {
	return o.ApplyT(func(v *TopicParameters) TopicParameters {
		if v != nil {
			return *v
		}
		var ret TopicParameters
		return ret
	}).(TopicParametersOutput)
}

// The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
func (o TopicParametersPtrOutput) LogRetentionHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicParameters) *int {
		if v == nil {
			return nil
		}
		return v.LogRetentionHours
	}).(pulumi.IntPtrOutput)
}

// The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
func (o TopicParametersPtrOutput) MessageMaxByte() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicParameters) *int {
		if v == nil {
			return nil
		}
		return v.MessageMaxByte
	}).(pulumi.IntPtrOutput)
}

// The min number of sync replica. The default value is the replica number minus 1.
func (o TopicParametersPtrOutput) MinInsyncReplicaNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicParameters) *int {
		if v == nil {
			return nil
		}
		return v.MinInsyncReplicaNumber
	}).(pulumi.IntPtrOutput)
}

type TopicPartitionsPartition struct {
	// The end offset of partition leader.
	EndOffset int `pulumi:"endOffset"`
	// The insync replica info.
	InsyncReplicas []int `pulumi:"insyncReplicas"`
	// The leader info of partition.
	Leader int `pulumi:"leader"`
	// The count of message.
	MessageCount int `pulumi:"messageCount"`
	// The index number of partition.
	PartitionId int `pulumi:"partitionId"`
	// The replica info.
	Replicas []int `pulumi:"replicas"`
	// The start offset of partition leader.
	StartOffset int `pulumi:"startOffset"`
	// The under insync replica info.
	UnderInsyncReplicas []int `pulumi:"underInsyncReplicas"`
}

// TopicPartitionsPartitionInput is an input type that accepts TopicPartitionsPartitionArgs and TopicPartitionsPartitionOutput values.
// You can construct a concrete instance of `TopicPartitionsPartitionInput` via:
//
//	TopicPartitionsPartitionArgs{...}
type TopicPartitionsPartitionInput interface {
	pulumi.Input

	ToTopicPartitionsPartitionOutput() TopicPartitionsPartitionOutput
	ToTopicPartitionsPartitionOutputWithContext(context.Context) TopicPartitionsPartitionOutput
}

type TopicPartitionsPartitionArgs struct {
	// The end offset of partition leader.
	EndOffset pulumi.IntInput `pulumi:"endOffset"`
	// The insync replica info.
	InsyncReplicas pulumi.IntArrayInput `pulumi:"insyncReplicas"`
	// The leader info of partition.
	Leader pulumi.IntInput `pulumi:"leader"`
	// The count of message.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// The index number of partition.
	PartitionId pulumi.IntInput `pulumi:"partitionId"`
	// The replica info.
	Replicas pulumi.IntArrayInput `pulumi:"replicas"`
	// The start offset of partition leader.
	StartOffset pulumi.IntInput `pulumi:"startOffset"`
	// The under insync replica info.
	UnderInsyncReplicas pulumi.IntArrayInput `pulumi:"underInsyncReplicas"`
}

func (TopicPartitionsPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPartitionsPartition)(nil)).Elem()
}

func (i TopicPartitionsPartitionArgs) ToTopicPartitionsPartitionOutput() TopicPartitionsPartitionOutput {
	return i.ToTopicPartitionsPartitionOutputWithContext(context.Background())
}

func (i TopicPartitionsPartitionArgs) ToTopicPartitionsPartitionOutputWithContext(ctx context.Context) TopicPartitionsPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPartitionsPartitionOutput)
}

// TopicPartitionsPartitionArrayInput is an input type that accepts TopicPartitionsPartitionArray and TopicPartitionsPartitionArrayOutput values.
// You can construct a concrete instance of `TopicPartitionsPartitionArrayInput` via:
//
//	TopicPartitionsPartitionArray{ TopicPartitionsPartitionArgs{...} }
type TopicPartitionsPartitionArrayInput interface {
	pulumi.Input

	ToTopicPartitionsPartitionArrayOutput() TopicPartitionsPartitionArrayOutput
	ToTopicPartitionsPartitionArrayOutputWithContext(context.Context) TopicPartitionsPartitionArrayOutput
}

type TopicPartitionsPartitionArray []TopicPartitionsPartitionInput

func (TopicPartitionsPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicPartitionsPartition)(nil)).Elem()
}

func (i TopicPartitionsPartitionArray) ToTopicPartitionsPartitionArrayOutput() TopicPartitionsPartitionArrayOutput {
	return i.ToTopicPartitionsPartitionArrayOutputWithContext(context.Background())
}

func (i TopicPartitionsPartitionArray) ToTopicPartitionsPartitionArrayOutputWithContext(ctx context.Context) TopicPartitionsPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPartitionsPartitionArrayOutput)
}

type TopicPartitionsPartitionOutput struct{ *pulumi.OutputState }

func (TopicPartitionsPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPartitionsPartition)(nil)).Elem()
}

func (o TopicPartitionsPartitionOutput) ToTopicPartitionsPartitionOutput() TopicPartitionsPartitionOutput {
	return o
}

func (o TopicPartitionsPartitionOutput) ToTopicPartitionsPartitionOutputWithContext(ctx context.Context) TopicPartitionsPartitionOutput {
	return o
}

// The end offset of partition leader.
func (o TopicPartitionsPartitionOutput) EndOffset() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.EndOffset }).(pulumi.IntOutput)
}

// The insync replica info.
func (o TopicPartitionsPartitionOutput) InsyncReplicas() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) []int { return v.InsyncReplicas }).(pulumi.IntArrayOutput)
}

// The leader info of partition.
func (o TopicPartitionsPartitionOutput) Leader() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.Leader }).(pulumi.IntOutput)
}

// The count of message.
func (o TopicPartitionsPartitionOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.MessageCount }).(pulumi.IntOutput)
}

// The index number of partition.
func (o TopicPartitionsPartitionOutput) PartitionId() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.PartitionId }).(pulumi.IntOutput)
}

// The replica info.
func (o TopicPartitionsPartitionOutput) Replicas() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) []int { return v.Replicas }).(pulumi.IntArrayOutput)
}

// The start offset of partition leader.
func (o TopicPartitionsPartitionOutput) StartOffset() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.StartOffset }).(pulumi.IntOutput)
}

// The under insync replica info.
func (o TopicPartitionsPartitionOutput) UnderInsyncReplicas() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) []int { return v.UnderInsyncReplicas }).(pulumi.IntArrayOutput)
}

type TopicPartitionsPartitionArrayOutput struct{ *pulumi.OutputState }

func (TopicPartitionsPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicPartitionsPartition)(nil)).Elem()
}

func (o TopicPartitionsPartitionArrayOutput) ToTopicPartitionsPartitionArrayOutput() TopicPartitionsPartitionArrayOutput {
	return o
}

func (o TopicPartitionsPartitionArrayOutput) ToTopicPartitionsPartitionArrayOutputWithContext(ctx context.Context) TopicPartitionsPartitionArrayOutput {
	return o
}

func (o TopicPartitionsPartitionArrayOutput) Index(i pulumi.IntInput) TopicPartitionsPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicPartitionsPartition {
		return vs[0].([]TopicPartitionsPartition)[vs[1].(int)]
	}).(TopicPartitionsPartitionOutput)
}

type TopicsTopic struct {
	// The access policies info of the kafka topic.
	AccessPolicies []TopicsTopicAccessPolicy `pulumi:"accessPolicies"`
	// Whether the kafka topic is configured to be accessible by all users.
	AllAuthority bool `pulumi:"allAuthority"`
	// The create time of the kafka topic.
	CreateTime string `pulumi:"createTime"`
	// The description of the kafka topic.
	Description string `pulumi:"description"`
	// The parameters of the kafka topic.
	Parameters TopicsTopicParameters `pulumi:"parameters"`
	// The number of partition in kafka topic.
	PartitionNumber int `pulumi:"partitionNumber"`
	// The number of replica in kafka topic.
	ReplicaNumber int `pulumi:"replicaNumber"`
	// The status of the kafka topic.
	Status string `pulumi:"status"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName string `pulumi:"topicName"`
}

// TopicsTopicInput is an input type that accepts TopicsTopicArgs and TopicsTopicOutput values.
// You can construct a concrete instance of `TopicsTopicInput` via:
//
//	TopicsTopicArgs{...}
type TopicsTopicInput interface {
	pulumi.Input

	ToTopicsTopicOutput() TopicsTopicOutput
	ToTopicsTopicOutputWithContext(context.Context) TopicsTopicOutput
}

type TopicsTopicArgs struct {
	// The access policies info of the kafka topic.
	AccessPolicies TopicsTopicAccessPolicyArrayInput `pulumi:"accessPolicies"`
	// Whether the kafka topic is configured to be accessible by all users.
	AllAuthority pulumi.BoolInput `pulumi:"allAuthority"`
	// The create time of the kafka topic.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the kafka topic.
	Description pulumi.StringInput `pulumi:"description"`
	// The parameters of the kafka topic.
	Parameters TopicsTopicParametersInput `pulumi:"parameters"`
	// The number of partition in kafka topic.
	PartitionNumber pulumi.IntInput `pulumi:"partitionNumber"`
	// The number of replica in kafka topic.
	ReplicaNumber pulumi.IntInput `pulumi:"replicaNumber"`
	// The status of the kafka topic.
	Status pulumi.StringInput `pulumi:"status"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (TopicsTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopic)(nil)).Elem()
}

func (i TopicsTopicArgs) ToTopicsTopicOutput() TopicsTopicOutput {
	return i.ToTopicsTopicOutputWithContext(context.Background())
}

func (i TopicsTopicArgs) ToTopicsTopicOutputWithContext(ctx context.Context) TopicsTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicOutput)
}

// TopicsTopicArrayInput is an input type that accepts TopicsTopicArray and TopicsTopicArrayOutput values.
// You can construct a concrete instance of `TopicsTopicArrayInput` via:
//
//	TopicsTopicArray{ TopicsTopicArgs{...} }
type TopicsTopicArrayInput interface {
	pulumi.Input

	ToTopicsTopicArrayOutput() TopicsTopicArrayOutput
	ToTopicsTopicArrayOutputWithContext(context.Context) TopicsTopicArrayOutput
}

type TopicsTopicArray []TopicsTopicInput

func (TopicsTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsTopic)(nil)).Elem()
}

func (i TopicsTopicArray) ToTopicsTopicArrayOutput() TopicsTopicArrayOutput {
	return i.ToTopicsTopicArrayOutputWithContext(context.Background())
}

func (i TopicsTopicArray) ToTopicsTopicArrayOutputWithContext(ctx context.Context) TopicsTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicArrayOutput)
}

type TopicsTopicOutput struct{ *pulumi.OutputState }

func (TopicsTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopic)(nil)).Elem()
}

func (o TopicsTopicOutput) ToTopicsTopicOutput() TopicsTopicOutput {
	return o
}

func (o TopicsTopicOutput) ToTopicsTopicOutputWithContext(ctx context.Context) TopicsTopicOutput {
	return o
}

// The access policies info of the kafka topic.
func (o TopicsTopicOutput) AccessPolicies() TopicsTopicAccessPolicyArrayOutput {
	return o.ApplyT(func(v TopicsTopic) []TopicsTopicAccessPolicy { return v.AccessPolicies }).(TopicsTopicAccessPolicyArrayOutput)
}

// Whether the kafka topic is configured to be accessible by all users.
func (o TopicsTopicOutput) AllAuthority() pulumi.BoolOutput {
	return o.ApplyT(func(v TopicsTopic) bool { return v.AllAuthority }).(pulumi.BoolOutput)
}

// The create time of the kafka topic.
func (o TopicsTopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopic) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the kafka topic.
func (o TopicsTopicOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopic) string { return v.Description }).(pulumi.StringOutput)
}

// The parameters of the kafka topic.
func (o TopicsTopicOutput) Parameters() TopicsTopicParametersOutput {
	return o.ApplyT(func(v TopicsTopic) TopicsTopicParameters { return v.Parameters }).(TopicsTopicParametersOutput)
}

// The number of partition in kafka topic.
func (o TopicsTopicOutput) PartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopic) int { return v.PartitionNumber }).(pulumi.IntOutput)
}

// The number of replica in kafka topic.
func (o TopicsTopicOutput) ReplicaNumber() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopic) int { return v.ReplicaNumber }).(pulumi.IntOutput)
}

// The status of the kafka topic.
func (o TopicsTopicOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopic) string { return v.Status }).(pulumi.StringOutput)
}

// The name of kafka topic. This field supports fuzzy query.
func (o TopicsTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type TopicsTopicArrayOutput struct{ *pulumi.OutputState }

func (TopicsTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsTopic)(nil)).Elem()
}

func (o TopicsTopicArrayOutput) ToTopicsTopicArrayOutput() TopicsTopicArrayOutput {
	return o
}

func (o TopicsTopicArrayOutput) ToTopicsTopicArrayOutputWithContext(ctx context.Context) TopicsTopicArrayOutput {
	return o
}

func (o TopicsTopicArrayOutput) Index(i pulumi.IntInput) TopicsTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicsTopic {
		return vs[0].([]TopicsTopic)[vs[1].(int)]
	}).(TopicsTopicOutput)
}

type TopicsTopicAccessPolicy struct {
	// The access policy of SASL user.
	AccessPolicy string `pulumi:"accessPolicy"`
	// When a user name is specified, only the access policy of the specified user for this Topic will be returned.
	UserName string `pulumi:"userName"`
}

// TopicsTopicAccessPolicyInput is an input type that accepts TopicsTopicAccessPolicyArgs and TopicsTopicAccessPolicyOutput values.
// You can construct a concrete instance of `TopicsTopicAccessPolicyInput` via:
//
//	TopicsTopicAccessPolicyArgs{...}
type TopicsTopicAccessPolicyInput interface {
	pulumi.Input

	ToTopicsTopicAccessPolicyOutput() TopicsTopicAccessPolicyOutput
	ToTopicsTopicAccessPolicyOutputWithContext(context.Context) TopicsTopicAccessPolicyOutput
}

type TopicsTopicAccessPolicyArgs struct {
	// The access policy of SASL user.
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	// When a user name is specified, only the access policy of the specified user for this Topic will be returned.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (TopicsTopicAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopicAccessPolicy)(nil)).Elem()
}

func (i TopicsTopicAccessPolicyArgs) ToTopicsTopicAccessPolicyOutput() TopicsTopicAccessPolicyOutput {
	return i.ToTopicsTopicAccessPolicyOutputWithContext(context.Background())
}

func (i TopicsTopicAccessPolicyArgs) ToTopicsTopicAccessPolicyOutputWithContext(ctx context.Context) TopicsTopicAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicAccessPolicyOutput)
}

// TopicsTopicAccessPolicyArrayInput is an input type that accepts TopicsTopicAccessPolicyArray and TopicsTopicAccessPolicyArrayOutput values.
// You can construct a concrete instance of `TopicsTopicAccessPolicyArrayInput` via:
//
//	TopicsTopicAccessPolicyArray{ TopicsTopicAccessPolicyArgs{...} }
type TopicsTopicAccessPolicyArrayInput interface {
	pulumi.Input

	ToTopicsTopicAccessPolicyArrayOutput() TopicsTopicAccessPolicyArrayOutput
	ToTopicsTopicAccessPolicyArrayOutputWithContext(context.Context) TopicsTopicAccessPolicyArrayOutput
}

type TopicsTopicAccessPolicyArray []TopicsTopicAccessPolicyInput

func (TopicsTopicAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsTopicAccessPolicy)(nil)).Elem()
}

func (i TopicsTopicAccessPolicyArray) ToTopicsTopicAccessPolicyArrayOutput() TopicsTopicAccessPolicyArrayOutput {
	return i.ToTopicsTopicAccessPolicyArrayOutputWithContext(context.Background())
}

func (i TopicsTopicAccessPolicyArray) ToTopicsTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicsTopicAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicAccessPolicyArrayOutput)
}

type TopicsTopicAccessPolicyOutput struct{ *pulumi.OutputState }

func (TopicsTopicAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopicAccessPolicy)(nil)).Elem()
}

func (o TopicsTopicAccessPolicyOutput) ToTopicsTopicAccessPolicyOutput() TopicsTopicAccessPolicyOutput {
	return o
}

func (o TopicsTopicAccessPolicyOutput) ToTopicsTopicAccessPolicyOutputWithContext(ctx context.Context) TopicsTopicAccessPolicyOutput {
	return o
}

// The access policy of SASL user.
func (o TopicsTopicAccessPolicyOutput) AccessPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopicAccessPolicy) string { return v.AccessPolicy }).(pulumi.StringOutput)
}

// When a user name is specified, only the access policy of the specified user for this Topic will be returned.
func (o TopicsTopicAccessPolicyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopicAccessPolicy) string { return v.UserName }).(pulumi.StringOutput)
}

type TopicsTopicAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (TopicsTopicAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsTopicAccessPolicy)(nil)).Elem()
}

func (o TopicsTopicAccessPolicyArrayOutput) ToTopicsTopicAccessPolicyArrayOutput() TopicsTopicAccessPolicyArrayOutput {
	return o
}

func (o TopicsTopicAccessPolicyArrayOutput) ToTopicsTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicsTopicAccessPolicyArrayOutput {
	return o
}

func (o TopicsTopicAccessPolicyArrayOutput) Index(i pulumi.IntInput) TopicsTopicAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicsTopicAccessPolicy {
		return vs[0].([]TopicsTopicAccessPolicy)[vs[1].(int)]
	}).(TopicsTopicAccessPolicyOutput)
}

type TopicsTopicParameters struct {
	// The retention hours of log.
	LogRetentionHours int `pulumi:"logRetentionHours"`
	// The max byte of message.
	MessageMaxByte int `pulumi:"messageMaxByte"`
	// The min number of sync replica.
	MinInsyncReplicaNumber int `pulumi:"minInsyncReplicaNumber"`
}

// TopicsTopicParametersInput is an input type that accepts TopicsTopicParametersArgs and TopicsTopicParametersOutput values.
// You can construct a concrete instance of `TopicsTopicParametersInput` via:
//
//	TopicsTopicParametersArgs{...}
type TopicsTopicParametersInput interface {
	pulumi.Input

	ToTopicsTopicParametersOutput() TopicsTopicParametersOutput
	ToTopicsTopicParametersOutputWithContext(context.Context) TopicsTopicParametersOutput
}

type TopicsTopicParametersArgs struct {
	// The retention hours of log.
	LogRetentionHours pulumi.IntInput `pulumi:"logRetentionHours"`
	// The max byte of message.
	MessageMaxByte pulumi.IntInput `pulumi:"messageMaxByte"`
	// The min number of sync replica.
	MinInsyncReplicaNumber pulumi.IntInput `pulumi:"minInsyncReplicaNumber"`
}

func (TopicsTopicParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopicParameters)(nil)).Elem()
}

func (i TopicsTopicParametersArgs) ToTopicsTopicParametersOutput() TopicsTopicParametersOutput {
	return i.ToTopicsTopicParametersOutputWithContext(context.Background())
}

func (i TopicsTopicParametersArgs) ToTopicsTopicParametersOutputWithContext(ctx context.Context) TopicsTopicParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicParametersOutput)
}

type TopicsTopicParametersOutput struct{ *pulumi.OutputState }

func (TopicsTopicParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopicParameters)(nil)).Elem()
}

func (o TopicsTopicParametersOutput) ToTopicsTopicParametersOutput() TopicsTopicParametersOutput {
	return o
}

func (o TopicsTopicParametersOutput) ToTopicsTopicParametersOutputWithContext(ctx context.Context) TopicsTopicParametersOutput {
	return o
}

// The retention hours of log.
func (o TopicsTopicParametersOutput) LogRetentionHours() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopicParameters) int { return v.LogRetentionHours }).(pulumi.IntOutput)
}

// The max byte of message.
func (o TopicsTopicParametersOutput) MessageMaxByte() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopicParameters) int { return v.MessageMaxByte }).(pulumi.IntOutput)
}

// The min number of sync replica.
func (o TopicsTopicParametersOutput) MinInsyncReplicaNumber() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopicParameters) int { return v.MinInsyncReplicaNumber }).(pulumi.IntOutput)
}

type ZonesZone struct {
	// The description of the zone.
	Description string `pulumi:"description"`
	// The id of the zone.
	Id string `pulumi:"id"`
	// The status of the zone.
	Status string `pulumi:"status"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName string `pulumi:"zoneName"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//	ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The description of the zone.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The status of the zone.
	Status pulumi.StringInput `pulumi:"status"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//	ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The description of the zone.
func (o ZonesZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The status of the zone.
func (o ZonesZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Status }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

// The name of the zone.
func (o ZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumedPartitionsConsumedPartitionInput)(nil)).Elem(), ConsumedPartitionsConsumedPartitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumedPartitionsConsumedPartitionArrayInput)(nil)).Elem(), ConsumedPartitionsConsumedPartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumedTopicsConsumedTopicInput)(nil)).Elem(), ConsumedTopicsConsumedTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumedTopicsConsumedTopicArrayInput)(nil)).Elem(), ConsumedTopicsConsumedTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsGroupInput)(nil)).Elem(), GroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsGroupArrayInput)(nil)).Elem(), GroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterInput)(nil)).Elem(), InstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterArrayInput)(nil)).Elem(), InstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceInput)(nil)).Elem(), InstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceArrayInput)(nil)).Elem(), InstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConnectionInfoInput)(nil)).Elem(), InstancesInstanceConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConnectionInfoArrayInput)(nil)).Elem(), InstancesInstanceConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceParameterInput)(nil)).Elem(), InstancesInstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceParameterArrayInput)(nil)).Elem(), InstancesInstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagInput)(nil)).Elem(), InstancesInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagArrayInput)(nil)).Elem(), InstancesInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionInput)(nil)).Elem(), RegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionArrayInput)(nil)).Elem(), RegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaslUsersUserInput)(nil)).Elem(), SaslUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaslUsersUserArrayInput)(nil)).Elem(), SaslUsersUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicAccessPolicyInput)(nil)).Elem(), TopicAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicAccessPolicyArrayInput)(nil)).Elem(), TopicAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicParametersInput)(nil)).Elem(), TopicParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicParametersPtrInput)(nil)).Elem(), TopicParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPartitionsPartitionInput)(nil)).Elem(), TopicPartitionsPartitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPartitionsPartitionArrayInput)(nil)).Elem(), TopicPartitionsPartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicInput)(nil)).Elem(), TopicsTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicArrayInput)(nil)).Elem(), TopicsTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicAccessPolicyInput)(nil)).Elem(), TopicsTopicAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicAccessPolicyArrayInput)(nil)).Elem(), TopicsTopicAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicParametersInput)(nil)).Elem(), TopicsTopicParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterOutputType(ConsumedPartitionsConsumedPartitionOutput{})
	pulumi.RegisterOutputType(ConsumedPartitionsConsumedPartitionArrayOutput{})
	pulumi.RegisterOutputType(ConsumedTopicsConsumedTopicOutput{})
	pulumi.RegisterOutputType(ConsumedTopicsConsumedTopicArrayOutput{})
	pulumi.RegisterOutputType(GroupsGroupOutput{})
	pulumi.RegisterOutputType(GroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(InstanceParameterOutput{})
	pulumi.RegisterOutputType(InstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConnectionInfoOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceParameterOutput{})
	pulumi.RegisterOutputType(InstancesInstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(RegionsRegionOutput{})
	pulumi.RegisterOutputType(RegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(SaslUsersUserOutput{})
	pulumi.RegisterOutputType(SaslUsersUserArrayOutput{})
	pulumi.RegisterOutputType(TopicAccessPolicyOutput{})
	pulumi.RegisterOutputType(TopicAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(TopicParametersOutput{})
	pulumi.RegisterOutputType(TopicParametersPtrOutput{})
	pulumi.RegisterOutputType(TopicPartitionsPartitionOutput{})
	pulumi.RegisterOutputType(TopicPartitionsPartitionArrayOutput{})
	pulumi.RegisterOutputType(TopicsTopicOutput{})
	pulumi.RegisterOutputType(TopicsTopicArrayOutput{})
	pulumi.RegisterOutputType(TopicsTopicAccessPolicyOutput{})
	pulumi.RegisterOutputType(TopicsTopicAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(TopicsTopicParametersOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
}
