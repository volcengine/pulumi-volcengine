// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type AllowListsAllowList struct {
	// The description of the allow list.
	AllowListDesc string `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId string `pulumi:"allowListId"`
	// The number of rules specified in the whitelist.
	AllowListIpNum int `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName string `pulumi:"allowListName"`
	// Whitelist rule list.
	AllowLists []string `pulumi:"allowLists"`
	// The number of instances bound to the whitelist.
	AssociatedInstanceNum int `pulumi:"associatedInstanceNum"`
	// The list of associated instances.
	AssociatedInstances []AllowListsAllowListAssociatedInstance `pulumi:"associatedInstances"`
}

// AllowListsAllowListInput is an input type that accepts AllowListsAllowListArgs and AllowListsAllowListOutput values.
// You can construct a concrete instance of `AllowListsAllowListInput` via:
//
//	AllowListsAllowListArgs{...}
type AllowListsAllowListInput interface {
	pulumi.Input

	ToAllowListsAllowListOutput() AllowListsAllowListOutput
	ToAllowListsAllowListOutputWithContext(context.Context) AllowListsAllowListOutput
}

type AllowListsAllowListArgs struct {
	// The description of the allow list.
	AllowListDesc pulumi.StringInput `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId pulumi.StringInput `pulumi:"allowListId"`
	// The number of rules specified in the whitelist.
	AllowListIpNum pulumi.IntInput `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName pulumi.StringInput `pulumi:"allowListName"`
	// Whitelist rule list.
	AllowLists pulumi.StringArrayInput `pulumi:"allowLists"`
	// The number of instances bound to the whitelist.
	AssociatedInstanceNum pulumi.IntInput `pulumi:"associatedInstanceNum"`
	// The list of associated instances.
	AssociatedInstances AllowListsAllowListAssociatedInstanceArrayInput `pulumi:"associatedInstances"`
}

func (AllowListsAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowListsAllowList)(nil)).Elem()
}

func (i AllowListsAllowListArgs) ToAllowListsAllowListOutput() AllowListsAllowListOutput {
	return i.ToAllowListsAllowListOutputWithContext(context.Background())
}

func (i AllowListsAllowListArgs) ToAllowListsAllowListOutputWithContext(ctx context.Context) AllowListsAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListsAllowListOutput)
}

// AllowListsAllowListArrayInput is an input type that accepts AllowListsAllowListArray and AllowListsAllowListArrayOutput values.
// You can construct a concrete instance of `AllowListsAllowListArrayInput` via:
//
//	AllowListsAllowListArray{ AllowListsAllowListArgs{...} }
type AllowListsAllowListArrayInput interface {
	pulumi.Input

	ToAllowListsAllowListArrayOutput() AllowListsAllowListArrayOutput
	ToAllowListsAllowListArrayOutputWithContext(context.Context) AllowListsAllowListArrayOutput
}

type AllowListsAllowListArray []AllowListsAllowListInput

func (AllowListsAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowListsAllowList)(nil)).Elem()
}

func (i AllowListsAllowListArray) ToAllowListsAllowListArrayOutput() AllowListsAllowListArrayOutput {
	return i.ToAllowListsAllowListArrayOutputWithContext(context.Background())
}

func (i AllowListsAllowListArray) ToAllowListsAllowListArrayOutputWithContext(ctx context.Context) AllowListsAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListsAllowListArrayOutput)
}

type AllowListsAllowListOutput struct{ *pulumi.OutputState }

func (AllowListsAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowListsAllowList)(nil)).Elem()
}

func (o AllowListsAllowListOutput) ToAllowListsAllowListOutput() AllowListsAllowListOutput {
	return o
}

func (o AllowListsAllowListOutput) ToAllowListsAllowListOutputWithContext(ctx context.Context) AllowListsAllowListOutput {
	return o
}

// The description of the allow list.
func (o AllowListsAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsAllowList) string { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The id of the allow list.
func (o AllowListsAllowListOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsAllowList) string { return v.AllowListId }).(pulumi.StringOutput)
}

// The number of rules specified in the whitelist.
func (o AllowListsAllowListOutput) AllowListIpNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowListsAllowList) int { return v.AllowListIpNum }).(pulumi.IntOutput)
}

// The name of the allow list.
func (o AllowListsAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsAllowList) string { return v.AllowListName }).(pulumi.StringOutput)
}

// Whitelist rule list.
func (o AllowListsAllowListOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowListsAllowList) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The number of instances bound to the whitelist.
func (o AllowListsAllowListOutput) AssociatedInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowListsAllowList) int { return v.AssociatedInstanceNum }).(pulumi.IntOutput)
}

// The list of associated instances.
func (o AllowListsAllowListOutput) AssociatedInstances() AllowListsAllowListAssociatedInstanceArrayOutput {
	return o.ApplyT(func(v AllowListsAllowList) []AllowListsAllowListAssociatedInstance { return v.AssociatedInstances }).(AllowListsAllowListAssociatedInstanceArrayOutput)
}

type AllowListsAllowListArrayOutput struct{ *pulumi.OutputState }

func (AllowListsAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowListsAllowList)(nil)).Elem()
}

func (o AllowListsAllowListArrayOutput) ToAllowListsAllowListArrayOutput() AllowListsAllowListArrayOutput {
	return o
}

func (o AllowListsAllowListArrayOutput) ToAllowListsAllowListArrayOutputWithContext(ctx context.Context) AllowListsAllowListArrayOutput {
	return o
}

func (o AllowListsAllowListArrayOutput) Index(i pulumi.IntInput) AllowListsAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowListsAllowList {
		return vs[0].([]AllowListsAllowList)[vs[1].(int)]
	}).(AllowListsAllowListOutput)
}

type AllowListsAllowListAssociatedInstance struct {
	// The instance ID to query.
	InstanceId string `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
}

// AllowListsAllowListAssociatedInstanceInput is an input type that accepts AllowListsAllowListAssociatedInstanceArgs and AllowListsAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `AllowListsAllowListAssociatedInstanceInput` via:
//
//	AllowListsAllowListAssociatedInstanceArgs{...}
type AllowListsAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToAllowListsAllowListAssociatedInstanceOutput() AllowListsAllowListAssociatedInstanceOutput
	ToAllowListsAllowListAssociatedInstanceOutputWithContext(context.Context) AllowListsAllowListAssociatedInstanceOutput
}

type AllowListsAllowListAssociatedInstanceArgs struct {
	// The instance ID to query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
}

func (AllowListsAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowListsAllowListAssociatedInstanceArgs) ToAllowListsAllowListAssociatedInstanceOutput() AllowListsAllowListAssociatedInstanceOutput {
	return i.ToAllowListsAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i AllowListsAllowListAssociatedInstanceArgs) ToAllowListsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowListsAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListsAllowListAssociatedInstanceOutput)
}

// AllowListsAllowListAssociatedInstanceArrayInput is an input type that accepts AllowListsAllowListAssociatedInstanceArray and AllowListsAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `AllowListsAllowListAssociatedInstanceArrayInput` via:
//
//	AllowListsAllowListAssociatedInstanceArray{ AllowListsAllowListAssociatedInstanceArgs{...} }
type AllowListsAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToAllowListsAllowListAssociatedInstanceArrayOutput() AllowListsAllowListAssociatedInstanceArrayOutput
	ToAllowListsAllowListAssociatedInstanceArrayOutputWithContext(context.Context) AllowListsAllowListAssociatedInstanceArrayOutput
}

type AllowListsAllowListAssociatedInstanceArray []AllowListsAllowListAssociatedInstanceInput

func (AllowListsAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowListsAllowListAssociatedInstanceArray) ToAllowListsAllowListAssociatedInstanceArrayOutput() AllowListsAllowListAssociatedInstanceArrayOutput {
	return i.ToAllowListsAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i AllowListsAllowListAssociatedInstanceArray) ToAllowListsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowListsAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListsAllowListAssociatedInstanceArrayOutput)
}

type AllowListsAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (AllowListsAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowListsAllowListAssociatedInstanceOutput) ToAllowListsAllowListAssociatedInstanceOutput() AllowListsAllowListAssociatedInstanceOutput {
	return o
}

func (o AllowListsAllowListAssociatedInstanceOutput) ToAllowListsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowListsAllowListAssociatedInstanceOutput {
	return o
}

// The instance ID to query.
func (o AllowListsAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsAllowListAssociatedInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the instance.
func (o AllowListsAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsAllowListAssociatedInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

type AllowListsAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (AllowListsAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowListsAllowListAssociatedInstanceArrayOutput) ToAllowListsAllowListAssociatedInstanceArrayOutput() AllowListsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowListsAllowListAssociatedInstanceArrayOutput) ToAllowListsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowListsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowListsAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) AllowListsAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowListsAllowListAssociatedInstance {
		return vs[0].([]AllowListsAllowListAssociatedInstance)[vs[1].(int)]
	}).(AllowListsAllowListAssociatedInstanceOutput)
}

type ConsumedPartitionsConsumedPartition struct {
	// The total amount of message accumulation in this topic partition for the consumer group.
	Accumulation int `pulumi:"accumulation"`
	// The consumed client info of partition.
	ConsumedClient string `pulumi:"consumedClient"`
	// The consumed offset of partition.
	ConsumedOffset int `pulumi:"consumedOffset"`
	// The end offset of partition.
	EndOffset int `pulumi:"endOffset"`
	// The index number of partition.
	PartitionId int `pulumi:"partitionId"`
	// The start offset of partition.
	StartOffset int `pulumi:"startOffset"`
}

// ConsumedPartitionsConsumedPartitionInput is an input type that accepts ConsumedPartitionsConsumedPartitionArgs and ConsumedPartitionsConsumedPartitionOutput values.
// You can construct a concrete instance of `ConsumedPartitionsConsumedPartitionInput` via:
//
//	ConsumedPartitionsConsumedPartitionArgs{...}
type ConsumedPartitionsConsumedPartitionInput interface {
	pulumi.Input

	ToConsumedPartitionsConsumedPartitionOutput() ConsumedPartitionsConsumedPartitionOutput
	ToConsumedPartitionsConsumedPartitionOutputWithContext(context.Context) ConsumedPartitionsConsumedPartitionOutput
}

type ConsumedPartitionsConsumedPartitionArgs struct {
	// The total amount of message accumulation in this topic partition for the consumer group.
	Accumulation pulumi.IntInput `pulumi:"accumulation"`
	// The consumed client info of partition.
	ConsumedClient pulumi.StringInput `pulumi:"consumedClient"`
	// The consumed offset of partition.
	ConsumedOffset pulumi.IntInput `pulumi:"consumedOffset"`
	// The end offset of partition.
	EndOffset pulumi.IntInput `pulumi:"endOffset"`
	// The index number of partition.
	PartitionId pulumi.IntInput `pulumi:"partitionId"`
	// The start offset of partition.
	StartOffset pulumi.IntInput `pulumi:"startOffset"`
}

func (ConsumedPartitionsConsumedPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (i ConsumedPartitionsConsumedPartitionArgs) ToConsumedPartitionsConsumedPartitionOutput() ConsumedPartitionsConsumedPartitionOutput {
	return i.ToConsumedPartitionsConsumedPartitionOutputWithContext(context.Background())
}

func (i ConsumedPartitionsConsumedPartitionArgs) ToConsumedPartitionsConsumedPartitionOutputWithContext(ctx context.Context) ConsumedPartitionsConsumedPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumedPartitionsConsumedPartitionOutput)
}

// ConsumedPartitionsConsumedPartitionArrayInput is an input type that accepts ConsumedPartitionsConsumedPartitionArray and ConsumedPartitionsConsumedPartitionArrayOutput values.
// You can construct a concrete instance of `ConsumedPartitionsConsumedPartitionArrayInput` via:
//
//	ConsumedPartitionsConsumedPartitionArray{ ConsumedPartitionsConsumedPartitionArgs{...} }
type ConsumedPartitionsConsumedPartitionArrayInput interface {
	pulumi.Input

	ToConsumedPartitionsConsumedPartitionArrayOutput() ConsumedPartitionsConsumedPartitionArrayOutput
	ToConsumedPartitionsConsumedPartitionArrayOutputWithContext(context.Context) ConsumedPartitionsConsumedPartitionArrayOutput
}

type ConsumedPartitionsConsumedPartitionArray []ConsumedPartitionsConsumedPartitionInput

func (ConsumedPartitionsConsumedPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (i ConsumedPartitionsConsumedPartitionArray) ToConsumedPartitionsConsumedPartitionArrayOutput() ConsumedPartitionsConsumedPartitionArrayOutput {
	return i.ToConsumedPartitionsConsumedPartitionArrayOutputWithContext(context.Background())
}

func (i ConsumedPartitionsConsumedPartitionArray) ToConsumedPartitionsConsumedPartitionArrayOutputWithContext(ctx context.Context) ConsumedPartitionsConsumedPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumedPartitionsConsumedPartitionArrayOutput)
}

type ConsumedPartitionsConsumedPartitionOutput struct{ *pulumi.OutputState }

func (ConsumedPartitionsConsumedPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (o ConsumedPartitionsConsumedPartitionOutput) ToConsumedPartitionsConsumedPartitionOutput() ConsumedPartitionsConsumedPartitionOutput {
	return o
}

func (o ConsumedPartitionsConsumedPartitionOutput) ToConsumedPartitionsConsumedPartitionOutputWithContext(ctx context.Context) ConsumedPartitionsConsumedPartitionOutput {
	return o
}

// The total amount of message accumulation in this topic partition for the consumer group.
func (o ConsumedPartitionsConsumedPartitionOutput) Accumulation() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.Accumulation }).(pulumi.IntOutput)
}

// The consumed client info of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) ConsumedClient() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) string { return v.ConsumedClient }).(pulumi.StringOutput)
}

// The consumed offset of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) ConsumedOffset() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.ConsumedOffset }).(pulumi.IntOutput)
}

// The end offset of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) EndOffset() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.EndOffset }).(pulumi.IntOutput)
}

// The index number of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) PartitionId() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.PartitionId }).(pulumi.IntOutput)
}

// The start offset of partition.
func (o ConsumedPartitionsConsumedPartitionOutput) StartOffset() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedPartitionsConsumedPartition) int { return v.StartOffset }).(pulumi.IntOutput)
}

type ConsumedPartitionsConsumedPartitionArrayOutput struct{ *pulumi.OutputState }

func (ConsumedPartitionsConsumedPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (o ConsumedPartitionsConsumedPartitionArrayOutput) ToConsumedPartitionsConsumedPartitionArrayOutput() ConsumedPartitionsConsumedPartitionArrayOutput {
	return o
}

func (o ConsumedPartitionsConsumedPartitionArrayOutput) ToConsumedPartitionsConsumedPartitionArrayOutputWithContext(ctx context.Context) ConsumedPartitionsConsumedPartitionArrayOutput {
	return o
}

func (o ConsumedPartitionsConsumedPartitionArrayOutput) Index(i pulumi.IntInput) ConsumedPartitionsConsumedPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumedPartitionsConsumedPartition {
		return vs[0].([]ConsumedPartitionsConsumedPartition)[vs[1].(int)]
	}).(ConsumedPartitionsConsumedPartitionOutput)
}

type ConsumedTopicsConsumedTopic struct {
	// The total amount of message accumulation in this topic for the consumer group.
	Accumulation int `pulumi:"accumulation"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName string `pulumi:"topicName"`
}

// ConsumedTopicsConsumedTopicInput is an input type that accepts ConsumedTopicsConsumedTopicArgs and ConsumedTopicsConsumedTopicOutput values.
// You can construct a concrete instance of `ConsumedTopicsConsumedTopicInput` via:
//
//	ConsumedTopicsConsumedTopicArgs{...}
type ConsumedTopicsConsumedTopicInput interface {
	pulumi.Input

	ToConsumedTopicsConsumedTopicOutput() ConsumedTopicsConsumedTopicOutput
	ToConsumedTopicsConsumedTopicOutputWithContext(context.Context) ConsumedTopicsConsumedTopicOutput
}

type ConsumedTopicsConsumedTopicArgs struct {
	// The total amount of message accumulation in this topic for the consumer group.
	Accumulation pulumi.IntInput `pulumi:"accumulation"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (ConsumedTopicsConsumedTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (i ConsumedTopicsConsumedTopicArgs) ToConsumedTopicsConsumedTopicOutput() ConsumedTopicsConsumedTopicOutput {
	return i.ToConsumedTopicsConsumedTopicOutputWithContext(context.Background())
}

func (i ConsumedTopicsConsumedTopicArgs) ToConsumedTopicsConsumedTopicOutputWithContext(ctx context.Context) ConsumedTopicsConsumedTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumedTopicsConsumedTopicOutput)
}

// ConsumedTopicsConsumedTopicArrayInput is an input type that accepts ConsumedTopicsConsumedTopicArray and ConsumedTopicsConsumedTopicArrayOutput values.
// You can construct a concrete instance of `ConsumedTopicsConsumedTopicArrayInput` via:
//
//	ConsumedTopicsConsumedTopicArray{ ConsumedTopicsConsumedTopicArgs{...} }
type ConsumedTopicsConsumedTopicArrayInput interface {
	pulumi.Input

	ToConsumedTopicsConsumedTopicArrayOutput() ConsumedTopicsConsumedTopicArrayOutput
	ToConsumedTopicsConsumedTopicArrayOutputWithContext(context.Context) ConsumedTopicsConsumedTopicArrayOutput
}

type ConsumedTopicsConsumedTopicArray []ConsumedTopicsConsumedTopicInput

func (ConsumedTopicsConsumedTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (i ConsumedTopicsConsumedTopicArray) ToConsumedTopicsConsumedTopicArrayOutput() ConsumedTopicsConsumedTopicArrayOutput {
	return i.ToConsumedTopicsConsumedTopicArrayOutputWithContext(context.Background())
}

func (i ConsumedTopicsConsumedTopicArray) ToConsumedTopicsConsumedTopicArrayOutputWithContext(ctx context.Context) ConsumedTopicsConsumedTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumedTopicsConsumedTopicArrayOutput)
}

type ConsumedTopicsConsumedTopicOutput struct{ *pulumi.OutputState }

func (ConsumedTopicsConsumedTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (o ConsumedTopicsConsumedTopicOutput) ToConsumedTopicsConsumedTopicOutput() ConsumedTopicsConsumedTopicOutput {
	return o
}

func (o ConsumedTopicsConsumedTopicOutput) ToConsumedTopicsConsumedTopicOutputWithContext(ctx context.Context) ConsumedTopicsConsumedTopicOutput {
	return o
}

// The total amount of message accumulation in this topic for the consumer group.
func (o ConsumedTopicsConsumedTopicOutput) Accumulation() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumedTopicsConsumedTopic) int { return v.Accumulation }).(pulumi.IntOutput)
}

// The name of kafka topic. This field supports fuzzy query.
func (o ConsumedTopicsConsumedTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumedTopicsConsumedTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type ConsumedTopicsConsumedTopicArrayOutput struct{ *pulumi.OutputState }

func (ConsumedTopicsConsumedTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (o ConsumedTopicsConsumedTopicArrayOutput) ToConsumedTopicsConsumedTopicArrayOutput() ConsumedTopicsConsumedTopicArrayOutput {
	return o
}

func (o ConsumedTopicsConsumedTopicArrayOutput) ToConsumedTopicsConsumedTopicArrayOutputWithContext(ctx context.Context) ConsumedTopicsConsumedTopicArrayOutput {
	return o
}

func (o ConsumedTopicsConsumedTopicArrayOutput) Index(i pulumi.IntInput) ConsumedTopicsConsumedTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConsumedTopicsConsumedTopic {
		return vs[0].([]ConsumedTopicsConsumedTopic)[vs[1].(int)]
	}).(ConsumedTopicsConsumedTopicOutput)
}

type GroupsGroup struct {
	// The id of kafka group, support fuzzy matching.
	GroupId string `pulumi:"groupId"`
	// The state of kafka group.
	State string `pulumi:"state"`
}

// GroupsGroupInput is an input type that accepts GroupsGroupArgs and GroupsGroupOutput values.
// You can construct a concrete instance of `GroupsGroupInput` via:
//
//	GroupsGroupArgs{...}
type GroupsGroupInput interface {
	pulumi.Input

	ToGroupsGroupOutput() GroupsGroupOutput
	ToGroupsGroupOutputWithContext(context.Context) GroupsGroupOutput
}

type GroupsGroupArgs struct {
	// The id of kafka group, support fuzzy matching.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The state of kafka group.
	State pulumi.StringInput `pulumi:"state"`
}

func (GroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsGroup)(nil)).Elem()
}

func (i GroupsGroupArgs) ToGroupsGroupOutput() GroupsGroupOutput {
	return i.ToGroupsGroupOutputWithContext(context.Background())
}

func (i GroupsGroupArgs) ToGroupsGroupOutputWithContext(ctx context.Context) GroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsGroupOutput)
}

// GroupsGroupArrayInput is an input type that accepts GroupsGroupArray and GroupsGroupArrayOutput values.
// You can construct a concrete instance of `GroupsGroupArrayInput` via:
//
//	GroupsGroupArray{ GroupsGroupArgs{...} }
type GroupsGroupArrayInput interface {
	pulumi.Input

	ToGroupsGroupArrayOutput() GroupsGroupArrayOutput
	ToGroupsGroupArrayOutputWithContext(context.Context) GroupsGroupArrayOutput
}

type GroupsGroupArray []GroupsGroupInput

func (GroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsGroup)(nil)).Elem()
}

func (i GroupsGroupArray) ToGroupsGroupArrayOutput() GroupsGroupArrayOutput {
	return i.ToGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GroupsGroupArray) ToGroupsGroupArrayOutputWithContext(ctx context.Context) GroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsGroupArrayOutput)
}

type GroupsGroupOutput struct{ *pulumi.OutputState }

func (GroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsGroup)(nil)).Elem()
}

func (o GroupsGroupOutput) ToGroupsGroupOutput() GroupsGroupOutput {
	return o
}

func (o GroupsGroupOutput) ToGroupsGroupOutputWithContext(ctx context.Context) GroupsGroupOutput {
	return o
}

// The id of kafka group, support fuzzy matching.
func (o GroupsGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsGroup) string { return v.GroupId }).(pulumi.StringOutput)
}

// The state of kafka group.
func (o GroupsGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsGroup) string { return v.State }).(pulumi.StringOutput)
}

type GroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsGroup)(nil)).Elem()
}

func (o GroupsGroupArrayOutput) ToGroupsGroupArrayOutput() GroupsGroupArrayOutput {
	return o
}

func (o GroupsGroupArrayOutput) ToGroupsGroupArrayOutputWithContext(ctx context.Context) GroupsGroupArrayOutput {
	return o
}

func (o GroupsGroupArrayOutput) Index(i pulumi.IntInput) GroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupsGroup {
		return vs[0].([]GroupsGroup)[vs[1].(int)]
	}).(GroupsGroupOutput)
}

type InstanceParameter struct {
	// Parameter name.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue string `pulumi:"parameterValue"`
}

// InstanceParameterInput is an input type that accepts InstanceParameterArgs and InstanceParameterOutput values.
// You can construct a concrete instance of `InstanceParameterInput` via:
//
//	InstanceParameterArgs{...}
type InstanceParameterInput interface {
	pulumi.Input

	ToInstanceParameterOutput() InstanceParameterOutput
	ToInstanceParameterOutputWithContext(context.Context) InstanceParameterOutput
}

type InstanceParameterArgs struct {
	// Parameter name.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (InstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArgs) ToInstanceParameterOutput() InstanceParameterOutput {
	return i.ToInstanceParameterOutputWithContext(context.Background())
}

func (i InstanceParameterArgs) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterOutput)
}

// InstanceParameterArrayInput is an input type that accepts InstanceParameterArray and InstanceParameterArrayOutput values.
// You can construct a concrete instance of `InstanceParameterArrayInput` via:
//
//	InstanceParameterArray{ InstanceParameterArgs{...} }
type InstanceParameterArrayInput interface {
	pulumi.Input

	ToInstanceParameterArrayOutput() InstanceParameterArrayOutput
	ToInstanceParameterArrayOutputWithContext(context.Context) InstanceParameterArrayOutput
}

type InstanceParameterArray []InstanceParameterInput

func (InstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return i.ToInstanceParameterArrayOutputWithContext(context.Background())
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterArrayOutput)
}

type InstanceParameterOutput struct{ *pulumi.OutputState }

func (InstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterOutput) ToInstanceParameterOutput() InstanceParameterOutput {
	return o
}

func (o InstanceParameterOutput) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return o
}

// Parameter name.
func (o InstanceParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

// Parameter value.
func (o InstanceParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type InstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (InstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) Index(i pulumi.IntInput) InstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceParameter {
		return vs[0].([]InstanceParameter)[vs[1].(int)]
	}).(InstanceParameterOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstancesInstance struct {
	// The id of account.
	AccountId string `pulumi:"accountId"`
	// The auto renew status of instance.
	AutoRenew bool `pulumi:"autoRenew"`
	// The charge expire time of instance.
	ChargeExpireTime string `pulumi:"chargeExpireTime"`
	// The charge start time of instance.
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// The charge status of instance.
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of instance.
	ChargeType string `pulumi:"chargeType"`
	// The compute spec of instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// Connection info of the instance.
	ConnectionInfos []InstancesInstanceConnectionInfo `pulumi:"connectionInfos"`
	// The create time of instance.
	CreateTime string `pulumi:"createTime"`
	// The id of eip.
	EipId string `pulumi:"eipId"`
	// The id of instance.
	Id string `pulumi:"id"`
	// The description of instance.
	InstanceDescription string `pulumi:"instanceDescription"`
	// The id of instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of instance.
	InstanceName string `pulumi:"instanceName"`
	// The status of instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The overdue reclaim time of instance.
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// The overdue time of instance.
	OverdueTime string `pulumi:"overdueTime"`
	// Parameters of the instance.
	Parameters []InstancesInstanceParameter `pulumi:"parameters"`
	// The period unit of instance.
	PeriodUnit string `pulumi:"periodUnit"`
	// Whether enable private domain on public.
	PrivateDomainOnPublic bool `pulumi:"privateDomainOnPublic"`
	// The name of project.
	ProjectName string `pulumi:"projectName"`
	// The id of region.
	RegionId string `pulumi:"regionId"`
	// The storage space of instance.
	StorageSpace int `pulumi:"storageSpace"`
	// The storage type of instance.
	StorageType string `pulumi:"storageType"`
	// The id of subnet.
	SubnetId string `pulumi:"subnetId"`
	// The tags of instance.
	Tags []InstancesInstanceTag `pulumi:"tags"`
	// The usable partition number of instance.
	UsablePartitionNumber int `pulumi:"usablePartitionNumber"`
	// The used group number of instance.
	UsedGroupNumber int `pulumi:"usedGroupNumber"`
	// The used partition number of instance.
	UsedPartitionNumber int `pulumi:"usedPartitionNumber"`
	// The used storage space of instance.
	UsedStorageSpace int `pulumi:"usedStorageSpace"`
	// The used topic number of instance.
	UsedTopicNumber int `pulumi:"usedTopicNumber"`
	// The version of instance.
	Version string `pulumi:"version"`
	// The id of vpc.
	VpcId string `pulumi:"vpcId"`
	// The zone id of instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceInput is an input type that accepts InstancesInstanceArgs and InstancesInstanceOutput values.
// You can construct a concrete instance of `InstancesInstanceInput` via:
//
//	InstancesInstanceArgs{...}
type InstancesInstanceInput interface {
	pulumi.Input

	ToInstancesInstanceOutput() InstancesInstanceOutput
	ToInstancesInstanceOutputWithContext(context.Context) InstancesInstanceOutput
}

type InstancesInstanceArgs struct {
	// The id of account.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The auto renew status of instance.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The charge expire time of instance.
	ChargeExpireTime pulumi.StringInput `pulumi:"chargeExpireTime"`
	// The charge start time of instance.
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// The charge status of instance.
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The compute spec of instance.
	ComputeSpec pulumi.StringInput `pulumi:"computeSpec"`
	// Connection info of the instance.
	ConnectionInfos InstancesInstanceConnectionInfoArrayInput `pulumi:"connectionInfos"`
	// The create time of instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The id of eip.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The id of instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The description of instance.
	InstanceDescription pulumi.StringInput `pulumi:"instanceDescription"`
	// The id of instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The overdue reclaim time of instance.
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// The overdue time of instance.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Parameters of the instance.
	Parameters InstancesInstanceParameterArrayInput `pulumi:"parameters"`
	// The period unit of instance.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
	// Whether enable private domain on public.
	PrivateDomainOnPublic pulumi.BoolInput `pulumi:"privateDomainOnPublic"`
	// The name of project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The id of region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The storage space of instance.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// The storage type of instance.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The id of subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The tags of instance.
	Tags InstancesInstanceTagArrayInput `pulumi:"tags"`
	// The usable partition number of instance.
	UsablePartitionNumber pulumi.IntInput `pulumi:"usablePartitionNumber"`
	// The used group number of instance.
	UsedGroupNumber pulumi.IntInput `pulumi:"usedGroupNumber"`
	// The used partition number of instance.
	UsedPartitionNumber pulumi.IntInput `pulumi:"usedPartitionNumber"`
	// The used storage space of instance.
	UsedStorageSpace pulumi.IntInput `pulumi:"usedStorageSpace"`
	// The used topic number of instance.
	UsedTopicNumber pulumi.IntInput `pulumi:"usedTopicNumber"`
	// The version of instance.
	Version pulumi.StringInput `pulumi:"version"`
	// The id of vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone id of instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return i.ToInstancesInstanceOutputWithContext(context.Background())
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceOutput)
}

// InstancesInstanceArrayInput is an input type that accepts InstancesInstanceArray and InstancesInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceArrayInput` via:
//
//	InstancesInstanceArray{ InstancesInstanceArgs{...} }
type InstancesInstanceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput
	ToInstancesInstanceArrayOutputWithContext(context.Context) InstancesInstanceArrayOutput
}

type InstancesInstanceArray []InstancesInstanceInput

func (InstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return i.ToInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceArrayOutput)
}

type InstancesInstanceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return o
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return o
}

// The id of account.
func (o InstancesInstanceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.AccountId }).(pulumi.StringOutput)
}

// The auto renew status of instance.
func (o InstancesInstanceOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The charge expire time of instance.
func (o InstancesInstanceOutput) ChargeExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeExpireTime }).(pulumi.StringOutput)
}

// The charge start time of instance.
func (o InstancesInstanceOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// The charge status of instance.
func (o InstancesInstanceOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of instance.
func (o InstancesInstanceOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The compute spec of instance.
func (o InstancesInstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ComputeSpec }).(pulumi.StringOutput)
}

// Connection info of the instance.
func (o InstancesInstanceOutput) ConnectionInfos() InstancesInstanceConnectionInfoArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceConnectionInfo { return v.ConnectionInfos }).(InstancesInstanceConnectionInfoArrayOutput)
}

// The create time of instance.
func (o InstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of eip.
func (o InstancesInstanceOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.EipId }).(pulumi.StringOutput)
}

// The id of instance.
func (o InstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The description of instance.
func (o InstancesInstanceOutput) InstanceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceDescription }).(pulumi.StringOutput)
}

// The id of instance.
func (o InstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of instance.
func (o InstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of instance.
func (o InstancesInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The overdue reclaim time of instance.
func (o InstancesInstanceOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// The overdue time of instance.
func (o InstancesInstanceOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Parameters of the instance.
func (o InstancesInstanceOutput) Parameters() InstancesInstanceParameterArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceParameter { return v.Parameters }).(InstancesInstanceParameterArrayOutput)
}

// The period unit of instance.
func (o InstancesInstanceOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Whether enable private domain on public.
func (o InstancesInstanceOutput) PrivateDomainOnPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.PrivateDomainOnPublic }).(pulumi.BoolOutput)
}

// The name of project.
func (o InstancesInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The id of region.
func (o InstancesInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// The storage space of instance.
func (o InstancesInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// The storage type of instance.
func (o InstancesInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The id of subnet.
func (o InstancesInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The tags of instance.
func (o InstancesInstanceOutput) Tags() InstancesInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceTag { return v.Tags }).(InstancesInstanceTagArrayOutput)
}

// The usable partition number of instance.
func (o InstancesInstanceOutput) UsablePartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsablePartitionNumber }).(pulumi.IntOutput)
}

// The used group number of instance.
func (o InstancesInstanceOutput) UsedGroupNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsedGroupNumber }).(pulumi.IntOutput)
}

// The used partition number of instance.
func (o InstancesInstanceOutput) UsedPartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsedPartitionNumber }).(pulumi.IntOutput)
}

// The used storage space of instance.
func (o InstancesInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// The used topic number of instance.
func (o InstancesInstanceOutput) UsedTopicNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.UsedTopicNumber }).(pulumi.IntOutput)
}

// The version of instance.
func (o InstancesInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Version }).(pulumi.StringOutput)
}

// The id of vpc.
func (o InstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of instance.
func (o InstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstance {
		return vs[0].([]InstancesInstance)[vs[1].(int)]
	}).(InstancesInstanceOutput)
}

type InstancesInstanceConnectionInfo struct {
	// The endpoint type of instance.
	EndpointType string `pulumi:"endpointType"`
	// The internal endpoint of instance.
	InternalEndpoint string `pulumi:"internalEndpoint"`
	// The network type of instance.
	NetworkType string `pulumi:"networkType"`
	// The public endpoint of instance.
	PublicEndpoint string `pulumi:"publicEndpoint"`
}

// InstancesInstanceConnectionInfoInput is an input type that accepts InstancesInstanceConnectionInfoArgs and InstancesInstanceConnectionInfoOutput values.
// You can construct a concrete instance of `InstancesInstanceConnectionInfoInput` via:
//
//	InstancesInstanceConnectionInfoArgs{...}
type InstancesInstanceConnectionInfoInput interface {
	pulumi.Input

	ToInstancesInstanceConnectionInfoOutput() InstancesInstanceConnectionInfoOutput
	ToInstancesInstanceConnectionInfoOutputWithContext(context.Context) InstancesInstanceConnectionInfoOutput
}

type InstancesInstanceConnectionInfoArgs struct {
	// The endpoint type of instance.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The internal endpoint of instance.
	InternalEndpoint pulumi.StringInput `pulumi:"internalEndpoint"`
	// The network type of instance.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The public endpoint of instance.
	PublicEndpoint pulumi.StringInput `pulumi:"publicEndpoint"`
}

func (InstancesInstanceConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (i InstancesInstanceConnectionInfoArgs) ToInstancesInstanceConnectionInfoOutput() InstancesInstanceConnectionInfoOutput {
	return i.ToInstancesInstanceConnectionInfoOutputWithContext(context.Background())
}

func (i InstancesInstanceConnectionInfoArgs) ToInstancesInstanceConnectionInfoOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConnectionInfoOutput)
}

// InstancesInstanceConnectionInfoArrayInput is an input type that accepts InstancesInstanceConnectionInfoArray and InstancesInstanceConnectionInfoArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceConnectionInfoArrayInput` via:
//
//	InstancesInstanceConnectionInfoArray{ InstancesInstanceConnectionInfoArgs{...} }
type InstancesInstanceConnectionInfoArrayInput interface {
	pulumi.Input

	ToInstancesInstanceConnectionInfoArrayOutput() InstancesInstanceConnectionInfoArrayOutput
	ToInstancesInstanceConnectionInfoArrayOutputWithContext(context.Context) InstancesInstanceConnectionInfoArrayOutput
}

type InstancesInstanceConnectionInfoArray []InstancesInstanceConnectionInfoInput

func (InstancesInstanceConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (i InstancesInstanceConnectionInfoArray) ToInstancesInstanceConnectionInfoArrayOutput() InstancesInstanceConnectionInfoArrayOutput {
	return i.ToInstancesInstanceConnectionInfoArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceConnectionInfoArray) ToInstancesInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConnectionInfoArrayOutput)
}

type InstancesInstanceConnectionInfoOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (o InstancesInstanceConnectionInfoOutput) ToInstancesInstanceConnectionInfoOutput() InstancesInstanceConnectionInfoOutput {
	return o
}

func (o InstancesInstanceConnectionInfoOutput) ToInstancesInstanceConnectionInfoOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoOutput {
	return o
}

// The endpoint type of instance.
func (o InstancesInstanceConnectionInfoOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The internal endpoint of instance.
func (o InstancesInstanceConnectionInfoOutput) InternalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.InternalEndpoint }).(pulumi.StringOutput)
}

// The network type of instance.
func (o InstancesInstanceConnectionInfoOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The public endpoint of instance.
func (o InstancesInstanceConnectionInfoOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConnectionInfo) string { return v.PublicEndpoint }).(pulumi.StringOutput)
}

type InstancesInstanceConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConnectionInfo)(nil)).Elem()
}

func (o InstancesInstanceConnectionInfoArrayOutput) ToInstancesInstanceConnectionInfoArrayOutput() InstancesInstanceConnectionInfoArrayOutput {
	return o
}

func (o InstancesInstanceConnectionInfoArrayOutput) ToInstancesInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) InstancesInstanceConnectionInfoArrayOutput {
	return o
}

func (o InstancesInstanceConnectionInfoArrayOutput) Index(i pulumi.IntInput) InstancesInstanceConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceConnectionInfo {
		return vs[0].([]InstancesInstanceConnectionInfo)[vs[1].(int)]
	}).(InstancesInstanceConnectionInfoOutput)
}

type InstancesInstanceParameter struct {
	// Parameter name.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue string `pulumi:"parameterValue"`
}

// InstancesInstanceParameterInput is an input type that accepts InstancesInstanceParameterArgs and InstancesInstanceParameterOutput values.
// You can construct a concrete instance of `InstancesInstanceParameterInput` via:
//
//	InstancesInstanceParameterArgs{...}
type InstancesInstanceParameterInput interface {
	pulumi.Input

	ToInstancesInstanceParameterOutput() InstancesInstanceParameterOutput
	ToInstancesInstanceParameterOutputWithContext(context.Context) InstancesInstanceParameterOutput
}

type InstancesInstanceParameterArgs struct {
	// Parameter name.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (InstancesInstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceParameter)(nil)).Elem()
}

func (i InstancesInstanceParameterArgs) ToInstancesInstanceParameterOutput() InstancesInstanceParameterOutput {
	return i.ToInstancesInstanceParameterOutputWithContext(context.Background())
}

func (i InstancesInstanceParameterArgs) ToInstancesInstanceParameterOutputWithContext(ctx context.Context) InstancesInstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceParameterOutput)
}

// InstancesInstanceParameterArrayInput is an input type that accepts InstancesInstanceParameterArray and InstancesInstanceParameterArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceParameterArrayInput` via:
//
//	InstancesInstanceParameterArray{ InstancesInstanceParameterArgs{...} }
type InstancesInstanceParameterArrayInput interface {
	pulumi.Input

	ToInstancesInstanceParameterArrayOutput() InstancesInstanceParameterArrayOutput
	ToInstancesInstanceParameterArrayOutputWithContext(context.Context) InstancesInstanceParameterArrayOutput
}

type InstancesInstanceParameterArray []InstancesInstanceParameterInput

func (InstancesInstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceParameter)(nil)).Elem()
}

func (i InstancesInstanceParameterArray) ToInstancesInstanceParameterArrayOutput() InstancesInstanceParameterArrayOutput {
	return i.ToInstancesInstanceParameterArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceParameterArray) ToInstancesInstanceParameterArrayOutputWithContext(ctx context.Context) InstancesInstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceParameterArrayOutput)
}

type InstancesInstanceParameterOutput struct{ *pulumi.OutputState }

func (InstancesInstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceParameter)(nil)).Elem()
}

func (o InstancesInstanceParameterOutput) ToInstancesInstanceParameterOutput() InstancesInstanceParameterOutput {
	return o
}

func (o InstancesInstanceParameterOutput) ToInstancesInstanceParameterOutputWithContext(ctx context.Context) InstancesInstanceParameterOutput {
	return o
}

// Parameter name.
func (o InstancesInstanceParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

// Parameter value.
func (o InstancesInstanceParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type InstancesInstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceParameter)(nil)).Elem()
}

func (o InstancesInstanceParameterArrayOutput) ToInstancesInstanceParameterArrayOutput() InstancesInstanceParameterArrayOutput {
	return o
}

func (o InstancesInstanceParameterArrayOutput) ToInstancesInstanceParameterArrayOutputWithContext(ctx context.Context) InstancesInstanceParameterArrayOutput {
	return o
}

func (o InstancesInstanceParameterArrayOutput) Index(i pulumi.IntInput) InstancesInstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceParameter {
		return vs[0].([]InstancesInstanceParameter)[vs[1].(int)]
	}).(InstancesInstanceParameterOutput)
}

type InstancesInstanceTag struct {
	// The key of tag.
	Key string `pulumi:"key"`
	// The value of tag.
	Value string `pulumi:"value"`
}

// InstancesInstanceTagInput is an input type that accepts InstancesInstanceTagArgs and InstancesInstanceTagOutput values.
// You can construct a concrete instance of `InstancesInstanceTagInput` via:
//
//	InstancesInstanceTagArgs{...}
type InstancesInstanceTagInput interface {
	pulumi.Input

	ToInstancesInstanceTagOutput() InstancesInstanceTagOutput
	ToInstancesInstanceTagOutputWithContext(context.Context) InstancesInstanceTagOutput
}

type InstancesInstanceTagArgs struct {
	// The key of tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return i.ToInstancesInstanceTagOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagOutput)
}

// InstancesInstanceTagArrayInput is an input type that accepts InstancesInstanceTagArray and InstancesInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceTagArrayInput` via:
//
//	InstancesInstanceTagArray{ InstancesInstanceTagArgs{...} }
type InstancesInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput
	ToInstancesInstanceTagArrayOutputWithContext(context.Context) InstancesInstanceTagArrayOutput
}

type InstancesInstanceTagArray []InstancesInstanceTagInput

func (InstancesInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return i.ToInstancesInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagArrayOutput)
}

type InstancesInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return o
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return o
}

// The key of tag.
func (o InstancesInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of tag.
func (o InstancesInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceTag {
		return vs[0].([]InstancesInstanceTag)[vs[1].(int)]
	}).(InstancesInstanceTagOutput)
}

type InstancesTag struct {
	// The key of tag.
	Key string `pulumi:"key"`
	// The value of tag.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The key of tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The key of tag.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of tag.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type RegionsRegion struct {
	// The description of region.
	Description string `pulumi:"description"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The name of region.
	RegionName string `pulumi:"regionName"`
	// The status of region.
	Status string `pulumi:"status"`
}

// RegionsRegionInput is an input type that accepts RegionsRegionArgs and RegionsRegionOutput values.
// You can construct a concrete instance of `RegionsRegionInput` via:
//
//	RegionsRegionArgs{...}
type RegionsRegionInput interface {
	pulumi.Input

	ToRegionsRegionOutput() RegionsRegionOutput
	ToRegionsRegionOutputWithContext(context.Context) RegionsRegionOutput
}

type RegionsRegionArgs struct {
	// The description of region.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The name of region.
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// The status of region.
	Status pulumi.StringInput `pulumi:"status"`
}

func (RegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArgs) ToRegionsRegionOutput() RegionsRegionOutput {
	return i.ToRegionsRegionOutputWithContext(context.Background())
}

func (i RegionsRegionArgs) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionOutput)
}

// RegionsRegionArrayInput is an input type that accepts RegionsRegionArray and RegionsRegionArrayOutput values.
// You can construct a concrete instance of `RegionsRegionArrayInput` via:
//
//	RegionsRegionArray{ RegionsRegionArgs{...} }
type RegionsRegionArrayInput interface {
	pulumi.Input

	ToRegionsRegionArrayOutput() RegionsRegionArrayOutput
	ToRegionsRegionArrayOutputWithContext(context.Context) RegionsRegionArrayOutput
}

type RegionsRegionArray []RegionsRegionInput

func (RegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return i.ToRegionsRegionArrayOutputWithContext(context.Background())
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionArrayOutput)
}

type RegionsRegionOutput struct{ *pulumi.OutputState }

func (RegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionOutput) ToRegionsRegionOutput() RegionsRegionOutput {
	return o
}

func (o RegionsRegionOutput) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return o
}

// The description of region.
func (o RegionsRegionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the region.
func (o RegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

// The name of region.
func (o RegionsRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionName }).(pulumi.StringOutput)
}

// The status of region.
func (o RegionsRegionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.Status }).(pulumi.StringOutput)
}

type RegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (RegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) Index(i pulumi.IntInput) RegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionsRegion {
		return vs[0].([]RegionsRegion)[vs[1].(int)]
	}).(RegionsRegionOutput)
}

type SaslUsersUser struct {
	// Whether this user has read and write permissions for all topics.
	AllAuthority bool `pulumi:"allAuthority"`
	// The create time.
	CreateTime string `pulumi:"createTime"`
	// The description of user.
	Description string `pulumi:"description"`
	// The type of password.
	PasswordType string `pulumi:"passwordType"`
	// The user name, support fuzzy matching.
	UserName string `pulumi:"userName"`
}

// SaslUsersUserInput is an input type that accepts SaslUsersUserArgs and SaslUsersUserOutput values.
// You can construct a concrete instance of `SaslUsersUserInput` via:
//
//	SaslUsersUserArgs{...}
type SaslUsersUserInput interface {
	pulumi.Input

	ToSaslUsersUserOutput() SaslUsersUserOutput
	ToSaslUsersUserOutputWithContext(context.Context) SaslUsersUserOutput
}

type SaslUsersUserArgs struct {
	// Whether this user has read and write permissions for all topics.
	AllAuthority pulumi.BoolInput `pulumi:"allAuthority"`
	// The create time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of user.
	Description pulumi.StringInput `pulumi:"description"`
	// The type of password.
	PasswordType pulumi.StringInput `pulumi:"passwordType"`
	// The user name, support fuzzy matching.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (SaslUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslUsersUser)(nil)).Elem()
}

func (i SaslUsersUserArgs) ToSaslUsersUserOutput() SaslUsersUserOutput {
	return i.ToSaslUsersUserOutputWithContext(context.Background())
}

func (i SaslUsersUserArgs) ToSaslUsersUserOutputWithContext(ctx context.Context) SaslUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslUsersUserOutput)
}

// SaslUsersUserArrayInput is an input type that accepts SaslUsersUserArray and SaslUsersUserArrayOutput values.
// You can construct a concrete instance of `SaslUsersUserArrayInput` via:
//
//	SaslUsersUserArray{ SaslUsersUserArgs{...} }
type SaslUsersUserArrayInput interface {
	pulumi.Input

	ToSaslUsersUserArrayOutput() SaslUsersUserArrayOutput
	ToSaslUsersUserArrayOutputWithContext(context.Context) SaslUsersUserArrayOutput
}

type SaslUsersUserArray []SaslUsersUserInput

func (SaslUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SaslUsersUser)(nil)).Elem()
}

func (i SaslUsersUserArray) ToSaslUsersUserArrayOutput() SaslUsersUserArrayOutput {
	return i.ToSaslUsersUserArrayOutputWithContext(context.Background())
}

func (i SaslUsersUserArray) ToSaslUsersUserArrayOutputWithContext(ctx context.Context) SaslUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SaslUsersUserArrayOutput)
}

type SaslUsersUserOutput struct{ *pulumi.OutputState }

func (SaslUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SaslUsersUser)(nil)).Elem()
}

func (o SaslUsersUserOutput) ToSaslUsersUserOutput() SaslUsersUserOutput {
	return o
}

func (o SaslUsersUserOutput) ToSaslUsersUserOutputWithContext(ctx context.Context) SaslUsersUserOutput {
	return o
}

// Whether this user has read and write permissions for all topics.
func (o SaslUsersUserOutput) AllAuthority() pulumi.BoolOutput {
	return o.ApplyT(func(v SaslUsersUser) bool { return v.AllAuthority }).(pulumi.BoolOutput)
}

// The create time.
func (o SaslUsersUserOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v SaslUsersUser) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of user.
func (o SaslUsersUserOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v SaslUsersUser) string { return v.Description }).(pulumi.StringOutput)
}

// The type of password.
func (o SaslUsersUserOutput) PasswordType() pulumi.StringOutput {
	return o.ApplyT(func(v SaslUsersUser) string { return v.PasswordType }).(pulumi.StringOutput)
}

// The user name, support fuzzy matching.
func (o SaslUsersUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v SaslUsersUser) string { return v.UserName }).(pulumi.StringOutput)
}

type SaslUsersUserArrayOutput struct{ *pulumi.OutputState }

func (SaslUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SaslUsersUser)(nil)).Elem()
}

func (o SaslUsersUserArrayOutput) ToSaslUsersUserArrayOutput() SaslUsersUserArrayOutput {
	return o
}

func (o SaslUsersUserArrayOutput) ToSaslUsersUserArrayOutputWithContext(ctx context.Context) SaslUsersUserArrayOutput {
	return o
}

func (o SaslUsersUserArrayOutput) Index(i pulumi.IntInput) SaslUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SaslUsersUser {
		return vs[0].([]SaslUsersUser)[vs[1].(int)]
	}).(SaslUsersUserOutput)
}

type TopicAccessPolicy struct {
	// The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
	AccessPolicy string `pulumi:"accessPolicy"`
	// The name of SASL user.
	UserName string `pulumi:"userName"`
}

// TopicAccessPolicyInput is an input type that accepts TopicAccessPolicyArgs and TopicAccessPolicyOutput values.
// You can construct a concrete instance of `TopicAccessPolicyInput` via:
//
//	TopicAccessPolicyArgs{...}
type TopicAccessPolicyInput interface {
	pulumi.Input

	ToTopicAccessPolicyOutput() TopicAccessPolicyOutput
	ToTopicAccessPolicyOutputWithContext(context.Context) TopicAccessPolicyOutput
}

type TopicAccessPolicyArgs struct {
	// The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	// The name of SASL user.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (TopicAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicAccessPolicy)(nil)).Elem()
}

func (i TopicAccessPolicyArgs) ToTopicAccessPolicyOutput() TopicAccessPolicyOutput {
	return i.ToTopicAccessPolicyOutputWithContext(context.Background())
}

func (i TopicAccessPolicyArgs) ToTopicAccessPolicyOutputWithContext(ctx context.Context) TopicAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicAccessPolicyOutput)
}

// TopicAccessPolicyArrayInput is an input type that accepts TopicAccessPolicyArray and TopicAccessPolicyArrayOutput values.
// You can construct a concrete instance of `TopicAccessPolicyArrayInput` via:
//
//	TopicAccessPolicyArray{ TopicAccessPolicyArgs{...} }
type TopicAccessPolicyArrayInput interface {
	pulumi.Input

	ToTopicAccessPolicyArrayOutput() TopicAccessPolicyArrayOutput
	ToTopicAccessPolicyArrayOutputWithContext(context.Context) TopicAccessPolicyArrayOutput
}

type TopicAccessPolicyArray []TopicAccessPolicyInput

func (TopicAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicAccessPolicy)(nil)).Elem()
}

func (i TopicAccessPolicyArray) ToTopicAccessPolicyArrayOutput() TopicAccessPolicyArrayOutput {
	return i.ToTopicAccessPolicyArrayOutputWithContext(context.Background())
}

func (i TopicAccessPolicyArray) ToTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicAccessPolicyArrayOutput)
}

type TopicAccessPolicyOutput struct{ *pulumi.OutputState }

func (TopicAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicAccessPolicy)(nil)).Elem()
}

func (o TopicAccessPolicyOutput) ToTopicAccessPolicyOutput() TopicAccessPolicyOutput {
	return o
}

func (o TopicAccessPolicyOutput) ToTopicAccessPolicyOutputWithContext(ctx context.Context) TopicAccessPolicyOutput {
	return o
}

// The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
func (o TopicAccessPolicyOutput) AccessPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v TopicAccessPolicy) string { return v.AccessPolicy }).(pulumi.StringOutput)
}

// The name of SASL user.
func (o TopicAccessPolicyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicAccessPolicy) string { return v.UserName }).(pulumi.StringOutput)
}

type TopicAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (TopicAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicAccessPolicy)(nil)).Elem()
}

func (o TopicAccessPolicyArrayOutput) ToTopicAccessPolicyArrayOutput() TopicAccessPolicyArrayOutput {
	return o
}

func (o TopicAccessPolicyArrayOutput) ToTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicAccessPolicyArrayOutput {
	return o
}

func (o TopicAccessPolicyArrayOutput) Index(i pulumi.IntInput) TopicAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicAccessPolicy {
		return vs[0].([]TopicAccessPolicy)[vs[1].(int)]
	}).(TopicAccessPolicyOutput)
}

type TopicParameters struct {
	// The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
	LogRetentionHours *int `pulumi:"logRetentionHours"`
	// The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
	MessageMaxByte *int `pulumi:"messageMaxByte"`
	// The min number of sync replica. The default value is the replica number minus 1.
	MinInsyncReplicaNumber *int `pulumi:"minInsyncReplicaNumber"`
}

// TopicParametersInput is an input type that accepts TopicParametersArgs and TopicParametersOutput values.
// You can construct a concrete instance of `TopicParametersInput` via:
//
//	TopicParametersArgs{...}
type TopicParametersInput interface {
	pulumi.Input

	ToTopicParametersOutput() TopicParametersOutput
	ToTopicParametersOutputWithContext(context.Context) TopicParametersOutput
}

type TopicParametersArgs struct {
	// The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
	LogRetentionHours pulumi.IntPtrInput `pulumi:"logRetentionHours"`
	// The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
	MessageMaxByte pulumi.IntPtrInput `pulumi:"messageMaxByte"`
	// The min number of sync replica. The default value is the replica number minus 1.
	MinInsyncReplicaNumber pulumi.IntPtrInput `pulumi:"minInsyncReplicaNumber"`
}

func (TopicParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicParameters)(nil)).Elem()
}

func (i TopicParametersArgs) ToTopicParametersOutput() TopicParametersOutput {
	return i.ToTopicParametersOutputWithContext(context.Background())
}

func (i TopicParametersArgs) ToTopicParametersOutputWithContext(ctx context.Context) TopicParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicParametersOutput)
}

func (i TopicParametersArgs) ToTopicParametersPtrOutput() TopicParametersPtrOutput {
	return i.ToTopicParametersPtrOutputWithContext(context.Background())
}

func (i TopicParametersArgs) ToTopicParametersPtrOutputWithContext(ctx context.Context) TopicParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicParametersOutput).ToTopicParametersPtrOutputWithContext(ctx)
}

// TopicParametersPtrInput is an input type that accepts TopicParametersArgs, TopicParametersPtr and TopicParametersPtrOutput values.
// You can construct a concrete instance of `TopicParametersPtrInput` via:
//
//	        TopicParametersArgs{...}
//
//	or:
//
//	        nil
type TopicParametersPtrInput interface {
	pulumi.Input

	ToTopicParametersPtrOutput() TopicParametersPtrOutput
	ToTopicParametersPtrOutputWithContext(context.Context) TopicParametersPtrOutput
}

type topicParametersPtrType TopicParametersArgs

func TopicParametersPtr(v *TopicParametersArgs) TopicParametersPtrInput {
	return (*topicParametersPtrType)(v)
}

func (*topicParametersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicParameters)(nil)).Elem()
}

func (i *topicParametersPtrType) ToTopicParametersPtrOutput() TopicParametersPtrOutput {
	return i.ToTopicParametersPtrOutputWithContext(context.Background())
}

func (i *topicParametersPtrType) ToTopicParametersPtrOutputWithContext(ctx context.Context) TopicParametersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicParametersPtrOutput)
}

type TopicParametersOutput struct{ *pulumi.OutputState }

func (TopicParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicParameters)(nil)).Elem()
}

func (o TopicParametersOutput) ToTopicParametersOutput() TopicParametersOutput {
	return o
}

func (o TopicParametersOutput) ToTopicParametersOutputWithContext(ctx context.Context) TopicParametersOutput {
	return o
}

func (o TopicParametersOutput) ToTopicParametersPtrOutput() TopicParametersPtrOutput {
	return o.ToTopicParametersPtrOutputWithContext(context.Background())
}

func (o TopicParametersOutput) ToTopicParametersPtrOutputWithContext(ctx context.Context) TopicParametersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v TopicParameters) *TopicParameters {
		return &v
	}).(TopicParametersPtrOutput)
}

// The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
func (o TopicParametersOutput) LogRetentionHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicParameters) *int { return v.LogRetentionHours }).(pulumi.IntPtrOutput)
}

// The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
func (o TopicParametersOutput) MessageMaxByte() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicParameters) *int { return v.MessageMaxByte }).(pulumi.IntPtrOutput)
}

// The min number of sync replica. The default value is the replica number minus 1.
func (o TopicParametersOutput) MinInsyncReplicaNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v TopicParameters) *int { return v.MinInsyncReplicaNumber }).(pulumi.IntPtrOutput)
}

type TopicParametersPtrOutput struct{ *pulumi.OutputState }

func (TopicParametersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TopicParameters)(nil)).Elem()
}

func (o TopicParametersPtrOutput) ToTopicParametersPtrOutput() TopicParametersPtrOutput {
	return o
}

func (o TopicParametersPtrOutput) ToTopicParametersPtrOutputWithContext(ctx context.Context) TopicParametersPtrOutput {
	return o
}

func (o TopicParametersPtrOutput) Elem() TopicParametersOutput {
	return o.ApplyT(func(v *TopicParameters) TopicParameters {
		if v != nil {
			return *v
		}
		var ret TopicParameters
		return ret
	}).(TopicParametersOutput)
}

// The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
func (o TopicParametersPtrOutput) LogRetentionHours() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicParameters) *int {
		if v == nil {
			return nil
		}
		return v.LogRetentionHours
	}).(pulumi.IntPtrOutput)
}

// The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
func (o TopicParametersPtrOutput) MessageMaxByte() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicParameters) *int {
		if v == nil {
			return nil
		}
		return v.MessageMaxByte
	}).(pulumi.IntPtrOutput)
}

// The min number of sync replica. The default value is the replica number minus 1.
func (o TopicParametersPtrOutput) MinInsyncReplicaNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TopicParameters) *int {
		if v == nil {
			return nil
		}
		return v.MinInsyncReplicaNumber
	}).(pulumi.IntPtrOutput)
}

type TopicPartitionsPartition struct {
	// The end offset of partition leader.
	EndOffset int `pulumi:"endOffset"`
	// The insync replica info.
	InsyncReplicas []int `pulumi:"insyncReplicas"`
	// The leader info of partition.
	Leader int `pulumi:"leader"`
	// The count of message.
	MessageCount int `pulumi:"messageCount"`
	// The index number of partition.
	PartitionId int `pulumi:"partitionId"`
	// The replica info.
	Replicas []int `pulumi:"replicas"`
	// The start offset of partition leader.
	StartOffset int `pulumi:"startOffset"`
	// The under insync replica info.
	UnderInsyncReplicas []int `pulumi:"underInsyncReplicas"`
}

// TopicPartitionsPartitionInput is an input type that accepts TopicPartitionsPartitionArgs and TopicPartitionsPartitionOutput values.
// You can construct a concrete instance of `TopicPartitionsPartitionInput` via:
//
//	TopicPartitionsPartitionArgs{...}
type TopicPartitionsPartitionInput interface {
	pulumi.Input

	ToTopicPartitionsPartitionOutput() TopicPartitionsPartitionOutput
	ToTopicPartitionsPartitionOutputWithContext(context.Context) TopicPartitionsPartitionOutput
}

type TopicPartitionsPartitionArgs struct {
	// The end offset of partition leader.
	EndOffset pulumi.IntInput `pulumi:"endOffset"`
	// The insync replica info.
	InsyncReplicas pulumi.IntArrayInput `pulumi:"insyncReplicas"`
	// The leader info of partition.
	Leader pulumi.IntInput `pulumi:"leader"`
	// The count of message.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// The index number of partition.
	PartitionId pulumi.IntInput `pulumi:"partitionId"`
	// The replica info.
	Replicas pulumi.IntArrayInput `pulumi:"replicas"`
	// The start offset of partition leader.
	StartOffset pulumi.IntInput `pulumi:"startOffset"`
	// The under insync replica info.
	UnderInsyncReplicas pulumi.IntArrayInput `pulumi:"underInsyncReplicas"`
}

func (TopicPartitionsPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPartitionsPartition)(nil)).Elem()
}

func (i TopicPartitionsPartitionArgs) ToTopicPartitionsPartitionOutput() TopicPartitionsPartitionOutput {
	return i.ToTopicPartitionsPartitionOutputWithContext(context.Background())
}

func (i TopicPartitionsPartitionArgs) ToTopicPartitionsPartitionOutputWithContext(ctx context.Context) TopicPartitionsPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPartitionsPartitionOutput)
}

// TopicPartitionsPartitionArrayInput is an input type that accepts TopicPartitionsPartitionArray and TopicPartitionsPartitionArrayOutput values.
// You can construct a concrete instance of `TopicPartitionsPartitionArrayInput` via:
//
//	TopicPartitionsPartitionArray{ TopicPartitionsPartitionArgs{...} }
type TopicPartitionsPartitionArrayInput interface {
	pulumi.Input

	ToTopicPartitionsPartitionArrayOutput() TopicPartitionsPartitionArrayOutput
	ToTopicPartitionsPartitionArrayOutputWithContext(context.Context) TopicPartitionsPartitionArrayOutput
}

type TopicPartitionsPartitionArray []TopicPartitionsPartitionInput

func (TopicPartitionsPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicPartitionsPartition)(nil)).Elem()
}

func (i TopicPartitionsPartitionArray) ToTopicPartitionsPartitionArrayOutput() TopicPartitionsPartitionArrayOutput {
	return i.ToTopicPartitionsPartitionArrayOutputWithContext(context.Background())
}

func (i TopicPartitionsPartitionArray) ToTopicPartitionsPartitionArrayOutputWithContext(ctx context.Context) TopicPartitionsPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicPartitionsPartitionArrayOutput)
}

type TopicPartitionsPartitionOutput struct{ *pulumi.OutputState }

func (TopicPartitionsPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicPartitionsPartition)(nil)).Elem()
}

func (o TopicPartitionsPartitionOutput) ToTopicPartitionsPartitionOutput() TopicPartitionsPartitionOutput {
	return o
}

func (o TopicPartitionsPartitionOutput) ToTopicPartitionsPartitionOutputWithContext(ctx context.Context) TopicPartitionsPartitionOutput {
	return o
}

// The end offset of partition leader.
func (o TopicPartitionsPartitionOutput) EndOffset() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.EndOffset }).(pulumi.IntOutput)
}

// The insync replica info.
func (o TopicPartitionsPartitionOutput) InsyncReplicas() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) []int { return v.InsyncReplicas }).(pulumi.IntArrayOutput)
}

// The leader info of partition.
func (o TopicPartitionsPartitionOutput) Leader() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.Leader }).(pulumi.IntOutput)
}

// The count of message.
func (o TopicPartitionsPartitionOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.MessageCount }).(pulumi.IntOutput)
}

// The index number of partition.
func (o TopicPartitionsPartitionOutput) PartitionId() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.PartitionId }).(pulumi.IntOutput)
}

// The replica info.
func (o TopicPartitionsPartitionOutput) Replicas() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) []int { return v.Replicas }).(pulumi.IntArrayOutput)
}

// The start offset of partition leader.
func (o TopicPartitionsPartitionOutput) StartOffset() pulumi.IntOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) int { return v.StartOffset }).(pulumi.IntOutput)
}

// The under insync replica info.
func (o TopicPartitionsPartitionOutput) UnderInsyncReplicas() pulumi.IntArrayOutput {
	return o.ApplyT(func(v TopicPartitionsPartition) []int { return v.UnderInsyncReplicas }).(pulumi.IntArrayOutput)
}

type TopicPartitionsPartitionArrayOutput struct{ *pulumi.OutputState }

func (TopicPartitionsPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicPartitionsPartition)(nil)).Elem()
}

func (o TopicPartitionsPartitionArrayOutput) ToTopicPartitionsPartitionArrayOutput() TopicPartitionsPartitionArrayOutput {
	return o
}

func (o TopicPartitionsPartitionArrayOutput) ToTopicPartitionsPartitionArrayOutputWithContext(ctx context.Context) TopicPartitionsPartitionArrayOutput {
	return o
}

func (o TopicPartitionsPartitionArrayOutput) Index(i pulumi.IntInput) TopicPartitionsPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicPartitionsPartition {
		return vs[0].([]TopicPartitionsPartition)[vs[1].(int)]
	}).(TopicPartitionsPartitionOutput)
}

type TopicsTopic struct {
	// The access policies info of the kafka topic.
	AccessPolicies []TopicsTopicAccessPolicy `pulumi:"accessPolicies"`
	// Whether the kafka topic is configured to be accessible by all users.
	AllAuthority bool `pulumi:"allAuthority"`
	// The create time of the kafka topic.
	CreateTime string `pulumi:"createTime"`
	// The description of the kafka topic.
	Description string `pulumi:"description"`
	// The parameters of the kafka topic.
	Parameters TopicsTopicParameters `pulumi:"parameters"`
	// The number of partition in kafka topic.
	PartitionNumber int `pulumi:"partitionNumber"`
	// The number of replica in kafka topic.
	ReplicaNumber int `pulumi:"replicaNumber"`
	// The status of the kafka topic.
	Status string `pulumi:"status"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName string `pulumi:"topicName"`
}

// TopicsTopicInput is an input type that accepts TopicsTopicArgs and TopicsTopicOutput values.
// You can construct a concrete instance of `TopicsTopicInput` via:
//
//	TopicsTopicArgs{...}
type TopicsTopicInput interface {
	pulumi.Input

	ToTopicsTopicOutput() TopicsTopicOutput
	ToTopicsTopicOutputWithContext(context.Context) TopicsTopicOutput
}

type TopicsTopicArgs struct {
	// The access policies info of the kafka topic.
	AccessPolicies TopicsTopicAccessPolicyArrayInput `pulumi:"accessPolicies"`
	// Whether the kafka topic is configured to be accessible by all users.
	AllAuthority pulumi.BoolInput `pulumi:"allAuthority"`
	// The create time of the kafka topic.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the kafka topic.
	Description pulumi.StringInput `pulumi:"description"`
	// The parameters of the kafka topic.
	Parameters TopicsTopicParametersInput `pulumi:"parameters"`
	// The number of partition in kafka topic.
	PartitionNumber pulumi.IntInput `pulumi:"partitionNumber"`
	// The number of replica in kafka topic.
	ReplicaNumber pulumi.IntInput `pulumi:"replicaNumber"`
	// The status of the kafka topic.
	Status pulumi.StringInput `pulumi:"status"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (TopicsTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopic)(nil)).Elem()
}

func (i TopicsTopicArgs) ToTopicsTopicOutput() TopicsTopicOutput {
	return i.ToTopicsTopicOutputWithContext(context.Background())
}

func (i TopicsTopicArgs) ToTopicsTopicOutputWithContext(ctx context.Context) TopicsTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicOutput)
}

// TopicsTopicArrayInput is an input type that accepts TopicsTopicArray and TopicsTopicArrayOutput values.
// You can construct a concrete instance of `TopicsTopicArrayInput` via:
//
//	TopicsTopicArray{ TopicsTopicArgs{...} }
type TopicsTopicArrayInput interface {
	pulumi.Input

	ToTopicsTopicArrayOutput() TopicsTopicArrayOutput
	ToTopicsTopicArrayOutputWithContext(context.Context) TopicsTopicArrayOutput
}

type TopicsTopicArray []TopicsTopicInput

func (TopicsTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsTopic)(nil)).Elem()
}

func (i TopicsTopicArray) ToTopicsTopicArrayOutput() TopicsTopicArrayOutput {
	return i.ToTopicsTopicArrayOutputWithContext(context.Background())
}

func (i TopicsTopicArray) ToTopicsTopicArrayOutputWithContext(ctx context.Context) TopicsTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicArrayOutput)
}

type TopicsTopicOutput struct{ *pulumi.OutputState }

func (TopicsTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopic)(nil)).Elem()
}

func (o TopicsTopicOutput) ToTopicsTopicOutput() TopicsTopicOutput {
	return o
}

func (o TopicsTopicOutput) ToTopicsTopicOutputWithContext(ctx context.Context) TopicsTopicOutput {
	return o
}

// The access policies info of the kafka topic.
func (o TopicsTopicOutput) AccessPolicies() TopicsTopicAccessPolicyArrayOutput {
	return o.ApplyT(func(v TopicsTopic) []TopicsTopicAccessPolicy { return v.AccessPolicies }).(TopicsTopicAccessPolicyArrayOutput)
}

// Whether the kafka topic is configured to be accessible by all users.
func (o TopicsTopicOutput) AllAuthority() pulumi.BoolOutput {
	return o.ApplyT(func(v TopicsTopic) bool { return v.AllAuthority }).(pulumi.BoolOutput)
}

// The create time of the kafka topic.
func (o TopicsTopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopic) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the kafka topic.
func (o TopicsTopicOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopic) string { return v.Description }).(pulumi.StringOutput)
}

// The parameters of the kafka topic.
func (o TopicsTopicOutput) Parameters() TopicsTopicParametersOutput {
	return o.ApplyT(func(v TopicsTopic) TopicsTopicParameters { return v.Parameters }).(TopicsTopicParametersOutput)
}

// The number of partition in kafka topic.
func (o TopicsTopicOutput) PartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopic) int { return v.PartitionNumber }).(pulumi.IntOutput)
}

// The number of replica in kafka topic.
func (o TopicsTopicOutput) ReplicaNumber() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopic) int { return v.ReplicaNumber }).(pulumi.IntOutput)
}

// The status of the kafka topic.
func (o TopicsTopicOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopic) string { return v.Status }).(pulumi.StringOutput)
}

// The name of kafka topic. This field supports fuzzy query.
func (o TopicsTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type TopicsTopicArrayOutput struct{ *pulumi.OutputState }

func (TopicsTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsTopic)(nil)).Elem()
}

func (o TopicsTopicArrayOutput) ToTopicsTopicArrayOutput() TopicsTopicArrayOutput {
	return o
}

func (o TopicsTopicArrayOutput) ToTopicsTopicArrayOutputWithContext(ctx context.Context) TopicsTopicArrayOutput {
	return o
}

func (o TopicsTopicArrayOutput) Index(i pulumi.IntInput) TopicsTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicsTopic {
		return vs[0].([]TopicsTopic)[vs[1].(int)]
	}).(TopicsTopicOutput)
}

type TopicsTopicAccessPolicy struct {
	// The access policy of SASL user.
	AccessPolicy string `pulumi:"accessPolicy"`
	// When a user name is specified, only the access policy of the specified user for this Topic will be returned.
	UserName string `pulumi:"userName"`
}

// TopicsTopicAccessPolicyInput is an input type that accepts TopicsTopicAccessPolicyArgs and TopicsTopicAccessPolicyOutput values.
// You can construct a concrete instance of `TopicsTopicAccessPolicyInput` via:
//
//	TopicsTopicAccessPolicyArgs{...}
type TopicsTopicAccessPolicyInput interface {
	pulumi.Input

	ToTopicsTopicAccessPolicyOutput() TopicsTopicAccessPolicyOutput
	ToTopicsTopicAccessPolicyOutputWithContext(context.Context) TopicsTopicAccessPolicyOutput
}

type TopicsTopicAccessPolicyArgs struct {
	// The access policy of SASL user.
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	// When a user name is specified, only the access policy of the specified user for this Topic will be returned.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (TopicsTopicAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopicAccessPolicy)(nil)).Elem()
}

func (i TopicsTopicAccessPolicyArgs) ToTopicsTopicAccessPolicyOutput() TopicsTopicAccessPolicyOutput {
	return i.ToTopicsTopicAccessPolicyOutputWithContext(context.Background())
}

func (i TopicsTopicAccessPolicyArgs) ToTopicsTopicAccessPolicyOutputWithContext(ctx context.Context) TopicsTopicAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicAccessPolicyOutput)
}

// TopicsTopicAccessPolicyArrayInput is an input type that accepts TopicsTopicAccessPolicyArray and TopicsTopicAccessPolicyArrayOutput values.
// You can construct a concrete instance of `TopicsTopicAccessPolicyArrayInput` via:
//
//	TopicsTopicAccessPolicyArray{ TopicsTopicAccessPolicyArgs{...} }
type TopicsTopicAccessPolicyArrayInput interface {
	pulumi.Input

	ToTopicsTopicAccessPolicyArrayOutput() TopicsTopicAccessPolicyArrayOutput
	ToTopicsTopicAccessPolicyArrayOutputWithContext(context.Context) TopicsTopicAccessPolicyArrayOutput
}

type TopicsTopicAccessPolicyArray []TopicsTopicAccessPolicyInput

func (TopicsTopicAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsTopicAccessPolicy)(nil)).Elem()
}

func (i TopicsTopicAccessPolicyArray) ToTopicsTopicAccessPolicyArrayOutput() TopicsTopicAccessPolicyArrayOutput {
	return i.ToTopicsTopicAccessPolicyArrayOutputWithContext(context.Background())
}

func (i TopicsTopicAccessPolicyArray) ToTopicsTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicsTopicAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicAccessPolicyArrayOutput)
}

type TopicsTopicAccessPolicyOutput struct{ *pulumi.OutputState }

func (TopicsTopicAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopicAccessPolicy)(nil)).Elem()
}

func (o TopicsTopicAccessPolicyOutput) ToTopicsTopicAccessPolicyOutput() TopicsTopicAccessPolicyOutput {
	return o
}

func (o TopicsTopicAccessPolicyOutput) ToTopicsTopicAccessPolicyOutputWithContext(ctx context.Context) TopicsTopicAccessPolicyOutput {
	return o
}

// The access policy of SASL user.
func (o TopicsTopicAccessPolicyOutput) AccessPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopicAccessPolicy) string { return v.AccessPolicy }).(pulumi.StringOutput)
}

// When a user name is specified, only the access policy of the specified user for this Topic will be returned.
func (o TopicsTopicAccessPolicyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsTopicAccessPolicy) string { return v.UserName }).(pulumi.StringOutput)
}

type TopicsTopicAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (TopicsTopicAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsTopicAccessPolicy)(nil)).Elem()
}

func (o TopicsTopicAccessPolicyArrayOutput) ToTopicsTopicAccessPolicyArrayOutput() TopicsTopicAccessPolicyArrayOutput {
	return o
}

func (o TopicsTopicAccessPolicyArrayOutput) ToTopicsTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicsTopicAccessPolicyArrayOutput {
	return o
}

func (o TopicsTopicAccessPolicyArrayOutput) Index(i pulumi.IntInput) TopicsTopicAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicsTopicAccessPolicy {
		return vs[0].([]TopicsTopicAccessPolicy)[vs[1].(int)]
	}).(TopicsTopicAccessPolicyOutput)
}

type TopicsTopicParameters struct {
	// The retention hours of log.
	LogRetentionHours int `pulumi:"logRetentionHours"`
	// The max byte of message.
	MessageMaxByte int `pulumi:"messageMaxByte"`
	// The min number of sync replica.
	MinInsyncReplicaNumber int `pulumi:"minInsyncReplicaNumber"`
}

// TopicsTopicParametersInput is an input type that accepts TopicsTopicParametersArgs and TopicsTopicParametersOutput values.
// You can construct a concrete instance of `TopicsTopicParametersInput` via:
//
//	TopicsTopicParametersArgs{...}
type TopicsTopicParametersInput interface {
	pulumi.Input

	ToTopicsTopicParametersOutput() TopicsTopicParametersOutput
	ToTopicsTopicParametersOutputWithContext(context.Context) TopicsTopicParametersOutput
}

type TopicsTopicParametersArgs struct {
	// The retention hours of log.
	LogRetentionHours pulumi.IntInput `pulumi:"logRetentionHours"`
	// The max byte of message.
	MessageMaxByte pulumi.IntInput `pulumi:"messageMaxByte"`
	// The min number of sync replica.
	MinInsyncReplicaNumber pulumi.IntInput `pulumi:"minInsyncReplicaNumber"`
}

func (TopicsTopicParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopicParameters)(nil)).Elem()
}

func (i TopicsTopicParametersArgs) ToTopicsTopicParametersOutput() TopicsTopicParametersOutput {
	return i.ToTopicsTopicParametersOutputWithContext(context.Background())
}

func (i TopicsTopicParametersArgs) ToTopicsTopicParametersOutputWithContext(ctx context.Context) TopicsTopicParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsTopicParametersOutput)
}

type TopicsTopicParametersOutput struct{ *pulumi.OutputState }

func (TopicsTopicParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsTopicParameters)(nil)).Elem()
}

func (o TopicsTopicParametersOutput) ToTopicsTopicParametersOutput() TopicsTopicParametersOutput {
	return o
}

func (o TopicsTopicParametersOutput) ToTopicsTopicParametersOutputWithContext(ctx context.Context) TopicsTopicParametersOutput {
	return o
}

// The retention hours of log.
func (o TopicsTopicParametersOutput) LogRetentionHours() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopicParameters) int { return v.LogRetentionHours }).(pulumi.IntOutput)
}

// The max byte of message.
func (o TopicsTopicParametersOutput) MessageMaxByte() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopicParameters) int { return v.MessageMaxByte }).(pulumi.IntOutput)
}

// The min number of sync replica.
func (o TopicsTopicParametersOutput) MinInsyncReplicaNumber() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsTopicParameters) int { return v.MinInsyncReplicaNumber }).(pulumi.IntOutput)
}

type ZonesZone struct {
	// The description of the zone.
	Description string `pulumi:"description"`
	// The id of the zone.
	Id string `pulumi:"id"`
	// The status of the zone.
	Status string `pulumi:"status"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName string `pulumi:"zoneName"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//	ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The description of the zone.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The status of the zone.
	Status pulumi.StringInput `pulumi:"status"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//	ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The description of the zone.
func (o ZonesZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The status of the zone.
func (o ZonesZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Status }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

// The name of the zone.
func (o ZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

type GetAllowListsAllowList struct {
	// The description of the allow list.
	AllowListDesc string `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId string `pulumi:"allowListId"`
	// The number of rules specified in the whitelist.
	AllowListIpNum int `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName string `pulumi:"allowListName"`
	// Whitelist rule list.
	AllowLists []string `pulumi:"allowLists"`
	// The number of instances bound to the whitelist.
	AssociatedInstanceNum int `pulumi:"associatedInstanceNum"`
	// The list of associated instances.
	AssociatedInstances []GetAllowListsAllowListAssociatedInstance `pulumi:"associatedInstances"`
}

// GetAllowListsAllowListInput is an input type that accepts GetAllowListsAllowListArgs and GetAllowListsAllowListOutput values.
// You can construct a concrete instance of `GetAllowListsAllowListInput` via:
//
//	GetAllowListsAllowListArgs{...}
type GetAllowListsAllowListInput interface {
	pulumi.Input

	ToGetAllowListsAllowListOutput() GetAllowListsAllowListOutput
	ToGetAllowListsAllowListOutputWithContext(context.Context) GetAllowListsAllowListOutput
}

type GetAllowListsAllowListArgs struct {
	// The description of the allow list.
	AllowListDesc pulumi.StringInput `pulumi:"allowListDesc"`
	// The id of the allow list.
	AllowListId pulumi.StringInput `pulumi:"allowListId"`
	// The number of rules specified in the whitelist.
	AllowListIpNum pulumi.IntInput `pulumi:"allowListIpNum"`
	// The name of the allow list.
	AllowListName pulumi.StringInput `pulumi:"allowListName"`
	// Whitelist rule list.
	AllowLists pulumi.StringArrayInput `pulumi:"allowLists"`
	// The number of instances bound to the whitelist.
	AssociatedInstanceNum pulumi.IntInput `pulumi:"associatedInstanceNum"`
	// The list of associated instances.
	AssociatedInstances GetAllowListsAllowListAssociatedInstanceArrayInput `pulumi:"associatedInstances"`
}

func (GetAllowListsAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowListsAllowList)(nil)).Elem()
}

func (i GetAllowListsAllowListArgs) ToGetAllowListsAllowListOutput() GetAllowListsAllowListOutput {
	return i.ToGetAllowListsAllowListOutputWithContext(context.Background())
}

func (i GetAllowListsAllowListArgs) ToGetAllowListsAllowListOutputWithContext(ctx context.Context) GetAllowListsAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowListsAllowListOutput)
}

// GetAllowListsAllowListArrayInput is an input type that accepts GetAllowListsAllowListArray and GetAllowListsAllowListArrayOutput values.
// You can construct a concrete instance of `GetAllowListsAllowListArrayInput` via:
//
//	GetAllowListsAllowListArray{ GetAllowListsAllowListArgs{...} }
type GetAllowListsAllowListArrayInput interface {
	pulumi.Input

	ToGetAllowListsAllowListArrayOutput() GetAllowListsAllowListArrayOutput
	ToGetAllowListsAllowListArrayOutputWithContext(context.Context) GetAllowListsAllowListArrayOutput
}

type GetAllowListsAllowListArray []GetAllowListsAllowListInput

func (GetAllowListsAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowListsAllowList)(nil)).Elem()
}

func (i GetAllowListsAllowListArray) ToGetAllowListsAllowListArrayOutput() GetAllowListsAllowListArrayOutput {
	return i.ToGetAllowListsAllowListArrayOutputWithContext(context.Background())
}

func (i GetAllowListsAllowListArray) ToGetAllowListsAllowListArrayOutputWithContext(ctx context.Context) GetAllowListsAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowListsAllowListArrayOutput)
}

type GetAllowListsAllowListOutput struct{ *pulumi.OutputState }

func (GetAllowListsAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowListsAllowList)(nil)).Elem()
}

func (o GetAllowListsAllowListOutput) ToGetAllowListsAllowListOutput() GetAllowListsAllowListOutput {
	return o
}

func (o GetAllowListsAllowListOutput) ToGetAllowListsAllowListOutputWithContext(ctx context.Context) GetAllowListsAllowListOutput {
	return o
}

// The description of the allow list.
func (o GetAllowListsAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsAllowList) string { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The id of the allow list.
func (o GetAllowListsAllowListOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsAllowList) string { return v.AllowListId }).(pulumi.StringOutput)
}

// The number of rules specified in the whitelist.
func (o GetAllowListsAllowListOutput) AllowListIpNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllowListsAllowList) int { return v.AllowListIpNum }).(pulumi.IntOutput)
}

// The name of the allow list.
func (o GetAllowListsAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsAllowList) string { return v.AllowListName }).(pulumi.StringOutput)
}

// Whitelist rule list.
func (o GetAllowListsAllowListOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllowListsAllowList) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The number of instances bound to the whitelist.
func (o GetAllowListsAllowListOutput) AssociatedInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllowListsAllowList) int { return v.AssociatedInstanceNum }).(pulumi.IntOutput)
}

// The list of associated instances.
func (o GetAllowListsAllowListOutput) AssociatedInstances() GetAllowListsAllowListAssociatedInstanceArrayOutput {
	return o.ApplyT(func(v GetAllowListsAllowList) []GetAllowListsAllowListAssociatedInstance {
		return v.AssociatedInstances
	}).(GetAllowListsAllowListAssociatedInstanceArrayOutput)
}

type GetAllowListsAllowListArrayOutput struct{ *pulumi.OutputState }

func (GetAllowListsAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowListsAllowList)(nil)).Elem()
}

func (o GetAllowListsAllowListArrayOutput) ToGetAllowListsAllowListArrayOutput() GetAllowListsAllowListArrayOutput {
	return o
}

func (o GetAllowListsAllowListArrayOutput) ToGetAllowListsAllowListArrayOutputWithContext(ctx context.Context) GetAllowListsAllowListArrayOutput {
	return o
}

func (o GetAllowListsAllowListArrayOutput) Index(i pulumi.IntInput) GetAllowListsAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAllowListsAllowList {
		return vs[0].([]GetAllowListsAllowList)[vs[1].(int)]
	}).(GetAllowListsAllowListOutput)
}

type GetAllowListsAllowListAssociatedInstance struct {
	// The instance ID to query.
	InstanceId string `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName string `pulumi:"instanceName"`
}

// GetAllowListsAllowListAssociatedInstanceInput is an input type that accepts GetAllowListsAllowListAssociatedInstanceArgs and GetAllowListsAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `GetAllowListsAllowListAssociatedInstanceInput` via:
//
//	GetAllowListsAllowListAssociatedInstanceArgs{...}
type GetAllowListsAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToGetAllowListsAllowListAssociatedInstanceOutput() GetAllowListsAllowListAssociatedInstanceOutput
	ToGetAllowListsAllowListAssociatedInstanceOutputWithContext(context.Context) GetAllowListsAllowListAssociatedInstanceOutput
}

type GetAllowListsAllowListAssociatedInstanceArgs struct {
	// The instance ID to query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
}

func (GetAllowListsAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (i GetAllowListsAllowListAssociatedInstanceArgs) ToGetAllowListsAllowListAssociatedInstanceOutput() GetAllowListsAllowListAssociatedInstanceOutput {
	return i.ToGetAllowListsAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i GetAllowListsAllowListAssociatedInstanceArgs) ToGetAllowListsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) GetAllowListsAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowListsAllowListAssociatedInstanceOutput)
}

// GetAllowListsAllowListAssociatedInstanceArrayInput is an input type that accepts GetAllowListsAllowListAssociatedInstanceArray and GetAllowListsAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `GetAllowListsAllowListAssociatedInstanceArrayInput` via:
//
//	GetAllowListsAllowListAssociatedInstanceArray{ GetAllowListsAllowListAssociatedInstanceArgs{...} }
type GetAllowListsAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToGetAllowListsAllowListAssociatedInstanceArrayOutput() GetAllowListsAllowListAssociatedInstanceArrayOutput
	ToGetAllowListsAllowListAssociatedInstanceArrayOutputWithContext(context.Context) GetAllowListsAllowListAssociatedInstanceArrayOutput
}

type GetAllowListsAllowListAssociatedInstanceArray []GetAllowListsAllowListAssociatedInstanceInput

func (GetAllowListsAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (i GetAllowListsAllowListAssociatedInstanceArray) ToGetAllowListsAllowListAssociatedInstanceArrayOutput() GetAllowListsAllowListAssociatedInstanceArrayOutput {
	return i.ToGetAllowListsAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i GetAllowListsAllowListAssociatedInstanceArray) ToGetAllowListsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) GetAllowListsAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowListsAllowListAssociatedInstanceArrayOutput)
}

type GetAllowListsAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (GetAllowListsAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (o GetAllowListsAllowListAssociatedInstanceOutput) ToGetAllowListsAllowListAssociatedInstanceOutput() GetAllowListsAllowListAssociatedInstanceOutput {
	return o
}

func (o GetAllowListsAllowListAssociatedInstanceOutput) ToGetAllowListsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) GetAllowListsAllowListAssociatedInstanceOutput {
	return o
}

// The instance ID to query.
func (o GetAllowListsAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsAllowListAssociatedInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the instance.
func (o GetAllowListsAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsAllowListAssociatedInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

type GetAllowListsAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetAllowListsAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (o GetAllowListsAllowListAssociatedInstanceArrayOutput) ToGetAllowListsAllowListAssociatedInstanceArrayOutput() GetAllowListsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o GetAllowListsAllowListAssociatedInstanceArrayOutput) ToGetAllowListsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) GetAllowListsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o GetAllowListsAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) GetAllowListsAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAllowListsAllowListAssociatedInstance {
		return vs[0].([]GetAllowListsAllowListAssociatedInstance)[vs[1].(int)]
	}).(GetAllowListsAllowListAssociatedInstanceOutput)
}

type GetConsumedPartitionsConsumedPartition struct {
	// The total amount of message accumulation in this topic partition for the consumer group.
	Accumulation int `pulumi:"accumulation"`
	// The consumed client info of partition.
	ConsumedClient string `pulumi:"consumedClient"`
	// The consumed offset of partition.
	ConsumedOffset int `pulumi:"consumedOffset"`
	// The end offset of partition.
	EndOffset int `pulumi:"endOffset"`
	// The index number of partition.
	PartitionId int `pulumi:"partitionId"`
	// The start offset of partition.
	StartOffset int `pulumi:"startOffset"`
}

// GetConsumedPartitionsConsumedPartitionInput is an input type that accepts GetConsumedPartitionsConsumedPartitionArgs and GetConsumedPartitionsConsumedPartitionOutput values.
// You can construct a concrete instance of `GetConsumedPartitionsConsumedPartitionInput` via:
//
//	GetConsumedPartitionsConsumedPartitionArgs{...}
type GetConsumedPartitionsConsumedPartitionInput interface {
	pulumi.Input

	ToGetConsumedPartitionsConsumedPartitionOutput() GetConsumedPartitionsConsumedPartitionOutput
	ToGetConsumedPartitionsConsumedPartitionOutputWithContext(context.Context) GetConsumedPartitionsConsumedPartitionOutput
}

type GetConsumedPartitionsConsumedPartitionArgs struct {
	// The total amount of message accumulation in this topic partition for the consumer group.
	Accumulation pulumi.IntInput `pulumi:"accumulation"`
	// The consumed client info of partition.
	ConsumedClient pulumi.StringInput `pulumi:"consumedClient"`
	// The consumed offset of partition.
	ConsumedOffset pulumi.IntInput `pulumi:"consumedOffset"`
	// The end offset of partition.
	EndOffset pulumi.IntInput `pulumi:"endOffset"`
	// The index number of partition.
	PartitionId pulumi.IntInput `pulumi:"partitionId"`
	// The start offset of partition.
	StartOffset pulumi.IntInput `pulumi:"startOffset"`
}

func (GetConsumedPartitionsConsumedPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (i GetConsumedPartitionsConsumedPartitionArgs) ToGetConsumedPartitionsConsumedPartitionOutput() GetConsumedPartitionsConsumedPartitionOutput {
	return i.ToGetConsumedPartitionsConsumedPartitionOutputWithContext(context.Background())
}

func (i GetConsumedPartitionsConsumedPartitionArgs) ToGetConsumedPartitionsConsumedPartitionOutputWithContext(ctx context.Context) GetConsumedPartitionsConsumedPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConsumedPartitionsConsumedPartitionOutput)
}

// GetConsumedPartitionsConsumedPartitionArrayInput is an input type that accepts GetConsumedPartitionsConsumedPartitionArray and GetConsumedPartitionsConsumedPartitionArrayOutput values.
// You can construct a concrete instance of `GetConsumedPartitionsConsumedPartitionArrayInput` via:
//
//	GetConsumedPartitionsConsumedPartitionArray{ GetConsumedPartitionsConsumedPartitionArgs{...} }
type GetConsumedPartitionsConsumedPartitionArrayInput interface {
	pulumi.Input

	ToGetConsumedPartitionsConsumedPartitionArrayOutput() GetConsumedPartitionsConsumedPartitionArrayOutput
	ToGetConsumedPartitionsConsumedPartitionArrayOutputWithContext(context.Context) GetConsumedPartitionsConsumedPartitionArrayOutput
}

type GetConsumedPartitionsConsumedPartitionArray []GetConsumedPartitionsConsumedPartitionInput

func (GetConsumedPartitionsConsumedPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (i GetConsumedPartitionsConsumedPartitionArray) ToGetConsumedPartitionsConsumedPartitionArrayOutput() GetConsumedPartitionsConsumedPartitionArrayOutput {
	return i.ToGetConsumedPartitionsConsumedPartitionArrayOutputWithContext(context.Background())
}

func (i GetConsumedPartitionsConsumedPartitionArray) ToGetConsumedPartitionsConsumedPartitionArrayOutputWithContext(ctx context.Context) GetConsumedPartitionsConsumedPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConsumedPartitionsConsumedPartitionArrayOutput)
}

type GetConsumedPartitionsConsumedPartitionOutput struct{ *pulumi.OutputState }

func (GetConsumedPartitionsConsumedPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (o GetConsumedPartitionsConsumedPartitionOutput) ToGetConsumedPartitionsConsumedPartitionOutput() GetConsumedPartitionsConsumedPartitionOutput {
	return o
}

func (o GetConsumedPartitionsConsumedPartitionOutput) ToGetConsumedPartitionsConsumedPartitionOutputWithContext(ctx context.Context) GetConsumedPartitionsConsumedPartitionOutput {
	return o
}

// The total amount of message accumulation in this topic partition for the consumer group.
func (o GetConsumedPartitionsConsumedPartitionOutput) Accumulation() pulumi.IntOutput {
	return o.ApplyT(func(v GetConsumedPartitionsConsumedPartition) int { return v.Accumulation }).(pulumi.IntOutput)
}

// The consumed client info of partition.
func (o GetConsumedPartitionsConsumedPartitionOutput) ConsumedClient() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumedPartitionsConsumedPartition) string { return v.ConsumedClient }).(pulumi.StringOutput)
}

// The consumed offset of partition.
func (o GetConsumedPartitionsConsumedPartitionOutput) ConsumedOffset() pulumi.IntOutput {
	return o.ApplyT(func(v GetConsumedPartitionsConsumedPartition) int { return v.ConsumedOffset }).(pulumi.IntOutput)
}

// The end offset of partition.
func (o GetConsumedPartitionsConsumedPartitionOutput) EndOffset() pulumi.IntOutput {
	return o.ApplyT(func(v GetConsumedPartitionsConsumedPartition) int { return v.EndOffset }).(pulumi.IntOutput)
}

// The index number of partition.
func (o GetConsumedPartitionsConsumedPartitionOutput) PartitionId() pulumi.IntOutput {
	return o.ApplyT(func(v GetConsumedPartitionsConsumedPartition) int { return v.PartitionId }).(pulumi.IntOutput)
}

// The start offset of partition.
func (o GetConsumedPartitionsConsumedPartitionOutput) StartOffset() pulumi.IntOutput {
	return o.ApplyT(func(v GetConsumedPartitionsConsumedPartition) int { return v.StartOffset }).(pulumi.IntOutput)
}

type GetConsumedPartitionsConsumedPartitionArrayOutput struct{ *pulumi.OutputState }

func (GetConsumedPartitionsConsumedPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConsumedPartitionsConsumedPartition)(nil)).Elem()
}

func (o GetConsumedPartitionsConsumedPartitionArrayOutput) ToGetConsumedPartitionsConsumedPartitionArrayOutput() GetConsumedPartitionsConsumedPartitionArrayOutput {
	return o
}

func (o GetConsumedPartitionsConsumedPartitionArrayOutput) ToGetConsumedPartitionsConsumedPartitionArrayOutputWithContext(ctx context.Context) GetConsumedPartitionsConsumedPartitionArrayOutput {
	return o
}

func (o GetConsumedPartitionsConsumedPartitionArrayOutput) Index(i pulumi.IntInput) GetConsumedPartitionsConsumedPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetConsumedPartitionsConsumedPartition {
		return vs[0].([]GetConsumedPartitionsConsumedPartition)[vs[1].(int)]
	}).(GetConsumedPartitionsConsumedPartitionOutput)
}

type GetConsumedTopicsConsumedTopic struct {
	// The total amount of message accumulation in this topic for the consumer group.
	Accumulation int `pulumi:"accumulation"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName string `pulumi:"topicName"`
}

// GetConsumedTopicsConsumedTopicInput is an input type that accepts GetConsumedTopicsConsumedTopicArgs and GetConsumedTopicsConsumedTopicOutput values.
// You can construct a concrete instance of `GetConsumedTopicsConsumedTopicInput` via:
//
//	GetConsumedTopicsConsumedTopicArgs{...}
type GetConsumedTopicsConsumedTopicInput interface {
	pulumi.Input

	ToGetConsumedTopicsConsumedTopicOutput() GetConsumedTopicsConsumedTopicOutput
	ToGetConsumedTopicsConsumedTopicOutputWithContext(context.Context) GetConsumedTopicsConsumedTopicOutput
}

type GetConsumedTopicsConsumedTopicArgs struct {
	// The total amount of message accumulation in this topic for the consumer group.
	Accumulation pulumi.IntInput `pulumi:"accumulation"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GetConsumedTopicsConsumedTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (i GetConsumedTopicsConsumedTopicArgs) ToGetConsumedTopicsConsumedTopicOutput() GetConsumedTopicsConsumedTopicOutput {
	return i.ToGetConsumedTopicsConsumedTopicOutputWithContext(context.Background())
}

func (i GetConsumedTopicsConsumedTopicArgs) ToGetConsumedTopicsConsumedTopicOutputWithContext(ctx context.Context) GetConsumedTopicsConsumedTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConsumedTopicsConsumedTopicOutput)
}

// GetConsumedTopicsConsumedTopicArrayInput is an input type that accepts GetConsumedTopicsConsumedTopicArray and GetConsumedTopicsConsumedTopicArrayOutput values.
// You can construct a concrete instance of `GetConsumedTopicsConsumedTopicArrayInput` via:
//
//	GetConsumedTopicsConsumedTopicArray{ GetConsumedTopicsConsumedTopicArgs{...} }
type GetConsumedTopicsConsumedTopicArrayInput interface {
	pulumi.Input

	ToGetConsumedTopicsConsumedTopicArrayOutput() GetConsumedTopicsConsumedTopicArrayOutput
	ToGetConsumedTopicsConsumedTopicArrayOutputWithContext(context.Context) GetConsumedTopicsConsumedTopicArrayOutput
}

type GetConsumedTopicsConsumedTopicArray []GetConsumedTopicsConsumedTopicInput

func (GetConsumedTopicsConsumedTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (i GetConsumedTopicsConsumedTopicArray) ToGetConsumedTopicsConsumedTopicArrayOutput() GetConsumedTopicsConsumedTopicArrayOutput {
	return i.ToGetConsumedTopicsConsumedTopicArrayOutputWithContext(context.Background())
}

func (i GetConsumedTopicsConsumedTopicArray) ToGetConsumedTopicsConsumedTopicArrayOutputWithContext(ctx context.Context) GetConsumedTopicsConsumedTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetConsumedTopicsConsumedTopicArrayOutput)
}

type GetConsumedTopicsConsumedTopicOutput struct{ *pulumi.OutputState }

func (GetConsumedTopicsConsumedTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (o GetConsumedTopicsConsumedTopicOutput) ToGetConsumedTopicsConsumedTopicOutput() GetConsumedTopicsConsumedTopicOutput {
	return o
}

func (o GetConsumedTopicsConsumedTopicOutput) ToGetConsumedTopicsConsumedTopicOutputWithContext(ctx context.Context) GetConsumedTopicsConsumedTopicOutput {
	return o
}

// The total amount of message accumulation in this topic for the consumer group.
func (o GetConsumedTopicsConsumedTopicOutput) Accumulation() pulumi.IntOutput {
	return o.ApplyT(func(v GetConsumedTopicsConsumedTopic) int { return v.Accumulation }).(pulumi.IntOutput)
}

// The name of kafka topic. This field supports fuzzy query.
func (o GetConsumedTopicsConsumedTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetConsumedTopicsConsumedTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type GetConsumedTopicsConsumedTopicArrayOutput struct{ *pulumi.OutputState }

func (GetConsumedTopicsConsumedTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetConsumedTopicsConsumedTopic)(nil)).Elem()
}

func (o GetConsumedTopicsConsumedTopicArrayOutput) ToGetConsumedTopicsConsumedTopicArrayOutput() GetConsumedTopicsConsumedTopicArrayOutput {
	return o
}

func (o GetConsumedTopicsConsumedTopicArrayOutput) ToGetConsumedTopicsConsumedTopicArrayOutputWithContext(ctx context.Context) GetConsumedTopicsConsumedTopicArrayOutput {
	return o
}

func (o GetConsumedTopicsConsumedTopicArrayOutput) Index(i pulumi.IntInput) GetConsumedTopicsConsumedTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetConsumedTopicsConsumedTopic {
		return vs[0].([]GetConsumedTopicsConsumedTopic)[vs[1].(int)]
	}).(GetConsumedTopicsConsumedTopicOutput)
}

type GetGroupsGroup struct {
	// The id of kafka group, support fuzzy matching.
	GroupId string `pulumi:"groupId"`
	// The state of kafka group.
	State string `pulumi:"state"`
}

// GetGroupsGroupInput is an input type that accepts GetGroupsGroupArgs and GetGroupsGroupOutput values.
// You can construct a concrete instance of `GetGroupsGroupInput` via:
//
//	GetGroupsGroupArgs{...}
type GetGroupsGroupInput interface {
	pulumi.Input

	ToGetGroupsGroupOutput() GetGroupsGroupOutput
	ToGetGroupsGroupOutputWithContext(context.Context) GetGroupsGroupOutput
}

type GetGroupsGroupArgs struct {
	// The id of kafka group, support fuzzy matching.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The state of kafka group.
	State pulumi.StringInput `pulumi:"state"`
}

func (GetGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return i.ToGetGroupsGroupOutputWithContext(context.Background())
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupOutput)
}

// GetGroupsGroupArrayInput is an input type that accepts GetGroupsGroupArray and GetGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupArrayInput` via:
//
//	GetGroupsGroupArray{ GetGroupsGroupArgs{...} }
type GetGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput
	ToGetGroupsGroupArrayOutputWithContext(context.Context) GetGroupsGroupArrayOutput
}

type GetGroupsGroupArray []GetGroupsGroupInput

func (GetGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return i.ToGetGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupArrayOutput)
}

type GetGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return o
}

// The id of kafka group, support fuzzy matching.
func (o GetGroupsGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.GroupId }).(pulumi.StringOutput)
}

// The state of kafka group.
func (o GetGroupsGroupOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.State }).(pulumi.StringOutput)
}

type GetGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroup {
		return vs[0].([]GetGroupsGroup)[vs[1].(int)]
	}).(GetGroupsGroupOutput)
}

type GetInstancesInstance struct {
	// The id of account.
	AccountId string `pulumi:"accountId"`
	// The auto renew status of instance.
	AutoRenew bool `pulumi:"autoRenew"`
	// The charge expire time of instance.
	ChargeExpireTime string `pulumi:"chargeExpireTime"`
	// The charge start time of instance.
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// The charge status of instance.
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of instance.
	ChargeType string `pulumi:"chargeType"`
	// The compute spec of instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// Connection info of the instance.
	ConnectionInfos []GetInstancesInstanceConnectionInfo `pulumi:"connectionInfos"`
	// The create time of instance.
	CreateTime string `pulumi:"createTime"`
	// The id of eip.
	EipId string `pulumi:"eipId"`
	// The id of instance.
	Id string `pulumi:"id"`
	// The description of instance.
	InstanceDescription string `pulumi:"instanceDescription"`
	// The id of instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of instance.
	InstanceName string `pulumi:"instanceName"`
	// The status of instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The overdue reclaim time of instance.
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// The overdue time of instance.
	OverdueTime string `pulumi:"overdueTime"`
	// Parameters of the instance.
	Parameters []GetInstancesInstanceParameter `pulumi:"parameters"`
	// The period unit of instance.
	PeriodUnit string `pulumi:"periodUnit"`
	// Whether enable private domain on public.
	PrivateDomainOnPublic bool `pulumi:"privateDomainOnPublic"`
	// The name of project.
	ProjectName string `pulumi:"projectName"`
	// The id of region.
	RegionId string `pulumi:"regionId"`
	// The storage space of instance.
	StorageSpace int `pulumi:"storageSpace"`
	// The storage type of instance.
	StorageType string `pulumi:"storageType"`
	// The id of subnet.
	SubnetId string `pulumi:"subnetId"`
	// The tags of instance.
	Tags []GetInstancesInstanceTag `pulumi:"tags"`
	// The usable partition number of instance.
	UsablePartitionNumber int `pulumi:"usablePartitionNumber"`
	// The used group number of instance.
	UsedGroupNumber int `pulumi:"usedGroupNumber"`
	// The used partition number of instance.
	UsedPartitionNumber int `pulumi:"usedPartitionNumber"`
	// The used storage space of instance.
	UsedStorageSpace int `pulumi:"usedStorageSpace"`
	// The used topic number of instance.
	UsedTopicNumber int `pulumi:"usedTopicNumber"`
	// The version of instance.
	Version string `pulumi:"version"`
	// The id of vpc.
	VpcId string `pulumi:"vpcId"`
	// The zone id of instance.
	ZoneId string `pulumi:"zoneId"`
}

// GetInstancesInstanceInput is an input type that accepts GetInstancesInstanceArgs and GetInstancesInstanceOutput values.
// You can construct a concrete instance of `GetInstancesInstanceInput` via:
//
//	GetInstancesInstanceArgs{...}
type GetInstancesInstanceInput interface {
	pulumi.Input

	ToGetInstancesInstanceOutput() GetInstancesInstanceOutput
	ToGetInstancesInstanceOutputWithContext(context.Context) GetInstancesInstanceOutput
}

type GetInstancesInstanceArgs struct {
	// The id of account.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The auto renew status of instance.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The charge expire time of instance.
	ChargeExpireTime pulumi.StringInput `pulumi:"chargeExpireTime"`
	// The charge start time of instance.
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// The charge status of instance.
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The compute spec of instance.
	ComputeSpec pulumi.StringInput `pulumi:"computeSpec"`
	// Connection info of the instance.
	ConnectionInfos GetInstancesInstanceConnectionInfoArrayInput `pulumi:"connectionInfos"`
	// The create time of instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The id of eip.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The id of instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The description of instance.
	InstanceDescription pulumi.StringInput `pulumi:"instanceDescription"`
	// The id of instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The overdue reclaim time of instance.
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// The overdue time of instance.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Parameters of the instance.
	Parameters GetInstancesInstanceParameterArrayInput `pulumi:"parameters"`
	// The period unit of instance.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
	// Whether enable private domain on public.
	PrivateDomainOnPublic pulumi.BoolInput `pulumi:"privateDomainOnPublic"`
	// The name of project.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The id of region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The storage space of instance.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// The storage type of instance.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The id of subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The tags of instance.
	Tags GetInstancesInstanceTagArrayInput `pulumi:"tags"`
	// The usable partition number of instance.
	UsablePartitionNumber pulumi.IntInput `pulumi:"usablePartitionNumber"`
	// The used group number of instance.
	UsedGroupNumber pulumi.IntInput `pulumi:"usedGroupNumber"`
	// The used partition number of instance.
	UsedPartitionNumber pulumi.IntInput `pulumi:"usedPartitionNumber"`
	// The used storage space of instance.
	UsedStorageSpace pulumi.IntInput `pulumi:"usedStorageSpace"`
	// The used topic number of instance.
	UsedTopicNumber pulumi.IntInput `pulumi:"usedTopicNumber"`
	// The version of instance.
	Version pulumi.StringInput `pulumi:"version"`
	// The id of vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone id of instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetInstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return i.ToGetInstancesInstanceOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArgs) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceOutput)
}

// GetInstancesInstanceArrayInput is an input type that accepts GetInstancesInstanceArray and GetInstancesInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceArrayInput` via:
//
//	GetInstancesInstanceArray{ GetInstancesInstanceArgs{...} }
type GetInstancesInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput
	ToGetInstancesInstanceArrayOutputWithContext(context.Context) GetInstancesInstanceArrayOutput
}

type GetInstancesInstanceArray []GetInstancesInstanceInput

func (GetInstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return i.ToGetInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceArray) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceArrayOutput)
}

type GetInstancesInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutput() GetInstancesInstanceOutput {
	return o
}

func (o GetInstancesInstanceOutput) ToGetInstancesInstanceOutputWithContext(ctx context.Context) GetInstancesInstanceOutput {
	return o
}

// The id of account.
func (o GetInstancesInstanceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.AccountId }).(pulumi.StringOutput)
}

// The auto renew status of instance.
func (o GetInstancesInstanceOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstance) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The charge expire time of instance.
func (o GetInstancesInstanceOutput) ChargeExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ChargeExpireTime }).(pulumi.StringOutput)
}

// The charge start time of instance.
func (o GetInstancesInstanceOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// The charge status of instance.
func (o GetInstancesInstanceOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of instance.
func (o GetInstancesInstanceOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The compute spec of instance.
func (o GetInstancesInstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ComputeSpec }).(pulumi.StringOutput)
}

// Connection info of the instance.
func (o GetInstancesInstanceOutput) ConnectionInfos() GetInstancesInstanceConnectionInfoArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceConnectionInfo { return v.ConnectionInfos }).(GetInstancesInstanceConnectionInfoArrayOutput)
}

// The create time of instance.
func (o GetInstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of eip.
func (o GetInstancesInstanceOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.EipId }).(pulumi.StringOutput)
}

// The id of instance.
func (o GetInstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The description of instance.
func (o GetInstancesInstanceOutput) InstanceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceDescription }).(pulumi.StringOutput)
}

// The id of instance.
func (o GetInstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of instance.
func (o GetInstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of instance.
func (o GetInstancesInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The overdue reclaim time of instance.
func (o GetInstancesInstanceOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// The overdue time of instance.
func (o GetInstancesInstanceOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Parameters of the instance.
func (o GetInstancesInstanceOutput) Parameters() GetInstancesInstanceParameterArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceParameter { return v.Parameters }).(GetInstancesInstanceParameterArrayOutput)
}

// The period unit of instance.
func (o GetInstancesInstanceOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Whether enable private domain on public.
func (o GetInstancesInstanceOutput) PrivateDomainOnPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesInstance) bool { return v.PrivateDomainOnPublic }).(pulumi.BoolOutput)
}

// The name of project.
func (o GetInstancesInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The id of region.
func (o GetInstancesInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// The storage space of instance.
func (o GetInstancesInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// The storage type of instance.
func (o GetInstancesInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The id of subnet.
func (o GetInstancesInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The tags of instance.
func (o GetInstancesInstanceOutput) Tags() GetInstancesInstanceTagArrayOutput {
	return o.ApplyT(func(v GetInstancesInstance) []GetInstancesInstanceTag { return v.Tags }).(GetInstancesInstanceTagArrayOutput)
}

// The usable partition number of instance.
func (o GetInstancesInstanceOutput) UsablePartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.UsablePartitionNumber }).(pulumi.IntOutput)
}

// The used group number of instance.
func (o GetInstancesInstanceOutput) UsedGroupNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.UsedGroupNumber }).(pulumi.IntOutput)
}

// The used partition number of instance.
func (o GetInstancesInstanceOutput) UsedPartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.UsedPartitionNumber }).(pulumi.IntOutput)
}

// The used storage space of instance.
func (o GetInstancesInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// The used topic number of instance.
func (o GetInstancesInstanceOutput) UsedTopicNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesInstance) int { return v.UsedTopicNumber }).(pulumi.IntOutput)
}

// The version of instance.
func (o GetInstancesInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.Version }).(pulumi.StringOutput)
}

// The id of vpc.
func (o GetInstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of instance.
func (o GetInstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetInstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstance)(nil)).Elem()
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutput() GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) ToGetInstancesInstanceArrayOutputWithContext(ctx context.Context) GetInstancesInstanceArrayOutput {
	return o
}

func (o GetInstancesInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstance {
		return vs[0].([]GetInstancesInstance)[vs[1].(int)]
	}).(GetInstancesInstanceOutput)
}

type GetInstancesInstanceConnectionInfo struct {
	// The endpoint type of instance.
	EndpointType string `pulumi:"endpointType"`
	// The internal endpoint of instance.
	InternalEndpoint string `pulumi:"internalEndpoint"`
	// The network type of instance.
	NetworkType string `pulumi:"networkType"`
	// The public endpoint of instance.
	PublicEndpoint string `pulumi:"publicEndpoint"`
}

// GetInstancesInstanceConnectionInfoInput is an input type that accepts GetInstancesInstanceConnectionInfoArgs and GetInstancesInstanceConnectionInfoOutput values.
// You can construct a concrete instance of `GetInstancesInstanceConnectionInfoInput` via:
//
//	GetInstancesInstanceConnectionInfoArgs{...}
type GetInstancesInstanceConnectionInfoInput interface {
	pulumi.Input

	ToGetInstancesInstanceConnectionInfoOutput() GetInstancesInstanceConnectionInfoOutput
	ToGetInstancesInstanceConnectionInfoOutputWithContext(context.Context) GetInstancesInstanceConnectionInfoOutput
}

type GetInstancesInstanceConnectionInfoArgs struct {
	// The endpoint type of instance.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The internal endpoint of instance.
	InternalEndpoint pulumi.StringInput `pulumi:"internalEndpoint"`
	// The network type of instance.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The public endpoint of instance.
	PublicEndpoint pulumi.StringInput `pulumi:"publicEndpoint"`
}

func (GetInstancesInstanceConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceConnectionInfo)(nil)).Elem()
}

func (i GetInstancesInstanceConnectionInfoArgs) ToGetInstancesInstanceConnectionInfoOutput() GetInstancesInstanceConnectionInfoOutput {
	return i.ToGetInstancesInstanceConnectionInfoOutputWithContext(context.Background())
}

func (i GetInstancesInstanceConnectionInfoArgs) ToGetInstancesInstanceConnectionInfoOutputWithContext(ctx context.Context) GetInstancesInstanceConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceConnectionInfoOutput)
}

// GetInstancesInstanceConnectionInfoArrayInput is an input type that accepts GetInstancesInstanceConnectionInfoArray and GetInstancesInstanceConnectionInfoArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceConnectionInfoArrayInput` via:
//
//	GetInstancesInstanceConnectionInfoArray{ GetInstancesInstanceConnectionInfoArgs{...} }
type GetInstancesInstanceConnectionInfoArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceConnectionInfoArrayOutput() GetInstancesInstanceConnectionInfoArrayOutput
	ToGetInstancesInstanceConnectionInfoArrayOutputWithContext(context.Context) GetInstancesInstanceConnectionInfoArrayOutput
}

type GetInstancesInstanceConnectionInfoArray []GetInstancesInstanceConnectionInfoInput

func (GetInstancesInstanceConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceConnectionInfo)(nil)).Elem()
}

func (i GetInstancesInstanceConnectionInfoArray) ToGetInstancesInstanceConnectionInfoArrayOutput() GetInstancesInstanceConnectionInfoArrayOutput {
	return i.ToGetInstancesInstanceConnectionInfoArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceConnectionInfoArray) ToGetInstancesInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) GetInstancesInstanceConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceConnectionInfoArrayOutput)
}

type GetInstancesInstanceConnectionInfoOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceConnectionInfo)(nil)).Elem()
}

func (o GetInstancesInstanceConnectionInfoOutput) ToGetInstancesInstanceConnectionInfoOutput() GetInstancesInstanceConnectionInfoOutput {
	return o
}

func (o GetInstancesInstanceConnectionInfoOutput) ToGetInstancesInstanceConnectionInfoOutputWithContext(ctx context.Context) GetInstancesInstanceConnectionInfoOutput {
	return o
}

// The endpoint type of instance.
func (o GetInstancesInstanceConnectionInfoOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceConnectionInfo) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The internal endpoint of instance.
func (o GetInstancesInstanceConnectionInfoOutput) InternalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceConnectionInfo) string { return v.InternalEndpoint }).(pulumi.StringOutput)
}

// The network type of instance.
func (o GetInstancesInstanceConnectionInfoOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceConnectionInfo) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The public endpoint of instance.
func (o GetInstancesInstanceConnectionInfoOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceConnectionInfo) string { return v.PublicEndpoint }).(pulumi.StringOutput)
}

type GetInstancesInstanceConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceConnectionInfo)(nil)).Elem()
}

func (o GetInstancesInstanceConnectionInfoArrayOutput) ToGetInstancesInstanceConnectionInfoArrayOutput() GetInstancesInstanceConnectionInfoArrayOutput {
	return o
}

func (o GetInstancesInstanceConnectionInfoArrayOutput) ToGetInstancesInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) GetInstancesInstanceConnectionInfoArrayOutput {
	return o
}

func (o GetInstancesInstanceConnectionInfoArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceConnectionInfo {
		return vs[0].([]GetInstancesInstanceConnectionInfo)[vs[1].(int)]
	}).(GetInstancesInstanceConnectionInfoOutput)
}

type GetInstancesInstanceParameter struct {
	// Parameter name.
	ParameterName string `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue string `pulumi:"parameterValue"`
}

// GetInstancesInstanceParameterInput is an input type that accepts GetInstancesInstanceParameterArgs and GetInstancesInstanceParameterOutput values.
// You can construct a concrete instance of `GetInstancesInstanceParameterInput` via:
//
//	GetInstancesInstanceParameterArgs{...}
type GetInstancesInstanceParameterInput interface {
	pulumi.Input

	ToGetInstancesInstanceParameterOutput() GetInstancesInstanceParameterOutput
	ToGetInstancesInstanceParameterOutputWithContext(context.Context) GetInstancesInstanceParameterOutput
}

type GetInstancesInstanceParameterArgs struct {
	// Parameter name.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// Parameter value.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (GetInstancesInstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceParameter)(nil)).Elem()
}

func (i GetInstancesInstanceParameterArgs) ToGetInstancesInstanceParameterOutput() GetInstancesInstanceParameterOutput {
	return i.ToGetInstancesInstanceParameterOutputWithContext(context.Background())
}

func (i GetInstancesInstanceParameterArgs) ToGetInstancesInstanceParameterOutputWithContext(ctx context.Context) GetInstancesInstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceParameterOutput)
}

// GetInstancesInstanceParameterArrayInput is an input type that accepts GetInstancesInstanceParameterArray and GetInstancesInstanceParameterArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceParameterArrayInput` via:
//
//	GetInstancesInstanceParameterArray{ GetInstancesInstanceParameterArgs{...} }
type GetInstancesInstanceParameterArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceParameterArrayOutput() GetInstancesInstanceParameterArrayOutput
	ToGetInstancesInstanceParameterArrayOutputWithContext(context.Context) GetInstancesInstanceParameterArrayOutput
}

type GetInstancesInstanceParameterArray []GetInstancesInstanceParameterInput

func (GetInstancesInstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceParameter)(nil)).Elem()
}

func (i GetInstancesInstanceParameterArray) ToGetInstancesInstanceParameterArrayOutput() GetInstancesInstanceParameterArrayOutput {
	return i.ToGetInstancesInstanceParameterArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceParameterArray) ToGetInstancesInstanceParameterArrayOutputWithContext(ctx context.Context) GetInstancesInstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceParameterArrayOutput)
}

type GetInstancesInstanceParameterOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceParameter)(nil)).Elem()
}

func (o GetInstancesInstanceParameterOutput) ToGetInstancesInstanceParameterOutput() GetInstancesInstanceParameterOutput {
	return o
}

func (o GetInstancesInstanceParameterOutput) ToGetInstancesInstanceParameterOutputWithContext(ctx context.Context) GetInstancesInstanceParameterOutput {
	return o
}

// Parameter name.
func (o GetInstancesInstanceParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

// Parameter value.
func (o GetInstancesInstanceParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type GetInstancesInstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceParameter)(nil)).Elem()
}

func (o GetInstancesInstanceParameterArrayOutput) ToGetInstancesInstanceParameterArrayOutput() GetInstancesInstanceParameterArrayOutput {
	return o
}

func (o GetInstancesInstanceParameterArrayOutput) ToGetInstancesInstanceParameterArrayOutputWithContext(ctx context.Context) GetInstancesInstanceParameterArrayOutput {
	return o
}

func (o GetInstancesInstanceParameterArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceParameter {
		return vs[0].([]GetInstancesInstanceParameter)[vs[1].(int)]
	}).(GetInstancesInstanceParameterOutput)
}

type GetInstancesInstanceTag struct {
	// The key of tag.
	Key string `pulumi:"key"`
	// The value of tag.
	Value string `pulumi:"value"`
}

// GetInstancesInstanceTagInput is an input type that accepts GetInstancesInstanceTagArgs and GetInstancesInstanceTagOutput values.
// You can construct a concrete instance of `GetInstancesInstanceTagInput` via:
//
//	GetInstancesInstanceTagArgs{...}
type GetInstancesInstanceTagInput interface {
	pulumi.Input

	ToGetInstancesInstanceTagOutput() GetInstancesInstanceTagOutput
	ToGetInstancesInstanceTagOutputWithContext(context.Context) GetInstancesInstanceTagOutput
}

type GetInstancesInstanceTagArgs struct {
	// The key of tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceTag)(nil)).Elem()
}

func (i GetInstancesInstanceTagArgs) ToGetInstancesInstanceTagOutput() GetInstancesInstanceTagOutput {
	return i.ToGetInstancesInstanceTagOutputWithContext(context.Background())
}

func (i GetInstancesInstanceTagArgs) ToGetInstancesInstanceTagOutputWithContext(ctx context.Context) GetInstancesInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceTagOutput)
}

// GetInstancesInstanceTagArrayInput is an input type that accepts GetInstancesInstanceTagArray and GetInstancesInstanceTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesInstanceTagArrayInput` via:
//
//	GetInstancesInstanceTagArray{ GetInstancesInstanceTagArgs{...} }
type GetInstancesInstanceTagArrayInput interface {
	pulumi.Input

	ToGetInstancesInstanceTagArrayOutput() GetInstancesInstanceTagArrayOutput
	ToGetInstancesInstanceTagArrayOutputWithContext(context.Context) GetInstancesInstanceTagArrayOutput
}

type GetInstancesInstanceTagArray []GetInstancesInstanceTagInput

func (GetInstancesInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceTag)(nil)).Elem()
}

func (i GetInstancesInstanceTagArray) ToGetInstancesInstanceTagArrayOutput() GetInstancesInstanceTagArrayOutput {
	return i.ToGetInstancesInstanceTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesInstanceTagArray) ToGetInstancesInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesInstanceTagArrayOutput)
}

type GetInstancesInstanceTagOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesInstanceTag)(nil)).Elem()
}

func (o GetInstancesInstanceTagOutput) ToGetInstancesInstanceTagOutput() GetInstancesInstanceTagOutput {
	return o
}

func (o GetInstancesInstanceTagOutput) ToGetInstancesInstanceTagOutputWithContext(ctx context.Context) GetInstancesInstanceTagOutput {
	return o
}

// The key of tag.
func (o GetInstancesInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of tag.
func (o GetInstancesInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesInstanceTag)(nil)).Elem()
}

func (o GetInstancesInstanceTagArrayOutput) ToGetInstancesInstanceTagArrayOutput() GetInstancesInstanceTagArrayOutput {
	return o
}

func (o GetInstancesInstanceTagArrayOutput) ToGetInstancesInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesInstanceTagArrayOutput {
	return o
}

func (o GetInstancesInstanceTagArrayOutput) Index(i pulumi.IntInput) GetInstancesInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesInstanceTag {
		return vs[0].([]GetInstancesInstanceTag)[vs[1].(int)]
	}).(GetInstancesInstanceTagOutput)
}

type GetInstancesTag struct {
	// The key of tag.
	Key string `pulumi:"key"`
	// The value of tag.
	Value string `pulumi:"value"`
}

// GetInstancesTagInput is an input type that accepts GetInstancesTagArgs and GetInstancesTagOutput values.
// You can construct a concrete instance of `GetInstancesTagInput` via:
//
//	GetInstancesTagArgs{...}
type GetInstancesTagInput interface {
	pulumi.Input

	ToGetInstancesTagOutput() GetInstancesTagOutput
	ToGetInstancesTagOutputWithContext(context.Context) GetInstancesTagOutput
}

type GetInstancesTagArgs struct {
	// The key of tag.
	Key pulumi.StringInput `pulumi:"key"`
	// The value of tag.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return i.ToGetInstancesTagOutputWithContext(context.Background())
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagOutput)
}

// GetInstancesTagArrayInput is an input type that accepts GetInstancesTagArray and GetInstancesTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesTagArrayInput` via:
//
//	GetInstancesTagArray{ GetInstancesTagArgs{...} }
type GetInstancesTagArrayInput interface {
	pulumi.Input

	ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput
	ToGetInstancesTagArrayOutputWithContext(context.Context) GetInstancesTagArrayOutput
}

type GetInstancesTagArray []GetInstancesTagInput

func (GetInstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return i.ToGetInstancesTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagArrayOutput)
}

type GetInstancesTagOutput struct{ *pulumi.OutputState }

func (GetInstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return o
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return o
}

// The key of tag.
func (o GetInstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The value of tag.
func (o GetInstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) Index(i pulumi.IntInput) GetInstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesTag {
		return vs[0].([]GetInstancesTag)[vs[1].(int)]
	}).(GetInstancesTagOutput)
}

type GetRegionsRegion struct {
	// The description of region.
	Description string `pulumi:"description"`
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The name of region.
	RegionName string `pulumi:"regionName"`
	// The status of region.
	Status string `pulumi:"status"`
}

// GetRegionsRegionInput is an input type that accepts GetRegionsRegionArgs and GetRegionsRegionOutput values.
// You can construct a concrete instance of `GetRegionsRegionInput` via:
//
//	GetRegionsRegionArgs{...}
type GetRegionsRegionInput interface {
	pulumi.Input

	ToGetRegionsRegionOutput() GetRegionsRegionOutput
	ToGetRegionsRegionOutputWithContext(context.Context) GetRegionsRegionOutput
}

type GetRegionsRegionArgs struct {
	// The description of region.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The name of region.
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// The status of region.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return i.ToGetRegionsRegionOutputWithContext(context.Background())
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionOutput)
}

// GetRegionsRegionArrayInput is an input type that accepts GetRegionsRegionArray and GetRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetRegionsRegionArrayInput` via:
//
//	GetRegionsRegionArray{ GetRegionsRegionArgs{...} }
type GetRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput
	ToGetRegionsRegionArrayOutputWithContext(context.Context) GetRegionsRegionArrayOutput
}

type GetRegionsRegionArray []GetRegionsRegionInput

func (GetRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return i.ToGetRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionArrayOutput)
}

type GetRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return o
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return o
}

// The description of region.
func (o GetRegionsRegionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the region.
func (o GetRegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

// The name of region.
func (o GetRegionsRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.RegionName }).(pulumi.StringOutput)
}

// The status of region.
func (o GetRegionsRegionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Status }).(pulumi.StringOutput)
}

type GetRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionsRegion {
		return vs[0].([]GetRegionsRegion)[vs[1].(int)]
	}).(GetRegionsRegionOutput)
}

type GetSaslUsersUser struct {
	// Whether this user has read and write permissions for all topics.
	AllAuthority bool `pulumi:"allAuthority"`
	// The create time.
	CreateTime string `pulumi:"createTime"`
	// The description of user.
	Description string `pulumi:"description"`
	// The type of password.
	PasswordType string `pulumi:"passwordType"`
	// The user name, support fuzzy matching.
	UserName string `pulumi:"userName"`
}

// GetSaslUsersUserInput is an input type that accepts GetSaslUsersUserArgs and GetSaslUsersUserOutput values.
// You can construct a concrete instance of `GetSaslUsersUserInput` via:
//
//	GetSaslUsersUserArgs{...}
type GetSaslUsersUserInput interface {
	pulumi.Input

	ToGetSaslUsersUserOutput() GetSaslUsersUserOutput
	ToGetSaslUsersUserOutputWithContext(context.Context) GetSaslUsersUserOutput
}

type GetSaslUsersUserArgs struct {
	// Whether this user has read and write permissions for all topics.
	AllAuthority pulumi.BoolInput `pulumi:"allAuthority"`
	// The create time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of user.
	Description pulumi.StringInput `pulumi:"description"`
	// The type of password.
	PasswordType pulumi.StringInput `pulumi:"passwordType"`
	// The user name, support fuzzy matching.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (GetSaslUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSaslUsersUser)(nil)).Elem()
}

func (i GetSaslUsersUserArgs) ToGetSaslUsersUserOutput() GetSaslUsersUserOutput {
	return i.ToGetSaslUsersUserOutputWithContext(context.Background())
}

func (i GetSaslUsersUserArgs) ToGetSaslUsersUserOutputWithContext(ctx context.Context) GetSaslUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSaslUsersUserOutput)
}

// GetSaslUsersUserArrayInput is an input type that accepts GetSaslUsersUserArray and GetSaslUsersUserArrayOutput values.
// You can construct a concrete instance of `GetSaslUsersUserArrayInput` via:
//
//	GetSaslUsersUserArray{ GetSaslUsersUserArgs{...} }
type GetSaslUsersUserArrayInput interface {
	pulumi.Input

	ToGetSaslUsersUserArrayOutput() GetSaslUsersUserArrayOutput
	ToGetSaslUsersUserArrayOutputWithContext(context.Context) GetSaslUsersUserArrayOutput
}

type GetSaslUsersUserArray []GetSaslUsersUserInput

func (GetSaslUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSaslUsersUser)(nil)).Elem()
}

func (i GetSaslUsersUserArray) ToGetSaslUsersUserArrayOutput() GetSaslUsersUserArrayOutput {
	return i.ToGetSaslUsersUserArrayOutputWithContext(context.Background())
}

func (i GetSaslUsersUserArray) ToGetSaslUsersUserArrayOutputWithContext(ctx context.Context) GetSaslUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSaslUsersUserArrayOutput)
}

type GetSaslUsersUserOutput struct{ *pulumi.OutputState }

func (GetSaslUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSaslUsersUser)(nil)).Elem()
}

func (o GetSaslUsersUserOutput) ToGetSaslUsersUserOutput() GetSaslUsersUserOutput {
	return o
}

func (o GetSaslUsersUserOutput) ToGetSaslUsersUserOutputWithContext(ctx context.Context) GetSaslUsersUserOutput {
	return o
}

// Whether this user has read and write permissions for all topics.
func (o GetSaslUsersUserOutput) AllAuthority() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSaslUsersUser) bool { return v.AllAuthority }).(pulumi.BoolOutput)
}

// The create time.
func (o GetSaslUsersUserOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslUsersUser) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of user.
func (o GetSaslUsersUserOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslUsersUser) string { return v.Description }).(pulumi.StringOutput)
}

// The type of password.
func (o GetSaslUsersUserOutput) PasswordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslUsersUser) string { return v.PasswordType }).(pulumi.StringOutput)
}

// The user name, support fuzzy matching.
func (o GetSaslUsersUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslUsersUser) string { return v.UserName }).(pulumi.StringOutput)
}

type GetSaslUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetSaslUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSaslUsersUser)(nil)).Elem()
}

func (o GetSaslUsersUserArrayOutput) ToGetSaslUsersUserArrayOutput() GetSaslUsersUserArrayOutput {
	return o
}

func (o GetSaslUsersUserArrayOutput) ToGetSaslUsersUserArrayOutputWithContext(ctx context.Context) GetSaslUsersUserArrayOutput {
	return o
}

func (o GetSaslUsersUserArrayOutput) Index(i pulumi.IntInput) GetSaslUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSaslUsersUser {
		return vs[0].([]GetSaslUsersUser)[vs[1].(int)]
	}).(GetSaslUsersUserOutput)
}

type GetTopicPartitionsPartition struct {
	// The end offset of partition leader.
	EndOffset int `pulumi:"endOffset"`
	// The insync replica info.
	InsyncReplicas []int `pulumi:"insyncReplicas"`
	// The leader info of partition.
	Leader int `pulumi:"leader"`
	// The count of message.
	MessageCount int `pulumi:"messageCount"`
	// The index number of partition.
	PartitionId int `pulumi:"partitionId"`
	// The replica info.
	Replicas []int `pulumi:"replicas"`
	// The start offset of partition leader.
	StartOffset int `pulumi:"startOffset"`
	// The under insync replica info.
	UnderInsyncReplicas []int `pulumi:"underInsyncReplicas"`
}

// GetTopicPartitionsPartitionInput is an input type that accepts GetTopicPartitionsPartitionArgs and GetTopicPartitionsPartitionOutput values.
// You can construct a concrete instance of `GetTopicPartitionsPartitionInput` via:
//
//	GetTopicPartitionsPartitionArgs{...}
type GetTopicPartitionsPartitionInput interface {
	pulumi.Input

	ToGetTopicPartitionsPartitionOutput() GetTopicPartitionsPartitionOutput
	ToGetTopicPartitionsPartitionOutputWithContext(context.Context) GetTopicPartitionsPartitionOutput
}

type GetTopicPartitionsPartitionArgs struct {
	// The end offset of partition leader.
	EndOffset pulumi.IntInput `pulumi:"endOffset"`
	// The insync replica info.
	InsyncReplicas pulumi.IntArrayInput `pulumi:"insyncReplicas"`
	// The leader info of partition.
	Leader pulumi.IntInput `pulumi:"leader"`
	// The count of message.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// The index number of partition.
	PartitionId pulumi.IntInput `pulumi:"partitionId"`
	// The replica info.
	Replicas pulumi.IntArrayInput `pulumi:"replicas"`
	// The start offset of partition leader.
	StartOffset pulumi.IntInput `pulumi:"startOffset"`
	// The under insync replica info.
	UnderInsyncReplicas pulumi.IntArrayInput `pulumi:"underInsyncReplicas"`
}

func (GetTopicPartitionsPartitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicPartitionsPartition)(nil)).Elem()
}

func (i GetTopicPartitionsPartitionArgs) ToGetTopicPartitionsPartitionOutput() GetTopicPartitionsPartitionOutput {
	return i.ToGetTopicPartitionsPartitionOutputWithContext(context.Background())
}

func (i GetTopicPartitionsPartitionArgs) ToGetTopicPartitionsPartitionOutputWithContext(ctx context.Context) GetTopicPartitionsPartitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicPartitionsPartitionOutput)
}

// GetTopicPartitionsPartitionArrayInput is an input type that accepts GetTopicPartitionsPartitionArray and GetTopicPartitionsPartitionArrayOutput values.
// You can construct a concrete instance of `GetTopicPartitionsPartitionArrayInput` via:
//
//	GetTopicPartitionsPartitionArray{ GetTopicPartitionsPartitionArgs{...} }
type GetTopicPartitionsPartitionArrayInput interface {
	pulumi.Input

	ToGetTopicPartitionsPartitionArrayOutput() GetTopicPartitionsPartitionArrayOutput
	ToGetTopicPartitionsPartitionArrayOutputWithContext(context.Context) GetTopicPartitionsPartitionArrayOutput
}

type GetTopicPartitionsPartitionArray []GetTopicPartitionsPartitionInput

func (GetTopicPartitionsPartitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicPartitionsPartition)(nil)).Elem()
}

func (i GetTopicPartitionsPartitionArray) ToGetTopicPartitionsPartitionArrayOutput() GetTopicPartitionsPartitionArrayOutput {
	return i.ToGetTopicPartitionsPartitionArrayOutputWithContext(context.Background())
}

func (i GetTopicPartitionsPartitionArray) ToGetTopicPartitionsPartitionArrayOutputWithContext(ctx context.Context) GetTopicPartitionsPartitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicPartitionsPartitionArrayOutput)
}

type GetTopicPartitionsPartitionOutput struct{ *pulumi.OutputState }

func (GetTopicPartitionsPartitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicPartitionsPartition)(nil)).Elem()
}

func (o GetTopicPartitionsPartitionOutput) ToGetTopicPartitionsPartitionOutput() GetTopicPartitionsPartitionOutput {
	return o
}

func (o GetTopicPartitionsPartitionOutput) ToGetTopicPartitionsPartitionOutputWithContext(ctx context.Context) GetTopicPartitionsPartitionOutput {
	return o
}

// The end offset of partition leader.
func (o GetTopicPartitionsPartitionOutput) EndOffset() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicPartitionsPartition) int { return v.EndOffset }).(pulumi.IntOutput)
}

// The insync replica info.
func (o GetTopicPartitionsPartitionOutput) InsyncReplicas() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetTopicPartitionsPartition) []int { return v.InsyncReplicas }).(pulumi.IntArrayOutput)
}

// The leader info of partition.
func (o GetTopicPartitionsPartitionOutput) Leader() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicPartitionsPartition) int { return v.Leader }).(pulumi.IntOutput)
}

// The count of message.
func (o GetTopicPartitionsPartitionOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicPartitionsPartition) int { return v.MessageCount }).(pulumi.IntOutput)
}

// The index number of partition.
func (o GetTopicPartitionsPartitionOutput) PartitionId() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicPartitionsPartition) int { return v.PartitionId }).(pulumi.IntOutput)
}

// The replica info.
func (o GetTopicPartitionsPartitionOutput) Replicas() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetTopicPartitionsPartition) []int { return v.Replicas }).(pulumi.IntArrayOutput)
}

// The start offset of partition leader.
func (o GetTopicPartitionsPartitionOutput) StartOffset() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicPartitionsPartition) int { return v.StartOffset }).(pulumi.IntOutput)
}

// The under insync replica info.
func (o GetTopicPartitionsPartitionOutput) UnderInsyncReplicas() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetTopicPartitionsPartition) []int { return v.UnderInsyncReplicas }).(pulumi.IntArrayOutput)
}

type GetTopicPartitionsPartitionArrayOutput struct{ *pulumi.OutputState }

func (GetTopicPartitionsPartitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicPartitionsPartition)(nil)).Elem()
}

func (o GetTopicPartitionsPartitionArrayOutput) ToGetTopicPartitionsPartitionArrayOutput() GetTopicPartitionsPartitionArrayOutput {
	return o
}

func (o GetTopicPartitionsPartitionArrayOutput) ToGetTopicPartitionsPartitionArrayOutputWithContext(ctx context.Context) GetTopicPartitionsPartitionArrayOutput {
	return o
}

func (o GetTopicPartitionsPartitionArrayOutput) Index(i pulumi.IntInput) GetTopicPartitionsPartitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicPartitionsPartition {
		return vs[0].([]GetTopicPartitionsPartition)[vs[1].(int)]
	}).(GetTopicPartitionsPartitionOutput)
}

type GetTopicsTopic struct {
	// The access policies info of the kafka topic.
	AccessPolicies []GetTopicsTopicAccessPolicy `pulumi:"accessPolicies"`
	// Whether the kafka topic is configured to be accessible by all users.
	AllAuthority bool `pulumi:"allAuthority"`
	// The create time of the kafka topic.
	CreateTime string `pulumi:"createTime"`
	// The description of the kafka topic.
	Description string `pulumi:"description"`
	// The parameters of the kafka topic.
	Parameters GetTopicsTopicParameters `pulumi:"parameters"`
	// The number of partition in kafka topic.
	PartitionNumber int `pulumi:"partitionNumber"`
	// The number of replica in kafka topic.
	ReplicaNumber int `pulumi:"replicaNumber"`
	// The status of the kafka topic.
	Status string `pulumi:"status"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName string `pulumi:"topicName"`
}

// GetTopicsTopicInput is an input type that accepts GetTopicsTopicArgs and GetTopicsTopicOutput values.
// You can construct a concrete instance of `GetTopicsTopicInput` via:
//
//	GetTopicsTopicArgs{...}
type GetTopicsTopicInput interface {
	pulumi.Input

	ToGetTopicsTopicOutput() GetTopicsTopicOutput
	ToGetTopicsTopicOutputWithContext(context.Context) GetTopicsTopicOutput
}

type GetTopicsTopicArgs struct {
	// The access policies info of the kafka topic.
	AccessPolicies GetTopicsTopicAccessPolicyArrayInput `pulumi:"accessPolicies"`
	// Whether the kafka topic is configured to be accessible by all users.
	AllAuthority pulumi.BoolInput `pulumi:"allAuthority"`
	// The create time of the kafka topic.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the kafka topic.
	Description pulumi.StringInput `pulumi:"description"`
	// The parameters of the kafka topic.
	Parameters GetTopicsTopicParametersInput `pulumi:"parameters"`
	// The number of partition in kafka topic.
	PartitionNumber pulumi.IntInput `pulumi:"partitionNumber"`
	// The number of replica in kafka topic.
	ReplicaNumber pulumi.IntInput `pulumi:"replicaNumber"`
	// The status of the kafka topic.
	Status pulumi.StringInput `pulumi:"status"`
	// The name of kafka topic. This field supports fuzzy query.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GetTopicsTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopic)(nil)).Elem()
}

func (i GetTopicsTopicArgs) ToGetTopicsTopicOutput() GetTopicsTopicOutput {
	return i.ToGetTopicsTopicOutputWithContext(context.Background())
}

func (i GetTopicsTopicArgs) ToGetTopicsTopicOutputWithContext(ctx context.Context) GetTopicsTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsTopicOutput)
}

// GetTopicsTopicArrayInput is an input type that accepts GetTopicsTopicArray and GetTopicsTopicArrayOutput values.
// You can construct a concrete instance of `GetTopicsTopicArrayInput` via:
//
//	GetTopicsTopicArray{ GetTopicsTopicArgs{...} }
type GetTopicsTopicArrayInput interface {
	pulumi.Input

	ToGetTopicsTopicArrayOutput() GetTopicsTopicArrayOutput
	ToGetTopicsTopicArrayOutputWithContext(context.Context) GetTopicsTopicArrayOutput
}

type GetTopicsTopicArray []GetTopicsTopicInput

func (GetTopicsTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsTopic)(nil)).Elem()
}

func (i GetTopicsTopicArray) ToGetTopicsTopicArrayOutput() GetTopicsTopicArrayOutput {
	return i.ToGetTopicsTopicArrayOutputWithContext(context.Background())
}

func (i GetTopicsTopicArray) ToGetTopicsTopicArrayOutputWithContext(ctx context.Context) GetTopicsTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsTopicArrayOutput)
}

type GetTopicsTopicOutput struct{ *pulumi.OutputState }

func (GetTopicsTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopic)(nil)).Elem()
}

func (o GetTopicsTopicOutput) ToGetTopicsTopicOutput() GetTopicsTopicOutput {
	return o
}

func (o GetTopicsTopicOutput) ToGetTopicsTopicOutputWithContext(ctx context.Context) GetTopicsTopicOutput {
	return o
}

// The access policies info of the kafka topic.
func (o GetTopicsTopicOutput) AccessPolicies() GetTopicsTopicAccessPolicyArrayOutput {
	return o.ApplyT(func(v GetTopicsTopic) []GetTopicsTopicAccessPolicy { return v.AccessPolicies }).(GetTopicsTopicAccessPolicyArrayOutput)
}

// Whether the kafka topic is configured to be accessible by all users.
func (o GetTopicsTopicOutput) AllAuthority() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTopicsTopic) bool { return v.AllAuthority }).(pulumi.BoolOutput)
}

// The create time of the kafka topic.
func (o GetTopicsTopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopic) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the kafka topic.
func (o GetTopicsTopicOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopic) string { return v.Description }).(pulumi.StringOutput)
}

// The parameters of the kafka topic.
func (o GetTopicsTopicOutput) Parameters() GetTopicsTopicParametersOutput {
	return o.ApplyT(func(v GetTopicsTopic) GetTopicsTopicParameters { return v.Parameters }).(GetTopicsTopicParametersOutput)
}

// The number of partition in kafka topic.
func (o GetTopicsTopicOutput) PartitionNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsTopic) int { return v.PartitionNumber }).(pulumi.IntOutput)
}

// The number of replica in kafka topic.
func (o GetTopicsTopicOutput) ReplicaNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsTopic) int { return v.ReplicaNumber }).(pulumi.IntOutput)
}

// The status of the kafka topic.
func (o GetTopicsTopicOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopic) string { return v.Status }).(pulumi.StringOutput)
}

// The name of kafka topic. This field supports fuzzy query.
func (o GetTopicsTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type GetTopicsTopicArrayOutput struct{ *pulumi.OutputState }

func (GetTopicsTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsTopic)(nil)).Elem()
}

func (o GetTopicsTopicArrayOutput) ToGetTopicsTopicArrayOutput() GetTopicsTopicArrayOutput {
	return o
}

func (o GetTopicsTopicArrayOutput) ToGetTopicsTopicArrayOutputWithContext(ctx context.Context) GetTopicsTopicArrayOutput {
	return o
}

func (o GetTopicsTopicArrayOutput) Index(i pulumi.IntInput) GetTopicsTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicsTopic {
		return vs[0].([]GetTopicsTopic)[vs[1].(int)]
	}).(GetTopicsTopicOutput)
}

type GetTopicsTopicAccessPolicy struct {
	// The access policy of SASL user.
	AccessPolicy string `pulumi:"accessPolicy"`
	// When a user name is specified, only the access policy of the specified user for this Topic will be returned.
	UserName string `pulumi:"userName"`
}

// GetTopicsTopicAccessPolicyInput is an input type that accepts GetTopicsTopicAccessPolicyArgs and GetTopicsTopicAccessPolicyOutput values.
// You can construct a concrete instance of `GetTopicsTopicAccessPolicyInput` via:
//
//	GetTopicsTopicAccessPolicyArgs{...}
type GetTopicsTopicAccessPolicyInput interface {
	pulumi.Input

	ToGetTopicsTopicAccessPolicyOutput() GetTopicsTopicAccessPolicyOutput
	ToGetTopicsTopicAccessPolicyOutputWithContext(context.Context) GetTopicsTopicAccessPolicyOutput
}

type GetTopicsTopicAccessPolicyArgs struct {
	// The access policy of SASL user.
	AccessPolicy pulumi.StringInput `pulumi:"accessPolicy"`
	// When a user name is specified, only the access policy of the specified user for this Topic will be returned.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (GetTopicsTopicAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopicAccessPolicy)(nil)).Elem()
}

func (i GetTopicsTopicAccessPolicyArgs) ToGetTopicsTopicAccessPolicyOutput() GetTopicsTopicAccessPolicyOutput {
	return i.ToGetTopicsTopicAccessPolicyOutputWithContext(context.Background())
}

func (i GetTopicsTopicAccessPolicyArgs) ToGetTopicsTopicAccessPolicyOutputWithContext(ctx context.Context) GetTopicsTopicAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsTopicAccessPolicyOutput)
}

// GetTopicsTopicAccessPolicyArrayInput is an input type that accepts GetTopicsTopicAccessPolicyArray and GetTopicsTopicAccessPolicyArrayOutput values.
// You can construct a concrete instance of `GetTopicsTopicAccessPolicyArrayInput` via:
//
//	GetTopicsTopicAccessPolicyArray{ GetTopicsTopicAccessPolicyArgs{...} }
type GetTopicsTopicAccessPolicyArrayInput interface {
	pulumi.Input

	ToGetTopicsTopicAccessPolicyArrayOutput() GetTopicsTopicAccessPolicyArrayOutput
	ToGetTopicsTopicAccessPolicyArrayOutputWithContext(context.Context) GetTopicsTopicAccessPolicyArrayOutput
}

type GetTopicsTopicAccessPolicyArray []GetTopicsTopicAccessPolicyInput

func (GetTopicsTopicAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsTopicAccessPolicy)(nil)).Elem()
}

func (i GetTopicsTopicAccessPolicyArray) ToGetTopicsTopicAccessPolicyArrayOutput() GetTopicsTopicAccessPolicyArrayOutput {
	return i.ToGetTopicsTopicAccessPolicyArrayOutputWithContext(context.Background())
}

func (i GetTopicsTopicAccessPolicyArray) ToGetTopicsTopicAccessPolicyArrayOutputWithContext(ctx context.Context) GetTopicsTopicAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsTopicAccessPolicyArrayOutput)
}

type GetTopicsTopicAccessPolicyOutput struct{ *pulumi.OutputState }

func (GetTopicsTopicAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopicAccessPolicy)(nil)).Elem()
}

func (o GetTopicsTopicAccessPolicyOutput) ToGetTopicsTopicAccessPolicyOutput() GetTopicsTopicAccessPolicyOutput {
	return o
}

func (o GetTopicsTopicAccessPolicyOutput) ToGetTopicsTopicAccessPolicyOutputWithContext(ctx context.Context) GetTopicsTopicAccessPolicyOutput {
	return o
}

// The access policy of SASL user.
func (o GetTopicsTopicAccessPolicyOutput) AccessPolicy() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopicAccessPolicy) string { return v.AccessPolicy }).(pulumi.StringOutput)
}

// When a user name is specified, only the access policy of the specified user for this Topic will be returned.
func (o GetTopicsTopicAccessPolicyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsTopicAccessPolicy) string { return v.UserName }).(pulumi.StringOutput)
}

type GetTopicsTopicAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetTopicsTopicAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsTopicAccessPolicy)(nil)).Elem()
}

func (o GetTopicsTopicAccessPolicyArrayOutput) ToGetTopicsTopicAccessPolicyArrayOutput() GetTopicsTopicAccessPolicyArrayOutput {
	return o
}

func (o GetTopicsTopicAccessPolicyArrayOutput) ToGetTopicsTopicAccessPolicyArrayOutputWithContext(ctx context.Context) GetTopicsTopicAccessPolicyArrayOutput {
	return o
}

func (o GetTopicsTopicAccessPolicyArrayOutput) Index(i pulumi.IntInput) GetTopicsTopicAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicsTopicAccessPolicy {
		return vs[0].([]GetTopicsTopicAccessPolicy)[vs[1].(int)]
	}).(GetTopicsTopicAccessPolicyOutput)
}

type GetTopicsTopicParameters struct {
	// The retention hours of log.
	LogRetentionHours int `pulumi:"logRetentionHours"`
	// The max byte of message.
	MessageMaxByte int `pulumi:"messageMaxByte"`
	// The min number of sync replica.
	MinInsyncReplicaNumber int `pulumi:"minInsyncReplicaNumber"`
}

// GetTopicsTopicParametersInput is an input type that accepts GetTopicsTopicParametersArgs and GetTopicsTopicParametersOutput values.
// You can construct a concrete instance of `GetTopicsTopicParametersInput` via:
//
//	GetTopicsTopicParametersArgs{...}
type GetTopicsTopicParametersInput interface {
	pulumi.Input

	ToGetTopicsTopicParametersOutput() GetTopicsTopicParametersOutput
	ToGetTopicsTopicParametersOutputWithContext(context.Context) GetTopicsTopicParametersOutput
}

type GetTopicsTopicParametersArgs struct {
	// The retention hours of log.
	LogRetentionHours pulumi.IntInput `pulumi:"logRetentionHours"`
	// The max byte of message.
	MessageMaxByte pulumi.IntInput `pulumi:"messageMaxByte"`
	// The min number of sync replica.
	MinInsyncReplicaNumber pulumi.IntInput `pulumi:"minInsyncReplicaNumber"`
}

func (GetTopicsTopicParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopicParameters)(nil)).Elem()
}

func (i GetTopicsTopicParametersArgs) ToGetTopicsTopicParametersOutput() GetTopicsTopicParametersOutput {
	return i.ToGetTopicsTopicParametersOutputWithContext(context.Background())
}

func (i GetTopicsTopicParametersArgs) ToGetTopicsTopicParametersOutputWithContext(ctx context.Context) GetTopicsTopicParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsTopicParametersOutput)
}

type GetTopicsTopicParametersOutput struct{ *pulumi.OutputState }

func (GetTopicsTopicParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsTopicParameters)(nil)).Elem()
}

func (o GetTopicsTopicParametersOutput) ToGetTopicsTopicParametersOutput() GetTopicsTopicParametersOutput {
	return o
}

func (o GetTopicsTopicParametersOutput) ToGetTopicsTopicParametersOutputWithContext(ctx context.Context) GetTopicsTopicParametersOutput {
	return o
}

// The retention hours of log.
func (o GetTopicsTopicParametersOutput) LogRetentionHours() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsTopicParameters) int { return v.LogRetentionHours }).(pulumi.IntOutput)
}

// The max byte of message.
func (o GetTopicsTopicParametersOutput) MessageMaxByte() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsTopicParameters) int { return v.MessageMaxByte }).(pulumi.IntOutput)
}

// The min number of sync replica.
func (o GetTopicsTopicParametersOutput) MinInsyncReplicaNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsTopicParameters) int { return v.MinInsyncReplicaNumber }).(pulumi.IntOutput)
}

type GetZonesZone struct {
	// The description of the zone.
	Description string `pulumi:"description"`
	// The id of the zone.
	Id string `pulumi:"id"`
	// The status of the zone.
	Status string `pulumi:"status"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName string `pulumi:"zoneName"`
}

// GetZonesZoneInput is an input type that accepts GetZonesZoneArgs and GetZonesZoneOutput values.
// You can construct a concrete instance of `GetZonesZoneInput` via:
//
//	GetZonesZoneArgs{...}
type GetZonesZoneInput interface {
	pulumi.Input

	ToGetZonesZoneOutput() GetZonesZoneOutput
	ToGetZonesZoneOutputWithContext(context.Context) GetZonesZoneOutput
}

type GetZonesZoneArgs struct {
	// The description of the zone.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The status of the zone.
	Status pulumi.StringInput `pulumi:"status"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (GetZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return i.ToGetZonesZoneOutputWithContext(context.Background())
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneOutput)
}

// GetZonesZoneArrayInput is an input type that accepts GetZonesZoneArray and GetZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetZonesZoneArrayInput` via:
//
//	GetZonesZoneArray{ GetZonesZoneArgs{...} }
type GetZonesZoneArrayInput interface {
	pulumi.Input

	ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput
	ToGetZonesZoneArrayOutputWithContext(context.Context) GetZonesZoneArrayOutput
}

type GetZonesZoneArray []GetZonesZoneInput

func (GetZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return i.ToGetZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneArrayOutput)
}

type GetZonesZoneOutput struct{ *pulumi.OutputState }

func (GetZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return o
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return o
}

// The description of the zone.
func (o GetZonesZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Description }).(pulumi.StringOutput)
}

// The id of the zone.
func (o GetZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The status of the zone.
func (o GetZonesZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Status }).(pulumi.StringOutput)
}

// The id of the zone.
func (o GetZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

// The name of the zone.
func (o GetZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type GetZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) Index(i pulumi.IntInput) GetZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesZone {
		return vs[0].([]GetZonesZone)[vs[1].(int)]
	}).(GetZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListsAllowListInput)(nil)).Elem(), AllowListsAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListsAllowListArrayInput)(nil)).Elem(), AllowListsAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListsAllowListAssociatedInstanceInput)(nil)).Elem(), AllowListsAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListsAllowListAssociatedInstanceArrayInput)(nil)).Elem(), AllowListsAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumedPartitionsConsumedPartitionInput)(nil)).Elem(), ConsumedPartitionsConsumedPartitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumedPartitionsConsumedPartitionArrayInput)(nil)).Elem(), ConsumedPartitionsConsumedPartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumedTopicsConsumedTopicInput)(nil)).Elem(), ConsumedTopicsConsumedTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumedTopicsConsumedTopicArrayInput)(nil)).Elem(), ConsumedTopicsConsumedTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsGroupInput)(nil)).Elem(), GroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsGroupArrayInput)(nil)).Elem(), GroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterInput)(nil)).Elem(), InstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterArrayInput)(nil)).Elem(), InstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceInput)(nil)).Elem(), InstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceArrayInput)(nil)).Elem(), InstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConnectionInfoInput)(nil)).Elem(), InstancesInstanceConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConnectionInfoArrayInput)(nil)).Elem(), InstancesInstanceConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceParameterInput)(nil)).Elem(), InstancesInstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceParameterArrayInput)(nil)).Elem(), InstancesInstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagInput)(nil)).Elem(), InstancesInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagArrayInput)(nil)).Elem(), InstancesInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionInput)(nil)).Elem(), RegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionArrayInput)(nil)).Elem(), RegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaslUsersUserInput)(nil)).Elem(), SaslUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SaslUsersUserArrayInput)(nil)).Elem(), SaslUsersUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicAccessPolicyInput)(nil)).Elem(), TopicAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicAccessPolicyArrayInput)(nil)).Elem(), TopicAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicParametersInput)(nil)).Elem(), TopicParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicParametersPtrInput)(nil)).Elem(), TopicParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPartitionsPartitionInput)(nil)).Elem(), TopicPartitionsPartitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicPartitionsPartitionArrayInput)(nil)).Elem(), TopicPartitionsPartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicInput)(nil)).Elem(), TopicsTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicArrayInput)(nil)).Elem(), TopicsTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicAccessPolicyInput)(nil)).Elem(), TopicsTopicAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicAccessPolicyArrayInput)(nil)).Elem(), TopicsTopicAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsTopicParametersInput)(nil)).Elem(), TopicsTopicParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowListsAllowListInput)(nil)).Elem(), GetAllowListsAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowListsAllowListArrayInput)(nil)).Elem(), GetAllowListsAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowListsAllowListAssociatedInstanceInput)(nil)).Elem(), GetAllowListsAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowListsAllowListAssociatedInstanceArrayInput)(nil)).Elem(), GetAllowListsAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConsumedPartitionsConsumedPartitionInput)(nil)).Elem(), GetConsumedPartitionsConsumedPartitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConsumedPartitionsConsumedPartitionArrayInput)(nil)).Elem(), GetConsumedPartitionsConsumedPartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConsumedTopicsConsumedTopicInput)(nil)).Elem(), GetConsumedTopicsConsumedTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetConsumedTopicsConsumedTopicArrayInput)(nil)).Elem(), GetConsumedTopicsConsumedTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupInput)(nil)).Elem(), GetGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupArrayInput)(nil)).Elem(), GetGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceInput)(nil)).Elem(), GetInstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceArrayInput)(nil)).Elem(), GetInstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceConnectionInfoInput)(nil)).Elem(), GetInstancesInstanceConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceConnectionInfoArrayInput)(nil)).Elem(), GetInstancesInstanceConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceParameterInput)(nil)).Elem(), GetInstancesInstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceParameterArrayInput)(nil)).Elem(), GetInstancesInstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceTagInput)(nil)).Elem(), GetInstancesInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesInstanceTagArrayInput)(nil)).Elem(), GetInstancesInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagInput)(nil)).Elem(), GetInstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagArrayInput)(nil)).Elem(), GetInstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionInput)(nil)).Elem(), GetRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionArrayInput)(nil)).Elem(), GetRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSaslUsersUserInput)(nil)).Elem(), GetSaslUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSaslUsersUserArrayInput)(nil)).Elem(), GetSaslUsersUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicPartitionsPartitionInput)(nil)).Elem(), GetTopicPartitionsPartitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicPartitionsPartitionArrayInput)(nil)).Elem(), GetTopicPartitionsPartitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsTopicInput)(nil)).Elem(), GetTopicsTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsTopicArrayInput)(nil)).Elem(), GetTopicsTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsTopicAccessPolicyInput)(nil)).Elem(), GetTopicsTopicAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsTopicAccessPolicyArrayInput)(nil)).Elem(), GetTopicsTopicAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsTopicParametersInput)(nil)).Elem(), GetTopicsTopicParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneInput)(nil)).Elem(), GetZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneArrayInput)(nil)).Elem(), GetZonesZoneArray{})
	pulumi.RegisterOutputType(AllowListsAllowListOutput{})
	pulumi.RegisterOutputType(AllowListsAllowListArrayOutput{})
	pulumi.RegisterOutputType(AllowListsAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(AllowListsAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(ConsumedPartitionsConsumedPartitionOutput{})
	pulumi.RegisterOutputType(ConsumedPartitionsConsumedPartitionArrayOutput{})
	pulumi.RegisterOutputType(ConsumedTopicsConsumedTopicOutput{})
	pulumi.RegisterOutputType(ConsumedTopicsConsumedTopicArrayOutput{})
	pulumi.RegisterOutputType(GroupsGroupOutput{})
	pulumi.RegisterOutputType(GroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(InstanceParameterOutput{})
	pulumi.RegisterOutputType(InstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConnectionInfoOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceParameterOutput{})
	pulumi.RegisterOutputType(InstancesInstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(RegionsRegionOutput{})
	pulumi.RegisterOutputType(RegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(SaslUsersUserOutput{})
	pulumi.RegisterOutputType(SaslUsersUserArrayOutput{})
	pulumi.RegisterOutputType(TopicAccessPolicyOutput{})
	pulumi.RegisterOutputType(TopicAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(TopicParametersOutput{})
	pulumi.RegisterOutputType(TopicParametersPtrOutput{})
	pulumi.RegisterOutputType(TopicPartitionsPartitionOutput{})
	pulumi.RegisterOutputType(TopicPartitionsPartitionArrayOutput{})
	pulumi.RegisterOutputType(TopicsTopicOutput{})
	pulumi.RegisterOutputType(TopicsTopicArrayOutput{})
	pulumi.RegisterOutputType(TopicsTopicAccessPolicyOutput{})
	pulumi.RegisterOutputType(TopicsTopicAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(TopicsTopicParametersOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
	pulumi.RegisterOutputType(GetAllowListsAllowListOutput{})
	pulumi.RegisterOutputType(GetAllowListsAllowListArrayOutput{})
	pulumi.RegisterOutputType(GetAllowListsAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(GetAllowListsAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetConsumedPartitionsConsumedPartitionOutput{})
	pulumi.RegisterOutputType(GetConsumedPartitionsConsumedPartitionArrayOutput{})
	pulumi.RegisterOutputType(GetConsumedTopicsConsumedTopicOutput{})
	pulumi.RegisterOutputType(GetConsumedTopicsConsumedTopicArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceConnectionInfoOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceParameterOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceTagOutput{})
	pulumi.RegisterOutputType(GetInstancesInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesTagOutput{})
	pulumi.RegisterOutputType(GetInstancesTagArrayOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetSaslUsersUserOutput{})
	pulumi.RegisterOutputType(GetSaslUsersUserArrayOutput{})
	pulumi.RegisterOutputType(GetTopicPartitionsPartitionOutput{})
	pulumi.RegisterOutputType(GetTopicPartitionsPartitionArrayOutput{})
	pulumi.RegisterOutputType(GetTopicsTopicOutput{})
	pulumi.RegisterOutputType(GetTopicsTopicArrayOutput{})
	pulumi.RegisterOutputType(GetTopicsTopicAccessPolicyOutput{})
	pulumi.RegisterOutputType(GetTopicsTopicAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetTopicsTopicParametersOutput{})
	pulumi.RegisterOutputType(GetZonesZoneOutput{})
	pulumi.RegisterOutputType(GetZonesZoneArrayOutput{})
}
