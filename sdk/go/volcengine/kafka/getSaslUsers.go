// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of kafka sasl users
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kafka"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := kafka.NewInstance(ctx, "fooInstance", &kafka.InstanceArgs{
//				InstanceName:        pulumi.String("acc-test-kafka"),
//				InstanceDescription: pulumi.String("tf-test"),
//				Version:             pulumi.String("2.2.2"),
//				ComputeSpec:         pulumi.String("kafka.20xrate.hw"),
//				SubnetId:            fooSubnet.ID(),
//				UserName:            pulumi.String("tf-user"),
//				UserPassword:        pulumi.String("tf-pass!@q1"),
//				ChargeType:          pulumi.String("PostPaid"),
//				StorageSpace:        pulumi.Int(300),
//				PartitionNumber:     pulumi.Int(350),
//				ProjectName:         pulumi.String("default"),
//				Tags: kafka.InstanceTagArray{
//					&kafka.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//				Parameters: kafka.InstanceParameterArray{
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("MessageMaxByte"),
//						ParameterValue: pulumi.String("12"),
//					},
//					&kafka.InstanceParameterArgs{
//						ParameterName:  pulumi.String("LogRetentionHours"),
//						ParameterValue: pulumi.String("70"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooSaslUser, err := kafka.NewSaslUser(ctx, "fooSaslUser", &kafka.SaslUserArgs{
//				UserName:     pulumi.String("acc-test-user"),
//				InstanceId:   fooInstance.ID(),
//				UserPassword: pulumi.String("suqsnis123!"),
//				Description:  pulumi.String("tf-test"),
//				AllAuthority: pulumi.Bool(true),
//				PasswordType: pulumi.String("Scram"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = kafka.GetSaslUsersOutput(ctx, kafka.GetSaslUsersOutputArgs{
//				InstanceId: fooInstance.ID(),
//				UserName:   fooSaslUser.UserName,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetSaslUsers(ctx *pulumi.Context, args *GetSaslUsersArgs, opts ...pulumi.InvokeOption) (*GetSaslUsersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSaslUsersResult
	err := ctx.Invoke("volcengine:kafka/getSaslUsers:getSaslUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSaslUsers.
type GetSaslUsersArgs struct {
	// The id of instance.
	InstanceId string `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The user name, support fuzzy matching.
	UserName *string `pulumi:"userName"`
}

// A collection of values returned by getSaslUsers.
type GetSaslUsersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId string  `pulumi:"instanceId"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The name of user.
	UserName *string `pulumi:"userName"`
	// The collection of query.
	Users []GetSaslUsersUser `pulumi:"users"`
}

func GetSaslUsersOutput(ctx *pulumi.Context, args GetSaslUsersOutputArgs, opts ...pulumi.InvokeOption) GetSaslUsersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSaslUsersResult, error) {
			args := v.(GetSaslUsersArgs)
			r, err := GetSaslUsers(ctx, &args, opts...)
			var s GetSaslUsersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSaslUsersResultOutput)
}

// A collection of arguments for invoking getSaslUsers.
type GetSaslUsersOutputArgs struct {
	// The id of instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The user name, support fuzzy matching.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (GetSaslUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSaslUsersArgs)(nil)).Elem()
}

// A collection of values returned by getSaslUsers.
type GetSaslUsersResultOutput struct{ *pulumi.OutputState }

func (GetSaslUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSaslUsersResult)(nil)).Elem()
}

func (o GetSaslUsersResultOutput) ToGetSaslUsersResultOutput() GetSaslUsersResultOutput {
	return o
}

func (o GetSaslUsersResultOutput) ToGetSaslUsersResultOutputWithContext(ctx context.Context) GetSaslUsersResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetSaslUsersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslUsersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSaslUsersResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSaslUsersResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetSaslUsersResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSaslUsersResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetSaslUsersResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetSaslUsersResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The name of user.
func (o GetSaslUsersResultOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSaslUsersResult) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GetSaslUsersResultOutput) Users() GetSaslUsersUserArrayOutput {
	return o.ApplyT(func(v GetSaslUsersResult) []GetSaslUsersUser { return v.Users }).(GetSaslUsersUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSaslUsersResultOutput{})
}
