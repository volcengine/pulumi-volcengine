// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package kafka

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of kafka topic partitions
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kafka"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := ecs.GetZones(ctx, nil, nil);
// if err != nil {
// return err
// }
// fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
// VpcName: pulumi.String("acc-test-vpc"),
// CidrBlock: pulumi.String("172.16.0.0/16"),
// })
// if err != nil {
// return err
// }
// fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
// SubnetName: pulumi.String("acc-test-subnet"),
// CidrBlock: pulumi.String("172.16.0.0/24"),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// VpcId: fooVpc.ID(),
// })
// if err != nil {
// return err
// }
// fooInstance, err := kafka.NewInstance(ctx, "fooInstance", &kafka.InstanceArgs{
// InstanceName: pulumi.String("acc-test-kafka"),
// InstanceDescription: pulumi.String("tf-test"),
// Version: pulumi.String("2.2.2"),
// ComputeSpec: pulumi.String("kafka.20xrate.hw"),
// SubnetId: fooSubnet.ID(),
// UserName: pulumi.String("tf-user"),
// UserPassword: pulumi.String("tf-pass!@q1"),
// ChargeType: pulumi.String("PostPaid"),
// StorageSpace: pulumi.Int(300),
// PartitionNumber: pulumi.Int(350),
// ProjectName: pulumi.String("default"),
// Tags: kafka.InstanceTagArray{
// &kafka.InstanceTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// Parameters: kafka.InstanceParameterArray{
// &kafka.InstanceParameterArgs{
// ParameterName: pulumi.String("MessageMaxByte"),
// ParameterValue: pulumi.String("12"),
// },
// &kafka.InstanceParameterArgs{
// ParameterName: pulumi.String("LogRetentionHours"),
// ParameterValue: pulumi.String("70"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooSaslUser, err := kafka.NewSaslUser(ctx, "fooSaslUser", &kafka.SaslUserArgs{
// UserName: pulumi.String("acc-test-user"),
// InstanceId: fooInstance.ID(),
// UserPassword: pulumi.String("suqsnis123!"),
// Description: pulumi.String("tf-test"),
// AllAuthority: pulumi.Bool(true),
// PasswordType: pulumi.String("Scram"),
// })
// if err != nil {
// return err
// }
// fooTopic, err := kafka.NewTopic(ctx, "fooTopic", &kafka.TopicArgs{
// TopicName: pulumi.String("acc-test-topic"),
// InstanceId: fooInstance.ID(),
// Description: pulumi.String("tf-test"),
// PartitionNumber: pulumi.Int(15),
// ReplicaNumber: pulumi.Int(3),
// Parameters: &kafka.TopicParametersArgs{
// MinInsyncReplicaNumber: pulumi.Int(2),
// MessageMaxByte: pulumi.Int(10),
// LogRetentionHours: pulumi.Int(96),
// },
// AllAuthority: pulumi.Bool(false),
// AccessPolicies: kafka.TopicAccessPolicyArray{
// &kafka.TopicAccessPolicyArgs{
// UserName: fooSaslUser.UserName,
// AccessPolicy: pulumi.String("Pub"),
// },
// },
// })
// if err != nil {
// return err
// }
// _ = pulumi.All(fooInstance.ID(),fooTopic.TopicName).ApplyT(func(_args []interface{}) (kafka.GetTopicPartitionsResult, error) {
// id := _args[0].(string)
// topicName := _args[1].(string)
// return kafka.GetTopicPartitionsOutput(ctx, kafka.GetTopicPartitionsOutputArgs{
// InstanceId: id,
// TopicName: topicName,
// PartitionIds: interface{}{
// 1,
// 2,
// },
// }, nil), nil
// }).(kafka.GetTopicPartitionsResultOutput)
// return nil
// })
// }
// ```
func GetTopicPartitions(ctx *pulumi.Context, args *GetTopicPartitionsArgs, opts ...pulumi.InvokeOption) (*GetTopicPartitionsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTopicPartitionsResult
	err := ctx.Invoke("volcengine:kafka/getTopicPartitions:getTopicPartitions", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopicPartitions.
type GetTopicPartitionsArgs struct {
	// The id of kafka instance.
	InstanceId string `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The index number of partition.
	PartitionIds []int `pulumi:"partitionIds"`
	// The name of kafka topic.
	TopicName string `pulumi:"topicName"`
	// Whether to only query the list of partitions that have out-of-sync replicas, the default value is false.
	UnderInsyncOnly *bool `pulumi:"underInsyncOnly"`
}

// A collection of values returned by getTopicPartitions.
type GetTopicPartitionsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id           string  `pulumi:"id"`
	InstanceId   string  `pulumi:"instanceId"`
	OutputFile   *string `pulumi:"outputFile"`
	PartitionIds []int   `pulumi:"partitionIds"`
	// The collection of query.
	Partitions []GetTopicPartitionsPartition `pulumi:"partitions"`
	TopicName  string                        `pulumi:"topicName"`
	// The total count of query.
	TotalCount      int   `pulumi:"totalCount"`
	UnderInsyncOnly *bool `pulumi:"underInsyncOnly"`
}

func GetTopicPartitionsOutput(ctx *pulumi.Context, args GetTopicPartitionsOutputArgs, opts ...pulumi.InvokeOption) GetTopicPartitionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTopicPartitionsResult, error) {
			args := v.(GetTopicPartitionsArgs)
			r, err := GetTopicPartitions(ctx, &args, opts...)
			var s GetTopicPartitionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTopicPartitionsResultOutput)
}

// A collection of arguments for invoking getTopicPartitions.
type GetTopicPartitionsOutputArgs struct {
	// The id of kafka instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The index number of partition.
	PartitionIds pulumi.IntArrayInput `pulumi:"partitionIds"`
	// The name of kafka topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
	// Whether to only query the list of partitions that have out-of-sync replicas, the default value is false.
	UnderInsyncOnly pulumi.BoolPtrInput `pulumi:"underInsyncOnly"`
}

func (GetTopicPartitionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicPartitionsArgs)(nil)).Elem()
}

// A collection of values returned by getTopicPartitions.
type GetTopicPartitionsResultOutput struct{ *pulumi.OutputState }

func (GetTopicPartitionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicPartitionsResult)(nil)).Elem()
}

func (o GetTopicPartitionsResultOutput) ToGetTopicPartitionsResultOutput() GetTopicPartitionsResultOutput {
	return o
}

func (o GetTopicPartitionsResultOutput) ToGetTopicPartitionsResultOutputWithContext(ctx context.Context) GetTopicPartitionsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTopicPartitionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicPartitionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTopicPartitionsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicPartitionsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o GetTopicPartitionsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicPartitionsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetTopicPartitionsResultOutput) PartitionIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetTopicPartitionsResult) []int { return v.PartitionIds }).(pulumi.IntArrayOutput)
}

// The collection of query.
func (o GetTopicPartitionsResultOutput) Partitions() GetTopicPartitionsPartitionArrayOutput {
	return o.ApplyT(func(v GetTopicPartitionsResult) []GetTopicPartitionsPartition { return v.Partitions }).(GetTopicPartitionsPartitionArrayOutput)
}

func (o GetTopicPartitionsResultOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicPartitionsResult) string { return v.TopicName }).(pulumi.StringOutput)
}

// The total count of query.
func (o GetTopicPartitionsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicPartitionsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o GetTopicPartitionsResultOutput) UnderInsyncOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTopicPartitionsResult) *bool { return v.UnderInsyncOnly }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTopicPartitionsResultOutput{})
}
