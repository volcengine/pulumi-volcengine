// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package financial_relation

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage financial relation
//
// ## Import
//
// FinancialRelation can be imported using the sub_account_id:relation:relation_id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:financial_relation/financialRelation:FinancialRelation default resource_id
//
// ```
type FinancialRelation struct {
	pulumi.CustomResourceState

	// The display name of the sub account.
	AccountAlias pulumi.StringOutput `pulumi:"accountAlias"`
	// The authorization list of financial management. This field is valid and required when the relation is 4. Valid value range is `1-5`.
	AuthLists pulumi.IntArrayOutput `pulumi:"authLists"`
	// The relation of the financial. Valid values: `1`, `4`. `1` means financial custody, `4` means financial management.
	Relation pulumi.IntOutput `pulumi:"relation"`
	// The id of the financial relation.
	RelationId pulumi.StringOutput `pulumi:"relationId"`
	// The status of the financial relation.
	Status pulumi.IntOutput `pulumi:"status"`
	// The sub account id.
	SubAccountId pulumi.IntOutput `pulumi:"subAccountId"`
}

// NewFinancialRelation registers a new resource with the given unique name, arguments, and options.
func NewFinancialRelation(ctx *pulumi.Context,
	name string, args *FinancialRelationArgs, opts ...pulumi.ResourceOption) (*FinancialRelation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SubAccountId == nil {
		return nil, errors.New("invalid value for required argument 'SubAccountId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FinancialRelation
	err := ctx.RegisterResource("volcengine:financial_relation/financialRelation:FinancialRelation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFinancialRelation gets an existing FinancialRelation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFinancialRelation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FinancialRelationState, opts ...pulumi.ResourceOption) (*FinancialRelation, error) {
	var resource FinancialRelation
	err := ctx.ReadResource("volcengine:financial_relation/financialRelation:FinancialRelation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FinancialRelation resources.
type financialRelationState struct {
	// The display name of the sub account.
	AccountAlias *string `pulumi:"accountAlias"`
	// The authorization list of financial management. This field is valid and required when the relation is 4. Valid value range is `1-5`.
	AuthLists []int `pulumi:"authLists"`
	// The relation of the financial. Valid values: `1`, `4`. `1` means financial custody, `4` means financial management.
	Relation *int `pulumi:"relation"`
	// The id of the financial relation.
	RelationId *string `pulumi:"relationId"`
	// The status of the financial relation.
	Status *int `pulumi:"status"`
	// The sub account id.
	SubAccountId *int `pulumi:"subAccountId"`
}

type FinancialRelationState struct {
	// The display name of the sub account.
	AccountAlias pulumi.StringPtrInput
	// The authorization list of financial management. This field is valid and required when the relation is 4. Valid value range is `1-5`.
	AuthLists pulumi.IntArrayInput
	// The relation of the financial. Valid values: `1`, `4`. `1` means financial custody, `4` means financial management.
	Relation pulumi.IntPtrInput
	// The id of the financial relation.
	RelationId pulumi.StringPtrInput
	// The status of the financial relation.
	Status pulumi.IntPtrInput
	// The sub account id.
	SubAccountId pulumi.IntPtrInput
}

func (FinancialRelationState) ElementType() reflect.Type {
	return reflect.TypeOf((*financialRelationState)(nil)).Elem()
}

type financialRelationArgs struct {
	// The display name of the sub account.
	AccountAlias *string `pulumi:"accountAlias"`
	// The authorization list of financial management. This field is valid and required when the relation is 4. Valid value range is `1-5`.
	AuthLists []int `pulumi:"authLists"`
	// The relation of the financial. Valid values: `1`, `4`. `1` means financial custody, `4` means financial management.
	Relation *int `pulumi:"relation"`
	// The sub account id.
	SubAccountId int `pulumi:"subAccountId"`
}

// The set of arguments for constructing a FinancialRelation resource.
type FinancialRelationArgs struct {
	// The display name of the sub account.
	AccountAlias pulumi.StringPtrInput
	// The authorization list of financial management. This field is valid and required when the relation is 4. Valid value range is `1-5`.
	AuthLists pulumi.IntArrayInput
	// The relation of the financial. Valid values: `1`, `4`. `1` means financial custody, `4` means financial management.
	Relation pulumi.IntPtrInput
	// The sub account id.
	SubAccountId pulumi.IntInput
}

func (FinancialRelationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*financialRelationArgs)(nil)).Elem()
}

type FinancialRelationInput interface {
	pulumi.Input

	ToFinancialRelationOutput() FinancialRelationOutput
	ToFinancialRelationOutputWithContext(ctx context.Context) FinancialRelationOutput
}

func (*FinancialRelation) ElementType() reflect.Type {
	return reflect.TypeOf((**FinancialRelation)(nil)).Elem()
}

func (i *FinancialRelation) ToFinancialRelationOutput() FinancialRelationOutput {
	return i.ToFinancialRelationOutputWithContext(context.Background())
}

func (i *FinancialRelation) ToFinancialRelationOutputWithContext(ctx context.Context) FinancialRelationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FinancialRelationOutput)
}

// FinancialRelationArrayInput is an input type that accepts FinancialRelationArray and FinancialRelationArrayOutput values.
// You can construct a concrete instance of `FinancialRelationArrayInput` via:
//
//	FinancialRelationArray{ FinancialRelationArgs{...} }
type FinancialRelationArrayInput interface {
	pulumi.Input

	ToFinancialRelationArrayOutput() FinancialRelationArrayOutput
	ToFinancialRelationArrayOutputWithContext(context.Context) FinancialRelationArrayOutput
}

type FinancialRelationArray []FinancialRelationInput

func (FinancialRelationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FinancialRelation)(nil)).Elem()
}

func (i FinancialRelationArray) ToFinancialRelationArrayOutput() FinancialRelationArrayOutput {
	return i.ToFinancialRelationArrayOutputWithContext(context.Background())
}

func (i FinancialRelationArray) ToFinancialRelationArrayOutputWithContext(ctx context.Context) FinancialRelationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FinancialRelationArrayOutput)
}

// FinancialRelationMapInput is an input type that accepts FinancialRelationMap and FinancialRelationMapOutput values.
// You can construct a concrete instance of `FinancialRelationMapInput` via:
//
//	FinancialRelationMap{ "key": FinancialRelationArgs{...} }
type FinancialRelationMapInput interface {
	pulumi.Input

	ToFinancialRelationMapOutput() FinancialRelationMapOutput
	ToFinancialRelationMapOutputWithContext(context.Context) FinancialRelationMapOutput
}

type FinancialRelationMap map[string]FinancialRelationInput

func (FinancialRelationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FinancialRelation)(nil)).Elem()
}

func (i FinancialRelationMap) ToFinancialRelationMapOutput() FinancialRelationMapOutput {
	return i.ToFinancialRelationMapOutputWithContext(context.Background())
}

func (i FinancialRelationMap) ToFinancialRelationMapOutputWithContext(ctx context.Context) FinancialRelationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FinancialRelationMapOutput)
}

type FinancialRelationOutput struct{ *pulumi.OutputState }

func (FinancialRelationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FinancialRelation)(nil)).Elem()
}

func (o FinancialRelationOutput) ToFinancialRelationOutput() FinancialRelationOutput {
	return o
}

func (o FinancialRelationOutput) ToFinancialRelationOutputWithContext(ctx context.Context) FinancialRelationOutput {
	return o
}

// The display name of the sub account.
func (o FinancialRelationOutput) AccountAlias() pulumi.StringOutput {
	return o.ApplyT(func(v *FinancialRelation) pulumi.StringOutput { return v.AccountAlias }).(pulumi.StringOutput)
}

// The authorization list of financial management. This field is valid and required when the relation is 4. Valid value range is `1-5`.
func (o FinancialRelationOutput) AuthLists() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *FinancialRelation) pulumi.IntArrayOutput { return v.AuthLists }).(pulumi.IntArrayOutput)
}

// The relation of the financial. Valid values: `1`, `4`. `1` means financial custody, `4` means financial management.
func (o FinancialRelationOutput) Relation() pulumi.IntOutput {
	return o.ApplyT(func(v *FinancialRelation) pulumi.IntOutput { return v.Relation }).(pulumi.IntOutput)
}

// The id of the financial relation.
func (o FinancialRelationOutput) RelationId() pulumi.StringOutput {
	return o.ApplyT(func(v *FinancialRelation) pulumi.StringOutput { return v.RelationId }).(pulumi.StringOutput)
}

// The status of the financial relation.
func (o FinancialRelationOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *FinancialRelation) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// The sub account id.
func (o FinancialRelationOutput) SubAccountId() pulumi.IntOutput {
	return o.ApplyT(func(v *FinancialRelation) pulumi.IntOutput { return v.SubAccountId }).(pulumi.IntOutput)
}

type FinancialRelationArrayOutput struct{ *pulumi.OutputState }

func (FinancialRelationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FinancialRelation)(nil)).Elem()
}

func (o FinancialRelationArrayOutput) ToFinancialRelationArrayOutput() FinancialRelationArrayOutput {
	return o
}

func (o FinancialRelationArrayOutput) ToFinancialRelationArrayOutputWithContext(ctx context.Context) FinancialRelationArrayOutput {
	return o
}

func (o FinancialRelationArrayOutput) Index(i pulumi.IntInput) FinancialRelationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FinancialRelation {
		return vs[0].([]*FinancialRelation)[vs[1].(int)]
	}).(FinancialRelationOutput)
}

type FinancialRelationMapOutput struct{ *pulumi.OutputState }

func (FinancialRelationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FinancialRelation)(nil)).Elem()
}

func (o FinancialRelationMapOutput) ToFinancialRelationMapOutput() FinancialRelationMapOutput {
	return o
}

func (o FinancialRelationMapOutput) ToFinancialRelationMapOutputWithContext(ctx context.Context) FinancialRelationMapOutput {
	return o
}

func (o FinancialRelationMapOutput) MapIndex(k pulumi.StringInput) FinancialRelationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FinancialRelation {
		return vs[0].(map[string]*FinancialRelation)[vs[1].(string)]
	}).(FinancialRelationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FinancialRelationInput)(nil)).Elem(), &FinancialRelation{})
	pulumi.RegisterInputType(reflect.TypeOf((*FinancialRelationArrayInput)(nil)).Elem(), FinancialRelationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FinancialRelationMapInput)(nil)).Elem(), FinancialRelationMap{})
	pulumi.RegisterOutputType(FinancialRelationOutput{})
	pulumi.RegisterOutputType(FinancialRelationArrayOutput{})
	pulumi.RegisterOutputType(FinancialRelationMapOutput{})
}
