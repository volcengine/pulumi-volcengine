// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package financial_relation

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of financial relations
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/financial_relation"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := financial_relation.FinancialRelations(ctx, &financial_relation.FinancialRelationsArgs{
//				AccountIds: []string{
//					"210026****",
//				},
//				Relations: []string{
//					"1",
//				},
//				Statuses: []string{
//					"200",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func FinancialRelations(ctx *pulumi.Context, args *FinancialRelationsArgs, opts ...pulumi.InvokeOption) (*FinancialRelationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FinancialRelationsResult
	err := ctx.Invoke("volcengine:financial_relation/financialRelations:FinancialRelations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking FinancialRelations.
type FinancialRelationsArgs struct {
	// A list of sub account IDs.
	AccountIds []string `pulumi:"accountIds"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// A list of relation. Valid values: `1`, `4`.
	Relations []string `pulumi:"relations"`
	// A list of status. Valid values: `100`, `200`, `250`, `300`, `400`, `500`.
	Statuses []string `pulumi:"statuses"`
}

// A collection of values returned by FinancialRelations.
type FinancialRelationsResult struct {
	AccountIds []string `pulumi:"accountIds"`
	// The collection of query.
	FinancialRelations []FinancialRelationsFinancialRelation `pulumi:"financialRelations"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The relation of the financial.
	Relations []string `pulumi:"relations"`
	// The status of the financial relation.
	Statuses []string `pulumi:"statuses"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func FinancialRelationsOutput(ctx *pulumi.Context, args FinancialRelationsOutputArgs, opts ...pulumi.InvokeOption) FinancialRelationsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FinancialRelationsResult, error) {
			args := v.(FinancialRelationsArgs)
			r, err := FinancialRelations(ctx, &args, opts...)
			var s FinancialRelationsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(FinancialRelationsResultOutput)
}

// A collection of arguments for invoking FinancialRelations.
type FinancialRelationsOutputArgs struct {
	// A list of sub account IDs.
	AccountIds pulumi.StringArrayInput `pulumi:"accountIds"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// A list of relation. Valid values: `1`, `4`.
	Relations pulumi.StringArrayInput `pulumi:"relations"`
	// A list of status. Valid values: `100`, `200`, `250`, `300`, `400`, `500`.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (FinancialRelationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FinancialRelationsArgs)(nil)).Elem()
}

// A collection of values returned by FinancialRelations.
type FinancialRelationsResultOutput struct{ *pulumi.OutputState }

func (FinancialRelationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FinancialRelationsResult)(nil)).Elem()
}

func (o FinancialRelationsResultOutput) ToFinancialRelationsResultOutput() FinancialRelationsResultOutput {
	return o
}

func (o FinancialRelationsResultOutput) ToFinancialRelationsResultOutputWithContext(ctx context.Context) FinancialRelationsResultOutput {
	return o
}

func (o FinancialRelationsResultOutput) AccountIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FinancialRelationsResult) []string { return v.AccountIds }).(pulumi.StringArrayOutput)
}

// The collection of query.
func (o FinancialRelationsResultOutput) FinancialRelations() FinancialRelationsFinancialRelationArrayOutput {
	return o.ApplyT(func(v FinancialRelationsResult) []FinancialRelationsFinancialRelation { return v.FinancialRelations }).(FinancialRelationsFinancialRelationArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o FinancialRelationsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FinancialRelationsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o FinancialRelationsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FinancialRelationsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The relation of the financial.
func (o FinancialRelationsResultOutput) Relations() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FinancialRelationsResult) []string { return v.Relations }).(pulumi.StringArrayOutput)
}

// The status of the financial relation.
func (o FinancialRelationsResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FinancialRelationsResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// The total count of query.
func (o FinancialRelationsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v FinancialRelationsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(FinancialRelationsResultOutput{})
}
