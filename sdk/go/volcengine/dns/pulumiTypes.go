// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type BackupsBackupInfo struct {
	// The ID of the backup.
	BackupId string `pulumi:"backupId"`
	// The time when the backup was created. The time zone is UTC + 8.
	BackupTime string `pulumi:"backupTime"`
	// The number of DNS records in the backup.
	RecordCount int `pulumi:"recordCount"`
}

// BackupsBackupInfoInput is an input type that accepts BackupsBackupInfoArgs and BackupsBackupInfoOutput values.
// You can construct a concrete instance of `BackupsBackupInfoInput` via:
//
//	BackupsBackupInfoArgs{...}
type BackupsBackupInfoInput interface {
	pulumi.Input

	ToBackupsBackupInfoOutput() BackupsBackupInfoOutput
	ToBackupsBackupInfoOutputWithContext(context.Context) BackupsBackupInfoOutput
}

type BackupsBackupInfoArgs struct {
	// The ID of the backup.
	BackupId pulumi.StringInput `pulumi:"backupId"`
	// The time when the backup was created. The time zone is UTC + 8.
	BackupTime pulumi.StringInput `pulumi:"backupTime"`
	// The number of DNS records in the backup.
	RecordCount pulumi.IntInput `pulumi:"recordCount"`
}

func (BackupsBackupInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackupInfo)(nil)).Elem()
}

func (i BackupsBackupInfoArgs) ToBackupsBackupInfoOutput() BackupsBackupInfoOutput {
	return i.ToBackupsBackupInfoOutputWithContext(context.Background())
}

func (i BackupsBackupInfoArgs) ToBackupsBackupInfoOutputWithContext(ctx context.Context) BackupsBackupInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupInfoOutput)
}

// BackupsBackupInfoArrayInput is an input type that accepts BackupsBackupInfoArray and BackupsBackupInfoArrayOutput values.
// You can construct a concrete instance of `BackupsBackupInfoArrayInput` via:
//
//	BackupsBackupInfoArray{ BackupsBackupInfoArgs{...} }
type BackupsBackupInfoArrayInput interface {
	pulumi.Input

	ToBackupsBackupInfoArrayOutput() BackupsBackupInfoArrayOutput
	ToBackupsBackupInfoArrayOutputWithContext(context.Context) BackupsBackupInfoArrayOutput
}

type BackupsBackupInfoArray []BackupsBackupInfoInput

func (BackupsBackupInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackupInfo)(nil)).Elem()
}

func (i BackupsBackupInfoArray) ToBackupsBackupInfoArrayOutput() BackupsBackupInfoArrayOutput {
	return i.ToBackupsBackupInfoArrayOutputWithContext(context.Background())
}

func (i BackupsBackupInfoArray) ToBackupsBackupInfoArrayOutputWithContext(ctx context.Context) BackupsBackupInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupsBackupInfoArrayOutput)
}

type BackupsBackupInfoOutput struct{ *pulumi.OutputState }

func (BackupsBackupInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsBackupInfo)(nil)).Elem()
}

func (o BackupsBackupInfoOutput) ToBackupsBackupInfoOutput() BackupsBackupInfoOutput {
	return o
}

func (o BackupsBackupInfoOutput) ToBackupsBackupInfoOutputWithContext(ctx context.Context) BackupsBackupInfoOutput {
	return o
}

// The ID of the backup.
func (o BackupsBackupInfoOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupInfo) string { return v.BackupId }).(pulumi.StringOutput)
}

// The time when the backup was created. The time zone is UTC + 8.
func (o BackupsBackupInfoOutput) BackupTime() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsBackupInfo) string { return v.BackupTime }).(pulumi.StringOutput)
}

// The number of DNS records in the backup.
func (o BackupsBackupInfoOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsBackupInfo) int { return v.RecordCount }).(pulumi.IntOutput)
}

type BackupsBackupInfoArrayOutput struct{ *pulumi.OutputState }

func (BackupsBackupInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BackupsBackupInfo)(nil)).Elem()
}

func (o BackupsBackupInfoArrayOutput) ToBackupsBackupInfoArrayOutput() BackupsBackupInfoArrayOutput {
	return o
}

func (o BackupsBackupInfoArrayOutput) ToBackupsBackupInfoArrayOutputWithContext(ctx context.Context) BackupsBackupInfoArrayOutput {
	return o
}

func (o BackupsBackupInfoArrayOutput) Index(i pulumi.IntInput) BackupsBackupInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BackupsBackupInfo {
		return vs[0].([]BackupsBackupInfo)[vs[1].(int)]
	}).(BackupsBackupInfoOutput)
}

type RecordSetsRecordSet struct {
	// The domain prefix of the record set.
	Host string `pulumi:"host"`
	// The ID of the DNS record set.
	Id string `pulumi:"id"`
	// The line code corresponding to the DNS record set.
	Line string `pulumi:"line"`
	// The domain prefix contained in the DNS record set, in PQDN (Partially Qualified Domain Name) format.
	Pqdn string `pulumi:"pqdn"`
	// The type of DNS records in the DNS record set.
	Type string `pulumi:"type"`
	// Indicates whether load balancing is enabled for the DNS record set.
	WeightEnabled bool `pulumi:"weightEnabled"`
}

// RecordSetsRecordSetInput is an input type that accepts RecordSetsRecordSetArgs and RecordSetsRecordSetOutput values.
// You can construct a concrete instance of `RecordSetsRecordSetInput` via:
//
//	RecordSetsRecordSetArgs{...}
type RecordSetsRecordSetInput interface {
	pulumi.Input

	ToRecordSetsRecordSetOutput() RecordSetsRecordSetOutput
	ToRecordSetsRecordSetOutputWithContext(context.Context) RecordSetsRecordSetOutput
}

type RecordSetsRecordSetArgs struct {
	// The domain prefix of the record set.
	Host pulumi.StringInput `pulumi:"host"`
	// The ID of the DNS record set.
	Id pulumi.StringInput `pulumi:"id"`
	// The line code corresponding to the DNS record set.
	Line pulumi.StringInput `pulumi:"line"`
	// The domain prefix contained in the DNS record set, in PQDN (Partially Qualified Domain Name) format.
	Pqdn pulumi.StringInput `pulumi:"pqdn"`
	// The type of DNS records in the DNS record set.
	Type pulumi.StringInput `pulumi:"type"`
	// Indicates whether load balancing is enabled for the DNS record set.
	WeightEnabled pulumi.BoolInput `pulumi:"weightEnabled"`
}

func (RecordSetsRecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetsRecordSet)(nil)).Elem()
}

func (i RecordSetsRecordSetArgs) ToRecordSetsRecordSetOutput() RecordSetsRecordSetOutput {
	return i.ToRecordSetsRecordSetOutputWithContext(context.Background())
}

func (i RecordSetsRecordSetArgs) ToRecordSetsRecordSetOutputWithContext(ctx context.Context) RecordSetsRecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetsRecordSetOutput)
}

// RecordSetsRecordSetArrayInput is an input type that accepts RecordSetsRecordSetArray and RecordSetsRecordSetArrayOutput values.
// You can construct a concrete instance of `RecordSetsRecordSetArrayInput` via:
//
//	RecordSetsRecordSetArray{ RecordSetsRecordSetArgs{...} }
type RecordSetsRecordSetArrayInput interface {
	pulumi.Input

	ToRecordSetsRecordSetArrayOutput() RecordSetsRecordSetArrayOutput
	ToRecordSetsRecordSetArrayOutputWithContext(context.Context) RecordSetsRecordSetArrayOutput
}

type RecordSetsRecordSetArray []RecordSetsRecordSetInput

func (RecordSetsRecordSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordSetsRecordSet)(nil)).Elem()
}

func (i RecordSetsRecordSetArray) ToRecordSetsRecordSetArrayOutput() RecordSetsRecordSetArrayOutput {
	return i.ToRecordSetsRecordSetArrayOutputWithContext(context.Background())
}

func (i RecordSetsRecordSetArray) ToRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) RecordSetsRecordSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordSetsRecordSetArrayOutput)
}

type RecordSetsRecordSetOutput struct{ *pulumi.OutputState }

func (RecordSetsRecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordSetsRecordSet)(nil)).Elem()
}

func (o RecordSetsRecordSetOutput) ToRecordSetsRecordSetOutput() RecordSetsRecordSetOutput {
	return o
}

func (o RecordSetsRecordSetOutput) ToRecordSetsRecordSetOutputWithContext(ctx context.Context) RecordSetsRecordSetOutput {
	return o
}

// The domain prefix of the record set.
func (o RecordSetsRecordSetOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Host }).(pulumi.StringOutput)
}

// The ID of the DNS record set.
func (o RecordSetsRecordSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Id }).(pulumi.StringOutput)
}

// The line code corresponding to the DNS record set.
func (o RecordSetsRecordSetOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Line }).(pulumi.StringOutput)
}

// The domain prefix contained in the DNS record set, in PQDN (Partially Qualified Domain Name) format.
func (o RecordSetsRecordSetOutput) Pqdn() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Pqdn }).(pulumi.StringOutput)
}

// The type of DNS records in the DNS record set.
func (o RecordSetsRecordSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) string { return v.Type }).(pulumi.StringOutput)
}

// Indicates whether load balancing is enabled for the DNS record set.
func (o RecordSetsRecordSetOutput) WeightEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordSetsRecordSet) bool { return v.WeightEnabled }).(pulumi.BoolOutput)
}

type RecordSetsRecordSetArrayOutput struct{ *pulumi.OutputState }

func (RecordSetsRecordSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordSetsRecordSet)(nil)).Elem()
}

func (o RecordSetsRecordSetArrayOutput) ToRecordSetsRecordSetArrayOutput() RecordSetsRecordSetArrayOutput {
	return o
}

func (o RecordSetsRecordSetArrayOutput) ToRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) RecordSetsRecordSetArrayOutput {
	return o
}

func (o RecordSetsRecordSetArrayOutput) Index(i pulumi.IntInput) RecordSetsRecordSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordSetsRecordSet {
		return vs[0].([]RecordSetsRecordSet)[vs[1].(int)]
	}).(RecordSetsRecordSetOutput)
}

type RecordsRecord struct {
	// The creation time of the domain.
	CreatedAt string `pulumi:"createdAt"`
	// Indicates whether the DNS record is enabled.
	Enable bool `pulumi:"enable"`
	// Domain prefix of the DNS record.
	Host string `pulumi:"host"`
	// Line of the DNS record.
	Line string `pulumi:"line"`
	// The account ID that called this API.
	Operators []string `pulumi:"operators"`
	// The hostname included in the DNS record, in PQDN (Partially Qualified Domain Name) format.
	Pqdn string `pulumi:"pqdn"`
	// The ID of the DNS record.
	RecordId string `pulumi:"recordId"`
	// The ID of the record set to which the DNS record belongs.
	RecordSetId string `pulumi:"recordSetId"`
	// The remark of the DNS record.
	Remark string `pulumi:"remark"`
	// The tag information of the DNS record.
	Tags []string `pulumi:"tags"`
	// The Time to Live (TTL) of the DNS record. The unit is seconds.
	Ttl int `pulumi:"ttl"`
	// Type of the DNS record.
	Type string `pulumi:"type"`
	// The most recent update time of the domain.
	UpdatedAt string `pulumi:"updatedAt"`
	// Value of the DNS record.
	Value string `pulumi:"value"`
	// The weight of the DNS record.
	Weight int `pulumi:"weight"`
}

// RecordsRecordInput is an input type that accepts RecordsRecordArgs and RecordsRecordOutput values.
// You can construct a concrete instance of `RecordsRecordInput` via:
//
//	RecordsRecordArgs{...}
type RecordsRecordInput interface {
	pulumi.Input

	ToRecordsRecordOutput() RecordsRecordOutput
	ToRecordsRecordOutputWithContext(context.Context) RecordsRecordOutput
}

type RecordsRecordArgs struct {
	// The creation time of the domain.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Indicates whether the DNS record is enabled.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Domain prefix of the DNS record.
	Host pulumi.StringInput `pulumi:"host"`
	// Line of the DNS record.
	Line pulumi.StringInput `pulumi:"line"`
	// The account ID that called this API.
	Operators pulumi.StringArrayInput `pulumi:"operators"`
	// The hostname included in the DNS record, in PQDN (Partially Qualified Domain Name) format.
	Pqdn pulumi.StringInput `pulumi:"pqdn"`
	// The ID of the DNS record.
	RecordId pulumi.StringInput `pulumi:"recordId"`
	// The ID of the record set to which the DNS record belongs.
	RecordSetId pulumi.StringInput `pulumi:"recordSetId"`
	// The remark of the DNS record.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The tag information of the DNS record.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The Time to Live (TTL) of the DNS record. The unit is seconds.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// Type of the DNS record.
	Type pulumi.StringInput `pulumi:"type"`
	// The most recent update time of the domain.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Value of the DNS record.
	Value pulumi.StringInput `pulumi:"value"`
	// The weight of the DNS record.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (RecordsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsRecord)(nil)).Elem()
}

func (i RecordsRecordArgs) ToRecordsRecordOutput() RecordsRecordOutput {
	return i.ToRecordsRecordOutputWithContext(context.Background())
}

func (i RecordsRecordArgs) ToRecordsRecordOutputWithContext(ctx context.Context) RecordsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsRecordOutput)
}

// RecordsRecordArrayInput is an input type that accepts RecordsRecordArray and RecordsRecordArrayOutput values.
// You can construct a concrete instance of `RecordsRecordArrayInput` via:
//
//	RecordsRecordArray{ RecordsRecordArgs{...} }
type RecordsRecordArrayInput interface {
	pulumi.Input

	ToRecordsRecordArrayOutput() RecordsRecordArrayOutput
	ToRecordsRecordArrayOutputWithContext(context.Context) RecordsRecordArrayOutput
}

type RecordsRecordArray []RecordsRecordInput

func (RecordsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsRecord)(nil)).Elem()
}

func (i RecordsRecordArray) ToRecordsRecordArrayOutput() RecordsRecordArrayOutput {
	return i.ToRecordsRecordArrayOutputWithContext(context.Background())
}

func (i RecordsRecordArray) ToRecordsRecordArrayOutputWithContext(ctx context.Context) RecordsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordsRecordArrayOutput)
}

type RecordsRecordOutput struct{ *pulumi.OutputState }

func (RecordsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RecordsRecord)(nil)).Elem()
}

func (o RecordsRecordOutput) ToRecordsRecordOutput() RecordsRecordOutput {
	return o
}

func (o RecordsRecordOutput) ToRecordsRecordOutputWithContext(ctx context.Context) RecordsRecordOutput {
	return o
}

// The creation time of the domain.
func (o RecordsRecordOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates whether the DNS record is enabled.
func (o RecordsRecordOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v RecordsRecord) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Domain prefix of the DNS record.
func (o RecordsRecordOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Host }).(pulumi.StringOutput)
}

// Line of the DNS record.
func (o RecordsRecordOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Line }).(pulumi.StringOutput)
}

// The account ID that called this API.
func (o RecordsRecordOutput) Operators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecordsRecord) []string { return v.Operators }).(pulumi.StringArrayOutput)
}

// The hostname included in the DNS record, in PQDN (Partially Qualified Domain Name) format.
func (o RecordsRecordOutput) Pqdn() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Pqdn }).(pulumi.StringOutput)
}

// The ID of the DNS record.
func (o RecordsRecordOutput) RecordId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.RecordId }).(pulumi.StringOutput)
}

// The ID of the record set to which the DNS record belongs.
func (o RecordsRecordOutput) RecordSetId() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.RecordSetId }).(pulumi.StringOutput)
}

// The remark of the DNS record.
func (o RecordsRecordOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Remark }).(pulumi.StringOutput)
}

// The tag information of the DNS record.
func (o RecordsRecordOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RecordsRecord) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The Time to Live (TTL) of the DNS record. The unit is seconds.
func (o RecordsRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v RecordsRecord) int { return v.Ttl }).(pulumi.IntOutput)
}

// Type of the DNS record.
func (o RecordsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Type }).(pulumi.StringOutput)
}

// The most recent update time of the domain.
func (o RecordsRecordOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Value of the DNS record.
func (o RecordsRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RecordsRecord) string { return v.Value }).(pulumi.StringOutput)
}

// The weight of the DNS record.
func (o RecordsRecordOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v RecordsRecord) int { return v.Weight }).(pulumi.IntOutput)
}

type RecordsRecordArrayOutput struct{ *pulumi.OutputState }

func (RecordsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RecordsRecord)(nil)).Elem()
}

func (o RecordsRecordArrayOutput) ToRecordsRecordArrayOutput() RecordsRecordArrayOutput {
	return o
}

func (o RecordsRecordArrayOutput) ToRecordsRecordArrayOutputWithContext(ctx context.Context) RecordsRecordArrayOutput {
	return o
}

func (o RecordsRecordArrayOutput) Index(i pulumi.IntInput) RecordsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RecordsRecord {
		return vs[0].([]RecordsRecord)[vs[1].(int)]
	}).(RecordsRecordOutput)
}

type ZoneTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ZoneTagInput is an input type that accepts ZoneTagArgs and ZoneTagOutput values.
// You can construct a concrete instance of `ZoneTagInput` via:
//
//	ZoneTagArgs{...}
type ZoneTagInput interface {
	pulumi.Input

	ToZoneTagOutput() ZoneTagOutput
	ToZoneTagOutputWithContext(context.Context) ZoneTagOutput
}

type ZoneTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ZoneTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneTag)(nil)).Elem()
}

func (i ZoneTagArgs) ToZoneTagOutput() ZoneTagOutput {
	return i.ToZoneTagOutputWithContext(context.Background())
}

func (i ZoneTagArgs) ToZoneTagOutputWithContext(ctx context.Context) ZoneTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneTagOutput)
}

// ZoneTagArrayInput is an input type that accepts ZoneTagArray and ZoneTagArrayOutput values.
// You can construct a concrete instance of `ZoneTagArrayInput` via:
//
//	ZoneTagArray{ ZoneTagArgs{...} }
type ZoneTagArrayInput interface {
	pulumi.Input

	ToZoneTagArrayOutput() ZoneTagArrayOutput
	ToZoneTagArrayOutputWithContext(context.Context) ZoneTagArrayOutput
}

type ZoneTagArray []ZoneTagInput

func (ZoneTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneTag)(nil)).Elem()
}

func (i ZoneTagArray) ToZoneTagArrayOutput() ZoneTagArrayOutput {
	return i.ToZoneTagArrayOutputWithContext(context.Background())
}

func (i ZoneTagArray) ToZoneTagArrayOutputWithContext(ctx context.Context) ZoneTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneTagArrayOutput)
}

type ZoneTagOutput struct{ *pulumi.OutputState }

func (ZoneTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZoneTag)(nil)).Elem()
}

func (o ZoneTagOutput) ToZoneTagOutput() ZoneTagOutput {
	return o
}

func (o ZoneTagOutput) ToZoneTagOutputWithContext(ctx context.Context) ZoneTagOutput {
	return o
}

// The Key of Tags.
func (o ZoneTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ZoneTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ZoneTag) string { return v.Value }).(pulumi.StringOutput)
}

type ZoneTagArrayOutput struct{ *pulumi.OutputState }

func (ZoneTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZoneTag)(nil)).Elem()
}

func (o ZoneTagArrayOutput) ToZoneTagArrayOutput() ZoneTagArrayOutput {
	return o
}

func (o ZoneTagArrayOutput) ToZoneTagArrayOutputWithContext(ctx context.Context) ZoneTagArrayOutput {
	return o
}

func (o ZoneTagArrayOutput) Index(i pulumi.IntInput) ZoneTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZoneTag {
		return vs[0].([]ZoneTag)[vs[1].(int)]
	}).(ZoneTagOutput)
}

type ZonesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Values []string `pulumi:"values"`
}

// ZonesTagInput is an input type that accepts ZonesTagArgs and ZonesTagOutput values.
// You can construct a concrete instance of `ZonesTagInput` via:
//
//	ZonesTagArgs{...}
type ZonesTagInput interface {
	pulumi.Input

	ToZonesTagOutput() ZonesTagOutput
	ToZonesTagOutputWithContext(context.Context) ZonesTagOutput
}

type ZonesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ZonesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesTag)(nil)).Elem()
}

func (i ZonesTagArgs) ToZonesTagOutput() ZonesTagOutput {
	return i.ToZonesTagOutputWithContext(context.Background())
}

func (i ZonesTagArgs) ToZonesTagOutputWithContext(ctx context.Context) ZonesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesTagOutput)
}

// ZonesTagArrayInput is an input type that accepts ZonesTagArray and ZonesTagArrayOutput values.
// You can construct a concrete instance of `ZonesTagArrayInput` via:
//
//	ZonesTagArray{ ZonesTagArgs{...} }
type ZonesTagArrayInput interface {
	pulumi.Input

	ToZonesTagArrayOutput() ZonesTagArrayOutput
	ToZonesTagArrayOutputWithContext(context.Context) ZonesTagArrayOutput
}

type ZonesTagArray []ZonesTagInput

func (ZonesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesTag)(nil)).Elem()
}

func (i ZonesTagArray) ToZonesTagArrayOutput() ZonesTagArrayOutput {
	return i.ToZonesTagArrayOutputWithContext(context.Background())
}

func (i ZonesTagArray) ToZonesTagArrayOutputWithContext(ctx context.Context) ZonesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesTagArrayOutput)
}

type ZonesTagOutput struct{ *pulumi.OutputState }

func (ZonesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesTag)(nil)).Elem()
}

func (o ZonesTagOutput) ToZonesTagOutput() ZonesTagOutput {
	return o
}

func (o ZonesTagOutput) ToZonesTagOutputWithContext(ctx context.Context) ZonesTagOutput {
	return o
}

// The Key of Tags.
func (o ZonesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ZonesTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZonesTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ZonesTagArrayOutput struct{ *pulumi.OutputState }

func (ZonesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesTag)(nil)).Elem()
}

func (o ZonesTagArrayOutput) ToZonesTagArrayOutput() ZonesTagArrayOutput {
	return o
}

func (o ZonesTagArrayOutput) ToZonesTagArrayOutputWithContext(ctx context.Context) ZonesTagArrayOutput {
	return o
}

func (o ZonesTagArrayOutput) Index(i pulumi.IntInput) ZonesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesTag {
		return vs[0].([]ZonesTag)[vs[1].(int)]
	}).(ZonesTagOutput)
}

type ZonesZone struct {
	// The list of DNS servers allocated to the domain by BytePlus DNS.
	AllocateDnsServerLists []string `pulumi:"allocateDnsServerLists"`
	// Whether automatic domain renewal is enabled.
	AutoRenew bool `pulumi:"autoRenew"`
	// The most recent update time of the domain.
	CacheStage int `pulumi:"cacheStage"`
	// The creation time of the domain.
	CreatedAt string `pulumi:"createdAt"`
	// The version of DNS DDoS protection service.
	DnsSecurity string `pulumi:"dnsSecurity"`
	// The expiration time of the domain.
	ExpiredTime int `pulumi:"expiredTime"`
	// The id of the zone.
	Id string `pulumi:"id"`
	// The ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The ID of the instance. For free edition, the value of this field is null.
	InstanceNo string `pulumi:"instanceNo"`
	// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
	IsNsCorrect bool `pulumi:"isNsCorrect"`
	// Whether the domain is a subdomain.
	IsSubDomain bool `pulumi:"isSubDomain"`
	// The ID of the account that last updated this domain.
	LastOperator string `pulumi:"lastOperator"`
	// The ProjectName of the domain.
	ProjectName string `pulumi:"projectName"`
	// The list of DNS servers actually used by the domain.
	RealDnsServerLists []string `pulumi:"realDnsServerLists"`
	// The total number of DNS records contained in the domain.
	RecordCount int `pulumi:"recordCount"`
	// The remarks for the domain.
	Remark string `pulumi:"remark"`
	// The status of the domain.
	Stage int `pulumi:"stage"`
	// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
	SubDomainHost string `pulumi:"subDomainHost"`
	// Tags.
	Tags []ZonesZoneTag `pulumi:"tags"`
	// The edition of the domain.
	TradeCode string `pulumi:"tradeCode"`
	// The most recent update time of the domain.
	UpdatedAt string `pulumi:"updatedAt"`
	// The ID of the domain.
	Zid int `pulumi:"zid"`
	// The domain name.
	ZoneName string `pulumi:"zoneName"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//	ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The list of DNS servers allocated to the domain by BytePlus DNS.
	AllocateDnsServerLists pulumi.StringArrayInput `pulumi:"allocateDnsServerLists"`
	// Whether automatic domain renewal is enabled.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The most recent update time of the domain.
	CacheStage pulumi.IntInput `pulumi:"cacheStage"`
	// The creation time of the domain.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The version of DNS DDoS protection service.
	DnsSecurity pulumi.StringInput `pulumi:"dnsSecurity"`
	// The expiration time of the domain.
	ExpiredTime pulumi.IntInput `pulumi:"expiredTime"`
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The ID of the instance. For free edition, the value of this field is null.
	InstanceNo pulumi.StringInput `pulumi:"instanceNo"`
	// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
	IsNsCorrect pulumi.BoolInput `pulumi:"isNsCorrect"`
	// Whether the domain is a subdomain.
	IsSubDomain pulumi.BoolInput `pulumi:"isSubDomain"`
	// The ID of the account that last updated this domain.
	LastOperator pulumi.StringInput `pulumi:"lastOperator"`
	// The ProjectName of the domain.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The list of DNS servers actually used by the domain.
	RealDnsServerLists pulumi.StringArrayInput `pulumi:"realDnsServerLists"`
	// The total number of DNS records contained in the domain.
	RecordCount pulumi.IntInput `pulumi:"recordCount"`
	// The remarks for the domain.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The status of the domain.
	Stage pulumi.IntInput `pulumi:"stage"`
	// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
	SubDomainHost pulumi.StringInput `pulumi:"subDomainHost"`
	// Tags.
	Tags ZonesZoneTagArrayInput `pulumi:"tags"`
	// The edition of the domain.
	TradeCode pulumi.StringInput `pulumi:"tradeCode"`
	// The most recent update time of the domain.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The ID of the domain.
	Zid pulumi.IntInput `pulumi:"zid"`
	// The domain name.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//	ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The list of DNS servers allocated to the domain by BytePlus DNS.
func (o ZonesZoneOutput) AllocateDnsServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZonesZone) []string { return v.AllocateDnsServerLists }).(pulumi.StringArrayOutput)
}

// Whether automatic domain renewal is enabled.
func (o ZonesZoneOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v ZonesZone) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The most recent update time of the domain.
func (o ZonesZoneOutput) CacheStage() pulumi.IntOutput {
	return o.ApplyT(func(v ZonesZone) int { return v.CacheStage }).(pulumi.IntOutput)
}

// The creation time of the domain.
func (o ZonesZoneOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The version of DNS DDoS protection service.
func (o ZonesZoneOutput) DnsSecurity() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.DnsSecurity }).(pulumi.StringOutput)
}

// The expiration time of the domain.
func (o ZonesZoneOutput) ExpiredTime() pulumi.IntOutput {
	return o.ApplyT(func(v ZonesZone) int { return v.ExpiredTime }).(pulumi.IntOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the instance.
func (o ZonesZoneOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The ID of the instance. For free edition, the value of this field is null.
func (o ZonesZoneOutput) InstanceNo() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.InstanceNo }).(pulumi.StringOutput)
}

// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
func (o ZonesZoneOutput) IsNsCorrect() pulumi.BoolOutput {
	return o.ApplyT(func(v ZonesZone) bool { return v.IsNsCorrect }).(pulumi.BoolOutput)
}

// Whether the domain is a subdomain.
func (o ZonesZoneOutput) IsSubDomain() pulumi.BoolOutput {
	return o.ApplyT(func(v ZonesZone) bool { return v.IsSubDomain }).(pulumi.BoolOutput)
}

// The ID of the account that last updated this domain.
func (o ZonesZoneOutput) LastOperator() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.LastOperator }).(pulumi.StringOutput)
}

// The ProjectName of the domain.
func (o ZonesZoneOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The list of DNS servers actually used by the domain.
func (o ZonesZoneOutput) RealDnsServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ZonesZone) []string { return v.RealDnsServerLists }).(pulumi.StringArrayOutput)
}

// The total number of DNS records contained in the domain.
func (o ZonesZoneOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v ZonesZone) int { return v.RecordCount }).(pulumi.IntOutput)
}

// The remarks for the domain.
func (o ZonesZoneOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Remark }).(pulumi.StringOutput)
}

// The status of the domain.
func (o ZonesZoneOutput) Stage() pulumi.IntOutput {
	return o.ApplyT(func(v ZonesZone) int { return v.Stage }).(pulumi.IntOutput)
}

// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
func (o ZonesZoneOutput) SubDomainHost() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.SubDomainHost }).(pulumi.StringOutput)
}

// Tags.
func (o ZonesZoneOutput) Tags() ZonesZoneTagArrayOutput {
	return o.ApplyT(func(v ZonesZone) []ZonesZoneTag { return v.Tags }).(ZonesZoneTagArrayOutput)
}

// The edition of the domain.
func (o ZonesZoneOutput) TradeCode() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.TradeCode }).(pulumi.StringOutput)
}

// The most recent update time of the domain.
func (o ZonesZoneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The ID of the domain.
func (o ZonesZoneOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v ZonesZone) int { return v.Zid }).(pulumi.IntOutput)
}

// The domain name.
func (o ZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

type ZonesZoneTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// ZonesZoneTagInput is an input type that accepts ZonesZoneTagArgs and ZonesZoneTagOutput values.
// You can construct a concrete instance of `ZonesZoneTagInput` via:
//
//	ZonesZoneTagArgs{...}
type ZonesZoneTagInput interface {
	pulumi.Input

	ToZonesZoneTagOutput() ZonesZoneTagOutput
	ToZonesZoneTagOutputWithContext(context.Context) ZonesZoneTagOutput
}

type ZonesZoneTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (ZonesZoneTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZoneTag)(nil)).Elem()
}

func (i ZonesZoneTagArgs) ToZonesZoneTagOutput() ZonesZoneTagOutput {
	return i.ToZonesZoneTagOutputWithContext(context.Background())
}

func (i ZonesZoneTagArgs) ToZonesZoneTagOutputWithContext(ctx context.Context) ZonesZoneTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneTagOutput)
}

// ZonesZoneTagArrayInput is an input type that accepts ZonesZoneTagArray and ZonesZoneTagArrayOutput values.
// You can construct a concrete instance of `ZonesZoneTagArrayInput` via:
//
//	ZonesZoneTagArray{ ZonesZoneTagArgs{...} }
type ZonesZoneTagArrayInput interface {
	pulumi.Input

	ToZonesZoneTagArrayOutput() ZonesZoneTagArrayOutput
	ToZonesZoneTagArrayOutputWithContext(context.Context) ZonesZoneTagArrayOutput
}

type ZonesZoneTagArray []ZonesZoneTagInput

func (ZonesZoneTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZoneTag)(nil)).Elem()
}

func (i ZonesZoneTagArray) ToZonesZoneTagArrayOutput() ZonesZoneTagArrayOutput {
	return i.ToZonesZoneTagArrayOutputWithContext(context.Background())
}

func (i ZonesZoneTagArray) ToZonesZoneTagArrayOutputWithContext(ctx context.Context) ZonesZoneTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneTagArrayOutput)
}

type ZonesZoneTagOutput struct{ *pulumi.OutputState }

func (ZonesZoneTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZoneTag)(nil)).Elem()
}

func (o ZonesZoneTagOutput) ToZonesZoneTagOutput() ZonesZoneTagOutput {
	return o
}

func (o ZonesZoneTagOutput) ToZonesZoneTagOutputWithContext(ctx context.Context) ZonesZoneTagOutput {
	return o
}

// The Key of Tags.
func (o ZonesZoneTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZoneTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o ZonesZoneTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZoneTag) string { return v.Value }).(pulumi.StringOutput)
}

type ZonesZoneTagArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZoneTag)(nil)).Elem()
}

func (o ZonesZoneTagArrayOutput) ToZonesZoneTagArrayOutput() ZonesZoneTagArrayOutput {
	return o
}

func (o ZonesZoneTagArrayOutput) ToZonesZoneTagArrayOutputWithContext(ctx context.Context) ZonesZoneTagArrayOutput {
	return o
}

func (o ZonesZoneTagArrayOutput) Index(i pulumi.IntInput) ZonesZoneTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZoneTag {
		return vs[0].([]ZonesZoneTag)[vs[1].(int)]
	}).(ZonesZoneTagOutput)
}

type GetBackupsBackupInfo struct {
	// The ID of the backup.
	BackupId string `pulumi:"backupId"`
	// The time when the backup was created. The time zone is UTC + 8.
	BackupTime string `pulumi:"backupTime"`
	// The number of DNS records in the backup.
	RecordCount int `pulumi:"recordCount"`
}

// GetBackupsBackupInfoInput is an input type that accepts GetBackupsBackupInfoArgs and GetBackupsBackupInfoOutput values.
// You can construct a concrete instance of `GetBackupsBackupInfoInput` via:
//
//	GetBackupsBackupInfoArgs{...}
type GetBackupsBackupInfoInput interface {
	pulumi.Input

	ToGetBackupsBackupInfoOutput() GetBackupsBackupInfoOutput
	ToGetBackupsBackupInfoOutputWithContext(context.Context) GetBackupsBackupInfoOutput
}

type GetBackupsBackupInfoArgs struct {
	// The ID of the backup.
	BackupId pulumi.StringInput `pulumi:"backupId"`
	// The time when the backup was created. The time zone is UTC + 8.
	BackupTime pulumi.StringInput `pulumi:"backupTime"`
	// The number of DNS records in the backup.
	RecordCount pulumi.IntInput `pulumi:"recordCount"`
}

func (GetBackupsBackupInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackupInfo)(nil)).Elem()
}

func (i GetBackupsBackupInfoArgs) ToGetBackupsBackupInfoOutput() GetBackupsBackupInfoOutput {
	return i.ToGetBackupsBackupInfoOutputWithContext(context.Background())
}

func (i GetBackupsBackupInfoArgs) ToGetBackupsBackupInfoOutputWithContext(ctx context.Context) GetBackupsBackupInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupInfoOutput)
}

// GetBackupsBackupInfoArrayInput is an input type that accepts GetBackupsBackupInfoArray and GetBackupsBackupInfoArrayOutput values.
// You can construct a concrete instance of `GetBackupsBackupInfoArrayInput` via:
//
//	GetBackupsBackupInfoArray{ GetBackupsBackupInfoArgs{...} }
type GetBackupsBackupInfoArrayInput interface {
	pulumi.Input

	ToGetBackupsBackupInfoArrayOutput() GetBackupsBackupInfoArrayOutput
	ToGetBackupsBackupInfoArrayOutputWithContext(context.Context) GetBackupsBackupInfoArrayOutput
}

type GetBackupsBackupInfoArray []GetBackupsBackupInfoInput

func (GetBackupsBackupInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupsBackupInfo)(nil)).Elem()
}

func (i GetBackupsBackupInfoArray) ToGetBackupsBackupInfoArrayOutput() GetBackupsBackupInfoArrayOutput {
	return i.ToGetBackupsBackupInfoArrayOutputWithContext(context.Background())
}

func (i GetBackupsBackupInfoArray) ToGetBackupsBackupInfoArrayOutputWithContext(ctx context.Context) GetBackupsBackupInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBackupsBackupInfoArrayOutput)
}

type GetBackupsBackupInfoOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBackupsBackupInfo)(nil)).Elem()
}

func (o GetBackupsBackupInfoOutput) ToGetBackupsBackupInfoOutput() GetBackupsBackupInfoOutput {
	return o
}

func (o GetBackupsBackupInfoOutput) ToGetBackupsBackupInfoOutputWithContext(ctx context.Context) GetBackupsBackupInfoOutput {
	return o
}

// The ID of the backup.
func (o GetBackupsBackupInfoOutput) BackupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupInfo) string { return v.BackupId }).(pulumi.StringOutput)
}

// The time when the backup was created. The time zone is UTC + 8.
func (o GetBackupsBackupInfoOutput) BackupTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetBackupsBackupInfo) string { return v.BackupTime }).(pulumi.StringOutput)
}

// The number of DNS records in the backup.
func (o GetBackupsBackupInfoOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetBackupsBackupInfo) int { return v.RecordCount }).(pulumi.IntOutput)
}

type GetBackupsBackupInfoArrayOutput struct{ *pulumi.OutputState }

func (GetBackupsBackupInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBackupsBackupInfo)(nil)).Elem()
}

func (o GetBackupsBackupInfoArrayOutput) ToGetBackupsBackupInfoArrayOutput() GetBackupsBackupInfoArrayOutput {
	return o
}

func (o GetBackupsBackupInfoArrayOutput) ToGetBackupsBackupInfoArrayOutputWithContext(ctx context.Context) GetBackupsBackupInfoArrayOutput {
	return o
}

func (o GetBackupsBackupInfoArrayOutput) Index(i pulumi.IntInput) GetBackupsBackupInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBackupsBackupInfo {
		return vs[0].([]GetBackupsBackupInfo)[vs[1].(int)]
	}).(GetBackupsBackupInfoOutput)
}

type GetRecordSetsRecordSet struct {
	// The domain prefix of the record set.
	Host string `pulumi:"host"`
	// The ID of the DNS record set.
	Id string `pulumi:"id"`
	// The line code corresponding to the DNS record set.
	Line string `pulumi:"line"`
	// The domain prefix contained in the DNS record set, in PQDN (Partially Qualified Domain Name) format.
	Pqdn string `pulumi:"pqdn"`
	// The type of DNS records in the DNS record set.
	Type string `pulumi:"type"`
	// Indicates whether load balancing is enabled for the DNS record set.
	WeightEnabled bool `pulumi:"weightEnabled"`
}

// GetRecordSetsRecordSetInput is an input type that accepts GetRecordSetsRecordSetArgs and GetRecordSetsRecordSetOutput values.
// You can construct a concrete instance of `GetRecordSetsRecordSetInput` via:
//
//	GetRecordSetsRecordSetArgs{...}
type GetRecordSetsRecordSetInput interface {
	pulumi.Input

	ToGetRecordSetsRecordSetOutput() GetRecordSetsRecordSetOutput
	ToGetRecordSetsRecordSetOutputWithContext(context.Context) GetRecordSetsRecordSetOutput
}

type GetRecordSetsRecordSetArgs struct {
	// The domain prefix of the record set.
	Host pulumi.StringInput `pulumi:"host"`
	// The ID of the DNS record set.
	Id pulumi.StringInput `pulumi:"id"`
	// The line code corresponding to the DNS record set.
	Line pulumi.StringInput `pulumi:"line"`
	// The domain prefix contained in the DNS record set, in PQDN (Partially Qualified Domain Name) format.
	Pqdn pulumi.StringInput `pulumi:"pqdn"`
	// The type of DNS records in the DNS record set.
	Type pulumi.StringInput `pulumi:"type"`
	// Indicates whether load balancing is enabled for the DNS record set.
	WeightEnabled pulumi.BoolInput `pulumi:"weightEnabled"`
}

func (GetRecordSetsRecordSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordSetsRecordSet)(nil)).Elem()
}

func (i GetRecordSetsRecordSetArgs) ToGetRecordSetsRecordSetOutput() GetRecordSetsRecordSetOutput {
	return i.ToGetRecordSetsRecordSetOutputWithContext(context.Background())
}

func (i GetRecordSetsRecordSetArgs) ToGetRecordSetsRecordSetOutputWithContext(ctx context.Context) GetRecordSetsRecordSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordSetsRecordSetOutput)
}

// GetRecordSetsRecordSetArrayInput is an input type that accepts GetRecordSetsRecordSetArray and GetRecordSetsRecordSetArrayOutput values.
// You can construct a concrete instance of `GetRecordSetsRecordSetArrayInput` via:
//
//	GetRecordSetsRecordSetArray{ GetRecordSetsRecordSetArgs{...} }
type GetRecordSetsRecordSetArrayInput interface {
	pulumi.Input

	ToGetRecordSetsRecordSetArrayOutput() GetRecordSetsRecordSetArrayOutput
	ToGetRecordSetsRecordSetArrayOutputWithContext(context.Context) GetRecordSetsRecordSetArrayOutput
}

type GetRecordSetsRecordSetArray []GetRecordSetsRecordSetInput

func (GetRecordSetsRecordSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordSetsRecordSet)(nil)).Elem()
}

func (i GetRecordSetsRecordSetArray) ToGetRecordSetsRecordSetArrayOutput() GetRecordSetsRecordSetArrayOutput {
	return i.ToGetRecordSetsRecordSetArrayOutputWithContext(context.Background())
}

func (i GetRecordSetsRecordSetArray) ToGetRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) GetRecordSetsRecordSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordSetsRecordSetArrayOutput)
}

type GetRecordSetsRecordSetOutput struct{ *pulumi.OutputState }

func (GetRecordSetsRecordSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordSetsRecordSet)(nil)).Elem()
}

func (o GetRecordSetsRecordSetOutput) ToGetRecordSetsRecordSetOutput() GetRecordSetsRecordSetOutput {
	return o
}

func (o GetRecordSetsRecordSetOutput) ToGetRecordSetsRecordSetOutputWithContext(ctx context.Context) GetRecordSetsRecordSetOutput {
	return o
}

// The domain prefix of the record set.
func (o GetRecordSetsRecordSetOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.Host }).(pulumi.StringOutput)
}

// The ID of the DNS record set.
func (o GetRecordSetsRecordSetOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.Id }).(pulumi.StringOutput)
}

// The line code corresponding to the DNS record set.
func (o GetRecordSetsRecordSetOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.Line }).(pulumi.StringOutput)
}

// The domain prefix contained in the DNS record set, in PQDN (Partially Qualified Domain Name) format.
func (o GetRecordSetsRecordSetOutput) Pqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.Pqdn }).(pulumi.StringOutput)
}

// The type of DNS records in the DNS record set.
func (o GetRecordSetsRecordSetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) string { return v.Type }).(pulumi.StringOutput)
}

// Indicates whether load balancing is enabled for the DNS record set.
func (o GetRecordSetsRecordSetOutput) WeightEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRecordSetsRecordSet) bool { return v.WeightEnabled }).(pulumi.BoolOutput)
}

type GetRecordSetsRecordSetArrayOutput struct{ *pulumi.OutputState }

func (GetRecordSetsRecordSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordSetsRecordSet)(nil)).Elem()
}

func (o GetRecordSetsRecordSetArrayOutput) ToGetRecordSetsRecordSetArrayOutput() GetRecordSetsRecordSetArrayOutput {
	return o
}

func (o GetRecordSetsRecordSetArrayOutput) ToGetRecordSetsRecordSetArrayOutputWithContext(ctx context.Context) GetRecordSetsRecordSetArrayOutput {
	return o
}

func (o GetRecordSetsRecordSetArrayOutput) Index(i pulumi.IntInput) GetRecordSetsRecordSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordSetsRecordSet {
		return vs[0].([]GetRecordSetsRecordSet)[vs[1].(int)]
	}).(GetRecordSetsRecordSetOutput)
}

type GetRecordsRecord struct {
	// The creation time of the domain.
	CreatedAt string `pulumi:"createdAt"`
	// Indicates whether the DNS record is enabled.
	Enable bool `pulumi:"enable"`
	// Domain prefix of the DNS record.
	Host string `pulumi:"host"`
	// Line of the DNS record.
	Line string `pulumi:"line"`
	// The account ID that called this API.
	Operators []string `pulumi:"operators"`
	// The hostname included in the DNS record, in PQDN (Partially Qualified Domain Name) format.
	Pqdn string `pulumi:"pqdn"`
	// The ID of the DNS record.
	RecordId string `pulumi:"recordId"`
	// The ID of the record set to which the DNS record belongs.
	RecordSetId string `pulumi:"recordSetId"`
	// The remark of the DNS record.
	Remark string `pulumi:"remark"`
	// The tag information of the DNS record.
	Tags []string `pulumi:"tags"`
	// The Time to Live (TTL) of the DNS record. The unit is seconds.
	Ttl int `pulumi:"ttl"`
	// Type of the DNS record.
	Type string `pulumi:"type"`
	// The most recent update time of the domain.
	UpdatedAt string `pulumi:"updatedAt"`
	// Value of the DNS record.
	Value string `pulumi:"value"`
	// The weight of the DNS record.
	Weight int `pulumi:"weight"`
}

// GetRecordsRecordInput is an input type that accepts GetRecordsRecordArgs and GetRecordsRecordOutput values.
// You can construct a concrete instance of `GetRecordsRecordInput` via:
//
//	GetRecordsRecordArgs{...}
type GetRecordsRecordInput interface {
	pulumi.Input

	ToGetRecordsRecordOutput() GetRecordsRecordOutput
	ToGetRecordsRecordOutputWithContext(context.Context) GetRecordsRecordOutput
}

type GetRecordsRecordArgs struct {
	// The creation time of the domain.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// Indicates whether the DNS record is enabled.
	Enable pulumi.BoolInput `pulumi:"enable"`
	// Domain prefix of the DNS record.
	Host pulumi.StringInput `pulumi:"host"`
	// Line of the DNS record.
	Line pulumi.StringInput `pulumi:"line"`
	// The account ID that called this API.
	Operators pulumi.StringArrayInput `pulumi:"operators"`
	// The hostname included in the DNS record, in PQDN (Partially Qualified Domain Name) format.
	Pqdn pulumi.StringInput `pulumi:"pqdn"`
	// The ID of the DNS record.
	RecordId pulumi.StringInput `pulumi:"recordId"`
	// The ID of the record set to which the DNS record belongs.
	RecordSetId pulumi.StringInput `pulumi:"recordSetId"`
	// The remark of the DNS record.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The tag information of the DNS record.
	Tags pulumi.StringArrayInput `pulumi:"tags"`
	// The Time to Live (TTL) of the DNS record. The unit is seconds.
	Ttl pulumi.IntInput `pulumi:"ttl"`
	// Type of the DNS record.
	Type pulumi.StringInput `pulumi:"type"`
	// The most recent update time of the domain.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// Value of the DNS record.
	Value pulumi.StringInput `pulumi:"value"`
	// The weight of the DNS record.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (GetRecordsRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsRecord)(nil)).Elem()
}

func (i GetRecordsRecordArgs) ToGetRecordsRecordOutput() GetRecordsRecordOutput {
	return i.ToGetRecordsRecordOutputWithContext(context.Background())
}

func (i GetRecordsRecordArgs) ToGetRecordsRecordOutputWithContext(ctx context.Context) GetRecordsRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsRecordOutput)
}

// GetRecordsRecordArrayInput is an input type that accepts GetRecordsRecordArray and GetRecordsRecordArrayOutput values.
// You can construct a concrete instance of `GetRecordsRecordArrayInput` via:
//
//	GetRecordsRecordArray{ GetRecordsRecordArgs{...} }
type GetRecordsRecordArrayInput interface {
	pulumi.Input

	ToGetRecordsRecordArrayOutput() GetRecordsRecordArrayOutput
	ToGetRecordsRecordArrayOutputWithContext(context.Context) GetRecordsRecordArrayOutput
}

type GetRecordsRecordArray []GetRecordsRecordInput

func (GetRecordsRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsRecord)(nil)).Elem()
}

func (i GetRecordsRecordArray) ToGetRecordsRecordArrayOutput() GetRecordsRecordArrayOutput {
	return i.ToGetRecordsRecordArrayOutputWithContext(context.Background())
}

func (i GetRecordsRecordArray) ToGetRecordsRecordArrayOutputWithContext(ctx context.Context) GetRecordsRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRecordsRecordArrayOutput)
}

type GetRecordsRecordOutput struct{ *pulumi.OutputState }

func (GetRecordsRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRecordsRecord)(nil)).Elem()
}

func (o GetRecordsRecordOutput) ToGetRecordsRecordOutput() GetRecordsRecordOutput {
	return o
}

func (o GetRecordsRecordOutput) ToGetRecordsRecordOutputWithContext(ctx context.Context) GetRecordsRecordOutput {
	return o
}

// The creation time of the domain.
func (o GetRecordsRecordOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// Indicates whether the DNS record is enabled.
func (o GetRecordsRecordOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRecordsRecord) bool { return v.Enable }).(pulumi.BoolOutput)
}

// Domain prefix of the DNS record.
func (o GetRecordsRecordOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Host }).(pulumi.StringOutput)
}

// Line of the DNS record.
func (o GetRecordsRecordOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Line }).(pulumi.StringOutput)
}

// The account ID that called this API.
func (o GetRecordsRecordOutput) Operators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRecordsRecord) []string { return v.Operators }).(pulumi.StringArrayOutput)
}

// The hostname included in the DNS record, in PQDN (Partially Qualified Domain Name) format.
func (o GetRecordsRecordOutput) Pqdn() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Pqdn }).(pulumi.StringOutput)
}

// The ID of the DNS record.
func (o GetRecordsRecordOutput) RecordId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.RecordId }).(pulumi.StringOutput)
}

// The ID of the record set to which the DNS record belongs.
func (o GetRecordsRecordOutput) RecordSetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.RecordSetId }).(pulumi.StringOutput)
}

// The remark of the DNS record.
func (o GetRecordsRecordOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Remark }).(pulumi.StringOutput)
}

// The tag information of the DNS record.
func (o GetRecordsRecordOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRecordsRecord) []string { return v.Tags }).(pulumi.StringArrayOutput)
}

// The Time to Live (TTL) of the DNS record. The unit is seconds.
func (o GetRecordsRecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsRecord) int { return v.Ttl }).(pulumi.IntOutput)
}

// Type of the DNS record.
func (o GetRecordsRecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Type }).(pulumi.StringOutput)
}

// The most recent update time of the domain.
func (o GetRecordsRecordOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// Value of the DNS record.
func (o GetRecordsRecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRecordsRecord) string { return v.Value }).(pulumi.StringOutput)
}

// The weight of the DNS record.
func (o GetRecordsRecordOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v GetRecordsRecord) int { return v.Weight }).(pulumi.IntOutput)
}

type GetRecordsRecordArrayOutput struct{ *pulumi.OutputState }

func (GetRecordsRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRecordsRecord)(nil)).Elem()
}

func (o GetRecordsRecordArrayOutput) ToGetRecordsRecordArrayOutput() GetRecordsRecordArrayOutput {
	return o
}

func (o GetRecordsRecordArrayOutput) ToGetRecordsRecordArrayOutputWithContext(ctx context.Context) GetRecordsRecordArrayOutput {
	return o
}

func (o GetRecordsRecordArrayOutput) Index(i pulumi.IntInput) GetRecordsRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRecordsRecord {
		return vs[0].([]GetRecordsRecord)[vs[1].(int)]
	}).(GetRecordsRecordOutput)
}

type GetZonesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Values []string `pulumi:"values"`
}

// GetZonesTagInput is an input type that accepts GetZonesTagArgs and GetZonesTagOutput values.
// You can construct a concrete instance of `GetZonesTagInput` via:
//
//	GetZonesTagArgs{...}
type GetZonesTagInput interface {
	pulumi.Input

	ToGetZonesTagOutput() GetZonesTagOutput
	ToGetZonesTagOutputWithContext(context.Context) GetZonesTagOutput
}

type GetZonesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetZonesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesTag)(nil)).Elem()
}

func (i GetZonesTagArgs) ToGetZonesTagOutput() GetZonesTagOutput {
	return i.ToGetZonesTagOutputWithContext(context.Background())
}

func (i GetZonesTagArgs) ToGetZonesTagOutputWithContext(ctx context.Context) GetZonesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesTagOutput)
}

// GetZonesTagArrayInput is an input type that accepts GetZonesTagArray and GetZonesTagArrayOutput values.
// You can construct a concrete instance of `GetZonesTagArrayInput` via:
//
//	GetZonesTagArray{ GetZonesTagArgs{...} }
type GetZonesTagArrayInput interface {
	pulumi.Input

	ToGetZonesTagArrayOutput() GetZonesTagArrayOutput
	ToGetZonesTagArrayOutputWithContext(context.Context) GetZonesTagArrayOutput
}

type GetZonesTagArray []GetZonesTagInput

func (GetZonesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesTag)(nil)).Elem()
}

func (i GetZonesTagArray) ToGetZonesTagArrayOutput() GetZonesTagArrayOutput {
	return i.ToGetZonesTagArrayOutputWithContext(context.Background())
}

func (i GetZonesTagArray) ToGetZonesTagArrayOutputWithContext(ctx context.Context) GetZonesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesTagArrayOutput)
}

type GetZonesTagOutput struct{ *pulumi.OutputState }

func (GetZonesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesTag)(nil)).Elem()
}

func (o GetZonesTagOutput) ToGetZonesTagOutput() GetZonesTagOutput {
	return o
}

func (o GetZonesTagOutput) ToGetZonesTagOutputWithContext(ctx context.Context) GetZonesTagOutput {
	return o
}

// The Key of Tags.
func (o GetZonesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetZonesTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetZonesTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetZonesTagArrayOutput struct{ *pulumi.OutputState }

func (GetZonesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesTag)(nil)).Elem()
}

func (o GetZonesTagArrayOutput) ToGetZonesTagArrayOutput() GetZonesTagArrayOutput {
	return o
}

func (o GetZonesTagArrayOutput) ToGetZonesTagArrayOutputWithContext(ctx context.Context) GetZonesTagArrayOutput {
	return o
}

func (o GetZonesTagArrayOutput) Index(i pulumi.IntInput) GetZonesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesTag {
		return vs[0].([]GetZonesTag)[vs[1].(int)]
	}).(GetZonesTagOutput)
}

type GetZonesZone struct {
	// The list of DNS servers allocated to the domain by BytePlus DNS.
	AllocateDnsServerLists []string `pulumi:"allocateDnsServerLists"`
	// Whether automatic domain renewal is enabled.
	AutoRenew bool `pulumi:"autoRenew"`
	// The most recent update time of the domain.
	CacheStage int `pulumi:"cacheStage"`
	// The creation time of the domain.
	CreatedAt string `pulumi:"createdAt"`
	// The version of DNS DDoS protection service.
	DnsSecurity string `pulumi:"dnsSecurity"`
	// The expiration time of the domain.
	ExpiredTime int `pulumi:"expiredTime"`
	// The id of the zone.
	Id string `pulumi:"id"`
	// The ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The ID of the instance. For free edition, the value of this field is null.
	InstanceNo string `pulumi:"instanceNo"`
	// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
	IsNsCorrect bool `pulumi:"isNsCorrect"`
	// Whether the domain is a subdomain.
	IsSubDomain bool `pulumi:"isSubDomain"`
	// The ID of the account that last updated this domain.
	LastOperator string `pulumi:"lastOperator"`
	// The ProjectName of the domain.
	ProjectName string `pulumi:"projectName"`
	// The list of DNS servers actually used by the domain.
	RealDnsServerLists []string `pulumi:"realDnsServerLists"`
	// The total number of DNS records contained in the domain.
	RecordCount int `pulumi:"recordCount"`
	// The remarks for the domain.
	Remark string `pulumi:"remark"`
	// The status of the domain.
	Stage int `pulumi:"stage"`
	// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
	SubDomainHost string `pulumi:"subDomainHost"`
	// Tags.
	Tags []GetZonesZoneTag `pulumi:"tags"`
	// The edition of the domain.
	TradeCode string `pulumi:"tradeCode"`
	// The most recent update time of the domain.
	UpdatedAt string `pulumi:"updatedAt"`
	// The ID of the domain.
	Zid int `pulumi:"zid"`
	// The domain name.
	ZoneName string `pulumi:"zoneName"`
}

// GetZonesZoneInput is an input type that accepts GetZonesZoneArgs and GetZonesZoneOutput values.
// You can construct a concrete instance of `GetZonesZoneInput` via:
//
//	GetZonesZoneArgs{...}
type GetZonesZoneInput interface {
	pulumi.Input

	ToGetZonesZoneOutput() GetZonesZoneOutput
	ToGetZonesZoneOutputWithContext(context.Context) GetZonesZoneOutput
}

type GetZonesZoneArgs struct {
	// The list of DNS servers allocated to the domain by BytePlus DNS.
	AllocateDnsServerLists pulumi.StringArrayInput `pulumi:"allocateDnsServerLists"`
	// Whether automatic domain renewal is enabled.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The most recent update time of the domain.
	CacheStage pulumi.IntInput `pulumi:"cacheStage"`
	// The creation time of the domain.
	CreatedAt pulumi.StringInput `pulumi:"createdAt"`
	// The version of DNS DDoS protection service.
	DnsSecurity pulumi.StringInput `pulumi:"dnsSecurity"`
	// The expiration time of the domain.
	ExpiredTime pulumi.IntInput `pulumi:"expiredTime"`
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The ID of the instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The ID of the instance. For free edition, the value of this field is null.
	InstanceNo pulumi.StringInput `pulumi:"instanceNo"`
	// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
	IsNsCorrect pulumi.BoolInput `pulumi:"isNsCorrect"`
	// Whether the domain is a subdomain.
	IsSubDomain pulumi.BoolInput `pulumi:"isSubDomain"`
	// The ID of the account that last updated this domain.
	LastOperator pulumi.StringInput `pulumi:"lastOperator"`
	// The ProjectName of the domain.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The list of DNS servers actually used by the domain.
	RealDnsServerLists pulumi.StringArrayInput `pulumi:"realDnsServerLists"`
	// The total number of DNS records contained in the domain.
	RecordCount pulumi.IntInput `pulumi:"recordCount"`
	// The remarks for the domain.
	Remark pulumi.StringInput `pulumi:"remark"`
	// The status of the domain.
	Stage pulumi.IntInput `pulumi:"stage"`
	// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
	SubDomainHost pulumi.StringInput `pulumi:"subDomainHost"`
	// Tags.
	Tags GetZonesZoneTagArrayInput `pulumi:"tags"`
	// The edition of the domain.
	TradeCode pulumi.StringInput `pulumi:"tradeCode"`
	// The most recent update time of the domain.
	UpdatedAt pulumi.StringInput `pulumi:"updatedAt"`
	// The ID of the domain.
	Zid pulumi.IntInput `pulumi:"zid"`
	// The domain name.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (GetZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return i.ToGetZonesZoneOutputWithContext(context.Background())
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneOutput)
}

// GetZonesZoneArrayInput is an input type that accepts GetZonesZoneArray and GetZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetZonesZoneArrayInput` via:
//
//	GetZonesZoneArray{ GetZonesZoneArgs{...} }
type GetZonesZoneArrayInput interface {
	pulumi.Input

	ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput
	ToGetZonesZoneArrayOutputWithContext(context.Context) GetZonesZoneArrayOutput
}

type GetZonesZoneArray []GetZonesZoneInput

func (GetZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return i.ToGetZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneArrayOutput)
}

type GetZonesZoneOutput struct{ *pulumi.OutputState }

func (GetZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return o
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return o
}

// The list of DNS servers allocated to the domain by BytePlus DNS.
func (o GetZonesZoneOutput) AllocateDnsServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetZonesZone) []string { return v.AllocateDnsServerLists }).(pulumi.StringArrayOutput)
}

// Whether automatic domain renewal is enabled.
func (o GetZonesZoneOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v GetZonesZone) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The most recent update time of the domain.
func (o GetZonesZoneOutput) CacheStage() pulumi.IntOutput {
	return o.ApplyT(func(v GetZonesZone) int { return v.CacheStage }).(pulumi.IntOutput)
}

// The creation time of the domain.
func (o GetZonesZoneOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The version of DNS DDoS protection service.
func (o GetZonesZoneOutput) DnsSecurity() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.DnsSecurity }).(pulumi.StringOutput)
}

// The expiration time of the domain.
func (o GetZonesZoneOutput) ExpiredTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetZonesZone) int { return v.ExpiredTime }).(pulumi.IntOutput)
}

// The id of the zone.
func (o GetZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The ID of the instance.
func (o GetZonesZoneOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The ID of the instance. For free edition, the value of this field is null.
func (o GetZonesZoneOutput) InstanceNo() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.InstanceNo }).(pulumi.StringOutput)
}

// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
func (o GetZonesZoneOutput) IsNsCorrect() pulumi.BoolOutput {
	return o.ApplyT(func(v GetZonesZone) bool { return v.IsNsCorrect }).(pulumi.BoolOutput)
}

// Whether the domain is a subdomain.
func (o GetZonesZoneOutput) IsSubDomain() pulumi.BoolOutput {
	return o.ApplyT(func(v GetZonesZone) bool { return v.IsSubDomain }).(pulumi.BoolOutput)
}

// The ID of the account that last updated this domain.
func (o GetZonesZoneOutput) LastOperator() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.LastOperator }).(pulumi.StringOutput)
}

// The ProjectName of the domain.
func (o GetZonesZoneOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The list of DNS servers actually used by the domain.
func (o GetZonesZoneOutput) RealDnsServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetZonesZone) []string { return v.RealDnsServerLists }).(pulumi.StringArrayOutput)
}

// The total number of DNS records contained in the domain.
func (o GetZonesZoneOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetZonesZone) int { return v.RecordCount }).(pulumi.IntOutput)
}

// The remarks for the domain.
func (o GetZonesZoneOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Remark }).(pulumi.StringOutput)
}

// The status of the domain.
func (o GetZonesZoneOutput) Stage() pulumi.IntOutput {
	return o.ApplyT(func(v GetZonesZone) int { return v.Stage }).(pulumi.IntOutput)
}

// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
func (o GetZonesZoneOutput) SubDomainHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.SubDomainHost }).(pulumi.StringOutput)
}

// Tags.
func (o GetZonesZoneOutput) Tags() GetZonesZoneTagArrayOutput {
	return o.ApplyT(func(v GetZonesZone) []GetZonesZoneTag { return v.Tags }).(GetZonesZoneTagArrayOutput)
}

// The edition of the domain.
func (o GetZonesZoneOutput) TradeCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.TradeCode }).(pulumi.StringOutput)
}

// The most recent update time of the domain.
func (o GetZonesZoneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The ID of the domain.
func (o GetZonesZoneOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v GetZonesZone) int { return v.Zid }).(pulumi.IntOutput)
}

// The domain name.
func (o GetZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type GetZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) Index(i pulumi.IntInput) GetZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesZone {
		return vs[0].([]GetZonesZone)[vs[1].(int)]
	}).(GetZonesZoneOutput)
}

type GetZonesZoneTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetZonesZoneTagInput is an input type that accepts GetZonesZoneTagArgs and GetZonesZoneTagOutput values.
// You can construct a concrete instance of `GetZonesZoneTagInput` via:
//
//	GetZonesZoneTagArgs{...}
type GetZonesZoneTagInput interface {
	pulumi.Input

	ToGetZonesZoneTagOutput() GetZonesZoneTagOutput
	ToGetZonesZoneTagOutputWithContext(context.Context) GetZonesZoneTagOutput
}

type GetZonesZoneTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetZonesZoneTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZoneTag)(nil)).Elem()
}

func (i GetZonesZoneTagArgs) ToGetZonesZoneTagOutput() GetZonesZoneTagOutput {
	return i.ToGetZonesZoneTagOutputWithContext(context.Background())
}

func (i GetZonesZoneTagArgs) ToGetZonesZoneTagOutputWithContext(ctx context.Context) GetZonesZoneTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneTagOutput)
}

// GetZonesZoneTagArrayInput is an input type that accepts GetZonesZoneTagArray and GetZonesZoneTagArrayOutput values.
// You can construct a concrete instance of `GetZonesZoneTagArrayInput` via:
//
//	GetZonesZoneTagArray{ GetZonesZoneTagArgs{...} }
type GetZonesZoneTagArrayInput interface {
	pulumi.Input

	ToGetZonesZoneTagArrayOutput() GetZonesZoneTagArrayOutput
	ToGetZonesZoneTagArrayOutputWithContext(context.Context) GetZonesZoneTagArrayOutput
}

type GetZonesZoneTagArray []GetZonesZoneTagInput

func (GetZonesZoneTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZoneTag)(nil)).Elem()
}

func (i GetZonesZoneTagArray) ToGetZonesZoneTagArrayOutput() GetZonesZoneTagArrayOutput {
	return i.ToGetZonesZoneTagArrayOutputWithContext(context.Background())
}

func (i GetZonesZoneTagArray) ToGetZonesZoneTagArrayOutputWithContext(ctx context.Context) GetZonesZoneTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneTagArrayOutput)
}

type GetZonesZoneTagOutput struct{ *pulumi.OutputState }

func (GetZonesZoneTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZoneTag)(nil)).Elem()
}

func (o GetZonesZoneTagOutput) ToGetZonesZoneTagOutput() GetZonesZoneTagOutput {
	return o
}

func (o GetZonesZoneTagOutput) ToGetZonesZoneTagOutputWithContext(ctx context.Context) GetZonesZoneTagOutput {
	return o
}

// The Key of Tags.
func (o GetZonesZoneTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZoneTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetZonesZoneTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZoneTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetZonesZoneTagArrayOutput struct{ *pulumi.OutputState }

func (GetZonesZoneTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZoneTag)(nil)).Elem()
}

func (o GetZonesZoneTagArrayOutput) ToGetZonesZoneTagArrayOutput() GetZonesZoneTagArrayOutput {
	return o
}

func (o GetZonesZoneTagArrayOutput) ToGetZonesZoneTagArrayOutputWithContext(ctx context.Context) GetZonesZoneTagArrayOutput {
	return o
}

func (o GetZonesZoneTagArrayOutput) Index(i pulumi.IntInput) GetZonesZoneTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesZoneTag {
		return vs[0].([]GetZonesZoneTag)[vs[1].(int)]
	}).(GetZonesZoneTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupInfoInput)(nil)).Elem(), BackupsBackupInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupsBackupInfoArrayInput)(nil)).Elem(), BackupsBackupInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordSetsRecordSetInput)(nil)).Elem(), RecordSetsRecordSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordSetsRecordSetArrayInput)(nil)).Elem(), RecordSetsRecordSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsRecordInput)(nil)).Elem(), RecordsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordsRecordArrayInput)(nil)).Elem(), RecordsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneTagInput)(nil)).Elem(), ZoneTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneTagArrayInput)(nil)).Elem(), ZoneTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesTagInput)(nil)).Elem(), ZonesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesTagArrayInput)(nil)).Elem(), ZonesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneTagInput)(nil)).Elem(), ZonesZoneTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneTagArrayInput)(nil)).Elem(), ZonesZoneTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupInfoInput)(nil)).Elem(), GetBackupsBackupInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBackupsBackupInfoArrayInput)(nil)).Elem(), GetBackupsBackupInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordSetsRecordSetInput)(nil)).Elem(), GetRecordSetsRecordSetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordSetsRecordSetArrayInput)(nil)).Elem(), GetRecordSetsRecordSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsRecordInput)(nil)).Elem(), GetRecordsRecordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRecordsRecordArrayInput)(nil)).Elem(), GetRecordsRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesTagInput)(nil)).Elem(), GetZonesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesTagArrayInput)(nil)).Elem(), GetZonesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneInput)(nil)).Elem(), GetZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneArrayInput)(nil)).Elem(), GetZonesZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneTagInput)(nil)).Elem(), GetZonesZoneTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneTagArrayInput)(nil)).Elem(), GetZonesZoneTagArray{})
	pulumi.RegisterOutputType(BackupsBackupInfoOutput{})
	pulumi.RegisterOutputType(BackupsBackupInfoArrayOutput{})
	pulumi.RegisterOutputType(RecordSetsRecordSetOutput{})
	pulumi.RegisterOutputType(RecordSetsRecordSetArrayOutput{})
	pulumi.RegisterOutputType(RecordsRecordOutput{})
	pulumi.RegisterOutputType(RecordsRecordArrayOutput{})
	pulumi.RegisterOutputType(ZoneTagOutput{})
	pulumi.RegisterOutputType(ZoneTagArrayOutput{})
	pulumi.RegisterOutputType(ZonesTagOutput{})
	pulumi.RegisterOutputType(ZonesTagArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneTagOutput{})
	pulumi.RegisterOutputType(ZonesZoneTagArrayOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupInfoOutput{})
	pulumi.RegisterOutputType(GetBackupsBackupInfoArrayOutput{})
	pulumi.RegisterOutputType(GetRecordSetsRecordSetOutput{})
	pulumi.RegisterOutputType(GetRecordSetsRecordSetArrayOutput{})
	pulumi.RegisterOutputType(GetRecordsRecordOutput{})
	pulumi.RegisterOutputType(GetRecordsRecordArrayOutput{})
	pulumi.RegisterOutputType(GetZonesTagOutput{})
	pulumi.RegisterOutputType(GetZonesTagArrayOutput{})
	pulumi.RegisterOutputType(GetZonesZoneOutput{})
	pulumi.RegisterOutputType(GetZonesZoneArrayOutput{})
	pulumi.RegisterOutputType(GetZonesZoneTagOutput{})
	pulumi.RegisterOutputType(GetZonesZoneTagArrayOutput{})
}
