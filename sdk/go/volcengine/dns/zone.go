// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage dns zone
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/dns"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.NewZone(ctx, "foo", &dns.ZoneArgs{
//				ProjectName: pulumi.String("default"),
//				Remark:      pulumi.String("xxx"),
//				Tags: dns.ZoneTagArray{
//					&dns.ZoneTagArgs{
//						Key:   pulumi.String("xx"),
//						Value: pulumi.String("xx"),
//					},
//				},
//				ZoneName: pulumi.String("xxxx.com"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Zone can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:dns/zone:Zone default resource_id
// ```
type Zone struct {
	pulumi.CustomResourceState

	// The list of DNS servers allocated to the domain by BytePlus DNS.
	AllocateDnsServerLists pulumi.StringArrayOutput `pulumi:"allocateDnsServerLists"`
	// Whether automatic domain renewal is enabled.
	AutoRenew pulumi.BoolOutput `pulumi:"autoRenew"`
	// The version of DNS DDoS protection service.
	DnsSecurity pulumi.StringOutput `pulumi:"dnsSecurity"`
	// The expiration time of the domain.
	ExpiredTime pulumi.IntOutput `pulumi:"expiredTime"`
	// The ID of the instance. For free edition, the value of this field is null.
	InstanceNo pulumi.StringOutput `pulumi:"instanceNo"`
	// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
	IsNsCorrect pulumi.BoolOutput `pulumi:"isNsCorrect"`
	// Whether the domain is a subdomain.
	IsSubDomain pulumi.BoolOutput `pulumi:"isSubDomain"`
	// The project to which the domain name belongs. The default value is default.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The list of DNS servers actually used by the domain.
	RealDnsServerLists pulumi.StringArrayOutput `pulumi:"realDnsServerLists"`
	// The total number of DNS records under the domain.
	RecordCount pulumi.IntOutput `pulumi:"recordCount"`
	// The remark for the domain.
	Remark pulumi.StringPtrOutput `pulumi:"remark"`
	// The status of the domain.
	Stage pulumi.IntOutput `pulumi:"stage"`
	// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
	SubDomainHost pulumi.StringOutput `pulumi:"subDomainHost"`
	// Tags.
	Tags ZoneTagArrayOutput `pulumi:"tags"`
	// The edition of the domain.
	TradeCode pulumi.StringOutput `pulumi:"tradeCode"`
	// The update time of the domain.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The ID of the domain.
	Zid pulumi.IntOutput `pulumi:"zid"`
	// The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewZone registers a new resource with the given unique name, arguments, and options.
func NewZone(ctx *pulumi.Context,
	name string, args *ZoneArgs, opts ...pulumi.ResourceOption) (*Zone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ZoneName == nil {
		return nil, errors.New("invalid value for required argument 'ZoneName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Zone
	err := ctx.RegisterResource("volcengine:dns/zone:Zone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZone gets an existing Zone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZoneState, opts ...pulumi.ResourceOption) (*Zone, error) {
	var resource Zone
	err := ctx.ReadResource("volcengine:dns/zone:Zone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Zone resources.
type zoneState struct {
	// The list of DNS servers allocated to the domain by BytePlus DNS.
	AllocateDnsServerLists []string `pulumi:"allocateDnsServerLists"`
	// Whether automatic domain renewal is enabled.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The version of DNS DDoS protection service.
	DnsSecurity *string `pulumi:"dnsSecurity"`
	// The expiration time of the domain.
	ExpiredTime *int `pulumi:"expiredTime"`
	// The ID of the instance. For free edition, the value of this field is null.
	InstanceNo *string `pulumi:"instanceNo"`
	// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
	IsNsCorrect *bool `pulumi:"isNsCorrect"`
	// Whether the domain is a subdomain.
	IsSubDomain *bool `pulumi:"isSubDomain"`
	// The project to which the domain name belongs. The default value is default.
	ProjectName *string `pulumi:"projectName"`
	// The list of DNS servers actually used by the domain.
	RealDnsServerLists []string `pulumi:"realDnsServerLists"`
	// The total number of DNS records under the domain.
	RecordCount *int `pulumi:"recordCount"`
	// The remark for the domain.
	Remark *string `pulumi:"remark"`
	// The status of the domain.
	Stage *int `pulumi:"stage"`
	// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
	SubDomainHost *string `pulumi:"subDomainHost"`
	// Tags.
	Tags []ZoneTag `pulumi:"tags"`
	// The edition of the domain.
	TradeCode *string `pulumi:"tradeCode"`
	// The update time of the domain.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The ID of the domain.
	Zid *int `pulumi:"zid"`
	// The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
	ZoneName *string `pulumi:"zoneName"`
}

type ZoneState struct {
	// The list of DNS servers allocated to the domain by BytePlus DNS.
	AllocateDnsServerLists pulumi.StringArrayInput
	// Whether automatic domain renewal is enabled.
	AutoRenew pulumi.BoolPtrInput
	// The version of DNS DDoS protection service.
	DnsSecurity pulumi.StringPtrInput
	// The expiration time of the domain.
	ExpiredTime pulumi.IntPtrInput
	// The ID of the instance. For free edition, the value of this field is null.
	InstanceNo pulumi.StringPtrInput
	// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
	IsNsCorrect pulumi.BoolPtrInput
	// Whether the domain is a subdomain.
	IsSubDomain pulumi.BoolPtrInput
	// The project to which the domain name belongs. The default value is default.
	ProjectName pulumi.StringPtrInput
	// The list of DNS servers actually used by the domain.
	RealDnsServerLists pulumi.StringArrayInput
	// The total number of DNS records under the domain.
	RecordCount pulumi.IntPtrInput
	// The remark for the domain.
	Remark pulumi.StringPtrInput
	// The status of the domain.
	Stage pulumi.IntPtrInput
	// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
	SubDomainHost pulumi.StringPtrInput
	// Tags.
	Tags ZoneTagArrayInput
	// The edition of the domain.
	TradeCode pulumi.StringPtrInput
	// The update time of the domain.
	UpdatedAt pulumi.StringPtrInput
	// The ID of the domain.
	Zid pulumi.IntPtrInput
	// The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
	ZoneName pulumi.StringPtrInput
}

func (ZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneState)(nil)).Elem()
}

type zoneArgs struct {
	// The project to which the domain name belongs. The default value is default.
	ProjectName *string `pulumi:"projectName"`
	// The remark for the domain.
	Remark *string `pulumi:"remark"`
	// Tags.
	Tags []ZoneTag `pulumi:"tags"`
	// The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
	ZoneName string `pulumi:"zoneName"`
}

// The set of arguments for constructing a Zone resource.
type ZoneArgs struct {
	// The project to which the domain name belongs. The default value is default.
	ProjectName pulumi.StringPtrInput
	// The remark for the domain.
	Remark pulumi.StringPtrInput
	// Tags.
	Tags ZoneTagArrayInput
	// The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
	ZoneName pulumi.StringInput
}

func (ZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*zoneArgs)(nil)).Elem()
}

type ZoneInput interface {
	pulumi.Input

	ToZoneOutput() ZoneOutput
	ToZoneOutputWithContext(ctx context.Context) ZoneOutput
}

func (*Zone) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (i *Zone) ToZoneOutput() ZoneOutput {
	return i.ToZoneOutputWithContext(context.Background())
}

func (i *Zone) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneOutput)
}

// ZoneArrayInput is an input type that accepts ZoneArray and ZoneArrayOutput values.
// You can construct a concrete instance of `ZoneArrayInput` via:
//
//	ZoneArray{ ZoneArgs{...} }
type ZoneArrayInput interface {
	pulumi.Input

	ToZoneArrayOutput() ZoneArrayOutput
	ToZoneArrayOutputWithContext(context.Context) ZoneArrayOutput
}

type ZoneArray []ZoneInput

func (ZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (i ZoneArray) ToZoneArrayOutput() ZoneArrayOutput {
	return i.ToZoneArrayOutputWithContext(context.Background())
}

func (i ZoneArray) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneArrayOutput)
}

// ZoneMapInput is an input type that accepts ZoneMap and ZoneMapOutput values.
// You can construct a concrete instance of `ZoneMapInput` via:
//
//	ZoneMap{ "key": ZoneArgs{...} }
type ZoneMapInput interface {
	pulumi.Input

	ToZoneMapOutput() ZoneMapOutput
	ToZoneMapOutputWithContext(context.Context) ZoneMapOutput
}

type ZoneMap map[string]ZoneInput

func (ZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (i ZoneMap) ToZoneMapOutput() ZoneMapOutput {
	return i.ToZoneMapOutputWithContext(context.Background())
}

func (i ZoneMap) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZoneMapOutput)
}

type ZoneOutput struct{ *pulumi.OutputState }

func (ZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Zone)(nil)).Elem()
}

func (o ZoneOutput) ToZoneOutput() ZoneOutput {
	return o
}

func (o ZoneOutput) ToZoneOutputWithContext(ctx context.Context) ZoneOutput {
	return o
}

// The list of DNS servers allocated to the domain by BytePlus DNS.
func (o ZoneOutput) AllocateDnsServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.AllocateDnsServerLists }).(pulumi.StringArrayOutput)
}

// Whether automatic domain renewal is enabled.
func (o ZoneOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v *Zone) pulumi.BoolOutput { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The version of DNS DDoS protection service.
func (o ZoneOutput) DnsSecurity() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.DnsSecurity }).(pulumi.StringOutput)
}

// The expiration time of the domain.
func (o ZoneOutput) ExpiredTime() pulumi.IntOutput {
	return o.ApplyT(func(v *Zone) pulumi.IntOutput { return v.ExpiredTime }).(pulumi.IntOutput)
}

// The ID of the instance. For free edition, the value of this field is null.
func (o ZoneOutput) InstanceNo() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.InstanceNo }).(pulumi.StringOutput)
}

// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
func (o ZoneOutput) IsNsCorrect() pulumi.BoolOutput {
	return o.ApplyT(func(v *Zone) pulumi.BoolOutput { return v.IsNsCorrect }).(pulumi.BoolOutput)
}

// Whether the domain is a subdomain.
func (o ZoneOutput) IsSubDomain() pulumi.BoolOutput {
	return o.ApplyT(func(v *Zone) pulumi.BoolOutput { return v.IsSubDomain }).(pulumi.BoolOutput)
}

// The project to which the domain name belongs. The default value is default.
func (o ZoneOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The list of DNS servers actually used by the domain.
func (o ZoneOutput) RealDnsServerLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringArrayOutput { return v.RealDnsServerLists }).(pulumi.StringArrayOutput)
}

// The total number of DNS records under the domain.
func (o ZoneOutput) RecordCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Zone) pulumi.IntOutput { return v.RecordCount }).(pulumi.IntOutput)
}

// The remark for the domain.
func (o ZoneOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringPtrOutput { return v.Remark }).(pulumi.StringPtrOutput)
}

// The status of the domain.
func (o ZoneOutput) Stage() pulumi.IntOutput {
	return o.ApplyT(func(v *Zone) pulumi.IntOutput { return v.Stage }).(pulumi.IntOutput)
}

// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
func (o ZoneOutput) SubDomainHost() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.SubDomainHost }).(pulumi.StringOutput)
}

// Tags.
func (o ZoneOutput) Tags() ZoneTagArrayOutput {
	return o.ApplyT(func(v *Zone) ZoneTagArrayOutput { return v.Tags }).(ZoneTagArrayOutput)
}

// The edition of the domain.
func (o ZoneOutput) TradeCode() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.TradeCode }).(pulumi.StringOutput)
}

// The update time of the domain.
func (o ZoneOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The ID of the domain.
func (o ZoneOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v *Zone) pulumi.IntOutput { return v.Zid }).(pulumi.IntOutput)
}

// The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
func (o ZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *Zone) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type ZoneArrayOutput struct{ *pulumi.OutputState }

func (ZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Zone)(nil)).Elem()
}

func (o ZoneArrayOutput) ToZoneArrayOutput() ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) ToZoneArrayOutputWithContext(ctx context.Context) ZoneArrayOutput {
	return o
}

func (o ZoneArrayOutput) Index(i pulumi.IntInput) ZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].([]*Zone)[vs[1].(int)]
	}).(ZoneOutput)
}

type ZoneMapOutput struct{ *pulumi.OutputState }

func (ZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Zone)(nil)).Elem()
}

func (o ZoneMapOutput) ToZoneMapOutput() ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) ToZoneMapOutputWithContext(ctx context.Context) ZoneMapOutput {
	return o
}

func (o ZoneMapOutput) MapIndex(k pulumi.StringInput) ZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Zone {
		return vs[0].(map[string]*Zone)[vs[1].(string)]
	}).(ZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneInput)(nil)).Elem(), &Zone{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneArrayInput)(nil)).Elem(), ZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZoneMapInput)(nil)).Elem(), ZoneMap{})
	pulumi.RegisterOutputType(ZoneOutput{})
	pulumi.RegisterOutputType(ZoneArrayOutput{})
	pulumi.RegisterOutputType(ZoneMapOutput{})
}
