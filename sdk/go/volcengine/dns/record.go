// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage dns record
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/dns"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.NewRecord(ctx, "foo", &dns.RecordArgs{
//				Host:  pulumi.String("a.com"),
//				Type:  pulumi.String("A"),
//				Value: pulumi.String("1.1.1.2"),
//				Zid:   pulumi.Int(58846),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DnsRecord can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:dns/record:Record default ZID:recordId
// ```
type Record struct {
	pulumi.CustomResourceState

	// The creation time of the domain.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Whether the DNS record is enabled.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// The host record, which is the domain prefix of the subdomain.
	Host pulumi.StringOutput `pulumi:"host"`
	// The value of the DNS record.
	Line pulumi.StringOutput `pulumi:"line"`
	// The account ID that called this API.
	Operators pulumi.StringArrayOutput `pulumi:"operators"`
	// The account ID that called this API.
	Pqdn pulumi.StringOutput `pulumi:"pqdn"`
	// The ID of the DNS record.
	RecordId pulumi.StringOutput `pulumi:"recordId"`
	// The ID of the record set where the DNS record is located.
	RecordSetId pulumi.StringOutput `pulumi:"recordSetId"`
	// The remark for the DNS record.
	Remark pulumi.StringOutput `pulumi:"remark"`
	// The tag information of the DNS record.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// The Time-To-Live (TTL) of the DNS record, in seconds.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// The record type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The update time of the domain.
	UpdatedAt pulumi.StringOutput `pulumi:"updatedAt"`
	// The value of the DNS record.
	Value pulumi.StringOutput `pulumi:"value"`
	// The weight of the DNS record.
	Weight pulumi.IntOutput `pulumi:"weight"`
	// The ID of the domain to which you want to add a DNS record.
	Zid pulumi.IntOutput `pulumi:"zid"`
}

// NewRecord registers a new resource with the given unique name, arguments, and options.
func NewRecord(ctx *pulumi.Context,
	name string, args *RecordArgs, opts ...pulumi.ResourceOption) (*Record, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Host == nil {
		return nil, errors.New("invalid value for required argument 'Host'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.Value == nil {
		return nil, errors.New("invalid value for required argument 'Value'")
	}
	if args.Zid == nil {
		return nil, errors.New("invalid value for required argument 'Zid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Record
	err := ctx.RegisterResource("volcengine:dns/record:Record", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRecord gets an existing Record resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RecordState, opts ...pulumi.ResourceOption) (*Record, error) {
	var resource Record
	err := ctx.ReadResource("volcengine:dns/record:Record", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Record resources.
type recordState struct {
	// The creation time of the domain.
	CreatedAt *string `pulumi:"createdAt"`
	// Whether the DNS record is enabled.
	Enable *bool `pulumi:"enable"`
	// The host record, which is the domain prefix of the subdomain.
	Host *string `pulumi:"host"`
	// The value of the DNS record.
	Line *string `pulumi:"line"`
	// The account ID that called this API.
	Operators []string `pulumi:"operators"`
	// The account ID that called this API.
	Pqdn *string `pulumi:"pqdn"`
	// The ID of the DNS record.
	RecordId *string `pulumi:"recordId"`
	// The ID of the record set where the DNS record is located.
	RecordSetId *string `pulumi:"recordSetId"`
	// The remark for the DNS record.
	Remark *string `pulumi:"remark"`
	// The tag information of the DNS record.
	Tags []string `pulumi:"tags"`
	// The Time-To-Live (TTL) of the DNS record, in seconds.
	Ttl *int `pulumi:"ttl"`
	// The record type.
	Type *string `pulumi:"type"`
	// The update time of the domain.
	UpdatedAt *string `pulumi:"updatedAt"`
	// The value of the DNS record.
	Value *string `pulumi:"value"`
	// The weight of the DNS record.
	Weight *int `pulumi:"weight"`
	// The ID of the domain to which you want to add a DNS record.
	Zid *int `pulumi:"zid"`
}

type RecordState struct {
	// The creation time of the domain.
	CreatedAt pulumi.StringPtrInput
	// Whether the DNS record is enabled.
	Enable pulumi.BoolPtrInput
	// The host record, which is the domain prefix of the subdomain.
	Host pulumi.StringPtrInput
	// The value of the DNS record.
	Line pulumi.StringPtrInput
	// The account ID that called this API.
	Operators pulumi.StringArrayInput
	// The account ID that called this API.
	Pqdn pulumi.StringPtrInput
	// The ID of the DNS record.
	RecordId pulumi.StringPtrInput
	// The ID of the record set where the DNS record is located.
	RecordSetId pulumi.StringPtrInput
	// The remark for the DNS record.
	Remark pulumi.StringPtrInput
	// The tag information of the DNS record.
	Tags pulumi.StringArrayInput
	// The Time-To-Live (TTL) of the DNS record, in seconds.
	Ttl pulumi.IntPtrInput
	// The record type.
	Type pulumi.StringPtrInput
	// The update time of the domain.
	UpdatedAt pulumi.StringPtrInput
	// The value of the DNS record.
	Value pulumi.StringPtrInput
	// The weight of the DNS record.
	Weight pulumi.IntPtrInput
	// The ID of the domain to which you want to add a DNS record.
	Zid pulumi.IntPtrInput
}

func (RecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*recordState)(nil)).Elem()
}

type recordArgs struct {
	// The host record, which is the domain prefix of the subdomain.
	Host string `pulumi:"host"`
	// The value of the DNS record.
	Line *string `pulumi:"line"`
	// The remark for the DNS record.
	Remark *string `pulumi:"remark"`
	// The Time-To-Live (TTL) of the DNS record, in seconds.
	Ttl *int `pulumi:"ttl"`
	// The record type.
	Type string `pulumi:"type"`
	// The value of the DNS record.
	Value string `pulumi:"value"`
	// The weight of the DNS record.
	Weight *int `pulumi:"weight"`
	// The ID of the domain to which you want to add a DNS record.
	Zid int `pulumi:"zid"`
}

// The set of arguments for constructing a Record resource.
type RecordArgs struct {
	// The host record, which is the domain prefix of the subdomain.
	Host pulumi.StringInput
	// The value of the DNS record.
	Line pulumi.StringPtrInput
	// The remark for the DNS record.
	Remark pulumi.StringPtrInput
	// The Time-To-Live (TTL) of the DNS record, in seconds.
	Ttl pulumi.IntPtrInput
	// The record type.
	Type pulumi.StringInput
	// The value of the DNS record.
	Value pulumi.StringInput
	// The weight of the DNS record.
	Weight pulumi.IntPtrInput
	// The ID of the domain to which you want to add a DNS record.
	Zid pulumi.IntInput
}

func (RecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*recordArgs)(nil)).Elem()
}

type RecordInput interface {
	pulumi.Input

	ToRecordOutput() RecordOutput
	ToRecordOutputWithContext(ctx context.Context) RecordOutput
}

func (*Record) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (i *Record) ToRecordOutput() RecordOutput {
	return i.ToRecordOutputWithContext(context.Background())
}

func (i *Record) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordOutput)
}

// RecordArrayInput is an input type that accepts RecordArray and RecordArrayOutput values.
// You can construct a concrete instance of `RecordArrayInput` via:
//
//	RecordArray{ RecordArgs{...} }
type RecordArrayInput interface {
	pulumi.Input

	ToRecordArrayOutput() RecordArrayOutput
	ToRecordArrayOutputWithContext(context.Context) RecordArrayOutput
}

type RecordArray []RecordInput

func (RecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (i RecordArray) ToRecordArrayOutput() RecordArrayOutput {
	return i.ToRecordArrayOutputWithContext(context.Background())
}

func (i RecordArray) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordArrayOutput)
}

// RecordMapInput is an input type that accepts RecordMap and RecordMapOutput values.
// You can construct a concrete instance of `RecordMapInput` via:
//
//	RecordMap{ "key": RecordArgs{...} }
type RecordMapInput interface {
	pulumi.Input

	ToRecordMapOutput() RecordMapOutput
	ToRecordMapOutputWithContext(context.Context) RecordMapOutput
}

type RecordMap map[string]RecordInput

func (RecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (i RecordMap) ToRecordMapOutput() RecordMapOutput {
	return i.ToRecordMapOutputWithContext(context.Background())
}

func (i RecordMap) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RecordMapOutput)
}

type RecordOutput struct{ *pulumi.OutputState }

func (RecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Record)(nil)).Elem()
}

func (o RecordOutput) ToRecordOutput() RecordOutput {
	return o
}

func (o RecordOutput) ToRecordOutputWithContext(ctx context.Context) RecordOutput {
	return o
}

// The creation time of the domain.
func (o RecordOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Whether the DNS record is enabled.
func (o RecordOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *Record) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// The host record, which is the domain prefix of the subdomain.
func (o RecordOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Host }).(pulumi.StringOutput)
}

// The value of the DNS record.
func (o RecordOutput) Line() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Line }).(pulumi.StringOutput)
}

// The account ID that called this API.
func (o RecordOutput) Operators() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Record) pulumi.StringArrayOutput { return v.Operators }).(pulumi.StringArrayOutput)
}

// The account ID that called this API.
func (o RecordOutput) Pqdn() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Pqdn }).(pulumi.StringOutput)
}

// The ID of the DNS record.
func (o RecordOutput) RecordId() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.RecordId }).(pulumi.StringOutput)
}

// The ID of the record set where the DNS record is located.
func (o RecordOutput) RecordSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.RecordSetId }).(pulumi.StringOutput)
}

// The remark for the DNS record.
func (o RecordOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Remark }).(pulumi.StringOutput)
}

// The tag information of the DNS record.
func (o RecordOutput) Tags() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Record) pulumi.StringArrayOutput { return v.Tags }).(pulumi.StringArrayOutput)
}

// The Time-To-Live (TTL) of the DNS record, in seconds.
func (o RecordOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *Record) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// The record type.
func (o RecordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The update time of the domain.
func (o RecordOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.UpdatedAt }).(pulumi.StringOutput)
}

// The value of the DNS record.
func (o RecordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v *Record) pulumi.StringOutput { return v.Value }).(pulumi.StringOutput)
}

// The weight of the DNS record.
func (o RecordOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v *Record) pulumi.IntOutput { return v.Weight }).(pulumi.IntOutput)
}

// The ID of the domain to which you want to add a DNS record.
func (o RecordOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v *Record) pulumi.IntOutput { return v.Zid }).(pulumi.IntOutput)
}

type RecordArrayOutput struct{ *pulumi.OutputState }

func (RecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Record)(nil)).Elem()
}

func (o RecordArrayOutput) ToRecordArrayOutput() RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) ToRecordArrayOutputWithContext(ctx context.Context) RecordArrayOutput {
	return o
}

func (o RecordArrayOutput) Index(i pulumi.IntInput) RecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Record {
		return vs[0].([]*Record)[vs[1].(int)]
	}).(RecordOutput)
}

type RecordMapOutput struct{ *pulumi.OutputState }

func (RecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Record)(nil)).Elem()
}

func (o RecordMapOutput) ToRecordMapOutput() RecordMapOutput {
	return o
}

func (o RecordMapOutput) ToRecordMapOutputWithContext(ctx context.Context) RecordMapOutput {
	return o
}

func (o RecordMapOutput) MapIndex(k pulumi.StringInput) RecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Record {
		return vs[0].(map[string]*Record)[vs[1].(string)]
	}).(RecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RecordInput)(nil)).Elem(), &Record{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordArrayInput)(nil)).Elem(), RecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RecordMapInput)(nil)).Elem(), RecordMap{})
	pulumi.RegisterOutputType(RecordOutput{})
	pulumi.RegisterOutputType(RecordArrayOutput{})
	pulumi.RegisterOutputType(RecordMapOutput{})
}
