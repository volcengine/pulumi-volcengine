// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of dns backups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/dns"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.Backups(ctx, &dns.BackupsArgs{
//				Zid: 58846,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Backups(ctx *pulumi.Context, args *BackupsArgs, opts ...pulumi.InvokeOption) (*BackupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv BackupsResult
	err := ctx.Invoke("volcengine:dns/backups:Backups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Backups.
type BackupsArgs struct {
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The ID of the domain for which you want to get the backup schedule.
	Zid int `pulumi:"zid"`
}

// A collection of values returned by Backups.
type BackupsResult struct {
	// The collection of query.
	BackupInfos []BackupsBackupInfo `pulumi:"backupInfos"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	Zid        int `pulumi:"zid"`
}

func BackupsOutput(ctx *pulumi.Context, args BackupsOutputArgs, opts ...pulumi.InvokeOption) BackupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (BackupsResult, error) {
			args := v.(BackupsArgs)
			r, err := Backups(ctx, &args, opts...)
			var s BackupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(BackupsResultOutput)
}

// A collection of arguments for invoking Backups.
type BackupsOutputArgs struct {
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The ID of the domain for which you want to get the backup schedule.
	Zid pulumi.IntInput `pulumi:"zid"`
}

func (BackupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsArgs)(nil)).Elem()
}

// A collection of values returned by Backups.
type BackupsResultOutput struct{ *pulumi.OutputState }

func (BackupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BackupsResult)(nil)).Elem()
}

func (o BackupsResultOutput) ToBackupsResultOutput() BackupsResultOutput {
	return o
}

func (o BackupsResultOutput) ToBackupsResultOutputWithContext(ctx context.Context) BackupsResultOutput {
	return o
}

// The collection of query.
func (o BackupsResultOutput) BackupInfos() BackupsBackupInfoArrayOutput {
	return o.ApplyT(func(v BackupsResult) []BackupsBackupInfo { return v.BackupInfos }).(BackupsBackupInfoArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o BackupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v BackupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o BackupsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o BackupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BackupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o BackupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o BackupsResultOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v BackupsResult) int { return v.Zid }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(BackupsResultOutput{})
}
