// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dns

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage dns backup schedule
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/dns"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := dns.NewBackupSchedule(ctx, "foo", &dns.BackupScheduleArgs{
//				Schedule: pulumi.Int(1),
//				Zid:      pulumi.Int(58846),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DnsBackupSchedule can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:dns/backupSchedule:BackupSchedule default resource_id
// ```
type BackupSchedule struct {
	pulumi.CustomResourceState

	// Maximum number of backups per domain.
	CountLimit pulumi.IntOutput `pulumi:"countLimit"`
	// The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
	Schedule pulumi.IntOutput `pulumi:"schedule"`
	// The ID of the domain for which you want to update the backup schedule.
	Zid pulumi.IntOutput `pulumi:"zid"`
}

// NewBackupSchedule registers a new resource with the given unique name, arguments, and options.
func NewBackupSchedule(ctx *pulumi.Context,
	name string, args *BackupScheduleArgs, opts ...pulumi.ResourceOption) (*BackupSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	if args.Zid == nil {
		return nil, errors.New("invalid value for required argument 'Zid'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BackupSchedule
	err := ctx.RegisterResource("volcengine:dns/backupSchedule:BackupSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBackupSchedule gets an existing BackupSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBackupSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BackupScheduleState, opts ...pulumi.ResourceOption) (*BackupSchedule, error) {
	var resource BackupSchedule
	err := ctx.ReadResource("volcengine:dns/backupSchedule:BackupSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BackupSchedule resources.
type backupScheduleState struct {
	// Maximum number of backups per domain.
	CountLimit *int `pulumi:"countLimit"`
	// The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
	Schedule *int `pulumi:"schedule"`
	// The ID of the domain for which you want to update the backup schedule.
	Zid *int `pulumi:"zid"`
}

type BackupScheduleState struct {
	// Maximum number of backups per domain.
	CountLimit pulumi.IntPtrInput
	// The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
	Schedule pulumi.IntPtrInput
	// The ID of the domain for which you want to update the backup schedule.
	Zid pulumi.IntPtrInput
}

func (BackupScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*backupScheduleState)(nil)).Elem()
}

type backupScheduleArgs struct {
	// The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
	Schedule int `pulumi:"schedule"`
	// The ID of the domain for which you want to update the backup schedule.
	Zid int `pulumi:"zid"`
}

// The set of arguments for constructing a BackupSchedule resource.
type BackupScheduleArgs struct {
	// The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
	Schedule pulumi.IntInput
	// The ID of the domain for which you want to update the backup schedule.
	Zid pulumi.IntInput
}

func (BackupScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*backupScheduleArgs)(nil)).Elem()
}

type BackupScheduleInput interface {
	pulumi.Input

	ToBackupScheduleOutput() BackupScheduleOutput
	ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput
}

func (*BackupSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (i *BackupSchedule) ToBackupScheduleOutput() BackupScheduleOutput {
	return i.ToBackupScheduleOutputWithContext(context.Background())
}

func (i *BackupSchedule) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleOutput)
}

// BackupScheduleArrayInput is an input type that accepts BackupScheduleArray and BackupScheduleArrayOutput values.
// You can construct a concrete instance of `BackupScheduleArrayInput` via:
//
//	BackupScheduleArray{ BackupScheduleArgs{...} }
type BackupScheduleArrayInput interface {
	pulumi.Input

	ToBackupScheduleArrayOutput() BackupScheduleArrayOutput
	ToBackupScheduleArrayOutputWithContext(context.Context) BackupScheduleArrayOutput
}

type BackupScheduleArray []BackupScheduleInput

func (BackupScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupSchedule)(nil)).Elem()
}

func (i BackupScheduleArray) ToBackupScheduleArrayOutput() BackupScheduleArrayOutput {
	return i.ToBackupScheduleArrayOutputWithContext(context.Background())
}

func (i BackupScheduleArray) ToBackupScheduleArrayOutputWithContext(ctx context.Context) BackupScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleArrayOutput)
}

// BackupScheduleMapInput is an input type that accepts BackupScheduleMap and BackupScheduleMapOutput values.
// You can construct a concrete instance of `BackupScheduleMapInput` via:
//
//	BackupScheduleMap{ "key": BackupScheduleArgs{...} }
type BackupScheduleMapInput interface {
	pulumi.Input

	ToBackupScheduleMapOutput() BackupScheduleMapOutput
	ToBackupScheduleMapOutputWithContext(context.Context) BackupScheduleMapOutput
}

type BackupScheduleMap map[string]BackupScheduleInput

func (BackupScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupSchedule)(nil)).Elem()
}

func (i BackupScheduleMap) ToBackupScheduleMapOutput() BackupScheduleMapOutput {
	return i.ToBackupScheduleMapOutputWithContext(context.Background())
}

func (i BackupScheduleMap) ToBackupScheduleMapOutputWithContext(ctx context.Context) BackupScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BackupScheduleMapOutput)
}

type BackupScheduleOutput struct{ *pulumi.OutputState }

func (BackupScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BackupSchedule)(nil)).Elem()
}

func (o BackupScheduleOutput) ToBackupScheduleOutput() BackupScheduleOutput {
	return o
}

func (o BackupScheduleOutput) ToBackupScheduleOutputWithContext(ctx context.Context) BackupScheduleOutput {
	return o
}

// Maximum number of backups per domain.
func (o BackupScheduleOutput) CountLimit() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.IntOutput { return v.CountLimit }).(pulumi.IntOutput)
}

// The backup schedule. 0: Turn off automatic backup. 1: Automatic backup once per hour. 2: Automatic backup once per day. 3: Automatic backup once per month.
func (o BackupScheduleOutput) Schedule() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.IntOutput { return v.Schedule }).(pulumi.IntOutput)
}

// The ID of the domain for which you want to update the backup schedule.
func (o BackupScheduleOutput) Zid() pulumi.IntOutput {
	return o.ApplyT(func(v *BackupSchedule) pulumi.IntOutput { return v.Zid }).(pulumi.IntOutput)
}

type BackupScheduleArrayOutput struct{ *pulumi.OutputState }

func (BackupScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BackupSchedule)(nil)).Elem()
}

func (o BackupScheduleArrayOutput) ToBackupScheduleArrayOutput() BackupScheduleArrayOutput {
	return o
}

func (o BackupScheduleArrayOutput) ToBackupScheduleArrayOutputWithContext(ctx context.Context) BackupScheduleArrayOutput {
	return o
}

func (o BackupScheduleArrayOutput) Index(i pulumi.IntInput) BackupScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BackupSchedule {
		return vs[0].([]*BackupSchedule)[vs[1].(int)]
	}).(BackupScheduleOutput)
}

type BackupScheduleMapOutput struct{ *pulumi.OutputState }

func (BackupScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BackupSchedule)(nil)).Elem()
}

func (o BackupScheduleMapOutput) ToBackupScheduleMapOutput() BackupScheduleMapOutput {
	return o
}

func (o BackupScheduleMapOutput) ToBackupScheduleMapOutputWithContext(ctx context.Context) BackupScheduleMapOutput {
	return o
}

func (o BackupScheduleMapOutput) MapIndex(k pulumi.StringInput) BackupScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BackupSchedule {
		return vs[0].(map[string]*BackupSchedule)[vs[1].(string)]
	}).(BackupScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleInput)(nil)).Elem(), &BackupSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleArrayInput)(nil)).Elem(), BackupScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BackupScheduleMapInput)(nil)).Elem(), BackupScheduleMap{})
	pulumi.RegisterOutputType(BackupScheduleOutput{})
	pulumi.RegisterOutputType(BackupScheduleArrayOutput{})
	pulumi.RegisterOutputType(BackupScheduleMapOutput{})
}
