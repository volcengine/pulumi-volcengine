// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tos

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tos bucket inventories
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooBucketInventory, err := tos.NewBucketInventory(ctx, "fooBucketInventory", &tos.BucketInventoryArgs{
//				BucketName:             pulumi.String("terraform-demo"),
//				InventoryId:            pulumi.String("acc-test-inventory"),
//				IsEnabled:              pulumi.Bool(true),
//				IncludedObjectVersions: pulumi.String("All"),
//				Schedule: &tos.BucketInventoryScheduleArgs{
//					Frequency: pulumi.String("Weekly"),
//				},
//				Filter: &tos.BucketInventoryFilterArgs{
//					Prefix: pulumi.String("test-tf"),
//				},
//				OptionalFields: &tos.BucketInventoryOptionalFieldsArgs{
//					Fields: pulumi.StringArray{
//						pulumi.String("Size"),
//						pulumi.String("StorageClass"),
//						pulumi.String("CRC64"),
//					},
//				},
//				Destination: &tos.BucketInventoryDestinationArgs{
//					TosBucketDestination: &tos.BucketInventoryDestinationTosBucketDestinationArgs{
//						Format:    pulumi.String("CSV"),
//						AccountId: pulumi.String("21000*****"),
//						Bucket:    pulumi.String("terraform-demo"),
//						Prefix:    pulumi.String("tf-test-prefix"),
//						Role:      pulumi.String("TosArchiveTOSInventory"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = tos.GetBucketInventoriesOutput(ctx, tos.GetBucketInventoriesOutputArgs{
//				BucketName:  pulumi.String("terraform-demo"),
//				InventoryId: fooBucketInventory.InventoryId,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetBucketInventories(ctx *pulumi.Context, args *GetBucketInventoriesArgs, opts ...pulumi.InvokeOption) (*GetBucketInventoriesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetBucketInventoriesResult
	err := ctx.Invoke("volcengine:tos/getBucketInventories:getBucketInventories", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBucketInventories.
type GetBucketInventoriesArgs struct {
	// The name the TOS bucket.
	BucketName string `pulumi:"bucketName"`
	// The id the TOS bucket inventory.
	InventoryId *string `pulumi:"inventoryId"`
	// A Name Regex of TOS bucket inventory.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getBucketInventories.
type GetBucketInventoriesResult struct {
	// The name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The collection of query.
	InventoryConfigurations []GetBucketInventoriesInventoryConfiguration `pulumi:"inventoryConfigurations"`
	InventoryId             *string                                      `pulumi:"inventoryId"`
	NameRegex               *string                                      `pulumi:"nameRegex"`
	OutputFile              *string                                      `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetBucketInventoriesOutput(ctx *pulumi.Context, args GetBucketInventoriesOutputArgs, opts ...pulumi.InvokeOption) GetBucketInventoriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetBucketInventoriesResult, error) {
			args := v.(GetBucketInventoriesArgs)
			r, err := GetBucketInventories(ctx, &args, opts...)
			var s GetBucketInventoriesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetBucketInventoriesResultOutput)
}

// A collection of arguments for invoking getBucketInventories.
type GetBucketInventoriesOutputArgs struct {
	// The name the TOS bucket.
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// The id the TOS bucket inventory.
	InventoryId pulumi.StringPtrInput `pulumi:"inventoryId"`
	// A Name Regex of TOS bucket inventory.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetBucketInventoriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBucketInventoriesArgs)(nil)).Elem()
}

// A collection of values returned by getBucketInventories.
type GetBucketInventoriesResultOutput struct{ *pulumi.OutputState }

func (GetBucketInventoriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBucketInventoriesResult)(nil)).Elem()
}

func (o GetBucketInventoriesResultOutput) ToGetBucketInventoriesResultOutput() GetBucketInventoriesResultOutput {
	return o
}

func (o GetBucketInventoriesResultOutput) ToGetBucketInventoriesResultOutputWithContext(ctx context.Context) GetBucketInventoriesResultOutput {
	return o
}

// The name of the bucket.
func (o GetBucketInventoriesResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBucketInventoriesResult) string { return v.BucketName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetBucketInventoriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetBucketInventoriesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The collection of query.
func (o GetBucketInventoriesResultOutput) InventoryConfigurations() GetBucketInventoriesInventoryConfigurationArrayOutput {
	return o.ApplyT(func(v GetBucketInventoriesResult) []GetBucketInventoriesInventoryConfiguration {
		return v.InventoryConfigurations
	}).(GetBucketInventoriesInventoryConfigurationArrayOutput)
}

func (o GetBucketInventoriesResultOutput) InventoryId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBucketInventoriesResult) *string { return v.InventoryId }).(pulumi.StringPtrOutput)
}

func (o GetBucketInventoriesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBucketInventoriesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetBucketInventoriesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetBucketInventoriesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetBucketInventoriesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetBucketInventoriesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetBucketInventoriesResultOutput{})
}
