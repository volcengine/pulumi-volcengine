// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage tos bucket notification
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooBucket, err := tos.NewBucket(ctx, "fooBucket", &tos.BucketArgs{
//				BucketName:   pulumi.String("tf-acc-test-bucket"),
//				PublicAcl:    pulumi.String("private"),
//				AzRedundancy: pulumi.String("multi-az"),
//				ProjectName:  pulumi.String("default"),
//				Tags: tos.BucketTagArray{
//					&tos.BucketTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = tos.NewBucketNotification(ctx, "fooBucketNotification", &tos.BucketNotificationArgs{
//				BucketName: fooBucket.ID(),
//				Rules: &tos.BucketNotificationRulesArgs{
//					RuleId: pulumi.String("acc-test-rule"),
//					Events: pulumi.StringArray{
//						pulumi.String("tos:ObjectCreated:Put"),
//						pulumi.String("tos:ObjectCreated:Post"),
//					},
//					Destination: &tos.BucketNotificationRulesDestinationArgs{
//						VeFaas: tos.BucketNotificationRulesDestinationVeFaaArray{
//							&tos.BucketNotificationRulesDestinationVeFaaArgs{
//								FunctionId: pulumi.String("80w95pns"),
//							},
//							&tos.BucketNotificationRulesDestinationVeFaaArgs{
//								FunctionId: pulumi.String("crnrfajj"),
//							},
//						},
//					},
//					Filter: &tos.BucketNotificationRulesFilterArgs{
//						TosKey: &tos.BucketNotificationRulesFilterTosKeyArgs{
//							FilterRules: tos.BucketNotificationRulesFilterTosKeyFilterRuleArray{
//								&tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs{
//									Name:  pulumi.String("prefix"),
//									Value: pulumi.String("a"),
//								},
//								&tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs{
//									Name:  pulumi.String("suffix"),
//									Value: pulumi.String("b"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = tos.NewBucketNotification(ctx, "foo1", &tos.BucketNotificationArgs{
//				BucketName: fooBucket.ID(),
//				Rules: &tos.BucketNotificationRulesArgs{
//					RuleId: pulumi.String("acc-test-rule-1"),
//					Events: pulumi.StringArray{
//						pulumi.String("tos:ObjectRemoved:Delete"),
//						pulumi.String("tos:ObjectRemoved:DeleteMarkerCreated"),
//					},
//					Destination: &tos.BucketNotificationRulesDestinationArgs{
//						VeFaas: tos.BucketNotificationRulesDestinationVeFaaArray{
//							&tos.BucketNotificationRulesDestinationVeFaaArgs{
//								FunctionId: pulumi.String("80w95pns"),
//							},
//							&tos.BucketNotificationRulesDestinationVeFaaArgs{
//								FunctionId: pulumi.String("crnrfajj"),
//							},
//						},
//					},
//					Filter: &tos.BucketNotificationRulesFilterArgs{
//						TosKey: &tos.BucketNotificationRulesFilterTosKeyArgs{
//							FilterRules: tos.BucketNotificationRulesFilterTosKeyFilterRuleArray{
//								&tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs{
//									Name:  pulumi.String("prefix"),
//									Value: pulumi.String("aaa"),
//								},
//								&tos.BucketNotificationRulesFilterTosKeyFilterRuleArgs{
//									Name:  pulumi.String("suffix"),
//									Value: pulumi.String("bbb"),
//								},
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TosBucketNotification can be imported using the bucketName, e.g.
//
// ```sh
// $ pulumi import volcengine:tos/bucketNotification:BucketNotification default resource_id
// ```
type BucketNotification struct {
	pulumi.CustomResourceState

	// The name of the bucket.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// The notification rule of the bucket.
	Rules BucketNotificationRulesOutput `pulumi:"rules"`
	// The version of the notification.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewBucketNotification registers a new resource with the given unique name, arguments, and options.
func NewBucketNotification(ctx *pulumi.Context,
	name string, args *BucketNotificationArgs, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketNotification
	err := ctx.RegisterResource("volcengine:tos/bucketNotification:BucketNotification", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketNotification gets an existing BucketNotification resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketNotification(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketNotificationState, opts ...pulumi.ResourceOption) (*BucketNotification, error) {
	var resource BucketNotification
	err := ctx.ReadResource("volcengine:tos/bucketNotification:BucketNotification", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketNotification resources.
type bucketNotificationState struct {
	// The name of the bucket.
	BucketName *string `pulumi:"bucketName"`
	// The notification rule of the bucket.
	Rules *BucketNotificationRules `pulumi:"rules"`
	// The version of the notification.
	Version *string `pulumi:"version"`
}

type BucketNotificationState struct {
	// The name of the bucket.
	BucketName pulumi.StringPtrInput
	// The notification rule of the bucket.
	Rules BucketNotificationRulesPtrInput
	// The version of the notification.
	Version pulumi.StringPtrInput
}

func (BucketNotificationState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationState)(nil)).Elem()
}

type bucketNotificationArgs struct {
	// The name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// The notification rule of the bucket.
	Rules BucketNotificationRules `pulumi:"rules"`
}

// The set of arguments for constructing a BucketNotification resource.
type BucketNotificationArgs struct {
	// The name of the bucket.
	BucketName pulumi.StringInput
	// The notification rule of the bucket.
	Rules BucketNotificationRulesInput
}

func (BucketNotificationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketNotificationArgs)(nil)).Elem()
}

type BucketNotificationInput interface {
	pulumi.Input

	ToBucketNotificationOutput() BucketNotificationOutput
	ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput
}

func (*BucketNotification) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketNotification)(nil)).Elem()
}

func (i *BucketNotification) ToBucketNotificationOutput() BucketNotificationOutput {
	return i.ToBucketNotificationOutputWithContext(context.Background())
}

func (i *BucketNotification) ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationOutput)
}

// BucketNotificationArrayInput is an input type that accepts BucketNotificationArray and BucketNotificationArrayOutput values.
// You can construct a concrete instance of `BucketNotificationArrayInput` via:
//
//	BucketNotificationArray{ BucketNotificationArgs{...} }
type BucketNotificationArrayInput interface {
	pulumi.Input

	ToBucketNotificationArrayOutput() BucketNotificationArrayOutput
	ToBucketNotificationArrayOutputWithContext(context.Context) BucketNotificationArrayOutput
}

type BucketNotificationArray []BucketNotificationInput

func (BucketNotificationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketNotification)(nil)).Elem()
}

func (i BucketNotificationArray) ToBucketNotificationArrayOutput() BucketNotificationArrayOutput {
	return i.ToBucketNotificationArrayOutputWithContext(context.Background())
}

func (i BucketNotificationArray) ToBucketNotificationArrayOutputWithContext(ctx context.Context) BucketNotificationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationArrayOutput)
}

// BucketNotificationMapInput is an input type that accepts BucketNotificationMap and BucketNotificationMapOutput values.
// You can construct a concrete instance of `BucketNotificationMapInput` via:
//
//	BucketNotificationMap{ "key": BucketNotificationArgs{...} }
type BucketNotificationMapInput interface {
	pulumi.Input

	ToBucketNotificationMapOutput() BucketNotificationMapOutput
	ToBucketNotificationMapOutputWithContext(context.Context) BucketNotificationMapOutput
}

type BucketNotificationMap map[string]BucketNotificationInput

func (BucketNotificationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketNotification)(nil)).Elem()
}

func (i BucketNotificationMap) ToBucketNotificationMapOutput() BucketNotificationMapOutput {
	return i.ToBucketNotificationMapOutputWithContext(context.Background())
}

func (i BucketNotificationMap) ToBucketNotificationMapOutputWithContext(ctx context.Context) BucketNotificationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketNotificationMapOutput)
}

type BucketNotificationOutput struct{ *pulumi.OutputState }

func (BucketNotificationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketNotification)(nil)).Elem()
}

func (o BucketNotificationOutput) ToBucketNotificationOutput() BucketNotificationOutput {
	return o
}

func (o BucketNotificationOutput) ToBucketNotificationOutputWithContext(ctx context.Context) BucketNotificationOutput {
	return o
}

// The name of the bucket.
func (o BucketNotificationOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketNotification) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// The notification rule of the bucket.
func (o BucketNotificationOutput) Rules() BucketNotificationRulesOutput {
	return o.ApplyT(func(v *BucketNotification) BucketNotificationRulesOutput { return v.Rules }).(BucketNotificationRulesOutput)
}

// The version of the notification.
func (o BucketNotificationOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketNotification) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type BucketNotificationArrayOutput struct{ *pulumi.OutputState }

func (BucketNotificationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketNotification)(nil)).Elem()
}

func (o BucketNotificationArrayOutput) ToBucketNotificationArrayOutput() BucketNotificationArrayOutput {
	return o
}

func (o BucketNotificationArrayOutput) ToBucketNotificationArrayOutputWithContext(ctx context.Context) BucketNotificationArrayOutput {
	return o
}

func (o BucketNotificationArrayOutput) Index(i pulumi.IntInput) BucketNotificationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketNotification {
		return vs[0].([]*BucketNotification)[vs[1].(int)]
	}).(BucketNotificationOutput)
}

type BucketNotificationMapOutput struct{ *pulumi.OutputState }

func (BucketNotificationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketNotification)(nil)).Elem()
}

func (o BucketNotificationMapOutput) ToBucketNotificationMapOutput() BucketNotificationMapOutput {
	return o
}

func (o BucketNotificationMapOutput) ToBucketNotificationMapOutputWithContext(ctx context.Context) BucketNotificationMapOutput {
	return o
}

func (o BucketNotificationMapOutput) MapIndex(k pulumi.StringInput) BucketNotificationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketNotification {
		return vs[0].(map[string]*BucketNotification)[vs[1].(string)]
	}).(BucketNotificationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketNotificationInput)(nil)).Elem(), &BucketNotification{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketNotificationArrayInput)(nil)).Elem(), BucketNotificationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketNotificationMapInput)(nil)).Elem(), BucketNotificationMap{})
	pulumi.RegisterOutputType(BucketNotificationOutput{})
	pulumi.RegisterOutputType(BucketNotificationArrayOutput{})
	pulumi.RegisterOutputType(BucketNotificationMapOutput{})
}
