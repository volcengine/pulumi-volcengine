// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage tos bucket encryption
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/kms"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooBucket, err := tos.NewBucket(ctx, "fooBucket", &tos.BucketArgs{
//				BucketName:   pulumi.String("tf-acc-test-bucket"),
//				PublicAcl:    pulumi.String("private"),
//				AzRedundancy: pulumi.String("multi-az"),
//				ProjectName:  pulumi.String("default"),
//				Tags: tos.BucketTagArray{
//					&tos.BucketTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooKeyring, err := kms.NewKeyring(ctx, "fooKeyring", &kms.KeyringArgs{
//				KeyringName: pulumi.String("acc-test-keyring"),
//				Description: pulumi.String("acc-test"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = tos.NewBucketEncryption(ctx, "fooBucketEncryption", &tos.BucketEncryptionArgs{
//				BucketName: fooBucket.ID(),
//				Rule: &tos.BucketEncryptionRuleArgs{
//					ApplyServerSideEncryptionByDefault: &tos.BucketEncryptionRuleApplyServerSideEncryptionByDefaultArgs{
//						SseAlgorithm:      pulumi.String("kms"),
//						KmsDataEncryption: pulumi.String("AES256"),
//						KmsMasterKeyId:    fooKeyring.ID(),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TosBucketEncryption can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:tos/bucketEncryption:BucketEncryption default resource_id
// ```
type BucketEncryption struct {
	pulumi.CustomResourceState

	// The name of the bucket.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// The rule of the bucket encryption.
	Rule BucketEncryptionRuleOutput `pulumi:"rule"`
}

// NewBucketEncryption registers a new resource with the given unique name, arguments, and options.
func NewBucketEncryption(ctx *pulumi.Context,
	name string, args *BucketEncryptionArgs, opts ...pulumi.ResourceOption) (*BucketEncryption, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.Rule == nil {
		return nil, errors.New("invalid value for required argument 'Rule'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketEncryption
	err := ctx.RegisterResource("volcengine:tos/bucketEncryption:BucketEncryption", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketEncryption gets an existing BucketEncryption resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketEncryption(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketEncryptionState, opts ...pulumi.ResourceOption) (*BucketEncryption, error) {
	var resource BucketEncryption
	err := ctx.ReadResource("volcengine:tos/bucketEncryption:BucketEncryption", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketEncryption resources.
type bucketEncryptionState struct {
	// The name of the bucket.
	BucketName *string `pulumi:"bucketName"`
	// The rule of the bucket encryption.
	Rule *BucketEncryptionRule `pulumi:"rule"`
}

type BucketEncryptionState struct {
	// The name of the bucket.
	BucketName pulumi.StringPtrInput
	// The rule of the bucket encryption.
	Rule BucketEncryptionRulePtrInput
}

func (BucketEncryptionState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketEncryptionState)(nil)).Elem()
}

type bucketEncryptionArgs struct {
	// The name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// The rule of the bucket encryption.
	Rule BucketEncryptionRule `pulumi:"rule"`
}

// The set of arguments for constructing a BucketEncryption resource.
type BucketEncryptionArgs struct {
	// The name of the bucket.
	BucketName pulumi.StringInput
	// The rule of the bucket encryption.
	Rule BucketEncryptionRuleInput
}

func (BucketEncryptionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketEncryptionArgs)(nil)).Elem()
}

type BucketEncryptionInput interface {
	pulumi.Input

	ToBucketEncryptionOutput() BucketEncryptionOutput
	ToBucketEncryptionOutputWithContext(ctx context.Context) BucketEncryptionOutput
}

func (*BucketEncryption) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketEncryption)(nil)).Elem()
}

func (i *BucketEncryption) ToBucketEncryptionOutput() BucketEncryptionOutput {
	return i.ToBucketEncryptionOutputWithContext(context.Background())
}

func (i *BucketEncryption) ToBucketEncryptionOutputWithContext(ctx context.Context) BucketEncryptionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketEncryptionOutput)
}

// BucketEncryptionArrayInput is an input type that accepts BucketEncryptionArray and BucketEncryptionArrayOutput values.
// You can construct a concrete instance of `BucketEncryptionArrayInput` via:
//
//	BucketEncryptionArray{ BucketEncryptionArgs{...} }
type BucketEncryptionArrayInput interface {
	pulumi.Input

	ToBucketEncryptionArrayOutput() BucketEncryptionArrayOutput
	ToBucketEncryptionArrayOutputWithContext(context.Context) BucketEncryptionArrayOutput
}

type BucketEncryptionArray []BucketEncryptionInput

func (BucketEncryptionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketEncryption)(nil)).Elem()
}

func (i BucketEncryptionArray) ToBucketEncryptionArrayOutput() BucketEncryptionArrayOutput {
	return i.ToBucketEncryptionArrayOutputWithContext(context.Background())
}

func (i BucketEncryptionArray) ToBucketEncryptionArrayOutputWithContext(ctx context.Context) BucketEncryptionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketEncryptionArrayOutput)
}

// BucketEncryptionMapInput is an input type that accepts BucketEncryptionMap and BucketEncryptionMapOutput values.
// You can construct a concrete instance of `BucketEncryptionMapInput` via:
//
//	BucketEncryptionMap{ "key": BucketEncryptionArgs{...} }
type BucketEncryptionMapInput interface {
	pulumi.Input

	ToBucketEncryptionMapOutput() BucketEncryptionMapOutput
	ToBucketEncryptionMapOutputWithContext(context.Context) BucketEncryptionMapOutput
}

type BucketEncryptionMap map[string]BucketEncryptionInput

func (BucketEncryptionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketEncryption)(nil)).Elem()
}

func (i BucketEncryptionMap) ToBucketEncryptionMapOutput() BucketEncryptionMapOutput {
	return i.ToBucketEncryptionMapOutputWithContext(context.Background())
}

func (i BucketEncryptionMap) ToBucketEncryptionMapOutputWithContext(ctx context.Context) BucketEncryptionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketEncryptionMapOutput)
}

type BucketEncryptionOutput struct{ *pulumi.OutputState }

func (BucketEncryptionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketEncryption)(nil)).Elem()
}

func (o BucketEncryptionOutput) ToBucketEncryptionOutput() BucketEncryptionOutput {
	return o
}

func (o BucketEncryptionOutput) ToBucketEncryptionOutputWithContext(ctx context.Context) BucketEncryptionOutput {
	return o
}

// The name of the bucket.
func (o BucketEncryptionOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketEncryption) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// The rule of the bucket encryption.
func (o BucketEncryptionOutput) Rule() BucketEncryptionRuleOutput {
	return o.ApplyT(func(v *BucketEncryption) BucketEncryptionRuleOutput { return v.Rule }).(BucketEncryptionRuleOutput)
}

type BucketEncryptionArrayOutput struct{ *pulumi.OutputState }

func (BucketEncryptionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketEncryption)(nil)).Elem()
}

func (o BucketEncryptionArrayOutput) ToBucketEncryptionArrayOutput() BucketEncryptionArrayOutput {
	return o
}

func (o BucketEncryptionArrayOutput) ToBucketEncryptionArrayOutputWithContext(ctx context.Context) BucketEncryptionArrayOutput {
	return o
}

func (o BucketEncryptionArrayOutput) Index(i pulumi.IntInput) BucketEncryptionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketEncryption {
		return vs[0].([]*BucketEncryption)[vs[1].(int)]
	}).(BucketEncryptionOutput)
}

type BucketEncryptionMapOutput struct{ *pulumi.OutputState }

func (BucketEncryptionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketEncryption)(nil)).Elem()
}

func (o BucketEncryptionMapOutput) ToBucketEncryptionMapOutput() BucketEncryptionMapOutput {
	return o
}

func (o BucketEncryptionMapOutput) ToBucketEncryptionMapOutputWithContext(ctx context.Context) BucketEncryptionMapOutput {
	return o
}

func (o BucketEncryptionMapOutput) MapIndex(k pulumi.StringInput) BucketEncryptionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketEncryption {
		return vs[0].(map[string]*BucketEncryption)[vs[1].(string)]
	}).(BucketEncryptionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketEncryptionInput)(nil)).Elem(), &BucketEncryption{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketEncryptionArrayInput)(nil)).Elem(), BucketEncryptionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketEncryptionMapInput)(nil)).Elem(), BucketEncryptionMap{})
	pulumi.RegisterOutputType(BucketEncryptionOutput{})
	pulumi.RegisterOutputType(BucketEncryptionArrayOutput{})
	pulumi.RegisterOutputType(BucketEncryptionMapOutput{})
}
