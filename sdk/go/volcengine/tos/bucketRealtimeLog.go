// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage tos bucket realtime log
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// When deleting this resource, the tls related resources such as project and topic will not be automatically deleted
//			_, err := tos.NewBucketRealtimeLog(ctx, "foo", &tos.BucketRealtimeLogArgs{
//				AccessLogConfiguration: &tos.BucketRealtimeLogAccessLogConfigurationArgs{
//					Ttl: pulumi.Int(6),
//				},
//				BucketName: pulumi.String("terraform-demo"),
//				Role:       pulumi.String("TOSLogArchiveTLSRole"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TosBucketRealtimeLog can be imported using the bucket_name, e.g.
//
// ```sh
// $ pulumi import volcengine:tos/bucketRealtimeLog:BucketRealtimeLog default resource_id
// ```
type BucketRealtimeLog struct {
	pulumi.CustomResourceState

	// The export schedule of the bucket inventory.
	AccessLogConfiguration BucketRealtimeLogAccessLogConfigurationOutput `pulumi:"accessLogConfiguration"`
	// The name of the bucket.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
	Role pulumi.StringOutput `pulumi:"role"`
}

// NewBucketRealtimeLog registers a new resource with the given unique name, arguments, and options.
func NewBucketRealtimeLog(ctx *pulumi.Context,
	name string, args *BucketRealtimeLogArgs, opts ...pulumi.ResourceOption) (*BucketRealtimeLog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccessLogConfiguration == nil {
		return nil, errors.New("invalid value for required argument 'AccessLogConfiguration'")
	}
	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketRealtimeLog
	err := ctx.RegisterResource("volcengine:tos/bucketRealtimeLog:BucketRealtimeLog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketRealtimeLog gets an existing BucketRealtimeLog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketRealtimeLog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketRealtimeLogState, opts ...pulumi.ResourceOption) (*BucketRealtimeLog, error) {
	var resource BucketRealtimeLog
	err := ctx.ReadResource("volcengine:tos/bucketRealtimeLog:BucketRealtimeLog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketRealtimeLog resources.
type bucketRealtimeLogState struct {
	// The export schedule of the bucket inventory.
	AccessLogConfiguration *BucketRealtimeLogAccessLogConfiguration `pulumi:"accessLogConfiguration"`
	// The name of the bucket.
	BucketName *string `pulumi:"bucketName"`
	// The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
	Role *string `pulumi:"role"`
}

type BucketRealtimeLogState struct {
	// The export schedule of the bucket inventory.
	AccessLogConfiguration BucketRealtimeLogAccessLogConfigurationPtrInput
	// The name of the bucket.
	BucketName pulumi.StringPtrInput
	// The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
	Role pulumi.StringPtrInput
}

func (BucketRealtimeLogState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketRealtimeLogState)(nil)).Elem()
}

type bucketRealtimeLogArgs struct {
	// The export schedule of the bucket inventory.
	AccessLogConfiguration BucketRealtimeLogAccessLogConfiguration `pulumi:"accessLogConfiguration"`
	// The name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
	Role string `pulumi:"role"`
}

// The set of arguments for constructing a BucketRealtimeLog resource.
type BucketRealtimeLogArgs struct {
	// The export schedule of the bucket inventory.
	AccessLogConfiguration BucketRealtimeLogAccessLogConfigurationInput
	// The name of the bucket.
	BucketName pulumi.StringInput
	// The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
	Role pulumi.StringInput
}

func (BucketRealtimeLogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketRealtimeLogArgs)(nil)).Elem()
}

type BucketRealtimeLogInput interface {
	pulumi.Input

	ToBucketRealtimeLogOutput() BucketRealtimeLogOutput
	ToBucketRealtimeLogOutputWithContext(ctx context.Context) BucketRealtimeLogOutput
}

func (*BucketRealtimeLog) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketRealtimeLog)(nil)).Elem()
}

func (i *BucketRealtimeLog) ToBucketRealtimeLogOutput() BucketRealtimeLogOutput {
	return i.ToBucketRealtimeLogOutputWithContext(context.Background())
}

func (i *BucketRealtimeLog) ToBucketRealtimeLogOutputWithContext(ctx context.Context) BucketRealtimeLogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketRealtimeLogOutput)
}

// BucketRealtimeLogArrayInput is an input type that accepts BucketRealtimeLogArray and BucketRealtimeLogArrayOutput values.
// You can construct a concrete instance of `BucketRealtimeLogArrayInput` via:
//
//	BucketRealtimeLogArray{ BucketRealtimeLogArgs{...} }
type BucketRealtimeLogArrayInput interface {
	pulumi.Input

	ToBucketRealtimeLogArrayOutput() BucketRealtimeLogArrayOutput
	ToBucketRealtimeLogArrayOutputWithContext(context.Context) BucketRealtimeLogArrayOutput
}

type BucketRealtimeLogArray []BucketRealtimeLogInput

func (BucketRealtimeLogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketRealtimeLog)(nil)).Elem()
}

func (i BucketRealtimeLogArray) ToBucketRealtimeLogArrayOutput() BucketRealtimeLogArrayOutput {
	return i.ToBucketRealtimeLogArrayOutputWithContext(context.Background())
}

func (i BucketRealtimeLogArray) ToBucketRealtimeLogArrayOutputWithContext(ctx context.Context) BucketRealtimeLogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketRealtimeLogArrayOutput)
}

// BucketRealtimeLogMapInput is an input type that accepts BucketRealtimeLogMap and BucketRealtimeLogMapOutput values.
// You can construct a concrete instance of `BucketRealtimeLogMapInput` via:
//
//	BucketRealtimeLogMap{ "key": BucketRealtimeLogArgs{...} }
type BucketRealtimeLogMapInput interface {
	pulumi.Input

	ToBucketRealtimeLogMapOutput() BucketRealtimeLogMapOutput
	ToBucketRealtimeLogMapOutputWithContext(context.Context) BucketRealtimeLogMapOutput
}

type BucketRealtimeLogMap map[string]BucketRealtimeLogInput

func (BucketRealtimeLogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketRealtimeLog)(nil)).Elem()
}

func (i BucketRealtimeLogMap) ToBucketRealtimeLogMapOutput() BucketRealtimeLogMapOutput {
	return i.ToBucketRealtimeLogMapOutputWithContext(context.Background())
}

func (i BucketRealtimeLogMap) ToBucketRealtimeLogMapOutputWithContext(ctx context.Context) BucketRealtimeLogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketRealtimeLogMapOutput)
}

type BucketRealtimeLogOutput struct{ *pulumi.OutputState }

func (BucketRealtimeLogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketRealtimeLog)(nil)).Elem()
}

func (o BucketRealtimeLogOutput) ToBucketRealtimeLogOutput() BucketRealtimeLogOutput {
	return o
}

func (o BucketRealtimeLogOutput) ToBucketRealtimeLogOutputWithContext(ctx context.Context) BucketRealtimeLogOutput {
	return o
}

// The export schedule of the bucket inventory.
func (o BucketRealtimeLogOutput) AccessLogConfiguration() BucketRealtimeLogAccessLogConfigurationOutput {
	return o.ApplyT(func(v *BucketRealtimeLog) BucketRealtimeLogAccessLogConfigurationOutput {
		return v.AccessLogConfiguration
	}).(BucketRealtimeLogAccessLogConfigurationOutput)
}

// The name of the bucket.
func (o BucketRealtimeLogOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketRealtimeLog) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
func (o BucketRealtimeLogOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketRealtimeLog) pulumi.StringOutput { return v.Role }).(pulumi.StringOutput)
}

type BucketRealtimeLogArrayOutput struct{ *pulumi.OutputState }

func (BucketRealtimeLogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketRealtimeLog)(nil)).Elem()
}

func (o BucketRealtimeLogArrayOutput) ToBucketRealtimeLogArrayOutput() BucketRealtimeLogArrayOutput {
	return o
}

func (o BucketRealtimeLogArrayOutput) ToBucketRealtimeLogArrayOutputWithContext(ctx context.Context) BucketRealtimeLogArrayOutput {
	return o
}

func (o BucketRealtimeLogArrayOutput) Index(i pulumi.IntInput) BucketRealtimeLogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketRealtimeLog {
		return vs[0].([]*BucketRealtimeLog)[vs[1].(int)]
	}).(BucketRealtimeLogOutput)
}

type BucketRealtimeLogMapOutput struct{ *pulumi.OutputState }

func (BucketRealtimeLogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketRealtimeLog)(nil)).Elem()
}

func (o BucketRealtimeLogMapOutput) ToBucketRealtimeLogMapOutput() BucketRealtimeLogMapOutput {
	return o
}

func (o BucketRealtimeLogMapOutput) ToBucketRealtimeLogMapOutputWithContext(ctx context.Context) BucketRealtimeLogMapOutput {
	return o
}

func (o BucketRealtimeLogMapOutput) MapIndex(k pulumi.StringInput) BucketRealtimeLogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketRealtimeLog {
		return vs[0].(map[string]*BucketRealtimeLog)[vs[1].(string)]
	}).(BucketRealtimeLogOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketRealtimeLogInput)(nil)).Elem(), &BucketRealtimeLog{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketRealtimeLogArrayInput)(nil)).Elem(), BucketRealtimeLogArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketRealtimeLogMapInput)(nil)).Elem(), BucketRealtimeLogMap{})
	pulumi.RegisterOutputType(BucketRealtimeLogOutput{})
	pulumi.RegisterOutputType(BucketRealtimeLogArrayOutput{})
	pulumi.RegisterOutputType(BucketRealtimeLogMapOutput{})
}
