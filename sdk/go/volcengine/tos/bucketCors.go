// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tos

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage tos bucket cors
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tos"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooBucket, err := tos.NewBucket(ctx, "fooBucket", &tos.BucketArgs{
//				BucketName:   pulumi.String("tf-acc-test-bucket"),
//				PublicAcl:    pulumi.String("private"),
//				AzRedundancy: pulumi.String("multi-az"),
//				ProjectName:  pulumi.String("default"),
//				Tags: tos.BucketTagArray{
//					&tos.BucketTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = tos.NewBucketCors(ctx, "fooBucketCors", &tos.BucketCorsArgs{
//				BucketName: fooBucket.ID(),
//				CorsRules: tos.BucketCorsCorsRuleArray{
//					&tos.BucketCorsCorsRuleArgs{
//						AllowedOrigins: pulumi.StringArray{
//							pulumi.String("*"),
//						},
//						AllowedMethods: pulumi.StringArray{
//							pulumi.String("GET"),
//							pulumi.String("POST"),
//						},
//						AllowedHeaders: pulumi.StringArray{
//							pulumi.String("Authorization"),
//						},
//						ExposeHeaders: pulumi.StringArray{
//							pulumi.String("x-tos-request-id"),
//						},
//						MaxAgeSeconds: pulumi.Int(1500),
//					},
//					&tos.BucketCorsCorsRuleArgs{
//						AllowedOrigins: pulumi.StringArray{
//							pulumi.String("*"),
//							pulumi.String("https://www.volcengine.com"),
//						},
//						AllowedMethods: pulumi.StringArray{
//							pulumi.String("POST"),
//							pulumi.String("PUT"),
//							pulumi.String("DELETE"),
//						},
//						AllowedHeaders: pulumi.StringArray{
//							pulumi.String("Authorization"),
//						},
//						ExposeHeaders: pulumi.StringArray{
//							pulumi.String("x-tos-request-id"),
//						},
//						MaxAgeSeconds: pulumi.Int(2000),
//						ResponseVary:  pulumi.Bool(true),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// TosBucketCors can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:tos/bucketCors:BucketCors default resource_id
// ```
type BucketCors struct {
	pulumi.CustomResourceState

	// The name of the bucket.
	BucketName pulumi.StringOutput `pulumi:"bucketName"`
	// The CORS rules of the bucket.
	CorsRules BucketCorsCorsRuleArrayOutput `pulumi:"corsRules"`
}

// NewBucketCors registers a new resource with the given unique name, arguments, and options.
func NewBucketCors(ctx *pulumi.Context,
	name string, args *BucketCorsArgs, opts ...pulumi.ResourceOption) (*BucketCors, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BucketName == nil {
		return nil, errors.New("invalid value for required argument 'BucketName'")
	}
	if args.CorsRules == nil {
		return nil, errors.New("invalid value for required argument 'CorsRules'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource BucketCors
	err := ctx.RegisterResource("volcengine:tos/bucketCors:BucketCors", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBucketCors gets an existing BucketCors resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBucketCors(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BucketCorsState, opts ...pulumi.ResourceOption) (*BucketCors, error) {
	var resource BucketCors
	err := ctx.ReadResource("volcengine:tos/bucketCors:BucketCors", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BucketCors resources.
type bucketCorsState struct {
	// The name of the bucket.
	BucketName *string `pulumi:"bucketName"`
	// The CORS rules of the bucket.
	CorsRules []BucketCorsCorsRule `pulumi:"corsRules"`
}

type BucketCorsState struct {
	// The name of the bucket.
	BucketName pulumi.StringPtrInput
	// The CORS rules of the bucket.
	CorsRules BucketCorsCorsRuleArrayInput
}

func (BucketCorsState) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCorsState)(nil)).Elem()
}

type bucketCorsArgs struct {
	// The name of the bucket.
	BucketName string `pulumi:"bucketName"`
	// The CORS rules of the bucket.
	CorsRules []BucketCorsCorsRule `pulumi:"corsRules"`
}

// The set of arguments for constructing a BucketCors resource.
type BucketCorsArgs struct {
	// The name of the bucket.
	BucketName pulumi.StringInput
	// The CORS rules of the bucket.
	CorsRules BucketCorsCorsRuleArrayInput
}

func (BucketCorsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bucketCorsArgs)(nil)).Elem()
}

type BucketCorsInput interface {
	pulumi.Input

	ToBucketCorsOutput() BucketCorsOutput
	ToBucketCorsOutputWithContext(ctx context.Context) BucketCorsOutput
}

func (*BucketCors) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketCors)(nil)).Elem()
}

func (i *BucketCors) ToBucketCorsOutput() BucketCorsOutput {
	return i.ToBucketCorsOutputWithContext(context.Background())
}

func (i *BucketCors) ToBucketCorsOutputWithContext(ctx context.Context) BucketCorsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCorsOutput)
}

// BucketCorsArrayInput is an input type that accepts BucketCorsArray and BucketCorsArrayOutput values.
// You can construct a concrete instance of `BucketCorsArrayInput` via:
//
//	BucketCorsArray{ BucketCorsArgs{...} }
type BucketCorsArrayInput interface {
	pulumi.Input

	ToBucketCorsArrayOutput() BucketCorsArrayOutput
	ToBucketCorsArrayOutputWithContext(context.Context) BucketCorsArrayOutput
}

type BucketCorsArray []BucketCorsInput

func (BucketCorsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketCors)(nil)).Elem()
}

func (i BucketCorsArray) ToBucketCorsArrayOutput() BucketCorsArrayOutput {
	return i.ToBucketCorsArrayOutputWithContext(context.Background())
}

func (i BucketCorsArray) ToBucketCorsArrayOutputWithContext(ctx context.Context) BucketCorsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCorsArrayOutput)
}

// BucketCorsMapInput is an input type that accepts BucketCorsMap and BucketCorsMapOutput values.
// You can construct a concrete instance of `BucketCorsMapInput` via:
//
//	BucketCorsMap{ "key": BucketCorsArgs{...} }
type BucketCorsMapInput interface {
	pulumi.Input

	ToBucketCorsMapOutput() BucketCorsMapOutput
	ToBucketCorsMapOutputWithContext(context.Context) BucketCorsMapOutput
}

type BucketCorsMap map[string]BucketCorsInput

func (BucketCorsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketCors)(nil)).Elem()
}

func (i BucketCorsMap) ToBucketCorsMapOutput() BucketCorsMapOutput {
	return i.ToBucketCorsMapOutputWithContext(context.Background())
}

func (i BucketCorsMap) ToBucketCorsMapOutputWithContext(ctx context.Context) BucketCorsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BucketCorsMapOutput)
}

type BucketCorsOutput struct{ *pulumi.OutputState }

func (BucketCorsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BucketCors)(nil)).Elem()
}

func (o BucketCorsOutput) ToBucketCorsOutput() BucketCorsOutput {
	return o
}

func (o BucketCorsOutput) ToBucketCorsOutputWithContext(ctx context.Context) BucketCorsOutput {
	return o
}

// The name of the bucket.
func (o BucketCorsOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v *BucketCors) pulumi.StringOutput { return v.BucketName }).(pulumi.StringOutput)
}

// The CORS rules of the bucket.
func (o BucketCorsOutput) CorsRules() BucketCorsCorsRuleArrayOutput {
	return o.ApplyT(func(v *BucketCors) BucketCorsCorsRuleArrayOutput { return v.CorsRules }).(BucketCorsCorsRuleArrayOutput)
}

type BucketCorsArrayOutput struct{ *pulumi.OutputState }

func (BucketCorsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BucketCors)(nil)).Elem()
}

func (o BucketCorsArrayOutput) ToBucketCorsArrayOutput() BucketCorsArrayOutput {
	return o
}

func (o BucketCorsArrayOutput) ToBucketCorsArrayOutputWithContext(ctx context.Context) BucketCorsArrayOutput {
	return o
}

func (o BucketCorsArrayOutput) Index(i pulumi.IntInput) BucketCorsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BucketCors {
		return vs[0].([]*BucketCors)[vs[1].(int)]
	}).(BucketCorsOutput)
}

type BucketCorsMapOutput struct{ *pulumi.OutputState }

func (BucketCorsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BucketCors)(nil)).Elem()
}

func (o BucketCorsMapOutput) ToBucketCorsMapOutput() BucketCorsMapOutput {
	return o
}

func (o BucketCorsMapOutput) ToBucketCorsMapOutputWithContext(ctx context.Context) BucketCorsMapOutput {
	return o
}

func (o BucketCorsMapOutput) MapIndex(k pulumi.StringInput) BucketCorsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BucketCors {
		return vs[0].(map[string]*BucketCors)[vs[1].(string)]
	}).(BucketCorsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCorsInput)(nil)).Elem(), &BucketCors{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCorsArrayInput)(nil)).Elem(), BucketCorsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BucketCorsMapInput)(nil)).Elem(), BucketCorsMap{})
	pulumi.RegisterOutputType(BucketCorsOutput{})
	pulumi.RegisterOutputType(BucketCorsArrayOutput{})
	pulumi.RegisterOutputType(BucketCorsMapOutput{})
}
