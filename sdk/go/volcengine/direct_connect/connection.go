// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package direct_connect

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage direct connect connection
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/direct_connect"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := direct_connect.NewConnection(ctx, "foo", &direct_connect.ConnectionArgs{
//				Bandwidth:                   pulumi.Int(1000),
//				CustomerContactEmail:        pulumi.String("email@aaa.com"),
//				CustomerContactPhone:        pulumi.String("12345678911"),
//				CustomerName:                pulumi.String("tf-a"),
//				Description:                 pulumi.String("tf-test"),
//				DirectConnectAccessPointId:  pulumi.String("ap-cn-beijing-a"),
//				DirectConnectConnectionName: pulumi.String("tf-test-connection"),
//				LineOperator:                pulumi.String("ChinaOther"),
//				PeerLocation:                pulumi.String("XX路XX号XX楼XX机房"),
//				PortSpec:                    pulumi.String("10G"),
//				PortType:                    pulumi.String("10GBase"),
//				Tags: direct_connect.ConnectionTagArray{
//					&direct_connect.ConnectionTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// DirectConnectConnection can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:direct_connect/connection:Connection default dcc-7qthudw0ll6jmc****
// ```
type Connection struct {
	pulumi.CustomResourceState

	// The line band width,unit:Mbps.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// The dedicated line contact email.
	CustomerContactEmail pulumi.StringOutput `pulumi:"customerContactEmail"`
	// The dedicated line contact phone.
	CustomerContactPhone pulumi.StringOutput `pulumi:"customerContactPhone"`
	// The dedicated line contact name.
	CustomerName pulumi.StringOutput `pulumi:"customerName"`
	// The description of direct connect.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The direct connect access point id.
	DirectConnectAccessPointId pulumi.StringOutput `pulumi:"directConnectAccessPointId"`
	// The name of direct connect.
	DirectConnectConnectionName pulumi.StringOutput `pulumi:"directConnectConnectionName"`
	// The physical leased line operator.valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
	LineOperator pulumi.StringOutput `pulumi:"lineOperator"`
	// The local IDC address.
	PeerLocation pulumi.StringOutput `pulumi:"peerLocation"`
	// The physical leased line port spec.valid value contains `1G`,`10G`.
	PortSpec pulumi.StringOutput `pulumi:"portSpec"`
	// The physical leased line port type and spec.valid value contains `1000Base-T`,`10GBase-T`,`1000Base`,`10GBase`,`40GBase`,`100GBase`.
	PortType pulumi.StringOutput `pulumi:"portType"`
	// The physical leased line tags.
	Tags ConnectionTagArrayOutput `pulumi:"tags"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	if args.CustomerContactEmail == nil {
		return nil, errors.New("invalid value for required argument 'CustomerContactEmail'")
	}
	if args.CustomerContactPhone == nil {
		return nil, errors.New("invalid value for required argument 'CustomerContactPhone'")
	}
	if args.CustomerName == nil {
		return nil, errors.New("invalid value for required argument 'CustomerName'")
	}
	if args.DirectConnectAccessPointId == nil {
		return nil, errors.New("invalid value for required argument 'DirectConnectAccessPointId'")
	}
	if args.LineOperator == nil {
		return nil, errors.New("invalid value for required argument 'LineOperator'")
	}
	if args.PeerLocation == nil {
		return nil, errors.New("invalid value for required argument 'PeerLocation'")
	}
	if args.PortSpec == nil {
		return nil, errors.New("invalid value for required argument 'PortSpec'")
	}
	if args.PortType == nil {
		return nil, errors.New("invalid value for required argument 'PortType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("volcengine:direct_connect/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("volcengine:direct_connect/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// The line band width,unit:Mbps.
	Bandwidth *int `pulumi:"bandwidth"`
	// The dedicated line contact email.
	CustomerContactEmail *string `pulumi:"customerContactEmail"`
	// The dedicated line contact phone.
	CustomerContactPhone *string `pulumi:"customerContactPhone"`
	// The dedicated line contact name.
	CustomerName *string `pulumi:"customerName"`
	// The description of direct connect.
	Description *string `pulumi:"description"`
	// The direct connect access point id.
	DirectConnectAccessPointId *string `pulumi:"directConnectAccessPointId"`
	// The name of direct connect.
	DirectConnectConnectionName *string `pulumi:"directConnectConnectionName"`
	// The physical leased line operator.valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
	LineOperator *string `pulumi:"lineOperator"`
	// The local IDC address.
	PeerLocation *string `pulumi:"peerLocation"`
	// The physical leased line port spec.valid value contains `1G`,`10G`.
	PortSpec *string `pulumi:"portSpec"`
	// The physical leased line port type and spec.valid value contains `1000Base-T`,`10GBase-T`,`1000Base`,`10GBase`,`40GBase`,`100GBase`.
	PortType *string `pulumi:"portType"`
	// The physical leased line tags.
	Tags []ConnectionTag `pulumi:"tags"`
}

type ConnectionState struct {
	// The line band width,unit:Mbps.
	Bandwidth pulumi.IntPtrInput
	// The dedicated line contact email.
	CustomerContactEmail pulumi.StringPtrInput
	// The dedicated line contact phone.
	CustomerContactPhone pulumi.StringPtrInput
	// The dedicated line contact name.
	CustomerName pulumi.StringPtrInput
	// The description of direct connect.
	Description pulumi.StringPtrInput
	// The direct connect access point id.
	DirectConnectAccessPointId pulumi.StringPtrInput
	// The name of direct connect.
	DirectConnectConnectionName pulumi.StringPtrInput
	// The physical leased line operator.valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
	LineOperator pulumi.StringPtrInput
	// The local IDC address.
	PeerLocation pulumi.StringPtrInput
	// The physical leased line port spec.valid value contains `1G`,`10G`.
	PortSpec pulumi.StringPtrInput
	// The physical leased line port type and spec.valid value contains `1000Base-T`,`10GBase-T`,`1000Base`,`10GBase`,`40GBase`,`100GBase`.
	PortType pulumi.StringPtrInput
	// The physical leased line tags.
	Tags ConnectionTagArrayInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// The line band width,unit:Mbps.
	Bandwidth int `pulumi:"bandwidth"`
	// The dedicated line contact email.
	CustomerContactEmail string `pulumi:"customerContactEmail"`
	// The dedicated line contact phone.
	CustomerContactPhone string `pulumi:"customerContactPhone"`
	// The dedicated line contact name.
	CustomerName string `pulumi:"customerName"`
	// The description of direct connect.
	Description *string `pulumi:"description"`
	// The direct connect access point id.
	DirectConnectAccessPointId string `pulumi:"directConnectAccessPointId"`
	// The name of direct connect.
	DirectConnectConnectionName *string `pulumi:"directConnectConnectionName"`
	// The physical leased line operator.valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
	LineOperator string `pulumi:"lineOperator"`
	// The local IDC address.
	PeerLocation string `pulumi:"peerLocation"`
	// The physical leased line port spec.valid value contains `1G`,`10G`.
	PortSpec string `pulumi:"portSpec"`
	// The physical leased line port type and spec.valid value contains `1000Base-T`,`10GBase-T`,`1000Base`,`10GBase`,`40GBase`,`100GBase`.
	PortType string `pulumi:"portType"`
	// The physical leased line tags.
	Tags []ConnectionTag `pulumi:"tags"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// The line band width,unit:Mbps.
	Bandwidth pulumi.IntInput
	// The dedicated line contact email.
	CustomerContactEmail pulumi.StringInput
	// The dedicated line contact phone.
	CustomerContactPhone pulumi.StringInput
	// The dedicated line contact name.
	CustomerName pulumi.StringInput
	// The description of direct connect.
	Description pulumi.StringPtrInput
	// The direct connect access point id.
	DirectConnectAccessPointId pulumi.StringInput
	// The name of direct connect.
	DirectConnectConnectionName pulumi.StringPtrInput
	// The physical leased line operator.valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
	LineOperator pulumi.StringInput
	// The local IDC address.
	PeerLocation pulumi.StringInput
	// The physical leased line port spec.valid value contains `1G`,`10G`.
	PortSpec pulumi.StringInput
	// The physical leased line port type and spec.valid value contains `1000Base-T`,`10GBase-T`,`1000Base`,`10GBase`,`40GBase`,`100GBase`.
	PortType pulumi.StringInput
	// The physical leased line tags.
	Tags ConnectionTagArrayInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// The line band width,unit:Mbps.
func (o ConnectionOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *Connection) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// The dedicated line contact email.
func (o ConnectionOutput) CustomerContactEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CustomerContactEmail }).(pulumi.StringOutput)
}

// The dedicated line contact phone.
func (o ConnectionOutput) CustomerContactPhone() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CustomerContactPhone }).(pulumi.StringOutput)
}

// The dedicated line contact name.
func (o ConnectionOutput) CustomerName() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CustomerName }).(pulumi.StringOutput)
}

// The description of direct connect.
func (o ConnectionOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The direct connect access point id.
func (o ConnectionOutput) DirectConnectAccessPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.DirectConnectAccessPointId }).(pulumi.StringOutput)
}

// The name of direct connect.
func (o ConnectionOutput) DirectConnectConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.DirectConnectConnectionName }).(pulumi.StringOutput)
}

// The physical leased line operator.valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
func (o ConnectionOutput) LineOperator() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.LineOperator }).(pulumi.StringOutput)
}

// The local IDC address.
func (o ConnectionOutput) PeerLocation() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.PeerLocation }).(pulumi.StringOutput)
}

// The physical leased line port spec.valid value contains `1G`,`10G`.
func (o ConnectionOutput) PortSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.PortSpec }).(pulumi.StringOutput)
}

// The physical leased line port type and spec.valid value contains `1000Base-T`,`10GBase-T`,`1000Base`,`10GBase`,`40GBase`,`100GBase`.
func (o ConnectionOutput) PortType() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.PortType }).(pulumi.StringOutput)
}

// The physical leased line tags.
func (o ConnectionOutput) Tags() ConnectionTagArrayOutput {
	return o.ApplyT(func(v *Connection) ConnectionTagArrayOutput { return v.Tags }).(ConnectionTagArrayOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
