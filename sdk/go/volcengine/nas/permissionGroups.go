// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of nas permission groups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := nas.NewPermissionGroup(ctx, "foo", &nas.PermissionGroupArgs{
//				PermissionGroupName: pulumi.String("acc-test"),
//				Description:         pulumi.String("acctest"),
//				PermissionRules: nas.PermissionGroupPermissionRuleArray{
//					&nas.PermissionGroupPermissionRuleArgs{
//						CidrIp:  pulumi.String("*"),
//						RwMode:  pulumi.String("RW"),
//						UseMode: pulumi.String("All_squash"),
//					},
//					&nas.PermissionGroupPermissionRuleArgs{
//						CidrIp:  pulumi.String("192.168.0.0"),
//						RwMode:  pulumi.String("RO"),
//						UseMode: pulumi.String("All_squash"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = nas.GetPermissionGroupsOutput(ctx, nas.GetPermissionGroupsOutputArgs{
//				Filters: nas.GetPermissionGroupsFilterArray{
//					&nas.GetPermissionGroupsFilterArgs{
//						Key:   pulumi.String("PermissionGroupId"),
//						Value: foo.ID(),
//					},
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.nas.PermissionGroups has been deprecated in favor of volcengine.nas.getPermissionGroups
func PermissionGroups(ctx *pulumi.Context, args *PermissionGroupsArgs, opts ...pulumi.InvokeOption) (*PermissionGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv PermissionGroupsResult
	err := ctx.Invoke("volcengine:nas/permissionGroups:PermissionGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking PermissionGroups.
type PermissionGroupsArgs struct {
	// Filter permission groups for specified characteristics.
	Filters []PermissionGroupsFilter `pulumi:"filters"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by PermissionGroups.
type PermissionGroupsResult struct {
	Filters []PermissionGroupsFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The list of permissions groups.
	PermissionGroups []PermissionGroupsPermissionGroup `pulumi:"permissionGroups"`
	// The total count of nas permission groups query.
	TotalCount int `pulumi:"totalCount"`
}

func PermissionGroupsOutput(ctx *pulumi.Context, args PermissionGroupsOutputArgs, opts ...pulumi.InvokeOption) PermissionGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (PermissionGroupsResult, error) {
			args := v.(PermissionGroupsArgs)
			r, err := PermissionGroups(ctx, &args, opts...)
			var s PermissionGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(PermissionGroupsResultOutput)
}

// A collection of arguments for invoking PermissionGroups.
type PermissionGroupsOutputArgs struct {
	// Filter permission groups for specified characteristics.
	Filters PermissionGroupsFilterArrayInput `pulumi:"filters"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (PermissionGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionGroupsArgs)(nil)).Elem()
}

// A collection of values returned by PermissionGroups.
type PermissionGroupsResultOutput struct{ *pulumi.OutputState }

func (PermissionGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PermissionGroupsResult)(nil)).Elem()
}

func (o PermissionGroupsResultOutput) ToPermissionGroupsResultOutput() PermissionGroupsResultOutput {
	return o
}

func (o PermissionGroupsResultOutput) ToPermissionGroupsResultOutputWithContext(ctx context.Context) PermissionGroupsResultOutput {
	return o
}

func (o PermissionGroupsResultOutput) Filters() PermissionGroupsFilterArrayOutput {
	return o.ApplyT(func(v PermissionGroupsResult) []PermissionGroupsFilter { return v.Filters }).(PermissionGroupsFilterArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o PermissionGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PermissionGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o PermissionGroupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PermissionGroupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The list of permissions groups.
func (o PermissionGroupsResultOutput) PermissionGroups() PermissionGroupsPermissionGroupArrayOutput {
	return o.ApplyT(func(v PermissionGroupsResult) []PermissionGroupsPermissionGroup { return v.PermissionGroups }).(PermissionGroupsPermissionGroupArrayOutput)
}

// The total count of nas permission groups query.
func (o PermissionGroupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v PermissionGroupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(PermissionGroupsResultOutput{})
}
