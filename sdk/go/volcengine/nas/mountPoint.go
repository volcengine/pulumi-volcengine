// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage nas mount point
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nas"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := nas.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-project1"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-subnet-test-2"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooPermissionGroup, err := nas.NewPermissionGroup(ctx, "fooPermissionGroup", &nas.PermissionGroupArgs{
//				PermissionGroupName: pulumi.String("acc-test"),
//				Description:         pulumi.String("acctest"),
//				PermissionRules: nas.PermissionGroupPermissionRuleArray{
//					&nas.PermissionGroupPermissionRuleArgs{
//						CidrIp:  pulumi.String("*"),
//						RwMode:  pulumi.String("RW"),
//						UseMode: pulumi.String("All_squash"),
//					},
//					&nas.PermissionGroupPermissionRuleArgs{
//						CidrIp:  pulumi.String("192.168.0.0"),
//						RwMode:  pulumi.String("RO"),
//						UseMode: pulumi.String("All_squash"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooFileSystem, err := nas.NewFileSystem(ctx, "fooFileSystem", &nas.FileSystemArgs{
//				FileSystemName: pulumi.String("acc-test-fs"),
//				Description:    pulumi.String("acc-test"),
//				ZoneId:         pulumi.String(fooZones.Zones[0].Id),
//				Capacity:       pulumi.Int(103),
//				ProjectName:    pulumi.String("default"),
//				Tags: nas.FileSystemTagArray{
//					&nas.FileSystemTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = nas.NewMountPoint(ctx, "fooMountPoint", &nas.MountPointArgs{
//				FileSystemId:      fooFileSystem.ID(),
//				MountPointName:    pulumi.String("acc-test"),
//				PermissionGroupId: fooPermissionGroup.ID(),
//				SubnetId:          fooSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Nas Mount Point can be imported using the file system id and mount point id, e.g.
//
// ```sh
// $ pulumi import volcengine:nas/mountPoint:MountPoint default enas-cnbj18bcb923****:mount-a6ee****
// ```
type MountPoint struct {
	pulumi.CustomResourceState

	// The file system id.
	FileSystemId pulumi.StringOutput `pulumi:"fileSystemId"`
	// The mount point id.
	MountPointId pulumi.StringOutput `pulumi:"mountPointId"`
	// The mount point name.
	MountPointName pulumi.StringOutput `pulumi:"mountPointName"`
	// The permission group id.
	PermissionGroupId pulumi.StringOutput `pulumi:"permissionGroupId"`
	// The subnet id.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewMountPoint registers a new resource with the given unique name, arguments, and options.
func NewMountPoint(ctx *pulumi.Context,
	name string, args *MountPointArgs, opts ...pulumi.ResourceOption) (*MountPoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FileSystemId == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemId'")
	}
	if args.MountPointName == nil {
		return nil, errors.New("invalid value for required argument 'MountPointName'")
	}
	if args.PermissionGroupId == nil {
		return nil, errors.New("invalid value for required argument 'PermissionGroupId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MountPoint
	err := ctx.RegisterResource("volcengine:nas/mountPoint:MountPoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMountPoint gets an existing MountPoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMountPoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MountPointState, opts ...pulumi.ResourceOption) (*MountPoint, error) {
	var resource MountPoint
	err := ctx.ReadResource("volcengine:nas/mountPoint:MountPoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MountPoint resources.
type mountPointState struct {
	// The file system id.
	FileSystemId *string `pulumi:"fileSystemId"`
	// The mount point id.
	MountPointId *string `pulumi:"mountPointId"`
	// The mount point name.
	MountPointName *string `pulumi:"mountPointName"`
	// The permission group id.
	PermissionGroupId *string `pulumi:"permissionGroupId"`
	// The subnet id.
	SubnetId *string `pulumi:"subnetId"`
}

type MountPointState struct {
	// The file system id.
	FileSystemId pulumi.StringPtrInput
	// The mount point id.
	MountPointId pulumi.StringPtrInput
	// The mount point name.
	MountPointName pulumi.StringPtrInput
	// The permission group id.
	PermissionGroupId pulumi.StringPtrInput
	// The subnet id.
	SubnetId pulumi.StringPtrInput
}

func (MountPointState) ElementType() reflect.Type {
	return reflect.TypeOf((*mountPointState)(nil)).Elem()
}

type mountPointArgs struct {
	// The file system id.
	FileSystemId string `pulumi:"fileSystemId"`
	// The mount point name.
	MountPointName string `pulumi:"mountPointName"`
	// The permission group id.
	PermissionGroupId string `pulumi:"permissionGroupId"`
	// The subnet id.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a MountPoint resource.
type MountPointArgs struct {
	// The file system id.
	FileSystemId pulumi.StringInput
	// The mount point name.
	MountPointName pulumi.StringInput
	// The permission group id.
	PermissionGroupId pulumi.StringInput
	// The subnet id.
	SubnetId pulumi.StringInput
}

func (MountPointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mountPointArgs)(nil)).Elem()
}

type MountPointInput interface {
	pulumi.Input

	ToMountPointOutput() MountPointOutput
	ToMountPointOutputWithContext(ctx context.Context) MountPointOutput
}

func (*MountPoint) ElementType() reflect.Type {
	return reflect.TypeOf((**MountPoint)(nil)).Elem()
}

func (i *MountPoint) ToMountPointOutput() MountPointOutput {
	return i.ToMountPointOutputWithContext(context.Background())
}

func (i *MountPoint) ToMountPointOutputWithContext(ctx context.Context) MountPointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountPointOutput)
}

// MountPointArrayInput is an input type that accepts MountPointArray and MountPointArrayOutput values.
// You can construct a concrete instance of `MountPointArrayInput` via:
//
//	MountPointArray{ MountPointArgs{...} }
type MountPointArrayInput interface {
	pulumi.Input

	ToMountPointArrayOutput() MountPointArrayOutput
	ToMountPointArrayOutputWithContext(context.Context) MountPointArrayOutput
}

type MountPointArray []MountPointInput

func (MountPointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MountPoint)(nil)).Elem()
}

func (i MountPointArray) ToMountPointArrayOutput() MountPointArrayOutput {
	return i.ToMountPointArrayOutputWithContext(context.Background())
}

func (i MountPointArray) ToMountPointArrayOutputWithContext(ctx context.Context) MountPointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountPointArrayOutput)
}

// MountPointMapInput is an input type that accepts MountPointMap and MountPointMapOutput values.
// You can construct a concrete instance of `MountPointMapInput` via:
//
//	MountPointMap{ "key": MountPointArgs{...} }
type MountPointMapInput interface {
	pulumi.Input

	ToMountPointMapOutput() MountPointMapOutput
	ToMountPointMapOutputWithContext(context.Context) MountPointMapOutput
}

type MountPointMap map[string]MountPointInput

func (MountPointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MountPoint)(nil)).Elem()
}

func (i MountPointMap) ToMountPointMapOutput() MountPointMapOutput {
	return i.ToMountPointMapOutputWithContext(context.Background())
}

func (i MountPointMap) ToMountPointMapOutputWithContext(ctx context.Context) MountPointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MountPointMapOutput)
}

type MountPointOutput struct{ *pulumi.OutputState }

func (MountPointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MountPoint)(nil)).Elem()
}

func (o MountPointOutput) ToMountPointOutput() MountPointOutput {
	return o
}

func (o MountPointOutput) ToMountPointOutputWithContext(ctx context.Context) MountPointOutput {
	return o
}

// The file system id.
func (o MountPointOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountPoint) pulumi.StringOutput { return v.FileSystemId }).(pulumi.StringOutput)
}

// The mount point id.
func (o MountPointOutput) MountPointId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountPoint) pulumi.StringOutput { return v.MountPointId }).(pulumi.StringOutput)
}

// The mount point name.
func (o MountPointOutput) MountPointName() pulumi.StringOutput {
	return o.ApplyT(func(v *MountPoint) pulumi.StringOutput { return v.MountPointName }).(pulumi.StringOutput)
}

// The permission group id.
func (o MountPointOutput) PermissionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountPoint) pulumi.StringOutput { return v.PermissionGroupId }).(pulumi.StringOutput)
}

// The subnet id.
func (o MountPointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *MountPoint) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

type MountPointArrayOutput struct{ *pulumi.OutputState }

func (MountPointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MountPoint)(nil)).Elem()
}

func (o MountPointArrayOutput) ToMountPointArrayOutput() MountPointArrayOutput {
	return o
}

func (o MountPointArrayOutput) ToMountPointArrayOutputWithContext(ctx context.Context) MountPointArrayOutput {
	return o
}

func (o MountPointArrayOutput) Index(i pulumi.IntInput) MountPointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MountPoint {
		return vs[0].([]*MountPoint)[vs[1].(int)]
	}).(MountPointOutput)
}

type MountPointMapOutput struct{ *pulumi.OutputState }

func (MountPointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MountPoint)(nil)).Elem()
}

func (o MountPointMapOutput) ToMountPointMapOutput() MountPointMapOutput {
	return o
}

func (o MountPointMapOutput) ToMountPointMapOutputWithContext(ctx context.Context) MountPointMapOutput {
	return o
}

func (o MountPointMapOutput) MapIndex(k pulumi.StringInput) MountPointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MountPoint {
		return vs[0].(map[string]*MountPoint)[vs[1].(string)]
	}).(MountPointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MountPointInput)(nil)).Elem(), &MountPoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountPointArrayInput)(nil)).Elem(), MountPointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MountPointMapInput)(nil)).Elem(), MountPointMap{})
	pulumi.RegisterOutputType(MountPointOutput{})
	pulumi.RegisterOutputType(MountPointArrayOutput{})
	pulumi.RegisterOutputType(MountPointMapOutput{})
}
