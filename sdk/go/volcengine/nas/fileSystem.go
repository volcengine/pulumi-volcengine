// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage nas file system
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := nas.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = nas.NewFileSystem(ctx, "fooFileSystem", &nas.FileSystemArgs{
//				FileSystemName: pulumi.String("acc-test-fs"),
//				Description:    pulumi.String("acc-test"),
//				ZoneId:         pulumi.String(fooZones.Zones[0].Id),
//				Capacity:       pulumi.Int(103),
//				ProjectName:    pulumi.String("default"),
//				Tags: nas.FileSystemTagArray{
//					&nas.FileSystemTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NasFileSystem can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:nas/fileSystem:FileSystem default enas-cnbjd3879745****
// ```
type FileSystem struct {
	pulumi.CustomResourceState

	// The capacity of the nas file system. Unit: GiB.
	Capacity pulumi.IntOutput `pulumi:"capacity"`
	// The charge type of the nas file system.
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// The create time of the nas file system.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the nas file system.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the nas file system.
	FileSystemName pulumi.StringOutput `pulumi:"fileSystemName"`
	// The type of the nas file system.
	FileSystemType pulumi.StringOutput `pulumi:"fileSystemType"`
	// The project name of the nas file system.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The protocol type of the nas file system.
	ProtocolType pulumi.StringOutput `pulumi:"protocolType"`
	// The region id of the nas file system.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The snapshot count of the nas file system.
	SnapshotCount pulumi.IntOutput `pulumi:"snapshotCount"`
	// The snapshot id when creating the nas file system. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	SnapshotId pulumi.StringPtrOutput `pulumi:"snapshotId"`
	// The status of the nas file system.
	Status pulumi.StringOutput `pulumi:"status"`
	// The storage type of the nas file system.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// Tags.
	Tags FileSystemTagArrayOutput `pulumi:"tags"`
	// The update time of the nas file system.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The version of the nas file system.
	Version pulumi.StringOutput `pulumi:"version"`
	// The zone id of the nas file system.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
	// The zone name of the nas file system.
	ZoneName pulumi.StringOutput `pulumi:"zoneName"`
}

// NewFileSystem registers a new resource with the given unique name, arguments, and options.
func NewFileSystem(ctx *pulumi.Context,
	name string, args *FileSystemArgs, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Capacity == nil {
		return nil, errors.New("invalid value for required argument 'Capacity'")
	}
	if args.FileSystemName == nil {
		return nil, errors.New("invalid value for required argument 'FileSystemName'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FileSystem
	err := ctx.RegisterResource("volcengine:nas/fileSystem:FileSystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFileSystem gets an existing FileSystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFileSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FileSystemState, opts ...pulumi.ResourceOption) (*FileSystem, error) {
	var resource FileSystem
	err := ctx.ReadResource("volcengine:nas/fileSystem:FileSystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FileSystem resources.
type fileSystemState struct {
	// The capacity of the nas file system. Unit: GiB.
	Capacity *int `pulumi:"capacity"`
	// The charge type of the nas file system.
	ChargeType *string `pulumi:"chargeType"`
	// The create time of the nas file system.
	CreateTime *string `pulumi:"createTime"`
	// The description of the nas file system.
	Description *string `pulumi:"description"`
	// The name of the nas file system.
	FileSystemName *string `pulumi:"fileSystemName"`
	// The type of the nas file system.
	FileSystemType *string `pulumi:"fileSystemType"`
	// The project name of the nas file system.
	ProjectName *string `pulumi:"projectName"`
	// The protocol type of the nas file system.
	ProtocolType *string `pulumi:"protocolType"`
	// The region id of the nas file system.
	RegionId *string `pulumi:"regionId"`
	// The snapshot count of the nas file system.
	SnapshotCount *int `pulumi:"snapshotCount"`
	// The snapshot id when creating the nas file system. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	SnapshotId *string `pulumi:"snapshotId"`
	// The status of the nas file system.
	Status *string `pulumi:"status"`
	// The storage type of the nas file system.
	StorageType *string `pulumi:"storageType"`
	// Tags.
	Tags []FileSystemTag `pulumi:"tags"`
	// The update time of the nas file system.
	UpdateTime *string `pulumi:"updateTime"`
	// The version of the nas file system.
	Version *string `pulumi:"version"`
	// The zone id of the nas file system.
	ZoneId *string `pulumi:"zoneId"`
	// The zone name of the nas file system.
	ZoneName *string `pulumi:"zoneName"`
}

type FileSystemState struct {
	// The capacity of the nas file system. Unit: GiB.
	Capacity pulumi.IntPtrInput
	// The charge type of the nas file system.
	ChargeType pulumi.StringPtrInput
	// The create time of the nas file system.
	CreateTime pulumi.StringPtrInput
	// The description of the nas file system.
	Description pulumi.StringPtrInput
	// The name of the nas file system.
	FileSystemName pulumi.StringPtrInput
	// The type of the nas file system.
	FileSystemType pulumi.StringPtrInput
	// The project name of the nas file system.
	ProjectName pulumi.StringPtrInput
	// The protocol type of the nas file system.
	ProtocolType pulumi.StringPtrInput
	// The region id of the nas file system.
	RegionId pulumi.StringPtrInput
	// The snapshot count of the nas file system.
	SnapshotCount pulumi.IntPtrInput
	// The snapshot id when creating the nas file system. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	SnapshotId pulumi.StringPtrInput
	// The status of the nas file system.
	Status pulumi.StringPtrInput
	// The storage type of the nas file system.
	StorageType pulumi.StringPtrInput
	// Tags.
	Tags FileSystemTagArrayInput
	// The update time of the nas file system.
	UpdateTime pulumi.StringPtrInput
	// The version of the nas file system.
	Version pulumi.StringPtrInput
	// The zone id of the nas file system.
	ZoneId pulumi.StringPtrInput
	// The zone name of the nas file system.
	ZoneName pulumi.StringPtrInput
}

func (FileSystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemState)(nil)).Elem()
}

type fileSystemArgs struct {
	// The capacity of the nas file system. Unit: GiB.
	Capacity int `pulumi:"capacity"`
	// The description of the nas file system.
	Description *string `pulumi:"description"`
	// The name of the nas file system.
	FileSystemName string `pulumi:"fileSystemName"`
	// The project name of the nas file system.
	ProjectName *string `pulumi:"projectName"`
	// The snapshot id when creating the nas file system. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	SnapshotId *string `pulumi:"snapshotId"`
	// Tags.
	Tags []FileSystemTag `pulumi:"tags"`
	// The zone id of the nas file system.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a FileSystem resource.
type FileSystemArgs struct {
	// The capacity of the nas file system. Unit: GiB.
	Capacity pulumi.IntInput
	// The description of the nas file system.
	Description pulumi.StringPtrInput
	// The name of the nas file system.
	FileSystemName pulumi.StringInput
	// The project name of the nas file system.
	ProjectName pulumi.StringPtrInput
	// The snapshot id when creating the nas file system. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	SnapshotId pulumi.StringPtrInput
	// Tags.
	Tags FileSystemTagArrayInput
	// The zone id of the nas file system.
	ZoneId pulumi.StringInput
}

func (FileSystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*fileSystemArgs)(nil)).Elem()
}

type FileSystemInput interface {
	pulumi.Input

	ToFileSystemOutput() FileSystemOutput
	ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput
}

func (*FileSystem) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (i *FileSystem) ToFileSystemOutput() FileSystemOutput {
	return i.ToFileSystemOutputWithContext(context.Background())
}

func (i *FileSystem) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemOutput)
}

// FileSystemArrayInput is an input type that accepts FileSystemArray and FileSystemArrayOutput values.
// You can construct a concrete instance of `FileSystemArrayInput` via:
//
//	FileSystemArray{ FileSystemArgs{...} }
type FileSystemArrayInput interface {
	pulumi.Input

	ToFileSystemArrayOutput() FileSystemArrayOutput
	ToFileSystemArrayOutputWithContext(context.Context) FileSystemArrayOutput
}

type FileSystemArray []FileSystemInput

func (FileSystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (i FileSystemArray) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return i.ToFileSystemArrayOutputWithContext(context.Background())
}

func (i FileSystemArray) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemArrayOutput)
}

// FileSystemMapInput is an input type that accepts FileSystemMap and FileSystemMapOutput values.
// You can construct a concrete instance of `FileSystemMapInput` via:
//
//	FileSystemMap{ "key": FileSystemArgs{...} }
type FileSystemMapInput interface {
	pulumi.Input

	ToFileSystemMapOutput() FileSystemMapOutput
	ToFileSystemMapOutputWithContext(context.Context) FileSystemMapOutput
}

type FileSystemMap map[string]FileSystemInput

func (FileSystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (i FileSystemMap) ToFileSystemMapOutput() FileSystemMapOutput {
	return i.ToFileSystemMapOutputWithContext(context.Background())
}

func (i FileSystemMap) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FileSystemMapOutput)
}

type FileSystemOutput struct{ *pulumi.OutputState }

func (FileSystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FileSystem)(nil)).Elem()
}

func (o FileSystemOutput) ToFileSystemOutput() FileSystemOutput {
	return o
}

func (o FileSystemOutput) ToFileSystemOutputWithContext(ctx context.Context) FileSystemOutput {
	return o
}

// The capacity of the nas file system. Unit: GiB.
func (o FileSystemOutput) Capacity() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.Capacity }).(pulumi.IntOutput)
}

// The charge type of the nas file system.
func (o FileSystemOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ChargeType }).(pulumi.StringOutput)
}

// The create time of the nas file system.
func (o FileSystemOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the nas file system.
func (o FileSystemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the nas file system.
func (o FileSystemOutput) FileSystemName() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.FileSystemName }).(pulumi.StringOutput)
}

// The type of the nas file system.
func (o FileSystemOutput) FileSystemType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.FileSystemType }).(pulumi.StringOutput)
}

// The project name of the nas file system.
func (o FileSystemOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The protocol type of the nas file system.
func (o FileSystemOutput) ProtocolType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ProtocolType }).(pulumi.StringOutput)
}

// The region id of the nas file system.
func (o FileSystemOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The snapshot count of the nas file system.
func (o FileSystemOutput) SnapshotCount() pulumi.IntOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.IntOutput { return v.SnapshotCount }).(pulumi.IntOutput)
}

// The snapshot id when creating the nas file system. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o FileSystemOutput) SnapshotId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringPtrOutput { return v.SnapshotId }).(pulumi.StringPtrOutput)
}

// The status of the nas file system.
func (o FileSystemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The storage type of the nas file system.
func (o FileSystemOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// Tags.
func (o FileSystemOutput) Tags() FileSystemTagArrayOutput {
	return o.ApplyT(func(v *FileSystem) FileSystemTagArrayOutput { return v.Tags }).(FileSystemTagArrayOutput)
}

// The update time of the nas file system.
func (o FileSystemOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The version of the nas file system.
func (o FileSystemOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The zone id of the nas file system.
func (o FileSystemOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

// The zone name of the nas file system.
func (o FileSystemOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v *FileSystem) pulumi.StringOutput { return v.ZoneName }).(pulumi.StringOutput)
}

type FileSystemArrayOutput struct{ *pulumi.OutputState }

func (FileSystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FileSystem)(nil)).Elem()
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutput() FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) ToFileSystemArrayOutputWithContext(ctx context.Context) FileSystemArrayOutput {
	return o
}

func (o FileSystemArrayOutput) Index(i pulumi.IntInput) FileSystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].([]*FileSystem)[vs[1].(int)]
	}).(FileSystemOutput)
}

type FileSystemMapOutput struct{ *pulumi.OutputState }

func (FileSystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FileSystem)(nil)).Elem()
}

func (o FileSystemMapOutput) ToFileSystemMapOutput() FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) ToFileSystemMapOutputWithContext(ctx context.Context) FileSystemMapOutput {
	return o
}

func (o FileSystemMapOutput) MapIndex(k pulumi.StringInput) FileSystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FileSystem {
		return vs[0].(map[string]*FileSystem)[vs[1].(string)]
	}).(FileSystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemInput)(nil)).Elem(), &FileSystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemArrayInput)(nil)).Elem(), FileSystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FileSystemMapInput)(nil)).Elem(), FileSystemMap{})
	pulumi.RegisterOutputType(FileSystemOutput{})
	pulumi.RegisterOutputType(FileSystemArrayOutput{})
	pulumi.RegisterOutputType(FileSystemMapOutput{})
}
