// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of nas file systems
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nas"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := nas.Zones(ctx, nil, nil);
// if err != nil {
// return err
// }
// var fooFileSystem []*nas.FileSystem
//
//	for index := 0; index < 3; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := nas.NewFileSystem(ctx, fmt.Sprintf("fooFileSystem-%v", key0), &nas.FileSystemArgs{
// FileSystemName: pulumi.String(fmt.Sprintf("acc-test-fs-%v", val0)),
// Description: pulumi.String("acc-test"),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// Capacity: pulumi.Int(103),
// ProjectName: pulumi.String("default"),
// Tags: nas.FileSystemTagArray{
// &nas.FileSystemTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooFileSystem = append(fooFileSystem, __res)
// }
// _ = nas.FileSystemsOutput(ctx, nas.FileSystemsOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:nas-fileSystems:FileSystems.pp:18,9-28),
// }, nil);
// return nil
// })
// }
// ```
func FileSystems(ctx *pulumi.Context, args *FileSystemsArgs, opts ...pulumi.InvokeOption) (*FileSystemsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv FileSystemsResult
	err := ctx.Invoke("volcengine:nas/fileSystems:FileSystems", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking FileSystems.
type FileSystemsArgs struct {
	// The charge type of nas file system.
	ChargeType *string `pulumi:"chargeType"`
	// The name of nas file system. This field supports fuzzy queries.
	FileSystemName *string `pulumi:"fileSystemName"`
	// A list of nas file system ids.
	Ids []string `pulumi:"ids"`
	// The mount point id of nas file system.
	MountPointId *string `pulumi:"mountPointId"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The permission group id of nas file system.
	PermissionGroupId *string `pulumi:"permissionGroupId"`
	// The project name of nas file system.
	ProjectName *string `pulumi:"projectName"`
	// The protocol type of nas file system.
	ProtocolType *string `pulumi:"protocolType"`
	// The status of nas file system.
	Statuses []string `pulumi:"statuses"`
	// The storage type of nas file system.
	StorageType *string `pulumi:"storageType"`
	// Tags.
	Tags []FileSystemsTag `pulumi:"tags"`
	// The zone id of nas file system.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by FileSystems.
type FileSystemsResult struct {
	// The charge type of the nas file system.
	ChargeType *string `pulumi:"chargeType"`
	// The name of the nas file system.
	FileSystemName *string `pulumi:"fileSystemName"`
	// The collection of query.
	FileSystems []FileSystemsFileSystem `pulumi:"fileSystems"`
	// The provider-assigned unique ID for this managed resource.
	Id                string   `pulumi:"id"`
	Ids               []string `pulumi:"ids"`
	MountPointId      *string  `pulumi:"mountPointId"`
	NameRegex         *string  `pulumi:"nameRegex"`
	OutputFile        *string  `pulumi:"outputFile"`
	PermissionGroupId *string  `pulumi:"permissionGroupId"`
	// The project name of the nas file system.
	ProjectName *string `pulumi:"projectName"`
	// The protocol type of the nas file system.
	ProtocolType *string `pulumi:"protocolType"`
	// The status of the nas file system.
	Statuses []string `pulumi:"statuses"`
	// The storage type of the nas file system.
	StorageType *string `pulumi:"storageType"`
	// Tags of the nas file system.
	Tags []FileSystemsTag `pulumi:"tags"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The zone id of the nas file system.
	ZoneId *string `pulumi:"zoneId"`
}

func FileSystemsOutput(ctx *pulumi.Context, args FileSystemsOutputArgs, opts ...pulumi.InvokeOption) FileSystemsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (FileSystemsResult, error) {
			args := v.(FileSystemsArgs)
			r, err := FileSystems(ctx, &args, opts...)
			var s FileSystemsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(FileSystemsResultOutput)
}

// A collection of arguments for invoking FileSystems.
type FileSystemsOutputArgs struct {
	// The charge type of nas file system.
	ChargeType pulumi.StringPtrInput `pulumi:"chargeType"`
	// The name of nas file system. This field supports fuzzy queries.
	FileSystemName pulumi.StringPtrInput `pulumi:"fileSystemName"`
	// A list of nas file system ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The mount point id of nas file system.
	MountPointId pulumi.StringPtrInput `pulumi:"mountPointId"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The permission group id of nas file system.
	PermissionGroupId pulumi.StringPtrInput `pulumi:"permissionGroupId"`
	// The project name of nas file system.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// The protocol type of nas file system.
	ProtocolType pulumi.StringPtrInput `pulumi:"protocolType"`
	// The status of nas file system.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
	// The storage type of nas file system.
	StorageType pulumi.StringPtrInput `pulumi:"storageType"`
	// Tags.
	Tags FileSystemsTagArrayInput `pulumi:"tags"`
	// The zone id of nas file system.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (FileSystemsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemsArgs)(nil)).Elem()
}

// A collection of values returned by FileSystems.
type FileSystemsResultOutput struct{ *pulumi.OutputState }

func (FileSystemsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*FileSystemsResult)(nil)).Elem()
}

func (o FileSystemsResultOutput) ToFileSystemsResultOutput() FileSystemsResultOutput {
	return o
}

func (o FileSystemsResultOutput) ToFileSystemsResultOutputWithContext(ctx context.Context) FileSystemsResultOutput {
	return o
}

// The charge type of the nas file system.
func (o FileSystemsResultOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// The name of the nas file system.
func (o FileSystemsResultOutput) FileSystemName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.FileSystemName }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o FileSystemsResultOutput) FileSystems() FileSystemsFileSystemArrayOutput {
	return o.ApplyT(func(v FileSystemsResult) []FileSystemsFileSystem { return v.FileSystems }).(FileSystemsFileSystemArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o FileSystemsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v FileSystemsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o FileSystemsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileSystemsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o FileSystemsResultOutput) MountPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.MountPointId }).(pulumi.StringPtrOutput)
}

func (o FileSystemsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o FileSystemsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o FileSystemsResultOutput) PermissionGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.PermissionGroupId }).(pulumi.StringPtrOutput)
}

// The project name of the nas file system.
func (o FileSystemsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The protocol type of the nas file system.
func (o FileSystemsResultOutput) ProtocolType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.ProtocolType }).(pulumi.StringPtrOutput)
}

// The status of the nas file system.
func (o FileSystemsResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v FileSystemsResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// The storage type of the nas file system.
func (o FileSystemsResultOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

// Tags of the nas file system.
func (o FileSystemsResultOutput) Tags() FileSystemsTagArrayOutput {
	return o.ApplyT(func(v FileSystemsResult) []FileSystemsTag { return v.Tags }).(FileSystemsTagArrayOutput)
}

// The total count of query.
func (o FileSystemsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v FileSystemsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The zone id of the nas file system.
func (o FileSystemsResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v FileSystemsResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(FileSystemsResultOutput{})
}
