// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage nas permission group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nas.NewPermissionGroup(ctx, "foo", &nas.PermissionGroupArgs{
//				Description:         pulumi.String("acctest1"),
//				PermissionGroupName: pulumi.String("acc-test1"),
//				PermissionRules: nas.PermissionGroupPermissionRuleArray{
//					&nas.PermissionGroupPermissionRuleArgs{
//						CidrIp:  pulumi.String("*"),
//						RwMode:  pulumi.String("RW"),
//						UseMode: pulumi.String("All_squash"),
//					},
//					&nas.PermissionGroupPermissionRuleArgs{
//						CidrIp:  pulumi.String("192.168.0.0"),
//						RwMode:  pulumi.String("RO"),
//						UseMode: pulumi.String("No_all_squash"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Nas Permission Group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:nas/permissionGroup:PermissionGroup default pgroup-1f85db2c****
//
// ```
type PermissionGroup struct {
	pulumi.CustomResourceState

	// The description of the permission group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The id of the permission group.
	PermissionGroupId pulumi.StringOutput `pulumi:"permissionGroupId"`
	// The name of the permission group.
	PermissionGroupName pulumi.StringOutput `pulumi:"permissionGroupName"`
	// The list of permissions rules.
	PermissionRules PermissionGroupPermissionRuleArrayOutput `pulumi:"permissionRules"`
}

// NewPermissionGroup registers a new resource with the given unique name, arguments, and options.
func NewPermissionGroup(ctx *pulumi.Context,
	name string, args *PermissionGroupArgs, opts ...pulumi.ResourceOption) (*PermissionGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PermissionGroupName == nil {
		return nil, errors.New("invalid value for required argument 'PermissionGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PermissionGroup
	err := ctx.RegisterResource("volcengine:nas/permissionGroup:PermissionGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPermissionGroup gets an existing PermissionGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermissionGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PermissionGroupState, opts ...pulumi.ResourceOption) (*PermissionGroup, error) {
	var resource PermissionGroup
	err := ctx.ReadResource("volcengine:nas/permissionGroup:PermissionGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PermissionGroup resources.
type permissionGroupState struct {
	// The description of the permission group.
	Description *string `pulumi:"description"`
	// The id of the permission group.
	PermissionGroupId *string `pulumi:"permissionGroupId"`
	// The name of the permission group.
	PermissionGroupName *string `pulumi:"permissionGroupName"`
	// The list of permissions rules.
	PermissionRules []PermissionGroupPermissionRule `pulumi:"permissionRules"`
}

type PermissionGroupState struct {
	// The description of the permission group.
	Description pulumi.StringPtrInput
	// The id of the permission group.
	PermissionGroupId pulumi.StringPtrInput
	// The name of the permission group.
	PermissionGroupName pulumi.StringPtrInput
	// The list of permissions rules.
	PermissionRules PermissionGroupPermissionRuleArrayInput
}

func (PermissionGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionGroupState)(nil)).Elem()
}

type permissionGroupArgs struct {
	// The description of the permission group.
	Description *string `pulumi:"description"`
	// The name of the permission group.
	PermissionGroupName string `pulumi:"permissionGroupName"`
	// The list of permissions rules.
	PermissionRules []PermissionGroupPermissionRule `pulumi:"permissionRules"`
}

// The set of arguments for constructing a PermissionGroup resource.
type PermissionGroupArgs struct {
	// The description of the permission group.
	Description pulumi.StringPtrInput
	// The name of the permission group.
	PermissionGroupName pulumi.StringInput
	// The list of permissions rules.
	PermissionRules PermissionGroupPermissionRuleArrayInput
}

func (PermissionGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*permissionGroupArgs)(nil)).Elem()
}

type PermissionGroupInput interface {
	pulumi.Input

	ToPermissionGroupOutput() PermissionGroupOutput
	ToPermissionGroupOutputWithContext(ctx context.Context) PermissionGroupOutput
}

func (*PermissionGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionGroup)(nil)).Elem()
}

func (i *PermissionGroup) ToPermissionGroupOutput() PermissionGroupOutput {
	return i.ToPermissionGroupOutputWithContext(context.Background())
}

func (i *PermissionGroup) ToPermissionGroupOutputWithContext(ctx context.Context) PermissionGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionGroupOutput)
}

// PermissionGroupArrayInput is an input type that accepts PermissionGroupArray and PermissionGroupArrayOutput values.
// You can construct a concrete instance of `PermissionGroupArrayInput` via:
//
//	PermissionGroupArray{ PermissionGroupArgs{...} }
type PermissionGroupArrayInput interface {
	pulumi.Input

	ToPermissionGroupArrayOutput() PermissionGroupArrayOutput
	ToPermissionGroupArrayOutputWithContext(context.Context) PermissionGroupArrayOutput
}

type PermissionGroupArray []PermissionGroupInput

func (PermissionGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionGroup)(nil)).Elem()
}

func (i PermissionGroupArray) ToPermissionGroupArrayOutput() PermissionGroupArrayOutput {
	return i.ToPermissionGroupArrayOutputWithContext(context.Background())
}

func (i PermissionGroupArray) ToPermissionGroupArrayOutputWithContext(ctx context.Context) PermissionGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionGroupArrayOutput)
}

// PermissionGroupMapInput is an input type that accepts PermissionGroupMap and PermissionGroupMapOutput values.
// You can construct a concrete instance of `PermissionGroupMapInput` via:
//
//	PermissionGroupMap{ "key": PermissionGroupArgs{...} }
type PermissionGroupMapInput interface {
	pulumi.Input

	ToPermissionGroupMapOutput() PermissionGroupMapOutput
	ToPermissionGroupMapOutputWithContext(context.Context) PermissionGroupMapOutput
}

type PermissionGroupMap map[string]PermissionGroupInput

func (PermissionGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionGroup)(nil)).Elem()
}

func (i PermissionGroupMap) ToPermissionGroupMapOutput() PermissionGroupMapOutput {
	return i.ToPermissionGroupMapOutputWithContext(context.Background())
}

func (i PermissionGroupMap) ToPermissionGroupMapOutputWithContext(ctx context.Context) PermissionGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PermissionGroupMapOutput)
}

type PermissionGroupOutput struct{ *pulumi.OutputState }

func (PermissionGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PermissionGroup)(nil)).Elem()
}

func (o PermissionGroupOutput) ToPermissionGroupOutput() PermissionGroupOutput {
	return o
}

func (o PermissionGroupOutput) ToPermissionGroupOutputWithContext(ctx context.Context) PermissionGroupOutput {
	return o
}

// The description of the permission group.
func (o PermissionGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PermissionGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The id of the permission group.
func (o PermissionGroupOutput) PermissionGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionGroup) pulumi.StringOutput { return v.PermissionGroupId }).(pulumi.StringOutput)
}

// The name of the permission group.
func (o PermissionGroupOutput) PermissionGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *PermissionGroup) pulumi.StringOutput { return v.PermissionGroupName }).(pulumi.StringOutput)
}

// The list of permissions rules.
func (o PermissionGroupOutput) PermissionRules() PermissionGroupPermissionRuleArrayOutput {
	return o.ApplyT(func(v *PermissionGroup) PermissionGroupPermissionRuleArrayOutput { return v.PermissionRules }).(PermissionGroupPermissionRuleArrayOutput)
}

type PermissionGroupArrayOutput struct{ *pulumi.OutputState }

func (PermissionGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PermissionGroup)(nil)).Elem()
}

func (o PermissionGroupArrayOutput) ToPermissionGroupArrayOutput() PermissionGroupArrayOutput {
	return o
}

func (o PermissionGroupArrayOutput) ToPermissionGroupArrayOutputWithContext(ctx context.Context) PermissionGroupArrayOutput {
	return o
}

func (o PermissionGroupArrayOutput) Index(i pulumi.IntInput) PermissionGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PermissionGroup {
		return vs[0].([]*PermissionGroup)[vs[1].(int)]
	}).(PermissionGroupOutput)
}

type PermissionGroupMapOutput struct{ *pulumi.OutputState }

func (PermissionGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PermissionGroup)(nil)).Elem()
}

func (o PermissionGroupMapOutput) ToPermissionGroupMapOutput() PermissionGroupMapOutput {
	return o
}

func (o PermissionGroupMapOutput) ToPermissionGroupMapOutputWithContext(ctx context.Context) PermissionGroupMapOutput {
	return o
}

func (o PermissionGroupMapOutput) MapIndex(k pulumi.StringInput) PermissionGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PermissionGroup {
		return vs[0].(map[string]*PermissionGroup)[vs[1].(string)]
	}).(PermissionGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionGroupInput)(nil)).Elem(), &PermissionGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionGroupArrayInput)(nil)).Elem(), PermissionGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PermissionGroupMapInput)(nil)).Elem(), PermissionGroupMap{})
	pulumi.RegisterOutputType(PermissionGroupOutput{})
	pulumi.RegisterOutputType(PermissionGroupArrayOutput{})
	pulumi.RegisterOutputType(PermissionGroupMapOutput{})
}
