// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of nas mount points
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nas"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := nas.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-project1"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-subnet-test-2"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooPermissionGroup, err := nas.NewPermissionGroup(ctx, "fooPermissionGroup", &nas.PermissionGroupArgs{
//				PermissionGroupName: pulumi.String("acc-test"),
//				Description:         pulumi.String("acctest"),
//				PermissionRules: nas.PermissionGroupPermissionRuleArray{
//					&nas.PermissionGroupPermissionRuleArgs{
//						CidrIp:  pulumi.String("*"),
//						RwMode:  pulumi.String("RW"),
//						UseMode: pulumi.String("All_squash"),
//					},
//					&nas.PermissionGroupPermissionRuleArgs{
//						CidrIp:  pulumi.String("192.168.0.0"),
//						RwMode:  pulumi.String("RO"),
//						UseMode: pulumi.String("All_squash"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooFileSystem, err := nas.NewFileSystem(ctx, "fooFileSystem", &nas.FileSystemArgs{
//				FileSystemName: pulumi.String("acc-test-fs"),
//				Description:    pulumi.String("acc-test"),
//				ZoneId:         pulumi.String(fooZones.Zones[0].Id),
//				Capacity:       pulumi.Int(103),
//				ProjectName:    pulumi.String("default"),
//				Tags: nas.FileSystemTagArray{
//					&nas.FileSystemTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooMountPoint, err := nas.NewMountPoint(ctx, "fooMountPoint", &nas.MountPointArgs{
//				FileSystemId:      fooFileSystem.ID(),
//				MountPointName:    pulumi.String("acc-test"),
//				PermissionGroupId: fooPermissionGroup.ID(),
//				SubnetId:          fooSubnet.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_ = nas.GetMountPointsOutput(ctx, nas.GetMountPointsOutputArgs{
//				FileSystemId: fooFileSystem.ID(),
//				MountPointId: fooMountPoint.MountPointId,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetMountPoints(ctx *pulumi.Context, args *GetMountPointsArgs, opts ...pulumi.InvokeOption) (*GetMountPointsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetMountPointsResult
	err := ctx.Invoke("volcengine:nas/getMountPoints:getMountPoints", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMountPoints.
type GetMountPointsArgs struct {
	// The id of the file system.
	FileSystemId string `pulumi:"fileSystemId"`
	// The id of the mount point.
	MountPointId *string `pulumi:"mountPointId"`
	// The name of the mount point.
	MountPointName *string `pulumi:"mountPointName"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The id of the vpc.
	VpcId *string `pulumi:"vpcId"`
}

// A collection of values returned by getMountPoints.
type GetMountPointsResult struct {
	// The id of the file system.
	FileSystemId string `pulumi:"fileSystemId"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The id of the mount point.
	MountPointId *string `pulumi:"mountPointId"`
	// The name of the mount point.
	MountPointName *string `pulumi:"mountPointName"`
	// The list of the mount point.
	MountPoints []GetMountPointsMountPoint `pulumi:"mountPoints"`
	OutputFile  *string                    `pulumi:"outputFile"`
	// The total count of nas mount points query.
	TotalCount int `pulumi:"totalCount"`
	// The id of the vpc.
	VpcId *string `pulumi:"vpcId"`
}

func GetMountPointsOutput(ctx *pulumi.Context, args GetMountPointsOutputArgs, opts ...pulumi.InvokeOption) GetMountPointsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetMountPointsResult, error) {
			args := v.(GetMountPointsArgs)
			r, err := GetMountPoints(ctx, &args, opts...)
			var s GetMountPointsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetMountPointsResultOutput)
}

// A collection of arguments for invoking getMountPoints.
type GetMountPointsOutputArgs struct {
	// The id of the file system.
	FileSystemId pulumi.StringInput `pulumi:"fileSystemId"`
	// The id of the mount point.
	MountPointId pulumi.StringPtrInput `pulumi:"mountPointId"`
	// The name of the mount point.
	MountPointName pulumi.StringPtrInput `pulumi:"mountPointName"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The id of the vpc.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (GetMountPointsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMountPointsArgs)(nil)).Elem()
}

// A collection of values returned by getMountPoints.
type GetMountPointsResultOutput struct{ *pulumi.OutputState }

func (GetMountPointsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMountPointsResult)(nil)).Elem()
}

func (o GetMountPointsResultOutput) ToGetMountPointsResultOutput() GetMountPointsResultOutput {
	return o
}

func (o GetMountPointsResultOutput) ToGetMountPointsResultOutputWithContext(ctx context.Context) GetMountPointsResultOutput {
	return o
}

// The id of the file system.
func (o GetMountPointsResultOutput) FileSystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetMountPointsResult) string { return v.FileSystemId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetMountPointsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetMountPointsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the mount point.
func (o GetMountPointsResultOutput) MountPointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMountPointsResult) *string { return v.MountPointId }).(pulumi.StringPtrOutput)
}

// The name of the mount point.
func (o GetMountPointsResultOutput) MountPointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMountPointsResult) *string { return v.MountPointName }).(pulumi.StringPtrOutput)
}

// The list of the mount point.
func (o GetMountPointsResultOutput) MountPoints() GetMountPointsMountPointArrayOutput {
	return o.ApplyT(func(v GetMountPointsResult) []GetMountPointsMountPoint { return v.MountPoints }).(GetMountPointsMountPointArrayOutput)
}

func (o GetMountPointsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMountPointsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of nas mount points query.
func (o GetMountPointsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetMountPointsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The id of the vpc.
func (o GetMountPointsResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetMountPointsResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetMountPointsResultOutput{})
}
