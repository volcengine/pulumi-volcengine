// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package nas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage nas auto snapshot policy
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/nas"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := nas.NewAutoSnapshotPolicy(ctx, "foo", &nas.AutoSnapshotPolicyArgs{
//				AutoSnapshotPolicyName: pulumi.String("acc-test-auto_snapshot_policy"),
//				RepeatWeekdays:         pulumi.String("1,3,5,7"),
//				RetentionDays:          pulumi.Int(20),
//				TimePoints:             pulumi.String("0,7,17"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// NasAutoSnapshotPolicy can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:nas/autoSnapshotPolicy:AutoSnapshotPolicy default resource_id
// ```
type AutoSnapshotPolicy struct {
	pulumi.CustomResourceState

	// The name of the auto snapshot policy.
	AutoSnapshotPolicyName pulumi.StringOutput `pulumi:"autoSnapshotPolicyName"`
	// The create time of auto snapshot policy.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The count of file system which auto snapshot policy bind.
	FileSystemCount pulumi.IntOutput `pulumi:"fileSystemCount"`
	// The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
	RepeatWeekdays pulumi.StringOutput `pulumi:"repeatWeekdays"`
	// The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
	RetentionDays pulumi.IntOutput `pulumi:"retentionDays"`
	// The status of auto snapshot policy.
	Status pulumi.StringOutput `pulumi:"status"`
	// The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
	TimePoints pulumi.StringOutput `pulumi:"timePoints"`
}

// NewAutoSnapshotPolicy registers a new resource with the given unique name, arguments, and options.
func NewAutoSnapshotPolicy(ctx *pulumi.Context,
	name string, args *AutoSnapshotPolicyArgs, opts ...pulumi.ResourceOption) (*AutoSnapshotPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AutoSnapshotPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'AutoSnapshotPolicyName'")
	}
	if args.RepeatWeekdays == nil {
		return nil, errors.New("invalid value for required argument 'RepeatWeekdays'")
	}
	if args.TimePoints == nil {
		return nil, errors.New("invalid value for required argument 'TimePoints'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AutoSnapshotPolicy
	err := ctx.RegisterResource("volcengine:nas/autoSnapshotPolicy:AutoSnapshotPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAutoSnapshotPolicy gets an existing AutoSnapshotPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAutoSnapshotPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AutoSnapshotPolicyState, opts ...pulumi.ResourceOption) (*AutoSnapshotPolicy, error) {
	var resource AutoSnapshotPolicy
	err := ctx.ReadResource("volcengine:nas/autoSnapshotPolicy:AutoSnapshotPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AutoSnapshotPolicy resources.
type autoSnapshotPolicyState struct {
	// The name of the auto snapshot policy.
	AutoSnapshotPolicyName *string `pulumi:"autoSnapshotPolicyName"`
	// The create time of auto snapshot policy.
	CreateTime *string `pulumi:"createTime"`
	// The count of file system which auto snapshot policy bind.
	FileSystemCount *int `pulumi:"fileSystemCount"`
	// The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
	RepeatWeekdays *string `pulumi:"repeatWeekdays"`
	// The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
	RetentionDays *int `pulumi:"retentionDays"`
	// The status of auto snapshot policy.
	Status *string `pulumi:"status"`
	// The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
	TimePoints *string `pulumi:"timePoints"`
}

type AutoSnapshotPolicyState struct {
	// The name of the auto snapshot policy.
	AutoSnapshotPolicyName pulumi.StringPtrInput
	// The create time of auto snapshot policy.
	CreateTime pulumi.StringPtrInput
	// The count of file system which auto snapshot policy bind.
	FileSystemCount pulumi.IntPtrInput
	// The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
	RepeatWeekdays pulumi.StringPtrInput
	// The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
	RetentionDays pulumi.IntPtrInput
	// The status of auto snapshot policy.
	Status pulumi.StringPtrInput
	// The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
	TimePoints pulumi.StringPtrInput
}

func (AutoSnapshotPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*autoSnapshotPolicyState)(nil)).Elem()
}

type autoSnapshotPolicyArgs struct {
	// The name of the auto snapshot policy.
	AutoSnapshotPolicyName string `pulumi:"autoSnapshotPolicyName"`
	// The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
	RepeatWeekdays string `pulumi:"repeatWeekdays"`
	// The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
	RetentionDays *int `pulumi:"retentionDays"`
	// The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
	TimePoints string `pulumi:"timePoints"`
}

// The set of arguments for constructing a AutoSnapshotPolicy resource.
type AutoSnapshotPolicyArgs struct {
	// The name of the auto snapshot policy.
	AutoSnapshotPolicyName pulumi.StringInput
	// The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
	RepeatWeekdays pulumi.StringInput
	// The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
	RetentionDays pulumi.IntPtrInput
	// The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
	TimePoints pulumi.StringInput
}

func (AutoSnapshotPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*autoSnapshotPolicyArgs)(nil)).Elem()
}

type AutoSnapshotPolicyInput interface {
	pulumi.Input

	ToAutoSnapshotPolicyOutput() AutoSnapshotPolicyOutput
	ToAutoSnapshotPolicyOutputWithContext(ctx context.Context) AutoSnapshotPolicyOutput
}

func (*AutoSnapshotPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSnapshotPolicy)(nil)).Elem()
}

func (i *AutoSnapshotPolicy) ToAutoSnapshotPolicyOutput() AutoSnapshotPolicyOutput {
	return i.ToAutoSnapshotPolicyOutputWithContext(context.Background())
}

func (i *AutoSnapshotPolicy) ToAutoSnapshotPolicyOutputWithContext(ctx context.Context) AutoSnapshotPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSnapshotPolicyOutput)
}

// AutoSnapshotPolicyArrayInput is an input type that accepts AutoSnapshotPolicyArray and AutoSnapshotPolicyArrayOutput values.
// You can construct a concrete instance of `AutoSnapshotPolicyArrayInput` via:
//
//	AutoSnapshotPolicyArray{ AutoSnapshotPolicyArgs{...} }
type AutoSnapshotPolicyArrayInput interface {
	pulumi.Input

	ToAutoSnapshotPolicyArrayOutput() AutoSnapshotPolicyArrayOutput
	ToAutoSnapshotPolicyArrayOutputWithContext(context.Context) AutoSnapshotPolicyArrayOutput
}

type AutoSnapshotPolicyArray []AutoSnapshotPolicyInput

func (AutoSnapshotPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoSnapshotPolicy)(nil)).Elem()
}

func (i AutoSnapshotPolicyArray) ToAutoSnapshotPolicyArrayOutput() AutoSnapshotPolicyArrayOutput {
	return i.ToAutoSnapshotPolicyArrayOutputWithContext(context.Background())
}

func (i AutoSnapshotPolicyArray) ToAutoSnapshotPolicyArrayOutputWithContext(ctx context.Context) AutoSnapshotPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSnapshotPolicyArrayOutput)
}

// AutoSnapshotPolicyMapInput is an input type that accepts AutoSnapshotPolicyMap and AutoSnapshotPolicyMapOutput values.
// You can construct a concrete instance of `AutoSnapshotPolicyMapInput` via:
//
//	AutoSnapshotPolicyMap{ "key": AutoSnapshotPolicyArgs{...} }
type AutoSnapshotPolicyMapInput interface {
	pulumi.Input

	ToAutoSnapshotPolicyMapOutput() AutoSnapshotPolicyMapOutput
	ToAutoSnapshotPolicyMapOutputWithContext(context.Context) AutoSnapshotPolicyMapOutput
}

type AutoSnapshotPolicyMap map[string]AutoSnapshotPolicyInput

func (AutoSnapshotPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoSnapshotPolicy)(nil)).Elem()
}

func (i AutoSnapshotPolicyMap) ToAutoSnapshotPolicyMapOutput() AutoSnapshotPolicyMapOutput {
	return i.ToAutoSnapshotPolicyMapOutputWithContext(context.Background())
}

func (i AutoSnapshotPolicyMap) ToAutoSnapshotPolicyMapOutputWithContext(ctx context.Context) AutoSnapshotPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AutoSnapshotPolicyMapOutput)
}

type AutoSnapshotPolicyOutput struct{ *pulumi.OutputState }

func (AutoSnapshotPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AutoSnapshotPolicy)(nil)).Elem()
}

func (o AutoSnapshotPolicyOutput) ToAutoSnapshotPolicyOutput() AutoSnapshotPolicyOutput {
	return o
}

func (o AutoSnapshotPolicyOutput) ToAutoSnapshotPolicyOutputWithContext(ctx context.Context) AutoSnapshotPolicyOutput {
	return o
}

// The name of the auto snapshot policy.
func (o AutoSnapshotPolicyOutput) AutoSnapshotPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoSnapshotPolicy) pulumi.StringOutput { return v.AutoSnapshotPolicyName }).(pulumi.StringOutput)
}

// The create time of auto snapshot policy.
func (o AutoSnapshotPolicyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoSnapshotPolicy) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The count of file system which auto snapshot policy bind.
func (o AutoSnapshotPolicyOutput) FileSystemCount() pulumi.IntOutput {
	return o.ApplyT(func(v *AutoSnapshotPolicy) pulumi.IntOutput { return v.FileSystemCount }).(pulumi.IntOutput)
}

// The repeat weekdays of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `1` ~ `7`.
func (o AutoSnapshotPolicyOutput) RepeatWeekdays() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoSnapshotPolicy) pulumi.StringOutput { return v.RepeatWeekdays }).(pulumi.StringOutput)
}

// The retention days of the auto snapshot policy. Valid values: -1(permanent) or 1 ~ 65536. Default is 30.
func (o AutoSnapshotPolicyOutput) RetentionDays() pulumi.IntOutput {
	return o.ApplyT(func(v *AutoSnapshotPolicy) pulumi.IntOutput { return v.RetentionDays }).(pulumi.IntOutput)
}

// The status of auto snapshot policy.
func (o AutoSnapshotPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoSnapshotPolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The time points of the auto snapshot policy. Support setting multiple dates, separated by English commas. Valid values: `0` ~ `23`.
func (o AutoSnapshotPolicyOutput) TimePoints() pulumi.StringOutput {
	return o.ApplyT(func(v *AutoSnapshotPolicy) pulumi.StringOutput { return v.TimePoints }).(pulumi.StringOutput)
}

type AutoSnapshotPolicyArrayOutput struct{ *pulumi.OutputState }

func (AutoSnapshotPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AutoSnapshotPolicy)(nil)).Elem()
}

func (o AutoSnapshotPolicyArrayOutput) ToAutoSnapshotPolicyArrayOutput() AutoSnapshotPolicyArrayOutput {
	return o
}

func (o AutoSnapshotPolicyArrayOutput) ToAutoSnapshotPolicyArrayOutputWithContext(ctx context.Context) AutoSnapshotPolicyArrayOutput {
	return o
}

func (o AutoSnapshotPolicyArrayOutput) Index(i pulumi.IntInput) AutoSnapshotPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AutoSnapshotPolicy {
		return vs[0].([]*AutoSnapshotPolicy)[vs[1].(int)]
	}).(AutoSnapshotPolicyOutput)
}

type AutoSnapshotPolicyMapOutput struct{ *pulumi.OutputState }

func (AutoSnapshotPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AutoSnapshotPolicy)(nil)).Elem()
}

func (o AutoSnapshotPolicyMapOutput) ToAutoSnapshotPolicyMapOutput() AutoSnapshotPolicyMapOutput {
	return o
}

func (o AutoSnapshotPolicyMapOutput) ToAutoSnapshotPolicyMapOutputWithContext(ctx context.Context) AutoSnapshotPolicyMapOutput {
	return o
}

func (o AutoSnapshotPolicyMapOutput) MapIndex(k pulumi.StringInput) AutoSnapshotPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AutoSnapshotPolicy {
		return vs[0].(map[string]*AutoSnapshotPolicy)[vs[1].(string)]
	}).(AutoSnapshotPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AutoSnapshotPolicyInput)(nil)).Elem(), &AutoSnapshotPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoSnapshotPolicyArrayInput)(nil)).Elem(), AutoSnapshotPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AutoSnapshotPolicyMapInput)(nil)).Elem(), AutoSnapshotPolicyMap{})
	pulumi.RegisterOutputType(AutoSnapshotPolicyOutput{})
	pulumi.RegisterOutputType(AutoSnapshotPolicyArrayOutput{})
	pulumi.RegisterOutputType(AutoSnapshotPolicyMapOutput{})
}
