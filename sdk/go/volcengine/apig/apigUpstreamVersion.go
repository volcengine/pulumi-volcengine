// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apig

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage apig upstream version
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/apig"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			foo1, err := vpc.NewSubnet(ctx, "foo1", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			foo2, err := vpc.NewSubnet(ctx, "foo2", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.1.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[1].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooApigGateway, err := apig.NewApigGateway(ctx, "fooApigGateway", &apig.ApigGatewayArgs{
//				Type:        pulumi.String("standard"),
//				Comments:    pulumi.String("acc-test"),
//				ProjectName: pulumi.String("default"),
//				Tags: apig.ApigGatewayTagArray{
//					&apig.ApigGatewayTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//				NetworkSpec: &apig.ApigGatewayNetworkSpecArgs{
//					VpcId: fooVpc.ID(),
//					SubnetIds: pulumi.StringArray{
//						foo1.ID(),
//						foo2.ID(),
//					},
//				},
//				ResourceSpec: &apig.ApigGatewayResourceSpecArgs{
//					Replicas:                 pulumi.Int(2),
//					InstanceSpecCode:         pulumi.String("1c2g"),
//					ClbSpecCode:              pulumi.String("small_1"),
//					PublicNetworkBillingType: pulumi.String("bandwidth"),
//					PublicNetworkBandwidth:   pulumi.Int(1),
//					NetworkType: &apig.ApigGatewayResourceSpecNetworkTypeArgs{
//						EnablePublicNetwork:  pulumi.Bool(true),
//						EnablePrivateNetwork: pulumi.Bool(true),
//					},
//				},
//				LogSpec: &apig.ApigGatewayLogSpecArgs{
//					Enable:    pulumi.Bool(true),
//					ProjectId: pulumi.String("d3cb87c0-faeb-4074-b1ee-9bd747865a76"),
//					TopicId:   pulumi.String("d339482e-d86d-4bd8-a9bb-f270417f00a1"),
//				},
//				MonitorSpec: &apig.ApigGatewayMonitorSpecArgs{
//					Enable:      pulumi.Bool(true),
//					WorkspaceId: pulumi.String("4ed1caf3-279d-4c5f-8301-87ea38e92ffc"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apig.NewApigGatewayService(ctx, "fooApigGatewayService", &apig.ApigGatewayServiceArgs{
//				GatewayId:   fooApigGateway.ID(),
//				ServiceName: pulumi.String("acc-test-apig-service"),
//				Comments:    pulumi.String("acc-test"),
//				Protocols: pulumi.StringArray{
//					pulumi.String("HTTP"),
//					pulumi.String("HTTPS"),
//				},
//				AuthSpec: &apig.ApigGatewayServiceAuthSpecArgs{
//					Enable: pulumi.Bool(false),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apig.NewApigUpstreamSource(ctx, "foo-k8sApigUpstreamSource", &apig.ApigUpstreamSourceArgs{
//				GatewayId:  fooApigGateway.ID(),
//				Comments:   pulumi.String("acc-test-k8s"),
//				SourceType: pulumi.String("K8S"),
//				SourceSpec: &apig.ApigUpstreamSourceSourceSpecArgs{
//					K8sSource: &apig.ApigUpstreamSourceSourceSpecK8sSourceArgs{
//						ClusterId: pulumi.String("cd197sac4mpmnruh7um80"),
//					},
//				},
//				IngressSettings: apig.ApigUpstreamSourceIngressSettingArray{
//					&apig.ApigUpstreamSourceIngressSettingArgs{
//						EnableIngress: pulumi.Bool(true),
//						UpdateStatus:  pulumi.Bool(true),
//						IngressClasses: pulumi.StringArray{
//							pulumi.String("test"),
//						},
//						WatchNamespaces: pulumi.StringArray{
//							pulumi.String("default"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = apig.NewApigUpstream(ctx, "foo-k8sApigUpstream", &apig.ApigUpstreamArgs{
//				GatewayId:    fooApigGateway.ID(),
//				Comments:     pulumi.String("acc-test"),
//				ResourceType: pulumi.String("Console"),
//				Protocol:     pulumi.String("HTTP"),
//				LoadBalancerSettings: &apig.ApigUpstreamLoadBalancerSettingsArgs{
//					LbPolicy: pulumi.String("ConsistentHashLB"),
//					ConsistentHashLb: &apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbArgs{
//						HashKey: pulumi.String("HTTPCookie"),
//						HttpCookie: &apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookieArgs{
//							Name: pulumi.String("test"),
//							Path: pulumi.String("/"),
//							Ttl:  pulumi.Int(300),
//						},
//					},
//				},
//				TlsSettings: &apig.ApigUpstreamTlsSettingsArgs{
//					TlsMode: pulumi.String("SIMPLE"),
//					Sni:     pulumi.String("test"),
//				},
//				CircuitBreakingSettings: &apig.ApigUpstreamCircuitBreakingSettingsArgs{
//					Enable:             pulumi.Bool(false),
//					ConsecutiveErrors:  pulumi.Int(5),
//					Interval:           pulumi.Int(10000),
//					BaseEjectionTime:   pulumi.Int(30000),
//					MaxEjectionPercent: pulumi.Int(20),
//					MinHealthPercent:   pulumi.Int(60),
//				},
//				SourceType: pulumi.String("K8S"),
//				UpstreamSpec: &apig.ApigUpstreamUpstreamSpecArgs{
//					K8sService: &apig.ApigUpstreamUpstreamSpecK8sServiceArgs{
//						Namespace: pulumi.String("default"),
//						Name:      pulumi.String("kubernetes"),
//						Port:      pulumi.Int(443),
//					},
//				},
//			}, pulumi.DependsOn([]pulumi.Resource{
//				foo_k8sApigUpstreamSource,
//			}))
//			if err != nil {
//				return err
//			}
//			_, err = apig.NewApigUpstreamVersion(ctx, "fooApigUpstreamVersion", &apig.ApigUpstreamVersionArgs{
//				UpstreamId: foo_k8sApigUpstream.ID(),
//				UpstreamVersion: &apig.ApigUpstreamVersionUpstreamVersionArgs{
//					Name: pulumi.String("acc-test-version"),
//					Labels: apig.ApigUpstreamVersionUpstreamVersionLabelArray{
//						&apig.ApigUpstreamVersionUpstreamVersionLabelArgs{
//							Key:   pulumi.String("k1"),
//							Value: pulumi.String("v2"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ApigUpstreamVersion can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:apig/apigUpstreamVersion:ApigUpstreamVersion default resource_id
// ```
type ApigUpstreamVersion struct {
	pulumi.CustomResourceState

	// The id of the apig upstream.
	UpstreamId pulumi.StringOutput `pulumi:"upstreamId"`
	// The version of the apig upstream.
	UpstreamVersion ApigUpstreamVersionUpstreamVersionOutput `pulumi:"upstreamVersion"`
}

// NewApigUpstreamVersion registers a new resource with the given unique name, arguments, and options.
func NewApigUpstreamVersion(ctx *pulumi.Context,
	name string, args *ApigUpstreamVersionArgs, opts ...pulumi.ResourceOption) (*ApigUpstreamVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UpstreamId == nil {
		return nil, errors.New("invalid value for required argument 'UpstreamId'")
	}
	if args.UpstreamVersion == nil {
		return nil, errors.New("invalid value for required argument 'UpstreamVersion'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApigUpstreamVersion
	err := ctx.RegisterResource("volcengine:apig/apigUpstreamVersion:ApigUpstreamVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApigUpstreamVersion gets an existing ApigUpstreamVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApigUpstreamVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApigUpstreamVersionState, opts ...pulumi.ResourceOption) (*ApigUpstreamVersion, error) {
	var resource ApigUpstreamVersion
	err := ctx.ReadResource("volcengine:apig/apigUpstreamVersion:ApigUpstreamVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApigUpstreamVersion resources.
type apigUpstreamVersionState struct {
	// The id of the apig upstream.
	UpstreamId *string `pulumi:"upstreamId"`
	// The version of the apig upstream.
	UpstreamVersion *ApigUpstreamVersionUpstreamVersion `pulumi:"upstreamVersion"`
}

type ApigUpstreamVersionState struct {
	// The id of the apig upstream.
	UpstreamId pulumi.StringPtrInput
	// The version of the apig upstream.
	UpstreamVersion ApigUpstreamVersionUpstreamVersionPtrInput
}

func (ApigUpstreamVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*apigUpstreamVersionState)(nil)).Elem()
}

type apigUpstreamVersionArgs struct {
	// The id of the apig upstream.
	UpstreamId string `pulumi:"upstreamId"`
	// The version of the apig upstream.
	UpstreamVersion ApigUpstreamVersionUpstreamVersion `pulumi:"upstreamVersion"`
}

// The set of arguments for constructing a ApigUpstreamVersion resource.
type ApigUpstreamVersionArgs struct {
	// The id of the apig upstream.
	UpstreamId pulumi.StringInput
	// The version of the apig upstream.
	UpstreamVersion ApigUpstreamVersionUpstreamVersionInput
}

func (ApigUpstreamVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apigUpstreamVersionArgs)(nil)).Elem()
}

type ApigUpstreamVersionInput interface {
	pulumi.Input

	ToApigUpstreamVersionOutput() ApigUpstreamVersionOutput
	ToApigUpstreamVersionOutputWithContext(ctx context.Context) ApigUpstreamVersionOutput
}

func (*ApigUpstreamVersion) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigUpstreamVersion)(nil)).Elem()
}

func (i *ApigUpstreamVersion) ToApigUpstreamVersionOutput() ApigUpstreamVersionOutput {
	return i.ToApigUpstreamVersionOutputWithContext(context.Background())
}

func (i *ApigUpstreamVersion) ToApigUpstreamVersionOutputWithContext(ctx context.Context) ApigUpstreamVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigUpstreamVersionOutput)
}

// ApigUpstreamVersionArrayInput is an input type that accepts ApigUpstreamVersionArray and ApigUpstreamVersionArrayOutput values.
// You can construct a concrete instance of `ApigUpstreamVersionArrayInput` via:
//
//	ApigUpstreamVersionArray{ ApigUpstreamVersionArgs{...} }
type ApigUpstreamVersionArrayInput interface {
	pulumi.Input

	ToApigUpstreamVersionArrayOutput() ApigUpstreamVersionArrayOutput
	ToApigUpstreamVersionArrayOutputWithContext(context.Context) ApigUpstreamVersionArrayOutput
}

type ApigUpstreamVersionArray []ApigUpstreamVersionInput

func (ApigUpstreamVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigUpstreamVersion)(nil)).Elem()
}

func (i ApigUpstreamVersionArray) ToApigUpstreamVersionArrayOutput() ApigUpstreamVersionArrayOutput {
	return i.ToApigUpstreamVersionArrayOutputWithContext(context.Background())
}

func (i ApigUpstreamVersionArray) ToApigUpstreamVersionArrayOutputWithContext(ctx context.Context) ApigUpstreamVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigUpstreamVersionArrayOutput)
}

// ApigUpstreamVersionMapInput is an input type that accepts ApigUpstreamVersionMap and ApigUpstreamVersionMapOutput values.
// You can construct a concrete instance of `ApigUpstreamVersionMapInput` via:
//
//	ApigUpstreamVersionMap{ "key": ApigUpstreamVersionArgs{...} }
type ApigUpstreamVersionMapInput interface {
	pulumi.Input

	ToApigUpstreamVersionMapOutput() ApigUpstreamVersionMapOutput
	ToApigUpstreamVersionMapOutputWithContext(context.Context) ApigUpstreamVersionMapOutput
}

type ApigUpstreamVersionMap map[string]ApigUpstreamVersionInput

func (ApigUpstreamVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigUpstreamVersion)(nil)).Elem()
}

func (i ApigUpstreamVersionMap) ToApigUpstreamVersionMapOutput() ApigUpstreamVersionMapOutput {
	return i.ToApigUpstreamVersionMapOutputWithContext(context.Background())
}

func (i ApigUpstreamVersionMap) ToApigUpstreamVersionMapOutputWithContext(ctx context.Context) ApigUpstreamVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApigUpstreamVersionMapOutput)
}

type ApigUpstreamVersionOutput struct{ *pulumi.OutputState }

func (ApigUpstreamVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApigUpstreamVersion)(nil)).Elem()
}

func (o ApigUpstreamVersionOutput) ToApigUpstreamVersionOutput() ApigUpstreamVersionOutput {
	return o
}

func (o ApigUpstreamVersionOutput) ToApigUpstreamVersionOutputWithContext(ctx context.Context) ApigUpstreamVersionOutput {
	return o
}

// The id of the apig upstream.
func (o ApigUpstreamVersionOutput) UpstreamId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApigUpstreamVersion) pulumi.StringOutput { return v.UpstreamId }).(pulumi.StringOutput)
}

// The version of the apig upstream.
func (o ApigUpstreamVersionOutput) UpstreamVersion() ApigUpstreamVersionUpstreamVersionOutput {
	return o.ApplyT(func(v *ApigUpstreamVersion) ApigUpstreamVersionUpstreamVersionOutput { return v.UpstreamVersion }).(ApigUpstreamVersionUpstreamVersionOutput)
}

type ApigUpstreamVersionArrayOutput struct{ *pulumi.OutputState }

func (ApigUpstreamVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApigUpstreamVersion)(nil)).Elem()
}

func (o ApigUpstreamVersionArrayOutput) ToApigUpstreamVersionArrayOutput() ApigUpstreamVersionArrayOutput {
	return o
}

func (o ApigUpstreamVersionArrayOutput) ToApigUpstreamVersionArrayOutputWithContext(ctx context.Context) ApigUpstreamVersionArrayOutput {
	return o
}

func (o ApigUpstreamVersionArrayOutput) Index(i pulumi.IntInput) ApigUpstreamVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApigUpstreamVersion {
		return vs[0].([]*ApigUpstreamVersion)[vs[1].(int)]
	}).(ApigUpstreamVersionOutput)
}

type ApigUpstreamVersionMapOutput struct{ *pulumi.OutputState }

func (ApigUpstreamVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApigUpstreamVersion)(nil)).Elem()
}

func (o ApigUpstreamVersionMapOutput) ToApigUpstreamVersionMapOutput() ApigUpstreamVersionMapOutput {
	return o
}

func (o ApigUpstreamVersionMapOutput) ToApigUpstreamVersionMapOutputWithContext(ctx context.Context) ApigUpstreamVersionMapOutput {
	return o
}

func (o ApigUpstreamVersionMapOutput) MapIndex(k pulumi.StringInput) ApigUpstreamVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApigUpstreamVersion {
		return vs[0].(map[string]*ApigUpstreamVersion)[vs[1].(string)]
	}).(ApigUpstreamVersionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApigUpstreamVersionInput)(nil)).Elem(), &ApigUpstreamVersion{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigUpstreamVersionArrayInput)(nil)).Elem(), ApigUpstreamVersionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApigUpstreamVersionMapInput)(nil)).Elem(), ApigUpstreamVersionMap{})
	pulumi.RegisterOutputType(ApigUpstreamVersionOutput{})
	pulumi.RegisterOutputType(ApigUpstreamVersionArrayOutput{})
	pulumi.RegisterOutputType(ApigUpstreamVersionMapOutput{})
}
