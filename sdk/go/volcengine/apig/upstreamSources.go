// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package apig

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of apig upstream sources
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/apig"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := apig.GetUpstreamSources(ctx, &apig.GetUpstreamSourcesArgs{
//				GatewayId: pulumi.StringRef("gd13d8c6eq1emkiunq6p0"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.apig.UpstreamSources has been deprecated in favor of volcengine.apig.getUpstreamSources
func UpstreamSources(ctx *pulumi.Context, args *UpstreamSourcesArgs, opts ...pulumi.InvokeOption) (*UpstreamSourcesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv UpstreamSourcesResult
	err := ctx.Invoke("volcengine:apig/upstreamSources:UpstreamSources", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking UpstreamSources.
type UpstreamSourcesArgs struct {
	// The enable ingress of apig upstream source.
	EnableIngress *bool `pulumi:"enableIngress"`
	// The id of api gateway.
	GatewayId *string `pulumi:"gatewayId"`
	// The name of nacos source.
	Name *string `pulumi:"name"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The source type of apig upstream source. Valid values: `K8S`, `Nacos`.
	SourceType *string `pulumi:"sourceType"`
	// The status of apig upstream source. Valid values: `Syncing`, `SyncedSucceed`, `SyncedFailed`.
	Status *string `pulumi:"status"`
}

// A collection of values returned by UpstreamSources.
type UpstreamSourcesResult struct {
	// Whether to enable ingress.
	EnableIngress *bool `pulumi:"enableIngress"`
	// The id of api gateway.
	GatewayId *string `pulumi:"gatewayId"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	Name       *string `pulumi:"name"`
	OutputFile *string `pulumi:"outputFile"`
	// The source type of apig upstream source.
	SourceType *string `pulumi:"sourceType"`
	// The status of apig upstream source.
	Status *string `pulumi:"status"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The collection of query.
	UpstreamSources []UpstreamSourcesUpstreamSource `pulumi:"upstreamSources"`
}

func UpstreamSourcesOutput(ctx *pulumi.Context, args UpstreamSourcesOutputArgs, opts ...pulumi.InvokeOption) UpstreamSourcesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (UpstreamSourcesResult, error) {
			args := v.(UpstreamSourcesArgs)
			r, err := UpstreamSources(ctx, &args, opts...)
			var s UpstreamSourcesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(UpstreamSourcesResultOutput)
}

// A collection of arguments for invoking UpstreamSources.
type UpstreamSourcesOutputArgs struct {
	// The enable ingress of apig upstream source.
	EnableIngress pulumi.BoolPtrInput `pulumi:"enableIngress"`
	// The id of api gateway.
	GatewayId pulumi.StringPtrInput `pulumi:"gatewayId"`
	// The name of nacos source.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The source type of apig upstream source. Valid values: `K8S`, `Nacos`.
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
	// The status of apig upstream source. Valid values: `Syncing`, `SyncedSucceed`, `SyncedFailed`.
	Status pulumi.StringPtrInput `pulumi:"status"`
}

func (UpstreamSourcesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamSourcesArgs)(nil)).Elem()
}

// A collection of values returned by UpstreamSources.
type UpstreamSourcesResultOutput struct{ *pulumi.OutputState }

func (UpstreamSourcesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UpstreamSourcesResult)(nil)).Elem()
}

func (o UpstreamSourcesResultOutput) ToUpstreamSourcesResultOutput() UpstreamSourcesResultOutput {
	return o
}

func (o UpstreamSourcesResultOutput) ToUpstreamSourcesResultOutputWithContext(ctx context.Context) UpstreamSourcesResultOutput {
	return o
}

// Whether to enable ingress.
func (o UpstreamSourcesResultOutput) EnableIngress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UpstreamSourcesResult) *bool { return v.EnableIngress }).(pulumi.BoolPtrOutput)
}

// The id of api gateway.
func (o UpstreamSourcesResultOutput) GatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamSourcesResult) *string { return v.GatewayId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o UpstreamSourcesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v UpstreamSourcesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o UpstreamSourcesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamSourcesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o UpstreamSourcesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamSourcesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The source type of apig upstream source.
func (o UpstreamSourcesResultOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamSourcesResult) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

// The status of apig upstream source.
func (o UpstreamSourcesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UpstreamSourcesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o UpstreamSourcesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v UpstreamSourcesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The collection of query.
func (o UpstreamSourcesResultOutput) UpstreamSources() UpstreamSourcesUpstreamSourceArrayOutput {
	return o.ApplyT(func(v UpstreamSourcesResult) []UpstreamSourcesUpstreamSource { return v.UpstreamSources }).(UpstreamSourcesUpstreamSourceArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(UpstreamSourcesResultOutput{})
}
