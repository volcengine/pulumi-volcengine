// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage mongodb account
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := mongodb.NewInstance(ctx, "fooInstance", &mongodb.InstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//				},
//				DbEngineVersion:      pulumi.String("MongoDB_4_0"),
//				InstanceType:         pulumi.String("ReplicaSet"),
//				NodeSpec:             pulumi.String("mongo.2c4g"),
//				StorageSpaceGb:       pulumi.Int(20),
//				SubnetId:             fooSubnet.ID(),
//				InstanceName:         pulumi.String("acc-test-mongodb-replica"),
//				ChargeType:           pulumi.String("PostPaid"),
//				SuperAccountPassword: pulumi.String("93f0cb0614Aab12"),
//				ProjectName:          pulumi.String("default"),
//				Tags: mongodb.InstanceTagArray{
//					&mongodb.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodb.NewAccount(ctx, "fooAccount", &mongodb.AccountArgs{
//				InstanceId:      fooInstance.ID(),
//				AccountName:     pulumi.String("acc-test-mongodb-account"),
//				AuthDb:          pulumi.String("admin"),
//				AccountPassword: pulumi.String("93f0cb0614Aab12"),
//				AccountDesc:     pulumi.String("acc-test"),
//				AccountPrivileges: mongodb.AccountAccountPrivilegeArray{
//					&mongodb.AccountAccountPrivilegeArgs{
//						DbName: pulumi.String("admin"),
//						RoleNames: pulumi.StringArray{
//							pulumi.String("userAdmin"),
//							pulumi.String("clusterMonitor"),
//						},
//					},
//					&mongodb.AccountAccountPrivilegeArgs{
//						DbName: pulumi.String("config"),
//						RoleNames: pulumi.StringArray{
//							pulumi.String("read"),
//						},
//					},
//					&mongodb.AccountAccountPrivilegeArgs{
//						DbName: pulumi.String("local"),
//						RoleNames: pulumi.StringArray{
//							pulumi.String("read"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// MongodbAccount can be imported using the instance_id:account_name, e.g.
//
// ```sh
// $ pulumi import volcengine:mongodb/account:Account default resource_id
// ```
type Account struct {
	pulumi.CustomResourceState

	// The description of the mongodb account.
	AccountDesc pulumi.StringPtrOutput `pulumi:"accountDesc"`
	// The name of the mongodb account.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword pulumi.StringOutput `pulumi:"accountPassword"`
	// The privilege information of account.
	AccountPrivileges AccountAccountPrivilegeArrayOutput `pulumi:"accountPrivileges"`
	// The type of the account.
	AccountType pulumi.StringOutput `pulumi:"accountType"`
	// The database of the mongodb account.
	AuthDb pulumi.StringOutput `pulumi:"authDb"`
	// The id of the mongodb instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.AccountPassword == nil {
		return nil, errors.New("invalid value for required argument 'AccountPassword'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.AccountPassword != nil {
		args.AccountPassword = pulumi.ToSecret(args.AccountPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Account
	err := ctx.RegisterResource("volcengine:mongodb/account:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("volcengine:mongodb/account:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// The description of the mongodb account.
	AccountDesc *string `pulumi:"accountDesc"`
	// The name of the mongodb account.
	AccountName *string `pulumi:"accountName"`
	// The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword *string `pulumi:"accountPassword"`
	// The privilege information of account.
	AccountPrivileges []AccountAccountPrivilege `pulumi:"accountPrivileges"`
	// The type of the account.
	AccountType *string `pulumi:"accountType"`
	// The database of the mongodb account.
	AuthDb *string `pulumi:"authDb"`
	// The id of the mongodb instance.
	InstanceId *string `pulumi:"instanceId"`
}

type AccountState struct {
	// The description of the mongodb account.
	AccountDesc pulumi.StringPtrInput
	// The name of the mongodb account.
	AccountName pulumi.StringPtrInput
	// The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword pulumi.StringPtrInput
	// The privilege information of account.
	AccountPrivileges AccountAccountPrivilegeArrayInput
	// The type of the account.
	AccountType pulumi.StringPtrInput
	// The database of the mongodb account.
	AuthDb pulumi.StringPtrInput
	// The id of the mongodb instance.
	InstanceId pulumi.StringPtrInput
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// The description of the mongodb account.
	AccountDesc *string `pulumi:"accountDesc"`
	// The name of the mongodb account.
	AccountName string `pulumi:"accountName"`
	// The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword string `pulumi:"accountPassword"`
	// The privilege information of account.
	AccountPrivileges []AccountAccountPrivilege `pulumi:"accountPrivileges"`
	// The database of the mongodb account.
	AuthDb *string `pulumi:"authDb"`
	// The id of the mongodb instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// The description of the mongodb account.
	AccountDesc pulumi.StringPtrInput
	// The name of the mongodb account.
	AccountName pulumi.StringInput
	// The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	AccountPassword pulumi.StringInput
	// The privilege information of account.
	AccountPrivileges AccountAccountPrivilegeArrayInput
	// The database of the mongodb account.
	AuthDb pulumi.StringPtrInput
	// The id of the mongodb instance.
	InstanceId pulumi.StringInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(ctx context.Context) AccountOutput
}

func (*Account) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (i *Account) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i *Account) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

// AccountArrayInput is an input type that accepts AccountArray and AccountArrayOutput values.
// You can construct a concrete instance of `AccountArrayInput` via:
//
//	AccountArray{ AccountArgs{...} }
type AccountArrayInput interface {
	pulumi.Input

	ToAccountArrayOutput() AccountArrayOutput
	ToAccountArrayOutputWithContext(context.Context) AccountArrayOutput
}

type AccountArray []AccountInput

func (AccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (i AccountArray) ToAccountArrayOutput() AccountArrayOutput {
	return i.ToAccountArrayOutputWithContext(context.Background())
}

func (i AccountArray) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountArrayOutput)
}

// AccountMapInput is an input type that accepts AccountMap and AccountMapOutput values.
// You can construct a concrete instance of `AccountMapInput` via:
//
//	AccountMap{ "key": AccountArgs{...} }
type AccountMapInput interface {
	pulumi.Input

	ToAccountMapOutput() AccountMapOutput
	ToAccountMapOutputWithContext(context.Context) AccountMapOutput
}

type AccountMap map[string]AccountInput

func (AccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (i AccountMap) ToAccountMapOutput() AccountMapOutput {
	return i.ToAccountMapOutputWithContext(context.Background())
}

func (i AccountMap) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMapOutput)
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

// The description of the mongodb account.
func (o AccountOutput) AccountDesc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Account) pulumi.StringPtrOutput { return v.AccountDesc }).(pulumi.StringPtrOutput)
}

// The name of the mongodb account.
func (o AccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// The password of the mongodb account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o AccountOutput) AccountPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountPassword }).(pulumi.StringOutput)
}

// The privilege information of account.
func (o AccountOutput) AccountPrivileges() AccountAccountPrivilegeArrayOutput {
	return o.ApplyT(func(v *Account) AccountAccountPrivilegeArrayOutput { return v.AccountPrivileges }).(AccountAccountPrivilegeArrayOutput)
}

// The type of the account.
func (o AccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountType }).(pulumi.StringOutput)
}

// The database of the mongodb account.
func (o AccountOutput) AuthDb() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AuthDb }).(pulumi.StringOutput)
}

// The id of the mongodb instance.
func (o AccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type AccountArrayOutput struct{ *pulumi.OutputState }

func (AccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (o AccountArrayOutput) ToAccountArrayOutput() AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) Index(i pulumi.IntInput) AccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Account {
		return vs[0].([]*Account)[vs[1].(int)]
	}).(AccountOutput)
}

type AccountMapOutput struct{ *pulumi.OutputState }

func (AccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (o AccountMapOutput) ToAccountMapOutput() AccountMapOutput {
	return o
}

func (o AccountMapOutput) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return o
}

func (o AccountMapOutput) MapIndex(k pulumi.StringInput) AccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Account {
		return vs[0].(map[string]*Account)[vs[1].(string)]
	}).(AccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountInput)(nil)).Elem(), &Account{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountArrayInput)(nil)).Elem(), AccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMapInput)(nil)).Elem(), AccountMap{})
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountArrayOutput{})
	pulumi.RegisterOutputType(AccountMapOutput{})
}
