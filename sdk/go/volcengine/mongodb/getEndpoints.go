// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of mongodb endpoints
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := mongodb.NewInstance(ctx, "fooInstance", &mongodb.InstanceArgs{
//				DbEngineVersion:      pulumi.String("MongoDB_4_0"),
//				InstanceType:         pulumi.String("ShardedCluster"),
//				SuperAccountPassword: pulumi.String("@acc-test-123"),
//				NodeSpec:             pulumi.String("mongo.shard.1c2g"),
//				MongosNodeSpec:       pulumi.String("mongo.mongos.1c2g"),
//				InstanceName:         pulumi.String("acc-test-mongo-shard"),
//				ChargeType:           pulumi.String("PostPaid"),
//				ProjectName:          pulumi.String("default"),
//				MongosNodeNumber:     pulumi.Int(2),
//				ShardNumber:          pulumi.Int(2),
//				StorageSpaceGb:       pulumi.Int(20),
//				SubnetId:             fooSubnet.ID(),
//				ZoneId:               pulumi.String(fooZones.Zones[0].Id),
//				Tags: mongodb.InstanceTagArray{
//					&mongodb.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			var fooAddress []*eip.Address
//			for index := 0; index < 2; index++ {
//				key0 := index
//				_ := index
//				__res, err := eip.NewAddress(ctx, fmt.Sprintf("fooAddress-%v", key0), &eip.AddressArgs{
//					BillingType: pulumi.String("PostPaidByBandwidth"),
//					Bandwidth:   pulumi.Int(1),
//					Isp:         pulumi.String("ChinaUnicom"),
//					Description: pulumi.String("acc-test"),
//					ProjectName: pulumi.String("default"),
//				})
//				if err != nil {
//					return err
//				}
//				fooAddress = append(fooAddress, __res)
//			}
//			var splat0 pulumi.StringArray
//			for _, val0 := range fooAddress {
//				splat0 = append(splat0, val0.ID())
//			}
//			_, err = mongodb.NewEndpoint(ctx, "fooPublic", &mongodb.EndpointArgs{
//				InstanceId:  fooInstance.ID(),
//				NetworkType: pulumi.String("Public"),
//				ObjectId:    fooInstance.MongosId,
//				MongosNodeIds: pulumi.StringArray{
//					fooInstance.Mongos.ApplyT(func(mongos []mongodb.InstanceMongo) (*string, error) {
//						return &mongos[0].MongosNodeId, nil
//					}).(pulumi.StringPtrOutput),
//					fooInstance.Mongos.ApplyT(func(mongos []mongodb.InstanceMongo) (*string, error) {
//						return &mongos[1].MongosNodeId, nil
//					}).(pulumi.StringPtrOutput),
//				},
//				EipIds: splat0,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodb.NewEndpoint(ctx, "fooPrivate", &mongodb.EndpointArgs{
//				InstanceId:  fooInstance.ID(),
//				NetworkType: pulumi.String("Private"),
//				ObjectId:    fooInstance.ConfigServersId,
//			})
//			if err != nil {
//				return err
//			}
//			_ = mongodb.GetEndpointsOutput(ctx, mongodb.GetEndpointsOutputArgs{
//				InstanceId: fooInstance.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetEndpoints(ctx *pulumi.Context, args *GetEndpointsArgs, opts ...pulumi.InvokeOption) (*GetEndpointsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEndpointsResult
	err := ctx.Invoke("volcengine:mongodb/getEndpoints:getEndpoints", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEndpoints.
type GetEndpointsArgs struct {
	// The instance ID to query.
	InstanceId *string `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getEndpoints.
type GetEndpointsResult struct {
	// The collection of mongodb endpoints query.
	Endpoints []GetEndpointsEndpoint `pulumi:"endpoints"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId *string `pulumi:"instanceId"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of mongodb endpoint query.
	TotalCount int `pulumi:"totalCount"`
}

func GetEndpointsOutput(ctx *pulumi.Context, args GetEndpointsOutputArgs, opts ...pulumi.InvokeOption) GetEndpointsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetEndpointsResult, error) {
			args := v.(GetEndpointsArgs)
			r, err := GetEndpoints(ctx, &args, opts...)
			var s GetEndpointsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetEndpointsResultOutput)
}

// A collection of arguments for invoking getEndpoints.
type GetEndpointsOutputArgs struct {
	// The instance ID to query.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetEndpointsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsArgs)(nil)).Elem()
}

// A collection of values returned by getEndpoints.
type GetEndpointsResultOutput struct{ *pulumi.OutputState }

func (GetEndpointsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsResult)(nil)).Elem()
}

func (o GetEndpointsResultOutput) ToGetEndpointsResultOutput() GetEndpointsResultOutput {
	return o
}

func (o GetEndpointsResultOutput) ToGetEndpointsResultOutputWithContext(ctx context.Context) GetEndpointsResultOutput {
	return o
}

// The collection of mongodb endpoints query.
func (o GetEndpointsResultOutput) Endpoints() GetEndpointsEndpointArrayOutput {
	return o.ApplyT(func(v GetEndpointsResult) []GetEndpointsEndpoint { return v.Endpoints }).(GetEndpointsEndpointArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEndpointsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEndpointsResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEndpointsResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

func (o GetEndpointsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEndpointsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of mongodb endpoint query.
func (o GetEndpointsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetEndpointsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEndpointsResultOutput{})
}
