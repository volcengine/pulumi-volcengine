// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage mongodb allow list
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodb.NewMongoAllowList(ctx, "foo", &mongodb.MongoAllowListArgs{
//				AllowList:     pulumi.String("10.1.1.3,10.2.3.0/24,10.1.1.1"),
//				AllowListDesc: pulumi.String("test1"),
//				AllowListName: pulumi.String("tf-test-hh"),
//				AllowListType: pulumi.String("IPv4"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mongodb allow list can be imported using the allowListId, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:mongodb/mongoAllowList:MongoAllowList default acl-d1fd76693bd54e658912e7337d5b****
//
// ```
type MongoAllowList struct {
	pulumi.CustomResourceState

	// IP address or IP address segment in CIDR format.
	AllowList pulumi.StringOutput `pulumi:"allowList"`
	// The description of allow list.
	AllowListDesc pulumi.StringOutput `pulumi:"allowListDesc"`
	// The name of allow list.
	AllowListName pulumi.StringOutput `pulumi:"allowListName"`
	// The IP address type of allow list, valid value contains `IPv4`.
	AllowListType pulumi.StringPtrOutput `pulumi:"allowListType"`
	// The modify mode. Only support Cover mode.
	ModifyMode pulumi.StringPtrOutput `pulumi:"modifyMode"`
}

// NewMongoAllowList registers a new resource with the given unique name, arguments, and options.
func NewMongoAllowList(ctx *pulumi.Context,
	name string, args *MongoAllowListArgs, opts ...pulumi.ResourceOption) (*MongoAllowList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllowList == nil {
		return nil, errors.New("invalid value for required argument 'AllowList'")
	}
	if args.AllowListName == nil {
		return nil, errors.New("invalid value for required argument 'AllowListName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource MongoAllowList
	err := ctx.RegisterResource("volcengine:mongodb/mongoAllowList:MongoAllowList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongoAllowList gets an existing MongoAllowList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongoAllowList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongoAllowListState, opts ...pulumi.ResourceOption) (*MongoAllowList, error) {
	var resource MongoAllowList
	err := ctx.ReadResource("volcengine:mongodb/mongoAllowList:MongoAllowList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongoAllowList resources.
type mongoAllowListState struct {
	// IP address or IP address segment in CIDR format.
	AllowList *string `pulumi:"allowList"`
	// The description of allow list.
	AllowListDesc *string `pulumi:"allowListDesc"`
	// The name of allow list.
	AllowListName *string `pulumi:"allowListName"`
	// The IP address type of allow list, valid value contains `IPv4`.
	AllowListType *string `pulumi:"allowListType"`
	// The modify mode. Only support Cover mode.
	ModifyMode *string `pulumi:"modifyMode"`
}

type MongoAllowListState struct {
	// IP address or IP address segment in CIDR format.
	AllowList pulumi.StringPtrInput
	// The description of allow list.
	AllowListDesc pulumi.StringPtrInput
	// The name of allow list.
	AllowListName pulumi.StringPtrInput
	// The IP address type of allow list, valid value contains `IPv4`.
	AllowListType pulumi.StringPtrInput
	// The modify mode. Only support Cover mode.
	ModifyMode pulumi.StringPtrInput
}

func (MongoAllowListState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoAllowListState)(nil)).Elem()
}

type mongoAllowListArgs struct {
	// IP address or IP address segment in CIDR format.
	AllowList string `pulumi:"allowList"`
	// The description of allow list.
	AllowListDesc *string `pulumi:"allowListDesc"`
	// The name of allow list.
	AllowListName string `pulumi:"allowListName"`
	// The IP address type of allow list, valid value contains `IPv4`.
	AllowListType *string `pulumi:"allowListType"`
	// The modify mode. Only support Cover mode.
	ModifyMode *string `pulumi:"modifyMode"`
}

// The set of arguments for constructing a MongoAllowList resource.
type MongoAllowListArgs struct {
	// IP address or IP address segment in CIDR format.
	AllowList pulumi.StringInput
	// The description of allow list.
	AllowListDesc pulumi.StringPtrInput
	// The name of allow list.
	AllowListName pulumi.StringInput
	// The IP address type of allow list, valid value contains `IPv4`.
	AllowListType pulumi.StringPtrInput
	// The modify mode. Only support Cover mode.
	ModifyMode pulumi.StringPtrInput
}

func (MongoAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongoAllowListArgs)(nil)).Elem()
}

type MongoAllowListInput interface {
	pulumi.Input

	ToMongoAllowListOutput() MongoAllowListOutput
	ToMongoAllowListOutputWithContext(ctx context.Context) MongoAllowListOutput
}

func (*MongoAllowList) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoAllowList)(nil)).Elem()
}

func (i *MongoAllowList) ToMongoAllowListOutput() MongoAllowListOutput {
	return i.ToMongoAllowListOutputWithContext(context.Background())
}

func (i *MongoAllowList) ToMongoAllowListOutputWithContext(ctx context.Context) MongoAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoAllowListOutput)
}

// MongoAllowListArrayInput is an input type that accepts MongoAllowListArray and MongoAllowListArrayOutput values.
// You can construct a concrete instance of `MongoAllowListArrayInput` via:
//
//	MongoAllowListArray{ MongoAllowListArgs{...} }
type MongoAllowListArrayInput interface {
	pulumi.Input

	ToMongoAllowListArrayOutput() MongoAllowListArrayOutput
	ToMongoAllowListArrayOutputWithContext(context.Context) MongoAllowListArrayOutput
}

type MongoAllowListArray []MongoAllowListInput

func (MongoAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoAllowList)(nil)).Elem()
}

func (i MongoAllowListArray) ToMongoAllowListArrayOutput() MongoAllowListArrayOutput {
	return i.ToMongoAllowListArrayOutputWithContext(context.Background())
}

func (i MongoAllowListArray) ToMongoAllowListArrayOutputWithContext(ctx context.Context) MongoAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoAllowListArrayOutput)
}

// MongoAllowListMapInput is an input type that accepts MongoAllowListMap and MongoAllowListMapOutput values.
// You can construct a concrete instance of `MongoAllowListMapInput` via:
//
//	MongoAllowListMap{ "key": MongoAllowListArgs{...} }
type MongoAllowListMapInput interface {
	pulumi.Input

	ToMongoAllowListMapOutput() MongoAllowListMapOutput
	ToMongoAllowListMapOutputWithContext(context.Context) MongoAllowListMapOutput
}

type MongoAllowListMap map[string]MongoAllowListInput

func (MongoAllowListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoAllowList)(nil)).Elem()
}

func (i MongoAllowListMap) ToMongoAllowListMapOutput() MongoAllowListMapOutput {
	return i.ToMongoAllowListMapOutputWithContext(context.Background())
}

func (i MongoAllowListMap) ToMongoAllowListMapOutputWithContext(ctx context.Context) MongoAllowListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoAllowListMapOutput)
}

type MongoAllowListOutput struct{ *pulumi.OutputState }

func (MongoAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongoAllowList)(nil)).Elem()
}

func (o MongoAllowListOutput) ToMongoAllowListOutput() MongoAllowListOutput {
	return o
}

func (o MongoAllowListOutput) ToMongoAllowListOutputWithContext(ctx context.Context) MongoAllowListOutput {
	return o
}

// IP address or IP address segment in CIDR format.
func (o MongoAllowListOutput) AllowList() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoAllowList) pulumi.StringOutput { return v.AllowList }).(pulumi.StringOutput)
}

// The description of allow list.
func (o MongoAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoAllowList) pulumi.StringOutput { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The name of allow list.
func (o MongoAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v *MongoAllowList) pulumi.StringOutput { return v.AllowListName }).(pulumi.StringOutput)
}

// The IP address type of allow list, valid value contains `IPv4`.
func (o MongoAllowListOutput) AllowListType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoAllowList) pulumi.StringPtrOutput { return v.AllowListType }).(pulumi.StringPtrOutput)
}

// The modify mode. Only support Cover mode.
func (o MongoAllowListOutput) ModifyMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *MongoAllowList) pulumi.StringPtrOutput { return v.ModifyMode }).(pulumi.StringPtrOutput)
}

type MongoAllowListArrayOutput struct{ *pulumi.OutputState }

func (MongoAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongoAllowList)(nil)).Elem()
}

func (o MongoAllowListArrayOutput) ToMongoAllowListArrayOutput() MongoAllowListArrayOutput {
	return o
}

func (o MongoAllowListArrayOutput) ToMongoAllowListArrayOutputWithContext(ctx context.Context) MongoAllowListArrayOutput {
	return o
}

func (o MongoAllowListArrayOutput) Index(i pulumi.IntInput) MongoAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongoAllowList {
		return vs[0].([]*MongoAllowList)[vs[1].(int)]
	}).(MongoAllowListOutput)
}

type MongoAllowListMapOutput struct{ *pulumi.OutputState }

func (MongoAllowListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongoAllowList)(nil)).Elem()
}

func (o MongoAllowListMapOutput) ToMongoAllowListMapOutput() MongoAllowListMapOutput {
	return o
}

func (o MongoAllowListMapOutput) ToMongoAllowListMapOutputWithContext(ctx context.Context) MongoAllowListMapOutput {
	return o
}

func (o MongoAllowListMapOutput) MapIndex(k pulumi.StringInput) MongoAllowListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongoAllowList {
		return vs[0].(map[string]*MongoAllowList)[vs[1].(string)]
	}).(MongoAllowListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongoAllowListInput)(nil)).Elem(), &MongoAllowList{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoAllowListArrayInput)(nil)).Elem(), MongoAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoAllowListMapInput)(nil)).Elem(), MongoAllowListMap{})
	pulumi.RegisterOutputType(MongoAllowListOutput{})
	pulumi.RegisterOutputType(MongoAllowListArrayOutput{})
	pulumi.RegisterOutputType(MongoAllowListMapOutput{})
}
