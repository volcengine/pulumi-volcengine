// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of mongodb ssl states
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := mongodb.NewInstance(ctx, "fooInstance", &mongodb.InstanceArgs{
//				DbEngineVersion:      pulumi.String("MongoDB_4_0"),
//				InstanceType:         pulumi.String("ReplicaSet"),
//				SuperAccountPassword: pulumi.String("@acc-test-123"),
//				NodeSpec:             pulumi.String("mongo.2c4g"),
//				MongosNodeSpec:       pulumi.String("mongo.mongos.2c4g"),
//				InstanceName:         pulumi.String("acc-test-mongo-replica"),
//				ChargeType:           pulumi.String("PostPaid"),
//				ProjectName:          pulumi.String("default"),
//				MongosNodeNumber:     pulumi.Int(2),
//				ShardNumber:          pulumi.Int(3),
//				StorageSpaceGb:       pulumi.Int(20),
//				SubnetId:             fooSubnet.ID(),
//				ZoneId:               pulumi.String(fooZones.Zones[0].Id),
//				Tags: mongodb.InstanceTagArray{
//					&mongodb.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodb.NewSslState(ctx, "fooSslState", &mongodb.SslStateArgs{
//				InstanceId: fooInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_ = mongodb.GetSslStatesOutput(ctx, mongodb.GetSslStatesOutputArgs{
//				InstanceId: fooInstance.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.mongodb.SslStates has been deprecated in favor of volcengine.mongodb.getSslStates
func SslStates(ctx *pulumi.Context, args *SslStatesArgs, opts ...pulumi.InvokeOption) (*SslStatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SslStatesResult
	err := ctx.Invoke("volcengine:mongodb/sslStates:SslStates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking SslStates.
type SslStatesArgs struct {
	// The mongodb instance ID to query.
	InstanceId string `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by SslStates.
type SslStatesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The mongodb instance id.
	InstanceId string  `pulumi:"instanceId"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of mongodb ssl state query.
	SslStates []SslStatesSslState `pulumi:"sslStates"`
	// The total count of mongodb ssl state query.
	TotalCount int `pulumi:"totalCount"`
}

func SslStatesOutput(ctx *pulumi.Context, args SslStatesOutputArgs, opts ...pulumi.InvokeOption) SslStatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (SslStatesResult, error) {
			args := v.(SslStatesArgs)
			r, err := SslStates(ctx, &args, opts...)
			var s SslStatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(SslStatesResultOutput)
}

// A collection of arguments for invoking SslStates.
type SslStatesOutputArgs struct {
	// The mongodb instance ID to query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (SslStatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslStatesArgs)(nil)).Elem()
}

// A collection of values returned by SslStates.
type SslStatesResultOutput struct{ *pulumi.OutputState }

func (SslStatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslStatesResult)(nil)).Elem()
}

func (o SslStatesResultOutput) ToSslStatesResultOutput() SslStatesResultOutput {
	return o
}

func (o SslStatesResultOutput) ToSslStatesResultOutputWithContext(ctx context.Context) SslStatesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o SslStatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SslStatesResult) string { return v.Id }).(pulumi.StringOutput)
}

// The mongodb instance id.
func (o SslStatesResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v SslStatesResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o SslStatesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslStatesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of mongodb ssl state query.
func (o SslStatesResultOutput) SslStates() SslStatesSslStateArrayOutput {
	return o.ApplyT(func(v SslStatesResult) []SslStatesSslState { return v.SslStates }).(SslStatesSslStateArrayOutput)
}

// The total count of mongodb ssl state query.
func (o SslStatesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v SslStatesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(SslStatesResultOutput{})
}
