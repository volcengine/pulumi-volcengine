// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type AccountsAccount struct {
	// The name of account, current support only `root`.
	AccountName string `pulumi:"accountName"`
	// The privilege info of mongo instance.
	AccountPrivileges []AccountsAccountAccountPrivilege `pulumi:"accountPrivileges"`
	// The type of account.
	AccountType string `pulumi:"accountType"`
}

// AccountsAccountInput is an input type that accepts AccountsAccountArgs and AccountsAccountOutput values.
// You can construct a concrete instance of `AccountsAccountInput` via:
//
//	AccountsAccountArgs{...}
type AccountsAccountInput interface {
	pulumi.Input

	ToAccountsAccountOutput() AccountsAccountOutput
	ToAccountsAccountOutputWithContext(context.Context) AccountsAccountOutput
}

type AccountsAccountArgs struct {
	// The name of account, current support only `root`.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The privilege info of mongo instance.
	AccountPrivileges AccountsAccountAccountPrivilegeArrayInput `pulumi:"accountPrivileges"`
	// The type of account.
	AccountType pulumi.StringInput `pulumi:"accountType"`
}

func (AccountsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccount)(nil)).Elem()
}

func (i AccountsAccountArgs) ToAccountsAccountOutput() AccountsAccountOutput {
	return i.ToAccountsAccountOutputWithContext(context.Background())
}

func (i AccountsAccountArgs) ToAccountsAccountOutputWithContext(ctx context.Context) AccountsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountOutput)
}

// AccountsAccountArrayInput is an input type that accepts AccountsAccountArray and AccountsAccountArrayOutput values.
// You can construct a concrete instance of `AccountsAccountArrayInput` via:
//
//	AccountsAccountArray{ AccountsAccountArgs{...} }
type AccountsAccountArrayInput interface {
	pulumi.Input

	ToAccountsAccountArrayOutput() AccountsAccountArrayOutput
	ToAccountsAccountArrayOutputWithContext(context.Context) AccountsAccountArrayOutput
}

type AccountsAccountArray []AccountsAccountInput

func (AccountsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccount)(nil)).Elem()
}

func (i AccountsAccountArray) ToAccountsAccountArrayOutput() AccountsAccountArrayOutput {
	return i.ToAccountsAccountArrayOutputWithContext(context.Background())
}

func (i AccountsAccountArray) ToAccountsAccountArrayOutputWithContext(ctx context.Context) AccountsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountArrayOutput)
}

type AccountsAccountOutput struct{ *pulumi.OutputState }

func (AccountsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccount)(nil)).Elem()
}

func (o AccountsAccountOutput) ToAccountsAccountOutput() AccountsAccountOutput {
	return o
}

func (o AccountsAccountOutput) ToAccountsAccountOutputWithContext(ctx context.Context) AccountsAccountOutput {
	return o
}

// The name of account, current support only `root`.
func (o AccountsAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountName }).(pulumi.StringOutput)
}

// The privilege info of mongo instance.
func (o AccountsAccountOutput) AccountPrivileges() AccountsAccountAccountPrivilegeArrayOutput {
	return o.ApplyT(func(v AccountsAccount) []AccountsAccountAccountPrivilege { return v.AccountPrivileges }).(AccountsAccountAccountPrivilegeArrayOutput)
}

// The type of account.
func (o AccountsAccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountType }).(pulumi.StringOutput)
}

type AccountsAccountArrayOutput struct{ *pulumi.OutputState }

func (AccountsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccount)(nil)).Elem()
}

func (o AccountsAccountArrayOutput) ToAccountsAccountArrayOutput() AccountsAccountArrayOutput {
	return o
}

func (o AccountsAccountArrayOutput) ToAccountsAccountArrayOutputWithContext(ctx context.Context) AccountsAccountArrayOutput {
	return o
}

func (o AccountsAccountArrayOutput) Index(i pulumi.IntInput) AccountsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountsAccount {
		return vs[0].([]AccountsAccount)[vs[1].(int)]
	}).(AccountsAccountOutput)
}

type AccountsAccountAccountPrivilege struct {
	// The Name of DB.
	DbName string `pulumi:"dbName"`
	// The Name of role.
	RoleName string `pulumi:"roleName"`
}

// AccountsAccountAccountPrivilegeInput is an input type that accepts AccountsAccountAccountPrivilegeArgs and AccountsAccountAccountPrivilegeOutput values.
// You can construct a concrete instance of `AccountsAccountAccountPrivilegeInput` via:
//
//	AccountsAccountAccountPrivilegeArgs{...}
type AccountsAccountAccountPrivilegeInput interface {
	pulumi.Input

	ToAccountsAccountAccountPrivilegeOutput() AccountsAccountAccountPrivilegeOutput
	ToAccountsAccountAccountPrivilegeOutputWithContext(context.Context) AccountsAccountAccountPrivilegeOutput
}

type AccountsAccountAccountPrivilegeArgs struct {
	// The Name of DB.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// The Name of role.
	RoleName pulumi.StringInput `pulumi:"roleName"`
}

func (AccountsAccountAccountPrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (i AccountsAccountAccountPrivilegeArgs) ToAccountsAccountAccountPrivilegeOutput() AccountsAccountAccountPrivilegeOutput {
	return i.ToAccountsAccountAccountPrivilegeOutputWithContext(context.Background())
}

func (i AccountsAccountAccountPrivilegeArgs) ToAccountsAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountAccountPrivilegeOutput)
}

// AccountsAccountAccountPrivilegeArrayInput is an input type that accepts AccountsAccountAccountPrivilegeArray and AccountsAccountAccountPrivilegeArrayOutput values.
// You can construct a concrete instance of `AccountsAccountAccountPrivilegeArrayInput` via:
//
//	AccountsAccountAccountPrivilegeArray{ AccountsAccountAccountPrivilegeArgs{...} }
type AccountsAccountAccountPrivilegeArrayInput interface {
	pulumi.Input

	ToAccountsAccountAccountPrivilegeArrayOutput() AccountsAccountAccountPrivilegeArrayOutput
	ToAccountsAccountAccountPrivilegeArrayOutputWithContext(context.Context) AccountsAccountAccountPrivilegeArrayOutput
}

type AccountsAccountAccountPrivilegeArray []AccountsAccountAccountPrivilegeInput

func (AccountsAccountAccountPrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (i AccountsAccountAccountPrivilegeArray) ToAccountsAccountAccountPrivilegeArrayOutput() AccountsAccountAccountPrivilegeArrayOutput {
	return i.ToAccountsAccountAccountPrivilegeArrayOutputWithContext(context.Background())
}

func (i AccountsAccountAccountPrivilegeArray) ToAccountsAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountAccountPrivilegeArrayOutput)
}

type AccountsAccountAccountPrivilegeOutput struct{ *pulumi.OutputState }

func (AccountsAccountAccountPrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (o AccountsAccountAccountPrivilegeOutput) ToAccountsAccountAccountPrivilegeOutput() AccountsAccountAccountPrivilegeOutput {
	return o
}

func (o AccountsAccountAccountPrivilegeOutput) ToAccountsAccountAccountPrivilegeOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeOutput {
	return o
}

// The Name of DB.
func (o AccountsAccountAccountPrivilegeOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccountAccountPrivilege) string { return v.DbName }).(pulumi.StringOutput)
}

// The Name of role.
func (o AccountsAccountAccountPrivilegeOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccountAccountPrivilege) string { return v.RoleName }).(pulumi.StringOutput)
}

type AccountsAccountAccountPrivilegeArrayOutput struct{ *pulumi.OutputState }

func (AccountsAccountAccountPrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccountAccountPrivilege)(nil)).Elem()
}

func (o AccountsAccountAccountPrivilegeArrayOutput) ToAccountsAccountAccountPrivilegeArrayOutput() AccountsAccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountsAccountAccountPrivilegeArrayOutput) ToAccountsAccountAccountPrivilegeArrayOutputWithContext(ctx context.Context) AccountsAccountAccountPrivilegeArrayOutput {
	return o
}

func (o AccountsAccountAccountPrivilegeArrayOutput) Index(i pulumi.IntInput) AccountsAccountAccountPrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountsAccountAccountPrivilege {
		return vs[0].([]AccountsAccountAccountPrivilege)[vs[1].(int)]
	}).(AccountsAccountAccountPrivilegeOutput)
}

type EndpointsEndpoint struct {
	// The list of mongodb addresses.
	DbAddresses []EndpointsEndpointDbAddress `pulumi:"dbAddresses"`
	// The ID of endpoint.
	EndpointId string `pulumi:"endpointId"`
	// The endpoint information.
	EndpointStr string `pulumi:"endpointStr"`
	// The node type corresponding to the endpoint.
	EndpointType string `pulumi:"endpointType"`
	// The network type of endpoint.
	NetworkType string `pulumi:"networkType"`
	// The object ID corresponding to the endpoint.
	ObjectId string `pulumi:"objectId"`
	// The subnet ID.
	SubnetId string `pulumi:"subnetId"`
	// The VPC ID.
	VpcId string `pulumi:"vpcId"`
}

// EndpointsEndpointInput is an input type that accepts EndpointsEndpointArgs and EndpointsEndpointOutput values.
// You can construct a concrete instance of `EndpointsEndpointInput` via:
//
//	EndpointsEndpointArgs{...}
type EndpointsEndpointInput interface {
	pulumi.Input

	ToEndpointsEndpointOutput() EndpointsEndpointOutput
	ToEndpointsEndpointOutputWithContext(context.Context) EndpointsEndpointOutput
}

type EndpointsEndpointArgs struct {
	// The list of mongodb addresses.
	DbAddresses EndpointsEndpointDbAddressArrayInput `pulumi:"dbAddresses"`
	// The ID of endpoint.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The endpoint information.
	EndpointStr pulumi.StringInput `pulumi:"endpointStr"`
	// The node type corresponding to the endpoint.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The network type of endpoint.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The object ID corresponding to the endpoint.
	ObjectId pulumi.StringInput `pulumi:"objectId"`
	// The subnet ID.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The VPC ID.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (EndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpoint)(nil)).Elem()
}

func (i EndpointsEndpointArgs) ToEndpointsEndpointOutput() EndpointsEndpointOutput {
	return i.ToEndpointsEndpointOutputWithContext(context.Background())
}

func (i EndpointsEndpointArgs) ToEndpointsEndpointOutputWithContext(ctx context.Context) EndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointOutput)
}

// EndpointsEndpointArrayInput is an input type that accepts EndpointsEndpointArray and EndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `EndpointsEndpointArrayInput` via:
//
//	EndpointsEndpointArray{ EndpointsEndpointArgs{...} }
type EndpointsEndpointArrayInput interface {
	pulumi.Input

	ToEndpointsEndpointArrayOutput() EndpointsEndpointArrayOutput
	ToEndpointsEndpointArrayOutputWithContext(context.Context) EndpointsEndpointArrayOutput
}

type EndpointsEndpointArray []EndpointsEndpointInput

func (EndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpoint)(nil)).Elem()
}

func (i EndpointsEndpointArray) ToEndpointsEndpointArrayOutput() EndpointsEndpointArrayOutput {
	return i.ToEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointsEndpointArray) ToEndpointsEndpointArrayOutputWithContext(ctx context.Context) EndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointArrayOutput)
}

type EndpointsEndpointOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpoint)(nil)).Elem()
}

func (o EndpointsEndpointOutput) ToEndpointsEndpointOutput() EndpointsEndpointOutput {
	return o
}

func (o EndpointsEndpointOutput) ToEndpointsEndpointOutputWithContext(ctx context.Context) EndpointsEndpointOutput {
	return o
}

// The list of mongodb addresses.
func (o EndpointsEndpointOutput) DbAddresses() EndpointsEndpointDbAddressArrayOutput {
	return o.ApplyT(func(v EndpointsEndpoint) []EndpointsEndpointDbAddress { return v.DbAddresses }).(EndpointsEndpointDbAddressArrayOutput)
}

// The ID of endpoint.
func (o EndpointsEndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The endpoint information.
func (o EndpointsEndpointOutput) EndpointStr() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.EndpointStr }).(pulumi.StringOutput)
}

// The node type corresponding to the endpoint.
func (o EndpointsEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The network type of endpoint.
func (o EndpointsEndpointOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The object ID corresponding to the endpoint.
func (o EndpointsEndpointOutput) ObjectId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.ObjectId }).(pulumi.StringOutput)
}

// The subnet ID.
func (o EndpointsEndpointOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The VPC ID.
func (o EndpointsEndpointOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.VpcId }).(pulumi.StringOutput)
}

type EndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpoint)(nil)).Elem()
}

func (o EndpointsEndpointArrayOutput) ToEndpointsEndpointArrayOutput() EndpointsEndpointArrayOutput {
	return o
}

func (o EndpointsEndpointArrayOutput) ToEndpointsEndpointArrayOutputWithContext(ctx context.Context) EndpointsEndpointArrayOutput {
	return o
}

func (o EndpointsEndpointArrayOutput) Index(i pulumi.IntInput) EndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointsEndpoint {
		return vs[0].([]EndpointsEndpoint)[vs[1].(int)]
	}).(EndpointsEndpointOutput)
}

type EndpointsEndpointDbAddress struct {
	// The domain of mongodb connection.
	AddressDomain string `pulumi:"addressDomain"`
	// The IP of mongodb connection.
	AddressIp string `pulumi:"addressIp"`
	// The port of mongodb connection.
	AddressPort string `pulumi:"addressPort"`
	// The connection type of mongodb.
	AddressType string `pulumi:"addressType"`
	// The EIP ID bound to the instance's public network address.
	EipId string `pulumi:"eipId"`
	// The node ID.
	NodeId string `pulumi:"nodeId"`
}

// EndpointsEndpointDbAddressInput is an input type that accepts EndpointsEndpointDbAddressArgs and EndpointsEndpointDbAddressOutput values.
// You can construct a concrete instance of `EndpointsEndpointDbAddressInput` via:
//
//	EndpointsEndpointDbAddressArgs{...}
type EndpointsEndpointDbAddressInput interface {
	pulumi.Input

	ToEndpointsEndpointDbAddressOutput() EndpointsEndpointDbAddressOutput
	ToEndpointsEndpointDbAddressOutputWithContext(context.Context) EndpointsEndpointDbAddressOutput
}

type EndpointsEndpointDbAddressArgs struct {
	// The domain of mongodb connection.
	AddressDomain pulumi.StringInput `pulumi:"addressDomain"`
	// The IP of mongodb connection.
	AddressIp pulumi.StringInput `pulumi:"addressIp"`
	// The port of mongodb connection.
	AddressPort pulumi.StringInput `pulumi:"addressPort"`
	// The connection type of mongodb.
	AddressType pulumi.StringInput `pulumi:"addressType"`
	// The EIP ID bound to the instance's public network address.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
}

func (EndpointsEndpointDbAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpointDbAddress)(nil)).Elem()
}

func (i EndpointsEndpointDbAddressArgs) ToEndpointsEndpointDbAddressOutput() EndpointsEndpointDbAddressOutput {
	return i.ToEndpointsEndpointDbAddressOutputWithContext(context.Background())
}

func (i EndpointsEndpointDbAddressArgs) ToEndpointsEndpointDbAddressOutputWithContext(ctx context.Context) EndpointsEndpointDbAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointDbAddressOutput)
}

// EndpointsEndpointDbAddressArrayInput is an input type that accepts EndpointsEndpointDbAddressArray and EndpointsEndpointDbAddressArrayOutput values.
// You can construct a concrete instance of `EndpointsEndpointDbAddressArrayInput` via:
//
//	EndpointsEndpointDbAddressArray{ EndpointsEndpointDbAddressArgs{...} }
type EndpointsEndpointDbAddressArrayInput interface {
	pulumi.Input

	ToEndpointsEndpointDbAddressArrayOutput() EndpointsEndpointDbAddressArrayOutput
	ToEndpointsEndpointDbAddressArrayOutputWithContext(context.Context) EndpointsEndpointDbAddressArrayOutput
}

type EndpointsEndpointDbAddressArray []EndpointsEndpointDbAddressInput

func (EndpointsEndpointDbAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpointDbAddress)(nil)).Elem()
}

func (i EndpointsEndpointDbAddressArray) ToEndpointsEndpointDbAddressArrayOutput() EndpointsEndpointDbAddressArrayOutput {
	return i.ToEndpointsEndpointDbAddressArrayOutputWithContext(context.Background())
}

func (i EndpointsEndpointDbAddressArray) ToEndpointsEndpointDbAddressArrayOutputWithContext(ctx context.Context) EndpointsEndpointDbAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointDbAddressArrayOutput)
}

type EndpointsEndpointDbAddressOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointDbAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpointDbAddress)(nil)).Elem()
}

func (o EndpointsEndpointDbAddressOutput) ToEndpointsEndpointDbAddressOutput() EndpointsEndpointDbAddressOutput {
	return o
}

func (o EndpointsEndpointDbAddressOutput) ToEndpointsEndpointDbAddressOutputWithContext(ctx context.Context) EndpointsEndpointDbAddressOutput {
	return o
}

// The domain of mongodb connection.
func (o EndpointsEndpointDbAddressOutput) AddressDomain() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointDbAddress) string { return v.AddressDomain }).(pulumi.StringOutput)
}

// The IP of mongodb connection.
func (o EndpointsEndpointDbAddressOutput) AddressIp() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointDbAddress) string { return v.AddressIp }).(pulumi.StringOutput)
}

// The port of mongodb connection.
func (o EndpointsEndpointDbAddressOutput) AddressPort() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointDbAddress) string { return v.AddressPort }).(pulumi.StringOutput)
}

// The connection type of mongodb.
func (o EndpointsEndpointDbAddressOutput) AddressType() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointDbAddress) string { return v.AddressType }).(pulumi.StringOutput)
}

// The EIP ID bound to the instance's public network address.
func (o EndpointsEndpointDbAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointDbAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The node ID.
func (o EndpointsEndpointDbAddressOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointDbAddress) string { return v.NodeId }).(pulumi.StringOutput)
}

type EndpointsEndpointDbAddressArrayOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointDbAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpointDbAddress)(nil)).Elem()
}

func (o EndpointsEndpointDbAddressArrayOutput) ToEndpointsEndpointDbAddressArrayOutput() EndpointsEndpointDbAddressArrayOutput {
	return o
}

func (o EndpointsEndpointDbAddressArrayOutput) ToEndpointsEndpointDbAddressArrayOutputWithContext(ctx context.Context) EndpointsEndpointDbAddressArrayOutput {
	return o
}

func (o EndpointsEndpointDbAddressArrayOutput) Index(i pulumi.IntInput) EndpointsEndpointDbAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointsEndpointDbAddress {
		return vs[0].([]EndpointsEndpointDbAddress)[vs[1].(int)]
	}).(EndpointsEndpointDbAddressOutput)
}

type InstanceParameterLogsParameterChangeLogs struct {
	// The modifying time of parameter.
	ModifyTime string `pulumi:"modifyTime"`
	// The new parameter value.
	NewParameterValue string `pulumi:"newParameterValue"`
	// The old parameter value.
	OldParameterValue string `pulumi:"oldParameterValue"`
	// The parameter name.
	ParameterName string `pulumi:"parameterName"`
	// The node type to which the parameter belongs.
	ParameterRole string `pulumi:"parameterRole"`
	// The status of parameter change.
	ParameterStatus string `pulumi:"parameterStatus"`
}

// InstanceParameterLogsParameterChangeLogsInput is an input type that accepts InstanceParameterLogsParameterChangeLogsArgs and InstanceParameterLogsParameterChangeLogsOutput values.
// You can construct a concrete instance of `InstanceParameterLogsParameterChangeLogsInput` via:
//
//	InstanceParameterLogsParameterChangeLogsArgs{...}
type InstanceParameterLogsParameterChangeLogsInput interface {
	pulumi.Input

	ToInstanceParameterLogsParameterChangeLogsOutput() InstanceParameterLogsParameterChangeLogsOutput
	ToInstanceParameterLogsParameterChangeLogsOutputWithContext(context.Context) InstanceParameterLogsParameterChangeLogsOutput
}

type InstanceParameterLogsParameterChangeLogsArgs struct {
	// The modifying time of parameter.
	ModifyTime pulumi.StringInput `pulumi:"modifyTime"`
	// The new parameter value.
	NewParameterValue pulumi.StringInput `pulumi:"newParameterValue"`
	// The old parameter value.
	OldParameterValue pulumi.StringInput `pulumi:"oldParameterValue"`
	// The parameter name.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// The node type to which the parameter belongs.
	ParameterRole pulumi.StringInput `pulumi:"parameterRole"`
	// The status of parameter change.
	ParameterStatus pulumi.StringInput `pulumi:"parameterStatus"`
}

func (InstanceParameterLogsParameterChangeLogsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameterLogsParameterChangeLogs)(nil)).Elem()
}

func (i InstanceParameterLogsParameterChangeLogsArgs) ToInstanceParameterLogsParameterChangeLogsOutput() InstanceParameterLogsParameterChangeLogsOutput {
	return i.ToInstanceParameterLogsParameterChangeLogsOutputWithContext(context.Background())
}

func (i InstanceParameterLogsParameterChangeLogsArgs) ToInstanceParameterLogsParameterChangeLogsOutputWithContext(ctx context.Context) InstanceParameterLogsParameterChangeLogsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterLogsParameterChangeLogsOutput)
}

type InstanceParameterLogsParameterChangeLogsOutput struct{ *pulumi.OutputState }

func (InstanceParameterLogsParameterChangeLogsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameterLogsParameterChangeLogs)(nil)).Elem()
}

func (o InstanceParameterLogsParameterChangeLogsOutput) ToInstanceParameterLogsParameterChangeLogsOutput() InstanceParameterLogsParameterChangeLogsOutput {
	return o
}

func (o InstanceParameterLogsParameterChangeLogsOutput) ToInstanceParameterLogsParameterChangeLogsOutputWithContext(ctx context.Context) InstanceParameterLogsParameterChangeLogsOutput {
	return o
}

// The modifying time of parameter.
func (o InstanceParameterLogsParameterChangeLogsOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameterLogsParameterChangeLogs) string { return v.ModifyTime }).(pulumi.StringOutput)
}

// The new parameter value.
func (o InstanceParameterLogsParameterChangeLogsOutput) NewParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameterLogsParameterChangeLogs) string { return v.NewParameterValue }).(pulumi.StringOutput)
}

// The old parameter value.
func (o InstanceParameterLogsParameterChangeLogsOutput) OldParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameterLogsParameterChangeLogs) string { return v.OldParameterValue }).(pulumi.StringOutput)
}

// The parameter name.
func (o InstanceParameterLogsParameterChangeLogsOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameterLogsParameterChangeLogs) string { return v.ParameterName }).(pulumi.StringOutput)
}

// The node type to which the parameter belongs.
func (o InstanceParameterLogsParameterChangeLogsOutput) ParameterRole() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameterLogsParameterChangeLogs) string { return v.ParameterRole }).(pulumi.StringOutput)
}

// The status of parameter change.
func (o InstanceParameterLogsParameterChangeLogsOutput) ParameterStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameterLogsParameterChangeLogs) string { return v.ParameterStatus }).(pulumi.StringOutput)
}

type InstanceParametersParameters struct {
	// The database engine.
	DbEngine string `pulumi:"dbEngine"`
	// The database engine version.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The instance ID to query.
	InstanceId string `pulumi:"instanceId"`
	// The list of parameters.
	InstanceParameters []InstanceParametersParametersInstanceParameter `pulumi:"instanceParameters"`
	// The total parameters queried.
	Total string `pulumi:"total"`
}

// InstanceParametersParametersInput is an input type that accepts InstanceParametersParametersArgs and InstanceParametersParametersOutput values.
// You can construct a concrete instance of `InstanceParametersParametersInput` via:
//
//	InstanceParametersParametersArgs{...}
type InstanceParametersParametersInput interface {
	pulumi.Input

	ToInstanceParametersParametersOutput() InstanceParametersParametersOutput
	ToInstanceParametersParametersOutputWithContext(context.Context) InstanceParametersParametersOutput
}

type InstanceParametersParametersArgs struct {
	// The database engine.
	DbEngine pulumi.StringInput `pulumi:"dbEngine"`
	// The database engine version.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// The instance ID to query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The list of parameters.
	InstanceParameters InstanceParametersParametersInstanceParameterArrayInput `pulumi:"instanceParameters"`
	// The total parameters queried.
	Total pulumi.StringInput `pulumi:"total"`
}

func (InstanceParametersParametersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParametersParameters)(nil)).Elem()
}

func (i InstanceParametersParametersArgs) ToInstanceParametersParametersOutput() InstanceParametersParametersOutput {
	return i.ToInstanceParametersParametersOutputWithContext(context.Background())
}

func (i InstanceParametersParametersArgs) ToInstanceParametersParametersOutputWithContext(ctx context.Context) InstanceParametersParametersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParametersParametersOutput)
}

type InstanceParametersParametersOutput struct{ *pulumi.OutputState }

func (InstanceParametersParametersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParametersParameters)(nil)).Elem()
}

func (o InstanceParametersParametersOutput) ToInstanceParametersParametersOutput() InstanceParametersParametersOutput {
	return o
}

func (o InstanceParametersParametersOutput) ToInstanceParametersParametersOutputWithContext(ctx context.Context) InstanceParametersParametersOutput {
	return o
}

// The database engine.
func (o InstanceParametersParametersOutput) DbEngine() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParameters) string { return v.DbEngine }).(pulumi.StringOutput)
}

// The database engine version.
func (o InstanceParametersParametersOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParameters) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The instance ID to query.
func (o InstanceParametersParametersOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParameters) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The list of parameters.
func (o InstanceParametersParametersOutput) InstanceParameters() InstanceParametersParametersInstanceParameterArrayOutput {
	return o.ApplyT(func(v InstanceParametersParameters) []InstanceParametersParametersInstanceParameter {
		return v.InstanceParameters
	}).(InstanceParametersParametersInstanceParameterArrayOutput)
}

// The total parameters queried.
func (o InstanceParametersParametersOutput) Total() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParameters) string { return v.Total }).(pulumi.StringOutput)
}

type InstanceParametersParametersInstanceParameter struct {
	// The checking code of parameter.
	CheckingCode string `pulumi:"checkingCode"`
	// Whether the parameter supports modifying.
	ForceModify bool `pulumi:"forceModify"`
	// Does the new parameter value need to restart the instance to take effect after modification.
	ForceRestart bool `pulumi:"forceRestart"`
	// The default value of parameter.
	ParameterDefaultValue string `pulumi:"parameterDefaultValue"`
	// The description of parameter.
	ParameterDescription string `pulumi:"parameterDescription"`
	// The name of parameter.
	ParameterName string `pulumi:"parameterName"`
	// The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.
	ParameterRole string `pulumi:"parameterRole"`
	// The type of parameter value.
	ParameterType string `pulumi:"parameterType"`
	// The value of parameter.
	ParameterValue string `pulumi:"parameterValue"`
}

// InstanceParametersParametersInstanceParameterInput is an input type that accepts InstanceParametersParametersInstanceParameterArgs and InstanceParametersParametersInstanceParameterOutput values.
// You can construct a concrete instance of `InstanceParametersParametersInstanceParameterInput` via:
//
//	InstanceParametersParametersInstanceParameterArgs{...}
type InstanceParametersParametersInstanceParameterInput interface {
	pulumi.Input

	ToInstanceParametersParametersInstanceParameterOutput() InstanceParametersParametersInstanceParameterOutput
	ToInstanceParametersParametersInstanceParameterOutputWithContext(context.Context) InstanceParametersParametersInstanceParameterOutput
}

type InstanceParametersParametersInstanceParameterArgs struct {
	// The checking code of parameter.
	CheckingCode pulumi.StringInput `pulumi:"checkingCode"`
	// Whether the parameter supports modifying.
	ForceModify pulumi.BoolInput `pulumi:"forceModify"`
	// Does the new parameter value need to restart the instance to take effect after modification.
	ForceRestart pulumi.BoolInput `pulumi:"forceRestart"`
	// The default value of parameter.
	ParameterDefaultValue pulumi.StringInput `pulumi:"parameterDefaultValue"`
	// The description of parameter.
	ParameterDescription pulumi.StringInput `pulumi:"parameterDescription"`
	// The name of parameter.
	ParameterName pulumi.StringInput `pulumi:"parameterName"`
	// The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.
	ParameterRole pulumi.StringInput `pulumi:"parameterRole"`
	// The type of parameter value.
	ParameterType pulumi.StringInput `pulumi:"parameterType"`
	// The value of parameter.
	ParameterValue pulumi.StringInput `pulumi:"parameterValue"`
}

func (InstanceParametersParametersInstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParametersParametersInstanceParameter)(nil)).Elem()
}

func (i InstanceParametersParametersInstanceParameterArgs) ToInstanceParametersParametersInstanceParameterOutput() InstanceParametersParametersInstanceParameterOutput {
	return i.ToInstanceParametersParametersInstanceParameterOutputWithContext(context.Background())
}

func (i InstanceParametersParametersInstanceParameterArgs) ToInstanceParametersParametersInstanceParameterOutputWithContext(ctx context.Context) InstanceParametersParametersInstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParametersParametersInstanceParameterOutput)
}

// InstanceParametersParametersInstanceParameterArrayInput is an input type that accepts InstanceParametersParametersInstanceParameterArray and InstanceParametersParametersInstanceParameterArrayOutput values.
// You can construct a concrete instance of `InstanceParametersParametersInstanceParameterArrayInput` via:
//
//	InstanceParametersParametersInstanceParameterArray{ InstanceParametersParametersInstanceParameterArgs{...} }
type InstanceParametersParametersInstanceParameterArrayInput interface {
	pulumi.Input

	ToInstanceParametersParametersInstanceParameterArrayOutput() InstanceParametersParametersInstanceParameterArrayOutput
	ToInstanceParametersParametersInstanceParameterArrayOutputWithContext(context.Context) InstanceParametersParametersInstanceParameterArrayOutput
}

type InstanceParametersParametersInstanceParameterArray []InstanceParametersParametersInstanceParameterInput

func (InstanceParametersParametersInstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParametersParametersInstanceParameter)(nil)).Elem()
}

func (i InstanceParametersParametersInstanceParameterArray) ToInstanceParametersParametersInstanceParameterArrayOutput() InstanceParametersParametersInstanceParameterArrayOutput {
	return i.ToInstanceParametersParametersInstanceParameterArrayOutputWithContext(context.Background())
}

func (i InstanceParametersParametersInstanceParameterArray) ToInstanceParametersParametersInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParametersParametersInstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParametersParametersInstanceParameterArrayOutput)
}

type InstanceParametersParametersInstanceParameterOutput struct{ *pulumi.OutputState }

func (InstanceParametersParametersInstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParametersParametersInstanceParameter)(nil)).Elem()
}

func (o InstanceParametersParametersInstanceParameterOutput) ToInstanceParametersParametersInstanceParameterOutput() InstanceParametersParametersInstanceParameterOutput {
	return o
}

func (o InstanceParametersParametersInstanceParameterOutput) ToInstanceParametersParametersInstanceParameterOutputWithContext(ctx context.Context) InstanceParametersParametersInstanceParameterOutput {
	return o
}

// The checking code of parameter.
func (o InstanceParametersParametersInstanceParameterOutput) CheckingCode() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParametersInstanceParameter) string { return v.CheckingCode }).(pulumi.StringOutput)
}

// Whether the parameter supports modifying.
func (o InstanceParametersParametersInstanceParameterOutput) ForceModify() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceParametersParametersInstanceParameter) bool { return v.ForceModify }).(pulumi.BoolOutput)
}

// Does the new parameter value need to restart the instance to take effect after modification.
func (o InstanceParametersParametersInstanceParameterOutput) ForceRestart() pulumi.BoolOutput {
	return o.ApplyT(func(v InstanceParametersParametersInstanceParameter) bool { return v.ForceRestart }).(pulumi.BoolOutput)
}

// The default value of parameter.
func (o InstanceParametersParametersInstanceParameterOutput) ParameterDefaultValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParametersInstanceParameter) string { return v.ParameterDefaultValue }).(pulumi.StringOutput)
}

// The description of parameter.
func (o InstanceParametersParametersInstanceParameterOutput) ParameterDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParametersInstanceParameter) string { return v.ParameterDescription }).(pulumi.StringOutput)
}

// The name of parameter.
func (o InstanceParametersParametersInstanceParameterOutput) ParameterName() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParametersInstanceParameter) string { return v.ParameterName }).(pulumi.StringOutput)
}

// The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.
func (o InstanceParametersParametersInstanceParameterOutput) ParameterRole() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParametersInstanceParameter) string { return v.ParameterRole }).(pulumi.StringOutput)
}

// The type of parameter value.
func (o InstanceParametersParametersInstanceParameterOutput) ParameterType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParametersInstanceParameter) string { return v.ParameterType }).(pulumi.StringOutput)
}

// The value of parameter.
func (o InstanceParametersParametersInstanceParameterOutput) ParameterValue() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersParametersInstanceParameter) string { return v.ParameterValue }).(pulumi.StringOutput)
}

type InstanceParametersParametersInstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (InstanceParametersParametersInstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParametersParametersInstanceParameter)(nil)).Elem()
}

func (o InstanceParametersParametersInstanceParameterArrayOutput) ToInstanceParametersParametersInstanceParameterArrayOutput() InstanceParametersParametersInstanceParameterArrayOutput {
	return o
}

func (o InstanceParametersParametersInstanceParameterArrayOutput) ToInstanceParametersParametersInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParametersParametersInstanceParameterArrayOutput {
	return o
}

func (o InstanceParametersParametersInstanceParameterArrayOutput) Index(i pulumi.IntInput) InstanceParametersParametersInstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceParametersParametersInstanceParameter {
		return vs[0].([]InstanceParametersParametersInstanceParameter)[vs[1].(int)]
	}).(InstanceParametersParametersInstanceParameterOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstancesInstance struct {
	// Whether to enable automatic renewal.
	AutoRenew bool `pulumi:"autoRenew"`
	// The charge status.
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of instance.
	ChargeType string `pulumi:"chargeType"`
	// The planned close time.
	ClosedTime string `pulumi:"closedTime"`
	// The list of config servers.
	ConfigServers []InstancesInstanceConfigServer `pulumi:"configServers"`
	// The ID of config servers.
	ConfigServersId string `pulumi:"configServersId"`
	// The creation time of instance.
	CreateTime string `pulumi:"createTime"`
	// The db engine to query, valid value contains `MongoDB`.
	DbEngine string `pulumi:"dbEngine"`
	// The version of db engine to query, valid value contains `MongoDB_4_0`.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The version string of database engine.
	DbEngineVersionStr string `pulumi:"dbEngineVersionStr"`
	// The expired time of instance.
	ExpiredTime string `pulumi:"expiredTime"`
	// The instance ID to query.
	InstanceId string `pulumi:"instanceId"`
	// The instance name to query.
	InstanceName string `pulumi:"instanceName"`
	// The instance status to query.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The type of instance to query, the valid value contains `ReplicaSet` or `ShardedCluster`.
	InstanceType string `pulumi:"instanceType"`
	// The list of mongos.
	Mongos []InstancesInstanceMongo `pulumi:"mongos"`
	// The ID of mongos.
	MongosId string `pulumi:"mongosId"`
	// The node information.
	Nodes []InstancesInstanceNode `pulumi:"nodes"`
	// The project name to which the instance belongs.
	ProjectName string `pulumi:"projectName"`
	// The planned reclaim time of instance.
	ReclaimTime string `pulumi:"reclaimTime"`
	// The list of shards.
	Shards []InstancesInstanceShard `pulumi:"shards"`
	// Whether ssl enabled.
	SslEnable bool `pulumi:"sslEnable"`
	// The ssl expire time.
	SslExpireTime string `pulumi:"sslExpireTime"`
	// Whether ssl is valid.
	SslIsValid bool `pulumi:"sslIsValid"`
	// The storage type of instance.
	StorageType string `pulumi:"storageType"`
	// The subnet id of instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstancesInstanceTag `pulumi:"tags"`
	// The update time of instance.
	UpdateTime string `pulumi:"updateTime"`
	// The vpc id of instance to query.
	VpcId string `pulumi:"vpcId"`
	// The zone ID to query.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceInput is an input type that accepts InstancesInstanceArgs and InstancesInstanceOutput values.
// You can construct a concrete instance of `InstancesInstanceInput` via:
//
//	InstancesInstanceArgs{...}
type InstancesInstanceInput interface {
	pulumi.Input

	ToInstancesInstanceOutput() InstancesInstanceOutput
	ToInstancesInstanceOutputWithContext(context.Context) InstancesInstanceOutput
}

type InstancesInstanceArgs struct {
	// Whether to enable automatic renewal.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The charge status.
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The planned close time.
	ClosedTime pulumi.StringInput `pulumi:"closedTime"`
	// The list of config servers.
	ConfigServers InstancesInstanceConfigServerArrayInput `pulumi:"configServers"`
	// The ID of config servers.
	ConfigServersId pulumi.StringInput `pulumi:"configServersId"`
	// The creation time of instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The db engine to query, valid value contains `MongoDB`.
	DbEngine pulumi.StringInput `pulumi:"dbEngine"`
	// The version of db engine to query, valid value contains `MongoDB_4_0`.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// The version string of database engine.
	DbEngineVersionStr pulumi.StringInput `pulumi:"dbEngineVersionStr"`
	// The expired time of instance.
	ExpiredTime pulumi.StringInput `pulumi:"expiredTime"`
	// The instance ID to query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The instance name to query.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The instance status to query.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The type of instance to query, the valid value contains `ReplicaSet` or `ShardedCluster`.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// The list of mongos.
	Mongos InstancesInstanceMongoArrayInput `pulumi:"mongos"`
	// The ID of mongos.
	MongosId pulumi.StringInput `pulumi:"mongosId"`
	// The node information.
	Nodes InstancesInstanceNodeArrayInput `pulumi:"nodes"`
	// The project name to which the instance belongs.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The planned reclaim time of instance.
	ReclaimTime pulumi.StringInput `pulumi:"reclaimTime"`
	// The list of shards.
	Shards InstancesInstanceShardArrayInput `pulumi:"shards"`
	// Whether ssl enabled.
	SslEnable pulumi.BoolInput `pulumi:"sslEnable"`
	// The ssl expire time.
	SslExpireTime pulumi.StringInput `pulumi:"sslExpireTime"`
	// Whether ssl is valid.
	SslIsValid pulumi.BoolInput `pulumi:"sslIsValid"`
	// The storage type of instance.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The subnet id of instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags InstancesInstanceTagArrayInput `pulumi:"tags"`
	// The update time of instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// The vpc id of instance to query.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone ID to query.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return i.ToInstancesInstanceOutputWithContext(context.Background())
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceOutput)
}

// InstancesInstanceArrayInput is an input type that accepts InstancesInstanceArray and InstancesInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceArrayInput` via:
//
//	InstancesInstanceArray{ InstancesInstanceArgs{...} }
type InstancesInstanceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput
	ToInstancesInstanceArrayOutputWithContext(context.Context) InstancesInstanceArrayOutput
}

type InstancesInstanceArray []InstancesInstanceInput

func (InstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return i.ToInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceArrayOutput)
}

type InstancesInstanceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return o
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return o
}

// Whether to enable automatic renewal.
func (o InstancesInstanceOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The charge status.
func (o InstancesInstanceOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of instance.
func (o InstancesInstanceOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The planned close time.
func (o InstancesInstanceOutput) ClosedTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ClosedTime }).(pulumi.StringOutput)
}

// The list of config servers.
func (o InstancesInstanceOutput) ConfigServers() InstancesInstanceConfigServerArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceConfigServer { return v.ConfigServers }).(InstancesInstanceConfigServerArrayOutput)
}

// The ID of config servers.
func (o InstancesInstanceOutput) ConfigServersId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ConfigServersId }).(pulumi.StringOutput)
}

// The creation time of instance.
func (o InstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The db engine to query, valid value contains `MongoDB`.
func (o InstancesInstanceOutput) DbEngine() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.DbEngine }).(pulumi.StringOutput)
}

// The version of db engine to query, valid value contains `MongoDB_4_0`.
func (o InstancesInstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The version string of database engine.
func (o InstancesInstanceOutput) DbEngineVersionStr() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.DbEngineVersionStr }).(pulumi.StringOutput)
}

// The expired time of instance.
func (o InstancesInstanceOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// The instance ID to query.
func (o InstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The instance name to query.
func (o InstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The instance status to query.
func (o InstancesInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The type of instance to query, the valid value contains `ReplicaSet` or `ShardedCluster`.
func (o InstancesInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// The list of mongos.
func (o InstancesInstanceOutput) Mongos() InstancesInstanceMongoArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceMongo { return v.Mongos }).(InstancesInstanceMongoArrayOutput)
}

// The ID of mongos.
func (o InstancesInstanceOutput) MongosId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.MongosId }).(pulumi.StringOutput)
}

// The node information.
func (o InstancesInstanceOutput) Nodes() InstancesInstanceNodeArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceNode { return v.Nodes }).(InstancesInstanceNodeArrayOutput)
}

// The project name to which the instance belongs.
func (o InstancesInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The planned reclaim time of instance.
func (o InstancesInstanceOutput) ReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ReclaimTime }).(pulumi.StringOutput)
}

// The list of shards.
func (o InstancesInstanceOutput) Shards() InstancesInstanceShardArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceShard { return v.Shards }).(InstancesInstanceShardArrayOutput)
}

// Whether ssl enabled.
func (o InstancesInstanceOutput) SslEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.SslEnable }).(pulumi.BoolOutput)
}

// The ssl expire time.
func (o InstancesInstanceOutput) SslExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.SslExpireTime }).(pulumi.StringOutput)
}

// Whether ssl is valid.
func (o InstancesInstanceOutput) SslIsValid() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstance) bool { return v.SslIsValid }).(pulumi.BoolOutput)
}

// The storage type of instance.
func (o InstancesInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The subnet id of instance.
func (o InstancesInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstancesInstanceOutput) Tags() InstancesInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceTag { return v.Tags }).(InstancesInstanceTagArrayOutput)
}

// The update time of instance.
func (o InstancesInstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The vpc id of instance to query.
func (o InstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone ID to query.
func (o InstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstance {
		return vs[0].([]InstancesInstance)[vs[1].(int)]
	}).(InstancesInstanceOutput)
}

type InstancesInstanceConfigServer struct {
	// The config server node ID.
	ConfigServerNodeId string `pulumi:"configServerNodeId"`
	// The nod role.
	NodeRole string `pulumi:"nodeRole"`
	// The node status.
	NodeStatus string `pulumi:"nodeStatus"`
	// The total memory in GB.
	TotalMemoryGb float64 `pulumi:"totalMemoryGb"`
	// The total vCPU.
	TotalVcpu float64 `pulumi:"totalVcpu"`
	// The used memory in GB.
	UsedMemoryGb float64 `pulumi:"usedMemoryGb"`
	// The used vCPU.
	UsedVcpu float64 `pulumi:"usedVcpu"`
	// The zone ID to query.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceConfigServerInput is an input type that accepts InstancesInstanceConfigServerArgs and InstancesInstanceConfigServerOutput values.
// You can construct a concrete instance of `InstancesInstanceConfigServerInput` via:
//
//	InstancesInstanceConfigServerArgs{...}
type InstancesInstanceConfigServerInput interface {
	pulumi.Input

	ToInstancesInstanceConfigServerOutput() InstancesInstanceConfigServerOutput
	ToInstancesInstanceConfigServerOutputWithContext(context.Context) InstancesInstanceConfigServerOutput
}

type InstancesInstanceConfigServerArgs struct {
	// The config server node ID.
	ConfigServerNodeId pulumi.StringInput `pulumi:"configServerNodeId"`
	// The nod role.
	NodeRole pulumi.StringInput `pulumi:"nodeRole"`
	// The node status.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// The total memory in GB.
	TotalMemoryGb pulumi.Float64Input `pulumi:"totalMemoryGb"`
	// The total vCPU.
	TotalVcpu pulumi.Float64Input `pulumi:"totalVcpu"`
	// The used memory in GB.
	UsedMemoryGb pulumi.Float64Input `pulumi:"usedMemoryGb"`
	// The used vCPU.
	UsedVcpu pulumi.Float64Input `pulumi:"usedVcpu"`
	// The zone ID to query.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceConfigServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConfigServer)(nil)).Elem()
}

func (i InstancesInstanceConfigServerArgs) ToInstancesInstanceConfigServerOutput() InstancesInstanceConfigServerOutput {
	return i.ToInstancesInstanceConfigServerOutputWithContext(context.Background())
}

func (i InstancesInstanceConfigServerArgs) ToInstancesInstanceConfigServerOutputWithContext(ctx context.Context) InstancesInstanceConfigServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConfigServerOutput)
}

// InstancesInstanceConfigServerArrayInput is an input type that accepts InstancesInstanceConfigServerArray and InstancesInstanceConfigServerArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceConfigServerArrayInput` via:
//
//	InstancesInstanceConfigServerArray{ InstancesInstanceConfigServerArgs{...} }
type InstancesInstanceConfigServerArrayInput interface {
	pulumi.Input

	ToInstancesInstanceConfigServerArrayOutput() InstancesInstanceConfigServerArrayOutput
	ToInstancesInstanceConfigServerArrayOutputWithContext(context.Context) InstancesInstanceConfigServerArrayOutput
}

type InstancesInstanceConfigServerArray []InstancesInstanceConfigServerInput

func (InstancesInstanceConfigServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConfigServer)(nil)).Elem()
}

func (i InstancesInstanceConfigServerArray) ToInstancesInstanceConfigServerArrayOutput() InstancesInstanceConfigServerArrayOutput {
	return i.ToInstancesInstanceConfigServerArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceConfigServerArray) ToInstancesInstanceConfigServerArrayOutputWithContext(ctx context.Context) InstancesInstanceConfigServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceConfigServerArrayOutput)
}

type InstancesInstanceConfigServerOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConfigServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceConfigServer)(nil)).Elem()
}

func (o InstancesInstanceConfigServerOutput) ToInstancesInstanceConfigServerOutput() InstancesInstanceConfigServerOutput {
	return o
}

func (o InstancesInstanceConfigServerOutput) ToInstancesInstanceConfigServerOutputWithContext(ctx context.Context) InstancesInstanceConfigServerOutput {
	return o
}

// The config server node ID.
func (o InstancesInstanceConfigServerOutput) ConfigServerNodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConfigServer) string { return v.ConfigServerNodeId }).(pulumi.StringOutput)
}

// The nod role.
func (o InstancesInstanceConfigServerOutput) NodeRole() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConfigServer) string { return v.NodeRole }).(pulumi.StringOutput)
}

// The node status.
func (o InstancesInstanceConfigServerOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConfigServer) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// The total memory in GB.
func (o InstancesInstanceConfigServerOutput) TotalMemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceConfigServer) float64 { return v.TotalMemoryGb }).(pulumi.Float64Output)
}

// The total vCPU.
func (o InstancesInstanceConfigServerOutput) TotalVcpu() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceConfigServer) float64 { return v.TotalVcpu }).(pulumi.Float64Output)
}

// The used memory in GB.
func (o InstancesInstanceConfigServerOutput) UsedMemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceConfigServer) float64 { return v.UsedMemoryGb }).(pulumi.Float64Output)
}

// The used vCPU.
func (o InstancesInstanceConfigServerOutput) UsedVcpu() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceConfigServer) float64 { return v.UsedVcpu }).(pulumi.Float64Output)
}

// The zone ID to query.
func (o InstancesInstanceConfigServerOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceConfigServer) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceConfigServerArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceConfigServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceConfigServer)(nil)).Elem()
}

func (o InstancesInstanceConfigServerArrayOutput) ToInstancesInstanceConfigServerArrayOutput() InstancesInstanceConfigServerArrayOutput {
	return o
}

func (o InstancesInstanceConfigServerArrayOutput) ToInstancesInstanceConfigServerArrayOutputWithContext(ctx context.Context) InstancesInstanceConfigServerArrayOutput {
	return o
}

func (o InstancesInstanceConfigServerArrayOutput) Index(i pulumi.IntInput) InstancesInstanceConfigServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceConfigServer {
		return vs[0].([]InstancesInstanceConfigServer)[vs[1].(int)]
	}).(InstancesInstanceConfigServerOutput)
}

type InstancesInstanceMongo struct {
	// The mongos node ID.
	MongosNodeId string `pulumi:"mongosNodeId"`
	// The node spec.
	NodeSpec string `pulumi:"nodeSpec"`
	// The node status.
	NodeStatus string `pulumi:"nodeStatus"`
	// The total memory in GB.
	TotalMemoryGb float64 `pulumi:"totalMemoryGb"`
	// The total vCPU.
	TotalVcpu float64 `pulumi:"totalVcpu"`
	// The used memory in GB.
	UsedMemoryGb float64 `pulumi:"usedMemoryGb"`
	// The used vCPU.
	UsedVcpu float64 `pulumi:"usedVcpu"`
	// The zone ID to query.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceMongoInput is an input type that accepts InstancesInstanceMongoArgs and InstancesInstanceMongoOutput values.
// You can construct a concrete instance of `InstancesInstanceMongoInput` via:
//
//	InstancesInstanceMongoArgs{...}
type InstancesInstanceMongoInput interface {
	pulumi.Input

	ToInstancesInstanceMongoOutput() InstancesInstanceMongoOutput
	ToInstancesInstanceMongoOutputWithContext(context.Context) InstancesInstanceMongoOutput
}

type InstancesInstanceMongoArgs struct {
	// The mongos node ID.
	MongosNodeId pulumi.StringInput `pulumi:"mongosNodeId"`
	// The node spec.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// The node status.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// The total memory in GB.
	TotalMemoryGb pulumi.Float64Input `pulumi:"totalMemoryGb"`
	// The total vCPU.
	TotalVcpu pulumi.Float64Input `pulumi:"totalVcpu"`
	// The used memory in GB.
	UsedMemoryGb pulumi.Float64Input `pulumi:"usedMemoryGb"`
	// The used vCPU.
	UsedVcpu pulumi.Float64Input `pulumi:"usedVcpu"`
	// The zone ID to query.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceMongoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceMongo)(nil)).Elem()
}

func (i InstancesInstanceMongoArgs) ToInstancesInstanceMongoOutput() InstancesInstanceMongoOutput {
	return i.ToInstancesInstanceMongoOutputWithContext(context.Background())
}

func (i InstancesInstanceMongoArgs) ToInstancesInstanceMongoOutputWithContext(ctx context.Context) InstancesInstanceMongoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceMongoOutput)
}

// InstancesInstanceMongoArrayInput is an input type that accepts InstancesInstanceMongoArray and InstancesInstanceMongoArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceMongoArrayInput` via:
//
//	InstancesInstanceMongoArray{ InstancesInstanceMongoArgs{...} }
type InstancesInstanceMongoArrayInput interface {
	pulumi.Input

	ToInstancesInstanceMongoArrayOutput() InstancesInstanceMongoArrayOutput
	ToInstancesInstanceMongoArrayOutputWithContext(context.Context) InstancesInstanceMongoArrayOutput
}

type InstancesInstanceMongoArray []InstancesInstanceMongoInput

func (InstancesInstanceMongoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceMongo)(nil)).Elem()
}

func (i InstancesInstanceMongoArray) ToInstancesInstanceMongoArrayOutput() InstancesInstanceMongoArrayOutput {
	return i.ToInstancesInstanceMongoArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceMongoArray) ToInstancesInstanceMongoArrayOutputWithContext(ctx context.Context) InstancesInstanceMongoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceMongoArrayOutput)
}

type InstancesInstanceMongoOutput struct{ *pulumi.OutputState }

func (InstancesInstanceMongoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceMongo)(nil)).Elem()
}

func (o InstancesInstanceMongoOutput) ToInstancesInstanceMongoOutput() InstancesInstanceMongoOutput {
	return o
}

func (o InstancesInstanceMongoOutput) ToInstancesInstanceMongoOutputWithContext(ctx context.Context) InstancesInstanceMongoOutput {
	return o
}

// The mongos node ID.
func (o InstancesInstanceMongoOutput) MongosNodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceMongo) string { return v.MongosNodeId }).(pulumi.StringOutput)
}

// The node spec.
func (o InstancesInstanceMongoOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceMongo) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// The node status.
func (o InstancesInstanceMongoOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceMongo) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// The total memory in GB.
func (o InstancesInstanceMongoOutput) TotalMemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceMongo) float64 { return v.TotalMemoryGb }).(pulumi.Float64Output)
}

// The total vCPU.
func (o InstancesInstanceMongoOutput) TotalVcpu() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceMongo) float64 { return v.TotalVcpu }).(pulumi.Float64Output)
}

// The used memory in GB.
func (o InstancesInstanceMongoOutput) UsedMemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceMongo) float64 { return v.UsedMemoryGb }).(pulumi.Float64Output)
}

// The used vCPU.
func (o InstancesInstanceMongoOutput) UsedVcpu() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceMongo) float64 { return v.UsedVcpu }).(pulumi.Float64Output)
}

// The zone ID to query.
func (o InstancesInstanceMongoOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceMongo) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceMongoArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceMongoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceMongo)(nil)).Elem()
}

func (o InstancesInstanceMongoArrayOutput) ToInstancesInstanceMongoArrayOutput() InstancesInstanceMongoArrayOutput {
	return o
}

func (o InstancesInstanceMongoArrayOutput) ToInstancesInstanceMongoArrayOutputWithContext(ctx context.Context) InstancesInstanceMongoArrayOutput {
	return o
}

func (o InstancesInstanceMongoArrayOutput) Index(i pulumi.IntInput) InstancesInstanceMongoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceMongo {
		return vs[0].([]InstancesInstanceMongo)[vs[1].(int)]
	}).(InstancesInstanceMongoOutput)
}

type InstancesInstanceNode struct {
	// The master-slave delay time.
	NodeDelayTime int `pulumi:"nodeDelayTime"`
	// The node ID.
	NodeId string `pulumi:"nodeId"`
	// The nod role.
	NodeRole string `pulumi:"nodeRole"`
	// The node spec.
	NodeSpec string `pulumi:"nodeSpec"`
	// The node status.
	NodeStatus string `pulumi:"nodeStatus"`
	// The total memory in GB.
	TotalMemoryGb float64 `pulumi:"totalMemoryGb"`
	// The total storage in GB.
	TotalStorageGb float64 `pulumi:"totalStorageGb"`
	// The total vCPU.
	TotalVcpu float64 `pulumi:"totalVcpu"`
	// The used memory in GB.
	UsedMemoryGb float64 `pulumi:"usedMemoryGb"`
	// The used storage in GB.
	UsedStorageGb float64 `pulumi:"usedStorageGb"`
	// The used vCPU.
	UsedVcpu float64 `pulumi:"usedVcpu"`
	// The zone ID to query.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceNodeInput is an input type that accepts InstancesInstanceNodeArgs and InstancesInstanceNodeOutput values.
// You can construct a concrete instance of `InstancesInstanceNodeInput` via:
//
//	InstancesInstanceNodeArgs{...}
type InstancesInstanceNodeInput interface {
	pulumi.Input

	ToInstancesInstanceNodeOutput() InstancesInstanceNodeOutput
	ToInstancesInstanceNodeOutputWithContext(context.Context) InstancesInstanceNodeOutput
}

type InstancesInstanceNodeArgs struct {
	// The master-slave delay time.
	NodeDelayTime pulumi.IntInput `pulumi:"nodeDelayTime"`
	// The node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// The nod role.
	NodeRole pulumi.StringInput `pulumi:"nodeRole"`
	// The node spec.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// The node status.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// The total memory in GB.
	TotalMemoryGb pulumi.Float64Input `pulumi:"totalMemoryGb"`
	// The total storage in GB.
	TotalStorageGb pulumi.Float64Input `pulumi:"totalStorageGb"`
	// The total vCPU.
	TotalVcpu pulumi.Float64Input `pulumi:"totalVcpu"`
	// The used memory in GB.
	UsedMemoryGb pulumi.Float64Input `pulumi:"usedMemoryGb"`
	// The used storage in GB.
	UsedStorageGb pulumi.Float64Input `pulumi:"usedStorageGb"`
	// The used vCPU.
	UsedVcpu pulumi.Float64Input `pulumi:"usedVcpu"`
	// The zone ID to query.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNode)(nil)).Elem()
}

func (i InstancesInstanceNodeArgs) ToInstancesInstanceNodeOutput() InstancesInstanceNodeOutput {
	return i.ToInstancesInstanceNodeOutputWithContext(context.Background())
}

func (i InstancesInstanceNodeArgs) ToInstancesInstanceNodeOutputWithContext(ctx context.Context) InstancesInstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNodeOutput)
}

// InstancesInstanceNodeArrayInput is an input type that accepts InstancesInstanceNodeArray and InstancesInstanceNodeArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceNodeArrayInput` via:
//
//	InstancesInstanceNodeArray{ InstancesInstanceNodeArgs{...} }
type InstancesInstanceNodeArrayInput interface {
	pulumi.Input

	ToInstancesInstanceNodeArrayOutput() InstancesInstanceNodeArrayOutput
	ToInstancesInstanceNodeArrayOutputWithContext(context.Context) InstancesInstanceNodeArrayOutput
}

type InstancesInstanceNodeArray []InstancesInstanceNodeInput

func (InstancesInstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNode)(nil)).Elem()
}

func (i InstancesInstanceNodeArray) ToInstancesInstanceNodeArrayOutput() InstancesInstanceNodeArrayOutput {
	return i.ToInstancesInstanceNodeArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceNodeArray) ToInstancesInstanceNodeArrayOutputWithContext(ctx context.Context) InstancesInstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNodeArrayOutput)
}

type InstancesInstanceNodeOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNode)(nil)).Elem()
}

func (o InstancesInstanceNodeOutput) ToInstancesInstanceNodeOutput() InstancesInstanceNodeOutput {
	return o
}

func (o InstancesInstanceNodeOutput) ToInstancesInstanceNodeOutputWithContext(ctx context.Context) InstancesInstanceNodeOutput {
	return o
}

// The master-slave delay time.
func (o InstancesInstanceNodeOutput) NodeDelayTime() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceNode) int { return v.NodeDelayTime }).(pulumi.IntOutput)
}

// The node ID.
func (o InstancesInstanceNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.NodeId }).(pulumi.StringOutput)
}

// The nod role.
func (o InstancesInstanceNodeOutput) NodeRole() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.NodeRole }).(pulumi.StringOutput)
}

// The node spec.
func (o InstancesInstanceNodeOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// The node status.
func (o InstancesInstanceNodeOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// The total memory in GB.
func (o InstancesInstanceNodeOutput) TotalMemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceNode) float64 { return v.TotalMemoryGb }).(pulumi.Float64Output)
}

// The total storage in GB.
func (o InstancesInstanceNodeOutput) TotalStorageGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceNode) float64 { return v.TotalStorageGb }).(pulumi.Float64Output)
}

// The total vCPU.
func (o InstancesInstanceNodeOutput) TotalVcpu() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceNode) float64 { return v.TotalVcpu }).(pulumi.Float64Output)
}

// The used memory in GB.
func (o InstancesInstanceNodeOutput) UsedMemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceNode) float64 { return v.UsedMemoryGb }).(pulumi.Float64Output)
}

// The used storage in GB.
func (o InstancesInstanceNodeOutput) UsedStorageGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceNode) float64 { return v.UsedStorageGb }).(pulumi.Float64Output)
}

// The used vCPU.
func (o InstancesInstanceNodeOutput) UsedVcpu() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceNode) float64 { return v.UsedVcpu }).(pulumi.Float64Output)
}

// The zone ID to query.
func (o InstancesInstanceNodeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNode)(nil)).Elem()
}

func (o InstancesInstanceNodeArrayOutput) ToInstancesInstanceNodeArrayOutput() InstancesInstanceNodeArrayOutput {
	return o
}

func (o InstancesInstanceNodeArrayOutput) ToInstancesInstanceNodeArrayOutputWithContext(ctx context.Context) InstancesInstanceNodeArrayOutput {
	return o
}

func (o InstancesInstanceNodeArrayOutput) Index(i pulumi.IntInput) InstancesInstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceNode {
		return vs[0].([]InstancesInstanceNode)[vs[1].(int)]
	}).(InstancesInstanceNodeOutput)
}

type InstancesInstanceShard struct {
	// The node information.
	Nodes []InstancesInstanceShardNode `pulumi:"nodes"`
	// The shard ID.
	ShardId string `pulumi:"shardId"`
}

// InstancesInstanceShardInput is an input type that accepts InstancesInstanceShardArgs and InstancesInstanceShardOutput values.
// You can construct a concrete instance of `InstancesInstanceShardInput` via:
//
//	InstancesInstanceShardArgs{...}
type InstancesInstanceShardInput interface {
	pulumi.Input

	ToInstancesInstanceShardOutput() InstancesInstanceShardOutput
	ToInstancesInstanceShardOutputWithContext(context.Context) InstancesInstanceShardOutput
}

type InstancesInstanceShardArgs struct {
	// The node information.
	Nodes InstancesInstanceShardNodeArrayInput `pulumi:"nodes"`
	// The shard ID.
	ShardId pulumi.StringInput `pulumi:"shardId"`
}

func (InstancesInstanceShardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceShard)(nil)).Elem()
}

func (i InstancesInstanceShardArgs) ToInstancesInstanceShardOutput() InstancesInstanceShardOutput {
	return i.ToInstancesInstanceShardOutputWithContext(context.Background())
}

func (i InstancesInstanceShardArgs) ToInstancesInstanceShardOutputWithContext(ctx context.Context) InstancesInstanceShardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceShardOutput)
}

// InstancesInstanceShardArrayInput is an input type that accepts InstancesInstanceShardArray and InstancesInstanceShardArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceShardArrayInput` via:
//
//	InstancesInstanceShardArray{ InstancesInstanceShardArgs{...} }
type InstancesInstanceShardArrayInput interface {
	pulumi.Input

	ToInstancesInstanceShardArrayOutput() InstancesInstanceShardArrayOutput
	ToInstancesInstanceShardArrayOutputWithContext(context.Context) InstancesInstanceShardArrayOutput
}

type InstancesInstanceShardArray []InstancesInstanceShardInput

func (InstancesInstanceShardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceShard)(nil)).Elem()
}

func (i InstancesInstanceShardArray) ToInstancesInstanceShardArrayOutput() InstancesInstanceShardArrayOutput {
	return i.ToInstancesInstanceShardArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceShardArray) ToInstancesInstanceShardArrayOutputWithContext(ctx context.Context) InstancesInstanceShardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceShardArrayOutput)
}

type InstancesInstanceShardOutput struct{ *pulumi.OutputState }

func (InstancesInstanceShardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceShard)(nil)).Elem()
}

func (o InstancesInstanceShardOutput) ToInstancesInstanceShardOutput() InstancesInstanceShardOutput {
	return o
}

func (o InstancesInstanceShardOutput) ToInstancesInstanceShardOutputWithContext(ctx context.Context) InstancesInstanceShardOutput {
	return o
}

// The node information.
func (o InstancesInstanceShardOutput) Nodes() InstancesInstanceShardNodeArrayOutput {
	return o.ApplyT(func(v InstancesInstanceShard) []InstancesInstanceShardNode { return v.Nodes }).(InstancesInstanceShardNodeArrayOutput)
}

// The shard ID.
func (o InstancesInstanceShardOutput) ShardId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceShard) string { return v.ShardId }).(pulumi.StringOutput)
}

type InstancesInstanceShardArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceShardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceShard)(nil)).Elem()
}

func (o InstancesInstanceShardArrayOutput) ToInstancesInstanceShardArrayOutput() InstancesInstanceShardArrayOutput {
	return o
}

func (o InstancesInstanceShardArrayOutput) ToInstancesInstanceShardArrayOutputWithContext(ctx context.Context) InstancesInstanceShardArrayOutput {
	return o
}

func (o InstancesInstanceShardArrayOutput) Index(i pulumi.IntInput) InstancesInstanceShardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceShard {
		return vs[0].([]InstancesInstanceShard)[vs[1].(int)]
	}).(InstancesInstanceShardOutput)
}

type InstancesInstanceShardNode struct {
	// The master-slave delay time.
	NodeDelayTime int `pulumi:"nodeDelayTime"`
	// The node ID.
	NodeId string `pulumi:"nodeId"`
	// The nod role.
	NodeRole string `pulumi:"nodeRole"`
	// The node spec.
	NodeSpec string `pulumi:"nodeSpec"`
	// The node status.
	NodeStatus string `pulumi:"nodeStatus"`
	// The total memory in GB.
	TotalMemoryGb float64 `pulumi:"totalMemoryGb"`
	// The total storage in GB.
	TotalStorageGb float64 `pulumi:"totalStorageGb"`
	// The total vCPU.
	TotalVcpu float64 `pulumi:"totalVcpu"`
	// The used memory in GB.
	UsedMemoryGb float64 `pulumi:"usedMemoryGb"`
	// The used storage in GB.
	UsedStorageGb float64 `pulumi:"usedStorageGb"`
	// The used vCPU.
	UsedVcpu float64 `pulumi:"usedVcpu"`
	// The zone ID to query.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceShardNodeInput is an input type that accepts InstancesInstanceShardNodeArgs and InstancesInstanceShardNodeOutput values.
// You can construct a concrete instance of `InstancesInstanceShardNodeInput` via:
//
//	InstancesInstanceShardNodeArgs{...}
type InstancesInstanceShardNodeInput interface {
	pulumi.Input

	ToInstancesInstanceShardNodeOutput() InstancesInstanceShardNodeOutput
	ToInstancesInstanceShardNodeOutputWithContext(context.Context) InstancesInstanceShardNodeOutput
}

type InstancesInstanceShardNodeArgs struct {
	// The master-slave delay time.
	NodeDelayTime pulumi.IntInput `pulumi:"nodeDelayTime"`
	// The node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// The nod role.
	NodeRole pulumi.StringInput `pulumi:"nodeRole"`
	// The node spec.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// The node status.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// The total memory in GB.
	TotalMemoryGb pulumi.Float64Input `pulumi:"totalMemoryGb"`
	// The total storage in GB.
	TotalStorageGb pulumi.Float64Input `pulumi:"totalStorageGb"`
	// The total vCPU.
	TotalVcpu pulumi.Float64Input `pulumi:"totalVcpu"`
	// The used memory in GB.
	UsedMemoryGb pulumi.Float64Input `pulumi:"usedMemoryGb"`
	// The used storage in GB.
	UsedStorageGb pulumi.Float64Input `pulumi:"usedStorageGb"`
	// The used vCPU.
	UsedVcpu pulumi.Float64Input `pulumi:"usedVcpu"`
	// The zone ID to query.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceShardNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceShardNode)(nil)).Elem()
}

func (i InstancesInstanceShardNodeArgs) ToInstancesInstanceShardNodeOutput() InstancesInstanceShardNodeOutput {
	return i.ToInstancesInstanceShardNodeOutputWithContext(context.Background())
}

func (i InstancesInstanceShardNodeArgs) ToInstancesInstanceShardNodeOutputWithContext(ctx context.Context) InstancesInstanceShardNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceShardNodeOutput)
}

// InstancesInstanceShardNodeArrayInput is an input type that accepts InstancesInstanceShardNodeArray and InstancesInstanceShardNodeArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceShardNodeArrayInput` via:
//
//	InstancesInstanceShardNodeArray{ InstancesInstanceShardNodeArgs{...} }
type InstancesInstanceShardNodeArrayInput interface {
	pulumi.Input

	ToInstancesInstanceShardNodeArrayOutput() InstancesInstanceShardNodeArrayOutput
	ToInstancesInstanceShardNodeArrayOutputWithContext(context.Context) InstancesInstanceShardNodeArrayOutput
}

type InstancesInstanceShardNodeArray []InstancesInstanceShardNodeInput

func (InstancesInstanceShardNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceShardNode)(nil)).Elem()
}

func (i InstancesInstanceShardNodeArray) ToInstancesInstanceShardNodeArrayOutput() InstancesInstanceShardNodeArrayOutput {
	return i.ToInstancesInstanceShardNodeArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceShardNodeArray) ToInstancesInstanceShardNodeArrayOutputWithContext(ctx context.Context) InstancesInstanceShardNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceShardNodeArrayOutput)
}

type InstancesInstanceShardNodeOutput struct{ *pulumi.OutputState }

func (InstancesInstanceShardNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceShardNode)(nil)).Elem()
}

func (o InstancesInstanceShardNodeOutput) ToInstancesInstanceShardNodeOutput() InstancesInstanceShardNodeOutput {
	return o
}

func (o InstancesInstanceShardNodeOutput) ToInstancesInstanceShardNodeOutputWithContext(ctx context.Context) InstancesInstanceShardNodeOutput {
	return o
}

// The master-slave delay time.
func (o InstancesInstanceShardNodeOutput) NodeDelayTime() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceShardNode) int { return v.NodeDelayTime }).(pulumi.IntOutput)
}

// The node ID.
func (o InstancesInstanceShardNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceShardNode) string { return v.NodeId }).(pulumi.StringOutput)
}

// The nod role.
func (o InstancesInstanceShardNodeOutput) NodeRole() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceShardNode) string { return v.NodeRole }).(pulumi.StringOutput)
}

// The node spec.
func (o InstancesInstanceShardNodeOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceShardNode) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// The node status.
func (o InstancesInstanceShardNodeOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceShardNode) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// The total memory in GB.
func (o InstancesInstanceShardNodeOutput) TotalMemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceShardNode) float64 { return v.TotalMemoryGb }).(pulumi.Float64Output)
}

// The total storage in GB.
func (o InstancesInstanceShardNodeOutput) TotalStorageGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceShardNode) float64 { return v.TotalStorageGb }).(pulumi.Float64Output)
}

// The total vCPU.
func (o InstancesInstanceShardNodeOutput) TotalVcpu() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceShardNode) float64 { return v.TotalVcpu }).(pulumi.Float64Output)
}

// The used memory in GB.
func (o InstancesInstanceShardNodeOutput) UsedMemoryGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceShardNode) float64 { return v.UsedMemoryGb }).(pulumi.Float64Output)
}

// The used storage in GB.
func (o InstancesInstanceShardNodeOutput) UsedStorageGb() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceShardNode) float64 { return v.UsedStorageGb }).(pulumi.Float64Output)
}

// The used vCPU.
func (o InstancesInstanceShardNodeOutput) UsedVcpu() pulumi.Float64Output {
	return o.ApplyT(func(v InstancesInstanceShardNode) float64 { return v.UsedVcpu }).(pulumi.Float64Output)
}

// The zone ID to query.
func (o InstancesInstanceShardNodeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceShardNode) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceShardNodeArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceShardNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceShardNode)(nil)).Elem()
}

func (o InstancesInstanceShardNodeArrayOutput) ToInstancesInstanceShardNodeArrayOutput() InstancesInstanceShardNodeArrayOutput {
	return o
}

func (o InstancesInstanceShardNodeArrayOutput) ToInstancesInstanceShardNodeArrayOutputWithContext(ctx context.Context) InstancesInstanceShardNodeArrayOutput {
	return o
}

func (o InstancesInstanceShardNodeArrayOutput) Index(i pulumi.IntInput) InstancesInstanceShardNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceShardNode {
		return vs[0].([]InstancesInstanceShardNode)[vs[1].(int)]
	}).(InstancesInstanceShardNodeOutput)
}

type InstancesInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesInstanceTagInput is an input type that accepts InstancesInstanceTagArgs and InstancesInstanceTagOutput values.
// You can construct a concrete instance of `InstancesInstanceTagInput` via:
//
//	InstancesInstanceTagArgs{...}
type InstancesInstanceTagInput interface {
	pulumi.Input

	ToInstancesInstanceTagOutput() InstancesInstanceTagOutput
	ToInstancesInstanceTagOutputWithContext(context.Context) InstancesInstanceTagOutput
}

type InstancesInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return i.ToInstancesInstanceTagOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagOutput)
}

// InstancesInstanceTagArrayInput is an input type that accepts InstancesInstanceTagArray and InstancesInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceTagArrayInput` via:
//
//	InstancesInstanceTagArray{ InstancesInstanceTagArgs{...} }
type InstancesInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput
	ToInstancesInstanceTagArrayOutputWithContext(context.Context) InstancesInstanceTagArrayOutput
}

type InstancesInstanceTagArray []InstancesInstanceTagInput

func (InstancesInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return i.ToInstancesInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagArrayOutput)
}

type InstancesInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return o
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceTag {
		return vs[0].([]InstancesInstanceTag)[vs[1].(int)]
	}).(InstancesInstanceTagOutput)
}

type InstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type MongoAllowListsAllowList struct {
	// The list of IP address in allow list.
	AllowList string `pulumi:"allowList"`
	// The description of allow list.
	AllowListDesc string `pulumi:"allowListDesc"`
	// The ID of allow list.
	AllowListId string `pulumi:"allowListId"`
	// The number of allow list IPs.
	AllowListIpNum int `pulumi:"allowListIpNum"`
	// The allow list name.
	AllowListName string `pulumi:"allowListName"`
	// The IP address type in allow list.
	AllowListType string `pulumi:"allowListType"`
	// The total number of instances bound under the allow list.
	AssociatedInstanceNum int `pulumi:"associatedInstanceNum"`
	// The list of associated instances.
	AssociatedInstances []MongoAllowListsAllowListAssociatedInstance `pulumi:"associatedInstances"`
}

// MongoAllowListsAllowListInput is an input type that accepts MongoAllowListsAllowListArgs and MongoAllowListsAllowListOutput values.
// You can construct a concrete instance of `MongoAllowListsAllowListInput` via:
//
//	MongoAllowListsAllowListArgs{...}
type MongoAllowListsAllowListInput interface {
	pulumi.Input

	ToMongoAllowListsAllowListOutput() MongoAllowListsAllowListOutput
	ToMongoAllowListsAllowListOutputWithContext(context.Context) MongoAllowListsAllowListOutput
}

type MongoAllowListsAllowListArgs struct {
	// The list of IP address in allow list.
	AllowList pulumi.StringInput `pulumi:"allowList"`
	// The description of allow list.
	AllowListDesc pulumi.StringInput `pulumi:"allowListDesc"`
	// The ID of allow list.
	AllowListId pulumi.StringInput `pulumi:"allowListId"`
	// The number of allow list IPs.
	AllowListIpNum pulumi.IntInput `pulumi:"allowListIpNum"`
	// The allow list name.
	AllowListName pulumi.StringInput `pulumi:"allowListName"`
	// The IP address type in allow list.
	AllowListType pulumi.StringInput `pulumi:"allowListType"`
	// The total number of instances bound under the allow list.
	AssociatedInstanceNum pulumi.IntInput `pulumi:"associatedInstanceNum"`
	// The list of associated instances.
	AssociatedInstances MongoAllowListsAllowListAssociatedInstanceArrayInput `pulumi:"associatedInstances"`
}

func (MongoAllowListsAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoAllowListsAllowList)(nil)).Elem()
}

func (i MongoAllowListsAllowListArgs) ToMongoAllowListsAllowListOutput() MongoAllowListsAllowListOutput {
	return i.ToMongoAllowListsAllowListOutputWithContext(context.Background())
}

func (i MongoAllowListsAllowListArgs) ToMongoAllowListsAllowListOutputWithContext(ctx context.Context) MongoAllowListsAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoAllowListsAllowListOutput)
}

// MongoAllowListsAllowListArrayInput is an input type that accepts MongoAllowListsAllowListArray and MongoAllowListsAllowListArrayOutput values.
// You can construct a concrete instance of `MongoAllowListsAllowListArrayInput` via:
//
//	MongoAllowListsAllowListArray{ MongoAllowListsAllowListArgs{...} }
type MongoAllowListsAllowListArrayInput interface {
	pulumi.Input

	ToMongoAllowListsAllowListArrayOutput() MongoAllowListsAllowListArrayOutput
	ToMongoAllowListsAllowListArrayOutputWithContext(context.Context) MongoAllowListsAllowListArrayOutput
}

type MongoAllowListsAllowListArray []MongoAllowListsAllowListInput

func (MongoAllowListsAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoAllowListsAllowList)(nil)).Elem()
}

func (i MongoAllowListsAllowListArray) ToMongoAllowListsAllowListArrayOutput() MongoAllowListsAllowListArrayOutput {
	return i.ToMongoAllowListsAllowListArrayOutputWithContext(context.Background())
}

func (i MongoAllowListsAllowListArray) ToMongoAllowListsAllowListArrayOutputWithContext(ctx context.Context) MongoAllowListsAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoAllowListsAllowListArrayOutput)
}

type MongoAllowListsAllowListOutput struct{ *pulumi.OutputState }

func (MongoAllowListsAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoAllowListsAllowList)(nil)).Elem()
}

func (o MongoAllowListsAllowListOutput) ToMongoAllowListsAllowListOutput() MongoAllowListsAllowListOutput {
	return o
}

func (o MongoAllowListsAllowListOutput) ToMongoAllowListsAllowListOutputWithContext(ctx context.Context) MongoAllowListsAllowListOutput {
	return o
}

// The list of IP address in allow list.
func (o MongoAllowListsAllowListOutput) AllowList() pulumi.StringOutput {
	return o.ApplyT(func(v MongoAllowListsAllowList) string { return v.AllowList }).(pulumi.StringOutput)
}

// The description of allow list.
func (o MongoAllowListsAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v MongoAllowListsAllowList) string { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The ID of allow list.
func (o MongoAllowListsAllowListOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v MongoAllowListsAllowList) string { return v.AllowListId }).(pulumi.StringOutput)
}

// The number of allow list IPs.
func (o MongoAllowListsAllowListOutput) AllowListIpNum() pulumi.IntOutput {
	return o.ApplyT(func(v MongoAllowListsAllowList) int { return v.AllowListIpNum }).(pulumi.IntOutput)
}

// The allow list name.
func (o MongoAllowListsAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoAllowListsAllowList) string { return v.AllowListName }).(pulumi.StringOutput)
}

// The IP address type in allow list.
func (o MongoAllowListsAllowListOutput) AllowListType() pulumi.StringOutput {
	return o.ApplyT(func(v MongoAllowListsAllowList) string { return v.AllowListType }).(pulumi.StringOutput)
}

// The total number of instances bound under the allow list.
func (o MongoAllowListsAllowListOutput) AssociatedInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v MongoAllowListsAllowList) int { return v.AssociatedInstanceNum }).(pulumi.IntOutput)
}

// The list of associated instances.
func (o MongoAllowListsAllowListOutput) AssociatedInstances() MongoAllowListsAllowListAssociatedInstanceArrayOutput {
	return o.ApplyT(func(v MongoAllowListsAllowList) []MongoAllowListsAllowListAssociatedInstance {
		return v.AssociatedInstances
	}).(MongoAllowListsAllowListAssociatedInstanceArrayOutput)
}

type MongoAllowListsAllowListArrayOutput struct{ *pulumi.OutputState }

func (MongoAllowListsAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoAllowListsAllowList)(nil)).Elem()
}

func (o MongoAllowListsAllowListArrayOutput) ToMongoAllowListsAllowListArrayOutput() MongoAllowListsAllowListArrayOutput {
	return o
}

func (o MongoAllowListsAllowListArrayOutput) ToMongoAllowListsAllowListArrayOutputWithContext(ctx context.Context) MongoAllowListsAllowListArrayOutput {
	return o
}

func (o MongoAllowListsAllowListArrayOutput) Index(i pulumi.IntInput) MongoAllowListsAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoAllowListsAllowList {
		return vs[0].([]MongoAllowListsAllowList)[vs[1].(int)]
	}).(MongoAllowListsAllowListOutput)
}

type MongoAllowListsAllowListAssociatedInstance struct {
	// The instance ID to query.
	InstanceId string `pulumi:"instanceId"`
	// The instance name that bound to the allow list.
	InstanceName string `pulumi:"instanceName"`
	// The VPC ID.
	Vpc string `pulumi:"vpc"`
}

// MongoAllowListsAllowListAssociatedInstanceInput is an input type that accepts MongoAllowListsAllowListAssociatedInstanceArgs and MongoAllowListsAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `MongoAllowListsAllowListAssociatedInstanceInput` via:
//
//	MongoAllowListsAllowListAssociatedInstanceArgs{...}
type MongoAllowListsAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToMongoAllowListsAllowListAssociatedInstanceOutput() MongoAllowListsAllowListAssociatedInstanceOutput
	ToMongoAllowListsAllowListAssociatedInstanceOutputWithContext(context.Context) MongoAllowListsAllowListAssociatedInstanceOutput
}

type MongoAllowListsAllowListAssociatedInstanceArgs struct {
	// The instance ID to query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The instance name that bound to the allow list.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The VPC ID.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (MongoAllowListsAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoAllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (i MongoAllowListsAllowListAssociatedInstanceArgs) ToMongoAllowListsAllowListAssociatedInstanceOutput() MongoAllowListsAllowListAssociatedInstanceOutput {
	return i.ToMongoAllowListsAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i MongoAllowListsAllowListAssociatedInstanceArgs) ToMongoAllowListsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) MongoAllowListsAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoAllowListsAllowListAssociatedInstanceOutput)
}

// MongoAllowListsAllowListAssociatedInstanceArrayInput is an input type that accepts MongoAllowListsAllowListAssociatedInstanceArray and MongoAllowListsAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `MongoAllowListsAllowListAssociatedInstanceArrayInput` via:
//
//	MongoAllowListsAllowListAssociatedInstanceArray{ MongoAllowListsAllowListAssociatedInstanceArgs{...} }
type MongoAllowListsAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToMongoAllowListsAllowListAssociatedInstanceArrayOutput() MongoAllowListsAllowListAssociatedInstanceArrayOutput
	ToMongoAllowListsAllowListAssociatedInstanceArrayOutputWithContext(context.Context) MongoAllowListsAllowListAssociatedInstanceArrayOutput
}

type MongoAllowListsAllowListAssociatedInstanceArray []MongoAllowListsAllowListAssociatedInstanceInput

func (MongoAllowListsAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoAllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (i MongoAllowListsAllowListAssociatedInstanceArray) ToMongoAllowListsAllowListAssociatedInstanceArrayOutput() MongoAllowListsAllowListAssociatedInstanceArrayOutput {
	return i.ToMongoAllowListsAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i MongoAllowListsAllowListAssociatedInstanceArray) ToMongoAllowListsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) MongoAllowListsAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongoAllowListsAllowListAssociatedInstanceArrayOutput)
}

type MongoAllowListsAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (MongoAllowListsAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MongoAllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (o MongoAllowListsAllowListAssociatedInstanceOutput) ToMongoAllowListsAllowListAssociatedInstanceOutput() MongoAllowListsAllowListAssociatedInstanceOutput {
	return o
}

func (o MongoAllowListsAllowListAssociatedInstanceOutput) ToMongoAllowListsAllowListAssociatedInstanceOutputWithContext(ctx context.Context) MongoAllowListsAllowListAssociatedInstanceOutput {
	return o
}

// The instance ID to query.
func (o MongoAllowListsAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v MongoAllowListsAllowListAssociatedInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The instance name that bound to the allow list.
func (o MongoAllowListsAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v MongoAllowListsAllowListAssociatedInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The VPC ID.
func (o MongoAllowListsAllowListAssociatedInstanceOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v MongoAllowListsAllowListAssociatedInstance) string { return v.Vpc }).(pulumi.StringOutput)
}

type MongoAllowListsAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (MongoAllowListsAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MongoAllowListsAllowListAssociatedInstance)(nil)).Elem()
}

func (o MongoAllowListsAllowListAssociatedInstanceArrayOutput) ToMongoAllowListsAllowListAssociatedInstanceArrayOutput() MongoAllowListsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o MongoAllowListsAllowListAssociatedInstanceArrayOutput) ToMongoAllowListsAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) MongoAllowListsAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o MongoAllowListsAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) MongoAllowListsAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MongoAllowListsAllowListAssociatedInstance {
		return vs[0].([]MongoAllowListsAllowListAssociatedInstance)[vs[1].(int)]
	}).(MongoAllowListsAllowListAssociatedInstanceOutput)
}

type RegionsRegion struct {
	// The id of the region.
	RegionId string `pulumi:"regionId"`
	// The name of region.
	RegionName string `pulumi:"regionName"`
}

// RegionsRegionInput is an input type that accepts RegionsRegionArgs and RegionsRegionOutput values.
// You can construct a concrete instance of `RegionsRegionInput` via:
//
//	RegionsRegionArgs{...}
type RegionsRegionInput interface {
	pulumi.Input

	ToRegionsRegionOutput() RegionsRegionOutput
	ToRegionsRegionOutputWithContext(context.Context) RegionsRegionOutput
}

type RegionsRegionArgs struct {
	// The id of the region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The name of region.
	RegionName pulumi.StringInput `pulumi:"regionName"`
}

func (RegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArgs) ToRegionsRegionOutput() RegionsRegionOutput {
	return i.ToRegionsRegionOutputWithContext(context.Background())
}

func (i RegionsRegionArgs) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionOutput)
}

// RegionsRegionArrayInput is an input type that accepts RegionsRegionArray and RegionsRegionArrayOutput values.
// You can construct a concrete instance of `RegionsRegionArrayInput` via:
//
//	RegionsRegionArray{ RegionsRegionArgs{...} }
type RegionsRegionArrayInput interface {
	pulumi.Input

	ToRegionsRegionArrayOutput() RegionsRegionArrayOutput
	ToRegionsRegionArrayOutputWithContext(context.Context) RegionsRegionArrayOutput
}

type RegionsRegionArray []RegionsRegionInput

func (RegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return i.ToRegionsRegionArrayOutputWithContext(context.Background())
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionArrayOutput)
}

type RegionsRegionOutput struct{ *pulumi.OutputState }

func (RegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionOutput) ToRegionsRegionOutput() RegionsRegionOutput {
	return o
}

func (o RegionsRegionOutput) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return o
}

// The id of the region.
func (o RegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

// The name of region.
func (o RegionsRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionName }).(pulumi.StringOutput)
}

type RegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (RegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) Index(i pulumi.IntInput) RegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionsRegion {
		return vs[0].([]RegionsRegion)[vs[1].(int)]
	}).(RegionsRegionOutput)
}

type SpecsSpecs struct {
	// The collection of mongos node specs.
	MongosNodeSpecs []SpecsSpecsMongosNodeSpec `pulumi:"mongosNodeSpecs"`
	// The collection of node specs.
	NodeSpecs []SpecsSpecsNodeSpec `pulumi:"nodeSpecs"`
	// The collection of shard node specs.
	ShardNodeSpecs []SpecsSpecsShardNodeSpec `pulumi:"shardNodeSpecs"`
}

// SpecsSpecsInput is an input type that accepts SpecsSpecsArgs and SpecsSpecsOutput values.
// You can construct a concrete instance of `SpecsSpecsInput` via:
//
//	SpecsSpecsArgs{...}
type SpecsSpecsInput interface {
	pulumi.Input

	ToSpecsSpecsOutput() SpecsSpecsOutput
	ToSpecsSpecsOutputWithContext(context.Context) SpecsSpecsOutput
}

type SpecsSpecsArgs struct {
	// The collection of mongos node specs.
	MongosNodeSpecs SpecsSpecsMongosNodeSpecArrayInput `pulumi:"mongosNodeSpecs"`
	// The collection of node specs.
	NodeSpecs SpecsSpecsNodeSpecArrayInput `pulumi:"nodeSpecs"`
	// The collection of shard node specs.
	ShardNodeSpecs SpecsSpecsShardNodeSpecArrayInput `pulumi:"shardNodeSpecs"`
}

func (SpecsSpecsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsSpecs)(nil)).Elem()
}

func (i SpecsSpecsArgs) ToSpecsSpecsOutput() SpecsSpecsOutput {
	return i.ToSpecsSpecsOutputWithContext(context.Background())
}

func (i SpecsSpecsArgs) ToSpecsSpecsOutputWithContext(ctx context.Context) SpecsSpecsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpecsSpecsOutput)
}

type SpecsSpecsOutput struct{ *pulumi.OutputState }

func (SpecsSpecsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsSpecs)(nil)).Elem()
}

func (o SpecsSpecsOutput) ToSpecsSpecsOutput() SpecsSpecsOutput {
	return o
}

func (o SpecsSpecsOutput) ToSpecsSpecsOutputWithContext(ctx context.Context) SpecsSpecsOutput {
	return o
}

// The collection of mongos node specs.
func (o SpecsSpecsOutput) MongosNodeSpecs() SpecsSpecsMongosNodeSpecArrayOutput {
	return o.ApplyT(func(v SpecsSpecs) []SpecsSpecsMongosNodeSpec { return v.MongosNodeSpecs }).(SpecsSpecsMongosNodeSpecArrayOutput)
}

// The collection of node specs.
func (o SpecsSpecsOutput) NodeSpecs() SpecsSpecsNodeSpecArrayOutput {
	return o.ApplyT(func(v SpecsSpecs) []SpecsSpecsNodeSpec { return v.NodeSpecs }).(SpecsSpecsNodeSpecArrayOutput)
}

// The collection of shard node specs.
func (o SpecsSpecsOutput) ShardNodeSpecs() SpecsSpecsShardNodeSpecArrayOutput {
	return o.ApplyT(func(v SpecsSpecs) []SpecsSpecsShardNodeSpec { return v.ShardNodeSpecs }).(SpecsSpecsShardNodeSpecArrayOutput)
}

type SpecsSpecsMongosNodeSpec struct {
	// The cpu cores.
	CpuNum float64 `pulumi:"cpuNum"`
	// The max connections.
	MaxConn int `pulumi:"maxConn"`
	// The memory in GB.
	MemInGb float64 `pulumi:"memInGb"`
	// The shard node spec name.
	SpecName string `pulumi:"specName"`
}

// SpecsSpecsMongosNodeSpecInput is an input type that accepts SpecsSpecsMongosNodeSpecArgs and SpecsSpecsMongosNodeSpecOutput values.
// You can construct a concrete instance of `SpecsSpecsMongosNodeSpecInput` via:
//
//	SpecsSpecsMongosNodeSpecArgs{...}
type SpecsSpecsMongosNodeSpecInput interface {
	pulumi.Input

	ToSpecsSpecsMongosNodeSpecOutput() SpecsSpecsMongosNodeSpecOutput
	ToSpecsSpecsMongosNodeSpecOutputWithContext(context.Context) SpecsSpecsMongosNodeSpecOutput
}

type SpecsSpecsMongosNodeSpecArgs struct {
	// The cpu cores.
	CpuNum pulumi.Float64Input `pulumi:"cpuNum"`
	// The max connections.
	MaxConn pulumi.IntInput `pulumi:"maxConn"`
	// The memory in GB.
	MemInGb pulumi.Float64Input `pulumi:"memInGb"`
	// The shard node spec name.
	SpecName pulumi.StringInput `pulumi:"specName"`
}

func (SpecsSpecsMongosNodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsSpecsMongosNodeSpec)(nil)).Elem()
}

func (i SpecsSpecsMongosNodeSpecArgs) ToSpecsSpecsMongosNodeSpecOutput() SpecsSpecsMongosNodeSpecOutput {
	return i.ToSpecsSpecsMongosNodeSpecOutputWithContext(context.Background())
}

func (i SpecsSpecsMongosNodeSpecArgs) ToSpecsSpecsMongosNodeSpecOutputWithContext(ctx context.Context) SpecsSpecsMongosNodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpecsSpecsMongosNodeSpecOutput)
}

// SpecsSpecsMongosNodeSpecArrayInput is an input type that accepts SpecsSpecsMongosNodeSpecArray and SpecsSpecsMongosNodeSpecArrayOutput values.
// You can construct a concrete instance of `SpecsSpecsMongosNodeSpecArrayInput` via:
//
//	SpecsSpecsMongosNodeSpecArray{ SpecsSpecsMongosNodeSpecArgs{...} }
type SpecsSpecsMongosNodeSpecArrayInput interface {
	pulumi.Input

	ToSpecsSpecsMongosNodeSpecArrayOutput() SpecsSpecsMongosNodeSpecArrayOutput
	ToSpecsSpecsMongosNodeSpecArrayOutputWithContext(context.Context) SpecsSpecsMongosNodeSpecArrayOutput
}

type SpecsSpecsMongosNodeSpecArray []SpecsSpecsMongosNodeSpecInput

func (SpecsSpecsMongosNodeSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpecsSpecsMongosNodeSpec)(nil)).Elem()
}

func (i SpecsSpecsMongosNodeSpecArray) ToSpecsSpecsMongosNodeSpecArrayOutput() SpecsSpecsMongosNodeSpecArrayOutput {
	return i.ToSpecsSpecsMongosNodeSpecArrayOutputWithContext(context.Background())
}

func (i SpecsSpecsMongosNodeSpecArray) ToSpecsSpecsMongosNodeSpecArrayOutputWithContext(ctx context.Context) SpecsSpecsMongosNodeSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpecsSpecsMongosNodeSpecArrayOutput)
}

type SpecsSpecsMongosNodeSpecOutput struct{ *pulumi.OutputState }

func (SpecsSpecsMongosNodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsSpecsMongosNodeSpec)(nil)).Elem()
}

func (o SpecsSpecsMongosNodeSpecOutput) ToSpecsSpecsMongosNodeSpecOutput() SpecsSpecsMongosNodeSpecOutput {
	return o
}

func (o SpecsSpecsMongosNodeSpecOutput) ToSpecsSpecsMongosNodeSpecOutputWithContext(ctx context.Context) SpecsSpecsMongosNodeSpecOutput {
	return o
}

// The cpu cores.
func (o SpecsSpecsMongosNodeSpecOutput) CpuNum() pulumi.Float64Output {
	return o.ApplyT(func(v SpecsSpecsMongosNodeSpec) float64 { return v.CpuNum }).(pulumi.Float64Output)
}

// The max connections.
func (o SpecsSpecsMongosNodeSpecOutput) MaxConn() pulumi.IntOutput {
	return o.ApplyT(func(v SpecsSpecsMongosNodeSpec) int { return v.MaxConn }).(pulumi.IntOutput)
}

// The memory in GB.
func (o SpecsSpecsMongosNodeSpecOutput) MemInGb() pulumi.Float64Output {
	return o.ApplyT(func(v SpecsSpecsMongosNodeSpec) float64 { return v.MemInGb }).(pulumi.Float64Output)
}

// The shard node spec name.
func (o SpecsSpecsMongosNodeSpecOutput) SpecName() pulumi.StringOutput {
	return o.ApplyT(func(v SpecsSpecsMongosNodeSpec) string { return v.SpecName }).(pulumi.StringOutput)
}

type SpecsSpecsMongosNodeSpecArrayOutput struct{ *pulumi.OutputState }

func (SpecsSpecsMongosNodeSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpecsSpecsMongosNodeSpec)(nil)).Elem()
}

func (o SpecsSpecsMongosNodeSpecArrayOutput) ToSpecsSpecsMongosNodeSpecArrayOutput() SpecsSpecsMongosNodeSpecArrayOutput {
	return o
}

func (o SpecsSpecsMongosNodeSpecArrayOutput) ToSpecsSpecsMongosNodeSpecArrayOutputWithContext(ctx context.Context) SpecsSpecsMongosNodeSpecArrayOutput {
	return o
}

func (o SpecsSpecsMongosNodeSpecArrayOutput) Index(i pulumi.IntInput) SpecsSpecsMongosNodeSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpecsSpecsMongosNodeSpec {
		return vs[0].([]SpecsSpecsMongosNodeSpec)[vs[1].(int)]
	}).(SpecsSpecsMongosNodeSpecOutput)
}

type SpecsSpecsNodeSpec struct {
	// The cpu cores.
	CpuNum float64 `pulumi:"cpuNum"`
	// The max connections.
	MaxConn int `pulumi:"maxConn"`
	// The max storage.
	MaxStorage int `pulumi:"maxStorage"`
	// The memory in GB.
	MemInDb float64 `pulumi:"memInDb"`
	// The shard node spec name.
	SpecName string `pulumi:"specName"`
}

// SpecsSpecsNodeSpecInput is an input type that accepts SpecsSpecsNodeSpecArgs and SpecsSpecsNodeSpecOutput values.
// You can construct a concrete instance of `SpecsSpecsNodeSpecInput` via:
//
//	SpecsSpecsNodeSpecArgs{...}
type SpecsSpecsNodeSpecInput interface {
	pulumi.Input

	ToSpecsSpecsNodeSpecOutput() SpecsSpecsNodeSpecOutput
	ToSpecsSpecsNodeSpecOutputWithContext(context.Context) SpecsSpecsNodeSpecOutput
}

type SpecsSpecsNodeSpecArgs struct {
	// The cpu cores.
	CpuNum pulumi.Float64Input `pulumi:"cpuNum"`
	// The max connections.
	MaxConn pulumi.IntInput `pulumi:"maxConn"`
	// The max storage.
	MaxStorage pulumi.IntInput `pulumi:"maxStorage"`
	// The memory in GB.
	MemInDb pulumi.Float64Input `pulumi:"memInDb"`
	// The shard node spec name.
	SpecName pulumi.StringInput `pulumi:"specName"`
}

func (SpecsSpecsNodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsSpecsNodeSpec)(nil)).Elem()
}

func (i SpecsSpecsNodeSpecArgs) ToSpecsSpecsNodeSpecOutput() SpecsSpecsNodeSpecOutput {
	return i.ToSpecsSpecsNodeSpecOutputWithContext(context.Background())
}

func (i SpecsSpecsNodeSpecArgs) ToSpecsSpecsNodeSpecOutputWithContext(ctx context.Context) SpecsSpecsNodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpecsSpecsNodeSpecOutput)
}

// SpecsSpecsNodeSpecArrayInput is an input type that accepts SpecsSpecsNodeSpecArray and SpecsSpecsNodeSpecArrayOutput values.
// You can construct a concrete instance of `SpecsSpecsNodeSpecArrayInput` via:
//
//	SpecsSpecsNodeSpecArray{ SpecsSpecsNodeSpecArgs{...} }
type SpecsSpecsNodeSpecArrayInput interface {
	pulumi.Input

	ToSpecsSpecsNodeSpecArrayOutput() SpecsSpecsNodeSpecArrayOutput
	ToSpecsSpecsNodeSpecArrayOutputWithContext(context.Context) SpecsSpecsNodeSpecArrayOutput
}

type SpecsSpecsNodeSpecArray []SpecsSpecsNodeSpecInput

func (SpecsSpecsNodeSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpecsSpecsNodeSpec)(nil)).Elem()
}

func (i SpecsSpecsNodeSpecArray) ToSpecsSpecsNodeSpecArrayOutput() SpecsSpecsNodeSpecArrayOutput {
	return i.ToSpecsSpecsNodeSpecArrayOutputWithContext(context.Background())
}

func (i SpecsSpecsNodeSpecArray) ToSpecsSpecsNodeSpecArrayOutputWithContext(ctx context.Context) SpecsSpecsNodeSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpecsSpecsNodeSpecArrayOutput)
}

type SpecsSpecsNodeSpecOutput struct{ *pulumi.OutputState }

func (SpecsSpecsNodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsSpecsNodeSpec)(nil)).Elem()
}

func (o SpecsSpecsNodeSpecOutput) ToSpecsSpecsNodeSpecOutput() SpecsSpecsNodeSpecOutput {
	return o
}

func (o SpecsSpecsNodeSpecOutput) ToSpecsSpecsNodeSpecOutputWithContext(ctx context.Context) SpecsSpecsNodeSpecOutput {
	return o
}

// The cpu cores.
func (o SpecsSpecsNodeSpecOutput) CpuNum() pulumi.Float64Output {
	return o.ApplyT(func(v SpecsSpecsNodeSpec) float64 { return v.CpuNum }).(pulumi.Float64Output)
}

// The max connections.
func (o SpecsSpecsNodeSpecOutput) MaxConn() pulumi.IntOutput {
	return o.ApplyT(func(v SpecsSpecsNodeSpec) int { return v.MaxConn }).(pulumi.IntOutput)
}

// The max storage.
func (o SpecsSpecsNodeSpecOutput) MaxStorage() pulumi.IntOutput {
	return o.ApplyT(func(v SpecsSpecsNodeSpec) int { return v.MaxStorage }).(pulumi.IntOutput)
}

// The memory in GB.
func (o SpecsSpecsNodeSpecOutput) MemInDb() pulumi.Float64Output {
	return o.ApplyT(func(v SpecsSpecsNodeSpec) float64 { return v.MemInDb }).(pulumi.Float64Output)
}

// The shard node spec name.
func (o SpecsSpecsNodeSpecOutput) SpecName() pulumi.StringOutput {
	return o.ApplyT(func(v SpecsSpecsNodeSpec) string { return v.SpecName }).(pulumi.StringOutput)
}

type SpecsSpecsNodeSpecArrayOutput struct{ *pulumi.OutputState }

func (SpecsSpecsNodeSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpecsSpecsNodeSpec)(nil)).Elem()
}

func (o SpecsSpecsNodeSpecArrayOutput) ToSpecsSpecsNodeSpecArrayOutput() SpecsSpecsNodeSpecArrayOutput {
	return o
}

func (o SpecsSpecsNodeSpecArrayOutput) ToSpecsSpecsNodeSpecArrayOutputWithContext(ctx context.Context) SpecsSpecsNodeSpecArrayOutput {
	return o
}

func (o SpecsSpecsNodeSpecArrayOutput) Index(i pulumi.IntInput) SpecsSpecsNodeSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpecsSpecsNodeSpec {
		return vs[0].([]SpecsSpecsNodeSpec)[vs[1].(int)]
	}).(SpecsSpecsNodeSpecOutput)
}

type SpecsSpecsShardNodeSpec struct {
	// The cpu cores.
	CpuNum float64 `pulumi:"cpuNum"`
	// The max connections.
	MaxConn int `pulumi:"maxConn"`
	// The max storage.
	MaxStorage int `pulumi:"maxStorage"`
	// The memory in GB.
	MemInGb int `pulumi:"memInGb"`
	// The shard node spec name.
	SpecName string `pulumi:"specName"`
}

// SpecsSpecsShardNodeSpecInput is an input type that accepts SpecsSpecsShardNodeSpecArgs and SpecsSpecsShardNodeSpecOutput values.
// You can construct a concrete instance of `SpecsSpecsShardNodeSpecInput` via:
//
//	SpecsSpecsShardNodeSpecArgs{...}
type SpecsSpecsShardNodeSpecInput interface {
	pulumi.Input

	ToSpecsSpecsShardNodeSpecOutput() SpecsSpecsShardNodeSpecOutput
	ToSpecsSpecsShardNodeSpecOutputWithContext(context.Context) SpecsSpecsShardNodeSpecOutput
}

type SpecsSpecsShardNodeSpecArgs struct {
	// The cpu cores.
	CpuNum pulumi.Float64Input `pulumi:"cpuNum"`
	// The max connections.
	MaxConn pulumi.IntInput `pulumi:"maxConn"`
	// The max storage.
	MaxStorage pulumi.IntInput `pulumi:"maxStorage"`
	// The memory in GB.
	MemInGb pulumi.IntInput `pulumi:"memInGb"`
	// The shard node spec name.
	SpecName pulumi.StringInput `pulumi:"specName"`
}

func (SpecsSpecsShardNodeSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsSpecsShardNodeSpec)(nil)).Elem()
}

func (i SpecsSpecsShardNodeSpecArgs) ToSpecsSpecsShardNodeSpecOutput() SpecsSpecsShardNodeSpecOutput {
	return i.ToSpecsSpecsShardNodeSpecOutputWithContext(context.Background())
}

func (i SpecsSpecsShardNodeSpecArgs) ToSpecsSpecsShardNodeSpecOutputWithContext(ctx context.Context) SpecsSpecsShardNodeSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpecsSpecsShardNodeSpecOutput)
}

// SpecsSpecsShardNodeSpecArrayInput is an input type that accepts SpecsSpecsShardNodeSpecArray and SpecsSpecsShardNodeSpecArrayOutput values.
// You can construct a concrete instance of `SpecsSpecsShardNodeSpecArrayInput` via:
//
//	SpecsSpecsShardNodeSpecArray{ SpecsSpecsShardNodeSpecArgs{...} }
type SpecsSpecsShardNodeSpecArrayInput interface {
	pulumi.Input

	ToSpecsSpecsShardNodeSpecArrayOutput() SpecsSpecsShardNodeSpecArrayOutput
	ToSpecsSpecsShardNodeSpecArrayOutputWithContext(context.Context) SpecsSpecsShardNodeSpecArrayOutput
}

type SpecsSpecsShardNodeSpecArray []SpecsSpecsShardNodeSpecInput

func (SpecsSpecsShardNodeSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpecsSpecsShardNodeSpec)(nil)).Elem()
}

func (i SpecsSpecsShardNodeSpecArray) ToSpecsSpecsShardNodeSpecArrayOutput() SpecsSpecsShardNodeSpecArrayOutput {
	return i.ToSpecsSpecsShardNodeSpecArrayOutputWithContext(context.Background())
}

func (i SpecsSpecsShardNodeSpecArray) ToSpecsSpecsShardNodeSpecArrayOutputWithContext(ctx context.Context) SpecsSpecsShardNodeSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SpecsSpecsShardNodeSpecArrayOutput)
}

type SpecsSpecsShardNodeSpecOutput struct{ *pulumi.OutputState }

func (SpecsSpecsShardNodeSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsSpecsShardNodeSpec)(nil)).Elem()
}

func (o SpecsSpecsShardNodeSpecOutput) ToSpecsSpecsShardNodeSpecOutput() SpecsSpecsShardNodeSpecOutput {
	return o
}

func (o SpecsSpecsShardNodeSpecOutput) ToSpecsSpecsShardNodeSpecOutputWithContext(ctx context.Context) SpecsSpecsShardNodeSpecOutput {
	return o
}

// The cpu cores.
func (o SpecsSpecsShardNodeSpecOutput) CpuNum() pulumi.Float64Output {
	return o.ApplyT(func(v SpecsSpecsShardNodeSpec) float64 { return v.CpuNum }).(pulumi.Float64Output)
}

// The max connections.
func (o SpecsSpecsShardNodeSpecOutput) MaxConn() pulumi.IntOutput {
	return o.ApplyT(func(v SpecsSpecsShardNodeSpec) int { return v.MaxConn }).(pulumi.IntOutput)
}

// The max storage.
func (o SpecsSpecsShardNodeSpecOutput) MaxStorage() pulumi.IntOutput {
	return o.ApplyT(func(v SpecsSpecsShardNodeSpec) int { return v.MaxStorage }).(pulumi.IntOutput)
}

// The memory in GB.
func (o SpecsSpecsShardNodeSpecOutput) MemInGb() pulumi.IntOutput {
	return o.ApplyT(func(v SpecsSpecsShardNodeSpec) int { return v.MemInGb }).(pulumi.IntOutput)
}

// The shard node spec name.
func (o SpecsSpecsShardNodeSpecOutput) SpecName() pulumi.StringOutput {
	return o.ApplyT(func(v SpecsSpecsShardNodeSpec) string { return v.SpecName }).(pulumi.StringOutput)
}

type SpecsSpecsShardNodeSpecArrayOutput struct{ *pulumi.OutputState }

func (SpecsSpecsShardNodeSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SpecsSpecsShardNodeSpec)(nil)).Elem()
}

func (o SpecsSpecsShardNodeSpecArrayOutput) ToSpecsSpecsShardNodeSpecArrayOutput() SpecsSpecsShardNodeSpecArrayOutput {
	return o
}

func (o SpecsSpecsShardNodeSpecArrayOutput) ToSpecsSpecsShardNodeSpecArrayOutputWithContext(ctx context.Context) SpecsSpecsShardNodeSpecArrayOutput {
	return o
}

func (o SpecsSpecsShardNodeSpecArrayOutput) Index(i pulumi.IntInput) SpecsSpecsShardNodeSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SpecsSpecsShardNodeSpec {
		return vs[0].([]SpecsSpecsShardNodeSpec)[vs[1].(int)]
	}).(SpecsSpecsShardNodeSpecOutput)
}

type SslStatesSslState struct {
	// The mongodb instance ID to query.
	InstanceId string `pulumi:"instanceId"`
	// Whetehr SSL is valid.
	IsValid bool `pulumi:"isValid"`
	// Whether SSL is enabled.
	SslEnable bool `pulumi:"sslEnable"`
	// The expire time of SSL.
	SslExpiredTime string `pulumi:"sslExpiredTime"`
}

// SslStatesSslStateInput is an input type that accepts SslStatesSslStateArgs and SslStatesSslStateOutput values.
// You can construct a concrete instance of `SslStatesSslStateInput` via:
//
//	SslStatesSslStateArgs{...}
type SslStatesSslStateInput interface {
	pulumi.Input

	ToSslStatesSslStateOutput() SslStatesSslStateOutput
	ToSslStatesSslStateOutputWithContext(context.Context) SslStatesSslStateOutput
}

type SslStatesSslStateArgs struct {
	// The mongodb instance ID to query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Whetehr SSL is valid.
	IsValid pulumi.BoolInput `pulumi:"isValid"`
	// Whether SSL is enabled.
	SslEnable pulumi.BoolInput `pulumi:"sslEnable"`
	// The expire time of SSL.
	SslExpiredTime pulumi.StringInput `pulumi:"sslExpiredTime"`
}

func (SslStatesSslStateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslStatesSslState)(nil)).Elem()
}

func (i SslStatesSslStateArgs) ToSslStatesSslStateOutput() SslStatesSslStateOutput {
	return i.ToSslStatesSslStateOutputWithContext(context.Background())
}

func (i SslStatesSslStateArgs) ToSslStatesSslStateOutputWithContext(ctx context.Context) SslStatesSslStateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslStatesSslStateOutput)
}

// SslStatesSslStateArrayInput is an input type that accepts SslStatesSslStateArray and SslStatesSslStateArrayOutput values.
// You can construct a concrete instance of `SslStatesSslStateArrayInput` via:
//
//	SslStatesSslStateArray{ SslStatesSslStateArgs{...} }
type SslStatesSslStateArrayInput interface {
	pulumi.Input

	ToSslStatesSslStateArrayOutput() SslStatesSslStateArrayOutput
	ToSslStatesSslStateArrayOutputWithContext(context.Context) SslStatesSslStateArrayOutput
}

type SslStatesSslStateArray []SslStatesSslStateInput

func (SslStatesSslStateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslStatesSslState)(nil)).Elem()
}

func (i SslStatesSslStateArray) ToSslStatesSslStateArrayOutput() SslStatesSslStateArrayOutput {
	return i.ToSslStatesSslStateArrayOutputWithContext(context.Background())
}

func (i SslStatesSslStateArray) ToSslStatesSslStateArrayOutputWithContext(ctx context.Context) SslStatesSslStateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslStatesSslStateArrayOutput)
}

type SslStatesSslStateOutput struct{ *pulumi.OutputState }

func (SslStatesSslStateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslStatesSslState)(nil)).Elem()
}

func (o SslStatesSslStateOutput) ToSslStatesSslStateOutput() SslStatesSslStateOutput {
	return o
}

func (o SslStatesSslStateOutput) ToSslStatesSslStateOutputWithContext(ctx context.Context) SslStatesSslStateOutput {
	return o
}

// The mongodb instance ID to query.
func (o SslStatesSslStateOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v SslStatesSslState) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Whetehr SSL is valid.
func (o SslStatesSslStateOutput) IsValid() pulumi.BoolOutput {
	return o.ApplyT(func(v SslStatesSslState) bool { return v.IsValid }).(pulumi.BoolOutput)
}

// Whether SSL is enabled.
func (o SslStatesSslStateOutput) SslEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v SslStatesSslState) bool { return v.SslEnable }).(pulumi.BoolOutput)
}

// The expire time of SSL.
func (o SslStatesSslStateOutput) SslExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v SslStatesSslState) string { return v.SslExpiredTime }).(pulumi.StringOutput)
}

type SslStatesSslStateArrayOutput struct{ *pulumi.OutputState }

func (SslStatesSslStateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SslStatesSslState)(nil)).Elem()
}

func (o SslStatesSslStateArrayOutput) ToSslStatesSslStateArrayOutput() SslStatesSslStateArrayOutput {
	return o
}

func (o SslStatesSslStateArrayOutput) ToSslStatesSslStateArrayOutputWithContext(ctx context.Context) SslStatesSslStateArrayOutput {
	return o
}

func (o SslStatesSslStateArrayOutput) Index(i pulumi.IntInput) SslStatesSslStateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SslStatesSslState {
		return vs[0].([]SslStatesSslState)[vs[1].(int)]
	}).(SslStatesSslStateOutput)
}

type ZonesZone struct {
	// The id of the zone.
	Id string `pulumi:"id"`
	// The id of the zone.
	ZoneId string `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName string `pulumi:"zoneName"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//	ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The id of the zone.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// The name of the zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//	ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The id of the zone.
func (o ZonesZoneOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the zone.
func (o ZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

// The name of the zone.
func (o ZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountInput)(nil)).Elem(), AccountsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountArrayInput)(nil)).Elem(), AccountsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountAccountPrivilegeInput)(nil)).Elem(), AccountsAccountAccountPrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountAccountPrivilegeArrayInput)(nil)).Elem(), AccountsAccountAccountPrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointInput)(nil)).Elem(), EndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointArrayInput)(nil)).Elem(), EndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointDbAddressInput)(nil)).Elem(), EndpointsEndpointDbAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointDbAddressArrayInput)(nil)).Elem(), EndpointsEndpointDbAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterLogsParameterChangeLogsInput)(nil)).Elem(), InstanceParameterLogsParameterChangeLogsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParametersParametersInput)(nil)).Elem(), InstanceParametersParametersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParametersParametersInstanceParameterInput)(nil)).Elem(), InstanceParametersParametersInstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParametersParametersInstanceParameterArrayInput)(nil)).Elem(), InstanceParametersParametersInstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceInput)(nil)).Elem(), InstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceArrayInput)(nil)).Elem(), InstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConfigServerInput)(nil)).Elem(), InstancesInstanceConfigServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceConfigServerArrayInput)(nil)).Elem(), InstancesInstanceConfigServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceMongoInput)(nil)).Elem(), InstancesInstanceMongoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceMongoArrayInput)(nil)).Elem(), InstancesInstanceMongoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNodeInput)(nil)).Elem(), InstancesInstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNodeArrayInput)(nil)).Elem(), InstancesInstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceShardInput)(nil)).Elem(), InstancesInstanceShardArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceShardArrayInput)(nil)).Elem(), InstancesInstanceShardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceShardNodeInput)(nil)).Elem(), InstancesInstanceShardNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceShardNodeArrayInput)(nil)).Elem(), InstancesInstanceShardNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagInput)(nil)).Elem(), InstancesInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagArrayInput)(nil)).Elem(), InstancesInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoAllowListsAllowListInput)(nil)).Elem(), MongoAllowListsAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoAllowListsAllowListArrayInput)(nil)).Elem(), MongoAllowListsAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoAllowListsAllowListAssociatedInstanceInput)(nil)).Elem(), MongoAllowListsAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongoAllowListsAllowListAssociatedInstanceArrayInput)(nil)).Elem(), MongoAllowListsAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionInput)(nil)).Elem(), RegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionArrayInput)(nil)).Elem(), RegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpecsSpecsInput)(nil)).Elem(), SpecsSpecsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpecsSpecsMongosNodeSpecInput)(nil)).Elem(), SpecsSpecsMongosNodeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpecsSpecsMongosNodeSpecArrayInput)(nil)).Elem(), SpecsSpecsMongosNodeSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpecsSpecsNodeSpecInput)(nil)).Elem(), SpecsSpecsNodeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpecsSpecsNodeSpecArrayInput)(nil)).Elem(), SpecsSpecsNodeSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpecsSpecsShardNodeSpecInput)(nil)).Elem(), SpecsSpecsShardNodeSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SpecsSpecsShardNodeSpecArrayInput)(nil)).Elem(), SpecsSpecsShardNodeSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslStatesSslStateInput)(nil)).Elem(), SslStatesSslStateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslStatesSslStateArrayInput)(nil)).Elem(), SslStatesSslStateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterOutputType(AccountsAccountOutput{})
	pulumi.RegisterOutputType(AccountsAccountArrayOutput{})
	pulumi.RegisterOutputType(AccountsAccountAccountPrivilegeOutput{})
	pulumi.RegisterOutputType(AccountsAccountAccountPrivilegeArrayOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointDbAddressOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointDbAddressArrayOutput{})
	pulumi.RegisterOutputType(InstanceParameterLogsParameterChangeLogsOutput{})
	pulumi.RegisterOutputType(InstanceParametersParametersOutput{})
	pulumi.RegisterOutputType(InstanceParametersParametersInstanceParameterOutput{})
	pulumi.RegisterOutputType(InstanceParametersParametersInstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConfigServerOutput{})
	pulumi.RegisterOutputType(InstancesInstanceConfigServerArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceMongoOutput{})
	pulumi.RegisterOutputType(InstancesInstanceMongoArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNodeOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceShardOutput{})
	pulumi.RegisterOutputType(InstancesInstanceShardArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceShardNodeOutput{})
	pulumi.RegisterOutputType(InstancesInstanceShardNodeArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(MongoAllowListsAllowListOutput{})
	pulumi.RegisterOutputType(MongoAllowListsAllowListArrayOutput{})
	pulumi.RegisterOutputType(MongoAllowListsAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(MongoAllowListsAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(RegionsRegionOutput{})
	pulumi.RegisterOutputType(RegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(SpecsSpecsOutput{})
	pulumi.RegisterOutputType(SpecsSpecsMongosNodeSpecOutput{})
	pulumi.RegisterOutputType(SpecsSpecsMongosNodeSpecArrayOutput{})
	pulumi.RegisterOutputType(SpecsSpecsNodeSpecOutput{})
	pulumi.RegisterOutputType(SpecsSpecsNodeSpecArrayOutput{})
	pulumi.RegisterOutputType(SpecsSpecsShardNodeSpecOutput{})
	pulumi.RegisterOutputType(SpecsSpecsShardNodeSpecArrayOutput{})
	pulumi.RegisterOutputType(SslStatesSslStateOutput{})
	pulumi.RegisterOutputType(SslStatesSslStateArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
}
