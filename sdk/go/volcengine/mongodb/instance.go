// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodb.NewInstance(ctx, "foo", &mongodb.InstanceArgs{
//				ChargeType:           pulumi.String("PostPaid"),
//				DbEngineVersion:      pulumi.String("MongoDB_4_0"),
//				InstanceName:         pulumi.String("mongo-replica-be9995d32e4a"),
//				InstanceType:         pulumi.String("ReplicaSet"),
//				NodeSpec:             pulumi.String("mongo.2c4g"),
//				ProjectName:          pulumi.String("default"),
//				StorageSpaceGb:       pulumi.Int(20),
//				SubnetId:             pulumi.String("subnet-rrx4ns6abw1sv0x57wq6h47"),
//				SuperAccountPassword: pulumi.String("******"),
//				Tags: mongodb.InstanceTagArray{
//					&mongodb.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//				ZoneId: pulumi.String("cn-beijing-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// mongodb instance can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:mongodb/instance:Instance default mongo-replica-e405f8e2****
//
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Whether to enable automatic renewal.
	AutoRenew pulumi.BoolOutput `pulumi:"autoRenew"`
	// The charge type of instance, valid value contains `Prepaid` or `PostPaid`.
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_5_0`.
	DbEngineVersion pulumi.StringOutput `pulumi:"dbEngineVersion"`
	// The instance name.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The type of instance,the valid value contains `ReplicaSet` or `ShardedCluster`.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// The mongos node number of shard cluster,value range is `2~23`, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeNumber pulumi.IntPtrOutput `pulumi:"mongosNodeNumber"`
	// The mongos node spec of shard cluster, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeSpec pulumi.StringPtrOutput `pulumi:"mongosNodeSpec"`
	// The spec of node.
	NodeSpec pulumi.StringOutput `pulumi:"nodeSpec"`
	// The instance purchase duration,the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	Period pulumi.IntOutput `pulumi:"period"`
	// The period unit,valid value contains `Year` or `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	PeriodUnit pulumi.StringOutput `pulumi:"periodUnit"`
	// The project name to which the instance belongs.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The number of shards in shard cluster,value range is `2~32`, this parameter is required when `InstanceType` is `ShardedCluster`.
	ShardNumber pulumi.IntPtrOutput `pulumi:"shardNumber"`
	// The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster, in GiB.
	StorageSpaceGb pulumi.IntOutput `pulumi:"storageSpaceGb"`
	// The subnet id of instance.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The password of database account.
	SuperAccountPassword pulumi.StringPtrOutput `pulumi:"superAccountPassword"`
	// Tags.
	Tags InstanceTagArrayOutput `pulumi:"tags"`
	// The vpc ID.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The zone ID of instance.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NodeSpec == nil {
		return nil, errors.New("invalid value for required argument 'NodeSpec'")
	}
	if args.StorageSpaceGb == nil {
		return nil, errors.New("invalid value for required argument 'StorageSpaceGb'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.SuperAccountPassword != nil {
		args.SuperAccountPassword = pulumi.ToSecret(args.SuperAccountPassword).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"superAccountPassword",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("volcengine:mongodb/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("volcengine:mongodb/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Whether to enable automatic renewal.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The charge type of instance, valid value contains `Prepaid` or `PostPaid`.
	ChargeType *string `pulumi:"chargeType"`
	// The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_5_0`.
	DbEngineVersion *string `pulumi:"dbEngineVersion"`
	// The instance name.
	InstanceName *string `pulumi:"instanceName"`
	// The type of instance,the valid value contains `ReplicaSet` or `ShardedCluster`.
	InstanceType *string `pulumi:"instanceType"`
	// The mongos node number of shard cluster,value range is `2~23`, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeNumber *int `pulumi:"mongosNodeNumber"`
	// The mongos node spec of shard cluster, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeSpec *string `pulumi:"mongosNodeSpec"`
	// The spec of node.
	NodeSpec *string `pulumi:"nodeSpec"`
	// The instance purchase duration,the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	Period *int `pulumi:"period"`
	// The period unit,valid value contains `Year` or `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The project name to which the instance belongs.
	ProjectName *string `pulumi:"projectName"`
	// The number of shards in shard cluster,value range is `2~32`, this parameter is required when `InstanceType` is `ShardedCluster`.
	ShardNumber *int `pulumi:"shardNumber"`
	// The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster, in GiB.
	StorageSpaceGb *int `pulumi:"storageSpaceGb"`
	// The subnet id of instance.
	SubnetId *string `pulumi:"subnetId"`
	// The password of database account.
	SuperAccountPassword *string `pulumi:"superAccountPassword"`
	// Tags.
	Tags []InstanceTag `pulumi:"tags"`
	// The vpc ID.
	VpcId *string `pulumi:"vpcId"`
	// The zone ID of instance.
	ZoneId *string `pulumi:"zoneId"`
}

type InstanceState struct {
	// Whether to enable automatic renewal.
	AutoRenew pulumi.BoolPtrInput
	// The charge type of instance, valid value contains `Prepaid` or `PostPaid`.
	ChargeType pulumi.StringPtrInput
	// The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_5_0`.
	DbEngineVersion pulumi.StringPtrInput
	// The instance name.
	InstanceName pulumi.StringPtrInput
	// The type of instance,the valid value contains `ReplicaSet` or `ShardedCluster`.
	InstanceType pulumi.StringPtrInput
	// The mongos node number of shard cluster,value range is `2~23`, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeNumber pulumi.IntPtrInput
	// The mongos node spec of shard cluster, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeSpec pulumi.StringPtrInput
	// The spec of node.
	NodeSpec pulumi.StringPtrInput
	// The instance purchase duration,the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	Period pulumi.IntPtrInput
	// The period unit,valid value contains `Year` or `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	PeriodUnit pulumi.StringPtrInput
	// The project name to which the instance belongs.
	ProjectName pulumi.StringPtrInput
	// The number of shards in shard cluster,value range is `2~32`, this parameter is required when `InstanceType` is `ShardedCluster`.
	ShardNumber pulumi.IntPtrInput
	// The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster, in GiB.
	StorageSpaceGb pulumi.IntPtrInput
	// The subnet id of instance.
	SubnetId pulumi.StringPtrInput
	// The password of database account.
	SuperAccountPassword pulumi.StringPtrInput
	// Tags.
	Tags InstanceTagArrayInput
	// The vpc ID.
	VpcId pulumi.StringPtrInput
	// The zone ID of instance.
	ZoneId pulumi.StringPtrInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Whether to enable automatic renewal.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The charge type of instance, valid value contains `Prepaid` or `PostPaid`.
	ChargeType *string `pulumi:"chargeType"`
	// The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_5_0`.
	DbEngineVersion *string `pulumi:"dbEngineVersion"`
	// The instance name.
	InstanceName *string `pulumi:"instanceName"`
	// The type of instance,the valid value contains `ReplicaSet` or `ShardedCluster`.
	InstanceType *string `pulumi:"instanceType"`
	// The mongos node number of shard cluster,value range is `2~23`, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeNumber *int `pulumi:"mongosNodeNumber"`
	// The mongos node spec of shard cluster, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeSpec *string `pulumi:"mongosNodeSpec"`
	// The spec of node.
	NodeSpec string `pulumi:"nodeSpec"`
	// The instance purchase duration,the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	Period *int `pulumi:"period"`
	// The period unit,valid value contains `Year` or `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	PeriodUnit *string `pulumi:"periodUnit"`
	// The project name to which the instance belongs.
	ProjectName *string `pulumi:"projectName"`
	// The number of shards in shard cluster,value range is `2~32`, this parameter is required when `InstanceType` is `ShardedCluster`.
	ShardNumber *int `pulumi:"shardNumber"`
	// The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster, in GiB.
	StorageSpaceGb int `pulumi:"storageSpaceGb"`
	// The subnet id of instance.
	SubnetId string `pulumi:"subnetId"`
	// The password of database account.
	SuperAccountPassword *string `pulumi:"superAccountPassword"`
	// Tags.
	Tags []InstanceTag `pulumi:"tags"`
	// The vpc ID.
	VpcId *string `pulumi:"vpcId"`
	// The zone ID of instance.
	ZoneId *string `pulumi:"zoneId"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Whether to enable automatic renewal.
	AutoRenew pulumi.BoolPtrInput
	// The charge type of instance, valid value contains `Prepaid` or `PostPaid`.
	ChargeType pulumi.StringPtrInput
	// The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_5_0`.
	DbEngineVersion pulumi.StringPtrInput
	// The instance name.
	InstanceName pulumi.StringPtrInput
	// The type of instance,the valid value contains `ReplicaSet` or `ShardedCluster`.
	InstanceType pulumi.StringPtrInput
	// The mongos node number of shard cluster,value range is `2~23`, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeNumber pulumi.IntPtrInput
	// The mongos node spec of shard cluster, this parameter is required when `InstanceType` is `ShardedCluster`.
	MongosNodeSpec pulumi.StringPtrInput
	// The spec of node.
	NodeSpec pulumi.StringInput
	// The instance purchase duration,the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	Period pulumi.IntPtrInput
	// The period unit,valid value contains `Year` or `Month`, this parameter is required when `ChargeType` is `Prepaid`.
	PeriodUnit pulumi.StringPtrInput
	// The project name to which the instance belongs.
	ProjectName pulumi.StringPtrInput
	// The number of shards in shard cluster,value range is `2~32`, this parameter is required when `InstanceType` is `ShardedCluster`.
	ShardNumber pulumi.IntPtrInput
	// The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster, in GiB.
	StorageSpaceGb pulumi.IntInput
	// The subnet id of instance.
	SubnetId pulumi.StringInput
	// The password of database account.
	SuperAccountPassword pulumi.StringPtrInput
	// Tags.
	Tags InstanceTagArrayInput
	// The vpc ID.
	VpcId pulumi.StringPtrInput
	// The zone ID of instance.
	ZoneId pulumi.StringPtrInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Whether to enable automatic renewal.
func (o InstanceOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The charge type of instance, valid value contains `Prepaid` or `PostPaid`.
func (o InstanceOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ChargeType }).(pulumi.StringOutput)
}

// The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_5_0`.
func (o InstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The instance name.
func (o InstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// The type of instance,the valid value contains `ReplicaSet` or `ShardedCluster`.
func (o InstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// The mongos node number of shard cluster,value range is `2~23`, this parameter is required when `InstanceType` is `ShardedCluster`.
func (o InstanceOutput) MongosNodeNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.MongosNodeNumber }).(pulumi.IntPtrOutput)
}

// The mongos node spec of shard cluster, this parameter is required when `InstanceType` is `ShardedCluster`.
func (o InstanceOutput) MongosNodeSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.MongosNodeSpec }).(pulumi.StringPtrOutput)
}

// The spec of node.
func (o InstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.NodeSpec }).(pulumi.StringOutput)
}

// The instance purchase duration,the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`, this parameter is required when `ChargeType` is `Prepaid`.
func (o InstanceOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Period }).(pulumi.IntOutput)
}

// The period unit,valid value contains `Year` or `Month`, this parameter is required when `ChargeType` is `Prepaid`.
func (o InstanceOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PeriodUnit }).(pulumi.StringOutput)
}

// The project name to which the instance belongs.
func (o InstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The number of shards in shard cluster,value range is `2~32`, this parameter is required when `InstanceType` is `ShardedCluster`.
func (o InstanceOutput) ShardNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.ShardNumber }).(pulumi.IntPtrOutput)
}

// The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster, in GiB.
func (o InstanceOutput) StorageSpaceGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.StorageSpaceGb }).(pulumi.IntOutput)
}

// The subnet id of instance.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// The password of database account.
func (o InstanceOutput) SuperAccountPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.SuperAccountPassword }).(pulumi.StringPtrOutput)
}

// Tags.
func (o InstanceOutput) Tags() InstanceTagArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceTagArrayOutput { return v.Tags }).(InstanceTagArrayOutput)
}

// The vpc ID.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The zone ID of instance.
func (o InstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
