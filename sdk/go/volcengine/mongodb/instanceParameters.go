// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of mongodb instance parameters
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodb.InstanceParameters(ctx, &mongodb.InstanceParametersArgs{
//				InstanceId:     "mongo-replica-f16e9298b121",
//				ParameterNames: pulumi.StringRef("connPoolMaxConnsPerHost"),
//				ParameterRole:  pulumi.StringRef("Node"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func InstanceParameters(ctx *pulumi.Context, args *InstanceParametersArgs, opts ...pulumi.InvokeOption) (*InstanceParametersResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv InstanceParametersResult
	err := ctx.Invoke("volcengine:mongodb/instanceParameters:InstanceParameters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking InstanceParameters.
type InstanceParametersArgs struct {
	// The instance ID to query.
	InstanceId string `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The parameter names, support fuzzy query, case insensitive.
	ParameterNames *string `pulumi:"parameterNames"`
	// The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.
	ParameterRole *string `pulumi:"parameterRole"`
}

// A collection of values returned by InstanceParameters.
type InstanceParametersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The instance ID.
	InstanceId     string  `pulumi:"instanceId"`
	OutputFile     *string `pulumi:"outputFile"`
	ParameterNames *string `pulumi:"parameterNames"`
	// The node type to which the parameter belongs.
	ParameterRole *string `pulumi:"parameterRole"`
	// The collection of parameter query.
	Parameters InstanceParametersParameters `pulumi:"parameters"`
	// The total count of mongodb instance parameter query.
	TotalCount int `pulumi:"totalCount"`
}

func InstanceParametersOutput(ctx *pulumi.Context, args InstanceParametersOutputArgs, opts ...pulumi.InvokeOption) InstanceParametersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (InstanceParametersResult, error) {
			args := v.(InstanceParametersArgs)
			r, err := InstanceParameters(ctx, &args, opts...)
			var s InstanceParametersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(InstanceParametersResultOutput)
}

// A collection of arguments for invoking InstanceParameters.
type InstanceParametersOutputArgs struct {
	// The instance ID to query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The parameter names, support fuzzy query, case insensitive.
	ParameterNames pulumi.StringPtrInput `pulumi:"parameterNames"`
	// The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.
	ParameterRole pulumi.StringPtrInput `pulumi:"parameterRole"`
}

func (InstanceParametersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParametersArgs)(nil)).Elem()
}

// A collection of values returned by InstanceParameters.
type InstanceParametersResultOutput struct{ *pulumi.OutputState }

func (InstanceParametersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParametersResult)(nil)).Elem()
}

func (o InstanceParametersResultOutput) ToInstanceParametersResultOutput() InstanceParametersResultOutput {
	return o
}

func (o InstanceParametersResultOutput) ToInstanceParametersResultOutputWithContext(ctx context.Context) InstanceParametersResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o InstanceParametersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersResult) string { return v.Id }).(pulumi.StringOutput)
}

// The instance ID.
func (o InstanceParametersResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParametersResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o InstanceParametersResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceParametersResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o InstanceParametersResultOutput) ParameterNames() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceParametersResult) *string { return v.ParameterNames }).(pulumi.StringPtrOutput)
}

// The node type to which the parameter belongs.
func (o InstanceParametersResultOutput) ParameterRole() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceParametersResult) *string { return v.ParameterRole }).(pulumi.StringPtrOutput)
}

// The collection of parameter query.
func (o InstanceParametersResultOutput) Parameters() InstanceParametersParametersOutput {
	return o.ApplyT(func(v InstanceParametersResult) InstanceParametersParameters { return v.Parameters }).(InstanceParametersParametersOutput)
}

// The total count of mongodb instance parameter query.
func (o InstanceParametersResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v InstanceParametersResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(InstanceParametersResultOutput{})
}
