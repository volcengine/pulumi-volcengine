// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of mongodb specs
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/mongodb"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodb.Specs(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Specs(ctx *pulumi.Context, args *SpecsArgs, opts ...pulumi.InvokeOption) (*SpecsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv SpecsResult
	err := ctx.Invoke("volcengine:mongodb/specs:Specs", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Specs.
type SpecsArgs struct {
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The region ID to query.
	RegionId *string `pulumi:"regionId"`
}

// A collection of values returned by Specs.
type SpecsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	RegionId   *string `pulumi:"regionId"`
	// A list of supported node specification information for MongoDB instances.
	Specs SpecsSpecs `pulumi:"specs"`
	// The total count of region query.
	TotalCount int `pulumi:"totalCount"`
}

func SpecsOutput(ctx *pulumi.Context, args SpecsOutputArgs, opts ...pulumi.InvokeOption) SpecsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (SpecsResult, error) {
			args := v.(SpecsArgs)
			r, err := Specs(ctx, &args, opts...)
			var s SpecsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(SpecsResultOutput)
}

// A collection of arguments for invoking Specs.
type SpecsOutputArgs struct {
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The region ID to query.
	RegionId pulumi.StringPtrInput `pulumi:"regionId"`
}

func (SpecsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsArgs)(nil)).Elem()
}

// A collection of values returned by Specs.
type SpecsResultOutput struct{ *pulumi.OutputState }

func (SpecsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SpecsResult)(nil)).Elem()
}

func (o SpecsResultOutput) ToSpecsResultOutput() SpecsResultOutput {
	return o
}

func (o SpecsResultOutput) ToSpecsResultOutputWithContext(ctx context.Context) SpecsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o SpecsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SpecsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o SpecsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpecsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o SpecsResultOutput) RegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SpecsResult) *string { return v.RegionId }).(pulumi.StringPtrOutput)
}

// A list of supported node specification information for MongoDB instances.
func (o SpecsResultOutput) Specs() SpecsSpecsOutput {
	return o.ApplyT(func(v SpecsResult) SpecsSpecs { return v.Specs }).(SpecsSpecsOutput)
}

// The total count of region query.
func (o SpecsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v SpecsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(SpecsResultOutput{})
}
