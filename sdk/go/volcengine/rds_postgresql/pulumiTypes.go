// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_postgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type AccountsAccount struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName string `pulumi:"accountName"`
	// The privileges of the database account.
	AccountPrivileges string `pulumi:"accountPrivileges"`
	// The status of the database account.
	AccountStatus string `pulumi:"accountStatus"`
	// The type of the database account.
	AccountType string `pulumi:"accountType"`
}

// AccountsAccountInput is an input type that accepts AccountsAccountArgs and AccountsAccountOutput values.
// You can construct a concrete instance of `AccountsAccountInput` via:
//
//	AccountsAccountArgs{...}
type AccountsAccountInput interface {
	pulumi.Input

	ToAccountsAccountOutput() AccountsAccountOutput
	ToAccountsAccountOutputWithContext(context.Context) AccountsAccountOutput
}

type AccountsAccountArgs struct {
	// The name of the database account. This field supports fuzzy query.
	AccountName pulumi.StringInput `pulumi:"accountName"`
	// The privileges of the database account.
	AccountPrivileges pulumi.StringInput `pulumi:"accountPrivileges"`
	// The status of the database account.
	AccountStatus pulumi.StringInput `pulumi:"accountStatus"`
	// The type of the database account.
	AccountType pulumi.StringInput `pulumi:"accountType"`
}

func (AccountsAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccount)(nil)).Elem()
}

func (i AccountsAccountArgs) ToAccountsAccountOutput() AccountsAccountOutput {
	return i.ToAccountsAccountOutputWithContext(context.Background())
}

func (i AccountsAccountArgs) ToAccountsAccountOutputWithContext(ctx context.Context) AccountsAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountOutput)
}

// AccountsAccountArrayInput is an input type that accepts AccountsAccountArray and AccountsAccountArrayOutput values.
// You can construct a concrete instance of `AccountsAccountArrayInput` via:
//
//	AccountsAccountArray{ AccountsAccountArgs{...} }
type AccountsAccountArrayInput interface {
	pulumi.Input

	ToAccountsAccountArrayOutput() AccountsAccountArrayOutput
	ToAccountsAccountArrayOutputWithContext(context.Context) AccountsAccountArrayOutput
}

type AccountsAccountArray []AccountsAccountInput

func (AccountsAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccount)(nil)).Elem()
}

func (i AccountsAccountArray) ToAccountsAccountArrayOutput() AccountsAccountArrayOutput {
	return i.ToAccountsAccountArrayOutputWithContext(context.Background())
}

func (i AccountsAccountArray) ToAccountsAccountArrayOutputWithContext(ctx context.Context) AccountsAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountsAccountArrayOutput)
}

type AccountsAccountOutput struct{ *pulumi.OutputState }

func (AccountsAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccountsAccount)(nil)).Elem()
}

func (o AccountsAccountOutput) ToAccountsAccountOutput() AccountsAccountOutput {
	return o
}

func (o AccountsAccountOutput) ToAccountsAccountOutputWithContext(ctx context.Context) AccountsAccountOutput {
	return o
}

// The name of the database account. This field supports fuzzy query.
func (o AccountsAccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountName }).(pulumi.StringOutput)
}

// The privileges of the database account.
func (o AccountsAccountOutput) AccountPrivileges() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountPrivileges }).(pulumi.StringOutput)
}

// The status of the database account.
func (o AccountsAccountOutput) AccountStatus() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountStatus }).(pulumi.StringOutput)
}

// The type of the database account.
func (o AccountsAccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v AccountsAccount) string { return v.AccountType }).(pulumi.StringOutput)
}

type AccountsAccountArrayOutput struct{ *pulumi.OutputState }

func (AccountsAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccountsAccount)(nil)).Elem()
}

func (o AccountsAccountArrayOutput) ToAccountsAccountArrayOutput() AccountsAccountArrayOutput {
	return o
}

func (o AccountsAccountArrayOutput) ToAccountsAccountArrayOutputWithContext(ctx context.Context) AccountsAccountArrayOutput {
	return o
}

func (o AccountsAccountArrayOutput) Index(i pulumi.IntInput) AccountsAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccountsAccount {
		return vs[0].([]AccountsAccount)[vs[1].(int)]
	}).(AccountsAccountOutput)
}

type AllowlistAssociatedInstance struct {
	// The id of the postgresql instance.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the postgresql instance.
	InstanceName *string `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc *string `pulumi:"vpc"`
}

// AllowlistAssociatedInstanceInput is an input type that accepts AllowlistAssociatedInstanceArgs and AllowlistAssociatedInstanceOutput values.
// You can construct a concrete instance of `AllowlistAssociatedInstanceInput` via:
//
//	AllowlistAssociatedInstanceArgs{...}
type AllowlistAssociatedInstanceInput interface {
	pulumi.Input

	ToAllowlistAssociatedInstanceOutput() AllowlistAssociatedInstanceOutput
	ToAllowlistAssociatedInstanceOutputWithContext(context.Context) AllowlistAssociatedInstanceOutput
}

type AllowlistAssociatedInstanceArgs struct {
	// The id of the postgresql instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The name of the postgresql instance.
	InstanceName pulumi.StringPtrInput `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc pulumi.StringPtrInput `pulumi:"vpc"`
}

func (AllowlistAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistAssociatedInstance)(nil)).Elem()
}

func (i AllowlistAssociatedInstanceArgs) ToAllowlistAssociatedInstanceOutput() AllowlistAssociatedInstanceOutput {
	return i.ToAllowlistAssociatedInstanceOutputWithContext(context.Background())
}

func (i AllowlistAssociatedInstanceArgs) ToAllowlistAssociatedInstanceOutputWithContext(ctx context.Context) AllowlistAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistAssociatedInstanceOutput)
}

// AllowlistAssociatedInstanceArrayInput is an input type that accepts AllowlistAssociatedInstanceArray and AllowlistAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `AllowlistAssociatedInstanceArrayInput` via:
//
//	AllowlistAssociatedInstanceArray{ AllowlistAssociatedInstanceArgs{...} }
type AllowlistAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToAllowlistAssociatedInstanceArrayOutput() AllowlistAssociatedInstanceArrayOutput
	ToAllowlistAssociatedInstanceArrayOutputWithContext(context.Context) AllowlistAssociatedInstanceArrayOutput
}

type AllowlistAssociatedInstanceArray []AllowlistAssociatedInstanceInput

func (AllowlistAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistAssociatedInstance)(nil)).Elem()
}

func (i AllowlistAssociatedInstanceArray) ToAllowlistAssociatedInstanceArrayOutput() AllowlistAssociatedInstanceArrayOutput {
	return i.ToAllowlistAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i AllowlistAssociatedInstanceArray) ToAllowlistAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowlistAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistAssociatedInstanceArrayOutput)
}

type AllowlistAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (AllowlistAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistAssociatedInstance)(nil)).Elem()
}

func (o AllowlistAssociatedInstanceOutput) ToAllowlistAssociatedInstanceOutput() AllowlistAssociatedInstanceOutput {
	return o
}

func (o AllowlistAssociatedInstanceOutput) ToAllowlistAssociatedInstanceOutputWithContext(ctx context.Context) AllowlistAssociatedInstanceOutput {
	return o
}

// The id of the postgresql instance.
func (o AllowlistAssociatedInstanceOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowlistAssociatedInstance) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The name of the postgresql instance.
func (o AllowlistAssociatedInstanceOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowlistAssociatedInstance) *string { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// The id of the vpc.
func (o AllowlistAssociatedInstanceOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AllowlistAssociatedInstance) *string { return v.Vpc }).(pulumi.StringPtrOutput)
}

type AllowlistAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (AllowlistAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistAssociatedInstance)(nil)).Elem()
}

func (o AllowlistAssociatedInstanceArrayOutput) ToAllowlistAssociatedInstanceArrayOutput() AllowlistAssociatedInstanceArrayOutput {
	return o
}

func (o AllowlistAssociatedInstanceArrayOutput) ToAllowlistAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowlistAssociatedInstanceArrayOutput {
	return o
}

func (o AllowlistAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) AllowlistAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowlistAssociatedInstance {
		return vs[0].([]AllowlistAssociatedInstance)[vs[1].(int)]
	}).(AllowlistAssociatedInstanceOutput)
}

type AllowlistsPostgresqlAllowList struct {
	// The description of the postgresql allow list.
	AllowListDesc string `pulumi:"allowListDesc"`
	// The id of the postgresql allow list.
	AllowListId string `pulumi:"allowListId"`
	// The total number of IP addresses (or address ranges) in the whitelist.
	AllowListIpNum int `pulumi:"allowListIpNum"`
	// The name of the postgresql allow list.
	AllowListName string `pulumi:"allowListName"`
	// The type of the postgresql allow list.
	AllowListType string `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format.
	AllowLists []string `pulumi:"allowLists"`
	// The total number of instances bound under the whitelist.
	AssociatedInstanceNum int `pulumi:"associatedInstanceNum"`
	// The list of postgresql instances.
	AssociatedInstances []AllowlistsPostgresqlAllowListAssociatedInstance `pulumi:"associatedInstances"`
	// The id of the postgresql allow list.
	Id string `pulumi:"id"`
}

// AllowlistsPostgresqlAllowListInput is an input type that accepts AllowlistsPostgresqlAllowListArgs and AllowlistsPostgresqlAllowListOutput values.
// You can construct a concrete instance of `AllowlistsPostgresqlAllowListInput` via:
//
//	AllowlistsPostgresqlAllowListArgs{...}
type AllowlistsPostgresqlAllowListInput interface {
	pulumi.Input

	ToAllowlistsPostgresqlAllowListOutput() AllowlistsPostgresqlAllowListOutput
	ToAllowlistsPostgresqlAllowListOutputWithContext(context.Context) AllowlistsPostgresqlAllowListOutput
}

type AllowlistsPostgresqlAllowListArgs struct {
	// The description of the postgresql allow list.
	AllowListDesc pulumi.StringInput `pulumi:"allowListDesc"`
	// The id of the postgresql allow list.
	AllowListId pulumi.StringInput `pulumi:"allowListId"`
	// The total number of IP addresses (or address ranges) in the whitelist.
	AllowListIpNum pulumi.IntInput `pulumi:"allowListIpNum"`
	// The name of the postgresql allow list.
	AllowListName pulumi.StringInput `pulumi:"allowListName"`
	// The type of the postgresql allow list.
	AllowListType pulumi.StringInput `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format.
	AllowLists pulumi.StringArrayInput `pulumi:"allowLists"`
	// The total number of instances bound under the whitelist.
	AssociatedInstanceNum pulumi.IntInput `pulumi:"associatedInstanceNum"`
	// The list of postgresql instances.
	AssociatedInstances AllowlistsPostgresqlAllowListAssociatedInstanceArrayInput `pulumi:"associatedInstances"`
	// The id of the postgresql allow list.
	Id pulumi.StringInput `pulumi:"id"`
}

func (AllowlistsPostgresqlAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsPostgresqlAllowList)(nil)).Elem()
}

func (i AllowlistsPostgresqlAllowListArgs) ToAllowlistsPostgresqlAllowListOutput() AllowlistsPostgresqlAllowListOutput {
	return i.ToAllowlistsPostgresqlAllowListOutputWithContext(context.Background())
}

func (i AllowlistsPostgresqlAllowListArgs) ToAllowlistsPostgresqlAllowListOutputWithContext(ctx context.Context) AllowlistsPostgresqlAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsPostgresqlAllowListOutput)
}

// AllowlistsPostgresqlAllowListArrayInput is an input type that accepts AllowlistsPostgresqlAllowListArray and AllowlistsPostgresqlAllowListArrayOutput values.
// You can construct a concrete instance of `AllowlistsPostgresqlAllowListArrayInput` via:
//
//	AllowlistsPostgresqlAllowListArray{ AllowlistsPostgresqlAllowListArgs{...} }
type AllowlistsPostgresqlAllowListArrayInput interface {
	pulumi.Input

	ToAllowlistsPostgresqlAllowListArrayOutput() AllowlistsPostgresqlAllowListArrayOutput
	ToAllowlistsPostgresqlAllowListArrayOutputWithContext(context.Context) AllowlistsPostgresqlAllowListArrayOutput
}

type AllowlistsPostgresqlAllowListArray []AllowlistsPostgresqlAllowListInput

func (AllowlistsPostgresqlAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsPostgresqlAllowList)(nil)).Elem()
}

func (i AllowlistsPostgresqlAllowListArray) ToAllowlistsPostgresqlAllowListArrayOutput() AllowlistsPostgresqlAllowListArrayOutput {
	return i.ToAllowlistsPostgresqlAllowListArrayOutputWithContext(context.Background())
}

func (i AllowlistsPostgresqlAllowListArray) ToAllowlistsPostgresqlAllowListArrayOutputWithContext(ctx context.Context) AllowlistsPostgresqlAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsPostgresqlAllowListArrayOutput)
}

type AllowlistsPostgresqlAllowListOutput struct{ *pulumi.OutputState }

func (AllowlistsPostgresqlAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsPostgresqlAllowList)(nil)).Elem()
}

func (o AllowlistsPostgresqlAllowListOutput) ToAllowlistsPostgresqlAllowListOutput() AllowlistsPostgresqlAllowListOutput {
	return o
}

func (o AllowlistsPostgresqlAllowListOutput) ToAllowlistsPostgresqlAllowListOutputWithContext(ctx context.Context) AllowlistsPostgresqlAllowListOutput {
	return o
}

// The description of the postgresql allow list.
func (o AllowlistsPostgresqlAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowList) string { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The id of the postgresql allow list.
func (o AllowlistsPostgresqlAllowListOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowList) string { return v.AllowListId }).(pulumi.StringOutput)
}

// The total number of IP addresses (or address ranges) in the whitelist.
func (o AllowlistsPostgresqlAllowListOutput) AllowListIpNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowList) int { return v.AllowListIpNum }).(pulumi.IntOutput)
}

// The name of the postgresql allow list.
func (o AllowlistsPostgresqlAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowList) string { return v.AllowListName }).(pulumi.StringOutput)
}

// The type of the postgresql allow list.
func (o AllowlistsPostgresqlAllowListOutput) AllowListType() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowList) string { return v.AllowListType }).(pulumi.StringOutput)
}

// The IP address or a range of IP addresses in CIDR format.
func (o AllowlistsPostgresqlAllowListOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowList) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The total number of instances bound under the whitelist.
func (o AllowlistsPostgresqlAllowListOutput) AssociatedInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowList) int { return v.AssociatedInstanceNum }).(pulumi.IntOutput)
}

// The list of postgresql instances.
func (o AllowlistsPostgresqlAllowListOutput) AssociatedInstances() AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowList) []AllowlistsPostgresqlAllowListAssociatedInstance {
		return v.AssociatedInstances
	}).(AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput)
}

// The id of the postgresql allow list.
func (o AllowlistsPostgresqlAllowListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowList) string { return v.Id }).(pulumi.StringOutput)
}

type AllowlistsPostgresqlAllowListArrayOutput struct{ *pulumi.OutputState }

func (AllowlistsPostgresqlAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsPostgresqlAllowList)(nil)).Elem()
}

func (o AllowlistsPostgresqlAllowListArrayOutput) ToAllowlistsPostgresqlAllowListArrayOutput() AllowlistsPostgresqlAllowListArrayOutput {
	return o
}

func (o AllowlistsPostgresqlAllowListArrayOutput) ToAllowlistsPostgresqlAllowListArrayOutputWithContext(ctx context.Context) AllowlistsPostgresqlAllowListArrayOutput {
	return o
}

func (o AllowlistsPostgresqlAllowListArrayOutput) Index(i pulumi.IntInput) AllowlistsPostgresqlAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowlistsPostgresqlAllowList {
		return vs[0].([]AllowlistsPostgresqlAllowList)[vs[1].(int)]
	}).(AllowlistsPostgresqlAllowListOutput)
}

type AllowlistsPostgresqlAllowListAssociatedInstance struct {
	// The id of the postgresql Instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the postgresql instance.
	InstanceName string `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc string `pulumi:"vpc"`
}

// AllowlistsPostgresqlAllowListAssociatedInstanceInput is an input type that accepts AllowlistsPostgresqlAllowListAssociatedInstanceArgs and AllowlistsPostgresqlAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `AllowlistsPostgresqlAllowListAssociatedInstanceInput` via:
//
//	AllowlistsPostgresqlAllowListAssociatedInstanceArgs{...}
type AllowlistsPostgresqlAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToAllowlistsPostgresqlAllowListAssociatedInstanceOutput() AllowlistsPostgresqlAllowListAssociatedInstanceOutput
	ToAllowlistsPostgresqlAllowListAssociatedInstanceOutputWithContext(context.Context) AllowlistsPostgresqlAllowListAssociatedInstanceOutput
}

type AllowlistsPostgresqlAllowListAssociatedInstanceArgs struct {
	// The id of the postgresql Instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the postgresql instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The id of the vpc.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (AllowlistsPostgresqlAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsPostgresqlAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowlistsPostgresqlAllowListAssociatedInstanceArgs) ToAllowlistsPostgresqlAllowListAssociatedInstanceOutput() AllowlistsPostgresqlAllowListAssociatedInstanceOutput {
	return i.ToAllowlistsPostgresqlAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i AllowlistsPostgresqlAllowListAssociatedInstanceArgs) ToAllowlistsPostgresqlAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowlistsPostgresqlAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsPostgresqlAllowListAssociatedInstanceOutput)
}

// AllowlistsPostgresqlAllowListAssociatedInstanceArrayInput is an input type that accepts AllowlistsPostgresqlAllowListAssociatedInstanceArray and AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `AllowlistsPostgresqlAllowListAssociatedInstanceArrayInput` via:
//
//	AllowlistsPostgresqlAllowListAssociatedInstanceArray{ AllowlistsPostgresqlAllowListAssociatedInstanceArgs{...} }
type AllowlistsPostgresqlAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToAllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput() AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput
	ToAllowlistsPostgresqlAllowListAssociatedInstanceArrayOutputWithContext(context.Context) AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput
}

type AllowlistsPostgresqlAllowListAssociatedInstanceArray []AllowlistsPostgresqlAllowListAssociatedInstanceInput

func (AllowlistsPostgresqlAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsPostgresqlAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowlistsPostgresqlAllowListAssociatedInstanceArray) ToAllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput() AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput {
	return i.ToAllowlistsPostgresqlAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i AllowlistsPostgresqlAllowListAssociatedInstanceArray) ToAllowlistsPostgresqlAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput)
}

type AllowlistsPostgresqlAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (AllowlistsPostgresqlAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowlistsPostgresqlAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowlistsPostgresqlAllowListAssociatedInstanceOutput) ToAllowlistsPostgresqlAllowListAssociatedInstanceOutput() AllowlistsPostgresqlAllowListAssociatedInstanceOutput {
	return o
}

func (o AllowlistsPostgresqlAllowListAssociatedInstanceOutput) ToAllowlistsPostgresqlAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowlistsPostgresqlAllowListAssociatedInstanceOutput {
	return o
}

// The id of the postgresql Instance.
func (o AllowlistsPostgresqlAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowListAssociatedInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the postgresql instance.
func (o AllowlistsPostgresqlAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowListAssociatedInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The id of the vpc.
func (o AllowlistsPostgresqlAllowListAssociatedInstanceOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v AllowlistsPostgresqlAllowListAssociatedInstance) string { return v.Vpc }).(pulumi.StringOutput)
}

type AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowlistsPostgresqlAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput) ToAllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput() AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput) ToAllowlistsPostgresqlAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) AllowlistsPostgresqlAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowlistsPostgresqlAllowListAssociatedInstance {
		return vs[0].([]AllowlistsPostgresqlAllowListAssociatedInstance)[vs[1].(int)]
	}).(AllowlistsPostgresqlAllowListAssociatedInstanceOutput)
}

type DatabasesDatabase struct {
	// Character classification.
	CType string `pulumi:"cType"`
	// The character set of the RDS database.
	CharacterSetName string `pulumi:"characterSetName"`
	// The collate of database.
	Collate string `pulumi:"collate"`
	// The name of the RDS database.
	DbName string `pulumi:"dbName"`
	// The status of the RDS database.
	DbStatus string `pulumi:"dbStatus"`
	// The owner of database.
	Owner string `pulumi:"owner"`
}

// DatabasesDatabaseInput is an input type that accepts DatabasesDatabaseArgs and DatabasesDatabaseOutput values.
// You can construct a concrete instance of `DatabasesDatabaseInput` via:
//
//	DatabasesDatabaseArgs{...}
type DatabasesDatabaseInput interface {
	pulumi.Input

	ToDatabasesDatabaseOutput() DatabasesDatabaseOutput
	ToDatabasesDatabaseOutputWithContext(context.Context) DatabasesDatabaseOutput
}

type DatabasesDatabaseArgs struct {
	// Character classification.
	CType pulumi.StringInput `pulumi:"cType"`
	// The character set of the RDS database.
	CharacterSetName pulumi.StringInput `pulumi:"characterSetName"`
	// The collate of database.
	Collate pulumi.StringInput `pulumi:"collate"`
	// The name of the RDS database.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// The status of the RDS database.
	DbStatus pulumi.StringInput `pulumi:"dbStatus"`
	// The owner of database.
	Owner pulumi.StringInput `pulumi:"owner"`
}

func (DatabasesDatabaseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabase)(nil)).Elem()
}

func (i DatabasesDatabaseArgs) ToDatabasesDatabaseOutput() DatabasesDatabaseOutput {
	return i.ToDatabasesDatabaseOutputWithContext(context.Background())
}

func (i DatabasesDatabaseArgs) ToDatabasesDatabaseOutputWithContext(ctx context.Context) DatabasesDatabaseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseOutput)
}

// DatabasesDatabaseArrayInput is an input type that accepts DatabasesDatabaseArray and DatabasesDatabaseArrayOutput values.
// You can construct a concrete instance of `DatabasesDatabaseArrayInput` via:
//
//	DatabasesDatabaseArray{ DatabasesDatabaseArgs{...} }
type DatabasesDatabaseArrayInput interface {
	pulumi.Input

	ToDatabasesDatabaseArrayOutput() DatabasesDatabaseArrayOutput
	ToDatabasesDatabaseArrayOutputWithContext(context.Context) DatabasesDatabaseArrayOutput
}

type DatabasesDatabaseArray []DatabasesDatabaseInput

func (DatabasesDatabaseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabase)(nil)).Elem()
}

func (i DatabasesDatabaseArray) ToDatabasesDatabaseArrayOutput() DatabasesDatabaseArrayOutput {
	return i.ToDatabasesDatabaseArrayOutputWithContext(context.Background())
}

func (i DatabasesDatabaseArray) ToDatabasesDatabaseArrayOutputWithContext(ctx context.Context) DatabasesDatabaseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasesDatabaseArrayOutput)
}

type DatabasesDatabaseOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasesDatabase)(nil)).Elem()
}

func (o DatabasesDatabaseOutput) ToDatabasesDatabaseOutput() DatabasesDatabaseOutput {
	return o
}

func (o DatabasesDatabaseOutput) ToDatabasesDatabaseOutputWithContext(ctx context.Context) DatabasesDatabaseOutput {
	return o
}

// Character classification.
func (o DatabasesDatabaseOutput) CType() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.CType }).(pulumi.StringOutput)
}

// The character set of the RDS database.
func (o DatabasesDatabaseOutput) CharacterSetName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.CharacterSetName }).(pulumi.StringOutput)
}

// The collate of database.
func (o DatabasesDatabaseOutput) Collate() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.Collate }).(pulumi.StringOutput)
}

// The name of the RDS database.
func (o DatabasesDatabaseOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.DbName }).(pulumi.StringOutput)
}

// The status of the RDS database.
func (o DatabasesDatabaseOutput) DbStatus() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.DbStatus }).(pulumi.StringOutput)
}

// The owner of database.
func (o DatabasesDatabaseOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v DatabasesDatabase) string { return v.Owner }).(pulumi.StringOutput)
}

type DatabasesDatabaseArrayOutput struct{ *pulumi.OutputState }

func (DatabasesDatabaseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasesDatabase)(nil)).Elem()
}

func (o DatabasesDatabaseArrayOutput) ToDatabasesDatabaseArrayOutput() DatabasesDatabaseArrayOutput {
	return o
}

func (o DatabasesDatabaseArrayOutput) ToDatabasesDatabaseArrayOutputWithContext(ctx context.Context) DatabasesDatabaseArrayOutput {
	return o
}

func (o DatabasesDatabaseArrayOutput) Index(i pulumi.IntInput) DatabasesDatabaseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasesDatabase {
		return vs[0].([]DatabasesDatabase)[vs[1].(int)]
	}).(DatabasesDatabaseOutput)
}

type InstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime *string `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime *string `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus *string `pulumi:"chargeStatus"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType *string `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime *string `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime *string `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period *int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Temporary upgrade of restoration time.
	TempModifyEndTime *string `pulumi:"tempModifyEndTime"`
	// Start time of temporary upgrade.
	TempModifyStartTime *string `pulumi:"tempModifyStartTime"`
}

// InstanceChargeDetailInput is an input type that accepts InstanceChargeDetailArgs and InstanceChargeDetailOutput values.
// You can construct a concrete instance of `InstanceChargeDetailInput` via:
//
//	InstanceChargeDetailArgs{...}
type InstanceChargeDetailInput interface {
	pulumi.Input

	ToInstanceChargeDetailOutput() InstanceChargeDetailOutput
	ToInstanceChargeDetailOutputWithContext(context.Context) InstanceChargeDetailOutput
}

type InstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime pulumi.StringPtrInput `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime pulumi.StringPtrInput `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus pulumi.StringPtrInput `pulumi:"chargeStatus"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType pulumi.StringPtrInput `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime pulumi.StringPtrInput `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime pulumi.StringPtrInput `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringPtrInput `pulumi:"periodUnit"`
	// Temporary upgrade of restoration time.
	TempModifyEndTime pulumi.StringPtrInput `pulumi:"tempModifyEndTime"`
	// Start time of temporary upgrade.
	TempModifyStartTime pulumi.StringPtrInput `pulumi:"tempModifyStartTime"`
}

func (InstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeDetail)(nil)).Elem()
}

func (i InstanceChargeDetailArgs) ToInstanceChargeDetailOutput() InstanceChargeDetailOutput {
	return i.ToInstanceChargeDetailOutputWithContext(context.Background())
}

func (i InstanceChargeDetailArgs) ToInstanceChargeDetailOutputWithContext(ctx context.Context) InstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeDetailOutput)
}

// InstanceChargeDetailArrayInput is an input type that accepts InstanceChargeDetailArray and InstanceChargeDetailArrayOutput values.
// You can construct a concrete instance of `InstanceChargeDetailArrayInput` via:
//
//	InstanceChargeDetailArray{ InstanceChargeDetailArgs{...} }
type InstanceChargeDetailArrayInput interface {
	pulumi.Input

	ToInstanceChargeDetailArrayOutput() InstanceChargeDetailArrayOutput
	ToInstanceChargeDetailArrayOutputWithContext(context.Context) InstanceChargeDetailArrayOutput
}

type InstanceChargeDetailArray []InstanceChargeDetailInput

func (InstanceChargeDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceChargeDetail)(nil)).Elem()
}

func (i InstanceChargeDetailArray) ToInstanceChargeDetailArrayOutput() InstanceChargeDetailArrayOutput {
	return i.ToInstanceChargeDetailArrayOutputWithContext(context.Background())
}

func (i InstanceChargeDetailArray) ToInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstanceChargeDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeDetailArrayOutput)
}

type InstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (InstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeDetail)(nil)).Elem()
}

func (o InstanceChargeDetailOutput) ToInstanceChargeDetailOutput() InstanceChargeDetailOutput {
	return o
}

func (o InstanceChargeDetailOutput) ToInstanceChargeDetailOutputWithContext(ctx context.Context) InstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
func (o InstanceChargeDetailOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// Billing expiry time (yearly and monthly only).
func (o InstanceChargeDetailOutput) ChargeEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeEndTime }).(pulumi.StringPtrOutput)
}

// Billing start time (pay-as-you-go & monthly subscription).
func (o InstanceChargeDetailOutput) ChargeStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeStartTime }).(pulumi.StringPtrOutput)
}

// Pay status. Value:
// normal - normal
// overdue - overdue
// .
func (o InstanceChargeDetailOutput) ChargeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeStatus }).(pulumi.StringPtrOutput)
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o InstanceChargeDetailOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.ChargeType }).(pulumi.StringPtrOutput)
}

// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
func (o InstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.OverdueReclaimTime }).(pulumi.StringPtrOutput)
}

// Shutdown time in arrears (pay-as-you-go & monthly subscription).
func (o InstanceChargeDetailOutput) OverdueTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.OverdueTime }).(pulumi.StringPtrOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstanceChargeDetailOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstanceChargeDetailOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

// Temporary upgrade of restoration time.
func (o InstanceChargeDetailOutput) TempModifyEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.TempModifyEndTime }).(pulumi.StringPtrOutput)
}

// Start time of temporary upgrade.
func (o InstanceChargeDetailOutput) TempModifyStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeDetail) *string { return v.TempModifyStartTime }).(pulumi.StringPtrOutput)
}

type InstanceChargeDetailArrayOutput struct{ *pulumi.OutputState }

func (InstanceChargeDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceChargeDetail)(nil)).Elem()
}

func (o InstanceChargeDetailArrayOutput) ToInstanceChargeDetailArrayOutput() InstanceChargeDetailArrayOutput {
	return o
}

func (o InstanceChargeDetailArrayOutput) ToInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstanceChargeDetailArrayOutput {
	return o
}

func (o InstanceChargeDetailArrayOutput) Index(i pulumi.IntInput) InstanceChargeDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceChargeDetail {
		return vs[0].([]InstanceChargeDetail)[vs[1].(int)]
	}).(InstanceChargeDetailOutput)
}

type InstanceChargeInfo struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType string `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period *int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit *string `pulumi:"periodUnit"`
}

// InstanceChargeInfoInput is an input type that accepts InstanceChargeInfoArgs and InstanceChargeInfoOutput values.
// You can construct a concrete instance of `InstanceChargeInfoInput` via:
//
//	InstanceChargeInfoArgs{...}
type InstanceChargeInfoInput interface {
	pulumi.Input

	ToInstanceChargeInfoOutput() InstanceChargeInfoOutput
	ToInstanceChargeInfoOutputWithContext(context.Context) InstanceChargeInfoOutput
}

type InstanceChargeInfoArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringPtrInput `pulumi:"periodUnit"`
}

func (InstanceChargeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return i.ToInstanceChargeInfoOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput)
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput).ToInstanceChargeInfoPtrOutputWithContext(ctx)
}

// InstanceChargeInfoPtrInput is an input type that accepts InstanceChargeInfoArgs, InstanceChargeInfoPtr and InstanceChargeInfoPtrOutput values.
// You can construct a concrete instance of `InstanceChargeInfoPtrInput` via:
//
//	        InstanceChargeInfoArgs{...}
//
//	or:
//
//	        nil
type InstanceChargeInfoPtrInput interface {
	pulumi.Input

	ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput
	ToInstanceChargeInfoPtrOutputWithContext(context.Context) InstanceChargeInfoPtrOutput
}

type instanceChargeInfoPtrType InstanceChargeInfoArgs

func InstanceChargeInfoPtr(v *InstanceChargeInfoArgs) InstanceChargeInfoPtrInput {
	return (*instanceChargeInfoPtrType)(v)
}

func (*instanceChargeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoPtrOutput)
}

type InstanceChargeInfoOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceChargeInfo) *InstanceChargeInfo {
		return &v
	}).(InstanceChargeInfoPtrOutput)
}

// Whether to automatically renew in prepaid scenarios.
func (o InstanceChargeInfoOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o InstanceChargeInfoOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceChargeInfo) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstanceChargeInfoOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstanceChargeInfoOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *string { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

type InstanceChargeInfoPtrOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) Elem() InstanceChargeInfoOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) InstanceChargeInfo {
		if v != nil {
			return *v
		}
		var ret InstanceChargeInfo
		return ret
	}).(InstanceChargeInfoOutput)
}

// Whether to automatically renew in prepaid scenarios.
func (o InstanceChargeInfoPtrOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRenew
	}).(pulumi.BoolPtrOutput)
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o InstanceChargeInfoPtrOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ChargeType
	}).(pulumi.StringPtrOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstanceChargeInfoPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *int {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstanceChargeInfoPtrOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.PeriodUnit
	}).(pulumi.StringPtrOutput)
}

type InstanceEndpoint struct {
	// Address list.
	Addresses []InstanceEndpointAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes *string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description *string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly *string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting *string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId *string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName *string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType *string `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights []InstanceEndpointReadOnlyNodeWeight `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode *string `pulumi:"readWriteMode"`
}

// InstanceEndpointInput is an input type that accepts InstanceEndpointArgs and InstanceEndpointOutput values.
// You can construct a concrete instance of `InstanceEndpointInput` via:
//
//	InstanceEndpointArgs{...}
type InstanceEndpointInput interface {
	pulumi.Input

	ToInstanceEndpointOutput() InstanceEndpointOutput
	ToInstanceEndpointOutputWithContext(context.Context) InstanceEndpointOutput
}

type InstanceEndpointArgs struct {
	// Address list.
	Addresses InstanceEndpointAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringPtrInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringPtrInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringPtrInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringPtrInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringPtrInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights InstanceEndpointReadOnlyNodeWeightArrayInput `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringPtrInput `pulumi:"readWriteMode"`
}

func (InstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return i.ToInstanceEndpointOutputWithContext(context.Background())
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointOutput)
}

// InstanceEndpointArrayInput is an input type that accepts InstanceEndpointArray and InstanceEndpointArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointArrayInput` via:
//
//	InstanceEndpointArray{ InstanceEndpointArgs{...} }
type InstanceEndpointArrayInput interface {
	pulumi.Input

	ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput
	ToInstanceEndpointArrayOutputWithContext(context.Context) InstanceEndpointArrayOutput
}

type InstanceEndpointArray []InstanceEndpointInput

func (InstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return i.ToInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointArrayOutput)
}

type InstanceEndpointOutput struct{ *pulumi.OutputState }

func (InstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return o
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return o
}

// Address list.
func (o InstanceEndpointOutput) Addresses() InstanceEndpointAddressArrayOutput {
	return o.ApplyT(func(v InstanceEndpoint) []InstanceEndpointAddress { return v.Addresses }).(InstanceEndpointAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o InstanceEndpointOutput) AutoAddNewNodes() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.AutoAddNewNodes }).(pulumi.StringPtrOutput)
}

// Address description.
func (o InstanceEndpointOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstanceEndpointOutput) EnableReadOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EnableReadOnly }).(pulumi.StringPtrOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstanceEndpointOutput) EnableReadWriteSplitting() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EnableReadWriteSplitting }).(pulumi.StringPtrOutput)
}

// Instance connection terminal ID.
func (o InstanceEndpointOutput) EndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointId }).(pulumi.StringPtrOutput)
}

// The instance connection terminal name.
func (o InstanceEndpointOutput) EndpointName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointName }).(pulumi.StringPtrOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o InstanceEndpointOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o InstanceEndpointOutput) ReadOnlyNodeWeights() InstanceEndpointReadOnlyNodeWeightArrayOutput {
	return o.ApplyT(func(v InstanceEndpoint) []InstanceEndpointReadOnlyNodeWeight { return v.ReadOnlyNodeWeights }).(InstanceEndpointReadOnlyNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o InstanceEndpointOutput) ReadWriteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.ReadWriteMode }).(pulumi.StringPtrOutput)
}

type InstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) Index(i pulumi.IntInput) InstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpoint {
		return vs[0].([]InstanceEndpoint)[vs[1].(int)]
	}).(InstanceEndpointOutput)
}

type InstanceEndpointAddress struct {
	// DNS Visibility.
	DnsVisibility *bool `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain *string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId *string `pulumi:"eipId"`
	// The IP Address.
	IpAddress *string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType *string `pulumi:"networkType"`
	// The Port.
	Port *string `pulumi:"port"`
	// Subnet ID of the RDS PostgreSQL instance.
	SubnetId *string `pulumi:"subnetId"`
}

// InstanceEndpointAddressInput is an input type that accepts InstanceEndpointAddressArgs and InstanceEndpointAddressOutput values.
// You can construct a concrete instance of `InstanceEndpointAddressInput` via:
//
//	InstanceEndpointAddressArgs{...}
type InstanceEndpointAddressInput interface {
	pulumi.Input

	ToInstanceEndpointAddressOutput() InstanceEndpointAddressOutput
	ToInstanceEndpointAddressOutputWithContext(context.Context) InstanceEndpointAddressOutput
}

type InstanceEndpointAddressArgs struct {
	// DNS Visibility.
	DnsVisibility pulumi.BoolPtrInput `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringPtrInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringPtrInput `pulumi:"port"`
	// Subnet ID of the RDS PostgreSQL instance.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
}

func (InstanceEndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointAddress)(nil)).Elem()
}

func (i InstanceEndpointAddressArgs) ToInstanceEndpointAddressOutput() InstanceEndpointAddressOutput {
	return i.ToInstanceEndpointAddressOutputWithContext(context.Background())
}

func (i InstanceEndpointAddressArgs) ToInstanceEndpointAddressOutputWithContext(ctx context.Context) InstanceEndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointAddressOutput)
}

// InstanceEndpointAddressArrayInput is an input type that accepts InstanceEndpointAddressArray and InstanceEndpointAddressArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointAddressArrayInput` via:
//
//	InstanceEndpointAddressArray{ InstanceEndpointAddressArgs{...} }
type InstanceEndpointAddressArrayInput interface {
	pulumi.Input

	ToInstanceEndpointAddressArrayOutput() InstanceEndpointAddressArrayOutput
	ToInstanceEndpointAddressArrayOutputWithContext(context.Context) InstanceEndpointAddressArrayOutput
}

type InstanceEndpointAddressArray []InstanceEndpointAddressInput

func (InstanceEndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointAddress)(nil)).Elem()
}

func (i InstanceEndpointAddressArray) ToInstanceEndpointAddressArrayOutput() InstanceEndpointAddressArrayOutput {
	return i.ToInstanceEndpointAddressArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointAddressArray) ToInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstanceEndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointAddressArrayOutput)
}

type InstanceEndpointAddressOutput struct{ *pulumi.OutputState }

func (InstanceEndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointAddress)(nil)).Elem()
}

func (o InstanceEndpointAddressOutput) ToInstanceEndpointAddressOutput() InstanceEndpointAddressOutput {
	return o
}

func (o InstanceEndpointAddressOutput) ToInstanceEndpointAddressOutputWithContext(ctx context.Context) InstanceEndpointAddressOutput {
	return o
}

// DNS Visibility.
func (o InstanceEndpointAddressOutput) DnsVisibility() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *bool { return v.DnsVisibility }).(pulumi.BoolPtrOutput)
}

// Connect domain name.
func (o InstanceEndpointAddressOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o InstanceEndpointAddressOutput) EipId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.EipId }).(pulumi.StringPtrOutput)
}

// The IP Address.
func (o InstanceEndpointAddressOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o InstanceEndpointAddressOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// The Port.
func (o InstanceEndpointAddressOutput) Port() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.Port }).(pulumi.StringPtrOutput)
}

// Subnet ID of the RDS PostgreSQL instance.
func (o InstanceEndpointAddressOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointAddress) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

type InstanceEndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointAddress)(nil)).Elem()
}

func (o InstanceEndpointAddressArrayOutput) ToInstanceEndpointAddressArrayOutput() InstanceEndpointAddressArrayOutput {
	return o
}

func (o InstanceEndpointAddressArrayOutput) ToInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstanceEndpointAddressArrayOutput {
	return o
}

func (o InstanceEndpointAddressArrayOutput) Index(i pulumi.IntInput) InstanceEndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpointAddress {
		return vs[0].([]InstanceEndpointAddress)[vs[1].(int)]
	}).(InstanceEndpointAddressOutput)
}

type InstanceEndpointReadOnlyNodeWeight struct {
	// Node ID.
	NodeId *string `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType *string `pulumi:"nodeType"`
	// The weight of the node.
	Weight *int `pulumi:"weight"`
}

// InstanceEndpointReadOnlyNodeWeightInput is an input type that accepts InstanceEndpointReadOnlyNodeWeightArgs and InstanceEndpointReadOnlyNodeWeightOutput values.
// You can construct a concrete instance of `InstanceEndpointReadOnlyNodeWeightInput` via:
//
//	InstanceEndpointReadOnlyNodeWeightArgs{...}
type InstanceEndpointReadOnlyNodeWeightInput interface {
	pulumi.Input

	ToInstanceEndpointReadOnlyNodeWeightOutput() InstanceEndpointReadOnlyNodeWeightOutput
	ToInstanceEndpointReadOnlyNodeWeightOutputWithContext(context.Context) InstanceEndpointReadOnlyNodeWeightOutput
}

type InstanceEndpointReadOnlyNodeWeightArgs struct {
	// Node ID.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringPtrInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (InstanceEndpointReadOnlyNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i InstanceEndpointReadOnlyNodeWeightArgs) ToInstanceEndpointReadOnlyNodeWeightOutput() InstanceEndpointReadOnlyNodeWeightOutput {
	return i.ToInstanceEndpointReadOnlyNodeWeightOutputWithContext(context.Background())
}

func (i InstanceEndpointReadOnlyNodeWeightArgs) ToInstanceEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) InstanceEndpointReadOnlyNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointReadOnlyNodeWeightOutput)
}

// InstanceEndpointReadOnlyNodeWeightArrayInput is an input type that accepts InstanceEndpointReadOnlyNodeWeightArray and InstanceEndpointReadOnlyNodeWeightArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointReadOnlyNodeWeightArrayInput` via:
//
//	InstanceEndpointReadOnlyNodeWeightArray{ InstanceEndpointReadOnlyNodeWeightArgs{...} }
type InstanceEndpointReadOnlyNodeWeightArrayInput interface {
	pulumi.Input

	ToInstanceEndpointReadOnlyNodeWeightArrayOutput() InstanceEndpointReadOnlyNodeWeightArrayOutput
	ToInstanceEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Context) InstanceEndpointReadOnlyNodeWeightArrayOutput
}

type InstanceEndpointReadOnlyNodeWeightArray []InstanceEndpointReadOnlyNodeWeightInput

func (InstanceEndpointReadOnlyNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i InstanceEndpointReadOnlyNodeWeightArray) ToInstanceEndpointReadOnlyNodeWeightArrayOutput() InstanceEndpointReadOnlyNodeWeightArrayOutput {
	return i.ToInstanceEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointReadOnlyNodeWeightArray) ToInstanceEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) InstanceEndpointReadOnlyNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointReadOnlyNodeWeightArrayOutput)
}

type InstanceEndpointReadOnlyNodeWeightOutput struct{ *pulumi.OutputState }

func (InstanceEndpointReadOnlyNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o InstanceEndpointReadOnlyNodeWeightOutput) ToInstanceEndpointReadOnlyNodeWeightOutput() InstanceEndpointReadOnlyNodeWeightOutput {
	return o
}

func (o InstanceEndpointReadOnlyNodeWeightOutput) ToInstanceEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) InstanceEndpointReadOnlyNodeWeightOutput {
	return o
}

// Node ID.
func (o InstanceEndpointReadOnlyNodeWeightOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointReadOnlyNodeWeight) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstanceEndpointReadOnlyNodeWeightOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpointReadOnlyNodeWeight) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The weight of the node.
func (o InstanceEndpointReadOnlyNodeWeightOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceEndpointReadOnlyNodeWeight) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type InstanceEndpointReadOnlyNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointReadOnlyNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o InstanceEndpointReadOnlyNodeWeightArrayOutput) ToInstanceEndpointReadOnlyNodeWeightArrayOutput() InstanceEndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o InstanceEndpointReadOnlyNodeWeightArrayOutput) ToInstanceEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) InstanceEndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o InstanceEndpointReadOnlyNodeWeightArrayOutput) Index(i pulumi.IntInput) InstanceEndpointReadOnlyNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpointReadOnlyNodeWeight {
		return vs[0].([]InstanceEndpointReadOnlyNodeWeight)[vs[1].(int)]
	}).(InstanceEndpointReadOnlyNodeWeightOutput)
}

type InstanceNode struct {
	// Node creation local time.
	CreateTime *string `pulumi:"createTime"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Memory size in GB.
	Memory *int `pulumi:"memory"`
	// Node ID.
	NodeId *string `pulumi:"nodeId"`
	// The specification of primary node and secondary node.
	NodeSpec *string `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus *string `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType *string `pulumi:"nodeType"`
	// The region of the RDS PostgreSQL instance.
	RegionId *string `pulumi:"regionId"`
	// The update time of the RDS PostgreSQL instance.
	UpdateTime *string `pulumi:"updateTime"`
	// CPU size.
	VCpu *int `pulumi:"vCpu"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId *string `pulumi:"zoneId"`
}

// InstanceNodeInput is an input type that accepts InstanceNodeArgs and InstanceNodeOutput values.
// You can construct a concrete instance of `InstanceNodeInput` via:
//
//	InstanceNodeArgs{...}
type InstanceNodeInput interface {
	pulumi.Input

	ToInstanceNodeOutput() InstanceNodeOutput
	ToInstanceNodeOutputWithContext(context.Context) InstanceNodeOutput
}

type InstanceNodeArgs struct {
	// Node creation local time.
	CreateTime pulumi.StringPtrInput `pulumi:"createTime"`
	// Instance ID.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// Memory size in GB.
	Memory pulumi.IntPtrInput `pulumi:"memory"`
	// Node ID.
	NodeId pulumi.StringPtrInput `pulumi:"nodeId"`
	// The specification of primary node and secondary node.
	NodeSpec pulumi.StringPtrInput `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus pulumi.StringPtrInput `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringPtrInput `pulumi:"nodeType"`
	// The region of the RDS PostgreSQL instance.
	RegionId pulumi.StringPtrInput `pulumi:"regionId"`
	// The update time of the RDS PostgreSQL instance.
	UpdateTime pulumi.StringPtrInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntPtrInput `pulumi:"vCpu"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (InstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArgs) ToInstanceNodeOutput() InstanceNodeOutput {
	return i.ToInstanceNodeOutputWithContext(context.Background())
}

func (i InstanceNodeArgs) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeOutput)
}

// InstanceNodeArrayInput is an input type that accepts InstanceNodeArray and InstanceNodeArrayOutput values.
// You can construct a concrete instance of `InstanceNodeArrayInput` via:
//
//	InstanceNodeArray{ InstanceNodeArgs{...} }
type InstanceNodeArrayInput interface {
	pulumi.Input

	ToInstanceNodeArrayOutput() InstanceNodeArrayOutput
	ToInstanceNodeArrayOutputWithContext(context.Context) InstanceNodeArrayOutput
}

type InstanceNodeArray []InstanceNodeInput

func (InstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return i.ToInstanceNodeArrayOutputWithContext(context.Background())
}

func (i InstanceNodeArray) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceNodeArrayOutput)
}

type InstanceNodeOutput struct{ *pulumi.OutputState }

func (InstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceNode)(nil)).Elem()
}

func (o InstanceNodeOutput) ToInstanceNodeOutput() InstanceNodeOutput {
	return o
}

func (o InstanceNodeOutput) ToInstanceNodeOutputWithContext(ctx context.Context) InstanceNodeOutput {
	return o
}

// Node creation local time.
func (o InstanceNodeOutput) CreateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.CreateTime }).(pulumi.StringPtrOutput)
}

// Instance ID.
func (o InstanceNodeOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// Memory size in GB.
func (o InstanceNodeOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceNode) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

// Node ID.
func (o InstanceNodeOutput) NodeId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeId }).(pulumi.StringPtrOutput)
}

// The specification of primary node and secondary node.
func (o InstanceNodeOutput) NodeSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeSpec }).(pulumi.StringPtrOutput)
}

// Node state, value: aligned with instance state.
func (o InstanceNodeOutput) NodeStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeStatus }).(pulumi.StringPtrOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstanceNodeOutput) NodeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.NodeType }).(pulumi.StringPtrOutput)
}

// The region of the RDS PostgreSQL instance.
func (o InstanceNodeOutput) RegionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.RegionId }).(pulumi.StringPtrOutput)
}

// The update time of the RDS PostgreSQL instance.
func (o InstanceNodeOutput) UpdateTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.UpdateTime }).(pulumi.StringPtrOutput)
}

// CPU size.
func (o InstanceNodeOutput) VCpu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceNode) *int { return v.VCpu }).(pulumi.IntPtrOutput)
}

// The available zone of the RDS PostgreSQL instance.
func (o InstanceNodeOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceNode) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

type InstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (InstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceNode)(nil)).Elem()
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutput() InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) ToInstanceNodeArrayOutputWithContext(ctx context.Context) InstanceNodeArrayOutput {
	return o
}

func (o InstanceNodeArrayOutput) Index(i pulumi.IntInput) InstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceNode {
		return vs[0].([]InstanceNode)[vs[1].(int)]
	}).(InstanceNodeOutput)
}

type InstanceParameter struct {
	// Parameter name.
	Name string `pulumi:"name"`
	// Parameter value.
	Value string `pulumi:"value"`
}

// InstanceParameterInput is an input type that accepts InstanceParameterArgs and InstanceParameterOutput values.
// You can construct a concrete instance of `InstanceParameterInput` via:
//
//	InstanceParameterArgs{...}
type InstanceParameterInput interface {
	pulumi.Input

	ToInstanceParameterOutput() InstanceParameterOutput
	ToInstanceParameterOutputWithContext(context.Context) InstanceParameterOutput
}

type InstanceParameterArgs struct {
	// Parameter name.
	Name pulumi.StringInput `pulumi:"name"`
	// Parameter value.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArgs) ToInstanceParameterOutput() InstanceParameterOutput {
	return i.ToInstanceParameterOutputWithContext(context.Background())
}

func (i InstanceParameterArgs) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterOutput)
}

// InstanceParameterArrayInput is an input type that accepts InstanceParameterArray and InstanceParameterArrayOutput values.
// You can construct a concrete instance of `InstanceParameterArrayInput` via:
//
//	InstanceParameterArray{ InstanceParameterArgs{...} }
type InstanceParameterArrayInput interface {
	pulumi.Input

	ToInstanceParameterArrayOutput() InstanceParameterArrayOutput
	ToInstanceParameterArrayOutputWithContext(context.Context) InstanceParameterArrayOutput
}

type InstanceParameterArray []InstanceParameterInput

func (InstanceParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return i.ToInstanceParameterArrayOutputWithContext(context.Background())
}

func (i InstanceParameterArray) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceParameterArrayOutput)
}

type InstanceParameterOutput struct{ *pulumi.OutputState }

func (InstanceParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterOutput) ToInstanceParameterOutput() InstanceParameterOutput {
	return o
}

func (o InstanceParameterOutput) ToInstanceParameterOutputWithContext(ctx context.Context) InstanceParameterOutput {
	return o
}

// Parameter name.
func (o InstanceParameterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.Name }).(pulumi.StringOutput)
}

// Parameter value.
func (o InstanceParameterOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceParameter) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceParameterArrayOutput struct{ *pulumi.OutputState }

func (InstanceParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceParameter)(nil)).Elem()
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutput() InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) ToInstanceParameterArrayOutputWithContext(ctx context.Context) InstanceParameterArrayOutput {
	return o
}

func (o InstanceParameterArrayOutput) Index(i pulumi.IntInput) InstanceParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceParameter {
		return vs[0].([]InstanceParameter)[vs[1].(int)]
	}).(InstanceParameterOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstancesInstance struct {
	// The instance has used backup space. Unit: GB.
	BackupUse int `pulumi:"backupUse"`
	// Payment methods.
	ChargeDetails []InstancesInstanceChargeDetail `pulumi:"chargeDetails"`
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode string `pulumi:"dataSyncMode"`
	// The version of the RDS PostgreSQL instance.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// The endpoint info of the RDS instance.
	Endpoints []InstancesInstanceEndpoint `pulumi:"endpoints"`
	// The ID of the RDS PostgreSQL instance.
	Id string `pulumi:"id"`
	// The id of the RDS PostgreSQL instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the RDS PostgreSQL instance.
	InstanceName string `pulumi:"instanceName"`
	// The status of the RDS PostgreSQL instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The instance type of the RDS PostgreSQL instance.
	InstanceType string `pulumi:"instanceType"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// The number of nodes.
	NodeNumber int `pulumi:"nodeNumber"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes []InstancesInstanceNode `pulumi:"nodes"`
	// The project name of the RDS PostgreSQL instance.
	ProjectName string `pulumi:"projectName"`
	// The region of the RDS PostgreSQL instance.
	RegionId string `pulumi:"regionId"`
	// Total instance storage space. Unit: GB.
	StorageSpace int `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType string `pulumi:"storageType"`
	// The subnet ID of the RDS PostgreSQL instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstancesInstanceTag `pulumi:"tags"`
	// The update time of the RDS PostgreSQL instance.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size.
	VCpu int `pulumi:"vCpu"`
	// The vpc ID of the RDS PostgreSQL instance.
	VpcId string `pulumi:"vpcId"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId string `pulumi:"zoneId"`
	// ID of the availability zone where each instance is located.
	ZoneIds []string `pulumi:"zoneIds"`
}

// InstancesInstanceInput is an input type that accepts InstancesInstanceArgs and InstancesInstanceOutput values.
// You can construct a concrete instance of `InstancesInstanceInput` via:
//
//	InstancesInstanceArgs{...}
type InstancesInstanceInput interface {
	pulumi.Input

	ToInstancesInstanceOutput() InstancesInstanceOutput
	ToInstancesInstanceOutputWithContext(context.Context) InstancesInstanceOutput
}

type InstancesInstanceArgs struct {
	// The instance has used backup space. Unit: GB.
	BackupUse pulumi.IntInput `pulumi:"backupUse"`
	// Payment methods.
	ChargeDetails InstancesInstanceChargeDetailArrayInput `pulumi:"chargeDetails"`
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode pulumi.StringInput `pulumi:"dataSyncMode"`
	// The version of the RDS PostgreSQL instance.
	DbEngineVersion pulumi.StringInput `pulumi:"dbEngineVersion"`
	// The endpoint info of the RDS instance.
	Endpoints InstancesInstanceEndpointArrayInput `pulumi:"endpoints"`
	// The ID of the RDS PostgreSQL instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The id of the RDS PostgreSQL instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the RDS PostgreSQL instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of the RDS PostgreSQL instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The instance type of the RDS PostgreSQL instance.
	InstanceType pulumi.StringInput `pulumi:"instanceType"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// The number of nodes.
	NodeNumber pulumi.IntInput `pulumi:"nodeNumber"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes InstancesInstanceNodeArrayInput `pulumi:"nodes"`
	// The project name of the RDS PostgreSQL instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region of the RDS PostgreSQL instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// Total instance storage space. Unit: GB.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType pulumi.StringInput `pulumi:"storageType"`
	// The subnet ID of the RDS PostgreSQL instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags InstancesInstanceTagArrayInput `pulumi:"tags"`
	// The update time of the RDS PostgreSQL instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The vpc ID of the RDS PostgreSQL instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// ID of the availability zone where each instance is located.
	ZoneIds pulumi.StringArrayInput `pulumi:"zoneIds"`
}

func (InstancesInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return i.ToInstancesInstanceOutputWithContext(context.Background())
}

func (i InstancesInstanceArgs) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceOutput)
}

// InstancesInstanceArrayInput is an input type that accepts InstancesInstanceArray and InstancesInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceArrayInput` via:
//
//	InstancesInstanceArray{ InstancesInstanceArgs{...} }
type InstancesInstanceArrayInput interface {
	pulumi.Input

	ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput
	ToInstancesInstanceArrayOutputWithContext(context.Context) InstancesInstanceArrayOutput
}

type InstancesInstanceArray []InstancesInstanceInput

func (InstancesInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return i.ToInstancesInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceArray) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceArrayOutput)
}

type InstancesInstanceOutput struct{ *pulumi.OutputState }

func (InstancesInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutput() InstancesInstanceOutput {
	return o
}

func (o InstancesInstanceOutput) ToInstancesInstanceOutputWithContext(ctx context.Context) InstancesInstanceOutput {
	return o
}

// The instance has used backup space. Unit: GB.
func (o InstancesInstanceOutput) BackupUse() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.BackupUse }).(pulumi.IntOutput)
}

// Payment methods.
func (o InstancesInstanceOutput) ChargeDetails() InstancesInstanceChargeDetailArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceChargeDetail { return v.ChargeDetails }).(InstancesInstanceChargeDetailArrayOutput)
}

// Node creation local time.
func (o InstancesInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// Data synchronization mode.
func (o InstancesInstanceOutput) DataSyncMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.DataSyncMode }).(pulumi.StringOutput)
}

// The version of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The endpoint info of the RDS instance.
func (o InstancesInstanceOutput) Endpoints() InstancesInstanceEndpointArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceEndpoint { return v.Endpoints }).(InstancesInstanceEndpointArrayOutput)
}

// The ID of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The id of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The instance type of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.InstanceType }).(pulumi.StringOutput)
}

// Memory size in GB.
func (o InstancesInstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.Memory }).(pulumi.IntOutput)
}

// The number of nodes.
func (o InstancesInstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.NodeNumber }).(pulumi.IntOutput)
}

// General instance type, different from Custom instance type.
func (o InstancesInstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Instance node information.
func (o InstancesInstanceOutput) Nodes() InstancesInstanceNodeArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceNode { return v.Nodes }).(InstancesInstanceNodeArrayOutput)
}

// The project name of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// Total instance storage space. Unit: GB.
func (o InstancesInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// Instance storage type.
func (o InstancesInstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.StorageType }).(pulumi.StringOutput)
}

// The subnet ID of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstancesInstanceOutput) Tags() InstancesInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []InstancesInstanceTag { return v.Tags }).(InstancesInstanceTagArrayOutput)
}

// The update time of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size.
func (o InstancesInstanceOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstance) int { return v.VCpu }).(pulumi.IntOutput)
}

// The vpc ID of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone of the RDS PostgreSQL instance.
func (o InstancesInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

// ID of the availability zone where each instance is located.
func (o InstancesInstanceOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v InstancesInstance) []string { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

type InstancesInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstance)(nil)).Elem()
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutput() InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) ToInstancesInstanceArrayOutputWithContext(ctx context.Context) InstancesInstanceArrayOutput {
	return o
}

func (o InstancesInstanceArrayOutput) Index(i pulumi.IntInput) InstancesInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstance {
		return vs[0].([]InstancesInstance)[vs[1].(int)]
	}).(InstancesInstanceOutput)
}

type InstancesInstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew bool `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime string `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType string `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime string `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit string `pulumi:"periodUnit"`
	// Temporary upgrade of restoration time.
	TempModifyEndTime string `pulumi:"tempModifyEndTime"`
	// Start time of temporary upgrade.
	TempModifyStartTime string `pulumi:"tempModifyStartTime"`
}

// InstancesInstanceChargeDetailInput is an input type that accepts InstancesInstanceChargeDetailArgs and InstancesInstanceChargeDetailOutput values.
// You can construct a concrete instance of `InstancesInstanceChargeDetailInput` via:
//
//	InstancesInstanceChargeDetailArgs{...}
type InstancesInstanceChargeDetailInput interface {
	pulumi.Input

	ToInstancesInstanceChargeDetailOutput() InstancesInstanceChargeDetailOutput
	ToInstancesInstanceChargeDetailOutputWithContext(context.Context) InstancesInstanceChargeDetailOutput
}

type InstancesInstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	// Autorenew_Enable
	// Autorenew_Disable (default).
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// Billing expiry time (yearly and monthly only).
	ChargeEndTime pulumi.StringInput `pulumi:"chargeEndTime"`
	// Billing start time (pay-as-you-go & monthly subscription).
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// Pay status. Value:
	// normal - normal
	// overdue - overdue
	// .
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of the RDS instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// Shutdown time in arrears (pay-as-you-go & monthly subscription).
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// Purchase duration in prepaid scenarios. Default: 1.
	Period pulumi.IntInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario.
	// Month - monthly subscription (default)
	// Year - Package year.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
	// Temporary upgrade of restoration time.
	TempModifyEndTime pulumi.StringInput `pulumi:"tempModifyEndTime"`
	// Start time of temporary upgrade.
	TempModifyStartTime pulumi.StringInput `pulumi:"tempModifyStartTime"`
}

func (InstancesInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesInstanceChargeDetailArgs) ToInstancesInstanceChargeDetailOutput() InstancesInstanceChargeDetailOutput {
	return i.ToInstancesInstanceChargeDetailOutputWithContext(context.Background())
}

func (i InstancesInstanceChargeDetailArgs) ToInstancesInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceChargeDetailOutput)
}

// InstancesInstanceChargeDetailArrayInput is an input type that accepts InstancesInstanceChargeDetailArray and InstancesInstanceChargeDetailArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceChargeDetailArrayInput` via:
//
//	InstancesInstanceChargeDetailArray{ InstancesInstanceChargeDetailArgs{...} }
type InstancesInstanceChargeDetailArrayInput interface {
	pulumi.Input

	ToInstancesInstanceChargeDetailArrayOutput() InstancesInstanceChargeDetailArrayOutput
	ToInstancesInstanceChargeDetailArrayOutputWithContext(context.Context) InstancesInstanceChargeDetailArrayOutput
}

type InstancesInstanceChargeDetailArray []InstancesInstanceChargeDetailInput

func (InstancesInstanceChargeDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesInstanceChargeDetailArray) ToInstancesInstanceChargeDetailArrayOutput() InstancesInstanceChargeDetailArrayOutput {
	return i.ToInstancesInstanceChargeDetailArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceChargeDetailArray) ToInstancesInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstancesInstanceChargeDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceChargeDetailArrayOutput)
}

type InstancesInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (InstancesInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesInstanceChargeDetailOutput) ToInstancesInstanceChargeDetailOutput() InstancesInstanceChargeDetailOutput {
	return o
}

func (o InstancesInstanceChargeDetailOutput) ToInstancesInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesInstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
// Autorenew_Enable
// Autorenew_Disable (default).
func (o InstancesInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// Billing expiry time (yearly and monthly only).
func (o InstancesInstanceChargeDetailOutput) ChargeEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.ChargeEndTime }).(pulumi.StringOutput)
}

// Billing start time (pay-as-you-go & monthly subscription).
func (o InstancesInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// Pay status. Value:
// normal - normal
// overdue - overdue
// .
func (o InstancesInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of the RDS instance.
func (o InstancesInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
func (o InstancesInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// Shutdown time in arrears (pay-as-you-go & monthly subscription).
func (o InstancesInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. Default: 1.
func (o InstancesInstanceChargeDetailOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) int { return v.Period }).(pulumi.IntOutput)
}

// The purchase cycle in the prepaid scenario.
// Month - monthly subscription (default)
// Year - Package year.
func (o InstancesInstanceChargeDetailOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Temporary upgrade of restoration time.
func (o InstancesInstanceChargeDetailOutput) TempModifyEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.TempModifyEndTime }).(pulumi.StringOutput)
}

// Start time of temporary upgrade.
func (o InstancesInstanceChargeDetailOutput) TempModifyStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceChargeDetail) string { return v.TempModifyStartTime }).(pulumi.StringOutput)
}

type InstancesInstanceChargeDetailArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceChargeDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesInstanceChargeDetailArrayOutput) ToInstancesInstanceChargeDetailArrayOutput() InstancesInstanceChargeDetailArrayOutput {
	return o
}

func (o InstancesInstanceChargeDetailArrayOutput) ToInstancesInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstancesInstanceChargeDetailArrayOutput {
	return o
}

func (o InstancesInstanceChargeDetailArrayOutput) Index(i pulumi.IntInput) InstancesInstanceChargeDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceChargeDetail {
		return vs[0].([]InstancesInstanceChargeDetail)[vs[1].(int)]
	}).(InstancesInstanceChargeDetailOutput)
}

type InstancesInstanceEndpoint struct {
	// Address list.
	Addresses []InstancesInstanceEndpointAddress `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes string `pulumi:"autoAddNewNodes"`
	// Address description.
	Description string `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly string `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting string `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId string `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName string `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType string `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights []InstancesInstanceEndpointReadOnlyNodeWeight `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode string `pulumi:"readWriteMode"`
}

// InstancesInstanceEndpointInput is an input type that accepts InstancesInstanceEndpointArgs and InstancesInstanceEndpointOutput values.
// You can construct a concrete instance of `InstancesInstanceEndpointInput` via:
//
//	InstancesInstanceEndpointArgs{...}
type InstancesInstanceEndpointInput interface {
	pulumi.Input

	ToInstancesInstanceEndpointOutput() InstancesInstanceEndpointOutput
	ToInstancesInstanceEndpointOutputWithContext(context.Context) InstancesInstanceEndpointOutput
}

type InstancesInstanceEndpointArgs struct {
	// Address list.
	Addresses InstancesInstanceEndpointAddressArrayInput `pulumi:"addresses"`
	// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
	AutoAddNewNodes pulumi.StringInput `pulumi:"autoAddNewNodes"`
	// Address description.
	Description pulumi.StringInput `pulumi:"description"`
	// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadOnly pulumi.StringInput `pulumi:"enableReadOnly"`
	// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
	EnableReadWriteSplitting pulumi.StringInput `pulumi:"enableReadWriteSplitting"`
	// Instance connection terminal ID.
	EndpointId pulumi.StringInput `pulumi:"endpointId"`
	// The instance connection terminal name.
	EndpointName pulumi.StringInput `pulumi:"endpointName"`
	// Terminal type:
	// Cluster: The default terminal. (created by default)
	// Primary: Primary node terminal.
	// Custom: Custom terminal.
	// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
	// AllNode: All node terminals. (Only the operation and maintenance side).
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The list of nodes configured by the connection terminal and the corresponding read-only weights.
	ReadOnlyNodeWeights InstancesInstanceEndpointReadOnlyNodeWeightArrayInput `pulumi:"readOnlyNodeWeights"`
	// Read and write mode:
	// ReadWrite: read and write
	// ReadOnly: read only (default).
	ReadWriteMode pulumi.StringInput `pulumi:"readWriteMode"`
}

func (InstancesInstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceEndpoint)(nil)).Elem()
}

func (i InstancesInstanceEndpointArgs) ToInstancesInstanceEndpointOutput() InstancesInstanceEndpointOutput {
	return i.ToInstancesInstanceEndpointOutputWithContext(context.Background())
}

func (i InstancesInstanceEndpointArgs) ToInstancesInstanceEndpointOutputWithContext(ctx context.Context) InstancesInstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceEndpointOutput)
}

// InstancesInstanceEndpointArrayInput is an input type that accepts InstancesInstanceEndpointArray and InstancesInstanceEndpointArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceEndpointArrayInput` via:
//
//	InstancesInstanceEndpointArray{ InstancesInstanceEndpointArgs{...} }
type InstancesInstanceEndpointArrayInput interface {
	pulumi.Input

	ToInstancesInstanceEndpointArrayOutput() InstancesInstanceEndpointArrayOutput
	ToInstancesInstanceEndpointArrayOutputWithContext(context.Context) InstancesInstanceEndpointArrayOutput
}

type InstancesInstanceEndpointArray []InstancesInstanceEndpointInput

func (InstancesInstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceEndpoint)(nil)).Elem()
}

func (i InstancesInstanceEndpointArray) ToInstancesInstanceEndpointArrayOutput() InstancesInstanceEndpointArrayOutput {
	return i.ToInstancesInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceEndpointArray) ToInstancesInstanceEndpointArrayOutputWithContext(ctx context.Context) InstancesInstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceEndpointArrayOutput)
}

type InstancesInstanceEndpointOutput struct{ *pulumi.OutputState }

func (InstancesInstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceEndpoint)(nil)).Elem()
}

func (o InstancesInstanceEndpointOutput) ToInstancesInstanceEndpointOutput() InstancesInstanceEndpointOutput {
	return o
}

func (o InstancesInstanceEndpointOutput) ToInstancesInstanceEndpointOutputWithContext(ctx context.Context) InstancesInstanceEndpointOutput {
	return o
}

// Address list.
func (o InstancesInstanceEndpointOutput) Addresses() InstancesInstanceEndpointAddressArrayOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) []InstancesInstanceEndpointAddress { return v.Addresses }).(InstancesInstanceEndpointAddressArrayOutput)
}

// When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
func (o InstancesInstanceEndpointOutput) AutoAddNewNodes() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) string { return v.AutoAddNewNodes }).(pulumi.StringOutput)
}

// Address description.
func (o InstancesInstanceEndpointOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) string { return v.Description }).(pulumi.StringOutput)
}

// Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstancesInstanceEndpointOutput) EnableReadOnly() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) string { return v.EnableReadOnly }).(pulumi.StringOutput)
}

// Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
func (o InstancesInstanceEndpointOutput) EnableReadWriteSplitting() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) string { return v.EnableReadWriteSplitting }).(pulumi.StringOutput)
}

// Instance connection terminal ID.
func (o InstancesInstanceEndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) string { return v.EndpointId }).(pulumi.StringOutput)
}

// The instance connection terminal name.
func (o InstancesInstanceEndpointOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) string { return v.EndpointName }).(pulumi.StringOutput)
}

// Terminal type:
// Cluster: The default terminal. (created by default)
// Primary: Primary node terminal.
// Custom: Custom terminal.
// Direct: Direct connection to the terminal. (Only the operation and maintenance side)
// AllNode: All node terminals. (Only the operation and maintenance side).
func (o InstancesInstanceEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The list of nodes configured by the connection terminal and the corresponding read-only weights.
func (o InstancesInstanceEndpointOutput) ReadOnlyNodeWeights() InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) []InstancesInstanceEndpointReadOnlyNodeWeight {
		return v.ReadOnlyNodeWeights
	}).(InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput)
}

// Read and write mode:
// ReadWrite: read and write
// ReadOnly: read only (default).
func (o InstancesInstanceEndpointOutput) ReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpoint) string { return v.ReadWriteMode }).(pulumi.StringOutput)
}

type InstancesInstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceEndpoint)(nil)).Elem()
}

func (o InstancesInstanceEndpointArrayOutput) ToInstancesInstanceEndpointArrayOutput() InstancesInstanceEndpointArrayOutput {
	return o
}

func (o InstancesInstanceEndpointArrayOutput) ToInstancesInstanceEndpointArrayOutputWithContext(ctx context.Context) InstancesInstanceEndpointArrayOutput {
	return o
}

func (o InstancesInstanceEndpointArrayOutput) Index(i pulumi.IntInput) InstancesInstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceEndpoint {
		return vs[0].([]InstancesInstanceEndpoint)[vs[1].(int)]
	}).(InstancesInstanceEndpointOutput)
}

type InstancesInstanceEndpointAddress struct {
	// DNS Visibility.
	DnsVisibility bool `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain string `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId string `pulumi:"eipId"`
	// The IP Address.
	IpAddress string `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType string `pulumi:"networkType"`
	// The Port.
	Port string `pulumi:"port"`
	// The subnet ID of the RDS PostgreSQL instance.
	SubnetId string `pulumi:"subnetId"`
}

// InstancesInstanceEndpointAddressInput is an input type that accepts InstancesInstanceEndpointAddressArgs and InstancesInstanceEndpointAddressOutput values.
// You can construct a concrete instance of `InstancesInstanceEndpointAddressInput` via:
//
//	InstancesInstanceEndpointAddressArgs{...}
type InstancesInstanceEndpointAddressInput interface {
	pulumi.Input

	ToInstancesInstanceEndpointAddressOutput() InstancesInstanceEndpointAddressOutput
	ToInstancesInstanceEndpointAddressOutputWithContext(context.Context) InstancesInstanceEndpointAddressOutput
}

type InstancesInstanceEndpointAddressArgs struct {
	// DNS Visibility.
	DnsVisibility pulumi.BoolInput `pulumi:"dnsVisibility"`
	// Connect domain name.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The ID of the EIP, only valid for Public addresses.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The IP Address.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Network address type, temporarily Private, Public, PublicService.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The Port.
	Port pulumi.StringInput `pulumi:"port"`
	// The subnet ID of the RDS PostgreSQL instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
}

func (InstancesInstanceEndpointAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceEndpointAddress)(nil)).Elem()
}

func (i InstancesInstanceEndpointAddressArgs) ToInstancesInstanceEndpointAddressOutput() InstancesInstanceEndpointAddressOutput {
	return i.ToInstancesInstanceEndpointAddressOutputWithContext(context.Background())
}

func (i InstancesInstanceEndpointAddressArgs) ToInstancesInstanceEndpointAddressOutputWithContext(ctx context.Context) InstancesInstanceEndpointAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceEndpointAddressOutput)
}

// InstancesInstanceEndpointAddressArrayInput is an input type that accepts InstancesInstanceEndpointAddressArray and InstancesInstanceEndpointAddressArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceEndpointAddressArrayInput` via:
//
//	InstancesInstanceEndpointAddressArray{ InstancesInstanceEndpointAddressArgs{...} }
type InstancesInstanceEndpointAddressArrayInput interface {
	pulumi.Input

	ToInstancesInstanceEndpointAddressArrayOutput() InstancesInstanceEndpointAddressArrayOutput
	ToInstancesInstanceEndpointAddressArrayOutputWithContext(context.Context) InstancesInstanceEndpointAddressArrayOutput
}

type InstancesInstanceEndpointAddressArray []InstancesInstanceEndpointAddressInput

func (InstancesInstanceEndpointAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceEndpointAddress)(nil)).Elem()
}

func (i InstancesInstanceEndpointAddressArray) ToInstancesInstanceEndpointAddressArrayOutput() InstancesInstanceEndpointAddressArrayOutput {
	return i.ToInstancesInstanceEndpointAddressArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceEndpointAddressArray) ToInstancesInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstancesInstanceEndpointAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceEndpointAddressArrayOutput)
}

type InstancesInstanceEndpointAddressOutput struct{ *pulumi.OutputState }

func (InstancesInstanceEndpointAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceEndpointAddress)(nil)).Elem()
}

func (o InstancesInstanceEndpointAddressOutput) ToInstancesInstanceEndpointAddressOutput() InstancesInstanceEndpointAddressOutput {
	return o
}

func (o InstancesInstanceEndpointAddressOutput) ToInstancesInstanceEndpointAddressOutputWithContext(ctx context.Context) InstancesInstanceEndpointAddressOutput {
	return o
}

// DNS Visibility.
func (o InstancesInstanceEndpointAddressOutput) DnsVisibility() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointAddress) bool { return v.DnsVisibility }).(pulumi.BoolOutput)
}

// Connect domain name.
func (o InstancesInstanceEndpointAddressOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointAddress) string { return v.Domain }).(pulumi.StringOutput)
}

// The ID of the EIP, only valid for Public addresses.
func (o InstancesInstanceEndpointAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointAddress) string { return v.EipId }).(pulumi.StringOutput)
}

// The IP Address.
func (o InstancesInstanceEndpointAddressOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointAddress) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Network address type, temporarily Private, Public, PublicService.
func (o InstancesInstanceEndpointAddressOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointAddress) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The Port.
func (o InstancesInstanceEndpointAddressOutput) Port() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointAddress) string { return v.Port }).(pulumi.StringOutput)
}

// The subnet ID of the RDS PostgreSQL instance.
func (o InstancesInstanceEndpointAddressOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointAddress) string { return v.SubnetId }).(pulumi.StringOutput)
}

type InstancesInstanceEndpointAddressArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceEndpointAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceEndpointAddress)(nil)).Elem()
}

func (o InstancesInstanceEndpointAddressArrayOutput) ToInstancesInstanceEndpointAddressArrayOutput() InstancesInstanceEndpointAddressArrayOutput {
	return o
}

func (o InstancesInstanceEndpointAddressArrayOutput) ToInstancesInstanceEndpointAddressArrayOutputWithContext(ctx context.Context) InstancesInstanceEndpointAddressArrayOutput {
	return o
}

func (o InstancesInstanceEndpointAddressArrayOutput) Index(i pulumi.IntInput) InstancesInstanceEndpointAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceEndpointAddress {
		return vs[0].([]InstancesInstanceEndpointAddress)[vs[1].(int)]
	}).(InstancesInstanceEndpointAddressOutput)
}

type InstancesInstanceEndpointReadOnlyNodeWeight struct {
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The weight of the node.
	Weight int `pulumi:"weight"`
}

// InstancesInstanceEndpointReadOnlyNodeWeightInput is an input type that accepts InstancesInstanceEndpointReadOnlyNodeWeightArgs and InstancesInstanceEndpointReadOnlyNodeWeightOutput values.
// You can construct a concrete instance of `InstancesInstanceEndpointReadOnlyNodeWeightInput` via:
//
//	InstancesInstanceEndpointReadOnlyNodeWeightArgs{...}
type InstancesInstanceEndpointReadOnlyNodeWeightInput interface {
	pulumi.Input

	ToInstancesInstanceEndpointReadOnlyNodeWeightOutput() InstancesInstanceEndpointReadOnlyNodeWeightOutput
	ToInstancesInstanceEndpointReadOnlyNodeWeightOutputWithContext(context.Context) InstancesInstanceEndpointReadOnlyNodeWeightOutput
}

type InstancesInstanceEndpointReadOnlyNodeWeightArgs struct {
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The weight of the node.
	Weight pulumi.IntInput `pulumi:"weight"`
}

func (InstancesInstanceEndpointReadOnlyNodeWeightArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i InstancesInstanceEndpointReadOnlyNodeWeightArgs) ToInstancesInstanceEndpointReadOnlyNodeWeightOutput() InstancesInstanceEndpointReadOnlyNodeWeightOutput {
	return i.ToInstancesInstanceEndpointReadOnlyNodeWeightOutputWithContext(context.Background())
}

func (i InstancesInstanceEndpointReadOnlyNodeWeightArgs) ToInstancesInstanceEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) InstancesInstanceEndpointReadOnlyNodeWeightOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceEndpointReadOnlyNodeWeightOutput)
}

// InstancesInstanceEndpointReadOnlyNodeWeightArrayInput is an input type that accepts InstancesInstanceEndpointReadOnlyNodeWeightArray and InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceEndpointReadOnlyNodeWeightArrayInput` via:
//
//	InstancesInstanceEndpointReadOnlyNodeWeightArray{ InstancesInstanceEndpointReadOnlyNodeWeightArgs{...} }
type InstancesInstanceEndpointReadOnlyNodeWeightArrayInput interface {
	pulumi.Input

	ToInstancesInstanceEndpointReadOnlyNodeWeightArrayOutput() InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput
	ToInstancesInstanceEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Context) InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput
}

type InstancesInstanceEndpointReadOnlyNodeWeightArray []InstancesInstanceEndpointReadOnlyNodeWeightInput

func (InstancesInstanceEndpointReadOnlyNodeWeightArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (i InstancesInstanceEndpointReadOnlyNodeWeightArray) ToInstancesInstanceEndpointReadOnlyNodeWeightArrayOutput() InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput {
	return i.ToInstancesInstanceEndpointReadOnlyNodeWeightArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceEndpointReadOnlyNodeWeightArray) ToInstancesInstanceEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput)
}

type InstancesInstanceEndpointReadOnlyNodeWeightOutput struct{ *pulumi.OutputState }

func (InstancesInstanceEndpointReadOnlyNodeWeightOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o InstancesInstanceEndpointReadOnlyNodeWeightOutput) ToInstancesInstanceEndpointReadOnlyNodeWeightOutput() InstancesInstanceEndpointReadOnlyNodeWeightOutput {
	return o
}

func (o InstancesInstanceEndpointReadOnlyNodeWeightOutput) ToInstancesInstanceEndpointReadOnlyNodeWeightOutputWithContext(ctx context.Context) InstancesInstanceEndpointReadOnlyNodeWeightOutput {
	return o
}

// Node ID.
func (o InstancesInstanceEndpointReadOnlyNodeWeightOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointReadOnlyNodeWeight) string { return v.NodeId }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstancesInstanceEndpointReadOnlyNodeWeightOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointReadOnlyNodeWeight) string { return v.NodeType }).(pulumi.StringOutput)
}

// The weight of the node.
func (o InstancesInstanceEndpointReadOnlyNodeWeightOutput) Weight() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceEndpointReadOnlyNodeWeight) int { return v.Weight }).(pulumi.IntOutput)
}

type InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceEndpointReadOnlyNodeWeight)(nil)).Elem()
}

func (o InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput) ToInstancesInstanceEndpointReadOnlyNodeWeightArrayOutput() InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput) ToInstancesInstanceEndpointReadOnlyNodeWeightArrayOutputWithContext(ctx context.Context) InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput {
	return o
}

func (o InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput) Index(i pulumi.IntInput) InstancesInstanceEndpointReadOnlyNodeWeightOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceEndpointReadOnlyNodeWeight {
		return vs[0].([]InstancesInstanceEndpointReadOnlyNodeWeight)[vs[1].(int)]
	}).(InstancesInstanceEndpointReadOnlyNodeWeightOutput)
}

type InstancesInstanceNode struct {
	// Node creation local time.
	CreateTime string `pulumi:"createTime"`
	// The id of the RDS PostgreSQL instance.
	InstanceId string `pulumi:"instanceId"`
	// Memory size in GB.
	Memory int `pulumi:"memory"`
	// Node ID.
	NodeId string `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec string `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus string `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType string `pulumi:"nodeType"`
	// The region of the RDS PostgreSQL instance.
	RegionId string `pulumi:"regionId"`
	// The update time of the RDS PostgreSQL instance.
	UpdateTime string `pulumi:"updateTime"`
	// CPU size.
	VCpu int `pulumi:"vCpu"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesInstanceNodeInput is an input type that accepts InstancesInstanceNodeArgs and InstancesInstanceNodeOutput values.
// You can construct a concrete instance of `InstancesInstanceNodeInput` via:
//
//	InstancesInstanceNodeArgs{...}
type InstancesInstanceNodeInput interface {
	pulumi.Input

	ToInstancesInstanceNodeOutput() InstancesInstanceNodeOutput
	ToInstancesInstanceNodeOutputWithContext(context.Context) InstancesInstanceNodeOutput
}

type InstancesInstanceNodeArgs struct {
	// Node creation local time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The id of the RDS PostgreSQL instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// Memory size in GB.
	Memory pulumi.IntInput `pulumi:"memory"`
	// Node ID.
	NodeId pulumi.StringInput `pulumi:"nodeId"`
	// General instance type, different from Custom instance type.
	NodeSpec pulumi.StringInput `pulumi:"nodeSpec"`
	// Node state, value: aligned with instance state.
	NodeStatus pulumi.StringInput `pulumi:"nodeStatus"`
	// Node type. Value: Primary: Primary node.
	// Secondary: Standby node.
	// ReadOnly: Read-only node.
	NodeType pulumi.StringInput `pulumi:"nodeType"`
	// The region of the RDS PostgreSQL instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The update time of the RDS PostgreSQL instance.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntInput `pulumi:"vCpu"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesInstanceNodeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNode)(nil)).Elem()
}

func (i InstancesInstanceNodeArgs) ToInstancesInstanceNodeOutput() InstancesInstanceNodeOutput {
	return i.ToInstancesInstanceNodeOutputWithContext(context.Background())
}

func (i InstancesInstanceNodeArgs) ToInstancesInstanceNodeOutputWithContext(ctx context.Context) InstancesInstanceNodeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNodeOutput)
}

// InstancesInstanceNodeArrayInput is an input type that accepts InstancesInstanceNodeArray and InstancesInstanceNodeArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceNodeArrayInput` via:
//
//	InstancesInstanceNodeArray{ InstancesInstanceNodeArgs{...} }
type InstancesInstanceNodeArrayInput interface {
	pulumi.Input

	ToInstancesInstanceNodeArrayOutput() InstancesInstanceNodeArrayOutput
	ToInstancesInstanceNodeArrayOutputWithContext(context.Context) InstancesInstanceNodeArrayOutput
}

type InstancesInstanceNodeArray []InstancesInstanceNodeInput

func (InstancesInstanceNodeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNode)(nil)).Elem()
}

func (i InstancesInstanceNodeArray) ToInstancesInstanceNodeArrayOutput() InstancesInstanceNodeArrayOutput {
	return i.ToInstancesInstanceNodeArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceNodeArray) ToInstancesInstanceNodeArrayOutputWithContext(ctx context.Context) InstancesInstanceNodeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceNodeArrayOutput)
}

type InstancesInstanceNodeOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNodeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceNode)(nil)).Elem()
}

func (o InstancesInstanceNodeOutput) ToInstancesInstanceNodeOutput() InstancesInstanceNodeOutput {
	return o
}

func (o InstancesInstanceNodeOutput) ToInstancesInstanceNodeOutputWithContext(ctx context.Context) InstancesInstanceNodeOutput {
	return o
}

// Node creation local time.
func (o InstancesInstanceNodeOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The id of the RDS PostgreSQL instance.
func (o InstancesInstanceNodeOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.InstanceId }).(pulumi.StringOutput)
}

// Memory size in GB.
func (o InstancesInstanceNodeOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceNode) int { return v.Memory }).(pulumi.IntOutput)
}

// Node ID.
func (o InstancesInstanceNodeOutput) NodeId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.NodeId }).(pulumi.StringOutput)
}

// General instance type, different from Custom instance type.
func (o InstancesInstanceNodeOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.NodeSpec }).(pulumi.StringOutput)
}

// Node state, value: aligned with instance state.
func (o InstancesInstanceNodeOutput) NodeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.NodeStatus }).(pulumi.StringOutput)
}

// Node type. Value: Primary: Primary node.
// Secondary: Standby node.
// ReadOnly: Read-only node.
func (o InstancesInstanceNodeOutput) NodeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.NodeType }).(pulumi.StringOutput)
}

// The region of the RDS PostgreSQL instance.
func (o InstancesInstanceNodeOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.RegionId }).(pulumi.StringOutput)
}

// The update time of the RDS PostgreSQL instance.
func (o InstancesInstanceNodeOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size.
func (o InstancesInstanceNodeOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesInstanceNode) int { return v.VCpu }).(pulumi.IntOutput)
}

// The available zone of the RDS PostgreSQL instance.
func (o InstancesInstanceNodeOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceNode) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesInstanceNodeArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceNodeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceNode)(nil)).Elem()
}

func (o InstancesInstanceNodeArrayOutput) ToInstancesInstanceNodeArrayOutput() InstancesInstanceNodeArrayOutput {
	return o
}

func (o InstancesInstanceNodeArrayOutput) ToInstancesInstanceNodeArrayOutputWithContext(ctx context.Context) InstancesInstanceNodeArrayOutput {
	return o
}

func (o InstancesInstanceNodeArrayOutput) Index(i pulumi.IntInput) InstancesInstanceNodeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceNode {
		return vs[0].([]InstancesInstanceNode)[vs[1].(int)]
	}).(InstancesInstanceNodeOutput)
}

type InstancesInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesInstanceTagInput is an input type that accepts InstancesInstanceTagArgs and InstancesInstanceTagOutput values.
// You can construct a concrete instance of `InstancesInstanceTagInput` via:
//
//	InstancesInstanceTagArgs{...}
type InstancesInstanceTagInput interface {
	pulumi.Input

	ToInstancesInstanceTagOutput() InstancesInstanceTagOutput
	ToInstancesInstanceTagOutputWithContext(context.Context) InstancesInstanceTagOutput
}

type InstancesInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return i.ToInstancesInstanceTagOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArgs) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagOutput)
}

// InstancesInstanceTagArrayInput is an input type that accepts InstancesInstanceTagArray and InstancesInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesInstanceTagArrayInput` via:
//
//	InstancesInstanceTagArray{ InstancesInstanceTagArgs{...} }
type InstancesInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput
	ToInstancesInstanceTagArrayOutputWithContext(context.Context) InstancesInstanceTagArrayOutput
}

type InstancesInstanceTagArray []InstancesInstanceTagInput

func (InstancesInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return i.ToInstancesInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesInstanceTagArray) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesInstanceTagArrayOutput)
}

type InstancesInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutput() InstancesInstanceTagOutput {
	return o
}

func (o InstancesInstanceTagOutput) ToInstancesInstanceTagOutputWithContext(ctx context.Context) InstancesInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesInstanceTag)(nil)).Elem()
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutput() InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) ToInstancesInstanceTagArrayOutputWithContext(ctx context.Context) InstancesInstanceTagArrayOutput {
	return o
}

func (o InstancesInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesInstanceTag {
		return vs[0].([]InstancesInstanceTag)[vs[1].(int)]
	}).(InstancesInstanceTagOutput)
}

type InstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type SchemasSchema struct {
	// The name of the database.
	DbName string `pulumi:"dbName"`
	// The owner of the schema.
	Owner string `pulumi:"owner"`
	// The name of the schema.
	SchemaName string `pulumi:"schemaName"`
}

// SchemasSchemaInput is an input type that accepts SchemasSchemaArgs and SchemasSchemaOutput values.
// You can construct a concrete instance of `SchemasSchemaInput` via:
//
//	SchemasSchemaArgs{...}
type SchemasSchemaInput interface {
	pulumi.Input

	ToSchemasSchemaOutput() SchemasSchemaOutput
	ToSchemasSchemaOutputWithContext(context.Context) SchemasSchemaOutput
}

type SchemasSchemaArgs struct {
	// The name of the database.
	DbName pulumi.StringInput `pulumi:"dbName"`
	// The owner of the schema.
	Owner pulumi.StringInput `pulumi:"owner"`
	// The name of the schema.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
}

func (SchemasSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemasSchema)(nil)).Elem()
}

func (i SchemasSchemaArgs) ToSchemasSchemaOutput() SchemasSchemaOutput {
	return i.ToSchemasSchemaOutputWithContext(context.Background())
}

func (i SchemasSchemaArgs) ToSchemasSchemaOutputWithContext(ctx context.Context) SchemasSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemasSchemaOutput)
}

// SchemasSchemaArrayInput is an input type that accepts SchemasSchemaArray and SchemasSchemaArrayOutput values.
// You can construct a concrete instance of `SchemasSchemaArrayInput` via:
//
//	SchemasSchemaArray{ SchemasSchemaArgs{...} }
type SchemasSchemaArrayInput interface {
	pulumi.Input

	ToSchemasSchemaArrayOutput() SchemasSchemaArrayOutput
	ToSchemasSchemaArrayOutputWithContext(context.Context) SchemasSchemaArrayOutput
}

type SchemasSchemaArray []SchemasSchemaInput

func (SchemasSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemasSchema)(nil)).Elem()
}

func (i SchemasSchemaArray) ToSchemasSchemaArrayOutput() SchemasSchemaArrayOutput {
	return i.ToSchemasSchemaArrayOutputWithContext(context.Background())
}

func (i SchemasSchemaArray) ToSchemasSchemaArrayOutputWithContext(ctx context.Context) SchemasSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemasSchemaArrayOutput)
}

type SchemasSchemaOutput struct{ *pulumi.OutputState }

func (SchemasSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemasSchema)(nil)).Elem()
}

func (o SchemasSchemaOutput) ToSchemasSchemaOutput() SchemasSchemaOutput {
	return o
}

func (o SchemasSchemaOutput) ToSchemasSchemaOutputWithContext(ctx context.Context) SchemasSchemaOutput {
	return o
}

// The name of the database.
func (o SchemasSchemaOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v SchemasSchema) string { return v.DbName }).(pulumi.StringOutput)
}

// The owner of the schema.
func (o SchemasSchemaOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v SchemasSchema) string { return v.Owner }).(pulumi.StringOutput)
}

// The name of the schema.
func (o SchemasSchemaOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v SchemasSchema) string { return v.SchemaName }).(pulumi.StringOutput)
}

type SchemasSchemaArrayOutput struct{ *pulumi.OutputState }

func (SchemasSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemasSchema)(nil)).Elem()
}

func (o SchemasSchemaArrayOutput) ToSchemasSchemaArrayOutput() SchemasSchemaArrayOutput {
	return o
}

func (o SchemasSchemaArrayOutput) ToSchemasSchemaArrayOutputWithContext(ctx context.Context) SchemasSchemaArrayOutput {
	return o
}

func (o SchemasSchemaArrayOutput) Index(i pulumi.IntInput) SchemasSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemasSchema {
		return vs[0].([]SchemasSchema)[vs[1].(int)]
	}).(SchemasSchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountInput)(nil)).Elem(), AccountsAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountsAccountArrayInput)(nil)).Elem(), AccountsAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistAssociatedInstanceInput)(nil)).Elem(), AllowlistAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistAssociatedInstanceArrayInput)(nil)).Elem(), AllowlistAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsPostgresqlAllowListInput)(nil)).Elem(), AllowlistsPostgresqlAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsPostgresqlAllowListArrayInput)(nil)).Elem(), AllowlistsPostgresqlAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsPostgresqlAllowListAssociatedInstanceInput)(nil)).Elem(), AllowlistsPostgresqlAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowlistsPostgresqlAllowListAssociatedInstanceArrayInput)(nil)).Elem(), AllowlistsPostgresqlAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseInput)(nil)).Elem(), DatabasesDatabaseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatabasesDatabaseArrayInput)(nil)).Elem(), DatabasesDatabaseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeDetailInput)(nil)).Elem(), InstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeDetailArrayInput)(nil)).Elem(), InstanceChargeDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoPtrInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointInput)(nil)).Elem(), InstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointArrayInput)(nil)).Elem(), InstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointAddressInput)(nil)).Elem(), InstanceEndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointAddressArrayInput)(nil)).Elem(), InstanceEndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointReadOnlyNodeWeightInput)(nil)).Elem(), InstanceEndpointReadOnlyNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointReadOnlyNodeWeightArrayInput)(nil)).Elem(), InstanceEndpointReadOnlyNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeInput)(nil)).Elem(), InstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceNodeArrayInput)(nil)).Elem(), InstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterInput)(nil)).Elem(), InstanceParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceParameterArrayInput)(nil)).Elem(), InstanceParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceInput)(nil)).Elem(), InstancesInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceArrayInput)(nil)).Elem(), InstancesInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceChargeDetailInput)(nil)).Elem(), InstancesInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceChargeDetailArrayInput)(nil)).Elem(), InstancesInstanceChargeDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceEndpointInput)(nil)).Elem(), InstancesInstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceEndpointArrayInput)(nil)).Elem(), InstancesInstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceEndpointAddressInput)(nil)).Elem(), InstancesInstanceEndpointAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceEndpointAddressArrayInput)(nil)).Elem(), InstancesInstanceEndpointAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceEndpointReadOnlyNodeWeightInput)(nil)).Elem(), InstancesInstanceEndpointReadOnlyNodeWeightArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceEndpointReadOnlyNodeWeightArrayInput)(nil)).Elem(), InstancesInstanceEndpointReadOnlyNodeWeightArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNodeInput)(nil)).Elem(), InstancesInstanceNodeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceNodeArrayInput)(nil)).Elem(), InstancesInstanceNodeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagInput)(nil)).Elem(), InstancesInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesInstanceTagArrayInput)(nil)).Elem(), InstancesInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemasSchemaInput)(nil)).Elem(), SchemasSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemasSchemaArrayInput)(nil)).Elem(), SchemasSchemaArray{})
	pulumi.RegisterOutputType(AccountsAccountOutput{})
	pulumi.RegisterOutputType(AccountsAccountArrayOutput{})
	pulumi.RegisterOutputType(AllowlistAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(AllowlistAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(AllowlistsPostgresqlAllowListOutput{})
	pulumi.RegisterOutputType(AllowlistsPostgresqlAllowListArrayOutput{})
	pulumi.RegisterOutputType(AllowlistsPostgresqlAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(AllowlistsPostgresqlAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseOutput{})
	pulumi.RegisterOutputType(DatabasesDatabaseArrayOutput{})
	pulumi.RegisterOutputType(InstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(InstanceChargeDetailArrayOutput{})
	pulumi.RegisterOutputType(InstanceChargeInfoOutput{})
	pulumi.RegisterOutputType(InstanceChargeInfoPtrOutput{})
	pulumi.RegisterOutputType(InstanceEndpointOutput{})
	pulumi.RegisterOutputType(InstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(InstanceEndpointAddressOutput{})
	pulumi.RegisterOutputType(InstanceEndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(InstanceEndpointReadOnlyNodeWeightOutput{})
	pulumi.RegisterOutputType(InstanceEndpointReadOnlyNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(InstanceNodeOutput{})
	pulumi.RegisterOutputType(InstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(InstanceParameterOutput{})
	pulumi.RegisterOutputType(InstanceParameterArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceOutput{})
	pulumi.RegisterOutputType(InstancesInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(InstancesInstanceChargeDetailArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceEndpointOutput{})
	pulumi.RegisterOutputType(InstancesInstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceEndpointAddressOutput{})
	pulumi.RegisterOutputType(InstancesInstanceEndpointAddressArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceEndpointReadOnlyNodeWeightOutput{})
	pulumi.RegisterOutputType(InstancesInstanceEndpointReadOnlyNodeWeightArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNodeOutput{})
	pulumi.RegisterOutputType(InstancesInstanceNodeArrayOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(SchemasSchemaOutput{})
	pulumi.RegisterOutputType(SchemasSchemaArrayOutput{})
}
