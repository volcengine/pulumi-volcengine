// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_postgresql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rds postgresql schema
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_postgresql"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-project1"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-subnet-test-2"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := rds_postgresql.NewInstance(ctx, "fooInstance", &rds_postgresql.InstanceArgs{
//				DbEngineVersion: pulumi.String("PostgreSQL_12"),
//				NodeSpec:        pulumi.String("rds.postgres.1c2g"),
//				PrimaryZoneId:   pulumi.String(fooZones.Zones[0].Id),
//				SecondaryZoneId: pulumi.String(fooZones.Zones[0].Id),
//				StorageSpace:    pulumi.Int(40),
//				SubnetId:        fooSubnet.ID(),
//				InstanceName:    pulumi.String("acc-test-1"),
//				ChargeInfo: &rds_postgresql.InstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: rds_postgresql.InstanceTagArray{
//					&rds_postgresql.InstanceTagArgs{
//						Key:   pulumi.String("tfk1"),
//						Value: pulumi.String("tfv1"),
//					},
//				},
//				Parameters: rds_postgresql.InstanceParameterArray{
//					&rds_postgresql.InstanceParameterArgs{
//						Name:  pulumi.String("auto_explain.log_analyze"),
//						Value: pulumi.String("off"),
//					},
//					&rds_postgresql.InstanceParameterArgs{
//						Name:  pulumi.String("auto_explain.log_format"),
//						Value: pulumi.String("text"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooDatabase, err := rds_postgresql.NewDatabase(ctx, "fooDatabase", &rds_postgresql.DatabaseArgs{
//				DbName:     pulumi.String("acc-test"),
//				InstanceId: fooInstance.ID(),
//				CType:      pulumi.String("C"),
//				Collate:    pulumi.String("zh_CN.utf8"),
//			})
//			if err != nil {
//				return err
//			}
//			fooAccount, err := rds_postgresql.NewAccount(ctx, "fooAccount", &rds_postgresql.AccountArgs{
//				AccountName:       pulumi.String("acc-test-account"),
//				AccountPassword:   pulumi.String("9wc@********12"),
//				AccountType:       pulumi.String("Normal"),
//				InstanceId:        fooInstance.ID(),
//				AccountPrivileges: pulumi.String("Inherit,Login,CreateRole,CreateDB"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rds_postgresql.NewAccount(ctx, "foo1", &rds_postgresql.AccountArgs{
//				AccountName:       pulumi.String("acc-test-account1"),
//				AccountPassword:   pulumi.String("9wc@*******12"),
//				AccountType:       pulumi.String("Normal"),
//				InstanceId:        fooInstance.ID(),
//				AccountPrivileges: pulumi.String("Inherit,Login,CreateRole,CreateDB"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rds_postgresql.NewSchema(ctx, "fooSchema", &rds_postgresql.SchemaArgs{
//				DbName:     fooDatabase.DbName,
//				InstanceId: fooInstance.ID(),
//				Owner:      fooAccount.AccountName,
//				SchemaName: pulumi.String("acc-test-schema"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RdsPostgresqlSchema can be imported using the instance id, database name and schema name, e.g.
//
// ```sh
// $ pulumi import volcengine:rds_postgresql/schema:Schema default instance_id:db_name:schema_name
// ```
type Schema struct {
	pulumi.CustomResourceState

	// The name of the database.
	DbName pulumi.StringOutput `pulumi:"dbName"`
	// The id of the postgresql instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The owner of the schema.
	Owner pulumi.StringOutput `pulumi:"owner"`
	// The name of the schema.
	SchemaName pulumi.StringOutput `pulumi:"schemaName"`
}

// NewSchema registers a new resource with the given unique name, arguments, and options.
func NewSchema(ctx *pulumi.Context,
	name string, args *SchemaArgs, opts ...pulumi.ResourceOption) (*Schema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbName == nil {
		return nil, errors.New("invalid value for required argument 'DbName'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.Owner == nil {
		return nil, errors.New("invalid value for required argument 'Owner'")
	}
	if args.SchemaName == nil {
		return nil, errors.New("invalid value for required argument 'SchemaName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Schema
	err := ctx.RegisterResource("volcengine:rds_postgresql/schema:Schema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSchema gets an existing Schema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SchemaState, opts ...pulumi.ResourceOption) (*Schema, error) {
	var resource Schema
	err := ctx.ReadResource("volcengine:rds_postgresql/schema:Schema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Schema resources.
type schemaState struct {
	// The name of the database.
	DbName *string `pulumi:"dbName"`
	// The id of the postgresql instance.
	InstanceId *string `pulumi:"instanceId"`
	// The owner of the schema.
	Owner *string `pulumi:"owner"`
	// The name of the schema.
	SchemaName *string `pulumi:"schemaName"`
}

type SchemaState struct {
	// The name of the database.
	DbName pulumi.StringPtrInput
	// The id of the postgresql instance.
	InstanceId pulumi.StringPtrInput
	// The owner of the schema.
	Owner pulumi.StringPtrInput
	// The name of the schema.
	SchemaName pulumi.StringPtrInput
}

func (SchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaState)(nil)).Elem()
}

type schemaArgs struct {
	// The name of the database.
	DbName string `pulumi:"dbName"`
	// The id of the postgresql instance.
	InstanceId string `pulumi:"instanceId"`
	// The owner of the schema.
	Owner string `pulumi:"owner"`
	// The name of the schema.
	SchemaName string `pulumi:"schemaName"`
}

// The set of arguments for constructing a Schema resource.
type SchemaArgs struct {
	// The name of the database.
	DbName pulumi.StringInput
	// The id of the postgresql instance.
	InstanceId pulumi.StringInput
	// The owner of the schema.
	Owner pulumi.StringInput
	// The name of the schema.
	SchemaName pulumi.StringInput
}

func (SchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*schemaArgs)(nil)).Elem()
}

type SchemaInput interface {
	pulumi.Input

	ToSchemaOutput() SchemaOutput
	ToSchemaOutputWithContext(ctx context.Context) SchemaOutput
}

func (*Schema) ElementType() reflect.Type {
	return reflect.TypeOf((**Schema)(nil)).Elem()
}

func (i *Schema) ToSchemaOutput() SchemaOutput {
	return i.ToSchemaOutputWithContext(context.Background())
}

func (i *Schema) ToSchemaOutputWithContext(ctx context.Context) SchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaOutput)
}

// SchemaArrayInput is an input type that accepts SchemaArray and SchemaArrayOutput values.
// You can construct a concrete instance of `SchemaArrayInput` via:
//
//	SchemaArray{ SchemaArgs{...} }
type SchemaArrayInput interface {
	pulumi.Input

	ToSchemaArrayOutput() SchemaArrayOutput
	ToSchemaArrayOutputWithContext(context.Context) SchemaArrayOutput
}

type SchemaArray []SchemaInput

func (SchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schema)(nil)).Elem()
}

func (i SchemaArray) ToSchemaArrayOutput() SchemaArrayOutput {
	return i.ToSchemaArrayOutputWithContext(context.Background())
}

func (i SchemaArray) ToSchemaArrayOutputWithContext(ctx context.Context) SchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaArrayOutput)
}

// SchemaMapInput is an input type that accepts SchemaMap and SchemaMapOutput values.
// You can construct a concrete instance of `SchemaMapInput` via:
//
//	SchemaMap{ "key": SchemaArgs{...} }
type SchemaMapInput interface {
	pulumi.Input

	ToSchemaMapOutput() SchemaMapOutput
	ToSchemaMapOutputWithContext(context.Context) SchemaMapOutput
}

type SchemaMap map[string]SchemaInput

func (SchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schema)(nil)).Elem()
}

func (i SchemaMap) ToSchemaMapOutput() SchemaMapOutput {
	return i.ToSchemaMapOutputWithContext(context.Background())
}

func (i SchemaMap) ToSchemaMapOutputWithContext(ctx context.Context) SchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaMapOutput)
}

type SchemaOutput struct{ *pulumi.OutputState }

func (SchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Schema)(nil)).Elem()
}

func (o SchemaOutput) ToSchemaOutput() SchemaOutput {
	return o
}

func (o SchemaOutput) ToSchemaOutputWithContext(ctx context.Context) SchemaOutput {
	return o
}

// The name of the database.
func (o SchemaOutput) DbName() pulumi.StringOutput {
	return o.ApplyT(func(v *Schema) pulumi.StringOutput { return v.DbName }).(pulumi.StringOutput)
}

// The id of the postgresql instance.
func (o SchemaOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Schema) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The owner of the schema.
func (o SchemaOutput) Owner() pulumi.StringOutput {
	return o.ApplyT(func(v *Schema) pulumi.StringOutput { return v.Owner }).(pulumi.StringOutput)
}

// The name of the schema.
func (o SchemaOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v *Schema) pulumi.StringOutput { return v.SchemaName }).(pulumi.StringOutput)
}

type SchemaArrayOutput struct{ *pulumi.OutputState }

func (SchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Schema)(nil)).Elem()
}

func (o SchemaArrayOutput) ToSchemaArrayOutput() SchemaArrayOutput {
	return o
}

func (o SchemaArrayOutput) ToSchemaArrayOutputWithContext(ctx context.Context) SchemaArrayOutput {
	return o
}

func (o SchemaArrayOutput) Index(i pulumi.IntInput) SchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Schema {
		return vs[0].([]*Schema)[vs[1].(int)]
	}).(SchemaOutput)
}

type SchemaMapOutput struct{ *pulumi.OutputState }

func (SchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Schema)(nil)).Elem()
}

func (o SchemaMapOutput) ToSchemaMapOutput() SchemaMapOutput {
	return o
}

func (o SchemaMapOutput) ToSchemaMapOutputWithContext(ctx context.Context) SchemaMapOutput {
	return o
}

func (o SchemaMapOutput) MapIndex(k pulumi.StringInput) SchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Schema {
		return vs[0].(map[string]*Schema)[vs[1].(string)]
	}).(SchemaOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaInput)(nil)).Elem(), &Schema{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaArrayInput)(nil)).Elem(), SchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaMapInput)(nil)).Elem(), SchemaMap{})
	pulumi.RegisterOutputType(SchemaOutput{})
	pulumi.RegisterOutputType(SchemaArrayOutput{})
	pulumi.RegisterOutputType(SchemaMapOutput{})
}
