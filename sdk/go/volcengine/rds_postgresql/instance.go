// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_postgresql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rds postgresql instance
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_postgresql"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-project1"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-subnet-test-2"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rds_postgresql.NewInstance(ctx, "fooInstance", &rds_postgresql.InstanceArgs{
//				DbEngineVersion: pulumi.String("PostgreSQL_12"),
//				NodeSpec:        pulumi.String("rds.postgres.1c2g"),
//				PrimaryZoneId:   pulumi.String(fooZones.Zones[0].Id),
//				SecondaryZoneId: pulumi.String(fooZones.Zones[0].Id),
//				StorageSpace:    pulumi.Int(40),
//				SubnetId:        fooSubnet.ID(),
//				InstanceName:    pulumi.String("acc-test-1"),
//				ChargeInfo: &rds_postgresql.InstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: rds_postgresql.InstanceTagArray{
//					&rds_postgresql.InstanceTagArgs{
//						Key:   pulumi.String("tfk1"),
//						Value: pulumi.String("tfv1"),
//					},
//				},
//				Parameters: rds_postgresql.InstanceParameterArray{
//					&rds_postgresql.InstanceParameterArgs{
//						Name:  pulumi.String("auto_explain.log_analyze"),
//						Value: pulumi.String("off"),
//					},
//					&rds_postgresql.InstanceParameterArgs{
//						Name:  pulumi.String("auto_explain.log_format"),
//						Value: pulumi.String("text"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RdsPostgresqlInstance can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:rds_postgresql/instance:Instance default postgres-21a3333b****
// ```
type Instance struct {
	pulumi.CustomResourceState

	// The instance has used backup space. Unit: GB.
	BackupUse pulumi.IntOutput `pulumi:"backupUse"`
	// Payment methods.
	ChargeDetails InstanceChargeDetailArrayOutput `pulumi:"chargeDetails"`
	// Payment methods.
	ChargeInfo InstanceChargeInfoOutput `pulumi:"chargeInfo"`
	// Node creation local time.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode pulumi.StringOutput `pulumi:"dataSyncMode"`
	// Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
	DbEngineVersion pulumi.StringOutput `pulumi:"dbEngineVersion"`
	// The endpoint info of the RDS instance.
	Endpoints InstanceEndpointArrayOutput `pulumi:"endpoints"`
	// Instance ID.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
	InstanceName pulumi.StringPtrOutput `pulumi:"instanceName"`
	// The status of the RDS PostgreSQL instance.
	InstanceStatus pulumi.StringOutput `pulumi:"instanceStatus"`
	// The instance type of the RDS PostgreSQL instance.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// Memory size in GB.
	Memory pulumi.IntOutput `pulumi:"memory"`
	// The number of nodes.
	NodeNumber pulumi.IntOutput `pulumi:"nodeNumber"`
	// The specification of primary node and secondary node.
	NodeSpec pulumi.StringOutput `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes InstanceNodeArrayOutput `pulumi:"nodes"`
	// Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
	Parameters InstanceParameterArrayOutput `pulumi:"parameters"`
	// The available zone of primary node.
	PrimaryZoneId pulumi.StringOutput `pulumi:"primaryZoneId"`
	// The project name of the RDS instance.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The region of the RDS PostgreSQL instance.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The available zone of secondary node.
	SecondaryZoneId pulumi.StringOutput `pulumi:"secondaryZoneId"`
	// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
	StorageSpace pulumi.IntPtrOutput `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType pulumi.StringOutput `pulumi:"storageType"`
	// Subnet ID of the RDS PostgreSQL instance.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Tags.
	Tags InstanceTagArrayOutput `pulumi:"tags"`
	// The update time of the RDS PostgreSQL instance.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// CPU size.
	VCpu pulumi.IntOutput `pulumi:"vCpu"`
	// The vpc ID of the RDS PostgreSQL instance.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
	// ID of the availability zone where each instance is located.
	ZoneIds pulumi.StringArrayOutput `pulumi:"zoneIds"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChargeInfo == nil {
		return nil, errors.New("invalid value for required argument 'ChargeInfo'")
	}
	if args.DbEngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'DbEngineVersion'")
	}
	if args.NodeSpec == nil {
		return nil, errors.New("invalid value for required argument 'NodeSpec'")
	}
	if args.PrimaryZoneId == nil {
		return nil, errors.New("invalid value for required argument 'PrimaryZoneId'")
	}
	if args.SecondaryZoneId == nil {
		return nil, errors.New("invalid value for required argument 'SecondaryZoneId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("volcengine:rds_postgresql/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("volcengine:rds_postgresql/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The instance has used backup space. Unit: GB.
	BackupUse *int `pulumi:"backupUse"`
	// Payment methods.
	ChargeDetails []InstanceChargeDetail `pulumi:"chargeDetails"`
	// Payment methods.
	ChargeInfo *InstanceChargeInfo `pulumi:"chargeInfo"`
	// Node creation local time.
	CreateTime *string `pulumi:"createTime"`
	// Data synchronization mode.
	DataSyncMode *string `pulumi:"dataSyncMode"`
	// Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
	DbEngineVersion *string `pulumi:"dbEngineVersion"`
	// The endpoint info of the RDS instance.
	Endpoints []InstanceEndpoint `pulumi:"endpoints"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
	InstanceName *string `pulumi:"instanceName"`
	// The status of the RDS PostgreSQL instance.
	InstanceStatus *string `pulumi:"instanceStatus"`
	// The instance type of the RDS PostgreSQL instance.
	InstanceType *string `pulumi:"instanceType"`
	// Memory size in GB.
	Memory *int `pulumi:"memory"`
	// The number of nodes.
	NodeNumber *int `pulumi:"nodeNumber"`
	// The specification of primary node and secondary node.
	NodeSpec *string `pulumi:"nodeSpec"`
	// Instance node information.
	Nodes []InstanceNode `pulumi:"nodes"`
	// Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
	Parameters []InstanceParameter `pulumi:"parameters"`
	// The available zone of primary node.
	PrimaryZoneId *string `pulumi:"primaryZoneId"`
	// The project name of the RDS instance.
	ProjectName *string `pulumi:"projectName"`
	// The region of the RDS PostgreSQL instance.
	RegionId *string `pulumi:"regionId"`
	// The available zone of secondary node.
	SecondaryZoneId *string `pulumi:"secondaryZoneId"`
	// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
	StorageSpace *int `pulumi:"storageSpace"`
	// Instance storage type.
	StorageType *string `pulumi:"storageType"`
	// Subnet ID of the RDS PostgreSQL instance.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []InstanceTag `pulumi:"tags"`
	// The update time of the RDS PostgreSQL instance.
	UpdateTime *string `pulumi:"updateTime"`
	// CPU size.
	VCpu *int `pulumi:"vCpu"`
	// The vpc ID of the RDS PostgreSQL instance.
	VpcId *string `pulumi:"vpcId"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId *string `pulumi:"zoneId"`
	// ID of the availability zone where each instance is located.
	ZoneIds []string `pulumi:"zoneIds"`
}

type InstanceState struct {
	// The instance has used backup space. Unit: GB.
	BackupUse pulumi.IntPtrInput
	// Payment methods.
	ChargeDetails InstanceChargeDetailArrayInput
	// Payment methods.
	ChargeInfo InstanceChargeInfoPtrInput
	// Node creation local time.
	CreateTime pulumi.StringPtrInput
	// Data synchronization mode.
	DataSyncMode pulumi.StringPtrInput
	// Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
	DbEngineVersion pulumi.StringPtrInput
	// The endpoint info of the RDS instance.
	Endpoints InstanceEndpointArrayInput
	// Instance ID.
	InstanceId pulumi.StringPtrInput
	// Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
	InstanceName pulumi.StringPtrInput
	// The status of the RDS PostgreSQL instance.
	InstanceStatus pulumi.StringPtrInput
	// The instance type of the RDS PostgreSQL instance.
	InstanceType pulumi.StringPtrInput
	// Memory size in GB.
	Memory pulumi.IntPtrInput
	// The number of nodes.
	NodeNumber pulumi.IntPtrInput
	// The specification of primary node and secondary node.
	NodeSpec pulumi.StringPtrInput
	// Instance node information.
	Nodes InstanceNodeArrayInput
	// Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
	Parameters InstanceParameterArrayInput
	// The available zone of primary node.
	PrimaryZoneId pulumi.StringPtrInput
	// The project name of the RDS instance.
	ProjectName pulumi.StringPtrInput
	// The region of the RDS PostgreSQL instance.
	RegionId pulumi.StringPtrInput
	// The available zone of secondary node.
	SecondaryZoneId pulumi.StringPtrInput
	// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
	StorageSpace pulumi.IntPtrInput
	// Instance storage type.
	StorageType pulumi.StringPtrInput
	// Subnet ID of the RDS PostgreSQL instance.
	SubnetId pulumi.StringPtrInput
	// Tags.
	Tags InstanceTagArrayInput
	// The update time of the RDS PostgreSQL instance.
	UpdateTime pulumi.StringPtrInput
	// CPU size.
	VCpu pulumi.IntPtrInput
	// The vpc ID of the RDS PostgreSQL instance.
	VpcId pulumi.StringPtrInput
	// The available zone of the RDS PostgreSQL instance.
	ZoneId pulumi.StringPtrInput
	// ID of the availability zone where each instance is located.
	ZoneIds pulumi.StringArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Payment methods.
	ChargeInfo InstanceChargeInfo `pulumi:"chargeInfo"`
	// Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
	InstanceName *string `pulumi:"instanceName"`
	// The specification of primary node and secondary node.
	NodeSpec string `pulumi:"nodeSpec"`
	// Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
	Parameters []InstanceParameter `pulumi:"parameters"`
	// The available zone of primary node.
	PrimaryZoneId string `pulumi:"primaryZoneId"`
	// The project name of the RDS instance.
	ProjectName *string `pulumi:"projectName"`
	// The available zone of secondary node.
	SecondaryZoneId string `pulumi:"secondaryZoneId"`
	// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
	StorageSpace *int `pulumi:"storageSpace"`
	// Subnet ID of the RDS PostgreSQL instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstanceTag `pulumi:"tags"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Payment methods.
	ChargeInfo InstanceChargeInfoInput
	// Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
	DbEngineVersion pulumi.StringInput
	// Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
	InstanceName pulumi.StringPtrInput
	// The specification of primary node and secondary node.
	NodeSpec pulumi.StringInput
	// Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
	Parameters InstanceParameterArrayInput
	// The available zone of primary node.
	PrimaryZoneId pulumi.StringInput
	// The project name of the RDS instance.
	ProjectName pulumi.StringPtrInput
	// The available zone of secondary node.
	SecondaryZoneId pulumi.StringInput
	// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
	StorageSpace pulumi.IntPtrInput
	// Subnet ID of the RDS PostgreSQL instance.
	SubnetId pulumi.StringInput
	// Tags.
	Tags InstanceTagArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// The instance has used backup space. Unit: GB.
func (o InstanceOutput) BackupUse() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.BackupUse }).(pulumi.IntOutput)
}

// Payment methods.
func (o InstanceOutput) ChargeDetails() InstanceChargeDetailArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceChargeDetailArrayOutput { return v.ChargeDetails }).(InstanceChargeDetailArrayOutput)
}

// Payment methods.
func (o InstanceOutput) ChargeInfo() InstanceChargeInfoOutput {
	return o.ApplyT(func(v *Instance) InstanceChargeInfoOutput { return v.ChargeInfo }).(InstanceChargeInfoOutput)
}

// Node creation local time.
func (o InstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// Data synchronization mode.
func (o InstanceOutput) DataSyncMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DataSyncMode }).(pulumi.StringOutput)
}

// Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
func (o InstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// The endpoint info of the RDS instance.
func (o InstanceOutput) Endpoints() InstanceEndpointArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceEndpointArrayOutput { return v.Endpoints }).(InstanceEndpointArrayOutput)
}

// Instance ID.
func (o InstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
func (o InstanceOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// The status of the RDS PostgreSQL instance.
func (o InstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The instance type of the RDS PostgreSQL instance.
func (o InstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// Memory size in GB.
func (o InstanceOutput) Memory() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Memory }).(pulumi.IntOutput)
}

// The number of nodes.
func (o InstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.NodeNumber }).(pulumi.IntOutput)
}

// The specification of primary node and secondary node.
func (o InstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.NodeSpec }).(pulumi.StringOutput)
}

// Instance node information.
func (o InstanceOutput) Nodes() InstanceNodeArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceNodeArrayOutput { return v.Nodes }).(InstanceNodeArrayOutput)
}

// Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
func (o InstanceOutput) Parameters() InstanceParameterArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceParameterArrayOutput { return v.Parameters }).(InstanceParameterArrayOutput)
}

// The available zone of primary node.
func (o InstanceOutput) PrimaryZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PrimaryZoneId }).(pulumi.StringOutput)
}

// The project name of the RDS instance.
func (o InstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The region of the RDS PostgreSQL instance.
func (o InstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The available zone of secondary node.
func (o InstanceOutput) SecondaryZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SecondaryZoneId }).(pulumi.StringOutput)
}

// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
func (o InstanceOutput) StorageSpace() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntPtrOutput { return v.StorageSpace }).(pulumi.IntPtrOutput)
}

// Instance storage type.
func (o InstanceOutput) StorageType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.StorageType }).(pulumi.StringOutput)
}

// Subnet ID of the RDS PostgreSQL instance.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstanceOutput) Tags() InstanceTagArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceTagArrayOutput { return v.Tags }).(InstanceTagArrayOutput)
}

// The update time of the RDS PostgreSQL instance.
func (o InstanceOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// CPU size.
func (o InstanceOutput) VCpu() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.VCpu }).(pulumi.IntOutput)
}

// The vpc ID of the RDS PostgreSQL instance.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The available zone of the RDS PostgreSQL instance.
func (o InstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

// ID of the availability zone where each instance is located.
func (o InstanceOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
