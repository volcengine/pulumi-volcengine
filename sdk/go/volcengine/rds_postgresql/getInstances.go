// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_postgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of rds postgresql instances
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_postgresql"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-project1"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-subnet-test-2"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := rds_postgresql.NewInstance(ctx, "fooInstance", &rds_postgresql.InstanceArgs{
//				DbEngineVersion: pulumi.String("PostgreSQL_12"),
//				NodeSpec:        pulumi.String("rds.postgres.1c2g"),
//				PrimaryZoneId:   pulumi.String(fooZones.Zones[0].Id),
//				SecondaryZoneId: pulumi.String(fooZones.Zones[0].Id),
//				StorageSpace:    pulumi.Int(40),
//				SubnetId:        fooSubnet.ID(),
//				InstanceName:    pulumi.String("acc-test-1"),
//				ChargeInfo: &rds_postgresql.InstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: rds_postgresql.InstanceTagArray{
//					&rds_postgresql.InstanceTagArgs{
//						Key:   pulumi.String("tfk1"),
//						Value: pulumi.String("tfv1"),
//					},
//				},
//				Parameters: rds_postgresql.InstanceParameterArray{
//					&rds_postgresql.InstanceParameterArgs{
//						Name:  pulumi.String("auto_explain.log_analyze"),
//						Value: pulumi.String("off"),
//					},
//					&rds_postgresql.InstanceParameterArgs{
//						Name:  pulumi.String("auto_explain.log_format"),
//						Value: pulumi.String("text"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = rds_postgresql.GetInstancesOutput(ctx, rds_postgresql.GetInstancesOutputArgs{
//				InstanceId: fooInstance.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetInstances(ctx *pulumi.Context, args *GetInstancesArgs, opts ...pulumi.InvokeOption) (*GetInstancesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetInstancesResult
	err := ctx.Invoke("volcengine:rds_postgresql/getInstances:getInstances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInstances.
type GetInstancesArgs struct {
	// The charge type of the RDS instance.
	ChargeType *string `pulumi:"chargeType"`
	// The end time of creating RDS PostgreSQL instance.
	CreateTimeEnd *string `pulumi:"createTimeEnd"`
	// The start time of creating RDS PostgreSQL instance.
	CreateTimeStart *string `pulumi:"createTimeStart"`
	// The version of the RDS PostgreSQL instance.
	DbEngineVersion *string `pulumi:"dbEngineVersion"`
	// The id of the RDS PostgreSQL instance.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the RDS PostgreSQL instance.
	InstanceName *string `pulumi:"instanceName"`
	// The status of the RDS PostgreSQL instance.
	InstanceStatus *string `pulumi:"instanceStatus"`
	// A Name Regex of RDS instance.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Tags.
	Tags []GetInstancesTag `pulumi:"tags"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId *string `pulumi:"zoneId"`
}

// A collection of values returned by getInstances.
type GetInstancesResult struct {
	// Payment type. Value:
	// PostPaid - Pay-As-You-Go
	// PrePaid - Yearly and monthly (default).
	ChargeType      *string `pulumi:"chargeType"`
	CreateTimeEnd   *string `pulumi:"createTimeEnd"`
	CreateTimeStart *string `pulumi:"createTimeStart"`
	// The engine version of the RDS PostgreSQL instance.
	DbEngineVersion *string `pulumi:"dbEngineVersion"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Instance ID.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the RDS PostgreSQL instance.
	InstanceName *string `pulumi:"instanceName"`
	// The status of the RDS PostgreSQL instance.
	InstanceStatus *string `pulumi:"instanceStatus"`
	// The collection of query.
	Instances  []GetInstancesInstance `pulumi:"instances"`
	NameRegex  *string                `pulumi:"nameRegex"`
	OutputFile *string                `pulumi:"outputFile"`
	// Tags.
	Tags []GetInstancesTag `pulumi:"tags"`
	// The total count of RDS instance query.
	TotalCount int `pulumi:"totalCount"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId *string `pulumi:"zoneId"`
}

func GetInstancesOutput(ctx *pulumi.Context, args GetInstancesOutputArgs, opts ...pulumi.InvokeOption) GetInstancesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetInstancesResult, error) {
			args := v.(GetInstancesArgs)
			r, err := GetInstances(ctx, &args, opts...)
			var s GetInstancesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetInstancesResultOutput)
}

// A collection of arguments for invoking getInstances.
type GetInstancesOutputArgs struct {
	// The charge type of the RDS instance.
	ChargeType pulumi.StringPtrInput `pulumi:"chargeType"`
	// The end time of creating RDS PostgreSQL instance.
	CreateTimeEnd pulumi.StringPtrInput `pulumi:"createTimeEnd"`
	// The start time of creating RDS PostgreSQL instance.
	CreateTimeStart pulumi.StringPtrInput `pulumi:"createTimeStart"`
	// The version of the RDS PostgreSQL instance.
	DbEngineVersion pulumi.StringPtrInput `pulumi:"dbEngineVersion"`
	// The id of the RDS PostgreSQL instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The name of the RDS PostgreSQL instance.
	InstanceName pulumi.StringPtrInput `pulumi:"instanceName"`
	// The status of the RDS PostgreSQL instance.
	InstanceStatus pulumi.StringPtrInput `pulumi:"instanceStatus"`
	// A Name Regex of RDS instance.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Tags.
	Tags GetInstancesTagArrayInput `pulumi:"tags"`
	// The available zone of the RDS PostgreSQL instance.
	ZoneId pulumi.StringPtrInput `pulumi:"zoneId"`
}

func (GetInstancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesArgs)(nil)).Elem()
}

// A collection of values returned by getInstances.
type GetInstancesResultOutput struct{ *pulumi.OutputState }

func (GetInstancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesResult)(nil)).Elem()
}

func (o GetInstancesResultOutput) ToGetInstancesResultOutput() GetInstancesResultOutput {
	return o
}

func (o GetInstancesResultOutput) ToGetInstancesResultOutputWithContext(ctx context.Context) GetInstancesResultOutput {
	return o
}

// Payment type. Value:
// PostPaid - Pay-As-You-Go
// PrePaid - Yearly and monthly (default).
func (o GetInstancesResultOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.ChargeType }).(pulumi.StringPtrOutput)
}

func (o GetInstancesResultOutput) CreateTimeEnd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.CreateTimeEnd }).(pulumi.StringPtrOutput)
}

func (o GetInstancesResultOutput) CreateTimeStart() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.CreateTimeStart }).(pulumi.StringPtrOutput)
}

// The engine version of the RDS PostgreSQL instance.
func (o GetInstancesResultOutput) DbEngineVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.DbEngineVersion }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetInstancesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesResult) string { return v.Id }).(pulumi.StringOutput)
}

// Instance ID.
func (o GetInstancesResultOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The name of the RDS PostgreSQL instance.
func (o GetInstancesResultOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// The status of the RDS PostgreSQL instance.
func (o GetInstancesResultOutput) InstanceStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.InstanceStatus }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GetInstancesResultOutput) Instances() GetInstancesInstanceArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []GetInstancesInstance { return v.Instances }).(GetInstancesInstanceArrayOutput)
}

func (o GetInstancesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetInstancesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// Tags.
func (o GetInstancesResultOutput) Tags() GetInstancesTagArrayOutput {
	return o.ApplyT(func(v GetInstancesResult) []GetInstancesTag { return v.Tags }).(GetInstancesTagArrayOutput)
}

// The total count of RDS instance query.
func (o GetInstancesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The available zone of the RDS PostgreSQL instance.
func (o GetInstancesResultOutput) ZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetInstancesResult) *string { return v.ZoneId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetInstancesResultOutput{})
}
