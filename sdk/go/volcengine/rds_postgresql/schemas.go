// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rds_postgresql

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of rds postgresql schemas
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rds_postgresql"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-project1"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-subnet-test-2"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     *pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := rds_postgresql.NewInstance(ctx, "fooInstance", &rds_postgresql.InstanceArgs{
//				DbEngineVersion: pulumi.String("PostgreSQL_12"),
//				NodeSpec:        pulumi.String("rds.postgres.1c2g"),
//				PrimaryZoneId:   *pulumi.String(fooZones.Zones[0].Id),
//				SecondaryZoneId: *pulumi.String(fooZones.Zones[0].Id),
//				StorageSpace:    pulumi.Int(40),
//				SubnetId:        fooSubnet.ID(),
//				InstanceName:    pulumi.String("acc-test-1"),
//				ChargeInfo: &rds_postgresql.InstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: rds_postgresql.InstanceTagArray{
//					&rds_postgresql.InstanceTagArgs{
//						Key:   pulumi.String("tfk1"),
//						Value: pulumi.String("tfv1"),
//					},
//				},
//				Parameters: rds_postgresql.InstanceParameterArray{
//					&rds_postgresql.InstanceParameterArgs{
//						Name:  pulumi.String("auto_explain.log_analyze"),
//						Value: pulumi.String("off"),
//					},
//					&rds_postgresql.InstanceParameterArgs{
//						Name:  pulumi.String("auto_explain.log_format"),
//						Value: pulumi.String("text"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooDatabase, err := rds_postgresql.NewDatabase(ctx, "fooDatabase", &rds_postgresql.DatabaseArgs{
//				DbName:     pulumi.String("acc-test"),
//				InstanceId: fooInstance.ID(),
//				CType:      pulumi.String("C"),
//				Collate:    pulumi.String("zh_CN.utf8"),
//			})
//			if err != nil {
//				return err
//			}
//			fooAccount, err := rds_postgresql.NewAccount(ctx, "fooAccount", &rds_postgresql.AccountArgs{
//				AccountName:       pulumi.String("acc-test-account"),
//				AccountPassword:   pulumi.String("9wc@********12"),
//				AccountType:       pulumi.String("Normal"),
//				InstanceId:        fooInstance.ID(),
//				AccountPrivileges: pulumi.String("Inherit,Login,CreateRole,CreateDB"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rds_postgresql.NewAccount(ctx, "foo1", &rds_postgresql.AccountArgs{
//				AccountName:       pulumi.String("acc-test-account1"),
//				AccountPassword:   pulumi.String("9wc@*******12"),
//				AccountType:       pulumi.String("Normal"),
//				InstanceId:        fooInstance.ID(),
//				AccountPrivileges: pulumi.String("Inherit,Login,CreateRole,CreateDB"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSchema, err := rds_postgresql.NewSchema(ctx, "fooSchema", &rds_postgresql.SchemaArgs{
//				DbName:     fooDatabase.DbName,
//				InstanceId: fooInstance.ID(),
//				Owner:      fooAccount.AccountName,
//				SchemaName: pulumi.String("acc-test-schema"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = rds_postgresql.SchemasOutput(ctx, rds_postgresql.SchemasOutputArgs{
//				DbName:     fooSchema.DbName,
//				InstanceId: fooInstance.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func Schemas(ctx *pulumi.Context, args *SchemasArgs, opts ...pulumi.InvokeOption) (*SchemasResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SchemasResult
	err := ctx.Invoke("volcengine:rds_postgresql/schemas:Schemas", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Schemas.
type SchemasArgs struct {
	// The name of the database.
	DbName *string `pulumi:"dbName"`
	// The id of the instance.
	InstanceId string `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Schemas.
type SchemasResult struct {
	// The name of the database.
	DbName *string `pulumi:"dbName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId string  `pulumi:"instanceId"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of query.
	Schemas []SchemasSchema `pulumi:"schemas"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func SchemasOutput(ctx *pulumi.Context, args SchemasOutputArgs, opts ...pulumi.InvokeOption) SchemasResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (SchemasResult, error) {
			args := v.(SchemasArgs)
			r, err := Schemas(ctx, &args, opts...)
			var s SchemasResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(SchemasResultOutput)
}

// A collection of arguments for invoking Schemas.
type SchemasOutputArgs struct {
	// The name of the database.
	DbName pulumi.StringPtrInput `pulumi:"dbName"`
	// The id of the instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (SchemasOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemasArgs)(nil)).Elem()
}

// A collection of values returned by Schemas.
type SchemasResultOutput struct{ *pulumi.OutputState }

func (SchemasResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemasResult)(nil)).Elem()
}

func (o SchemasResultOutput) ToSchemasResultOutput() SchemasResultOutput {
	return o
}

func (o SchemasResultOutput) ToSchemasResultOutputWithContext(ctx context.Context) SchemasResultOutput {
	return o
}

// The name of the database.
func (o SchemasResultOutput) DbName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemasResult) *string { return v.DbName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o SchemasResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SchemasResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o SchemasResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v SchemasResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o SchemasResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemasResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o SchemasResultOutput) Schemas() SchemasSchemaArrayOutput {
	return o.ApplyT(func(v SchemasResult) []SchemasSchema { return v.Schemas }).(SchemasSchemaArrayOutput)
}

// The total count of query.
func (o SchemasResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v SchemasResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(SchemasResultOutput{})
}
