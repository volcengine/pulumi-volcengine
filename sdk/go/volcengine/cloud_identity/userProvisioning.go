// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cloud_identity

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage cloud identity user provisioning
// ## Import
//
// CloudIdentityUserProvisioning can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:cloud_identity/userProvisioning:UserProvisioning default resource_id
// ```
type UserProvisioning struct {
	pulumi.CustomResourceState

	// The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
	DeletionStrategy pulumi.StringOutput `pulumi:"deletionStrategy"`
	// The description of the cloud identity user provisioning.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
	DuplicationStrategy pulumi.StringOutput `pulumi:"duplicationStrategy"`
	// The duplication suffix of the cloud identity user provisioning. When the `duplicationStrategy` is `KeepBoth`, this field must be specified.
	DuplicationSuffix pulumi.StringPtrOutput `pulumi:"duplicationSuffix"`
	// The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
	IdentitySourceStrategy pulumi.StringOutput `pulumi:"identitySourceStrategy"`
	// A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principalType` is `User`.
	PolicyName pulumi.StringPtrOutput `pulumi:"policyName"`
	// The principal id of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
	PrincipalId pulumi.StringOutput `pulumi:"principalId"`
	// The principal name of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserName`. When the `principalType` is `Group`, this field is specified to `GroupName`.
	PrincipalName pulumi.StringOutput `pulumi:"principalName"`
	// The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
	PrincipalType pulumi.StringOutput `pulumi:"principalType"`
	// The status of the cloud identity user provisioning.
	ProvisionStatus pulumi.StringOutput `pulumi:"provisionStatus"`
	// The target account id of the cloud identity user provisioning.
	TargetId pulumi.StringOutput `pulumi:"targetId"`
}

// NewUserProvisioning registers a new resource with the given unique name, arguments, and options.
func NewUserProvisioning(ctx *pulumi.Context,
	name string, args *UserProvisioningArgs, opts ...pulumi.ResourceOption) (*UserProvisioning, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DeletionStrategy == nil {
		return nil, errors.New("invalid value for required argument 'DeletionStrategy'")
	}
	if args.DuplicationStrategy == nil {
		return nil, errors.New("invalid value for required argument 'DuplicationStrategy'")
	}
	if args.IdentitySourceStrategy == nil {
		return nil, errors.New("invalid value for required argument 'IdentitySourceStrategy'")
	}
	if args.PrincipalId == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalId'")
	}
	if args.PrincipalType == nil {
		return nil, errors.New("invalid value for required argument 'PrincipalType'")
	}
	if args.TargetId == nil {
		return nil, errors.New("invalid value for required argument 'TargetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserProvisioning
	err := ctx.RegisterResource("volcengine:cloud_identity/userProvisioning:UserProvisioning", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserProvisioning gets an existing UserProvisioning resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserProvisioning(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserProvisioningState, opts ...pulumi.ResourceOption) (*UserProvisioning, error) {
	var resource UserProvisioning
	err := ctx.ReadResource("volcengine:cloud_identity/userProvisioning:UserProvisioning", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserProvisioning resources.
type userProvisioningState struct {
	// The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
	DeletionStrategy *string `pulumi:"deletionStrategy"`
	// The description of the cloud identity user provisioning.
	Description *string `pulumi:"description"`
	// The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
	DuplicationStrategy *string `pulumi:"duplicationStrategy"`
	// The duplication suffix of the cloud identity user provisioning. When the `duplicationStrategy` is `KeepBoth`, this field must be specified.
	DuplicationSuffix *string `pulumi:"duplicationSuffix"`
	// The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
	IdentitySourceStrategy *string `pulumi:"identitySourceStrategy"`
	// A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principalType` is `User`.
	PolicyName *string `pulumi:"policyName"`
	// The principal id of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
	PrincipalId *string `pulumi:"principalId"`
	// The principal name of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserName`. When the `principalType` is `Group`, this field is specified to `GroupName`.
	PrincipalName *string `pulumi:"principalName"`
	// The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
	PrincipalType *string `pulumi:"principalType"`
	// The status of the cloud identity user provisioning.
	ProvisionStatus *string `pulumi:"provisionStatus"`
	// The target account id of the cloud identity user provisioning.
	TargetId *string `pulumi:"targetId"`
}

type UserProvisioningState struct {
	// The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
	DeletionStrategy pulumi.StringPtrInput
	// The description of the cloud identity user provisioning.
	Description pulumi.StringPtrInput
	// The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
	DuplicationStrategy pulumi.StringPtrInput
	// The duplication suffix of the cloud identity user provisioning. When the `duplicationStrategy` is `KeepBoth`, this field must be specified.
	DuplicationSuffix pulumi.StringPtrInput
	// The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
	IdentitySourceStrategy pulumi.StringPtrInput
	// A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principalType` is `User`.
	PolicyName pulumi.StringPtrInput
	// The principal id of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
	PrincipalId pulumi.StringPtrInput
	// The principal name of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserName`. When the `principalType` is `Group`, this field is specified to `GroupName`.
	PrincipalName pulumi.StringPtrInput
	// The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
	PrincipalType pulumi.StringPtrInput
	// The status of the cloud identity user provisioning.
	ProvisionStatus pulumi.StringPtrInput
	// The target account id of the cloud identity user provisioning.
	TargetId pulumi.StringPtrInput
}

func (UserProvisioningState) ElementType() reflect.Type {
	return reflect.TypeOf((*userProvisioningState)(nil)).Elem()
}

type userProvisioningArgs struct {
	// The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
	DeletionStrategy string `pulumi:"deletionStrategy"`
	// The description of the cloud identity user provisioning.
	Description *string `pulumi:"description"`
	// The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
	DuplicationStrategy string `pulumi:"duplicationStrategy"`
	// The duplication suffix of the cloud identity user provisioning. When the `duplicationStrategy` is `KeepBoth`, this field must be specified.
	DuplicationSuffix *string `pulumi:"duplicationSuffix"`
	// The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
	IdentitySourceStrategy string `pulumi:"identitySourceStrategy"`
	// A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principalType` is `User`.
	PolicyName *string `pulumi:"policyName"`
	// The principal id of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
	PrincipalId string `pulumi:"principalId"`
	// The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
	PrincipalType string `pulumi:"principalType"`
	// The target account id of the cloud identity user provisioning.
	TargetId string `pulumi:"targetId"`
}

// The set of arguments for constructing a UserProvisioning resource.
type UserProvisioningArgs struct {
	// The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
	DeletionStrategy pulumi.StringInput
	// The description of the cloud identity user provisioning.
	Description pulumi.StringPtrInput
	// The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
	DuplicationStrategy pulumi.StringInput
	// The duplication suffix of the cloud identity user provisioning. When the `duplicationStrategy` is `KeepBoth`, this field must be specified.
	DuplicationSuffix pulumi.StringPtrInput
	// The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
	IdentitySourceStrategy pulumi.StringInput
	// A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principalType` is `User`.
	PolicyName pulumi.StringPtrInput
	// The principal id of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
	PrincipalId pulumi.StringInput
	// The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
	PrincipalType pulumi.StringInput
	// The target account id of the cloud identity user provisioning.
	TargetId pulumi.StringInput
}

func (UserProvisioningArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userProvisioningArgs)(nil)).Elem()
}

type UserProvisioningInput interface {
	pulumi.Input

	ToUserProvisioningOutput() UserProvisioningOutput
	ToUserProvisioningOutputWithContext(ctx context.Context) UserProvisioningOutput
}

func (*UserProvisioning) ElementType() reflect.Type {
	return reflect.TypeOf((**UserProvisioning)(nil)).Elem()
}

func (i *UserProvisioning) ToUserProvisioningOutput() UserProvisioningOutput {
	return i.ToUserProvisioningOutputWithContext(context.Background())
}

func (i *UserProvisioning) ToUserProvisioningOutputWithContext(ctx context.Context) UserProvisioningOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserProvisioningOutput)
}

// UserProvisioningArrayInput is an input type that accepts UserProvisioningArray and UserProvisioningArrayOutput values.
// You can construct a concrete instance of `UserProvisioningArrayInput` via:
//
//	UserProvisioningArray{ UserProvisioningArgs{...} }
type UserProvisioningArrayInput interface {
	pulumi.Input

	ToUserProvisioningArrayOutput() UserProvisioningArrayOutput
	ToUserProvisioningArrayOutputWithContext(context.Context) UserProvisioningArrayOutput
}

type UserProvisioningArray []UserProvisioningInput

func (UserProvisioningArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserProvisioning)(nil)).Elem()
}

func (i UserProvisioningArray) ToUserProvisioningArrayOutput() UserProvisioningArrayOutput {
	return i.ToUserProvisioningArrayOutputWithContext(context.Background())
}

func (i UserProvisioningArray) ToUserProvisioningArrayOutputWithContext(ctx context.Context) UserProvisioningArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserProvisioningArrayOutput)
}

// UserProvisioningMapInput is an input type that accepts UserProvisioningMap and UserProvisioningMapOutput values.
// You can construct a concrete instance of `UserProvisioningMapInput` via:
//
//	UserProvisioningMap{ "key": UserProvisioningArgs{...} }
type UserProvisioningMapInput interface {
	pulumi.Input

	ToUserProvisioningMapOutput() UserProvisioningMapOutput
	ToUserProvisioningMapOutputWithContext(context.Context) UserProvisioningMapOutput
}

type UserProvisioningMap map[string]UserProvisioningInput

func (UserProvisioningMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserProvisioning)(nil)).Elem()
}

func (i UserProvisioningMap) ToUserProvisioningMapOutput() UserProvisioningMapOutput {
	return i.ToUserProvisioningMapOutputWithContext(context.Background())
}

func (i UserProvisioningMap) ToUserProvisioningMapOutputWithContext(ctx context.Context) UserProvisioningMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserProvisioningMapOutput)
}

type UserProvisioningOutput struct{ *pulumi.OutputState }

func (UserProvisioningOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserProvisioning)(nil)).Elem()
}

func (o UserProvisioningOutput) ToUserProvisioningOutput() UserProvisioningOutput {
	return o
}

func (o UserProvisioningOutput) ToUserProvisioningOutputWithContext(ctx context.Context) UserProvisioningOutput {
	return o
}

// The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
func (o UserProvisioningOutput) DeletionStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringOutput { return v.DeletionStrategy }).(pulumi.StringOutput)
}

// The description of the cloud identity user provisioning.
func (o UserProvisioningOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
func (o UserProvisioningOutput) DuplicationStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringOutput { return v.DuplicationStrategy }).(pulumi.StringOutput)
}

// The duplication suffix of the cloud identity user provisioning. When the `duplicationStrategy` is `KeepBoth`, this field must be specified.
func (o UserProvisioningOutput) DuplicationSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringPtrOutput { return v.DuplicationSuffix }).(pulumi.StringPtrOutput)
}

// The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
func (o UserProvisioningOutput) IdentitySourceStrategy() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringOutput { return v.IdentitySourceStrategy }).(pulumi.StringOutput)
}

// A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principalType` is `User`.
func (o UserProvisioningOutput) PolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringPtrOutput { return v.PolicyName }).(pulumi.StringPtrOutput)
}

// The principal id of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
func (o UserProvisioningOutput) PrincipalId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringOutput { return v.PrincipalId }).(pulumi.StringOutput)
}

// The principal name of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserName`. When the `principalType` is `Group`, this field is specified to `GroupName`.
func (o UserProvisioningOutput) PrincipalName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringOutput { return v.PrincipalName }).(pulumi.StringOutput)
}

// The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
func (o UserProvisioningOutput) PrincipalType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringOutput { return v.PrincipalType }).(pulumi.StringOutput)
}

// The status of the cloud identity user provisioning.
func (o UserProvisioningOutput) ProvisionStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringOutput { return v.ProvisionStatus }).(pulumi.StringOutput)
}

// The target account id of the cloud identity user provisioning.
func (o UserProvisioningOutput) TargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *UserProvisioning) pulumi.StringOutput { return v.TargetId }).(pulumi.StringOutput)
}

type UserProvisioningArrayOutput struct{ *pulumi.OutputState }

func (UserProvisioningArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserProvisioning)(nil)).Elem()
}

func (o UserProvisioningArrayOutput) ToUserProvisioningArrayOutput() UserProvisioningArrayOutput {
	return o
}

func (o UserProvisioningArrayOutput) ToUserProvisioningArrayOutputWithContext(ctx context.Context) UserProvisioningArrayOutput {
	return o
}

func (o UserProvisioningArrayOutput) Index(i pulumi.IntInput) UserProvisioningOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserProvisioning {
		return vs[0].([]*UserProvisioning)[vs[1].(int)]
	}).(UserProvisioningOutput)
}

type UserProvisioningMapOutput struct{ *pulumi.OutputState }

func (UserProvisioningMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserProvisioning)(nil)).Elem()
}

func (o UserProvisioningMapOutput) ToUserProvisioningMapOutput() UserProvisioningMapOutput {
	return o
}

func (o UserProvisioningMapOutput) ToUserProvisioningMapOutputWithContext(ctx context.Context) UserProvisioningMapOutput {
	return o
}

func (o UserProvisioningMapOutput) MapIndex(k pulumi.StringInput) UserProvisioningOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserProvisioning {
		return vs[0].(map[string]*UserProvisioning)[vs[1].(string)]
	}).(UserProvisioningOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserProvisioningInput)(nil)).Elem(), &UserProvisioning{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserProvisioningArrayInput)(nil)).Elem(), UserProvisioningArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserProvisioningMapInput)(nil)).Elem(), UserProvisioningMap{})
	pulumi.RegisterOutputType(UserProvisioningOutput{})
	pulumi.RegisterOutputType(UserProvisioningArrayOutput{})
	pulumi.RegisterOutputType(UserProvisioningMapOutput{})
}
