// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vedb_mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vedb mysql account
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vedb_mysql"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[2].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := vedb_mysql.NewInstance(ctx, "fooInstance", &vedb_mysql.InstanceArgs{
//				ChargeType:        pulumi.String("PostPaid"),
//				StorageChargeType: pulumi.String("PostPaid"),
//				DbEngineVersion:   pulumi.String("MySQL_8_0"),
//				DbMinorVersion:    pulumi.String("3.0"),
//				NodeNumber:        pulumi.Int(2),
//				NodeSpec:          pulumi.String("vedb.mysql.x4.large"),
//				SubnetId:          fooSubnet.ID(),
//				InstanceName:      pulumi.String("tf-test"),
//				ProjectName:       pulumi.String("testA"),
//				Tags: vedb_mysql.InstanceTagArray{
//					&vedb_mysql.InstanceTagArgs{
//						Key:   pulumi.String("tftest"),
//						Value: pulumi.String("tftest"),
//					},
//					&vedb_mysql.InstanceTagArgs{
//						Key:   pulumi.String("tftest2"),
//						Value: pulumi.String("tftest2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooDatabase, err := vedb_mysql.NewDatabase(ctx, "fooDatabase", &vedb_mysql.DatabaseArgs{
//				DbName:     pulumi.String("tf-table"),
//				InstanceId: fooInstance.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vedb_mysql.NewAccount(ctx, "fooAccount", &vedb_mysql.AccountArgs{
//				AccountName:     pulumi.String("tftest"),
//				AccountPassword: pulumi.String("93f0cb0614Aab12"),
//				AccountType:     pulumi.String("Normal"),
//				InstanceId:      fooInstance.ID(),
//				AccountPrivileges: vedb_mysql.AccountAccountPrivilegeArray{
//					&vedb_mysql.AccountAccountPrivilegeArgs{
//						DbName:                 fooDatabase.DbName,
//						AccountPrivilege:       pulumi.String("Custom"),
//						AccountPrivilegeDetail: pulumi.String("SELECT,INSERT,DELETE"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VedbMysqlAccount can be imported using the instance id and account name, e.g.
//
// ```sh
// $ pulumi import volcengine:vedb_mysql/account:Account default vedbm-r3xq0zdl****:testuser
// ```
type Account struct {
	pulumi.CustomResourceState

	// Database account name. The account name must meet the following requirements:
	// The name is unique and within 2 to 32 characters in length.
	// Consists of lowercase letters, numbers, or underscores (_).
	// Starts with a lowercase letter and ends with a letter or number.
	// The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
	AccountName pulumi.StringOutput `pulumi:"accountName"`
	// Password of database account. The account password must meet the following requirements:
	// It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
	// It must be within 8 to 32 characters in length.
	// It must contain at least three of upper case letters, lower case letters, numbers or special characters.
	AccountPassword pulumi.StringOutput `pulumi:"accountPassword"`
	// Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
	AccountPrivileges AccountAccountPrivilegeArrayOutput `pulumi:"accountPrivileges"`
	// Database account type. Values:
	// Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
	// Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
	AccountType pulumi.StringOutput `pulumi:"accountType"`
	// The id of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
}

// NewAccount registers a new resource with the given unique name, arguments, and options.
func NewAccount(ctx *pulumi.Context,
	name string, args *AccountArgs, opts ...pulumi.ResourceOption) (*Account, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AccountName == nil {
		return nil, errors.New("invalid value for required argument 'AccountName'")
	}
	if args.AccountPassword == nil {
		return nil, errors.New("invalid value for required argument 'AccountPassword'")
	}
	if args.AccountType == nil {
		return nil, errors.New("invalid value for required argument 'AccountType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.AccountPassword != nil {
		args.AccountPassword = pulumi.ToSecret(args.AccountPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"accountPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Account
	err := ctx.RegisterResource("volcengine:vedb_mysql/account:Account", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccount gets an existing Account resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccount(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccountState, opts ...pulumi.ResourceOption) (*Account, error) {
	var resource Account
	err := ctx.ReadResource("volcengine:vedb_mysql/account:Account", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Account resources.
type accountState struct {
	// Database account name. The account name must meet the following requirements:
	// The name is unique and within 2 to 32 characters in length.
	// Consists of lowercase letters, numbers, or underscores (_).
	// Starts with a lowercase letter and ends with a letter or number.
	// The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
	AccountName *string `pulumi:"accountName"`
	// Password of database account. The account password must meet the following requirements:
	// It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
	// It must be within 8 to 32 characters in length.
	// It must contain at least three of upper case letters, lower case letters, numbers or special characters.
	AccountPassword *string `pulumi:"accountPassword"`
	// Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
	AccountPrivileges []AccountAccountPrivilege `pulumi:"accountPrivileges"`
	// Database account type. Values:
	// Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
	// Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
	AccountType *string `pulumi:"accountType"`
	// The id of the instance.
	InstanceId *string `pulumi:"instanceId"`
}

type AccountState struct {
	// Database account name. The account name must meet the following requirements:
	// The name is unique and within 2 to 32 characters in length.
	// Consists of lowercase letters, numbers, or underscores (_).
	// Starts with a lowercase letter and ends with a letter or number.
	// The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
	AccountName pulumi.StringPtrInput
	// Password of database account. The account password must meet the following requirements:
	// It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
	// It must be within 8 to 32 characters in length.
	// It must contain at least three of upper case letters, lower case letters, numbers or special characters.
	AccountPassword pulumi.StringPtrInput
	// Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
	AccountPrivileges AccountAccountPrivilegeArrayInput
	// Database account type. Values:
	// Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
	// Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
	AccountType pulumi.StringPtrInput
	// The id of the instance.
	InstanceId pulumi.StringPtrInput
}

func (AccountState) ElementType() reflect.Type {
	return reflect.TypeOf((*accountState)(nil)).Elem()
}

type accountArgs struct {
	// Database account name. The account name must meet the following requirements:
	// The name is unique and within 2 to 32 characters in length.
	// Consists of lowercase letters, numbers, or underscores (_).
	// Starts with a lowercase letter and ends with a letter or number.
	// The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
	AccountName string `pulumi:"accountName"`
	// Password of database account. The account password must meet the following requirements:
	// It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
	// It must be within 8 to 32 characters in length.
	// It must contain at least three of upper case letters, lower case letters, numbers or special characters.
	AccountPassword string `pulumi:"accountPassword"`
	// Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
	AccountPrivileges []AccountAccountPrivilege `pulumi:"accountPrivileges"`
	// Database account type. Values:
	// Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
	// Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
	AccountType string `pulumi:"accountType"`
	// The id of the instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a Account resource.
type AccountArgs struct {
	// Database account name. The account name must meet the following requirements:
	// The name is unique and within 2 to 32 characters in length.
	// Consists of lowercase letters, numbers, or underscores (_).
	// Starts with a lowercase letter and ends with a letter or number.
	// The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
	AccountName pulumi.StringInput
	// Password of database account. The account password must meet the following requirements:
	// It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
	// It must be within 8 to 32 characters in length.
	// It must contain at least three of upper case letters, lower case letters, numbers or special characters.
	AccountPassword pulumi.StringInput
	// Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
	AccountPrivileges AccountAccountPrivilegeArrayInput
	// Database account type. Values:
	// Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
	// Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
	AccountType pulumi.StringInput
	// The id of the instance.
	InstanceId pulumi.StringInput
}

func (AccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accountArgs)(nil)).Elem()
}

type AccountInput interface {
	pulumi.Input

	ToAccountOutput() AccountOutput
	ToAccountOutputWithContext(ctx context.Context) AccountOutput
}

func (*Account) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (i *Account) ToAccountOutput() AccountOutput {
	return i.ToAccountOutputWithContext(context.Background())
}

func (i *Account) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountOutput)
}

// AccountArrayInput is an input type that accepts AccountArray and AccountArrayOutput values.
// You can construct a concrete instance of `AccountArrayInput` via:
//
//	AccountArray{ AccountArgs{...} }
type AccountArrayInput interface {
	pulumi.Input

	ToAccountArrayOutput() AccountArrayOutput
	ToAccountArrayOutputWithContext(context.Context) AccountArrayOutput
}

type AccountArray []AccountInput

func (AccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (i AccountArray) ToAccountArrayOutput() AccountArrayOutput {
	return i.ToAccountArrayOutputWithContext(context.Background())
}

func (i AccountArray) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountArrayOutput)
}

// AccountMapInput is an input type that accepts AccountMap and AccountMapOutput values.
// You can construct a concrete instance of `AccountMapInput` via:
//
//	AccountMap{ "key": AccountArgs{...} }
type AccountMapInput interface {
	pulumi.Input

	ToAccountMapOutput() AccountMapOutput
	ToAccountMapOutputWithContext(context.Context) AccountMapOutput
}

type AccountMap map[string]AccountInput

func (AccountMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (i AccountMap) ToAccountMapOutput() AccountMapOutput {
	return i.ToAccountMapOutputWithContext(context.Background())
}

func (i AccountMap) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccountMapOutput)
}

type AccountOutput struct{ *pulumi.OutputState }

func (AccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Account)(nil)).Elem()
}

func (o AccountOutput) ToAccountOutput() AccountOutput {
	return o
}

func (o AccountOutput) ToAccountOutputWithContext(ctx context.Context) AccountOutput {
	return o
}

// Database account name. The account name must meet the following requirements:
// The name is unique and within 2 to 32 characters in length.
// Consists of lowercase letters, numbers, or underscores (_).
// Starts with a lowercase letter and ends with a letter or number.
// The name cannot contain certain prohibited words. For detailed information, please refer to prohibited keywords. And certain reserved words such as root, admin, etc. cannot be used.
func (o AccountOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountName }).(pulumi.StringOutput)
}

// Password of database account. The account password must meet the following requirements:
// It can only contain upper and lower case letters, numbers and the following special characters _#!@$%^&*()+=-.
// It must be within 8 to 32 characters in length.
// It must contain at least three of upper case letters, lower case letters, numbers or special characters.
func (o AccountOutput) AccountPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountPassword }).(pulumi.StringOutput)
}

// Database permission information. When the value of AccountType is Super, this parameter does not need to be passed. High-privilege accounts by default have all permissions for all databases under this instance. When the value of AccountType is Normal, it is recommended to pass this parameter to grant specified permissions for specified databases to ordinary accounts. If not set, this account does not have any permissions for any database.
func (o AccountOutput) AccountPrivileges() AccountAccountPrivilegeArrayOutput {
	return o.ApplyT(func(v *Account) AccountAccountPrivilegeArrayOutput { return v.AccountPrivileges }).(AccountAccountPrivilegeArrayOutput)
}

// Database account type. Values:
// Super: High-privilege account. Only one high-privilege account can be created for an instance. It has all permissions for all databases under this instance and can manage all ordinary accounts and databases.
// Normal: Multiple ordinary accounts can be created for an instance. Specific database permissions need to be manually granted to ordinary accounts.
func (o AccountOutput) AccountType() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.AccountType }).(pulumi.StringOutput)
}

// The id of the instance.
func (o AccountOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Account) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

type AccountArrayOutput struct{ *pulumi.OutputState }

func (AccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Account)(nil)).Elem()
}

func (o AccountArrayOutput) ToAccountArrayOutput() AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) ToAccountArrayOutputWithContext(ctx context.Context) AccountArrayOutput {
	return o
}

func (o AccountArrayOutput) Index(i pulumi.IntInput) AccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Account {
		return vs[0].([]*Account)[vs[1].(int)]
	}).(AccountOutput)
}

type AccountMapOutput struct{ *pulumi.OutputState }

func (AccountMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Account)(nil)).Elem()
}

func (o AccountMapOutput) ToAccountMapOutput() AccountMapOutput {
	return o
}

func (o AccountMapOutput) ToAccountMapOutputWithContext(ctx context.Context) AccountMapOutput {
	return o
}

func (o AccountMapOutput) MapIndex(k pulumi.StringInput) AccountOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Account {
		return vs[0].(map[string]*Account)[vs[1].(string)]
	}).(AccountOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccountInput)(nil)).Elem(), &Account{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountArrayInput)(nil)).Elem(), AccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccountMapInput)(nil)).Elem(), AccountMap{})
	pulumi.RegisterOutputType(AccountOutput{})
	pulumi.RegisterOutputType(AccountArrayOutput{})
	pulumi.RegisterOutputType(AccountMapOutput{})
}
