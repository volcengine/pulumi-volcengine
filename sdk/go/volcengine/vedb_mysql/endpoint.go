// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vedb_mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vedb mysql endpoint
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vedb_mysql"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[2].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := vedb_mysql.NewInstance(ctx, "fooInstance", &vedb_mysql.InstanceArgs{
//				ChargeType:        pulumi.String("PostPaid"),
//				StorageChargeType: pulumi.String("PostPaid"),
//				DbEngineVersion:   pulumi.String("MySQL_8_0"),
//				DbMinorVersion:    pulumi.String("3.0"),
//				NodeNumber:        pulumi.Int(2),
//				NodeSpec:          pulumi.String("vedb.mysql.x4.large"),
//				SubnetId:          fooSubnet.ID(),
//				InstanceName:      pulumi.String("tf-test"),
//				ProjectName:       pulumi.String("testA"),
//				Tags: vedb_mysql.InstanceTagArray{
//					&vedb_mysql.InstanceTagArgs{
//						Key:   pulumi.String("tftest"),
//						Value: pulumi.String("tftest"),
//					},
//					&vedb_mysql.InstanceTagArgs{
//						Key:   pulumi.String("tftest2"),
//						Value: pulumi.String("tftest2"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooInstances := vedb_mysql.InstancesOutput(ctx, vedb_mysql.InstancesOutputArgs{
//				InstanceId: fooInstance.ID(),
//			}, nil)
//			_, err = vedb_mysql.NewEndpoint(ctx, "fooEndpoint", &vedb_mysql.EndpointArgs{
//				EndpointType: pulumi.String("Custom"),
//				InstanceId:   fooInstance.ID(),
//				NodeIds: pulumi.StringArray{
//					fooInstances.ApplyT(func(fooInstances vedb_mysql.InstancesResult) (*string, error) {
//						return &fooInstances.Instances[0].Nodes[0].NodeId, nil
//					}).(pulumi.StringPtrOutput),
//					fooInstances.ApplyT(func(fooInstances vedb_mysql.InstancesResult) (*string, error) {
//						return &fooInstances.Instances[0].Nodes[1].NodeId, nil
//					}).(pulumi.StringPtrOutput),
//				},
//				ReadWriteMode:            pulumi.String("ReadWrite"),
//				EndpointName:             pulumi.String("tf-test"),
//				Description:              pulumi.String("tf test"),
//				MasterAcceptReadRequests: pulumi.Bool(true),
//				DistributedTransaction:   pulumi.Bool(true),
//				ConsistLevel:             pulumi.String("Session"),
//				ConsistTimeout:           pulumi.Int(100000),
//				ConsistTimeoutAction:     pulumi.String("ReadMaster"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VedbMysqlEndpoint can be imported using the instance id:endpoint id, e.g.
//
// ```sh
// $ pulumi import volcengine:vedb_mysql/endpoint:Endpoint default vedbm-iqnh3a7z****:vedbm-2pf2xk5v****-Custom-50yv
// ```
// Note: The master node endpoint only supports modifying the EndpointName and Description parameters. If values are passed in for other parameters, these values will be ignored without generating an error.
// The default endpoint does not support modifying the ReadWriteMode, AutoAddNewNodes, and Nodes parameters. If values are passed in for these parameters, these values will be ignored without generating an error.
type Endpoint struct {
	pulumi.CustomResourceState

	// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
	// Eventual: eventual consistency.
	// Session: session consistency.
	// Global: global consistency.
	// Description
	// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
	// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
	ConsistLevel pulumi.StringOutput `pulumi:"consistLevel"`
	// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
	// Explanation
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeout pulumi.IntOutput `pulumi:"consistTimeout"`
	// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
	// ReturnError: Return SQL error (wait replication complete timeout, please retry).
	// ReadMaster: Send a request to the master node (default).
	// Description
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeoutAction pulumi.StringOutput `pulumi:"consistTimeoutAction"`
	// Description information for connecting endpoint. The length cannot exceed 200 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
	// true: Enabled (default).
	// false: Disabled.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
	DistributedTransaction pulumi.BoolPtrOutput `pulumi:"distributedTransaction"`
	// The id of the endpoint.
	EndpointId pulumi.StringOutput `pulumi:"endpointId"`
	// Connect the endpoint name. The setting rules are as follows:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length is 1 to 64 characters.
	EndpointName pulumi.StringOutput `pulumi:"endpointName"`
	// Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
	EndpointType pulumi.StringOutput `pulumi:"endpointType"`
	// The id of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The master node accepts read requests. Value range:
	// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
	// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
	MasterAcceptReadRequests pulumi.BoolPtrOutput `pulumi:"masterAcceptReadRequests"`
	// Connect the node IDs associated with the endpoint.The filling rules are as follows:
	// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
	// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
	NodeIds pulumi.StringArrayOutput `pulumi:"nodeIds"`
	// Endpoint read-write mode. Values:
	// ReadWrite: Read and write endpoint.
	// ReadOnly: Read-only endpoint (default).
	ReadWriteMode pulumi.StringOutput `pulumi:"readWriteMode"`
}

// NewEndpoint registers a new resource with the given unique name, arguments, and options.
func NewEndpoint(ctx *pulumi.Context,
	name string, args *EndpointArgs, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndpointType == nil {
		return nil, errors.New("invalid value for required argument 'EndpointType'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.NodeIds == nil {
		return nil, errors.New("invalid value for required argument 'NodeIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Endpoint
	err := ctx.RegisterResource("volcengine:vedb_mysql/endpoint:Endpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEndpoint gets an existing Endpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EndpointState, opts ...pulumi.ResourceOption) (*Endpoint, error) {
	var resource Endpoint
	err := ctx.ReadResource("volcengine:vedb_mysql/endpoint:Endpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Endpoint resources.
type endpointState struct {
	// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
	// Eventual: eventual consistency.
	// Session: session consistency.
	// Global: global consistency.
	// Description
	// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
	// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
	ConsistLevel *string `pulumi:"consistLevel"`
	// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
	// Explanation
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeout *int `pulumi:"consistTimeout"`
	// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
	// ReturnError: Return SQL error (wait replication complete timeout, please retry).
	// ReadMaster: Send a request to the master node (default).
	// Description
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeoutAction *string `pulumi:"consistTimeoutAction"`
	// Description information for connecting endpoint. The length cannot exceed 200 characters.
	Description *string `pulumi:"description"`
	// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
	// true: Enabled (default).
	// false: Disabled.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
	DistributedTransaction *bool `pulumi:"distributedTransaction"`
	// The id of the endpoint.
	EndpointId *string `pulumi:"endpointId"`
	// Connect the endpoint name. The setting rules are as follows:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length is 1 to 64 characters.
	EndpointName *string `pulumi:"endpointName"`
	// Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
	EndpointType *string `pulumi:"endpointType"`
	// The id of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// The master node accepts read requests. Value range:
	// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
	// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
	MasterAcceptReadRequests *bool `pulumi:"masterAcceptReadRequests"`
	// Connect the node IDs associated with the endpoint.The filling rules are as follows:
	// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
	// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
	NodeIds []string `pulumi:"nodeIds"`
	// Endpoint read-write mode. Values:
	// ReadWrite: Read and write endpoint.
	// ReadOnly: Read-only endpoint (default).
	ReadWriteMode *string `pulumi:"readWriteMode"`
}

type EndpointState struct {
	// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
	// Eventual: eventual consistency.
	// Session: session consistency.
	// Global: global consistency.
	// Description
	// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
	// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
	ConsistLevel pulumi.StringPtrInput
	// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
	// Explanation
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeout pulumi.IntPtrInput
	// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
	// ReturnError: Return SQL error (wait replication complete timeout, please retry).
	// ReadMaster: Send a request to the master node (default).
	// Description
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeoutAction pulumi.StringPtrInput
	// Description information for connecting endpoint. The length cannot exceed 200 characters.
	Description pulumi.StringPtrInput
	// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
	// true: Enabled (default).
	// false: Disabled.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
	DistributedTransaction pulumi.BoolPtrInput
	// The id of the endpoint.
	EndpointId pulumi.StringPtrInput
	// Connect the endpoint name. The setting rules are as follows:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length is 1 to 64 characters.
	EndpointName pulumi.StringPtrInput
	// Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
	EndpointType pulumi.StringPtrInput
	// The id of the instance.
	InstanceId pulumi.StringPtrInput
	// The master node accepts read requests. Value range:
	// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
	// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
	MasterAcceptReadRequests pulumi.BoolPtrInput
	// Connect the node IDs associated with the endpoint.The filling rules are as follows:
	// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
	// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
	NodeIds pulumi.StringArrayInput
	// Endpoint read-write mode. Values:
	// ReadWrite: Read and write endpoint.
	// ReadOnly: Read-only endpoint (default).
	ReadWriteMode pulumi.StringPtrInput
}

func (EndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointState)(nil)).Elem()
}

type endpointArgs struct {
	// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
	// Eventual: eventual consistency.
	// Session: session consistency.
	// Global: global consistency.
	// Description
	// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
	// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
	ConsistLevel *string `pulumi:"consistLevel"`
	// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
	// Explanation
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeout *int `pulumi:"consistTimeout"`
	// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
	// ReturnError: Return SQL error (wait replication complete timeout, please retry).
	// ReadMaster: Send a request to the master node (default).
	// Description
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeoutAction *string `pulumi:"consistTimeoutAction"`
	// Description information for connecting endpoint. The length cannot exceed 200 characters.
	Description *string `pulumi:"description"`
	// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
	// true: Enabled (default).
	// false: Disabled.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
	DistributedTransaction *bool `pulumi:"distributedTransaction"`
	// Connect the endpoint name. The setting rules are as follows:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length is 1 to 64 characters.
	EndpointName *string `pulumi:"endpointName"`
	// Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
	EndpointType string `pulumi:"endpointType"`
	// The id of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The master node accepts read requests. Value range:
	// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
	// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
	MasterAcceptReadRequests *bool `pulumi:"masterAcceptReadRequests"`
	// Connect the node IDs associated with the endpoint.The filling rules are as follows:
	// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
	// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
	NodeIds []string `pulumi:"nodeIds"`
	// Endpoint read-write mode. Values:
	// ReadWrite: Read and write endpoint.
	// ReadOnly: Read-only endpoint (default).
	ReadWriteMode *string `pulumi:"readWriteMode"`
}

// The set of arguments for constructing a Endpoint resource.
type EndpointArgs struct {
	// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
	// Eventual: eventual consistency.
	// Session: session consistency.
	// Global: global consistency.
	// Description
	// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
	// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
	ConsistLevel pulumi.StringPtrInput
	// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
	// Explanation
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeout pulumi.IntPtrInput
	// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
	// ReturnError: Return SQL error (wait replication complete timeout, please retry).
	// ReadMaster: Send a request to the master node (default).
	// Description
	// This parameter takes effect only when the value of ConsistLevel is Global or Session.
	ConsistTimeoutAction pulumi.StringPtrInput
	// Description information for connecting endpoint. The length cannot exceed 200 characters.
	Description pulumi.StringPtrInput
	// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
	// true: Enabled (default).
	// false: Disabled.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
	DistributedTransaction pulumi.BoolPtrInput
	// Connect the endpoint name. The setting rules are as follows:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length is 1 to 64 characters.
	EndpointName pulumi.StringPtrInput
	// Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
	EndpointType pulumi.StringInput
	// The id of the instance.
	InstanceId pulumi.StringInput
	// The master node accepts read requests. Value range:
	// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
	// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
	// Description
	// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
	MasterAcceptReadRequests pulumi.BoolPtrInput
	// Connect the node IDs associated with the endpoint.The filling rules are as follows:
	// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
	// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
	NodeIds pulumi.StringArrayInput
	// Endpoint read-write mode. Values:
	// ReadWrite: Read and write endpoint.
	// ReadOnly: Read-only endpoint (default).
	ReadWriteMode pulumi.StringPtrInput
}

func (EndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*endpointArgs)(nil)).Elem()
}

type EndpointInput interface {
	pulumi.Input

	ToEndpointOutput() EndpointOutput
	ToEndpointOutputWithContext(ctx context.Context) EndpointOutput
}

func (*Endpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (i *Endpoint) ToEndpointOutput() EndpointOutput {
	return i.ToEndpointOutputWithContext(context.Background())
}

func (i *Endpoint) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointOutput)
}

// EndpointArrayInput is an input type that accepts EndpointArray and EndpointArrayOutput values.
// You can construct a concrete instance of `EndpointArrayInput` via:
//
//	EndpointArray{ EndpointArgs{...} }
type EndpointArrayInput interface {
	pulumi.Input

	ToEndpointArrayOutput() EndpointArrayOutput
	ToEndpointArrayOutputWithContext(context.Context) EndpointArrayOutput
}

type EndpointArray []EndpointInput

func (EndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (i EndpointArray) ToEndpointArrayOutput() EndpointArrayOutput {
	return i.ToEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointArray) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointArrayOutput)
}

// EndpointMapInput is an input type that accepts EndpointMap and EndpointMapOutput values.
// You can construct a concrete instance of `EndpointMapInput` via:
//
//	EndpointMap{ "key": EndpointArgs{...} }
type EndpointMapInput interface {
	pulumi.Input

	ToEndpointMapOutput() EndpointMapOutput
	ToEndpointMapOutputWithContext(context.Context) EndpointMapOutput
}

type EndpointMap map[string]EndpointInput

func (EndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (i EndpointMap) ToEndpointMapOutput() EndpointMapOutput {
	return i.ToEndpointMapOutputWithContext(context.Background())
}

func (i EndpointMap) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointMapOutput)
}

type EndpointOutput struct{ *pulumi.OutputState }

func (EndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Endpoint)(nil)).Elem()
}

func (o EndpointOutput) ToEndpointOutput() EndpointOutput {
	return o
}

func (o EndpointOutput) ToEndpointOutputWithContext(ctx context.Context) EndpointOutput {
	return o
}

// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
// Eventual: eventual consistency.
// Session: session consistency.
// Global: global consistency.
// Description
// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
func (o EndpointOutput) ConsistLevel() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ConsistLevel }).(pulumi.StringOutput)
}

// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
// Explanation
// This parameter takes effect only when the value of ConsistLevel is Global or Session.
func (o EndpointOutput) ConsistTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.IntOutput { return v.ConsistTimeout }).(pulumi.IntOutput)
}

// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
// ReturnError: Return SQL error (wait replication complete timeout, please retry).
// ReadMaster: Send a request to the master node (default).
// Description
// This parameter takes effect only when the value of ConsistLevel is Global or Session.
func (o EndpointOutput) ConsistTimeoutAction() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ConsistTimeoutAction }).(pulumi.StringOutput)
}

// Description information for connecting endpoint. The length cannot exceed 200 characters.
func (o EndpointOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
// true: Enabled (default).
// false: Disabled.
// Description
// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
func (o EndpointOutput) DistributedTransaction() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.BoolPtrOutput { return v.DistributedTransaction }).(pulumi.BoolPtrOutput)
}

// The id of the endpoint.
func (o EndpointOutput) EndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointId }).(pulumi.StringOutput)
}

// Connect the endpoint name. The setting rules are as follows:
// It cannot start with a number or a hyphen (-).
// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
// The length is 1 to 64 characters.
func (o EndpointOutput) EndpointName() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointName }).(pulumi.StringOutput)
}

// Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
func (o EndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.EndpointType }).(pulumi.StringOutput)
}

// The id of the instance.
func (o EndpointOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The master node accepts read requests. Value range:
// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
// Description
// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
func (o EndpointOutput) MasterAcceptReadRequests() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.BoolPtrOutput { return v.MasterAcceptReadRequests }).(pulumi.BoolPtrOutput)
}

// Connect the node IDs associated with the endpoint.The filling rules are as follows:
// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
func (o EndpointOutput) NodeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringArrayOutput { return v.NodeIds }).(pulumi.StringArrayOutput)
}

// Endpoint read-write mode. Values:
// ReadWrite: Read and write endpoint.
// ReadOnly: Read-only endpoint (default).
func (o EndpointOutput) ReadWriteMode() pulumi.StringOutput {
	return o.ApplyT(func(v *Endpoint) pulumi.StringOutput { return v.ReadWriteMode }).(pulumi.StringOutput)
}

type EndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Endpoint)(nil)).Elem()
}

func (o EndpointArrayOutput) ToEndpointArrayOutput() EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) ToEndpointArrayOutputWithContext(ctx context.Context) EndpointArrayOutput {
	return o
}

func (o EndpointArrayOutput) Index(i pulumi.IntInput) EndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].([]*Endpoint)[vs[1].(int)]
	}).(EndpointOutput)
}

type EndpointMapOutput struct{ *pulumi.OutputState }

func (EndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Endpoint)(nil)).Elem()
}

func (o EndpointMapOutput) ToEndpointMapOutput() EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) ToEndpointMapOutputWithContext(ctx context.Context) EndpointMapOutput {
	return o
}

func (o EndpointMapOutput) MapIndex(k pulumi.StringInput) EndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Endpoint {
		return vs[0].(map[string]*Endpoint)[vs[1].(string)]
	}).(EndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointInput)(nil)).Elem(), &Endpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointArrayInput)(nil)).Elem(), EndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointMapInput)(nil)).Elem(), EndpointMap{})
	pulumi.RegisterOutputType(EndpointOutput{})
	pulumi.RegisterOutputType(EndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointMapOutput{})
}
