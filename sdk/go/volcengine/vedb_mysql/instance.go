// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vedb_mysql

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vedb_mysql"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[2].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vedb_mysql.NewInstance(ctx, "fooInstance", &vedb_mysql.InstanceArgs{
//				ChargeType:        pulumi.String("PostPaid"),
//				StorageChargeType: pulumi.String("PostPaid"),
//				DbEngineVersion:   pulumi.String("MySQL_8_0"),
//				DbMinorVersion:    pulumi.String("3.0"),
//				NodeNumber:        pulumi.Int(2),
//				NodeSpec:          pulumi.String("vedb.mysql.x4.large"),
//				SubnetId:          fooSubnet.ID(),
//				InstanceName:      pulumi.String("tf-test"),
//				ProjectName:       pulumi.String("default"),
//				Tags: vedb_mysql.InstanceTagArray{
//					&vedb_mysql.InstanceTagArgs{
//						Key:   pulumi.String("tftest"),
//						Value: pulumi.String("tftest"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VedbMysqlInstance can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vedb_mysql/instance:Instance default resource_id
// ```
type Instance struct {
	pulumi.CustomResourceState

	// Whether to automatically renew under the prepaid scenario. Values:
	// true: Automatically renew.
	// false: Do not automatically renew.
	// Description:
	// When the value of ChargeType (billing type) is PrePaid (monthly/yearly package), this parameter is required.
	AutoRenew pulumi.BoolOutput `pulumi:"autoRenew"`
	// Calculate the billing type. When calculating the billing type during instance creation, the possible values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	ChargeType pulumi.StringOutput `pulumi:"chargeType"`
	// Database engine version, with a fixed value of MySQL_8_0.
	DbEngineVersion pulumi.StringOutput `pulumi:"dbEngineVersion"`
	// veDB MySQL minor version. For detailed instructions on version numbers, please refer to Version Number Management.
	// 3.0 (default): veDB MySQL stable version, 100% compatible with MySQL 8.0.
	// 3.1: Natively supports HTAP application scenarios and accelerates complex queries.
	// 3.2: Natively supports HTAP application scenarios and accelerates complex queries. In addition, it has built-in cold data archiving capabilities. It can archive data with low-frequency access to object storage TOS to reduce storage costs.
	DbMinorVersion pulumi.StringPtrOutput `pulumi:"dbMinorVersion"`
	// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DbTimeZone pulumi.StringOutput `pulumi:"dbTimeZone"`
	// Instance name. Naming rules:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length must be within 1 to 128 characters.
	// Description
	// If the instance name is not filled in, the instance ID will be used as the instance name.
	// When creating instances in batches, if an instance name is passed in, a serial number will be automatically added after the instance name.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Whether table names are case-sensitive. The default value is 1. Value range:
	// 0: Table names are case-sensitive. The backend stores them according to the actual table name.
	// 1: (default) Table names are not case-sensitive. The backend stores them by converting table names to lowercase letters.
	// Description:
	// This rule cannot be modified after creating an instance. Please set it reasonably according to business requirements.
	LowerCaseTableNames pulumi.StringOutput `pulumi:"lowerCaseTableNames"`
	// Number of instance nodes. The value range is from 2 to 16.
	NodeNumber pulumi.IntOutput `pulumi:"nodeNumber"`
	// Node specification code of an instance.
	NodeSpec pulumi.StringOutput `pulumi:"nodeSpec"`
	// Purchase duration in prepaid scenarios.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly/yearly package), this parameter is required.
	Period pulumi.IntOutput `pulumi:"period"`
	// Purchase cycle in prepaid scenarios.
	// Month: Monthly package.
	// Year: Annual package.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly or annual package), this parameter is required.
	PeriodUnit pulumi.StringOutput `pulumi:"periodUnit"`
	// Specify the private network port number for the connection terminal created by default for the instance. The default value is 3306, and the value range is 1000 to 65534.
	// Note:
	// This configuration item is only effective for the primary node terminal, default terminal, and HTAP cluster terminal. That is, after the instance is created successfully, for the newly created custom terminal, the port number is still 3306 by default.
	// After the instance is created successfully, you can also modify the port number at any time. Currently, only modification through the console is supported.
	Port pulumi.IntOutput `pulumi:"port"`
	// Storage size in prepaid scenarios.
	// Description: When the value of StorageChargeType (storage billing type) is PrePaid (monthly/yearly prepaid), this parameter is required.
	PrePaidStorageInGb pulumi.IntOutput `pulumi:"prePaidStorageInGb"`
	// Project name of the instance. When this parameter is left blank, the newly created instance is added to the default project by default.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Storage billing type. When this parameter is not passed, the storage billing type defaults to be the same as the computing billing type. The values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	// Note
	// When the computing billing type is PostPaid, the storage billing type can only be PostPaid.
	// When the computing billing type is PrePaid, the storage billing type can be PrePaid or PostPaid.
	StorageChargeType pulumi.StringOutput `pulumi:"storageChargeType"`
	// Subnet ID of the veDB Mysql instance.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Tags.
	Tags InstanceTagArrayOutput `pulumi:"tags"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChargeType == nil {
		return nil, errors.New("invalid value for required argument 'ChargeType'")
	}
	if args.DbEngineVersion == nil {
		return nil, errors.New("invalid value for required argument 'DbEngineVersion'")
	}
	if args.NodeNumber == nil {
		return nil, errors.New("invalid value for required argument 'NodeNumber'")
	}
	if args.NodeSpec == nil {
		return nil, errors.New("invalid value for required argument 'NodeSpec'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("volcengine:vedb_mysql/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("volcengine:vedb_mysql/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// Whether to automatically renew under the prepaid scenario. Values:
	// true: Automatically renew.
	// false: Do not automatically renew.
	// Description:
	// When the value of ChargeType (billing type) is PrePaid (monthly/yearly package), this parameter is required.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Calculate the billing type. When calculating the billing type during instance creation, the possible values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	ChargeType *string `pulumi:"chargeType"`
	// Database engine version, with a fixed value of MySQL_8_0.
	DbEngineVersion *string `pulumi:"dbEngineVersion"`
	// veDB MySQL minor version. For detailed instructions on version numbers, please refer to Version Number Management.
	// 3.0 (default): veDB MySQL stable version, 100% compatible with MySQL 8.0.
	// 3.1: Natively supports HTAP application scenarios and accelerates complex queries.
	// 3.2: Natively supports HTAP application scenarios and accelerates complex queries. In addition, it has built-in cold data archiving capabilities. It can archive data with low-frequency access to object storage TOS to reduce storage costs.
	DbMinorVersion *string `pulumi:"dbMinorVersion"`
	// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DbTimeZone *string `pulumi:"dbTimeZone"`
	// Instance name. Naming rules:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length must be within 1 to 128 characters.
	// Description
	// If the instance name is not filled in, the instance ID will be used as the instance name.
	// When creating instances in batches, if an instance name is passed in, a serial number will be automatically added after the instance name.
	InstanceName *string `pulumi:"instanceName"`
	// Whether table names are case-sensitive. The default value is 1. Value range:
	// 0: Table names are case-sensitive. The backend stores them according to the actual table name.
	// 1: (default) Table names are not case-sensitive. The backend stores them by converting table names to lowercase letters.
	// Description:
	// This rule cannot be modified after creating an instance. Please set it reasonably according to business requirements.
	LowerCaseTableNames *string `pulumi:"lowerCaseTableNames"`
	// Number of instance nodes. The value range is from 2 to 16.
	NodeNumber *int `pulumi:"nodeNumber"`
	// Node specification code of an instance.
	NodeSpec *string `pulumi:"nodeSpec"`
	// Purchase duration in prepaid scenarios.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly/yearly package), this parameter is required.
	Period *int `pulumi:"period"`
	// Purchase cycle in prepaid scenarios.
	// Month: Monthly package.
	// Year: Annual package.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly or annual package), this parameter is required.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specify the private network port number for the connection terminal created by default for the instance. The default value is 3306, and the value range is 1000 to 65534.
	// Note:
	// This configuration item is only effective for the primary node terminal, default terminal, and HTAP cluster terminal. That is, after the instance is created successfully, for the newly created custom terminal, the port number is still 3306 by default.
	// After the instance is created successfully, you can also modify the port number at any time. Currently, only modification through the console is supported.
	Port *int `pulumi:"port"`
	// Storage size in prepaid scenarios.
	// Description: When the value of StorageChargeType (storage billing type) is PrePaid (monthly/yearly prepaid), this parameter is required.
	PrePaidStorageInGb *int `pulumi:"prePaidStorageInGb"`
	// Project name of the instance. When this parameter is left blank, the newly created instance is added to the default project by default.
	ProjectName *string `pulumi:"projectName"`
	// Storage billing type. When this parameter is not passed, the storage billing type defaults to be the same as the computing billing type. The values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	// Note
	// When the computing billing type is PostPaid, the storage billing type can only be PostPaid.
	// When the computing billing type is PrePaid, the storage billing type can be PrePaid or PostPaid.
	StorageChargeType *string `pulumi:"storageChargeType"`
	// Subnet ID of the veDB Mysql instance.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []InstanceTag `pulumi:"tags"`
}

type InstanceState struct {
	// Whether to automatically renew under the prepaid scenario. Values:
	// true: Automatically renew.
	// false: Do not automatically renew.
	// Description:
	// When the value of ChargeType (billing type) is PrePaid (monthly/yearly package), this parameter is required.
	AutoRenew pulumi.BoolPtrInput
	// Calculate the billing type. When calculating the billing type during instance creation, the possible values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	ChargeType pulumi.StringPtrInput
	// Database engine version, with a fixed value of MySQL_8_0.
	DbEngineVersion pulumi.StringPtrInput
	// veDB MySQL minor version. For detailed instructions on version numbers, please refer to Version Number Management.
	// 3.0 (default): veDB MySQL stable version, 100% compatible with MySQL 8.0.
	// 3.1: Natively supports HTAP application scenarios and accelerates complex queries.
	// 3.2: Natively supports HTAP application scenarios and accelerates complex queries. In addition, it has built-in cold data archiving capabilities. It can archive data with low-frequency access to object storage TOS to reduce storage costs.
	DbMinorVersion pulumi.StringPtrInput
	// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DbTimeZone pulumi.StringPtrInput
	// Instance name. Naming rules:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length must be within 1 to 128 characters.
	// Description
	// If the instance name is not filled in, the instance ID will be used as the instance name.
	// When creating instances in batches, if an instance name is passed in, a serial number will be automatically added after the instance name.
	InstanceName pulumi.StringPtrInput
	// Whether table names are case-sensitive. The default value is 1. Value range:
	// 0: Table names are case-sensitive. The backend stores them according to the actual table name.
	// 1: (default) Table names are not case-sensitive. The backend stores them by converting table names to lowercase letters.
	// Description:
	// This rule cannot be modified after creating an instance. Please set it reasonably according to business requirements.
	LowerCaseTableNames pulumi.StringPtrInput
	// Number of instance nodes. The value range is from 2 to 16.
	NodeNumber pulumi.IntPtrInput
	// Node specification code of an instance.
	NodeSpec pulumi.StringPtrInput
	// Purchase duration in prepaid scenarios.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly/yearly package), this parameter is required.
	Period pulumi.IntPtrInput
	// Purchase cycle in prepaid scenarios.
	// Month: Monthly package.
	// Year: Annual package.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly or annual package), this parameter is required.
	PeriodUnit pulumi.StringPtrInput
	// Specify the private network port number for the connection terminal created by default for the instance. The default value is 3306, and the value range is 1000 to 65534.
	// Note:
	// This configuration item is only effective for the primary node terminal, default terminal, and HTAP cluster terminal. That is, after the instance is created successfully, for the newly created custom terminal, the port number is still 3306 by default.
	// After the instance is created successfully, you can also modify the port number at any time. Currently, only modification through the console is supported.
	Port pulumi.IntPtrInput
	// Storage size in prepaid scenarios.
	// Description: When the value of StorageChargeType (storage billing type) is PrePaid (monthly/yearly prepaid), this parameter is required.
	PrePaidStorageInGb pulumi.IntPtrInput
	// Project name of the instance. When this parameter is left blank, the newly created instance is added to the default project by default.
	ProjectName pulumi.StringPtrInput
	// Storage billing type. When this parameter is not passed, the storage billing type defaults to be the same as the computing billing type. The values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	// Note
	// When the computing billing type is PostPaid, the storage billing type can only be PostPaid.
	// When the computing billing type is PrePaid, the storage billing type can be PrePaid or PostPaid.
	StorageChargeType pulumi.StringPtrInput
	// Subnet ID of the veDB Mysql instance.
	SubnetId pulumi.StringPtrInput
	// Tags.
	Tags InstanceTagArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// Whether to automatically renew under the prepaid scenario. Values:
	// true: Automatically renew.
	// false: Do not automatically renew.
	// Description:
	// When the value of ChargeType (billing type) is PrePaid (monthly/yearly package), this parameter is required.
	AutoRenew *bool `pulumi:"autoRenew"`
	// Calculate the billing type. When calculating the billing type during instance creation, the possible values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	ChargeType string `pulumi:"chargeType"`
	// Database engine version, with a fixed value of MySQL_8_0.
	DbEngineVersion string `pulumi:"dbEngineVersion"`
	// veDB MySQL minor version. For detailed instructions on version numbers, please refer to Version Number Management.
	// 3.0 (default): veDB MySQL stable version, 100% compatible with MySQL 8.0.
	// 3.1: Natively supports HTAP application scenarios and accelerates complex queries.
	// 3.2: Natively supports HTAP application scenarios and accelerates complex queries. In addition, it has built-in cold data archiving capabilities. It can archive data with low-frequency access to object storage TOS to reduce storage costs.
	DbMinorVersion *string `pulumi:"dbMinorVersion"`
	// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DbTimeZone *string `pulumi:"dbTimeZone"`
	// Instance name. Naming rules:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length must be within 1 to 128 characters.
	// Description
	// If the instance name is not filled in, the instance ID will be used as the instance name.
	// When creating instances in batches, if an instance name is passed in, a serial number will be automatically added after the instance name.
	InstanceName *string `pulumi:"instanceName"`
	// Whether table names are case-sensitive. The default value is 1. Value range:
	// 0: Table names are case-sensitive. The backend stores them according to the actual table name.
	// 1: (default) Table names are not case-sensitive. The backend stores them by converting table names to lowercase letters.
	// Description:
	// This rule cannot be modified after creating an instance. Please set it reasonably according to business requirements.
	LowerCaseTableNames *string `pulumi:"lowerCaseTableNames"`
	// Number of instance nodes. The value range is from 2 to 16.
	NodeNumber int `pulumi:"nodeNumber"`
	// Node specification code of an instance.
	NodeSpec string `pulumi:"nodeSpec"`
	// Purchase duration in prepaid scenarios.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly/yearly package), this parameter is required.
	Period *int `pulumi:"period"`
	// Purchase cycle in prepaid scenarios.
	// Month: Monthly package.
	// Year: Annual package.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly or annual package), this parameter is required.
	PeriodUnit *string `pulumi:"periodUnit"`
	// Specify the private network port number for the connection terminal created by default for the instance. The default value is 3306, and the value range is 1000 to 65534.
	// Note:
	// This configuration item is only effective for the primary node terminal, default terminal, and HTAP cluster terminal. That is, after the instance is created successfully, for the newly created custom terminal, the port number is still 3306 by default.
	// After the instance is created successfully, you can also modify the port number at any time. Currently, only modification through the console is supported.
	Port *int `pulumi:"port"`
	// Storage size in prepaid scenarios.
	// Description: When the value of StorageChargeType (storage billing type) is PrePaid (monthly/yearly prepaid), this parameter is required.
	PrePaidStorageInGb *int `pulumi:"prePaidStorageInGb"`
	// Project name of the instance. When this parameter is left blank, the newly created instance is added to the default project by default.
	ProjectName *string `pulumi:"projectName"`
	// Storage billing type. When this parameter is not passed, the storage billing type defaults to be the same as the computing billing type. The values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	// Note
	// When the computing billing type is PostPaid, the storage billing type can only be PostPaid.
	// When the computing billing type is PrePaid, the storage billing type can be PrePaid or PostPaid.
	StorageChargeType *string `pulumi:"storageChargeType"`
	// Subnet ID of the veDB Mysql instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstanceTag `pulumi:"tags"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// Whether to automatically renew under the prepaid scenario. Values:
	// true: Automatically renew.
	// false: Do not automatically renew.
	// Description:
	// When the value of ChargeType (billing type) is PrePaid (monthly/yearly package), this parameter is required.
	AutoRenew pulumi.BoolPtrInput
	// Calculate the billing type. When calculating the billing type during instance creation, the possible values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	ChargeType pulumi.StringInput
	// Database engine version, with a fixed value of MySQL_8_0.
	DbEngineVersion pulumi.StringInput
	// veDB MySQL minor version. For detailed instructions on version numbers, please refer to Version Number Management.
	// 3.0 (default): veDB MySQL stable version, 100% compatible with MySQL 8.0.
	// 3.1: Natively supports HTAP application scenarios and accelerates complex queries.
	// 3.2: Natively supports HTAP application scenarios and accelerates complex queries. In addition, it has built-in cold data archiving capabilities. It can archive data with low-frequency access to object storage TOS to reduce storage costs.
	DbMinorVersion pulumi.StringPtrInput
	// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DbTimeZone pulumi.StringPtrInput
	// Instance name. Naming rules:
	// It cannot start with a number or a hyphen (-).
	// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
	// The length must be within 1 to 128 characters.
	// Description
	// If the instance name is not filled in, the instance ID will be used as the instance name.
	// When creating instances in batches, if an instance name is passed in, a serial number will be automatically added after the instance name.
	InstanceName pulumi.StringPtrInput
	// Whether table names are case-sensitive. The default value is 1. Value range:
	// 0: Table names are case-sensitive. The backend stores them according to the actual table name.
	// 1: (default) Table names are not case-sensitive. The backend stores them by converting table names to lowercase letters.
	// Description:
	// This rule cannot be modified after creating an instance. Please set it reasonably according to business requirements.
	LowerCaseTableNames pulumi.StringPtrInput
	// Number of instance nodes. The value range is from 2 to 16.
	NodeNumber pulumi.IntInput
	// Node specification code of an instance.
	NodeSpec pulumi.StringInput
	// Purchase duration in prepaid scenarios.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly/yearly package), this parameter is required.
	Period pulumi.IntPtrInput
	// Purchase cycle in prepaid scenarios.
	// Month: Monthly package.
	// Year: Annual package.
	// Description:
	// When the value of ChargeType (computing billing type) is PrePaid (monthly or annual package), this parameter is required.
	PeriodUnit pulumi.StringPtrInput
	// Specify the private network port number for the connection terminal created by default for the instance. The default value is 3306, and the value range is 1000 to 65534.
	// Note:
	// This configuration item is only effective for the primary node terminal, default terminal, and HTAP cluster terminal. That is, after the instance is created successfully, for the newly created custom terminal, the port number is still 3306 by default.
	// After the instance is created successfully, you can also modify the port number at any time. Currently, only modification through the console is supported.
	Port pulumi.IntPtrInput
	// Storage size in prepaid scenarios.
	// Description: When the value of StorageChargeType (storage billing type) is PrePaid (monthly/yearly prepaid), this parameter is required.
	PrePaidStorageInGb pulumi.IntPtrInput
	// Project name of the instance. When this parameter is left blank, the newly created instance is added to the default project by default.
	ProjectName pulumi.StringPtrInput
	// Storage billing type. When this parameter is not passed, the storage billing type defaults to be the same as the computing billing type. The values are as follows:
	// PostPaid: Pay-as-you-go (postpaid).
	// PrePaid: Monthly or yearly subscription (prepaid).
	// Note
	// When the computing billing type is PostPaid, the storage billing type can only be PostPaid.
	// When the computing billing type is PrePaid, the storage billing type can be PrePaid or PostPaid.
	StorageChargeType pulumi.StringPtrInput
	// Subnet ID of the veDB Mysql instance.
	SubnetId pulumi.StringInput
	// Tags.
	Tags InstanceTagArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// Whether to automatically renew under the prepaid scenario. Values:
// true: Automatically renew.
// false: Do not automatically renew.
// Description:
// When the value of ChargeType (billing type) is PrePaid (monthly/yearly package), this parameter is required.
func (o InstanceOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.AutoRenew }).(pulumi.BoolOutput)
}

// Calculate the billing type. When calculating the billing type during instance creation, the possible values are as follows:
// PostPaid: Pay-as-you-go (postpaid).
// PrePaid: Monthly or yearly subscription (prepaid).
func (o InstanceOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ChargeType }).(pulumi.StringOutput)
}

// Database engine version, with a fixed value of MySQL_8_0.
func (o InstanceOutput) DbEngineVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DbEngineVersion }).(pulumi.StringOutput)
}

// veDB MySQL minor version. For detailed instructions on version numbers, please refer to Version Number Management.
// 3.0 (default): veDB MySQL stable version, 100% compatible with MySQL 8.0.
// 3.1: Natively supports HTAP application scenarios and accelerates complex queries.
// 3.2: Natively supports HTAP application scenarios and accelerates complex queries. In addition, it has built-in cold data archiving capabilities. It can archive data with low-frequency access to object storage TOS to reduce storage costs.
func (o InstanceOutput) DbMinorVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.DbMinorVersion }).(pulumi.StringPtrOutput)
}

// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o InstanceOutput) DbTimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.DbTimeZone }).(pulumi.StringOutput)
}

// Instance name. Naming rules:
// It cannot start with a number or a hyphen (-).
// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
// The length must be within 1 to 128 characters.
// Description
// If the instance name is not filled in, the instance ID will be used as the instance name.
// When creating instances in batches, if an instance name is passed in, a serial number will be automatically added after the instance name.
func (o InstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Whether table names are case-sensitive. The default value is 1. Value range:
// 0: Table names are case-sensitive. The backend stores them according to the actual table name.
// 1: (default) Table names are not case-sensitive. The backend stores them by converting table names to lowercase letters.
// Description:
// This rule cannot be modified after creating an instance. Please set it reasonably according to business requirements.
func (o InstanceOutput) LowerCaseTableNames() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.LowerCaseTableNames }).(pulumi.StringOutput)
}

// Number of instance nodes. The value range is from 2 to 16.
func (o InstanceOutput) NodeNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.NodeNumber }).(pulumi.IntOutput)
}

// Node specification code of an instance.
func (o InstanceOutput) NodeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.NodeSpec }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios.
// Description:
// When the value of ChargeType (computing billing type) is PrePaid (monthly/yearly package), this parameter is required.
func (o InstanceOutput) Period() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Period }).(pulumi.IntOutput)
}

// Purchase cycle in prepaid scenarios.
// Month: Monthly package.
// Year: Annual package.
// Description:
// When the value of ChargeType (computing billing type) is PrePaid (monthly or annual package), this parameter is required.
func (o InstanceOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.PeriodUnit }).(pulumi.StringOutput)
}

// Specify the private network port number for the connection terminal created by default for the instance. The default value is 3306, and the value range is 1000 to 65534.
// Note:
// This configuration item is only effective for the primary node terminal, default terminal, and HTAP cluster terminal. That is, after the instance is created successfully, for the newly created custom terminal, the port number is still 3306 by default.
// After the instance is created successfully, you can also modify the port number at any time. Currently, only modification through the console is supported.
func (o InstanceOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// Storage size in prepaid scenarios.
// Description: When the value of StorageChargeType (storage billing type) is PrePaid (monthly/yearly prepaid), this parameter is required.
func (o InstanceOutput) PrePaidStorageInGb() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.PrePaidStorageInGb }).(pulumi.IntOutput)
}

// Project name of the instance. When this parameter is left blank, the newly created instance is added to the default project by default.
func (o InstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Storage billing type. When this parameter is not passed, the storage billing type defaults to be the same as the computing billing type. The values are as follows:
// PostPaid: Pay-as-you-go (postpaid).
// PrePaid: Monthly or yearly subscription (prepaid).
// Note
// When the computing billing type is PostPaid, the storage billing type can only be PostPaid.
// When the computing billing type is PrePaid, the storage billing type can be PrePaid or PostPaid.
func (o InstanceOutput) StorageChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.StorageChargeType }).(pulumi.StringOutput)
}

// Subnet ID of the veDB Mysql instance.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstanceOutput) Tags() InstanceTagArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceTagArrayOutput { return v.Tags }).(InstanceTagArrayOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
