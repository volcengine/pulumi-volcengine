// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package autoscaling

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage scaling policy
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/autoscaling"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := autoscaling.NewScalingPolicy(ctx, "foo", &autoscaling.ScalingPolicyArgs{
//				Active:                                 pulumi.Bool(false),
//				AdjustmentType:                         pulumi.String("QuantityChangeInCapacity"),
//				AdjustmentValue:                        pulumi.Int(100),
//				AlarmPolicyConditionComparisonOperator: pulumi.String("="),
//				AlarmPolicyConditionMetricName:         pulumi.String("Instance_CpuBusy_Avg"),
//				AlarmPolicyConditionMetricUnit:         pulumi.String("Percent"),
//				AlarmPolicyConditionThreshold:          pulumi.String("100"),
//				AlarmPolicyEvaluationCount:             pulumi.Int(1),
//				AlarmPolicyRuleType:                    pulumi.String("Static"),
//				Cooldown:                               pulumi.Int(10),
//				ScalingGroupId:                         pulumi.String("scg-ybqm0b6kcigh9zu9ce6t"),
//				ScalingPolicyName:                      pulumi.String("tf-test"),
//				ScalingPolicyType:                      pulumi.String("Alarm"),
//				ScheduledPolicyLaunchTime:              pulumi.String("2022-07-09T09:59Z"),
//				ScheduledPolicyRecurrenceEndTime:       pulumi.String("2022-07-24T09:25Z"),
//				ScheduledPolicyRecurrenceType:          pulumi.String("Daily"),
//				ScheduledPolicyRecurrenceValue:         pulumi.String("10"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ScalingPolicy can be imported using the ScalingGroupId:ScalingPolicyId, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:autoscaling/scalingPolicy:ScalingPolicy default scg-yblfbfhy7agh9zn72iaz:sp-yblf9l4fvcl8j1prohsp
//
// ```
type ScalingPolicy struct {
	pulumi.CustomResourceState

	// The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.
	Active pulumi.BoolOutput `pulumi:"active"`
	// The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.
	AdjustmentType pulumi.StringOutput `pulumi:"adjustmentType"`
	// The adjustment value of the scaling policy. When the value of the `AdjustmentType` parameter is `QuantityChangeInCapacity`: -100 ~ 100, 0 is not allowed, unit: piece. When the value of the `AdjustmentType` parameter is `PercentChangeInCapacity`: -100 ~ 10000, 0 is not allowed, unit: %. When the value of the `AdjustmentType` parameter is `TotalCapacity`: the default is 0 to 100, unit: piece.
	AdjustmentValue pulumi.IntOutput `pulumi:"adjustmentValue"`
	// The comparison operator of the alarm policy condition of the scaling policy. Valid values: `>`, `<`, `=`. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionComparisonOperator pulumi.StringPtrOutput `pulumi:"alarmPolicyConditionComparisonOperator"`
	// The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.
	AlarmPolicyConditionMetricName pulumi.StringPtrOutput `pulumi:"alarmPolicyConditionMetricName"`
	// The comparison operator of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionMetricUnit pulumi.StringPtrOutput `pulumi:"alarmPolicyConditionMetricUnit"`
	// The threshold of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionThreshold pulumi.StringPtrOutput `pulumi:"alarmPolicyConditionThreshold"`
	// The evaluation count of the alarm policy of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyEvaluationCount pulumi.IntPtrOutput `pulumi:"alarmPolicyEvaluationCount"`
	// The rule type of the alarm policy of the scaling policy. Valid value: Static. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyRuleType pulumi.StringPtrOutput `pulumi:"alarmPolicyRuleType"`
	// The cooldown of the scaling policy. Default value is the cooldown time of the scaling group. Value: 0~86400, unit: second, if left blank, the cooling time of the scaling group will be used by default.
	Cooldown pulumi.IntOutput `pulumi:"cooldown"`
	// The id of the scaling group to which the scaling policy belongs.
	ScalingGroupId pulumi.StringOutput `pulumi:"scalingGroupId"`
	// The name of the scaling policy.
	ScalingPolicyName pulumi.StringOutput `pulumi:"scalingPolicyName"`
	// The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.
	ScalingPolicyType pulumi.StringOutput `pulumi:"scalingPolicyType"`
	// The launch time of the scheduled policy of the scaling policy.
	// When the value of `ScalingPolicyType` is `Scheduled`, it means that the trigger time of the scheduled task must be greater than the current time.
	// When the value of `ScalingPolicyType` is `Recurrence`: If `ScheduledPolicy.RecurrenceType` is not specified, it means to execute only once according to the date and time specified here.
	// If `ScheduledPolicy.RecurrenceType` is specified, it indicates the start time of the periodic task. Only the time within 90 days from the date of creation/modification is supported.
	// When the value of `ScalingPolicyType` is `Alarm`, this parameter is invalid.
	ScheduledPolicyLaunchTime pulumi.StringOutput `pulumi:"scheduledPolicyLaunchTime"`
	// The recurrence end time of the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. If not configured, it will default to the day/week/month after this moment according to the recurrence period (ScheduledPolicy.RecurrenceType).
	ScheduledPolicyRecurrenceEndTime pulumi.StringPtrOutput `pulumi:"scheduledPolicyRecurrenceEndTime"`
	// The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.
	ScheduledPolicyRecurrenceType pulumi.StringPtrOutput `pulumi:"scheduledPolicyRecurrenceType"`
	// The recurrence value the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. When the value of the ScheduledPolicy.RecurrenceType parameter is Daily, only one value can be filled in, ranging from 1 to 31.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Weekly, you can enter multiple values separated by commas (,). The values from Monday to Sunday are: 1,2,3,4,5,6,7.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Monthly, the format is A-B. The value ranges of A and B are both 1~31, and B must be greater than or equal to A.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Cron, it means UTC+8 time, supports 5-field expressions of minutes, hours, days, months, and weeks, and supports wildcard English commas (,), English question marks (?), and conjunctions ( -), asterisk (*), pound sign (#), slash (/), L, and W.
	ScheduledPolicyRecurrenceValue pulumi.StringPtrOutput `pulumi:"scheduledPolicyRecurrenceValue"`
	// The status of the scaling policy. Valid values: Active, InActive.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewScalingPolicy registers a new resource with the given unique name, arguments, and options.
func NewScalingPolicy(ctx *pulumi.Context,
	name string, args *ScalingPolicyArgs, opts ...pulumi.ResourceOption) (*ScalingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AdjustmentType == nil {
		return nil, errors.New("invalid value for required argument 'AdjustmentType'")
	}
	if args.AdjustmentValue == nil {
		return nil, errors.New("invalid value for required argument 'AdjustmentValue'")
	}
	if args.ScalingGroupId == nil {
		return nil, errors.New("invalid value for required argument 'ScalingGroupId'")
	}
	if args.ScalingPolicyName == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyName'")
	}
	if args.ScalingPolicyType == nil {
		return nil, errors.New("invalid value for required argument 'ScalingPolicyType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ScalingPolicy
	err := ctx.RegisterResource("volcengine:autoscaling/scalingPolicy:ScalingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScalingPolicy gets an existing ScalingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScalingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScalingPolicyState, opts ...pulumi.ResourceOption) (*ScalingPolicy, error) {
	var resource ScalingPolicy
	err := ctx.ReadResource("volcengine:autoscaling/scalingPolicy:ScalingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScalingPolicy resources.
type scalingPolicyState struct {
	// The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.
	Active *bool `pulumi:"active"`
	// The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.
	AdjustmentType *string `pulumi:"adjustmentType"`
	// The adjustment value of the scaling policy. When the value of the `AdjustmentType` parameter is `QuantityChangeInCapacity`: -100 ~ 100, 0 is not allowed, unit: piece. When the value of the `AdjustmentType` parameter is `PercentChangeInCapacity`: -100 ~ 10000, 0 is not allowed, unit: %. When the value of the `AdjustmentType` parameter is `TotalCapacity`: the default is 0 to 100, unit: piece.
	AdjustmentValue *int `pulumi:"adjustmentValue"`
	// The comparison operator of the alarm policy condition of the scaling policy. Valid values: `>`, `<`, `=`. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionComparisonOperator *string `pulumi:"alarmPolicyConditionComparisonOperator"`
	// The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.
	AlarmPolicyConditionMetricName *string `pulumi:"alarmPolicyConditionMetricName"`
	// The comparison operator of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionMetricUnit *string `pulumi:"alarmPolicyConditionMetricUnit"`
	// The threshold of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionThreshold *string `pulumi:"alarmPolicyConditionThreshold"`
	// The evaluation count of the alarm policy of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyEvaluationCount *int `pulumi:"alarmPolicyEvaluationCount"`
	// The rule type of the alarm policy of the scaling policy. Valid value: Static. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyRuleType *string `pulumi:"alarmPolicyRuleType"`
	// The cooldown of the scaling policy. Default value is the cooldown time of the scaling group. Value: 0~86400, unit: second, if left blank, the cooling time of the scaling group will be used by default.
	Cooldown *int `pulumi:"cooldown"`
	// The id of the scaling group to which the scaling policy belongs.
	ScalingGroupId *string `pulumi:"scalingGroupId"`
	// The name of the scaling policy.
	ScalingPolicyName *string `pulumi:"scalingPolicyName"`
	// The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.
	ScalingPolicyType *string `pulumi:"scalingPolicyType"`
	// The launch time of the scheduled policy of the scaling policy.
	// When the value of `ScalingPolicyType` is `Scheduled`, it means that the trigger time of the scheduled task must be greater than the current time.
	// When the value of `ScalingPolicyType` is `Recurrence`: If `ScheduledPolicy.RecurrenceType` is not specified, it means to execute only once according to the date and time specified here.
	// If `ScheduledPolicy.RecurrenceType` is specified, it indicates the start time of the periodic task. Only the time within 90 days from the date of creation/modification is supported.
	// When the value of `ScalingPolicyType` is `Alarm`, this parameter is invalid.
	ScheduledPolicyLaunchTime *string `pulumi:"scheduledPolicyLaunchTime"`
	// The recurrence end time of the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. If not configured, it will default to the day/week/month after this moment according to the recurrence period (ScheduledPolicy.RecurrenceType).
	ScheduledPolicyRecurrenceEndTime *string `pulumi:"scheduledPolicyRecurrenceEndTime"`
	// The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.
	ScheduledPolicyRecurrenceType *string `pulumi:"scheduledPolicyRecurrenceType"`
	// The recurrence value the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. When the value of the ScheduledPolicy.RecurrenceType parameter is Daily, only one value can be filled in, ranging from 1 to 31.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Weekly, you can enter multiple values separated by commas (,). The values from Monday to Sunday are: 1,2,3,4,5,6,7.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Monthly, the format is A-B. The value ranges of A and B are both 1~31, and B must be greater than or equal to A.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Cron, it means UTC+8 time, supports 5-field expressions of minutes, hours, days, months, and weeks, and supports wildcard English commas (,), English question marks (?), and conjunctions ( -), asterisk (*), pound sign (#), slash (/), L, and W.
	ScheduledPolicyRecurrenceValue *string `pulumi:"scheduledPolicyRecurrenceValue"`
	// The status of the scaling policy. Valid values: Active, InActive.
	Status *string `pulumi:"status"`
}

type ScalingPolicyState struct {
	// The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.
	Active pulumi.BoolPtrInput
	// The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.
	AdjustmentType pulumi.StringPtrInput
	// The adjustment value of the scaling policy. When the value of the `AdjustmentType` parameter is `QuantityChangeInCapacity`: -100 ~ 100, 0 is not allowed, unit: piece. When the value of the `AdjustmentType` parameter is `PercentChangeInCapacity`: -100 ~ 10000, 0 is not allowed, unit: %. When the value of the `AdjustmentType` parameter is `TotalCapacity`: the default is 0 to 100, unit: piece.
	AdjustmentValue pulumi.IntPtrInput
	// The comparison operator of the alarm policy condition of the scaling policy. Valid values: `>`, `<`, `=`. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionComparisonOperator pulumi.StringPtrInput
	// The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.
	AlarmPolicyConditionMetricName pulumi.StringPtrInput
	// The comparison operator of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionMetricUnit pulumi.StringPtrInput
	// The threshold of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionThreshold pulumi.StringPtrInput
	// The evaluation count of the alarm policy of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyEvaluationCount pulumi.IntPtrInput
	// The rule type of the alarm policy of the scaling policy. Valid value: Static. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyRuleType pulumi.StringPtrInput
	// The cooldown of the scaling policy. Default value is the cooldown time of the scaling group. Value: 0~86400, unit: second, if left blank, the cooling time of the scaling group will be used by default.
	Cooldown pulumi.IntPtrInput
	// The id of the scaling group to which the scaling policy belongs.
	ScalingGroupId pulumi.StringPtrInput
	// The name of the scaling policy.
	ScalingPolicyName pulumi.StringPtrInput
	// The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.
	ScalingPolicyType pulumi.StringPtrInput
	// The launch time of the scheduled policy of the scaling policy.
	// When the value of `ScalingPolicyType` is `Scheduled`, it means that the trigger time of the scheduled task must be greater than the current time.
	// When the value of `ScalingPolicyType` is `Recurrence`: If `ScheduledPolicy.RecurrenceType` is not specified, it means to execute only once according to the date and time specified here.
	// If `ScheduledPolicy.RecurrenceType` is specified, it indicates the start time of the periodic task. Only the time within 90 days from the date of creation/modification is supported.
	// When the value of `ScalingPolicyType` is `Alarm`, this parameter is invalid.
	ScheduledPolicyLaunchTime pulumi.StringPtrInput
	// The recurrence end time of the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. If not configured, it will default to the day/week/month after this moment according to the recurrence period (ScheduledPolicy.RecurrenceType).
	ScheduledPolicyRecurrenceEndTime pulumi.StringPtrInput
	// The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.
	ScheduledPolicyRecurrenceType pulumi.StringPtrInput
	// The recurrence value the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. When the value of the ScheduledPolicy.RecurrenceType parameter is Daily, only one value can be filled in, ranging from 1 to 31.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Weekly, you can enter multiple values separated by commas (,). The values from Monday to Sunday are: 1,2,3,4,5,6,7.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Monthly, the format is A-B. The value ranges of A and B are both 1~31, and B must be greater than or equal to A.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Cron, it means UTC+8 time, supports 5-field expressions of minutes, hours, days, months, and weeks, and supports wildcard English commas (,), English question marks (?), and conjunctions ( -), asterisk (*), pound sign (#), slash (/), L, and W.
	ScheduledPolicyRecurrenceValue pulumi.StringPtrInput
	// The status of the scaling policy. Valid values: Active, InActive.
	Status pulumi.StringPtrInput
}

func (ScalingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*scalingPolicyState)(nil)).Elem()
}

type scalingPolicyArgs struct {
	// The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.
	Active *bool `pulumi:"active"`
	// The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.
	AdjustmentType string `pulumi:"adjustmentType"`
	// The adjustment value of the scaling policy. When the value of the `AdjustmentType` parameter is `QuantityChangeInCapacity`: -100 ~ 100, 0 is not allowed, unit: piece. When the value of the `AdjustmentType` parameter is `PercentChangeInCapacity`: -100 ~ 10000, 0 is not allowed, unit: %. When the value of the `AdjustmentType` parameter is `TotalCapacity`: the default is 0 to 100, unit: piece.
	AdjustmentValue int `pulumi:"adjustmentValue"`
	// The comparison operator of the alarm policy condition of the scaling policy. Valid values: `>`, `<`, `=`. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionComparisonOperator *string `pulumi:"alarmPolicyConditionComparisonOperator"`
	// The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.
	AlarmPolicyConditionMetricName *string `pulumi:"alarmPolicyConditionMetricName"`
	// The comparison operator of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionMetricUnit *string `pulumi:"alarmPolicyConditionMetricUnit"`
	// The threshold of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionThreshold *string `pulumi:"alarmPolicyConditionThreshold"`
	// The evaluation count of the alarm policy of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyEvaluationCount *int `pulumi:"alarmPolicyEvaluationCount"`
	// The rule type of the alarm policy of the scaling policy. Valid value: Static. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyRuleType *string `pulumi:"alarmPolicyRuleType"`
	// The cooldown of the scaling policy. Default value is the cooldown time of the scaling group. Value: 0~86400, unit: second, if left blank, the cooling time of the scaling group will be used by default.
	Cooldown *int `pulumi:"cooldown"`
	// The id of the scaling group to which the scaling policy belongs.
	ScalingGroupId string `pulumi:"scalingGroupId"`
	// The name of the scaling policy.
	ScalingPolicyName string `pulumi:"scalingPolicyName"`
	// The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.
	ScalingPolicyType string `pulumi:"scalingPolicyType"`
	// The launch time of the scheduled policy of the scaling policy.
	// When the value of `ScalingPolicyType` is `Scheduled`, it means that the trigger time of the scheduled task must be greater than the current time.
	// When the value of `ScalingPolicyType` is `Recurrence`: If `ScheduledPolicy.RecurrenceType` is not specified, it means to execute only once according to the date and time specified here.
	// If `ScheduledPolicy.RecurrenceType` is specified, it indicates the start time of the periodic task. Only the time within 90 days from the date of creation/modification is supported.
	// When the value of `ScalingPolicyType` is `Alarm`, this parameter is invalid.
	ScheduledPolicyLaunchTime *string `pulumi:"scheduledPolicyLaunchTime"`
	// The recurrence end time of the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. If not configured, it will default to the day/week/month after this moment according to the recurrence period (ScheduledPolicy.RecurrenceType).
	ScheduledPolicyRecurrenceEndTime *string `pulumi:"scheduledPolicyRecurrenceEndTime"`
	// The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.
	ScheduledPolicyRecurrenceType *string `pulumi:"scheduledPolicyRecurrenceType"`
	// The recurrence value the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. When the value of the ScheduledPolicy.RecurrenceType parameter is Daily, only one value can be filled in, ranging from 1 to 31.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Weekly, you can enter multiple values separated by commas (,). The values from Monday to Sunday are: 1,2,3,4,5,6,7.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Monthly, the format is A-B. The value ranges of A and B are both 1~31, and B must be greater than or equal to A.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Cron, it means UTC+8 time, supports 5-field expressions of minutes, hours, days, months, and weeks, and supports wildcard English commas (,), English question marks (?), and conjunctions ( -), asterisk (*), pound sign (#), slash (/), L, and W.
	ScheduledPolicyRecurrenceValue *string `pulumi:"scheduledPolicyRecurrenceValue"`
}

// The set of arguments for constructing a ScalingPolicy resource.
type ScalingPolicyArgs struct {
	// The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.
	Active pulumi.BoolPtrInput
	// The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.
	AdjustmentType pulumi.StringInput
	// The adjustment value of the scaling policy. When the value of the `AdjustmentType` parameter is `QuantityChangeInCapacity`: -100 ~ 100, 0 is not allowed, unit: piece. When the value of the `AdjustmentType` parameter is `PercentChangeInCapacity`: -100 ~ 10000, 0 is not allowed, unit: %. When the value of the `AdjustmentType` parameter is `TotalCapacity`: the default is 0 to 100, unit: piece.
	AdjustmentValue pulumi.IntInput
	// The comparison operator of the alarm policy condition of the scaling policy. Valid values: `>`, `<`, `=`. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionComparisonOperator pulumi.StringPtrInput
	// The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.
	AlarmPolicyConditionMetricName pulumi.StringPtrInput
	// The comparison operator of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionMetricUnit pulumi.StringPtrInput
	// The threshold of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyConditionThreshold pulumi.StringPtrInput
	// The evaluation count of the alarm policy of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyEvaluationCount pulumi.IntPtrInput
	// The rule type of the alarm policy of the scaling policy. Valid value: Static. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
	AlarmPolicyRuleType pulumi.StringPtrInput
	// The cooldown of the scaling policy. Default value is the cooldown time of the scaling group. Value: 0~86400, unit: second, if left blank, the cooling time of the scaling group will be used by default.
	Cooldown pulumi.IntPtrInput
	// The id of the scaling group to which the scaling policy belongs.
	ScalingGroupId pulumi.StringInput
	// The name of the scaling policy.
	ScalingPolicyName pulumi.StringInput
	// The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.
	ScalingPolicyType pulumi.StringInput
	// The launch time of the scheduled policy of the scaling policy.
	// When the value of `ScalingPolicyType` is `Scheduled`, it means that the trigger time of the scheduled task must be greater than the current time.
	// When the value of `ScalingPolicyType` is `Recurrence`: If `ScheduledPolicy.RecurrenceType` is not specified, it means to execute only once according to the date and time specified here.
	// If `ScheduledPolicy.RecurrenceType` is specified, it indicates the start time of the periodic task. Only the time within 90 days from the date of creation/modification is supported.
	// When the value of `ScalingPolicyType` is `Alarm`, this parameter is invalid.
	ScheduledPolicyLaunchTime pulumi.StringPtrInput
	// The recurrence end time of the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. If not configured, it will default to the day/week/month after this moment according to the recurrence period (ScheduledPolicy.RecurrenceType).
	ScheduledPolicyRecurrenceEndTime pulumi.StringPtrInput
	// The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.
	ScheduledPolicyRecurrenceType pulumi.StringPtrInput
	// The recurrence value the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. When the value of the ScheduledPolicy.RecurrenceType parameter is Daily, only one value can be filled in, ranging from 1 to 31.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Weekly, you can enter multiple values separated by commas (,). The values from Monday to Sunday are: 1,2,3,4,5,6,7.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Monthly, the format is A-B. The value ranges of A and B are both 1~31, and B must be greater than or equal to A.
	// When the value of the ScheduledPolicy.RecurrenceType parameter is Cron, it means UTC+8 time, supports 5-field expressions of minutes, hours, days, months, and weeks, and supports wildcard English commas (,), English question marks (?), and conjunctions ( -), asterisk (*), pound sign (#), slash (/), L, and W.
	ScheduledPolicyRecurrenceValue pulumi.StringPtrInput
}

func (ScalingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scalingPolicyArgs)(nil)).Elem()
}

type ScalingPolicyInput interface {
	pulumi.Input

	ToScalingPolicyOutput() ScalingPolicyOutput
	ToScalingPolicyOutputWithContext(ctx context.Context) ScalingPolicyOutput
}

func (*ScalingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ScalingPolicy)(nil)).Elem()
}

func (i *ScalingPolicy) ToScalingPolicyOutput() ScalingPolicyOutput {
	return i.ToScalingPolicyOutputWithContext(context.Background())
}

func (i *ScalingPolicy) ToScalingPolicyOutputWithContext(ctx context.Context) ScalingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPolicyOutput)
}

// ScalingPolicyArrayInput is an input type that accepts ScalingPolicyArray and ScalingPolicyArrayOutput values.
// You can construct a concrete instance of `ScalingPolicyArrayInput` via:
//
//	ScalingPolicyArray{ ScalingPolicyArgs{...} }
type ScalingPolicyArrayInput interface {
	pulumi.Input

	ToScalingPolicyArrayOutput() ScalingPolicyArrayOutput
	ToScalingPolicyArrayOutputWithContext(context.Context) ScalingPolicyArrayOutput
}

type ScalingPolicyArray []ScalingPolicyInput

func (ScalingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScalingPolicy)(nil)).Elem()
}

func (i ScalingPolicyArray) ToScalingPolicyArrayOutput() ScalingPolicyArrayOutput {
	return i.ToScalingPolicyArrayOutputWithContext(context.Background())
}

func (i ScalingPolicyArray) ToScalingPolicyArrayOutputWithContext(ctx context.Context) ScalingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPolicyArrayOutput)
}

// ScalingPolicyMapInput is an input type that accepts ScalingPolicyMap and ScalingPolicyMapOutput values.
// You can construct a concrete instance of `ScalingPolicyMapInput` via:
//
//	ScalingPolicyMap{ "key": ScalingPolicyArgs{...} }
type ScalingPolicyMapInput interface {
	pulumi.Input

	ToScalingPolicyMapOutput() ScalingPolicyMapOutput
	ToScalingPolicyMapOutputWithContext(context.Context) ScalingPolicyMapOutput
}

type ScalingPolicyMap map[string]ScalingPolicyInput

func (ScalingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScalingPolicy)(nil)).Elem()
}

func (i ScalingPolicyMap) ToScalingPolicyMapOutput() ScalingPolicyMapOutput {
	return i.ToScalingPolicyMapOutputWithContext(context.Background())
}

func (i ScalingPolicyMap) ToScalingPolicyMapOutputWithContext(ctx context.Context) ScalingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScalingPolicyMapOutput)
}

type ScalingPolicyOutput struct{ *pulumi.OutputState }

func (ScalingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScalingPolicy)(nil)).Elem()
}

func (o ScalingPolicyOutput) ToScalingPolicyOutput() ScalingPolicyOutput {
	return o
}

func (o ScalingPolicyOutput) ToScalingPolicyOutputWithContext(ctx context.Context) ScalingPolicyOutput {
	return o
}

// The active flag of the scaling policy. [Warning] the scaling policy can be active only when the scaling group be active otherwise will fail.
func (o ScalingPolicyOutput) Active() pulumi.BoolOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.BoolOutput { return v.Active }).(pulumi.BoolOutput)
}

// The adjustment type of the scaling policy. Valid values: QuantityChangeInCapacity, PercentChangeInCapacity, TotalCapacity.
func (o ScalingPolicyOutput) AdjustmentType() pulumi.StringOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringOutput { return v.AdjustmentType }).(pulumi.StringOutput)
}

// The adjustment value of the scaling policy. When the value of the `AdjustmentType` parameter is `QuantityChangeInCapacity`: -100 ~ 100, 0 is not allowed, unit: piece. When the value of the `AdjustmentType` parameter is `PercentChangeInCapacity`: -100 ~ 10000, 0 is not allowed, unit: %. When the value of the `AdjustmentType` parameter is `TotalCapacity`: the default is 0 to 100, unit: piece.
func (o ScalingPolicyOutput) AdjustmentValue() pulumi.IntOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.IntOutput { return v.AdjustmentValue }).(pulumi.IntOutput)
}

// The comparison operator of the alarm policy condition of the scaling policy. Valid values: `>`, `<`, `=`. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
func (o ScalingPolicyOutput) AlarmPolicyConditionComparisonOperator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringPtrOutput { return v.AlarmPolicyConditionComparisonOperator }).(pulumi.StringPtrOutput)
}

// The metric name of the alarm policy condition of the scaling policy. Valid values: CpuTotal_Max, CpuTotal_Min, CpuTotal_Avg, MemoryUsedUtilization_Max, MemoryUsedUtilization_Min, MemoryUsedUtilization_Avg, Instance_CpuBusy_Max, Instance_CpuBusy_Min, Instance_CpuBusy_Avg.
func (o ScalingPolicyOutput) AlarmPolicyConditionMetricName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringPtrOutput { return v.AlarmPolicyConditionMetricName }).(pulumi.StringPtrOutput)
}

// The comparison operator of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
func (o ScalingPolicyOutput) AlarmPolicyConditionMetricUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringPtrOutput { return v.AlarmPolicyConditionMetricUnit }).(pulumi.StringPtrOutput)
}

// The threshold of the alarm policy condition of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
func (o ScalingPolicyOutput) AlarmPolicyConditionThreshold() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringPtrOutput { return v.AlarmPolicyConditionThreshold }).(pulumi.StringPtrOutput)
}

// The evaluation count of the alarm policy of the scaling policy. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
func (o ScalingPolicyOutput) AlarmPolicyEvaluationCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.IntPtrOutput { return v.AlarmPolicyEvaluationCount }).(pulumi.IntPtrOutput)
}

// The rule type of the alarm policy of the scaling policy. Valid value: Static. It is only valid and required when the value of `ScalingPolicyType` is `Alarm`.
func (o ScalingPolicyOutput) AlarmPolicyRuleType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringPtrOutput { return v.AlarmPolicyRuleType }).(pulumi.StringPtrOutput)
}

// The cooldown of the scaling policy. Default value is the cooldown time of the scaling group. Value: 0~86400, unit: second, if left blank, the cooling time of the scaling group will be used by default.
func (o ScalingPolicyOutput) Cooldown() pulumi.IntOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.IntOutput { return v.Cooldown }).(pulumi.IntOutput)
}

// The id of the scaling group to which the scaling policy belongs.
func (o ScalingPolicyOutput) ScalingGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringOutput { return v.ScalingGroupId }).(pulumi.StringOutput)
}

// The name of the scaling policy.
func (o ScalingPolicyOutput) ScalingPolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringOutput { return v.ScalingPolicyName }).(pulumi.StringOutput)
}

// The type of scaling policy. Valid values: Scheduled, Recurrence, Alarm.
func (o ScalingPolicyOutput) ScalingPolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringOutput { return v.ScalingPolicyType }).(pulumi.StringOutput)
}

// The launch time of the scheduled policy of the scaling policy.
// When the value of `ScalingPolicyType` is `Scheduled`, it means that the trigger time of the scheduled task must be greater than the current time.
// When the value of `ScalingPolicyType` is `Recurrence`: If `ScheduledPolicy.RecurrenceType` is not specified, it means to execute only once according to the date and time specified here.
// If `ScheduledPolicy.RecurrenceType` is specified, it indicates the start time of the periodic task. Only the time within 90 days from the date of creation/modification is supported.
// When the value of `ScalingPolicyType` is `Alarm`, this parameter is invalid.
func (o ScalingPolicyOutput) ScheduledPolicyLaunchTime() pulumi.StringOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringOutput { return v.ScheduledPolicyLaunchTime }).(pulumi.StringOutput)
}

// The recurrence end time of the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. If not configured, it will default to the day/week/month after this moment according to the recurrence period (ScheduledPolicy.RecurrenceType).
func (o ScalingPolicyOutput) ScheduledPolicyRecurrenceEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringPtrOutput { return v.ScheduledPolicyRecurrenceEndTime }).(pulumi.StringPtrOutput)
}

// The recurrence type the scheduled policy of the scaling policy. Valid values: Daily, Weekly, Monthly, Cron.
func (o ScalingPolicyOutput) ScheduledPolicyRecurrenceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringPtrOutput { return v.ScheduledPolicyRecurrenceType }).(pulumi.StringPtrOutput)
}

// The recurrence value the scheduled policy of the scaling policy. Valid and required when `ScalingPolicyType` is `Recurrence`. When the value of the ScheduledPolicy.RecurrenceType parameter is Daily, only one value can be filled in, ranging from 1 to 31.
// When the value of the ScheduledPolicy.RecurrenceType parameter is Weekly, you can enter multiple values separated by commas (,). The values from Monday to Sunday are: 1,2,3,4,5,6,7.
// When the value of the ScheduledPolicy.RecurrenceType parameter is Monthly, the format is A-B. The value ranges of A and B are both 1~31, and B must be greater than or equal to A.
// When the value of the ScheduledPolicy.RecurrenceType parameter is Cron, it means UTC+8 time, supports 5-field expressions of minutes, hours, days, months, and weeks, and supports wildcard English commas (,), English question marks (?), and conjunctions ( -), asterisk (*), pound sign (#), slash (/), L, and W.
func (o ScalingPolicyOutput) ScheduledPolicyRecurrenceValue() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringPtrOutput { return v.ScheduledPolicyRecurrenceValue }).(pulumi.StringPtrOutput)
}

// The status of the scaling policy. Valid values: Active, InActive.
func (o ScalingPolicyOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ScalingPolicy) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ScalingPolicyArrayOutput struct{ *pulumi.OutputState }

func (ScalingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScalingPolicy)(nil)).Elem()
}

func (o ScalingPolicyArrayOutput) ToScalingPolicyArrayOutput() ScalingPolicyArrayOutput {
	return o
}

func (o ScalingPolicyArrayOutput) ToScalingPolicyArrayOutputWithContext(ctx context.Context) ScalingPolicyArrayOutput {
	return o
}

func (o ScalingPolicyArrayOutput) Index(i pulumi.IntInput) ScalingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScalingPolicy {
		return vs[0].([]*ScalingPolicy)[vs[1].(int)]
	}).(ScalingPolicyOutput)
}

type ScalingPolicyMapOutput struct{ *pulumi.OutputState }

func (ScalingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScalingPolicy)(nil)).Elem()
}

func (o ScalingPolicyMapOutput) ToScalingPolicyMapOutput() ScalingPolicyMapOutput {
	return o
}

func (o ScalingPolicyMapOutput) ToScalingPolicyMapOutputWithContext(ctx context.Context) ScalingPolicyMapOutput {
	return o
}

func (o ScalingPolicyMapOutput) MapIndex(k pulumi.StringInput) ScalingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScalingPolicy {
		return vs[0].(map[string]*ScalingPolicy)[vs[1].(string)]
	}).(ScalingPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPolicyInput)(nil)).Elem(), &ScalingPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPolicyArrayInput)(nil)).Elem(), ScalingPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScalingPolicyMapInput)(nil)).Elem(), ScalingPolicyMap{})
	pulumi.RegisterOutputType(ScalingPolicyOutput{})
	pulumi.RegisterOutputType(ScalingPolicyArrayOutput{})
	pulumi.RegisterOutputType(ScalingPolicyMapOutput{})
}
