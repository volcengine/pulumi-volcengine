// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage iam user group attachment
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooUser, err := iam.NewUser(ctx, "fooUser", &iam.UserArgs{
//				UserName:    pulumi.String("acc-test-user"),
//				Description: pulumi.String("acc test"),
//				DisplayName: pulumi.String("name"),
//			})
//			if err != nil {
//				return err
//			}
//			fooUserGroup, err := iam.NewUserGroup(ctx, "fooUserGroup", &iam.UserGroupArgs{
//				UserGroupName: pulumi.String("acc-test-group"),
//				Description:   pulumi.String("acc-test"),
//				DisplayName:   pulumi.String("acctest"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewUserGroupAttachment(ctx, "fooUserGroupAttachment", &iam.UserGroupAttachmentArgs{
//				UserGroupName: fooUserGroup.UserGroupName,
//				UserName:      fooUser.UserName,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IamUserGroupAttachment can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:iam/userGroupAttachment:UserGroupAttachment default user_group_id:user_id
//
// ```
type UserGroupAttachment struct {
	pulumi.CustomResourceState

	// The name of the user group.
	UserGroupName pulumi.StringOutput `pulumi:"userGroupName"`
	// The name of the user.
	UserName pulumi.StringOutput `pulumi:"userName"`
}

// NewUserGroupAttachment registers a new resource with the given unique name, arguments, and options.
func NewUserGroupAttachment(ctx *pulumi.Context,
	name string, args *UserGroupAttachmentArgs, opts ...pulumi.ResourceOption) (*UserGroupAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserGroupName == nil {
		return nil, errors.New("invalid value for required argument 'UserGroupName'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroupAttachment
	err := ctx.RegisterResource("volcengine:iam/userGroupAttachment:UserGroupAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroupAttachment gets an existing UserGroupAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupAttachmentState, opts ...pulumi.ResourceOption) (*UserGroupAttachment, error) {
	var resource UserGroupAttachment
	err := ctx.ReadResource("volcengine:iam/userGroupAttachment:UserGroupAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroupAttachment resources.
type userGroupAttachmentState struct {
	// The name of the user group.
	UserGroupName *string `pulumi:"userGroupName"`
	// The name of the user.
	UserName *string `pulumi:"userName"`
}

type UserGroupAttachmentState struct {
	// The name of the user group.
	UserGroupName pulumi.StringPtrInput
	// The name of the user.
	UserName pulumi.StringPtrInput
}

func (UserGroupAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupAttachmentState)(nil)).Elem()
}

type userGroupAttachmentArgs struct {
	// The name of the user group.
	UserGroupName string `pulumi:"userGroupName"`
	// The name of the user.
	UserName string `pulumi:"userName"`
}

// The set of arguments for constructing a UserGroupAttachment resource.
type UserGroupAttachmentArgs struct {
	// The name of the user group.
	UserGroupName pulumi.StringInput
	// The name of the user.
	UserName pulumi.StringInput
}

func (UserGroupAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupAttachmentArgs)(nil)).Elem()
}

type UserGroupAttachmentInput interface {
	pulumi.Input

	ToUserGroupAttachmentOutput() UserGroupAttachmentOutput
	ToUserGroupAttachmentOutputWithContext(ctx context.Context) UserGroupAttachmentOutput
}

func (*UserGroupAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupAttachment)(nil)).Elem()
}

func (i *UserGroupAttachment) ToUserGroupAttachmentOutput() UserGroupAttachmentOutput {
	return i.ToUserGroupAttachmentOutputWithContext(context.Background())
}

func (i *UserGroupAttachment) ToUserGroupAttachmentOutputWithContext(ctx context.Context) UserGroupAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupAttachmentOutput)
}

// UserGroupAttachmentArrayInput is an input type that accepts UserGroupAttachmentArray and UserGroupAttachmentArrayOutput values.
// You can construct a concrete instance of `UserGroupAttachmentArrayInput` via:
//
//	UserGroupAttachmentArray{ UserGroupAttachmentArgs{...} }
type UserGroupAttachmentArrayInput interface {
	pulumi.Input

	ToUserGroupAttachmentArrayOutput() UserGroupAttachmentArrayOutput
	ToUserGroupAttachmentArrayOutputWithContext(context.Context) UserGroupAttachmentArrayOutput
}

type UserGroupAttachmentArray []UserGroupAttachmentInput

func (UserGroupAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupAttachment)(nil)).Elem()
}

func (i UserGroupAttachmentArray) ToUserGroupAttachmentArrayOutput() UserGroupAttachmentArrayOutput {
	return i.ToUserGroupAttachmentArrayOutputWithContext(context.Background())
}

func (i UserGroupAttachmentArray) ToUserGroupAttachmentArrayOutputWithContext(ctx context.Context) UserGroupAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupAttachmentArrayOutput)
}

// UserGroupAttachmentMapInput is an input type that accepts UserGroupAttachmentMap and UserGroupAttachmentMapOutput values.
// You can construct a concrete instance of `UserGroupAttachmentMapInput` via:
//
//	UserGroupAttachmentMap{ "key": UserGroupAttachmentArgs{...} }
type UserGroupAttachmentMapInput interface {
	pulumi.Input

	ToUserGroupAttachmentMapOutput() UserGroupAttachmentMapOutput
	ToUserGroupAttachmentMapOutputWithContext(context.Context) UserGroupAttachmentMapOutput
}

type UserGroupAttachmentMap map[string]UserGroupAttachmentInput

func (UserGroupAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupAttachment)(nil)).Elem()
}

func (i UserGroupAttachmentMap) ToUserGroupAttachmentMapOutput() UserGroupAttachmentMapOutput {
	return i.ToUserGroupAttachmentMapOutputWithContext(context.Background())
}

func (i UserGroupAttachmentMap) ToUserGroupAttachmentMapOutputWithContext(ctx context.Context) UserGroupAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupAttachmentMapOutput)
}

type UserGroupAttachmentOutput struct{ *pulumi.OutputState }

func (UserGroupAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupAttachment)(nil)).Elem()
}

func (o UserGroupAttachmentOutput) ToUserGroupAttachmentOutput() UserGroupAttachmentOutput {
	return o
}

func (o UserGroupAttachmentOutput) ToUserGroupAttachmentOutputWithContext(ctx context.Context) UserGroupAttachmentOutput {
	return o
}

// The name of the user group.
func (o UserGroupAttachmentOutput) UserGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupAttachment) pulumi.StringOutput { return v.UserGroupName }).(pulumi.StringOutput)
}

// The name of the user.
func (o UserGroupAttachmentOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupAttachment) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

type UserGroupAttachmentArrayOutput struct{ *pulumi.OutputState }

func (UserGroupAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupAttachment)(nil)).Elem()
}

func (o UserGroupAttachmentArrayOutput) ToUserGroupAttachmentArrayOutput() UserGroupAttachmentArrayOutput {
	return o
}

func (o UserGroupAttachmentArrayOutput) ToUserGroupAttachmentArrayOutputWithContext(ctx context.Context) UserGroupAttachmentArrayOutput {
	return o
}

func (o UserGroupAttachmentArrayOutput) Index(i pulumi.IntInput) UserGroupAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroupAttachment {
		return vs[0].([]*UserGroupAttachment)[vs[1].(int)]
	}).(UserGroupAttachmentOutput)
}

type UserGroupAttachmentMapOutput struct{ *pulumi.OutputState }

func (UserGroupAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupAttachment)(nil)).Elem()
}

func (o UserGroupAttachmentMapOutput) ToUserGroupAttachmentMapOutput() UserGroupAttachmentMapOutput {
	return o
}

func (o UserGroupAttachmentMapOutput) ToUserGroupAttachmentMapOutputWithContext(ctx context.Context) UserGroupAttachmentMapOutput {
	return o
}

func (o UserGroupAttachmentMapOutput) MapIndex(k pulumi.StringInput) UserGroupAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroupAttachment {
		return vs[0].(map[string]*UserGroupAttachment)[vs[1].(string)]
	}).(UserGroupAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupAttachmentInput)(nil)).Elem(), &UserGroupAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupAttachmentArrayInput)(nil)).Elem(), UserGroupAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupAttachmentMapInput)(nil)).Elem(), UserGroupAttachmentMap{})
	pulumi.RegisterOutputType(UserGroupAttachmentOutput{})
	pulumi.RegisterOutputType(UserGroupAttachmentArrayOutput{})
	pulumi.RegisterOutputType(UserGroupAttachmentMapOutput{})
}
