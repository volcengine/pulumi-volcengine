// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type PoliciesPolicy struct {
	// The create time of the Policy.
	CreateDate string `pulumi:"createDate"`
	// The description of the Policy.
	Description string `pulumi:"description"`
	// The ID of the Policy.
	Id string `pulumi:"id"`
	// The document of the Policy.
	PolicyDocument string `pulumi:"policyDocument"`
	// The name of the Policy.
	PolicyName string `pulumi:"policyName"`
	// The resource name of the Policy.
	PolicyTrn string `pulumi:"policyTrn"`
	// The type of the Policy.
	PolicyType string `pulumi:"policyType"`
	// The role attach time of the Policy.The data show only query with role_name.
	RoleAttachDate string `pulumi:"roleAttachDate"`
	// The name of the IAM role.
	RoleName string `pulumi:"roleName"`
	// The update time of the Policy.
	UpdateDate string `pulumi:"updateDate"`
	// The user attach time of the Policy.The data show only query with user_name.
	UserAttachDate string `pulumi:"userAttachDate"`
	// The name of the IAM user.
	UserName string `pulumi:"userName"`
}

// PoliciesPolicyInput is an input type that accepts PoliciesPolicyArgs and PoliciesPolicyOutput values.
// You can construct a concrete instance of `PoliciesPolicyInput` via:
//
//	PoliciesPolicyArgs{...}
type PoliciesPolicyInput interface {
	pulumi.Input

	ToPoliciesPolicyOutput() PoliciesPolicyOutput
	ToPoliciesPolicyOutputWithContext(context.Context) PoliciesPolicyOutput
}

type PoliciesPolicyArgs struct {
	// The create time of the Policy.
	CreateDate pulumi.StringInput `pulumi:"createDate"`
	// The description of the Policy.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the Policy.
	Id pulumi.StringInput `pulumi:"id"`
	// The document of the Policy.
	PolicyDocument pulumi.StringInput `pulumi:"policyDocument"`
	// The name of the Policy.
	PolicyName pulumi.StringInput `pulumi:"policyName"`
	// The resource name of the Policy.
	PolicyTrn pulumi.StringInput `pulumi:"policyTrn"`
	// The type of the Policy.
	PolicyType pulumi.StringInput `pulumi:"policyType"`
	// The role attach time of the Policy.The data show only query with role_name.
	RoleAttachDate pulumi.StringInput `pulumi:"roleAttachDate"`
	// The name of the IAM role.
	RoleName pulumi.StringInput `pulumi:"roleName"`
	// The update time of the Policy.
	UpdateDate pulumi.StringInput `pulumi:"updateDate"`
	// The user attach time of the Policy.The data show only query with user_name.
	UserAttachDate pulumi.StringInput `pulumi:"userAttachDate"`
	// The name of the IAM user.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (PoliciesPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PoliciesPolicy)(nil)).Elem()
}

func (i PoliciesPolicyArgs) ToPoliciesPolicyOutput() PoliciesPolicyOutput {
	return i.ToPoliciesPolicyOutputWithContext(context.Background())
}

func (i PoliciesPolicyArgs) ToPoliciesPolicyOutputWithContext(ctx context.Context) PoliciesPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesPolicyOutput)
}

// PoliciesPolicyArrayInput is an input type that accepts PoliciesPolicyArray and PoliciesPolicyArrayOutput values.
// You can construct a concrete instance of `PoliciesPolicyArrayInput` via:
//
//	PoliciesPolicyArray{ PoliciesPolicyArgs{...} }
type PoliciesPolicyArrayInput interface {
	pulumi.Input

	ToPoliciesPolicyArrayOutput() PoliciesPolicyArrayOutput
	ToPoliciesPolicyArrayOutputWithContext(context.Context) PoliciesPolicyArrayOutput
}

type PoliciesPolicyArray []PoliciesPolicyInput

func (PoliciesPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PoliciesPolicy)(nil)).Elem()
}

func (i PoliciesPolicyArray) ToPoliciesPolicyArrayOutput() PoliciesPolicyArrayOutput {
	return i.ToPoliciesPolicyArrayOutputWithContext(context.Background())
}

func (i PoliciesPolicyArray) ToPoliciesPolicyArrayOutputWithContext(ctx context.Context) PoliciesPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PoliciesPolicyArrayOutput)
}

type PoliciesPolicyOutput struct{ *pulumi.OutputState }

func (PoliciesPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PoliciesPolicy)(nil)).Elem()
}

func (o PoliciesPolicyOutput) ToPoliciesPolicyOutput() PoliciesPolicyOutput {
	return o
}

func (o PoliciesPolicyOutput) ToPoliciesPolicyOutputWithContext(ctx context.Context) PoliciesPolicyOutput {
	return o
}

// The create time of the Policy.
func (o PoliciesPolicyOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.CreateDate }).(pulumi.StringOutput)
}

// The description of the Policy.
func (o PoliciesPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the Policy.
func (o PoliciesPolicyOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.Id }).(pulumi.StringOutput)
}

// The document of the Policy.
func (o PoliciesPolicyOutput) PolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.PolicyDocument }).(pulumi.StringOutput)
}

// The name of the Policy.
func (o PoliciesPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.PolicyName }).(pulumi.StringOutput)
}

// The resource name of the Policy.
func (o PoliciesPolicyOutput) PolicyTrn() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.PolicyTrn }).(pulumi.StringOutput)
}

// The type of the Policy.
func (o PoliciesPolicyOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.PolicyType }).(pulumi.StringOutput)
}

// The role attach time of the Policy.The data show only query with role_name.
func (o PoliciesPolicyOutput) RoleAttachDate() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.RoleAttachDate }).(pulumi.StringOutput)
}

// The name of the IAM role.
func (o PoliciesPolicyOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.RoleName }).(pulumi.StringOutput)
}

// The update time of the Policy.
func (o PoliciesPolicyOutput) UpdateDate() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.UpdateDate }).(pulumi.StringOutput)
}

// The user attach time of the Policy.The data show only query with user_name.
func (o PoliciesPolicyOutput) UserAttachDate() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.UserAttachDate }).(pulumi.StringOutput)
}

// The name of the IAM user.
func (o PoliciesPolicyOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v PoliciesPolicy) string { return v.UserName }).(pulumi.StringOutput)
}

type PoliciesPolicyArrayOutput struct{ *pulumi.OutputState }

func (PoliciesPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PoliciesPolicy)(nil)).Elem()
}

func (o PoliciesPolicyArrayOutput) ToPoliciesPolicyArrayOutput() PoliciesPolicyArrayOutput {
	return o
}

func (o PoliciesPolicyArrayOutput) ToPoliciesPolicyArrayOutputWithContext(ctx context.Context) PoliciesPolicyArrayOutput {
	return o
}

func (o PoliciesPolicyArrayOutput) Index(i pulumi.IntInput) PoliciesPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PoliciesPolicy {
		return vs[0].([]PoliciesPolicy)[vs[1].(int)]
	}).(PoliciesPolicyOutput)
}

type RolesRole struct {
	// The create time of the Role.
	CreateDate string `pulumi:"createDate"`
	// The description of the Role.
	Description string `pulumi:"description"`
	// The ID of the Role.
	Id string `pulumi:"id"`
	// The name of the Role, comma separated.
	RoleName string `pulumi:"roleName"`
	// The resource name of the Role.
	Trn string `pulumi:"trn"`
	// The trust policy document of the Role.
	TrustPolicyDocument string `pulumi:"trustPolicyDocument"`
}

// RolesRoleInput is an input type that accepts RolesRoleArgs and RolesRoleOutput values.
// You can construct a concrete instance of `RolesRoleInput` via:
//
//	RolesRoleArgs{...}
type RolesRoleInput interface {
	pulumi.Input

	ToRolesRoleOutput() RolesRoleOutput
	ToRolesRoleOutputWithContext(context.Context) RolesRoleOutput
}

type RolesRoleArgs struct {
	// The create time of the Role.
	CreateDate pulumi.StringInput `pulumi:"createDate"`
	// The description of the Role.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the Role.
	Id pulumi.StringInput `pulumi:"id"`
	// The name of the Role, comma separated.
	RoleName pulumi.StringInput `pulumi:"roleName"`
	// The resource name of the Role.
	Trn pulumi.StringInput `pulumi:"trn"`
	// The trust policy document of the Role.
	TrustPolicyDocument pulumi.StringInput `pulumi:"trustPolicyDocument"`
}

func (RolesRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolesRole)(nil)).Elem()
}

func (i RolesRoleArgs) ToRolesRoleOutput() RolesRoleOutput {
	return i.ToRolesRoleOutputWithContext(context.Background())
}

func (i RolesRoleArgs) ToRolesRoleOutputWithContext(ctx context.Context) RolesRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolesRoleOutput)
}

// RolesRoleArrayInput is an input type that accepts RolesRoleArray and RolesRoleArrayOutput values.
// You can construct a concrete instance of `RolesRoleArrayInput` via:
//
//	RolesRoleArray{ RolesRoleArgs{...} }
type RolesRoleArrayInput interface {
	pulumi.Input

	ToRolesRoleArrayOutput() RolesRoleArrayOutput
	ToRolesRoleArrayOutputWithContext(context.Context) RolesRoleArrayOutput
}

type RolesRoleArray []RolesRoleInput

func (RolesRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolesRole)(nil)).Elem()
}

func (i RolesRoleArray) ToRolesRoleArrayOutput() RolesRoleArrayOutput {
	return i.ToRolesRoleArrayOutputWithContext(context.Background())
}

func (i RolesRoleArray) ToRolesRoleArrayOutputWithContext(ctx context.Context) RolesRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolesRoleArrayOutput)
}

type RolesRoleOutput struct{ *pulumi.OutputState }

func (RolesRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolesRole)(nil)).Elem()
}

func (o RolesRoleOutput) ToRolesRoleOutput() RolesRoleOutput {
	return o
}

func (o RolesRoleOutput) ToRolesRoleOutputWithContext(ctx context.Context) RolesRoleOutput {
	return o
}

// The create time of the Role.
func (o RolesRoleOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v RolesRole) string { return v.CreateDate }).(pulumi.StringOutput)
}

// The description of the Role.
func (o RolesRoleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RolesRole) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the Role.
func (o RolesRoleOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RolesRole) string { return v.Id }).(pulumi.StringOutput)
}

// The name of the Role, comma separated.
func (o RolesRoleOutput) RoleName() pulumi.StringOutput {
	return o.ApplyT(func(v RolesRole) string { return v.RoleName }).(pulumi.StringOutput)
}

// The resource name of the Role.
func (o RolesRoleOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v RolesRole) string { return v.Trn }).(pulumi.StringOutput)
}

// The trust policy document of the Role.
func (o RolesRoleOutput) TrustPolicyDocument() pulumi.StringOutput {
	return o.ApplyT(func(v RolesRole) string { return v.TrustPolicyDocument }).(pulumi.StringOutput)
}

type RolesRoleArrayOutput struct{ *pulumi.OutputState }

func (RolesRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolesRole)(nil)).Elem()
}

func (o RolesRoleArrayOutput) ToRolesRoleArrayOutput() RolesRoleArrayOutput {
	return o
}

func (o RolesRoleArrayOutput) ToRolesRoleArrayOutputWithContext(ctx context.Context) RolesRoleArrayOutput {
	return o
}

func (o RolesRoleArrayOutput) Index(i pulumi.IntInput) RolesRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RolesRole {
		return vs[0].([]RolesRole)[vs[1].(int)]
	}).(RolesRoleOutput)
}

type UsersUser struct {
	// The account id of the user.
	AccountId string `pulumi:"accountId"`
	// The create date of the user.
	CreateDate string `pulumi:"createDate"`
	// The trn of the user.
	Trn string `pulumi:"trn"`
	// The update date of the user.
	UpdateDate string `pulumi:"updateDate"`
	// The name of the user.
	UserName string `pulumi:"userName"`
}

// UsersUserInput is an input type that accepts UsersUserArgs and UsersUserOutput values.
// You can construct a concrete instance of `UsersUserInput` via:
//
//	UsersUserArgs{...}
type UsersUserInput interface {
	pulumi.Input

	ToUsersUserOutput() UsersUserOutput
	ToUsersUserOutputWithContext(context.Context) UsersUserOutput
}

type UsersUserArgs struct {
	// The account id of the user.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The create date of the user.
	CreateDate pulumi.StringInput `pulumi:"createDate"`
	// The trn of the user.
	Trn pulumi.StringInput `pulumi:"trn"`
	// The update date of the user.
	UpdateDate pulumi.StringInput `pulumi:"updateDate"`
	// The name of the user.
	UserName pulumi.StringInput `pulumi:"userName"`
}

func (UsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersUser)(nil)).Elem()
}

func (i UsersUserArgs) ToUsersUserOutput() UsersUserOutput {
	return i.ToUsersUserOutputWithContext(context.Background())
}

func (i UsersUserArgs) ToUsersUserOutputWithContext(ctx context.Context) UsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersUserOutput)
}

// UsersUserArrayInput is an input type that accepts UsersUserArray and UsersUserArrayOutput values.
// You can construct a concrete instance of `UsersUserArrayInput` via:
//
//	UsersUserArray{ UsersUserArgs{...} }
type UsersUserArrayInput interface {
	pulumi.Input

	ToUsersUserArrayOutput() UsersUserArrayOutput
	ToUsersUserArrayOutputWithContext(context.Context) UsersUserArrayOutput
}

type UsersUserArray []UsersUserInput

func (UsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsersUser)(nil)).Elem()
}

func (i UsersUserArray) ToUsersUserArrayOutput() UsersUserArrayOutput {
	return i.ToUsersUserArrayOutputWithContext(context.Background())
}

func (i UsersUserArray) ToUsersUserArrayOutputWithContext(ctx context.Context) UsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsersUserArrayOutput)
}

type UsersUserOutput struct{ *pulumi.OutputState }

func (UsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UsersUser)(nil)).Elem()
}

func (o UsersUserOutput) ToUsersUserOutput() UsersUserOutput {
	return o
}

func (o UsersUserOutput) ToUsersUserOutputWithContext(ctx context.Context) UsersUserOutput {
	return o
}

// The account id of the user.
func (o UsersUserOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v UsersUser) string { return v.AccountId }).(pulumi.StringOutput)
}

// The create date of the user.
func (o UsersUserOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v UsersUser) string { return v.CreateDate }).(pulumi.StringOutput)
}

// The trn of the user.
func (o UsersUserOutput) Trn() pulumi.StringOutput {
	return o.ApplyT(func(v UsersUser) string { return v.Trn }).(pulumi.StringOutput)
}

// The update date of the user.
func (o UsersUserOutput) UpdateDate() pulumi.StringOutput {
	return o.ApplyT(func(v UsersUser) string { return v.UpdateDate }).(pulumi.StringOutput)
}

// The name of the user.
func (o UsersUserOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v UsersUser) string { return v.UserName }).(pulumi.StringOutput)
}

type UsersUserArrayOutput struct{ *pulumi.OutputState }

func (UsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UsersUser)(nil)).Elem()
}

func (o UsersUserArrayOutput) ToUsersUserArrayOutput() UsersUserArrayOutput {
	return o
}

func (o UsersUserArrayOutput) ToUsersUserArrayOutputWithContext(ctx context.Context) UsersUserArrayOutput {
	return o
}

func (o UsersUserArrayOutput) Index(i pulumi.IntInput) UsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UsersUser {
		return vs[0].([]UsersUser)[vs[1].(int)]
	}).(UsersUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PoliciesPolicyInput)(nil)).Elem(), PoliciesPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PoliciesPolicyArrayInput)(nil)).Elem(), PoliciesPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolesRoleInput)(nil)).Elem(), RolesRoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolesRoleArrayInput)(nil)).Elem(), RolesRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersUserInput)(nil)).Elem(), UsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsersUserArrayInput)(nil)).Elem(), UsersUserArray{})
	pulumi.RegisterOutputType(PoliciesPolicyOutput{})
	pulumi.RegisterOutputType(PoliciesPolicyArrayOutput{})
	pulumi.RegisterOutputType(RolesRoleOutput{})
	pulumi.RegisterOutputType(RolesRoleArrayOutput{})
	pulumi.RegisterOutputType(UsersUserOutput{})
	pulumi.RegisterOutputType(UsersUserArrayOutput{})
}
