// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of iam user group policy attachments
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooPolicy, err := iam.NewPolicy(ctx, "fooPolicy", &iam.PolicyArgs{
//				PolicyName:     pulumi.String("acc-test-policy"),
//				Description:    pulumi.String("acc-test"),
//				PolicyDocument: pulumi.String("{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}"),
//			})
//			if err != nil {
//				return err
//			}
//			fooUserGroup, err := iam.NewUserGroup(ctx, "fooUserGroup", &iam.UserGroupArgs{
//				UserGroupName: pulumi.String("acc-test-group"),
//				Description:   pulumi.String("acc-test"),
//				DisplayName:   pulumi.String("acc-test"),
//			})
//			if err != nil {
//				return err
//			}
//			fooUserGroupPolicyAttachment, err := iam.NewUserGroupPolicyAttachment(ctx, "fooUserGroupPolicyAttachment", &iam.UserGroupPolicyAttachmentArgs{
//				PolicyName:    fooPolicy.PolicyName,
//				PolicyType:    pulumi.String("Custom"),
//				UserGroupName: fooUserGroup.UserGroupName,
//			})
//			if err != nil {
//				return err
//			}
//			_ = iam.GetUserGroupPolicyAttachmentsOutput(ctx, iam.GetUserGroupPolicyAttachmentsOutputArgs{
//				UserGroupName: fooUserGroupPolicyAttachment.UserGroupName,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.iam.UserGroupPolicyAttachments has been deprecated in favor of volcengine.iam.getUserGroupPolicyAttachments
func UserGroupPolicyAttachments(ctx *pulumi.Context, args *UserGroupPolicyAttachmentsArgs, opts ...pulumi.InvokeOption) (*UserGroupPolicyAttachmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv UserGroupPolicyAttachmentsResult
	err := ctx.Invoke("volcengine:iam/userGroupPolicyAttachments:UserGroupPolicyAttachments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking UserGroupPolicyAttachments.
type UserGroupPolicyAttachmentsArgs struct {
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// A name of user group.
	UserGroupName string `pulumi:"userGroupName"`
}

// A collection of values returned by UserGroupPolicyAttachments.
type UserGroupPolicyAttachmentsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of query.
	Policies []UserGroupPolicyAttachmentsPolicy `pulumi:"policies"`
	// The total count of query.
	TotalCount    int    `pulumi:"totalCount"`
	UserGroupName string `pulumi:"userGroupName"`
}

func UserGroupPolicyAttachmentsOutput(ctx *pulumi.Context, args UserGroupPolicyAttachmentsOutputArgs, opts ...pulumi.InvokeOption) UserGroupPolicyAttachmentsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (UserGroupPolicyAttachmentsResult, error) {
			args := v.(UserGroupPolicyAttachmentsArgs)
			r, err := UserGroupPolicyAttachments(ctx, &args, opts...)
			var s UserGroupPolicyAttachmentsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(UserGroupPolicyAttachmentsResultOutput)
}

// A collection of arguments for invoking UserGroupPolicyAttachments.
type UserGroupPolicyAttachmentsOutputArgs struct {
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// A name of user group.
	UserGroupName pulumi.StringInput `pulumi:"userGroupName"`
}

func (UserGroupPolicyAttachmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPolicyAttachmentsArgs)(nil)).Elem()
}

// A collection of values returned by UserGroupPolicyAttachments.
type UserGroupPolicyAttachmentsResultOutput struct{ *pulumi.OutputState }

func (UserGroupPolicyAttachmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupPolicyAttachmentsResult)(nil)).Elem()
}

func (o UserGroupPolicyAttachmentsResultOutput) ToUserGroupPolicyAttachmentsResultOutput() UserGroupPolicyAttachmentsResultOutput {
	return o
}

func (o UserGroupPolicyAttachmentsResultOutput) ToUserGroupPolicyAttachmentsResultOutputWithContext(ctx context.Context) UserGroupPolicyAttachmentsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o UserGroupPolicyAttachmentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v UserGroupPolicyAttachmentsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o UserGroupPolicyAttachmentsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupPolicyAttachmentsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o UserGroupPolicyAttachmentsResultOutput) Policies() UserGroupPolicyAttachmentsPolicyArrayOutput {
	return o.ApplyT(func(v UserGroupPolicyAttachmentsResult) []UserGroupPolicyAttachmentsPolicy { return v.Policies }).(UserGroupPolicyAttachmentsPolicyArrayOutput)
}

// The total count of query.
func (o UserGroupPolicyAttachmentsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v UserGroupPolicyAttachmentsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o UserGroupPolicyAttachmentsResultOutput) UserGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v UserGroupPolicyAttachmentsResult) string { return v.UserGroupName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(UserGroupPolicyAttachmentsResultOutput{})
}
