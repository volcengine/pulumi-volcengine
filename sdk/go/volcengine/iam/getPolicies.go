// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of iam policies
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooPolicy, err := iam.NewPolicy(ctx, "fooPolicy", &iam.PolicyArgs{
//				PolicyName:     pulumi.String("acc-test-policy"),
//				Description:    pulumi.String("acc-test"),
//				PolicyDocument: pulumi.String("{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = fooPolicy.Description.ApplyT(func(description *string) (iam.GetPoliciesResult, error) {
//				return iam.GetPoliciesOutput(ctx, iam.GetPoliciesOutputArgs{
//					Query: description,
//				}, nil), nil
//			}).(iam.GetPoliciesResultOutput)
//			return nil
//		})
//	}
//
// ```
func GetPolicies(ctx *pulumi.Context, args *GetPoliciesArgs, opts ...pulumi.InvokeOption) (*GetPoliciesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetPoliciesResult
	err := ctx.Invoke("volcengine:iam/getPolicies:getPolicies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicies.
type GetPoliciesArgs struct {
	// A Name Regex of Policy.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Query policies, support policy name or description.
	Query *string `pulumi:"query"`
	// The name of the IAM role.
	RoleName *string `pulumi:"roleName"`
	// The scope of the Policy.
	Scope *string `pulumi:"scope"`
	// The status of policy.
	Status *string `pulumi:"status"`
	// The name of the IAM user.
	UserName *string `pulumi:"userName"`
}

// A collection of values returned by getPolicies.
type GetPoliciesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of Policy query.
	Policies []GetPoliciesPolicy `pulumi:"policies"`
	Query    *string             `pulumi:"query"`
	// The name of the IAM role.The data show only query with role_name.
	RoleName *string `pulumi:"roleName"`
	Scope    *string `pulumi:"scope"`
	Status   *string `pulumi:"status"`
	// The total count of Policy query.
	TotalCount int `pulumi:"totalCount"`
	// The name of the IAM user.The data show only query with user_name.
	UserName *string `pulumi:"userName"`
}

func GetPoliciesOutput(ctx *pulumi.Context, args GetPoliciesOutputArgs, opts ...pulumi.InvokeOption) GetPoliciesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPoliciesResult, error) {
			args := v.(GetPoliciesArgs)
			r, err := GetPolicies(ctx, &args, opts...)
			var s GetPoliciesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPoliciesResultOutput)
}

// A collection of arguments for invoking getPolicies.
type GetPoliciesOutputArgs struct {
	// A Name Regex of Policy.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Query policies, support policy name or description.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// The name of the IAM role.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
	// The scope of the Policy.
	Scope pulumi.StringPtrInput `pulumi:"scope"`
	// The status of policy.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The name of the IAM user.
	UserName pulumi.StringPtrInput `pulumi:"userName"`
}

func (GetPoliciesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPoliciesArgs)(nil)).Elem()
}

// A collection of values returned by getPolicies.
type GetPoliciesResultOutput struct{ *pulumi.OutputState }

func (GetPoliciesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPoliciesResult)(nil)).Elem()
}

func (o GetPoliciesResultOutput) ToGetPoliciesResultOutput() GetPoliciesResultOutput {
	return o
}

func (o GetPoliciesResultOutput) ToGetPoliciesResultOutputWithContext(ctx context.Context) GetPoliciesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetPoliciesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPoliciesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPoliciesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPoliciesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetPoliciesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPoliciesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of Policy query.
func (o GetPoliciesResultOutput) Policies() GetPoliciesPolicyArrayOutput {
	return o.ApplyT(func(v GetPoliciesResult) []GetPoliciesPolicy { return v.Policies }).(GetPoliciesPolicyArrayOutput)
}

func (o GetPoliciesResultOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPoliciesResult) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// The name of the IAM role.The data show only query with role_name.
func (o GetPoliciesResultOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPoliciesResult) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

func (o GetPoliciesResultOutput) Scope() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPoliciesResult) *string { return v.Scope }).(pulumi.StringPtrOutput)
}

func (o GetPoliciesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPoliciesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The total count of Policy query.
func (o GetPoliciesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetPoliciesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The name of the IAM user.The data show only query with user_name.
func (o GetPoliciesResultOutput) UserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPoliciesResult) *string { return v.UserName }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPoliciesResultOutput{})
}
