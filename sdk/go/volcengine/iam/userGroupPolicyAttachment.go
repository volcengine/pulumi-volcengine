// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage iam user group policy attachment
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooPolicy, err := iam.NewPolicy(ctx, "fooPolicy", &iam.PolicyArgs{
//				PolicyName:     pulumi.String("acc-test-policy"),
//				Description:    pulumi.String("acc-test"),
//				PolicyDocument: pulumi.String("{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}"),
//			})
//			if err != nil {
//				return err
//			}
//			fooUserGroup, err := iam.NewUserGroup(ctx, "fooUserGroup", &iam.UserGroupArgs{
//				UserGroupName: pulumi.String("acc-test-group"),
//				Description:   pulumi.String("acc-test"),
//				DisplayName:   pulumi.String("acc-test"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.NewUserGroupPolicyAttachment(ctx, "fooUserGroupPolicyAttachment", &iam.UserGroupPolicyAttachmentArgs{
//				PolicyName:    fooPolicy.PolicyName,
//				PolicyType:    pulumi.String("Custom"),
//				UserGroupName: fooUserGroup.UserGroupName,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// IamUserGroupPolicyAttachment can be imported using the user group name and policy name, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:iam/userGroupPolicyAttachment:UserGroupPolicyAttachment default userGroupName:policyName
//
// ```
type UserGroupPolicyAttachment struct {
	pulumi.CustomResourceState

	// The policy name.
	PolicyName pulumi.StringOutput `pulumi:"policyName"`
	// Strategy types, System strategy, Custom strategy.
	PolicyType pulumi.StringOutput `pulumi:"policyType"`
	// The user group name.
	UserGroupName pulumi.StringOutput `pulumi:"userGroupName"`
}

// NewUserGroupPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewUserGroupPolicyAttachment(ctx *pulumi.Context,
	name string, args *UserGroupPolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*UserGroupPolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyName == nil {
		return nil, errors.New("invalid value for required argument 'PolicyName'")
	}
	if args.PolicyType == nil {
		return nil, errors.New("invalid value for required argument 'PolicyType'")
	}
	if args.UserGroupName == nil {
		return nil, errors.New("invalid value for required argument 'UserGroupName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource UserGroupPolicyAttachment
	err := ctx.RegisterResource("volcengine:iam/userGroupPolicyAttachment:UserGroupPolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserGroupPolicyAttachment gets an existing UserGroupPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserGroupPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserGroupPolicyAttachmentState, opts ...pulumi.ResourceOption) (*UserGroupPolicyAttachment, error) {
	var resource UserGroupPolicyAttachment
	err := ctx.ReadResource("volcengine:iam/userGroupPolicyAttachment:UserGroupPolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserGroupPolicyAttachment resources.
type userGroupPolicyAttachmentState struct {
	// The policy name.
	PolicyName *string `pulumi:"policyName"`
	// Strategy types, System strategy, Custom strategy.
	PolicyType *string `pulumi:"policyType"`
	// The user group name.
	UserGroupName *string `pulumi:"userGroupName"`
}

type UserGroupPolicyAttachmentState struct {
	// The policy name.
	PolicyName pulumi.StringPtrInput
	// Strategy types, System strategy, Custom strategy.
	PolicyType pulumi.StringPtrInput
	// The user group name.
	UserGroupName pulumi.StringPtrInput
}

func (UserGroupPolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupPolicyAttachmentState)(nil)).Elem()
}

type userGroupPolicyAttachmentArgs struct {
	// The policy name.
	PolicyName string `pulumi:"policyName"`
	// Strategy types, System strategy, Custom strategy.
	PolicyType string `pulumi:"policyType"`
	// The user group name.
	UserGroupName string `pulumi:"userGroupName"`
}

// The set of arguments for constructing a UserGroupPolicyAttachment resource.
type UserGroupPolicyAttachmentArgs struct {
	// The policy name.
	PolicyName pulumi.StringInput
	// Strategy types, System strategy, Custom strategy.
	PolicyType pulumi.StringInput
	// The user group name.
	UserGroupName pulumi.StringInput
}

func (UserGroupPolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userGroupPolicyAttachmentArgs)(nil)).Elem()
}

type UserGroupPolicyAttachmentInput interface {
	pulumi.Input

	ToUserGroupPolicyAttachmentOutput() UserGroupPolicyAttachmentOutput
	ToUserGroupPolicyAttachmentOutputWithContext(ctx context.Context) UserGroupPolicyAttachmentOutput
}

func (*UserGroupPolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupPolicyAttachment)(nil)).Elem()
}

func (i *UserGroupPolicyAttachment) ToUserGroupPolicyAttachmentOutput() UserGroupPolicyAttachmentOutput {
	return i.ToUserGroupPolicyAttachmentOutputWithContext(context.Background())
}

func (i *UserGroupPolicyAttachment) ToUserGroupPolicyAttachmentOutputWithContext(ctx context.Context) UserGroupPolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPolicyAttachmentOutput)
}

// UserGroupPolicyAttachmentArrayInput is an input type that accepts UserGroupPolicyAttachmentArray and UserGroupPolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `UserGroupPolicyAttachmentArrayInput` via:
//
//	UserGroupPolicyAttachmentArray{ UserGroupPolicyAttachmentArgs{...} }
type UserGroupPolicyAttachmentArrayInput interface {
	pulumi.Input

	ToUserGroupPolicyAttachmentArrayOutput() UserGroupPolicyAttachmentArrayOutput
	ToUserGroupPolicyAttachmentArrayOutputWithContext(context.Context) UserGroupPolicyAttachmentArrayOutput
}

type UserGroupPolicyAttachmentArray []UserGroupPolicyAttachmentInput

func (UserGroupPolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupPolicyAttachment)(nil)).Elem()
}

func (i UserGroupPolicyAttachmentArray) ToUserGroupPolicyAttachmentArrayOutput() UserGroupPolicyAttachmentArrayOutput {
	return i.ToUserGroupPolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i UserGroupPolicyAttachmentArray) ToUserGroupPolicyAttachmentArrayOutputWithContext(ctx context.Context) UserGroupPolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPolicyAttachmentArrayOutput)
}

// UserGroupPolicyAttachmentMapInput is an input type that accepts UserGroupPolicyAttachmentMap and UserGroupPolicyAttachmentMapOutput values.
// You can construct a concrete instance of `UserGroupPolicyAttachmentMapInput` via:
//
//	UserGroupPolicyAttachmentMap{ "key": UserGroupPolicyAttachmentArgs{...} }
type UserGroupPolicyAttachmentMapInput interface {
	pulumi.Input

	ToUserGroupPolicyAttachmentMapOutput() UserGroupPolicyAttachmentMapOutput
	ToUserGroupPolicyAttachmentMapOutputWithContext(context.Context) UserGroupPolicyAttachmentMapOutput
}

type UserGroupPolicyAttachmentMap map[string]UserGroupPolicyAttachmentInput

func (UserGroupPolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupPolicyAttachment)(nil)).Elem()
}

func (i UserGroupPolicyAttachmentMap) ToUserGroupPolicyAttachmentMapOutput() UserGroupPolicyAttachmentMapOutput {
	return i.ToUserGroupPolicyAttachmentMapOutputWithContext(context.Background())
}

func (i UserGroupPolicyAttachmentMap) ToUserGroupPolicyAttachmentMapOutputWithContext(ctx context.Context) UserGroupPolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserGroupPolicyAttachmentMapOutput)
}

type UserGroupPolicyAttachmentOutput struct{ *pulumi.OutputState }

func (UserGroupPolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserGroupPolicyAttachment)(nil)).Elem()
}

func (o UserGroupPolicyAttachmentOutput) ToUserGroupPolicyAttachmentOutput() UserGroupPolicyAttachmentOutput {
	return o
}

func (o UserGroupPolicyAttachmentOutput) ToUserGroupPolicyAttachmentOutputWithContext(ctx context.Context) UserGroupPolicyAttachmentOutput {
	return o
}

// The policy name.
func (o UserGroupPolicyAttachmentOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupPolicyAttachment) pulumi.StringOutput { return v.PolicyName }).(pulumi.StringOutput)
}

// Strategy types, System strategy, Custom strategy.
func (o UserGroupPolicyAttachmentOutput) PolicyType() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupPolicyAttachment) pulumi.StringOutput { return v.PolicyType }).(pulumi.StringOutput)
}

// The user group name.
func (o UserGroupPolicyAttachmentOutput) UserGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *UserGroupPolicyAttachment) pulumi.StringOutput { return v.UserGroupName }).(pulumi.StringOutput)
}

type UserGroupPolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (UserGroupPolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserGroupPolicyAttachment)(nil)).Elem()
}

func (o UserGroupPolicyAttachmentArrayOutput) ToUserGroupPolicyAttachmentArrayOutput() UserGroupPolicyAttachmentArrayOutput {
	return o
}

func (o UserGroupPolicyAttachmentArrayOutput) ToUserGroupPolicyAttachmentArrayOutputWithContext(ctx context.Context) UserGroupPolicyAttachmentArrayOutput {
	return o
}

func (o UserGroupPolicyAttachmentArrayOutput) Index(i pulumi.IntInput) UserGroupPolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserGroupPolicyAttachment {
		return vs[0].([]*UserGroupPolicyAttachment)[vs[1].(int)]
	}).(UserGroupPolicyAttachmentOutput)
}

type UserGroupPolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (UserGroupPolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserGroupPolicyAttachment)(nil)).Elem()
}

func (o UserGroupPolicyAttachmentMapOutput) ToUserGroupPolicyAttachmentMapOutput() UserGroupPolicyAttachmentMapOutput {
	return o
}

func (o UserGroupPolicyAttachmentMapOutput) ToUserGroupPolicyAttachmentMapOutputWithContext(ctx context.Context) UserGroupPolicyAttachmentMapOutput {
	return o
}

func (o UserGroupPolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) UserGroupPolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserGroupPolicyAttachment {
		return vs[0].(map[string]*UserGroupPolicyAttachment)[vs[1].(string)]
	}).(UserGroupPolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPolicyAttachmentInput)(nil)).Elem(), &UserGroupPolicyAttachment{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPolicyAttachmentArrayInput)(nil)).Elem(), UserGroupPolicyAttachmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserGroupPolicyAttachmentMapInput)(nil)).Elem(), UserGroupPolicyAttachmentMap{})
	pulumi.RegisterOutputType(UserGroupPolicyAttachmentOutput{})
	pulumi.RegisterOutputType(UserGroupPolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(UserGroupPolicyAttachmentMapOutput{})
}
