// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of iam user group policy attachments
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooPolicy, err := iam.NewPolicy(ctx, "fooPolicy", &iam.PolicyArgs{
//				PolicyName:     pulumi.String("acc-test-policy"),
//				Description:    pulumi.String("acc-test"),
//				PolicyDocument: pulumi.String("{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}"),
//			})
//			if err != nil {
//				return err
//			}
//			fooUserGroup, err := iam.NewUserGroup(ctx, "fooUserGroup", &iam.UserGroupArgs{
//				UserGroupName: pulumi.String("acc-test-group"),
//				Description:   pulumi.String("acc-test"),
//				DisplayName:   pulumi.String("acc-test"),
//			})
//			if err != nil {
//				return err
//			}
//			fooUserGroupPolicyAttachment, err := iam.NewUserGroupPolicyAttachment(ctx, "fooUserGroupPolicyAttachment", &iam.UserGroupPolicyAttachmentArgs{
//				PolicyName:    fooPolicy.PolicyName,
//				PolicyType:    pulumi.String("Custom"),
//				UserGroupName: fooUserGroup.UserGroupName,
//			})
//			if err != nil {
//				return err
//			}
//			_ = iam.GetUserGroupPolicyAttachmentsOutput(ctx, iam.GetUserGroupPolicyAttachmentsOutputArgs{
//				UserGroupName: fooUserGroupPolicyAttachment.UserGroupName,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetUserGroupPolicyAttachments(ctx *pulumi.Context, args *GetUserGroupPolicyAttachmentsArgs, opts ...pulumi.InvokeOption) (*GetUserGroupPolicyAttachmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetUserGroupPolicyAttachmentsResult
	err := ctx.Invoke("volcengine:iam/getUserGroupPolicyAttachments:getUserGroupPolicyAttachments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getUserGroupPolicyAttachments.
type GetUserGroupPolicyAttachmentsArgs struct {
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// A name of user group.
	UserGroupName string `pulumi:"userGroupName"`
}

// A collection of values returned by getUserGroupPolicyAttachments.
type GetUserGroupPolicyAttachmentsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of query.
	Policies []GetUserGroupPolicyAttachmentsPolicy `pulumi:"policies"`
	// The total count of query.
	TotalCount    int    `pulumi:"totalCount"`
	UserGroupName string `pulumi:"userGroupName"`
}

func GetUserGroupPolicyAttachmentsOutput(ctx *pulumi.Context, args GetUserGroupPolicyAttachmentsOutputArgs, opts ...pulumi.InvokeOption) GetUserGroupPolicyAttachmentsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetUserGroupPolicyAttachmentsResult, error) {
			args := v.(GetUserGroupPolicyAttachmentsArgs)
			r, err := GetUserGroupPolicyAttachments(ctx, &args, opts...)
			var s GetUserGroupPolicyAttachmentsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetUserGroupPolicyAttachmentsResultOutput)
}

// A collection of arguments for invoking getUserGroupPolicyAttachments.
type GetUserGroupPolicyAttachmentsOutputArgs struct {
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// A name of user group.
	UserGroupName pulumi.StringInput `pulumi:"userGroupName"`
}

func (GetUserGroupPolicyAttachmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserGroupPolicyAttachmentsArgs)(nil)).Elem()
}

// A collection of values returned by getUserGroupPolicyAttachments.
type GetUserGroupPolicyAttachmentsResultOutput struct{ *pulumi.OutputState }

func (GetUserGroupPolicyAttachmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserGroupPolicyAttachmentsResult)(nil)).Elem()
}

func (o GetUserGroupPolicyAttachmentsResultOutput) ToGetUserGroupPolicyAttachmentsResultOutput() GetUserGroupPolicyAttachmentsResultOutput {
	return o
}

func (o GetUserGroupPolicyAttachmentsResultOutput) ToGetUserGroupPolicyAttachmentsResultOutputWithContext(ctx context.Context) GetUserGroupPolicyAttachmentsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetUserGroupPolicyAttachmentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserGroupPolicyAttachmentsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUserGroupPolicyAttachmentsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetUserGroupPolicyAttachmentsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GetUserGroupPolicyAttachmentsResultOutput) Policies() GetUserGroupPolicyAttachmentsPolicyArrayOutput {
	return o.ApplyT(func(v GetUserGroupPolicyAttachmentsResult) []GetUserGroupPolicyAttachmentsPolicy { return v.Policies }).(GetUserGroupPolicyAttachmentsPolicyArrayOutput)
}

// The total count of query.
func (o GetUserGroupPolicyAttachmentsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserGroupPolicyAttachmentsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o GetUserGroupPolicyAttachmentsResultOutput) UserGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserGroupPolicyAttachmentsResult) string { return v.UserGroupName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetUserGroupPolicyAttachmentsResultOutput{})
}
