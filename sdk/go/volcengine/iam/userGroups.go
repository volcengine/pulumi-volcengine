// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of iam user groups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.NewUserGroup(ctx, "fooUserGroup", &iam.UserGroupArgs{
//				Description:   pulumi.String("acc-test"),
//				DisplayName:   pulumi.String("acc-test"),
//				UserGroupName: pulumi.String("acc-test-group"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = iam.UserGroups(ctx, &iam.UserGroupsArgs{
//				Query: pulumi.StringRef("acc-test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func UserGroups(ctx *pulumi.Context, args *UserGroupsArgs, opts ...pulumi.InvokeOption) (*UserGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv UserGroupsResult
	err := ctx.Invoke("volcengine:iam/userGroups:UserGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking UserGroups.
type UserGroupsArgs struct {
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Fuzzy search, supports searching for user group names, display names, and remarks.
	Query *string `pulumi:"query"`
}

// A collection of values returned by UserGroups.
type UserGroupsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	Query      *string `pulumi:"query"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The collection of query.
	UserGroups []UserGroupsUserGroup `pulumi:"userGroups"`
}

func UserGroupsOutput(ctx *pulumi.Context, args UserGroupsOutputArgs, opts ...pulumi.InvokeOption) UserGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (UserGroupsResult, error) {
			args := v.(UserGroupsArgs)
			r, err := UserGroups(ctx, &args, opts...)
			var s UserGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(UserGroupsResultOutput)
}

// A collection of arguments for invoking UserGroups.
type UserGroupsOutputArgs struct {
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Fuzzy search, supports searching for user group names, display names, and remarks.
	Query pulumi.StringPtrInput `pulumi:"query"`
}

func (UserGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupsArgs)(nil)).Elem()
}

// A collection of values returned by UserGroups.
type UserGroupsResultOutput struct{ *pulumi.OutputState }

func (UserGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserGroupsResult)(nil)).Elem()
}

func (o UserGroupsResultOutput) ToUserGroupsResultOutput() UserGroupsResultOutput {
	return o
}

func (o UserGroupsResultOutput) ToUserGroupsResultOutputWithContext(ctx context.Context) UserGroupsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o UserGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v UserGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o UserGroupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o UserGroupsResultOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserGroupsResult) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o UserGroupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v UserGroupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The collection of query.
func (o UserGroupsResultOutput) UserGroups() UserGroupsUserGroupArrayOutput {
	return o.ApplyT(func(v UserGroupsResult) []UserGroupsUserGroup { return v.UserGroups }).(UserGroupsUserGroupArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(UserGroupsResultOutput{})
}
