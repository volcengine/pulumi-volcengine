// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iam

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of iam roles
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/iam"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iam.Roles(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Roles(ctx *pulumi.Context, args *RolesArgs, opts ...pulumi.InvokeOption) (*RolesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv RolesResult
	err := ctx.Invoke("volcengine:iam/roles:Roles", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Roles.
type RolesArgs struct {
	// A Name Regex of Role.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The query field of Role.
	Query *string `pulumi:"query"`
	// The name of the Role, comma separated.
	RoleName *string `pulumi:"roleName"`
}

// A collection of values returned by Roles.
type RolesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	Query      *string `pulumi:"query"`
	// The name of the Role.
	RoleName *string `pulumi:"roleName"`
	// The collection of Role query.
	Roles []RolesRole `pulumi:"roles"`
	// The total count of Role query.
	TotalCount int `pulumi:"totalCount"`
}

func RolesOutput(ctx *pulumi.Context, args RolesOutputArgs, opts ...pulumi.InvokeOption) RolesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (RolesResult, error) {
			args := v.(RolesArgs)
			r, err := Roles(ctx, &args, opts...)
			var s RolesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(RolesResultOutput)
}

// A collection of arguments for invoking Roles.
type RolesOutputArgs struct {
	// A Name Regex of Role.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The query field of Role.
	Query pulumi.StringPtrInput `pulumi:"query"`
	// The name of the Role, comma separated.
	RoleName pulumi.StringPtrInput `pulumi:"roleName"`
}

func (RolesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolesArgs)(nil)).Elem()
}

// A collection of values returned by Roles.
type RolesResultOutput struct{ *pulumi.OutputState }

func (RolesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolesResult)(nil)).Elem()
}

func (o RolesResultOutput) ToRolesResultOutput() RolesResultOutput {
	return o
}

func (o RolesResultOutput) ToRolesResultOutputWithContext(ctx context.Context) RolesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o RolesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RolesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o RolesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o RolesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o RolesResultOutput) Query() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolesResult) *string { return v.Query }).(pulumi.StringPtrOutput)
}

// The name of the Role.
func (o RolesResultOutput) RoleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RolesResult) *string { return v.RoleName }).(pulumi.StringPtrOutput)
}

// The collection of Role query.
func (o RolesResultOutput) Roles() RolesRoleArrayOutput {
	return o.ApplyT(func(v RolesResult) []RolesRole { return v.Roles }).(RolesRoleArrayOutput)
}

// The total count of Role query.
func (o RolesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v RolesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(RolesResultOutput{})
}
