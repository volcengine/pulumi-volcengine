// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage cen inter region bandwidth
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cen.NewInterRegionBandwidth(ctx, "foo", &cen.InterRegionBandwidthArgs{
//				Bandwidth:     pulumi.Int(1),
//				CenId:         pulumi.String("cen-274vsbhwvvb407fap8sp611w7"),
//				LocalRegionId: pulumi.String("cn-north-3"),
//				PeerRegionId:  pulumi.String("cn-zhangjiakou"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// CenInterRegionBandwidth can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:cen/interRegionBandwidth:InterRegionBandwidth default cirb-3tex2x1cwd4c6c0v****
//
// ```
type InterRegionBandwidth struct {
	pulumi.CustomResourceState

	// The bandwidth of the cen inter region bandwidth.
	Bandwidth pulumi.IntOutput `pulumi:"bandwidth"`
	// The cen ID of the cen inter region bandwidth.
	CenId pulumi.StringOutput `pulumi:"cenId"`
	// The create time of the cen inter region bandwidth.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The ID of the cen inter region bandwidth.
	InterRegionBandwidthId pulumi.StringOutput `pulumi:"interRegionBandwidthId"`
	// The local region id of the cen inter region bandwidth.
	LocalRegionId pulumi.StringOutput `pulumi:"localRegionId"`
	// The peer region id of the cen inter region bandwidth.
	PeerRegionId pulumi.StringOutput `pulumi:"peerRegionId"`
	// The status of the cen inter region bandwidth.
	Status pulumi.StringOutput `pulumi:"status"`
	// The update time of the cen inter region bandwidth.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewInterRegionBandwidth registers a new resource with the given unique name, arguments, and options.
func NewInterRegionBandwidth(ctx *pulumi.Context,
	name string, args *InterRegionBandwidthArgs, opts ...pulumi.ResourceOption) (*InterRegionBandwidth, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bandwidth == nil {
		return nil, errors.New("invalid value for required argument 'Bandwidth'")
	}
	if args.CenId == nil {
		return nil, errors.New("invalid value for required argument 'CenId'")
	}
	if args.LocalRegionId == nil {
		return nil, errors.New("invalid value for required argument 'LocalRegionId'")
	}
	if args.PeerRegionId == nil {
		return nil, errors.New("invalid value for required argument 'PeerRegionId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource InterRegionBandwidth
	err := ctx.RegisterResource("volcengine:cen/interRegionBandwidth:InterRegionBandwidth", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterRegionBandwidth gets an existing InterRegionBandwidth resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterRegionBandwidth(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterRegionBandwidthState, opts ...pulumi.ResourceOption) (*InterRegionBandwidth, error) {
	var resource InterRegionBandwidth
	err := ctx.ReadResource("volcengine:cen/interRegionBandwidth:InterRegionBandwidth", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterRegionBandwidth resources.
type interRegionBandwidthState struct {
	// The bandwidth of the cen inter region bandwidth.
	Bandwidth *int `pulumi:"bandwidth"`
	// The cen ID of the cen inter region bandwidth.
	CenId *string `pulumi:"cenId"`
	// The create time of the cen inter region bandwidth.
	CreationTime *string `pulumi:"creationTime"`
	// The ID of the cen inter region bandwidth.
	InterRegionBandwidthId *string `pulumi:"interRegionBandwidthId"`
	// The local region id of the cen inter region bandwidth.
	LocalRegionId *string `pulumi:"localRegionId"`
	// The peer region id of the cen inter region bandwidth.
	PeerRegionId *string `pulumi:"peerRegionId"`
	// The status of the cen inter region bandwidth.
	Status *string `pulumi:"status"`
	// The update time of the cen inter region bandwidth.
	UpdateTime *string `pulumi:"updateTime"`
}

type InterRegionBandwidthState struct {
	// The bandwidth of the cen inter region bandwidth.
	Bandwidth pulumi.IntPtrInput
	// The cen ID of the cen inter region bandwidth.
	CenId pulumi.StringPtrInput
	// The create time of the cen inter region bandwidth.
	CreationTime pulumi.StringPtrInput
	// The ID of the cen inter region bandwidth.
	InterRegionBandwidthId pulumi.StringPtrInput
	// The local region id of the cen inter region bandwidth.
	LocalRegionId pulumi.StringPtrInput
	// The peer region id of the cen inter region bandwidth.
	PeerRegionId pulumi.StringPtrInput
	// The status of the cen inter region bandwidth.
	Status pulumi.StringPtrInput
	// The update time of the cen inter region bandwidth.
	UpdateTime pulumi.StringPtrInput
}

func (InterRegionBandwidthState) ElementType() reflect.Type {
	return reflect.TypeOf((*interRegionBandwidthState)(nil)).Elem()
}

type interRegionBandwidthArgs struct {
	// The bandwidth of the cen inter region bandwidth.
	Bandwidth int `pulumi:"bandwidth"`
	// The cen ID of the cen inter region bandwidth.
	CenId string `pulumi:"cenId"`
	// The local region id of the cen inter region bandwidth.
	LocalRegionId string `pulumi:"localRegionId"`
	// The peer region id of the cen inter region bandwidth.
	PeerRegionId string `pulumi:"peerRegionId"`
}

// The set of arguments for constructing a InterRegionBandwidth resource.
type InterRegionBandwidthArgs struct {
	// The bandwidth of the cen inter region bandwidth.
	Bandwidth pulumi.IntInput
	// The cen ID of the cen inter region bandwidth.
	CenId pulumi.StringInput
	// The local region id of the cen inter region bandwidth.
	LocalRegionId pulumi.StringInput
	// The peer region id of the cen inter region bandwidth.
	PeerRegionId pulumi.StringInput
}

func (InterRegionBandwidthArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interRegionBandwidthArgs)(nil)).Elem()
}

type InterRegionBandwidthInput interface {
	pulumi.Input

	ToInterRegionBandwidthOutput() InterRegionBandwidthOutput
	ToInterRegionBandwidthOutputWithContext(ctx context.Context) InterRegionBandwidthOutput
}

func (*InterRegionBandwidth) ElementType() reflect.Type {
	return reflect.TypeOf((**InterRegionBandwidth)(nil)).Elem()
}

func (i *InterRegionBandwidth) ToInterRegionBandwidthOutput() InterRegionBandwidthOutput {
	return i.ToInterRegionBandwidthOutputWithContext(context.Background())
}

func (i *InterRegionBandwidth) ToInterRegionBandwidthOutputWithContext(ctx context.Context) InterRegionBandwidthOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterRegionBandwidthOutput)
}

// InterRegionBandwidthArrayInput is an input type that accepts InterRegionBandwidthArray and InterRegionBandwidthArrayOutput values.
// You can construct a concrete instance of `InterRegionBandwidthArrayInput` via:
//
//	InterRegionBandwidthArray{ InterRegionBandwidthArgs{...} }
type InterRegionBandwidthArrayInput interface {
	pulumi.Input

	ToInterRegionBandwidthArrayOutput() InterRegionBandwidthArrayOutput
	ToInterRegionBandwidthArrayOutputWithContext(context.Context) InterRegionBandwidthArrayOutput
}

type InterRegionBandwidthArray []InterRegionBandwidthInput

func (InterRegionBandwidthArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterRegionBandwidth)(nil)).Elem()
}

func (i InterRegionBandwidthArray) ToInterRegionBandwidthArrayOutput() InterRegionBandwidthArrayOutput {
	return i.ToInterRegionBandwidthArrayOutputWithContext(context.Background())
}

func (i InterRegionBandwidthArray) ToInterRegionBandwidthArrayOutputWithContext(ctx context.Context) InterRegionBandwidthArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterRegionBandwidthArrayOutput)
}

// InterRegionBandwidthMapInput is an input type that accepts InterRegionBandwidthMap and InterRegionBandwidthMapOutput values.
// You can construct a concrete instance of `InterRegionBandwidthMapInput` via:
//
//	InterRegionBandwidthMap{ "key": InterRegionBandwidthArgs{...} }
type InterRegionBandwidthMapInput interface {
	pulumi.Input

	ToInterRegionBandwidthMapOutput() InterRegionBandwidthMapOutput
	ToInterRegionBandwidthMapOutputWithContext(context.Context) InterRegionBandwidthMapOutput
}

type InterRegionBandwidthMap map[string]InterRegionBandwidthInput

func (InterRegionBandwidthMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterRegionBandwidth)(nil)).Elem()
}

func (i InterRegionBandwidthMap) ToInterRegionBandwidthMapOutput() InterRegionBandwidthMapOutput {
	return i.ToInterRegionBandwidthMapOutputWithContext(context.Background())
}

func (i InterRegionBandwidthMap) ToInterRegionBandwidthMapOutputWithContext(ctx context.Context) InterRegionBandwidthMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterRegionBandwidthMapOutput)
}

type InterRegionBandwidthOutput struct{ *pulumi.OutputState }

func (InterRegionBandwidthOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterRegionBandwidth)(nil)).Elem()
}

func (o InterRegionBandwidthOutput) ToInterRegionBandwidthOutput() InterRegionBandwidthOutput {
	return o
}

func (o InterRegionBandwidthOutput) ToInterRegionBandwidthOutputWithContext(ctx context.Context) InterRegionBandwidthOutput {
	return o
}

// The bandwidth of the cen inter region bandwidth.
func (o InterRegionBandwidthOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v *InterRegionBandwidth) pulumi.IntOutput { return v.Bandwidth }).(pulumi.IntOutput)
}

// The cen ID of the cen inter region bandwidth.
func (o InterRegionBandwidthOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v *InterRegionBandwidth) pulumi.StringOutput { return v.CenId }).(pulumi.StringOutput)
}

// The create time of the cen inter region bandwidth.
func (o InterRegionBandwidthOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *InterRegionBandwidth) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The ID of the cen inter region bandwidth.
func (o InterRegionBandwidthOutput) InterRegionBandwidthId() pulumi.StringOutput {
	return o.ApplyT(func(v *InterRegionBandwidth) pulumi.StringOutput { return v.InterRegionBandwidthId }).(pulumi.StringOutput)
}

// The local region id of the cen inter region bandwidth.
func (o InterRegionBandwidthOutput) LocalRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *InterRegionBandwidth) pulumi.StringOutput { return v.LocalRegionId }).(pulumi.StringOutput)
}

// The peer region id of the cen inter region bandwidth.
func (o InterRegionBandwidthOutput) PeerRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *InterRegionBandwidth) pulumi.StringOutput { return v.PeerRegionId }).(pulumi.StringOutput)
}

// The status of the cen inter region bandwidth.
func (o InterRegionBandwidthOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *InterRegionBandwidth) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The update time of the cen inter region bandwidth.
func (o InterRegionBandwidthOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *InterRegionBandwidth) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type InterRegionBandwidthArrayOutput struct{ *pulumi.OutputState }

func (InterRegionBandwidthArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterRegionBandwidth)(nil)).Elem()
}

func (o InterRegionBandwidthArrayOutput) ToInterRegionBandwidthArrayOutput() InterRegionBandwidthArrayOutput {
	return o
}

func (o InterRegionBandwidthArrayOutput) ToInterRegionBandwidthArrayOutputWithContext(ctx context.Context) InterRegionBandwidthArrayOutput {
	return o
}

func (o InterRegionBandwidthArrayOutput) Index(i pulumi.IntInput) InterRegionBandwidthOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterRegionBandwidth {
		return vs[0].([]*InterRegionBandwidth)[vs[1].(int)]
	}).(InterRegionBandwidthOutput)
}

type InterRegionBandwidthMapOutput struct{ *pulumi.OutputState }

func (InterRegionBandwidthMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterRegionBandwidth)(nil)).Elem()
}

func (o InterRegionBandwidthMapOutput) ToInterRegionBandwidthMapOutput() InterRegionBandwidthMapOutput {
	return o
}

func (o InterRegionBandwidthMapOutput) ToInterRegionBandwidthMapOutputWithContext(ctx context.Context) InterRegionBandwidthMapOutput {
	return o
}

func (o InterRegionBandwidthMapOutput) MapIndex(k pulumi.StringInput) InterRegionBandwidthOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterRegionBandwidth {
		return vs[0].(map[string]*InterRegionBandwidth)[vs[1].(string)]
	}).(InterRegionBandwidthOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterRegionBandwidthInput)(nil)).Elem(), &InterRegionBandwidth{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterRegionBandwidthArrayInput)(nil)).Elem(), InterRegionBandwidthArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterRegionBandwidthMapInput)(nil)).Elem(), InterRegionBandwidthMap{})
	pulumi.RegisterOutputType(InterRegionBandwidthOutput{})
	pulumi.RegisterOutputType(InterRegionBandwidthArrayOutput{})
	pulumi.RegisterOutputType(InterRegionBandwidthMapOutput{})
}
