// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage cen attach instance
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cen.NewAttachInstance(ctx, "foo", &cen.AttachInstanceArgs{
//				CenId:            pulumi.String("cen-12ar8uclj68sg17q7y20v9gil"),
//				InstanceId:       pulumi.String("vpc-2fe5dpn0av2m859gp68rhk2dc"),
//				InstanceRegionId: pulumi.String("cn-beijing"),
//				InstanceType:     pulumi.String("VPC"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = cen.NewAttachInstance(ctx, "foo1", &cen.AttachInstanceArgs{
//				CenId:            pulumi.String("cen-12ar8uclj68sg17q7y20v9gil"),
//				InstanceId:       pulumi.String("vpc-in66ktl5t24g8gbssz0sqva1"),
//				InstanceRegionId: pulumi.String("cn-beijing"),
//				InstanceType:     pulumi.String("VPC"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Cen attach instance can be imported using the CenId:InstanceId:InstanceType:RegionId, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:cen/attachInstance:AttachInstance default cen-7qthudw0ll6jmc***:vpc-2fexiqjlgjif45oxruvso****:VPC:cn-beijing
//
// ```
type AttachInstance struct {
	pulumi.CustomResourceState

	// The ID of the cen.
	CenId pulumi.StringOutput `pulumi:"cenId"`
	// The create time of the cen attaching instance.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The ID of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The owner ID of the instance.
	InstanceOwnerId pulumi.StringOutput `pulumi:"instanceOwnerId"`
	// The region ID of the instance.
	InstanceRegionId pulumi.StringOutput `pulumi:"instanceRegionId"`
	// The type of the instance. Valid values: `VPC`, `DCGW`.
	InstanceType pulumi.StringOutput `pulumi:"instanceType"`
	// The status of the cen attaching instance.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewAttachInstance registers a new resource with the given unique name, arguments, and options.
func NewAttachInstance(ctx *pulumi.Context,
	name string, args *AttachInstanceArgs, opts ...pulumi.ResourceOption) (*AttachInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CenId == nil {
		return nil, errors.New("invalid value for required argument 'CenId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.InstanceRegionId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceRegionId'")
	}
	if args.InstanceType == nil {
		return nil, errors.New("invalid value for required argument 'InstanceType'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AttachInstance
	err := ctx.RegisterResource("volcengine:cen/attachInstance:AttachInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAttachInstance gets an existing AttachInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAttachInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AttachInstanceState, opts ...pulumi.ResourceOption) (*AttachInstance, error) {
	var resource AttachInstance
	err := ctx.ReadResource("volcengine:cen/attachInstance:AttachInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AttachInstance resources.
type attachInstanceState struct {
	// The ID of the cen.
	CenId *string `pulumi:"cenId"`
	// The create time of the cen attaching instance.
	CreationTime *string `pulumi:"creationTime"`
	// The ID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// The owner ID of the instance.
	InstanceOwnerId *string `pulumi:"instanceOwnerId"`
	// The region ID of the instance.
	InstanceRegionId *string `pulumi:"instanceRegionId"`
	// The type of the instance. Valid values: `VPC`, `DCGW`.
	InstanceType *string `pulumi:"instanceType"`
	// The status of the cen attaching instance.
	Status *string `pulumi:"status"`
}

type AttachInstanceState struct {
	// The ID of the cen.
	CenId pulumi.StringPtrInput
	// The create time of the cen attaching instance.
	CreationTime pulumi.StringPtrInput
	// The ID of the instance.
	InstanceId pulumi.StringPtrInput
	// The owner ID of the instance.
	InstanceOwnerId pulumi.StringPtrInput
	// The region ID of the instance.
	InstanceRegionId pulumi.StringPtrInput
	// The type of the instance. Valid values: `VPC`, `DCGW`.
	InstanceType pulumi.StringPtrInput
	// The status of the cen attaching instance.
	Status pulumi.StringPtrInput
}

func (AttachInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*attachInstanceState)(nil)).Elem()
}

type attachInstanceArgs struct {
	// The ID of the cen.
	CenId string `pulumi:"cenId"`
	// The ID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// The owner ID of the instance.
	InstanceOwnerId *string `pulumi:"instanceOwnerId"`
	// The region ID of the instance.
	InstanceRegionId string `pulumi:"instanceRegionId"`
	// The type of the instance. Valid values: `VPC`, `DCGW`.
	InstanceType string `pulumi:"instanceType"`
}

// The set of arguments for constructing a AttachInstance resource.
type AttachInstanceArgs struct {
	// The ID of the cen.
	CenId pulumi.StringInput
	// The ID of the instance.
	InstanceId pulumi.StringInput
	// The owner ID of the instance.
	InstanceOwnerId pulumi.StringPtrInput
	// The region ID of the instance.
	InstanceRegionId pulumi.StringInput
	// The type of the instance. Valid values: `VPC`, `DCGW`.
	InstanceType pulumi.StringInput
}

func (AttachInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*attachInstanceArgs)(nil)).Elem()
}

type AttachInstanceInput interface {
	pulumi.Input

	ToAttachInstanceOutput() AttachInstanceOutput
	ToAttachInstanceOutputWithContext(ctx context.Context) AttachInstanceOutput
}

func (*AttachInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachInstance)(nil)).Elem()
}

func (i *AttachInstance) ToAttachInstanceOutput() AttachInstanceOutput {
	return i.ToAttachInstanceOutputWithContext(context.Background())
}

func (i *AttachInstance) ToAttachInstanceOutputWithContext(ctx context.Context) AttachInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachInstanceOutput)
}

// AttachInstanceArrayInput is an input type that accepts AttachInstanceArray and AttachInstanceArrayOutput values.
// You can construct a concrete instance of `AttachInstanceArrayInput` via:
//
//	AttachInstanceArray{ AttachInstanceArgs{...} }
type AttachInstanceArrayInput interface {
	pulumi.Input

	ToAttachInstanceArrayOutput() AttachInstanceArrayOutput
	ToAttachInstanceArrayOutputWithContext(context.Context) AttachInstanceArrayOutput
}

type AttachInstanceArray []AttachInstanceInput

func (AttachInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachInstance)(nil)).Elem()
}

func (i AttachInstanceArray) ToAttachInstanceArrayOutput() AttachInstanceArrayOutput {
	return i.ToAttachInstanceArrayOutputWithContext(context.Background())
}

func (i AttachInstanceArray) ToAttachInstanceArrayOutputWithContext(ctx context.Context) AttachInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachInstanceArrayOutput)
}

// AttachInstanceMapInput is an input type that accepts AttachInstanceMap and AttachInstanceMapOutput values.
// You can construct a concrete instance of `AttachInstanceMapInput` via:
//
//	AttachInstanceMap{ "key": AttachInstanceArgs{...} }
type AttachInstanceMapInput interface {
	pulumi.Input

	ToAttachInstanceMapOutput() AttachInstanceMapOutput
	ToAttachInstanceMapOutputWithContext(context.Context) AttachInstanceMapOutput
}

type AttachInstanceMap map[string]AttachInstanceInput

func (AttachInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachInstance)(nil)).Elem()
}

func (i AttachInstanceMap) ToAttachInstanceMapOutput() AttachInstanceMapOutput {
	return i.ToAttachInstanceMapOutputWithContext(context.Background())
}

func (i AttachInstanceMap) ToAttachInstanceMapOutputWithContext(ctx context.Context) AttachInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AttachInstanceMapOutput)
}

type AttachInstanceOutput struct{ *pulumi.OutputState }

func (AttachInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AttachInstance)(nil)).Elem()
}

func (o AttachInstanceOutput) ToAttachInstanceOutput() AttachInstanceOutput {
	return o
}

func (o AttachInstanceOutput) ToAttachInstanceOutputWithContext(ctx context.Context) AttachInstanceOutput {
	return o
}

// The ID of the cen.
func (o AttachInstanceOutput) CenId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachInstance) pulumi.StringOutput { return v.CenId }).(pulumi.StringOutput)
}

// The create time of the cen attaching instance.
func (o AttachInstanceOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachInstance) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The ID of the instance.
func (o AttachInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachInstance) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The owner ID of the instance.
func (o AttachInstanceOutput) InstanceOwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachInstance) pulumi.StringOutput { return v.InstanceOwnerId }).(pulumi.StringOutput)
}

// The region ID of the instance.
func (o AttachInstanceOutput) InstanceRegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachInstance) pulumi.StringOutput { return v.InstanceRegionId }).(pulumi.StringOutput)
}

// The type of the instance. Valid values: `VPC`, `DCGW`.
func (o AttachInstanceOutput) InstanceType() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachInstance) pulumi.StringOutput { return v.InstanceType }).(pulumi.StringOutput)
}

// The status of the cen attaching instance.
func (o AttachInstanceOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *AttachInstance) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type AttachInstanceArrayOutput struct{ *pulumi.OutputState }

func (AttachInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AttachInstance)(nil)).Elem()
}

func (o AttachInstanceArrayOutput) ToAttachInstanceArrayOutput() AttachInstanceArrayOutput {
	return o
}

func (o AttachInstanceArrayOutput) ToAttachInstanceArrayOutputWithContext(ctx context.Context) AttachInstanceArrayOutput {
	return o
}

func (o AttachInstanceArrayOutput) Index(i pulumi.IntInput) AttachInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AttachInstance {
		return vs[0].([]*AttachInstance)[vs[1].(int)]
	}).(AttachInstanceOutput)
}

type AttachInstanceMapOutput struct{ *pulumi.OutputState }

func (AttachInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AttachInstance)(nil)).Elem()
}

func (o AttachInstanceMapOutput) ToAttachInstanceMapOutput() AttachInstanceMapOutput {
	return o
}

func (o AttachInstanceMapOutput) ToAttachInstanceMapOutputWithContext(ctx context.Context) AttachInstanceMapOutput {
	return o
}

func (o AttachInstanceMapOutput) MapIndex(k pulumi.StringInput) AttachInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AttachInstance {
		return vs[0].(map[string]*AttachInstance)[vs[1].(string)]
	}).(AttachInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AttachInstanceInput)(nil)).Elem(), &AttachInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachInstanceArrayInput)(nil)).Elem(), AttachInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AttachInstanceMapInput)(nil)).Elem(), AttachInstanceMap{})
	pulumi.RegisterOutputType(AttachInstanceOutput{})
	pulumi.RegisterOutputType(AttachInstanceArrayOutput{})
	pulumi.RegisterOutputType(AttachInstanceMapOutput{})
}
