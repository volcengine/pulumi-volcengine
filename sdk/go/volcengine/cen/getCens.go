// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cen

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cens
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cen"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// var fooCen []*cen.Cen
//
//	for index := 0; index < 2; index++ {
//	    key0 := index
//	    _ := index
//
// __res, err := cen.NewCen(ctx, fmt.Sprintf("fooCen-%v", key0), &cen.CenArgs{
// CenName: pulumi.String("acc-test-cen"),
// Description: pulumi.String("acc-test"),
// ProjectName: pulumi.String("default"),
// Tags: cen.CenTagArray{
// &cen.CenTagArgs{
// Key: pulumi.String("k1"),
// Value: pulumi.String("v1"),
// },
// },
// })
// if err != nil {
// return err
// }
// fooCen = append(fooCen, __res)
// }
// _ = cen.GetCensOutput(ctx, cen.GetCensOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:cen-getCens:getCens.pp:14,9-21),
// }, nil);
// return nil
// })
// }
// ```
func GetCens(ctx *pulumi.Context, args *GetCensArgs, opts ...pulumi.InvokeOption) (*GetCensResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetCensResult
	err := ctx.Invoke("volcengine:cen/getCens:getCens", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCens.
type GetCensArgs struct {
	// A list of cen names.
	CenNames []string `pulumi:"cenNames"`
	// A list of cen IDs.
	Ids []string `pulumi:"ids"`
	// A Name Regex of cen.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Tags.
	Tags []GetCensTag `pulumi:"tags"`
}

// A collection of values returned by getCens.
type GetCensResult struct {
	CenNames []string `pulumi:"cenNames"`
	// The collection of cen query.
	Cens []GetCensCen `pulumi:"cens"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// Tags.
	Tags []GetCensTag `pulumi:"tags"`
	// The total count of cen query.
	TotalCount int `pulumi:"totalCount"`
}

func GetCensOutput(ctx *pulumi.Context, args GetCensOutputArgs, opts ...pulumi.InvokeOption) GetCensResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetCensResult, error) {
			args := v.(GetCensArgs)
			r, err := GetCens(ctx, &args, opts...)
			var s GetCensResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetCensResultOutput)
}

// A collection of arguments for invoking getCens.
type GetCensOutputArgs struct {
	// A list of cen names.
	CenNames pulumi.StringArrayInput `pulumi:"cenNames"`
	// A list of cen IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of cen.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Tags.
	Tags GetCensTagArrayInput `pulumi:"tags"`
}

func (GetCensOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCensArgs)(nil)).Elem()
}

// A collection of values returned by getCens.
type GetCensResultOutput struct{ *pulumi.OutputState }

func (GetCensResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCensResult)(nil)).Elem()
}

func (o GetCensResultOutput) ToGetCensResultOutput() GetCensResultOutput {
	return o
}

func (o GetCensResultOutput) ToGetCensResultOutputWithContext(ctx context.Context) GetCensResultOutput {
	return o
}

func (o GetCensResultOutput) CenNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCensResult) []string { return v.CenNames }).(pulumi.StringArrayOutput)
}

// The collection of cen query.
func (o GetCensResultOutput) Cens() GetCensCenArrayOutput {
	return o.ApplyT(func(v GetCensResult) []GetCensCen { return v.Cens }).(GetCensCenArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetCensResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetCensResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetCensResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetCensResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetCensResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCensResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetCensResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetCensResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// Tags.
func (o GetCensResultOutput) Tags() GetCensTagArrayOutput {
	return o.ApplyT(func(v GetCensResult) []GetCensTag { return v.Tags }).(GetCensTagArrayOutput)
}

// The total count of cen query.
func (o GetCensResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetCensResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetCensResultOutput{})
}
