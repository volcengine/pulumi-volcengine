// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vmp notify templates
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := vmp.NewNotifyTemplate(ctx, "foo", &vmp.NotifyTemplateArgs{
//				Description: pulumi.String("acc-test-vmp"),
//				Channel:     pulumi.String("WeComBotWebhook"),
//				Active: &vmp.NotifyTemplateActiveArgs{
//					Title:   pulumi.String("acc-test-active-template-title"),
//					Content: pulumi.String("acc-test-active-template-content"),
//				},
//				Resolved: &vmp.NotifyTemplateResolvedArgs{
//					Title:   pulumi.String("acc-test-resolved-template-title"),
//					Content: pulumi.String("acc-test-resolved-template-content"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = vmp.GetNotifyTemplatesOutput(ctx, vmp.GetNotifyTemplatesOutputArgs{
//				Ids: pulumi.StringArray{
//					foo.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.vmp.NotifyTemplates has been deprecated in favor of volcengine.vmp.getNotifyTemplates
func NotifyTemplates(ctx *pulumi.Context, args *NotifyTemplatesArgs, opts ...pulumi.InvokeOption) (*NotifyTemplatesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv NotifyTemplatesResult
	err := ctx.Invoke("volcengine:vmp/notifyTemplates:NotifyTemplates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking NotifyTemplates.
type NotifyTemplatesArgs struct {
	// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
	Channel *string `pulumi:"channel"`
	// A list of IDs.
	Ids []string `pulumi:"ids"`
	// The name of notify template. This field support fuzzy query.
	Name *string `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by NotifyTemplates.
type NotifyTemplatesResult struct {
	// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
	Channel *string `pulumi:"channel"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of notify template.
	Name      *string `pulumi:"name"`
	NameRegex *string `pulumi:"nameRegex"`
	// The collection of query.
	NotifyTemplates []NotifyTemplatesNotifyTemplate `pulumi:"notifyTemplates"`
	OutputFile      *string                         `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func NotifyTemplatesOutput(ctx *pulumi.Context, args NotifyTemplatesOutputArgs, opts ...pulumi.InvokeOption) NotifyTemplatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (NotifyTemplatesResult, error) {
			args := v.(NotifyTemplatesArgs)
			r, err := NotifyTemplates(ctx, &args, opts...)
			var s NotifyTemplatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(NotifyTemplatesResultOutput)
}

// A collection of arguments for invoking NotifyTemplates.
type NotifyTemplatesOutputArgs struct {
	// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
	Channel pulumi.StringPtrInput `pulumi:"channel"`
	// A list of IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of notify template. This field support fuzzy query.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (NotifyTemplatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyTemplatesArgs)(nil)).Elem()
}

// A collection of values returned by NotifyTemplates.
type NotifyTemplatesResultOutput struct{ *pulumi.OutputState }

func (NotifyTemplatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyTemplatesResult)(nil)).Elem()
}

func (o NotifyTemplatesResultOutput) ToNotifyTemplatesResultOutput() NotifyTemplatesResultOutput {
	return o
}

func (o NotifyTemplatesResultOutput) ToNotifyTemplatesResultOutputWithContext(ctx context.Context) NotifyTemplatesResultOutput {
	return o
}

// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
func (o NotifyTemplatesResultOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotifyTemplatesResult) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o NotifyTemplatesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NotifyTemplatesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o NotifyTemplatesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotifyTemplatesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of notify template.
func (o NotifyTemplatesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotifyTemplatesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o NotifyTemplatesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotifyTemplatesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o NotifyTemplatesResultOutput) NotifyTemplates() NotifyTemplatesNotifyTemplateArrayOutput {
	return o.ApplyT(func(v NotifyTemplatesResult) []NotifyTemplatesNotifyTemplate { return v.NotifyTemplates }).(NotifyTemplatesNotifyTemplateArrayOutput)
}

func (o NotifyTemplatesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotifyTemplatesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o NotifyTemplatesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v NotifyTemplatesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(NotifyTemplatesResultOutput{})
}
