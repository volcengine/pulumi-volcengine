// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vmp contact groups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooContact, err := vmp.NewContact(ctx, "fooContact", &vmp.ContactArgs{
//				Email: pulumi.String("acctest1@tftest.com"),
//				Webhook: &vmp.ContactWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//				LarkBotWebhook: &vmp.ContactLarkBotWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//				DingTalkBotWebhook: &vmp.ContactDingTalkBotWebhookArgs{
//					Address: pulumi.String("https://www.dingacctest1.com"),
//					AtMobiles: pulumi.StringArray{
//						pulumi.String("18046891812"),
//					},
//				},
//				PhoneNumber: &vmp.ContactPhoneNumberArgs{
//					CountryCode: pulumi.String("+86"),
//					Number:      pulumi.String("18310101010"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			foo1, err := vmp.NewContact(ctx, "foo1", &vmp.ContactArgs{
//				Email: pulumi.String("acctest2@tftest.com"),
//				Webhook: &vmp.ContactWebhookArgs{
//					Address: pulumi.String("https://www.acctest2.com"),
//				},
//				LarkBotWebhook: &vmp.ContactLarkBotWebhookArgs{
//					Address: pulumi.String("https://www.acctest2.com"),
//				},
//				DingTalkBotWebhook: &vmp.ContactDingTalkBotWebhookArgs{
//					Address: pulumi.String("https://www.dingacctest2.com"),
//					AtMobiles: pulumi.StringArray{
//						pulumi.String("18046891813"),
//					},
//				},
//				PhoneNumber: &vmp.ContactPhoneNumberArgs{
//					CountryCode: pulumi.String("+86"),
//					Number:      pulumi.String("18310101011"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooContactGroup, err := vmp.NewContactGroup(ctx, "fooContactGroup", &vmp.ContactGroupArgs{
//				ContactIds: pulumi.StringArray{
//					fooContact.ID(),
//					foo1.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = vmp.GetContactGroupsOutput(ctx, vmp.GetContactGroupsOutputArgs{
//				Ids: pulumi.StringArray{
//					fooContactGroup.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetContactGroups(ctx *pulumi.Context, args *GetContactGroupsArgs, opts ...pulumi.InvokeOption) (*GetContactGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetContactGroupsResult
	err := ctx.Invoke("volcengine:vmp/getContactGroups:getContactGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContactGroups.
type GetContactGroupsArgs struct {
	// A list of contact group ids.
	Ids []string `pulumi:"ids"`
	// The name of contact group.
	Name *string `pulumi:"name"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getContactGroups.
type GetContactGroupsResult struct {
	// The collection of query.
	ContactGroups []GetContactGroupsContactGroup `pulumi:"contactGroups"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of contact group.
	Name       *string `pulumi:"name"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetContactGroupsOutput(ctx *pulumi.Context, args GetContactGroupsOutputArgs, opts ...pulumi.InvokeOption) GetContactGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetContactGroupsResult, error) {
			args := v.(GetContactGroupsArgs)
			r, err := GetContactGroups(ctx, &args, opts...)
			var s GetContactGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetContactGroupsResultOutput)
}

// A collection of arguments for invoking getContactGroups.
type GetContactGroupsOutputArgs struct {
	// A list of contact group ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of contact group.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetContactGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContactGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getContactGroups.
type GetContactGroupsResultOutput struct{ *pulumi.OutputState }

func (GetContactGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContactGroupsResult)(nil)).Elem()
}

func (o GetContactGroupsResultOutput) ToGetContactGroupsResultOutput() GetContactGroupsResultOutput {
	return o
}

func (o GetContactGroupsResultOutput) ToGetContactGroupsResultOutputWithContext(ctx context.Context) GetContactGroupsResultOutput {
	return o
}

// The collection of query.
func (o GetContactGroupsResultOutput) ContactGroups() GetContactGroupsContactGroupArrayOutput {
	return o.ApplyT(func(v GetContactGroupsResult) []GetContactGroupsContactGroup { return v.ContactGroups }).(GetContactGroupsContactGroupArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetContactGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetContactGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetContactGroupsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContactGroupsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of contact group.
func (o GetContactGroupsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContactGroupsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetContactGroupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContactGroupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetContactGroupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetContactGroupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetContactGroupsResultOutput{})
}
