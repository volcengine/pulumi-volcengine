// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vmp notify group policy
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vmp.NewNotifyGroupPolicy(ctx, "foo", &vmp.NotifyGroupPolicyArgs{
//				Description: pulumi.String("acc-test-1"),
//				Levels: vmp.NotifyGroupPolicyLevelArray{
//					&vmp.NotifyGroupPolicyLevelArgs{
//						GroupBies: pulumi.StringArray{
//							pulumi.String("__rule__"),
//						},
//						GroupInterval:  pulumi.String("30"),
//						GroupWait:      pulumi.String("35"),
//						Level:          pulumi.String("P2"),
//						RepeatInterval: pulumi.String("30"),
//					},
//					&vmp.NotifyGroupPolicyLevelArgs{
//						GroupBies: pulumi.StringArray{
//							pulumi.String("__rule__"),
//						},
//						GroupInterval:  pulumi.String("30"),
//						GroupWait:      pulumi.String("30"),
//						Level:          pulumi.String("P0"),
//						RepeatInterval: pulumi.String("30"),
//					},
//					&vmp.NotifyGroupPolicyLevelArgs{
//						GroupBies: pulumi.StringArray{
//							pulumi.String("__rule__"),
//						},
//						GroupInterval:  pulumi.String("45"),
//						GroupWait:      pulumi.String("40"),
//						Level:          pulumi.String("P1"),
//						RepeatInterval: pulumi.String("30"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VMP Notify Group Policy can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vmp/notifyGroupPolicy:NotifyGroupPolicy default 60dde3ca-951c-4c05-8777-e5a7caa07ad6
// ```
type NotifyGroupPolicy struct {
	pulumi.CustomResourceState

	// The description of the notify group policy.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The levels of the notify group policy. Levels must be registered in three (`P0`, `P1`, `P2`) aggregation strategies, and `Level` cannot be repeated.
	Levels NotifyGroupPolicyLevelArrayOutput `pulumi:"levels"`
	// The name of the notify group policy.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewNotifyGroupPolicy registers a new resource with the given unique name, arguments, and options.
func NewNotifyGroupPolicy(ctx *pulumi.Context,
	name string, args *NotifyGroupPolicyArgs, opts ...pulumi.ResourceOption) (*NotifyGroupPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Levels == nil {
		return nil, errors.New("invalid value for required argument 'Levels'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotifyGroupPolicy
	err := ctx.RegisterResource("volcengine:vmp/notifyGroupPolicy:NotifyGroupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotifyGroupPolicy gets an existing NotifyGroupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotifyGroupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotifyGroupPolicyState, opts ...pulumi.ResourceOption) (*NotifyGroupPolicy, error) {
	var resource NotifyGroupPolicy
	err := ctx.ReadResource("volcengine:vmp/notifyGroupPolicy:NotifyGroupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotifyGroupPolicy resources.
type notifyGroupPolicyState struct {
	// The description of the notify group policy.
	Description *string `pulumi:"description"`
	// The levels of the notify group policy. Levels must be registered in three (`P0`, `P1`, `P2`) aggregation strategies, and `Level` cannot be repeated.
	Levels []NotifyGroupPolicyLevel `pulumi:"levels"`
	// The name of the notify group policy.
	Name *string `pulumi:"name"`
}

type NotifyGroupPolicyState struct {
	// The description of the notify group policy.
	Description pulumi.StringPtrInput
	// The levels of the notify group policy. Levels must be registered in three (`P0`, `P1`, `P2`) aggregation strategies, and `Level` cannot be repeated.
	Levels NotifyGroupPolicyLevelArrayInput
	// The name of the notify group policy.
	Name pulumi.StringPtrInput
}

func (NotifyGroupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*notifyGroupPolicyState)(nil)).Elem()
}

type notifyGroupPolicyArgs struct {
	// The description of the notify group policy.
	Description *string `pulumi:"description"`
	// The levels of the notify group policy. Levels must be registered in three (`P0`, `P1`, `P2`) aggregation strategies, and `Level` cannot be repeated.
	Levels []NotifyGroupPolicyLevel `pulumi:"levels"`
	// The name of the notify group policy.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a NotifyGroupPolicy resource.
type NotifyGroupPolicyArgs struct {
	// The description of the notify group policy.
	Description pulumi.StringPtrInput
	// The levels of the notify group policy. Levels must be registered in three (`P0`, `P1`, `P2`) aggregation strategies, and `Level` cannot be repeated.
	Levels NotifyGroupPolicyLevelArrayInput
	// The name of the notify group policy.
	Name pulumi.StringPtrInput
}

func (NotifyGroupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notifyGroupPolicyArgs)(nil)).Elem()
}

type NotifyGroupPolicyInput interface {
	pulumi.Input

	ToNotifyGroupPolicyOutput() NotifyGroupPolicyOutput
	ToNotifyGroupPolicyOutputWithContext(ctx context.Context) NotifyGroupPolicyOutput
}

func (*NotifyGroupPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**NotifyGroupPolicy)(nil)).Elem()
}

func (i *NotifyGroupPolicy) ToNotifyGroupPolicyOutput() NotifyGroupPolicyOutput {
	return i.ToNotifyGroupPolicyOutputWithContext(context.Background())
}

func (i *NotifyGroupPolicy) ToNotifyGroupPolicyOutputWithContext(ctx context.Context) NotifyGroupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyGroupPolicyOutput)
}

// NotifyGroupPolicyArrayInput is an input type that accepts NotifyGroupPolicyArray and NotifyGroupPolicyArrayOutput values.
// You can construct a concrete instance of `NotifyGroupPolicyArrayInput` via:
//
//	NotifyGroupPolicyArray{ NotifyGroupPolicyArgs{...} }
type NotifyGroupPolicyArrayInput interface {
	pulumi.Input

	ToNotifyGroupPolicyArrayOutput() NotifyGroupPolicyArrayOutput
	ToNotifyGroupPolicyArrayOutputWithContext(context.Context) NotifyGroupPolicyArrayOutput
}

type NotifyGroupPolicyArray []NotifyGroupPolicyInput

func (NotifyGroupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotifyGroupPolicy)(nil)).Elem()
}

func (i NotifyGroupPolicyArray) ToNotifyGroupPolicyArrayOutput() NotifyGroupPolicyArrayOutput {
	return i.ToNotifyGroupPolicyArrayOutputWithContext(context.Background())
}

func (i NotifyGroupPolicyArray) ToNotifyGroupPolicyArrayOutputWithContext(ctx context.Context) NotifyGroupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyGroupPolicyArrayOutput)
}

// NotifyGroupPolicyMapInput is an input type that accepts NotifyGroupPolicyMap and NotifyGroupPolicyMapOutput values.
// You can construct a concrete instance of `NotifyGroupPolicyMapInput` via:
//
//	NotifyGroupPolicyMap{ "key": NotifyGroupPolicyArgs{...} }
type NotifyGroupPolicyMapInput interface {
	pulumi.Input

	ToNotifyGroupPolicyMapOutput() NotifyGroupPolicyMapOutput
	ToNotifyGroupPolicyMapOutputWithContext(context.Context) NotifyGroupPolicyMapOutput
}

type NotifyGroupPolicyMap map[string]NotifyGroupPolicyInput

func (NotifyGroupPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotifyGroupPolicy)(nil)).Elem()
}

func (i NotifyGroupPolicyMap) ToNotifyGroupPolicyMapOutput() NotifyGroupPolicyMapOutput {
	return i.ToNotifyGroupPolicyMapOutputWithContext(context.Background())
}

func (i NotifyGroupPolicyMap) ToNotifyGroupPolicyMapOutputWithContext(ctx context.Context) NotifyGroupPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyGroupPolicyMapOutput)
}

type NotifyGroupPolicyOutput struct{ *pulumi.OutputState }

func (NotifyGroupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotifyGroupPolicy)(nil)).Elem()
}

func (o NotifyGroupPolicyOutput) ToNotifyGroupPolicyOutput() NotifyGroupPolicyOutput {
	return o
}

func (o NotifyGroupPolicyOutput) ToNotifyGroupPolicyOutputWithContext(ctx context.Context) NotifyGroupPolicyOutput {
	return o
}

// The description of the notify group policy.
func (o NotifyGroupPolicyOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotifyGroupPolicy) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The levels of the notify group policy. Levels must be registered in three (`P0`, `P1`, `P2`) aggregation strategies, and `Level` cannot be repeated.
func (o NotifyGroupPolicyOutput) Levels() NotifyGroupPolicyLevelArrayOutput {
	return o.ApplyT(func(v *NotifyGroupPolicy) NotifyGroupPolicyLevelArrayOutput { return v.Levels }).(NotifyGroupPolicyLevelArrayOutput)
}

// The name of the notify group policy.
func (o NotifyGroupPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotifyGroupPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type NotifyGroupPolicyArrayOutput struct{ *pulumi.OutputState }

func (NotifyGroupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotifyGroupPolicy)(nil)).Elem()
}

func (o NotifyGroupPolicyArrayOutput) ToNotifyGroupPolicyArrayOutput() NotifyGroupPolicyArrayOutput {
	return o
}

func (o NotifyGroupPolicyArrayOutput) ToNotifyGroupPolicyArrayOutputWithContext(ctx context.Context) NotifyGroupPolicyArrayOutput {
	return o
}

func (o NotifyGroupPolicyArrayOutput) Index(i pulumi.IntInput) NotifyGroupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotifyGroupPolicy {
		return vs[0].([]*NotifyGroupPolicy)[vs[1].(int)]
	}).(NotifyGroupPolicyOutput)
}

type NotifyGroupPolicyMapOutput struct{ *pulumi.OutputState }

func (NotifyGroupPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotifyGroupPolicy)(nil)).Elem()
}

func (o NotifyGroupPolicyMapOutput) ToNotifyGroupPolicyMapOutput() NotifyGroupPolicyMapOutput {
	return o
}

func (o NotifyGroupPolicyMapOutput) ToNotifyGroupPolicyMapOutputWithContext(ctx context.Context) NotifyGroupPolicyMapOutput {
	return o
}

func (o NotifyGroupPolicyMapOutput) MapIndex(k pulumi.StringInput) NotifyGroupPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotifyGroupPolicy {
		return vs[0].(map[string]*NotifyGroupPolicy)[vs[1].(string)]
	}).(NotifyGroupPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyGroupPolicyInput)(nil)).Elem(), &NotifyGroupPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyGroupPolicyArrayInput)(nil)).Elem(), NotifyGroupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyGroupPolicyMapInput)(nil)).Elem(), NotifyGroupPolicyMap{})
	pulumi.RegisterOutputType(NotifyGroupPolicyOutput{})
	pulumi.RegisterOutputType(NotifyGroupPolicyArrayOutput{})
	pulumi.RegisterOutputType(NotifyGroupPolicyMapOutput{})
}
