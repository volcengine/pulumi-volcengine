// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vmp contacts
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooContact, err := vmp.NewContact(ctx, "fooContact", &vmp.ContactArgs{
//				Email: pulumi.String("acctest1@tftest.com"),
//				Webhook: &vmp.ContactWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//				LarkBotWebhook: &vmp.ContactLarkBotWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//				DingTalkBotWebhook: &vmp.ContactDingTalkBotWebhookArgs{
//					Address: pulumi.String("https://www.dingacctest1.com"),
//					AtMobiles: pulumi.StringArray{
//						pulumi.String("18046891812"),
//					},
//				},
//				PhoneNumber: &vmp.ContactPhoneNumberArgs{
//					CountryCode: pulumi.String("+86"),
//					Number:      pulumi.String("18310101010"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = vmp.GetContactsOutput(ctx, vmp.GetContactsOutputArgs{
//				Ids: pulumi.StringArray{
//					fooContact.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetContacts(ctx *pulumi.Context, args *GetContactsArgs, opts ...pulumi.InvokeOption) (*GetContactsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetContactsResult
	err := ctx.Invoke("volcengine:vmp/getContacts:getContacts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getContacts.
type GetContactsArgs struct {
	// The email of contact.
	Email *string `pulumi:"email"`
	// A list of contact ids.
	Ids []string `pulumi:"ids"`
	// The name of contact.
	Name *string `pulumi:"name"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getContacts.
type GetContactsResult struct {
	// The collection of query.
	Contacts []GetContactsContact `pulumi:"contacts"`
	// The email of contact.
	Email *string `pulumi:"email"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of contact.
	Name       *string `pulumi:"name"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetContactsOutput(ctx *pulumi.Context, args GetContactsOutputArgs, opts ...pulumi.InvokeOption) GetContactsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetContactsResult, error) {
			args := v.(GetContactsArgs)
			r, err := GetContacts(ctx, &args, opts...)
			var s GetContactsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetContactsResultOutput)
}

// A collection of arguments for invoking getContacts.
type GetContactsOutputArgs struct {
	// The email of contact.
	Email pulumi.StringPtrInput `pulumi:"email"`
	// A list of contact ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of contact.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetContactsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContactsArgs)(nil)).Elem()
}

// A collection of values returned by getContacts.
type GetContactsResultOutput struct{ *pulumi.OutputState }

func (GetContactsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetContactsResult)(nil)).Elem()
}

func (o GetContactsResultOutput) ToGetContactsResultOutput() GetContactsResultOutput {
	return o
}

func (o GetContactsResultOutput) ToGetContactsResultOutputWithContext(ctx context.Context) GetContactsResultOutput {
	return o
}

// The collection of query.
func (o GetContactsResultOutput) Contacts() GetContactsContactArrayOutput {
	return o.ApplyT(func(v GetContactsResult) []GetContactsContact { return v.Contacts }).(GetContactsContactArrayOutput)
}

// The email of contact.
func (o GetContactsResultOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContactsResult) *string { return v.Email }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetContactsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetContactsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetContactsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetContactsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of contact.
func (o GetContactsResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContactsResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o GetContactsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetContactsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetContactsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetContactsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetContactsResultOutput{})
}
