// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vmp contact
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vmp.NewContact(ctx, "foo", &vmp.ContactArgs{
//				DingTalkBotWebhook: &vmp.ContactDingTalkBotWebhookArgs{
//					Address: pulumi.String("https://www.dingacctest1.com"),
//					AtMobiles: pulumi.StringArray{
//						pulumi.String("18046891812"),
//					},
//				},
//				Email: pulumi.String("acctest1@tftest.com"),
//				LarkBotWebhook: &vmp.ContactLarkBotWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//				PhoneNumber: &vmp.ContactPhoneNumberArgs{
//					CountryCode: pulumi.String("+86"),
//					Number:      pulumi.String("18310101010"),
//				},
//				Webhook: &vmp.ContactWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VMP Contact can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vmp/contact:Contact default 60dde3ca-951c-4c05-8777-e5a7caa07ad6
// ```
type Contact struct {
	pulumi.CustomResourceState

	// A list of contact group ids.
	ContactGroupIds pulumi.StringArrayOutput `pulumi:"contactGroupIds"`
	// The create time of contact.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The ding talk bot webhook of contact.
	DingTalkBotWebhook ContactDingTalkBotWebhookPtrOutput `pulumi:"dingTalkBotWebhook"`
	// The email of the contact.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// Whether the email of contact active.
	EmailActive pulumi.BoolOutput `pulumi:"emailActive"`
	// The lark bot webhook of contact.
	LarkBotWebhook ContactLarkBotWebhookPtrOutput `pulumi:"larkBotWebhook"`
	// The name of the contact.
	Name pulumi.StringOutput `pulumi:"name"`
	// The phone number of contact.
	PhoneNumber ContactPhoneNumberPtrOutput `pulumi:"phoneNumber"`
	// The we com bot webhook of contact.
	WeComBotWebhook ContactWeComBotWebhookPtrOutput `pulumi:"weComBotWebhook"`
	// The webhook of contact.
	Webhook ContactWebhookPtrOutput `pulumi:"webhook"`
}

// NewContact registers a new resource with the given unique name, arguments, and options.
func NewContact(ctx *pulumi.Context,
	name string, args *ContactArgs, opts ...pulumi.ResourceOption) (*Contact, error) {
	if args == nil {
		args = &ContactArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Contact
	err := ctx.RegisterResource("volcengine:vmp/contact:Contact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContact gets an existing Contact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContactState, opts ...pulumi.ResourceOption) (*Contact, error) {
	var resource Contact
	err := ctx.ReadResource("volcengine:vmp/contact:Contact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Contact resources.
type contactState struct {
	// A list of contact group ids.
	ContactGroupIds []string `pulumi:"contactGroupIds"`
	// The create time of contact.
	CreateTime *string `pulumi:"createTime"`
	// The ding talk bot webhook of contact.
	DingTalkBotWebhook *ContactDingTalkBotWebhook `pulumi:"dingTalkBotWebhook"`
	// The email of the contact.
	Email *string `pulumi:"email"`
	// Whether the email of contact active.
	EmailActive *bool `pulumi:"emailActive"`
	// The lark bot webhook of contact.
	LarkBotWebhook *ContactLarkBotWebhook `pulumi:"larkBotWebhook"`
	// The name of the contact.
	Name *string `pulumi:"name"`
	// The phone number of contact.
	PhoneNumber *ContactPhoneNumber `pulumi:"phoneNumber"`
	// The we com bot webhook of contact.
	WeComBotWebhook *ContactWeComBotWebhook `pulumi:"weComBotWebhook"`
	// The webhook of contact.
	Webhook *ContactWebhook `pulumi:"webhook"`
}

type ContactState struct {
	// A list of contact group ids.
	ContactGroupIds pulumi.StringArrayInput
	// The create time of contact.
	CreateTime pulumi.StringPtrInput
	// The ding talk bot webhook of contact.
	DingTalkBotWebhook ContactDingTalkBotWebhookPtrInput
	// The email of the contact.
	Email pulumi.StringPtrInput
	// Whether the email of contact active.
	EmailActive pulumi.BoolPtrInput
	// The lark bot webhook of contact.
	LarkBotWebhook ContactLarkBotWebhookPtrInput
	// The name of the contact.
	Name pulumi.StringPtrInput
	// The phone number of contact.
	PhoneNumber ContactPhoneNumberPtrInput
	// The we com bot webhook of contact.
	WeComBotWebhook ContactWeComBotWebhookPtrInput
	// The webhook of contact.
	Webhook ContactWebhookPtrInput
}

func (ContactState) ElementType() reflect.Type {
	return reflect.TypeOf((*contactState)(nil)).Elem()
}

type contactArgs struct {
	// The ding talk bot webhook of contact.
	DingTalkBotWebhook *ContactDingTalkBotWebhook `pulumi:"dingTalkBotWebhook"`
	// The email of the contact.
	Email *string `pulumi:"email"`
	// The lark bot webhook of contact.
	LarkBotWebhook *ContactLarkBotWebhook `pulumi:"larkBotWebhook"`
	// The name of the contact.
	Name *string `pulumi:"name"`
	// The phone number of contact.
	PhoneNumber *ContactPhoneNumber `pulumi:"phoneNumber"`
	// The we com bot webhook of contact.
	WeComBotWebhook *ContactWeComBotWebhook `pulumi:"weComBotWebhook"`
	// The webhook of contact.
	Webhook *ContactWebhook `pulumi:"webhook"`
}

// The set of arguments for constructing a Contact resource.
type ContactArgs struct {
	// The ding talk bot webhook of contact.
	DingTalkBotWebhook ContactDingTalkBotWebhookPtrInput
	// The email of the contact.
	Email pulumi.StringPtrInput
	// The lark bot webhook of contact.
	LarkBotWebhook ContactLarkBotWebhookPtrInput
	// The name of the contact.
	Name pulumi.StringPtrInput
	// The phone number of contact.
	PhoneNumber ContactPhoneNumberPtrInput
	// The we com bot webhook of contact.
	WeComBotWebhook ContactWeComBotWebhookPtrInput
	// The webhook of contact.
	Webhook ContactWebhookPtrInput
}

func (ContactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*contactArgs)(nil)).Elem()
}

type ContactInput interface {
	pulumi.Input

	ToContactOutput() ContactOutput
	ToContactOutputWithContext(ctx context.Context) ContactOutput
}

func (*Contact) ElementType() reflect.Type {
	return reflect.TypeOf((**Contact)(nil)).Elem()
}

func (i *Contact) ToContactOutput() ContactOutput {
	return i.ToContactOutputWithContext(context.Background())
}

func (i *Contact) ToContactOutputWithContext(ctx context.Context) ContactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactOutput)
}

// ContactArrayInput is an input type that accepts ContactArray and ContactArrayOutput values.
// You can construct a concrete instance of `ContactArrayInput` via:
//
//	ContactArray{ ContactArgs{...} }
type ContactArrayInput interface {
	pulumi.Input

	ToContactArrayOutput() ContactArrayOutput
	ToContactArrayOutputWithContext(context.Context) ContactArrayOutput
}

type ContactArray []ContactInput

func (ContactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Contact)(nil)).Elem()
}

func (i ContactArray) ToContactArrayOutput() ContactArrayOutput {
	return i.ToContactArrayOutputWithContext(context.Background())
}

func (i ContactArray) ToContactArrayOutputWithContext(ctx context.Context) ContactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactArrayOutput)
}

// ContactMapInput is an input type that accepts ContactMap and ContactMapOutput values.
// You can construct a concrete instance of `ContactMapInput` via:
//
//	ContactMap{ "key": ContactArgs{...} }
type ContactMapInput interface {
	pulumi.Input

	ToContactMapOutput() ContactMapOutput
	ToContactMapOutputWithContext(context.Context) ContactMapOutput
}

type ContactMap map[string]ContactInput

func (ContactMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Contact)(nil)).Elem()
}

func (i ContactMap) ToContactMapOutput() ContactMapOutput {
	return i.ToContactMapOutputWithContext(context.Background())
}

func (i ContactMap) ToContactMapOutputWithContext(ctx context.Context) ContactMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContactMapOutput)
}

type ContactOutput struct{ *pulumi.OutputState }

func (ContactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Contact)(nil)).Elem()
}

func (o ContactOutput) ToContactOutput() ContactOutput {
	return o
}

func (o ContactOutput) ToContactOutputWithContext(ctx context.Context) ContactOutput {
	return o
}

// A list of contact group ids.
func (o ContactOutput) ContactGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Contact) pulumi.StringArrayOutput { return v.ContactGroupIds }).(pulumi.StringArrayOutput)
}

// The create time of contact.
func (o ContactOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Contact) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The ding talk bot webhook of contact.
func (o ContactOutput) DingTalkBotWebhook() ContactDingTalkBotWebhookPtrOutput {
	return o.ApplyT(func(v *Contact) ContactDingTalkBotWebhookPtrOutput { return v.DingTalkBotWebhook }).(ContactDingTalkBotWebhookPtrOutput)
}

// The email of the contact.
func (o ContactOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Contact) pulumi.StringPtrOutput { return v.Email }).(pulumi.StringPtrOutput)
}

// Whether the email of contact active.
func (o ContactOutput) EmailActive() pulumi.BoolOutput {
	return o.ApplyT(func(v *Contact) pulumi.BoolOutput { return v.EmailActive }).(pulumi.BoolOutput)
}

// The lark bot webhook of contact.
func (o ContactOutput) LarkBotWebhook() ContactLarkBotWebhookPtrOutput {
	return o.ApplyT(func(v *Contact) ContactLarkBotWebhookPtrOutput { return v.LarkBotWebhook }).(ContactLarkBotWebhookPtrOutput)
}

// The name of the contact.
func (o ContactOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Contact) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The phone number of contact.
func (o ContactOutput) PhoneNumber() ContactPhoneNumberPtrOutput {
	return o.ApplyT(func(v *Contact) ContactPhoneNumberPtrOutput { return v.PhoneNumber }).(ContactPhoneNumberPtrOutput)
}

// The we com bot webhook of contact.
func (o ContactOutput) WeComBotWebhook() ContactWeComBotWebhookPtrOutput {
	return o.ApplyT(func(v *Contact) ContactWeComBotWebhookPtrOutput { return v.WeComBotWebhook }).(ContactWeComBotWebhookPtrOutput)
}

// The webhook of contact.
func (o ContactOutput) Webhook() ContactWebhookPtrOutput {
	return o.ApplyT(func(v *Contact) ContactWebhookPtrOutput { return v.Webhook }).(ContactWebhookPtrOutput)
}

type ContactArrayOutput struct{ *pulumi.OutputState }

func (ContactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Contact)(nil)).Elem()
}

func (o ContactArrayOutput) ToContactArrayOutput() ContactArrayOutput {
	return o
}

func (o ContactArrayOutput) ToContactArrayOutputWithContext(ctx context.Context) ContactArrayOutput {
	return o
}

func (o ContactArrayOutput) Index(i pulumi.IntInput) ContactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Contact {
		return vs[0].([]*Contact)[vs[1].(int)]
	}).(ContactOutput)
}

type ContactMapOutput struct{ *pulumi.OutputState }

func (ContactMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Contact)(nil)).Elem()
}

func (o ContactMapOutput) ToContactMapOutput() ContactMapOutput {
	return o
}

func (o ContactMapOutput) ToContactMapOutputWithContext(ctx context.Context) ContactMapOutput {
	return o
}

func (o ContactMapOutput) MapIndex(k pulumi.StringInput) ContactOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Contact {
		return vs[0].(map[string]*Contact)[vs[1].(string)]
	}).(ContactOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContactInput)(nil)).Elem(), &Contact{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactArrayInput)(nil)).Elem(), ContactArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContactMapInput)(nil)).Elem(), ContactMap{})
	pulumi.RegisterOutputType(ContactOutput{})
	pulumi.RegisterOutputType(ContactArrayOutput{})
	pulumi.RegisterOutputType(ContactMapOutput{})
}
