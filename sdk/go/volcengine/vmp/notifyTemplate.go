// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vmp notify template
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vmp.NewNotifyTemplate(ctx, "foo", &vmp.NotifyTemplateArgs{
//				Active: &vmp.NotifyTemplateActiveArgs{
//					Content: pulumi.String("acc-test-active-template-content"),
//					Title:   pulumi.String("acc-test-active-template-title"),
//				},
//				Channel:     pulumi.String("WeComBotWebhook"),
//				Description: pulumi.String("acc-test-vmp"),
//				Resolved: &vmp.NotifyTemplateResolvedArgs{
//					Content: pulumi.String("acc-test-resolved-template-content"),
//					Title:   pulumi.String("acc-test-resolved-template-title"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VmpNotifyTemplate can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vmp/notifyTemplate:NotifyTemplate default resource_id
// ```
type NotifyTemplate struct {
	pulumi.CustomResourceState

	// The active notify template info.
	Active NotifyTemplateActiveOutput `pulumi:"active"`
	// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
	Channel pulumi.StringOutput `pulumi:"channel"`
	// The create time of notify template.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of notify template.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of notify template.
	Name pulumi.StringOutput `pulumi:"name"`
	// The resolved notify template info.
	Resolved NotifyTemplateResolvedOutput `pulumi:"resolved"`
	// The update time of notify template.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewNotifyTemplate registers a new resource with the given unique name, arguments, and options.
func NewNotifyTemplate(ctx *pulumi.Context,
	name string, args *NotifyTemplateArgs, opts ...pulumi.ResourceOption) (*NotifyTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Active == nil {
		return nil, errors.New("invalid value for required argument 'Active'")
	}
	if args.Channel == nil {
		return nil, errors.New("invalid value for required argument 'Channel'")
	}
	if args.Resolved == nil {
		return nil, errors.New("invalid value for required argument 'Resolved'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource NotifyTemplate
	err := ctx.RegisterResource("volcengine:vmp/notifyTemplate:NotifyTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNotifyTemplate gets an existing NotifyTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNotifyTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NotifyTemplateState, opts ...pulumi.ResourceOption) (*NotifyTemplate, error) {
	var resource NotifyTemplate
	err := ctx.ReadResource("volcengine:vmp/notifyTemplate:NotifyTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NotifyTemplate resources.
type notifyTemplateState struct {
	// The active notify template info.
	Active *NotifyTemplateActive `pulumi:"active"`
	// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
	Channel *string `pulumi:"channel"`
	// The create time of notify template.
	CreateTime *string `pulumi:"createTime"`
	// The description of notify template.
	Description *string `pulumi:"description"`
	// The name of notify template.
	Name *string `pulumi:"name"`
	// The resolved notify template info.
	Resolved *NotifyTemplateResolved `pulumi:"resolved"`
	// The update time of notify template.
	UpdateTime *string `pulumi:"updateTime"`
}

type NotifyTemplateState struct {
	// The active notify template info.
	Active NotifyTemplateActivePtrInput
	// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
	Channel pulumi.StringPtrInput
	// The create time of notify template.
	CreateTime pulumi.StringPtrInput
	// The description of notify template.
	Description pulumi.StringPtrInput
	// The name of notify template.
	Name pulumi.StringPtrInput
	// The resolved notify template info.
	Resolved NotifyTemplateResolvedPtrInput
	// The update time of notify template.
	UpdateTime pulumi.StringPtrInput
}

func (NotifyTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*notifyTemplateState)(nil)).Elem()
}

type notifyTemplateArgs struct {
	// The active notify template info.
	Active NotifyTemplateActive `pulumi:"active"`
	// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
	Channel string `pulumi:"channel"`
	// The description of notify template.
	Description *string `pulumi:"description"`
	// The name of notify template.
	Name *string `pulumi:"name"`
	// The resolved notify template info.
	Resolved NotifyTemplateResolved `pulumi:"resolved"`
}

// The set of arguments for constructing a NotifyTemplate resource.
type NotifyTemplateArgs struct {
	// The active notify template info.
	Active NotifyTemplateActiveInput
	// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
	Channel pulumi.StringInput
	// The description of notify template.
	Description pulumi.StringPtrInput
	// The name of notify template.
	Name pulumi.StringPtrInput
	// The resolved notify template info.
	Resolved NotifyTemplateResolvedInput
}

func (NotifyTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*notifyTemplateArgs)(nil)).Elem()
}

type NotifyTemplateInput interface {
	pulumi.Input

	ToNotifyTemplateOutput() NotifyTemplateOutput
	ToNotifyTemplateOutputWithContext(ctx context.Context) NotifyTemplateOutput
}

func (*NotifyTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**NotifyTemplate)(nil)).Elem()
}

func (i *NotifyTemplate) ToNotifyTemplateOutput() NotifyTemplateOutput {
	return i.ToNotifyTemplateOutputWithContext(context.Background())
}

func (i *NotifyTemplate) ToNotifyTemplateOutputWithContext(ctx context.Context) NotifyTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyTemplateOutput)
}

// NotifyTemplateArrayInput is an input type that accepts NotifyTemplateArray and NotifyTemplateArrayOutput values.
// You can construct a concrete instance of `NotifyTemplateArrayInput` via:
//
//	NotifyTemplateArray{ NotifyTemplateArgs{...} }
type NotifyTemplateArrayInput interface {
	pulumi.Input

	ToNotifyTemplateArrayOutput() NotifyTemplateArrayOutput
	ToNotifyTemplateArrayOutputWithContext(context.Context) NotifyTemplateArrayOutput
}

type NotifyTemplateArray []NotifyTemplateInput

func (NotifyTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotifyTemplate)(nil)).Elem()
}

func (i NotifyTemplateArray) ToNotifyTemplateArrayOutput() NotifyTemplateArrayOutput {
	return i.ToNotifyTemplateArrayOutputWithContext(context.Background())
}

func (i NotifyTemplateArray) ToNotifyTemplateArrayOutputWithContext(ctx context.Context) NotifyTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyTemplateArrayOutput)
}

// NotifyTemplateMapInput is an input type that accepts NotifyTemplateMap and NotifyTemplateMapOutput values.
// You can construct a concrete instance of `NotifyTemplateMapInput` via:
//
//	NotifyTemplateMap{ "key": NotifyTemplateArgs{...} }
type NotifyTemplateMapInput interface {
	pulumi.Input

	ToNotifyTemplateMapOutput() NotifyTemplateMapOutput
	ToNotifyTemplateMapOutputWithContext(context.Context) NotifyTemplateMapOutput
}

type NotifyTemplateMap map[string]NotifyTemplateInput

func (NotifyTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotifyTemplate)(nil)).Elem()
}

func (i NotifyTemplateMap) ToNotifyTemplateMapOutput() NotifyTemplateMapOutput {
	return i.ToNotifyTemplateMapOutputWithContext(context.Background())
}

func (i NotifyTemplateMap) ToNotifyTemplateMapOutputWithContext(ctx context.Context) NotifyTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NotifyTemplateMapOutput)
}

type NotifyTemplateOutput struct{ *pulumi.OutputState }

func (NotifyTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NotifyTemplate)(nil)).Elem()
}

func (o NotifyTemplateOutput) ToNotifyTemplateOutput() NotifyTemplateOutput {
	return o
}

func (o NotifyTemplateOutput) ToNotifyTemplateOutputWithContext(ctx context.Context) NotifyTemplateOutput {
	return o
}

// The active notify template info.
func (o NotifyTemplateOutput) Active() NotifyTemplateActiveOutput {
	return o.ApplyT(func(v *NotifyTemplate) NotifyTemplateActiveOutput { return v.Active }).(NotifyTemplateActiveOutput)
}

// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
func (o NotifyTemplateOutput) Channel() pulumi.StringOutput {
	return o.ApplyT(func(v *NotifyTemplate) pulumi.StringOutput { return v.Channel }).(pulumi.StringOutput)
}

// The create time of notify template.
func (o NotifyTemplateOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NotifyTemplate) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of notify template.
func (o NotifyTemplateOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *NotifyTemplate) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The name of notify template.
func (o NotifyTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *NotifyTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The resolved notify template info.
func (o NotifyTemplateOutput) Resolved() NotifyTemplateResolvedOutput {
	return o.ApplyT(func(v *NotifyTemplate) NotifyTemplateResolvedOutput { return v.Resolved }).(NotifyTemplateResolvedOutput)
}

// The update time of notify template.
func (o NotifyTemplateOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *NotifyTemplate) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type NotifyTemplateArrayOutput struct{ *pulumi.OutputState }

func (NotifyTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NotifyTemplate)(nil)).Elem()
}

func (o NotifyTemplateArrayOutput) ToNotifyTemplateArrayOutput() NotifyTemplateArrayOutput {
	return o
}

func (o NotifyTemplateArrayOutput) ToNotifyTemplateArrayOutputWithContext(ctx context.Context) NotifyTemplateArrayOutput {
	return o
}

func (o NotifyTemplateArrayOutput) Index(i pulumi.IntInput) NotifyTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *NotifyTemplate {
		return vs[0].([]*NotifyTemplate)[vs[1].(int)]
	}).(NotifyTemplateOutput)
}

type NotifyTemplateMapOutput struct{ *pulumi.OutputState }

func (NotifyTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NotifyTemplate)(nil)).Elem()
}

func (o NotifyTemplateMapOutput) ToNotifyTemplateMapOutput() NotifyTemplateMapOutput {
	return o
}

func (o NotifyTemplateMapOutput) ToNotifyTemplateMapOutputWithContext(ctx context.Context) NotifyTemplateMapOutput {
	return o
}

func (o NotifyTemplateMapOutput) MapIndex(k pulumi.StringInput) NotifyTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *NotifyTemplate {
		return vs[0].(map[string]*NotifyTemplate)[vs[1].(string)]
	}).(NotifyTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyTemplateInput)(nil)).Elem(), &NotifyTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyTemplateArrayInput)(nil)).Elem(), NotifyTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NotifyTemplateMapInput)(nil)).Elem(), NotifyTemplateMap{})
	pulumi.RegisterOutputType(NotifyTemplateOutput{})
	pulumi.RegisterOutputType(NotifyTemplateArrayOutput{})
	pulumi.RegisterOutputType(NotifyTemplateMapOutput{})
}
