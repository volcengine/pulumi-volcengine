// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vmp alerting rules
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooWorkspace, err := vmp.NewWorkspace(ctx, "fooWorkspace", &vmp.WorkspaceArgs{
//				InstanceTypeId:          pulumi.String("vmp.standard.15d"),
//				DeleteProtectionEnabled: pulumi.Bool(false),
//				Description:             pulumi.String("acc-test-1"),
//				Username:                pulumi.String("admin123"),
//				Password:                pulumi.String("***********"),
//			})
//			if err != nil {
//				return err
//			}
//			fooContact, err := vmp.NewContact(ctx, "fooContact", &vmp.ContactArgs{
//				Email: pulumi.String("acctest1@tftest.com"),
//				Webhook: &vmp.ContactWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//				LarkBotWebhook: &vmp.ContactLarkBotWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//				DingTalkBotWebhook: &vmp.ContactDingTalkBotWebhookArgs{
//					Address: pulumi.String("https://www.dingacctest1.com"),
//					AtMobiles: pulumi.StringArray{
//						pulumi.String("18046891812"),
//					},
//				},
//				PhoneNumber: &vmp.ContactPhoneNumberArgs{
//					CountryCode: pulumi.String("+86"),
//					Number:      pulumi.String("18310101010"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			foo1Contact, err := vmp.NewContact(ctx, "foo1Contact", &vmp.ContactArgs{
//				Email: pulumi.String("acctest2@tftest.com"),
//				Webhook: &vmp.ContactWebhookArgs{
//					Address: pulumi.String("https://www.acctest2.com"),
//				},
//				LarkBotWebhook: &vmp.ContactLarkBotWebhookArgs{
//					Address: pulumi.String("https://www.acctest2.com"),
//				},
//				DingTalkBotWebhook: &vmp.ContactDingTalkBotWebhookArgs{
//					Address: pulumi.String("https://www.dingacctest2.com"),
//					AtMobiles: pulumi.StringArray{
//						pulumi.String("18046891813"),
//					},
//				},
//				PhoneNumber: &vmp.ContactPhoneNumberArgs{
//					CountryCode: pulumi.String("+86"),
//					Number:      pulumi.String("18310101011"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooContactGroup, err := vmp.NewContactGroup(ctx, "fooContactGroup", &vmp.ContactGroupArgs{
//				ContactIds: pulumi.StringArray{
//					fooContact.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			foo1ContactGroup, err := vmp.NewContactGroup(ctx, "foo1ContactGroup", &vmp.ContactGroupArgs{
//				ContactIds: pulumi.StringArray{
//					foo1Contact.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooNotifyPolicy, err := vmp.NewNotifyPolicy(ctx, "fooNotifyPolicy", &vmp.NotifyPolicyArgs{
//				Description: pulumi.String("acc-test-1"),
//				Levels: vmp.NotifyPolicyLevelArray{
//					&vmp.NotifyPolicyLevelArgs{
//						Level: pulumi.String("P1"),
//						ContactGroupIds: pulumi.StringArray{
//							fooContactGroup.ID(),
//						},
//						Channels: pulumi.StringArray{
//							pulumi.String("Email"),
//							pulumi.String("Webhook"),
//						},
//					},
//					&vmp.NotifyPolicyLevelArgs{
//						Level: pulumi.String("P0"),
//						ContactGroupIds: pulumi.StringArray{
//							foo1ContactGroup.ID(),
//						},
//						Channels: pulumi.StringArray{
//							pulumi.String("LarkBotWebhook"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooNotifyGroupPolicy, err := vmp.NewNotifyGroupPolicy(ctx, "fooNotifyGroupPolicy", &vmp.NotifyGroupPolicyArgs{
//				Description: pulumi.String("acc-test-1"),
//				Levels: vmp.NotifyGroupPolicyLevelArray{
//					&vmp.NotifyGroupPolicyLevelArgs{
//						Level: pulumi.String("P2"),
//						GroupBies: pulumi.StringArray{
//							pulumi.String("__rule__"),
//						},
//						GroupWait:      pulumi.String("35"),
//						GroupInterval:  pulumi.String("30"),
//						RepeatInterval: pulumi.String("30"),
//					},
//					&vmp.NotifyGroupPolicyLevelArgs{
//						Level: pulumi.String("P0"),
//						GroupBies: pulumi.StringArray{
//							pulumi.String("__rule__"),
//						},
//						GroupWait:      pulumi.String("30"),
//						GroupInterval:  pulumi.String("30"),
//						RepeatInterval: pulumi.String("30"),
//					},
//					&vmp.NotifyGroupPolicyLevelArgs{
//						Level: pulumi.String("P1"),
//						GroupBies: pulumi.StringArray{
//							pulumi.String("__rule__"),
//						},
//						GroupWait:      pulumi.String("40"),
//						GroupInterval:  pulumi.String("45"),
//						RepeatInterval: pulumi.String("30"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooAlertingRule, err := vmp.NewAlertingRule(ctx, "fooAlertingRule", &vmp.AlertingRuleArgs{
//				Description:         pulumi.String("acc-test-1"),
//				NotifyPolicyId:      fooNotifyPolicy.ID(),
//				NotifyGroupPolicyId: fooNotifyGroupPolicy.ID(),
//				Query: &vmp.AlertingRuleQueryArgs{
//					WorkspaceId: fooWorkspace.ID(),
//					PromQl:      pulumi.String("sum(up)"),
//				},
//				Levels: vmp.AlertingRuleLevelArray{
//					&vmp.AlertingRuleLevelArgs{
//						Level:      pulumi.String("P0"),
//						For:        pulumi.String("0s"),
//						Comparator: pulumi.String(">="),
//						Threshold:  pulumi.Float64(2),
//					},
//					&vmp.AlertingRuleLevelArgs{
//						Level:      pulumi.String("P1"),
//						For:        pulumi.String("0s"),
//						Comparator: pulumi.String(">="),
//						Threshold:  pulumi.Float64(1),
//					},
//					&vmp.AlertingRuleLevelArgs{
//						Level:      pulumi.String("P2"),
//						For:        pulumi.String("0s"),
//						Comparator: pulumi.String(">="),
//						Threshold:  pulumi.Float64(0.5),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = vmp.GetAlertingRulesOutput(ctx, vmp.GetAlertingRulesOutputArgs{
//				Ids: pulumi.StringArray{
//					fooAlertingRule.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.vmp.AlertingRules has been deprecated in favor of volcengine.vmp.getAlertingRules
func AlertingRules(ctx *pulumi.Context, args *AlertingRulesArgs, opts ...pulumi.InvokeOption) (*AlertingRulesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv AlertingRulesResult
	err := ctx.Invoke("volcengine:vmp/alertingRules:AlertingRules", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking AlertingRules.
type AlertingRulesArgs struct {
	// A list of vmp alerting rule IDs.
	Ids []string `pulumi:"ids"`
	// The name of vmp alerting rule. This field support fuzzy query.
	Name *string `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// A list of notify group policy IDs.
	NotifyGroupPolicyIds []string `pulumi:"notifyGroupPolicyIds"`
	// A list of notify policy IDs.
	NotifyPolicyIds []string `pulumi:"notifyPolicyIds"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
	Status *string `pulumi:"status"`
	// The type of vmp alerting rule. Valid values: `vmp/PromQL`.
	Type *string `pulumi:"type"`
	// The workspace id of vmp alerting rule.
	WorkspaceId *string `pulumi:"workspaceId"`
}

// A collection of values returned by AlertingRules.
type AlertingRulesResult struct {
	// The collection of query.
	AlertingRules []AlertingRulesAlertingRule `pulumi:"alertingRules"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of the vmp alerting rule.
	Name                 *string  `pulumi:"name"`
	NameRegex            *string  `pulumi:"nameRegex"`
	NotifyGroupPolicyIds []string `pulumi:"notifyGroupPolicyIds"`
	NotifyPolicyIds      []string `pulumi:"notifyPolicyIds"`
	OutputFile           *string  `pulumi:"outputFile"`
	// The status of the vmp alerting rule.
	Status *string `pulumi:"status"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
	// The type of the vmp alerting rule.
	Type *string `pulumi:"type"`
	// The id of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

func AlertingRulesOutput(ctx *pulumi.Context, args AlertingRulesOutputArgs, opts ...pulumi.InvokeOption) AlertingRulesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (AlertingRulesResult, error) {
			args := v.(AlertingRulesArgs)
			r, err := AlertingRules(ctx, &args, opts...)
			var s AlertingRulesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(AlertingRulesResultOutput)
}

// A collection of arguments for invoking AlertingRules.
type AlertingRulesOutputArgs struct {
	// A list of vmp alerting rule IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of vmp alerting rule. This field support fuzzy query.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// A list of notify group policy IDs.
	NotifyGroupPolicyIds pulumi.StringArrayInput `pulumi:"notifyGroupPolicyIds"`
	// A list of notify policy IDs.
	NotifyPolicyIds pulumi.StringArrayInput `pulumi:"notifyPolicyIds"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The type of vmp alerting rule. Valid values: `vmp/PromQL`.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// The workspace id of vmp alerting rule.
	WorkspaceId pulumi.StringPtrInput `pulumi:"workspaceId"`
}

func (AlertingRulesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingRulesArgs)(nil)).Elem()
}

// A collection of values returned by AlertingRules.
type AlertingRulesResultOutput struct{ *pulumi.OutputState }

func (AlertingRulesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AlertingRulesResult)(nil)).Elem()
}

func (o AlertingRulesResultOutput) ToAlertingRulesResultOutput() AlertingRulesResultOutput {
	return o
}

func (o AlertingRulesResultOutput) ToAlertingRulesResultOutputWithContext(ctx context.Context) AlertingRulesResultOutput {
	return o
}

// The collection of query.
func (o AlertingRulesResultOutput) AlertingRules() AlertingRulesAlertingRuleArrayOutput {
	return o.ApplyT(func(v AlertingRulesResult) []AlertingRulesAlertingRule { return v.AlertingRules }).(AlertingRulesAlertingRuleArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o AlertingRulesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AlertingRulesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o AlertingRulesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertingRulesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of the vmp alerting rule.
func (o AlertingRulesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertingRulesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o AlertingRulesResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertingRulesResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o AlertingRulesResultOutput) NotifyGroupPolicyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertingRulesResult) []string { return v.NotifyGroupPolicyIds }).(pulumi.StringArrayOutput)
}

func (o AlertingRulesResultOutput) NotifyPolicyIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AlertingRulesResult) []string { return v.NotifyPolicyIds }).(pulumi.StringArrayOutput)
}

func (o AlertingRulesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertingRulesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The status of the vmp alerting rule.
func (o AlertingRulesResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertingRulesResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o AlertingRulesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v AlertingRulesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The type of the vmp alerting rule.
func (o AlertingRulesResultOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertingRulesResult) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// The id of the workspace.
func (o AlertingRulesResultOutput) WorkspaceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AlertingRulesResult) *string { return v.WorkspaceId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(AlertingRulesResultOutput{})
}
