// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage vmp rule file
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooWorkspace, err := vmp.NewWorkspace(ctx, "fooWorkspace", &vmp.WorkspaceArgs{
//				InstanceTypeId:          pulumi.String("vmp.standard.15d"),
//				DeleteProtectionEnabled: pulumi.Bool(false),
//				Description:             pulumi.String("acc-test-1"),
//				Username:                pulumi.String("admin123"),
//				Password:                pulumi.String("**********"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vmp.NewRuleFile(ctx, "fooRuleFile", &vmp.RuleFileArgs{
//				WorkspaceId: fooWorkspace.ID(),
//				Description: pulumi.String("acc-test-1"),
//				Content: pulumi.String(`groups:
//	    - interval: 10s
//	      name: recording_rules
//	      rules:
//	        - expr: sum(irate(container_cpu_usage_seconds_total{image!=""}[5m])) by (pod) *100
//	          labels:
//	            team: operations
//	          record: pod:cpu:useage
//
// `),
//
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VMP Rule File can be imported using the workspace_id:rule_file_id, e.g.
// (We can only get rule file by WorkspaceId and RuleFileId)
//
// ```sh
// $ pulumi import volcengine:vmp/ruleFile:RuleFile default 60dde3ca-951c-4c05-8777-e5a7caa07ad6:d6f72bd9-674e-4651-b98c-3797657d9614
// ```
type RuleFile struct {
	pulumi.CustomResourceState

	// The content of the rule file.
	Content pulumi.StringOutput `pulumi:"content"`
	// The create time of workspace.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the rule file.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The last update time of rule file.
	LastUpdateTime pulumi.StringOutput `pulumi:"lastUpdateTime"`
	// The name of the rule file.
	Name pulumi.StringOutput `pulumi:"name"`
	// The rule count number of rule file.
	RuleCount pulumi.IntOutput `pulumi:"ruleCount"`
	// The id of rule file.
	RuleFileId pulumi.StringOutput `pulumi:"ruleFileId"`
	// The status of workspace.
	Status pulumi.StringOutput `pulumi:"status"`
	// The id of the workspace.
	WorkspaceId pulumi.StringOutput `pulumi:"workspaceId"`
}

// NewRuleFile registers a new resource with the given unique name, arguments, and options.
func NewRuleFile(ctx *pulumi.Context,
	name string, args *RuleFileArgs, opts ...pulumi.ResourceOption) (*RuleFile, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.WorkspaceId == nil {
		return nil, errors.New("invalid value for required argument 'WorkspaceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RuleFile
	err := ctx.RegisterResource("volcengine:vmp/ruleFile:RuleFile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRuleFile gets an existing RuleFile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRuleFile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RuleFileState, opts ...pulumi.ResourceOption) (*RuleFile, error) {
	var resource RuleFile
	err := ctx.ReadResource("volcengine:vmp/ruleFile:RuleFile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RuleFile resources.
type ruleFileState struct {
	// The content of the rule file.
	Content *string `pulumi:"content"`
	// The create time of workspace.
	CreateTime *string `pulumi:"createTime"`
	// The description of the rule file.
	Description *string `pulumi:"description"`
	// The last update time of rule file.
	LastUpdateTime *string `pulumi:"lastUpdateTime"`
	// The name of the rule file.
	Name *string `pulumi:"name"`
	// The rule count number of rule file.
	RuleCount *int `pulumi:"ruleCount"`
	// The id of rule file.
	RuleFileId *string `pulumi:"ruleFileId"`
	// The status of workspace.
	Status *string `pulumi:"status"`
	// The id of the workspace.
	WorkspaceId *string `pulumi:"workspaceId"`
}

type RuleFileState struct {
	// The content of the rule file.
	Content pulumi.StringPtrInput
	// The create time of workspace.
	CreateTime pulumi.StringPtrInput
	// The description of the rule file.
	Description pulumi.StringPtrInput
	// The last update time of rule file.
	LastUpdateTime pulumi.StringPtrInput
	// The name of the rule file.
	Name pulumi.StringPtrInput
	// The rule count number of rule file.
	RuleCount pulumi.IntPtrInput
	// The id of rule file.
	RuleFileId pulumi.StringPtrInput
	// The status of workspace.
	Status pulumi.StringPtrInput
	// The id of the workspace.
	WorkspaceId pulumi.StringPtrInput
}

func (RuleFileState) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleFileState)(nil)).Elem()
}

type ruleFileArgs struct {
	// The content of the rule file.
	Content string `pulumi:"content"`
	// The description of the rule file.
	Description *string `pulumi:"description"`
	// The name of the rule file.
	Name *string `pulumi:"name"`
	// The id of the workspace.
	WorkspaceId string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a RuleFile resource.
type RuleFileArgs struct {
	// The content of the rule file.
	Content pulumi.StringInput
	// The description of the rule file.
	Description pulumi.StringPtrInput
	// The name of the rule file.
	Name pulumi.StringPtrInput
	// The id of the workspace.
	WorkspaceId pulumi.StringInput
}

func (RuleFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ruleFileArgs)(nil)).Elem()
}

type RuleFileInput interface {
	pulumi.Input

	ToRuleFileOutput() RuleFileOutput
	ToRuleFileOutputWithContext(ctx context.Context) RuleFileOutput
}

func (*RuleFile) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleFile)(nil)).Elem()
}

func (i *RuleFile) ToRuleFileOutput() RuleFileOutput {
	return i.ToRuleFileOutputWithContext(context.Background())
}

func (i *RuleFile) ToRuleFileOutputWithContext(ctx context.Context) RuleFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFileOutput)
}

// RuleFileArrayInput is an input type that accepts RuleFileArray and RuleFileArrayOutput values.
// You can construct a concrete instance of `RuleFileArrayInput` via:
//
//	RuleFileArray{ RuleFileArgs{...} }
type RuleFileArrayInput interface {
	pulumi.Input

	ToRuleFileArrayOutput() RuleFileArrayOutput
	ToRuleFileArrayOutputWithContext(context.Context) RuleFileArrayOutput
}

type RuleFileArray []RuleFileInput

func (RuleFileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleFile)(nil)).Elem()
}

func (i RuleFileArray) ToRuleFileArrayOutput() RuleFileArrayOutput {
	return i.ToRuleFileArrayOutputWithContext(context.Background())
}

func (i RuleFileArray) ToRuleFileArrayOutputWithContext(ctx context.Context) RuleFileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFileArrayOutput)
}

// RuleFileMapInput is an input type that accepts RuleFileMap and RuleFileMapOutput values.
// You can construct a concrete instance of `RuleFileMapInput` via:
//
//	RuleFileMap{ "key": RuleFileArgs{...} }
type RuleFileMapInput interface {
	pulumi.Input

	ToRuleFileMapOutput() RuleFileMapOutput
	ToRuleFileMapOutputWithContext(context.Context) RuleFileMapOutput
}

type RuleFileMap map[string]RuleFileInput

func (RuleFileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleFile)(nil)).Elem()
}

func (i RuleFileMap) ToRuleFileMapOutput() RuleFileMapOutput {
	return i.ToRuleFileMapOutputWithContext(context.Background())
}

func (i RuleFileMap) ToRuleFileMapOutputWithContext(ctx context.Context) RuleFileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RuleFileMapOutput)
}

type RuleFileOutput struct{ *pulumi.OutputState }

func (RuleFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RuleFile)(nil)).Elem()
}

func (o RuleFileOutput) ToRuleFileOutput() RuleFileOutput {
	return o
}

func (o RuleFileOutput) ToRuleFileOutputWithContext(ctx context.Context) RuleFileOutput {
	return o
}

// The content of the rule file.
func (o RuleFileOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleFile) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// The create time of workspace.
func (o RuleFileOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleFile) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the rule file.
func (o RuleFileOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RuleFile) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The last update time of rule file.
func (o RuleFileOutput) LastUpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleFile) pulumi.StringOutput { return v.LastUpdateTime }).(pulumi.StringOutput)
}

// The name of the rule file.
func (o RuleFileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleFile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The rule count number of rule file.
func (o RuleFileOutput) RuleCount() pulumi.IntOutput {
	return o.ApplyT(func(v *RuleFile) pulumi.IntOutput { return v.RuleCount }).(pulumi.IntOutput)
}

// The id of rule file.
func (o RuleFileOutput) RuleFileId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleFile) pulumi.StringOutput { return v.RuleFileId }).(pulumi.StringOutput)
}

// The status of workspace.
func (o RuleFileOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleFile) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The id of the workspace.
func (o RuleFileOutput) WorkspaceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RuleFile) pulumi.StringOutput { return v.WorkspaceId }).(pulumi.StringOutput)
}

type RuleFileArrayOutput struct{ *pulumi.OutputState }

func (RuleFileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RuleFile)(nil)).Elem()
}

func (o RuleFileArrayOutput) ToRuleFileArrayOutput() RuleFileArrayOutput {
	return o
}

func (o RuleFileArrayOutput) ToRuleFileArrayOutputWithContext(ctx context.Context) RuleFileArrayOutput {
	return o
}

func (o RuleFileArrayOutput) Index(i pulumi.IntInput) RuleFileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RuleFile {
		return vs[0].([]*RuleFile)[vs[1].(int)]
	}).(RuleFileOutput)
}

type RuleFileMapOutput struct{ *pulumi.OutputState }

func (RuleFileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RuleFile)(nil)).Elem()
}

func (o RuleFileMapOutput) ToRuleFileMapOutput() RuleFileMapOutput {
	return o
}

func (o RuleFileMapOutput) ToRuleFileMapOutputWithContext(ctx context.Context) RuleFileMapOutput {
	return o
}

func (o RuleFileMapOutput) MapIndex(k pulumi.StringInput) RuleFileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RuleFile {
		return vs[0].(map[string]*RuleFile)[vs[1].(string)]
	}).(RuleFileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RuleFileInput)(nil)).Elem(), &RuleFile{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleFileArrayInput)(nil)).Elem(), RuleFileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RuleFileMapInput)(nil)).Elem(), RuleFileMap{})
	pulumi.RegisterOutputType(RuleFileOutput{})
	pulumi.RegisterOutputType(RuleFileArrayOutput{})
	pulumi.RegisterOutputType(RuleFileMapOutput{})
}
