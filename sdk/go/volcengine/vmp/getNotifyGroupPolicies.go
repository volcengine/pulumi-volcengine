// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vmp notify group policies
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooNotifyGroupPolicy, err := vmp.NewNotifyGroupPolicy(ctx, "fooNotifyGroupPolicy", &vmp.NotifyGroupPolicyArgs{
//				Description: pulumi.String("acc-test-1"),
//				Levels: vmp.NotifyGroupPolicyLevelArray{
//					&vmp.NotifyGroupPolicyLevelArgs{
//						Level: pulumi.String("P2"),
//						GroupBies: pulumi.StringArray{
//							pulumi.String("__rule__"),
//						},
//						GroupWait:      pulumi.String("35"),
//						GroupInterval:  pulumi.String("30"),
//						RepeatInterval: pulumi.String("30"),
//					},
//					&vmp.NotifyGroupPolicyLevelArgs{
//						Level: pulumi.String("P0"),
//						GroupBies: pulumi.StringArray{
//							pulumi.String("__rule__"),
//						},
//						GroupWait:      pulumi.String("30"),
//						GroupInterval:  pulumi.String("30"),
//						RepeatInterval: pulumi.String("30"),
//					},
//					&vmp.NotifyGroupPolicyLevelArgs{
//						Level: pulumi.String("P1"),
//						GroupBies: pulumi.StringArray{
//							pulumi.String("__rule__"),
//						},
//						GroupWait:      pulumi.String("40"),
//						GroupInterval:  pulumi.String("45"),
//						RepeatInterval: pulumi.String("30"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = vmp.GetNotifyGroupPoliciesOutput(ctx, vmp.GetNotifyGroupPoliciesOutputArgs{
//				Ids: pulumi.StringArray{
//					fooNotifyGroupPolicy.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetNotifyGroupPolicies(ctx *pulumi.Context, args *GetNotifyGroupPoliciesArgs, opts ...pulumi.InvokeOption) (*GetNotifyGroupPoliciesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetNotifyGroupPoliciesResult
	err := ctx.Invoke("volcengine:vmp/getNotifyGroupPolicies:getNotifyGroupPolicies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNotifyGroupPolicies.
type GetNotifyGroupPoliciesArgs struct {
	// A list of notify group policy ids.
	Ids []string `pulumi:"ids"`
	// The name of notify group policy.
	Name *string `pulumi:"name"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getNotifyGroupPolicies.
type GetNotifyGroupPoliciesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of notify group policy.
	Name *string `pulumi:"name"`
	// The list of notify group policies.
	NotifyPolicies []GetNotifyGroupPoliciesNotifyPolicy `pulumi:"notifyPolicies"`
	OutputFile     *string                              `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetNotifyGroupPoliciesOutput(ctx *pulumi.Context, args GetNotifyGroupPoliciesOutputArgs, opts ...pulumi.InvokeOption) GetNotifyGroupPoliciesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetNotifyGroupPoliciesResult, error) {
			args := v.(GetNotifyGroupPoliciesArgs)
			r, err := GetNotifyGroupPolicies(ctx, &args, opts...)
			var s GetNotifyGroupPoliciesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetNotifyGroupPoliciesResultOutput)
}

// A collection of arguments for invoking getNotifyGroupPolicies.
type GetNotifyGroupPoliciesOutputArgs struct {
	// A list of notify group policy ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of notify group policy.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetNotifyGroupPoliciesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotifyGroupPoliciesArgs)(nil)).Elem()
}

// A collection of values returned by getNotifyGroupPolicies.
type GetNotifyGroupPoliciesResultOutput struct{ *pulumi.OutputState }

func (GetNotifyGroupPoliciesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNotifyGroupPoliciesResult)(nil)).Elem()
}

func (o GetNotifyGroupPoliciesResultOutput) ToGetNotifyGroupPoliciesResultOutput() GetNotifyGroupPoliciesResultOutput {
	return o
}

func (o GetNotifyGroupPoliciesResultOutput) ToGetNotifyGroupPoliciesResultOutputWithContext(ctx context.Context) GetNotifyGroupPoliciesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetNotifyGroupPoliciesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetNotifyGroupPoliciesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetNotifyGroupPoliciesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetNotifyGroupPoliciesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of notify group policy.
func (o GetNotifyGroupPoliciesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNotifyGroupPoliciesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of notify group policies.
func (o GetNotifyGroupPoliciesResultOutput) NotifyPolicies() GetNotifyGroupPoliciesNotifyPolicyArrayOutput {
	return o.ApplyT(func(v GetNotifyGroupPoliciesResult) []GetNotifyGroupPoliciesNotifyPolicy { return v.NotifyPolicies }).(GetNotifyGroupPoliciesNotifyPolicyArrayOutput)
}

func (o GetNotifyGroupPoliciesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetNotifyGroupPoliciesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetNotifyGroupPoliciesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetNotifyGroupPoliciesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetNotifyGroupPoliciesResultOutput{})
}
