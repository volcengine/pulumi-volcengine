// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vmp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vmp notify policies
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vmp"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooContact, err := vmp.NewContact(ctx, "fooContact", &vmp.ContactArgs{
//				Email: pulumi.String("acctest1@tftest.com"),
//				Webhook: &vmp.ContactWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//				LarkBotWebhook: &vmp.ContactLarkBotWebhookArgs{
//					Address: pulumi.String("https://www.acctest1.com"),
//				},
//				DingTalkBotWebhook: &vmp.ContactDingTalkBotWebhookArgs{
//					Address: pulumi.String("https://www.dingacctest1.com"),
//					AtMobiles: pulumi.StringArray{
//						pulumi.String("18046891812"),
//					},
//				},
//				PhoneNumber: &vmp.ContactPhoneNumberArgs{
//					CountryCode: pulumi.String("+86"),
//					Number:      pulumi.String("18310101010"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			foo1Contact, err := vmp.NewContact(ctx, "foo1Contact", &vmp.ContactArgs{
//				Email: pulumi.String("acctest2@tftest.com"),
//				Webhook: &vmp.ContactWebhookArgs{
//					Address: pulumi.String("https://www.acctest2.com"),
//				},
//				LarkBotWebhook: &vmp.ContactLarkBotWebhookArgs{
//					Address: pulumi.String("https://www.acctest2.com"),
//				},
//				DingTalkBotWebhook: &vmp.ContactDingTalkBotWebhookArgs{
//					Address: pulumi.String("https://www.dingacctest2.com"),
//					AtMobiles: pulumi.StringArray{
//						pulumi.String("18046891813"),
//					},
//				},
//				PhoneNumber: &vmp.ContactPhoneNumberArgs{
//					CountryCode: pulumi.String("+86"),
//					Number:      pulumi.String("18310101011"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooContactGroup, err := vmp.NewContactGroup(ctx, "fooContactGroup", &vmp.ContactGroupArgs{
//				ContactIds: pulumi.StringArray{
//					fooContact.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			foo1ContactGroup, err := vmp.NewContactGroup(ctx, "foo1ContactGroup", &vmp.ContactGroupArgs{
//				ContactIds: pulumi.StringArray{
//					foo1Contact.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooNotifyPolicy, err := vmp.NewNotifyPolicy(ctx, "fooNotifyPolicy", &vmp.NotifyPolicyArgs{
//				Description: pulumi.String("acc-test-1"),
//				Levels: vmp.NotifyPolicyLevelArray{
//					&vmp.NotifyPolicyLevelArgs{
//						Level: pulumi.String("P1"),
//						ContactGroupIds: pulumi.StringArray{
//							fooContactGroup.ID(),
//						},
//						Channels: pulumi.StringArray{
//							pulumi.String("Email"),
//							pulumi.String("Webhook"),
//						},
//					},
//					&vmp.NotifyPolicyLevelArgs{
//						Level: pulumi.String("P0"),
//						ContactGroupIds: pulumi.StringArray{
//							foo1ContactGroup.ID(),
//						},
//						Channels: pulumi.StringArray{
//							pulumi.String("LarkBotWebhook"),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = vmp.GetNotifyPoliciesOutput(ctx, vmp.GetNotifyPoliciesOutputArgs{
//				Ids: pulumi.StringArray{
//					fooNotifyPolicy.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.vmp.NotifyPolicies has been deprecated in favor of volcengine.vmp.getNotifyPolicies
func NotifyPolicies(ctx *pulumi.Context, args *NotifyPoliciesArgs, opts ...pulumi.InvokeOption) (*NotifyPoliciesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv NotifyPoliciesResult
	err := ctx.Invoke("volcengine:vmp/notifyPolicies:NotifyPolicies", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking NotifyPolicies.
type NotifyPoliciesArgs struct {
	// The channel notify template for the alarm notification policy.
	ChannelNotifyTemplateIds []string `pulumi:"channelNotifyTemplateIds"`
	// The contact group for the alarm notification policy.
	ContactGroupIds []string `pulumi:"contactGroupIds"`
	// A list of notify policy ids.
	Ids []string `pulumi:"ids"`
	// The name of notify policy.
	Name *string `pulumi:"name"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by NotifyPolicies.
type NotifyPoliciesResult struct {
	// The channel notify template for the alarm notification policy.
	ChannelNotifyTemplateIds []string `pulumi:"channelNotifyTemplateIds"`
	// The contact group for the alarm notification policy.
	ContactGroupIds []string `pulumi:"contactGroupIds"`
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The name of notify policy.
	Name *string `pulumi:"name"`
	// The list of notify policies.
	NotifyPolicies []NotifyPoliciesNotifyPolicy `pulumi:"notifyPolicies"`
	OutputFile     *string                      `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func NotifyPoliciesOutput(ctx *pulumi.Context, args NotifyPoliciesOutputArgs, opts ...pulumi.InvokeOption) NotifyPoliciesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (NotifyPoliciesResult, error) {
			args := v.(NotifyPoliciesArgs)
			r, err := NotifyPolicies(ctx, &args, opts...)
			var s NotifyPoliciesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(NotifyPoliciesResultOutput)
}

// A collection of arguments for invoking NotifyPolicies.
type NotifyPoliciesOutputArgs struct {
	// The channel notify template for the alarm notification policy.
	ChannelNotifyTemplateIds pulumi.StringArrayInput `pulumi:"channelNotifyTemplateIds"`
	// The contact group for the alarm notification policy.
	ContactGroupIds pulumi.StringArrayInput `pulumi:"contactGroupIds"`
	// A list of notify policy ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// The name of notify policy.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (NotifyPoliciesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyPoliciesArgs)(nil)).Elem()
}

// A collection of values returned by NotifyPolicies.
type NotifyPoliciesResultOutput struct{ *pulumi.OutputState }

func (NotifyPoliciesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NotifyPoliciesResult)(nil)).Elem()
}

func (o NotifyPoliciesResultOutput) ToNotifyPoliciesResultOutput() NotifyPoliciesResultOutput {
	return o
}

func (o NotifyPoliciesResultOutput) ToNotifyPoliciesResultOutputWithContext(ctx context.Context) NotifyPoliciesResultOutput {
	return o
}

// The channel notify template for the alarm notification policy.
func (o NotifyPoliciesResultOutput) ChannelNotifyTemplateIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotifyPoliciesResult) []string { return v.ChannelNotifyTemplateIds }).(pulumi.StringArrayOutput)
}

// The contact group for the alarm notification policy.
func (o NotifyPoliciesResultOutput) ContactGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotifyPoliciesResult) []string { return v.ContactGroupIds }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o NotifyPoliciesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v NotifyPoliciesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o NotifyPoliciesResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v NotifyPoliciesResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The name of notify policy.
func (o NotifyPoliciesResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotifyPoliciesResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The list of notify policies.
func (o NotifyPoliciesResultOutput) NotifyPolicies() NotifyPoliciesNotifyPolicyArrayOutput {
	return o.ApplyT(func(v NotifyPoliciesResult) []NotifyPoliciesNotifyPolicy { return v.NotifyPolicies }).(NotifyPoliciesNotifyPolicyArrayOutput)
}

func (o NotifyPoliciesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NotifyPoliciesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o NotifyPoliciesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v NotifyPoliciesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(NotifyPoliciesResultOutput{})
}
