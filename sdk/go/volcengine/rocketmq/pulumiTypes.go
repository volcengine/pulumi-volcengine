// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type AccessKeysAccessKey struct {
	// The access key id of the rocketmq key.
	AccessKey string `pulumi:"accessKey"`
	// The acl config of the rocketmq key.
	AclConfigJson string `pulumi:"aclConfigJson"`
	// The active status of the rocketmq key.
	Actived bool `pulumi:"actived"`
	// The default authority of the rocketmq key.
	AllAuthority string `pulumi:"allAuthority"`
	// The create time of the rocketmq key.
	CreateTime string `pulumi:"createTime"`
	// The description of the rocketmq key.
	Description string `pulumi:"description"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The secret key of the rocketmq key.
	SecretKey string `pulumi:"secretKey"`
	// The custom authority of the rocketmq key.
	TopicPermissions []AccessKeysAccessKeyTopicPermission `pulumi:"topicPermissions"`
}

// AccessKeysAccessKeyInput is an input type that accepts AccessKeysAccessKeyArgs and AccessKeysAccessKeyOutput values.
// You can construct a concrete instance of `AccessKeysAccessKeyInput` via:
//
//	AccessKeysAccessKeyArgs{...}
type AccessKeysAccessKeyInput interface {
	pulumi.Input

	ToAccessKeysAccessKeyOutput() AccessKeysAccessKeyOutput
	ToAccessKeysAccessKeyOutputWithContext(context.Context) AccessKeysAccessKeyOutput
}

type AccessKeysAccessKeyArgs struct {
	// The access key id of the rocketmq key.
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The acl config of the rocketmq key.
	AclConfigJson pulumi.StringInput `pulumi:"aclConfigJson"`
	// The active status of the rocketmq key.
	Actived pulumi.BoolInput `pulumi:"actived"`
	// The default authority of the rocketmq key.
	AllAuthority pulumi.StringInput `pulumi:"allAuthority"`
	// The create time of the rocketmq key.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the rocketmq key.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The secret key of the rocketmq key.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The custom authority of the rocketmq key.
	TopicPermissions AccessKeysAccessKeyTopicPermissionArrayInput `pulumi:"topicPermissions"`
}

func (AccessKeysAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeysAccessKey)(nil)).Elem()
}

func (i AccessKeysAccessKeyArgs) ToAccessKeysAccessKeyOutput() AccessKeysAccessKeyOutput {
	return i.ToAccessKeysAccessKeyOutputWithContext(context.Background())
}

func (i AccessKeysAccessKeyArgs) ToAccessKeysAccessKeyOutputWithContext(ctx context.Context) AccessKeysAccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeysAccessKeyOutput)
}

// AccessKeysAccessKeyArrayInput is an input type that accepts AccessKeysAccessKeyArray and AccessKeysAccessKeyArrayOutput values.
// You can construct a concrete instance of `AccessKeysAccessKeyArrayInput` via:
//
//	AccessKeysAccessKeyArray{ AccessKeysAccessKeyArgs{...} }
type AccessKeysAccessKeyArrayInput interface {
	pulumi.Input

	ToAccessKeysAccessKeyArrayOutput() AccessKeysAccessKeyArrayOutput
	ToAccessKeysAccessKeyArrayOutputWithContext(context.Context) AccessKeysAccessKeyArrayOutput
}

type AccessKeysAccessKeyArray []AccessKeysAccessKeyInput

func (AccessKeysAccessKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessKeysAccessKey)(nil)).Elem()
}

func (i AccessKeysAccessKeyArray) ToAccessKeysAccessKeyArrayOutput() AccessKeysAccessKeyArrayOutput {
	return i.ToAccessKeysAccessKeyArrayOutputWithContext(context.Background())
}

func (i AccessKeysAccessKeyArray) ToAccessKeysAccessKeyArrayOutputWithContext(ctx context.Context) AccessKeysAccessKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeysAccessKeyArrayOutput)
}

type AccessKeysAccessKeyOutput struct{ *pulumi.OutputState }

func (AccessKeysAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeysAccessKey)(nil)).Elem()
}

func (o AccessKeysAccessKeyOutput) ToAccessKeysAccessKeyOutput() AccessKeysAccessKeyOutput {
	return o
}

func (o AccessKeysAccessKeyOutput) ToAccessKeysAccessKeyOutputWithContext(ctx context.Context) AccessKeysAccessKeyOutput {
	return o
}

// The access key id of the rocketmq key.
func (o AccessKeysAccessKeyOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeysAccessKey) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The acl config of the rocketmq key.
func (o AccessKeysAccessKeyOutput) AclConfigJson() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeysAccessKey) string { return v.AclConfigJson }).(pulumi.StringOutput)
}

// The active status of the rocketmq key.
func (o AccessKeysAccessKeyOutput) Actived() pulumi.BoolOutput {
	return o.ApplyT(func(v AccessKeysAccessKey) bool { return v.Actived }).(pulumi.BoolOutput)
}

// The default authority of the rocketmq key.
func (o AccessKeysAccessKeyOutput) AllAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeysAccessKey) string { return v.AllAuthority }).(pulumi.StringOutput)
}

// The create time of the rocketmq key.
func (o AccessKeysAccessKeyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeysAccessKey) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the rocketmq key.
func (o AccessKeysAccessKeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeysAccessKey) string { return v.Description }).(pulumi.StringOutput)
}

// The id of rocketmq instance.
func (o AccessKeysAccessKeyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeysAccessKey) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The secret key of the rocketmq key.
func (o AccessKeysAccessKeyOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeysAccessKey) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The custom authority of the rocketmq key.
func (o AccessKeysAccessKeyOutput) TopicPermissions() AccessKeysAccessKeyTopicPermissionArrayOutput {
	return o.ApplyT(func(v AccessKeysAccessKey) []AccessKeysAccessKeyTopicPermission { return v.TopicPermissions }).(AccessKeysAccessKeyTopicPermissionArrayOutput)
}

type AccessKeysAccessKeyArrayOutput struct{ *pulumi.OutputState }

func (AccessKeysAccessKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessKeysAccessKey)(nil)).Elem()
}

func (o AccessKeysAccessKeyArrayOutput) ToAccessKeysAccessKeyArrayOutput() AccessKeysAccessKeyArrayOutput {
	return o
}

func (o AccessKeysAccessKeyArrayOutput) ToAccessKeysAccessKeyArrayOutputWithContext(ctx context.Context) AccessKeysAccessKeyArrayOutput {
	return o
}

func (o AccessKeysAccessKeyArrayOutput) Index(i pulumi.IntInput) AccessKeysAccessKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessKeysAccessKey {
		return vs[0].([]AccessKeysAccessKey)[vs[1].(int)]
	}).(AccessKeysAccessKeyOutput)
}

type AccessKeysAccessKeyTopicPermission struct {
	// The custom authority for the topic.
	Permission string `pulumi:"permission"`
	// The name of the rocketmq topic.
	TopicName string `pulumi:"topicName"`
}

// AccessKeysAccessKeyTopicPermissionInput is an input type that accepts AccessKeysAccessKeyTopicPermissionArgs and AccessKeysAccessKeyTopicPermissionOutput values.
// You can construct a concrete instance of `AccessKeysAccessKeyTopicPermissionInput` via:
//
//	AccessKeysAccessKeyTopicPermissionArgs{...}
type AccessKeysAccessKeyTopicPermissionInput interface {
	pulumi.Input

	ToAccessKeysAccessKeyTopicPermissionOutput() AccessKeysAccessKeyTopicPermissionOutput
	ToAccessKeysAccessKeyTopicPermissionOutputWithContext(context.Context) AccessKeysAccessKeyTopicPermissionOutput
}

type AccessKeysAccessKeyTopicPermissionArgs struct {
	// The custom authority for the topic.
	Permission pulumi.StringInput `pulumi:"permission"`
	// The name of the rocketmq topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (AccessKeysAccessKeyTopicPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeysAccessKeyTopicPermission)(nil)).Elem()
}

func (i AccessKeysAccessKeyTopicPermissionArgs) ToAccessKeysAccessKeyTopicPermissionOutput() AccessKeysAccessKeyTopicPermissionOutput {
	return i.ToAccessKeysAccessKeyTopicPermissionOutputWithContext(context.Background())
}

func (i AccessKeysAccessKeyTopicPermissionArgs) ToAccessKeysAccessKeyTopicPermissionOutputWithContext(ctx context.Context) AccessKeysAccessKeyTopicPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeysAccessKeyTopicPermissionOutput)
}

// AccessKeysAccessKeyTopicPermissionArrayInput is an input type that accepts AccessKeysAccessKeyTopicPermissionArray and AccessKeysAccessKeyTopicPermissionArrayOutput values.
// You can construct a concrete instance of `AccessKeysAccessKeyTopicPermissionArrayInput` via:
//
//	AccessKeysAccessKeyTopicPermissionArray{ AccessKeysAccessKeyTopicPermissionArgs{...} }
type AccessKeysAccessKeyTopicPermissionArrayInput interface {
	pulumi.Input

	ToAccessKeysAccessKeyTopicPermissionArrayOutput() AccessKeysAccessKeyTopicPermissionArrayOutput
	ToAccessKeysAccessKeyTopicPermissionArrayOutputWithContext(context.Context) AccessKeysAccessKeyTopicPermissionArrayOutput
}

type AccessKeysAccessKeyTopicPermissionArray []AccessKeysAccessKeyTopicPermissionInput

func (AccessKeysAccessKeyTopicPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessKeysAccessKeyTopicPermission)(nil)).Elem()
}

func (i AccessKeysAccessKeyTopicPermissionArray) ToAccessKeysAccessKeyTopicPermissionArrayOutput() AccessKeysAccessKeyTopicPermissionArrayOutput {
	return i.ToAccessKeysAccessKeyTopicPermissionArrayOutputWithContext(context.Background())
}

func (i AccessKeysAccessKeyTopicPermissionArray) ToAccessKeysAccessKeyTopicPermissionArrayOutputWithContext(ctx context.Context) AccessKeysAccessKeyTopicPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessKeysAccessKeyTopicPermissionArrayOutput)
}

type AccessKeysAccessKeyTopicPermissionOutput struct{ *pulumi.OutputState }

func (AccessKeysAccessKeyTopicPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessKeysAccessKeyTopicPermission)(nil)).Elem()
}

func (o AccessKeysAccessKeyTopicPermissionOutput) ToAccessKeysAccessKeyTopicPermissionOutput() AccessKeysAccessKeyTopicPermissionOutput {
	return o
}

func (o AccessKeysAccessKeyTopicPermissionOutput) ToAccessKeysAccessKeyTopicPermissionOutputWithContext(ctx context.Context) AccessKeysAccessKeyTopicPermissionOutput {
	return o
}

// The custom authority for the topic.
func (o AccessKeysAccessKeyTopicPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeysAccessKeyTopicPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// The name of the rocketmq topic.
func (o AccessKeysAccessKeyTopicPermissionOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v AccessKeysAccessKeyTopicPermission) string { return v.TopicName }).(pulumi.StringOutput)
}

type AccessKeysAccessKeyTopicPermissionArrayOutput struct{ *pulumi.OutputState }

func (AccessKeysAccessKeyTopicPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessKeysAccessKeyTopicPermission)(nil)).Elem()
}

func (o AccessKeysAccessKeyTopicPermissionArrayOutput) ToAccessKeysAccessKeyTopicPermissionArrayOutput() AccessKeysAccessKeyTopicPermissionArrayOutput {
	return o
}

func (o AccessKeysAccessKeyTopicPermissionArrayOutput) ToAccessKeysAccessKeyTopicPermissionArrayOutputWithContext(ctx context.Context) AccessKeysAccessKeyTopicPermissionArrayOutput {
	return o
}

func (o AccessKeysAccessKeyTopicPermissionArrayOutput) Index(i pulumi.IntInput) AccessKeysAccessKeyTopicPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessKeysAccessKeyTopicPermission {
		return vs[0].([]AccessKeysAccessKeyTopicPermission)[vs[1].(int)]
	}).(AccessKeysAccessKeyTopicPermissionOutput)
}

type AllowListsRocketmqAllowList struct {
	// The description of the rocketmq allow list.
	AllowListDesc string `pulumi:"allowListDesc"`
	// The id of the rocketmq allow list.
	AllowListId string `pulumi:"allowListId"`
	// The number of ip address in the rocketmq allow list.
	AllowListIpNum int `pulumi:"allowListIpNum"`
	// The name of the rocketmq allow list.
	AllowListName string `pulumi:"allowListName"`
	// The type of the rocketmq allow list.
	AllowListType string `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format of the allow list.
	AllowLists []string `pulumi:"allowLists"`
	// The number of the rocketmq instances associated with the allow list.
	AssociatedInstanceNum int `pulumi:"associatedInstanceNum"`
	// The associated instance information of the allow list.
	AssociatedInstances []AllowListsRocketmqAllowListAssociatedInstance `pulumi:"associatedInstances"`
	// The id of the rocketmq allow list.
	Id string `pulumi:"id"`
}

// AllowListsRocketmqAllowListInput is an input type that accepts AllowListsRocketmqAllowListArgs and AllowListsRocketmqAllowListOutput values.
// You can construct a concrete instance of `AllowListsRocketmqAllowListInput` via:
//
//	AllowListsRocketmqAllowListArgs{...}
type AllowListsRocketmqAllowListInput interface {
	pulumi.Input

	ToAllowListsRocketmqAllowListOutput() AllowListsRocketmqAllowListOutput
	ToAllowListsRocketmqAllowListOutputWithContext(context.Context) AllowListsRocketmqAllowListOutput
}

type AllowListsRocketmqAllowListArgs struct {
	// The description of the rocketmq allow list.
	AllowListDesc pulumi.StringInput `pulumi:"allowListDesc"`
	// The id of the rocketmq allow list.
	AllowListId pulumi.StringInput `pulumi:"allowListId"`
	// The number of ip address in the rocketmq allow list.
	AllowListIpNum pulumi.IntInput `pulumi:"allowListIpNum"`
	// The name of the rocketmq allow list.
	AllowListName pulumi.StringInput `pulumi:"allowListName"`
	// The type of the rocketmq allow list.
	AllowListType pulumi.StringInput `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format of the allow list.
	AllowLists pulumi.StringArrayInput `pulumi:"allowLists"`
	// The number of the rocketmq instances associated with the allow list.
	AssociatedInstanceNum pulumi.IntInput `pulumi:"associatedInstanceNum"`
	// The associated instance information of the allow list.
	AssociatedInstances AllowListsRocketmqAllowListAssociatedInstanceArrayInput `pulumi:"associatedInstances"`
	// The id of the rocketmq allow list.
	Id pulumi.StringInput `pulumi:"id"`
}

func (AllowListsRocketmqAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowListsRocketmqAllowList)(nil)).Elem()
}

func (i AllowListsRocketmqAllowListArgs) ToAllowListsRocketmqAllowListOutput() AllowListsRocketmqAllowListOutput {
	return i.ToAllowListsRocketmqAllowListOutputWithContext(context.Background())
}

func (i AllowListsRocketmqAllowListArgs) ToAllowListsRocketmqAllowListOutputWithContext(ctx context.Context) AllowListsRocketmqAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListsRocketmqAllowListOutput)
}

// AllowListsRocketmqAllowListArrayInput is an input type that accepts AllowListsRocketmqAllowListArray and AllowListsRocketmqAllowListArrayOutput values.
// You can construct a concrete instance of `AllowListsRocketmqAllowListArrayInput` via:
//
//	AllowListsRocketmqAllowListArray{ AllowListsRocketmqAllowListArgs{...} }
type AllowListsRocketmqAllowListArrayInput interface {
	pulumi.Input

	ToAllowListsRocketmqAllowListArrayOutput() AllowListsRocketmqAllowListArrayOutput
	ToAllowListsRocketmqAllowListArrayOutputWithContext(context.Context) AllowListsRocketmqAllowListArrayOutput
}

type AllowListsRocketmqAllowListArray []AllowListsRocketmqAllowListInput

func (AllowListsRocketmqAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowListsRocketmqAllowList)(nil)).Elem()
}

func (i AllowListsRocketmqAllowListArray) ToAllowListsRocketmqAllowListArrayOutput() AllowListsRocketmqAllowListArrayOutput {
	return i.ToAllowListsRocketmqAllowListArrayOutputWithContext(context.Background())
}

func (i AllowListsRocketmqAllowListArray) ToAllowListsRocketmqAllowListArrayOutputWithContext(ctx context.Context) AllowListsRocketmqAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListsRocketmqAllowListArrayOutput)
}

type AllowListsRocketmqAllowListOutput struct{ *pulumi.OutputState }

func (AllowListsRocketmqAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowListsRocketmqAllowList)(nil)).Elem()
}

func (o AllowListsRocketmqAllowListOutput) ToAllowListsRocketmqAllowListOutput() AllowListsRocketmqAllowListOutput {
	return o
}

func (o AllowListsRocketmqAllowListOutput) ToAllowListsRocketmqAllowListOutputWithContext(ctx context.Context) AllowListsRocketmqAllowListOutput {
	return o
}

// The description of the rocketmq allow list.
func (o AllowListsRocketmqAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowList) string { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The id of the rocketmq allow list.
func (o AllowListsRocketmqAllowListOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowList) string { return v.AllowListId }).(pulumi.StringOutput)
}

// The number of ip address in the rocketmq allow list.
func (o AllowListsRocketmqAllowListOutput) AllowListIpNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowList) int { return v.AllowListIpNum }).(pulumi.IntOutput)
}

// The name of the rocketmq allow list.
func (o AllowListsRocketmqAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowList) string { return v.AllowListName }).(pulumi.StringOutput)
}

// The type of the rocketmq allow list.
func (o AllowListsRocketmqAllowListOutput) AllowListType() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowList) string { return v.AllowListType }).(pulumi.StringOutput)
}

// The IP address or a range of IP addresses in CIDR format of the allow list.
func (o AllowListsRocketmqAllowListOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowList) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The number of the rocketmq instances associated with the allow list.
func (o AllowListsRocketmqAllowListOutput) AssociatedInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowList) int { return v.AssociatedInstanceNum }).(pulumi.IntOutput)
}

// The associated instance information of the allow list.
func (o AllowListsRocketmqAllowListOutput) AssociatedInstances() AllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowList) []AllowListsRocketmqAllowListAssociatedInstance {
		return v.AssociatedInstances
	}).(AllowListsRocketmqAllowListAssociatedInstanceArrayOutput)
}

// The id of the rocketmq allow list.
func (o AllowListsRocketmqAllowListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowList) string { return v.Id }).(pulumi.StringOutput)
}

type AllowListsRocketmqAllowListArrayOutput struct{ *pulumi.OutputState }

func (AllowListsRocketmqAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowListsRocketmqAllowList)(nil)).Elem()
}

func (o AllowListsRocketmqAllowListArrayOutput) ToAllowListsRocketmqAllowListArrayOutput() AllowListsRocketmqAllowListArrayOutput {
	return o
}

func (o AllowListsRocketmqAllowListArrayOutput) ToAllowListsRocketmqAllowListArrayOutputWithContext(ctx context.Context) AllowListsRocketmqAllowListArrayOutput {
	return o
}

func (o AllowListsRocketmqAllowListArrayOutput) Index(i pulumi.IntInput) AllowListsRocketmqAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowListsRocketmqAllowList {
		return vs[0].([]AllowListsRocketmqAllowList)[vs[1].(int)]
	}).(AllowListsRocketmqAllowListOutput)
}

type AllowListsRocketmqAllowListAssociatedInstance struct {
	// The id of the rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the rocketmq instance.
	InstanceName string `pulumi:"instanceName"`
	// The vpc id of the rocketmq instance.
	Vpc string `pulumi:"vpc"`
}

// AllowListsRocketmqAllowListAssociatedInstanceInput is an input type that accepts AllowListsRocketmqAllowListAssociatedInstanceArgs and AllowListsRocketmqAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `AllowListsRocketmqAllowListAssociatedInstanceInput` via:
//
//	AllowListsRocketmqAllowListAssociatedInstanceArgs{...}
type AllowListsRocketmqAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToAllowListsRocketmqAllowListAssociatedInstanceOutput() AllowListsRocketmqAllowListAssociatedInstanceOutput
	ToAllowListsRocketmqAllowListAssociatedInstanceOutputWithContext(context.Context) AllowListsRocketmqAllowListAssociatedInstanceOutput
}

type AllowListsRocketmqAllowListAssociatedInstanceArgs struct {
	// The id of the rocketmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the rocketmq instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The vpc id of the rocketmq instance.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (AllowListsRocketmqAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowListsRocketmqAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowListsRocketmqAllowListAssociatedInstanceArgs) ToAllowListsRocketmqAllowListAssociatedInstanceOutput() AllowListsRocketmqAllowListAssociatedInstanceOutput {
	return i.ToAllowListsRocketmqAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i AllowListsRocketmqAllowListAssociatedInstanceArgs) ToAllowListsRocketmqAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowListsRocketmqAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListsRocketmqAllowListAssociatedInstanceOutput)
}

// AllowListsRocketmqAllowListAssociatedInstanceArrayInput is an input type that accepts AllowListsRocketmqAllowListAssociatedInstanceArray and AllowListsRocketmqAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `AllowListsRocketmqAllowListAssociatedInstanceArrayInput` via:
//
//	AllowListsRocketmqAllowListAssociatedInstanceArray{ AllowListsRocketmqAllowListAssociatedInstanceArgs{...} }
type AllowListsRocketmqAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToAllowListsRocketmqAllowListAssociatedInstanceArrayOutput() AllowListsRocketmqAllowListAssociatedInstanceArrayOutput
	ToAllowListsRocketmqAllowListAssociatedInstanceArrayOutputWithContext(context.Context) AllowListsRocketmqAllowListAssociatedInstanceArrayOutput
}

type AllowListsRocketmqAllowListAssociatedInstanceArray []AllowListsRocketmqAllowListAssociatedInstanceInput

func (AllowListsRocketmqAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowListsRocketmqAllowListAssociatedInstance)(nil)).Elem()
}

func (i AllowListsRocketmqAllowListAssociatedInstanceArray) ToAllowListsRocketmqAllowListAssociatedInstanceArrayOutput() AllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return i.ToAllowListsRocketmqAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i AllowListsRocketmqAllowListAssociatedInstanceArray) ToAllowListsRocketmqAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AllowListsRocketmqAllowListAssociatedInstanceArrayOutput)
}

type AllowListsRocketmqAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (AllowListsRocketmqAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AllowListsRocketmqAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowListsRocketmqAllowListAssociatedInstanceOutput) ToAllowListsRocketmqAllowListAssociatedInstanceOutput() AllowListsRocketmqAllowListAssociatedInstanceOutput {
	return o
}

func (o AllowListsRocketmqAllowListAssociatedInstanceOutput) ToAllowListsRocketmqAllowListAssociatedInstanceOutputWithContext(ctx context.Context) AllowListsRocketmqAllowListAssociatedInstanceOutput {
	return o
}

// The id of the rocketmq instance.
func (o AllowListsRocketmqAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowListAssociatedInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the rocketmq instance.
func (o AllowListsRocketmqAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowListAssociatedInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The vpc id of the rocketmq instance.
func (o AllowListsRocketmqAllowListAssociatedInstanceOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v AllowListsRocketmqAllowListAssociatedInstance) string { return v.Vpc }).(pulumi.StringOutput)
}

type AllowListsRocketmqAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (AllowListsRocketmqAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AllowListsRocketmqAllowListAssociatedInstance)(nil)).Elem()
}

func (o AllowListsRocketmqAllowListAssociatedInstanceArrayOutput) ToAllowListsRocketmqAllowListAssociatedInstanceArrayOutput() AllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowListsRocketmqAllowListAssociatedInstanceArrayOutput) ToAllowListsRocketmqAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) AllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o AllowListsRocketmqAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) AllowListsRocketmqAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AllowListsRocketmqAllowListAssociatedInstance {
		return vs[0].([]AllowListsRocketmqAllowListAssociatedInstance)[vs[1].(int)]
	}).(AllowListsRocketmqAllowListAssociatedInstanceOutput)
}

type GroupsRocketmqGroup struct {
	// The consumed topic information of the rocketmq group.
	ConsumedClients []GroupsRocketmqGroupConsumedClient `pulumi:"consumedClients"`
	// The consumed topic information of the rocketmq group.
	ConsumedTopics []GroupsRocketmqGroupConsumedTopic `pulumi:"consumedTopics"`
	// The create time of the rocketmq group.
	CreateTime string `pulumi:"createTime"`
	// The description of the rocketmq group.
	Description string `pulumi:"description"`
	// The id of rocketmq group. This field support fuzzy query.
	GroupId string `pulumi:"groupId"`
	// The type of rocketmq group. Valid values: `TCP`.
	GroupType string `pulumi:"groupType"`
	// Whether the subscription relationship of consumer instance groups within the group is consistent.
	IsSubSame bool `pulumi:"isSubSame"`
	// The message delay time of the rocketmq group. The unit is milliseconds.
	MessageDelayTime string `pulumi:"messageDelayTime"`
	// The message model of the rocketmq group.
	MessageModel string `pulumi:"messageModel"`
	// The status of the rocketmq group.
	Status string `pulumi:"status"`
	// The total consume rate of the rocketmq group. The unit is per second.
	TotalConsumeRate string `pulumi:"totalConsumeRate"`
	// The total amount of unconsumed messages.
	TotalDiff int `pulumi:"totalDiff"`
}

// GroupsRocketmqGroupInput is an input type that accepts GroupsRocketmqGroupArgs and GroupsRocketmqGroupOutput values.
// You can construct a concrete instance of `GroupsRocketmqGroupInput` via:
//
//	GroupsRocketmqGroupArgs{...}
type GroupsRocketmqGroupInput interface {
	pulumi.Input

	ToGroupsRocketmqGroupOutput() GroupsRocketmqGroupOutput
	ToGroupsRocketmqGroupOutputWithContext(context.Context) GroupsRocketmqGroupOutput
}

type GroupsRocketmqGroupArgs struct {
	// The consumed topic information of the rocketmq group.
	ConsumedClients GroupsRocketmqGroupConsumedClientArrayInput `pulumi:"consumedClients"`
	// The consumed topic information of the rocketmq group.
	ConsumedTopics GroupsRocketmqGroupConsumedTopicArrayInput `pulumi:"consumedTopics"`
	// The create time of the rocketmq group.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the rocketmq group.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of rocketmq group. This field support fuzzy query.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The type of rocketmq group. Valid values: `TCP`.
	GroupType pulumi.StringInput `pulumi:"groupType"`
	// Whether the subscription relationship of consumer instance groups within the group is consistent.
	IsSubSame pulumi.BoolInput `pulumi:"isSubSame"`
	// The message delay time of the rocketmq group. The unit is milliseconds.
	MessageDelayTime pulumi.StringInput `pulumi:"messageDelayTime"`
	// The message model of the rocketmq group.
	MessageModel pulumi.StringInput `pulumi:"messageModel"`
	// The status of the rocketmq group.
	Status pulumi.StringInput `pulumi:"status"`
	// The total consume rate of the rocketmq group. The unit is per second.
	TotalConsumeRate pulumi.StringInput `pulumi:"totalConsumeRate"`
	// The total amount of unconsumed messages.
	TotalDiff pulumi.IntInput `pulumi:"totalDiff"`
}

func (GroupsRocketmqGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsRocketmqGroup)(nil)).Elem()
}

func (i GroupsRocketmqGroupArgs) ToGroupsRocketmqGroupOutput() GroupsRocketmqGroupOutput {
	return i.ToGroupsRocketmqGroupOutputWithContext(context.Background())
}

func (i GroupsRocketmqGroupArgs) ToGroupsRocketmqGroupOutputWithContext(ctx context.Context) GroupsRocketmqGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsRocketmqGroupOutput)
}

// GroupsRocketmqGroupArrayInput is an input type that accepts GroupsRocketmqGroupArray and GroupsRocketmqGroupArrayOutput values.
// You can construct a concrete instance of `GroupsRocketmqGroupArrayInput` via:
//
//	GroupsRocketmqGroupArray{ GroupsRocketmqGroupArgs{...} }
type GroupsRocketmqGroupArrayInput interface {
	pulumi.Input

	ToGroupsRocketmqGroupArrayOutput() GroupsRocketmqGroupArrayOutput
	ToGroupsRocketmqGroupArrayOutputWithContext(context.Context) GroupsRocketmqGroupArrayOutput
}

type GroupsRocketmqGroupArray []GroupsRocketmqGroupInput

func (GroupsRocketmqGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsRocketmqGroup)(nil)).Elem()
}

func (i GroupsRocketmqGroupArray) ToGroupsRocketmqGroupArrayOutput() GroupsRocketmqGroupArrayOutput {
	return i.ToGroupsRocketmqGroupArrayOutputWithContext(context.Background())
}

func (i GroupsRocketmqGroupArray) ToGroupsRocketmqGroupArrayOutputWithContext(ctx context.Context) GroupsRocketmqGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsRocketmqGroupArrayOutput)
}

type GroupsRocketmqGroupOutput struct{ *pulumi.OutputState }

func (GroupsRocketmqGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsRocketmqGroup)(nil)).Elem()
}

func (o GroupsRocketmqGroupOutput) ToGroupsRocketmqGroupOutput() GroupsRocketmqGroupOutput {
	return o
}

func (o GroupsRocketmqGroupOutput) ToGroupsRocketmqGroupOutputWithContext(ctx context.Context) GroupsRocketmqGroupOutput {
	return o
}

// The consumed topic information of the rocketmq group.
func (o GroupsRocketmqGroupOutput) ConsumedClients() GroupsRocketmqGroupConsumedClientArrayOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) []GroupsRocketmqGroupConsumedClient { return v.ConsumedClients }).(GroupsRocketmqGroupConsumedClientArrayOutput)
}

// The consumed topic information of the rocketmq group.
func (o GroupsRocketmqGroupOutput) ConsumedTopics() GroupsRocketmqGroupConsumedTopicArrayOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) []GroupsRocketmqGroupConsumedTopic { return v.ConsumedTopics }).(GroupsRocketmqGroupConsumedTopicArrayOutput)
}

// The create time of the rocketmq group.
func (o GroupsRocketmqGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the rocketmq group.
func (o GroupsRocketmqGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) string { return v.Description }).(pulumi.StringOutput)
}

// The id of rocketmq group. This field support fuzzy query.
func (o GroupsRocketmqGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) string { return v.GroupId }).(pulumi.StringOutput)
}

// The type of rocketmq group. Valid values: `TCP`.
func (o GroupsRocketmqGroupOutput) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) string { return v.GroupType }).(pulumi.StringOutput)
}

// Whether the subscription relationship of consumer instance groups within the group is consistent.
func (o GroupsRocketmqGroupOutput) IsSubSame() pulumi.BoolOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) bool { return v.IsSubSame }).(pulumi.BoolOutput)
}

// The message delay time of the rocketmq group. The unit is milliseconds.
func (o GroupsRocketmqGroupOutput) MessageDelayTime() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) string { return v.MessageDelayTime }).(pulumi.StringOutput)
}

// The message model of the rocketmq group.
func (o GroupsRocketmqGroupOutput) MessageModel() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) string { return v.MessageModel }).(pulumi.StringOutput)
}

// The status of the rocketmq group.
func (o GroupsRocketmqGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) string { return v.Status }).(pulumi.StringOutput)
}

// The total consume rate of the rocketmq group. The unit is per second.
func (o GroupsRocketmqGroupOutput) TotalConsumeRate() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) string { return v.TotalConsumeRate }).(pulumi.StringOutput)
}

// The total amount of unconsumed messages.
func (o GroupsRocketmqGroupOutput) TotalDiff() pulumi.IntOutput {
	return o.ApplyT(func(v GroupsRocketmqGroup) int { return v.TotalDiff }).(pulumi.IntOutput)
}

type GroupsRocketmqGroupArrayOutput struct{ *pulumi.OutputState }

func (GroupsRocketmqGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsRocketmqGroup)(nil)).Elem()
}

func (o GroupsRocketmqGroupArrayOutput) ToGroupsRocketmqGroupArrayOutput() GroupsRocketmqGroupArrayOutput {
	return o
}

func (o GroupsRocketmqGroupArrayOutput) ToGroupsRocketmqGroupArrayOutputWithContext(ctx context.Context) GroupsRocketmqGroupArrayOutput {
	return o
}

func (o GroupsRocketmqGroupArrayOutput) Index(i pulumi.IntInput) GroupsRocketmqGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupsRocketmqGroup {
		return vs[0].([]GroupsRocketmqGroup)[vs[1].(int)]
	}).(GroupsRocketmqGroupOutput)
}

type GroupsRocketmqGroupConsumedClient struct {
	// The address of the consumed client.
	ClientAddress string `pulumi:"clientAddress"`
	// The id of the consumed client.
	ClientId string `pulumi:"clientId"`
	// The amount of message.
	Diff int `pulumi:"diff"`
	// The language of the consumed client.
	Language string `pulumi:"language"`
	// The version of the consumed client.
	Version string `pulumi:"version"`
}

// GroupsRocketmqGroupConsumedClientInput is an input type that accepts GroupsRocketmqGroupConsumedClientArgs and GroupsRocketmqGroupConsumedClientOutput values.
// You can construct a concrete instance of `GroupsRocketmqGroupConsumedClientInput` via:
//
//	GroupsRocketmqGroupConsumedClientArgs{...}
type GroupsRocketmqGroupConsumedClientInput interface {
	pulumi.Input

	ToGroupsRocketmqGroupConsumedClientOutput() GroupsRocketmqGroupConsumedClientOutput
	ToGroupsRocketmqGroupConsumedClientOutputWithContext(context.Context) GroupsRocketmqGroupConsumedClientOutput
}

type GroupsRocketmqGroupConsumedClientArgs struct {
	// The address of the consumed client.
	ClientAddress pulumi.StringInput `pulumi:"clientAddress"`
	// The id of the consumed client.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The amount of message.
	Diff pulumi.IntInput `pulumi:"diff"`
	// The language of the consumed client.
	Language pulumi.StringInput `pulumi:"language"`
	// The version of the consumed client.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GroupsRocketmqGroupConsumedClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsRocketmqGroupConsumedClient)(nil)).Elem()
}

func (i GroupsRocketmqGroupConsumedClientArgs) ToGroupsRocketmqGroupConsumedClientOutput() GroupsRocketmqGroupConsumedClientOutput {
	return i.ToGroupsRocketmqGroupConsumedClientOutputWithContext(context.Background())
}

func (i GroupsRocketmqGroupConsumedClientArgs) ToGroupsRocketmqGroupConsumedClientOutputWithContext(ctx context.Context) GroupsRocketmqGroupConsumedClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsRocketmqGroupConsumedClientOutput)
}

// GroupsRocketmqGroupConsumedClientArrayInput is an input type that accepts GroupsRocketmqGroupConsumedClientArray and GroupsRocketmqGroupConsumedClientArrayOutput values.
// You can construct a concrete instance of `GroupsRocketmqGroupConsumedClientArrayInput` via:
//
//	GroupsRocketmqGroupConsumedClientArray{ GroupsRocketmqGroupConsumedClientArgs{...} }
type GroupsRocketmqGroupConsumedClientArrayInput interface {
	pulumi.Input

	ToGroupsRocketmqGroupConsumedClientArrayOutput() GroupsRocketmqGroupConsumedClientArrayOutput
	ToGroupsRocketmqGroupConsumedClientArrayOutputWithContext(context.Context) GroupsRocketmqGroupConsumedClientArrayOutput
}

type GroupsRocketmqGroupConsumedClientArray []GroupsRocketmqGroupConsumedClientInput

func (GroupsRocketmqGroupConsumedClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsRocketmqGroupConsumedClient)(nil)).Elem()
}

func (i GroupsRocketmqGroupConsumedClientArray) ToGroupsRocketmqGroupConsumedClientArrayOutput() GroupsRocketmqGroupConsumedClientArrayOutput {
	return i.ToGroupsRocketmqGroupConsumedClientArrayOutputWithContext(context.Background())
}

func (i GroupsRocketmqGroupConsumedClientArray) ToGroupsRocketmqGroupConsumedClientArrayOutputWithContext(ctx context.Context) GroupsRocketmqGroupConsumedClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsRocketmqGroupConsumedClientArrayOutput)
}

type GroupsRocketmqGroupConsumedClientOutput struct{ *pulumi.OutputState }

func (GroupsRocketmqGroupConsumedClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsRocketmqGroupConsumedClient)(nil)).Elem()
}

func (o GroupsRocketmqGroupConsumedClientOutput) ToGroupsRocketmqGroupConsumedClientOutput() GroupsRocketmqGroupConsumedClientOutput {
	return o
}

func (o GroupsRocketmqGroupConsumedClientOutput) ToGroupsRocketmqGroupConsumedClientOutputWithContext(ctx context.Context) GroupsRocketmqGroupConsumedClientOutput {
	return o
}

// The address of the consumed client.
func (o GroupsRocketmqGroupConsumedClientOutput) ClientAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroupConsumedClient) string { return v.ClientAddress }).(pulumi.StringOutput)
}

// The id of the consumed client.
func (o GroupsRocketmqGroupConsumedClientOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroupConsumedClient) string { return v.ClientId }).(pulumi.StringOutput)
}

// The amount of message.
func (o GroupsRocketmqGroupConsumedClientOutput) Diff() pulumi.IntOutput {
	return o.ApplyT(func(v GroupsRocketmqGroupConsumedClient) int { return v.Diff }).(pulumi.IntOutput)
}

// The language of the consumed client.
func (o GroupsRocketmqGroupConsumedClientOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroupConsumedClient) string { return v.Language }).(pulumi.StringOutput)
}

// The version of the consumed client.
func (o GroupsRocketmqGroupConsumedClientOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroupConsumedClient) string { return v.Version }).(pulumi.StringOutput)
}

type GroupsRocketmqGroupConsumedClientArrayOutput struct{ *pulumi.OutputState }

func (GroupsRocketmqGroupConsumedClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsRocketmqGroupConsumedClient)(nil)).Elem()
}

func (o GroupsRocketmqGroupConsumedClientArrayOutput) ToGroupsRocketmqGroupConsumedClientArrayOutput() GroupsRocketmqGroupConsumedClientArrayOutput {
	return o
}

func (o GroupsRocketmqGroupConsumedClientArrayOutput) ToGroupsRocketmqGroupConsumedClientArrayOutputWithContext(ctx context.Context) GroupsRocketmqGroupConsumedClientArrayOutput {
	return o
}

func (o GroupsRocketmqGroupConsumedClientArrayOutput) Index(i pulumi.IntInput) GroupsRocketmqGroupConsumedClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupsRocketmqGroupConsumedClient {
		return vs[0].([]GroupsRocketmqGroupConsumedClient)[vs[1].(int)]
	}).(GroupsRocketmqGroupConsumedClientOutput)
}

type GroupsRocketmqGroupConsumedTopic struct {
	// The queue number of the rocketmq topic.
	QueueNum int `pulumi:"queueNum"`
	// The sub string of the rocketmq topic.
	SubString string `pulumi:"subString"`
	// The name of the rocketmq topic.
	TopicName string `pulumi:"topicName"`
}

// GroupsRocketmqGroupConsumedTopicInput is an input type that accepts GroupsRocketmqGroupConsumedTopicArgs and GroupsRocketmqGroupConsumedTopicOutput values.
// You can construct a concrete instance of `GroupsRocketmqGroupConsumedTopicInput` via:
//
//	GroupsRocketmqGroupConsumedTopicArgs{...}
type GroupsRocketmqGroupConsumedTopicInput interface {
	pulumi.Input

	ToGroupsRocketmqGroupConsumedTopicOutput() GroupsRocketmqGroupConsumedTopicOutput
	ToGroupsRocketmqGroupConsumedTopicOutputWithContext(context.Context) GroupsRocketmqGroupConsumedTopicOutput
}

type GroupsRocketmqGroupConsumedTopicArgs struct {
	// The queue number of the rocketmq topic.
	QueueNum pulumi.IntInput `pulumi:"queueNum"`
	// The sub string of the rocketmq topic.
	SubString pulumi.StringInput `pulumi:"subString"`
	// The name of the rocketmq topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GroupsRocketmqGroupConsumedTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsRocketmqGroupConsumedTopic)(nil)).Elem()
}

func (i GroupsRocketmqGroupConsumedTopicArgs) ToGroupsRocketmqGroupConsumedTopicOutput() GroupsRocketmqGroupConsumedTopicOutput {
	return i.ToGroupsRocketmqGroupConsumedTopicOutputWithContext(context.Background())
}

func (i GroupsRocketmqGroupConsumedTopicArgs) ToGroupsRocketmqGroupConsumedTopicOutputWithContext(ctx context.Context) GroupsRocketmqGroupConsumedTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsRocketmqGroupConsumedTopicOutput)
}

// GroupsRocketmqGroupConsumedTopicArrayInput is an input type that accepts GroupsRocketmqGroupConsumedTopicArray and GroupsRocketmqGroupConsumedTopicArrayOutput values.
// You can construct a concrete instance of `GroupsRocketmqGroupConsumedTopicArrayInput` via:
//
//	GroupsRocketmqGroupConsumedTopicArray{ GroupsRocketmqGroupConsumedTopicArgs{...} }
type GroupsRocketmqGroupConsumedTopicArrayInput interface {
	pulumi.Input

	ToGroupsRocketmqGroupConsumedTopicArrayOutput() GroupsRocketmqGroupConsumedTopicArrayOutput
	ToGroupsRocketmqGroupConsumedTopicArrayOutputWithContext(context.Context) GroupsRocketmqGroupConsumedTopicArrayOutput
}

type GroupsRocketmqGroupConsumedTopicArray []GroupsRocketmqGroupConsumedTopicInput

func (GroupsRocketmqGroupConsumedTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsRocketmqGroupConsumedTopic)(nil)).Elem()
}

func (i GroupsRocketmqGroupConsumedTopicArray) ToGroupsRocketmqGroupConsumedTopicArrayOutput() GroupsRocketmqGroupConsumedTopicArrayOutput {
	return i.ToGroupsRocketmqGroupConsumedTopicArrayOutputWithContext(context.Background())
}

func (i GroupsRocketmqGroupConsumedTopicArray) ToGroupsRocketmqGroupConsumedTopicArrayOutputWithContext(ctx context.Context) GroupsRocketmqGroupConsumedTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupsRocketmqGroupConsumedTopicArrayOutput)
}

type GroupsRocketmqGroupConsumedTopicOutput struct{ *pulumi.OutputState }

func (GroupsRocketmqGroupConsumedTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupsRocketmqGroupConsumedTopic)(nil)).Elem()
}

func (o GroupsRocketmqGroupConsumedTopicOutput) ToGroupsRocketmqGroupConsumedTopicOutput() GroupsRocketmqGroupConsumedTopicOutput {
	return o
}

func (o GroupsRocketmqGroupConsumedTopicOutput) ToGroupsRocketmqGroupConsumedTopicOutputWithContext(ctx context.Context) GroupsRocketmqGroupConsumedTopicOutput {
	return o
}

// The queue number of the rocketmq topic.
func (o GroupsRocketmqGroupConsumedTopicOutput) QueueNum() pulumi.IntOutput {
	return o.ApplyT(func(v GroupsRocketmqGroupConsumedTopic) int { return v.QueueNum }).(pulumi.IntOutput)
}

// The sub string of the rocketmq topic.
func (o GroupsRocketmqGroupConsumedTopicOutput) SubString() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroupConsumedTopic) string { return v.SubString }).(pulumi.StringOutput)
}

// The name of the rocketmq topic.
func (o GroupsRocketmqGroupConsumedTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GroupsRocketmqGroupConsumedTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type GroupsRocketmqGroupConsumedTopicArrayOutput struct{ *pulumi.OutputState }

func (GroupsRocketmqGroupConsumedTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupsRocketmqGroupConsumedTopic)(nil)).Elem()
}

func (o GroupsRocketmqGroupConsumedTopicArrayOutput) ToGroupsRocketmqGroupConsumedTopicArrayOutput() GroupsRocketmqGroupConsumedTopicArrayOutput {
	return o
}

func (o GroupsRocketmqGroupConsumedTopicArrayOutput) ToGroupsRocketmqGroupConsumedTopicArrayOutputWithContext(ctx context.Context) GroupsRocketmqGroupConsumedTopicArrayOutput {
	return o
}

func (o GroupsRocketmqGroupConsumedTopicArrayOutput) Index(i pulumi.IntInput) GroupsRocketmqGroupConsumedTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupsRocketmqGroupConsumedTopic {
		return vs[0].([]GroupsRocketmqGroupConsumedTopic)[vs[1].(int)]
	}).(GroupsRocketmqGroupConsumedTopicOutput)
}

type InstancesRocketmqInstance struct {
	// The account id of the rocketmq instance.
	AccountId string `pulumi:"accountId"`
	// Whether the private dns to public function is enabled for the rocketmq instance.
	ApplyPrivateDnsToPublic bool `pulumi:"applyPrivateDnsToPublic"`
	// The available queue number of the rocketmq instance.
	AvailableQueueNumber int `pulumi:"availableQueueNumber"`
	// The charge detail information of the rocketmq instance.
	ChargeDetails []InstancesRocketmqInstanceChargeDetail `pulumi:"chargeDetails"`
	// The compute spec of the rocketmq instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// The connection information of the rocketmq.
	ConnectionInfos []InstancesRocketmqInstanceConnectionInfo `pulumi:"connectionInfos"`
	// The create time of the rocketmq instance.
	CreateTime string `pulumi:"createTime"`
	// The eip id of the rocketmq instance.
	EipId string `pulumi:"eipId"`
	// Whether the ssl authentication is enabled for the rocketmq instance.
	EnableSsl bool `pulumi:"enableSsl"`
	// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours.
	FileReservedTime int `pulumi:"fileReservedTime"`
	// The id of the rocketmq instance.
	Id string `pulumi:"id"`
	// The description of the rocketmq instance.
	InstanceDescription string `pulumi:"instanceDescription"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of rocketmq instance. This field support fuzzy query.
	InstanceName string `pulumi:"instanceName"`
	// The status of rocketmq instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The project name of rocketmq instance.
	ProjectName string `pulumi:"projectName"`
	// The region id of the rocketmq instance.
	RegionId string `pulumi:"regionId"`
	// The ssl mode of the rocketmq instance.
	SslMode string `pulumi:"sslMode"`
	// The total storage space of the rocketmq instance.
	StorageSpace int `pulumi:"storageSpace"`
	// The subnet id of the rocketmq instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstancesRocketmqInstanceTag `pulumi:"tags"`
	// The used group number of the rocketmq instance.
	UsedGroupNumber int `pulumi:"usedGroupNumber"`
	// The used queue number of the rocketmq instance.
	UsedQueueNumber int `pulumi:"usedQueueNumber"`
	// The used storage space of the rocketmq instance.
	UsedStorageSpace int `pulumi:"usedStorageSpace"`
	// The used topic number of the rocketmq instance.
	UsedTopicNumber int `pulumi:"usedTopicNumber"`
	// The version of rocketmq instance. Valid values: `4.8`.
	Version string `pulumi:"version"`
	// The vpc id of rocketmq instance.
	VpcId string `pulumi:"vpcId"`
	// The zone id of rocketmq instance.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesRocketmqInstanceInput is an input type that accepts InstancesRocketmqInstanceArgs and InstancesRocketmqInstanceOutput values.
// You can construct a concrete instance of `InstancesRocketmqInstanceInput` via:
//
//	InstancesRocketmqInstanceArgs{...}
type InstancesRocketmqInstanceInput interface {
	pulumi.Input

	ToInstancesRocketmqInstanceOutput() InstancesRocketmqInstanceOutput
	ToInstancesRocketmqInstanceOutputWithContext(context.Context) InstancesRocketmqInstanceOutput
}

type InstancesRocketmqInstanceArgs struct {
	// The account id of the rocketmq instance.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Whether the private dns to public function is enabled for the rocketmq instance.
	ApplyPrivateDnsToPublic pulumi.BoolInput `pulumi:"applyPrivateDnsToPublic"`
	// The available queue number of the rocketmq instance.
	AvailableQueueNumber pulumi.IntInput `pulumi:"availableQueueNumber"`
	// The charge detail information of the rocketmq instance.
	ChargeDetails InstancesRocketmqInstanceChargeDetailArrayInput `pulumi:"chargeDetails"`
	// The compute spec of the rocketmq instance.
	ComputeSpec pulumi.StringInput `pulumi:"computeSpec"`
	// The connection information of the rocketmq.
	ConnectionInfos InstancesRocketmqInstanceConnectionInfoArrayInput `pulumi:"connectionInfos"`
	// The create time of the rocketmq instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The eip id of the rocketmq instance.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// Whether the ssl authentication is enabled for the rocketmq instance.
	EnableSsl pulumi.BoolInput `pulumi:"enableSsl"`
	// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours.
	FileReservedTime pulumi.IntInput `pulumi:"fileReservedTime"`
	// The id of the rocketmq instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The description of the rocketmq instance.
	InstanceDescription pulumi.StringInput `pulumi:"instanceDescription"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of rocketmq instance. This field support fuzzy query.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of rocketmq instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The project name of rocketmq instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region id of the rocketmq instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The ssl mode of the rocketmq instance.
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// The total storage space of the rocketmq instance.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// The subnet id of the rocketmq instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags InstancesRocketmqInstanceTagArrayInput `pulumi:"tags"`
	// The used group number of the rocketmq instance.
	UsedGroupNumber pulumi.IntInput `pulumi:"usedGroupNumber"`
	// The used queue number of the rocketmq instance.
	UsedQueueNumber pulumi.IntInput `pulumi:"usedQueueNumber"`
	// The used storage space of the rocketmq instance.
	UsedStorageSpace pulumi.IntInput `pulumi:"usedStorageSpace"`
	// The used topic number of the rocketmq instance.
	UsedTopicNumber pulumi.IntInput `pulumi:"usedTopicNumber"`
	// The version of rocketmq instance. Valid values: `4.8`.
	Version pulumi.StringInput `pulumi:"version"`
	// The vpc id of rocketmq instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone id of rocketmq instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesRocketmqInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRocketmqInstance)(nil)).Elem()
}

func (i InstancesRocketmqInstanceArgs) ToInstancesRocketmqInstanceOutput() InstancesRocketmqInstanceOutput {
	return i.ToInstancesRocketmqInstanceOutputWithContext(context.Background())
}

func (i InstancesRocketmqInstanceArgs) ToInstancesRocketmqInstanceOutputWithContext(ctx context.Context) InstancesRocketmqInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRocketmqInstanceOutput)
}

// InstancesRocketmqInstanceArrayInput is an input type that accepts InstancesRocketmqInstanceArray and InstancesRocketmqInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesRocketmqInstanceArrayInput` via:
//
//	InstancesRocketmqInstanceArray{ InstancesRocketmqInstanceArgs{...} }
type InstancesRocketmqInstanceArrayInput interface {
	pulumi.Input

	ToInstancesRocketmqInstanceArrayOutput() InstancesRocketmqInstanceArrayOutput
	ToInstancesRocketmqInstanceArrayOutputWithContext(context.Context) InstancesRocketmqInstanceArrayOutput
}

type InstancesRocketmqInstanceArray []InstancesRocketmqInstanceInput

func (InstancesRocketmqInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRocketmqInstance)(nil)).Elem()
}

func (i InstancesRocketmqInstanceArray) ToInstancesRocketmqInstanceArrayOutput() InstancesRocketmqInstanceArrayOutput {
	return i.ToInstancesRocketmqInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesRocketmqInstanceArray) ToInstancesRocketmqInstanceArrayOutputWithContext(ctx context.Context) InstancesRocketmqInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRocketmqInstanceArrayOutput)
}

type InstancesRocketmqInstanceOutput struct{ *pulumi.OutputState }

func (InstancesRocketmqInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRocketmqInstance)(nil)).Elem()
}

func (o InstancesRocketmqInstanceOutput) ToInstancesRocketmqInstanceOutput() InstancesRocketmqInstanceOutput {
	return o
}

func (o InstancesRocketmqInstanceOutput) ToInstancesRocketmqInstanceOutputWithContext(ctx context.Context) InstancesRocketmqInstanceOutput {
	return o
}

// The account id of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.AccountId }).(pulumi.StringOutput)
}

// Whether the private dns to public function is enabled for the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) ApplyPrivateDnsToPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) bool { return v.ApplyPrivateDnsToPublic }).(pulumi.BoolOutput)
}

// The available queue number of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) AvailableQueueNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) int { return v.AvailableQueueNumber }).(pulumi.IntOutput)
}

// The charge detail information of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) ChargeDetails() InstancesRocketmqInstanceChargeDetailArrayOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) []InstancesRocketmqInstanceChargeDetail { return v.ChargeDetails }).(InstancesRocketmqInstanceChargeDetailArrayOutput)
}

// The compute spec of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.ComputeSpec }).(pulumi.StringOutput)
}

// The connection information of the rocketmq.
func (o InstancesRocketmqInstanceOutput) ConnectionInfos() InstancesRocketmqInstanceConnectionInfoArrayOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) []InstancesRocketmqInstanceConnectionInfo { return v.ConnectionInfos }).(InstancesRocketmqInstanceConnectionInfoArrayOutput)
}

// The create time of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The eip id of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.EipId }).(pulumi.StringOutput)
}

// Whether the ssl authentication is enabled for the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) EnableSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) bool { return v.EnableSsl }).(pulumi.BoolOutput)
}

// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours.
func (o InstancesRocketmqInstanceOutput) FileReservedTime() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) int { return v.FileReservedTime }).(pulumi.IntOutput)
}

// The id of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The description of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) InstanceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.InstanceDescription }).(pulumi.StringOutput)
}

// The id of rocketmq instance.
func (o InstancesRocketmqInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of rocketmq instance. This field support fuzzy query.
func (o InstancesRocketmqInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of rocketmq instance.
func (o InstancesRocketmqInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The project name of rocketmq instance.
func (o InstancesRocketmqInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region id of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// The ssl mode of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.SslMode }).(pulumi.StringOutput)
}

// The total storage space of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// The subnet id of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstancesRocketmqInstanceOutput) Tags() InstancesRocketmqInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) []InstancesRocketmqInstanceTag { return v.Tags }).(InstancesRocketmqInstanceTagArrayOutput)
}

// The used group number of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) UsedGroupNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) int { return v.UsedGroupNumber }).(pulumi.IntOutput)
}

// The used queue number of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) UsedQueueNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) int { return v.UsedQueueNumber }).(pulumi.IntOutput)
}

// The used storage space of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) int { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// The used topic number of the rocketmq instance.
func (o InstancesRocketmqInstanceOutput) UsedTopicNumber() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) int { return v.UsedTopicNumber }).(pulumi.IntOutput)
}

// The version of rocketmq instance. Valid values: `4.8`.
func (o InstancesRocketmqInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.Version }).(pulumi.StringOutput)
}

// The vpc id of rocketmq instance.
func (o InstancesRocketmqInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of rocketmq instance.
func (o InstancesRocketmqInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesRocketmqInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesRocketmqInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRocketmqInstance)(nil)).Elem()
}

func (o InstancesRocketmqInstanceArrayOutput) ToInstancesRocketmqInstanceArrayOutput() InstancesRocketmqInstanceArrayOutput {
	return o
}

func (o InstancesRocketmqInstanceArrayOutput) ToInstancesRocketmqInstanceArrayOutputWithContext(ctx context.Context) InstancesRocketmqInstanceArrayOutput {
	return o
}

func (o InstancesRocketmqInstanceArrayOutput) Index(i pulumi.IntInput) InstancesRocketmqInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRocketmqInstance {
		return vs[0].([]InstancesRocketmqInstance)[vs[1].(int)]
	}).(InstancesRocketmqInstanceOutput)
}

type InstancesRocketmqInstanceChargeDetail struct {
	// Whether to enable automatic renewal.
	AutoRenew bool `pulumi:"autoRenew"`
	// The charge expire time of the rocketmq instance.
	ChargeExpireTime string `pulumi:"chargeExpireTime"`
	// The charge start time of the rocketmq instance.
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// The charge status of the rocketmq instance.
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
	ChargeType string `pulumi:"chargeType"`
	// The overdue reclaim time of the rocketmq instance.
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// The overdue time of the rocketmq instance.
	OverdueTime string `pulumi:"overdueTime"`
	// The period unit of the rocketmq instance.
	PeriodUnit string `pulumi:"periodUnit"`
}

// InstancesRocketmqInstanceChargeDetailInput is an input type that accepts InstancesRocketmqInstanceChargeDetailArgs and InstancesRocketmqInstanceChargeDetailOutput values.
// You can construct a concrete instance of `InstancesRocketmqInstanceChargeDetailInput` via:
//
//	InstancesRocketmqInstanceChargeDetailArgs{...}
type InstancesRocketmqInstanceChargeDetailInput interface {
	pulumi.Input

	ToInstancesRocketmqInstanceChargeDetailOutput() InstancesRocketmqInstanceChargeDetailOutput
	ToInstancesRocketmqInstanceChargeDetailOutputWithContext(context.Context) InstancesRocketmqInstanceChargeDetailOutput
}

type InstancesRocketmqInstanceChargeDetailArgs struct {
	// Whether to enable automatic renewal.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The charge expire time of the rocketmq instance.
	ChargeExpireTime pulumi.StringInput `pulumi:"chargeExpireTime"`
	// The charge start time of the rocketmq instance.
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// The charge status of the rocketmq instance.
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The overdue reclaim time of the rocketmq instance.
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// The overdue time of the rocketmq instance.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// The period unit of the rocketmq instance.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
}

func (InstancesRocketmqInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRocketmqInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesRocketmqInstanceChargeDetailArgs) ToInstancesRocketmqInstanceChargeDetailOutput() InstancesRocketmqInstanceChargeDetailOutput {
	return i.ToInstancesRocketmqInstanceChargeDetailOutputWithContext(context.Background())
}

func (i InstancesRocketmqInstanceChargeDetailArgs) ToInstancesRocketmqInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesRocketmqInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRocketmqInstanceChargeDetailOutput)
}

// InstancesRocketmqInstanceChargeDetailArrayInput is an input type that accepts InstancesRocketmqInstanceChargeDetailArray and InstancesRocketmqInstanceChargeDetailArrayOutput values.
// You can construct a concrete instance of `InstancesRocketmqInstanceChargeDetailArrayInput` via:
//
//	InstancesRocketmqInstanceChargeDetailArray{ InstancesRocketmqInstanceChargeDetailArgs{...} }
type InstancesRocketmqInstanceChargeDetailArrayInput interface {
	pulumi.Input

	ToInstancesRocketmqInstanceChargeDetailArrayOutput() InstancesRocketmqInstanceChargeDetailArrayOutput
	ToInstancesRocketmqInstanceChargeDetailArrayOutputWithContext(context.Context) InstancesRocketmqInstanceChargeDetailArrayOutput
}

type InstancesRocketmqInstanceChargeDetailArray []InstancesRocketmqInstanceChargeDetailInput

func (InstancesRocketmqInstanceChargeDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRocketmqInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesRocketmqInstanceChargeDetailArray) ToInstancesRocketmqInstanceChargeDetailArrayOutput() InstancesRocketmqInstanceChargeDetailArrayOutput {
	return i.ToInstancesRocketmqInstanceChargeDetailArrayOutputWithContext(context.Background())
}

func (i InstancesRocketmqInstanceChargeDetailArray) ToInstancesRocketmqInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstancesRocketmqInstanceChargeDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRocketmqInstanceChargeDetailArrayOutput)
}

type InstancesRocketmqInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (InstancesRocketmqInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRocketmqInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesRocketmqInstanceChargeDetailOutput) ToInstancesRocketmqInstanceChargeDetailOutput() InstancesRocketmqInstanceChargeDetailOutput {
	return o
}

func (o InstancesRocketmqInstanceChargeDetailOutput) ToInstancesRocketmqInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesRocketmqInstanceChargeDetailOutput {
	return o
}

// Whether to enable automatic renewal.
func (o InstancesRocketmqInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The charge expire time of the rocketmq instance.
func (o InstancesRocketmqInstanceChargeDetailOutput) ChargeExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceChargeDetail) string { return v.ChargeExpireTime }).(pulumi.StringOutput)
}

// The charge start time of the rocketmq instance.
func (o InstancesRocketmqInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// The charge status of the rocketmq instance.
func (o InstancesRocketmqInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
func (o InstancesRocketmqInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The overdue reclaim time of the rocketmq instance.
func (o InstancesRocketmqInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// The overdue time of the rocketmq instance.
func (o InstancesRocketmqInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// The period unit of the rocketmq instance.
func (o InstancesRocketmqInstanceChargeDetailOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceChargeDetail) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

type InstancesRocketmqInstanceChargeDetailArrayOutput struct{ *pulumi.OutputState }

func (InstancesRocketmqInstanceChargeDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRocketmqInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesRocketmqInstanceChargeDetailArrayOutput) ToInstancesRocketmqInstanceChargeDetailArrayOutput() InstancesRocketmqInstanceChargeDetailArrayOutput {
	return o
}

func (o InstancesRocketmqInstanceChargeDetailArrayOutput) ToInstancesRocketmqInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstancesRocketmqInstanceChargeDetailArrayOutput {
	return o
}

func (o InstancesRocketmqInstanceChargeDetailArrayOutput) Index(i pulumi.IntInput) InstancesRocketmqInstanceChargeDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRocketmqInstanceChargeDetail {
		return vs[0].([]InstancesRocketmqInstanceChargeDetail)[vs[1].(int)]
	}).(InstancesRocketmqInstanceChargeDetailOutput)
}

type InstancesRocketmqInstanceConnectionInfo struct {
	// The endpoint address ip of the rocketmq.
	EndpointAddressIp string `pulumi:"endpointAddressIp"`
	// The endpoint type of the rocketmq.
	EndpointType string `pulumi:"endpointType"`
	// The internal endpoint of the rocketmq.
	InternalEndpoint string `pulumi:"internalEndpoint"`
	// The network type of the rocketmq.
	NetworkType string `pulumi:"networkType"`
	// The public endpoint of the rocketmq.
	PublicEndpoint string `pulumi:"publicEndpoint"`
}

// InstancesRocketmqInstanceConnectionInfoInput is an input type that accepts InstancesRocketmqInstanceConnectionInfoArgs and InstancesRocketmqInstanceConnectionInfoOutput values.
// You can construct a concrete instance of `InstancesRocketmqInstanceConnectionInfoInput` via:
//
//	InstancesRocketmqInstanceConnectionInfoArgs{...}
type InstancesRocketmqInstanceConnectionInfoInput interface {
	pulumi.Input

	ToInstancesRocketmqInstanceConnectionInfoOutput() InstancesRocketmqInstanceConnectionInfoOutput
	ToInstancesRocketmqInstanceConnectionInfoOutputWithContext(context.Context) InstancesRocketmqInstanceConnectionInfoOutput
}

type InstancesRocketmqInstanceConnectionInfoArgs struct {
	// The endpoint address ip of the rocketmq.
	EndpointAddressIp pulumi.StringInput `pulumi:"endpointAddressIp"`
	// The endpoint type of the rocketmq.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The internal endpoint of the rocketmq.
	InternalEndpoint pulumi.StringInput `pulumi:"internalEndpoint"`
	// The network type of the rocketmq.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The public endpoint of the rocketmq.
	PublicEndpoint pulumi.StringInput `pulumi:"publicEndpoint"`
}

func (InstancesRocketmqInstanceConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRocketmqInstanceConnectionInfo)(nil)).Elem()
}

func (i InstancesRocketmqInstanceConnectionInfoArgs) ToInstancesRocketmqInstanceConnectionInfoOutput() InstancesRocketmqInstanceConnectionInfoOutput {
	return i.ToInstancesRocketmqInstanceConnectionInfoOutputWithContext(context.Background())
}

func (i InstancesRocketmqInstanceConnectionInfoArgs) ToInstancesRocketmqInstanceConnectionInfoOutputWithContext(ctx context.Context) InstancesRocketmqInstanceConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRocketmqInstanceConnectionInfoOutput)
}

// InstancesRocketmqInstanceConnectionInfoArrayInput is an input type that accepts InstancesRocketmqInstanceConnectionInfoArray and InstancesRocketmqInstanceConnectionInfoArrayOutput values.
// You can construct a concrete instance of `InstancesRocketmqInstanceConnectionInfoArrayInput` via:
//
//	InstancesRocketmqInstanceConnectionInfoArray{ InstancesRocketmqInstanceConnectionInfoArgs{...} }
type InstancesRocketmqInstanceConnectionInfoArrayInput interface {
	pulumi.Input

	ToInstancesRocketmqInstanceConnectionInfoArrayOutput() InstancesRocketmqInstanceConnectionInfoArrayOutput
	ToInstancesRocketmqInstanceConnectionInfoArrayOutputWithContext(context.Context) InstancesRocketmqInstanceConnectionInfoArrayOutput
}

type InstancesRocketmqInstanceConnectionInfoArray []InstancesRocketmqInstanceConnectionInfoInput

func (InstancesRocketmqInstanceConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRocketmqInstanceConnectionInfo)(nil)).Elem()
}

func (i InstancesRocketmqInstanceConnectionInfoArray) ToInstancesRocketmqInstanceConnectionInfoArrayOutput() InstancesRocketmqInstanceConnectionInfoArrayOutput {
	return i.ToInstancesRocketmqInstanceConnectionInfoArrayOutputWithContext(context.Background())
}

func (i InstancesRocketmqInstanceConnectionInfoArray) ToInstancesRocketmqInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) InstancesRocketmqInstanceConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRocketmqInstanceConnectionInfoArrayOutput)
}

type InstancesRocketmqInstanceConnectionInfoOutput struct{ *pulumi.OutputState }

func (InstancesRocketmqInstanceConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRocketmqInstanceConnectionInfo)(nil)).Elem()
}

func (o InstancesRocketmqInstanceConnectionInfoOutput) ToInstancesRocketmqInstanceConnectionInfoOutput() InstancesRocketmqInstanceConnectionInfoOutput {
	return o
}

func (o InstancesRocketmqInstanceConnectionInfoOutput) ToInstancesRocketmqInstanceConnectionInfoOutputWithContext(ctx context.Context) InstancesRocketmqInstanceConnectionInfoOutput {
	return o
}

// The endpoint address ip of the rocketmq.
func (o InstancesRocketmqInstanceConnectionInfoOutput) EndpointAddressIp() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceConnectionInfo) string { return v.EndpointAddressIp }).(pulumi.StringOutput)
}

// The endpoint type of the rocketmq.
func (o InstancesRocketmqInstanceConnectionInfoOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceConnectionInfo) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The internal endpoint of the rocketmq.
func (o InstancesRocketmqInstanceConnectionInfoOutput) InternalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceConnectionInfo) string { return v.InternalEndpoint }).(pulumi.StringOutput)
}

// The network type of the rocketmq.
func (o InstancesRocketmqInstanceConnectionInfoOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceConnectionInfo) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The public endpoint of the rocketmq.
func (o InstancesRocketmqInstanceConnectionInfoOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceConnectionInfo) string { return v.PublicEndpoint }).(pulumi.StringOutput)
}

type InstancesRocketmqInstanceConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (InstancesRocketmqInstanceConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRocketmqInstanceConnectionInfo)(nil)).Elem()
}

func (o InstancesRocketmqInstanceConnectionInfoArrayOutput) ToInstancesRocketmqInstanceConnectionInfoArrayOutput() InstancesRocketmqInstanceConnectionInfoArrayOutput {
	return o
}

func (o InstancesRocketmqInstanceConnectionInfoArrayOutput) ToInstancesRocketmqInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) InstancesRocketmqInstanceConnectionInfoArrayOutput {
	return o
}

func (o InstancesRocketmqInstanceConnectionInfoArrayOutput) Index(i pulumi.IntInput) InstancesRocketmqInstanceConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRocketmqInstanceConnectionInfo {
		return vs[0].([]InstancesRocketmqInstanceConnectionInfo)[vs[1].(int)]
	}).(InstancesRocketmqInstanceConnectionInfoOutput)
}

type InstancesRocketmqInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesRocketmqInstanceTagInput is an input type that accepts InstancesRocketmqInstanceTagArgs and InstancesRocketmqInstanceTagOutput values.
// You can construct a concrete instance of `InstancesRocketmqInstanceTagInput` via:
//
//	InstancesRocketmqInstanceTagArgs{...}
type InstancesRocketmqInstanceTagInput interface {
	pulumi.Input

	ToInstancesRocketmqInstanceTagOutput() InstancesRocketmqInstanceTagOutput
	ToInstancesRocketmqInstanceTagOutputWithContext(context.Context) InstancesRocketmqInstanceTagOutput
}

type InstancesRocketmqInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesRocketmqInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRocketmqInstanceTag)(nil)).Elem()
}

func (i InstancesRocketmqInstanceTagArgs) ToInstancesRocketmqInstanceTagOutput() InstancesRocketmqInstanceTagOutput {
	return i.ToInstancesRocketmqInstanceTagOutputWithContext(context.Background())
}

func (i InstancesRocketmqInstanceTagArgs) ToInstancesRocketmqInstanceTagOutputWithContext(ctx context.Context) InstancesRocketmqInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRocketmqInstanceTagOutput)
}

// InstancesRocketmqInstanceTagArrayInput is an input type that accepts InstancesRocketmqInstanceTagArray and InstancesRocketmqInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesRocketmqInstanceTagArrayInput` via:
//
//	InstancesRocketmqInstanceTagArray{ InstancesRocketmqInstanceTagArgs{...} }
type InstancesRocketmqInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesRocketmqInstanceTagArrayOutput() InstancesRocketmqInstanceTagArrayOutput
	ToInstancesRocketmqInstanceTagArrayOutputWithContext(context.Context) InstancesRocketmqInstanceTagArrayOutput
}

type InstancesRocketmqInstanceTagArray []InstancesRocketmqInstanceTagInput

func (InstancesRocketmqInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRocketmqInstanceTag)(nil)).Elem()
}

func (i InstancesRocketmqInstanceTagArray) ToInstancesRocketmqInstanceTagArrayOutput() InstancesRocketmqInstanceTagArrayOutput {
	return i.ToInstancesRocketmqInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesRocketmqInstanceTagArray) ToInstancesRocketmqInstanceTagArrayOutputWithContext(ctx context.Context) InstancesRocketmqInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRocketmqInstanceTagArrayOutput)
}

type InstancesRocketmqInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesRocketmqInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRocketmqInstanceTag)(nil)).Elem()
}

func (o InstancesRocketmqInstanceTagOutput) ToInstancesRocketmqInstanceTagOutput() InstancesRocketmqInstanceTagOutput {
	return o
}

func (o InstancesRocketmqInstanceTagOutput) ToInstancesRocketmqInstanceTagOutputWithContext(ctx context.Context) InstancesRocketmqInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesRocketmqInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesRocketmqInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRocketmqInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesRocketmqInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesRocketmqInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRocketmqInstanceTag)(nil)).Elem()
}

func (o InstancesRocketmqInstanceTagArrayOutput) ToInstancesRocketmqInstanceTagArrayOutput() InstancesRocketmqInstanceTagArrayOutput {
	return o
}

func (o InstancesRocketmqInstanceTagArrayOutput) ToInstancesRocketmqInstanceTagArrayOutputWithContext(ctx context.Context) InstancesRocketmqInstanceTagArrayOutput {
	return o
}

func (o InstancesRocketmqInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesRocketmqInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRocketmqInstanceTag {
		return vs[0].([]InstancesRocketmqInstanceTag)[vs[1].(int)]
	}).(InstancesRocketmqInstanceTagOutput)
}

type InstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type RocketMQAccessKeyTopicPermission struct {
	// The custom authority for the topic.
	Permission *string `pulumi:"permission"`
	// The name of the rocketmq topic.
	TopicName *string `pulumi:"topicName"`
}

// RocketMQAccessKeyTopicPermissionInput is an input type that accepts RocketMQAccessKeyTopicPermissionArgs and RocketMQAccessKeyTopicPermissionOutput values.
// You can construct a concrete instance of `RocketMQAccessKeyTopicPermissionInput` via:
//
//	RocketMQAccessKeyTopicPermissionArgs{...}
type RocketMQAccessKeyTopicPermissionInput interface {
	pulumi.Input

	ToRocketMQAccessKeyTopicPermissionOutput() RocketMQAccessKeyTopicPermissionOutput
	ToRocketMQAccessKeyTopicPermissionOutputWithContext(context.Context) RocketMQAccessKeyTopicPermissionOutput
}

type RocketMQAccessKeyTopicPermissionArgs struct {
	// The custom authority for the topic.
	Permission pulumi.StringPtrInput `pulumi:"permission"`
	// The name of the rocketmq topic.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (RocketMQAccessKeyTopicPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQAccessKeyTopicPermission)(nil)).Elem()
}

func (i RocketMQAccessKeyTopicPermissionArgs) ToRocketMQAccessKeyTopicPermissionOutput() RocketMQAccessKeyTopicPermissionOutput {
	return i.ToRocketMQAccessKeyTopicPermissionOutputWithContext(context.Background())
}

func (i RocketMQAccessKeyTopicPermissionArgs) ToRocketMQAccessKeyTopicPermissionOutputWithContext(ctx context.Context) RocketMQAccessKeyTopicPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQAccessKeyTopicPermissionOutput)
}

// RocketMQAccessKeyTopicPermissionArrayInput is an input type that accepts RocketMQAccessKeyTopicPermissionArray and RocketMQAccessKeyTopicPermissionArrayOutput values.
// You can construct a concrete instance of `RocketMQAccessKeyTopicPermissionArrayInput` via:
//
//	RocketMQAccessKeyTopicPermissionArray{ RocketMQAccessKeyTopicPermissionArgs{...} }
type RocketMQAccessKeyTopicPermissionArrayInput interface {
	pulumi.Input

	ToRocketMQAccessKeyTopicPermissionArrayOutput() RocketMQAccessKeyTopicPermissionArrayOutput
	ToRocketMQAccessKeyTopicPermissionArrayOutputWithContext(context.Context) RocketMQAccessKeyTopicPermissionArrayOutput
}

type RocketMQAccessKeyTopicPermissionArray []RocketMQAccessKeyTopicPermissionInput

func (RocketMQAccessKeyTopicPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQAccessKeyTopicPermission)(nil)).Elem()
}

func (i RocketMQAccessKeyTopicPermissionArray) ToRocketMQAccessKeyTopicPermissionArrayOutput() RocketMQAccessKeyTopicPermissionArrayOutput {
	return i.ToRocketMQAccessKeyTopicPermissionArrayOutputWithContext(context.Background())
}

func (i RocketMQAccessKeyTopicPermissionArray) ToRocketMQAccessKeyTopicPermissionArrayOutputWithContext(ctx context.Context) RocketMQAccessKeyTopicPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQAccessKeyTopicPermissionArrayOutput)
}

type RocketMQAccessKeyTopicPermissionOutput struct{ *pulumi.OutputState }

func (RocketMQAccessKeyTopicPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQAccessKeyTopicPermission)(nil)).Elem()
}

func (o RocketMQAccessKeyTopicPermissionOutput) ToRocketMQAccessKeyTopicPermissionOutput() RocketMQAccessKeyTopicPermissionOutput {
	return o
}

func (o RocketMQAccessKeyTopicPermissionOutput) ToRocketMQAccessKeyTopicPermissionOutputWithContext(ctx context.Context) RocketMQAccessKeyTopicPermissionOutput {
	return o
}

// The custom authority for the topic.
func (o RocketMQAccessKeyTopicPermissionOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQAccessKeyTopicPermission) *string { return v.Permission }).(pulumi.StringPtrOutput)
}

// The name of the rocketmq topic.
func (o RocketMQAccessKeyTopicPermissionOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQAccessKeyTopicPermission) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

type RocketMQAccessKeyTopicPermissionArrayOutput struct{ *pulumi.OutputState }

func (RocketMQAccessKeyTopicPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQAccessKeyTopicPermission)(nil)).Elem()
}

func (o RocketMQAccessKeyTopicPermissionArrayOutput) ToRocketMQAccessKeyTopicPermissionArrayOutput() RocketMQAccessKeyTopicPermissionArrayOutput {
	return o
}

func (o RocketMQAccessKeyTopicPermissionArrayOutput) ToRocketMQAccessKeyTopicPermissionArrayOutputWithContext(ctx context.Context) RocketMQAccessKeyTopicPermissionArrayOutput {
	return o
}

func (o RocketMQAccessKeyTopicPermissionArrayOutput) Index(i pulumi.IntInput) RocketMQAccessKeyTopicPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocketMQAccessKeyTopicPermission {
		return vs[0].([]RocketMQAccessKeyTopicPermission)[vs[1].(int)]
	}).(RocketMQAccessKeyTopicPermissionOutput)
}

type RocketMQAllowListAssociatedInstance struct {
	// The id of the rocketmq instance.
	InstanceId *string `pulumi:"instanceId"`
	// The name of the rocketmq instance.
	InstanceName *string `pulumi:"instanceName"`
	// The vpc id of the rocketmq instance.
	Vpc *string `pulumi:"vpc"`
}

// RocketMQAllowListAssociatedInstanceInput is an input type that accepts RocketMQAllowListAssociatedInstanceArgs and RocketMQAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `RocketMQAllowListAssociatedInstanceInput` via:
//
//	RocketMQAllowListAssociatedInstanceArgs{...}
type RocketMQAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToRocketMQAllowListAssociatedInstanceOutput() RocketMQAllowListAssociatedInstanceOutput
	ToRocketMQAllowListAssociatedInstanceOutputWithContext(context.Context) RocketMQAllowListAssociatedInstanceOutput
}

type RocketMQAllowListAssociatedInstanceArgs struct {
	// The id of the rocketmq instance.
	InstanceId pulumi.StringPtrInput `pulumi:"instanceId"`
	// The name of the rocketmq instance.
	InstanceName pulumi.StringPtrInput `pulumi:"instanceName"`
	// The vpc id of the rocketmq instance.
	Vpc pulumi.StringPtrInput `pulumi:"vpc"`
}

func (RocketMQAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQAllowListAssociatedInstance)(nil)).Elem()
}

func (i RocketMQAllowListAssociatedInstanceArgs) ToRocketMQAllowListAssociatedInstanceOutput() RocketMQAllowListAssociatedInstanceOutput {
	return i.ToRocketMQAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i RocketMQAllowListAssociatedInstanceArgs) ToRocketMQAllowListAssociatedInstanceOutputWithContext(ctx context.Context) RocketMQAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQAllowListAssociatedInstanceOutput)
}

// RocketMQAllowListAssociatedInstanceArrayInput is an input type that accepts RocketMQAllowListAssociatedInstanceArray and RocketMQAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `RocketMQAllowListAssociatedInstanceArrayInput` via:
//
//	RocketMQAllowListAssociatedInstanceArray{ RocketMQAllowListAssociatedInstanceArgs{...} }
type RocketMQAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToRocketMQAllowListAssociatedInstanceArrayOutput() RocketMQAllowListAssociatedInstanceArrayOutput
	ToRocketMQAllowListAssociatedInstanceArrayOutputWithContext(context.Context) RocketMQAllowListAssociatedInstanceArrayOutput
}

type RocketMQAllowListAssociatedInstanceArray []RocketMQAllowListAssociatedInstanceInput

func (RocketMQAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQAllowListAssociatedInstance)(nil)).Elem()
}

func (i RocketMQAllowListAssociatedInstanceArray) ToRocketMQAllowListAssociatedInstanceArrayOutput() RocketMQAllowListAssociatedInstanceArrayOutput {
	return i.ToRocketMQAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i RocketMQAllowListAssociatedInstanceArray) ToRocketMQAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) RocketMQAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQAllowListAssociatedInstanceArrayOutput)
}

type RocketMQAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (RocketMQAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQAllowListAssociatedInstance)(nil)).Elem()
}

func (o RocketMQAllowListAssociatedInstanceOutput) ToRocketMQAllowListAssociatedInstanceOutput() RocketMQAllowListAssociatedInstanceOutput {
	return o
}

func (o RocketMQAllowListAssociatedInstanceOutput) ToRocketMQAllowListAssociatedInstanceOutputWithContext(ctx context.Context) RocketMQAllowListAssociatedInstanceOutput {
	return o
}

// The id of the rocketmq instance.
func (o RocketMQAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQAllowListAssociatedInstance) *string { return v.InstanceId }).(pulumi.StringPtrOutput)
}

// The name of the rocketmq instance.
func (o RocketMQAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQAllowListAssociatedInstance) *string { return v.InstanceName }).(pulumi.StringPtrOutput)
}

// The vpc id of the rocketmq instance.
func (o RocketMQAllowListAssociatedInstanceOutput) Vpc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQAllowListAssociatedInstance) *string { return v.Vpc }).(pulumi.StringPtrOutput)
}

type RocketMQAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (RocketMQAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQAllowListAssociatedInstance)(nil)).Elem()
}

func (o RocketMQAllowListAssociatedInstanceArrayOutput) ToRocketMQAllowListAssociatedInstanceArrayOutput() RocketMQAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o RocketMQAllowListAssociatedInstanceArrayOutput) ToRocketMQAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) RocketMQAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o RocketMQAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) RocketMQAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocketMQAllowListAssociatedInstance {
		return vs[0].([]RocketMQAllowListAssociatedInstance)[vs[1].(int)]
	}).(RocketMQAllowListAssociatedInstanceOutput)
}

type RocketMQInstanceChargeInfo struct {
	// Whether to automatically renew in prepaid scenarios. Default is false.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The charge type of the rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
	ChargeType string `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Monthly`, the value range is 1-9. When PeriodUnit is specified as `Yearly`, the value range is 1-3. Default is 1.
	Period *int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario. Valid values: `Monthly`, `Yearly`. Default is `Monthly`.
	PeriodUnit *string `pulumi:"periodUnit"`
}

// RocketMQInstanceChargeInfoInput is an input type that accepts RocketMQInstanceChargeInfoArgs and RocketMQInstanceChargeInfoOutput values.
// You can construct a concrete instance of `RocketMQInstanceChargeInfoInput` via:
//
//	RocketMQInstanceChargeInfoArgs{...}
type RocketMQInstanceChargeInfoInput interface {
	pulumi.Input

	ToRocketMQInstanceChargeInfoOutput() RocketMQInstanceChargeInfoOutput
	ToRocketMQInstanceChargeInfoOutputWithContext(context.Context) RocketMQInstanceChargeInfoOutput
}

type RocketMQInstanceChargeInfoArgs struct {
	// Whether to automatically renew in prepaid scenarios. Default is false.
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// The charge type of the rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Monthly`, the value range is 1-9. When PeriodUnit is specified as `Yearly`, the value range is 1-3. Default is 1.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario. Valid values: `Monthly`, `Yearly`. Default is `Monthly`.
	PeriodUnit pulumi.StringPtrInput `pulumi:"periodUnit"`
}

func (RocketMQInstanceChargeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQInstanceChargeInfo)(nil)).Elem()
}

func (i RocketMQInstanceChargeInfoArgs) ToRocketMQInstanceChargeInfoOutput() RocketMQInstanceChargeInfoOutput {
	return i.ToRocketMQInstanceChargeInfoOutputWithContext(context.Background())
}

func (i RocketMQInstanceChargeInfoArgs) ToRocketMQInstanceChargeInfoOutputWithContext(ctx context.Context) RocketMQInstanceChargeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceChargeInfoOutput)
}

func (i RocketMQInstanceChargeInfoArgs) ToRocketMQInstanceChargeInfoPtrOutput() RocketMQInstanceChargeInfoPtrOutput {
	return i.ToRocketMQInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i RocketMQInstanceChargeInfoArgs) ToRocketMQInstanceChargeInfoPtrOutputWithContext(ctx context.Context) RocketMQInstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceChargeInfoOutput).ToRocketMQInstanceChargeInfoPtrOutputWithContext(ctx)
}

// RocketMQInstanceChargeInfoPtrInput is an input type that accepts RocketMQInstanceChargeInfoArgs, RocketMQInstanceChargeInfoPtr and RocketMQInstanceChargeInfoPtrOutput values.
// You can construct a concrete instance of `RocketMQInstanceChargeInfoPtrInput` via:
//
//	        RocketMQInstanceChargeInfoArgs{...}
//
//	or:
//
//	        nil
type RocketMQInstanceChargeInfoPtrInput interface {
	pulumi.Input

	ToRocketMQInstanceChargeInfoPtrOutput() RocketMQInstanceChargeInfoPtrOutput
	ToRocketMQInstanceChargeInfoPtrOutputWithContext(context.Context) RocketMQInstanceChargeInfoPtrOutput
}

type rocketMQInstanceChargeInfoPtrType RocketMQInstanceChargeInfoArgs

func RocketMQInstanceChargeInfoPtr(v *RocketMQInstanceChargeInfoArgs) RocketMQInstanceChargeInfoPtrInput {
	return (*rocketMQInstanceChargeInfoPtrType)(v)
}

func (*rocketMQInstanceChargeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQInstanceChargeInfo)(nil)).Elem()
}

func (i *rocketMQInstanceChargeInfoPtrType) ToRocketMQInstanceChargeInfoPtrOutput() RocketMQInstanceChargeInfoPtrOutput {
	return i.ToRocketMQInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i *rocketMQInstanceChargeInfoPtrType) ToRocketMQInstanceChargeInfoPtrOutputWithContext(ctx context.Context) RocketMQInstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceChargeInfoPtrOutput)
}

type RocketMQInstanceChargeInfoOutput struct{ *pulumi.OutputState }

func (RocketMQInstanceChargeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQInstanceChargeInfo)(nil)).Elem()
}

func (o RocketMQInstanceChargeInfoOutput) ToRocketMQInstanceChargeInfoOutput() RocketMQInstanceChargeInfoOutput {
	return o
}

func (o RocketMQInstanceChargeInfoOutput) ToRocketMQInstanceChargeInfoOutputWithContext(ctx context.Context) RocketMQInstanceChargeInfoOutput {
	return o
}

func (o RocketMQInstanceChargeInfoOutput) ToRocketMQInstanceChargeInfoPtrOutput() RocketMQInstanceChargeInfoPtrOutput {
	return o.ToRocketMQInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (o RocketMQInstanceChargeInfoOutput) ToRocketMQInstanceChargeInfoPtrOutputWithContext(ctx context.Context) RocketMQInstanceChargeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v RocketMQInstanceChargeInfo) *RocketMQInstanceChargeInfo {
		return &v
	}).(RocketMQInstanceChargeInfoPtrOutput)
}

// Whether to automatically renew in prepaid scenarios. Default is false.
func (o RocketMQInstanceChargeInfoOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RocketMQInstanceChargeInfo) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// The charge type of the rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
func (o RocketMQInstanceChargeInfoOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v RocketMQInstanceChargeInfo) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Monthly`, the value range is 1-9. When PeriodUnit is specified as `Yearly`, the value range is 1-3. Default is 1.
func (o RocketMQInstanceChargeInfoOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocketMQInstanceChargeInfo) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario. Valid values: `Monthly`, `Yearly`. Default is `Monthly`.
func (o RocketMQInstanceChargeInfoOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQInstanceChargeInfo) *string { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

type RocketMQInstanceChargeInfoPtrOutput struct{ *pulumi.OutputState }

func (RocketMQInstanceChargeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQInstanceChargeInfo)(nil)).Elem()
}

func (o RocketMQInstanceChargeInfoPtrOutput) ToRocketMQInstanceChargeInfoPtrOutput() RocketMQInstanceChargeInfoPtrOutput {
	return o
}

func (o RocketMQInstanceChargeInfoPtrOutput) ToRocketMQInstanceChargeInfoPtrOutputWithContext(ctx context.Context) RocketMQInstanceChargeInfoPtrOutput {
	return o
}

func (o RocketMQInstanceChargeInfoPtrOutput) Elem() RocketMQInstanceChargeInfoOutput {
	return o.ApplyT(func(v *RocketMQInstanceChargeInfo) RocketMQInstanceChargeInfo {
		if v != nil {
			return *v
		}
		var ret RocketMQInstanceChargeInfo
		return ret
	}).(RocketMQInstanceChargeInfoOutput)
}

// Whether to automatically renew in prepaid scenarios. Default is false.
func (o RocketMQInstanceChargeInfoPtrOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RocketMQInstanceChargeInfo) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRenew
	}).(pulumi.BoolPtrOutput)
}

// The charge type of the rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
func (o RocketMQInstanceChargeInfoPtrOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketMQInstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ChargeType
	}).(pulumi.StringPtrOutput)
}

// Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Monthly`, the value range is 1-9. When PeriodUnit is specified as `Yearly`, the value range is 1-3. Default is 1.
func (o RocketMQInstanceChargeInfoPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *RocketMQInstanceChargeInfo) *int {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario. Valid values: `Monthly`, `Yearly`. Default is `Monthly`.
func (o RocketMQInstanceChargeInfoPtrOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketMQInstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.PeriodUnit
	}).(pulumi.StringPtrOutput)
}

type RocketMQInstanceConnectionInfo struct {
	// The endpoint address ip of the rocketmq.
	EndpointAddressIp *string `pulumi:"endpointAddressIp"`
	// The endpoint type of the rocketmq.
	EndpointType *string `pulumi:"endpointType"`
	// The internal endpoint of the rocketmq.
	InternalEndpoint *string `pulumi:"internalEndpoint"`
	// The network type of the rocketmq.
	NetworkType *string `pulumi:"networkType"`
	// The public endpoint of the rocketmq.
	PublicEndpoint *string `pulumi:"publicEndpoint"`
}

// RocketMQInstanceConnectionInfoInput is an input type that accepts RocketMQInstanceConnectionInfoArgs and RocketMQInstanceConnectionInfoOutput values.
// You can construct a concrete instance of `RocketMQInstanceConnectionInfoInput` via:
//
//	RocketMQInstanceConnectionInfoArgs{...}
type RocketMQInstanceConnectionInfoInput interface {
	pulumi.Input

	ToRocketMQInstanceConnectionInfoOutput() RocketMQInstanceConnectionInfoOutput
	ToRocketMQInstanceConnectionInfoOutputWithContext(context.Context) RocketMQInstanceConnectionInfoOutput
}

type RocketMQInstanceConnectionInfoArgs struct {
	// The endpoint address ip of the rocketmq.
	EndpointAddressIp pulumi.StringPtrInput `pulumi:"endpointAddressIp"`
	// The endpoint type of the rocketmq.
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// The internal endpoint of the rocketmq.
	InternalEndpoint pulumi.StringPtrInput `pulumi:"internalEndpoint"`
	// The network type of the rocketmq.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// The public endpoint of the rocketmq.
	PublicEndpoint pulumi.StringPtrInput `pulumi:"publicEndpoint"`
}

func (RocketMQInstanceConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQInstanceConnectionInfo)(nil)).Elem()
}

func (i RocketMQInstanceConnectionInfoArgs) ToRocketMQInstanceConnectionInfoOutput() RocketMQInstanceConnectionInfoOutput {
	return i.ToRocketMQInstanceConnectionInfoOutputWithContext(context.Background())
}

func (i RocketMQInstanceConnectionInfoArgs) ToRocketMQInstanceConnectionInfoOutputWithContext(ctx context.Context) RocketMQInstanceConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceConnectionInfoOutput)
}

// RocketMQInstanceConnectionInfoArrayInput is an input type that accepts RocketMQInstanceConnectionInfoArray and RocketMQInstanceConnectionInfoArrayOutput values.
// You can construct a concrete instance of `RocketMQInstanceConnectionInfoArrayInput` via:
//
//	RocketMQInstanceConnectionInfoArray{ RocketMQInstanceConnectionInfoArgs{...} }
type RocketMQInstanceConnectionInfoArrayInput interface {
	pulumi.Input

	ToRocketMQInstanceConnectionInfoArrayOutput() RocketMQInstanceConnectionInfoArrayOutput
	ToRocketMQInstanceConnectionInfoArrayOutputWithContext(context.Context) RocketMQInstanceConnectionInfoArrayOutput
}

type RocketMQInstanceConnectionInfoArray []RocketMQInstanceConnectionInfoInput

func (RocketMQInstanceConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQInstanceConnectionInfo)(nil)).Elem()
}

func (i RocketMQInstanceConnectionInfoArray) ToRocketMQInstanceConnectionInfoArrayOutput() RocketMQInstanceConnectionInfoArrayOutput {
	return i.ToRocketMQInstanceConnectionInfoArrayOutputWithContext(context.Background())
}

func (i RocketMQInstanceConnectionInfoArray) ToRocketMQInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) RocketMQInstanceConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceConnectionInfoArrayOutput)
}

type RocketMQInstanceConnectionInfoOutput struct{ *pulumi.OutputState }

func (RocketMQInstanceConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQInstanceConnectionInfo)(nil)).Elem()
}

func (o RocketMQInstanceConnectionInfoOutput) ToRocketMQInstanceConnectionInfoOutput() RocketMQInstanceConnectionInfoOutput {
	return o
}

func (o RocketMQInstanceConnectionInfoOutput) ToRocketMQInstanceConnectionInfoOutputWithContext(ctx context.Context) RocketMQInstanceConnectionInfoOutput {
	return o
}

// The endpoint address ip of the rocketmq.
func (o RocketMQInstanceConnectionInfoOutput) EndpointAddressIp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQInstanceConnectionInfo) *string { return v.EndpointAddressIp }).(pulumi.StringPtrOutput)
}

// The endpoint type of the rocketmq.
func (o RocketMQInstanceConnectionInfoOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQInstanceConnectionInfo) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The internal endpoint of the rocketmq.
func (o RocketMQInstanceConnectionInfoOutput) InternalEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQInstanceConnectionInfo) *string { return v.InternalEndpoint }).(pulumi.StringPtrOutput)
}

// The network type of the rocketmq.
func (o RocketMQInstanceConnectionInfoOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQInstanceConnectionInfo) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// The public endpoint of the rocketmq.
func (o RocketMQInstanceConnectionInfoOutput) PublicEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQInstanceConnectionInfo) *string { return v.PublicEndpoint }).(pulumi.StringPtrOutput)
}

type RocketMQInstanceConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (RocketMQInstanceConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQInstanceConnectionInfo)(nil)).Elem()
}

func (o RocketMQInstanceConnectionInfoArrayOutput) ToRocketMQInstanceConnectionInfoArrayOutput() RocketMQInstanceConnectionInfoArrayOutput {
	return o
}

func (o RocketMQInstanceConnectionInfoArrayOutput) ToRocketMQInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) RocketMQInstanceConnectionInfoArrayOutput {
	return o
}

func (o RocketMQInstanceConnectionInfoArrayOutput) Index(i pulumi.IntInput) RocketMQInstanceConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocketMQInstanceConnectionInfo {
		return vs[0].([]RocketMQInstanceConnectionInfo)[vs[1].(int)]
	}).(RocketMQInstanceConnectionInfoOutput)
}

type RocketMQInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// RocketMQInstanceTagInput is an input type that accepts RocketMQInstanceTagArgs and RocketMQInstanceTagOutput values.
// You can construct a concrete instance of `RocketMQInstanceTagInput` via:
//
//	RocketMQInstanceTagArgs{...}
type RocketMQInstanceTagInput interface {
	pulumi.Input

	ToRocketMQInstanceTagOutput() RocketMQInstanceTagOutput
	ToRocketMQInstanceTagOutputWithContext(context.Context) RocketMQInstanceTagOutput
}

type RocketMQInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RocketMQInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQInstanceTag)(nil)).Elem()
}

func (i RocketMQInstanceTagArgs) ToRocketMQInstanceTagOutput() RocketMQInstanceTagOutput {
	return i.ToRocketMQInstanceTagOutputWithContext(context.Background())
}

func (i RocketMQInstanceTagArgs) ToRocketMQInstanceTagOutputWithContext(ctx context.Context) RocketMQInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceTagOutput)
}

// RocketMQInstanceTagArrayInput is an input type that accepts RocketMQInstanceTagArray and RocketMQInstanceTagArrayOutput values.
// You can construct a concrete instance of `RocketMQInstanceTagArrayInput` via:
//
//	RocketMQInstanceTagArray{ RocketMQInstanceTagArgs{...} }
type RocketMQInstanceTagArrayInput interface {
	pulumi.Input

	ToRocketMQInstanceTagArrayOutput() RocketMQInstanceTagArrayOutput
	ToRocketMQInstanceTagArrayOutputWithContext(context.Context) RocketMQInstanceTagArrayOutput
}

type RocketMQInstanceTagArray []RocketMQInstanceTagInput

func (RocketMQInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQInstanceTag)(nil)).Elem()
}

func (i RocketMQInstanceTagArray) ToRocketMQInstanceTagArrayOutput() RocketMQInstanceTagArrayOutput {
	return i.ToRocketMQInstanceTagArrayOutputWithContext(context.Background())
}

func (i RocketMQInstanceTagArray) ToRocketMQInstanceTagArrayOutputWithContext(ctx context.Context) RocketMQInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceTagArrayOutput)
}

type RocketMQInstanceTagOutput struct{ *pulumi.OutputState }

func (RocketMQInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQInstanceTag)(nil)).Elem()
}

func (o RocketMQInstanceTagOutput) ToRocketMQInstanceTagOutput() RocketMQInstanceTagOutput {
	return o
}

func (o RocketMQInstanceTagOutput) ToRocketMQInstanceTagOutputWithContext(ctx context.Context) RocketMQInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o RocketMQInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RocketMQInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o RocketMQInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RocketMQInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type RocketMQInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (RocketMQInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQInstanceTag)(nil)).Elem()
}

func (o RocketMQInstanceTagArrayOutput) ToRocketMQInstanceTagArrayOutput() RocketMQInstanceTagArrayOutput {
	return o
}

func (o RocketMQInstanceTagArrayOutput) ToRocketMQInstanceTagArrayOutputWithContext(ctx context.Context) RocketMQInstanceTagArrayOutput {
	return o
}

func (o RocketMQInstanceTagArrayOutput) Index(i pulumi.IntInput) RocketMQInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocketMQInstanceTag {
		return vs[0].([]RocketMQInstanceTag)[vs[1].(int)]
	}).(RocketMQInstanceTagOutput)
}

type RocketMQTopicAccessPolicy struct {
	// The access key of the rocketmq key.
	AccessKey string `pulumi:"accessKey"`
	// The authority of the rocketmq key for the current topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
	Authority string `pulumi:"authority"`
}

// RocketMQTopicAccessPolicyInput is an input type that accepts RocketMQTopicAccessPolicyArgs and RocketMQTopicAccessPolicyOutput values.
// You can construct a concrete instance of `RocketMQTopicAccessPolicyInput` via:
//
//	RocketMQTopicAccessPolicyArgs{...}
type RocketMQTopicAccessPolicyInput interface {
	pulumi.Input

	ToRocketMQTopicAccessPolicyOutput() RocketMQTopicAccessPolicyOutput
	ToRocketMQTopicAccessPolicyOutputWithContext(context.Context) RocketMQTopicAccessPolicyOutput
}

type RocketMQTopicAccessPolicyArgs struct {
	// The access key of the rocketmq key.
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The authority of the rocketmq key for the current topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
	Authority pulumi.StringInput `pulumi:"authority"`
}

func (RocketMQTopicAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQTopicAccessPolicy)(nil)).Elem()
}

func (i RocketMQTopicAccessPolicyArgs) ToRocketMQTopicAccessPolicyOutput() RocketMQTopicAccessPolicyOutput {
	return i.ToRocketMQTopicAccessPolicyOutputWithContext(context.Background())
}

func (i RocketMQTopicAccessPolicyArgs) ToRocketMQTopicAccessPolicyOutputWithContext(ctx context.Context) RocketMQTopicAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicAccessPolicyOutput)
}

// RocketMQTopicAccessPolicyArrayInput is an input type that accepts RocketMQTopicAccessPolicyArray and RocketMQTopicAccessPolicyArrayOutput values.
// You can construct a concrete instance of `RocketMQTopicAccessPolicyArrayInput` via:
//
//	RocketMQTopicAccessPolicyArray{ RocketMQTopicAccessPolicyArgs{...} }
type RocketMQTopicAccessPolicyArrayInput interface {
	pulumi.Input

	ToRocketMQTopicAccessPolicyArrayOutput() RocketMQTopicAccessPolicyArrayOutput
	ToRocketMQTopicAccessPolicyArrayOutputWithContext(context.Context) RocketMQTopicAccessPolicyArrayOutput
}

type RocketMQTopicAccessPolicyArray []RocketMQTopicAccessPolicyInput

func (RocketMQTopicAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQTopicAccessPolicy)(nil)).Elem()
}

func (i RocketMQTopicAccessPolicyArray) ToRocketMQTopicAccessPolicyArrayOutput() RocketMQTopicAccessPolicyArrayOutput {
	return i.ToRocketMQTopicAccessPolicyArrayOutputWithContext(context.Background())
}

func (i RocketMQTopicAccessPolicyArray) ToRocketMQTopicAccessPolicyArrayOutputWithContext(ctx context.Context) RocketMQTopicAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicAccessPolicyArrayOutput)
}

type RocketMQTopicAccessPolicyOutput struct{ *pulumi.OutputState }

func (RocketMQTopicAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQTopicAccessPolicy)(nil)).Elem()
}

func (o RocketMQTopicAccessPolicyOutput) ToRocketMQTopicAccessPolicyOutput() RocketMQTopicAccessPolicyOutput {
	return o
}

func (o RocketMQTopicAccessPolicyOutput) ToRocketMQTopicAccessPolicyOutputWithContext(ctx context.Context) RocketMQTopicAccessPolicyOutput {
	return o
}

// The access key of the rocketmq key.
func (o RocketMQTopicAccessPolicyOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v RocketMQTopicAccessPolicy) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The authority of the rocketmq key for the current topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
func (o RocketMQTopicAccessPolicyOutput) Authority() pulumi.StringOutput {
	return o.ApplyT(func(v RocketMQTopicAccessPolicy) string { return v.Authority }).(pulumi.StringOutput)
}

type RocketMQTopicAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (RocketMQTopicAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQTopicAccessPolicy)(nil)).Elem()
}

func (o RocketMQTopicAccessPolicyArrayOutput) ToRocketMQTopicAccessPolicyArrayOutput() RocketMQTopicAccessPolicyArrayOutput {
	return o
}

func (o RocketMQTopicAccessPolicyArrayOutput) ToRocketMQTopicAccessPolicyArrayOutputWithContext(ctx context.Context) RocketMQTopicAccessPolicyArrayOutput {
	return o
}

func (o RocketMQTopicAccessPolicyArrayOutput) Index(i pulumi.IntInput) RocketMQTopicAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocketMQTopicAccessPolicy {
		return vs[0].([]RocketMQTopicAccessPolicy)[vs[1].(int)]
	}).(RocketMQTopicAccessPolicyOutput)
}

type RocketMQTopicGroup struct {
	// The id of the rocketmq group.
	GroupId *string `pulumi:"groupId"`
	// The message model of the rocketmq group.
	MessageModel *string `pulumi:"messageModel"`
	// The sub string of the rocketmq group.
	SubString *string `pulumi:"subString"`
}

// RocketMQTopicGroupInput is an input type that accepts RocketMQTopicGroupArgs and RocketMQTopicGroupOutput values.
// You can construct a concrete instance of `RocketMQTopicGroupInput` via:
//
//	RocketMQTopicGroupArgs{...}
type RocketMQTopicGroupInput interface {
	pulumi.Input

	ToRocketMQTopicGroupOutput() RocketMQTopicGroupOutput
	ToRocketMQTopicGroupOutputWithContext(context.Context) RocketMQTopicGroupOutput
}

type RocketMQTopicGroupArgs struct {
	// The id of the rocketmq group.
	GroupId pulumi.StringPtrInput `pulumi:"groupId"`
	// The message model of the rocketmq group.
	MessageModel pulumi.StringPtrInput `pulumi:"messageModel"`
	// The sub string of the rocketmq group.
	SubString pulumi.StringPtrInput `pulumi:"subString"`
}

func (RocketMQTopicGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQTopicGroup)(nil)).Elem()
}

func (i RocketMQTopicGroupArgs) ToRocketMQTopicGroupOutput() RocketMQTopicGroupOutput {
	return i.ToRocketMQTopicGroupOutputWithContext(context.Background())
}

func (i RocketMQTopicGroupArgs) ToRocketMQTopicGroupOutputWithContext(ctx context.Context) RocketMQTopicGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicGroupOutput)
}

// RocketMQTopicGroupArrayInput is an input type that accepts RocketMQTopicGroupArray and RocketMQTopicGroupArrayOutput values.
// You can construct a concrete instance of `RocketMQTopicGroupArrayInput` via:
//
//	RocketMQTopicGroupArray{ RocketMQTopicGroupArgs{...} }
type RocketMQTopicGroupArrayInput interface {
	pulumi.Input

	ToRocketMQTopicGroupArrayOutput() RocketMQTopicGroupArrayOutput
	ToRocketMQTopicGroupArrayOutputWithContext(context.Context) RocketMQTopicGroupArrayOutput
}

type RocketMQTopicGroupArray []RocketMQTopicGroupInput

func (RocketMQTopicGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQTopicGroup)(nil)).Elem()
}

func (i RocketMQTopicGroupArray) ToRocketMQTopicGroupArrayOutput() RocketMQTopicGroupArrayOutput {
	return i.ToRocketMQTopicGroupArrayOutputWithContext(context.Background())
}

func (i RocketMQTopicGroupArray) ToRocketMQTopicGroupArrayOutputWithContext(ctx context.Context) RocketMQTopicGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicGroupArrayOutput)
}

type RocketMQTopicGroupOutput struct{ *pulumi.OutputState }

func (RocketMQTopicGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQTopicGroup)(nil)).Elem()
}

func (o RocketMQTopicGroupOutput) ToRocketMQTopicGroupOutput() RocketMQTopicGroupOutput {
	return o
}

func (o RocketMQTopicGroupOutput) ToRocketMQTopicGroupOutputWithContext(ctx context.Context) RocketMQTopicGroupOutput {
	return o
}

// The id of the rocketmq group.
func (o RocketMQTopicGroupOutput) GroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQTopicGroup) *string { return v.GroupId }).(pulumi.StringPtrOutput)
}

// The message model of the rocketmq group.
func (o RocketMQTopicGroupOutput) MessageModel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQTopicGroup) *string { return v.MessageModel }).(pulumi.StringPtrOutput)
}

// The sub string of the rocketmq group.
func (o RocketMQTopicGroupOutput) SubString() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQTopicGroup) *string { return v.SubString }).(pulumi.StringPtrOutput)
}

type RocketMQTopicGroupArrayOutput struct{ *pulumi.OutputState }

func (RocketMQTopicGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQTopicGroup)(nil)).Elem()
}

func (o RocketMQTopicGroupArrayOutput) ToRocketMQTopicGroupArrayOutput() RocketMQTopicGroupArrayOutput {
	return o
}

func (o RocketMQTopicGroupArrayOutput) ToRocketMQTopicGroupArrayOutputWithContext(ctx context.Context) RocketMQTopicGroupArrayOutput {
	return o
}

func (o RocketMQTopicGroupArrayOutput) Index(i pulumi.IntInput) RocketMQTopicGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocketMQTopicGroup {
		return vs[0].([]RocketMQTopicGroup)[vs[1].(int)]
	}).(RocketMQTopicGroupOutput)
}

type RocketMQTopicQueue struct {
	// The end offset of the rocketmq queue.
	EndOffset *int `pulumi:"endOffset"`
	// The last update timestamp of the rocketmq queue.
	LastUpdateTimestamp *int `pulumi:"lastUpdateTimestamp"`
	// The message count of the rocketmq queue.
	MessageCount *int `pulumi:"messageCount"`
	// The id of the rocketmq queue.
	QueueId *string `pulumi:"queueId"`
	// The start offset of the rocketmq queue.
	StartOffset *int `pulumi:"startOffset"`
}

// RocketMQTopicQueueInput is an input type that accepts RocketMQTopicQueueArgs and RocketMQTopicQueueOutput values.
// You can construct a concrete instance of `RocketMQTopicQueueInput` via:
//
//	RocketMQTopicQueueArgs{...}
type RocketMQTopicQueueInput interface {
	pulumi.Input

	ToRocketMQTopicQueueOutput() RocketMQTopicQueueOutput
	ToRocketMQTopicQueueOutputWithContext(context.Context) RocketMQTopicQueueOutput
}

type RocketMQTopicQueueArgs struct {
	// The end offset of the rocketmq queue.
	EndOffset pulumi.IntPtrInput `pulumi:"endOffset"`
	// The last update timestamp of the rocketmq queue.
	LastUpdateTimestamp pulumi.IntPtrInput `pulumi:"lastUpdateTimestamp"`
	// The message count of the rocketmq queue.
	MessageCount pulumi.IntPtrInput `pulumi:"messageCount"`
	// The id of the rocketmq queue.
	QueueId pulumi.StringPtrInput `pulumi:"queueId"`
	// The start offset of the rocketmq queue.
	StartOffset pulumi.IntPtrInput `pulumi:"startOffset"`
}

func (RocketMQTopicQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQTopicQueue)(nil)).Elem()
}

func (i RocketMQTopicQueueArgs) ToRocketMQTopicQueueOutput() RocketMQTopicQueueOutput {
	return i.ToRocketMQTopicQueueOutputWithContext(context.Background())
}

func (i RocketMQTopicQueueArgs) ToRocketMQTopicQueueOutputWithContext(ctx context.Context) RocketMQTopicQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicQueueOutput)
}

// RocketMQTopicQueueArrayInput is an input type that accepts RocketMQTopicQueueArray and RocketMQTopicQueueArrayOutput values.
// You can construct a concrete instance of `RocketMQTopicQueueArrayInput` via:
//
//	RocketMQTopicQueueArray{ RocketMQTopicQueueArgs{...} }
type RocketMQTopicQueueArrayInput interface {
	pulumi.Input

	ToRocketMQTopicQueueArrayOutput() RocketMQTopicQueueArrayOutput
	ToRocketMQTopicQueueArrayOutputWithContext(context.Context) RocketMQTopicQueueArrayOutput
}

type RocketMQTopicQueueArray []RocketMQTopicQueueInput

func (RocketMQTopicQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQTopicQueue)(nil)).Elem()
}

func (i RocketMQTopicQueueArray) ToRocketMQTopicQueueArrayOutput() RocketMQTopicQueueArrayOutput {
	return i.ToRocketMQTopicQueueArrayOutputWithContext(context.Background())
}

func (i RocketMQTopicQueueArray) ToRocketMQTopicQueueArrayOutputWithContext(ctx context.Context) RocketMQTopicQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicQueueArrayOutput)
}

type RocketMQTopicQueueOutput struct{ *pulumi.OutputState }

func (RocketMQTopicQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RocketMQTopicQueue)(nil)).Elem()
}

func (o RocketMQTopicQueueOutput) ToRocketMQTopicQueueOutput() RocketMQTopicQueueOutput {
	return o
}

func (o RocketMQTopicQueueOutput) ToRocketMQTopicQueueOutputWithContext(ctx context.Context) RocketMQTopicQueueOutput {
	return o
}

// The end offset of the rocketmq queue.
func (o RocketMQTopicQueueOutput) EndOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocketMQTopicQueue) *int { return v.EndOffset }).(pulumi.IntPtrOutput)
}

// The last update timestamp of the rocketmq queue.
func (o RocketMQTopicQueueOutput) LastUpdateTimestamp() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocketMQTopicQueue) *int { return v.LastUpdateTimestamp }).(pulumi.IntPtrOutput)
}

// The message count of the rocketmq queue.
func (o RocketMQTopicQueueOutput) MessageCount() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocketMQTopicQueue) *int { return v.MessageCount }).(pulumi.IntPtrOutput)
}

// The id of the rocketmq queue.
func (o RocketMQTopicQueueOutput) QueueId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RocketMQTopicQueue) *string { return v.QueueId }).(pulumi.StringPtrOutput)
}

// The start offset of the rocketmq queue.
func (o RocketMQTopicQueueOutput) StartOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RocketMQTopicQueue) *int { return v.StartOffset }).(pulumi.IntPtrOutput)
}

type RocketMQTopicQueueArrayOutput struct{ *pulumi.OutputState }

func (RocketMQTopicQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RocketMQTopicQueue)(nil)).Elem()
}

func (o RocketMQTopicQueueArrayOutput) ToRocketMQTopicQueueArrayOutput() RocketMQTopicQueueArrayOutput {
	return o
}

func (o RocketMQTopicQueueArrayOutput) ToRocketMQTopicQueueArrayOutputWithContext(ctx context.Context) RocketMQTopicQueueArrayOutput {
	return o
}

func (o RocketMQTopicQueueArrayOutput) Index(i pulumi.IntInput) RocketMQTopicQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RocketMQTopicQueue {
		return vs[0].([]RocketMQTopicQueue)[vs[1].(int)]
	}).(RocketMQTopicQueueOutput)
}

type TopicsRocketmqTopic struct {
	// The access policies of the rocketmq topic.
	AccessPolicies []TopicsRocketmqTopicAccessPolicy `pulumi:"accessPolicies"`
	// The create time of the rocketmq topic.
	CreateTime string `pulumi:"createTime"`
	// The description of the rocketmq topic.
	Description string `pulumi:"description"`
	// The groups information of the rocketmq topic.
	Groups []TopicsRocketmqTopicGroup `pulumi:"groups"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
	// 0: Regular message
	// 1: Transaction message
	// 2: Partition order message
	// 3: Global sequential message
	// 4: Delay message.
	MessageType int `pulumi:"messageType"`
	// The number of the rocketmq topic queue.
	QueueNumber int `pulumi:"queueNumber"`
	// The queues information of the rocketmq topic.
	Queues []TopicsRocketmqTopicQueue `pulumi:"queues"`
	// The name of the rocketmq topic. This field support fuzzy query.
	TopicName string `pulumi:"topicName"`
}

// TopicsRocketmqTopicInput is an input type that accepts TopicsRocketmqTopicArgs and TopicsRocketmqTopicOutput values.
// You can construct a concrete instance of `TopicsRocketmqTopicInput` via:
//
//	TopicsRocketmqTopicArgs{...}
type TopicsRocketmqTopicInput interface {
	pulumi.Input

	ToTopicsRocketmqTopicOutput() TopicsRocketmqTopicOutput
	ToTopicsRocketmqTopicOutputWithContext(context.Context) TopicsRocketmqTopicOutput
}

type TopicsRocketmqTopicArgs struct {
	// The access policies of the rocketmq topic.
	AccessPolicies TopicsRocketmqTopicAccessPolicyArrayInput `pulumi:"accessPolicies"`
	// The create time of the rocketmq topic.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the rocketmq topic.
	Description pulumi.StringInput `pulumi:"description"`
	// The groups information of the rocketmq topic.
	Groups TopicsRocketmqTopicGroupArrayInput `pulumi:"groups"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
	// 0: Regular message
	// 1: Transaction message
	// 2: Partition order message
	// 3: Global sequential message
	// 4: Delay message.
	MessageType pulumi.IntInput `pulumi:"messageType"`
	// The number of the rocketmq topic queue.
	QueueNumber pulumi.IntInput `pulumi:"queueNumber"`
	// The queues information of the rocketmq topic.
	Queues TopicsRocketmqTopicQueueArrayInput `pulumi:"queues"`
	// The name of the rocketmq topic. This field support fuzzy query.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (TopicsRocketmqTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsRocketmqTopic)(nil)).Elem()
}

func (i TopicsRocketmqTopicArgs) ToTopicsRocketmqTopicOutput() TopicsRocketmqTopicOutput {
	return i.ToTopicsRocketmqTopicOutputWithContext(context.Background())
}

func (i TopicsRocketmqTopicArgs) ToTopicsRocketmqTopicOutputWithContext(ctx context.Context) TopicsRocketmqTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsRocketmqTopicOutput)
}

// TopicsRocketmqTopicArrayInput is an input type that accepts TopicsRocketmqTopicArray and TopicsRocketmqTopicArrayOutput values.
// You can construct a concrete instance of `TopicsRocketmqTopicArrayInput` via:
//
//	TopicsRocketmqTopicArray{ TopicsRocketmqTopicArgs{...} }
type TopicsRocketmqTopicArrayInput interface {
	pulumi.Input

	ToTopicsRocketmqTopicArrayOutput() TopicsRocketmqTopicArrayOutput
	ToTopicsRocketmqTopicArrayOutputWithContext(context.Context) TopicsRocketmqTopicArrayOutput
}

type TopicsRocketmqTopicArray []TopicsRocketmqTopicInput

func (TopicsRocketmqTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsRocketmqTopic)(nil)).Elem()
}

func (i TopicsRocketmqTopicArray) ToTopicsRocketmqTopicArrayOutput() TopicsRocketmqTopicArrayOutput {
	return i.ToTopicsRocketmqTopicArrayOutputWithContext(context.Background())
}

func (i TopicsRocketmqTopicArray) ToTopicsRocketmqTopicArrayOutputWithContext(ctx context.Context) TopicsRocketmqTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsRocketmqTopicArrayOutput)
}

type TopicsRocketmqTopicOutput struct{ *pulumi.OutputState }

func (TopicsRocketmqTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsRocketmqTopic)(nil)).Elem()
}

func (o TopicsRocketmqTopicOutput) ToTopicsRocketmqTopicOutput() TopicsRocketmqTopicOutput {
	return o
}

func (o TopicsRocketmqTopicOutput) ToTopicsRocketmqTopicOutputWithContext(ctx context.Context) TopicsRocketmqTopicOutput {
	return o
}

// The access policies of the rocketmq topic.
func (o TopicsRocketmqTopicOutput) AccessPolicies() TopicsRocketmqTopicAccessPolicyArrayOutput {
	return o.ApplyT(func(v TopicsRocketmqTopic) []TopicsRocketmqTopicAccessPolicy { return v.AccessPolicies }).(TopicsRocketmqTopicAccessPolicyArrayOutput)
}

// The create time of the rocketmq topic.
func (o TopicsRocketmqTopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopic) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the rocketmq topic.
func (o TopicsRocketmqTopicOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopic) string { return v.Description }).(pulumi.StringOutput)
}

// The groups information of the rocketmq topic.
func (o TopicsRocketmqTopicOutput) Groups() TopicsRocketmqTopicGroupArrayOutput {
	return o.ApplyT(func(v TopicsRocketmqTopic) []TopicsRocketmqTopicGroup { return v.Groups }).(TopicsRocketmqTopicGroupArrayOutput)
}

// The id of rocketmq instance.
func (o TopicsRocketmqTopicOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopic) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
// 0: Regular message
// 1: Transaction message
// 2: Partition order message
// 3: Global sequential message
// 4: Delay message.
func (o TopicsRocketmqTopicOutput) MessageType() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsRocketmqTopic) int { return v.MessageType }).(pulumi.IntOutput)
}

// The number of the rocketmq topic queue.
func (o TopicsRocketmqTopicOutput) QueueNumber() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsRocketmqTopic) int { return v.QueueNumber }).(pulumi.IntOutput)
}

// The queues information of the rocketmq topic.
func (o TopicsRocketmqTopicOutput) Queues() TopicsRocketmqTopicQueueArrayOutput {
	return o.ApplyT(func(v TopicsRocketmqTopic) []TopicsRocketmqTopicQueue { return v.Queues }).(TopicsRocketmqTopicQueueArrayOutput)
}

// The name of the rocketmq topic. This field support fuzzy query.
func (o TopicsRocketmqTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type TopicsRocketmqTopicArrayOutput struct{ *pulumi.OutputState }

func (TopicsRocketmqTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsRocketmqTopic)(nil)).Elem()
}

func (o TopicsRocketmqTopicArrayOutput) ToTopicsRocketmqTopicArrayOutput() TopicsRocketmqTopicArrayOutput {
	return o
}

func (o TopicsRocketmqTopicArrayOutput) ToTopicsRocketmqTopicArrayOutputWithContext(ctx context.Context) TopicsRocketmqTopicArrayOutput {
	return o
}

func (o TopicsRocketmqTopicArrayOutput) Index(i pulumi.IntInput) TopicsRocketmqTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicsRocketmqTopic {
		return vs[0].([]TopicsRocketmqTopic)[vs[1].(int)]
	}).(TopicsRocketmqTopicOutput)
}

type TopicsRocketmqTopicAccessPolicy struct {
	// The access key of the rocketmq key.
	AccessKey string `pulumi:"accessKey"`
	// The authority of the rocketmq key for the current topic.
	Authority string `pulumi:"authority"`
}

// TopicsRocketmqTopicAccessPolicyInput is an input type that accepts TopicsRocketmqTopicAccessPolicyArgs and TopicsRocketmqTopicAccessPolicyOutput values.
// You can construct a concrete instance of `TopicsRocketmqTopicAccessPolicyInput` via:
//
//	TopicsRocketmqTopicAccessPolicyArgs{...}
type TopicsRocketmqTopicAccessPolicyInput interface {
	pulumi.Input

	ToTopicsRocketmqTopicAccessPolicyOutput() TopicsRocketmqTopicAccessPolicyOutput
	ToTopicsRocketmqTopicAccessPolicyOutputWithContext(context.Context) TopicsRocketmqTopicAccessPolicyOutput
}

type TopicsRocketmqTopicAccessPolicyArgs struct {
	// The access key of the rocketmq key.
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The authority of the rocketmq key for the current topic.
	Authority pulumi.StringInput `pulumi:"authority"`
}

func (TopicsRocketmqTopicAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsRocketmqTopicAccessPolicy)(nil)).Elem()
}

func (i TopicsRocketmqTopicAccessPolicyArgs) ToTopicsRocketmqTopicAccessPolicyOutput() TopicsRocketmqTopicAccessPolicyOutput {
	return i.ToTopicsRocketmqTopicAccessPolicyOutputWithContext(context.Background())
}

func (i TopicsRocketmqTopicAccessPolicyArgs) ToTopicsRocketmqTopicAccessPolicyOutputWithContext(ctx context.Context) TopicsRocketmqTopicAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsRocketmqTopicAccessPolicyOutput)
}

// TopicsRocketmqTopicAccessPolicyArrayInput is an input type that accepts TopicsRocketmqTopicAccessPolicyArray and TopicsRocketmqTopicAccessPolicyArrayOutput values.
// You can construct a concrete instance of `TopicsRocketmqTopicAccessPolicyArrayInput` via:
//
//	TopicsRocketmqTopicAccessPolicyArray{ TopicsRocketmqTopicAccessPolicyArgs{...} }
type TopicsRocketmqTopicAccessPolicyArrayInput interface {
	pulumi.Input

	ToTopicsRocketmqTopicAccessPolicyArrayOutput() TopicsRocketmqTopicAccessPolicyArrayOutput
	ToTopicsRocketmqTopicAccessPolicyArrayOutputWithContext(context.Context) TopicsRocketmqTopicAccessPolicyArrayOutput
}

type TopicsRocketmqTopicAccessPolicyArray []TopicsRocketmqTopicAccessPolicyInput

func (TopicsRocketmqTopicAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsRocketmqTopicAccessPolicy)(nil)).Elem()
}

func (i TopicsRocketmqTopicAccessPolicyArray) ToTopicsRocketmqTopicAccessPolicyArrayOutput() TopicsRocketmqTopicAccessPolicyArrayOutput {
	return i.ToTopicsRocketmqTopicAccessPolicyArrayOutputWithContext(context.Background())
}

func (i TopicsRocketmqTopicAccessPolicyArray) ToTopicsRocketmqTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicsRocketmqTopicAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsRocketmqTopicAccessPolicyArrayOutput)
}

type TopicsRocketmqTopicAccessPolicyOutput struct{ *pulumi.OutputState }

func (TopicsRocketmqTopicAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsRocketmqTopicAccessPolicy)(nil)).Elem()
}

func (o TopicsRocketmqTopicAccessPolicyOutput) ToTopicsRocketmqTopicAccessPolicyOutput() TopicsRocketmqTopicAccessPolicyOutput {
	return o
}

func (o TopicsRocketmqTopicAccessPolicyOutput) ToTopicsRocketmqTopicAccessPolicyOutputWithContext(ctx context.Context) TopicsRocketmqTopicAccessPolicyOutput {
	return o
}

// The access key of the rocketmq key.
func (o TopicsRocketmqTopicAccessPolicyOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicAccessPolicy) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The authority of the rocketmq key for the current topic.
func (o TopicsRocketmqTopicAccessPolicyOutput) Authority() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicAccessPolicy) string { return v.Authority }).(pulumi.StringOutput)
}

type TopicsRocketmqTopicAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (TopicsRocketmqTopicAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsRocketmqTopicAccessPolicy)(nil)).Elem()
}

func (o TopicsRocketmqTopicAccessPolicyArrayOutput) ToTopicsRocketmqTopicAccessPolicyArrayOutput() TopicsRocketmqTopicAccessPolicyArrayOutput {
	return o
}

func (o TopicsRocketmqTopicAccessPolicyArrayOutput) ToTopicsRocketmqTopicAccessPolicyArrayOutputWithContext(ctx context.Context) TopicsRocketmqTopicAccessPolicyArrayOutput {
	return o
}

func (o TopicsRocketmqTopicAccessPolicyArrayOutput) Index(i pulumi.IntInput) TopicsRocketmqTopicAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicsRocketmqTopicAccessPolicy {
		return vs[0].([]TopicsRocketmqTopicAccessPolicy)[vs[1].(int)]
	}).(TopicsRocketmqTopicAccessPolicyOutput)
}

type TopicsRocketmqTopicGroup struct {
	// The id of the rocketmq group.
	GroupId string `pulumi:"groupId"`
	// The message model of the rocketmq group.
	MessageModel string `pulumi:"messageModel"`
	// The sub string of the rocketmq group.
	SubString string `pulumi:"subString"`
}

// TopicsRocketmqTopicGroupInput is an input type that accepts TopicsRocketmqTopicGroupArgs and TopicsRocketmqTopicGroupOutput values.
// You can construct a concrete instance of `TopicsRocketmqTopicGroupInput` via:
//
//	TopicsRocketmqTopicGroupArgs{...}
type TopicsRocketmqTopicGroupInput interface {
	pulumi.Input

	ToTopicsRocketmqTopicGroupOutput() TopicsRocketmqTopicGroupOutput
	ToTopicsRocketmqTopicGroupOutputWithContext(context.Context) TopicsRocketmqTopicGroupOutput
}

type TopicsRocketmqTopicGroupArgs struct {
	// The id of the rocketmq group.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The message model of the rocketmq group.
	MessageModel pulumi.StringInput `pulumi:"messageModel"`
	// The sub string of the rocketmq group.
	SubString pulumi.StringInput `pulumi:"subString"`
}

func (TopicsRocketmqTopicGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsRocketmqTopicGroup)(nil)).Elem()
}

func (i TopicsRocketmqTopicGroupArgs) ToTopicsRocketmqTopicGroupOutput() TopicsRocketmqTopicGroupOutput {
	return i.ToTopicsRocketmqTopicGroupOutputWithContext(context.Background())
}

func (i TopicsRocketmqTopicGroupArgs) ToTopicsRocketmqTopicGroupOutputWithContext(ctx context.Context) TopicsRocketmqTopicGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsRocketmqTopicGroupOutput)
}

// TopicsRocketmqTopicGroupArrayInput is an input type that accepts TopicsRocketmqTopicGroupArray and TopicsRocketmqTopicGroupArrayOutput values.
// You can construct a concrete instance of `TopicsRocketmqTopicGroupArrayInput` via:
//
//	TopicsRocketmqTopicGroupArray{ TopicsRocketmqTopicGroupArgs{...} }
type TopicsRocketmqTopicGroupArrayInput interface {
	pulumi.Input

	ToTopicsRocketmqTopicGroupArrayOutput() TopicsRocketmqTopicGroupArrayOutput
	ToTopicsRocketmqTopicGroupArrayOutputWithContext(context.Context) TopicsRocketmqTopicGroupArrayOutput
}

type TopicsRocketmqTopicGroupArray []TopicsRocketmqTopicGroupInput

func (TopicsRocketmqTopicGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsRocketmqTopicGroup)(nil)).Elem()
}

func (i TopicsRocketmqTopicGroupArray) ToTopicsRocketmqTopicGroupArrayOutput() TopicsRocketmqTopicGroupArrayOutput {
	return i.ToTopicsRocketmqTopicGroupArrayOutputWithContext(context.Background())
}

func (i TopicsRocketmqTopicGroupArray) ToTopicsRocketmqTopicGroupArrayOutputWithContext(ctx context.Context) TopicsRocketmqTopicGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsRocketmqTopicGroupArrayOutput)
}

type TopicsRocketmqTopicGroupOutput struct{ *pulumi.OutputState }

func (TopicsRocketmqTopicGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsRocketmqTopicGroup)(nil)).Elem()
}

func (o TopicsRocketmqTopicGroupOutput) ToTopicsRocketmqTopicGroupOutput() TopicsRocketmqTopicGroupOutput {
	return o
}

func (o TopicsRocketmqTopicGroupOutput) ToTopicsRocketmqTopicGroupOutputWithContext(ctx context.Context) TopicsRocketmqTopicGroupOutput {
	return o
}

// The id of the rocketmq group.
func (o TopicsRocketmqTopicGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicGroup) string { return v.GroupId }).(pulumi.StringOutput)
}

// The message model of the rocketmq group.
func (o TopicsRocketmqTopicGroupOutput) MessageModel() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicGroup) string { return v.MessageModel }).(pulumi.StringOutput)
}

// The sub string of the rocketmq group.
func (o TopicsRocketmqTopicGroupOutput) SubString() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicGroup) string { return v.SubString }).(pulumi.StringOutput)
}

type TopicsRocketmqTopicGroupArrayOutput struct{ *pulumi.OutputState }

func (TopicsRocketmqTopicGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsRocketmqTopicGroup)(nil)).Elem()
}

func (o TopicsRocketmqTopicGroupArrayOutput) ToTopicsRocketmqTopicGroupArrayOutput() TopicsRocketmqTopicGroupArrayOutput {
	return o
}

func (o TopicsRocketmqTopicGroupArrayOutput) ToTopicsRocketmqTopicGroupArrayOutputWithContext(ctx context.Context) TopicsRocketmqTopicGroupArrayOutput {
	return o
}

func (o TopicsRocketmqTopicGroupArrayOutput) Index(i pulumi.IntInput) TopicsRocketmqTopicGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicsRocketmqTopicGroup {
		return vs[0].([]TopicsRocketmqTopicGroup)[vs[1].(int)]
	}).(TopicsRocketmqTopicGroupOutput)
}

type TopicsRocketmqTopicQueue struct {
	// The end offset of the rocketmq queue.
	EndOffset int `pulumi:"endOffset"`
	// The last update timestamp of the rocketmq queue.
	LastUpdateTimestamp int `pulumi:"lastUpdateTimestamp"`
	// The message count of the rocketmq queue.
	MessageCount int `pulumi:"messageCount"`
	// The id of the rocketmq queue.
	QueueId string `pulumi:"queueId"`
	// The start offset of the rocketmq queue.
	StartOffset int `pulumi:"startOffset"`
}

// TopicsRocketmqTopicQueueInput is an input type that accepts TopicsRocketmqTopicQueueArgs and TopicsRocketmqTopicQueueOutput values.
// You can construct a concrete instance of `TopicsRocketmqTopicQueueInput` via:
//
//	TopicsRocketmqTopicQueueArgs{...}
type TopicsRocketmqTopicQueueInput interface {
	pulumi.Input

	ToTopicsRocketmqTopicQueueOutput() TopicsRocketmqTopicQueueOutput
	ToTopicsRocketmqTopicQueueOutputWithContext(context.Context) TopicsRocketmqTopicQueueOutput
}

type TopicsRocketmqTopicQueueArgs struct {
	// The end offset of the rocketmq queue.
	EndOffset pulumi.IntInput `pulumi:"endOffset"`
	// The last update timestamp of the rocketmq queue.
	LastUpdateTimestamp pulumi.IntInput `pulumi:"lastUpdateTimestamp"`
	// The message count of the rocketmq queue.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// The id of the rocketmq queue.
	QueueId pulumi.StringInput `pulumi:"queueId"`
	// The start offset of the rocketmq queue.
	StartOffset pulumi.IntInput `pulumi:"startOffset"`
}

func (TopicsRocketmqTopicQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsRocketmqTopicQueue)(nil)).Elem()
}

func (i TopicsRocketmqTopicQueueArgs) ToTopicsRocketmqTopicQueueOutput() TopicsRocketmqTopicQueueOutput {
	return i.ToTopicsRocketmqTopicQueueOutputWithContext(context.Background())
}

func (i TopicsRocketmqTopicQueueArgs) ToTopicsRocketmqTopicQueueOutputWithContext(ctx context.Context) TopicsRocketmqTopicQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsRocketmqTopicQueueOutput)
}

// TopicsRocketmqTopicQueueArrayInput is an input type that accepts TopicsRocketmqTopicQueueArray and TopicsRocketmqTopicQueueArrayOutput values.
// You can construct a concrete instance of `TopicsRocketmqTopicQueueArrayInput` via:
//
//	TopicsRocketmqTopicQueueArray{ TopicsRocketmqTopicQueueArgs{...} }
type TopicsRocketmqTopicQueueArrayInput interface {
	pulumi.Input

	ToTopicsRocketmqTopicQueueArrayOutput() TopicsRocketmqTopicQueueArrayOutput
	ToTopicsRocketmqTopicQueueArrayOutputWithContext(context.Context) TopicsRocketmqTopicQueueArrayOutput
}

type TopicsRocketmqTopicQueueArray []TopicsRocketmqTopicQueueInput

func (TopicsRocketmqTopicQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsRocketmqTopicQueue)(nil)).Elem()
}

func (i TopicsRocketmqTopicQueueArray) ToTopicsRocketmqTopicQueueArrayOutput() TopicsRocketmqTopicQueueArrayOutput {
	return i.ToTopicsRocketmqTopicQueueArrayOutputWithContext(context.Background())
}

func (i TopicsRocketmqTopicQueueArray) ToTopicsRocketmqTopicQueueArrayOutputWithContext(ctx context.Context) TopicsRocketmqTopicQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TopicsRocketmqTopicQueueArrayOutput)
}

type TopicsRocketmqTopicQueueOutput struct{ *pulumi.OutputState }

func (TopicsRocketmqTopicQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TopicsRocketmqTopicQueue)(nil)).Elem()
}

func (o TopicsRocketmqTopicQueueOutput) ToTopicsRocketmqTopicQueueOutput() TopicsRocketmqTopicQueueOutput {
	return o
}

func (o TopicsRocketmqTopicQueueOutput) ToTopicsRocketmqTopicQueueOutputWithContext(ctx context.Context) TopicsRocketmqTopicQueueOutput {
	return o
}

// The end offset of the rocketmq queue.
func (o TopicsRocketmqTopicQueueOutput) EndOffset() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicQueue) int { return v.EndOffset }).(pulumi.IntOutput)
}

// The last update timestamp of the rocketmq queue.
func (o TopicsRocketmqTopicQueueOutput) LastUpdateTimestamp() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicQueue) int { return v.LastUpdateTimestamp }).(pulumi.IntOutput)
}

// The message count of the rocketmq queue.
func (o TopicsRocketmqTopicQueueOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicQueue) int { return v.MessageCount }).(pulumi.IntOutput)
}

// The id of the rocketmq queue.
func (o TopicsRocketmqTopicQueueOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicQueue) string { return v.QueueId }).(pulumi.StringOutput)
}

// The start offset of the rocketmq queue.
func (o TopicsRocketmqTopicQueueOutput) StartOffset() pulumi.IntOutput {
	return o.ApplyT(func(v TopicsRocketmqTopicQueue) int { return v.StartOffset }).(pulumi.IntOutput)
}

type TopicsRocketmqTopicQueueArrayOutput struct{ *pulumi.OutputState }

func (TopicsRocketmqTopicQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TopicsRocketmqTopicQueue)(nil)).Elem()
}

func (o TopicsRocketmqTopicQueueArrayOutput) ToTopicsRocketmqTopicQueueArrayOutput() TopicsRocketmqTopicQueueArrayOutput {
	return o
}

func (o TopicsRocketmqTopicQueueArrayOutput) ToTopicsRocketmqTopicQueueArrayOutputWithContext(ctx context.Context) TopicsRocketmqTopicQueueArrayOutput {
	return o
}

func (o TopicsRocketmqTopicQueueArrayOutput) Index(i pulumi.IntInput) TopicsRocketmqTopicQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TopicsRocketmqTopicQueue {
		return vs[0].([]TopicsRocketmqTopicQueue)[vs[1].(int)]
	}).(TopicsRocketmqTopicQueueOutput)
}

type GetAccessKeysAccessKey struct {
	// The access key id of the rocketmq key.
	AccessKey string `pulumi:"accessKey"`
	// The acl config of the rocketmq key.
	AclConfigJson string `pulumi:"aclConfigJson"`
	// The active status of the rocketmq key.
	Actived bool `pulumi:"actived"`
	// The default authority of the rocketmq key.
	AllAuthority string `pulumi:"allAuthority"`
	// The create time of the rocketmq key.
	CreateTime string `pulumi:"createTime"`
	// The description of the rocketmq key.
	Description string `pulumi:"description"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The secret key of the rocketmq key.
	SecretKey string `pulumi:"secretKey"`
	// The custom authority of the rocketmq key.
	TopicPermissions []GetAccessKeysAccessKeyTopicPermission `pulumi:"topicPermissions"`
}

// GetAccessKeysAccessKeyInput is an input type that accepts GetAccessKeysAccessKeyArgs and GetAccessKeysAccessKeyOutput values.
// You can construct a concrete instance of `GetAccessKeysAccessKeyInput` via:
//
//	GetAccessKeysAccessKeyArgs{...}
type GetAccessKeysAccessKeyInput interface {
	pulumi.Input

	ToGetAccessKeysAccessKeyOutput() GetAccessKeysAccessKeyOutput
	ToGetAccessKeysAccessKeyOutputWithContext(context.Context) GetAccessKeysAccessKeyOutput
}

type GetAccessKeysAccessKeyArgs struct {
	// The access key id of the rocketmq key.
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The acl config of the rocketmq key.
	AclConfigJson pulumi.StringInput `pulumi:"aclConfigJson"`
	// The active status of the rocketmq key.
	Actived pulumi.BoolInput `pulumi:"actived"`
	// The default authority of the rocketmq key.
	AllAuthority pulumi.StringInput `pulumi:"allAuthority"`
	// The create time of the rocketmq key.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the rocketmq key.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The secret key of the rocketmq key.
	SecretKey pulumi.StringInput `pulumi:"secretKey"`
	// The custom authority of the rocketmq key.
	TopicPermissions GetAccessKeysAccessKeyTopicPermissionArrayInput `pulumi:"topicPermissions"`
}

func (GetAccessKeysAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessKeysAccessKey)(nil)).Elem()
}

func (i GetAccessKeysAccessKeyArgs) ToGetAccessKeysAccessKeyOutput() GetAccessKeysAccessKeyOutput {
	return i.ToGetAccessKeysAccessKeyOutputWithContext(context.Background())
}

func (i GetAccessKeysAccessKeyArgs) ToGetAccessKeysAccessKeyOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessKeysAccessKeyOutput)
}

// GetAccessKeysAccessKeyArrayInput is an input type that accepts GetAccessKeysAccessKeyArray and GetAccessKeysAccessKeyArrayOutput values.
// You can construct a concrete instance of `GetAccessKeysAccessKeyArrayInput` via:
//
//	GetAccessKeysAccessKeyArray{ GetAccessKeysAccessKeyArgs{...} }
type GetAccessKeysAccessKeyArrayInput interface {
	pulumi.Input

	ToGetAccessKeysAccessKeyArrayOutput() GetAccessKeysAccessKeyArrayOutput
	ToGetAccessKeysAccessKeyArrayOutputWithContext(context.Context) GetAccessKeysAccessKeyArrayOutput
}

type GetAccessKeysAccessKeyArray []GetAccessKeysAccessKeyInput

func (GetAccessKeysAccessKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessKeysAccessKey)(nil)).Elem()
}

func (i GetAccessKeysAccessKeyArray) ToGetAccessKeysAccessKeyArrayOutput() GetAccessKeysAccessKeyArrayOutput {
	return i.ToGetAccessKeysAccessKeyArrayOutputWithContext(context.Background())
}

func (i GetAccessKeysAccessKeyArray) ToGetAccessKeysAccessKeyArrayOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessKeysAccessKeyArrayOutput)
}

type GetAccessKeysAccessKeyOutput struct{ *pulumi.OutputState }

func (GetAccessKeysAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessKeysAccessKey)(nil)).Elem()
}

func (o GetAccessKeysAccessKeyOutput) ToGetAccessKeysAccessKeyOutput() GetAccessKeysAccessKeyOutput {
	return o
}

func (o GetAccessKeysAccessKeyOutput) ToGetAccessKeysAccessKeyOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyOutput {
	return o
}

// The access key id of the rocketmq key.
func (o GetAccessKeysAccessKeyOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The acl config of the rocketmq key.
func (o GetAccessKeysAccessKeyOutput) AclConfigJson() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.AclConfigJson }).(pulumi.StringOutput)
}

// The active status of the rocketmq key.
func (o GetAccessKeysAccessKeyOutput) Actived() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) bool { return v.Actived }).(pulumi.BoolOutput)
}

// The default authority of the rocketmq key.
func (o GetAccessKeysAccessKeyOutput) AllAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.AllAuthority }).(pulumi.StringOutput)
}

// The create time of the rocketmq key.
func (o GetAccessKeysAccessKeyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the rocketmq key.
func (o GetAccessKeysAccessKeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.Description }).(pulumi.StringOutput)
}

// The id of rocketmq instance.
func (o GetAccessKeysAccessKeyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The secret key of the rocketmq key.
func (o GetAccessKeysAccessKeyOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) string { return v.SecretKey }).(pulumi.StringOutput)
}

// The custom authority of the rocketmq key.
func (o GetAccessKeysAccessKeyOutput) TopicPermissions() GetAccessKeysAccessKeyTopicPermissionArrayOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKey) []GetAccessKeysAccessKeyTopicPermission { return v.TopicPermissions }).(GetAccessKeysAccessKeyTopicPermissionArrayOutput)
}

type GetAccessKeysAccessKeyArrayOutput struct{ *pulumi.OutputState }

func (GetAccessKeysAccessKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessKeysAccessKey)(nil)).Elem()
}

func (o GetAccessKeysAccessKeyArrayOutput) ToGetAccessKeysAccessKeyArrayOutput() GetAccessKeysAccessKeyArrayOutput {
	return o
}

func (o GetAccessKeysAccessKeyArrayOutput) ToGetAccessKeysAccessKeyArrayOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyArrayOutput {
	return o
}

func (o GetAccessKeysAccessKeyArrayOutput) Index(i pulumi.IntInput) GetAccessKeysAccessKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccessKeysAccessKey {
		return vs[0].([]GetAccessKeysAccessKey)[vs[1].(int)]
	}).(GetAccessKeysAccessKeyOutput)
}

type GetAccessKeysAccessKeyTopicPermission struct {
	// The custom authority for the topic.
	Permission string `pulumi:"permission"`
	// The name of the rocketmq topic.
	TopicName string `pulumi:"topicName"`
}

// GetAccessKeysAccessKeyTopicPermissionInput is an input type that accepts GetAccessKeysAccessKeyTopicPermissionArgs and GetAccessKeysAccessKeyTopicPermissionOutput values.
// You can construct a concrete instance of `GetAccessKeysAccessKeyTopicPermissionInput` via:
//
//	GetAccessKeysAccessKeyTopicPermissionArgs{...}
type GetAccessKeysAccessKeyTopicPermissionInput interface {
	pulumi.Input

	ToGetAccessKeysAccessKeyTopicPermissionOutput() GetAccessKeysAccessKeyTopicPermissionOutput
	ToGetAccessKeysAccessKeyTopicPermissionOutputWithContext(context.Context) GetAccessKeysAccessKeyTopicPermissionOutput
}

type GetAccessKeysAccessKeyTopicPermissionArgs struct {
	// The custom authority for the topic.
	Permission pulumi.StringInput `pulumi:"permission"`
	// The name of the rocketmq topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GetAccessKeysAccessKeyTopicPermissionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessKeysAccessKeyTopicPermission)(nil)).Elem()
}

func (i GetAccessKeysAccessKeyTopicPermissionArgs) ToGetAccessKeysAccessKeyTopicPermissionOutput() GetAccessKeysAccessKeyTopicPermissionOutput {
	return i.ToGetAccessKeysAccessKeyTopicPermissionOutputWithContext(context.Background())
}

func (i GetAccessKeysAccessKeyTopicPermissionArgs) ToGetAccessKeysAccessKeyTopicPermissionOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyTopicPermissionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessKeysAccessKeyTopicPermissionOutput)
}

// GetAccessKeysAccessKeyTopicPermissionArrayInput is an input type that accepts GetAccessKeysAccessKeyTopicPermissionArray and GetAccessKeysAccessKeyTopicPermissionArrayOutput values.
// You can construct a concrete instance of `GetAccessKeysAccessKeyTopicPermissionArrayInput` via:
//
//	GetAccessKeysAccessKeyTopicPermissionArray{ GetAccessKeysAccessKeyTopicPermissionArgs{...} }
type GetAccessKeysAccessKeyTopicPermissionArrayInput interface {
	pulumi.Input

	ToGetAccessKeysAccessKeyTopicPermissionArrayOutput() GetAccessKeysAccessKeyTopicPermissionArrayOutput
	ToGetAccessKeysAccessKeyTopicPermissionArrayOutputWithContext(context.Context) GetAccessKeysAccessKeyTopicPermissionArrayOutput
}

type GetAccessKeysAccessKeyTopicPermissionArray []GetAccessKeysAccessKeyTopicPermissionInput

func (GetAccessKeysAccessKeyTopicPermissionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessKeysAccessKeyTopicPermission)(nil)).Elem()
}

func (i GetAccessKeysAccessKeyTopicPermissionArray) ToGetAccessKeysAccessKeyTopicPermissionArrayOutput() GetAccessKeysAccessKeyTopicPermissionArrayOutput {
	return i.ToGetAccessKeysAccessKeyTopicPermissionArrayOutputWithContext(context.Background())
}

func (i GetAccessKeysAccessKeyTopicPermissionArray) ToGetAccessKeysAccessKeyTopicPermissionArrayOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyTopicPermissionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessKeysAccessKeyTopicPermissionArrayOutput)
}

type GetAccessKeysAccessKeyTopicPermissionOutput struct{ *pulumi.OutputState }

func (GetAccessKeysAccessKeyTopicPermissionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessKeysAccessKeyTopicPermission)(nil)).Elem()
}

func (o GetAccessKeysAccessKeyTopicPermissionOutput) ToGetAccessKeysAccessKeyTopicPermissionOutput() GetAccessKeysAccessKeyTopicPermissionOutput {
	return o
}

func (o GetAccessKeysAccessKeyTopicPermissionOutput) ToGetAccessKeysAccessKeyTopicPermissionOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyTopicPermissionOutput {
	return o
}

// The custom authority for the topic.
func (o GetAccessKeysAccessKeyTopicPermissionOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKeyTopicPermission) string { return v.Permission }).(pulumi.StringOutput)
}

// The name of the rocketmq topic.
func (o GetAccessKeysAccessKeyTopicPermissionOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessKeysAccessKeyTopicPermission) string { return v.TopicName }).(pulumi.StringOutput)
}

type GetAccessKeysAccessKeyTopicPermissionArrayOutput struct{ *pulumi.OutputState }

func (GetAccessKeysAccessKeyTopicPermissionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessKeysAccessKeyTopicPermission)(nil)).Elem()
}

func (o GetAccessKeysAccessKeyTopicPermissionArrayOutput) ToGetAccessKeysAccessKeyTopicPermissionArrayOutput() GetAccessKeysAccessKeyTopicPermissionArrayOutput {
	return o
}

func (o GetAccessKeysAccessKeyTopicPermissionArrayOutput) ToGetAccessKeysAccessKeyTopicPermissionArrayOutputWithContext(ctx context.Context) GetAccessKeysAccessKeyTopicPermissionArrayOutput {
	return o
}

func (o GetAccessKeysAccessKeyTopicPermissionArrayOutput) Index(i pulumi.IntInput) GetAccessKeysAccessKeyTopicPermissionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccessKeysAccessKeyTopicPermission {
		return vs[0].([]GetAccessKeysAccessKeyTopicPermission)[vs[1].(int)]
	}).(GetAccessKeysAccessKeyTopicPermissionOutput)
}

type GetAllowListsRocketmqAllowList struct {
	// The description of the rocketmq allow list.
	AllowListDesc string `pulumi:"allowListDesc"`
	// The id of the rocketmq allow list.
	AllowListId string `pulumi:"allowListId"`
	// The number of ip address in the rocketmq allow list.
	AllowListIpNum int `pulumi:"allowListIpNum"`
	// The name of the rocketmq allow list.
	AllowListName string `pulumi:"allowListName"`
	// The type of the rocketmq allow list.
	AllowListType string `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format of the allow list.
	AllowLists []string `pulumi:"allowLists"`
	// The number of the rocketmq instances associated with the allow list.
	AssociatedInstanceNum int `pulumi:"associatedInstanceNum"`
	// The associated instance information of the allow list.
	AssociatedInstances []GetAllowListsRocketmqAllowListAssociatedInstance `pulumi:"associatedInstances"`
	// The id of the rocketmq allow list.
	Id string `pulumi:"id"`
}

// GetAllowListsRocketmqAllowListInput is an input type that accepts GetAllowListsRocketmqAllowListArgs and GetAllowListsRocketmqAllowListOutput values.
// You can construct a concrete instance of `GetAllowListsRocketmqAllowListInput` via:
//
//	GetAllowListsRocketmqAllowListArgs{...}
type GetAllowListsRocketmqAllowListInput interface {
	pulumi.Input

	ToGetAllowListsRocketmqAllowListOutput() GetAllowListsRocketmqAllowListOutput
	ToGetAllowListsRocketmqAllowListOutputWithContext(context.Context) GetAllowListsRocketmqAllowListOutput
}

type GetAllowListsRocketmqAllowListArgs struct {
	// The description of the rocketmq allow list.
	AllowListDesc pulumi.StringInput `pulumi:"allowListDesc"`
	// The id of the rocketmq allow list.
	AllowListId pulumi.StringInput `pulumi:"allowListId"`
	// The number of ip address in the rocketmq allow list.
	AllowListIpNum pulumi.IntInput `pulumi:"allowListIpNum"`
	// The name of the rocketmq allow list.
	AllowListName pulumi.StringInput `pulumi:"allowListName"`
	// The type of the rocketmq allow list.
	AllowListType pulumi.StringInput `pulumi:"allowListType"`
	// The IP address or a range of IP addresses in CIDR format of the allow list.
	AllowLists pulumi.StringArrayInput `pulumi:"allowLists"`
	// The number of the rocketmq instances associated with the allow list.
	AssociatedInstanceNum pulumi.IntInput `pulumi:"associatedInstanceNum"`
	// The associated instance information of the allow list.
	AssociatedInstances GetAllowListsRocketmqAllowListAssociatedInstanceArrayInput `pulumi:"associatedInstances"`
	// The id of the rocketmq allow list.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetAllowListsRocketmqAllowListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowListsRocketmqAllowList)(nil)).Elem()
}

func (i GetAllowListsRocketmqAllowListArgs) ToGetAllowListsRocketmqAllowListOutput() GetAllowListsRocketmqAllowListOutput {
	return i.ToGetAllowListsRocketmqAllowListOutputWithContext(context.Background())
}

func (i GetAllowListsRocketmqAllowListArgs) ToGetAllowListsRocketmqAllowListOutputWithContext(ctx context.Context) GetAllowListsRocketmqAllowListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowListsRocketmqAllowListOutput)
}

// GetAllowListsRocketmqAllowListArrayInput is an input type that accepts GetAllowListsRocketmqAllowListArray and GetAllowListsRocketmqAllowListArrayOutput values.
// You can construct a concrete instance of `GetAllowListsRocketmqAllowListArrayInput` via:
//
//	GetAllowListsRocketmqAllowListArray{ GetAllowListsRocketmqAllowListArgs{...} }
type GetAllowListsRocketmqAllowListArrayInput interface {
	pulumi.Input

	ToGetAllowListsRocketmqAllowListArrayOutput() GetAllowListsRocketmqAllowListArrayOutput
	ToGetAllowListsRocketmqAllowListArrayOutputWithContext(context.Context) GetAllowListsRocketmqAllowListArrayOutput
}

type GetAllowListsRocketmqAllowListArray []GetAllowListsRocketmqAllowListInput

func (GetAllowListsRocketmqAllowListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowListsRocketmqAllowList)(nil)).Elem()
}

func (i GetAllowListsRocketmqAllowListArray) ToGetAllowListsRocketmqAllowListArrayOutput() GetAllowListsRocketmqAllowListArrayOutput {
	return i.ToGetAllowListsRocketmqAllowListArrayOutputWithContext(context.Background())
}

func (i GetAllowListsRocketmqAllowListArray) ToGetAllowListsRocketmqAllowListArrayOutputWithContext(ctx context.Context) GetAllowListsRocketmqAllowListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowListsRocketmqAllowListArrayOutput)
}

type GetAllowListsRocketmqAllowListOutput struct{ *pulumi.OutputState }

func (GetAllowListsRocketmqAllowListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowListsRocketmqAllowList)(nil)).Elem()
}

func (o GetAllowListsRocketmqAllowListOutput) ToGetAllowListsRocketmqAllowListOutput() GetAllowListsRocketmqAllowListOutput {
	return o
}

func (o GetAllowListsRocketmqAllowListOutput) ToGetAllowListsRocketmqAllowListOutputWithContext(ctx context.Context) GetAllowListsRocketmqAllowListOutput {
	return o
}

// The description of the rocketmq allow list.
func (o GetAllowListsRocketmqAllowListOutput) AllowListDesc() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowList) string { return v.AllowListDesc }).(pulumi.StringOutput)
}

// The id of the rocketmq allow list.
func (o GetAllowListsRocketmqAllowListOutput) AllowListId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowList) string { return v.AllowListId }).(pulumi.StringOutput)
}

// The number of ip address in the rocketmq allow list.
func (o GetAllowListsRocketmqAllowListOutput) AllowListIpNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowList) int { return v.AllowListIpNum }).(pulumi.IntOutput)
}

// The name of the rocketmq allow list.
func (o GetAllowListsRocketmqAllowListOutput) AllowListName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowList) string { return v.AllowListName }).(pulumi.StringOutput)
}

// The type of the rocketmq allow list.
func (o GetAllowListsRocketmqAllowListOutput) AllowListType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowList) string { return v.AllowListType }).(pulumi.StringOutput)
}

// The IP address or a range of IP addresses in CIDR format of the allow list.
func (o GetAllowListsRocketmqAllowListOutput) AllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowList) []string { return v.AllowLists }).(pulumi.StringArrayOutput)
}

// The number of the rocketmq instances associated with the allow list.
func (o GetAllowListsRocketmqAllowListOutput) AssociatedInstanceNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowList) int { return v.AssociatedInstanceNum }).(pulumi.IntOutput)
}

// The associated instance information of the allow list.
func (o GetAllowListsRocketmqAllowListOutput) AssociatedInstances() GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowList) []GetAllowListsRocketmqAllowListAssociatedInstance {
		return v.AssociatedInstances
	}).(GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput)
}

// The id of the rocketmq allow list.
func (o GetAllowListsRocketmqAllowListOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowList) string { return v.Id }).(pulumi.StringOutput)
}

type GetAllowListsRocketmqAllowListArrayOutput struct{ *pulumi.OutputState }

func (GetAllowListsRocketmqAllowListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowListsRocketmqAllowList)(nil)).Elem()
}

func (o GetAllowListsRocketmqAllowListArrayOutput) ToGetAllowListsRocketmqAllowListArrayOutput() GetAllowListsRocketmqAllowListArrayOutput {
	return o
}

func (o GetAllowListsRocketmqAllowListArrayOutput) ToGetAllowListsRocketmqAllowListArrayOutputWithContext(ctx context.Context) GetAllowListsRocketmqAllowListArrayOutput {
	return o
}

func (o GetAllowListsRocketmqAllowListArrayOutput) Index(i pulumi.IntInput) GetAllowListsRocketmqAllowListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAllowListsRocketmqAllowList {
		return vs[0].([]GetAllowListsRocketmqAllowList)[vs[1].(int)]
	}).(GetAllowListsRocketmqAllowListOutput)
}

type GetAllowListsRocketmqAllowListAssociatedInstance struct {
	// The id of the rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of the rocketmq instance.
	InstanceName string `pulumi:"instanceName"`
	// The vpc id of the rocketmq instance.
	Vpc string `pulumi:"vpc"`
}

// GetAllowListsRocketmqAllowListAssociatedInstanceInput is an input type that accepts GetAllowListsRocketmqAllowListAssociatedInstanceArgs and GetAllowListsRocketmqAllowListAssociatedInstanceOutput values.
// You can construct a concrete instance of `GetAllowListsRocketmqAllowListAssociatedInstanceInput` via:
//
//	GetAllowListsRocketmqAllowListAssociatedInstanceArgs{...}
type GetAllowListsRocketmqAllowListAssociatedInstanceInput interface {
	pulumi.Input

	ToGetAllowListsRocketmqAllowListAssociatedInstanceOutput() GetAllowListsRocketmqAllowListAssociatedInstanceOutput
	ToGetAllowListsRocketmqAllowListAssociatedInstanceOutputWithContext(context.Context) GetAllowListsRocketmqAllowListAssociatedInstanceOutput
}

type GetAllowListsRocketmqAllowListAssociatedInstanceArgs struct {
	// The id of the rocketmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of the rocketmq instance.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The vpc id of the rocketmq instance.
	Vpc pulumi.StringInput `pulumi:"vpc"`
}

func (GetAllowListsRocketmqAllowListAssociatedInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowListsRocketmqAllowListAssociatedInstance)(nil)).Elem()
}

func (i GetAllowListsRocketmqAllowListAssociatedInstanceArgs) ToGetAllowListsRocketmqAllowListAssociatedInstanceOutput() GetAllowListsRocketmqAllowListAssociatedInstanceOutput {
	return i.ToGetAllowListsRocketmqAllowListAssociatedInstanceOutputWithContext(context.Background())
}

func (i GetAllowListsRocketmqAllowListAssociatedInstanceArgs) ToGetAllowListsRocketmqAllowListAssociatedInstanceOutputWithContext(ctx context.Context) GetAllowListsRocketmqAllowListAssociatedInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowListsRocketmqAllowListAssociatedInstanceOutput)
}

// GetAllowListsRocketmqAllowListAssociatedInstanceArrayInput is an input type that accepts GetAllowListsRocketmqAllowListAssociatedInstanceArray and GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput values.
// You can construct a concrete instance of `GetAllowListsRocketmqAllowListAssociatedInstanceArrayInput` via:
//
//	GetAllowListsRocketmqAllowListAssociatedInstanceArray{ GetAllowListsRocketmqAllowListAssociatedInstanceArgs{...} }
type GetAllowListsRocketmqAllowListAssociatedInstanceArrayInput interface {
	pulumi.Input

	ToGetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput() GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput
	ToGetAllowListsRocketmqAllowListAssociatedInstanceArrayOutputWithContext(context.Context) GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput
}

type GetAllowListsRocketmqAllowListAssociatedInstanceArray []GetAllowListsRocketmqAllowListAssociatedInstanceInput

func (GetAllowListsRocketmqAllowListAssociatedInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowListsRocketmqAllowListAssociatedInstance)(nil)).Elem()
}

func (i GetAllowListsRocketmqAllowListAssociatedInstanceArray) ToGetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput() GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return i.ToGetAllowListsRocketmqAllowListAssociatedInstanceArrayOutputWithContext(context.Background())
}

func (i GetAllowListsRocketmqAllowListAssociatedInstanceArray) ToGetAllowListsRocketmqAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput)
}

type GetAllowListsRocketmqAllowListAssociatedInstanceOutput struct{ *pulumi.OutputState }

func (GetAllowListsRocketmqAllowListAssociatedInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAllowListsRocketmqAllowListAssociatedInstance)(nil)).Elem()
}

func (o GetAllowListsRocketmqAllowListAssociatedInstanceOutput) ToGetAllowListsRocketmqAllowListAssociatedInstanceOutput() GetAllowListsRocketmqAllowListAssociatedInstanceOutput {
	return o
}

func (o GetAllowListsRocketmqAllowListAssociatedInstanceOutput) ToGetAllowListsRocketmqAllowListAssociatedInstanceOutputWithContext(ctx context.Context) GetAllowListsRocketmqAllowListAssociatedInstanceOutput {
	return o
}

// The id of the rocketmq instance.
func (o GetAllowListsRocketmqAllowListAssociatedInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowListAssociatedInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of the rocketmq instance.
func (o GetAllowListsRocketmqAllowListAssociatedInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowListAssociatedInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The vpc id of the rocketmq instance.
func (o GetAllowListsRocketmqAllowListAssociatedInstanceOutput) Vpc() pulumi.StringOutput {
	return o.ApplyT(func(v GetAllowListsRocketmqAllowListAssociatedInstance) string { return v.Vpc }).(pulumi.StringOutput)
}

type GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAllowListsRocketmqAllowListAssociatedInstance)(nil)).Elem()
}

func (o GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput) ToGetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput() GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput) ToGetAllowListsRocketmqAllowListAssociatedInstanceArrayOutputWithContext(ctx context.Context) GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput {
	return o
}

func (o GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput) Index(i pulumi.IntInput) GetAllowListsRocketmqAllowListAssociatedInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAllowListsRocketmqAllowListAssociatedInstance {
		return vs[0].([]GetAllowListsRocketmqAllowListAssociatedInstance)[vs[1].(int)]
	}).(GetAllowListsRocketmqAllowListAssociatedInstanceOutput)
}

type GetGroupsRocketmqGroup struct {
	// The consumed topic information of the rocketmq group.
	ConsumedClients []GetGroupsRocketmqGroupConsumedClient `pulumi:"consumedClients"`
	// The consumed topic information of the rocketmq group.
	ConsumedTopics []GetGroupsRocketmqGroupConsumedTopic `pulumi:"consumedTopics"`
	// The create time of the rocketmq group.
	CreateTime string `pulumi:"createTime"`
	// The description of the rocketmq group.
	Description string `pulumi:"description"`
	// The id of rocketmq group. This field support fuzzy query.
	GroupId string `pulumi:"groupId"`
	// The type of rocketmq group. Valid values: `TCP`.
	GroupType string `pulumi:"groupType"`
	// Whether the subscription relationship of consumer instance groups within the group is consistent.
	IsSubSame bool `pulumi:"isSubSame"`
	// The message delay time of the rocketmq group. The unit is milliseconds.
	MessageDelayTime string `pulumi:"messageDelayTime"`
	// The message model of the rocketmq group.
	MessageModel string `pulumi:"messageModel"`
	// The status of the rocketmq group.
	Status string `pulumi:"status"`
	// The total consume rate of the rocketmq group. The unit is per second.
	TotalConsumeRate string `pulumi:"totalConsumeRate"`
	// The total amount of unconsumed messages.
	TotalDiff int `pulumi:"totalDiff"`
}

// GetGroupsRocketmqGroupInput is an input type that accepts GetGroupsRocketmqGroupArgs and GetGroupsRocketmqGroupOutput values.
// You can construct a concrete instance of `GetGroupsRocketmqGroupInput` via:
//
//	GetGroupsRocketmqGroupArgs{...}
type GetGroupsRocketmqGroupInput interface {
	pulumi.Input

	ToGetGroupsRocketmqGroupOutput() GetGroupsRocketmqGroupOutput
	ToGetGroupsRocketmqGroupOutputWithContext(context.Context) GetGroupsRocketmqGroupOutput
}

type GetGroupsRocketmqGroupArgs struct {
	// The consumed topic information of the rocketmq group.
	ConsumedClients GetGroupsRocketmqGroupConsumedClientArrayInput `pulumi:"consumedClients"`
	// The consumed topic information of the rocketmq group.
	ConsumedTopics GetGroupsRocketmqGroupConsumedTopicArrayInput `pulumi:"consumedTopics"`
	// The create time of the rocketmq group.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the rocketmq group.
	Description pulumi.StringInput `pulumi:"description"`
	// The id of rocketmq group. This field support fuzzy query.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The type of rocketmq group. Valid values: `TCP`.
	GroupType pulumi.StringInput `pulumi:"groupType"`
	// Whether the subscription relationship of consumer instance groups within the group is consistent.
	IsSubSame pulumi.BoolInput `pulumi:"isSubSame"`
	// The message delay time of the rocketmq group. The unit is milliseconds.
	MessageDelayTime pulumi.StringInput `pulumi:"messageDelayTime"`
	// The message model of the rocketmq group.
	MessageModel pulumi.StringInput `pulumi:"messageModel"`
	// The status of the rocketmq group.
	Status pulumi.StringInput `pulumi:"status"`
	// The total consume rate of the rocketmq group. The unit is per second.
	TotalConsumeRate pulumi.StringInput `pulumi:"totalConsumeRate"`
	// The total amount of unconsumed messages.
	TotalDiff pulumi.IntInput `pulumi:"totalDiff"`
}

func (GetGroupsRocketmqGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsRocketmqGroup)(nil)).Elem()
}

func (i GetGroupsRocketmqGroupArgs) ToGetGroupsRocketmqGroupOutput() GetGroupsRocketmqGroupOutput {
	return i.ToGetGroupsRocketmqGroupOutputWithContext(context.Background())
}

func (i GetGroupsRocketmqGroupArgs) ToGetGroupsRocketmqGroupOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsRocketmqGroupOutput)
}

// GetGroupsRocketmqGroupArrayInput is an input type that accepts GetGroupsRocketmqGroupArray and GetGroupsRocketmqGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsRocketmqGroupArrayInput` via:
//
//	GetGroupsRocketmqGroupArray{ GetGroupsRocketmqGroupArgs{...} }
type GetGroupsRocketmqGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsRocketmqGroupArrayOutput() GetGroupsRocketmqGroupArrayOutput
	ToGetGroupsRocketmqGroupArrayOutputWithContext(context.Context) GetGroupsRocketmqGroupArrayOutput
}

type GetGroupsRocketmqGroupArray []GetGroupsRocketmqGroupInput

func (GetGroupsRocketmqGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsRocketmqGroup)(nil)).Elem()
}

func (i GetGroupsRocketmqGroupArray) ToGetGroupsRocketmqGroupArrayOutput() GetGroupsRocketmqGroupArrayOutput {
	return i.ToGetGroupsRocketmqGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsRocketmqGroupArray) ToGetGroupsRocketmqGroupArrayOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsRocketmqGroupArrayOutput)
}

type GetGroupsRocketmqGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsRocketmqGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsRocketmqGroup)(nil)).Elem()
}

func (o GetGroupsRocketmqGroupOutput) ToGetGroupsRocketmqGroupOutput() GetGroupsRocketmqGroupOutput {
	return o
}

func (o GetGroupsRocketmqGroupOutput) ToGetGroupsRocketmqGroupOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupOutput {
	return o
}

// The consumed topic information of the rocketmq group.
func (o GetGroupsRocketmqGroupOutput) ConsumedClients() GetGroupsRocketmqGroupConsumedClientArrayOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) []GetGroupsRocketmqGroupConsumedClient { return v.ConsumedClients }).(GetGroupsRocketmqGroupConsumedClientArrayOutput)
}

// The consumed topic information of the rocketmq group.
func (o GetGroupsRocketmqGroupOutput) ConsumedTopics() GetGroupsRocketmqGroupConsumedTopicArrayOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) []GetGroupsRocketmqGroupConsumedTopic { return v.ConsumedTopics }).(GetGroupsRocketmqGroupConsumedTopicArrayOutput)
}

// The create time of the rocketmq group.
func (o GetGroupsRocketmqGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the rocketmq group.
func (o GetGroupsRocketmqGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) string { return v.Description }).(pulumi.StringOutput)
}

// The id of rocketmq group. This field support fuzzy query.
func (o GetGroupsRocketmqGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) string { return v.GroupId }).(pulumi.StringOutput)
}

// The type of rocketmq group. Valid values: `TCP`.
func (o GetGroupsRocketmqGroupOutput) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) string { return v.GroupType }).(pulumi.StringOutput)
}

// Whether the subscription relationship of consumer instance groups within the group is consistent.
func (o GetGroupsRocketmqGroupOutput) IsSubSame() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) bool { return v.IsSubSame }).(pulumi.BoolOutput)
}

// The message delay time of the rocketmq group. The unit is milliseconds.
func (o GetGroupsRocketmqGroupOutput) MessageDelayTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) string { return v.MessageDelayTime }).(pulumi.StringOutput)
}

// The message model of the rocketmq group.
func (o GetGroupsRocketmqGroupOutput) MessageModel() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) string { return v.MessageModel }).(pulumi.StringOutput)
}

// The status of the rocketmq group.
func (o GetGroupsRocketmqGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) string { return v.Status }).(pulumi.StringOutput)
}

// The total consume rate of the rocketmq group. The unit is per second.
func (o GetGroupsRocketmqGroupOutput) TotalConsumeRate() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) string { return v.TotalConsumeRate }).(pulumi.StringOutput)
}

// The total amount of unconsumed messages.
func (o GetGroupsRocketmqGroupOutput) TotalDiff() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroup) int { return v.TotalDiff }).(pulumi.IntOutput)
}

type GetGroupsRocketmqGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsRocketmqGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsRocketmqGroup)(nil)).Elem()
}

func (o GetGroupsRocketmqGroupArrayOutput) ToGetGroupsRocketmqGroupArrayOutput() GetGroupsRocketmqGroupArrayOutput {
	return o
}

func (o GetGroupsRocketmqGroupArrayOutput) ToGetGroupsRocketmqGroupArrayOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupArrayOutput {
	return o
}

func (o GetGroupsRocketmqGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsRocketmqGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsRocketmqGroup {
		return vs[0].([]GetGroupsRocketmqGroup)[vs[1].(int)]
	}).(GetGroupsRocketmqGroupOutput)
}

type GetGroupsRocketmqGroupConsumedClient struct {
	// The address of the consumed client.
	ClientAddress string `pulumi:"clientAddress"`
	// The id of the consumed client.
	ClientId string `pulumi:"clientId"`
	// The amount of message.
	Diff int `pulumi:"diff"`
	// The language of the consumed client.
	Language string `pulumi:"language"`
	// The version of the consumed client.
	Version string `pulumi:"version"`
}

// GetGroupsRocketmqGroupConsumedClientInput is an input type that accepts GetGroupsRocketmqGroupConsumedClientArgs and GetGroupsRocketmqGroupConsumedClientOutput values.
// You can construct a concrete instance of `GetGroupsRocketmqGroupConsumedClientInput` via:
//
//	GetGroupsRocketmqGroupConsumedClientArgs{...}
type GetGroupsRocketmqGroupConsumedClientInput interface {
	pulumi.Input

	ToGetGroupsRocketmqGroupConsumedClientOutput() GetGroupsRocketmqGroupConsumedClientOutput
	ToGetGroupsRocketmqGroupConsumedClientOutputWithContext(context.Context) GetGroupsRocketmqGroupConsumedClientOutput
}

type GetGroupsRocketmqGroupConsumedClientArgs struct {
	// The address of the consumed client.
	ClientAddress pulumi.StringInput `pulumi:"clientAddress"`
	// The id of the consumed client.
	ClientId pulumi.StringInput `pulumi:"clientId"`
	// The amount of message.
	Diff pulumi.IntInput `pulumi:"diff"`
	// The language of the consumed client.
	Language pulumi.StringInput `pulumi:"language"`
	// The version of the consumed client.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetGroupsRocketmqGroupConsumedClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsRocketmqGroupConsumedClient)(nil)).Elem()
}

func (i GetGroupsRocketmqGroupConsumedClientArgs) ToGetGroupsRocketmqGroupConsumedClientOutput() GetGroupsRocketmqGroupConsumedClientOutput {
	return i.ToGetGroupsRocketmqGroupConsumedClientOutputWithContext(context.Background())
}

func (i GetGroupsRocketmqGroupConsumedClientArgs) ToGetGroupsRocketmqGroupConsumedClientOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupConsumedClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsRocketmqGroupConsumedClientOutput)
}

// GetGroupsRocketmqGroupConsumedClientArrayInput is an input type that accepts GetGroupsRocketmqGroupConsumedClientArray and GetGroupsRocketmqGroupConsumedClientArrayOutput values.
// You can construct a concrete instance of `GetGroupsRocketmqGroupConsumedClientArrayInput` via:
//
//	GetGroupsRocketmqGroupConsumedClientArray{ GetGroupsRocketmqGroupConsumedClientArgs{...} }
type GetGroupsRocketmqGroupConsumedClientArrayInput interface {
	pulumi.Input

	ToGetGroupsRocketmqGroupConsumedClientArrayOutput() GetGroupsRocketmqGroupConsumedClientArrayOutput
	ToGetGroupsRocketmqGroupConsumedClientArrayOutputWithContext(context.Context) GetGroupsRocketmqGroupConsumedClientArrayOutput
}

type GetGroupsRocketmqGroupConsumedClientArray []GetGroupsRocketmqGroupConsumedClientInput

func (GetGroupsRocketmqGroupConsumedClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsRocketmqGroupConsumedClient)(nil)).Elem()
}

func (i GetGroupsRocketmqGroupConsumedClientArray) ToGetGroupsRocketmqGroupConsumedClientArrayOutput() GetGroupsRocketmqGroupConsumedClientArrayOutput {
	return i.ToGetGroupsRocketmqGroupConsumedClientArrayOutputWithContext(context.Background())
}

func (i GetGroupsRocketmqGroupConsumedClientArray) ToGetGroupsRocketmqGroupConsumedClientArrayOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupConsumedClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsRocketmqGroupConsumedClientArrayOutput)
}

type GetGroupsRocketmqGroupConsumedClientOutput struct{ *pulumi.OutputState }

func (GetGroupsRocketmqGroupConsumedClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsRocketmqGroupConsumedClient)(nil)).Elem()
}

func (o GetGroupsRocketmqGroupConsumedClientOutput) ToGetGroupsRocketmqGroupConsumedClientOutput() GetGroupsRocketmqGroupConsumedClientOutput {
	return o
}

func (o GetGroupsRocketmqGroupConsumedClientOutput) ToGetGroupsRocketmqGroupConsumedClientOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupConsumedClientOutput {
	return o
}

// The address of the consumed client.
func (o GetGroupsRocketmqGroupConsumedClientOutput) ClientAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroupConsumedClient) string { return v.ClientAddress }).(pulumi.StringOutput)
}

// The id of the consumed client.
func (o GetGroupsRocketmqGroupConsumedClientOutput) ClientId() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroupConsumedClient) string { return v.ClientId }).(pulumi.StringOutput)
}

// The amount of message.
func (o GetGroupsRocketmqGroupConsumedClientOutput) Diff() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroupConsumedClient) int { return v.Diff }).(pulumi.IntOutput)
}

// The language of the consumed client.
func (o GetGroupsRocketmqGroupConsumedClientOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroupConsumedClient) string { return v.Language }).(pulumi.StringOutput)
}

// The version of the consumed client.
func (o GetGroupsRocketmqGroupConsumedClientOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroupConsumedClient) string { return v.Version }).(pulumi.StringOutput)
}

type GetGroupsRocketmqGroupConsumedClientArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsRocketmqGroupConsumedClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsRocketmqGroupConsumedClient)(nil)).Elem()
}

func (o GetGroupsRocketmqGroupConsumedClientArrayOutput) ToGetGroupsRocketmqGroupConsumedClientArrayOutput() GetGroupsRocketmqGroupConsumedClientArrayOutput {
	return o
}

func (o GetGroupsRocketmqGroupConsumedClientArrayOutput) ToGetGroupsRocketmqGroupConsumedClientArrayOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupConsumedClientArrayOutput {
	return o
}

func (o GetGroupsRocketmqGroupConsumedClientArrayOutput) Index(i pulumi.IntInput) GetGroupsRocketmqGroupConsumedClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsRocketmqGroupConsumedClient {
		return vs[0].([]GetGroupsRocketmqGroupConsumedClient)[vs[1].(int)]
	}).(GetGroupsRocketmqGroupConsumedClientOutput)
}

type GetGroupsRocketmqGroupConsumedTopic struct {
	// The queue number of the rocketmq topic.
	QueueNum int `pulumi:"queueNum"`
	// The sub string of the rocketmq topic.
	SubString string `pulumi:"subString"`
	// The name of the rocketmq topic.
	TopicName string `pulumi:"topicName"`
}

// GetGroupsRocketmqGroupConsumedTopicInput is an input type that accepts GetGroupsRocketmqGroupConsumedTopicArgs and GetGroupsRocketmqGroupConsumedTopicOutput values.
// You can construct a concrete instance of `GetGroupsRocketmqGroupConsumedTopicInput` via:
//
//	GetGroupsRocketmqGroupConsumedTopicArgs{...}
type GetGroupsRocketmqGroupConsumedTopicInput interface {
	pulumi.Input

	ToGetGroupsRocketmqGroupConsumedTopicOutput() GetGroupsRocketmqGroupConsumedTopicOutput
	ToGetGroupsRocketmqGroupConsumedTopicOutputWithContext(context.Context) GetGroupsRocketmqGroupConsumedTopicOutput
}

type GetGroupsRocketmqGroupConsumedTopicArgs struct {
	// The queue number of the rocketmq topic.
	QueueNum pulumi.IntInput `pulumi:"queueNum"`
	// The sub string of the rocketmq topic.
	SubString pulumi.StringInput `pulumi:"subString"`
	// The name of the rocketmq topic.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GetGroupsRocketmqGroupConsumedTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsRocketmqGroupConsumedTopic)(nil)).Elem()
}

func (i GetGroupsRocketmqGroupConsumedTopicArgs) ToGetGroupsRocketmqGroupConsumedTopicOutput() GetGroupsRocketmqGroupConsumedTopicOutput {
	return i.ToGetGroupsRocketmqGroupConsumedTopicOutputWithContext(context.Background())
}

func (i GetGroupsRocketmqGroupConsumedTopicArgs) ToGetGroupsRocketmqGroupConsumedTopicOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupConsumedTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsRocketmqGroupConsumedTopicOutput)
}

// GetGroupsRocketmqGroupConsumedTopicArrayInput is an input type that accepts GetGroupsRocketmqGroupConsumedTopicArray and GetGroupsRocketmqGroupConsumedTopicArrayOutput values.
// You can construct a concrete instance of `GetGroupsRocketmqGroupConsumedTopicArrayInput` via:
//
//	GetGroupsRocketmqGroupConsumedTopicArray{ GetGroupsRocketmqGroupConsumedTopicArgs{...} }
type GetGroupsRocketmqGroupConsumedTopicArrayInput interface {
	pulumi.Input

	ToGetGroupsRocketmqGroupConsumedTopicArrayOutput() GetGroupsRocketmqGroupConsumedTopicArrayOutput
	ToGetGroupsRocketmqGroupConsumedTopicArrayOutputWithContext(context.Context) GetGroupsRocketmqGroupConsumedTopicArrayOutput
}

type GetGroupsRocketmqGroupConsumedTopicArray []GetGroupsRocketmqGroupConsumedTopicInput

func (GetGroupsRocketmqGroupConsumedTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsRocketmqGroupConsumedTopic)(nil)).Elem()
}

func (i GetGroupsRocketmqGroupConsumedTopicArray) ToGetGroupsRocketmqGroupConsumedTopicArrayOutput() GetGroupsRocketmqGroupConsumedTopicArrayOutput {
	return i.ToGetGroupsRocketmqGroupConsumedTopicArrayOutputWithContext(context.Background())
}

func (i GetGroupsRocketmqGroupConsumedTopicArray) ToGetGroupsRocketmqGroupConsumedTopicArrayOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupConsumedTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsRocketmqGroupConsumedTopicArrayOutput)
}

type GetGroupsRocketmqGroupConsumedTopicOutput struct{ *pulumi.OutputState }

func (GetGroupsRocketmqGroupConsumedTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsRocketmqGroupConsumedTopic)(nil)).Elem()
}

func (o GetGroupsRocketmqGroupConsumedTopicOutput) ToGetGroupsRocketmqGroupConsumedTopicOutput() GetGroupsRocketmqGroupConsumedTopicOutput {
	return o
}

func (o GetGroupsRocketmqGroupConsumedTopicOutput) ToGetGroupsRocketmqGroupConsumedTopicOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupConsumedTopicOutput {
	return o
}

// The queue number of the rocketmq topic.
func (o GetGroupsRocketmqGroupConsumedTopicOutput) QueueNum() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroupConsumedTopic) int { return v.QueueNum }).(pulumi.IntOutput)
}

// The sub string of the rocketmq topic.
func (o GetGroupsRocketmqGroupConsumedTopicOutput) SubString() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroupConsumedTopic) string { return v.SubString }).(pulumi.StringOutput)
}

// The name of the rocketmq topic.
func (o GetGroupsRocketmqGroupConsumedTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsRocketmqGroupConsumedTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type GetGroupsRocketmqGroupConsumedTopicArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsRocketmqGroupConsumedTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsRocketmqGroupConsumedTopic)(nil)).Elem()
}

func (o GetGroupsRocketmqGroupConsumedTopicArrayOutput) ToGetGroupsRocketmqGroupConsumedTopicArrayOutput() GetGroupsRocketmqGroupConsumedTopicArrayOutput {
	return o
}

func (o GetGroupsRocketmqGroupConsumedTopicArrayOutput) ToGetGroupsRocketmqGroupConsumedTopicArrayOutputWithContext(ctx context.Context) GetGroupsRocketmqGroupConsumedTopicArrayOutput {
	return o
}

func (o GetGroupsRocketmqGroupConsumedTopicArrayOutput) Index(i pulumi.IntInput) GetGroupsRocketmqGroupConsumedTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsRocketmqGroupConsumedTopic {
		return vs[0].([]GetGroupsRocketmqGroupConsumedTopic)[vs[1].(int)]
	}).(GetGroupsRocketmqGroupConsumedTopicOutput)
}

type GetInstancesRocketmqInstance struct {
	// The account id of the rocketmq instance.
	AccountId string `pulumi:"accountId"`
	// Whether the private dns to public function is enabled for the rocketmq instance.
	ApplyPrivateDnsToPublic bool `pulumi:"applyPrivateDnsToPublic"`
	// The available queue number of the rocketmq instance.
	AvailableQueueNumber int `pulumi:"availableQueueNumber"`
	// The charge detail information of the rocketmq instance.
	ChargeDetails []GetInstancesRocketmqInstanceChargeDetail `pulumi:"chargeDetails"`
	// The compute spec of the rocketmq instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// The connection information of the rocketmq.
	ConnectionInfos []GetInstancesRocketmqInstanceConnectionInfo `pulumi:"connectionInfos"`
	// The create time of the rocketmq instance.
	CreateTime string `pulumi:"createTime"`
	// The eip id of the rocketmq instance.
	EipId string `pulumi:"eipId"`
	// Whether the ssl authentication is enabled for the rocketmq instance.
	EnableSsl bool `pulumi:"enableSsl"`
	// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours.
	FileReservedTime int `pulumi:"fileReservedTime"`
	// The id of the rocketmq instance.
	Id string `pulumi:"id"`
	// The description of the rocketmq instance.
	InstanceDescription string `pulumi:"instanceDescription"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The name of rocketmq instance. This field support fuzzy query.
	InstanceName string `pulumi:"instanceName"`
	// The status of rocketmq instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The project name of rocketmq instance.
	ProjectName string `pulumi:"projectName"`
	// The region id of the rocketmq instance.
	RegionId string `pulumi:"regionId"`
	// The ssl mode of the rocketmq instance.
	SslMode string `pulumi:"sslMode"`
	// The total storage space of the rocketmq instance.
	StorageSpace int `pulumi:"storageSpace"`
	// The subnet id of the rocketmq instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []GetInstancesRocketmqInstanceTag `pulumi:"tags"`
	// The used group number of the rocketmq instance.
	UsedGroupNumber int `pulumi:"usedGroupNumber"`
	// The used queue number of the rocketmq instance.
	UsedQueueNumber int `pulumi:"usedQueueNumber"`
	// The used storage space of the rocketmq instance.
	UsedStorageSpace int `pulumi:"usedStorageSpace"`
	// The used topic number of the rocketmq instance.
	UsedTopicNumber int `pulumi:"usedTopicNumber"`
	// The version of rocketmq instance. Valid values: `4.8`.
	Version string `pulumi:"version"`
	// The vpc id of rocketmq instance.
	VpcId string `pulumi:"vpcId"`
	// The zone id of rocketmq instance.
	ZoneId string `pulumi:"zoneId"`
}

// GetInstancesRocketmqInstanceInput is an input type that accepts GetInstancesRocketmqInstanceArgs and GetInstancesRocketmqInstanceOutput values.
// You can construct a concrete instance of `GetInstancesRocketmqInstanceInput` via:
//
//	GetInstancesRocketmqInstanceArgs{...}
type GetInstancesRocketmqInstanceInput interface {
	pulumi.Input

	ToGetInstancesRocketmqInstanceOutput() GetInstancesRocketmqInstanceOutput
	ToGetInstancesRocketmqInstanceOutputWithContext(context.Context) GetInstancesRocketmqInstanceOutput
}

type GetInstancesRocketmqInstanceArgs struct {
	// The account id of the rocketmq instance.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Whether the private dns to public function is enabled for the rocketmq instance.
	ApplyPrivateDnsToPublic pulumi.BoolInput `pulumi:"applyPrivateDnsToPublic"`
	// The available queue number of the rocketmq instance.
	AvailableQueueNumber pulumi.IntInput `pulumi:"availableQueueNumber"`
	// The charge detail information of the rocketmq instance.
	ChargeDetails GetInstancesRocketmqInstanceChargeDetailArrayInput `pulumi:"chargeDetails"`
	// The compute spec of the rocketmq instance.
	ComputeSpec pulumi.StringInput `pulumi:"computeSpec"`
	// The connection information of the rocketmq.
	ConnectionInfos GetInstancesRocketmqInstanceConnectionInfoArrayInput `pulumi:"connectionInfos"`
	// The create time of the rocketmq instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The eip id of the rocketmq instance.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// Whether the ssl authentication is enabled for the rocketmq instance.
	EnableSsl pulumi.BoolInput `pulumi:"enableSsl"`
	// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours.
	FileReservedTime pulumi.IntInput `pulumi:"fileReservedTime"`
	// The id of the rocketmq instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The description of the rocketmq instance.
	InstanceDescription pulumi.StringInput `pulumi:"instanceDescription"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of rocketmq instance. This field support fuzzy query.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of rocketmq instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The project name of rocketmq instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region id of the rocketmq instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The ssl mode of the rocketmq instance.
	SslMode pulumi.StringInput `pulumi:"sslMode"`
	// The total storage space of the rocketmq instance.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// The subnet id of the rocketmq instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags GetInstancesRocketmqInstanceTagArrayInput `pulumi:"tags"`
	// The used group number of the rocketmq instance.
	UsedGroupNumber pulumi.IntInput `pulumi:"usedGroupNumber"`
	// The used queue number of the rocketmq instance.
	UsedQueueNumber pulumi.IntInput `pulumi:"usedQueueNumber"`
	// The used storage space of the rocketmq instance.
	UsedStorageSpace pulumi.IntInput `pulumi:"usedStorageSpace"`
	// The used topic number of the rocketmq instance.
	UsedTopicNumber pulumi.IntInput `pulumi:"usedTopicNumber"`
	// The version of rocketmq instance. Valid values: `4.8`.
	Version pulumi.StringInput `pulumi:"version"`
	// The vpc id of rocketmq instance.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone id of rocketmq instance.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetInstancesRocketmqInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRocketmqInstance)(nil)).Elem()
}

func (i GetInstancesRocketmqInstanceArgs) ToGetInstancesRocketmqInstanceOutput() GetInstancesRocketmqInstanceOutput {
	return i.ToGetInstancesRocketmqInstanceOutputWithContext(context.Background())
}

func (i GetInstancesRocketmqInstanceArgs) ToGetInstancesRocketmqInstanceOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRocketmqInstanceOutput)
}

// GetInstancesRocketmqInstanceArrayInput is an input type that accepts GetInstancesRocketmqInstanceArray and GetInstancesRocketmqInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesRocketmqInstanceArrayInput` via:
//
//	GetInstancesRocketmqInstanceArray{ GetInstancesRocketmqInstanceArgs{...} }
type GetInstancesRocketmqInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesRocketmqInstanceArrayOutput() GetInstancesRocketmqInstanceArrayOutput
	ToGetInstancesRocketmqInstanceArrayOutputWithContext(context.Context) GetInstancesRocketmqInstanceArrayOutput
}

type GetInstancesRocketmqInstanceArray []GetInstancesRocketmqInstanceInput

func (GetInstancesRocketmqInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRocketmqInstance)(nil)).Elem()
}

func (i GetInstancesRocketmqInstanceArray) ToGetInstancesRocketmqInstanceArrayOutput() GetInstancesRocketmqInstanceArrayOutput {
	return i.ToGetInstancesRocketmqInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesRocketmqInstanceArray) ToGetInstancesRocketmqInstanceArrayOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRocketmqInstanceArrayOutput)
}

type GetInstancesRocketmqInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesRocketmqInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRocketmqInstance)(nil)).Elem()
}

func (o GetInstancesRocketmqInstanceOutput) ToGetInstancesRocketmqInstanceOutput() GetInstancesRocketmqInstanceOutput {
	return o
}

func (o GetInstancesRocketmqInstanceOutput) ToGetInstancesRocketmqInstanceOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceOutput {
	return o
}

// The account id of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.AccountId }).(pulumi.StringOutput)
}

// Whether the private dns to public function is enabled for the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) ApplyPrivateDnsToPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) bool { return v.ApplyPrivateDnsToPublic }).(pulumi.BoolOutput)
}

// The available queue number of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) AvailableQueueNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) int { return v.AvailableQueueNumber }).(pulumi.IntOutput)
}

// The charge detail information of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) ChargeDetails() GetInstancesRocketmqInstanceChargeDetailArrayOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) []GetInstancesRocketmqInstanceChargeDetail {
		return v.ChargeDetails
	}).(GetInstancesRocketmqInstanceChargeDetailArrayOutput)
}

// The compute spec of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.ComputeSpec }).(pulumi.StringOutput)
}

// The connection information of the rocketmq.
func (o GetInstancesRocketmqInstanceOutput) ConnectionInfos() GetInstancesRocketmqInstanceConnectionInfoArrayOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) []GetInstancesRocketmqInstanceConnectionInfo {
		return v.ConnectionInfos
	}).(GetInstancesRocketmqInstanceConnectionInfoArrayOutput)
}

// The create time of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The eip id of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.EipId }).(pulumi.StringOutput)
}

// Whether the ssl authentication is enabled for the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) EnableSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) bool { return v.EnableSsl }).(pulumi.BoolOutput)
}

// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours.
func (o GetInstancesRocketmqInstanceOutput) FileReservedTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) int { return v.FileReservedTime }).(pulumi.IntOutput)
}

// The id of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The description of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) InstanceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.InstanceDescription }).(pulumi.StringOutput)
}

// The id of rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of rocketmq instance. This field support fuzzy query.
func (o GetInstancesRocketmqInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The project name of rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region id of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// The ssl mode of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.SslMode }).(pulumi.StringOutput)
}

// The total storage space of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// The subnet id of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o GetInstancesRocketmqInstanceOutput) Tags() GetInstancesRocketmqInstanceTagArrayOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) []GetInstancesRocketmqInstanceTag { return v.Tags }).(GetInstancesRocketmqInstanceTagArrayOutput)
}

// The used group number of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) UsedGroupNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) int { return v.UsedGroupNumber }).(pulumi.IntOutput)
}

// The used queue number of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) UsedQueueNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) int { return v.UsedQueueNumber }).(pulumi.IntOutput)
}

// The used storage space of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) int { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// The used topic number of the rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) UsedTopicNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) int { return v.UsedTopicNumber }).(pulumi.IntOutput)
}

// The version of rocketmq instance. Valid values: `4.8`.
func (o GetInstancesRocketmqInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.Version }).(pulumi.StringOutput)
}

// The vpc id of rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of rocketmq instance.
func (o GetInstancesRocketmqInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetInstancesRocketmqInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRocketmqInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRocketmqInstance)(nil)).Elem()
}

func (o GetInstancesRocketmqInstanceArrayOutput) ToGetInstancesRocketmqInstanceArrayOutput() GetInstancesRocketmqInstanceArrayOutput {
	return o
}

func (o GetInstancesRocketmqInstanceArrayOutput) ToGetInstancesRocketmqInstanceArrayOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceArrayOutput {
	return o
}

func (o GetInstancesRocketmqInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesRocketmqInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRocketmqInstance {
		return vs[0].([]GetInstancesRocketmqInstance)[vs[1].(int)]
	}).(GetInstancesRocketmqInstanceOutput)
}

type GetInstancesRocketmqInstanceChargeDetail struct {
	// Whether to enable automatic renewal.
	AutoRenew bool `pulumi:"autoRenew"`
	// The charge expire time of the rocketmq instance.
	ChargeExpireTime string `pulumi:"chargeExpireTime"`
	// The charge start time of the rocketmq instance.
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// The charge status of the rocketmq instance.
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
	ChargeType string `pulumi:"chargeType"`
	// The overdue reclaim time of the rocketmq instance.
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// The overdue time of the rocketmq instance.
	OverdueTime string `pulumi:"overdueTime"`
	// The period unit of the rocketmq instance.
	PeriodUnit string `pulumi:"periodUnit"`
}

// GetInstancesRocketmqInstanceChargeDetailInput is an input type that accepts GetInstancesRocketmqInstanceChargeDetailArgs and GetInstancesRocketmqInstanceChargeDetailOutput values.
// You can construct a concrete instance of `GetInstancesRocketmqInstanceChargeDetailInput` via:
//
//	GetInstancesRocketmqInstanceChargeDetailArgs{...}
type GetInstancesRocketmqInstanceChargeDetailInput interface {
	pulumi.Input

	ToGetInstancesRocketmqInstanceChargeDetailOutput() GetInstancesRocketmqInstanceChargeDetailOutput
	ToGetInstancesRocketmqInstanceChargeDetailOutputWithContext(context.Context) GetInstancesRocketmqInstanceChargeDetailOutput
}

type GetInstancesRocketmqInstanceChargeDetailArgs struct {
	// Whether to enable automatic renewal.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The charge expire time of the rocketmq instance.
	ChargeExpireTime pulumi.StringInput `pulumi:"chargeExpireTime"`
	// The charge start time of the rocketmq instance.
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// The charge status of the rocketmq instance.
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The overdue reclaim time of the rocketmq instance.
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// The overdue time of the rocketmq instance.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// The period unit of the rocketmq instance.
	PeriodUnit pulumi.StringInput `pulumi:"periodUnit"`
}

func (GetInstancesRocketmqInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRocketmqInstanceChargeDetail)(nil)).Elem()
}

func (i GetInstancesRocketmqInstanceChargeDetailArgs) ToGetInstancesRocketmqInstanceChargeDetailOutput() GetInstancesRocketmqInstanceChargeDetailOutput {
	return i.ToGetInstancesRocketmqInstanceChargeDetailOutputWithContext(context.Background())
}

func (i GetInstancesRocketmqInstanceChargeDetailArgs) ToGetInstancesRocketmqInstanceChargeDetailOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRocketmqInstanceChargeDetailOutput)
}

// GetInstancesRocketmqInstanceChargeDetailArrayInput is an input type that accepts GetInstancesRocketmqInstanceChargeDetailArray and GetInstancesRocketmqInstanceChargeDetailArrayOutput values.
// You can construct a concrete instance of `GetInstancesRocketmqInstanceChargeDetailArrayInput` via:
//
//	GetInstancesRocketmqInstanceChargeDetailArray{ GetInstancesRocketmqInstanceChargeDetailArgs{...} }
type GetInstancesRocketmqInstanceChargeDetailArrayInput interface {
	pulumi.Input

	ToGetInstancesRocketmqInstanceChargeDetailArrayOutput() GetInstancesRocketmqInstanceChargeDetailArrayOutput
	ToGetInstancesRocketmqInstanceChargeDetailArrayOutputWithContext(context.Context) GetInstancesRocketmqInstanceChargeDetailArrayOutput
}

type GetInstancesRocketmqInstanceChargeDetailArray []GetInstancesRocketmqInstanceChargeDetailInput

func (GetInstancesRocketmqInstanceChargeDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRocketmqInstanceChargeDetail)(nil)).Elem()
}

func (i GetInstancesRocketmqInstanceChargeDetailArray) ToGetInstancesRocketmqInstanceChargeDetailArrayOutput() GetInstancesRocketmqInstanceChargeDetailArrayOutput {
	return i.ToGetInstancesRocketmqInstanceChargeDetailArrayOutputWithContext(context.Background())
}

func (i GetInstancesRocketmqInstanceChargeDetailArray) ToGetInstancesRocketmqInstanceChargeDetailArrayOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceChargeDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRocketmqInstanceChargeDetailArrayOutput)
}

type GetInstancesRocketmqInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (GetInstancesRocketmqInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRocketmqInstanceChargeDetail)(nil)).Elem()
}

func (o GetInstancesRocketmqInstanceChargeDetailOutput) ToGetInstancesRocketmqInstanceChargeDetailOutput() GetInstancesRocketmqInstanceChargeDetailOutput {
	return o
}

func (o GetInstancesRocketmqInstanceChargeDetailOutput) ToGetInstancesRocketmqInstanceChargeDetailOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceChargeDetailOutput {
	return o
}

// Whether to enable automatic renewal.
func (o GetInstancesRocketmqInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The charge expire time of the rocketmq instance.
func (o GetInstancesRocketmqInstanceChargeDetailOutput) ChargeExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceChargeDetail) string { return v.ChargeExpireTime }).(pulumi.StringOutput)
}

// The charge start time of the rocketmq instance.
func (o GetInstancesRocketmqInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// The charge status of the rocketmq instance.
func (o GetInstancesRocketmqInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
func (o GetInstancesRocketmqInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The overdue reclaim time of the rocketmq instance.
func (o GetInstancesRocketmqInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// The overdue time of the rocketmq instance.
func (o GetInstancesRocketmqInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// The period unit of the rocketmq instance.
func (o GetInstancesRocketmqInstanceChargeDetailOutput) PeriodUnit() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceChargeDetail) string { return v.PeriodUnit }).(pulumi.StringOutput)
}

type GetInstancesRocketmqInstanceChargeDetailArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRocketmqInstanceChargeDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRocketmqInstanceChargeDetail)(nil)).Elem()
}

func (o GetInstancesRocketmqInstanceChargeDetailArrayOutput) ToGetInstancesRocketmqInstanceChargeDetailArrayOutput() GetInstancesRocketmqInstanceChargeDetailArrayOutput {
	return o
}

func (o GetInstancesRocketmqInstanceChargeDetailArrayOutput) ToGetInstancesRocketmqInstanceChargeDetailArrayOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceChargeDetailArrayOutput {
	return o
}

func (o GetInstancesRocketmqInstanceChargeDetailArrayOutput) Index(i pulumi.IntInput) GetInstancesRocketmqInstanceChargeDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRocketmqInstanceChargeDetail {
		return vs[0].([]GetInstancesRocketmqInstanceChargeDetail)[vs[1].(int)]
	}).(GetInstancesRocketmqInstanceChargeDetailOutput)
}

type GetInstancesRocketmqInstanceConnectionInfo struct {
	// The endpoint address ip of the rocketmq.
	EndpointAddressIp string `pulumi:"endpointAddressIp"`
	// The endpoint type of the rocketmq.
	EndpointType string `pulumi:"endpointType"`
	// The internal endpoint of the rocketmq.
	InternalEndpoint string `pulumi:"internalEndpoint"`
	// The network type of the rocketmq.
	NetworkType string `pulumi:"networkType"`
	// The public endpoint of the rocketmq.
	PublicEndpoint string `pulumi:"publicEndpoint"`
}

// GetInstancesRocketmqInstanceConnectionInfoInput is an input type that accepts GetInstancesRocketmqInstanceConnectionInfoArgs and GetInstancesRocketmqInstanceConnectionInfoOutput values.
// You can construct a concrete instance of `GetInstancesRocketmqInstanceConnectionInfoInput` via:
//
//	GetInstancesRocketmqInstanceConnectionInfoArgs{...}
type GetInstancesRocketmqInstanceConnectionInfoInput interface {
	pulumi.Input

	ToGetInstancesRocketmqInstanceConnectionInfoOutput() GetInstancesRocketmqInstanceConnectionInfoOutput
	ToGetInstancesRocketmqInstanceConnectionInfoOutputWithContext(context.Context) GetInstancesRocketmqInstanceConnectionInfoOutput
}

type GetInstancesRocketmqInstanceConnectionInfoArgs struct {
	// The endpoint address ip of the rocketmq.
	EndpointAddressIp pulumi.StringInput `pulumi:"endpointAddressIp"`
	// The endpoint type of the rocketmq.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The internal endpoint of the rocketmq.
	InternalEndpoint pulumi.StringInput `pulumi:"internalEndpoint"`
	// The network type of the rocketmq.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The public endpoint of the rocketmq.
	PublicEndpoint pulumi.StringInput `pulumi:"publicEndpoint"`
}

func (GetInstancesRocketmqInstanceConnectionInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRocketmqInstanceConnectionInfo)(nil)).Elem()
}

func (i GetInstancesRocketmqInstanceConnectionInfoArgs) ToGetInstancesRocketmqInstanceConnectionInfoOutput() GetInstancesRocketmqInstanceConnectionInfoOutput {
	return i.ToGetInstancesRocketmqInstanceConnectionInfoOutputWithContext(context.Background())
}

func (i GetInstancesRocketmqInstanceConnectionInfoArgs) ToGetInstancesRocketmqInstanceConnectionInfoOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceConnectionInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRocketmqInstanceConnectionInfoOutput)
}

// GetInstancesRocketmqInstanceConnectionInfoArrayInput is an input type that accepts GetInstancesRocketmqInstanceConnectionInfoArray and GetInstancesRocketmqInstanceConnectionInfoArrayOutput values.
// You can construct a concrete instance of `GetInstancesRocketmqInstanceConnectionInfoArrayInput` via:
//
//	GetInstancesRocketmqInstanceConnectionInfoArray{ GetInstancesRocketmqInstanceConnectionInfoArgs{...} }
type GetInstancesRocketmqInstanceConnectionInfoArrayInput interface {
	pulumi.Input

	ToGetInstancesRocketmqInstanceConnectionInfoArrayOutput() GetInstancesRocketmqInstanceConnectionInfoArrayOutput
	ToGetInstancesRocketmqInstanceConnectionInfoArrayOutputWithContext(context.Context) GetInstancesRocketmqInstanceConnectionInfoArrayOutput
}

type GetInstancesRocketmqInstanceConnectionInfoArray []GetInstancesRocketmqInstanceConnectionInfoInput

func (GetInstancesRocketmqInstanceConnectionInfoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRocketmqInstanceConnectionInfo)(nil)).Elem()
}

func (i GetInstancesRocketmqInstanceConnectionInfoArray) ToGetInstancesRocketmqInstanceConnectionInfoArrayOutput() GetInstancesRocketmqInstanceConnectionInfoArrayOutput {
	return i.ToGetInstancesRocketmqInstanceConnectionInfoArrayOutputWithContext(context.Background())
}

func (i GetInstancesRocketmqInstanceConnectionInfoArray) ToGetInstancesRocketmqInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceConnectionInfoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRocketmqInstanceConnectionInfoArrayOutput)
}

type GetInstancesRocketmqInstanceConnectionInfoOutput struct{ *pulumi.OutputState }

func (GetInstancesRocketmqInstanceConnectionInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRocketmqInstanceConnectionInfo)(nil)).Elem()
}

func (o GetInstancesRocketmqInstanceConnectionInfoOutput) ToGetInstancesRocketmqInstanceConnectionInfoOutput() GetInstancesRocketmqInstanceConnectionInfoOutput {
	return o
}

func (o GetInstancesRocketmqInstanceConnectionInfoOutput) ToGetInstancesRocketmqInstanceConnectionInfoOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceConnectionInfoOutput {
	return o
}

// The endpoint address ip of the rocketmq.
func (o GetInstancesRocketmqInstanceConnectionInfoOutput) EndpointAddressIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceConnectionInfo) string { return v.EndpointAddressIp }).(pulumi.StringOutput)
}

// The endpoint type of the rocketmq.
func (o GetInstancesRocketmqInstanceConnectionInfoOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceConnectionInfo) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The internal endpoint of the rocketmq.
func (o GetInstancesRocketmqInstanceConnectionInfoOutput) InternalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceConnectionInfo) string { return v.InternalEndpoint }).(pulumi.StringOutput)
}

// The network type of the rocketmq.
func (o GetInstancesRocketmqInstanceConnectionInfoOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceConnectionInfo) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The public endpoint of the rocketmq.
func (o GetInstancesRocketmqInstanceConnectionInfoOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceConnectionInfo) string { return v.PublicEndpoint }).(pulumi.StringOutput)
}

type GetInstancesRocketmqInstanceConnectionInfoArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRocketmqInstanceConnectionInfoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRocketmqInstanceConnectionInfo)(nil)).Elem()
}

func (o GetInstancesRocketmqInstanceConnectionInfoArrayOutput) ToGetInstancesRocketmqInstanceConnectionInfoArrayOutput() GetInstancesRocketmqInstanceConnectionInfoArrayOutput {
	return o
}

func (o GetInstancesRocketmqInstanceConnectionInfoArrayOutput) ToGetInstancesRocketmqInstanceConnectionInfoArrayOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceConnectionInfoArrayOutput {
	return o
}

func (o GetInstancesRocketmqInstanceConnectionInfoArrayOutput) Index(i pulumi.IntInput) GetInstancesRocketmqInstanceConnectionInfoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRocketmqInstanceConnectionInfo {
		return vs[0].([]GetInstancesRocketmqInstanceConnectionInfo)[vs[1].(int)]
	}).(GetInstancesRocketmqInstanceConnectionInfoOutput)
}

type GetInstancesRocketmqInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInstancesRocketmqInstanceTagInput is an input type that accepts GetInstancesRocketmqInstanceTagArgs and GetInstancesRocketmqInstanceTagOutput values.
// You can construct a concrete instance of `GetInstancesRocketmqInstanceTagInput` via:
//
//	GetInstancesRocketmqInstanceTagArgs{...}
type GetInstancesRocketmqInstanceTagInput interface {
	pulumi.Input

	ToGetInstancesRocketmqInstanceTagOutput() GetInstancesRocketmqInstanceTagOutput
	ToGetInstancesRocketmqInstanceTagOutputWithContext(context.Context) GetInstancesRocketmqInstanceTagOutput
}

type GetInstancesRocketmqInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesRocketmqInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRocketmqInstanceTag)(nil)).Elem()
}

func (i GetInstancesRocketmqInstanceTagArgs) ToGetInstancesRocketmqInstanceTagOutput() GetInstancesRocketmqInstanceTagOutput {
	return i.ToGetInstancesRocketmqInstanceTagOutputWithContext(context.Background())
}

func (i GetInstancesRocketmqInstanceTagArgs) ToGetInstancesRocketmqInstanceTagOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRocketmqInstanceTagOutput)
}

// GetInstancesRocketmqInstanceTagArrayInput is an input type that accepts GetInstancesRocketmqInstanceTagArray and GetInstancesRocketmqInstanceTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesRocketmqInstanceTagArrayInput` via:
//
//	GetInstancesRocketmqInstanceTagArray{ GetInstancesRocketmqInstanceTagArgs{...} }
type GetInstancesRocketmqInstanceTagArrayInput interface {
	pulumi.Input

	ToGetInstancesRocketmqInstanceTagArrayOutput() GetInstancesRocketmqInstanceTagArrayOutput
	ToGetInstancesRocketmqInstanceTagArrayOutputWithContext(context.Context) GetInstancesRocketmqInstanceTagArrayOutput
}

type GetInstancesRocketmqInstanceTagArray []GetInstancesRocketmqInstanceTagInput

func (GetInstancesRocketmqInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRocketmqInstanceTag)(nil)).Elem()
}

func (i GetInstancesRocketmqInstanceTagArray) ToGetInstancesRocketmqInstanceTagArrayOutput() GetInstancesRocketmqInstanceTagArrayOutput {
	return i.ToGetInstancesRocketmqInstanceTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesRocketmqInstanceTagArray) ToGetInstancesRocketmqInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRocketmqInstanceTagArrayOutput)
}

type GetInstancesRocketmqInstanceTagOutput struct{ *pulumi.OutputState }

func (GetInstancesRocketmqInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRocketmqInstanceTag)(nil)).Elem()
}

func (o GetInstancesRocketmqInstanceTagOutput) ToGetInstancesRocketmqInstanceTagOutput() GetInstancesRocketmqInstanceTagOutput {
	return o
}

func (o GetInstancesRocketmqInstanceTagOutput) ToGetInstancesRocketmqInstanceTagOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o GetInstancesRocketmqInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInstancesRocketmqInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRocketmqInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesRocketmqInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRocketmqInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRocketmqInstanceTag)(nil)).Elem()
}

func (o GetInstancesRocketmqInstanceTagArrayOutput) ToGetInstancesRocketmqInstanceTagArrayOutput() GetInstancesRocketmqInstanceTagArrayOutput {
	return o
}

func (o GetInstancesRocketmqInstanceTagArrayOutput) ToGetInstancesRocketmqInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesRocketmqInstanceTagArrayOutput {
	return o
}

func (o GetInstancesRocketmqInstanceTagArrayOutput) Index(i pulumi.IntInput) GetInstancesRocketmqInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRocketmqInstanceTag {
		return vs[0].([]GetInstancesRocketmqInstanceTag)[vs[1].(int)]
	}).(GetInstancesRocketmqInstanceTagOutput)
}

type GetInstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInstancesTagInput is an input type that accepts GetInstancesTagArgs and GetInstancesTagOutput values.
// You can construct a concrete instance of `GetInstancesTagInput` via:
//
//	GetInstancesTagArgs{...}
type GetInstancesTagInput interface {
	pulumi.Input

	ToGetInstancesTagOutput() GetInstancesTagOutput
	ToGetInstancesTagOutputWithContext(context.Context) GetInstancesTagOutput
}

type GetInstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return i.ToGetInstancesTagOutputWithContext(context.Background())
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagOutput)
}

// GetInstancesTagArrayInput is an input type that accepts GetInstancesTagArray and GetInstancesTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesTagArrayInput` via:
//
//	GetInstancesTagArray{ GetInstancesTagArgs{...} }
type GetInstancesTagArrayInput interface {
	pulumi.Input

	ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput
	ToGetInstancesTagArrayOutputWithContext(context.Context) GetInstancesTagArrayOutput
}

type GetInstancesTagArray []GetInstancesTagInput

func (GetInstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return i.ToGetInstancesTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagArrayOutput)
}

type GetInstancesTagOutput struct{ *pulumi.OutputState }

func (GetInstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return o
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return o
}

// The Key of Tags.
func (o GetInstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) Index(i pulumi.IntInput) GetInstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesTag {
		return vs[0].([]GetInstancesTag)[vs[1].(int)]
	}).(GetInstancesTagOutput)
}

type GetTopicsRocketmqTopic struct {
	// The access policies of the rocketmq topic.
	AccessPolicies []GetTopicsRocketmqTopicAccessPolicy `pulumi:"accessPolicies"`
	// The create time of the rocketmq topic.
	CreateTime string `pulumi:"createTime"`
	// The description of the rocketmq topic.
	Description string `pulumi:"description"`
	// The groups information of the rocketmq topic.
	Groups []GetTopicsRocketmqTopicGroup `pulumi:"groups"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
	// 0: Regular message
	// 1: Transaction message
	// 2: Partition order message
	// 3: Global sequential message
	// 4: Delay message.
	MessageType int `pulumi:"messageType"`
	// The number of the rocketmq topic queue.
	QueueNumber int `pulumi:"queueNumber"`
	// The queues information of the rocketmq topic.
	Queues []GetTopicsRocketmqTopicQueue `pulumi:"queues"`
	// The name of the rocketmq topic. This field support fuzzy query.
	TopicName string `pulumi:"topicName"`
}

// GetTopicsRocketmqTopicInput is an input type that accepts GetTopicsRocketmqTopicArgs and GetTopicsRocketmqTopicOutput values.
// You can construct a concrete instance of `GetTopicsRocketmqTopicInput` via:
//
//	GetTopicsRocketmqTopicArgs{...}
type GetTopicsRocketmqTopicInput interface {
	pulumi.Input

	ToGetTopicsRocketmqTopicOutput() GetTopicsRocketmqTopicOutput
	ToGetTopicsRocketmqTopicOutputWithContext(context.Context) GetTopicsRocketmqTopicOutput
}

type GetTopicsRocketmqTopicArgs struct {
	// The access policies of the rocketmq topic.
	AccessPolicies GetTopicsRocketmqTopicAccessPolicyArrayInput `pulumi:"accessPolicies"`
	// The create time of the rocketmq topic.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of the rocketmq topic.
	Description pulumi.StringInput `pulumi:"description"`
	// The groups information of the rocketmq topic.
	Groups GetTopicsRocketmqTopicGroupArrayInput `pulumi:"groups"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
	// 0: Regular message
	// 1: Transaction message
	// 2: Partition order message
	// 3: Global sequential message
	// 4: Delay message.
	MessageType pulumi.IntInput `pulumi:"messageType"`
	// The number of the rocketmq topic queue.
	QueueNumber pulumi.IntInput `pulumi:"queueNumber"`
	// The queues information of the rocketmq topic.
	Queues GetTopicsRocketmqTopicQueueArrayInput `pulumi:"queues"`
	// The name of the rocketmq topic. This field support fuzzy query.
	TopicName pulumi.StringInput `pulumi:"topicName"`
}

func (GetTopicsRocketmqTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsRocketmqTopic)(nil)).Elem()
}

func (i GetTopicsRocketmqTopicArgs) ToGetTopicsRocketmqTopicOutput() GetTopicsRocketmqTopicOutput {
	return i.ToGetTopicsRocketmqTopicOutputWithContext(context.Background())
}

func (i GetTopicsRocketmqTopicArgs) ToGetTopicsRocketmqTopicOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsRocketmqTopicOutput)
}

// GetTopicsRocketmqTopicArrayInput is an input type that accepts GetTopicsRocketmqTopicArray and GetTopicsRocketmqTopicArrayOutput values.
// You can construct a concrete instance of `GetTopicsRocketmqTopicArrayInput` via:
//
//	GetTopicsRocketmqTopicArray{ GetTopicsRocketmqTopicArgs{...} }
type GetTopicsRocketmqTopicArrayInput interface {
	pulumi.Input

	ToGetTopicsRocketmqTopicArrayOutput() GetTopicsRocketmqTopicArrayOutput
	ToGetTopicsRocketmqTopicArrayOutputWithContext(context.Context) GetTopicsRocketmqTopicArrayOutput
}

type GetTopicsRocketmqTopicArray []GetTopicsRocketmqTopicInput

func (GetTopicsRocketmqTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsRocketmqTopic)(nil)).Elem()
}

func (i GetTopicsRocketmqTopicArray) ToGetTopicsRocketmqTopicArrayOutput() GetTopicsRocketmqTopicArrayOutput {
	return i.ToGetTopicsRocketmqTopicArrayOutputWithContext(context.Background())
}

func (i GetTopicsRocketmqTopicArray) ToGetTopicsRocketmqTopicArrayOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsRocketmqTopicArrayOutput)
}

type GetTopicsRocketmqTopicOutput struct{ *pulumi.OutputState }

func (GetTopicsRocketmqTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsRocketmqTopic)(nil)).Elem()
}

func (o GetTopicsRocketmqTopicOutput) ToGetTopicsRocketmqTopicOutput() GetTopicsRocketmqTopicOutput {
	return o
}

func (o GetTopicsRocketmqTopicOutput) ToGetTopicsRocketmqTopicOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicOutput {
	return o
}

// The access policies of the rocketmq topic.
func (o GetTopicsRocketmqTopicOutput) AccessPolicies() GetTopicsRocketmqTopicAccessPolicyArrayOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopic) []GetTopicsRocketmqTopicAccessPolicy { return v.AccessPolicies }).(GetTopicsRocketmqTopicAccessPolicyArrayOutput)
}

// The create time of the rocketmq topic.
func (o GetTopicsRocketmqTopicOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopic) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the rocketmq topic.
func (o GetTopicsRocketmqTopicOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopic) string { return v.Description }).(pulumi.StringOutput)
}

// The groups information of the rocketmq topic.
func (o GetTopicsRocketmqTopicOutput) Groups() GetTopicsRocketmqTopicGroupArrayOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopic) []GetTopicsRocketmqTopicGroup { return v.Groups }).(GetTopicsRocketmqTopicGroupArrayOutput)
}

// The id of rocketmq instance.
func (o GetTopicsRocketmqTopicOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopic) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
// 0: Regular message
// 1: Transaction message
// 2: Partition order message
// 3: Global sequential message
// 4: Delay message.
func (o GetTopicsRocketmqTopicOutput) MessageType() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopic) int { return v.MessageType }).(pulumi.IntOutput)
}

// The number of the rocketmq topic queue.
func (o GetTopicsRocketmqTopicOutput) QueueNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopic) int { return v.QueueNumber }).(pulumi.IntOutput)
}

// The queues information of the rocketmq topic.
func (o GetTopicsRocketmqTopicOutput) Queues() GetTopicsRocketmqTopicQueueArrayOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopic) []GetTopicsRocketmqTopicQueue { return v.Queues }).(GetTopicsRocketmqTopicQueueArrayOutput)
}

// The name of the rocketmq topic. This field support fuzzy query.
func (o GetTopicsRocketmqTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopic) string { return v.TopicName }).(pulumi.StringOutput)
}

type GetTopicsRocketmqTopicArrayOutput struct{ *pulumi.OutputState }

func (GetTopicsRocketmqTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsRocketmqTopic)(nil)).Elem()
}

func (o GetTopicsRocketmqTopicArrayOutput) ToGetTopicsRocketmqTopicArrayOutput() GetTopicsRocketmqTopicArrayOutput {
	return o
}

func (o GetTopicsRocketmqTopicArrayOutput) ToGetTopicsRocketmqTopicArrayOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicArrayOutput {
	return o
}

func (o GetTopicsRocketmqTopicArrayOutput) Index(i pulumi.IntInput) GetTopicsRocketmqTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicsRocketmqTopic {
		return vs[0].([]GetTopicsRocketmqTopic)[vs[1].(int)]
	}).(GetTopicsRocketmqTopicOutput)
}

type GetTopicsRocketmqTopicAccessPolicy struct {
	// The access key of the rocketmq key.
	AccessKey string `pulumi:"accessKey"`
	// The authority of the rocketmq key for the current topic.
	Authority string `pulumi:"authority"`
}

// GetTopicsRocketmqTopicAccessPolicyInput is an input type that accepts GetTopicsRocketmqTopicAccessPolicyArgs and GetTopicsRocketmqTopicAccessPolicyOutput values.
// You can construct a concrete instance of `GetTopicsRocketmqTopicAccessPolicyInput` via:
//
//	GetTopicsRocketmqTopicAccessPolicyArgs{...}
type GetTopicsRocketmqTopicAccessPolicyInput interface {
	pulumi.Input

	ToGetTopicsRocketmqTopicAccessPolicyOutput() GetTopicsRocketmqTopicAccessPolicyOutput
	ToGetTopicsRocketmqTopicAccessPolicyOutputWithContext(context.Context) GetTopicsRocketmqTopicAccessPolicyOutput
}

type GetTopicsRocketmqTopicAccessPolicyArgs struct {
	// The access key of the rocketmq key.
	AccessKey pulumi.StringInput `pulumi:"accessKey"`
	// The authority of the rocketmq key for the current topic.
	Authority pulumi.StringInput `pulumi:"authority"`
}

func (GetTopicsRocketmqTopicAccessPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsRocketmqTopicAccessPolicy)(nil)).Elem()
}

func (i GetTopicsRocketmqTopicAccessPolicyArgs) ToGetTopicsRocketmqTopicAccessPolicyOutput() GetTopicsRocketmqTopicAccessPolicyOutput {
	return i.ToGetTopicsRocketmqTopicAccessPolicyOutputWithContext(context.Background())
}

func (i GetTopicsRocketmqTopicAccessPolicyArgs) ToGetTopicsRocketmqTopicAccessPolicyOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicAccessPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsRocketmqTopicAccessPolicyOutput)
}

// GetTopicsRocketmqTopicAccessPolicyArrayInput is an input type that accepts GetTopicsRocketmqTopicAccessPolicyArray and GetTopicsRocketmqTopicAccessPolicyArrayOutput values.
// You can construct a concrete instance of `GetTopicsRocketmqTopicAccessPolicyArrayInput` via:
//
//	GetTopicsRocketmqTopicAccessPolicyArray{ GetTopicsRocketmqTopicAccessPolicyArgs{...} }
type GetTopicsRocketmqTopicAccessPolicyArrayInput interface {
	pulumi.Input

	ToGetTopicsRocketmqTopicAccessPolicyArrayOutput() GetTopicsRocketmqTopicAccessPolicyArrayOutput
	ToGetTopicsRocketmqTopicAccessPolicyArrayOutputWithContext(context.Context) GetTopicsRocketmqTopicAccessPolicyArrayOutput
}

type GetTopicsRocketmqTopicAccessPolicyArray []GetTopicsRocketmqTopicAccessPolicyInput

func (GetTopicsRocketmqTopicAccessPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsRocketmqTopicAccessPolicy)(nil)).Elem()
}

func (i GetTopicsRocketmqTopicAccessPolicyArray) ToGetTopicsRocketmqTopicAccessPolicyArrayOutput() GetTopicsRocketmqTopicAccessPolicyArrayOutput {
	return i.ToGetTopicsRocketmqTopicAccessPolicyArrayOutputWithContext(context.Background())
}

func (i GetTopicsRocketmqTopicAccessPolicyArray) ToGetTopicsRocketmqTopicAccessPolicyArrayOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicAccessPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsRocketmqTopicAccessPolicyArrayOutput)
}

type GetTopicsRocketmqTopicAccessPolicyOutput struct{ *pulumi.OutputState }

func (GetTopicsRocketmqTopicAccessPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsRocketmqTopicAccessPolicy)(nil)).Elem()
}

func (o GetTopicsRocketmqTopicAccessPolicyOutput) ToGetTopicsRocketmqTopicAccessPolicyOutput() GetTopicsRocketmqTopicAccessPolicyOutput {
	return o
}

func (o GetTopicsRocketmqTopicAccessPolicyOutput) ToGetTopicsRocketmqTopicAccessPolicyOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicAccessPolicyOutput {
	return o
}

// The access key of the rocketmq key.
func (o GetTopicsRocketmqTopicAccessPolicyOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicAccessPolicy) string { return v.AccessKey }).(pulumi.StringOutput)
}

// The authority of the rocketmq key for the current topic.
func (o GetTopicsRocketmqTopicAccessPolicyOutput) Authority() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicAccessPolicy) string { return v.Authority }).(pulumi.StringOutput)
}

type GetTopicsRocketmqTopicAccessPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetTopicsRocketmqTopicAccessPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsRocketmqTopicAccessPolicy)(nil)).Elem()
}

func (o GetTopicsRocketmqTopicAccessPolicyArrayOutput) ToGetTopicsRocketmqTopicAccessPolicyArrayOutput() GetTopicsRocketmqTopicAccessPolicyArrayOutput {
	return o
}

func (o GetTopicsRocketmqTopicAccessPolicyArrayOutput) ToGetTopicsRocketmqTopicAccessPolicyArrayOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicAccessPolicyArrayOutput {
	return o
}

func (o GetTopicsRocketmqTopicAccessPolicyArrayOutput) Index(i pulumi.IntInput) GetTopicsRocketmqTopicAccessPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicsRocketmqTopicAccessPolicy {
		return vs[0].([]GetTopicsRocketmqTopicAccessPolicy)[vs[1].(int)]
	}).(GetTopicsRocketmqTopicAccessPolicyOutput)
}

type GetTopicsRocketmqTopicGroup struct {
	// The id of the rocketmq group.
	GroupId string `pulumi:"groupId"`
	// The message model of the rocketmq group.
	MessageModel string `pulumi:"messageModel"`
	// The sub string of the rocketmq group.
	SubString string `pulumi:"subString"`
}

// GetTopicsRocketmqTopicGroupInput is an input type that accepts GetTopicsRocketmqTopicGroupArgs and GetTopicsRocketmqTopicGroupOutput values.
// You can construct a concrete instance of `GetTopicsRocketmqTopicGroupInput` via:
//
//	GetTopicsRocketmqTopicGroupArgs{...}
type GetTopicsRocketmqTopicGroupInput interface {
	pulumi.Input

	ToGetTopicsRocketmqTopicGroupOutput() GetTopicsRocketmqTopicGroupOutput
	ToGetTopicsRocketmqTopicGroupOutputWithContext(context.Context) GetTopicsRocketmqTopicGroupOutput
}

type GetTopicsRocketmqTopicGroupArgs struct {
	// The id of the rocketmq group.
	GroupId pulumi.StringInput `pulumi:"groupId"`
	// The message model of the rocketmq group.
	MessageModel pulumi.StringInput `pulumi:"messageModel"`
	// The sub string of the rocketmq group.
	SubString pulumi.StringInput `pulumi:"subString"`
}

func (GetTopicsRocketmqTopicGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsRocketmqTopicGroup)(nil)).Elem()
}

func (i GetTopicsRocketmqTopicGroupArgs) ToGetTopicsRocketmqTopicGroupOutput() GetTopicsRocketmqTopicGroupOutput {
	return i.ToGetTopicsRocketmqTopicGroupOutputWithContext(context.Background())
}

func (i GetTopicsRocketmqTopicGroupArgs) ToGetTopicsRocketmqTopicGroupOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsRocketmqTopicGroupOutput)
}

// GetTopicsRocketmqTopicGroupArrayInput is an input type that accepts GetTopicsRocketmqTopicGroupArray and GetTopicsRocketmqTopicGroupArrayOutput values.
// You can construct a concrete instance of `GetTopicsRocketmqTopicGroupArrayInput` via:
//
//	GetTopicsRocketmqTopicGroupArray{ GetTopicsRocketmqTopicGroupArgs{...} }
type GetTopicsRocketmqTopicGroupArrayInput interface {
	pulumi.Input

	ToGetTopicsRocketmqTopicGroupArrayOutput() GetTopicsRocketmqTopicGroupArrayOutput
	ToGetTopicsRocketmqTopicGroupArrayOutputWithContext(context.Context) GetTopicsRocketmqTopicGroupArrayOutput
}

type GetTopicsRocketmqTopicGroupArray []GetTopicsRocketmqTopicGroupInput

func (GetTopicsRocketmqTopicGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsRocketmqTopicGroup)(nil)).Elem()
}

func (i GetTopicsRocketmqTopicGroupArray) ToGetTopicsRocketmqTopicGroupArrayOutput() GetTopicsRocketmqTopicGroupArrayOutput {
	return i.ToGetTopicsRocketmqTopicGroupArrayOutputWithContext(context.Background())
}

func (i GetTopicsRocketmqTopicGroupArray) ToGetTopicsRocketmqTopicGroupArrayOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsRocketmqTopicGroupArrayOutput)
}

type GetTopicsRocketmqTopicGroupOutput struct{ *pulumi.OutputState }

func (GetTopicsRocketmqTopicGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsRocketmqTopicGroup)(nil)).Elem()
}

func (o GetTopicsRocketmqTopicGroupOutput) ToGetTopicsRocketmqTopicGroupOutput() GetTopicsRocketmqTopicGroupOutput {
	return o
}

func (o GetTopicsRocketmqTopicGroupOutput) ToGetTopicsRocketmqTopicGroupOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicGroupOutput {
	return o
}

// The id of the rocketmq group.
func (o GetTopicsRocketmqTopicGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicGroup) string { return v.GroupId }).(pulumi.StringOutput)
}

// The message model of the rocketmq group.
func (o GetTopicsRocketmqTopicGroupOutput) MessageModel() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicGroup) string { return v.MessageModel }).(pulumi.StringOutput)
}

// The sub string of the rocketmq group.
func (o GetTopicsRocketmqTopicGroupOutput) SubString() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicGroup) string { return v.SubString }).(pulumi.StringOutput)
}

type GetTopicsRocketmqTopicGroupArrayOutput struct{ *pulumi.OutputState }

func (GetTopicsRocketmqTopicGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsRocketmqTopicGroup)(nil)).Elem()
}

func (o GetTopicsRocketmqTopicGroupArrayOutput) ToGetTopicsRocketmqTopicGroupArrayOutput() GetTopicsRocketmqTopicGroupArrayOutput {
	return o
}

func (o GetTopicsRocketmqTopicGroupArrayOutput) ToGetTopicsRocketmqTopicGroupArrayOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicGroupArrayOutput {
	return o
}

func (o GetTopicsRocketmqTopicGroupArrayOutput) Index(i pulumi.IntInput) GetTopicsRocketmqTopicGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicsRocketmqTopicGroup {
		return vs[0].([]GetTopicsRocketmqTopicGroup)[vs[1].(int)]
	}).(GetTopicsRocketmqTopicGroupOutput)
}

type GetTopicsRocketmqTopicQueue struct {
	// The end offset of the rocketmq queue.
	EndOffset int `pulumi:"endOffset"`
	// The last update timestamp of the rocketmq queue.
	LastUpdateTimestamp int `pulumi:"lastUpdateTimestamp"`
	// The message count of the rocketmq queue.
	MessageCount int `pulumi:"messageCount"`
	// The id of the rocketmq queue.
	QueueId string `pulumi:"queueId"`
	// The start offset of the rocketmq queue.
	StartOffset int `pulumi:"startOffset"`
}

// GetTopicsRocketmqTopicQueueInput is an input type that accepts GetTopicsRocketmqTopicQueueArgs and GetTopicsRocketmqTopicQueueOutput values.
// You can construct a concrete instance of `GetTopicsRocketmqTopicQueueInput` via:
//
//	GetTopicsRocketmqTopicQueueArgs{...}
type GetTopicsRocketmqTopicQueueInput interface {
	pulumi.Input

	ToGetTopicsRocketmqTopicQueueOutput() GetTopicsRocketmqTopicQueueOutput
	ToGetTopicsRocketmqTopicQueueOutputWithContext(context.Context) GetTopicsRocketmqTopicQueueOutput
}

type GetTopicsRocketmqTopicQueueArgs struct {
	// The end offset of the rocketmq queue.
	EndOffset pulumi.IntInput `pulumi:"endOffset"`
	// The last update timestamp of the rocketmq queue.
	LastUpdateTimestamp pulumi.IntInput `pulumi:"lastUpdateTimestamp"`
	// The message count of the rocketmq queue.
	MessageCount pulumi.IntInput `pulumi:"messageCount"`
	// The id of the rocketmq queue.
	QueueId pulumi.StringInput `pulumi:"queueId"`
	// The start offset of the rocketmq queue.
	StartOffset pulumi.IntInput `pulumi:"startOffset"`
}

func (GetTopicsRocketmqTopicQueueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsRocketmqTopicQueue)(nil)).Elem()
}

func (i GetTopicsRocketmqTopicQueueArgs) ToGetTopicsRocketmqTopicQueueOutput() GetTopicsRocketmqTopicQueueOutput {
	return i.ToGetTopicsRocketmqTopicQueueOutputWithContext(context.Background())
}

func (i GetTopicsRocketmqTopicQueueArgs) ToGetTopicsRocketmqTopicQueueOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicQueueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsRocketmqTopicQueueOutput)
}

// GetTopicsRocketmqTopicQueueArrayInput is an input type that accepts GetTopicsRocketmqTopicQueueArray and GetTopicsRocketmqTopicQueueArrayOutput values.
// You can construct a concrete instance of `GetTopicsRocketmqTopicQueueArrayInput` via:
//
//	GetTopicsRocketmqTopicQueueArray{ GetTopicsRocketmqTopicQueueArgs{...} }
type GetTopicsRocketmqTopicQueueArrayInput interface {
	pulumi.Input

	ToGetTopicsRocketmqTopicQueueArrayOutput() GetTopicsRocketmqTopicQueueArrayOutput
	ToGetTopicsRocketmqTopicQueueArrayOutputWithContext(context.Context) GetTopicsRocketmqTopicQueueArrayOutput
}

type GetTopicsRocketmqTopicQueueArray []GetTopicsRocketmqTopicQueueInput

func (GetTopicsRocketmqTopicQueueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsRocketmqTopicQueue)(nil)).Elem()
}

func (i GetTopicsRocketmqTopicQueueArray) ToGetTopicsRocketmqTopicQueueArrayOutput() GetTopicsRocketmqTopicQueueArrayOutput {
	return i.ToGetTopicsRocketmqTopicQueueArrayOutputWithContext(context.Background())
}

func (i GetTopicsRocketmqTopicQueueArray) ToGetTopicsRocketmqTopicQueueArrayOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicQueueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTopicsRocketmqTopicQueueArrayOutput)
}

type GetTopicsRocketmqTopicQueueOutput struct{ *pulumi.OutputState }

func (GetTopicsRocketmqTopicQueueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsRocketmqTopicQueue)(nil)).Elem()
}

func (o GetTopicsRocketmqTopicQueueOutput) ToGetTopicsRocketmqTopicQueueOutput() GetTopicsRocketmqTopicQueueOutput {
	return o
}

func (o GetTopicsRocketmqTopicQueueOutput) ToGetTopicsRocketmqTopicQueueOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicQueueOutput {
	return o
}

// The end offset of the rocketmq queue.
func (o GetTopicsRocketmqTopicQueueOutput) EndOffset() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicQueue) int { return v.EndOffset }).(pulumi.IntOutput)
}

// The last update timestamp of the rocketmq queue.
func (o GetTopicsRocketmqTopicQueueOutput) LastUpdateTimestamp() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicQueue) int { return v.LastUpdateTimestamp }).(pulumi.IntOutput)
}

// The message count of the rocketmq queue.
func (o GetTopicsRocketmqTopicQueueOutput) MessageCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicQueue) int { return v.MessageCount }).(pulumi.IntOutput)
}

// The id of the rocketmq queue.
func (o GetTopicsRocketmqTopicQueueOutput) QueueId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicQueue) string { return v.QueueId }).(pulumi.StringOutput)
}

// The start offset of the rocketmq queue.
func (o GetTopicsRocketmqTopicQueueOutput) StartOffset() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsRocketmqTopicQueue) int { return v.StartOffset }).(pulumi.IntOutput)
}

type GetTopicsRocketmqTopicQueueArrayOutput struct{ *pulumi.OutputState }

func (GetTopicsRocketmqTopicQueueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTopicsRocketmqTopicQueue)(nil)).Elem()
}

func (o GetTopicsRocketmqTopicQueueArrayOutput) ToGetTopicsRocketmqTopicQueueArrayOutput() GetTopicsRocketmqTopicQueueArrayOutput {
	return o
}

func (o GetTopicsRocketmqTopicQueueArrayOutput) ToGetTopicsRocketmqTopicQueueArrayOutputWithContext(ctx context.Context) GetTopicsRocketmqTopicQueueArrayOutput {
	return o
}

func (o GetTopicsRocketmqTopicQueueArrayOutput) Index(i pulumi.IntInput) GetTopicsRocketmqTopicQueueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTopicsRocketmqTopicQueue {
		return vs[0].([]GetTopicsRocketmqTopicQueue)[vs[1].(int)]
	}).(GetTopicsRocketmqTopicQueueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeysAccessKeyInput)(nil)).Elem(), AccessKeysAccessKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeysAccessKeyArrayInput)(nil)).Elem(), AccessKeysAccessKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeysAccessKeyTopicPermissionInput)(nil)).Elem(), AccessKeysAccessKeyTopicPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessKeysAccessKeyTopicPermissionArrayInput)(nil)).Elem(), AccessKeysAccessKeyTopicPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListsRocketmqAllowListInput)(nil)).Elem(), AllowListsRocketmqAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListsRocketmqAllowListArrayInput)(nil)).Elem(), AllowListsRocketmqAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListsRocketmqAllowListAssociatedInstanceInput)(nil)).Elem(), AllowListsRocketmqAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AllowListsRocketmqAllowListAssociatedInstanceArrayInput)(nil)).Elem(), AllowListsRocketmqAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsRocketmqGroupInput)(nil)).Elem(), GroupsRocketmqGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsRocketmqGroupArrayInput)(nil)).Elem(), GroupsRocketmqGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsRocketmqGroupConsumedClientInput)(nil)).Elem(), GroupsRocketmqGroupConsumedClientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsRocketmqGroupConsumedClientArrayInput)(nil)).Elem(), GroupsRocketmqGroupConsumedClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsRocketmqGroupConsumedTopicInput)(nil)).Elem(), GroupsRocketmqGroupConsumedTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupsRocketmqGroupConsumedTopicArrayInput)(nil)).Elem(), GroupsRocketmqGroupConsumedTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRocketmqInstanceInput)(nil)).Elem(), InstancesRocketmqInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRocketmqInstanceArrayInput)(nil)).Elem(), InstancesRocketmqInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRocketmqInstanceChargeDetailInput)(nil)).Elem(), InstancesRocketmqInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRocketmqInstanceChargeDetailArrayInput)(nil)).Elem(), InstancesRocketmqInstanceChargeDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRocketmqInstanceConnectionInfoInput)(nil)).Elem(), InstancesRocketmqInstanceConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRocketmqInstanceConnectionInfoArrayInput)(nil)).Elem(), InstancesRocketmqInstanceConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRocketmqInstanceTagInput)(nil)).Elem(), InstancesRocketmqInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRocketmqInstanceTagArrayInput)(nil)).Elem(), InstancesRocketmqInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQAccessKeyTopicPermissionInput)(nil)).Elem(), RocketMQAccessKeyTopicPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQAccessKeyTopicPermissionArrayInput)(nil)).Elem(), RocketMQAccessKeyTopicPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQAllowListAssociatedInstanceInput)(nil)).Elem(), RocketMQAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQAllowListAssociatedInstanceArrayInput)(nil)).Elem(), RocketMQAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQInstanceChargeInfoInput)(nil)).Elem(), RocketMQInstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQInstanceChargeInfoPtrInput)(nil)).Elem(), RocketMQInstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQInstanceConnectionInfoInput)(nil)).Elem(), RocketMQInstanceConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQInstanceConnectionInfoArrayInput)(nil)).Elem(), RocketMQInstanceConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQInstanceTagInput)(nil)).Elem(), RocketMQInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQInstanceTagArrayInput)(nil)).Elem(), RocketMQInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicAccessPolicyInput)(nil)).Elem(), RocketMQTopicAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicAccessPolicyArrayInput)(nil)).Elem(), RocketMQTopicAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicGroupInput)(nil)).Elem(), RocketMQTopicGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicGroupArrayInput)(nil)).Elem(), RocketMQTopicGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicQueueInput)(nil)).Elem(), RocketMQTopicQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicQueueArrayInput)(nil)).Elem(), RocketMQTopicQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsRocketmqTopicInput)(nil)).Elem(), TopicsRocketmqTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsRocketmqTopicArrayInput)(nil)).Elem(), TopicsRocketmqTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsRocketmqTopicAccessPolicyInput)(nil)).Elem(), TopicsRocketmqTopicAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsRocketmqTopicAccessPolicyArrayInput)(nil)).Elem(), TopicsRocketmqTopicAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsRocketmqTopicGroupInput)(nil)).Elem(), TopicsRocketmqTopicGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsRocketmqTopicGroupArrayInput)(nil)).Elem(), TopicsRocketmqTopicGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsRocketmqTopicQueueInput)(nil)).Elem(), TopicsRocketmqTopicQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TopicsRocketmqTopicQueueArrayInput)(nil)).Elem(), TopicsRocketmqTopicQueueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessKeysAccessKeyInput)(nil)).Elem(), GetAccessKeysAccessKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessKeysAccessKeyArrayInput)(nil)).Elem(), GetAccessKeysAccessKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessKeysAccessKeyTopicPermissionInput)(nil)).Elem(), GetAccessKeysAccessKeyTopicPermissionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessKeysAccessKeyTopicPermissionArrayInput)(nil)).Elem(), GetAccessKeysAccessKeyTopicPermissionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowListsRocketmqAllowListInput)(nil)).Elem(), GetAllowListsRocketmqAllowListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowListsRocketmqAllowListArrayInput)(nil)).Elem(), GetAllowListsRocketmqAllowListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowListsRocketmqAllowListAssociatedInstanceInput)(nil)).Elem(), GetAllowListsRocketmqAllowListAssociatedInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAllowListsRocketmqAllowListAssociatedInstanceArrayInput)(nil)).Elem(), GetAllowListsRocketmqAllowListAssociatedInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsRocketmqGroupInput)(nil)).Elem(), GetGroupsRocketmqGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsRocketmqGroupArrayInput)(nil)).Elem(), GetGroupsRocketmqGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsRocketmqGroupConsumedClientInput)(nil)).Elem(), GetGroupsRocketmqGroupConsumedClientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsRocketmqGroupConsumedClientArrayInput)(nil)).Elem(), GetGroupsRocketmqGroupConsumedClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsRocketmqGroupConsumedTopicInput)(nil)).Elem(), GetGroupsRocketmqGroupConsumedTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsRocketmqGroupConsumedTopicArrayInput)(nil)).Elem(), GetGroupsRocketmqGroupConsumedTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRocketmqInstanceInput)(nil)).Elem(), GetInstancesRocketmqInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRocketmqInstanceArrayInput)(nil)).Elem(), GetInstancesRocketmqInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRocketmqInstanceChargeDetailInput)(nil)).Elem(), GetInstancesRocketmqInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRocketmqInstanceChargeDetailArrayInput)(nil)).Elem(), GetInstancesRocketmqInstanceChargeDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRocketmqInstanceConnectionInfoInput)(nil)).Elem(), GetInstancesRocketmqInstanceConnectionInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRocketmqInstanceConnectionInfoArrayInput)(nil)).Elem(), GetInstancesRocketmqInstanceConnectionInfoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRocketmqInstanceTagInput)(nil)).Elem(), GetInstancesRocketmqInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRocketmqInstanceTagArrayInput)(nil)).Elem(), GetInstancesRocketmqInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagInput)(nil)).Elem(), GetInstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagArrayInput)(nil)).Elem(), GetInstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsRocketmqTopicInput)(nil)).Elem(), GetTopicsRocketmqTopicArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsRocketmqTopicArrayInput)(nil)).Elem(), GetTopicsRocketmqTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsRocketmqTopicAccessPolicyInput)(nil)).Elem(), GetTopicsRocketmqTopicAccessPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsRocketmqTopicAccessPolicyArrayInput)(nil)).Elem(), GetTopicsRocketmqTopicAccessPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsRocketmqTopicGroupInput)(nil)).Elem(), GetTopicsRocketmqTopicGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsRocketmqTopicGroupArrayInput)(nil)).Elem(), GetTopicsRocketmqTopicGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsRocketmqTopicQueueInput)(nil)).Elem(), GetTopicsRocketmqTopicQueueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTopicsRocketmqTopicQueueArrayInput)(nil)).Elem(), GetTopicsRocketmqTopicQueueArray{})
	pulumi.RegisterOutputType(AccessKeysAccessKeyOutput{})
	pulumi.RegisterOutputType(AccessKeysAccessKeyArrayOutput{})
	pulumi.RegisterOutputType(AccessKeysAccessKeyTopicPermissionOutput{})
	pulumi.RegisterOutputType(AccessKeysAccessKeyTopicPermissionArrayOutput{})
	pulumi.RegisterOutputType(AllowListsRocketmqAllowListOutput{})
	pulumi.RegisterOutputType(AllowListsRocketmqAllowListArrayOutput{})
	pulumi.RegisterOutputType(AllowListsRocketmqAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(AllowListsRocketmqAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(GroupsRocketmqGroupOutput{})
	pulumi.RegisterOutputType(GroupsRocketmqGroupArrayOutput{})
	pulumi.RegisterOutputType(GroupsRocketmqGroupConsumedClientOutput{})
	pulumi.RegisterOutputType(GroupsRocketmqGroupConsumedClientArrayOutput{})
	pulumi.RegisterOutputType(GroupsRocketmqGroupConsumedTopicOutput{})
	pulumi.RegisterOutputType(GroupsRocketmqGroupConsumedTopicArrayOutput{})
	pulumi.RegisterOutputType(InstancesRocketmqInstanceOutput{})
	pulumi.RegisterOutputType(InstancesRocketmqInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesRocketmqInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(InstancesRocketmqInstanceChargeDetailArrayOutput{})
	pulumi.RegisterOutputType(InstancesRocketmqInstanceConnectionInfoOutput{})
	pulumi.RegisterOutputType(InstancesRocketmqInstanceConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(InstancesRocketmqInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesRocketmqInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(RocketMQAccessKeyTopicPermissionOutput{})
	pulumi.RegisterOutputType(RocketMQAccessKeyTopicPermissionArrayOutput{})
	pulumi.RegisterOutputType(RocketMQAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(RocketMQAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(RocketMQInstanceChargeInfoOutput{})
	pulumi.RegisterOutputType(RocketMQInstanceChargeInfoPtrOutput{})
	pulumi.RegisterOutputType(RocketMQInstanceConnectionInfoOutput{})
	pulumi.RegisterOutputType(RocketMQInstanceConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(RocketMQInstanceTagOutput{})
	pulumi.RegisterOutputType(RocketMQInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(RocketMQTopicAccessPolicyOutput{})
	pulumi.RegisterOutputType(RocketMQTopicAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(RocketMQTopicGroupOutput{})
	pulumi.RegisterOutputType(RocketMQTopicGroupArrayOutput{})
	pulumi.RegisterOutputType(RocketMQTopicQueueOutput{})
	pulumi.RegisterOutputType(RocketMQTopicQueueArrayOutput{})
	pulumi.RegisterOutputType(TopicsRocketmqTopicOutput{})
	pulumi.RegisterOutputType(TopicsRocketmqTopicArrayOutput{})
	pulumi.RegisterOutputType(TopicsRocketmqTopicAccessPolicyOutput{})
	pulumi.RegisterOutputType(TopicsRocketmqTopicAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(TopicsRocketmqTopicGroupOutput{})
	pulumi.RegisterOutputType(TopicsRocketmqTopicGroupArrayOutput{})
	pulumi.RegisterOutputType(TopicsRocketmqTopicQueueOutput{})
	pulumi.RegisterOutputType(TopicsRocketmqTopicQueueArrayOutput{})
	pulumi.RegisterOutputType(GetAccessKeysAccessKeyOutput{})
	pulumi.RegisterOutputType(GetAccessKeysAccessKeyArrayOutput{})
	pulumi.RegisterOutputType(GetAccessKeysAccessKeyTopicPermissionOutput{})
	pulumi.RegisterOutputType(GetAccessKeysAccessKeyTopicPermissionArrayOutput{})
	pulumi.RegisterOutputType(GetAllowListsRocketmqAllowListOutput{})
	pulumi.RegisterOutputType(GetAllowListsRocketmqAllowListArrayOutput{})
	pulumi.RegisterOutputType(GetAllowListsRocketmqAllowListAssociatedInstanceOutput{})
	pulumi.RegisterOutputType(GetAllowListsRocketmqAllowListAssociatedInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsRocketmqGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsRocketmqGroupArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsRocketmqGroupConsumedClientOutput{})
	pulumi.RegisterOutputType(GetGroupsRocketmqGroupConsumedClientArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsRocketmqGroupConsumedTopicOutput{})
	pulumi.RegisterOutputType(GetGroupsRocketmqGroupConsumedTopicArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRocketmqInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesRocketmqInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRocketmqInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(GetInstancesRocketmqInstanceChargeDetailArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRocketmqInstanceConnectionInfoOutput{})
	pulumi.RegisterOutputType(GetInstancesRocketmqInstanceConnectionInfoArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRocketmqInstanceTagOutput{})
	pulumi.RegisterOutputType(GetInstancesRocketmqInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesTagOutput{})
	pulumi.RegisterOutputType(GetInstancesTagArrayOutput{})
	pulumi.RegisterOutputType(GetTopicsRocketmqTopicOutput{})
	pulumi.RegisterOutputType(GetTopicsRocketmqTopicArrayOutput{})
	pulumi.RegisterOutputType(GetTopicsRocketmqTopicAccessPolicyOutput{})
	pulumi.RegisterOutputType(GetTopicsRocketmqTopicAccessPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetTopicsRocketmqTopicGroupOutput{})
	pulumi.RegisterOutputType(GetTopicsRocketmqTopicGroupArrayOutput{})
	pulumi.RegisterOutputType(GetTopicsRocketmqTopicQueueOutput{})
	pulumi.RegisterOutputType(GetTopicsRocketmqTopicQueueArrayOutput{})
}
