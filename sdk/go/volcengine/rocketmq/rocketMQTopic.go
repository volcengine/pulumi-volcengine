// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rocketmq topic
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rocketmq"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooRocketMQInstance, err := rocketmq.NewRocketMQInstance(ctx, "fooRocketMQInstance", &rocketmq.RocketMQInstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//				},
//				SubnetId:            fooSubnet.ID(),
//				Version:             pulumi.String("4.8"),
//				ComputeSpec:         pulumi.String("rocketmq.n1.x2.micro"),
//				StorageSpace:        pulumi.Int(300),
//				AutoScaleQueue:      pulumi.Bool(true),
//				FileReservedTime:    pulumi.Int(10),
//				InstanceName:        pulumi.String("acc-test-rocketmq"),
//				InstanceDescription: pulumi.String("acc-test"),
//				ProjectName:         pulumi.String("default"),
//				ChargeInfo: &rocketmq.RocketMQInstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				Tags: rocketmq.RocketMQInstanceTagArray{
//					&rocketmq.RocketMQInstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooRocketMQAccessKey, err := rocketmq.NewRocketMQAccessKey(ctx, "fooRocketMQAccessKey", &rocketmq.RocketMQAccessKeyArgs{
//				InstanceId:   fooRocketMQInstance.ID(),
//				Description:  pulumi.String("acc-test-key"),
//				AllAuthority: pulumi.String("SUB"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rocketmq.NewRocketMQTopic(ctx, "fooRocketMQTopic", &rocketmq.RocketMQTopicArgs{
//				InstanceId:  fooRocketMQInstance.ID(),
//				TopicName:   pulumi.String("acc-test-rocketmq-topic"),
//				Description: pulumi.String("acc-test"),
//				QueueNumber: pulumi.Int(2),
//				MessageType: pulumi.Int(1),
//				AccessPolicies: rocketmq.RocketMQTopicAccessPolicyArray{
//					&rocketmq.RocketMQTopicAccessPolicyArgs{
//						AccessKey: fooRocketMQAccessKey.AccessKey,
//						Authority: pulumi.String("PUB"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RocketmqTopic can be imported using the instance_id:topic_name, e.g.
//
// ```sh
// $ pulumi import volcengine:rocketmq/rocketMQTopic:RocketMQTopic default resource_id
// ```
type RocketMQTopic struct {
	pulumi.CustomResourceState

	// The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
	AccessPolicies RocketMQTopicAccessPolicyArrayOutput `pulumi:"accessPolicies"`
	// The description of the rocketmq topic.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The groups information of the rocketmq topic.
	Groups RocketMQTopicGroupArrayOutput `pulumi:"groups"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
	MessageType pulumi.IntOutput `pulumi:"messageType"`
	// The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
	QueueNumber pulumi.IntOutput `pulumi:"queueNumber"`
	// The queues information of the rocketmq topic.
	Queues RocketMQTopicQueueArrayOutput `pulumi:"queues"`
	// The name of the rocketmq topic.
	TopicName pulumi.StringOutput `pulumi:"topicName"`
}

// NewRocketMQTopic registers a new resource with the given unique name, arguments, and options.
func NewRocketMQTopic(ctx *pulumi.Context,
	name string, args *RocketMQTopicArgs, opts ...pulumi.ResourceOption) (*RocketMQTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.MessageType == nil {
		return nil, errors.New("invalid value for required argument 'MessageType'")
	}
	if args.QueueNumber == nil {
		return nil, errors.New("invalid value for required argument 'QueueNumber'")
	}
	if args.TopicName == nil {
		return nil, errors.New("invalid value for required argument 'TopicName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RocketMQTopic
	err := ctx.RegisterResource("volcengine:rocketmq/rocketMQTopic:RocketMQTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketMQTopic gets an existing RocketMQTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketMQTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketMQTopicState, opts ...pulumi.ResourceOption) (*RocketMQTopic, error) {
	var resource RocketMQTopic
	err := ctx.ReadResource("volcengine:rocketmq/rocketMQTopic:RocketMQTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketMQTopic resources.
type rocketMQTopicState struct {
	// The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
	AccessPolicies []RocketMQTopicAccessPolicy `pulumi:"accessPolicies"`
	// The description of the rocketmq topic.
	Description *string `pulumi:"description"`
	// The groups information of the rocketmq topic.
	Groups []RocketMQTopicGroup `pulumi:"groups"`
	// The id of rocketmq instance.
	InstanceId *string `pulumi:"instanceId"`
	// The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
	MessageType *int `pulumi:"messageType"`
	// The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
	QueueNumber *int `pulumi:"queueNumber"`
	// The queues information of the rocketmq topic.
	Queues []RocketMQTopicQueue `pulumi:"queues"`
	// The name of the rocketmq topic.
	TopicName *string `pulumi:"topicName"`
}

type RocketMQTopicState struct {
	// The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
	AccessPolicies RocketMQTopicAccessPolicyArrayInput
	// The description of the rocketmq topic.
	Description pulumi.StringPtrInput
	// The groups information of the rocketmq topic.
	Groups RocketMQTopicGroupArrayInput
	// The id of rocketmq instance.
	InstanceId pulumi.StringPtrInput
	// The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
	MessageType pulumi.IntPtrInput
	// The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
	QueueNumber pulumi.IntPtrInput
	// The queues information of the rocketmq topic.
	Queues RocketMQTopicQueueArrayInput
	// The name of the rocketmq topic.
	TopicName pulumi.StringPtrInput
}

func (RocketMQTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQTopicState)(nil)).Elem()
}

type rocketMQTopicArgs struct {
	// The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
	AccessPolicies []RocketMQTopicAccessPolicy `pulumi:"accessPolicies"`
	// The description of the rocketmq topic.
	Description *string `pulumi:"description"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
	MessageType int `pulumi:"messageType"`
	// The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
	QueueNumber int `pulumi:"queueNumber"`
	// The name of the rocketmq topic.
	TopicName string `pulumi:"topicName"`
}

// The set of arguments for constructing a RocketMQTopic resource.
type RocketMQTopicArgs struct {
	// The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
	AccessPolicies RocketMQTopicAccessPolicyArrayInput
	// The description of the rocketmq topic.
	Description pulumi.StringPtrInput
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput
	// The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
	MessageType pulumi.IntInput
	// The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
	QueueNumber pulumi.IntInput
	// The name of the rocketmq topic.
	TopicName pulumi.StringInput
}

func (RocketMQTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQTopicArgs)(nil)).Elem()
}

type RocketMQTopicInput interface {
	pulumi.Input

	ToRocketMQTopicOutput() RocketMQTopicOutput
	ToRocketMQTopicOutputWithContext(ctx context.Context) RocketMQTopicOutput
}

func (*RocketMQTopic) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQTopic)(nil)).Elem()
}

func (i *RocketMQTopic) ToRocketMQTopicOutput() RocketMQTopicOutput {
	return i.ToRocketMQTopicOutputWithContext(context.Background())
}

func (i *RocketMQTopic) ToRocketMQTopicOutputWithContext(ctx context.Context) RocketMQTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicOutput)
}

// RocketMQTopicArrayInput is an input type that accepts RocketMQTopicArray and RocketMQTopicArrayOutput values.
// You can construct a concrete instance of `RocketMQTopicArrayInput` via:
//
//	RocketMQTopicArray{ RocketMQTopicArgs{...} }
type RocketMQTopicArrayInput interface {
	pulumi.Input

	ToRocketMQTopicArrayOutput() RocketMQTopicArrayOutput
	ToRocketMQTopicArrayOutputWithContext(context.Context) RocketMQTopicArrayOutput
}

type RocketMQTopicArray []RocketMQTopicInput

func (RocketMQTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQTopic)(nil)).Elem()
}

func (i RocketMQTopicArray) ToRocketMQTopicArrayOutput() RocketMQTopicArrayOutput {
	return i.ToRocketMQTopicArrayOutputWithContext(context.Background())
}

func (i RocketMQTopicArray) ToRocketMQTopicArrayOutputWithContext(ctx context.Context) RocketMQTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicArrayOutput)
}

// RocketMQTopicMapInput is an input type that accepts RocketMQTopicMap and RocketMQTopicMapOutput values.
// You can construct a concrete instance of `RocketMQTopicMapInput` via:
//
//	RocketMQTopicMap{ "key": RocketMQTopicArgs{...} }
type RocketMQTopicMapInput interface {
	pulumi.Input

	ToRocketMQTopicMapOutput() RocketMQTopicMapOutput
	ToRocketMQTopicMapOutputWithContext(context.Context) RocketMQTopicMapOutput
}

type RocketMQTopicMap map[string]RocketMQTopicInput

func (RocketMQTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQTopic)(nil)).Elem()
}

func (i RocketMQTopicMap) ToRocketMQTopicMapOutput() RocketMQTopicMapOutput {
	return i.ToRocketMQTopicMapOutputWithContext(context.Background())
}

func (i RocketMQTopicMap) ToRocketMQTopicMapOutputWithContext(ctx context.Context) RocketMQTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQTopicMapOutput)
}

type RocketMQTopicOutput struct{ *pulumi.OutputState }

func (RocketMQTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQTopic)(nil)).Elem()
}

func (o RocketMQTopicOutput) ToRocketMQTopicOutput() RocketMQTopicOutput {
	return o
}

func (o RocketMQTopicOutput) ToRocketMQTopicOutputWithContext(ctx context.Context) RocketMQTopicOutput {
	return o
}

// The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
func (o RocketMQTopicOutput) AccessPolicies() RocketMQTopicAccessPolicyArrayOutput {
	return o.ApplyT(func(v *RocketMQTopic) RocketMQTopicAccessPolicyArrayOutput { return v.AccessPolicies }).(RocketMQTopicAccessPolicyArrayOutput)
}

// The description of the rocketmq topic.
func (o RocketMQTopicOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The groups information of the rocketmq topic.
func (o RocketMQTopicOutput) Groups() RocketMQTopicGroupArrayOutput {
	return o.ApplyT(func(v *RocketMQTopic) RocketMQTopicGroupArrayOutput { return v.Groups }).(RocketMQTopicGroupArrayOutput)
}

// The id of rocketmq instance.
func (o RocketMQTopicOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
func (o RocketMQTopicOutput) MessageType() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.IntOutput { return v.MessageType }).(pulumi.IntOutput)
}

// The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
func (o RocketMQTopicOutput) QueueNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.IntOutput { return v.QueueNumber }).(pulumi.IntOutput)
}

// The queues information of the rocketmq topic.
func (o RocketMQTopicOutput) Queues() RocketMQTopicQueueArrayOutput {
	return o.ApplyT(func(v *RocketMQTopic) RocketMQTopicQueueArrayOutput { return v.Queues }).(RocketMQTopicQueueArrayOutput)
}

// The name of the rocketmq topic.
func (o RocketMQTopicOutput) TopicName() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQTopic) pulumi.StringOutput { return v.TopicName }).(pulumi.StringOutput)
}

type RocketMQTopicArrayOutput struct{ *pulumi.OutputState }

func (RocketMQTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQTopic)(nil)).Elem()
}

func (o RocketMQTopicArrayOutput) ToRocketMQTopicArrayOutput() RocketMQTopicArrayOutput {
	return o
}

func (o RocketMQTopicArrayOutput) ToRocketMQTopicArrayOutputWithContext(ctx context.Context) RocketMQTopicArrayOutput {
	return o
}

func (o RocketMQTopicArrayOutput) Index(i pulumi.IntInput) RocketMQTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketMQTopic {
		return vs[0].([]*RocketMQTopic)[vs[1].(int)]
	}).(RocketMQTopicOutput)
}

type RocketMQTopicMapOutput struct{ *pulumi.OutputState }

func (RocketMQTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQTopic)(nil)).Elem()
}

func (o RocketMQTopicMapOutput) ToRocketMQTopicMapOutput() RocketMQTopicMapOutput {
	return o
}

func (o RocketMQTopicMapOutput) ToRocketMQTopicMapOutputWithContext(ctx context.Context) RocketMQTopicMapOutput {
	return o
}

func (o RocketMQTopicMapOutput) MapIndex(k pulumi.StringInput) RocketMQTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketMQTopic {
		return vs[0].(map[string]*RocketMQTopic)[vs[1].(string)]
	}).(RocketMQTopicOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicInput)(nil)).Elem(), &RocketMQTopic{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicArrayInput)(nil)).Elem(), RocketMQTopicArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQTopicMapInput)(nil)).Elem(), RocketMQTopicMap{})
	pulumi.RegisterOutputType(RocketMQTopicOutput{})
	pulumi.RegisterOutputType(RocketMQTopicArrayOutput{})
	pulumi.RegisterOutputType(RocketMQTopicMapOutput{})
}
