// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rocketmq group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rocketmq"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooRocketMQInstance, err := rocketmq.NewRocketMQInstance(ctx, "fooRocketMQInstance", &rocketmq.RocketMQInstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//				},
//				SubnetId:            fooSubnet.ID(),
//				Version:             pulumi.String("4.8"),
//				ComputeSpec:         pulumi.String("rocketmq.n1.x2.micro"),
//				StorageSpace:        pulumi.Int(300),
//				AutoScaleQueue:      pulumi.Bool(true),
//				FileReservedTime:    pulumi.Int(10),
//				InstanceName:        pulumi.String("acc-test-rocketmq"),
//				InstanceDescription: pulumi.String("acc-test"),
//				ProjectName:         pulumi.String("default"),
//				ChargeInfo: &rocketmq.RocketMQInstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				Tags: rocketmq.RocketMQInstanceTagArray{
//					&rocketmq.RocketMQInstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rocketmq.NewRocketMQGroup(ctx, "fooRocketMQGroup", &rocketmq.RocketMQGroupArgs{
//				InstanceId:  fooRocketMQInstance.ID(),
//				GroupId:     pulumi.String("acc-test-rocketmq-group"),
//				Description: pulumi.String("acc-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RocketmqGroup can be imported using the instance_id:group_id, e.g.
//
// ```sh
// $ pulumi import volcengine:rocketmq/rocketMQGroup:RocketMQGroup default resource_id
// ```
type RocketMQGroup struct {
	pulumi.CustomResourceState

	// The create time of the rocketmq group.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of rocketmq group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The id of rocketmq group.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The type of the rocketmq group.
	GroupType pulumi.StringOutput `pulumi:"groupType"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Whether the subscription relationship of consumer instance groups within the group is consistent.
	IsSubSame pulumi.BoolOutput `pulumi:"isSubSame"`
	// The message delay time of the rocketmq group. The unit is milliseconds.
	MessageDelayTime pulumi.StringOutput `pulumi:"messageDelayTime"`
	// The message model of the rocketmq group.
	MessageModel pulumi.StringOutput `pulumi:"messageModel"`
	// The status of the rocketmq group.
	Status pulumi.StringOutput `pulumi:"status"`
	// The total consume rate of the rocketmq group. The unit is per second.
	TotalConsumeRate pulumi.StringOutput `pulumi:"totalConsumeRate"`
	// The total amount of unconsumed messages.
	TotalDiff pulumi.IntOutput `pulumi:"totalDiff"`
}

// NewRocketMQGroup registers a new resource with the given unique name, arguments, and options.
func NewRocketMQGroup(ctx *pulumi.Context,
	name string, args *RocketMQGroupArgs, opts ...pulumi.ResourceOption) (*RocketMQGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RocketMQGroup
	err := ctx.RegisterResource("volcengine:rocketmq/rocketMQGroup:RocketMQGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketMQGroup gets an existing RocketMQGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketMQGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketMQGroupState, opts ...pulumi.ResourceOption) (*RocketMQGroup, error) {
	var resource RocketMQGroup
	err := ctx.ReadResource("volcengine:rocketmq/rocketMQGroup:RocketMQGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketMQGroup resources.
type rocketMQGroupState struct {
	// The create time of the rocketmq group.
	CreateTime *string `pulumi:"createTime"`
	// The description of rocketmq group.
	Description *string `pulumi:"description"`
	// The id of rocketmq group.
	GroupId *string `pulumi:"groupId"`
	// The type of the rocketmq group.
	GroupType *string `pulumi:"groupType"`
	// The id of rocketmq instance.
	InstanceId *string `pulumi:"instanceId"`
	// Whether the subscription relationship of consumer instance groups within the group is consistent.
	IsSubSame *bool `pulumi:"isSubSame"`
	// The message delay time of the rocketmq group. The unit is milliseconds.
	MessageDelayTime *string `pulumi:"messageDelayTime"`
	// The message model of the rocketmq group.
	MessageModel *string `pulumi:"messageModel"`
	// The status of the rocketmq group.
	Status *string `pulumi:"status"`
	// The total consume rate of the rocketmq group. The unit is per second.
	TotalConsumeRate *string `pulumi:"totalConsumeRate"`
	// The total amount of unconsumed messages.
	TotalDiff *int `pulumi:"totalDiff"`
}

type RocketMQGroupState struct {
	// The create time of the rocketmq group.
	CreateTime pulumi.StringPtrInput
	// The description of rocketmq group.
	Description pulumi.StringPtrInput
	// The id of rocketmq group.
	GroupId pulumi.StringPtrInput
	// The type of the rocketmq group.
	GroupType pulumi.StringPtrInput
	// The id of rocketmq instance.
	InstanceId pulumi.StringPtrInput
	// Whether the subscription relationship of consumer instance groups within the group is consistent.
	IsSubSame pulumi.BoolPtrInput
	// The message delay time of the rocketmq group. The unit is milliseconds.
	MessageDelayTime pulumi.StringPtrInput
	// The message model of the rocketmq group.
	MessageModel pulumi.StringPtrInput
	// The status of the rocketmq group.
	Status pulumi.StringPtrInput
	// The total consume rate of the rocketmq group. The unit is per second.
	TotalConsumeRate pulumi.StringPtrInput
	// The total amount of unconsumed messages.
	TotalDiff pulumi.IntPtrInput
}

func (RocketMQGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQGroupState)(nil)).Elem()
}

type rocketMQGroupArgs struct {
	// The description of rocketmq group.
	Description *string `pulumi:"description"`
	// The id of rocketmq group.
	GroupId string `pulumi:"groupId"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a RocketMQGroup resource.
type RocketMQGroupArgs struct {
	// The description of rocketmq group.
	Description pulumi.StringPtrInput
	// The id of rocketmq group.
	GroupId pulumi.StringInput
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput
}

func (RocketMQGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQGroupArgs)(nil)).Elem()
}

type RocketMQGroupInput interface {
	pulumi.Input

	ToRocketMQGroupOutput() RocketMQGroupOutput
	ToRocketMQGroupOutputWithContext(ctx context.Context) RocketMQGroupOutput
}

func (*RocketMQGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQGroup)(nil)).Elem()
}

func (i *RocketMQGroup) ToRocketMQGroupOutput() RocketMQGroupOutput {
	return i.ToRocketMQGroupOutputWithContext(context.Background())
}

func (i *RocketMQGroup) ToRocketMQGroupOutputWithContext(ctx context.Context) RocketMQGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQGroupOutput)
}

// RocketMQGroupArrayInput is an input type that accepts RocketMQGroupArray and RocketMQGroupArrayOutput values.
// You can construct a concrete instance of `RocketMQGroupArrayInput` via:
//
//	RocketMQGroupArray{ RocketMQGroupArgs{...} }
type RocketMQGroupArrayInput interface {
	pulumi.Input

	ToRocketMQGroupArrayOutput() RocketMQGroupArrayOutput
	ToRocketMQGroupArrayOutputWithContext(context.Context) RocketMQGroupArrayOutput
}

type RocketMQGroupArray []RocketMQGroupInput

func (RocketMQGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQGroup)(nil)).Elem()
}

func (i RocketMQGroupArray) ToRocketMQGroupArrayOutput() RocketMQGroupArrayOutput {
	return i.ToRocketMQGroupArrayOutputWithContext(context.Background())
}

func (i RocketMQGroupArray) ToRocketMQGroupArrayOutputWithContext(ctx context.Context) RocketMQGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQGroupArrayOutput)
}

// RocketMQGroupMapInput is an input type that accepts RocketMQGroupMap and RocketMQGroupMapOutput values.
// You can construct a concrete instance of `RocketMQGroupMapInput` via:
//
//	RocketMQGroupMap{ "key": RocketMQGroupArgs{...} }
type RocketMQGroupMapInput interface {
	pulumi.Input

	ToRocketMQGroupMapOutput() RocketMQGroupMapOutput
	ToRocketMQGroupMapOutputWithContext(context.Context) RocketMQGroupMapOutput
}

type RocketMQGroupMap map[string]RocketMQGroupInput

func (RocketMQGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQGroup)(nil)).Elem()
}

func (i RocketMQGroupMap) ToRocketMQGroupMapOutput() RocketMQGroupMapOutput {
	return i.ToRocketMQGroupMapOutputWithContext(context.Background())
}

func (i RocketMQGroupMap) ToRocketMQGroupMapOutputWithContext(ctx context.Context) RocketMQGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQGroupMapOutput)
}

type RocketMQGroupOutput struct{ *pulumi.OutputState }

func (RocketMQGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQGroup)(nil)).Elem()
}

func (o RocketMQGroupOutput) ToRocketMQGroupOutput() RocketMQGroupOutput {
	return o
}

func (o RocketMQGroupOutput) ToRocketMQGroupOutputWithContext(ctx context.Context) RocketMQGroupOutput {
	return o
}

// The create time of the rocketmq group.
func (o RocketMQGroupOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of rocketmq group.
func (o RocketMQGroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The id of rocketmq group.
func (o RocketMQGroupOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The type of the rocketmq group.
func (o RocketMQGroupOutput) GroupType() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.StringOutput { return v.GroupType }).(pulumi.StringOutput)
}

// The id of rocketmq instance.
func (o RocketMQGroupOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Whether the subscription relationship of consumer instance groups within the group is consistent.
func (o RocketMQGroupOutput) IsSubSame() pulumi.BoolOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.BoolOutput { return v.IsSubSame }).(pulumi.BoolOutput)
}

// The message delay time of the rocketmq group. The unit is milliseconds.
func (o RocketMQGroupOutput) MessageDelayTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.StringOutput { return v.MessageDelayTime }).(pulumi.StringOutput)
}

// The message model of the rocketmq group.
func (o RocketMQGroupOutput) MessageModel() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.StringOutput { return v.MessageModel }).(pulumi.StringOutput)
}

// The status of the rocketmq group.
func (o RocketMQGroupOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The total consume rate of the rocketmq group. The unit is per second.
func (o RocketMQGroupOutput) TotalConsumeRate() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.StringOutput { return v.TotalConsumeRate }).(pulumi.StringOutput)
}

// The total amount of unconsumed messages.
func (o RocketMQGroupOutput) TotalDiff() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQGroup) pulumi.IntOutput { return v.TotalDiff }).(pulumi.IntOutput)
}

type RocketMQGroupArrayOutput struct{ *pulumi.OutputState }

func (RocketMQGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQGroup)(nil)).Elem()
}

func (o RocketMQGroupArrayOutput) ToRocketMQGroupArrayOutput() RocketMQGroupArrayOutput {
	return o
}

func (o RocketMQGroupArrayOutput) ToRocketMQGroupArrayOutputWithContext(ctx context.Context) RocketMQGroupArrayOutput {
	return o
}

func (o RocketMQGroupArrayOutput) Index(i pulumi.IntInput) RocketMQGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketMQGroup {
		return vs[0].([]*RocketMQGroup)[vs[1].(int)]
	}).(RocketMQGroupOutput)
}

type RocketMQGroupMapOutput struct{ *pulumi.OutputState }

func (RocketMQGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQGroup)(nil)).Elem()
}

func (o RocketMQGroupMapOutput) ToRocketMQGroupMapOutput() RocketMQGroupMapOutput {
	return o
}

func (o RocketMQGroupMapOutput) ToRocketMQGroupMapOutputWithContext(ctx context.Context) RocketMQGroupMapOutput {
	return o
}

func (o RocketMQGroupMapOutput) MapIndex(k pulumi.StringInput) RocketMQGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketMQGroup {
		return vs[0].(map[string]*RocketMQGroup)[vs[1].(string)]
	}).(RocketMQGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQGroupInput)(nil)).Elem(), &RocketMQGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQGroupArrayInput)(nil)).Elem(), RocketMQGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQGroupMapInput)(nil)).Elem(), RocketMQGroupMap{})
	pulumi.RegisterOutputType(RocketMQGroupOutput{})
	pulumi.RegisterOutputType(RocketMQGroupArrayOutput{})
	pulumi.RegisterOutputType(RocketMQGroupMapOutput{})
}
