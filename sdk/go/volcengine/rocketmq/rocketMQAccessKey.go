// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rocketmq access key
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rocketmq"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooRocketMQInstance, err := rocketmq.NewRocketMQInstance(ctx, "fooRocketMQInstance", &rocketmq.RocketMQInstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//				},
//				SubnetId:            fooSubnet.ID(),
//				Version:             pulumi.String("4.8"),
//				ComputeSpec:         pulumi.String("rocketmq.n1.x2.micro"),
//				StorageSpace:        pulumi.Int(300),
//				AutoScaleQueue:      pulumi.Bool(true),
//				FileReservedTime:    pulumi.Int(10),
//				InstanceName:        pulumi.String("acc-test-rocketmq"),
//				InstanceDescription: pulumi.String("acc-test"),
//				ProjectName:         pulumi.String("default"),
//				ChargeInfo: &rocketmq.RocketMQInstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				Tags: rocketmq.RocketMQInstanceTagArray{
//					&rocketmq.RocketMQInstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rocketmq.NewRocketMQAccessKey(ctx, "fooRocketMQAccessKey", &rocketmq.RocketMQAccessKeyArgs{
//				InstanceId:   fooRocketMQInstance.ID(),
//				Description:  pulumi.String("acc-test-key"),
//				AllAuthority: pulumi.String("SUB"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RocketmqAccessKey can be imported using the instance_id:access_key, e.g.
//
// ```sh
// $ pulumi import volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey default resource_id
// ```
type RocketMQAccessKey struct {
	pulumi.CustomResourceState

	// The access key id of the rocketmq key.
	AccessKey pulumi.StringOutput `pulumi:"accessKey"`
	// The acl config of the rocketmq key.
	AclConfigJson pulumi.StringOutput `pulumi:"aclConfigJson"`
	// The active status of the rocketmq key.
	Actived pulumi.BoolOutput `pulumi:"actived"`
	// The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
	AllAuthority pulumi.StringOutput `pulumi:"allAuthority"`
	// The create time of the rocketmq key.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
	Description pulumi.StringOutput `pulumi:"description"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The secret key of the rocketmq key.
	SecretKey pulumi.StringOutput `pulumi:"secretKey"`
	// The custom authority of the rocketmq key.
	TopicPermissions RocketMQAccessKeyTopicPermissionArrayOutput `pulumi:"topicPermissions"`
}

// NewRocketMQAccessKey registers a new resource with the given unique name, arguments, and options.
func NewRocketMQAccessKey(ctx *pulumi.Context,
	name string, args *RocketMQAccessKeyArgs, opts ...pulumi.ResourceOption) (*RocketMQAccessKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllAuthority == nil {
		return nil, errors.New("invalid value for required argument 'AllAuthority'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RocketMQAccessKey
	err := ctx.RegisterResource("volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketMQAccessKey gets an existing RocketMQAccessKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketMQAccessKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketMQAccessKeyState, opts ...pulumi.ResourceOption) (*RocketMQAccessKey, error) {
	var resource RocketMQAccessKey
	err := ctx.ReadResource("volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketMQAccessKey resources.
type rocketMQAccessKeyState struct {
	// The access key id of the rocketmq key.
	AccessKey *string `pulumi:"accessKey"`
	// The acl config of the rocketmq key.
	AclConfigJson *string `pulumi:"aclConfigJson"`
	// The active status of the rocketmq key.
	Actived *bool `pulumi:"actived"`
	// The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
	AllAuthority *string `pulumi:"allAuthority"`
	// The create time of the rocketmq key.
	CreateTime *string `pulumi:"createTime"`
	// The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
	Description *string `pulumi:"description"`
	// The id of rocketmq instance.
	InstanceId *string `pulumi:"instanceId"`
	// The secret key of the rocketmq key.
	SecretKey *string `pulumi:"secretKey"`
	// The custom authority of the rocketmq key.
	TopicPermissions []RocketMQAccessKeyTopicPermission `pulumi:"topicPermissions"`
}

type RocketMQAccessKeyState struct {
	// The access key id of the rocketmq key.
	AccessKey pulumi.StringPtrInput
	// The acl config of the rocketmq key.
	AclConfigJson pulumi.StringPtrInput
	// The active status of the rocketmq key.
	Actived pulumi.BoolPtrInput
	// The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
	AllAuthority pulumi.StringPtrInput
	// The create time of the rocketmq key.
	CreateTime pulumi.StringPtrInput
	// The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
	Description pulumi.StringPtrInput
	// The id of rocketmq instance.
	InstanceId pulumi.StringPtrInput
	// The secret key of the rocketmq key.
	SecretKey pulumi.StringPtrInput
	// The custom authority of the rocketmq key.
	TopicPermissions RocketMQAccessKeyTopicPermissionArrayInput
}

func (RocketMQAccessKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQAccessKeyState)(nil)).Elem()
}

type rocketMQAccessKeyArgs struct {
	// The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
	AllAuthority string `pulumi:"allAuthority"`
	// The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
	Description string `pulumi:"description"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
}

// The set of arguments for constructing a RocketMQAccessKey resource.
type RocketMQAccessKeyArgs struct {
	// The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
	AllAuthority pulumi.StringInput
	// The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
	Description pulumi.StringInput
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput
}

func (RocketMQAccessKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQAccessKeyArgs)(nil)).Elem()
}

type RocketMQAccessKeyInput interface {
	pulumi.Input

	ToRocketMQAccessKeyOutput() RocketMQAccessKeyOutput
	ToRocketMQAccessKeyOutputWithContext(ctx context.Context) RocketMQAccessKeyOutput
}

func (*RocketMQAccessKey) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQAccessKey)(nil)).Elem()
}

func (i *RocketMQAccessKey) ToRocketMQAccessKeyOutput() RocketMQAccessKeyOutput {
	return i.ToRocketMQAccessKeyOutputWithContext(context.Background())
}

func (i *RocketMQAccessKey) ToRocketMQAccessKeyOutputWithContext(ctx context.Context) RocketMQAccessKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQAccessKeyOutput)
}

// RocketMQAccessKeyArrayInput is an input type that accepts RocketMQAccessKeyArray and RocketMQAccessKeyArrayOutput values.
// You can construct a concrete instance of `RocketMQAccessKeyArrayInput` via:
//
//	RocketMQAccessKeyArray{ RocketMQAccessKeyArgs{...} }
type RocketMQAccessKeyArrayInput interface {
	pulumi.Input

	ToRocketMQAccessKeyArrayOutput() RocketMQAccessKeyArrayOutput
	ToRocketMQAccessKeyArrayOutputWithContext(context.Context) RocketMQAccessKeyArrayOutput
}

type RocketMQAccessKeyArray []RocketMQAccessKeyInput

func (RocketMQAccessKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQAccessKey)(nil)).Elem()
}

func (i RocketMQAccessKeyArray) ToRocketMQAccessKeyArrayOutput() RocketMQAccessKeyArrayOutput {
	return i.ToRocketMQAccessKeyArrayOutputWithContext(context.Background())
}

func (i RocketMQAccessKeyArray) ToRocketMQAccessKeyArrayOutputWithContext(ctx context.Context) RocketMQAccessKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQAccessKeyArrayOutput)
}

// RocketMQAccessKeyMapInput is an input type that accepts RocketMQAccessKeyMap and RocketMQAccessKeyMapOutput values.
// You can construct a concrete instance of `RocketMQAccessKeyMapInput` via:
//
//	RocketMQAccessKeyMap{ "key": RocketMQAccessKeyArgs{...} }
type RocketMQAccessKeyMapInput interface {
	pulumi.Input

	ToRocketMQAccessKeyMapOutput() RocketMQAccessKeyMapOutput
	ToRocketMQAccessKeyMapOutputWithContext(context.Context) RocketMQAccessKeyMapOutput
}

type RocketMQAccessKeyMap map[string]RocketMQAccessKeyInput

func (RocketMQAccessKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQAccessKey)(nil)).Elem()
}

func (i RocketMQAccessKeyMap) ToRocketMQAccessKeyMapOutput() RocketMQAccessKeyMapOutput {
	return i.ToRocketMQAccessKeyMapOutputWithContext(context.Background())
}

func (i RocketMQAccessKeyMap) ToRocketMQAccessKeyMapOutputWithContext(ctx context.Context) RocketMQAccessKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQAccessKeyMapOutput)
}

type RocketMQAccessKeyOutput struct{ *pulumi.OutputState }

func (RocketMQAccessKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQAccessKey)(nil)).Elem()
}

func (o RocketMQAccessKeyOutput) ToRocketMQAccessKeyOutput() RocketMQAccessKeyOutput {
	return o
}

func (o RocketMQAccessKeyOutput) ToRocketMQAccessKeyOutputWithContext(ctx context.Context) RocketMQAccessKeyOutput {
	return o
}

// The access key id of the rocketmq key.
func (o RocketMQAccessKeyOutput) AccessKey() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQAccessKey) pulumi.StringOutput { return v.AccessKey }).(pulumi.StringOutput)
}

// The acl config of the rocketmq key.
func (o RocketMQAccessKeyOutput) AclConfigJson() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQAccessKey) pulumi.StringOutput { return v.AclConfigJson }).(pulumi.StringOutput)
}

// The active status of the rocketmq key.
func (o RocketMQAccessKeyOutput) Actived() pulumi.BoolOutput {
	return o.ApplyT(func(v *RocketMQAccessKey) pulumi.BoolOutput { return v.Actived }).(pulumi.BoolOutput)
}

// The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
func (o RocketMQAccessKeyOutput) AllAuthority() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQAccessKey) pulumi.StringOutput { return v.AllAuthority }).(pulumi.StringOutput)
}

// The create time of the rocketmq key.
func (o RocketMQAccessKeyOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQAccessKey) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
func (o RocketMQAccessKeyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQAccessKey) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The id of rocketmq instance.
func (o RocketMQAccessKeyOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQAccessKey) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The secret key of the rocketmq key.
func (o RocketMQAccessKeyOutput) SecretKey() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQAccessKey) pulumi.StringOutput { return v.SecretKey }).(pulumi.StringOutput)
}

// The custom authority of the rocketmq key.
func (o RocketMQAccessKeyOutput) TopicPermissions() RocketMQAccessKeyTopicPermissionArrayOutput {
	return o.ApplyT(func(v *RocketMQAccessKey) RocketMQAccessKeyTopicPermissionArrayOutput { return v.TopicPermissions }).(RocketMQAccessKeyTopicPermissionArrayOutput)
}

type RocketMQAccessKeyArrayOutput struct{ *pulumi.OutputState }

func (RocketMQAccessKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQAccessKey)(nil)).Elem()
}

func (o RocketMQAccessKeyArrayOutput) ToRocketMQAccessKeyArrayOutput() RocketMQAccessKeyArrayOutput {
	return o
}

func (o RocketMQAccessKeyArrayOutput) ToRocketMQAccessKeyArrayOutputWithContext(ctx context.Context) RocketMQAccessKeyArrayOutput {
	return o
}

func (o RocketMQAccessKeyArrayOutput) Index(i pulumi.IntInput) RocketMQAccessKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketMQAccessKey {
		return vs[0].([]*RocketMQAccessKey)[vs[1].(int)]
	}).(RocketMQAccessKeyOutput)
}

type RocketMQAccessKeyMapOutput struct{ *pulumi.OutputState }

func (RocketMQAccessKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQAccessKey)(nil)).Elem()
}

func (o RocketMQAccessKeyMapOutput) ToRocketMQAccessKeyMapOutput() RocketMQAccessKeyMapOutput {
	return o
}

func (o RocketMQAccessKeyMapOutput) ToRocketMQAccessKeyMapOutputWithContext(ctx context.Context) RocketMQAccessKeyMapOutput {
	return o
}

func (o RocketMQAccessKeyMapOutput) MapIndex(k pulumi.StringInput) RocketMQAccessKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketMQAccessKey {
		return vs[0].(map[string]*RocketMQAccessKey)[vs[1].(string)]
	}).(RocketMQAccessKeyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQAccessKeyInput)(nil)).Elem(), &RocketMQAccessKey{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQAccessKeyArrayInput)(nil)).Elem(), RocketMQAccessKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQAccessKeyMapInput)(nil)).Elem(), RocketMQAccessKeyMap{})
	pulumi.RegisterOutputType(RocketMQAccessKeyOutput{})
	pulumi.RegisterOutputType(RocketMQAccessKeyArrayOutput{})
	pulumi.RegisterOutputType(RocketMQAccessKeyMapOutput{})
}
