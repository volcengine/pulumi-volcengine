// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of rocketmq topics
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rocketmq"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := rocketmq.GetTopics(ctx, &rocketmq.GetTopicsArgs{
//				InstanceId: "rocketmq-cnoeea6b32118fc2",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTopics(ctx *pulumi.Context, args *GetTopicsArgs, opts ...pulumi.InvokeOption) (*GetTopicsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTopicsResult
	err := ctx.Invoke("volcengine:rocketmq/getTopics:getTopics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopics.
type GetTopicsArgs struct {
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
	// 0: Regular message
	// 1: Transaction message
	// 2: Partition order message
	// 3: Global sequential message
	// 4: Delay message.
	MessageType *int `pulumi:"messageType"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The name of the rocketmq topic. This field support fuzzy query.
	TopicName *string `pulumi:"topicName"`
}

// A collection of values returned by getTopics.
type GetTopicsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The type of the rocketmq message.
	MessageType *int    `pulumi:"messageType"`
	NameRegex   *string `pulumi:"nameRegex"`
	OutputFile  *string `pulumi:"outputFile"`
	// The collection of query.
	RocketmqTopics []GetTopicsRocketmqTopic `pulumi:"rocketmqTopics"`
	// The name of the rocketmq topic.
	TopicName *string `pulumi:"topicName"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetTopicsOutput(ctx *pulumi.Context, args GetTopicsOutputArgs, opts ...pulumi.InvokeOption) GetTopicsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTopicsResult, error) {
			args := v.(GetTopicsArgs)
			r, err := GetTopics(ctx, &args, opts...)
			var s GetTopicsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTopicsResultOutput)
}

// A collection of arguments for invoking getTopics.
type GetTopicsOutputArgs struct {
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
	// 0: Regular message
	// 1: Transaction message
	// 2: Partition order message
	// 3: Global sequential message
	// 4: Delay message.
	MessageType pulumi.IntPtrInput `pulumi:"messageType"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The name of the rocketmq topic. This field support fuzzy query.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (GetTopicsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsArgs)(nil)).Elem()
}

// A collection of values returned by getTopics.
type GetTopicsResultOutput struct{ *pulumi.OutputState }

func (GetTopicsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsResult)(nil)).Elem()
}

func (o GetTopicsResultOutput) ToGetTopicsResultOutput() GetTopicsResultOutput {
	return o
}

func (o GetTopicsResultOutput) ToGetTopicsResultOutputWithContext(ctx context.Context) GetTopicsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTopicsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The id of rocketmq instance.
func (o GetTopicsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The type of the rocketmq message.
func (o GetTopicsResultOutput) MessageType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *int { return v.MessageType }).(pulumi.IntPtrOutput)
}

func (o GetTopicsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetTopicsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o GetTopicsResultOutput) RocketmqTopics() GetTopicsRocketmqTopicArrayOutput {
	return o.ApplyT(func(v GetTopicsResult) []GetTopicsRocketmqTopic { return v.RocketmqTopics }).(GetTopicsRocketmqTopicArrayOutput)
}

// The name of the rocketmq topic.
func (o GetTopicsResultOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetTopicsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTopicsResultOutput{})
}
