// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rocketmq public address
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/eip"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rocketmq"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooRocketMQInstance, err := rocketmq.NewRocketMQInstance(ctx, "fooRocketMQInstance", &rocketmq.RocketMQInstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//				},
//				SubnetId:            fooSubnet.ID(),
//				Version:             pulumi.String("4.8"),
//				ComputeSpec:         pulumi.String("rocketmq.n1.x2.micro"),
//				StorageSpace:        pulumi.Int(300),
//				AutoScaleQueue:      pulumi.Bool(true),
//				FileReservedTime:    pulumi.Int(10),
//				InstanceName:        pulumi.String("acc-test-rocketmq"),
//				InstanceDescription: pulumi.String("acc-test"),
//				ProjectName:         pulumi.String("default"),
//				ChargeInfo: &rocketmq.RocketMQInstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				Tags: rocketmq.RocketMQInstanceTagArray{
//					&rocketmq.RocketMQInstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			fooAddress, err := eip.NewAddress(ctx, "fooAddress", &eip.AddressArgs{
//				BillingType: pulumi.String("PostPaidByBandwidth"),
//				Bandwidth:   pulumi.Int(1),
//				Isp:         pulumi.String("BGP"),
//				Description: pulumi.String("acc-test"),
//				ProjectName: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rocketmq.NewRocketMQPublicAddress(ctx, "fooRocketMQPublicAddress", &rocketmq.RocketMQPublicAddressArgs{
//				InstanceId: fooRocketMQInstance.ID(),
//				EipId:      fooAddress.ID(),
//				SslMode:    pulumi.String("permissive"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RocketmqPublicAddress can be imported using the instance_id:eip_id, e.g.
//
// ```sh
// $ pulumi import volcengine:rocketmq/rocketMQPublicAddress:RocketMQPublicAddress default resource_id
// ```
type RocketMQPublicAddress struct {
	pulumi.CustomResourceState

	// The id of the eip.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// The id of rocketmq instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// The ssl mode of the rocketmq instance. Valid values: `enforcing`, `permissive`. Default is `permissive`.
	SslMode pulumi.StringOutput `pulumi:"sslMode"`
}

// NewRocketMQPublicAddress registers a new resource with the given unique name, arguments, and options.
func NewRocketMQPublicAddress(ctx *pulumi.Context,
	name string, args *RocketMQPublicAddressArgs, opts ...pulumi.ResourceOption) (*RocketMQPublicAddress, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EipId == nil {
		return nil, errors.New("invalid value for required argument 'EipId'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RocketMQPublicAddress
	err := ctx.RegisterResource("volcengine:rocketmq/rocketMQPublicAddress:RocketMQPublicAddress", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketMQPublicAddress gets an existing RocketMQPublicAddress resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketMQPublicAddress(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketMQPublicAddressState, opts ...pulumi.ResourceOption) (*RocketMQPublicAddress, error) {
	var resource RocketMQPublicAddress
	err := ctx.ReadResource("volcengine:rocketmq/rocketMQPublicAddress:RocketMQPublicAddress", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketMQPublicAddress resources.
type rocketMQPublicAddressState struct {
	// The id of the eip.
	EipId *string `pulumi:"eipId"`
	// The id of rocketmq instance.
	InstanceId *string `pulumi:"instanceId"`
	// The ssl mode of the rocketmq instance. Valid values: `enforcing`, `permissive`. Default is `permissive`.
	SslMode *string `pulumi:"sslMode"`
}

type RocketMQPublicAddressState struct {
	// The id of the eip.
	EipId pulumi.StringPtrInput
	// The id of rocketmq instance.
	InstanceId pulumi.StringPtrInput
	// The ssl mode of the rocketmq instance. Valid values: `enforcing`, `permissive`. Default is `permissive`.
	SslMode pulumi.StringPtrInput
}

func (RocketMQPublicAddressState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQPublicAddressState)(nil)).Elem()
}

type rocketMQPublicAddressArgs struct {
	// The id of the eip.
	EipId string `pulumi:"eipId"`
	// The id of rocketmq instance.
	InstanceId string `pulumi:"instanceId"`
	// The ssl mode of the rocketmq instance. Valid values: `enforcing`, `permissive`. Default is `permissive`.
	SslMode *string `pulumi:"sslMode"`
}

// The set of arguments for constructing a RocketMQPublicAddress resource.
type RocketMQPublicAddressArgs struct {
	// The id of the eip.
	EipId pulumi.StringInput
	// The id of rocketmq instance.
	InstanceId pulumi.StringInput
	// The ssl mode of the rocketmq instance. Valid values: `enforcing`, `permissive`. Default is `permissive`.
	SslMode pulumi.StringPtrInput
}

func (RocketMQPublicAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQPublicAddressArgs)(nil)).Elem()
}

type RocketMQPublicAddressInput interface {
	pulumi.Input

	ToRocketMQPublicAddressOutput() RocketMQPublicAddressOutput
	ToRocketMQPublicAddressOutputWithContext(ctx context.Context) RocketMQPublicAddressOutput
}

func (*RocketMQPublicAddress) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQPublicAddress)(nil)).Elem()
}

func (i *RocketMQPublicAddress) ToRocketMQPublicAddressOutput() RocketMQPublicAddressOutput {
	return i.ToRocketMQPublicAddressOutputWithContext(context.Background())
}

func (i *RocketMQPublicAddress) ToRocketMQPublicAddressOutputWithContext(ctx context.Context) RocketMQPublicAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQPublicAddressOutput)
}

// RocketMQPublicAddressArrayInput is an input type that accepts RocketMQPublicAddressArray and RocketMQPublicAddressArrayOutput values.
// You can construct a concrete instance of `RocketMQPublicAddressArrayInput` via:
//
//	RocketMQPublicAddressArray{ RocketMQPublicAddressArgs{...} }
type RocketMQPublicAddressArrayInput interface {
	pulumi.Input

	ToRocketMQPublicAddressArrayOutput() RocketMQPublicAddressArrayOutput
	ToRocketMQPublicAddressArrayOutputWithContext(context.Context) RocketMQPublicAddressArrayOutput
}

type RocketMQPublicAddressArray []RocketMQPublicAddressInput

func (RocketMQPublicAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQPublicAddress)(nil)).Elem()
}

func (i RocketMQPublicAddressArray) ToRocketMQPublicAddressArrayOutput() RocketMQPublicAddressArrayOutput {
	return i.ToRocketMQPublicAddressArrayOutputWithContext(context.Background())
}

func (i RocketMQPublicAddressArray) ToRocketMQPublicAddressArrayOutputWithContext(ctx context.Context) RocketMQPublicAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQPublicAddressArrayOutput)
}

// RocketMQPublicAddressMapInput is an input type that accepts RocketMQPublicAddressMap and RocketMQPublicAddressMapOutput values.
// You can construct a concrete instance of `RocketMQPublicAddressMapInput` via:
//
//	RocketMQPublicAddressMap{ "key": RocketMQPublicAddressArgs{...} }
type RocketMQPublicAddressMapInput interface {
	pulumi.Input

	ToRocketMQPublicAddressMapOutput() RocketMQPublicAddressMapOutput
	ToRocketMQPublicAddressMapOutputWithContext(context.Context) RocketMQPublicAddressMapOutput
}

type RocketMQPublicAddressMap map[string]RocketMQPublicAddressInput

func (RocketMQPublicAddressMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQPublicAddress)(nil)).Elem()
}

func (i RocketMQPublicAddressMap) ToRocketMQPublicAddressMapOutput() RocketMQPublicAddressMapOutput {
	return i.ToRocketMQPublicAddressMapOutputWithContext(context.Background())
}

func (i RocketMQPublicAddressMap) ToRocketMQPublicAddressMapOutputWithContext(ctx context.Context) RocketMQPublicAddressMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQPublicAddressMapOutput)
}

type RocketMQPublicAddressOutput struct{ *pulumi.OutputState }

func (RocketMQPublicAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQPublicAddress)(nil)).Elem()
}

func (o RocketMQPublicAddressOutput) ToRocketMQPublicAddressOutput() RocketMQPublicAddressOutput {
	return o
}

func (o RocketMQPublicAddressOutput) ToRocketMQPublicAddressOutputWithContext(ctx context.Context) RocketMQPublicAddressOutput {
	return o
}

// The id of the eip.
func (o RocketMQPublicAddressOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQPublicAddress) pulumi.StringOutput { return v.EipId }).(pulumi.StringOutput)
}

// The id of rocketmq instance.
func (o RocketMQPublicAddressOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQPublicAddress) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// The ssl mode of the rocketmq instance. Valid values: `enforcing`, `permissive`. Default is `permissive`.
func (o RocketMQPublicAddressOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQPublicAddress) pulumi.StringOutput { return v.SslMode }).(pulumi.StringOutput)
}

type RocketMQPublicAddressArrayOutput struct{ *pulumi.OutputState }

func (RocketMQPublicAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQPublicAddress)(nil)).Elem()
}

func (o RocketMQPublicAddressArrayOutput) ToRocketMQPublicAddressArrayOutput() RocketMQPublicAddressArrayOutput {
	return o
}

func (o RocketMQPublicAddressArrayOutput) ToRocketMQPublicAddressArrayOutputWithContext(ctx context.Context) RocketMQPublicAddressArrayOutput {
	return o
}

func (o RocketMQPublicAddressArrayOutput) Index(i pulumi.IntInput) RocketMQPublicAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketMQPublicAddress {
		return vs[0].([]*RocketMQPublicAddress)[vs[1].(int)]
	}).(RocketMQPublicAddressOutput)
}

type RocketMQPublicAddressMapOutput struct{ *pulumi.OutputState }

func (RocketMQPublicAddressMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQPublicAddress)(nil)).Elem()
}

func (o RocketMQPublicAddressMapOutput) ToRocketMQPublicAddressMapOutput() RocketMQPublicAddressMapOutput {
	return o
}

func (o RocketMQPublicAddressMapOutput) ToRocketMQPublicAddressMapOutputWithContext(ctx context.Context) RocketMQPublicAddressMapOutput {
	return o
}

func (o RocketMQPublicAddressMapOutput) MapIndex(k pulumi.StringInput) RocketMQPublicAddressOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketMQPublicAddress {
		return vs[0].(map[string]*RocketMQPublicAddress)[vs[1].(string)]
	}).(RocketMQPublicAddressOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQPublicAddressInput)(nil)).Elem(), &RocketMQPublicAddress{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQPublicAddressArrayInput)(nil)).Elem(), RocketMQPublicAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQPublicAddressMapInput)(nil)).Elem(), RocketMQPublicAddressMap{})
	pulumi.RegisterOutputType(RocketMQPublicAddressOutput{})
	pulumi.RegisterOutputType(RocketMQPublicAddressArrayOutput{})
	pulumi.RegisterOutputType(RocketMQPublicAddressMapOutput{})
}
