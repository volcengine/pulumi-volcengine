// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rocketmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rocketmq instance
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rocketmq"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rocketmq.NewRocketMQInstance(ctx, "fooRocketMQInstance", &rocketmq.RocketMQInstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//				},
//				SubnetId:            fooSubnet.ID(),
//				Version:             pulumi.String("4.8"),
//				ComputeSpec:         pulumi.String("rocketmq.n1.x2.micro"),
//				StorageSpace:        pulumi.Int(300),
//				AutoScaleQueue:      pulumi.Bool(true),
//				FileReservedTime:    pulumi.Int(10),
//				InstanceName:        pulumi.String("acc-test-rocketmq"),
//				InstanceDescription: pulumi.String("acc-test"),
//				ProjectName:         pulumi.String("default"),
//				ChargeInfo: &rocketmq.RocketMQInstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				Tags: rocketmq.RocketMQInstanceTagArray{
//					&rocketmq.RocketMQInstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RocketmqInstance can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:rocketmq/rocketMQInstance:RocketMQInstance default resource_id
// ```
type RocketMQInstance struct {
	pulumi.CustomResourceState

	// The account id of the rocketmq instance.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Whether the private dns to public function is enabled for the rocketmq instance.
	ApplyPrivateDnsToPublic pulumi.BoolOutput `pulumi:"applyPrivateDnsToPublic"`
	// Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `computeField` and `storageSpace`.
	AutoScaleQueue pulumi.BoolPtrOutput `pulumi:"autoScaleQueue"`
	// The available queue number of the rocketmq instance.
	AvailableQueueNumber pulumi.IntOutput `pulumi:"availableQueueNumber"`
	// The charge information of the rocketmq instance.
	ChargeInfo RocketMQInstanceChargeInfoOutput `pulumi:"chargeInfo"`
	// The compute spec of the rocketmq instance.
	ComputeSpec pulumi.StringOutput `pulumi:"computeSpec"`
	// The connection information of the rocketmq.
	ConnectionInfos RocketMQInstanceConnectionInfoArrayOutput `pulumi:"connectionInfos"`
	// The create time of the rocketmq instance.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The eip id of the rocketmq instance.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// Whether the ssl authentication is enabled for the rocketmq instance.
	EnableSsl pulumi.BoolOutput `pulumi:"enableSsl"`
	// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
	FileReservedTime pulumi.IntOutput `pulumi:"fileReservedTime"`
	// The instance description of the rocketmq instance.
	InstanceDescription pulumi.StringPtrOutput `pulumi:"instanceDescription"`
	// The instance name of the rocketmq instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The status of the rocketmq instance.
	InstanceStatus pulumi.StringOutput `pulumi:"instanceStatus"`
	// The project name of the rocketmq instance.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The region id of the rocketmq instance.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The ssl mode of the rocketmq instance.
	SslMode pulumi.StringOutput `pulumi:"sslMode"`
	// The storage space of the rocketmq instance.
	StorageSpace pulumi.IntOutput `pulumi:"storageSpace"`
	// The subnet id of the rocketmq instance.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Tags.
	Tags RocketMQInstanceTagArrayOutput `pulumi:"tags"`
	// The used group number of the rocketmq instance.
	UsedGroupNumber pulumi.IntOutput `pulumi:"usedGroupNumber"`
	// The used queue number of the rocketmq instance.
	UsedQueueNumber pulumi.IntOutput `pulumi:"usedQueueNumber"`
	// The used storage space of the rocketmq instance.
	UsedStorageSpace pulumi.IntOutput `pulumi:"usedStorageSpace"`
	// The used topic number of the rocketmq instance.
	UsedTopicNumber pulumi.IntOutput `pulumi:"usedTopicNumber"`
	// The version of the rocketmq instance. Valid values: `4.8`.
	Version pulumi.StringOutput `pulumi:"version"`
	// The vpc id of the rocketmq instance.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The zone id of the rocketmq instance. Support specifying multiple availability zones.
	ZoneIds pulumi.StringArrayOutput `pulumi:"zoneIds"`
}

// NewRocketMQInstance registers a new resource with the given unique name, arguments, and options.
func NewRocketMQInstance(ctx *pulumi.Context,
	name string, args *RocketMQInstanceArgs, opts ...pulumi.ResourceOption) (*RocketMQInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChargeInfo == nil {
		return nil, errors.New("invalid value for required argument 'ChargeInfo'")
	}
	if args.ComputeSpec == nil {
		return nil, errors.New("invalid value for required argument 'ComputeSpec'")
	}
	if args.FileReservedTime == nil {
		return nil, errors.New("invalid value for required argument 'FileReservedTime'")
	}
	if args.StorageSpace == nil {
		return nil, errors.New("invalid value for required argument 'StorageSpace'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.ZoneIds == nil {
		return nil, errors.New("invalid value for required argument 'ZoneIds'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RocketMQInstance
	err := ctx.RegisterResource("volcengine:rocketmq/rocketMQInstance:RocketMQInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRocketMQInstance gets an existing RocketMQInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRocketMQInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RocketMQInstanceState, opts ...pulumi.ResourceOption) (*RocketMQInstance, error) {
	var resource RocketMQInstance
	err := ctx.ReadResource("volcengine:rocketmq/rocketMQInstance:RocketMQInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RocketMQInstance resources.
type rocketMQInstanceState struct {
	// The account id of the rocketmq instance.
	AccountId *string `pulumi:"accountId"`
	// Whether the private dns to public function is enabled for the rocketmq instance.
	ApplyPrivateDnsToPublic *bool `pulumi:"applyPrivateDnsToPublic"`
	// Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `computeField` and `storageSpace`.
	AutoScaleQueue *bool `pulumi:"autoScaleQueue"`
	// The available queue number of the rocketmq instance.
	AvailableQueueNumber *int `pulumi:"availableQueueNumber"`
	// The charge information of the rocketmq instance.
	ChargeInfo *RocketMQInstanceChargeInfo `pulumi:"chargeInfo"`
	// The compute spec of the rocketmq instance.
	ComputeSpec *string `pulumi:"computeSpec"`
	// The connection information of the rocketmq.
	ConnectionInfos []RocketMQInstanceConnectionInfo `pulumi:"connectionInfos"`
	// The create time of the rocketmq instance.
	CreateTime *string `pulumi:"createTime"`
	// The eip id of the rocketmq instance.
	EipId *string `pulumi:"eipId"`
	// Whether the ssl authentication is enabled for the rocketmq instance.
	EnableSsl *bool `pulumi:"enableSsl"`
	// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
	FileReservedTime *int `pulumi:"fileReservedTime"`
	// The instance description of the rocketmq instance.
	InstanceDescription *string `pulumi:"instanceDescription"`
	// The instance name of the rocketmq instance.
	InstanceName *string `pulumi:"instanceName"`
	// The status of the rocketmq instance.
	InstanceStatus *string `pulumi:"instanceStatus"`
	// The project name of the rocketmq instance.
	ProjectName *string `pulumi:"projectName"`
	// The region id of the rocketmq instance.
	RegionId *string `pulumi:"regionId"`
	// The ssl mode of the rocketmq instance.
	SslMode *string `pulumi:"sslMode"`
	// The storage space of the rocketmq instance.
	StorageSpace *int `pulumi:"storageSpace"`
	// The subnet id of the rocketmq instance.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []RocketMQInstanceTag `pulumi:"tags"`
	// The used group number of the rocketmq instance.
	UsedGroupNumber *int `pulumi:"usedGroupNumber"`
	// The used queue number of the rocketmq instance.
	UsedQueueNumber *int `pulumi:"usedQueueNumber"`
	// The used storage space of the rocketmq instance.
	UsedStorageSpace *int `pulumi:"usedStorageSpace"`
	// The used topic number of the rocketmq instance.
	UsedTopicNumber *int `pulumi:"usedTopicNumber"`
	// The version of the rocketmq instance. Valid values: `4.8`.
	Version *string `pulumi:"version"`
	// The vpc id of the rocketmq instance.
	VpcId *string `pulumi:"vpcId"`
	// The zone id of the rocketmq instance. Support specifying multiple availability zones.
	ZoneIds []string `pulumi:"zoneIds"`
}

type RocketMQInstanceState struct {
	// The account id of the rocketmq instance.
	AccountId pulumi.StringPtrInput
	// Whether the private dns to public function is enabled for the rocketmq instance.
	ApplyPrivateDnsToPublic pulumi.BoolPtrInput
	// Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `computeField` and `storageSpace`.
	AutoScaleQueue pulumi.BoolPtrInput
	// The available queue number of the rocketmq instance.
	AvailableQueueNumber pulumi.IntPtrInput
	// The charge information of the rocketmq instance.
	ChargeInfo RocketMQInstanceChargeInfoPtrInput
	// The compute spec of the rocketmq instance.
	ComputeSpec pulumi.StringPtrInput
	// The connection information of the rocketmq.
	ConnectionInfos RocketMQInstanceConnectionInfoArrayInput
	// The create time of the rocketmq instance.
	CreateTime pulumi.StringPtrInput
	// The eip id of the rocketmq instance.
	EipId pulumi.StringPtrInput
	// Whether the ssl authentication is enabled for the rocketmq instance.
	EnableSsl pulumi.BoolPtrInput
	// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
	FileReservedTime pulumi.IntPtrInput
	// The instance description of the rocketmq instance.
	InstanceDescription pulumi.StringPtrInput
	// The instance name of the rocketmq instance.
	InstanceName pulumi.StringPtrInput
	// The status of the rocketmq instance.
	InstanceStatus pulumi.StringPtrInput
	// The project name of the rocketmq instance.
	ProjectName pulumi.StringPtrInput
	// The region id of the rocketmq instance.
	RegionId pulumi.StringPtrInput
	// The ssl mode of the rocketmq instance.
	SslMode pulumi.StringPtrInput
	// The storage space of the rocketmq instance.
	StorageSpace pulumi.IntPtrInput
	// The subnet id of the rocketmq instance.
	SubnetId pulumi.StringPtrInput
	// Tags.
	Tags RocketMQInstanceTagArrayInput
	// The used group number of the rocketmq instance.
	UsedGroupNumber pulumi.IntPtrInput
	// The used queue number of the rocketmq instance.
	UsedQueueNumber pulumi.IntPtrInput
	// The used storage space of the rocketmq instance.
	UsedStorageSpace pulumi.IntPtrInput
	// The used topic number of the rocketmq instance.
	UsedTopicNumber pulumi.IntPtrInput
	// The version of the rocketmq instance. Valid values: `4.8`.
	Version pulumi.StringPtrInput
	// The vpc id of the rocketmq instance.
	VpcId pulumi.StringPtrInput
	// The zone id of the rocketmq instance. Support specifying multiple availability zones.
	ZoneIds pulumi.StringArrayInput
}

func (RocketMQInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQInstanceState)(nil)).Elem()
}

type rocketMQInstanceArgs struct {
	// Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `computeField` and `storageSpace`.
	AutoScaleQueue *bool `pulumi:"autoScaleQueue"`
	// The charge information of the rocketmq instance.
	ChargeInfo RocketMQInstanceChargeInfo `pulumi:"chargeInfo"`
	// The compute spec of the rocketmq instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
	FileReservedTime int `pulumi:"fileReservedTime"`
	// The instance description of the rocketmq instance.
	InstanceDescription *string `pulumi:"instanceDescription"`
	// The instance name of the rocketmq instance.
	InstanceName *string `pulumi:"instanceName"`
	// The project name of the rocketmq instance.
	ProjectName *string `pulumi:"projectName"`
	// The storage space of the rocketmq instance.
	StorageSpace int `pulumi:"storageSpace"`
	// The subnet id of the rocketmq instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []RocketMQInstanceTag `pulumi:"tags"`
	// The version of the rocketmq instance. Valid values: `4.8`.
	Version string `pulumi:"version"`
	// The zone id of the rocketmq instance. Support specifying multiple availability zones.
	ZoneIds []string `pulumi:"zoneIds"`
}

// The set of arguments for constructing a RocketMQInstance resource.
type RocketMQInstanceArgs struct {
	// Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `computeField` and `storageSpace`.
	AutoScaleQueue pulumi.BoolPtrInput
	// The charge information of the rocketmq instance.
	ChargeInfo RocketMQInstanceChargeInfoInput
	// The compute spec of the rocketmq instance.
	ComputeSpec pulumi.StringInput
	// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
	FileReservedTime pulumi.IntInput
	// The instance description of the rocketmq instance.
	InstanceDescription pulumi.StringPtrInput
	// The instance name of the rocketmq instance.
	InstanceName pulumi.StringPtrInput
	// The project name of the rocketmq instance.
	ProjectName pulumi.StringPtrInput
	// The storage space of the rocketmq instance.
	StorageSpace pulumi.IntInput
	// The subnet id of the rocketmq instance.
	SubnetId pulumi.StringInput
	// Tags.
	Tags RocketMQInstanceTagArrayInput
	// The version of the rocketmq instance. Valid values: `4.8`.
	Version pulumi.StringInput
	// The zone id of the rocketmq instance. Support specifying multiple availability zones.
	ZoneIds pulumi.StringArrayInput
}

func (RocketMQInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*rocketMQInstanceArgs)(nil)).Elem()
}

type RocketMQInstanceInput interface {
	pulumi.Input

	ToRocketMQInstanceOutput() RocketMQInstanceOutput
	ToRocketMQInstanceOutputWithContext(ctx context.Context) RocketMQInstanceOutput
}

func (*RocketMQInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQInstance)(nil)).Elem()
}

func (i *RocketMQInstance) ToRocketMQInstanceOutput() RocketMQInstanceOutput {
	return i.ToRocketMQInstanceOutputWithContext(context.Background())
}

func (i *RocketMQInstance) ToRocketMQInstanceOutputWithContext(ctx context.Context) RocketMQInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceOutput)
}

// RocketMQInstanceArrayInput is an input type that accepts RocketMQInstanceArray and RocketMQInstanceArrayOutput values.
// You can construct a concrete instance of `RocketMQInstanceArrayInput` via:
//
//	RocketMQInstanceArray{ RocketMQInstanceArgs{...} }
type RocketMQInstanceArrayInput interface {
	pulumi.Input

	ToRocketMQInstanceArrayOutput() RocketMQInstanceArrayOutput
	ToRocketMQInstanceArrayOutputWithContext(context.Context) RocketMQInstanceArrayOutput
}

type RocketMQInstanceArray []RocketMQInstanceInput

func (RocketMQInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQInstance)(nil)).Elem()
}

func (i RocketMQInstanceArray) ToRocketMQInstanceArrayOutput() RocketMQInstanceArrayOutput {
	return i.ToRocketMQInstanceArrayOutputWithContext(context.Background())
}

func (i RocketMQInstanceArray) ToRocketMQInstanceArrayOutputWithContext(ctx context.Context) RocketMQInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceArrayOutput)
}

// RocketMQInstanceMapInput is an input type that accepts RocketMQInstanceMap and RocketMQInstanceMapOutput values.
// You can construct a concrete instance of `RocketMQInstanceMapInput` via:
//
//	RocketMQInstanceMap{ "key": RocketMQInstanceArgs{...} }
type RocketMQInstanceMapInput interface {
	pulumi.Input

	ToRocketMQInstanceMapOutput() RocketMQInstanceMapOutput
	ToRocketMQInstanceMapOutputWithContext(context.Context) RocketMQInstanceMapOutput
}

type RocketMQInstanceMap map[string]RocketMQInstanceInput

func (RocketMQInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQInstance)(nil)).Elem()
}

func (i RocketMQInstanceMap) ToRocketMQInstanceMapOutput() RocketMQInstanceMapOutput {
	return i.ToRocketMQInstanceMapOutputWithContext(context.Background())
}

func (i RocketMQInstanceMap) ToRocketMQInstanceMapOutputWithContext(ctx context.Context) RocketMQInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RocketMQInstanceMapOutput)
}

type RocketMQInstanceOutput struct{ *pulumi.OutputState }

func (RocketMQInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RocketMQInstance)(nil)).Elem()
}

func (o RocketMQInstanceOutput) ToRocketMQInstanceOutput() RocketMQInstanceOutput {
	return o
}

func (o RocketMQInstanceOutput) ToRocketMQInstanceOutputWithContext(ctx context.Context) RocketMQInstanceOutput {
	return o
}

// The account id of the rocketmq instance.
func (o RocketMQInstanceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Whether the private dns to public function is enabled for the rocketmq instance.
func (o RocketMQInstanceOutput) ApplyPrivateDnsToPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.BoolOutput { return v.ApplyPrivateDnsToPublic }).(pulumi.BoolOutput)
}

// Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `computeField` and `storageSpace`.
func (o RocketMQInstanceOutput) AutoScaleQueue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.BoolPtrOutput { return v.AutoScaleQueue }).(pulumi.BoolPtrOutput)
}

// The available queue number of the rocketmq instance.
func (o RocketMQInstanceOutput) AvailableQueueNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.IntOutput { return v.AvailableQueueNumber }).(pulumi.IntOutput)
}

// The charge information of the rocketmq instance.
func (o RocketMQInstanceOutput) ChargeInfo() RocketMQInstanceChargeInfoOutput {
	return o.ApplyT(func(v *RocketMQInstance) RocketMQInstanceChargeInfoOutput { return v.ChargeInfo }).(RocketMQInstanceChargeInfoOutput)
}

// The compute spec of the rocketmq instance.
func (o RocketMQInstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.ComputeSpec }).(pulumi.StringOutput)
}

// The connection information of the rocketmq.
func (o RocketMQInstanceOutput) ConnectionInfos() RocketMQInstanceConnectionInfoArrayOutput {
	return o.ApplyT(func(v *RocketMQInstance) RocketMQInstanceConnectionInfoArrayOutput { return v.ConnectionInfos }).(RocketMQInstanceConnectionInfoArrayOutput)
}

// The create time of the rocketmq instance.
func (o RocketMQInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The eip id of the rocketmq instance.
func (o RocketMQInstanceOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.EipId }).(pulumi.StringOutput)
}

// Whether the ssl authentication is enabled for the rocketmq instance.
func (o RocketMQInstanceOutput) EnableSsl() pulumi.BoolOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.BoolOutput { return v.EnableSsl }).(pulumi.BoolOutput)
}

// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
func (o RocketMQInstanceOutput) FileReservedTime() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.IntOutput { return v.FileReservedTime }).(pulumi.IntOutput)
}

// The instance description of the rocketmq instance.
func (o RocketMQInstanceOutput) InstanceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringPtrOutput { return v.InstanceDescription }).(pulumi.StringPtrOutput)
}

// The instance name of the rocketmq instance.
func (o RocketMQInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of the rocketmq instance.
func (o RocketMQInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The project name of the rocketmq instance.
func (o RocketMQInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The region id of the rocketmq instance.
func (o RocketMQInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The ssl mode of the rocketmq instance.
func (o RocketMQInstanceOutput) SslMode() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.SslMode }).(pulumi.StringOutput)
}

// The storage space of the rocketmq instance.
func (o RocketMQInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.IntOutput { return v.StorageSpace }).(pulumi.IntOutput)
}

// The subnet id of the rocketmq instance.
func (o RocketMQInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o RocketMQInstanceOutput) Tags() RocketMQInstanceTagArrayOutput {
	return o.ApplyT(func(v *RocketMQInstance) RocketMQInstanceTagArrayOutput { return v.Tags }).(RocketMQInstanceTagArrayOutput)
}

// The used group number of the rocketmq instance.
func (o RocketMQInstanceOutput) UsedGroupNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.IntOutput { return v.UsedGroupNumber }).(pulumi.IntOutput)
}

// The used queue number of the rocketmq instance.
func (o RocketMQInstanceOutput) UsedQueueNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.IntOutput { return v.UsedQueueNumber }).(pulumi.IntOutput)
}

// The used storage space of the rocketmq instance.
func (o RocketMQInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.IntOutput { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// The used topic number of the rocketmq instance.
func (o RocketMQInstanceOutput) UsedTopicNumber() pulumi.IntOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.IntOutput { return v.UsedTopicNumber }).(pulumi.IntOutput)
}

// The version of the rocketmq instance. Valid values: `4.8`.
func (o RocketMQInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The vpc id of the rocketmq instance.
func (o RocketMQInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of the rocketmq instance. Support specifying multiple availability zones.
func (o RocketMQInstanceOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RocketMQInstance) pulumi.StringArrayOutput { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

type RocketMQInstanceArrayOutput struct{ *pulumi.OutputState }

func (RocketMQInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RocketMQInstance)(nil)).Elem()
}

func (o RocketMQInstanceArrayOutput) ToRocketMQInstanceArrayOutput() RocketMQInstanceArrayOutput {
	return o
}

func (o RocketMQInstanceArrayOutput) ToRocketMQInstanceArrayOutputWithContext(ctx context.Context) RocketMQInstanceArrayOutput {
	return o
}

func (o RocketMQInstanceArrayOutput) Index(i pulumi.IntInput) RocketMQInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RocketMQInstance {
		return vs[0].([]*RocketMQInstance)[vs[1].(int)]
	}).(RocketMQInstanceOutput)
}

type RocketMQInstanceMapOutput struct{ *pulumi.OutputState }

func (RocketMQInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RocketMQInstance)(nil)).Elem()
}

func (o RocketMQInstanceMapOutput) ToRocketMQInstanceMapOutput() RocketMQInstanceMapOutput {
	return o
}

func (o RocketMQInstanceMapOutput) ToRocketMQInstanceMapOutputWithContext(ctx context.Context) RocketMQInstanceMapOutput {
	return o
}

func (o RocketMQInstanceMapOutput) MapIndex(k pulumi.StringInput) RocketMQInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RocketMQInstance {
		return vs[0].(map[string]*RocketMQInstance)[vs[1].(string)]
	}).(RocketMQInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQInstanceInput)(nil)).Elem(), &RocketMQInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQInstanceArrayInput)(nil)).Elem(), RocketMQInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RocketMQInstanceMapInput)(nil)).Elem(), RocketMQInstanceMap{})
	pulumi.RegisterOutputType(RocketMQInstanceOutput{})
	pulumi.RegisterOutputType(RocketMQInstanceArrayOutput{})
	pulumi.RegisterOutputType(RocketMQInstanceMapOutput{})
}
