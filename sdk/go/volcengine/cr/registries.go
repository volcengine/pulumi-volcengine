// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of cr registries
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cr.Registries(ctx, &cr.RegistriesArgs{
//				Statuses: []cr.RegistriesStatus{
//					{
//						Condition: pulumi.StringRef("Ok"),
//						Phase:     pulumi.StringRef("Running"),
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Registries(ctx *pulumi.Context, args *RegistriesArgs, opts ...pulumi.InvokeOption) (*RegistriesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv RegistriesResult
	err := ctx.Invoke("volcengine:cr/registries:Registries", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Registries.
type RegistriesArgs struct {
	// The list of registry names to query.
	Names []string `pulumi:"names"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The list of registry statuses.
	Statuses []RegistriesStatus `pulumi:"statuses"`
	// The list of registry types to query.
	Types []string `pulumi:"types"`
}

// A collection of values returned by Registries.
type RegistriesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Names      []string `pulumi:"names"`
	OutputFile *string  `pulumi:"outputFile"`
	// The collection of registry query.
	Registries []RegistriesRegistry `pulumi:"registries"`
	Statuses   []RegistriesStatus   `pulumi:"statuses"`
	// The total count of registry query.
	TotalCount int      `pulumi:"totalCount"`
	Types      []string `pulumi:"types"`
}

func RegistriesOutput(ctx *pulumi.Context, args RegistriesOutputArgs, opts ...pulumi.InvokeOption) RegistriesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (RegistriesResult, error) {
			args := v.(RegistriesArgs)
			r, err := Registries(ctx, &args, opts...)
			var s RegistriesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(RegistriesResultOutput)
}

// A collection of arguments for invoking Registries.
type RegistriesOutputArgs struct {
	// The list of registry names to query.
	Names pulumi.StringArrayInput `pulumi:"names"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The list of registry statuses.
	Statuses RegistriesStatusArrayInput `pulumi:"statuses"`
	// The list of registry types to query.
	Types pulumi.StringArrayInput `pulumi:"types"`
}

func (RegistriesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesArgs)(nil)).Elem()
}

// A collection of values returned by Registries.
type RegistriesResultOutput struct{ *pulumi.OutputState }

func (RegistriesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesResult)(nil)).Elem()
}

func (o RegistriesResultOutput) ToRegistriesResultOutput() RegistriesResultOutput {
	return o
}

func (o RegistriesResultOutput) ToRegistriesResultOutputWithContext(ctx context.Context) RegistriesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o RegistriesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o RegistriesResultOutput) Names() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistriesResult) []string { return v.Names }).(pulumi.StringArrayOutput)
}

func (o RegistriesResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistriesResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of registry query.
func (o RegistriesResultOutput) Registries() RegistriesRegistryArrayOutput {
	return o.ApplyT(func(v RegistriesResult) []RegistriesRegistry { return v.Registries }).(RegistriesRegistryArrayOutput)
}

func (o RegistriesResultOutput) Statuses() RegistriesStatusArrayOutput {
	return o.ApplyT(func(v RegistriesResult) []RegistriesStatus { return v.Statuses }).(RegistriesStatusArrayOutput)
}

// The total count of registry query.
func (o RegistriesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v RegistriesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o RegistriesResultOutput) Types() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistriesResult) []string { return v.Types }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(RegistriesResultOutput{})
}
