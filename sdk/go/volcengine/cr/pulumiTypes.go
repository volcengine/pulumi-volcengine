// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type AuthorizationTokensToken struct {
	// The expiration time of the temporary access token.
	ExpireTime string `pulumi:"expireTime"`
	// The Temporary access token.
	Token string `pulumi:"token"`
	// The username for login repository instance.
	Username string `pulumi:"username"`
}

// AuthorizationTokensTokenInput is an input type that accepts AuthorizationTokensTokenArgs and AuthorizationTokensTokenOutput values.
// You can construct a concrete instance of `AuthorizationTokensTokenInput` via:
//
//	AuthorizationTokensTokenArgs{...}
type AuthorizationTokensTokenInput interface {
	pulumi.Input

	ToAuthorizationTokensTokenOutput() AuthorizationTokensTokenOutput
	ToAuthorizationTokensTokenOutputWithContext(context.Context) AuthorizationTokensTokenOutput
}

type AuthorizationTokensTokenArgs struct {
	// The expiration time of the temporary access token.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// The Temporary access token.
	Token pulumi.StringInput `pulumi:"token"`
	// The username for login repository instance.
	Username pulumi.StringInput `pulumi:"username"`
}

func (AuthorizationTokensTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationTokensToken)(nil)).Elem()
}

func (i AuthorizationTokensTokenArgs) ToAuthorizationTokensTokenOutput() AuthorizationTokensTokenOutput {
	return i.ToAuthorizationTokensTokenOutputWithContext(context.Background())
}

func (i AuthorizationTokensTokenArgs) ToAuthorizationTokensTokenOutputWithContext(ctx context.Context) AuthorizationTokensTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationTokensTokenOutput)
}

// AuthorizationTokensTokenArrayInput is an input type that accepts AuthorizationTokensTokenArray and AuthorizationTokensTokenArrayOutput values.
// You can construct a concrete instance of `AuthorizationTokensTokenArrayInput` via:
//
//	AuthorizationTokensTokenArray{ AuthorizationTokensTokenArgs{...} }
type AuthorizationTokensTokenArrayInput interface {
	pulumi.Input

	ToAuthorizationTokensTokenArrayOutput() AuthorizationTokensTokenArrayOutput
	ToAuthorizationTokensTokenArrayOutputWithContext(context.Context) AuthorizationTokensTokenArrayOutput
}

type AuthorizationTokensTokenArray []AuthorizationTokensTokenInput

func (AuthorizationTokensTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationTokensToken)(nil)).Elem()
}

func (i AuthorizationTokensTokenArray) ToAuthorizationTokensTokenArrayOutput() AuthorizationTokensTokenArrayOutput {
	return i.ToAuthorizationTokensTokenArrayOutputWithContext(context.Background())
}

func (i AuthorizationTokensTokenArray) ToAuthorizationTokensTokenArrayOutputWithContext(ctx context.Context) AuthorizationTokensTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationTokensTokenArrayOutput)
}

type AuthorizationTokensTokenOutput struct{ *pulumi.OutputState }

func (AuthorizationTokensTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AuthorizationTokensToken)(nil)).Elem()
}

func (o AuthorizationTokensTokenOutput) ToAuthorizationTokensTokenOutput() AuthorizationTokensTokenOutput {
	return o
}

func (o AuthorizationTokensTokenOutput) ToAuthorizationTokensTokenOutputWithContext(ctx context.Context) AuthorizationTokensTokenOutput {
	return o
}

// The expiration time of the temporary access token.
func (o AuthorizationTokensTokenOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationTokensToken) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The Temporary access token.
func (o AuthorizationTokensTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationTokensToken) string { return v.Token }).(pulumi.StringOutput)
}

// The username for login repository instance.
func (o AuthorizationTokensTokenOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v AuthorizationTokensToken) string { return v.Username }).(pulumi.StringOutput)
}

type AuthorizationTokensTokenArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationTokensTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AuthorizationTokensToken)(nil)).Elem()
}

func (o AuthorizationTokensTokenArrayOutput) ToAuthorizationTokensTokenArrayOutput() AuthorizationTokensTokenArrayOutput {
	return o
}

func (o AuthorizationTokensTokenArrayOutput) ToAuthorizationTokensTokenArrayOutputWithContext(ctx context.Context) AuthorizationTokensTokenArrayOutput {
	return o
}

func (o AuthorizationTokensTokenArrayOutput) Index(i pulumi.IntInput) AuthorizationTokensTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AuthorizationTokensToken {
		return vs[0].([]AuthorizationTokensToken)[vs[1].(int)]
	}).(AuthorizationTokensTokenOutput)
}

type EndpointAclPolicyType struct {
	// The description of the acl policy.
	Description *string `pulumi:"description"`
	// The ip of the acl policy.
	Entry *string `pulumi:"entry"`
}

// EndpointAclPolicyTypeInput is an input type that accepts EndpointAclPolicyTypeArgs and EndpointAclPolicyTypeOutput values.
// You can construct a concrete instance of `EndpointAclPolicyTypeInput` via:
//
//	EndpointAclPolicyTypeArgs{...}
type EndpointAclPolicyTypeInput interface {
	pulumi.Input

	ToEndpointAclPolicyTypeOutput() EndpointAclPolicyTypeOutput
	ToEndpointAclPolicyTypeOutputWithContext(context.Context) EndpointAclPolicyTypeOutput
}

type EndpointAclPolicyTypeArgs struct {
	// The description of the acl policy.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The ip of the acl policy.
	Entry pulumi.StringPtrInput `pulumi:"entry"`
}

func (EndpointAclPolicyTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAclPolicyType)(nil)).Elem()
}

func (i EndpointAclPolicyTypeArgs) ToEndpointAclPolicyTypeOutput() EndpointAclPolicyTypeOutput {
	return i.ToEndpointAclPolicyTypeOutputWithContext(context.Background())
}

func (i EndpointAclPolicyTypeArgs) ToEndpointAclPolicyTypeOutputWithContext(ctx context.Context) EndpointAclPolicyTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAclPolicyTypeOutput)
}

// EndpointAclPolicyTypeArrayInput is an input type that accepts EndpointAclPolicyTypeArray and EndpointAclPolicyTypeArrayOutput values.
// You can construct a concrete instance of `EndpointAclPolicyTypeArrayInput` via:
//
//	EndpointAclPolicyTypeArray{ EndpointAclPolicyTypeArgs{...} }
type EndpointAclPolicyTypeArrayInput interface {
	pulumi.Input

	ToEndpointAclPolicyTypeArrayOutput() EndpointAclPolicyTypeArrayOutput
	ToEndpointAclPolicyTypeArrayOutputWithContext(context.Context) EndpointAclPolicyTypeArrayOutput
}

type EndpointAclPolicyTypeArray []EndpointAclPolicyTypeInput

func (EndpointAclPolicyTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointAclPolicyType)(nil)).Elem()
}

func (i EndpointAclPolicyTypeArray) ToEndpointAclPolicyTypeArrayOutput() EndpointAclPolicyTypeArrayOutput {
	return i.ToEndpointAclPolicyTypeArrayOutputWithContext(context.Background())
}

func (i EndpointAclPolicyTypeArray) ToEndpointAclPolicyTypeArrayOutputWithContext(ctx context.Context) EndpointAclPolicyTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointAclPolicyTypeArrayOutput)
}

type EndpointAclPolicyTypeOutput struct{ *pulumi.OutputState }

func (EndpointAclPolicyTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointAclPolicyType)(nil)).Elem()
}

func (o EndpointAclPolicyTypeOutput) ToEndpointAclPolicyTypeOutput() EndpointAclPolicyTypeOutput {
	return o
}

func (o EndpointAclPolicyTypeOutput) ToEndpointAclPolicyTypeOutputWithContext(ctx context.Context) EndpointAclPolicyTypeOutput {
	return o
}

// The description of the acl policy.
func (o EndpointAclPolicyTypeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAclPolicyType) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The ip of the acl policy.
func (o EndpointAclPolicyTypeOutput) Entry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EndpointAclPolicyType) *string { return v.Entry }).(pulumi.StringPtrOutput)
}

type EndpointAclPolicyTypeArrayOutput struct{ *pulumi.OutputState }

func (EndpointAclPolicyTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointAclPolicyType)(nil)).Elem()
}

func (o EndpointAclPolicyTypeArrayOutput) ToEndpointAclPolicyTypeArrayOutput() EndpointAclPolicyTypeArrayOutput {
	return o
}

func (o EndpointAclPolicyTypeArrayOutput) ToEndpointAclPolicyTypeArrayOutputWithContext(ctx context.Context) EndpointAclPolicyTypeArrayOutput {
	return o
}

func (o EndpointAclPolicyTypeArrayOutput) Index(i pulumi.IntInput) EndpointAclPolicyTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointAclPolicyType {
		return vs[0].([]EndpointAclPolicyType)[vs[1].(int)]
	}).(EndpointAclPolicyTypeOutput)
}

type EndpointsEndpoint struct {
	// The list of acl policies.
	AclPolicies []EndpointsEndpointAclPolicy `pulumi:"aclPolicies"`
	// Whether public endpoint is enabled.
	Enabled bool `pulumi:"enabled"`
	// The CR instance name.
	Registry string `pulumi:"registry"`
	// The status of public endpoint.
	Status string `pulumi:"status"`
}

// EndpointsEndpointInput is an input type that accepts EndpointsEndpointArgs and EndpointsEndpointOutput values.
// You can construct a concrete instance of `EndpointsEndpointInput` via:
//
//	EndpointsEndpointArgs{...}
type EndpointsEndpointInput interface {
	pulumi.Input

	ToEndpointsEndpointOutput() EndpointsEndpointOutput
	ToEndpointsEndpointOutputWithContext(context.Context) EndpointsEndpointOutput
}

type EndpointsEndpointArgs struct {
	// The list of acl policies.
	AclPolicies EndpointsEndpointAclPolicyArrayInput `pulumi:"aclPolicies"`
	// Whether public endpoint is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The CR instance name.
	Registry pulumi.StringInput `pulumi:"registry"`
	// The status of public endpoint.
	Status pulumi.StringInput `pulumi:"status"`
}

func (EndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpoint)(nil)).Elem()
}

func (i EndpointsEndpointArgs) ToEndpointsEndpointOutput() EndpointsEndpointOutput {
	return i.ToEndpointsEndpointOutputWithContext(context.Background())
}

func (i EndpointsEndpointArgs) ToEndpointsEndpointOutputWithContext(ctx context.Context) EndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointOutput)
}

// EndpointsEndpointArrayInput is an input type that accepts EndpointsEndpointArray and EndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `EndpointsEndpointArrayInput` via:
//
//	EndpointsEndpointArray{ EndpointsEndpointArgs{...} }
type EndpointsEndpointArrayInput interface {
	pulumi.Input

	ToEndpointsEndpointArrayOutput() EndpointsEndpointArrayOutput
	ToEndpointsEndpointArrayOutputWithContext(context.Context) EndpointsEndpointArrayOutput
}

type EndpointsEndpointArray []EndpointsEndpointInput

func (EndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpoint)(nil)).Elem()
}

func (i EndpointsEndpointArray) ToEndpointsEndpointArrayOutput() EndpointsEndpointArrayOutput {
	return i.ToEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i EndpointsEndpointArray) ToEndpointsEndpointArrayOutputWithContext(ctx context.Context) EndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointArrayOutput)
}

type EndpointsEndpointOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpoint)(nil)).Elem()
}

func (o EndpointsEndpointOutput) ToEndpointsEndpointOutput() EndpointsEndpointOutput {
	return o
}

func (o EndpointsEndpointOutput) ToEndpointsEndpointOutputWithContext(ctx context.Context) EndpointsEndpointOutput {
	return o
}

// The list of acl policies.
func (o EndpointsEndpointOutput) AclPolicies() EndpointsEndpointAclPolicyArrayOutput {
	return o.ApplyT(func(v EndpointsEndpoint) []EndpointsEndpointAclPolicy { return v.AclPolicies }).(EndpointsEndpointAclPolicyArrayOutput)
}

// Whether public endpoint is enabled.
func (o EndpointsEndpointOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v EndpointsEndpoint) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The CR instance name.
func (o EndpointsEndpointOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.Registry }).(pulumi.StringOutput)
}

// The status of public endpoint.
func (o EndpointsEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpoint) string { return v.Status }).(pulumi.StringOutput)
}

type EndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpoint)(nil)).Elem()
}

func (o EndpointsEndpointArrayOutput) ToEndpointsEndpointArrayOutput() EndpointsEndpointArrayOutput {
	return o
}

func (o EndpointsEndpointArrayOutput) ToEndpointsEndpointArrayOutputWithContext(ctx context.Context) EndpointsEndpointArrayOutput {
	return o
}

func (o EndpointsEndpointArrayOutput) Index(i pulumi.IntInput) EndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointsEndpoint {
		return vs[0].([]EndpointsEndpoint)[vs[1].(int)]
	}).(EndpointsEndpointOutput)
}

type EndpointsEndpointAclPolicy struct {
	// The description of the acl policy.
	Description string `pulumi:"description"`
	// The ip of the acl policy.
	Entry string `pulumi:"entry"`
}

// EndpointsEndpointAclPolicyInput is an input type that accepts EndpointsEndpointAclPolicyArgs and EndpointsEndpointAclPolicyOutput values.
// You can construct a concrete instance of `EndpointsEndpointAclPolicyInput` via:
//
//	EndpointsEndpointAclPolicyArgs{...}
type EndpointsEndpointAclPolicyInput interface {
	pulumi.Input

	ToEndpointsEndpointAclPolicyOutput() EndpointsEndpointAclPolicyOutput
	ToEndpointsEndpointAclPolicyOutputWithContext(context.Context) EndpointsEndpointAclPolicyOutput
}

type EndpointsEndpointAclPolicyArgs struct {
	// The description of the acl policy.
	Description pulumi.StringInput `pulumi:"description"`
	// The ip of the acl policy.
	Entry pulumi.StringInput `pulumi:"entry"`
}

func (EndpointsEndpointAclPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpointAclPolicy)(nil)).Elem()
}

func (i EndpointsEndpointAclPolicyArgs) ToEndpointsEndpointAclPolicyOutput() EndpointsEndpointAclPolicyOutput {
	return i.ToEndpointsEndpointAclPolicyOutputWithContext(context.Background())
}

func (i EndpointsEndpointAclPolicyArgs) ToEndpointsEndpointAclPolicyOutputWithContext(ctx context.Context) EndpointsEndpointAclPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointAclPolicyOutput)
}

// EndpointsEndpointAclPolicyArrayInput is an input type that accepts EndpointsEndpointAclPolicyArray and EndpointsEndpointAclPolicyArrayOutput values.
// You can construct a concrete instance of `EndpointsEndpointAclPolicyArrayInput` via:
//
//	EndpointsEndpointAclPolicyArray{ EndpointsEndpointAclPolicyArgs{...} }
type EndpointsEndpointAclPolicyArrayInput interface {
	pulumi.Input

	ToEndpointsEndpointAclPolicyArrayOutput() EndpointsEndpointAclPolicyArrayOutput
	ToEndpointsEndpointAclPolicyArrayOutputWithContext(context.Context) EndpointsEndpointAclPolicyArrayOutput
}

type EndpointsEndpointAclPolicyArray []EndpointsEndpointAclPolicyInput

func (EndpointsEndpointAclPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpointAclPolicy)(nil)).Elem()
}

func (i EndpointsEndpointAclPolicyArray) ToEndpointsEndpointAclPolicyArrayOutput() EndpointsEndpointAclPolicyArrayOutput {
	return i.ToEndpointsEndpointAclPolicyArrayOutputWithContext(context.Background())
}

func (i EndpointsEndpointAclPolicyArray) ToEndpointsEndpointAclPolicyArrayOutputWithContext(ctx context.Context) EndpointsEndpointAclPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EndpointsEndpointAclPolicyArrayOutput)
}

type EndpointsEndpointAclPolicyOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointAclPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EndpointsEndpointAclPolicy)(nil)).Elem()
}

func (o EndpointsEndpointAclPolicyOutput) ToEndpointsEndpointAclPolicyOutput() EndpointsEndpointAclPolicyOutput {
	return o
}

func (o EndpointsEndpointAclPolicyOutput) ToEndpointsEndpointAclPolicyOutputWithContext(ctx context.Context) EndpointsEndpointAclPolicyOutput {
	return o
}

// The description of the acl policy.
func (o EndpointsEndpointAclPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointAclPolicy) string { return v.Description }).(pulumi.StringOutput)
}

// The ip of the acl policy.
func (o EndpointsEndpointAclPolicyOutput) Entry() pulumi.StringOutput {
	return o.ApplyT(func(v EndpointsEndpointAclPolicy) string { return v.Entry }).(pulumi.StringOutput)
}

type EndpointsEndpointAclPolicyArrayOutput struct{ *pulumi.OutputState }

func (EndpointsEndpointAclPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EndpointsEndpointAclPolicy)(nil)).Elem()
}

func (o EndpointsEndpointAclPolicyArrayOutput) ToEndpointsEndpointAclPolicyArrayOutput() EndpointsEndpointAclPolicyArrayOutput {
	return o
}

func (o EndpointsEndpointAclPolicyArrayOutput) ToEndpointsEndpointAclPolicyArrayOutputWithContext(ctx context.Context) EndpointsEndpointAclPolicyArrayOutput {
	return o
}

func (o EndpointsEndpointAclPolicyArrayOutput) Index(i pulumi.IntInput) EndpointsEndpointAclPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EndpointsEndpointAclPolicy {
		return vs[0].([]EndpointsEndpointAclPolicy)[vs[1].(int)]
	}).(EndpointsEndpointAclPolicyOutput)
}

type NamespacesNamespace struct {
	// The time when namespace created.
	CreateTime string `pulumi:"createTime"`
	// The name of OCI repository.
	Name string `pulumi:"name"`
	// The ProjectName of the CrNamespace.
	Project string `pulumi:"project"`
}

// NamespacesNamespaceInput is an input type that accepts NamespacesNamespaceArgs and NamespacesNamespaceOutput values.
// You can construct a concrete instance of `NamespacesNamespaceInput` via:
//
//	NamespacesNamespaceArgs{...}
type NamespacesNamespaceInput interface {
	pulumi.Input

	ToNamespacesNamespaceOutput() NamespacesNamespaceOutput
	ToNamespacesNamespaceOutputWithContext(context.Context) NamespacesNamespaceOutput
}

type NamespacesNamespaceArgs struct {
	// The time when namespace created.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The name of OCI repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The ProjectName of the CrNamespace.
	Project pulumi.StringInput `pulumi:"project"`
}

func (NamespacesNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespacesNamespace)(nil)).Elem()
}

func (i NamespacesNamespaceArgs) ToNamespacesNamespaceOutput() NamespacesNamespaceOutput {
	return i.ToNamespacesNamespaceOutputWithContext(context.Background())
}

func (i NamespacesNamespaceArgs) ToNamespacesNamespaceOutputWithContext(ctx context.Context) NamespacesNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacesNamespaceOutput)
}

// NamespacesNamespaceArrayInput is an input type that accepts NamespacesNamespaceArray and NamespacesNamespaceArrayOutput values.
// You can construct a concrete instance of `NamespacesNamespaceArrayInput` via:
//
//	NamespacesNamespaceArray{ NamespacesNamespaceArgs{...} }
type NamespacesNamespaceArrayInput interface {
	pulumi.Input

	ToNamespacesNamespaceArrayOutput() NamespacesNamespaceArrayOutput
	ToNamespacesNamespaceArrayOutputWithContext(context.Context) NamespacesNamespaceArrayOutput
}

type NamespacesNamespaceArray []NamespacesNamespaceInput

func (NamespacesNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespacesNamespace)(nil)).Elem()
}

func (i NamespacesNamespaceArray) ToNamespacesNamespaceArrayOutput() NamespacesNamespaceArrayOutput {
	return i.ToNamespacesNamespaceArrayOutputWithContext(context.Background())
}

func (i NamespacesNamespaceArray) ToNamespacesNamespaceArrayOutputWithContext(ctx context.Context) NamespacesNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NamespacesNamespaceArrayOutput)
}

type NamespacesNamespaceOutput struct{ *pulumi.OutputState }

func (NamespacesNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NamespacesNamespace)(nil)).Elem()
}

func (o NamespacesNamespaceOutput) ToNamespacesNamespaceOutput() NamespacesNamespaceOutput {
	return o
}

func (o NamespacesNamespaceOutput) ToNamespacesNamespaceOutputWithContext(ctx context.Context) NamespacesNamespaceOutput {
	return o
}

// The time when namespace created.
func (o NamespacesNamespaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v NamespacesNamespace) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of OCI repository.
func (o NamespacesNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NamespacesNamespace) string { return v.Name }).(pulumi.StringOutput)
}

// The ProjectName of the CrNamespace.
func (o NamespacesNamespaceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v NamespacesNamespace) string { return v.Project }).(pulumi.StringOutput)
}

type NamespacesNamespaceArrayOutput struct{ *pulumi.OutputState }

func (NamespacesNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NamespacesNamespace)(nil)).Elem()
}

func (o NamespacesNamespaceArrayOutput) ToNamespacesNamespaceArrayOutput() NamespacesNamespaceArrayOutput {
	return o
}

func (o NamespacesNamespaceArrayOutput) ToNamespacesNamespaceArrayOutputWithContext(ctx context.Context) NamespacesNamespaceArrayOutput {
	return o
}

func (o NamespacesNamespaceArrayOutput) Index(i pulumi.IntInput) NamespacesNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NamespacesNamespace {
		return vs[0].([]NamespacesNamespace)[vs[1].(int)]
	}).(NamespacesNamespaceOutput)
}

type RegistriesRegistry struct {
	// The charge type of registry.
	ChargeType string `pulumi:"chargeType"`
	// The creation time of registry.
	CreateTime string `pulumi:"createTime"`
	// The domain of registry.
	Domains []RegistriesRegistryDomain `pulumi:"domains"`
	// The name of registry.
	Name string `pulumi:"name"`
	// The ProjectName of the cr registry.
	Project string `pulumi:"project"`
	// The tags of cr registry.
	ResourceTags []RegistriesRegistryResourceTag `pulumi:"resourceTags"`
	// The status of registry.
	Status RegistriesRegistryStatus `pulumi:"status"`
	// The type of registry.
	Type string `pulumi:"type"`
	// The status of user.
	UserStatus string `pulumi:"userStatus"`
	// The username of cr instance.
	Username string `pulumi:"username"`
}

// RegistriesRegistryInput is an input type that accepts RegistriesRegistryArgs and RegistriesRegistryOutput values.
// You can construct a concrete instance of `RegistriesRegistryInput` via:
//
//	RegistriesRegistryArgs{...}
type RegistriesRegistryInput interface {
	pulumi.Input

	ToRegistriesRegistryOutput() RegistriesRegistryOutput
	ToRegistriesRegistryOutputWithContext(context.Context) RegistriesRegistryOutput
}

type RegistriesRegistryArgs struct {
	// The charge type of registry.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The creation time of registry.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The domain of registry.
	Domains RegistriesRegistryDomainArrayInput `pulumi:"domains"`
	// The name of registry.
	Name pulumi.StringInput `pulumi:"name"`
	// The ProjectName of the cr registry.
	Project pulumi.StringInput `pulumi:"project"`
	// The tags of cr registry.
	ResourceTags RegistriesRegistryResourceTagArrayInput `pulumi:"resourceTags"`
	// The status of registry.
	Status RegistriesRegistryStatusInput `pulumi:"status"`
	// The type of registry.
	Type pulumi.StringInput `pulumi:"type"`
	// The status of user.
	UserStatus pulumi.StringInput `pulumi:"userStatus"`
	// The username of cr instance.
	Username pulumi.StringInput `pulumi:"username"`
}

func (RegistriesRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesRegistry)(nil)).Elem()
}

func (i RegistriesRegistryArgs) ToRegistriesRegistryOutput() RegistriesRegistryOutput {
	return i.ToRegistriesRegistryOutputWithContext(context.Background())
}

func (i RegistriesRegistryArgs) ToRegistriesRegistryOutputWithContext(ctx context.Context) RegistriesRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesRegistryOutput)
}

// RegistriesRegistryArrayInput is an input type that accepts RegistriesRegistryArray and RegistriesRegistryArrayOutput values.
// You can construct a concrete instance of `RegistriesRegistryArrayInput` via:
//
//	RegistriesRegistryArray{ RegistriesRegistryArgs{...} }
type RegistriesRegistryArrayInput interface {
	pulumi.Input

	ToRegistriesRegistryArrayOutput() RegistriesRegistryArrayOutput
	ToRegistriesRegistryArrayOutputWithContext(context.Context) RegistriesRegistryArrayOutput
}

type RegistriesRegistryArray []RegistriesRegistryInput

func (RegistriesRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesRegistry)(nil)).Elem()
}

func (i RegistriesRegistryArray) ToRegistriesRegistryArrayOutput() RegistriesRegistryArrayOutput {
	return i.ToRegistriesRegistryArrayOutputWithContext(context.Background())
}

func (i RegistriesRegistryArray) ToRegistriesRegistryArrayOutputWithContext(ctx context.Context) RegistriesRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesRegistryArrayOutput)
}

type RegistriesRegistryOutput struct{ *pulumi.OutputState }

func (RegistriesRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesRegistry)(nil)).Elem()
}

func (o RegistriesRegistryOutput) ToRegistriesRegistryOutput() RegistriesRegistryOutput {
	return o
}

func (o RegistriesRegistryOutput) ToRegistriesRegistryOutputWithContext(ctx context.Context) RegistriesRegistryOutput {
	return o
}

// The charge type of registry.
func (o RegistriesRegistryOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistry) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The creation time of registry.
func (o RegistriesRegistryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistry) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The domain of registry.
func (o RegistriesRegistryOutput) Domains() RegistriesRegistryDomainArrayOutput {
	return o.ApplyT(func(v RegistriesRegistry) []RegistriesRegistryDomain { return v.Domains }).(RegistriesRegistryDomainArrayOutput)
}

// The name of registry.
func (o RegistriesRegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistry) string { return v.Name }).(pulumi.StringOutput)
}

// The ProjectName of the cr registry.
func (o RegistriesRegistryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistry) string { return v.Project }).(pulumi.StringOutput)
}

// The tags of cr registry.
func (o RegistriesRegistryOutput) ResourceTags() RegistriesRegistryResourceTagArrayOutput {
	return o.ApplyT(func(v RegistriesRegistry) []RegistriesRegistryResourceTag { return v.ResourceTags }).(RegistriesRegistryResourceTagArrayOutput)
}

// The status of registry.
func (o RegistriesRegistryOutput) Status() RegistriesRegistryStatusOutput {
	return o.ApplyT(func(v RegistriesRegistry) RegistriesRegistryStatus { return v.Status }).(RegistriesRegistryStatusOutput)
}

// The type of registry.
func (o RegistriesRegistryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistry) string { return v.Type }).(pulumi.StringOutput)
}

// The status of user.
func (o RegistriesRegistryOutput) UserStatus() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistry) string { return v.UserStatus }).(pulumi.StringOutput)
}

// The username of cr instance.
func (o RegistriesRegistryOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistry) string { return v.Username }).(pulumi.StringOutput)
}

type RegistriesRegistryArrayOutput struct{ *pulumi.OutputState }

func (RegistriesRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesRegistry)(nil)).Elem()
}

func (o RegistriesRegistryArrayOutput) ToRegistriesRegistryArrayOutput() RegistriesRegistryArrayOutput {
	return o
}

func (o RegistriesRegistryArrayOutput) ToRegistriesRegistryArrayOutputWithContext(ctx context.Context) RegistriesRegistryArrayOutput {
	return o
}

func (o RegistriesRegistryArrayOutput) Index(i pulumi.IntInput) RegistriesRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistriesRegistry {
		return vs[0].([]RegistriesRegistry)[vs[1].(int)]
	}).(RegistriesRegistryOutput)
}

type RegistriesRegistryDomain struct {
	// The domain of registry.
	Domain string `pulumi:"domain"`
	// The type of registry.
	Type string `pulumi:"type"`
}

// RegistriesRegistryDomainInput is an input type that accepts RegistriesRegistryDomainArgs and RegistriesRegistryDomainOutput values.
// You can construct a concrete instance of `RegistriesRegistryDomainInput` via:
//
//	RegistriesRegistryDomainArgs{...}
type RegistriesRegistryDomainInput interface {
	pulumi.Input

	ToRegistriesRegistryDomainOutput() RegistriesRegistryDomainOutput
	ToRegistriesRegistryDomainOutputWithContext(context.Context) RegistriesRegistryDomainOutput
}

type RegistriesRegistryDomainArgs struct {
	// The domain of registry.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The type of registry.
	Type pulumi.StringInput `pulumi:"type"`
}

func (RegistriesRegistryDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesRegistryDomain)(nil)).Elem()
}

func (i RegistriesRegistryDomainArgs) ToRegistriesRegistryDomainOutput() RegistriesRegistryDomainOutput {
	return i.ToRegistriesRegistryDomainOutputWithContext(context.Background())
}

func (i RegistriesRegistryDomainArgs) ToRegistriesRegistryDomainOutputWithContext(ctx context.Context) RegistriesRegistryDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesRegistryDomainOutput)
}

// RegistriesRegistryDomainArrayInput is an input type that accepts RegistriesRegistryDomainArray and RegistriesRegistryDomainArrayOutput values.
// You can construct a concrete instance of `RegistriesRegistryDomainArrayInput` via:
//
//	RegistriesRegistryDomainArray{ RegistriesRegistryDomainArgs{...} }
type RegistriesRegistryDomainArrayInput interface {
	pulumi.Input

	ToRegistriesRegistryDomainArrayOutput() RegistriesRegistryDomainArrayOutput
	ToRegistriesRegistryDomainArrayOutputWithContext(context.Context) RegistriesRegistryDomainArrayOutput
}

type RegistriesRegistryDomainArray []RegistriesRegistryDomainInput

func (RegistriesRegistryDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesRegistryDomain)(nil)).Elem()
}

func (i RegistriesRegistryDomainArray) ToRegistriesRegistryDomainArrayOutput() RegistriesRegistryDomainArrayOutput {
	return i.ToRegistriesRegistryDomainArrayOutputWithContext(context.Background())
}

func (i RegistriesRegistryDomainArray) ToRegistriesRegistryDomainArrayOutputWithContext(ctx context.Context) RegistriesRegistryDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesRegistryDomainArrayOutput)
}

type RegistriesRegistryDomainOutput struct{ *pulumi.OutputState }

func (RegistriesRegistryDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesRegistryDomain)(nil)).Elem()
}

func (o RegistriesRegistryDomainOutput) ToRegistriesRegistryDomainOutput() RegistriesRegistryDomainOutput {
	return o
}

func (o RegistriesRegistryDomainOutput) ToRegistriesRegistryDomainOutputWithContext(ctx context.Context) RegistriesRegistryDomainOutput {
	return o
}

// The domain of registry.
func (o RegistriesRegistryDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistryDomain) string { return v.Domain }).(pulumi.StringOutput)
}

// The type of registry.
func (o RegistriesRegistryDomainOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistryDomain) string { return v.Type }).(pulumi.StringOutput)
}

type RegistriesRegistryDomainArrayOutput struct{ *pulumi.OutputState }

func (RegistriesRegistryDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesRegistryDomain)(nil)).Elem()
}

func (o RegistriesRegistryDomainArrayOutput) ToRegistriesRegistryDomainArrayOutput() RegistriesRegistryDomainArrayOutput {
	return o
}

func (o RegistriesRegistryDomainArrayOutput) ToRegistriesRegistryDomainArrayOutputWithContext(ctx context.Context) RegistriesRegistryDomainArrayOutput {
	return o
}

func (o RegistriesRegistryDomainArrayOutput) Index(i pulumi.IntInput) RegistriesRegistryDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistriesRegistryDomain {
		return vs[0].([]RegistriesRegistryDomain)[vs[1].(int)]
	}).(RegistriesRegistryDomainOutput)
}

type RegistriesRegistryResourceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// RegistriesRegistryResourceTagInput is an input type that accepts RegistriesRegistryResourceTagArgs and RegistriesRegistryResourceTagOutput values.
// You can construct a concrete instance of `RegistriesRegistryResourceTagInput` via:
//
//	RegistriesRegistryResourceTagArgs{...}
type RegistriesRegistryResourceTagInput interface {
	pulumi.Input

	ToRegistriesRegistryResourceTagOutput() RegistriesRegistryResourceTagOutput
	ToRegistriesRegistryResourceTagOutputWithContext(context.Context) RegistriesRegistryResourceTagOutput
}

type RegistriesRegistryResourceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (RegistriesRegistryResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesRegistryResourceTag)(nil)).Elem()
}

func (i RegistriesRegistryResourceTagArgs) ToRegistriesRegistryResourceTagOutput() RegistriesRegistryResourceTagOutput {
	return i.ToRegistriesRegistryResourceTagOutputWithContext(context.Background())
}

func (i RegistriesRegistryResourceTagArgs) ToRegistriesRegistryResourceTagOutputWithContext(ctx context.Context) RegistriesRegistryResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesRegistryResourceTagOutput)
}

// RegistriesRegistryResourceTagArrayInput is an input type that accepts RegistriesRegistryResourceTagArray and RegistriesRegistryResourceTagArrayOutput values.
// You can construct a concrete instance of `RegistriesRegistryResourceTagArrayInput` via:
//
//	RegistriesRegistryResourceTagArray{ RegistriesRegistryResourceTagArgs{...} }
type RegistriesRegistryResourceTagArrayInput interface {
	pulumi.Input

	ToRegistriesRegistryResourceTagArrayOutput() RegistriesRegistryResourceTagArrayOutput
	ToRegistriesRegistryResourceTagArrayOutputWithContext(context.Context) RegistriesRegistryResourceTagArrayOutput
}

type RegistriesRegistryResourceTagArray []RegistriesRegistryResourceTagInput

func (RegistriesRegistryResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesRegistryResourceTag)(nil)).Elem()
}

func (i RegistriesRegistryResourceTagArray) ToRegistriesRegistryResourceTagArrayOutput() RegistriesRegistryResourceTagArrayOutput {
	return i.ToRegistriesRegistryResourceTagArrayOutputWithContext(context.Background())
}

func (i RegistriesRegistryResourceTagArray) ToRegistriesRegistryResourceTagArrayOutputWithContext(ctx context.Context) RegistriesRegistryResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesRegistryResourceTagArrayOutput)
}

type RegistriesRegistryResourceTagOutput struct{ *pulumi.OutputState }

func (RegistriesRegistryResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesRegistryResourceTag)(nil)).Elem()
}

func (o RegistriesRegistryResourceTagOutput) ToRegistriesRegistryResourceTagOutput() RegistriesRegistryResourceTagOutput {
	return o
}

func (o RegistriesRegistryResourceTagOutput) ToRegistriesRegistryResourceTagOutputWithContext(ctx context.Context) RegistriesRegistryResourceTagOutput {
	return o
}

// The Key of Tags.
func (o RegistriesRegistryResourceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistryResourceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o RegistriesRegistryResourceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistryResourceTag) string { return v.Value }).(pulumi.StringOutput)
}

type RegistriesRegistryResourceTagArrayOutput struct{ *pulumi.OutputState }

func (RegistriesRegistryResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesRegistryResourceTag)(nil)).Elem()
}

func (o RegistriesRegistryResourceTagArrayOutput) ToRegistriesRegistryResourceTagArrayOutput() RegistriesRegistryResourceTagArrayOutput {
	return o
}

func (o RegistriesRegistryResourceTagArrayOutput) ToRegistriesRegistryResourceTagArrayOutputWithContext(ctx context.Context) RegistriesRegistryResourceTagArrayOutput {
	return o
}

func (o RegistriesRegistryResourceTagArrayOutput) Index(i pulumi.IntInput) RegistriesRegistryResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistriesRegistryResourceTag {
		return vs[0].([]RegistriesRegistryResourceTag)[vs[1].(int)]
	}).(RegistriesRegistryResourceTagOutput)
}

type RegistriesRegistryStatus struct {
	// The condition of registry.
	Conditions []string `pulumi:"conditions"`
	// The phase status of registry.
	Phase string `pulumi:"phase"`
}

// RegistriesRegistryStatusInput is an input type that accepts RegistriesRegistryStatusArgs and RegistriesRegistryStatusOutput values.
// You can construct a concrete instance of `RegistriesRegistryStatusInput` via:
//
//	RegistriesRegistryStatusArgs{...}
type RegistriesRegistryStatusInput interface {
	pulumi.Input

	ToRegistriesRegistryStatusOutput() RegistriesRegistryStatusOutput
	ToRegistriesRegistryStatusOutputWithContext(context.Context) RegistriesRegistryStatusOutput
}

type RegistriesRegistryStatusArgs struct {
	// The condition of registry.
	Conditions pulumi.StringArrayInput `pulumi:"conditions"`
	// The phase status of registry.
	Phase pulumi.StringInput `pulumi:"phase"`
}

func (RegistriesRegistryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesRegistryStatus)(nil)).Elem()
}

func (i RegistriesRegistryStatusArgs) ToRegistriesRegistryStatusOutput() RegistriesRegistryStatusOutput {
	return i.ToRegistriesRegistryStatusOutputWithContext(context.Background())
}

func (i RegistriesRegistryStatusArgs) ToRegistriesRegistryStatusOutputWithContext(ctx context.Context) RegistriesRegistryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesRegistryStatusOutput)
}

type RegistriesRegistryStatusOutput struct{ *pulumi.OutputState }

func (RegistriesRegistryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesRegistryStatus)(nil)).Elem()
}

func (o RegistriesRegistryStatusOutput) ToRegistriesRegistryStatusOutput() RegistriesRegistryStatusOutput {
	return o
}

func (o RegistriesRegistryStatusOutput) ToRegistriesRegistryStatusOutputWithContext(ctx context.Context) RegistriesRegistryStatusOutput {
	return o
}

// The condition of registry.
func (o RegistriesRegistryStatusOutput) Conditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistriesRegistryStatus) []string { return v.Conditions }).(pulumi.StringArrayOutput)
}

// The phase status of registry.
func (o RegistriesRegistryStatusOutput) Phase() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesRegistryStatus) string { return v.Phase }).(pulumi.StringOutput)
}

type RegistriesResourceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Values []string `pulumi:"values"`
}

// RegistriesResourceTagInput is an input type that accepts RegistriesResourceTagArgs and RegistriesResourceTagOutput values.
// You can construct a concrete instance of `RegistriesResourceTagInput` via:
//
//	RegistriesResourceTagArgs{...}
type RegistriesResourceTagInput interface {
	pulumi.Input

	ToRegistriesResourceTagOutput() RegistriesResourceTagOutput
	ToRegistriesResourceTagOutputWithContext(context.Context) RegistriesResourceTagOutput
}

type RegistriesResourceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RegistriesResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesResourceTag)(nil)).Elem()
}

func (i RegistriesResourceTagArgs) ToRegistriesResourceTagOutput() RegistriesResourceTagOutput {
	return i.ToRegistriesResourceTagOutputWithContext(context.Background())
}

func (i RegistriesResourceTagArgs) ToRegistriesResourceTagOutputWithContext(ctx context.Context) RegistriesResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesResourceTagOutput)
}

// RegistriesResourceTagArrayInput is an input type that accepts RegistriesResourceTagArray and RegistriesResourceTagArrayOutput values.
// You can construct a concrete instance of `RegistriesResourceTagArrayInput` via:
//
//	RegistriesResourceTagArray{ RegistriesResourceTagArgs{...} }
type RegistriesResourceTagArrayInput interface {
	pulumi.Input

	ToRegistriesResourceTagArrayOutput() RegistriesResourceTagArrayOutput
	ToRegistriesResourceTagArrayOutputWithContext(context.Context) RegistriesResourceTagArrayOutput
}

type RegistriesResourceTagArray []RegistriesResourceTagInput

func (RegistriesResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesResourceTag)(nil)).Elem()
}

func (i RegistriesResourceTagArray) ToRegistriesResourceTagArrayOutput() RegistriesResourceTagArrayOutput {
	return i.ToRegistriesResourceTagArrayOutputWithContext(context.Background())
}

func (i RegistriesResourceTagArray) ToRegistriesResourceTagArrayOutputWithContext(ctx context.Context) RegistriesResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesResourceTagArrayOutput)
}

type RegistriesResourceTagOutput struct{ *pulumi.OutputState }

func (RegistriesResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesResourceTag)(nil)).Elem()
}

func (o RegistriesResourceTagOutput) ToRegistriesResourceTagOutput() RegistriesResourceTagOutput {
	return o
}

func (o RegistriesResourceTagOutput) ToRegistriesResourceTagOutputWithContext(ctx context.Context) RegistriesResourceTagOutput {
	return o
}

// The Key of Tags.
func (o RegistriesResourceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RegistriesResourceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o RegistriesResourceTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistriesResourceTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type RegistriesResourceTagArrayOutput struct{ *pulumi.OutputState }

func (RegistriesResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesResourceTag)(nil)).Elem()
}

func (o RegistriesResourceTagArrayOutput) ToRegistriesResourceTagArrayOutput() RegistriesResourceTagArrayOutput {
	return o
}

func (o RegistriesResourceTagArrayOutput) ToRegistriesResourceTagArrayOutputWithContext(ctx context.Context) RegistriesResourceTagArrayOutput {
	return o
}

func (o RegistriesResourceTagArrayOutput) Index(i pulumi.IntInput) RegistriesResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistriesResourceTag {
		return vs[0].([]RegistriesResourceTag)[vs[1].(int)]
	}).(RegistriesResourceTagOutput)
}

type RegistriesStatus struct {
	// The condition of registry.
	Condition *string `pulumi:"condition"`
	// The phase of status.
	Phase *string `pulumi:"phase"`
}

// RegistriesStatusInput is an input type that accepts RegistriesStatusArgs and RegistriesStatusOutput values.
// You can construct a concrete instance of `RegistriesStatusInput` via:
//
//	RegistriesStatusArgs{...}
type RegistriesStatusInput interface {
	pulumi.Input

	ToRegistriesStatusOutput() RegistriesStatusOutput
	ToRegistriesStatusOutputWithContext(context.Context) RegistriesStatusOutput
}

type RegistriesStatusArgs struct {
	// The condition of registry.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The phase of status.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (RegistriesStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesStatus)(nil)).Elem()
}

func (i RegistriesStatusArgs) ToRegistriesStatusOutput() RegistriesStatusOutput {
	return i.ToRegistriesStatusOutputWithContext(context.Background())
}

func (i RegistriesStatusArgs) ToRegistriesStatusOutputWithContext(ctx context.Context) RegistriesStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesStatusOutput)
}

// RegistriesStatusArrayInput is an input type that accepts RegistriesStatusArray and RegistriesStatusArrayOutput values.
// You can construct a concrete instance of `RegistriesStatusArrayInput` via:
//
//	RegistriesStatusArray{ RegistriesStatusArgs{...} }
type RegistriesStatusArrayInput interface {
	pulumi.Input

	ToRegistriesStatusArrayOutput() RegistriesStatusArrayOutput
	ToRegistriesStatusArrayOutputWithContext(context.Context) RegistriesStatusArrayOutput
}

type RegistriesStatusArray []RegistriesStatusInput

func (RegistriesStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesStatus)(nil)).Elem()
}

func (i RegistriesStatusArray) ToRegistriesStatusArrayOutput() RegistriesStatusArrayOutput {
	return i.ToRegistriesStatusArrayOutputWithContext(context.Background())
}

func (i RegistriesStatusArray) ToRegistriesStatusArrayOutputWithContext(ctx context.Context) RegistriesStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistriesStatusArrayOutput)
}

type RegistriesStatusOutput struct{ *pulumi.OutputState }

func (RegistriesStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistriesStatus)(nil)).Elem()
}

func (o RegistriesStatusOutput) ToRegistriesStatusOutput() RegistriesStatusOutput {
	return o
}

func (o RegistriesStatusOutput) ToRegistriesStatusOutputWithContext(ctx context.Context) RegistriesStatusOutput {
	return o
}

// The condition of registry.
func (o RegistriesStatusOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistriesStatus) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The phase of status.
func (o RegistriesStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistriesStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type RegistriesStatusArrayOutput struct{ *pulumi.OutputState }

func (RegistriesStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistriesStatus)(nil)).Elem()
}

func (o RegistriesStatusArrayOutput) ToRegistriesStatusArrayOutput() RegistriesStatusArrayOutput {
	return o
}

func (o RegistriesStatusArrayOutput) ToRegistriesStatusArrayOutputWithContext(ctx context.Context) RegistriesStatusArrayOutput {
	return o
}

func (o RegistriesStatusArrayOutput) Index(i pulumi.IntInput) RegistriesStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistriesStatus {
		return vs[0].([]RegistriesStatus)[vs[1].(int)]
	}).(RegistriesStatusOutput)
}

type RegistryDomain struct {
	// The domain of registry.
	Domain *string `pulumi:"domain"`
	// The type of registry.
	Type *string `pulumi:"type"`
}

// RegistryDomainInput is an input type that accepts RegistryDomainArgs and RegistryDomainOutput values.
// You can construct a concrete instance of `RegistryDomainInput` via:
//
//	RegistryDomainArgs{...}
type RegistryDomainInput interface {
	pulumi.Input

	ToRegistryDomainOutput() RegistryDomainOutput
	ToRegistryDomainOutputWithContext(context.Context) RegistryDomainOutput
}

type RegistryDomainArgs struct {
	// The domain of registry.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	// The type of registry.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (RegistryDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryDomain)(nil)).Elem()
}

func (i RegistryDomainArgs) ToRegistryDomainOutput() RegistryDomainOutput {
	return i.ToRegistryDomainOutputWithContext(context.Background())
}

func (i RegistryDomainArgs) ToRegistryDomainOutputWithContext(ctx context.Context) RegistryDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryDomainOutput)
}

// RegistryDomainArrayInput is an input type that accepts RegistryDomainArray and RegistryDomainArrayOutput values.
// You can construct a concrete instance of `RegistryDomainArrayInput` via:
//
//	RegistryDomainArray{ RegistryDomainArgs{...} }
type RegistryDomainArrayInput interface {
	pulumi.Input

	ToRegistryDomainArrayOutput() RegistryDomainArrayOutput
	ToRegistryDomainArrayOutputWithContext(context.Context) RegistryDomainArrayOutput
}

type RegistryDomainArray []RegistryDomainInput

func (RegistryDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryDomain)(nil)).Elem()
}

func (i RegistryDomainArray) ToRegistryDomainArrayOutput() RegistryDomainArrayOutput {
	return i.ToRegistryDomainArrayOutputWithContext(context.Background())
}

func (i RegistryDomainArray) ToRegistryDomainArrayOutputWithContext(ctx context.Context) RegistryDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryDomainArrayOutput)
}

type RegistryDomainOutput struct{ *pulumi.OutputState }

func (RegistryDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryDomain)(nil)).Elem()
}

func (o RegistryDomainOutput) ToRegistryDomainOutput() RegistryDomainOutput {
	return o
}

func (o RegistryDomainOutput) ToRegistryDomainOutputWithContext(ctx context.Context) RegistryDomainOutput {
	return o
}

// The domain of registry.
func (o RegistryDomainOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryDomain) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

// The type of registry.
func (o RegistryDomainOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryDomain) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type RegistryDomainArrayOutput struct{ *pulumi.OutputState }

func (RegistryDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryDomain)(nil)).Elem()
}

func (o RegistryDomainArrayOutput) ToRegistryDomainArrayOutput() RegistryDomainArrayOutput {
	return o
}

func (o RegistryDomainArrayOutput) ToRegistryDomainArrayOutputWithContext(ctx context.Context) RegistryDomainArrayOutput {
	return o
}

func (o RegistryDomainArrayOutput) Index(i pulumi.IntInput) RegistryDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryDomain {
		return vs[0].([]RegistryDomain)[vs[1].(int)]
	}).(RegistryDomainOutput)
}

type RegistryResourceTag struct {
	// The Key of Tags.
	Key *string `pulumi:"key"`
	// The Value of Tags.
	Value *string `pulumi:"value"`
}

// RegistryResourceTagInput is an input type that accepts RegistryResourceTagArgs and RegistryResourceTagOutput values.
// You can construct a concrete instance of `RegistryResourceTagInput` via:
//
//	RegistryResourceTagArgs{...}
type RegistryResourceTagInput interface {
	pulumi.Input

	ToRegistryResourceTagOutput() RegistryResourceTagOutput
	ToRegistryResourceTagOutputWithContext(context.Context) RegistryResourceTagOutput
}

type RegistryResourceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (RegistryResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryResourceTag)(nil)).Elem()
}

func (i RegistryResourceTagArgs) ToRegistryResourceTagOutput() RegistryResourceTagOutput {
	return i.ToRegistryResourceTagOutputWithContext(context.Background())
}

func (i RegistryResourceTagArgs) ToRegistryResourceTagOutputWithContext(ctx context.Context) RegistryResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryResourceTagOutput)
}

// RegistryResourceTagArrayInput is an input type that accepts RegistryResourceTagArray and RegistryResourceTagArrayOutput values.
// You can construct a concrete instance of `RegistryResourceTagArrayInput` via:
//
//	RegistryResourceTagArray{ RegistryResourceTagArgs{...} }
type RegistryResourceTagArrayInput interface {
	pulumi.Input

	ToRegistryResourceTagArrayOutput() RegistryResourceTagArrayOutput
	ToRegistryResourceTagArrayOutputWithContext(context.Context) RegistryResourceTagArrayOutput
}

type RegistryResourceTagArray []RegistryResourceTagInput

func (RegistryResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryResourceTag)(nil)).Elem()
}

func (i RegistryResourceTagArray) ToRegistryResourceTagArrayOutput() RegistryResourceTagArrayOutput {
	return i.ToRegistryResourceTagArrayOutputWithContext(context.Background())
}

func (i RegistryResourceTagArray) ToRegistryResourceTagArrayOutputWithContext(ctx context.Context) RegistryResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryResourceTagArrayOutput)
}

type RegistryResourceTagOutput struct{ *pulumi.OutputState }

func (RegistryResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryResourceTag)(nil)).Elem()
}

func (o RegistryResourceTagOutput) ToRegistryResourceTagOutput() RegistryResourceTagOutput {
	return o
}

func (o RegistryResourceTagOutput) ToRegistryResourceTagOutputWithContext(ctx context.Context) RegistryResourceTagOutput {
	return o
}

// The Key of Tags.
func (o RegistryResourceTagOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResourceTag) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// The Value of Tags.
func (o RegistryResourceTagOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryResourceTag) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type RegistryResourceTagArrayOutput struct{ *pulumi.OutputState }

func (RegistryResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryResourceTag)(nil)).Elem()
}

func (o RegistryResourceTagArrayOutput) ToRegistryResourceTagArrayOutput() RegistryResourceTagArrayOutput {
	return o
}

func (o RegistryResourceTagArrayOutput) ToRegistryResourceTagArrayOutputWithContext(ctx context.Context) RegistryResourceTagArrayOutput {
	return o
}

func (o RegistryResourceTagArrayOutput) Index(i pulumi.IntInput) RegistryResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryResourceTag {
		return vs[0].([]RegistryResourceTag)[vs[1].(int)]
	}).(RegistryResourceTagOutput)
}

type RegistryStatus struct {
	// The condition of registry.
	Conditions []string `pulumi:"conditions"`
	// The phase status of registry.
	Phase *string `pulumi:"phase"`
}

// RegistryStatusInput is an input type that accepts RegistryStatusArgs and RegistryStatusOutput values.
// You can construct a concrete instance of `RegistryStatusInput` via:
//
//	RegistryStatusArgs{...}
type RegistryStatusInput interface {
	pulumi.Input

	ToRegistryStatusOutput() RegistryStatusOutput
	ToRegistryStatusOutputWithContext(context.Context) RegistryStatusOutput
}

type RegistryStatusArgs struct {
	// The condition of registry.
	Conditions pulumi.StringArrayInput `pulumi:"conditions"`
	// The phase status of registry.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (RegistryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStatus)(nil)).Elem()
}

func (i RegistryStatusArgs) ToRegistryStatusOutput() RegistryStatusOutput {
	return i.ToRegistryStatusOutputWithContext(context.Background())
}

func (i RegistryStatusArgs) ToRegistryStatusOutputWithContext(ctx context.Context) RegistryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStatusOutput)
}

// RegistryStatusArrayInput is an input type that accepts RegistryStatusArray and RegistryStatusArrayOutput values.
// You can construct a concrete instance of `RegistryStatusArrayInput` via:
//
//	RegistryStatusArray{ RegistryStatusArgs{...} }
type RegistryStatusArrayInput interface {
	pulumi.Input

	ToRegistryStatusArrayOutput() RegistryStatusArrayOutput
	ToRegistryStatusArrayOutputWithContext(context.Context) RegistryStatusArrayOutput
}

type RegistryStatusArray []RegistryStatusInput

func (RegistryStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryStatus)(nil)).Elem()
}

func (i RegistryStatusArray) ToRegistryStatusArrayOutput() RegistryStatusArrayOutput {
	return i.ToRegistryStatusArrayOutputWithContext(context.Background())
}

func (i RegistryStatusArray) ToRegistryStatusArrayOutputWithContext(ctx context.Context) RegistryStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegistryStatusArrayOutput)
}

type RegistryStatusOutput struct{ *pulumi.OutputState }

func (RegistryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegistryStatus)(nil)).Elem()
}

func (o RegistryStatusOutput) ToRegistryStatusOutput() RegistryStatusOutput {
	return o
}

func (o RegistryStatusOutput) ToRegistryStatusOutputWithContext(ctx context.Context) RegistryStatusOutput {
	return o
}

// The condition of registry.
func (o RegistryStatusOutput) Conditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RegistryStatus) []string { return v.Conditions }).(pulumi.StringArrayOutput)
}

// The phase status of registry.
func (o RegistryStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RegistryStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type RegistryStatusArrayOutput struct{ *pulumi.OutputState }

func (RegistryStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegistryStatus)(nil)).Elem()
}

func (o RegistryStatusArrayOutput) ToRegistryStatusArrayOutput() RegistryStatusArrayOutput {
	return o
}

func (o RegistryStatusArrayOutput) ToRegistryStatusArrayOutputWithContext(ctx context.Context) RegistryStatusArrayOutput {
	return o
}

func (o RegistryStatusArrayOutput) Index(i pulumi.IntInput) RegistryStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegistryStatus {
		return vs[0].([]RegistryStatus)[vs[1].(int)]
	}).(RegistryStatusOutput)
}

type RepositoriesRepository struct {
	// The access level of repository.
	AccessLevel string `pulumi:"accessLevel"`
	// The creation time of repository.
	CreateTime string `pulumi:"createTime"`
	// The description of repository.
	Description string `pulumi:"description"`
	// The name of repository.
	Name string `pulumi:"name"`
	// The namespace of repository.
	Namespace string `pulumi:"namespace"`
	// The last update time of repository.
	UpdateTime string `pulumi:"updateTime"`
}

// RepositoriesRepositoryInput is an input type that accepts RepositoriesRepositoryArgs and RepositoriesRepositoryOutput values.
// You can construct a concrete instance of `RepositoriesRepositoryInput` via:
//
//	RepositoriesRepositoryArgs{...}
type RepositoriesRepositoryInput interface {
	pulumi.Input

	ToRepositoriesRepositoryOutput() RepositoriesRepositoryOutput
	ToRepositoriesRepositoryOutputWithContext(context.Context) RepositoriesRepositoryOutput
}

type RepositoriesRepositoryArgs struct {
	// The access level of repository.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// The creation time of repository.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of repository.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace of repository.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// The last update time of repository.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (RepositoriesRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoriesRepository)(nil)).Elem()
}

func (i RepositoriesRepositoryArgs) ToRepositoriesRepositoryOutput() RepositoriesRepositoryOutput {
	return i.ToRepositoriesRepositoryOutputWithContext(context.Background())
}

func (i RepositoriesRepositoryArgs) ToRepositoriesRepositoryOutputWithContext(ctx context.Context) RepositoriesRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoriesRepositoryOutput)
}

// RepositoriesRepositoryArrayInput is an input type that accepts RepositoriesRepositoryArray and RepositoriesRepositoryArrayOutput values.
// You can construct a concrete instance of `RepositoriesRepositoryArrayInput` via:
//
//	RepositoriesRepositoryArray{ RepositoriesRepositoryArgs{...} }
type RepositoriesRepositoryArrayInput interface {
	pulumi.Input

	ToRepositoriesRepositoryArrayOutput() RepositoriesRepositoryArrayOutput
	ToRepositoriesRepositoryArrayOutputWithContext(context.Context) RepositoriesRepositoryArrayOutput
}

type RepositoriesRepositoryArray []RepositoriesRepositoryInput

func (RepositoriesRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoriesRepository)(nil)).Elem()
}

func (i RepositoriesRepositoryArray) ToRepositoriesRepositoryArrayOutput() RepositoriesRepositoryArrayOutput {
	return i.ToRepositoriesRepositoryArrayOutputWithContext(context.Background())
}

func (i RepositoriesRepositoryArray) ToRepositoriesRepositoryArrayOutputWithContext(ctx context.Context) RepositoriesRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RepositoriesRepositoryArrayOutput)
}

type RepositoriesRepositoryOutput struct{ *pulumi.OutputState }

func (RepositoriesRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RepositoriesRepository)(nil)).Elem()
}

func (o RepositoriesRepositoryOutput) ToRepositoriesRepositoryOutput() RepositoriesRepositoryOutput {
	return o
}

func (o RepositoriesRepositoryOutput) ToRepositoriesRepositoryOutputWithContext(ctx context.Context) RepositoriesRepositoryOutput {
	return o
}

// The access level of repository.
func (o RepositoriesRepositoryOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoriesRepository) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// The creation time of repository.
func (o RepositoriesRepositoryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoriesRepository) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of repository.
func (o RepositoriesRepositoryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoriesRepository) string { return v.Description }).(pulumi.StringOutput)
}

// The name of repository.
func (o RepositoriesRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoriesRepository) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace of repository.
func (o RepositoriesRepositoryOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoriesRepository) string { return v.Namespace }).(pulumi.StringOutput)
}

// The last update time of repository.
func (o RepositoriesRepositoryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v RepositoriesRepository) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type RepositoriesRepositoryArrayOutput struct{ *pulumi.OutputState }

func (RepositoriesRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RepositoriesRepository)(nil)).Elem()
}

func (o RepositoriesRepositoryArrayOutput) ToRepositoriesRepositoryArrayOutput() RepositoriesRepositoryArrayOutput {
	return o
}

func (o RepositoriesRepositoryArrayOutput) ToRepositoriesRepositoryArrayOutputWithContext(ctx context.Context) RepositoriesRepositoryArrayOutput {
	return o
}

func (o RepositoriesRepositoryArrayOutput) Index(i pulumi.IntInput) RepositoriesRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RepositoriesRepository {
		return vs[0].([]RepositoriesRepository)[vs[1].(int)]
	}).(RepositoriesRepositoryOutput)
}

type StateStatus struct {
	// The condition of instance.
	Conditions []string `pulumi:"conditions"`
	// The phase status of instance.
	Phase *string `pulumi:"phase"`
}

// StateStatusInput is an input type that accepts StateStatusArgs and StateStatusOutput values.
// You can construct a concrete instance of `StateStatusInput` via:
//
//	StateStatusArgs{...}
type StateStatusInput interface {
	pulumi.Input

	ToStateStatusOutput() StateStatusOutput
	ToStateStatusOutputWithContext(context.Context) StateStatusOutput
}

type StateStatusArgs struct {
	// The condition of instance.
	Conditions pulumi.StringArrayInput `pulumi:"conditions"`
	// The phase status of instance.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (StateStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StateStatus)(nil)).Elem()
}

func (i StateStatusArgs) ToStateStatusOutput() StateStatusOutput {
	return i.ToStateStatusOutputWithContext(context.Background())
}

func (i StateStatusArgs) ToStateStatusOutputWithContext(ctx context.Context) StateStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateStatusOutput)
}

func (i StateStatusArgs) ToStateStatusPtrOutput() StateStatusPtrOutput {
	return i.ToStateStatusPtrOutputWithContext(context.Background())
}

func (i StateStatusArgs) ToStateStatusPtrOutputWithContext(ctx context.Context) StateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateStatusOutput).ToStateStatusPtrOutputWithContext(ctx)
}

// StateStatusPtrInput is an input type that accepts StateStatusArgs, StateStatusPtr and StateStatusPtrOutput values.
// You can construct a concrete instance of `StateStatusPtrInput` via:
//
//	        StateStatusArgs{...}
//
//	or:
//
//	        nil
type StateStatusPtrInput interface {
	pulumi.Input

	ToStateStatusPtrOutput() StateStatusPtrOutput
	ToStateStatusPtrOutputWithContext(context.Context) StateStatusPtrOutput
}

type stateStatusPtrType StateStatusArgs

func StateStatusPtr(v *StateStatusArgs) StateStatusPtrInput {
	return (*stateStatusPtrType)(v)
}

func (*stateStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StateStatus)(nil)).Elem()
}

func (i *stateStatusPtrType) ToStateStatusPtrOutput() StateStatusPtrOutput {
	return i.ToStateStatusPtrOutputWithContext(context.Background())
}

func (i *stateStatusPtrType) ToStateStatusPtrOutputWithContext(ctx context.Context) StateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StateStatusPtrOutput)
}

type StateStatusOutput struct{ *pulumi.OutputState }

func (StateStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StateStatus)(nil)).Elem()
}

func (o StateStatusOutput) ToStateStatusOutput() StateStatusOutput {
	return o
}

func (o StateStatusOutput) ToStateStatusOutputWithContext(ctx context.Context) StateStatusOutput {
	return o
}

func (o StateStatusOutput) ToStateStatusPtrOutput() StateStatusPtrOutput {
	return o.ToStateStatusPtrOutputWithContext(context.Background())
}

func (o StateStatusOutput) ToStateStatusPtrOutputWithContext(ctx context.Context) StateStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v StateStatus) *StateStatus {
		return &v
	}).(StateStatusPtrOutput)
}

// The condition of instance.
func (o StateStatusOutput) Conditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v StateStatus) []string { return v.Conditions }).(pulumi.StringArrayOutput)
}

// The phase status of instance.
func (o StateStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StateStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type StateStatusPtrOutput struct{ *pulumi.OutputState }

func (StateStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StateStatus)(nil)).Elem()
}

func (o StateStatusPtrOutput) ToStateStatusPtrOutput() StateStatusPtrOutput {
	return o
}

func (o StateStatusPtrOutput) ToStateStatusPtrOutputWithContext(ctx context.Context) StateStatusPtrOutput {
	return o
}

func (o StateStatusPtrOutput) Elem() StateStatusOutput {
	return o.ApplyT(func(v *StateStatus) StateStatus {
		if v != nil {
			return *v
		}
		var ret StateStatus
		return ret
	}).(StateStatusOutput)
}

// The condition of instance.
func (o StateStatusPtrOutput) Conditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StateStatus) []string {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(pulumi.StringArrayOutput)
}

// The phase status of instance.
func (o StateStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StateStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

type TagChartAttribute struct {
	// The Helm version.
	ApiVersion *string `pulumi:"apiVersion"`
	// The name of OCI product.
	Name *string `pulumi:"name"`
	// The Helm Chart version.
	Version *string `pulumi:"version"`
}

// TagChartAttributeInput is an input type that accepts TagChartAttributeArgs and TagChartAttributeOutput values.
// You can construct a concrete instance of `TagChartAttributeInput` via:
//
//	TagChartAttributeArgs{...}
type TagChartAttributeInput interface {
	pulumi.Input

	ToTagChartAttributeOutput() TagChartAttributeOutput
	ToTagChartAttributeOutputWithContext(context.Context) TagChartAttributeOutput
}

type TagChartAttributeArgs struct {
	// The Helm version.
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// The name of OCI product.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The Helm Chart version.
	Version pulumi.StringPtrInput `pulumi:"version"`
}

func (TagChartAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagChartAttribute)(nil)).Elem()
}

func (i TagChartAttributeArgs) ToTagChartAttributeOutput() TagChartAttributeOutput {
	return i.ToTagChartAttributeOutputWithContext(context.Background())
}

func (i TagChartAttributeArgs) ToTagChartAttributeOutputWithContext(ctx context.Context) TagChartAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagChartAttributeOutput)
}

// TagChartAttributeArrayInput is an input type that accepts TagChartAttributeArray and TagChartAttributeArrayOutput values.
// You can construct a concrete instance of `TagChartAttributeArrayInput` via:
//
//	TagChartAttributeArray{ TagChartAttributeArgs{...} }
type TagChartAttributeArrayInput interface {
	pulumi.Input

	ToTagChartAttributeArrayOutput() TagChartAttributeArrayOutput
	ToTagChartAttributeArrayOutputWithContext(context.Context) TagChartAttributeArrayOutput
}

type TagChartAttributeArray []TagChartAttributeInput

func (TagChartAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagChartAttribute)(nil)).Elem()
}

func (i TagChartAttributeArray) ToTagChartAttributeArrayOutput() TagChartAttributeArrayOutput {
	return i.ToTagChartAttributeArrayOutputWithContext(context.Background())
}

func (i TagChartAttributeArray) ToTagChartAttributeArrayOutputWithContext(ctx context.Context) TagChartAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagChartAttributeArrayOutput)
}

type TagChartAttributeOutput struct{ *pulumi.OutputState }

func (TagChartAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagChartAttribute)(nil)).Elem()
}

func (o TagChartAttributeOutput) ToTagChartAttributeOutput() TagChartAttributeOutput {
	return o
}

func (o TagChartAttributeOutput) ToTagChartAttributeOutputWithContext(ctx context.Context) TagChartAttributeOutput {
	return o
}

// The Helm version.
func (o TagChartAttributeOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagChartAttribute) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// The name of OCI product.
func (o TagChartAttributeOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagChartAttribute) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The Helm Chart version.
func (o TagChartAttributeOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagChartAttribute) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type TagChartAttributeArrayOutput struct{ *pulumi.OutputState }

func (TagChartAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagChartAttribute)(nil)).Elem()
}

func (o TagChartAttributeArrayOutput) ToTagChartAttributeArrayOutput() TagChartAttributeArrayOutput {
	return o
}

func (o TagChartAttributeArrayOutput) ToTagChartAttributeArrayOutputWithContext(ctx context.Context) TagChartAttributeArrayOutput {
	return o
}

func (o TagChartAttributeArrayOutput) Index(i pulumi.IntInput) TagChartAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagChartAttribute {
		return vs[0].([]TagChartAttribute)[vs[1].(int)]
	}).(TagChartAttributeOutput)
}

type TagImageAttribute struct {
	// The image architecture.
	Architecture *string `pulumi:"architecture"`
	// The image author.
	Author *string `pulumi:"author"`
	// The digest of image.
	Digest *string `pulumi:"digest"`
	// The iamge os.
	Os *string `pulumi:"os"`
}

// TagImageAttributeInput is an input type that accepts TagImageAttributeArgs and TagImageAttributeOutput values.
// You can construct a concrete instance of `TagImageAttributeInput` via:
//
//	TagImageAttributeArgs{...}
type TagImageAttributeInput interface {
	pulumi.Input

	ToTagImageAttributeOutput() TagImageAttributeOutput
	ToTagImageAttributeOutputWithContext(context.Context) TagImageAttributeOutput
}

type TagImageAttributeArgs struct {
	// The image architecture.
	Architecture pulumi.StringPtrInput `pulumi:"architecture"`
	// The image author.
	Author pulumi.StringPtrInput `pulumi:"author"`
	// The digest of image.
	Digest pulumi.StringPtrInput `pulumi:"digest"`
	// The iamge os.
	Os pulumi.StringPtrInput `pulumi:"os"`
}

func (TagImageAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagImageAttribute)(nil)).Elem()
}

func (i TagImageAttributeArgs) ToTagImageAttributeOutput() TagImageAttributeOutput {
	return i.ToTagImageAttributeOutputWithContext(context.Background())
}

func (i TagImageAttributeArgs) ToTagImageAttributeOutputWithContext(ctx context.Context) TagImageAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagImageAttributeOutput)
}

// TagImageAttributeArrayInput is an input type that accepts TagImageAttributeArray and TagImageAttributeArrayOutput values.
// You can construct a concrete instance of `TagImageAttributeArrayInput` via:
//
//	TagImageAttributeArray{ TagImageAttributeArgs{...} }
type TagImageAttributeArrayInput interface {
	pulumi.Input

	ToTagImageAttributeArrayOutput() TagImageAttributeArrayOutput
	ToTagImageAttributeArrayOutputWithContext(context.Context) TagImageAttributeArrayOutput
}

type TagImageAttributeArray []TagImageAttributeInput

func (TagImageAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagImageAttribute)(nil)).Elem()
}

func (i TagImageAttributeArray) ToTagImageAttributeArrayOutput() TagImageAttributeArrayOutput {
	return i.ToTagImageAttributeArrayOutputWithContext(context.Background())
}

func (i TagImageAttributeArray) ToTagImageAttributeArrayOutputWithContext(ctx context.Context) TagImageAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagImageAttributeArrayOutput)
}

type TagImageAttributeOutput struct{ *pulumi.OutputState }

func (TagImageAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagImageAttribute)(nil)).Elem()
}

func (o TagImageAttributeOutput) ToTagImageAttributeOutput() TagImageAttributeOutput {
	return o
}

func (o TagImageAttributeOutput) ToTagImageAttributeOutputWithContext(ctx context.Context) TagImageAttributeOutput {
	return o
}

// The image architecture.
func (o TagImageAttributeOutput) Architecture() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagImageAttribute) *string { return v.Architecture }).(pulumi.StringPtrOutput)
}

// The image author.
func (o TagImageAttributeOutput) Author() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagImageAttribute) *string { return v.Author }).(pulumi.StringPtrOutput)
}

// The digest of image.
func (o TagImageAttributeOutput) Digest() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagImageAttribute) *string { return v.Digest }).(pulumi.StringPtrOutput)
}

// The iamge os.
func (o TagImageAttributeOutput) Os() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TagImageAttribute) *string { return v.Os }).(pulumi.StringPtrOutput)
}

type TagImageAttributeArrayOutput struct{ *pulumi.OutputState }

func (TagImageAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagImageAttribute)(nil)).Elem()
}

func (o TagImageAttributeArrayOutput) ToTagImageAttributeArrayOutput() TagImageAttributeArrayOutput {
	return o
}

func (o TagImageAttributeArrayOutput) ToTagImageAttributeArrayOutputWithContext(ctx context.Context) TagImageAttributeArrayOutput {
	return o
}

func (o TagImageAttributeArrayOutput) Index(i pulumi.IntInput) TagImageAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagImageAttribute {
		return vs[0].([]TagImageAttribute)[vs[1].(int)]
	}).(TagImageAttributeOutput)
}

type TagsTag struct {
	// The chart attribute,valid when tag type is Chart.
	ChartAttribute TagsTagChartAttribute `pulumi:"chartAttribute"`
	// The digest of image.
	Digest string `pulumi:"digest"`
	// The list of image attributes,valid when tag type is Image.
	ImageAttributes []TagsTagImageAttribute `pulumi:"imageAttributes"`
	// The name of OCI product tag.
	Name string `pulumi:"name"`
	// The last push time of OCI product.
	PushTime string `pulumi:"pushTime"`
	// The size of OCI product.
	Size int `pulumi:"size"`
	// The type of OCI product tag.
	Type string `pulumi:"type"`
}

// TagsTagInput is an input type that accepts TagsTagArgs and TagsTagOutput values.
// You can construct a concrete instance of `TagsTagInput` via:
//
//	TagsTagArgs{...}
type TagsTagInput interface {
	pulumi.Input

	ToTagsTagOutput() TagsTagOutput
	ToTagsTagOutputWithContext(context.Context) TagsTagOutput
}

type TagsTagArgs struct {
	// The chart attribute,valid when tag type is Chart.
	ChartAttribute TagsTagChartAttributeInput `pulumi:"chartAttribute"`
	// The digest of image.
	Digest pulumi.StringInput `pulumi:"digest"`
	// The list of image attributes,valid when tag type is Image.
	ImageAttributes TagsTagImageAttributeArrayInput `pulumi:"imageAttributes"`
	// The name of OCI product tag.
	Name pulumi.StringInput `pulumi:"name"`
	// The last push time of OCI product.
	PushTime pulumi.StringInput `pulumi:"pushTime"`
	// The size of OCI product.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of OCI product tag.
	Type pulumi.StringInput `pulumi:"type"`
}

func (TagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsTag)(nil)).Elem()
}

func (i TagsTagArgs) ToTagsTagOutput() TagsTagOutput {
	return i.ToTagsTagOutputWithContext(context.Background())
}

func (i TagsTagArgs) ToTagsTagOutputWithContext(ctx context.Context) TagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsTagOutput)
}

// TagsTagArrayInput is an input type that accepts TagsTagArray and TagsTagArrayOutput values.
// You can construct a concrete instance of `TagsTagArrayInput` via:
//
//	TagsTagArray{ TagsTagArgs{...} }
type TagsTagArrayInput interface {
	pulumi.Input

	ToTagsTagArrayOutput() TagsTagArrayOutput
	ToTagsTagArrayOutputWithContext(context.Context) TagsTagArrayOutput
}

type TagsTagArray []TagsTagInput

func (TagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagsTag)(nil)).Elem()
}

func (i TagsTagArray) ToTagsTagArrayOutput() TagsTagArrayOutput {
	return i.ToTagsTagArrayOutputWithContext(context.Background())
}

func (i TagsTagArray) ToTagsTagArrayOutputWithContext(ctx context.Context) TagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsTagArrayOutput)
}

type TagsTagOutput struct{ *pulumi.OutputState }

func (TagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsTag)(nil)).Elem()
}

func (o TagsTagOutput) ToTagsTagOutput() TagsTagOutput {
	return o
}

func (o TagsTagOutput) ToTagsTagOutputWithContext(ctx context.Context) TagsTagOutput {
	return o
}

// The chart attribute,valid when tag type is Chart.
func (o TagsTagOutput) ChartAttribute() TagsTagChartAttributeOutput {
	return o.ApplyT(func(v TagsTag) TagsTagChartAttribute { return v.ChartAttribute }).(TagsTagChartAttributeOutput)
}

// The digest of image.
func (o TagsTagOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTag) string { return v.Digest }).(pulumi.StringOutput)
}

// The list of image attributes,valid when tag type is Image.
func (o TagsTagOutput) ImageAttributes() TagsTagImageAttributeArrayOutput {
	return o.ApplyT(func(v TagsTag) []TagsTagImageAttribute { return v.ImageAttributes }).(TagsTagImageAttributeArrayOutput)
}

// The name of OCI product tag.
func (o TagsTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTag) string { return v.Name }).(pulumi.StringOutput)
}

// The last push time of OCI product.
func (o TagsTagOutput) PushTime() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTag) string { return v.PushTime }).(pulumi.StringOutput)
}

// The size of OCI product.
func (o TagsTagOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v TagsTag) int { return v.Size }).(pulumi.IntOutput)
}

// The type of OCI product tag.
func (o TagsTagOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTag) string { return v.Type }).(pulumi.StringOutput)
}

type TagsTagArrayOutput struct{ *pulumi.OutputState }

func (TagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagsTag)(nil)).Elem()
}

func (o TagsTagArrayOutput) ToTagsTagArrayOutput() TagsTagArrayOutput {
	return o
}

func (o TagsTagArrayOutput) ToTagsTagArrayOutputWithContext(ctx context.Context) TagsTagArrayOutput {
	return o
}

func (o TagsTagArrayOutput) Index(i pulumi.IntInput) TagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagsTag {
		return vs[0].([]TagsTag)[vs[1].(int)]
	}).(TagsTagOutput)
}

type TagsTagChartAttribute struct {
	// The Helm version.
	ApiVersion string `pulumi:"apiVersion"`
	// The name of OCI product tag.
	Name string `pulumi:"name"`
	// The Helm Chart version.
	Version string `pulumi:"version"`
}

// TagsTagChartAttributeInput is an input type that accepts TagsTagChartAttributeArgs and TagsTagChartAttributeOutput values.
// You can construct a concrete instance of `TagsTagChartAttributeInput` via:
//
//	TagsTagChartAttributeArgs{...}
type TagsTagChartAttributeInput interface {
	pulumi.Input

	ToTagsTagChartAttributeOutput() TagsTagChartAttributeOutput
	ToTagsTagChartAttributeOutputWithContext(context.Context) TagsTagChartAttributeOutput
}

type TagsTagChartAttributeArgs struct {
	// The Helm version.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// The name of OCI product tag.
	Name pulumi.StringInput `pulumi:"name"`
	// The Helm Chart version.
	Version pulumi.StringInput `pulumi:"version"`
}

func (TagsTagChartAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsTagChartAttribute)(nil)).Elem()
}

func (i TagsTagChartAttributeArgs) ToTagsTagChartAttributeOutput() TagsTagChartAttributeOutput {
	return i.ToTagsTagChartAttributeOutputWithContext(context.Background())
}

func (i TagsTagChartAttributeArgs) ToTagsTagChartAttributeOutputWithContext(ctx context.Context) TagsTagChartAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsTagChartAttributeOutput)
}

type TagsTagChartAttributeOutput struct{ *pulumi.OutputState }

func (TagsTagChartAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsTagChartAttribute)(nil)).Elem()
}

func (o TagsTagChartAttributeOutput) ToTagsTagChartAttributeOutput() TagsTagChartAttributeOutput {
	return o
}

func (o TagsTagChartAttributeOutput) ToTagsTagChartAttributeOutputWithContext(ctx context.Context) TagsTagChartAttributeOutput {
	return o
}

// The Helm version.
func (o TagsTagChartAttributeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTagChartAttribute) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// The name of OCI product tag.
func (o TagsTagChartAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTagChartAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// The Helm Chart version.
func (o TagsTagChartAttributeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTagChartAttribute) string { return v.Version }).(pulumi.StringOutput)
}

type TagsTagImageAttribute struct {
	// The image architecture.
	Architecture string `pulumi:"architecture"`
	// The image author.
	Author string `pulumi:"author"`
	// The digest of image.
	Digest string `pulumi:"digest"`
	// The iamge os.
	Os string `pulumi:"os"`
}

// TagsTagImageAttributeInput is an input type that accepts TagsTagImageAttributeArgs and TagsTagImageAttributeOutput values.
// You can construct a concrete instance of `TagsTagImageAttributeInput` via:
//
//	TagsTagImageAttributeArgs{...}
type TagsTagImageAttributeInput interface {
	pulumi.Input

	ToTagsTagImageAttributeOutput() TagsTagImageAttributeOutput
	ToTagsTagImageAttributeOutputWithContext(context.Context) TagsTagImageAttributeOutput
}

type TagsTagImageAttributeArgs struct {
	// The image architecture.
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// The image author.
	Author pulumi.StringInput `pulumi:"author"`
	// The digest of image.
	Digest pulumi.StringInput `pulumi:"digest"`
	// The iamge os.
	Os pulumi.StringInput `pulumi:"os"`
}

func (TagsTagImageAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsTagImageAttribute)(nil)).Elem()
}

func (i TagsTagImageAttributeArgs) ToTagsTagImageAttributeOutput() TagsTagImageAttributeOutput {
	return i.ToTagsTagImageAttributeOutputWithContext(context.Background())
}

func (i TagsTagImageAttributeArgs) ToTagsTagImageAttributeOutputWithContext(ctx context.Context) TagsTagImageAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsTagImageAttributeOutput)
}

// TagsTagImageAttributeArrayInput is an input type that accepts TagsTagImageAttributeArray and TagsTagImageAttributeArrayOutput values.
// You can construct a concrete instance of `TagsTagImageAttributeArrayInput` via:
//
//	TagsTagImageAttributeArray{ TagsTagImageAttributeArgs{...} }
type TagsTagImageAttributeArrayInput interface {
	pulumi.Input

	ToTagsTagImageAttributeArrayOutput() TagsTagImageAttributeArrayOutput
	ToTagsTagImageAttributeArrayOutputWithContext(context.Context) TagsTagImageAttributeArrayOutput
}

type TagsTagImageAttributeArray []TagsTagImageAttributeInput

func (TagsTagImageAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagsTagImageAttribute)(nil)).Elem()
}

func (i TagsTagImageAttributeArray) ToTagsTagImageAttributeArrayOutput() TagsTagImageAttributeArrayOutput {
	return i.ToTagsTagImageAttributeArrayOutputWithContext(context.Background())
}

func (i TagsTagImageAttributeArray) ToTagsTagImageAttributeArrayOutputWithContext(ctx context.Context) TagsTagImageAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TagsTagImageAttributeArrayOutput)
}

type TagsTagImageAttributeOutput struct{ *pulumi.OutputState }

func (TagsTagImageAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TagsTagImageAttribute)(nil)).Elem()
}

func (o TagsTagImageAttributeOutput) ToTagsTagImageAttributeOutput() TagsTagImageAttributeOutput {
	return o
}

func (o TagsTagImageAttributeOutput) ToTagsTagImageAttributeOutputWithContext(ctx context.Context) TagsTagImageAttributeOutput {
	return o
}

// The image architecture.
func (o TagsTagImageAttributeOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTagImageAttribute) string { return v.Architecture }).(pulumi.StringOutput)
}

// The image author.
func (o TagsTagImageAttributeOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTagImageAttribute) string { return v.Author }).(pulumi.StringOutput)
}

// The digest of image.
func (o TagsTagImageAttributeOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTagImageAttribute) string { return v.Digest }).(pulumi.StringOutput)
}

// The iamge os.
func (o TagsTagImageAttributeOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v TagsTagImageAttribute) string { return v.Os }).(pulumi.StringOutput)
}

type TagsTagImageAttributeArrayOutput struct{ *pulumi.OutputState }

func (TagsTagImageAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TagsTagImageAttribute)(nil)).Elem()
}

func (o TagsTagImageAttributeArrayOutput) ToTagsTagImageAttributeArrayOutput() TagsTagImageAttributeArrayOutput {
	return o
}

func (o TagsTagImageAttributeArrayOutput) ToTagsTagImageAttributeArrayOutputWithContext(ctx context.Context) TagsTagImageAttributeArrayOutput {
	return o
}

func (o TagsTagImageAttributeArrayOutput) Index(i pulumi.IntInput) TagsTagImageAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TagsTagImageAttribute {
		return vs[0].([]TagsTagImageAttribute)[vs[1].(int)]
	}).(TagsTagImageAttributeOutput)
}

type VpcEndpointVpc struct {
	// The id of the account. When you need to expose the Enterprise Edition instance to a VPC under another primary account, you need to specify the ID of the primary account to which the VPC belongs.
	AccountId *int `pulumi:"accountId"`
	// The id of the subnet. If not specified, the subnet with the most remaining IPs under the VPC will be automatically selected.
	SubnetId *string `pulumi:"subnetId"`
	// The id of the vpc.
	VpcId *string `pulumi:"vpcId"`
}

// VpcEndpointVpcInput is an input type that accepts VpcEndpointVpcArgs and VpcEndpointVpcOutput values.
// You can construct a concrete instance of `VpcEndpointVpcInput` via:
//
//	VpcEndpointVpcArgs{...}
type VpcEndpointVpcInput interface {
	pulumi.Input

	ToVpcEndpointVpcOutput() VpcEndpointVpcOutput
	ToVpcEndpointVpcOutputWithContext(context.Context) VpcEndpointVpcOutput
}

type VpcEndpointVpcArgs struct {
	// The id of the account. When you need to expose the Enterprise Edition instance to a VPC under another primary account, you need to specify the ID of the primary account to which the VPC belongs.
	AccountId pulumi.IntPtrInput `pulumi:"accountId"`
	// The id of the subnet. If not specified, the subnet with the most remaining IPs under the VPC will be automatically selected.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// The id of the vpc.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
}

func (VpcEndpointVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointVpc)(nil)).Elem()
}

func (i VpcEndpointVpcArgs) ToVpcEndpointVpcOutput() VpcEndpointVpcOutput {
	return i.ToVpcEndpointVpcOutputWithContext(context.Background())
}

func (i VpcEndpointVpcArgs) ToVpcEndpointVpcOutputWithContext(ctx context.Context) VpcEndpointVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointVpcOutput)
}

// VpcEndpointVpcArrayInput is an input type that accepts VpcEndpointVpcArray and VpcEndpointVpcArrayOutput values.
// You can construct a concrete instance of `VpcEndpointVpcArrayInput` via:
//
//	VpcEndpointVpcArray{ VpcEndpointVpcArgs{...} }
type VpcEndpointVpcArrayInput interface {
	pulumi.Input

	ToVpcEndpointVpcArrayOutput() VpcEndpointVpcArrayOutput
	ToVpcEndpointVpcArrayOutputWithContext(context.Context) VpcEndpointVpcArrayOutput
}

type VpcEndpointVpcArray []VpcEndpointVpcInput

func (VpcEndpointVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcEndpointVpc)(nil)).Elem()
}

func (i VpcEndpointVpcArray) ToVpcEndpointVpcArrayOutput() VpcEndpointVpcArrayOutput {
	return i.ToVpcEndpointVpcArrayOutputWithContext(context.Background())
}

func (i VpcEndpointVpcArray) ToVpcEndpointVpcArrayOutputWithContext(ctx context.Context) VpcEndpointVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointVpcArrayOutput)
}

type VpcEndpointVpcOutput struct{ *pulumi.OutputState }

func (VpcEndpointVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointVpc)(nil)).Elem()
}

func (o VpcEndpointVpcOutput) ToVpcEndpointVpcOutput() VpcEndpointVpcOutput {
	return o
}

func (o VpcEndpointVpcOutput) ToVpcEndpointVpcOutputWithContext(ctx context.Context) VpcEndpointVpcOutput {
	return o
}

// The id of the account. When you need to expose the Enterprise Edition instance to a VPC under another primary account, you need to specify the ID of the primary account to which the VPC belongs.
func (o VpcEndpointVpcOutput) AccountId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v VpcEndpointVpc) *int { return v.AccountId }).(pulumi.IntPtrOutput)
}

// The id of the subnet. If not specified, the subnet with the most remaining IPs under the VPC will be automatically selected.
func (o VpcEndpointVpcOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcEndpointVpc) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// The id of the vpc.
func (o VpcEndpointVpcOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v VpcEndpointVpc) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

type VpcEndpointVpcArrayOutput struct{ *pulumi.OutputState }

func (VpcEndpointVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcEndpointVpc)(nil)).Elem()
}

func (o VpcEndpointVpcArrayOutput) ToVpcEndpointVpcArrayOutput() VpcEndpointVpcArrayOutput {
	return o
}

func (o VpcEndpointVpcArrayOutput) ToVpcEndpointVpcArrayOutputWithContext(ctx context.Context) VpcEndpointVpcArrayOutput {
	return o
}

func (o VpcEndpointVpcArrayOutput) Index(i pulumi.IntInput) VpcEndpointVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcEndpointVpc {
		return vs[0].([]VpcEndpointVpc)[vs[1].(int)]
	}).(VpcEndpointVpcOutput)
}

type VpcEndpointsEndpoint struct {
	// The CR registry name.
	Registry string `pulumi:"registry"`
	// List of vpc information.
	Vpcs []VpcEndpointsEndpointVpc `pulumi:"vpcs"`
}

// VpcEndpointsEndpointInput is an input type that accepts VpcEndpointsEndpointArgs and VpcEndpointsEndpointOutput values.
// You can construct a concrete instance of `VpcEndpointsEndpointInput` via:
//
//	VpcEndpointsEndpointArgs{...}
type VpcEndpointsEndpointInput interface {
	pulumi.Input

	ToVpcEndpointsEndpointOutput() VpcEndpointsEndpointOutput
	ToVpcEndpointsEndpointOutputWithContext(context.Context) VpcEndpointsEndpointOutput
}

type VpcEndpointsEndpointArgs struct {
	// The CR registry name.
	Registry pulumi.StringInput `pulumi:"registry"`
	// List of vpc information.
	Vpcs VpcEndpointsEndpointVpcArrayInput `pulumi:"vpcs"`
}

func (VpcEndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointsEndpoint)(nil)).Elem()
}

func (i VpcEndpointsEndpointArgs) ToVpcEndpointsEndpointOutput() VpcEndpointsEndpointOutput {
	return i.ToVpcEndpointsEndpointOutputWithContext(context.Background())
}

func (i VpcEndpointsEndpointArgs) ToVpcEndpointsEndpointOutputWithContext(ctx context.Context) VpcEndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointsEndpointOutput)
}

// VpcEndpointsEndpointArrayInput is an input type that accepts VpcEndpointsEndpointArray and VpcEndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `VpcEndpointsEndpointArrayInput` via:
//
//	VpcEndpointsEndpointArray{ VpcEndpointsEndpointArgs{...} }
type VpcEndpointsEndpointArrayInput interface {
	pulumi.Input

	ToVpcEndpointsEndpointArrayOutput() VpcEndpointsEndpointArrayOutput
	ToVpcEndpointsEndpointArrayOutputWithContext(context.Context) VpcEndpointsEndpointArrayOutput
}

type VpcEndpointsEndpointArray []VpcEndpointsEndpointInput

func (VpcEndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcEndpointsEndpoint)(nil)).Elem()
}

func (i VpcEndpointsEndpointArray) ToVpcEndpointsEndpointArrayOutput() VpcEndpointsEndpointArrayOutput {
	return i.ToVpcEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i VpcEndpointsEndpointArray) ToVpcEndpointsEndpointArrayOutputWithContext(ctx context.Context) VpcEndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointsEndpointArrayOutput)
}

type VpcEndpointsEndpointOutput struct{ *pulumi.OutputState }

func (VpcEndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointsEndpoint)(nil)).Elem()
}

func (o VpcEndpointsEndpointOutput) ToVpcEndpointsEndpointOutput() VpcEndpointsEndpointOutput {
	return o
}

func (o VpcEndpointsEndpointOutput) ToVpcEndpointsEndpointOutputWithContext(ctx context.Context) VpcEndpointsEndpointOutput {
	return o
}

// The CR registry name.
func (o VpcEndpointsEndpointOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v VpcEndpointsEndpoint) string { return v.Registry }).(pulumi.StringOutput)
}

// List of vpc information.
func (o VpcEndpointsEndpointOutput) Vpcs() VpcEndpointsEndpointVpcArrayOutput {
	return o.ApplyT(func(v VpcEndpointsEndpoint) []VpcEndpointsEndpointVpc { return v.Vpcs }).(VpcEndpointsEndpointVpcArrayOutput)
}

type VpcEndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (VpcEndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcEndpointsEndpoint)(nil)).Elem()
}

func (o VpcEndpointsEndpointArrayOutput) ToVpcEndpointsEndpointArrayOutput() VpcEndpointsEndpointArrayOutput {
	return o
}

func (o VpcEndpointsEndpointArrayOutput) ToVpcEndpointsEndpointArrayOutputWithContext(ctx context.Context) VpcEndpointsEndpointArrayOutput {
	return o
}

func (o VpcEndpointsEndpointArrayOutput) Index(i pulumi.IntInput) VpcEndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcEndpointsEndpoint {
		return vs[0].([]VpcEndpointsEndpoint)[vs[1].(int)]
	}).(VpcEndpointsEndpointOutput)
}

type VpcEndpointsEndpointVpc struct {
	// The id of the account.
	AccountId int `pulumi:"accountId"`
	// The creation time.
	CreateTime string `pulumi:"createTime"`
	// The IP address of the mirror repository in the VPC.
	Ip string `pulumi:"ip"`
	// The region id.
	Region string `pulumi:"region"`
	// The status of the vpc endpoint.
	Status string `pulumi:"status"`
	// The ID of the subnet.
	SubnetId string `pulumi:"subnetId"`
	// The ID of the vpc.
	VpcId string `pulumi:"vpcId"`
}

// VpcEndpointsEndpointVpcInput is an input type that accepts VpcEndpointsEndpointVpcArgs and VpcEndpointsEndpointVpcOutput values.
// You can construct a concrete instance of `VpcEndpointsEndpointVpcInput` via:
//
//	VpcEndpointsEndpointVpcArgs{...}
type VpcEndpointsEndpointVpcInput interface {
	pulumi.Input

	ToVpcEndpointsEndpointVpcOutput() VpcEndpointsEndpointVpcOutput
	ToVpcEndpointsEndpointVpcOutputWithContext(context.Context) VpcEndpointsEndpointVpcOutput
}

type VpcEndpointsEndpointVpcArgs struct {
	// The id of the account.
	AccountId pulumi.IntInput `pulumi:"accountId"`
	// The creation time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The IP address of the mirror repository in the VPC.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The region id.
	Region pulumi.StringInput `pulumi:"region"`
	// The status of the vpc endpoint.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of the subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The ID of the vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (VpcEndpointsEndpointVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointsEndpointVpc)(nil)).Elem()
}

func (i VpcEndpointsEndpointVpcArgs) ToVpcEndpointsEndpointVpcOutput() VpcEndpointsEndpointVpcOutput {
	return i.ToVpcEndpointsEndpointVpcOutputWithContext(context.Background())
}

func (i VpcEndpointsEndpointVpcArgs) ToVpcEndpointsEndpointVpcOutputWithContext(ctx context.Context) VpcEndpointsEndpointVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointsEndpointVpcOutput)
}

// VpcEndpointsEndpointVpcArrayInput is an input type that accepts VpcEndpointsEndpointVpcArray and VpcEndpointsEndpointVpcArrayOutput values.
// You can construct a concrete instance of `VpcEndpointsEndpointVpcArrayInput` via:
//
//	VpcEndpointsEndpointVpcArray{ VpcEndpointsEndpointVpcArgs{...} }
type VpcEndpointsEndpointVpcArrayInput interface {
	pulumi.Input

	ToVpcEndpointsEndpointVpcArrayOutput() VpcEndpointsEndpointVpcArrayOutput
	ToVpcEndpointsEndpointVpcArrayOutputWithContext(context.Context) VpcEndpointsEndpointVpcArrayOutput
}

type VpcEndpointsEndpointVpcArray []VpcEndpointsEndpointVpcInput

func (VpcEndpointsEndpointVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcEndpointsEndpointVpc)(nil)).Elem()
}

func (i VpcEndpointsEndpointVpcArray) ToVpcEndpointsEndpointVpcArrayOutput() VpcEndpointsEndpointVpcArrayOutput {
	return i.ToVpcEndpointsEndpointVpcArrayOutputWithContext(context.Background())
}

func (i VpcEndpointsEndpointVpcArray) ToVpcEndpointsEndpointVpcArrayOutputWithContext(ctx context.Context) VpcEndpointsEndpointVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VpcEndpointsEndpointVpcArrayOutput)
}

type VpcEndpointsEndpointVpcOutput struct{ *pulumi.OutputState }

func (VpcEndpointsEndpointVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VpcEndpointsEndpointVpc)(nil)).Elem()
}

func (o VpcEndpointsEndpointVpcOutput) ToVpcEndpointsEndpointVpcOutput() VpcEndpointsEndpointVpcOutput {
	return o
}

func (o VpcEndpointsEndpointVpcOutput) ToVpcEndpointsEndpointVpcOutputWithContext(ctx context.Context) VpcEndpointsEndpointVpcOutput {
	return o
}

// The id of the account.
func (o VpcEndpointsEndpointVpcOutput) AccountId() pulumi.IntOutput {
	return o.ApplyT(func(v VpcEndpointsEndpointVpc) int { return v.AccountId }).(pulumi.IntOutput)
}

// The creation time.
func (o VpcEndpointsEndpointVpcOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v VpcEndpointsEndpointVpc) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The IP address of the mirror repository in the VPC.
func (o VpcEndpointsEndpointVpcOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v VpcEndpointsEndpointVpc) string { return v.Ip }).(pulumi.StringOutput)
}

// The region id.
func (o VpcEndpointsEndpointVpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v VpcEndpointsEndpointVpc) string { return v.Region }).(pulumi.StringOutput)
}

// The status of the vpc endpoint.
func (o VpcEndpointsEndpointVpcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v VpcEndpointsEndpointVpc) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of the subnet.
func (o VpcEndpointsEndpointVpcOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v VpcEndpointsEndpointVpc) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The ID of the vpc.
func (o VpcEndpointsEndpointVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v VpcEndpointsEndpointVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

type VpcEndpointsEndpointVpcArrayOutput struct{ *pulumi.OutputState }

func (VpcEndpointsEndpointVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VpcEndpointsEndpointVpc)(nil)).Elem()
}

func (o VpcEndpointsEndpointVpcArrayOutput) ToVpcEndpointsEndpointVpcArrayOutput() VpcEndpointsEndpointVpcArrayOutput {
	return o
}

func (o VpcEndpointsEndpointVpcArrayOutput) ToVpcEndpointsEndpointVpcArrayOutputWithContext(ctx context.Context) VpcEndpointsEndpointVpcArrayOutput {
	return o
}

func (o VpcEndpointsEndpointVpcArrayOutput) Index(i pulumi.IntInput) VpcEndpointsEndpointVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VpcEndpointsEndpointVpc {
		return vs[0].([]VpcEndpointsEndpointVpc)[vs[1].(int)]
	}).(VpcEndpointsEndpointVpcOutput)
}

type GetAuthorizationTokensToken struct {
	// The expiration time of the temporary access token.
	ExpireTime string `pulumi:"expireTime"`
	// The Temporary access token.
	Token string `pulumi:"token"`
	// The username for login repository instance.
	Username string `pulumi:"username"`
}

// GetAuthorizationTokensTokenInput is an input type that accepts GetAuthorizationTokensTokenArgs and GetAuthorizationTokensTokenOutput values.
// You can construct a concrete instance of `GetAuthorizationTokensTokenInput` via:
//
//	GetAuthorizationTokensTokenArgs{...}
type GetAuthorizationTokensTokenInput interface {
	pulumi.Input

	ToGetAuthorizationTokensTokenOutput() GetAuthorizationTokensTokenOutput
	ToGetAuthorizationTokensTokenOutputWithContext(context.Context) GetAuthorizationTokensTokenOutput
}

type GetAuthorizationTokensTokenArgs struct {
	// The expiration time of the temporary access token.
	ExpireTime pulumi.StringInput `pulumi:"expireTime"`
	// The Temporary access token.
	Token pulumi.StringInput `pulumi:"token"`
	// The username for login repository instance.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetAuthorizationTokensTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthorizationTokensToken)(nil)).Elem()
}

func (i GetAuthorizationTokensTokenArgs) ToGetAuthorizationTokensTokenOutput() GetAuthorizationTokensTokenOutput {
	return i.ToGetAuthorizationTokensTokenOutputWithContext(context.Background())
}

func (i GetAuthorizationTokensTokenArgs) ToGetAuthorizationTokensTokenOutputWithContext(ctx context.Context) GetAuthorizationTokensTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthorizationTokensTokenOutput)
}

// GetAuthorizationTokensTokenArrayInput is an input type that accepts GetAuthorizationTokensTokenArray and GetAuthorizationTokensTokenArrayOutput values.
// You can construct a concrete instance of `GetAuthorizationTokensTokenArrayInput` via:
//
//	GetAuthorizationTokensTokenArray{ GetAuthorizationTokensTokenArgs{...} }
type GetAuthorizationTokensTokenArrayInput interface {
	pulumi.Input

	ToGetAuthorizationTokensTokenArrayOutput() GetAuthorizationTokensTokenArrayOutput
	ToGetAuthorizationTokensTokenArrayOutputWithContext(context.Context) GetAuthorizationTokensTokenArrayOutput
}

type GetAuthorizationTokensTokenArray []GetAuthorizationTokensTokenInput

func (GetAuthorizationTokensTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAuthorizationTokensToken)(nil)).Elem()
}

func (i GetAuthorizationTokensTokenArray) ToGetAuthorizationTokensTokenArrayOutput() GetAuthorizationTokensTokenArrayOutput {
	return i.ToGetAuthorizationTokensTokenArrayOutputWithContext(context.Background())
}

func (i GetAuthorizationTokensTokenArray) ToGetAuthorizationTokensTokenArrayOutputWithContext(ctx context.Context) GetAuthorizationTokensTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAuthorizationTokensTokenArrayOutput)
}

type GetAuthorizationTokensTokenOutput struct{ *pulumi.OutputState }

func (GetAuthorizationTokensTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAuthorizationTokensToken)(nil)).Elem()
}

func (o GetAuthorizationTokensTokenOutput) ToGetAuthorizationTokensTokenOutput() GetAuthorizationTokensTokenOutput {
	return o
}

func (o GetAuthorizationTokensTokenOutput) ToGetAuthorizationTokensTokenOutputWithContext(ctx context.Context) GetAuthorizationTokensTokenOutput {
	return o
}

// The expiration time of the temporary access token.
func (o GetAuthorizationTokensTokenOutput) ExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthorizationTokensToken) string { return v.ExpireTime }).(pulumi.StringOutput)
}

// The Temporary access token.
func (o GetAuthorizationTokensTokenOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthorizationTokensToken) string { return v.Token }).(pulumi.StringOutput)
}

// The username for login repository instance.
func (o GetAuthorizationTokensTokenOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetAuthorizationTokensToken) string { return v.Username }).(pulumi.StringOutput)
}

type GetAuthorizationTokensTokenArrayOutput struct{ *pulumi.OutputState }

func (GetAuthorizationTokensTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAuthorizationTokensToken)(nil)).Elem()
}

func (o GetAuthorizationTokensTokenArrayOutput) ToGetAuthorizationTokensTokenArrayOutput() GetAuthorizationTokensTokenArrayOutput {
	return o
}

func (o GetAuthorizationTokensTokenArrayOutput) ToGetAuthorizationTokensTokenArrayOutputWithContext(ctx context.Context) GetAuthorizationTokensTokenArrayOutput {
	return o
}

func (o GetAuthorizationTokensTokenArrayOutput) Index(i pulumi.IntInput) GetAuthorizationTokensTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAuthorizationTokensToken {
		return vs[0].([]GetAuthorizationTokensToken)[vs[1].(int)]
	}).(GetAuthorizationTokensTokenOutput)
}

type GetEndpointsEndpoint struct {
	// The list of acl policies.
	AclPolicies []GetEndpointsEndpointAclPolicy `pulumi:"aclPolicies"`
	// Whether public endpoint is enabled.
	Enabled bool `pulumi:"enabled"`
	// The CR instance name.
	Registry string `pulumi:"registry"`
	// The status of public endpoint.
	Status string `pulumi:"status"`
}

// GetEndpointsEndpointInput is an input type that accepts GetEndpointsEndpointArgs and GetEndpointsEndpointOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointInput` via:
//
//	GetEndpointsEndpointArgs{...}
type GetEndpointsEndpointInput interface {
	pulumi.Input

	ToGetEndpointsEndpointOutput() GetEndpointsEndpointOutput
	ToGetEndpointsEndpointOutputWithContext(context.Context) GetEndpointsEndpointOutput
}

type GetEndpointsEndpointArgs struct {
	// The list of acl policies.
	AclPolicies GetEndpointsEndpointAclPolicyArrayInput `pulumi:"aclPolicies"`
	// Whether public endpoint is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// The CR instance name.
	Registry pulumi.StringInput `pulumi:"registry"`
	// The status of public endpoint.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetEndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpoint)(nil)).Elem()
}

func (i GetEndpointsEndpointArgs) ToGetEndpointsEndpointOutput() GetEndpointsEndpointOutput {
	return i.ToGetEndpointsEndpointOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointArgs) ToGetEndpointsEndpointOutputWithContext(ctx context.Context) GetEndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointOutput)
}

// GetEndpointsEndpointArrayInput is an input type that accepts GetEndpointsEndpointArray and GetEndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointArrayInput` via:
//
//	GetEndpointsEndpointArray{ GetEndpointsEndpointArgs{...} }
type GetEndpointsEndpointArrayInput interface {
	pulumi.Input

	ToGetEndpointsEndpointArrayOutput() GetEndpointsEndpointArrayOutput
	ToGetEndpointsEndpointArrayOutputWithContext(context.Context) GetEndpointsEndpointArrayOutput
}

type GetEndpointsEndpointArray []GetEndpointsEndpointInput

func (GetEndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpoint)(nil)).Elem()
}

func (i GetEndpointsEndpointArray) ToGetEndpointsEndpointArrayOutput() GetEndpointsEndpointArrayOutput {
	return i.ToGetEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointArray) ToGetEndpointsEndpointArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointArrayOutput)
}

type GetEndpointsEndpointOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpoint)(nil)).Elem()
}

func (o GetEndpointsEndpointOutput) ToGetEndpointsEndpointOutput() GetEndpointsEndpointOutput {
	return o
}

func (o GetEndpointsEndpointOutput) ToGetEndpointsEndpointOutputWithContext(ctx context.Context) GetEndpointsEndpointOutput {
	return o
}

// The list of acl policies.
func (o GetEndpointsEndpointOutput) AclPolicies() GetEndpointsEndpointAclPolicyArrayOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) []GetEndpointsEndpointAclPolicy { return v.AclPolicies }).(GetEndpointsEndpointAclPolicyArrayOutput)
}

// Whether public endpoint is enabled.
func (o GetEndpointsEndpointOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The CR instance name.
func (o GetEndpointsEndpointOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.Registry }).(pulumi.StringOutput)
}

// The status of public endpoint.
func (o GetEndpointsEndpointOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpoint) string { return v.Status }).(pulumi.StringOutput)
}

type GetEndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpoint)(nil)).Elem()
}

func (o GetEndpointsEndpointArrayOutput) ToGetEndpointsEndpointArrayOutput() GetEndpointsEndpointArrayOutput {
	return o
}

func (o GetEndpointsEndpointArrayOutput) ToGetEndpointsEndpointArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointArrayOutput {
	return o
}

func (o GetEndpointsEndpointArrayOutput) Index(i pulumi.IntInput) GetEndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEndpointsEndpoint {
		return vs[0].([]GetEndpointsEndpoint)[vs[1].(int)]
	}).(GetEndpointsEndpointOutput)
}

type GetEndpointsEndpointAclPolicy struct {
	// The description of the acl policy.
	Description string `pulumi:"description"`
	// The ip of the acl policy.
	Entry string `pulumi:"entry"`
}

// GetEndpointsEndpointAclPolicyInput is an input type that accepts GetEndpointsEndpointAclPolicyArgs and GetEndpointsEndpointAclPolicyOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointAclPolicyInput` via:
//
//	GetEndpointsEndpointAclPolicyArgs{...}
type GetEndpointsEndpointAclPolicyInput interface {
	pulumi.Input

	ToGetEndpointsEndpointAclPolicyOutput() GetEndpointsEndpointAclPolicyOutput
	ToGetEndpointsEndpointAclPolicyOutputWithContext(context.Context) GetEndpointsEndpointAclPolicyOutput
}

type GetEndpointsEndpointAclPolicyArgs struct {
	// The description of the acl policy.
	Description pulumi.StringInput `pulumi:"description"`
	// The ip of the acl policy.
	Entry pulumi.StringInput `pulumi:"entry"`
}

func (GetEndpointsEndpointAclPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpointAclPolicy)(nil)).Elem()
}

func (i GetEndpointsEndpointAclPolicyArgs) ToGetEndpointsEndpointAclPolicyOutput() GetEndpointsEndpointAclPolicyOutput {
	return i.ToGetEndpointsEndpointAclPolicyOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointAclPolicyArgs) ToGetEndpointsEndpointAclPolicyOutputWithContext(ctx context.Context) GetEndpointsEndpointAclPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointAclPolicyOutput)
}

// GetEndpointsEndpointAclPolicyArrayInput is an input type that accepts GetEndpointsEndpointAclPolicyArray and GetEndpointsEndpointAclPolicyArrayOutput values.
// You can construct a concrete instance of `GetEndpointsEndpointAclPolicyArrayInput` via:
//
//	GetEndpointsEndpointAclPolicyArray{ GetEndpointsEndpointAclPolicyArgs{...} }
type GetEndpointsEndpointAclPolicyArrayInput interface {
	pulumi.Input

	ToGetEndpointsEndpointAclPolicyArrayOutput() GetEndpointsEndpointAclPolicyArrayOutput
	ToGetEndpointsEndpointAclPolicyArrayOutputWithContext(context.Context) GetEndpointsEndpointAclPolicyArrayOutput
}

type GetEndpointsEndpointAclPolicyArray []GetEndpointsEndpointAclPolicyInput

func (GetEndpointsEndpointAclPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpointAclPolicy)(nil)).Elem()
}

func (i GetEndpointsEndpointAclPolicyArray) ToGetEndpointsEndpointAclPolicyArrayOutput() GetEndpointsEndpointAclPolicyArrayOutput {
	return i.ToGetEndpointsEndpointAclPolicyArrayOutputWithContext(context.Background())
}

func (i GetEndpointsEndpointAclPolicyArray) ToGetEndpointsEndpointAclPolicyArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointAclPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetEndpointsEndpointAclPolicyArrayOutput)
}

type GetEndpointsEndpointAclPolicyOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointAclPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsEndpointAclPolicy)(nil)).Elem()
}

func (o GetEndpointsEndpointAclPolicyOutput) ToGetEndpointsEndpointAclPolicyOutput() GetEndpointsEndpointAclPolicyOutput {
	return o
}

func (o GetEndpointsEndpointAclPolicyOutput) ToGetEndpointsEndpointAclPolicyOutputWithContext(ctx context.Context) GetEndpointsEndpointAclPolicyOutput {
	return o
}

// The description of the acl policy.
func (o GetEndpointsEndpointAclPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointAclPolicy) string { return v.Description }).(pulumi.StringOutput)
}

// The ip of the acl policy.
func (o GetEndpointsEndpointAclPolicyOutput) Entry() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsEndpointAclPolicy) string { return v.Entry }).(pulumi.StringOutput)
}

type GetEndpointsEndpointAclPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetEndpointsEndpointAclPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetEndpointsEndpointAclPolicy)(nil)).Elem()
}

func (o GetEndpointsEndpointAclPolicyArrayOutput) ToGetEndpointsEndpointAclPolicyArrayOutput() GetEndpointsEndpointAclPolicyArrayOutput {
	return o
}

func (o GetEndpointsEndpointAclPolicyArrayOutput) ToGetEndpointsEndpointAclPolicyArrayOutputWithContext(ctx context.Context) GetEndpointsEndpointAclPolicyArrayOutput {
	return o
}

func (o GetEndpointsEndpointAclPolicyArrayOutput) Index(i pulumi.IntInput) GetEndpointsEndpointAclPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetEndpointsEndpointAclPolicy {
		return vs[0].([]GetEndpointsEndpointAclPolicy)[vs[1].(int)]
	}).(GetEndpointsEndpointAclPolicyOutput)
}

type GetNamespacesNamespace struct {
	// The time when namespace created.
	CreateTime string `pulumi:"createTime"`
	// The name of OCI repository.
	Name string `pulumi:"name"`
	// The ProjectName of the CrNamespace.
	Project string `pulumi:"project"`
}

// GetNamespacesNamespaceInput is an input type that accepts GetNamespacesNamespaceArgs and GetNamespacesNamespaceOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceInput` via:
//
//	GetNamespacesNamespaceArgs{...}
type GetNamespacesNamespaceInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput
	ToGetNamespacesNamespaceOutputWithContext(context.Context) GetNamespacesNamespaceOutput
}

type GetNamespacesNamespaceArgs struct {
	// The time when namespace created.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The name of OCI repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The ProjectName of the CrNamespace.
	Project pulumi.StringInput `pulumi:"project"`
}

func (GetNamespacesNamespaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return i.ToGetNamespacesNamespaceOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArgs) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceOutput)
}

// GetNamespacesNamespaceArrayInput is an input type that accepts GetNamespacesNamespaceArray and GetNamespacesNamespaceArrayOutput values.
// You can construct a concrete instance of `GetNamespacesNamespaceArrayInput` via:
//
//	GetNamespacesNamespaceArray{ GetNamespacesNamespaceArgs{...} }
type GetNamespacesNamespaceArrayInput interface {
	pulumi.Input

	ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput
	ToGetNamespacesNamespaceArrayOutputWithContext(context.Context) GetNamespacesNamespaceArrayOutput
}

type GetNamespacesNamespaceArray []GetNamespacesNamespaceInput

func (GetNamespacesNamespaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return i.ToGetNamespacesNamespaceArrayOutputWithContext(context.Background())
}

func (i GetNamespacesNamespaceArray) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNamespacesNamespaceArrayOutput)
}

type GetNamespacesNamespaceOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutput() GetNamespacesNamespaceOutput {
	return o
}

func (o GetNamespacesNamespaceOutput) ToGetNamespacesNamespaceOutputWithContext(ctx context.Context) GetNamespacesNamespaceOutput {
	return o
}

// The time when namespace created.
func (o GetNamespacesNamespaceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The name of OCI repository.
func (o GetNamespacesNamespaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Name }).(pulumi.StringOutput)
}

// The ProjectName of the CrNamespace.
func (o GetNamespacesNamespaceOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetNamespacesNamespace) string { return v.Project }).(pulumi.StringOutput)
}

type GetNamespacesNamespaceArrayOutput struct{ *pulumi.OutputState }

func (GetNamespacesNamespaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNamespacesNamespace)(nil)).Elem()
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutput() GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) ToGetNamespacesNamespaceArrayOutputWithContext(ctx context.Context) GetNamespacesNamespaceArrayOutput {
	return o
}

func (o GetNamespacesNamespaceArrayOutput) Index(i pulumi.IntInput) GetNamespacesNamespaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNamespacesNamespace {
		return vs[0].([]GetNamespacesNamespace)[vs[1].(int)]
	}).(GetNamespacesNamespaceOutput)
}

type GetRegistriesRegistry struct {
	// The charge type of registry.
	ChargeType string `pulumi:"chargeType"`
	// The creation time of registry.
	CreateTime string `pulumi:"createTime"`
	// The domain of registry.
	Domains []GetRegistriesRegistryDomain `pulumi:"domains"`
	// The name of registry.
	Name string `pulumi:"name"`
	// The ProjectName of the cr registry.
	Project string `pulumi:"project"`
	// The tags of cr registry.
	ResourceTags []GetRegistriesRegistryResourceTag `pulumi:"resourceTags"`
	// The status of registry.
	Status GetRegistriesRegistryStatus `pulumi:"status"`
	// The type of registry.
	Type string `pulumi:"type"`
	// The status of user.
	UserStatus string `pulumi:"userStatus"`
	// The username of cr instance.
	Username string `pulumi:"username"`
}

// GetRegistriesRegistryInput is an input type that accepts GetRegistriesRegistryArgs and GetRegistriesRegistryOutput values.
// You can construct a concrete instance of `GetRegistriesRegistryInput` via:
//
//	GetRegistriesRegistryArgs{...}
type GetRegistriesRegistryInput interface {
	pulumi.Input

	ToGetRegistriesRegistryOutput() GetRegistriesRegistryOutput
	ToGetRegistriesRegistryOutputWithContext(context.Context) GetRegistriesRegistryOutput
}

type GetRegistriesRegistryArgs struct {
	// The charge type of registry.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The creation time of registry.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The domain of registry.
	Domains GetRegistriesRegistryDomainArrayInput `pulumi:"domains"`
	// The name of registry.
	Name pulumi.StringInput `pulumi:"name"`
	// The ProjectName of the cr registry.
	Project pulumi.StringInput `pulumi:"project"`
	// The tags of cr registry.
	ResourceTags GetRegistriesRegistryResourceTagArrayInput `pulumi:"resourceTags"`
	// The status of registry.
	Status GetRegistriesRegistryStatusInput `pulumi:"status"`
	// The type of registry.
	Type pulumi.StringInput `pulumi:"type"`
	// The status of user.
	UserStatus pulumi.StringInput `pulumi:"userStatus"`
	// The username of cr instance.
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetRegistriesRegistryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesRegistry)(nil)).Elem()
}

func (i GetRegistriesRegistryArgs) ToGetRegistriesRegistryOutput() GetRegistriesRegistryOutput {
	return i.ToGetRegistriesRegistryOutputWithContext(context.Background())
}

func (i GetRegistriesRegistryArgs) ToGetRegistriesRegistryOutputWithContext(ctx context.Context) GetRegistriesRegistryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesRegistryOutput)
}

// GetRegistriesRegistryArrayInput is an input type that accepts GetRegistriesRegistryArray and GetRegistriesRegistryArrayOutput values.
// You can construct a concrete instance of `GetRegistriesRegistryArrayInput` via:
//
//	GetRegistriesRegistryArray{ GetRegistriesRegistryArgs{...} }
type GetRegistriesRegistryArrayInput interface {
	pulumi.Input

	ToGetRegistriesRegistryArrayOutput() GetRegistriesRegistryArrayOutput
	ToGetRegistriesRegistryArrayOutputWithContext(context.Context) GetRegistriesRegistryArrayOutput
}

type GetRegistriesRegistryArray []GetRegistriesRegistryInput

func (GetRegistriesRegistryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesRegistry)(nil)).Elem()
}

func (i GetRegistriesRegistryArray) ToGetRegistriesRegistryArrayOutput() GetRegistriesRegistryArrayOutput {
	return i.ToGetRegistriesRegistryArrayOutputWithContext(context.Background())
}

func (i GetRegistriesRegistryArray) ToGetRegistriesRegistryArrayOutputWithContext(ctx context.Context) GetRegistriesRegistryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesRegistryArrayOutput)
}

type GetRegistriesRegistryOutput struct{ *pulumi.OutputState }

func (GetRegistriesRegistryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesRegistry)(nil)).Elem()
}

func (o GetRegistriesRegistryOutput) ToGetRegistriesRegistryOutput() GetRegistriesRegistryOutput {
	return o
}

func (o GetRegistriesRegistryOutput) ToGetRegistriesRegistryOutputWithContext(ctx context.Context) GetRegistriesRegistryOutput {
	return o
}

// The charge type of registry.
func (o GetRegistriesRegistryOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The creation time of registry.
func (o GetRegistriesRegistryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The domain of registry.
func (o GetRegistriesRegistryOutput) Domains() GetRegistriesRegistryDomainArrayOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) []GetRegistriesRegistryDomain { return v.Domains }).(GetRegistriesRegistryDomainArrayOutput)
}

// The name of registry.
func (o GetRegistriesRegistryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) string { return v.Name }).(pulumi.StringOutput)
}

// The ProjectName of the cr registry.
func (o GetRegistriesRegistryOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) string { return v.Project }).(pulumi.StringOutput)
}

// The tags of cr registry.
func (o GetRegistriesRegistryOutput) ResourceTags() GetRegistriesRegistryResourceTagArrayOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) []GetRegistriesRegistryResourceTag { return v.ResourceTags }).(GetRegistriesRegistryResourceTagArrayOutput)
}

// The status of registry.
func (o GetRegistriesRegistryOutput) Status() GetRegistriesRegistryStatusOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) GetRegistriesRegistryStatus { return v.Status }).(GetRegistriesRegistryStatusOutput)
}

// The type of registry.
func (o GetRegistriesRegistryOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) string { return v.Type }).(pulumi.StringOutput)
}

// The status of user.
func (o GetRegistriesRegistryOutput) UserStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) string { return v.UserStatus }).(pulumi.StringOutput)
}

// The username of cr instance.
func (o GetRegistriesRegistryOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistry) string { return v.Username }).(pulumi.StringOutput)
}

type GetRegistriesRegistryArrayOutput struct{ *pulumi.OutputState }

func (GetRegistriesRegistryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesRegistry)(nil)).Elem()
}

func (o GetRegistriesRegistryArrayOutput) ToGetRegistriesRegistryArrayOutput() GetRegistriesRegistryArrayOutput {
	return o
}

func (o GetRegistriesRegistryArrayOutput) ToGetRegistriesRegistryArrayOutputWithContext(ctx context.Context) GetRegistriesRegistryArrayOutput {
	return o
}

func (o GetRegistriesRegistryArrayOutput) Index(i pulumi.IntInput) GetRegistriesRegistryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistriesRegistry {
		return vs[0].([]GetRegistriesRegistry)[vs[1].(int)]
	}).(GetRegistriesRegistryOutput)
}

type GetRegistriesRegistryDomain struct {
	// The domain of registry.
	Domain string `pulumi:"domain"`
	// The type of registry.
	Type string `pulumi:"type"`
}

// GetRegistriesRegistryDomainInput is an input type that accepts GetRegistriesRegistryDomainArgs and GetRegistriesRegistryDomainOutput values.
// You can construct a concrete instance of `GetRegistriesRegistryDomainInput` via:
//
//	GetRegistriesRegistryDomainArgs{...}
type GetRegistriesRegistryDomainInput interface {
	pulumi.Input

	ToGetRegistriesRegistryDomainOutput() GetRegistriesRegistryDomainOutput
	ToGetRegistriesRegistryDomainOutputWithContext(context.Context) GetRegistriesRegistryDomainOutput
}

type GetRegistriesRegistryDomainArgs struct {
	// The domain of registry.
	Domain pulumi.StringInput `pulumi:"domain"`
	// The type of registry.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetRegistriesRegistryDomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesRegistryDomain)(nil)).Elem()
}

func (i GetRegistriesRegistryDomainArgs) ToGetRegistriesRegistryDomainOutput() GetRegistriesRegistryDomainOutput {
	return i.ToGetRegistriesRegistryDomainOutputWithContext(context.Background())
}

func (i GetRegistriesRegistryDomainArgs) ToGetRegistriesRegistryDomainOutputWithContext(ctx context.Context) GetRegistriesRegistryDomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesRegistryDomainOutput)
}

// GetRegistriesRegistryDomainArrayInput is an input type that accepts GetRegistriesRegistryDomainArray and GetRegistriesRegistryDomainArrayOutput values.
// You can construct a concrete instance of `GetRegistriesRegistryDomainArrayInput` via:
//
//	GetRegistriesRegistryDomainArray{ GetRegistriesRegistryDomainArgs{...} }
type GetRegistriesRegistryDomainArrayInput interface {
	pulumi.Input

	ToGetRegistriesRegistryDomainArrayOutput() GetRegistriesRegistryDomainArrayOutput
	ToGetRegistriesRegistryDomainArrayOutputWithContext(context.Context) GetRegistriesRegistryDomainArrayOutput
}

type GetRegistriesRegistryDomainArray []GetRegistriesRegistryDomainInput

func (GetRegistriesRegistryDomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesRegistryDomain)(nil)).Elem()
}

func (i GetRegistriesRegistryDomainArray) ToGetRegistriesRegistryDomainArrayOutput() GetRegistriesRegistryDomainArrayOutput {
	return i.ToGetRegistriesRegistryDomainArrayOutputWithContext(context.Background())
}

func (i GetRegistriesRegistryDomainArray) ToGetRegistriesRegistryDomainArrayOutputWithContext(ctx context.Context) GetRegistriesRegistryDomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesRegistryDomainArrayOutput)
}

type GetRegistriesRegistryDomainOutput struct{ *pulumi.OutputState }

func (GetRegistriesRegistryDomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesRegistryDomain)(nil)).Elem()
}

func (o GetRegistriesRegistryDomainOutput) ToGetRegistriesRegistryDomainOutput() GetRegistriesRegistryDomainOutput {
	return o
}

func (o GetRegistriesRegistryDomainOutput) ToGetRegistriesRegistryDomainOutputWithContext(ctx context.Context) GetRegistriesRegistryDomainOutput {
	return o
}

// The domain of registry.
func (o GetRegistriesRegistryDomainOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistryDomain) string { return v.Domain }).(pulumi.StringOutput)
}

// The type of registry.
func (o GetRegistriesRegistryDomainOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistryDomain) string { return v.Type }).(pulumi.StringOutput)
}

type GetRegistriesRegistryDomainArrayOutput struct{ *pulumi.OutputState }

func (GetRegistriesRegistryDomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesRegistryDomain)(nil)).Elem()
}

func (o GetRegistriesRegistryDomainArrayOutput) ToGetRegistriesRegistryDomainArrayOutput() GetRegistriesRegistryDomainArrayOutput {
	return o
}

func (o GetRegistriesRegistryDomainArrayOutput) ToGetRegistriesRegistryDomainArrayOutputWithContext(ctx context.Context) GetRegistriesRegistryDomainArrayOutput {
	return o
}

func (o GetRegistriesRegistryDomainArrayOutput) Index(i pulumi.IntInput) GetRegistriesRegistryDomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistriesRegistryDomain {
		return vs[0].([]GetRegistriesRegistryDomain)[vs[1].(int)]
	}).(GetRegistriesRegistryDomainOutput)
}

type GetRegistriesRegistryResourceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetRegistriesRegistryResourceTagInput is an input type that accepts GetRegistriesRegistryResourceTagArgs and GetRegistriesRegistryResourceTagOutput values.
// You can construct a concrete instance of `GetRegistriesRegistryResourceTagInput` via:
//
//	GetRegistriesRegistryResourceTagArgs{...}
type GetRegistriesRegistryResourceTagInput interface {
	pulumi.Input

	ToGetRegistriesRegistryResourceTagOutput() GetRegistriesRegistryResourceTagOutput
	ToGetRegistriesRegistryResourceTagOutputWithContext(context.Context) GetRegistriesRegistryResourceTagOutput
}

type GetRegistriesRegistryResourceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetRegistriesRegistryResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesRegistryResourceTag)(nil)).Elem()
}

func (i GetRegistriesRegistryResourceTagArgs) ToGetRegistriesRegistryResourceTagOutput() GetRegistriesRegistryResourceTagOutput {
	return i.ToGetRegistriesRegistryResourceTagOutputWithContext(context.Background())
}

func (i GetRegistriesRegistryResourceTagArgs) ToGetRegistriesRegistryResourceTagOutputWithContext(ctx context.Context) GetRegistriesRegistryResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesRegistryResourceTagOutput)
}

// GetRegistriesRegistryResourceTagArrayInput is an input type that accepts GetRegistriesRegistryResourceTagArray and GetRegistriesRegistryResourceTagArrayOutput values.
// You can construct a concrete instance of `GetRegistriesRegistryResourceTagArrayInput` via:
//
//	GetRegistriesRegistryResourceTagArray{ GetRegistriesRegistryResourceTagArgs{...} }
type GetRegistriesRegistryResourceTagArrayInput interface {
	pulumi.Input

	ToGetRegistriesRegistryResourceTagArrayOutput() GetRegistriesRegistryResourceTagArrayOutput
	ToGetRegistriesRegistryResourceTagArrayOutputWithContext(context.Context) GetRegistriesRegistryResourceTagArrayOutput
}

type GetRegistriesRegistryResourceTagArray []GetRegistriesRegistryResourceTagInput

func (GetRegistriesRegistryResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesRegistryResourceTag)(nil)).Elem()
}

func (i GetRegistriesRegistryResourceTagArray) ToGetRegistriesRegistryResourceTagArrayOutput() GetRegistriesRegistryResourceTagArrayOutput {
	return i.ToGetRegistriesRegistryResourceTagArrayOutputWithContext(context.Background())
}

func (i GetRegistriesRegistryResourceTagArray) ToGetRegistriesRegistryResourceTagArrayOutputWithContext(ctx context.Context) GetRegistriesRegistryResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesRegistryResourceTagArrayOutput)
}

type GetRegistriesRegistryResourceTagOutput struct{ *pulumi.OutputState }

func (GetRegistriesRegistryResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesRegistryResourceTag)(nil)).Elem()
}

func (o GetRegistriesRegistryResourceTagOutput) ToGetRegistriesRegistryResourceTagOutput() GetRegistriesRegistryResourceTagOutput {
	return o
}

func (o GetRegistriesRegistryResourceTagOutput) ToGetRegistriesRegistryResourceTagOutputWithContext(ctx context.Context) GetRegistriesRegistryResourceTagOutput {
	return o
}

// The Key of Tags.
func (o GetRegistriesRegistryResourceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistryResourceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetRegistriesRegistryResourceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistryResourceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetRegistriesRegistryResourceTagArrayOutput struct{ *pulumi.OutputState }

func (GetRegistriesRegistryResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesRegistryResourceTag)(nil)).Elem()
}

func (o GetRegistriesRegistryResourceTagArrayOutput) ToGetRegistriesRegistryResourceTagArrayOutput() GetRegistriesRegistryResourceTagArrayOutput {
	return o
}

func (o GetRegistriesRegistryResourceTagArrayOutput) ToGetRegistriesRegistryResourceTagArrayOutputWithContext(ctx context.Context) GetRegistriesRegistryResourceTagArrayOutput {
	return o
}

func (o GetRegistriesRegistryResourceTagArrayOutput) Index(i pulumi.IntInput) GetRegistriesRegistryResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistriesRegistryResourceTag {
		return vs[0].([]GetRegistriesRegistryResourceTag)[vs[1].(int)]
	}).(GetRegistriesRegistryResourceTagOutput)
}

type GetRegistriesRegistryStatus struct {
	// The condition of registry.
	Conditions []string `pulumi:"conditions"`
	// The phase status of registry.
	Phase string `pulumi:"phase"`
}

// GetRegistriesRegistryStatusInput is an input type that accepts GetRegistriesRegistryStatusArgs and GetRegistriesRegistryStatusOutput values.
// You can construct a concrete instance of `GetRegistriesRegistryStatusInput` via:
//
//	GetRegistriesRegistryStatusArgs{...}
type GetRegistriesRegistryStatusInput interface {
	pulumi.Input

	ToGetRegistriesRegistryStatusOutput() GetRegistriesRegistryStatusOutput
	ToGetRegistriesRegistryStatusOutputWithContext(context.Context) GetRegistriesRegistryStatusOutput
}

type GetRegistriesRegistryStatusArgs struct {
	// The condition of registry.
	Conditions pulumi.StringArrayInput `pulumi:"conditions"`
	// The phase status of registry.
	Phase pulumi.StringInput `pulumi:"phase"`
}

func (GetRegistriesRegistryStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesRegistryStatus)(nil)).Elem()
}

func (i GetRegistriesRegistryStatusArgs) ToGetRegistriesRegistryStatusOutput() GetRegistriesRegistryStatusOutput {
	return i.ToGetRegistriesRegistryStatusOutputWithContext(context.Background())
}

func (i GetRegistriesRegistryStatusArgs) ToGetRegistriesRegistryStatusOutputWithContext(ctx context.Context) GetRegistriesRegistryStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesRegistryStatusOutput)
}

type GetRegistriesRegistryStatusOutput struct{ *pulumi.OutputState }

func (GetRegistriesRegistryStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesRegistryStatus)(nil)).Elem()
}

func (o GetRegistriesRegistryStatusOutput) ToGetRegistriesRegistryStatusOutput() GetRegistriesRegistryStatusOutput {
	return o
}

func (o GetRegistriesRegistryStatusOutput) ToGetRegistriesRegistryStatusOutputWithContext(ctx context.Context) GetRegistriesRegistryStatusOutput {
	return o
}

// The condition of registry.
func (o GetRegistriesRegistryStatusOutput) Conditions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegistriesRegistryStatus) []string { return v.Conditions }).(pulumi.StringArrayOutput)
}

// The phase status of registry.
func (o GetRegistriesRegistryStatusOutput) Phase() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesRegistryStatus) string { return v.Phase }).(pulumi.StringOutput)
}

type GetRegistriesResourceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Values []string `pulumi:"values"`
}

// GetRegistriesResourceTagInput is an input type that accepts GetRegistriesResourceTagArgs and GetRegistriesResourceTagOutput values.
// You can construct a concrete instance of `GetRegistriesResourceTagInput` via:
//
//	GetRegistriesResourceTagArgs{...}
type GetRegistriesResourceTagInput interface {
	pulumi.Input

	ToGetRegistriesResourceTagOutput() GetRegistriesResourceTagOutput
	ToGetRegistriesResourceTagOutputWithContext(context.Context) GetRegistriesResourceTagOutput
}

type GetRegistriesResourceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (GetRegistriesResourceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesResourceTag)(nil)).Elem()
}

func (i GetRegistriesResourceTagArgs) ToGetRegistriesResourceTagOutput() GetRegistriesResourceTagOutput {
	return i.ToGetRegistriesResourceTagOutputWithContext(context.Background())
}

func (i GetRegistriesResourceTagArgs) ToGetRegistriesResourceTagOutputWithContext(ctx context.Context) GetRegistriesResourceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesResourceTagOutput)
}

// GetRegistriesResourceTagArrayInput is an input type that accepts GetRegistriesResourceTagArray and GetRegistriesResourceTagArrayOutput values.
// You can construct a concrete instance of `GetRegistriesResourceTagArrayInput` via:
//
//	GetRegistriesResourceTagArray{ GetRegistriesResourceTagArgs{...} }
type GetRegistriesResourceTagArrayInput interface {
	pulumi.Input

	ToGetRegistriesResourceTagArrayOutput() GetRegistriesResourceTagArrayOutput
	ToGetRegistriesResourceTagArrayOutputWithContext(context.Context) GetRegistriesResourceTagArrayOutput
}

type GetRegistriesResourceTagArray []GetRegistriesResourceTagInput

func (GetRegistriesResourceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesResourceTag)(nil)).Elem()
}

func (i GetRegistriesResourceTagArray) ToGetRegistriesResourceTagArrayOutput() GetRegistriesResourceTagArrayOutput {
	return i.ToGetRegistriesResourceTagArrayOutputWithContext(context.Background())
}

func (i GetRegistriesResourceTagArray) ToGetRegistriesResourceTagArrayOutputWithContext(ctx context.Context) GetRegistriesResourceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesResourceTagArrayOutput)
}

type GetRegistriesResourceTagOutput struct{ *pulumi.OutputState }

func (GetRegistriesResourceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesResourceTag)(nil)).Elem()
}

func (o GetRegistriesResourceTagOutput) ToGetRegistriesResourceTagOutput() GetRegistriesResourceTagOutput {
	return o
}

func (o GetRegistriesResourceTagOutput) ToGetRegistriesResourceTagOutputWithContext(ctx context.Context) GetRegistriesResourceTagOutput {
	return o
}

// The Key of Tags.
func (o GetRegistriesResourceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegistriesResourceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetRegistriesResourceTagOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRegistriesResourceTag) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type GetRegistriesResourceTagArrayOutput struct{ *pulumi.OutputState }

func (GetRegistriesResourceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesResourceTag)(nil)).Elem()
}

func (o GetRegistriesResourceTagArrayOutput) ToGetRegistriesResourceTagArrayOutput() GetRegistriesResourceTagArrayOutput {
	return o
}

func (o GetRegistriesResourceTagArrayOutput) ToGetRegistriesResourceTagArrayOutputWithContext(ctx context.Context) GetRegistriesResourceTagArrayOutput {
	return o
}

func (o GetRegistriesResourceTagArrayOutput) Index(i pulumi.IntInput) GetRegistriesResourceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistriesResourceTag {
		return vs[0].([]GetRegistriesResourceTag)[vs[1].(int)]
	}).(GetRegistriesResourceTagOutput)
}

type GetRegistriesStatus struct {
	// The condition of registry.
	Condition *string `pulumi:"condition"`
	// The phase of status.
	Phase *string `pulumi:"phase"`
}

// GetRegistriesStatusInput is an input type that accepts GetRegistriesStatusArgs and GetRegistriesStatusOutput values.
// You can construct a concrete instance of `GetRegistriesStatusInput` via:
//
//	GetRegistriesStatusArgs{...}
type GetRegistriesStatusInput interface {
	pulumi.Input

	ToGetRegistriesStatusOutput() GetRegistriesStatusOutput
	ToGetRegistriesStatusOutputWithContext(context.Context) GetRegistriesStatusOutput
}

type GetRegistriesStatusArgs struct {
	// The condition of registry.
	Condition pulumi.StringPtrInput `pulumi:"condition"`
	// The phase of status.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (GetRegistriesStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesStatus)(nil)).Elem()
}

func (i GetRegistriesStatusArgs) ToGetRegistriesStatusOutput() GetRegistriesStatusOutput {
	return i.ToGetRegistriesStatusOutputWithContext(context.Background())
}

func (i GetRegistriesStatusArgs) ToGetRegistriesStatusOutputWithContext(ctx context.Context) GetRegistriesStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesStatusOutput)
}

// GetRegistriesStatusArrayInput is an input type that accepts GetRegistriesStatusArray and GetRegistriesStatusArrayOutput values.
// You can construct a concrete instance of `GetRegistriesStatusArrayInput` via:
//
//	GetRegistriesStatusArray{ GetRegistriesStatusArgs{...} }
type GetRegistriesStatusArrayInput interface {
	pulumi.Input

	ToGetRegistriesStatusArrayOutput() GetRegistriesStatusArrayOutput
	ToGetRegistriesStatusArrayOutputWithContext(context.Context) GetRegistriesStatusArrayOutput
}

type GetRegistriesStatusArray []GetRegistriesStatusInput

func (GetRegistriesStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesStatus)(nil)).Elem()
}

func (i GetRegistriesStatusArray) ToGetRegistriesStatusArrayOutput() GetRegistriesStatusArrayOutput {
	return i.ToGetRegistriesStatusArrayOutputWithContext(context.Background())
}

func (i GetRegistriesStatusArray) ToGetRegistriesStatusArrayOutputWithContext(ctx context.Context) GetRegistriesStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegistriesStatusArrayOutput)
}

type GetRegistriesStatusOutput struct{ *pulumi.OutputState }

func (GetRegistriesStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegistriesStatus)(nil)).Elem()
}

func (o GetRegistriesStatusOutput) ToGetRegistriesStatusOutput() GetRegistriesStatusOutput {
	return o
}

func (o GetRegistriesStatusOutput) ToGetRegistriesStatusOutputWithContext(ctx context.Context) GetRegistriesStatusOutput {
	return o
}

// The condition of registry.
func (o GetRegistriesStatusOutput) Condition() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegistriesStatus) *string { return v.Condition }).(pulumi.StringPtrOutput)
}

// The phase of status.
func (o GetRegistriesStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetRegistriesStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type GetRegistriesStatusArrayOutput struct{ *pulumi.OutputState }

func (GetRegistriesStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegistriesStatus)(nil)).Elem()
}

func (o GetRegistriesStatusArrayOutput) ToGetRegistriesStatusArrayOutput() GetRegistriesStatusArrayOutput {
	return o
}

func (o GetRegistriesStatusArrayOutput) ToGetRegistriesStatusArrayOutputWithContext(ctx context.Context) GetRegistriesStatusArrayOutput {
	return o
}

func (o GetRegistriesStatusArrayOutput) Index(i pulumi.IntInput) GetRegistriesStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegistriesStatus {
		return vs[0].([]GetRegistriesStatus)[vs[1].(int)]
	}).(GetRegistriesStatusOutput)
}

type GetRepositoriesRepository struct {
	// The access level of repository.
	AccessLevel string `pulumi:"accessLevel"`
	// The creation time of repository.
	CreateTime string `pulumi:"createTime"`
	// The description of repository.
	Description string `pulumi:"description"`
	// The name of repository.
	Name string `pulumi:"name"`
	// The namespace of repository.
	Namespace string `pulumi:"namespace"`
	// The last update time of repository.
	UpdateTime string `pulumi:"updateTime"`
}

// GetRepositoriesRepositoryInput is an input type that accepts GetRepositoriesRepositoryArgs and GetRepositoriesRepositoryOutput values.
// You can construct a concrete instance of `GetRepositoriesRepositoryInput` via:
//
//	GetRepositoriesRepositoryArgs{...}
type GetRepositoriesRepositoryInput interface {
	pulumi.Input

	ToGetRepositoriesRepositoryOutput() GetRepositoriesRepositoryOutput
	ToGetRepositoriesRepositoryOutputWithContext(context.Context) GetRepositoriesRepositoryOutput
}

type GetRepositoriesRepositoryArgs struct {
	// The access level of repository.
	AccessLevel pulumi.StringInput `pulumi:"accessLevel"`
	// The creation time of repository.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The description of repository.
	Description pulumi.StringInput `pulumi:"description"`
	// The name of repository.
	Name pulumi.StringInput `pulumi:"name"`
	// The namespace of repository.
	Namespace pulumi.StringInput `pulumi:"namespace"`
	// The last update time of repository.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (GetRepositoriesRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoriesRepository)(nil)).Elem()
}

func (i GetRepositoriesRepositoryArgs) ToGetRepositoriesRepositoryOutput() GetRepositoriesRepositoryOutput {
	return i.ToGetRepositoriesRepositoryOutputWithContext(context.Background())
}

func (i GetRepositoriesRepositoryArgs) ToGetRepositoriesRepositoryOutputWithContext(ctx context.Context) GetRepositoriesRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoriesRepositoryOutput)
}

// GetRepositoriesRepositoryArrayInput is an input type that accepts GetRepositoriesRepositoryArray and GetRepositoriesRepositoryArrayOutput values.
// You can construct a concrete instance of `GetRepositoriesRepositoryArrayInput` via:
//
//	GetRepositoriesRepositoryArray{ GetRepositoriesRepositoryArgs{...} }
type GetRepositoriesRepositoryArrayInput interface {
	pulumi.Input

	ToGetRepositoriesRepositoryArrayOutput() GetRepositoriesRepositoryArrayOutput
	ToGetRepositoriesRepositoryArrayOutputWithContext(context.Context) GetRepositoriesRepositoryArrayOutput
}

type GetRepositoriesRepositoryArray []GetRepositoriesRepositoryInput

func (GetRepositoriesRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoriesRepository)(nil)).Elem()
}

func (i GetRepositoriesRepositoryArray) ToGetRepositoriesRepositoryArrayOutput() GetRepositoriesRepositoryArrayOutput {
	return i.ToGetRepositoriesRepositoryArrayOutputWithContext(context.Background())
}

func (i GetRepositoriesRepositoryArray) ToGetRepositoriesRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoriesRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRepositoriesRepositoryArrayOutput)
}

type GetRepositoriesRepositoryOutput struct{ *pulumi.OutputState }

func (GetRepositoriesRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRepositoriesRepository)(nil)).Elem()
}

func (o GetRepositoriesRepositoryOutput) ToGetRepositoriesRepositoryOutput() GetRepositoriesRepositoryOutput {
	return o
}

func (o GetRepositoriesRepositoryOutput) ToGetRepositoriesRepositoryOutputWithContext(ctx context.Context) GetRepositoriesRepositoryOutput {
	return o
}

// The access level of repository.
func (o GetRepositoriesRepositoryOutput) AccessLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.AccessLevel }).(pulumi.StringOutput)
}

// The creation time of repository.
func (o GetRepositoriesRepositoryOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of repository.
func (o GetRepositoriesRepositoryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.Description }).(pulumi.StringOutput)
}

// The name of repository.
func (o GetRepositoriesRepositoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.Name }).(pulumi.StringOutput)
}

// The namespace of repository.
func (o GetRepositoriesRepositoryOutput) Namespace() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.Namespace }).(pulumi.StringOutput)
}

// The last update time of repository.
func (o GetRepositoriesRepositoryOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetRepositoriesRepository) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type GetRepositoriesRepositoryArrayOutput struct{ *pulumi.OutputState }

func (GetRepositoriesRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRepositoriesRepository)(nil)).Elem()
}

func (o GetRepositoriesRepositoryArrayOutput) ToGetRepositoriesRepositoryArrayOutput() GetRepositoriesRepositoryArrayOutput {
	return o
}

func (o GetRepositoriesRepositoryArrayOutput) ToGetRepositoriesRepositoryArrayOutputWithContext(ctx context.Context) GetRepositoriesRepositoryArrayOutput {
	return o
}

func (o GetRepositoriesRepositoryArrayOutput) Index(i pulumi.IntInput) GetRepositoriesRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRepositoriesRepository {
		return vs[0].([]GetRepositoriesRepository)[vs[1].(int)]
	}).(GetRepositoriesRepositoryOutput)
}

type GetTagsTag struct {
	// The chart attribute,valid when tag type is Chart.
	ChartAttribute GetTagsTagChartAttribute `pulumi:"chartAttribute"`
	// The digest of image.
	Digest string `pulumi:"digest"`
	// The list of image attributes,valid when tag type is Image.
	ImageAttributes []GetTagsTagImageAttribute `pulumi:"imageAttributes"`
	// The name of OCI product tag.
	Name string `pulumi:"name"`
	// The last push time of OCI product.
	PushTime string `pulumi:"pushTime"`
	// The size of OCI product.
	Size int `pulumi:"size"`
	// The type of OCI product tag.
	Type string `pulumi:"type"`
}

// GetTagsTagInput is an input type that accepts GetTagsTagArgs and GetTagsTagOutput values.
// You can construct a concrete instance of `GetTagsTagInput` via:
//
//	GetTagsTagArgs{...}
type GetTagsTagInput interface {
	pulumi.Input

	ToGetTagsTagOutput() GetTagsTagOutput
	ToGetTagsTagOutputWithContext(context.Context) GetTagsTagOutput
}

type GetTagsTagArgs struct {
	// The chart attribute,valid when tag type is Chart.
	ChartAttribute GetTagsTagChartAttributeInput `pulumi:"chartAttribute"`
	// The digest of image.
	Digest pulumi.StringInput `pulumi:"digest"`
	// The list of image attributes,valid when tag type is Image.
	ImageAttributes GetTagsTagImageAttributeArrayInput `pulumi:"imageAttributes"`
	// The name of OCI product tag.
	Name pulumi.StringInput `pulumi:"name"`
	// The last push time of OCI product.
	PushTime pulumi.StringInput `pulumi:"pushTime"`
	// The size of OCI product.
	Size pulumi.IntInput `pulumi:"size"`
	// The type of OCI product tag.
	Type pulumi.StringInput `pulumi:"type"`
}

func (GetTagsTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTag)(nil)).Elem()
}

func (i GetTagsTagArgs) ToGetTagsTagOutput() GetTagsTagOutput {
	return i.ToGetTagsTagOutputWithContext(context.Background())
}

func (i GetTagsTagArgs) ToGetTagsTagOutputWithContext(ctx context.Context) GetTagsTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTagOutput)
}

// GetTagsTagArrayInput is an input type that accepts GetTagsTagArray and GetTagsTagArrayOutput values.
// You can construct a concrete instance of `GetTagsTagArrayInput` via:
//
//	GetTagsTagArray{ GetTagsTagArgs{...} }
type GetTagsTagArrayInput interface {
	pulumi.Input

	ToGetTagsTagArrayOutput() GetTagsTagArrayOutput
	ToGetTagsTagArrayOutputWithContext(context.Context) GetTagsTagArrayOutput
}

type GetTagsTagArray []GetTagsTagInput

func (GetTagsTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsTag)(nil)).Elem()
}

func (i GetTagsTagArray) ToGetTagsTagArrayOutput() GetTagsTagArrayOutput {
	return i.ToGetTagsTagArrayOutputWithContext(context.Background())
}

func (i GetTagsTagArray) ToGetTagsTagArrayOutputWithContext(ctx context.Context) GetTagsTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTagArrayOutput)
}

type GetTagsTagOutput struct{ *pulumi.OutputState }

func (GetTagsTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTag)(nil)).Elem()
}

func (o GetTagsTagOutput) ToGetTagsTagOutput() GetTagsTagOutput {
	return o
}

func (o GetTagsTagOutput) ToGetTagsTagOutputWithContext(ctx context.Context) GetTagsTagOutput {
	return o
}

// The chart attribute,valid when tag type is Chart.
func (o GetTagsTagOutput) ChartAttribute() GetTagsTagChartAttributeOutput {
	return o.ApplyT(func(v GetTagsTag) GetTagsTagChartAttribute { return v.ChartAttribute }).(GetTagsTagChartAttributeOutput)
}

// The digest of image.
func (o GetTagsTagOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTag) string { return v.Digest }).(pulumi.StringOutput)
}

// The list of image attributes,valid when tag type is Image.
func (o GetTagsTagOutput) ImageAttributes() GetTagsTagImageAttributeArrayOutput {
	return o.ApplyT(func(v GetTagsTag) []GetTagsTagImageAttribute { return v.ImageAttributes }).(GetTagsTagImageAttributeArrayOutput)
}

// The name of OCI product tag.
func (o GetTagsTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTag) string { return v.Name }).(pulumi.StringOutput)
}

// The last push time of OCI product.
func (o GetTagsTagOutput) PushTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTag) string { return v.PushTime }).(pulumi.StringOutput)
}

// The size of OCI product.
func (o GetTagsTagOutput) Size() pulumi.IntOutput {
	return o.ApplyT(func(v GetTagsTag) int { return v.Size }).(pulumi.IntOutput)
}

// The type of OCI product tag.
func (o GetTagsTagOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTag) string { return v.Type }).(pulumi.StringOutput)
}

type GetTagsTagArrayOutput struct{ *pulumi.OutputState }

func (GetTagsTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsTag)(nil)).Elem()
}

func (o GetTagsTagArrayOutput) ToGetTagsTagArrayOutput() GetTagsTagArrayOutput {
	return o
}

func (o GetTagsTagArrayOutput) ToGetTagsTagArrayOutputWithContext(ctx context.Context) GetTagsTagArrayOutput {
	return o
}

func (o GetTagsTagArrayOutput) Index(i pulumi.IntInput) GetTagsTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTagsTag {
		return vs[0].([]GetTagsTag)[vs[1].(int)]
	}).(GetTagsTagOutput)
}

type GetTagsTagChartAttribute struct {
	// The Helm version.
	ApiVersion string `pulumi:"apiVersion"`
	// The name of OCI product tag.
	Name string `pulumi:"name"`
	// The Helm Chart version.
	Version string `pulumi:"version"`
}

// GetTagsTagChartAttributeInput is an input type that accepts GetTagsTagChartAttributeArgs and GetTagsTagChartAttributeOutput values.
// You can construct a concrete instance of `GetTagsTagChartAttributeInput` via:
//
//	GetTagsTagChartAttributeArgs{...}
type GetTagsTagChartAttributeInput interface {
	pulumi.Input

	ToGetTagsTagChartAttributeOutput() GetTagsTagChartAttributeOutput
	ToGetTagsTagChartAttributeOutputWithContext(context.Context) GetTagsTagChartAttributeOutput
}

type GetTagsTagChartAttributeArgs struct {
	// The Helm version.
	ApiVersion pulumi.StringInput `pulumi:"apiVersion"`
	// The name of OCI product tag.
	Name pulumi.StringInput `pulumi:"name"`
	// The Helm Chart version.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetTagsTagChartAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTagChartAttribute)(nil)).Elem()
}

func (i GetTagsTagChartAttributeArgs) ToGetTagsTagChartAttributeOutput() GetTagsTagChartAttributeOutput {
	return i.ToGetTagsTagChartAttributeOutputWithContext(context.Background())
}

func (i GetTagsTagChartAttributeArgs) ToGetTagsTagChartAttributeOutputWithContext(ctx context.Context) GetTagsTagChartAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTagChartAttributeOutput)
}

type GetTagsTagChartAttributeOutput struct{ *pulumi.OutputState }

func (GetTagsTagChartAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTagChartAttribute)(nil)).Elem()
}

func (o GetTagsTagChartAttributeOutput) ToGetTagsTagChartAttributeOutput() GetTagsTagChartAttributeOutput {
	return o
}

func (o GetTagsTagChartAttributeOutput) ToGetTagsTagChartAttributeOutputWithContext(ctx context.Context) GetTagsTagChartAttributeOutput {
	return o
}

// The Helm version.
func (o GetTagsTagChartAttributeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTagChartAttribute) string { return v.ApiVersion }).(pulumi.StringOutput)
}

// The name of OCI product tag.
func (o GetTagsTagChartAttributeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTagChartAttribute) string { return v.Name }).(pulumi.StringOutput)
}

// The Helm Chart version.
func (o GetTagsTagChartAttributeOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTagChartAttribute) string { return v.Version }).(pulumi.StringOutput)
}

type GetTagsTagImageAttribute struct {
	// The image architecture.
	Architecture string `pulumi:"architecture"`
	// The image author.
	Author string `pulumi:"author"`
	// The digest of image.
	Digest string `pulumi:"digest"`
	// The iamge os.
	Os string `pulumi:"os"`
}

// GetTagsTagImageAttributeInput is an input type that accepts GetTagsTagImageAttributeArgs and GetTagsTagImageAttributeOutput values.
// You can construct a concrete instance of `GetTagsTagImageAttributeInput` via:
//
//	GetTagsTagImageAttributeArgs{...}
type GetTagsTagImageAttributeInput interface {
	pulumi.Input

	ToGetTagsTagImageAttributeOutput() GetTagsTagImageAttributeOutput
	ToGetTagsTagImageAttributeOutputWithContext(context.Context) GetTagsTagImageAttributeOutput
}

type GetTagsTagImageAttributeArgs struct {
	// The image architecture.
	Architecture pulumi.StringInput `pulumi:"architecture"`
	// The image author.
	Author pulumi.StringInput `pulumi:"author"`
	// The digest of image.
	Digest pulumi.StringInput `pulumi:"digest"`
	// The iamge os.
	Os pulumi.StringInput `pulumi:"os"`
}

func (GetTagsTagImageAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTagImageAttribute)(nil)).Elem()
}

func (i GetTagsTagImageAttributeArgs) ToGetTagsTagImageAttributeOutput() GetTagsTagImageAttributeOutput {
	return i.ToGetTagsTagImageAttributeOutputWithContext(context.Background())
}

func (i GetTagsTagImageAttributeArgs) ToGetTagsTagImageAttributeOutputWithContext(ctx context.Context) GetTagsTagImageAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTagImageAttributeOutput)
}

// GetTagsTagImageAttributeArrayInput is an input type that accepts GetTagsTagImageAttributeArray and GetTagsTagImageAttributeArrayOutput values.
// You can construct a concrete instance of `GetTagsTagImageAttributeArrayInput` via:
//
//	GetTagsTagImageAttributeArray{ GetTagsTagImageAttributeArgs{...} }
type GetTagsTagImageAttributeArrayInput interface {
	pulumi.Input

	ToGetTagsTagImageAttributeArrayOutput() GetTagsTagImageAttributeArrayOutput
	ToGetTagsTagImageAttributeArrayOutputWithContext(context.Context) GetTagsTagImageAttributeArrayOutput
}

type GetTagsTagImageAttributeArray []GetTagsTagImageAttributeInput

func (GetTagsTagImageAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsTagImageAttribute)(nil)).Elem()
}

func (i GetTagsTagImageAttributeArray) ToGetTagsTagImageAttributeArrayOutput() GetTagsTagImageAttributeArrayOutput {
	return i.ToGetTagsTagImageAttributeArrayOutputWithContext(context.Background())
}

func (i GetTagsTagImageAttributeArray) ToGetTagsTagImageAttributeArrayOutputWithContext(ctx context.Context) GetTagsTagImageAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTagsTagImageAttributeArrayOutput)
}

type GetTagsTagImageAttributeOutput struct{ *pulumi.OutputState }

func (GetTagsTagImageAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTagsTagImageAttribute)(nil)).Elem()
}

func (o GetTagsTagImageAttributeOutput) ToGetTagsTagImageAttributeOutput() GetTagsTagImageAttributeOutput {
	return o
}

func (o GetTagsTagImageAttributeOutput) ToGetTagsTagImageAttributeOutputWithContext(ctx context.Context) GetTagsTagImageAttributeOutput {
	return o
}

// The image architecture.
func (o GetTagsTagImageAttributeOutput) Architecture() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTagImageAttribute) string { return v.Architecture }).(pulumi.StringOutput)
}

// The image author.
func (o GetTagsTagImageAttributeOutput) Author() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTagImageAttribute) string { return v.Author }).(pulumi.StringOutput)
}

// The digest of image.
func (o GetTagsTagImageAttributeOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTagImageAttribute) string { return v.Digest }).(pulumi.StringOutput)
}

// The iamge os.
func (o GetTagsTagImageAttributeOutput) Os() pulumi.StringOutput {
	return o.ApplyT(func(v GetTagsTagImageAttribute) string { return v.Os }).(pulumi.StringOutput)
}

type GetTagsTagImageAttributeArrayOutput struct{ *pulumi.OutputState }

func (GetTagsTagImageAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTagsTagImageAttribute)(nil)).Elem()
}

func (o GetTagsTagImageAttributeArrayOutput) ToGetTagsTagImageAttributeArrayOutput() GetTagsTagImageAttributeArrayOutput {
	return o
}

func (o GetTagsTagImageAttributeArrayOutput) ToGetTagsTagImageAttributeArrayOutputWithContext(ctx context.Context) GetTagsTagImageAttributeArrayOutput {
	return o
}

func (o GetTagsTagImageAttributeArrayOutput) Index(i pulumi.IntInput) GetTagsTagImageAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTagsTagImageAttribute {
		return vs[0].([]GetTagsTagImageAttribute)[vs[1].(int)]
	}).(GetTagsTagImageAttributeOutput)
}

type GetVpcEndpointsEndpoint struct {
	// The CR registry name.
	Registry string `pulumi:"registry"`
	// List of vpc information.
	Vpcs []GetVpcEndpointsEndpointVpc `pulumi:"vpcs"`
}

// GetVpcEndpointsEndpointInput is an input type that accepts GetVpcEndpointsEndpointArgs and GetVpcEndpointsEndpointOutput values.
// You can construct a concrete instance of `GetVpcEndpointsEndpointInput` via:
//
//	GetVpcEndpointsEndpointArgs{...}
type GetVpcEndpointsEndpointInput interface {
	pulumi.Input

	ToGetVpcEndpointsEndpointOutput() GetVpcEndpointsEndpointOutput
	ToGetVpcEndpointsEndpointOutputWithContext(context.Context) GetVpcEndpointsEndpointOutput
}

type GetVpcEndpointsEndpointArgs struct {
	// The CR registry name.
	Registry pulumi.StringInput `pulumi:"registry"`
	// List of vpc information.
	Vpcs GetVpcEndpointsEndpointVpcArrayInput `pulumi:"vpcs"`
}

func (GetVpcEndpointsEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcEndpointsEndpoint)(nil)).Elem()
}

func (i GetVpcEndpointsEndpointArgs) ToGetVpcEndpointsEndpointOutput() GetVpcEndpointsEndpointOutput {
	return i.ToGetVpcEndpointsEndpointOutputWithContext(context.Background())
}

func (i GetVpcEndpointsEndpointArgs) ToGetVpcEndpointsEndpointOutputWithContext(ctx context.Context) GetVpcEndpointsEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcEndpointsEndpointOutput)
}

// GetVpcEndpointsEndpointArrayInput is an input type that accepts GetVpcEndpointsEndpointArray and GetVpcEndpointsEndpointArrayOutput values.
// You can construct a concrete instance of `GetVpcEndpointsEndpointArrayInput` via:
//
//	GetVpcEndpointsEndpointArray{ GetVpcEndpointsEndpointArgs{...} }
type GetVpcEndpointsEndpointArrayInput interface {
	pulumi.Input

	ToGetVpcEndpointsEndpointArrayOutput() GetVpcEndpointsEndpointArrayOutput
	ToGetVpcEndpointsEndpointArrayOutputWithContext(context.Context) GetVpcEndpointsEndpointArrayOutput
}

type GetVpcEndpointsEndpointArray []GetVpcEndpointsEndpointInput

func (GetVpcEndpointsEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcEndpointsEndpoint)(nil)).Elem()
}

func (i GetVpcEndpointsEndpointArray) ToGetVpcEndpointsEndpointArrayOutput() GetVpcEndpointsEndpointArrayOutput {
	return i.ToGetVpcEndpointsEndpointArrayOutputWithContext(context.Background())
}

func (i GetVpcEndpointsEndpointArray) ToGetVpcEndpointsEndpointArrayOutputWithContext(ctx context.Context) GetVpcEndpointsEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcEndpointsEndpointArrayOutput)
}

type GetVpcEndpointsEndpointOutput struct{ *pulumi.OutputState }

func (GetVpcEndpointsEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcEndpointsEndpoint)(nil)).Elem()
}

func (o GetVpcEndpointsEndpointOutput) ToGetVpcEndpointsEndpointOutput() GetVpcEndpointsEndpointOutput {
	return o
}

func (o GetVpcEndpointsEndpointOutput) ToGetVpcEndpointsEndpointOutputWithContext(ctx context.Context) GetVpcEndpointsEndpointOutput {
	return o
}

// The CR registry name.
func (o GetVpcEndpointsEndpointOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcEndpointsEndpoint) string { return v.Registry }).(pulumi.StringOutput)
}

// List of vpc information.
func (o GetVpcEndpointsEndpointOutput) Vpcs() GetVpcEndpointsEndpointVpcArrayOutput {
	return o.ApplyT(func(v GetVpcEndpointsEndpoint) []GetVpcEndpointsEndpointVpc { return v.Vpcs }).(GetVpcEndpointsEndpointVpcArrayOutput)
}

type GetVpcEndpointsEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetVpcEndpointsEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcEndpointsEndpoint)(nil)).Elem()
}

func (o GetVpcEndpointsEndpointArrayOutput) ToGetVpcEndpointsEndpointArrayOutput() GetVpcEndpointsEndpointArrayOutput {
	return o
}

func (o GetVpcEndpointsEndpointArrayOutput) ToGetVpcEndpointsEndpointArrayOutputWithContext(ctx context.Context) GetVpcEndpointsEndpointArrayOutput {
	return o
}

func (o GetVpcEndpointsEndpointArrayOutput) Index(i pulumi.IntInput) GetVpcEndpointsEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcEndpointsEndpoint {
		return vs[0].([]GetVpcEndpointsEndpoint)[vs[1].(int)]
	}).(GetVpcEndpointsEndpointOutput)
}

type GetVpcEndpointsEndpointVpc struct {
	// The id of the account.
	AccountId int `pulumi:"accountId"`
	// The creation time.
	CreateTime string `pulumi:"createTime"`
	// The IP address of the mirror repository in the VPC.
	Ip string `pulumi:"ip"`
	// The region id.
	Region string `pulumi:"region"`
	// The status of the vpc endpoint.
	Status string `pulumi:"status"`
	// The ID of the subnet.
	SubnetId string `pulumi:"subnetId"`
	// The ID of the vpc.
	VpcId string `pulumi:"vpcId"`
}

// GetVpcEndpointsEndpointVpcInput is an input type that accepts GetVpcEndpointsEndpointVpcArgs and GetVpcEndpointsEndpointVpcOutput values.
// You can construct a concrete instance of `GetVpcEndpointsEndpointVpcInput` via:
//
//	GetVpcEndpointsEndpointVpcArgs{...}
type GetVpcEndpointsEndpointVpcInput interface {
	pulumi.Input

	ToGetVpcEndpointsEndpointVpcOutput() GetVpcEndpointsEndpointVpcOutput
	ToGetVpcEndpointsEndpointVpcOutputWithContext(context.Context) GetVpcEndpointsEndpointVpcOutput
}

type GetVpcEndpointsEndpointVpcArgs struct {
	// The id of the account.
	AccountId pulumi.IntInput `pulumi:"accountId"`
	// The creation time.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The IP address of the mirror repository in the VPC.
	Ip pulumi.StringInput `pulumi:"ip"`
	// The region id.
	Region pulumi.StringInput `pulumi:"region"`
	// The status of the vpc endpoint.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of the subnet.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// The ID of the vpc.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
}

func (GetVpcEndpointsEndpointVpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcEndpointsEndpointVpc)(nil)).Elem()
}

func (i GetVpcEndpointsEndpointVpcArgs) ToGetVpcEndpointsEndpointVpcOutput() GetVpcEndpointsEndpointVpcOutput {
	return i.ToGetVpcEndpointsEndpointVpcOutputWithContext(context.Background())
}

func (i GetVpcEndpointsEndpointVpcArgs) ToGetVpcEndpointsEndpointVpcOutputWithContext(ctx context.Context) GetVpcEndpointsEndpointVpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcEndpointsEndpointVpcOutput)
}

// GetVpcEndpointsEndpointVpcArrayInput is an input type that accepts GetVpcEndpointsEndpointVpcArray and GetVpcEndpointsEndpointVpcArrayOutput values.
// You can construct a concrete instance of `GetVpcEndpointsEndpointVpcArrayInput` via:
//
//	GetVpcEndpointsEndpointVpcArray{ GetVpcEndpointsEndpointVpcArgs{...} }
type GetVpcEndpointsEndpointVpcArrayInput interface {
	pulumi.Input

	ToGetVpcEndpointsEndpointVpcArrayOutput() GetVpcEndpointsEndpointVpcArrayOutput
	ToGetVpcEndpointsEndpointVpcArrayOutputWithContext(context.Context) GetVpcEndpointsEndpointVpcArrayOutput
}

type GetVpcEndpointsEndpointVpcArray []GetVpcEndpointsEndpointVpcInput

func (GetVpcEndpointsEndpointVpcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcEndpointsEndpointVpc)(nil)).Elem()
}

func (i GetVpcEndpointsEndpointVpcArray) ToGetVpcEndpointsEndpointVpcArrayOutput() GetVpcEndpointsEndpointVpcArrayOutput {
	return i.ToGetVpcEndpointsEndpointVpcArrayOutputWithContext(context.Background())
}

func (i GetVpcEndpointsEndpointVpcArray) ToGetVpcEndpointsEndpointVpcArrayOutputWithContext(ctx context.Context) GetVpcEndpointsEndpointVpcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVpcEndpointsEndpointVpcArrayOutput)
}

type GetVpcEndpointsEndpointVpcOutput struct{ *pulumi.OutputState }

func (GetVpcEndpointsEndpointVpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcEndpointsEndpointVpc)(nil)).Elem()
}

func (o GetVpcEndpointsEndpointVpcOutput) ToGetVpcEndpointsEndpointVpcOutput() GetVpcEndpointsEndpointVpcOutput {
	return o
}

func (o GetVpcEndpointsEndpointVpcOutput) ToGetVpcEndpointsEndpointVpcOutputWithContext(ctx context.Context) GetVpcEndpointsEndpointVpcOutput {
	return o
}

// The id of the account.
func (o GetVpcEndpointsEndpointVpcOutput) AccountId() pulumi.IntOutput {
	return o.ApplyT(func(v GetVpcEndpointsEndpointVpc) int { return v.AccountId }).(pulumi.IntOutput)
}

// The creation time.
func (o GetVpcEndpointsEndpointVpcOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcEndpointsEndpointVpc) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The IP address of the mirror repository in the VPC.
func (o GetVpcEndpointsEndpointVpcOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcEndpointsEndpointVpc) string { return v.Ip }).(pulumi.StringOutput)
}

// The region id.
func (o GetVpcEndpointsEndpointVpcOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcEndpointsEndpointVpc) string { return v.Region }).(pulumi.StringOutput)
}

// The status of the vpc endpoint.
func (o GetVpcEndpointsEndpointVpcOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcEndpointsEndpointVpc) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of the subnet.
func (o GetVpcEndpointsEndpointVpcOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcEndpointsEndpointVpc) string { return v.SubnetId }).(pulumi.StringOutput)
}

// The ID of the vpc.
func (o GetVpcEndpointsEndpointVpcOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcEndpointsEndpointVpc) string { return v.VpcId }).(pulumi.StringOutput)
}

type GetVpcEndpointsEndpointVpcArrayOutput struct{ *pulumi.OutputState }

func (GetVpcEndpointsEndpointVpcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVpcEndpointsEndpointVpc)(nil)).Elem()
}

func (o GetVpcEndpointsEndpointVpcArrayOutput) ToGetVpcEndpointsEndpointVpcArrayOutput() GetVpcEndpointsEndpointVpcArrayOutput {
	return o
}

func (o GetVpcEndpointsEndpointVpcArrayOutput) ToGetVpcEndpointsEndpointVpcArrayOutputWithContext(ctx context.Context) GetVpcEndpointsEndpointVpcArrayOutput {
	return o
}

func (o GetVpcEndpointsEndpointVpcArrayOutput) Index(i pulumi.IntInput) GetVpcEndpointsEndpointVpcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVpcEndpointsEndpointVpc {
		return vs[0].([]GetVpcEndpointsEndpointVpc)[vs[1].(int)]
	}).(GetVpcEndpointsEndpointVpcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationTokensTokenInput)(nil)).Elem(), AuthorizationTokensTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationTokensTokenArrayInput)(nil)).Elem(), AuthorizationTokensTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAclPolicyTypeInput)(nil)).Elem(), EndpointAclPolicyTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointAclPolicyTypeArrayInput)(nil)).Elem(), EndpointAclPolicyTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointInput)(nil)).Elem(), EndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointArrayInput)(nil)).Elem(), EndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointAclPolicyInput)(nil)).Elem(), EndpointsEndpointAclPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*EndpointsEndpointAclPolicyArrayInput)(nil)).Elem(), EndpointsEndpointAclPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespacesNamespaceInput)(nil)).Elem(), NamespacesNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NamespacesNamespaceArrayInput)(nil)).Elem(), NamespacesNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesRegistryInput)(nil)).Elem(), RegistriesRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesRegistryArrayInput)(nil)).Elem(), RegistriesRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesRegistryDomainInput)(nil)).Elem(), RegistriesRegistryDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesRegistryDomainArrayInput)(nil)).Elem(), RegistriesRegistryDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesRegistryResourceTagInput)(nil)).Elem(), RegistriesRegistryResourceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesRegistryResourceTagArrayInput)(nil)).Elem(), RegistriesRegistryResourceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesRegistryStatusInput)(nil)).Elem(), RegistriesRegistryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesResourceTagInput)(nil)).Elem(), RegistriesResourceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesResourceTagArrayInput)(nil)).Elem(), RegistriesResourceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesStatusInput)(nil)).Elem(), RegistriesStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistriesStatusArrayInput)(nil)).Elem(), RegistriesStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryDomainInput)(nil)).Elem(), RegistryDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryDomainArrayInput)(nil)).Elem(), RegistryDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryResourceTagInput)(nil)).Elem(), RegistryResourceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryResourceTagArrayInput)(nil)).Elem(), RegistryResourceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryStatusInput)(nil)).Elem(), RegistryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegistryStatusArrayInput)(nil)).Elem(), RegistryStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoriesRepositoryInput)(nil)).Elem(), RepositoriesRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RepositoriesRepositoryArrayInput)(nil)).Elem(), RepositoriesRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateStatusInput)(nil)).Elem(), StateStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StateStatusPtrInput)(nil)).Elem(), StateStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagChartAttributeInput)(nil)).Elem(), TagChartAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagChartAttributeArrayInput)(nil)).Elem(), TagChartAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagImageAttributeInput)(nil)).Elem(), TagImageAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagImageAttributeArrayInput)(nil)).Elem(), TagImageAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsTagInput)(nil)).Elem(), TagsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsTagArrayInput)(nil)).Elem(), TagsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsTagChartAttributeInput)(nil)).Elem(), TagsTagChartAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsTagImageAttributeInput)(nil)).Elem(), TagsTagImageAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TagsTagImageAttributeArrayInput)(nil)).Elem(), TagsTagImageAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcEndpointVpcInput)(nil)).Elem(), VpcEndpointVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcEndpointVpcArrayInput)(nil)).Elem(), VpcEndpointVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcEndpointsEndpointInput)(nil)).Elem(), VpcEndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcEndpointsEndpointArrayInput)(nil)).Elem(), VpcEndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcEndpointsEndpointVpcInput)(nil)).Elem(), VpcEndpointsEndpointVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VpcEndpointsEndpointVpcArrayInput)(nil)).Elem(), VpcEndpointsEndpointVpcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthorizationTokensTokenInput)(nil)).Elem(), GetAuthorizationTokensTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAuthorizationTokensTokenArrayInput)(nil)).Elem(), GetAuthorizationTokensTokenArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointInput)(nil)).Elem(), GetEndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointArrayInput)(nil)).Elem(), GetEndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointAclPolicyInput)(nil)).Elem(), GetEndpointsEndpointAclPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetEndpointsEndpointAclPolicyArrayInput)(nil)).Elem(), GetEndpointsEndpointAclPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceInput)(nil)).Elem(), GetNamespacesNamespaceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNamespacesNamespaceArrayInput)(nil)).Elem(), GetNamespacesNamespaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesRegistryInput)(nil)).Elem(), GetRegistriesRegistryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesRegistryArrayInput)(nil)).Elem(), GetRegistriesRegistryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesRegistryDomainInput)(nil)).Elem(), GetRegistriesRegistryDomainArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesRegistryDomainArrayInput)(nil)).Elem(), GetRegistriesRegistryDomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesRegistryResourceTagInput)(nil)).Elem(), GetRegistriesRegistryResourceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesRegistryResourceTagArrayInput)(nil)).Elem(), GetRegistriesRegistryResourceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesRegistryStatusInput)(nil)).Elem(), GetRegistriesRegistryStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesResourceTagInput)(nil)).Elem(), GetRegistriesResourceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesResourceTagArrayInput)(nil)).Elem(), GetRegistriesResourceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesStatusInput)(nil)).Elem(), GetRegistriesStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegistriesStatusArrayInput)(nil)).Elem(), GetRegistriesStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoriesRepositoryInput)(nil)).Elem(), GetRepositoriesRepositoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRepositoriesRepositoryArrayInput)(nil)).Elem(), GetRepositoriesRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsTagInput)(nil)).Elem(), GetTagsTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsTagArrayInput)(nil)).Elem(), GetTagsTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsTagChartAttributeInput)(nil)).Elem(), GetTagsTagChartAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsTagImageAttributeInput)(nil)).Elem(), GetTagsTagImageAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTagsTagImageAttributeArrayInput)(nil)).Elem(), GetTagsTagImageAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcEndpointsEndpointInput)(nil)).Elem(), GetVpcEndpointsEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcEndpointsEndpointArrayInput)(nil)).Elem(), GetVpcEndpointsEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcEndpointsEndpointVpcInput)(nil)).Elem(), GetVpcEndpointsEndpointVpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVpcEndpointsEndpointVpcArrayInput)(nil)).Elem(), GetVpcEndpointsEndpointVpcArray{})
	pulumi.RegisterOutputType(AuthorizationTokensTokenOutput{})
	pulumi.RegisterOutputType(AuthorizationTokensTokenArrayOutput{})
	pulumi.RegisterOutputType(EndpointAclPolicyTypeOutput{})
	pulumi.RegisterOutputType(EndpointAclPolicyTypeArrayOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointAclPolicyOutput{})
	pulumi.RegisterOutputType(EndpointsEndpointAclPolicyArrayOutput{})
	pulumi.RegisterOutputType(NamespacesNamespaceOutput{})
	pulumi.RegisterOutputType(NamespacesNamespaceArrayOutput{})
	pulumi.RegisterOutputType(RegistriesRegistryOutput{})
	pulumi.RegisterOutputType(RegistriesRegistryArrayOutput{})
	pulumi.RegisterOutputType(RegistriesRegistryDomainOutput{})
	pulumi.RegisterOutputType(RegistriesRegistryDomainArrayOutput{})
	pulumi.RegisterOutputType(RegistriesRegistryResourceTagOutput{})
	pulumi.RegisterOutputType(RegistriesRegistryResourceTagArrayOutput{})
	pulumi.RegisterOutputType(RegistriesRegistryStatusOutput{})
	pulumi.RegisterOutputType(RegistriesResourceTagOutput{})
	pulumi.RegisterOutputType(RegistriesResourceTagArrayOutput{})
	pulumi.RegisterOutputType(RegistriesStatusOutput{})
	pulumi.RegisterOutputType(RegistriesStatusArrayOutput{})
	pulumi.RegisterOutputType(RegistryDomainOutput{})
	pulumi.RegisterOutputType(RegistryDomainArrayOutput{})
	pulumi.RegisterOutputType(RegistryResourceTagOutput{})
	pulumi.RegisterOutputType(RegistryResourceTagArrayOutput{})
	pulumi.RegisterOutputType(RegistryStatusOutput{})
	pulumi.RegisterOutputType(RegistryStatusArrayOutput{})
	pulumi.RegisterOutputType(RepositoriesRepositoryOutput{})
	pulumi.RegisterOutputType(RepositoriesRepositoryArrayOutput{})
	pulumi.RegisterOutputType(StateStatusOutput{})
	pulumi.RegisterOutputType(StateStatusPtrOutput{})
	pulumi.RegisterOutputType(TagChartAttributeOutput{})
	pulumi.RegisterOutputType(TagChartAttributeArrayOutput{})
	pulumi.RegisterOutputType(TagImageAttributeOutput{})
	pulumi.RegisterOutputType(TagImageAttributeArrayOutput{})
	pulumi.RegisterOutputType(TagsTagOutput{})
	pulumi.RegisterOutputType(TagsTagArrayOutput{})
	pulumi.RegisterOutputType(TagsTagChartAttributeOutput{})
	pulumi.RegisterOutputType(TagsTagImageAttributeOutput{})
	pulumi.RegisterOutputType(TagsTagImageAttributeArrayOutput{})
	pulumi.RegisterOutputType(VpcEndpointVpcOutput{})
	pulumi.RegisterOutputType(VpcEndpointVpcArrayOutput{})
	pulumi.RegisterOutputType(VpcEndpointsEndpointOutput{})
	pulumi.RegisterOutputType(VpcEndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(VpcEndpointsEndpointVpcOutput{})
	pulumi.RegisterOutputType(VpcEndpointsEndpointVpcArrayOutput{})
	pulumi.RegisterOutputType(GetAuthorizationTokensTokenOutput{})
	pulumi.RegisterOutputType(GetAuthorizationTokensTokenArrayOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointAclPolicyOutput{})
	pulumi.RegisterOutputType(GetEndpointsEndpointAclPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceOutput{})
	pulumi.RegisterOutputType(GetNamespacesNamespaceArrayOutput{})
	pulumi.RegisterOutputType(GetRegistriesRegistryOutput{})
	pulumi.RegisterOutputType(GetRegistriesRegistryArrayOutput{})
	pulumi.RegisterOutputType(GetRegistriesRegistryDomainOutput{})
	pulumi.RegisterOutputType(GetRegistriesRegistryDomainArrayOutput{})
	pulumi.RegisterOutputType(GetRegistriesRegistryResourceTagOutput{})
	pulumi.RegisterOutputType(GetRegistriesRegistryResourceTagArrayOutput{})
	pulumi.RegisterOutputType(GetRegistriesRegistryStatusOutput{})
	pulumi.RegisterOutputType(GetRegistriesResourceTagOutput{})
	pulumi.RegisterOutputType(GetRegistriesResourceTagArrayOutput{})
	pulumi.RegisterOutputType(GetRegistriesStatusOutput{})
	pulumi.RegisterOutputType(GetRegistriesStatusArrayOutput{})
	pulumi.RegisterOutputType(GetRepositoriesRepositoryOutput{})
	pulumi.RegisterOutputType(GetRepositoriesRepositoryArrayOutput{})
	pulumi.RegisterOutputType(GetTagsTagOutput{})
	pulumi.RegisterOutputType(GetTagsTagArrayOutput{})
	pulumi.RegisterOutputType(GetTagsTagChartAttributeOutput{})
	pulumi.RegisterOutputType(GetTagsTagImageAttributeOutput{})
	pulumi.RegisterOutputType(GetTagsTagImageAttributeArrayOutput{})
	pulumi.RegisterOutputType(GetVpcEndpointsEndpointOutput{})
	pulumi.RegisterOutputType(GetVpcEndpointsEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetVpcEndpointsEndpointVpcOutput{})
	pulumi.RegisterOutputType(GetVpcEndpointsEndpointVpcArrayOutput{})
}
