// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cr endpoints
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cr.GetEndpoints(ctx, &cr.GetEndpointsArgs{
//				Registry: "tf-1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetEndpoints(ctx *pulumi.Context, args *GetEndpointsArgs, opts ...pulumi.InvokeOption) (*GetEndpointsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetEndpointsResult
	err := ctx.Invoke("volcengine:cr/getEndpoints:getEndpoints", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getEndpoints.
type GetEndpointsArgs struct {
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The CR instance name.
	Registry string `pulumi:"registry"`
}

// A collection of values returned by getEndpoints.
type GetEndpointsResult struct {
	// The collection of endpoint query.
	Endpoints []GetEndpointsEndpoint `pulumi:"endpoints"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The name of CR instance.
	Registry string `pulumi:"registry"`
	// The total count of tag query.
	TotalCount int `pulumi:"totalCount"`
}

func GetEndpointsOutput(ctx *pulumi.Context, args GetEndpointsOutputArgs, opts ...pulumi.InvokeOption) GetEndpointsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetEndpointsResult, error) {
			args := v.(GetEndpointsArgs)
			r, err := GetEndpoints(ctx, &args, opts...)
			var s GetEndpointsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetEndpointsResultOutput)
}

// A collection of arguments for invoking getEndpoints.
type GetEndpointsOutputArgs struct {
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The CR instance name.
	Registry pulumi.StringInput `pulumi:"registry"`
}

func (GetEndpointsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsArgs)(nil)).Elem()
}

// A collection of values returned by getEndpoints.
type GetEndpointsResultOutput struct{ *pulumi.OutputState }

func (GetEndpointsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetEndpointsResult)(nil)).Elem()
}

func (o GetEndpointsResultOutput) ToGetEndpointsResultOutput() GetEndpointsResultOutput {
	return o
}

func (o GetEndpointsResultOutput) ToGetEndpointsResultOutputWithContext(ctx context.Context) GetEndpointsResultOutput {
	return o
}

// The collection of endpoint query.
func (o GetEndpointsResultOutput) Endpoints() GetEndpointsEndpointArrayOutput {
	return o.ApplyT(func(v GetEndpointsResult) []GetEndpointsEndpoint { return v.Endpoints }).(GetEndpointsEndpointArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetEndpointsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetEndpointsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetEndpointsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The name of CR instance.
func (o GetEndpointsResultOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v GetEndpointsResult) string { return v.Registry }).(pulumi.StringOutput)
}

// The total count of tag query.
func (o GetEndpointsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetEndpointsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetEndpointsResultOutput{})
}
