// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cr

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of cr vpc endpoints
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/cr"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cr.GetVpcEndpoints(ctx, &cr.GetVpcEndpointsArgs{
//				Registry: "enterprise-1",
//				Statuses: []string{
//					"Enabled",
//					"Enabling",
//					"Disabling",
//					"Failed",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetVpcEndpoints(ctx *pulumi.Context, args *GetVpcEndpointsArgs, opts ...pulumi.InvokeOption) (*GetVpcEndpointsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetVpcEndpointsResult
	err := ctx.Invoke("volcengine:cr/getVpcEndpoints:getVpcEndpoints", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVpcEndpoints.
type GetVpcEndpointsArgs struct {
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The CR registry name.
	Registry string `pulumi:"registry"`
	// VPC access entry state array, used to filter out VPC access entries in the specified state. Available values are Enabling, Enabled, Disabling, Failed.
	Statuses []string `pulumi:"statuses"`
}

// A collection of values returned by getVpcEndpoints.
type GetVpcEndpointsResult struct {
	// List of CR vpc endpoints.
	Endpoints []GetVpcEndpointsEndpoint `pulumi:"endpoints"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The name of CR registry.
	Registry string   `pulumi:"registry"`
	Statuses []string `pulumi:"statuses"`
	// The total count of CR vpc endpoints query.
	TotalCount int `pulumi:"totalCount"`
}

func GetVpcEndpointsOutput(ctx *pulumi.Context, args GetVpcEndpointsOutputArgs, opts ...pulumi.InvokeOption) GetVpcEndpointsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetVpcEndpointsResult, error) {
			args := v.(GetVpcEndpointsArgs)
			r, err := GetVpcEndpoints(ctx, &args, opts...)
			var s GetVpcEndpointsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetVpcEndpointsResultOutput)
}

// A collection of arguments for invoking getVpcEndpoints.
type GetVpcEndpointsOutputArgs struct {
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The CR registry name.
	Registry pulumi.StringInput `pulumi:"registry"`
	// VPC access entry state array, used to filter out VPC access entries in the specified state. Available values are Enabling, Enabled, Disabling, Failed.
	Statuses pulumi.StringArrayInput `pulumi:"statuses"`
}

func (GetVpcEndpointsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcEndpointsArgs)(nil)).Elem()
}

// A collection of values returned by getVpcEndpoints.
type GetVpcEndpointsResultOutput struct{ *pulumi.OutputState }

func (GetVpcEndpointsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVpcEndpointsResult)(nil)).Elem()
}

func (o GetVpcEndpointsResultOutput) ToGetVpcEndpointsResultOutput() GetVpcEndpointsResultOutput {
	return o
}

func (o GetVpcEndpointsResultOutput) ToGetVpcEndpointsResultOutputWithContext(ctx context.Context) GetVpcEndpointsResultOutput {
	return o
}

// List of CR vpc endpoints.
func (o GetVpcEndpointsResultOutput) Endpoints() GetVpcEndpointsEndpointArrayOutput {
	return o.ApplyT(func(v GetVpcEndpointsResult) []GetVpcEndpointsEndpoint { return v.Endpoints }).(GetVpcEndpointsEndpointArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetVpcEndpointsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcEndpointsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetVpcEndpointsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetVpcEndpointsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The name of CR registry.
func (o GetVpcEndpointsResultOutput) Registry() pulumi.StringOutput {
	return o.ApplyT(func(v GetVpcEndpointsResult) string { return v.Registry }).(pulumi.StringOutput)
}

func (o GetVpcEndpointsResultOutput) Statuses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetVpcEndpointsResult) []string { return v.Statuses }).(pulumi.StringArrayOutput)
}

// The total count of CR vpc endpoints query.
func (o GetVpcEndpointsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetVpcEndpointsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetVpcEndpointsResultOutput{})
}
