// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rabbitmq instance
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rabbitmq"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rabbitmq.NewInstance(ctx, "fooInstance", &rabbitmq.InstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//					pulumi.String(fooZones.Zones[1].Id),
//					pulumi.String(fooZones.Zones[2].Id),
//				},
//				SubnetId:            fooSubnet.ID(),
//				Version:             pulumi.String("3.8.18"),
//				UserName:            pulumi.String("acc-test-user"),
//				UserPassword:        pulumi.String("93f0cb0614Aab12"),
//				ComputeSpec:         pulumi.String("rabbitmq.n3.x2.small"),
//				StorageSpace:        pulumi.Int(300),
//				InstanceName:        pulumi.String("acc-test-rabbitmq"),
//				InstanceDescription: pulumi.String("acc-test"),
//				ChargeInfo: &rabbitmq.InstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: rabbitmq.InstanceTagArray{
//					&rabbitmq.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RabbitmqInstance can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:rabbitmq/instance:Instance default resource_id
// ```
type Instance struct {
	pulumi.CustomResourceState

	// The account id of the rabbitmq instance.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// Whether enable the public network parsing function of the rabbitmq instance.
	ApplyPrivateDnsToPublic pulumi.BoolOutput `pulumi:"applyPrivateDnsToPublic"`
	// The type of the rabbitmq instance.
	ArchType pulumi.StringOutput `pulumi:"archType"`
	// The charge information of the rocketmq instance.
	ChargeInfo InstanceChargeInfoOutput `pulumi:"chargeInfo"`
	// The compute specification of the rabbitmq instance.
	ComputeSpec pulumi.StringOutput `pulumi:"computeSpec"`
	// The create time of the rabbitmq instance.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The eip id of the rabbitmq instance.
	EipId pulumi.StringOutput `pulumi:"eipId"`
	// The endpoint info of the rabbitmq instance.
	Endpoints InstanceEndpointArrayOutput `pulumi:"endpoints"`
	// The WebUI admin user name of the rabbitmq instance.
	InitUserName pulumi.StringOutput `pulumi:"initUserName"`
	// The description of the rabbitmq instance.
	InstanceDescription pulumi.StringPtrOutput `pulumi:"instanceDescription"`
	// The name of the rabbitmq instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// The status of the rabbitmq instance.
	InstanceStatus pulumi.StringOutput `pulumi:"instanceStatus"`
	// The IAM project name where the rabbitmq instance resides.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The region id of the rabbitmq instance.
	RegionId pulumi.StringOutput `pulumi:"regionId"`
	// The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
	StorageSpace pulumi.IntOutput `pulumi:"storageSpace"`
	// The subnet id of the rabbitmq instance.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// Tags.
	Tags InstanceTagArrayOutput `pulumi:"tags"`
	// The used storage space of the rabbitmq instance. Unit: GiB.
	UsedStorageSpace pulumi.IntOutput `pulumi:"usedStorageSpace"`
	// The administrator name of the rabbitmq instance.
	UserName pulumi.StringOutput `pulumi:"userName"`
	// The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword pulumi.StringOutput `pulumi:"userPassword"`
	// The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
	Version pulumi.StringOutput `pulumi:"version"`
	// The vpc id of the rabbitmq instance.
	VpcId pulumi.StringOutput `pulumi:"vpcId"`
	// The zone id of the rabbitmq instance. Support specifying multiple availability zones.
	ZoneIds pulumi.StringArrayOutput `pulumi:"zoneIds"`
}

// NewInstance registers a new resource with the given unique name, arguments, and options.
func NewInstance(ctx *pulumi.Context,
	name string, args *InstanceArgs, opts ...pulumi.ResourceOption) (*Instance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ChargeInfo == nil {
		return nil, errors.New("invalid value for required argument 'ChargeInfo'")
	}
	if args.ComputeSpec == nil {
		return nil, errors.New("invalid value for required argument 'ComputeSpec'")
	}
	if args.StorageSpace == nil {
		return nil, errors.New("invalid value for required argument 'StorageSpace'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.UserName == nil {
		return nil, errors.New("invalid value for required argument 'UserName'")
	}
	if args.UserPassword == nil {
		return nil, errors.New("invalid value for required argument 'UserPassword'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	if args.ZoneIds == nil {
		return nil, errors.New("invalid value for required argument 'ZoneIds'")
	}
	if args.UserPassword != nil {
		args.UserPassword = pulumi.ToSecret(args.UserPassword).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"userPassword",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Instance
	err := ctx.RegisterResource("volcengine:rabbitmq/instance:Instance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstance gets an existing Instance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstanceState, opts ...pulumi.ResourceOption) (*Instance, error) {
	var resource Instance
	err := ctx.ReadResource("volcengine:rabbitmq/instance:Instance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Instance resources.
type instanceState struct {
	// The account id of the rabbitmq instance.
	AccountId *string `pulumi:"accountId"`
	// Whether enable the public network parsing function of the rabbitmq instance.
	ApplyPrivateDnsToPublic *bool `pulumi:"applyPrivateDnsToPublic"`
	// The type of the rabbitmq instance.
	ArchType *string `pulumi:"archType"`
	// The charge information of the rocketmq instance.
	ChargeInfo *InstanceChargeInfo `pulumi:"chargeInfo"`
	// The compute specification of the rabbitmq instance.
	ComputeSpec *string `pulumi:"computeSpec"`
	// The create time of the rabbitmq instance.
	CreateTime *string `pulumi:"createTime"`
	// The eip id of the rabbitmq instance.
	EipId *string `pulumi:"eipId"`
	// The endpoint info of the rabbitmq instance.
	Endpoints []InstanceEndpoint `pulumi:"endpoints"`
	// The WebUI admin user name of the rabbitmq instance.
	InitUserName *string `pulumi:"initUserName"`
	// The description of the rabbitmq instance.
	InstanceDescription *string `pulumi:"instanceDescription"`
	// The name of the rabbitmq instance.
	InstanceName *string `pulumi:"instanceName"`
	// The status of the rabbitmq instance.
	InstanceStatus *string `pulumi:"instanceStatus"`
	// The IAM project name where the rabbitmq instance resides.
	ProjectName *string `pulumi:"projectName"`
	// The region id of the rabbitmq instance.
	RegionId *string `pulumi:"regionId"`
	// The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
	StorageSpace *int `pulumi:"storageSpace"`
	// The subnet id of the rabbitmq instance.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []InstanceTag `pulumi:"tags"`
	// The used storage space of the rabbitmq instance. Unit: GiB.
	UsedStorageSpace *int `pulumi:"usedStorageSpace"`
	// The administrator name of the rabbitmq instance.
	UserName *string `pulumi:"userName"`
	// The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword *string `pulumi:"userPassword"`
	// The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
	Version *string `pulumi:"version"`
	// The vpc id of the rabbitmq instance.
	VpcId *string `pulumi:"vpcId"`
	// The zone id of the rabbitmq instance. Support specifying multiple availability zones.
	ZoneIds []string `pulumi:"zoneIds"`
}

type InstanceState struct {
	// The account id of the rabbitmq instance.
	AccountId pulumi.StringPtrInput
	// Whether enable the public network parsing function of the rabbitmq instance.
	ApplyPrivateDnsToPublic pulumi.BoolPtrInput
	// The type of the rabbitmq instance.
	ArchType pulumi.StringPtrInput
	// The charge information of the rocketmq instance.
	ChargeInfo InstanceChargeInfoPtrInput
	// The compute specification of the rabbitmq instance.
	ComputeSpec pulumi.StringPtrInput
	// The create time of the rabbitmq instance.
	CreateTime pulumi.StringPtrInput
	// The eip id of the rabbitmq instance.
	EipId pulumi.StringPtrInput
	// The endpoint info of the rabbitmq instance.
	Endpoints InstanceEndpointArrayInput
	// The WebUI admin user name of the rabbitmq instance.
	InitUserName pulumi.StringPtrInput
	// The description of the rabbitmq instance.
	InstanceDescription pulumi.StringPtrInput
	// The name of the rabbitmq instance.
	InstanceName pulumi.StringPtrInput
	// The status of the rabbitmq instance.
	InstanceStatus pulumi.StringPtrInput
	// The IAM project name where the rabbitmq instance resides.
	ProjectName pulumi.StringPtrInput
	// The region id of the rabbitmq instance.
	RegionId pulumi.StringPtrInput
	// The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
	StorageSpace pulumi.IntPtrInput
	// The subnet id of the rabbitmq instance.
	SubnetId pulumi.StringPtrInput
	// Tags.
	Tags InstanceTagArrayInput
	// The used storage space of the rabbitmq instance. Unit: GiB.
	UsedStorageSpace pulumi.IntPtrInput
	// The administrator name of the rabbitmq instance.
	UserName pulumi.StringPtrInput
	// The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword pulumi.StringPtrInput
	// The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
	Version pulumi.StringPtrInput
	// The vpc id of the rabbitmq instance.
	VpcId pulumi.StringPtrInput
	// The zone id of the rabbitmq instance. Support specifying multiple availability zones.
	ZoneIds pulumi.StringArrayInput
}

func (InstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceState)(nil)).Elem()
}

type instanceArgs struct {
	// The charge information of the rocketmq instance.
	ChargeInfo InstanceChargeInfo `pulumi:"chargeInfo"`
	// The compute specification of the rabbitmq instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// The description of the rabbitmq instance.
	InstanceDescription *string `pulumi:"instanceDescription"`
	// The name of the rabbitmq instance.
	InstanceName *string `pulumi:"instanceName"`
	// The IAM project name where the rabbitmq instance resides.
	ProjectName *string `pulumi:"projectName"`
	// The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
	StorageSpace int `pulumi:"storageSpace"`
	// The subnet id of the rabbitmq instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstanceTag `pulumi:"tags"`
	// The administrator name of the rabbitmq instance.
	UserName string `pulumi:"userName"`
	// The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword string `pulumi:"userPassword"`
	// The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
	Version string `pulumi:"version"`
	// The zone id of the rabbitmq instance. Support specifying multiple availability zones.
	ZoneIds []string `pulumi:"zoneIds"`
}

// The set of arguments for constructing a Instance resource.
type InstanceArgs struct {
	// The charge information of the rocketmq instance.
	ChargeInfo InstanceChargeInfoInput
	// The compute specification of the rabbitmq instance.
	ComputeSpec pulumi.StringInput
	// The description of the rabbitmq instance.
	InstanceDescription pulumi.StringPtrInput
	// The name of the rabbitmq instance.
	InstanceName pulumi.StringPtrInput
	// The IAM project name where the rabbitmq instance resides.
	ProjectName pulumi.StringPtrInput
	// The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
	StorageSpace pulumi.IntInput
	// The subnet id of the rabbitmq instance.
	SubnetId pulumi.StringInput
	// Tags.
	Tags InstanceTagArrayInput
	// The administrator name of the rabbitmq instance.
	UserName pulumi.StringInput
	// The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	UserPassword pulumi.StringInput
	// The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
	Version pulumi.StringInput
	// The zone id of the rabbitmq instance. Support specifying multiple availability zones.
	ZoneIds pulumi.StringArrayInput
}

func (InstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instanceArgs)(nil)).Elem()
}

type InstanceInput interface {
	pulumi.Input

	ToInstanceOutput() InstanceOutput
	ToInstanceOutputWithContext(ctx context.Context) InstanceOutput
}

func (*Instance) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (i *Instance) ToInstanceOutput() InstanceOutput {
	return i.ToInstanceOutputWithContext(context.Background())
}

func (i *Instance) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceOutput)
}

// InstanceArrayInput is an input type that accepts InstanceArray and InstanceArrayOutput values.
// You can construct a concrete instance of `InstanceArrayInput` via:
//
//	InstanceArray{ InstanceArgs{...} }
type InstanceArrayInput interface {
	pulumi.Input

	ToInstanceArrayOutput() InstanceArrayOutput
	ToInstanceArrayOutputWithContext(context.Context) InstanceArrayOutput
}

type InstanceArray []InstanceInput

func (InstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (i InstanceArray) ToInstanceArrayOutput() InstanceArrayOutput {
	return i.ToInstanceArrayOutputWithContext(context.Background())
}

func (i InstanceArray) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceArrayOutput)
}

// InstanceMapInput is an input type that accepts InstanceMap and InstanceMapOutput values.
// You can construct a concrete instance of `InstanceMapInput` via:
//
//	InstanceMap{ "key": InstanceArgs{...} }
type InstanceMapInput interface {
	pulumi.Input

	ToInstanceMapOutput() InstanceMapOutput
	ToInstanceMapOutputWithContext(context.Context) InstanceMapOutput
}

type InstanceMap map[string]InstanceInput

func (InstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (i InstanceMap) ToInstanceMapOutput() InstanceMapOutput {
	return i.ToInstanceMapOutputWithContext(context.Background())
}

func (i InstanceMap) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceMapOutput)
}

type InstanceOutput struct{ *pulumi.OutputState }

func (InstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Instance)(nil)).Elem()
}

func (o InstanceOutput) ToInstanceOutput() InstanceOutput {
	return o
}

func (o InstanceOutput) ToInstanceOutputWithContext(ctx context.Context) InstanceOutput {
	return o
}

// The account id of the rabbitmq instance.
func (o InstanceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// Whether enable the public network parsing function of the rabbitmq instance.
func (o InstanceOutput) ApplyPrivateDnsToPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v *Instance) pulumi.BoolOutput { return v.ApplyPrivateDnsToPublic }).(pulumi.BoolOutput)
}

// The type of the rabbitmq instance.
func (o InstanceOutput) ArchType() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ArchType }).(pulumi.StringOutput)
}

// The charge information of the rocketmq instance.
func (o InstanceOutput) ChargeInfo() InstanceChargeInfoOutput {
	return o.ApplyT(func(v *Instance) InstanceChargeInfoOutput { return v.ChargeInfo }).(InstanceChargeInfoOutput)
}

// The compute specification of the rabbitmq instance.
func (o InstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ComputeSpec }).(pulumi.StringOutput)
}

// The create time of the rabbitmq instance.
func (o InstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The eip id of the rabbitmq instance.
func (o InstanceOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.EipId }).(pulumi.StringOutput)
}

// The endpoint info of the rabbitmq instance.
func (o InstanceOutput) Endpoints() InstanceEndpointArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceEndpointArrayOutput { return v.Endpoints }).(InstanceEndpointArrayOutput)
}

// The WebUI admin user name of the rabbitmq instance.
func (o InstanceOutput) InitUserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InitUserName }).(pulumi.StringOutput)
}

// The description of the rabbitmq instance.
func (o InstanceOutput) InstanceDescription() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringPtrOutput { return v.InstanceDescription }).(pulumi.StringPtrOutput)
}

// The name of the rabbitmq instance.
func (o InstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of the rabbitmq instance.
func (o InstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The IAM project name where the rabbitmq instance resides.
func (o InstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The region id of the rabbitmq instance.
func (o InstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.RegionId }).(pulumi.StringOutput)
}

// The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
func (o InstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.StorageSpace }).(pulumi.IntOutput)
}

// The subnet id of the rabbitmq instance.
func (o InstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstanceOutput) Tags() InstanceTagArrayOutput {
	return o.ApplyT(func(v *Instance) InstanceTagArrayOutput { return v.Tags }).(InstanceTagArrayOutput)
}

// The used storage space of the rabbitmq instance. Unit: GiB.
func (o InstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v *Instance) pulumi.IntOutput { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// The administrator name of the rabbitmq instance.
func (o InstanceOutput) UserName() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserName }).(pulumi.StringOutput)
}

// The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o InstanceOutput) UserPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.UserPassword }).(pulumi.StringOutput)
}

// The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
func (o InstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

// The vpc id of the rabbitmq instance.
func (o InstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringOutput { return v.VpcId }).(pulumi.StringOutput)
}

// The zone id of the rabbitmq instance. Support specifying multiple availability zones.
func (o InstanceOutput) ZoneIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Instance) pulumi.StringArrayOutput { return v.ZoneIds }).(pulumi.StringArrayOutput)
}

type InstanceArrayOutput struct{ *pulumi.OutputState }

func (InstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Instance)(nil)).Elem()
}

func (o InstanceArrayOutput) ToInstanceArrayOutput() InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) ToInstanceArrayOutputWithContext(ctx context.Context) InstanceArrayOutput {
	return o
}

func (o InstanceArrayOutput) Index(i pulumi.IntInput) InstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].([]*Instance)[vs[1].(int)]
	}).(InstanceOutput)
}

type InstanceMapOutput struct{ *pulumi.OutputState }

func (InstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Instance)(nil)).Elem()
}

func (o InstanceMapOutput) ToInstanceMapOutput() InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) ToInstanceMapOutputWithContext(ctx context.Context) InstanceMapOutput {
	return o
}

func (o InstanceMapOutput) MapIndex(k pulumi.StringInput) InstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Instance {
		return vs[0].(map[string]*Instance)[vs[1].(string)]
	}).(InstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceInput)(nil)).Elem(), &Instance{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceArrayInput)(nil)).Elem(), InstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceMapInput)(nil)).Elem(), InstanceMap{})
	pulumi.RegisterOutputType(InstanceOutput{})
	pulumi.RegisterOutputType(InstanceArrayOutput{})
	pulumi.RegisterOutputType(InstanceMapOutput{})
}
