// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of rabbitmq instance plugins
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rabbitmq"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := rabbitmq.NewInstance(ctx, "fooInstance", &rabbitmq.InstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//					pulumi.String(fooZones.Zones[1].Id),
//					pulumi.String(fooZones.Zones[2].Id),
//				},
//				SubnetId:            fooSubnet.ID(),
//				Version:             pulumi.String("3.8.18"),
//				UserName:            pulumi.String("acc-test-user"),
//				UserPassword:        pulumi.String("93f0cb0614Aab12"),
//				ComputeSpec:         pulumi.String("rabbitmq.n3.x2.small"),
//				StorageSpace:        pulumi.Int(300),
//				InstanceName:        pulumi.String("acc-test-rabbitmq"),
//				InstanceDescription: pulumi.String("acc-test"),
//				ChargeInfo: &rabbitmq.InstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: rabbitmq.InstanceTagArray{
//					&rabbitmq.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = rabbitmq.InstancePluginsOutput(ctx, rabbitmq.InstancePluginsOutputArgs{
//				InstanceId: fooInstance.ID(),
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func InstancePlugins(ctx *pulumi.Context, args *InstancePluginsArgs, opts ...pulumi.InvokeOption) (*InstancePluginsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv InstancePluginsResult
	err := ctx.Invoke("volcengine:rabbitmq/instancePlugins:InstancePlugins", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking InstancePlugins.
type InstancePluginsArgs struct {
	// The id of rabbitmq instance.
	InstanceId string `pulumi:"instanceId"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by InstancePlugins.
type InstancePluginsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	InstanceId string  `pulumi:"instanceId"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The collection of query.
	Plugins []InstancePluginsPlugin `pulumi:"plugins"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func InstancePluginsOutput(ctx *pulumi.Context, args InstancePluginsOutputArgs, opts ...pulumi.InvokeOption) InstancePluginsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (InstancePluginsResult, error) {
			args := v.(InstancePluginsArgs)
			r, err := InstancePlugins(ctx, &args, opts...)
			var s InstancePluginsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(InstancePluginsResultOutput)
}

// A collection of arguments for invoking InstancePlugins.
type InstancePluginsOutputArgs struct {
	// The id of rabbitmq instance.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (InstancePluginsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePluginsArgs)(nil)).Elem()
}

// A collection of values returned by InstancePlugins.
type InstancePluginsResultOutput struct{ *pulumi.OutputState }

func (InstancePluginsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePluginsResult)(nil)).Elem()
}

func (o InstancePluginsResultOutput) ToInstancePluginsResultOutput() InstancePluginsResultOutput {
	return o
}

func (o InstancePluginsResultOutput) ToInstancePluginsResultOutputWithContext(ctx context.Context) InstancePluginsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o InstancePluginsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePluginsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o InstancePluginsResultOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePluginsResult) string { return v.InstanceId }).(pulumi.StringOutput)
}

func (o InstancePluginsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePluginsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o InstancePluginsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstancePluginsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The collection of query.
func (o InstancePluginsResultOutput) Plugins() InstancePluginsPluginArrayOutput {
	return o.ApplyT(func(v InstancePluginsResult) []InstancePluginsPlugin { return v.Plugins }).(InstancePluginsPluginArrayOutput)
}

// The total count of query.
func (o InstancePluginsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v InstancePluginsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(InstancePluginsResultOutput{})
}
