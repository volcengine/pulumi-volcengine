// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitmq

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type InstanceChargeInfo struct {
	// Whether to automatically renew in prepaid scenarios. Default is false.
	AutoRenew *bool `pulumi:"autoRenew"`
	// The charge type of the rabbitmq instance. Valid values: `PostPaid`, `PrePaid`.
	ChargeType string `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Month`, the value range is 1-9. When PeriodUnit is specified as `Year`, the value range is 1-3. Default is 1.
	Period *int `pulumi:"period"`
	// The purchase cycle in the prepaid scenario. Valid values: `Month`, `Year`. Default is `Month`.
	PeriodUnit *string `pulumi:"periodUnit"`
}

// InstanceChargeInfoInput is an input type that accepts InstanceChargeInfoArgs and InstanceChargeInfoOutput values.
// You can construct a concrete instance of `InstanceChargeInfoInput` via:
//
//	InstanceChargeInfoArgs{...}
type InstanceChargeInfoInput interface {
	pulumi.Input

	ToInstanceChargeInfoOutput() InstanceChargeInfoOutput
	ToInstanceChargeInfoOutputWithContext(context.Context) InstanceChargeInfoOutput
}

type InstanceChargeInfoArgs struct {
	// Whether to automatically renew in prepaid scenarios. Default is false.
	AutoRenew pulumi.BoolPtrInput `pulumi:"autoRenew"`
	// The charge type of the rabbitmq instance. Valid values: `PostPaid`, `PrePaid`.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Month`, the value range is 1-9. When PeriodUnit is specified as `Year`, the value range is 1-3. Default is 1.
	Period pulumi.IntPtrInput `pulumi:"period"`
	// The purchase cycle in the prepaid scenario. Valid values: `Month`, `Year`. Default is `Month`.
	PeriodUnit pulumi.StringPtrInput `pulumi:"periodUnit"`
}

func (InstanceChargeInfoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return i.ToInstanceChargeInfoOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput)
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i InstanceChargeInfoArgs) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoOutput).ToInstanceChargeInfoPtrOutputWithContext(ctx)
}

// InstanceChargeInfoPtrInput is an input type that accepts InstanceChargeInfoArgs, InstanceChargeInfoPtr and InstanceChargeInfoPtrOutput values.
// You can construct a concrete instance of `InstanceChargeInfoPtrInput` via:
//
//	        InstanceChargeInfoArgs{...}
//
//	or:
//
//	        nil
type InstanceChargeInfoPtrInput interface {
	pulumi.Input

	ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput
	ToInstanceChargeInfoPtrOutputWithContext(context.Context) InstanceChargeInfoPtrOutput
}

type instanceChargeInfoPtrType InstanceChargeInfoArgs

func InstanceChargeInfoPtr(v *InstanceChargeInfoArgs) InstanceChargeInfoPtrInput {
	return (*instanceChargeInfoPtrType)(v)
}

func (*instanceChargeInfoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return i.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (i *instanceChargeInfoPtrType) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceChargeInfoPtrOutput)
}

type InstanceChargeInfoOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutput() InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoOutputWithContext(ctx context.Context) InstanceChargeInfoOutput {
	return o
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o.ToInstanceChargeInfoPtrOutputWithContext(context.Background())
}

func (o InstanceChargeInfoOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v InstanceChargeInfo) *InstanceChargeInfo {
		return &v
	}).(InstanceChargeInfoPtrOutput)
}

// Whether to automatically renew in prepaid scenarios. Default is false.
func (o InstanceChargeInfoOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *bool { return v.AutoRenew }).(pulumi.BoolPtrOutput)
}

// The charge type of the rabbitmq instance. Valid values: `PostPaid`, `PrePaid`.
func (o InstanceChargeInfoOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceChargeInfo) string { return v.ChargeType }).(pulumi.StringOutput)
}

// Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Month`, the value range is 1-9. When PeriodUnit is specified as `Year`, the value range is 1-3. Default is 1.
func (o InstanceChargeInfoOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *int { return v.Period }).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario. Valid values: `Month`, `Year`. Default is `Month`.
func (o InstanceChargeInfoOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceChargeInfo) *string { return v.PeriodUnit }).(pulumi.StringPtrOutput)
}

type InstanceChargeInfoPtrOutput struct{ *pulumi.OutputState }

func (InstanceChargeInfoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstanceChargeInfo)(nil)).Elem()
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutput() InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) ToInstanceChargeInfoPtrOutputWithContext(ctx context.Context) InstanceChargeInfoPtrOutput {
	return o
}

func (o InstanceChargeInfoPtrOutput) Elem() InstanceChargeInfoOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) InstanceChargeInfo {
		if v != nil {
			return *v
		}
		var ret InstanceChargeInfo
		return ret
	}).(InstanceChargeInfoOutput)
}

// Whether to automatically renew in prepaid scenarios. Default is false.
func (o InstanceChargeInfoPtrOutput) AutoRenew() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *bool {
		if v == nil {
			return nil
		}
		return v.AutoRenew
	}).(pulumi.BoolPtrOutput)
}

// The charge type of the rabbitmq instance. Valid values: `PostPaid`, `PrePaid`.
func (o InstanceChargeInfoPtrOutput) ChargeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return &v.ChargeType
	}).(pulumi.StringPtrOutput)
}

// Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Month`, the value range is 1-9. When PeriodUnit is specified as `Year`, the value range is 1-3. Default is 1.
func (o InstanceChargeInfoPtrOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *int {
		if v == nil {
			return nil
		}
		return v.Period
	}).(pulumi.IntPtrOutput)
}

// The purchase cycle in the prepaid scenario. Valid values: `Month`, `Year`. Default is `Month`.
func (o InstanceChargeInfoPtrOutput) PeriodUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InstanceChargeInfo) *string {
		if v == nil {
			return nil
		}
		return v.PeriodUnit
	}).(pulumi.StringPtrOutput)
}

type InstanceEndpoint struct {
	// The endpoint type of the rabbitmq instance.
	EndpointType *string `pulumi:"endpointType"`
	// The internal endpoint of the rabbitmq instance.
	InternalEndpoint *string `pulumi:"internalEndpoint"`
	// The network type of the rabbitmq instance.
	NetworkType *string `pulumi:"networkType"`
	// The public endpoint of the rabbitmq instance.
	PublicEndpoint *string `pulumi:"publicEndpoint"`
}

// InstanceEndpointInput is an input type that accepts InstanceEndpointArgs and InstanceEndpointOutput values.
// You can construct a concrete instance of `InstanceEndpointInput` via:
//
//	InstanceEndpointArgs{...}
type InstanceEndpointInput interface {
	pulumi.Input

	ToInstanceEndpointOutput() InstanceEndpointOutput
	ToInstanceEndpointOutputWithContext(context.Context) InstanceEndpointOutput
}

type InstanceEndpointArgs struct {
	// The endpoint type of the rabbitmq instance.
	EndpointType pulumi.StringPtrInput `pulumi:"endpointType"`
	// The internal endpoint of the rabbitmq instance.
	InternalEndpoint pulumi.StringPtrInput `pulumi:"internalEndpoint"`
	// The network type of the rabbitmq instance.
	NetworkType pulumi.StringPtrInput `pulumi:"networkType"`
	// The public endpoint of the rabbitmq instance.
	PublicEndpoint pulumi.StringPtrInput `pulumi:"publicEndpoint"`
}

func (InstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return i.ToInstanceEndpointOutputWithContext(context.Background())
}

func (i InstanceEndpointArgs) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointOutput)
}

// InstanceEndpointArrayInput is an input type that accepts InstanceEndpointArray and InstanceEndpointArrayOutput values.
// You can construct a concrete instance of `InstanceEndpointArrayInput` via:
//
//	InstanceEndpointArray{ InstanceEndpointArgs{...} }
type InstanceEndpointArrayInput interface {
	pulumi.Input

	ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput
	ToInstanceEndpointArrayOutputWithContext(context.Context) InstanceEndpointArrayOutput
}

type InstanceEndpointArray []InstanceEndpointInput

func (InstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return i.ToInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i InstanceEndpointArray) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceEndpointArrayOutput)
}

type InstanceEndpointOutput struct{ *pulumi.OutputState }

func (InstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutput() InstanceEndpointOutput {
	return o
}

func (o InstanceEndpointOutput) ToInstanceEndpointOutputWithContext(ctx context.Context) InstanceEndpointOutput {
	return o
}

// The endpoint type of the rabbitmq instance.
func (o InstanceEndpointOutput) EndpointType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.EndpointType }).(pulumi.StringPtrOutput)
}

// The internal endpoint of the rabbitmq instance.
func (o InstanceEndpointOutput) InternalEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.InternalEndpoint }).(pulumi.StringPtrOutput)
}

// The network type of the rabbitmq instance.
func (o InstanceEndpointOutput) NetworkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.NetworkType }).(pulumi.StringPtrOutput)
}

// The public endpoint of the rabbitmq instance.
func (o InstanceEndpointOutput) PublicEndpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InstanceEndpoint) *string { return v.PublicEndpoint }).(pulumi.StringPtrOutput)
}

type InstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (InstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceEndpoint)(nil)).Elem()
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutput() InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) ToInstanceEndpointArrayOutputWithContext(ctx context.Context) InstanceEndpointArrayOutput {
	return o
}

func (o InstanceEndpointArrayOutput) Index(i pulumi.IntInput) InstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceEndpoint {
		return vs[0].([]InstanceEndpoint)[vs[1].(int)]
	}).(InstanceEndpointOutput)
}

type InstancePluginsPlugin struct {
	// The description of plugin.
	Description string `pulumi:"description"`
	// The disable prompt of plugin.
	DisablePrompt string `pulumi:"disablePrompt"`
	// The enable prompt of plugin.
	EnablePrompt string `pulumi:"enablePrompt"`
	// Whether plugin is enabled.
	Enabled bool `pulumi:"enabled"`
	// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
	NeedRebootOnChange bool `pulumi:"needRebootOnChange"`
	// The name of plugin.
	PluginName string `pulumi:"pluginName"`
	// The port of plugin.
	Port int `pulumi:"port"`
	// The version of plugin.
	Version string `pulumi:"version"`
}

// InstancePluginsPluginInput is an input type that accepts InstancePluginsPluginArgs and InstancePluginsPluginOutput values.
// You can construct a concrete instance of `InstancePluginsPluginInput` via:
//
//	InstancePluginsPluginArgs{...}
type InstancePluginsPluginInput interface {
	pulumi.Input

	ToInstancePluginsPluginOutput() InstancePluginsPluginOutput
	ToInstancePluginsPluginOutputWithContext(context.Context) InstancePluginsPluginOutput
}

type InstancePluginsPluginArgs struct {
	// The description of plugin.
	Description pulumi.StringInput `pulumi:"description"`
	// The disable prompt of plugin.
	DisablePrompt pulumi.StringInput `pulumi:"disablePrompt"`
	// The enable prompt of plugin.
	EnablePrompt pulumi.StringInput `pulumi:"enablePrompt"`
	// Whether plugin is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
	NeedRebootOnChange pulumi.BoolInput `pulumi:"needRebootOnChange"`
	// The name of plugin.
	PluginName pulumi.StringInput `pulumi:"pluginName"`
	// The port of plugin.
	Port pulumi.IntInput `pulumi:"port"`
	// The version of plugin.
	Version pulumi.StringInput `pulumi:"version"`
}

func (InstancePluginsPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePluginsPlugin)(nil)).Elem()
}

func (i InstancePluginsPluginArgs) ToInstancePluginsPluginOutput() InstancePluginsPluginOutput {
	return i.ToInstancePluginsPluginOutputWithContext(context.Background())
}

func (i InstancePluginsPluginArgs) ToInstancePluginsPluginOutputWithContext(ctx context.Context) InstancePluginsPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePluginsPluginOutput)
}

// InstancePluginsPluginArrayInput is an input type that accepts InstancePluginsPluginArray and InstancePluginsPluginArrayOutput values.
// You can construct a concrete instance of `InstancePluginsPluginArrayInput` via:
//
//	InstancePluginsPluginArray{ InstancePluginsPluginArgs{...} }
type InstancePluginsPluginArrayInput interface {
	pulumi.Input

	ToInstancePluginsPluginArrayOutput() InstancePluginsPluginArrayOutput
	ToInstancePluginsPluginArrayOutputWithContext(context.Context) InstancePluginsPluginArrayOutput
}

type InstancePluginsPluginArray []InstancePluginsPluginInput

func (InstancePluginsPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePluginsPlugin)(nil)).Elem()
}

func (i InstancePluginsPluginArray) ToInstancePluginsPluginArrayOutput() InstancePluginsPluginArrayOutput {
	return i.ToInstancePluginsPluginArrayOutputWithContext(context.Background())
}

func (i InstancePluginsPluginArray) ToInstancePluginsPluginArrayOutputWithContext(ctx context.Context) InstancePluginsPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePluginsPluginArrayOutput)
}

type InstancePluginsPluginOutput struct{ *pulumi.OutputState }

func (InstancePluginsPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancePluginsPlugin)(nil)).Elem()
}

func (o InstancePluginsPluginOutput) ToInstancePluginsPluginOutput() InstancePluginsPluginOutput {
	return o
}

func (o InstancePluginsPluginOutput) ToInstancePluginsPluginOutputWithContext(ctx context.Context) InstancePluginsPluginOutput {
	return o
}

// The description of plugin.
func (o InstancePluginsPluginOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePluginsPlugin) string { return v.Description }).(pulumi.StringOutput)
}

// The disable prompt of plugin.
func (o InstancePluginsPluginOutput) DisablePrompt() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePluginsPlugin) string { return v.DisablePrompt }).(pulumi.StringOutput)
}

// The enable prompt of plugin.
func (o InstancePluginsPluginOutput) EnablePrompt() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePluginsPlugin) string { return v.EnablePrompt }).(pulumi.StringOutput)
}

// Whether plugin is enabled.
func (o InstancePluginsPluginOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancePluginsPlugin) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
func (o InstancePluginsPluginOutput) NeedRebootOnChange() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancePluginsPlugin) bool { return v.NeedRebootOnChange }).(pulumi.BoolOutput)
}

// The name of plugin.
func (o InstancePluginsPluginOutput) PluginName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePluginsPlugin) string { return v.PluginName }).(pulumi.StringOutput)
}

// The port of plugin.
func (o InstancePluginsPluginOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v InstancePluginsPlugin) int { return v.Port }).(pulumi.IntOutput)
}

// The version of plugin.
func (o InstancePluginsPluginOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v InstancePluginsPlugin) string { return v.Version }).(pulumi.StringOutput)
}

type InstancePluginsPluginArrayOutput struct{ *pulumi.OutputState }

func (InstancePluginsPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancePluginsPlugin)(nil)).Elem()
}

func (o InstancePluginsPluginArrayOutput) ToInstancePluginsPluginArrayOutput() InstancePluginsPluginArrayOutput {
	return o
}

func (o InstancePluginsPluginArrayOutput) ToInstancePluginsPluginArrayOutputWithContext(ctx context.Context) InstancePluginsPluginArrayOutput {
	return o
}

func (o InstancePluginsPluginArrayOutput) Index(i pulumi.IntInput) InstancePluginsPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancePluginsPlugin {
		return vs[0].([]InstancePluginsPlugin)[vs[1].(int)]
	}).(InstancePluginsPluginOutput)
}

type InstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstanceTagInput is an input type that accepts InstanceTagArgs and InstanceTagOutput values.
// You can construct a concrete instance of `InstanceTagInput` via:
//
//	InstanceTagArgs{...}
type InstanceTagInput interface {
	pulumi.Input

	ToInstanceTagOutput() InstanceTagOutput
	ToInstanceTagOutputWithContext(context.Context) InstanceTagOutput
}

type InstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (i InstanceTagArgs) ToInstanceTagOutput() InstanceTagOutput {
	return i.ToInstanceTagOutputWithContext(context.Background())
}

func (i InstanceTagArgs) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagOutput)
}

// InstanceTagArrayInput is an input type that accepts InstanceTagArray and InstanceTagArrayOutput values.
// You can construct a concrete instance of `InstanceTagArrayInput` via:
//
//	InstanceTagArray{ InstanceTagArgs{...} }
type InstanceTagArrayInput interface {
	pulumi.Input

	ToInstanceTagArrayOutput() InstanceTagArrayOutput
	ToInstanceTagArrayOutputWithContext(context.Context) InstanceTagArrayOutput
}

type InstanceTagArray []InstanceTagInput

func (InstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (i InstanceTagArray) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return i.ToInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstanceTagArray) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstanceTagArrayOutput)
}

type InstanceTagOutput struct{ *pulumi.OutputState }

func (InstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstanceTag)(nil)).Elem()
}

func (o InstanceTagOutput) ToInstanceTagOutput() InstanceTagOutput {
	return o
}

func (o InstanceTagOutput) ToInstanceTagOutputWithContext(ctx context.Context) InstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstanceTag)(nil)).Elem()
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutput() InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) ToInstanceTagArrayOutputWithContext(ctx context.Context) InstanceTagArrayOutput {
	return o
}

func (o InstanceTagArrayOutput) Index(i pulumi.IntInput) InstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstanceTag {
		return vs[0].([]InstanceTag)[vs[1].(int)]
	}).(InstanceTagOutput)
}

type InstancesRabbitmqInstance struct {
	// The account id of the rabbitmq instance.
	AccountId string `pulumi:"accountId"`
	// Whether enable the public network parsing function of the rabbitmq instance.
	ApplyPrivateDnsToPublic bool `pulumi:"applyPrivateDnsToPublic"`
	// The type of the rabbitmq instance.
	ArchType string `pulumi:"archType"`
	// The charge detail information of the rabbitmq instance.
	ChargeDetails []InstancesRabbitmqInstanceChargeDetail `pulumi:"chargeDetails"`
	// The compute specification of the rabbitmq instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// The create time of the rabbitmq instance.
	CreateTime string `pulumi:"createTime"`
	// The eip id of the rabbitmq instance.
	EipId string `pulumi:"eipId"`
	// The endpoint info of the rabbitmq instance.
	Endpoints []InstancesRabbitmqInstanceEndpoint `pulumi:"endpoints"`
	// The id of the rabbitmq instance.
	Id string `pulumi:"id"`
	// The WebUI admin user name of the rabbitmq instance.
	InitUserName string `pulumi:"initUserName"`
	// The description of the rabbitmq instance.
	InstanceDescription string `pulumi:"instanceDescription"`
	// The id of rabbitmq instance. This field supports fuzzy query.
	InstanceId string `pulumi:"instanceId"`
	// The name of rabbitmq instance. This field supports fuzzy query.
	InstanceName string `pulumi:"instanceName"`
	// The status of rabbitmq instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The project name of rabbitmq instance.
	ProjectName string `pulumi:"projectName"`
	// The region description of the rabbitmq instance.
	RegionDescription string `pulumi:"regionDescription"`
	// The region id of the rabbitmq instance.
	RegionId string `pulumi:"regionId"`
	// The total storage space of the rabbitmq instance. Unit: GiB.
	StorageSpace int `pulumi:"storageSpace"`
	// The subnet id of the rabbitmq instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []InstancesRabbitmqInstanceTag `pulumi:"tags"`
	// The used storage space of the rabbitmq instance. Unit: GiB.
	UsedStorageSpace int `pulumi:"usedStorageSpace"`
	// The version of the rabbitmq instance.
	Version string `pulumi:"version"`
	// The vpc id of rabbitmq instance. This field supports fuzzy query.
	VpcId string `pulumi:"vpcId"`
	// The zone description of the rabbitmq instance.
	ZoneDescription string `pulumi:"zoneDescription"`
	// The zone id of rabbitmq instance. This field supports fuzzy query.
	ZoneId string `pulumi:"zoneId"`
}

// InstancesRabbitmqInstanceInput is an input type that accepts InstancesRabbitmqInstanceArgs and InstancesRabbitmqInstanceOutput values.
// You can construct a concrete instance of `InstancesRabbitmqInstanceInput` via:
//
//	InstancesRabbitmqInstanceArgs{...}
type InstancesRabbitmqInstanceInput interface {
	pulumi.Input

	ToInstancesRabbitmqInstanceOutput() InstancesRabbitmqInstanceOutput
	ToInstancesRabbitmqInstanceOutputWithContext(context.Context) InstancesRabbitmqInstanceOutput
}

type InstancesRabbitmqInstanceArgs struct {
	// The account id of the rabbitmq instance.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Whether enable the public network parsing function of the rabbitmq instance.
	ApplyPrivateDnsToPublic pulumi.BoolInput `pulumi:"applyPrivateDnsToPublic"`
	// The type of the rabbitmq instance.
	ArchType pulumi.StringInput `pulumi:"archType"`
	// The charge detail information of the rabbitmq instance.
	ChargeDetails InstancesRabbitmqInstanceChargeDetailArrayInput `pulumi:"chargeDetails"`
	// The compute specification of the rabbitmq instance.
	ComputeSpec pulumi.StringInput `pulumi:"computeSpec"`
	// The create time of the rabbitmq instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The eip id of the rabbitmq instance.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The endpoint info of the rabbitmq instance.
	Endpoints InstancesRabbitmqInstanceEndpointArrayInput `pulumi:"endpoints"`
	// The id of the rabbitmq instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The WebUI admin user name of the rabbitmq instance.
	InitUserName pulumi.StringInput `pulumi:"initUserName"`
	// The description of the rabbitmq instance.
	InstanceDescription pulumi.StringInput `pulumi:"instanceDescription"`
	// The id of rabbitmq instance. This field supports fuzzy query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of rabbitmq instance. This field supports fuzzy query.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of rabbitmq instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The project name of rabbitmq instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region description of the rabbitmq instance.
	RegionDescription pulumi.StringInput `pulumi:"regionDescription"`
	// The region id of the rabbitmq instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The total storage space of the rabbitmq instance. Unit: GiB.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// The subnet id of the rabbitmq instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags InstancesRabbitmqInstanceTagArrayInput `pulumi:"tags"`
	// The used storage space of the rabbitmq instance. Unit: GiB.
	UsedStorageSpace pulumi.IntInput `pulumi:"usedStorageSpace"`
	// The version of the rabbitmq instance.
	Version pulumi.StringInput `pulumi:"version"`
	// The vpc id of rabbitmq instance. This field supports fuzzy query.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone description of the rabbitmq instance.
	ZoneDescription pulumi.StringInput `pulumi:"zoneDescription"`
	// The zone id of rabbitmq instance. This field supports fuzzy query.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (InstancesRabbitmqInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRabbitmqInstance)(nil)).Elem()
}

func (i InstancesRabbitmqInstanceArgs) ToInstancesRabbitmqInstanceOutput() InstancesRabbitmqInstanceOutput {
	return i.ToInstancesRabbitmqInstanceOutputWithContext(context.Background())
}

func (i InstancesRabbitmqInstanceArgs) ToInstancesRabbitmqInstanceOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRabbitmqInstanceOutput)
}

// InstancesRabbitmqInstanceArrayInput is an input type that accepts InstancesRabbitmqInstanceArray and InstancesRabbitmqInstanceArrayOutput values.
// You can construct a concrete instance of `InstancesRabbitmqInstanceArrayInput` via:
//
//	InstancesRabbitmqInstanceArray{ InstancesRabbitmqInstanceArgs{...} }
type InstancesRabbitmqInstanceArrayInput interface {
	pulumi.Input

	ToInstancesRabbitmqInstanceArrayOutput() InstancesRabbitmqInstanceArrayOutput
	ToInstancesRabbitmqInstanceArrayOutputWithContext(context.Context) InstancesRabbitmqInstanceArrayOutput
}

type InstancesRabbitmqInstanceArray []InstancesRabbitmqInstanceInput

func (InstancesRabbitmqInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRabbitmqInstance)(nil)).Elem()
}

func (i InstancesRabbitmqInstanceArray) ToInstancesRabbitmqInstanceArrayOutput() InstancesRabbitmqInstanceArrayOutput {
	return i.ToInstancesRabbitmqInstanceArrayOutputWithContext(context.Background())
}

func (i InstancesRabbitmqInstanceArray) ToInstancesRabbitmqInstanceArrayOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRabbitmqInstanceArrayOutput)
}

type InstancesRabbitmqInstanceOutput struct{ *pulumi.OutputState }

func (InstancesRabbitmqInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRabbitmqInstance)(nil)).Elem()
}

func (o InstancesRabbitmqInstanceOutput) ToInstancesRabbitmqInstanceOutput() InstancesRabbitmqInstanceOutput {
	return o
}

func (o InstancesRabbitmqInstanceOutput) ToInstancesRabbitmqInstanceOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceOutput {
	return o
}

// The account id of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.AccountId }).(pulumi.StringOutput)
}

// Whether enable the public network parsing function of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) ApplyPrivateDnsToPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) bool { return v.ApplyPrivateDnsToPublic }).(pulumi.BoolOutput)
}

// The type of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) ArchType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.ArchType }).(pulumi.StringOutput)
}

// The charge detail information of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) ChargeDetails() InstancesRabbitmqInstanceChargeDetailArrayOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) []InstancesRabbitmqInstanceChargeDetail { return v.ChargeDetails }).(InstancesRabbitmqInstanceChargeDetailArrayOutput)
}

// The compute specification of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.ComputeSpec }).(pulumi.StringOutput)
}

// The create time of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The eip id of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.EipId }).(pulumi.StringOutput)
}

// The endpoint info of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) Endpoints() InstancesRabbitmqInstanceEndpointArrayOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) []InstancesRabbitmqInstanceEndpoint { return v.Endpoints }).(InstancesRabbitmqInstanceEndpointArrayOutput)
}

// The id of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The WebUI admin user name of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) InitUserName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.InitUserName }).(pulumi.StringOutput)
}

// The description of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) InstanceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.InstanceDescription }).(pulumi.StringOutput)
}

// The id of rabbitmq instance. This field supports fuzzy query.
func (o InstancesRabbitmqInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of rabbitmq instance. This field supports fuzzy query.
func (o InstancesRabbitmqInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The project name of rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region description of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) RegionDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.RegionDescription }).(pulumi.StringOutput)
}

// The region id of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// The total storage space of the rabbitmq instance. Unit: GiB.
func (o InstancesRabbitmqInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// The subnet id of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o InstancesRabbitmqInstanceOutput) Tags() InstancesRabbitmqInstanceTagArrayOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) []InstancesRabbitmqInstanceTag { return v.Tags }).(InstancesRabbitmqInstanceTagArrayOutput)
}

// The used storage space of the rabbitmq instance. Unit: GiB.
func (o InstancesRabbitmqInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) int { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// The version of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.Version }).(pulumi.StringOutput)
}

// The vpc id of rabbitmq instance. This field supports fuzzy query.
func (o InstancesRabbitmqInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone description of the rabbitmq instance.
func (o InstancesRabbitmqInstanceOutput) ZoneDescription() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.ZoneDescription }).(pulumi.StringOutput)
}

// The zone id of rabbitmq instance. This field supports fuzzy query.
func (o InstancesRabbitmqInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type InstancesRabbitmqInstanceArrayOutput struct{ *pulumi.OutputState }

func (InstancesRabbitmqInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRabbitmqInstance)(nil)).Elem()
}

func (o InstancesRabbitmqInstanceArrayOutput) ToInstancesRabbitmqInstanceArrayOutput() InstancesRabbitmqInstanceArrayOutput {
	return o
}

func (o InstancesRabbitmqInstanceArrayOutput) ToInstancesRabbitmqInstanceArrayOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceArrayOutput {
	return o
}

func (o InstancesRabbitmqInstanceArrayOutput) Index(i pulumi.IntInput) InstancesRabbitmqInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRabbitmqInstance {
		return vs[0].([]InstancesRabbitmqInstance)[vs[1].(int)]
	}).(InstancesRabbitmqInstanceOutput)
}

type InstancesRabbitmqInstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew bool `pulumi:"autoRenew"`
	// The charge end time of the rabbitmq instance.
	ChargeEndTime string `pulumi:"chargeEndTime"`
	// The charge expire time of the rabbitmq instance.
	ChargeExpireTime string `pulumi:"chargeExpireTime"`
	// The charge start time of the rabbitmq instance.
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// The charge status of the rabbitmq instance.
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of rabbitmq instance.
	ChargeType string `pulumi:"chargeType"`
	// The overdue reclaim time of the rabbitmq instance.
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// The overdue time of the rabbitmq instance.
	OverdueTime string `pulumi:"overdueTime"`
}

// InstancesRabbitmqInstanceChargeDetailInput is an input type that accepts InstancesRabbitmqInstanceChargeDetailArgs and InstancesRabbitmqInstanceChargeDetailOutput values.
// You can construct a concrete instance of `InstancesRabbitmqInstanceChargeDetailInput` via:
//
//	InstancesRabbitmqInstanceChargeDetailArgs{...}
type InstancesRabbitmqInstanceChargeDetailInput interface {
	pulumi.Input

	ToInstancesRabbitmqInstanceChargeDetailOutput() InstancesRabbitmqInstanceChargeDetailOutput
	ToInstancesRabbitmqInstanceChargeDetailOutputWithContext(context.Context) InstancesRabbitmqInstanceChargeDetailOutput
}

type InstancesRabbitmqInstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The charge end time of the rabbitmq instance.
	ChargeEndTime pulumi.StringInput `pulumi:"chargeEndTime"`
	// The charge expire time of the rabbitmq instance.
	ChargeExpireTime pulumi.StringInput `pulumi:"chargeExpireTime"`
	// The charge start time of the rabbitmq instance.
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// The charge status of the rabbitmq instance.
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of rabbitmq instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The overdue reclaim time of the rabbitmq instance.
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// The overdue time of the rabbitmq instance.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
}

func (InstancesRabbitmqInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRabbitmqInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesRabbitmqInstanceChargeDetailArgs) ToInstancesRabbitmqInstanceChargeDetailOutput() InstancesRabbitmqInstanceChargeDetailOutput {
	return i.ToInstancesRabbitmqInstanceChargeDetailOutputWithContext(context.Background())
}

func (i InstancesRabbitmqInstanceChargeDetailArgs) ToInstancesRabbitmqInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRabbitmqInstanceChargeDetailOutput)
}

// InstancesRabbitmqInstanceChargeDetailArrayInput is an input type that accepts InstancesRabbitmqInstanceChargeDetailArray and InstancesRabbitmqInstanceChargeDetailArrayOutput values.
// You can construct a concrete instance of `InstancesRabbitmqInstanceChargeDetailArrayInput` via:
//
//	InstancesRabbitmqInstanceChargeDetailArray{ InstancesRabbitmqInstanceChargeDetailArgs{...} }
type InstancesRabbitmqInstanceChargeDetailArrayInput interface {
	pulumi.Input

	ToInstancesRabbitmqInstanceChargeDetailArrayOutput() InstancesRabbitmqInstanceChargeDetailArrayOutput
	ToInstancesRabbitmqInstanceChargeDetailArrayOutputWithContext(context.Context) InstancesRabbitmqInstanceChargeDetailArrayOutput
}

type InstancesRabbitmqInstanceChargeDetailArray []InstancesRabbitmqInstanceChargeDetailInput

func (InstancesRabbitmqInstanceChargeDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRabbitmqInstanceChargeDetail)(nil)).Elem()
}

func (i InstancesRabbitmqInstanceChargeDetailArray) ToInstancesRabbitmqInstanceChargeDetailArrayOutput() InstancesRabbitmqInstanceChargeDetailArrayOutput {
	return i.ToInstancesRabbitmqInstanceChargeDetailArrayOutputWithContext(context.Background())
}

func (i InstancesRabbitmqInstanceChargeDetailArray) ToInstancesRabbitmqInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceChargeDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRabbitmqInstanceChargeDetailArrayOutput)
}

type InstancesRabbitmqInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (InstancesRabbitmqInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRabbitmqInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesRabbitmqInstanceChargeDetailOutput) ToInstancesRabbitmqInstanceChargeDetailOutput() InstancesRabbitmqInstanceChargeDetailOutput {
	return o
}

func (o InstancesRabbitmqInstanceChargeDetailOutput) ToInstancesRabbitmqInstanceChargeDetailOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
func (o InstancesRabbitmqInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The charge end time of the rabbitmq instance.
func (o InstancesRabbitmqInstanceChargeDetailOutput) ChargeEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceChargeDetail) string { return v.ChargeEndTime }).(pulumi.StringOutput)
}

// The charge expire time of the rabbitmq instance.
func (o InstancesRabbitmqInstanceChargeDetailOutput) ChargeExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceChargeDetail) string { return v.ChargeExpireTime }).(pulumi.StringOutput)
}

// The charge start time of the rabbitmq instance.
func (o InstancesRabbitmqInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// The charge status of the rabbitmq instance.
func (o InstancesRabbitmqInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of rabbitmq instance.
func (o InstancesRabbitmqInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The overdue reclaim time of the rabbitmq instance.
func (o InstancesRabbitmqInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// The overdue time of the rabbitmq instance.
func (o InstancesRabbitmqInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

type InstancesRabbitmqInstanceChargeDetailArrayOutput struct{ *pulumi.OutputState }

func (InstancesRabbitmqInstanceChargeDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRabbitmqInstanceChargeDetail)(nil)).Elem()
}

func (o InstancesRabbitmqInstanceChargeDetailArrayOutput) ToInstancesRabbitmqInstanceChargeDetailArrayOutput() InstancesRabbitmqInstanceChargeDetailArrayOutput {
	return o
}

func (o InstancesRabbitmqInstanceChargeDetailArrayOutput) ToInstancesRabbitmqInstanceChargeDetailArrayOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceChargeDetailArrayOutput {
	return o
}

func (o InstancesRabbitmqInstanceChargeDetailArrayOutput) Index(i pulumi.IntInput) InstancesRabbitmqInstanceChargeDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRabbitmqInstanceChargeDetail {
		return vs[0].([]InstancesRabbitmqInstanceChargeDetail)[vs[1].(int)]
	}).(InstancesRabbitmqInstanceChargeDetailOutput)
}

type InstancesRabbitmqInstanceEndpoint struct {
	// The endpoint type of the rabbitmq instance.
	EndpointType string `pulumi:"endpointType"`
	// The internal endpoint of the rabbitmq instance.
	InternalEndpoint string `pulumi:"internalEndpoint"`
	// The network type of the rabbitmq instance.
	NetworkType string `pulumi:"networkType"`
	// The public endpoint of the rabbitmq instance.
	PublicEndpoint string `pulumi:"publicEndpoint"`
}

// InstancesRabbitmqInstanceEndpointInput is an input type that accepts InstancesRabbitmqInstanceEndpointArgs and InstancesRabbitmqInstanceEndpointOutput values.
// You can construct a concrete instance of `InstancesRabbitmqInstanceEndpointInput` via:
//
//	InstancesRabbitmqInstanceEndpointArgs{...}
type InstancesRabbitmqInstanceEndpointInput interface {
	pulumi.Input

	ToInstancesRabbitmqInstanceEndpointOutput() InstancesRabbitmqInstanceEndpointOutput
	ToInstancesRabbitmqInstanceEndpointOutputWithContext(context.Context) InstancesRabbitmqInstanceEndpointOutput
}

type InstancesRabbitmqInstanceEndpointArgs struct {
	// The endpoint type of the rabbitmq instance.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The internal endpoint of the rabbitmq instance.
	InternalEndpoint pulumi.StringInput `pulumi:"internalEndpoint"`
	// The network type of the rabbitmq instance.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The public endpoint of the rabbitmq instance.
	PublicEndpoint pulumi.StringInput `pulumi:"publicEndpoint"`
}

func (InstancesRabbitmqInstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRabbitmqInstanceEndpoint)(nil)).Elem()
}

func (i InstancesRabbitmqInstanceEndpointArgs) ToInstancesRabbitmqInstanceEndpointOutput() InstancesRabbitmqInstanceEndpointOutput {
	return i.ToInstancesRabbitmqInstanceEndpointOutputWithContext(context.Background())
}

func (i InstancesRabbitmqInstanceEndpointArgs) ToInstancesRabbitmqInstanceEndpointOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRabbitmqInstanceEndpointOutput)
}

// InstancesRabbitmqInstanceEndpointArrayInput is an input type that accepts InstancesRabbitmqInstanceEndpointArray and InstancesRabbitmqInstanceEndpointArrayOutput values.
// You can construct a concrete instance of `InstancesRabbitmqInstanceEndpointArrayInput` via:
//
//	InstancesRabbitmqInstanceEndpointArray{ InstancesRabbitmqInstanceEndpointArgs{...} }
type InstancesRabbitmqInstanceEndpointArrayInput interface {
	pulumi.Input

	ToInstancesRabbitmqInstanceEndpointArrayOutput() InstancesRabbitmqInstanceEndpointArrayOutput
	ToInstancesRabbitmqInstanceEndpointArrayOutputWithContext(context.Context) InstancesRabbitmqInstanceEndpointArrayOutput
}

type InstancesRabbitmqInstanceEndpointArray []InstancesRabbitmqInstanceEndpointInput

func (InstancesRabbitmqInstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRabbitmqInstanceEndpoint)(nil)).Elem()
}

func (i InstancesRabbitmqInstanceEndpointArray) ToInstancesRabbitmqInstanceEndpointArrayOutput() InstancesRabbitmqInstanceEndpointArrayOutput {
	return i.ToInstancesRabbitmqInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i InstancesRabbitmqInstanceEndpointArray) ToInstancesRabbitmqInstanceEndpointArrayOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRabbitmqInstanceEndpointArrayOutput)
}

type InstancesRabbitmqInstanceEndpointOutput struct{ *pulumi.OutputState }

func (InstancesRabbitmqInstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRabbitmqInstanceEndpoint)(nil)).Elem()
}

func (o InstancesRabbitmqInstanceEndpointOutput) ToInstancesRabbitmqInstanceEndpointOutput() InstancesRabbitmqInstanceEndpointOutput {
	return o
}

func (o InstancesRabbitmqInstanceEndpointOutput) ToInstancesRabbitmqInstanceEndpointOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceEndpointOutput {
	return o
}

// The endpoint type of the rabbitmq instance.
func (o InstancesRabbitmqInstanceEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceEndpoint) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The internal endpoint of the rabbitmq instance.
func (o InstancesRabbitmqInstanceEndpointOutput) InternalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceEndpoint) string { return v.InternalEndpoint }).(pulumi.StringOutput)
}

// The network type of the rabbitmq instance.
func (o InstancesRabbitmqInstanceEndpointOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceEndpoint) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The public endpoint of the rabbitmq instance.
func (o InstancesRabbitmqInstanceEndpointOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceEndpoint) string { return v.PublicEndpoint }).(pulumi.StringOutput)
}

type InstancesRabbitmqInstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (InstancesRabbitmqInstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRabbitmqInstanceEndpoint)(nil)).Elem()
}

func (o InstancesRabbitmqInstanceEndpointArrayOutput) ToInstancesRabbitmqInstanceEndpointArrayOutput() InstancesRabbitmqInstanceEndpointArrayOutput {
	return o
}

func (o InstancesRabbitmqInstanceEndpointArrayOutput) ToInstancesRabbitmqInstanceEndpointArrayOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceEndpointArrayOutput {
	return o
}

func (o InstancesRabbitmqInstanceEndpointArrayOutput) Index(i pulumi.IntInput) InstancesRabbitmqInstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRabbitmqInstanceEndpoint {
		return vs[0].([]InstancesRabbitmqInstanceEndpoint)[vs[1].(int)]
	}).(InstancesRabbitmqInstanceEndpointOutput)
}

type InstancesRabbitmqInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesRabbitmqInstanceTagInput is an input type that accepts InstancesRabbitmqInstanceTagArgs and InstancesRabbitmqInstanceTagOutput values.
// You can construct a concrete instance of `InstancesRabbitmqInstanceTagInput` via:
//
//	InstancesRabbitmqInstanceTagArgs{...}
type InstancesRabbitmqInstanceTagInput interface {
	pulumi.Input

	ToInstancesRabbitmqInstanceTagOutput() InstancesRabbitmqInstanceTagOutput
	ToInstancesRabbitmqInstanceTagOutputWithContext(context.Context) InstancesRabbitmqInstanceTagOutput
}

type InstancesRabbitmqInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesRabbitmqInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRabbitmqInstanceTag)(nil)).Elem()
}

func (i InstancesRabbitmqInstanceTagArgs) ToInstancesRabbitmqInstanceTagOutput() InstancesRabbitmqInstanceTagOutput {
	return i.ToInstancesRabbitmqInstanceTagOutputWithContext(context.Background())
}

func (i InstancesRabbitmqInstanceTagArgs) ToInstancesRabbitmqInstanceTagOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRabbitmqInstanceTagOutput)
}

// InstancesRabbitmqInstanceTagArrayInput is an input type that accepts InstancesRabbitmqInstanceTagArray and InstancesRabbitmqInstanceTagArrayOutput values.
// You can construct a concrete instance of `InstancesRabbitmqInstanceTagArrayInput` via:
//
//	InstancesRabbitmqInstanceTagArray{ InstancesRabbitmqInstanceTagArgs{...} }
type InstancesRabbitmqInstanceTagArrayInput interface {
	pulumi.Input

	ToInstancesRabbitmqInstanceTagArrayOutput() InstancesRabbitmqInstanceTagArrayOutput
	ToInstancesRabbitmqInstanceTagArrayOutputWithContext(context.Context) InstancesRabbitmqInstanceTagArrayOutput
}

type InstancesRabbitmqInstanceTagArray []InstancesRabbitmqInstanceTagInput

func (InstancesRabbitmqInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRabbitmqInstanceTag)(nil)).Elem()
}

func (i InstancesRabbitmqInstanceTagArray) ToInstancesRabbitmqInstanceTagArrayOutput() InstancesRabbitmqInstanceTagArrayOutput {
	return i.ToInstancesRabbitmqInstanceTagArrayOutputWithContext(context.Background())
}

func (i InstancesRabbitmqInstanceTagArray) ToInstancesRabbitmqInstanceTagArrayOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesRabbitmqInstanceTagArrayOutput)
}

type InstancesRabbitmqInstanceTagOutput struct{ *pulumi.OutputState }

func (InstancesRabbitmqInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesRabbitmqInstanceTag)(nil)).Elem()
}

func (o InstancesRabbitmqInstanceTagOutput) ToInstancesRabbitmqInstanceTagOutput() InstancesRabbitmqInstanceTagOutput {
	return o
}

func (o InstancesRabbitmqInstanceTagOutput) ToInstancesRabbitmqInstanceTagOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesRabbitmqInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesRabbitmqInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesRabbitmqInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesRabbitmqInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesRabbitmqInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesRabbitmqInstanceTag)(nil)).Elem()
}

func (o InstancesRabbitmqInstanceTagArrayOutput) ToInstancesRabbitmqInstanceTagArrayOutput() InstancesRabbitmqInstanceTagArrayOutput {
	return o
}

func (o InstancesRabbitmqInstanceTagArrayOutput) ToInstancesRabbitmqInstanceTagArrayOutputWithContext(ctx context.Context) InstancesRabbitmqInstanceTagArrayOutput {
	return o
}

func (o InstancesRabbitmqInstanceTagArrayOutput) Index(i pulumi.IntInput) InstancesRabbitmqInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesRabbitmqInstanceTag {
		return vs[0].([]InstancesRabbitmqInstanceTag)[vs[1].(int)]
	}).(InstancesRabbitmqInstanceTagOutput)
}

type InstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// InstancesTagInput is an input type that accepts InstancesTagArgs and InstancesTagOutput values.
// You can construct a concrete instance of `InstancesTagInput` via:
//
//	InstancesTagArgs{...}
type InstancesTagInput interface {
	pulumi.Input

	ToInstancesTagOutput() InstancesTagOutput
	ToInstancesTagOutputWithContext(context.Context) InstancesTagOutput
}

type InstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (InstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (i InstancesTagArgs) ToInstancesTagOutput() InstancesTagOutput {
	return i.ToInstancesTagOutputWithContext(context.Background())
}

func (i InstancesTagArgs) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagOutput)
}

// InstancesTagArrayInput is an input type that accepts InstancesTagArray and InstancesTagArrayOutput values.
// You can construct a concrete instance of `InstancesTagArrayInput` via:
//
//	InstancesTagArray{ InstancesTagArgs{...} }
type InstancesTagArrayInput interface {
	pulumi.Input

	ToInstancesTagArrayOutput() InstancesTagArrayOutput
	ToInstancesTagArrayOutputWithContext(context.Context) InstancesTagArrayOutput
}

type InstancesTagArray []InstancesTagInput

func (InstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (i InstancesTagArray) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return i.ToInstancesTagArrayOutputWithContext(context.Background())
}

func (i InstancesTagArray) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancesTagArrayOutput)
}

type InstancesTagOutput struct{ *pulumi.OutputState }

func (InstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InstancesTag)(nil)).Elem()
}

func (o InstancesTagOutput) ToInstancesTagOutput() InstancesTagOutput {
	return o
}

func (o InstancesTagOutput) ToInstancesTagOutputWithContext(ctx context.Context) InstancesTagOutput {
	return o
}

// The Key of Tags.
func (o InstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o InstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v InstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type InstancesTagArrayOutput struct{ *pulumi.OutputState }

func (InstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InstancesTag)(nil)).Elem()
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutput() InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) ToInstancesTagArrayOutputWithContext(ctx context.Context) InstancesTagArrayOutput {
	return o
}

func (o InstancesTagArrayOutput) Index(i pulumi.IntInput) InstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InstancesTag {
		return vs[0].([]InstancesTag)[vs[1].(int)]
	}).(InstancesTagOutput)
}

type RegionsRegion struct {
	// The description of region.
	Description string `pulumi:"description"`
	// The ID of region.
	RegionId string `pulumi:"regionId"`
	// The name of region.
	RegionName string `pulumi:"regionName"`
	// The status of region.
	Status string `pulumi:"status"`
}

// RegionsRegionInput is an input type that accepts RegionsRegionArgs and RegionsRegionOutput values.
// You can construct a concrete instance of `RegionsRegionInput` via:
//
//	RegionsRegionArgs{...}
type RegionsRegionInput interface {
	pulumi.Input

	ToRegionsRegionOutput() RegionsRegionOutput
	ToRegionsRegionOutputWithContext(context.Context) RegionsRegionOutput
}

type RegionsRegionArgs struct {
	// The description of region.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The name of region.
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// The status of region.
	Status pulumi.StringInput `pulumi:"status"`
}

func (RegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArgs) ToRegionsRegionOutput() RegionsRegionOutput {
	return i.ToRegionsRegionOutputWithContext(context.Background())
}

func (i RegionsRegionArgs) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionOutput)
}

// RegionsRegionArrayInput is an input type that accepts RegionsRegionArray and RegionsRegionArrayOutput values.
// You can construct a concrete instance of `RegionsRegionArrayInput` via:
//
//	RegionsRegionArray{ RegionsRegionArgs{...} }
type RegionsRegionArrayInput interface {
	pulumi.Input

	ToRegionsRegionArrayOutput() RegionsRegionArrayOutput
	ToRegionsRegionArrayOutputWithContext(context.Context) RegionsRegionArrayOutput
}

type RegionsRegionArray []RegionsRegionInput

func (RegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return i.ToRegionsRegionArrayOutputWithContext(context.Background())
}

func (i RegionsRegionArray) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RegionsRegionArrayOutput)
}

type RegionsRegionOutput struct{ *pulumi.OutputState }

func (RegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionOutput) ToRegionsRegionOutput() RegionsRegionOutput {
	return o
}

func (o RegionsRegionOutput) ToRegionsRegionOutputWithContext(ctx context.Context) RegionsRegionOutput {
	return o
}

// The description of region.
func (o RegionsRegionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of region.
func (o RegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

// The name of region.
func (o RegionsRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.RegionName }).(pulumi.StringOutput)
}

// The status of region.
func (o RegionsRegionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v RegionsRegion) string { return v.Status }).(pulumi.StringOutput)
}

type RegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (RegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RegionsRegion)(nil)).Elem()
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutput() RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) ToRegionsRegionArrayOutputWithContext(ctx context.Context) RegionsRegionArrayOutput {
	return o
}

func (o RegionsRegionArrayOutput) Index(i pulumi.IntInput) RegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RegionsRegion {
		return vs[0].([]RegionsRegion)[vs[1].(int)]
	}).(RegionsRegionOutput)
}

type ZonesZone struct {
	// The description of zone.
	Description string `pulumi:"description"`
	// The status of zone.
	Status string `pulumi:"status"`
	// The ID of zone.
	ZoneId string `pulumi:"zoneId"`
	// The name of zone.
	ZoneName string `pulumi:"zoneName"`
}

// ZonesZoneInput is an input type that accepts ZonesZoneArgs and ZonesZoneOutput values.
// You can construct a concrete instance of `ZonesZoneInput` via:
//
//	ZonesZoneArgs{...}
type ZonesZoneInput interface {
	pulumi.Input

	ToZonesZoneOutput() ZonesZoneOutput
	ToZonesZoneOutputWithContext(context.Context) ZonesZoneOutput
}

type ZonesZoneArgs struct {
	// The description of zone.
	Description pulumi.StringInput `pulumi:"description"`
	// The status of zone.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// The name of zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (ZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArgs) ToZonesZoneOutput() ZonesZoneOutput {
	return i.ToZonesZoneOutputWithContext(context.Background())
}

func (i ZonesZoneArgs) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneOutput)
}

// ZonesZoneArrayInput is an input type that accepts ZonesZoneArray and ZonesZoneArrayOutput values.
// You can construct a concrete instance of `ZonesZoneArrayInput` via:
//
//	ZonesZoneArray{ ZonesZoneArgs{...} }
type ZonesZoneArrayInput interface {
	pulumi.Input

	ToZonesZoneArrayOutput() ZonesZoneArrayOutput
	ToZonesZoneArrayOutputWithContext(context.Context) ZonesZoneArrayOutput
}

type ZonesZoneArray []ZonesZoneInput

func (ZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (i ZonesZoneArray) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return i.ToZonesZoneArrayOutputWithContext(context.Background())
}

func (i ZonesZoneArray) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZonesZoneArrayOutput)
}

type ZonesZoneOutput struct{ *pulumi.OutputState }

func (ZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ZonesZone)(nil)).Elem()
}

func (o ZonesZoneOutput) ToZonesZoneOutput() ZonesZoneOutput {
	return o
}

func (o ZonesZoneOutput) ToZonesZoneOutputWithContext(ctx context.Context) ZonesZoneOutput {
	return o
}

// The description of zone.
func (o ZonesZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Description }).(pulumi.StringOutput)
}

// The status of zone.
func (o ZonesZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of zone.
func (o ZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

// The name of zone.
func (o ZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v ZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type ZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (ZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ZonesZone)(nil)).Elem()
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutput() ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) ToZonesZoneArrayOutputWithContext(ctx context.Context) ZonesZoneArrayOutput {
	return o
}

func (o ZonesZoneArrayOutput) Index(i pulumi.IntInput) ZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ZonesZone {
		return vs[0].([]ZonesZone)[vs[1].(int)]
	}).(ZonesZoneOutput)
}

type GetInstancePluginsPlugin struct {
	// The description of plugin.
	Description string `pulumi:"description"`
	// The disable prompt of plugin.
	DisablePrompt string `pulumi:"disablePrompt"`
	// The enable prompt of plugin.
	EnablePrompt string `pulumi:"enablePrompt"`
	// Whether plugin is enabled.
	Enabled bool `pulumi:"enabled"`
	// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
	NeedRebootOnChange bool `pulumi:"needRebootOnChange"`
	// The name of plugin.
	PluginName string `pulumi:"pluginName"`
	// The port of plugin.
	Port int `pulumi:"port"`
	// The version of plugin.
	Version string `pulumi:"version"`
}

// GetInstancePluginsPluginInput is an input type that accepts GetInstancePluginsPluginArgs and GetInstancePluginsPluginOutput values.
// You can construct a concrete instance of `GetInstancePluginsPluginInput` via:
//
//	GetInstancePluginsPluginArgs{...}
type GetInstancePluginsPluginInput interface {
	pulumi.Input

	ToGetInstancePluginsPluginOutput() GetInstancePluginsPluginOutput
	ToGetInstancePluginsPluginOutputWithContext(context.Context) GetInstancePluginsPluginOutput
}

type GetInstancePluginsPluginArgs struct {
	// The description of plugin.
	Description pulumi.StringInput `pulumi:"description"`
	// The disable prompt of plugin.
	DisablePrompt pulumi.StringInput `pulumi:"disablePrompt"`
	// The enable prompt of plugin.
	EnablePrompt pulumi.StringInput `pulumi:"enablePrompt"`
	// Whether plugin is enabled.
	Enabled pulumi.BoolInput `pulumi:"enabled"`
	// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
	NeedRebootOnChange pulumi.BoolInput `pulumi:"needRebootOnChange"`
	// The name of plugin.
	PluginName pulumi.StringInput `pulumi:"pluginName"`
	// The port of plugin.
	Port pulumi.IntInput `pulumi:"port"`
	// The version of plugin.
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetInstancePluginsPluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePluginsPlugin)(nil)).Elem()
}

func (i GetInstancePluginsPluginArgs) ToGetInstancePluginsPluginOutput() GetInstancePluginsPluginOutput {
	return i.ToGetInstancePluginsPluginOutputWithContext(context.Background())
}

func (i GetInstancePluginsPluginArgs) ToGetInstancePluginsPluginOutputWithContext(ctx context.Context) GetInstancePluginsPluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePluginsPluginOutput)
}

// GetInstancePluginsPluginArrayInput is an input type that accepts GetInstancePluginsPluginArray and GetInstancePluginsPluginArrayOutput values.
// You can construct a concrete instance of `GetInstancePluginsPluginArrayInput` via:
//
//	GetInstancePluginsPluginArray{ GetInstancePluginsPluginArgs{...} }
type GetInstancePluginsPluginArrayInput interface {
	pulumi.Input

	ToGetInstancePluginsPluginArrayOutput() GetInstancePluginsPluginArrayOutput
	ToGetInstancePluginsPluginArrayOutputWithContext(context.Context) GetInstancePluginsPluginArrayOutput
}

type GetInstancePluginsPluginArray []GetInstancePluginsPluginInput

func (GetInstancePluginsPluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePluginsPlugin)(nil)).Elem()
}

func (i GetInstancePluginsPluginArray) ToGetInstancePluginsPluginArrayOutput() GetInstancePluginsPluginArrayOutput {
	return i.ToGetInstancePluginsPluginArrayOutputWithContext(context.Background())
}

func (i GetInstancePluginsPluginArray) ToGetInstancePluginsPluginArrayOutputWithContext(ctx context.Context) GetInstancePluginsPluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancePluginsPluginArrayOutput)
}

type GetInstancePluginsPluginOutput struct{ *pulumi.OutputState }

func (GetInstancePluginsPluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancePluginsPlugin)(nil)).Elem()
}

func (o GetInstancePluginsPluginOutput) ToGetInstancePluginsPluginOutput() GetInstancePluginsPluginOutput {
	return o
}

func (o GetInstancePluginsPluginOutput) ToGetInstancePluginsPluginOutputWithContext(ctx context.Context) GetInstancePluginsPluginOutput {
	return o
}

// The description of plugin.
func (o GetInstancePluginsPluginOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePluginsPlugin) string { return v.Description }).(pulumi.StringOutput)
}

// The disable prompt of plugin.
func (o GetInstancePluginsPluginOutput) DisablePrompt() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePluginsPlugin) string { return v.DisablePrompt }).(pulumi.StringOutput)
}

// The enable prompt of plugin.
func (o GetInstancePluginsPluginOutput) EnablePrompt() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePluginsPlugin) string { return v.EnablePrompt }).(pulumi.StringOutput)
}

// Whether plugin is enabled.
func (o GetInstancePluginsPluginOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancePluginsPlugin) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
func (o GetInstancePluginsPluginOutput) NeedRebootOnChange() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancePluginsPlugin) bool { return v.NeedRebootOnChange }).(pulumi.BoolOutput)
}

// The name of plugin.
func (o GetInstancePluginsPluginOutput) PluginName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePluginsPlugin) string { return v.PluginName }).(pulumi.StringOutput)
}

// The port of plugin.
func (o GetInstancePluginsPluginOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancePluginsPlugin) int { return v.Port }).(pulumi.IntOutput)
}

// The version of plugin.
func (o GetInstancePluginsPluginOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancePluginsPlugin) string { return v.Version }).(pulumi.StringOutput)
}

type GetInstancePluginsPluginArrayOutput struct{ *pulumi.OutputState }

func (GetInstancePluginsPluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancePluginsPlugin)(nil)).Elem()
}

func (o GetInstancePluginsPluginArrayOutput) ToGetInstancePluginsPluginArrayOutput() GetInstancePluginsPluginArrayOutput {
	return o
}

func (o GetInstancePluginsPluginArrayOutput) ToGetInstancePluginsPluginArrayOutputWithContext(ctx context.Context) GetInstancePluginsPluginArrayOutput {
	return o
}

func (o GetInstancePluginsPluginArrayOutput) Index(i pulumi.IntInput) GetInstancePluginsPluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancePluginsPlugin {
		return vs[0].([]GetInstancePluginsPlugin)[vs[1].(int)]
	}).(GetInstancePluginsPluginOutput)
}

type GetInstancesRabbitmqInstance struct {
	// The account id of the rabbitmq instance.
	AccountId string `pulumi:"accountId"`
	// Whether enable the public network parsing function of the rabbitmq instance.
	ApplyPrivateDnsToPublic bool `pulumi:"applyPrivateDnsToPublic"`
	// The type of the rabbitmq instance.
	ArchType string `pulumi:"archType"`
	// The charge detail information of the rabbitmq instance.
	ChargeDetails []GetInstancesRabbitmqInstanceChargeDetail `pulumi:"chargeDetails"`
	// The compute specification of the rabbitmq instance.
	ComputeSpec string `pulumi:"computeSpec"`
	// The create time of the rabbitmq instance.
	CreateTime string `pulumi:"createTime"`
	// The eip id of the rabbitmq instance.
	EipId string `pulumi:"eipId"`
	// The endpoint info of the rabbitmq instance.
	Endpoints []GetInstancesRabbitmqInstanceEndpoint `pulumi:"endpoints"`
	// The id of the rabbitmq instance.
	Id string `pulumi:"id"`
	// The WebUI admin user name of the rabbitmq instance.
	InitUserName string `pulumi:"initUserName"`
	// The description of the rabbitmq instance.
	InstanceDescription string `pulumi:"instanceDescription"`
	// The id of rabbitmq instance. This field supports fuzzy query.
	InstanceId string `pulumi:"instanceId"`
	// The name of rabbitmq instance. This field supports fuzzy query.
	InstanceName string `pulumi:"instanceName"`
	// The status of rabbitmq instance.
	InstanceStatus string `pulumi:"instanceStatus"`
	// The project name of rabbitmq instance.
	ProjectName string `pulumi:"projectName"`
	// The region description of the rabbitmq instance.
	RegionDescription string `pulumi:"regionDescription"`
	// The region id of the rabbitmq instance.
	RegionId string `pulumi:"regionId"`
	// The total storage space of the rabbitmq instance. Unit: GiB.
	StorageSpace int `pulumi:"storageSpace"`
	// The subnet id of the rabbitmq instance.
	SubnetId string `pulumi:"subnetId"`
	// Tags.
	Tags []GetInstancesRabbitmqInstanceTag `pulumi:"tags"`
	// The used storage space of the rabbitmq instance. Unit: GiB.
	UsedStorageSpace int `pulumi:"usedStorageSpace"`
	// The version of the rabbitmq instance.
	Version string `pulumi:"version"`
	// The vpc id of rabbitmq instance. This field supports fuzzy query.
	VpcId string `pulumi:"vpcId"`
	// The zone description of the rabbitmq instance.
	ZoneDescription string `pulumi:"zoneDescription"`
	// The zone id of rabbitmq instance. This field supports fuzzy query.
	ZoneId string `pulumi:"zoneId"`
}

// GetInstancesRabbitmqInstanceInput is an input type that accepts GetInstancesRabbitmqInstanceArgs and GetInstancesRabbitmqInstanceOutput values.
// You can construct a concrete instance of `GetInstancesRabbitmqInstanceInput` via:
//
//	GetInstancesRabbitmqInstanceArgs{...}
type GetInstancesRabbitmqInstanceInput interface {
	pulumi.Input

	ToGetInstancesRabbitmqInstanceOutput() GetInstancesRabbitmqInstanceOutput
	ToGetInstancesRabbitmqInstanceOutputWithContext(context.Context) GetInstancesRabbitmqInstanceOutput
}

type GetInstancesRabbitmqInstanceArgs struct {
	// The account id of the rabbitmq instance.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// Whether enable the public network parsing function of the rabbitmq instance.
	ApplyPrivateDnsToPublic pulumi.BoolInput `pulumi:"applyPrivateDnsToPublic"`
	// The type of the rabbitmq instance.
	ArchType pulumi.StringInput `pulumi:"archType"`
	// The charge detail information of the rabbitmq instance.
	ChargeDetails GetInstancesRabbitmqInstanceChargeDetailArrayInput `pulumi:"chargeDetails"`
	// The compute specification of the rabbitmq instance.
	ComputeSpec pulumi.StringInput `pulumi:"computeSpec"`
	// The create time of the rabbitmq instance.
	CreateTime pulumi.StringInput `pulumi:"createTime"`
	// The eip id of the rabbitmq instance.
	EipId pulumi.StringInput `pulumi:"eipId"`
	// The endpoint info of the rabbitmq instance.
	Endpoints GetInstancesRabbitmqInstanceEndpointArrayInput `pulumi:"endpoints"`
	// The id of the rabbitmq instance.
	Id pulumi.StringInput `pulumi:"id"`
	// The WebUI admin user name of the rabbitmq instance.
	InitUserName pulumi.StringInput `pulumi:"initUserName"`
	// The description of the rabbitmq instance.
	InstanceDescription pulumi.StringInput `pulumi:"instanceDescription"`
	// The id of rabbitmq instance. This field supports fuzzy query.
	InstanceId pulumi.StringInput `pulumi:"instanceId"`
	// The name of rabbitmq instance. This field supports fuzzy query.
	InstanceName pulumi.StringInput `pulumi:"instanceName"`
	// The status of rabbitmq instance.
	InstanceStatus pulumi.StringInput `pulumi:"instanceStatus"`
	// The project name of rabbitmq instance.
	ProjectName pulumi.StringInput `pulumi:"projectName"`
	// The region description of the rabbitmq instance.
	RegionDescription pulumi.StringInput `pulumi:"regionDescription"`
	// The region id of the rabbitmq instance.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The total storage space of the rabbitmq instance. Unit: GiB.
	StorageSpace pulumi.IntInput `pulumi:"storageSpace"`
	// The subnet id of the rabbitmq instance.
	SubnetId pulumi.StringInput `pulumi:"subnetId"`
	// Tags.
	Tags GetInstancesRabbitmqInstanceTagArrayInput `pulumi:"tags"`
	// The used storage space of the rabbitmq instance. Unit: GiB.
	UsedStorageSpace pulumi.IntInput `pulumi:"usedStorageSpace"`
	// The version of the rabbitmq instance.
	Version pulumi.StringInput `pulumi:"version"`
	// The vpc id of rabbitmq instance. This field supports fuzzy query.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The zone description of the rabbitmq instance.
	ZoneDescription pulumi.StringInput `pulumi:"zoneDescription"`
	// The zone id of rabbitmq instance. This field supports fuzzy query.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (GetInstancesRabbitmqInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRabbitmqInstance)(nil)).Elem()
}

func (i GetInstancesRabbitmqInstanceArgs) ToGetInstancesRabbitmqInstanceOutput() GetInstancesRabbitmqInstanceOutput {
	return i.ToGetInstancesRabbitmqInstanceOutputWithContext(context.Background())
}

func (i GetInstancesRabbitmqInstanceArgs) ToGetInstancesRabbitmqInstanceOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRabbitmqInstanceOutput)
}

// GetInstancesRabbitmqInstanceArrayInput is an input type that accepts GetInstancesRabbitmqInstanceArray and GetInstancesRabbitmqInstanceArrayOutput values.
// You can construct a concrete instance of `GetInstancesRabbitmqInstanceArrayInput` via:
//
//	GetInstancesRabbitmqInstanceArray{ GetInstancesRabbitmqInstanceArgs{...} }
type GetInstancesRabbitmqInstanceArrayInput interface {
	pulumi.Input

	ToGetInstancesRabbitmqInstanceArrayOutput() GetInstancesRabbitmqInstanceArrayOutput
	ToGetInstancesRabbitmqInstanceArrayOutputWithContext(context.Context) GetInstancesRabbitmqInstanceArrayOutput
}

type GetInstancesRabbitmqInstanceArray []GetInstancesRabbitmqInstanceInput

func (GetInstancesRabbitmqInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRabbitmqInstance)(nil)).Elem()
}

func (i GetInstancesRabbitmqInstanceArray) ToGetInstancesRabbitmqInstanceArrayOutput() GetInstancesRabbitmqInstanceArrayOutput {
	return i.ToGetInstancesRabbitmqInstanceArrayOutputWithContext(context.Background())
}

func (i GetInstancesRabbitmqInstanceArray) ToGetInstancesRabbitmqInstanceArrayOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRabbitmqInstanceArrayOutput)
}

type GetInstancesRabbitmqInstanceOutput struct{ *pulumi.OutputState }

func (GetInstancesRabbitmqInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRabbitmqInstance)(nil)).Elem()
}

func (o GetInstancesRabbitmqInstanceOutput) ToGetInstancesRabbitmqInstanceOutput() GetInstancesRabbitmqInstanceOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceOutput) ToGetInstancesRabbitmqInstanceOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceOutput {
	return o
}

// The account id of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.AccountId }).(pulumi.StringOutput)
}

// Whether enable the public network parsing function of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) ApplyPrivateDnsToPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) bool { return v.ApplyPrivateDnsToPublic }).(pulumi.BoolOutput)
}

// The type of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) ArchType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.ArchType }).(pulumi.StringOutput)
}

// The charge detail information of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) ChargeDetails() GetInstancesRabbitmqInstanceChargeDetailArrayOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) []GetInstancesRabbitmqInstanceChargeDetail {
		return v.ChargeDetails
	}).(GetInstancesRabbitmqInstanceChargeDetailArrayOutput)
}

// The compute specification of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) ComputeSpec() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.ComputeSpec }).(pulumi.StringOutput)
}

// The create time of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.CreateTime }).(pulumi.StringOutput)
}

// The eip id of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) EipId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.EipId }).(pulumi.StringOutput)
}

// The endpoint info of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) Endpoints() GetInstancesRabbitmqInstanceEndpointArrayOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) []GetInstancesRabbitmqInstanceEndpoint { return v.Endpoints }).(GetInstancesRabbitmqInstanceEndpointArrayOutput)
}

// The id of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.Id }).(pulumi.StringOutput)
}

// The WebUI admin user name of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) InitUserName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.InitUserName }).(pulumi.StringOutput)
}

// The description of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) InstanceDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.InstanceDescription }).(pulumi.StringOutput)
}

// The id of rabbitmq instance. This field supports fuzzy query.
func (o GetInstancesRabbitmqInstanceOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.InstanceId }).(pulumi.StringOutput)
}

// The name of rabbitmq instance. This field supports fuzzy query.
func (o GetInstancesRabbitmqInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.InstanceName }).(pulumi.StringOutput)
}

// The status of rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) InstanceStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.InstanceStatus }).(pulumi.StringOutput)
}

// The project name of rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.ProjectName }).(pulumi.StringOutput)
}

// The region description of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) RegionDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.RegionDescription }).(pulumi.StringOutput)
}

// The region id of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.RegionId }).(pulumi.StringOutput)
}

// The total storage space of the rabbitmq instance. Unit: GiB.
func (o GetInstancesRabbitmqInstanceOutput) StorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) int { return v.StorageSpace }).(pulumi.IntOutput)
}

// The subnet id of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) SubnetId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.SubnetId }).(pulumi.StringOutput)
}

// Tags.
func (o GetInstancesRabbitmqInstanceOutput) Tags() GetInstancesRabbitmqInstanceTagArrayOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) []GetInstancesRabbitmqInstanceTag { return v.Tags }).(GetInstancesRabbitmqInstanceTagArrayOutput)
}

// The used storage space of the rabbitmq instance. Unit: GiB.
func (o GetInstancesRabbitmqInstanceOutput) UsedStorageSpace() pulumi.IntOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) int { return v.UsedStorageSpace }).(pulumi.IntOutput)
}

// The version of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.Version }).(pulumi.StringOutput)
}

// The vpc id of rabbitmq instance. This field supports fuzzy query.
func (o GetInstancesRabbitmqInstanceOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.VpcId }).(pulumi.StringOutput)
}

// The zone description of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceOutput) ZoneDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.ZoneDescription }).(pulumi.StringOutput)
}

// The zone id of rabbitmq instance. This field supports fuzzy query.
func (o GetInstancesRabbitmqInstanceOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstance) string { return v.ZoneId }).(pulumi.StringOutput)
}

type GetInstancesRabbitmqInstanceArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRabbitmqInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRabbitmqInstance)(nil)).Elem()
}

func (o GetInstancesRabbitmqInstanceArrayOutput) ToGetInstancesRabbitmqInstanceArrayOutput() GetInstancesRabbitmqInstanceArrayOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceArrayOutput) ToGetInstancesRabbitmqInstanceArrayOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceArrayOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceArrayOutput) Index(i pulumi.IntInput) GetInstancesRabbitmqInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRabbitmqInstance {
		return vs[0].([]GetInstancesRabbitmqInstance)[vs[1].(int)]
	}).(GetInstancesRabbitmqInstanceOutput)
}

type GetInstancesRabbitmqInstanceChargeDetail struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew bool `pulumi:"autoRenew"`
	// The charge end time of the rabbitmq instance.
	ChargeEndTime string `pulumi:"chargeEndTime"`
	// The charge expire time of the rabbitmq instance.
	ChargeExpireTime string `pulumi:"chargeExpireTime"`
	// The charge start time of the rabbitmq instance.
	ChargeStartTime string `pulumi:"chargeStartTime"`
	// The charge status of the rabbitmq instance.
	ChargeStatus string `pulumi:"chargeStatus"`
	// The charge type of rabbitmq instance.
	ChargeType string `pulumi:"chargeType"`
	// The overdue reclaim time of the rabbitmq instance.
	OverdueReclaimTime string `pulumi:"overdueReclaimTime"`
	// The overdue time of the rabbitmq instance.
	OverdueTime string `pulumi:"overdueTime"`
}

// GetInstancesRabbitmqInstanceChargeDetailInput is an input type that accepts GetInstancesRabbitmqInstanceChargeDetailArgs and GetInstancesRabbitmqInstanceChargeDetailOutput values.
// You can construct a concrete instance of `GetInstancesRabbitmqInstanceChargeDetailInput` via:
//
//	GetInstancesRabbitmqInstanceChargeDetailArgs{...}
type GetInstancesRabbitmqInstanceChargeDetailInput interface {
	pulumi.Input

	ToGetInstancesRabbitmqInstanceChargeDetailOutput() GetInstancesRabbitmqInstanceChargeDetailOutput
	ToGetInstancesRabbitmqInstanceChargeDetailOutputWithContext(context.Context) GetInstancesRabbitmqInstanceChargeDetailOutput
}

type GetInstancesRabbitmqInstanceChargeDetailArgs struct {
	// Whether to automatically renew in prepaid scenarios.
	AutoRenew pulumi.BoolInput `pulumi:"autoRenew"`
	// The charge end time of the rabbitmq instance.
	ChargeEndTime pulumi.StringInput `pulumi:"chargeEndTime"`
	// The charge expire time of the rabbitmq instance.
	ChargeExpireTime pulumi.StringInput `pulumi:"chargeExpireTime"`
	// The charge start time of the rabbitmq instance.
	ChargeStartTime pulumi.StringInput `pulumi:"chargeStartTime"`
	// The charge status of the rabbitmq instance.
	ChargeStatus pulumi.StringInput `pulumi:"chargeStatus"`
	// The charge type of rabbitmq instance.
	ChargeType pulumi.StringInput `pulumi:"chargeType"`
	// The overdue reclaim time of the rabbitmq instance.
	OverdueReclaimTime pulumi.StringInput `pulumi:"overdueReclaimTime"`
	// The overdue time of the rabbitmq instance.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
}

func (GetInstancesRabbitmqInstanceChargeDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRabbitmqInstanceChargeDetail)(nil)).Elem()
}

func (i GetInstancesRabbitmqInstanceChargeDetailArgs) ToGetInstancesRabbitmqInstanceChargeDetailOutput() GetInstancesRabbitmqInstanceChargeDetailOutput {
	return i.ToGetInstancesRabbitmqInstanceChargeDetailOutputWithContext(context.Background())
}

func (i GetInstancesRabbitmqInstanceChargeDetailArgs) ToGetInstancesRabbitmqInstanceChargeDetailOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceChargeDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRabbitmqInstanceChargeDetailOutput)
}

// GetInstancesRabbitmqInstanceChargeDetailArrayInput is an input type that accepts GetInstancesRabbitmqInstanceChargeDetailArray and GetInstancesRabbitmqInstanceChargeDetailArrayOutput values.
// You can construct a concrete instance of `GetInstancesRabbitmqInstanceChargeDetailArrayInput` via:
//
//	GetInstancesRabbitmqInstanceChargeDetailArray{ GetInstancesRabbitmqInstanceChargeDetailArgs{...} }
type GetInstancesRabbitmqInstanceChargeDetailArrayInput interface {
	pulumi.Input

	ToGetInstancesRabbitmqInstanceChargeDetailArrayOutput() GetInstancesRabbitmqInstanceChargeDetailArrayOutput
	ToGetInstancesRabbitmqInstanceChargeDetailArrayOutputWithContext(context.Context) GetInstancesRabbitmqInstanceChargeDetailArrayOutput
}

type GetInstancesRabbitmqInstanceChargeDetailArray []GetInstancesRabbitmqInstanceChargeDetailInput

func (GetInstancesRabbitmqInstanceChargeDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRabbitmqInstanceChargeDetail)(nil)).Elem()
}

func (i GetInstancesRabbitmqInstanceChargeDetailArray) ToGetInstancesRabbitmqInstanceChargeDetailArrayOutput() GetInstancesRabbitmqInstanceChargeDetailArrayOutput {
	return i.ToGetInstancesRabbitmqInstanceChargeDetailArrayOutputWithContext(context.Background())
}

func (i GetInstancesRabbitmqInstanceChargeDetailArray) ToGetInstancesRabbitmqInstanceChargeDetailArrayOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceChargeDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRabbitmqInstanceChargeDetailArrayOutput)
}

type GetInstancesRabbitmqInstanceChargeDetailOutput struct{ *pulumi.OutputState }

func (GetInstancesRabbitmqInstanceChargeDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRabbitmqInstanceChargeDetail)(nil)).Elem()
}

func (o GetInstancesRabbitmqInstanceChargeDetailOutput) ToGetInstancesRabbitmqInstanceChargeDetailOutput() GetInstancesRabbitmqInstanceChargeDetailOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceChargeDetailOutput) ToGetInstancesRabbitmqInstanceChargeDetailOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceChargeDetailOutput {
	return o
}

// Whether to automatically renew in prepaid scenarios.
func (o GetInstancesRabbitmqInstanceChargeDetailOutput) AutoRenew() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceChargeDetail) bool { return v.AutoRenew }).(pulumi.BoolOutput)
}

// The charge end time of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceChargeDetailOutput) ChargeEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceChargeDetail) string { return v.ChargeEndTime }).(pulumi.StringOutput)
}

// The charge expire time of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceChargeDetailOutput) ChargeExpireTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceChargeDetail) string { return v.ChargeExpireTime }).(pulumi.StringOutput)
}

// The charge start time of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceChargeDetailOutput) ChargeStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceChargeDetail) string { return v.ChargeStartTime }).(pulumi.StringOutput)
}

// The charge status of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceChargeDetailOutput) ChargeStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceChargeDetail) string { return v.ChargeStatus }).(pulumi.StringOutput)
}

// The charge type of rabbitmq instance.
func (o GetInstancesRabbitmqInstanceChargeDetailOutput) ChargeType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceChargeDetail) string { return v.ChargeType }).(pulumi.StringOutput)
}

// The overdue reclaim time of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceChargeDetailOutput) OverdueReclaimTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceChargeDetail) string { return v.OverdueReclaimTime }).(pulumi.StringOutput)
}

// The overdue time of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceChargeDetailOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceChargeDetail) string { return v.OverdueTime }).(pulumi.StringOutput)
}

type GetInstancesRabbitmqInstanceChargeDetailArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRabbitmqInstanceChargeDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRabbitmqInstanceChargeDetail)(nil)).Elem()
}

func (o GetInstancesRabbitmqInstanceChargeDetailArrayOutput) ToGetInstancesRabbitmqInstanceChargeDetailArrayOutput() GetInstancesRabbitmqInstanceChargeDetailArrayOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceChargeDetailArrayOutput) ToGetInstancesRabbitmqInstanceChargeDetailArrayOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceChargeDetailArrayOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceChargeDetailArrayOutput) Index(i pulumi.IntInput) GetInstancesRabbitmqInstanceChargeDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRabbitmqInstanceChargeDetail {
		return vs[0].([]GetInstancesRabbitmqInstanceChargeDetail)[vs[1].(int)]
	}).(GetInstancesRabbitmqInstanceChargeDetailOutput)
}

type GetInstancesRabbitmqInstanceEndpoint struct {
	// The endpoint type of the rabbitmq instance.
	EndpointType string `pulumi:"endpointType"`
	// The internal endpoint of the rabbitmq instance.
	InternalEndpoint string `pulumi:"internalEndpoint"`
	// The network type of the rabbitmq instance.
	NetworkType string `pulumi:"networkType"`
	// The public endpoint of the rabbitmq instance.
	PublicEndpoint string `pulumi:"publicEndpoint"`
}

// GetInstancesRabbitmqInstanceEndpointInput is an input type that accepts GetInstancesRabbitmqInstanceEndpointArgs and GetInstancesRabbitmqInstanceEndpointOutput values.
// You can construct a concrete instance of `GetInstancesRabbitmqInstanceEndpointInput` via:
//
//	GetInstancesRabbitmqInstanceEndpointArgs{...}
type GetInstancesRabbitmqInstanceEndpointInput interface {
	pulumi.Input

	ToGetInstancesRabbitmqInstanceEndpointOutput() GetInstancesRabbitmqInstanceEndpointOutput
	ToGetInstancesRabbitmqInstanceEndpointOutputWithContext(context.Context) GetInstancesRabbitmqInstanceEndpointOutput
}

type GetInstancesRabbitmqInstanceEndpointArgs struct {
	// The endpoint type of the rabbitmq instance.
	EndpointType pulumi.StringInput `pulumi:"endpointType"`
	// The internal endpoint of the rabbitmq instance.
	InternalEndpoint pulumi.StringInput `pulumi:"internalEndpoint"`
	// The network type of the rabbitmq instance.
	NetworkType pulumi.StringInput `pulumi:"networkType"`
	// The public endpoint of the rabbitmq instance.
	PublicEndpoint pulumi.StringInput `pulumi:"publicEndpoint"`
}

func (GetInstancesRabbitmqInstanceEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRabbitmqInstanceEndpoint)(nil)).Elem()
}

func (i GetInstancesRabbitmqInstanceEndpointArgs) ToGetInstancesRabbitmqInstanceEndpointOutput() GetInstancesRabbitmqInstanceEndpointOutput {
	return i.ToGetInstancesRabbitmqInstanceEndpointOutputWithContext(context.Background())
}

func (i GetInstancesRabbitmqInstanceEndpointArgs) ToGetInstancesRabbitmqInstanceEndpointOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRabbitmqInstanceEndpointOutput)
}

// GetInstancesRabbitmqInstanceEndpointArrayInput is an input type that accepts GetInstancesRabbitmqInstanceEndpointArray and GetInstancesRabbitmqInstanceEndpointArrayOutput values.
// You can construct a concrete instance of `GetInstancesRabbitmqInstanceEndpointArrayInput` via:
//
//	GetInstancesRabbitmqInstanceEndpointArray{ GetInstancesRabbitmqInstanceEndpointArgs{...} }
type GetInstancesRabbitmqInstanceEndpointArrayInput interface {
	pulumi.Input

	ToGetInstancesRabbitmqInstanceEndpointArrayOutput() GetInstancesRabbitmqInstanceEndpointArrayOutput
	ToGetInstancesRabbitmqInstanceEndpointArrayOutputWithContext(context.Context) GetInstancesRabbitmqInstanceEndpointArrayOutput
}

type GetInstancesRabbitmqInstanceEndpointArray []GetInstancesRabbitmqInstanceEndpointInput

func (GetInstancesRabbitmqInstanceEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRabbitmqInstanceEndpoint)(nil)).Elem()
}

func (i GetInstancesRabbitmqInstanceEndpointArray) ToGetInstancesRabbitmqInstanceEndpointArrayOutput() GetInstancesRabbitmqInstanceEndpointArrayOutput {
	return i.ToGetInstancesRabbitmqInstanceEndpointArrayOutputWithContext(context.Background())
}

func (i GetInstancesRabbitmqInstanceEndpointArray) ToGetInstancesRabbitmqInstanceEndpointArrayOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRabbitmqInstanceEndpointArrayOutput)
}

type GetInstancesRabbitmqInstanceEndpointOutput struct{ *pulumi.OutputState }

func (GetInstancesRabbitmqInstanceEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRabbitmqInstanceEndpoint)(nil)).Elem()
}

func (o GetInstancesRabbitmqInstanceEndpointOutput) ToGetInstancesRabbitmqInstanceEndpointOutput() GetInstancesRabbitmqInstanceEndpointOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceEndpointOutput) ToGetInstancesRabbitmqInstanceEndpointOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceEndpointOutput {
	return o
}

// The endpoint type of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceEndpointOutput) EndpointType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceEndpoint) string { return v.EndpointType }).(pulumi.StringOutput)
}

// The internal endpoint of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceEndpointOutput) InternalEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceEndpoint) string { return v.InternalEndpoint }).(pulumi.StringOutput)
}

// The network type of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceEndpointOutput) NetworkType() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceEndpoint) string { return v.NetworkType }).(pulumi.StringOutput)
}

// The public endpoint of the rabbitmq instance.
func (o GetInstancesRabbitmqInstanceEndpointOutput) PublicEndpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceEndpoint) string { return v.PublicEndpoint }).(pulumi.StringOutput)
}

type GetInstancesRabbitmqInstanceEndpointArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRabbitmqInstanceEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRabbitmqInstanceEndpoint)(nil)).Elem()
}

func (o GetInstancesRabbitmqInstanceEndpointArrayOutput) ToGetInstancesRabbitmqInstanceEndpointArrayOutput() GetInstancesRabbitmqInstanceEndpointArrayOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceEndpointArrayOutput) ToGetInstancesRabbitmqInstanceEndpointArrayOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceEndpointArrayOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceEndpointArrayOutput) Index(i pulumi.IntInput) GetInstancesRabbitmqInstanceEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRabbitmqInstanceEndpoint {
		return vs[0].([]GetInstancesRabbitmqInstanceEndpoint)[vs[1].(int)]
	}).(GetInstancesRabbitmqInstanceEndpointOutput)
}

type GetInstancesRabbitmqInstanceTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInstancesRabbitmqInstanceTagInput is an input type that accepts GetInstancesRabbitmqInstanceTagArgs and GetInstancesRabbitmqInstanceTagOutput values.
// You can construct a concrete instance of `GetInstancesRabbitmqInstanceTagInput` via:
//
//	GetInstancesRabbitmqInstanceTagArgs{...}
type GetInstancesRabbitmqInstanceTagInput interface {
	pulumi.Input

	ToGetInstancesRabbitmqInstanceTagOutput() GetInstancesRabbitmqInstanceTagOutput
	ToGetInstancesRabbitmqInstanceTagOutputWithContext(context.Context) GetInstancesRabbitmqInstanceTagOutput
}

type GetInstancesRabbitmqInstanceTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesRabbitmqInstanceTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRabbitmqInstanceTag)(nil)).Elem()
}

func (i GetInstancesRabbitmqInstanceTagArgs) ToGetInstancesRabbitmqInstanceTagOutput() GetInstancesRabbitmqInstanceTagOutput {
	return i.ToGetInstancesRabbitmqInstanceTagOutputWithContext(context.Background())
}

func (i GetInstancesRabbitmqInstanceTagArgs) ToGetInstancesRabbitmqInstanceTagOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRabbitmqInstanceTagOutput)
}

// GetInstancesRabbitmqInstanceTagArrayInput is an input type that accepts GetInstancesRabbitmqInstanceTagArray and GetInstancesRabbitmqInstanceTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesRabbitmqInstanceTagArrayInput` via:
//
//	GetInstancesRabbitmqInstanceTagArray{ GetInstancesRabbitmqInstanceTagArgs{...} }
type GetInstancesRabbitmqInstanceTagArrayInput interface {
	pulumi.Input

	ToGetInstancesRabbitmqInstanceTagArrayOutput() GetInstancesRabbitmqInstanceTagArrayOutput
	ToGetInstancesRabbitmqInstanceTagArrayOutputWithContext(context.Context) GetInstancesRabbitmqInstanceTagArrayOutput
}

type GetInstancesRabbitmqInstanceTagArray []GetInstancesRabbitmqInstanceTagInput

func (GetInstancesRabbitmqInstanceTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRabbitmqInstanceTag)(nil)).Elem()
}

func (i GetInstancesRabbitmqInstanceTagArray) ToGetInstancesRabbitmqInstanceTagArrayOutput() GetInstancesRabbitmqInstanceTagArrayOutput {
	return i.ToGetInstancesRabbitmqInstanceTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesRabbitmqInstanceTagArray) ToGetInstancesRabbitmqInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesRabbitmqInstanceTagArrayOutput)
}

type GetInstancesRabbitmqInstanceTagOutput struct{ *pulumi.OutputState }

func (GetInstancesRabbitmqInstanceTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesRabbitmqInstanceTag)(nil)).Elem()
}

func (o GetInstancesRabbitmqInstanceTagOutput) ToGetInstancesRabbitmqInstanceTagOutput() GetInstancesRabbitmqInstanceTagOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceTagOutput) ToGetInstancesRabbitmqInstanceTagOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceTagOutput {
	return o
}

// The Key of Tags.
func (o GetInstancesRabbitmqInstanceTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInstancesRabbitmqInstanceTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesRabbitmqInstanceTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesRabbitmqInstanceTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesRabbitmqInstanceTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesRabbitmqInstanceTag)(nil)).Elem()
}

func (o GetInstancesRabbitmqInstanceTagArrayOutput) ToGetInstancesRabbitmqInstanceTagArrayOutput() GetInstancesRabbitmqInstanceTagArrayOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceTagArrayOutput) ToGetInstancesRabbitmqInstanceTagArrayOutputWithContext(ctx context.Context) GetInstancesRabbitmqInstanceTagArrayOutput {
	return o
}

func (o GetInstancesRabbitmqInstanceTagArrayOutput) Index(i pulumi.IntInput) GetInstancesRabbitmqInstanceTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesRabbitmqInstanceTag {
		return vs[0].([]GetInstancesRabbitmqInstanceTag)[vs[1].(int)]
	}).(GetInstancesRabbitmqInstanceTagOutput)
}

type GetInstancesTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GetInstancesTagInput is an input type that accepts GetInstancesTagArgs and GetInstancesTagOutput values.
// You can construct a concrete instance of `GetInstancesTagInput` via:
//
//	GetInstancesTagArgs{...}
type GetInstancesTagInput interface {
	pulumi.Input

	ToGetInstancesTagOutput() GetInstancesTagOutput
	ToGetInstancesTagOutputWithContext(context.Context) GetInstancesTagOutput
}

type GetInstancesTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetInstancesTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return i.ToGetInstancesTagOutputWithContext(context.Background())
}

func (i GetInstancesTagArgs) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagOutput)
}

// GetInstancesTagArrayInput is an input type that accepts GetInstancesTagArray and GetInstancesTagArrayOutput values.
// You can construct a concrete instance of `GetInstancesTagArrayInput` via:
//
//	GetInstancesTagArray{ GetInstancesTagArgs{...} }
type GetInstancesTagArrayInput interface {
	pulumi.Input

	ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput
	ToGetInstancesTagArrayOutputWithContext(context.Context) GetInstancesTagArrayOutput
}

type GetInstancesTagArray []GetInstancesTagInput

func (GetInstancesTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return i.ToGetInstancesTagArrayOutputWithContext(context.Background())
}

func (i GetInstancesTagArray) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInstancesTagArrayOutput)
}

type GetInstancesTagOutput struct{ *pulumi.OutputState }

func (GetInstancesTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutput() GetInstancesTagOutput {
	return o
}

func (o GetInstancesTagOutput) ToGetInstancesTagOutputWithContext(ctx context.Context) GetInstancesTagOutput {
	return o
}

// The Key of Tags.
func (o GetInstancesTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GetInstancesTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetInstancesTag) string { return v.Value }).(pulumi.StringOutput)
}

type GetInstancesTagArrayOutput struct{ *pulumi.OutputState }

func (GetInstancesTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInstancesTag)(nil)).Elem()
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutput() GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) ToGetInstancesTagArrayOutputWithContext(ctx context.Context) GetInstancesTagArrayOutput {
	return o
}

func (o GetInstancesTagArrayOutput) Index(i pulumi.IntInput) GetInstancesTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInstancesTag {
		return vs[0].([]GetInstancesTag)[vs[1].(int)]
	}).(GetInstancesTagOutput)
}

type GetRegionsRegion struct {
	// The description of region.
	Description string `pulumi:"description"`
	// The ID of region.
	RegionId string `pulumi:"regionId"`
	// The name of region.
	RegionName string `pulumi:"regionName"`
	// The status of region.
	Status string `pulumi:"status"`
}

// GetRegionsRegionInput is an input type that accepts GetRegionsRegionArgs and GetRegionsRegionOutput values.
// You can construct a concrete instance of `GetRegionsRegionInput` via:
//
//	GetRegionsRegionArgs{...}
type GetRegionsRegionInput interface {
	pulumi.Input

	ToGetRegionsRegionOutput() GetRegionsRegionOutput
	ToGetRegionsRegionOutputWithContext(context.Context) GetRegionsRegionOutput
}

type GetRegionsRegionArgs struct {
	// The description of region.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of region.
	RegionId pulumi.StringInput `pulumi:"regionId"`
	// The name of region.
	RegionName pulumi.StringInput `pulumi:"regionName"`
	// The status of region.
	Status pulumi.StringInput `pulumi:"status"`
}

func (GetRegionsRegionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return i.ToGetRegionsRegionOutputWithContext(context.Background())
}

func (i GetRegionsRegionArgs) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionOutput)
}

// GetRegionsRegionArrayInput is an input type that accepts GetRegionsRegionArray and GetRegionsRegionArrayOutput values.
// You can construct a concrete instance of `GetRegionsRegionArrayInput` via:
//
//	GetRegionsRegionArray{ GetRegionsRegionArgs{...} }
type GetRegionsRegionArrayInput interface {
	pulumi.Input

	ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput
	ToGetRegionsRegionArrayOutputWithContext(context.Context) GetRegionsRegionArrayOutput
}

type GetRegionsRegionArray []GetRegionsRegionInput

func (GetRegionsRegionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return i.ToGetRegionsRegionArrayOutputWithContext(context.Background())
}

func (i GetRegionsRegionArray) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRegionsRegionArrayOutput)
}

type GetRegionsRegionOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutput() GetRegionsRegionOutput {
	return o
}

func (o GetRegionsRegionOutput) ToGetRegionsRegionOutputWithContext(ctx context.Context) GetRegionsRegionOutput {
	return o
}

// The description of region.
func (o GetRegionsRegionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of region.
func (o GetRegionsRegionOutput) RegionId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.RegionId }).(pulumi.StringOutput)
}

// The name of region.
func (o GetRegionsRegionOutput) RegionName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.RegionName }).(pulumi.StringOutput)
}

// The status of region.
func (o GetRegionsRegionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetRegionsRegion) string { return v.Status }).(pulumi.StringOutput)
}

type GetRegionsRegionArrayOutput struct{ *pulumi.OutputState }

func (GetRegionsRegionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRegionsRegion)(nil)).Elem()
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutput() GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) ToGetRegionsRegionArrayOutputWithContext(ctx context.Context) GetRegionsRegionArrayOutput {
	return o
}

func (o GetRegionsRegionArrayOutput) Index(i pulumi.IntInput) GetRegionsRegionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRegionsRegion {
		return vs[0].([]GetRegionsRegion)[vs[1].(int)]
	}).(GetRegionsRegionOutput)
}

type GetZonesZone struct {
	// The description of zone.
	Description string `pulumi:"description"`
	// The status of zone.
	Status string `pulumi:"status"`
	// The ID of zone.
	ZoneId string `pulumi:"zoneId"`
	// The name of zone.
	ZoneName string `pulumi:"zoneName"`
}

// GetZonesZoneInput is an input type that accepts GetZonesZoneArgs and GetZonesZoneOutput values.
// You can construct a concrete instance of `GetZonesZoneInput` via:
//
//	GetZonesZoneArgs{...}
type GetZonesZoneInput interface {
	pulumi.Input

	ToGetZonesZoneOutput() GetZonesZoneOutput
	ToGetZonesZoneOutputWithContext(context.Context) GetZonesZoneOutput
}

type GetZonesZoneArgs struct {
	// The description of zone.
	Description pulumi.StringInput `pulumi:"description"`
	// The status of zone.
	Status pulumi.StringInput `pulumi:"status"`
	// The ID of zone.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
	// The name of zone.
	ZoneName pulumi.StringInput `pulumi:"zoneName"`
}

func (GetZonesZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return i.ToGetZonesZoneOutputWithContext(context.Background())
}

func (i GetZonesZoneArgs) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneOutput)
}

// GetZonesZoneArrayInput is an input type that accepts GetZonesZoneArray and GetZonesZoneArrayOutput values.
// You can construct a concrete instance of `GetZonesZoneArrayInput` via:
//
//	GetZonesZoneArray{ GetZonesZoneArgs{...} }
type GetZonesZoneArrayInput interface {
	pulumi.Input

	ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput
	ToGetZonesZoneArrayOutputWithContext(context.Context) GetZonesZoneArrayOutput
}

type GetZonesZoneArray []GetZonesZoneInput

func (GetZonesZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return i.ToGetZonesZoneArrayOutputWithContext(context.Background())
}

func (i GetZonesZoneArray) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetZonesZoneArrayOutput)
}

type GetZonesZoneOutput struct{ *pulumi.OutputState }

func (GetZonesZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutput() GetZonesZoneOutput {
	return o
}

func (o GetZonesZoneOutput) ToGetZonesZoneOutputWithContext(ctx context.Context) GetZonesZoneOutput {
	return o
}

// The description of zone.
func (o GetZonesZoneOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Description }).(pulumi.StringOutput)
}

// The status of zone.
func (o GetZonesZoneOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.Status }).(pulumi.StringOutput)
}

// The ID of zone.
func (o GetZonesZoneOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ZoneId }).(pulumi.StringOutput)
}

// The name of zone.
func (o GetZonesZoneOutput) ZoneName() pulumi.StringOutput {
	return o.ApplyT(func(v GetZonesZone) string { return v.ZoneName }).(pulumi.StringOutput)
}

type GetZonesZoneArrayOutput struct{ *pulumi.OutputState }

func (GetZonesZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetZonesZone)(nil)).Elem()
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutput() GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) ToGetZonesZoneArrayOutputWithContext(ctx context.Context) GetZonesZoneArrayOutput {
	return o
}

func (o GetZonesZoneArrayOutput) Index(i pulumi.IntInput) GetZonesZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetZonesZone {
		return vs[0].([]GetZonesZone)[vs[1].(int)]
	}).(GetZonesZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceChargeInfoPtrInput)(nil)).Elem(), InstanceChargeInfoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointInput)(nil)).Elem(), InstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceEndpointArrayInput)(nil)).Elem(), InstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePluginsPluginInput)(nil)).Elem(), InstancePluginsPluginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePluginsPluginArrayInput)(nil)).Elem(), InstancePluginsPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagInput)(nil)).Elem(), InstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstanceTagArrayInput)(nil)).Elem(), InstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRabbitmqInstanceInput)(nil)).Elem(), InstancesRabbitmqInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRabbitmqInstanceArrayInput)(nil)).Elem(), InstancesRabbitmqInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRabbitmqInstanceChargeDetailInput)(nil)).Elem(), InstancesRabbitmqInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRabbitmqInstanceChargeDetailArrayInput)(nil)).Elem(), InstancesRabbitmqInstanceChargeDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRabbitmqInstanceEndpointInput)(nil)).Elem(), InstancesRabbitmqInstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRabbitmqInstanceEndpointArrayInput)(nil)).Elem(), InstancesRabbitmqInstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRabbitmqInstanceTagInput)(nil)).Elem(), InstancesRabbitmqInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesRabbitmqInstanceTagArrayInput)(nil)).Elem(), InstancesRabbitmqInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagInput)(nil)).Elem(), InstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancesTagArrayInput)(nil)).Elem(), InstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionInput)(nil)).Elem(), RegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RegionsRegionArrayInput)(nil)).Elem(), RegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneInput)(nil)).Elem(), ZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZonesZoneArrayInput)(nil)).Elem(), ZonesZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePluginsPluginInput)(nil)).Elem(), GetInstancePluginsPluginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancePluginsPluginArrayInput)(nil)).Elem(), GetInstancePluginsPluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRabbitmqInstanceInput)(nil)).Elem(), GetInstancesRabbitmqInstanceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRabbitmqInstanceArrayInput)(nil)).Elem(), GetInstancesRabbitmqInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRabbitmqInstanceChargeDetailInput)(nil)).Elem(), GetInstancesRabbitmqInstanceChargeDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRabbitmqInstanceChargeDetailArrayInput)(nil)).Elem(), GetInstancesRabbitmqInstanceChargeDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRabbitmqInstanceEndpointInput)(nil)).Elem(), GetInstancesRabbitmqInstanceEndpointArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRabbitmqInstanceEndpointArrayInput)(nil)).Elem(), GetInstancesRabbitmqInstanceEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRabbitmqInstanceTagInput)(nil)).Elem(), GetInstancesRabbitmqInstanceTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesRabbitmqInstanceTagArrayInput)(nil)).Elem(), GetInstancesRabbitmqInstanceTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagInput)(nil)).Elem(), GetInstancesTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInstancesTagArrayInput)(nil)).Elem(), GetInstancesTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionInput)(nil)).Elem(), GetRegionsRegionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRegionsRegionArrayInput)(nil)).Elem(), GetRegionsRegionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneInput)(nil)).Elem(), GetZonesZoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetZonesZoneArrayInput)(nil)).Elem(), GetZonesZoneArray{})
	pulumi.RegisterOutputType(InstanceChargeInfoOutput{})
	pulumi.RegisterOutputType(InstanceChargeInfoPtrOutput{})
	pulumi.RegisterOutputType(InstanceEndpointOutput{})
	pulumi.RegisterOutputType(InstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(InstancePluginsPluginOutput{})
	pulumi.RegisterOutputType(InstancePluginsPluginArrayOutput{})
	pulumi.RegisterOutputType(InstanceTagOutput{})
	pulumi.RegisterOutputType(InstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesRabbitmqInstanceOutput{})
	pulumi.RegisterOutputType(InstancesRabbitmqInstanceArrayOutput{})
	pulumi.RegisterOutputType(InstancesRabbitmqInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(InstancesRabbitmqInstanceChargeDetailArrayOutput{})
	pulumi.RegisterOutputType(InstancesRabbitmqInstanceEndpointOutput{})
	pulumi.RegisterOutputType(InstancesRabbitmqInstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(InstancesRabbitmqInstanceTagOutput{})
	pulumi.RegisterOutputType(InstancesRabbitmqInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(InstancesTagOutput{})
	pulumi.RegisterOutputType(InstancesTagArrayOutput{})
	pulumi.RegisterOutputType(RegionsRegionOutput{})
	pulumi.RegisterOutputType(RegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(ZonesZoneOutput{})
	pulumi.RegisterOutputType(ZonesZoneArrayOutput{})
	pulumi.RegisterOutputType(GetInstancePluginsPluginOutput{})
	pulumi.RegisterOutputType(GetInstancePluginsPluginArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRabbitmqInstanceOutput{})
	pulumi.RegisterOutputType(GetInstancesRabbitmqInstanceArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRabbitmqInstanceChargeDetailOutput{})
	pulumi.RegisterOutputType(GetInstancesRabbitmqInstanceChargeDetailArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRabbitmqInstanceEndpointOutput{})
	pulumi.RegisterOutputType(GetInstancesRabbitmqInstanceEndpointArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesRabbitmqInstanceTagOutput{})
	pulumi.RegisterOutputType(GetInstancesRabbitmqInstanceTagArrayOutput{})
	pulumi.RegisterOutputType(GetInstancesTagOutput{})
	pulumi.RegisterOutputType(GetInstancesTagArrayOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionOutput{})
	pulumi.RegisterOutputType(GetRegionsRegionArrayOutput{})
	pulumi.RegisterOutputType(GetZonesZoneOutput{})
	pulumi.RegisterOutputType(GetZonesZoneArrayOutput{})
}
