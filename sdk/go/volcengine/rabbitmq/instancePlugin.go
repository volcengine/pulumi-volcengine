// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rabbitmq

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage rabbitmq instance plugin
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/rabbitmq"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.GetZones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooInstance, err := rabbitmq.NewInstance(ctx, "fooInstance", &rabbitmq.InstanceArgs{
//				ZoneIds: pulumi.StringArray{
//					pulumi.String(fooZones.Zones[0].Id),
//					pulumi.String(fooZones.Zones[1].Id),
//					pulumi.String(fooZones.Zones[2].Id),
//				},
//				SubnetId:            fooSubnet.ID(),
//				Version:             pulumi.String("3.8.18"),
//				UserName:            pulumi.String("acc-test-user"),
//				UserPassword:        pulumi.String("93f0cb0614Aab12"),
//				ComputeSpec:         pulumi.String("rabbitmq.n3.x2.small"),
//				StorageSpace:        pulumi.Int(300),
//				InstanceName:        pulumi.String("acc-test-rabbitmq"),
//				InstanceDescription: pulumi.String("acc-test"),
//				ChargeInfo: &rabbitmq.InstanceChargeInfoArgs{
//					ChargeType: pulumi.String("PostPaid"),
//				},
//				ProjectName: pulumi.String("default"),
//				Tags: rabbitmq.InstanceTagArray{
//					&rabbitmq.InstanceTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = rabbitmq.NewInstancePlugin(ctx, "fooInstancePlugin", &rabbitmq.InstancePluginArgs{
//				InstanceId: fooInstance.ID(),
//				PluginName: pulumi.String("rabbitmq_shovel"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// RabbitmqInstancePlugin can be imported using the instance_id:plugin_name, e.g.
//
// ```sh
// $ pulumi import volcengine:rabbitmq/instancePlugin:InstancePlugin default resource_id
// ```
type InstancePlugin struct {
	pulumi.CustomResourceState

	// The description of the plugin.
	Description pulumi.StringOutput `pulumi:"description"`
	// The disable prompt of the plugin.
	DisablePrompt pulumi.StringOutput `pulumi:"disablePrompt"`
	// The enable prompt of the plugin.
	EnablePrompt pulumi.StringOutput `pulumi:"enablePrompt"`
	// Whether the plugin is enabled.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The id of the rabbitmq instance..
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
	NeedRebootOnChange pulumi.BoolOutput `pulumi:"needRebootOnChange"`
	// The name of the plugin.
	PluginName pulumi.StringOutput `pulumi:"pluginName"`
	// The port of the plugin.
	Port pulumi.IntOutput `pulumi:"port"`
	// The version of the plugin.
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewInstancePlugin registers a new resource with the given unique name, arguments, and options.
func NewInstancePlugin(ctx *pulumi.Context,
	name string, args *InstancePluginArgs, opts ...pulumi.ResourceOption) (*InstancePlugin, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	if args.PluginName == nil {
		return nil, errors.New("invalid value for required argument 'PluginName'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InstancePlugin
	err := ctx.RegisterResource("volcengine:rabbitmq/instancePlugin:InstancePlugin", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInstancePlugin gets an existing InstancePlugin resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInstancePlugin(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InstancePluginState, opts ...pulumi.ResourceOption) (*InstancePlugin, error) {
	var resource InstancePlugin
	err := ctx.ReadResource("volcengine:rabbitmq/instancePlugin:InstancePlugin", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InstancePlugin resources.
type instancePluginState struct {
	// The description of the plugin.
	Description *string `pulumi:"description"`
	// The disable prompt of the plugin.
	DisablePrompt *string `pulumi:"disablePrompt"`
	// The enable prompt of the plugin.
	EnablePrompt *string `pulumi:"enablePrompt"`
	// Whether the plugin is enabled.
	Enabled *bool `pulumi:"enabled"`
	// The id of the rabbitmq instance..
	InstanceId *string `pulumi:"instanceId"`
	// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
	NeedRebootOnChange *bool `pulumi:"needRebootOnChange"`
	// The name of the plugin.
	PluginName *string `pulumi:"pluginName"`
	// The port of the plugin.
	Port *int `pulumi:"port"`
	// The version of the plugin.
	Version *string `pulumi:"version"`
}

type InstancePluginState struct {
	// The description of the plugin.
	Description pulumi.StringPtrInput
	// The disable prompt of the plugin.
	DisablePrompt pulumi.StringPtrInput
	// The enable prompt of the plugin.
	EnablePrompt pulumi.StringPtrInput
	// Whether the plugin is enabled.
	Enabled pulumi.BoolPtrInput
	// The id of the rabbitmq instance..
	InstanceId pulumi.StringPtrInput
	// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
	NeedRebootOnChange pulumi.BoolPtrInput
	// The name of the plugin.
	PluginName pulumi.StringPtrInput
	// The port of the plugin.
	Port pulumi.IntPtrInput
	// The version of the plugin.
	Version pulumi.StringPtrInput
}

func (InstancePluginState) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePluginState)(nil)).Elem()
}

type instancePluginArgs struct {
	// The id of the rabbitmq instance..
	InstanceId string `pulumi:"instanceId"`
	// The name of the plugin.
	PluginName string `pulumi:"pluginName"`
}

// The set of arguments for constructing a InstancePlugin resource.
type InstancePluginArgs struct {
	// The id of the rabbitmq instance..
	InstanceId pulumi.StringInput
	// The name of the plugin.
	PluginName pulumi.StringInput
}

func (InstancePluginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*instancePluginArgs)(nil)).Elem()
}

type InstancePluginInput interface {
	pulumi.Input

	ToInstancePluginOutput() InstancePluginOutput
	ToInstancePluginOutputWithContext(ctx context.Context) InstancePluginOutput
}

func (*InstancePlugin) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePlugin)(nil)).Elem()
}

func (i *InstancePlugin) ToInstancePluginOutput() InstancePluginOutput {
	return i.ToInstancePluginOutputWithContext(context.Background())
}

func (i *InstancePlugin) ToInstancePluginOutputWithContext(ctx context.Context) InstancePluginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePluginOutput)
}

// InstancePluginArrayInput is an input type that accepts InstancePluginArray and InstancePluginArrayOutput values.
// You can construct a concrete instance of `InstancePluginArrayInput` via:
//
//	InstancePluginArray{ InstancePluginArgs{...} }
type InstancePluginArrayInput interface {
	pulumi.Input

	ToInstancePluginArrayOutput() InstancePluginArrayOutput
	ToInstancePluginArrayOutputWithContext(context.Context) InstancePluginArrayOutput
}

type InstancePluginArray []InstancePluginInput

func (InstancePluginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstancePlugin)(nil)).Elem()
}

func (i InstancePluginArray) ToInstancePluginArrayOutput() InstancePluginArrayOutput {
	return i.ToInstancePluginArrayOutputWithContext(context.Background())
}

func (i InstancePluginArray) ToInstancePluginArrayOutputWithContext(ctx context.Context) InstancePluginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePluginArrayOutput)
}

// InstancePluginMapInput is an input type that accepts InstancePluginMap and InstancePluginMapOutput values.
// You can construct a concrete instance of `InstancePluginMapInput` via:
//
//	InstancePluginMap{ "key": InstancePluginArgs{...} }
type InstancePluginMapInput interface {
	pulumi.Input

	ToInstancePluginMapOutput() InstancePluginMapOutput
	ToInstancePluginMapOutputWithContext(context.Context) InstancePluginMapOutput
}

type InstancePluginMap map[string]InstancePluginInput

func (InstancePluginMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstancePlugin)(nil)).Elem()
}

func (i InstancePluginMap) ToInstancePluginMapOutput() InstancePluginMapOutput {
	return i.ToInstancePluginMapOutputWithContext(context.Background())
}

func (i InstancePluginMap) ToInstancePluginMapOutputWithContext(ctx context.Context) InstancePluginMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InstancePluginMapOutput)
}

type InstancePluginOutput struct{ *pulumi.OutputState }

func (InstancePluginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InstancePlugin)(nil)).Elem()
}

func (o InstancePluginOutput) ToInstancePluginOutput() InstancePluginOutput {
	return o
}

func (o InstancePluginOutput) ToInstancePluginOutputWithContext(ctx context.Context) InstancePluginOutput {
	return o
}

// The description of the plugin.
func (o InstancePluginOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePlugin) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The disable prompt of the plugin.
func (o InstancePluginOutput) DisablePrompt() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePlugin) pulumi.StringOutput { return v.DisablePrompt }).(pulumi.StringOutput)
}

// The enable prompt of the plugin.
func (o InstancePluginOutput) EnablePrompt() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePlugin) pulumi.StringOutput { return v.EnablePrompt }).(pulumi.StringOutput)
}

// Whether the plugin is enabled.
func (o InstancePluginOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *InstancePlugin) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// The id of the rabbitmq instance..
func (o InstancePluginOutput) InstanceId() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePlugin) pulumi.StringOutput { return v.InstanceId }).(pulumi.StringOutput)
}

// Will changing the enabled state of the plugin cause a reboot of the rabbitmq instance.
func (o InstancePluginOutput) NeedRebootOnChange() pulumi.BoolOutput {
	return o.ApplyT(func(v *InstancePlugin) pulumi.BoolOutput { return v.NeedRebootOnChange }).(pulumi.BoolOutput)
}

// The name of the plugin.
func (o InstancePluginOutput) PluginName() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePlugin) pulumi.StringOutput { return v.PluginName }).(pulumi.StringOutput)
}

// The port of the plugin.
func (o InstancePluginOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *InstancePlugin) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

// The version of the plugin.
func (o InstancePluginOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *InstancePlugin) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type InstancePluginArrayOutput struct{ *pulumi.OutputState }

func (InstancePluginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InstancePlugin)(nil)).Elem()
}

func (o InstancePluginArrayOutput) ToInstancePluginArrayOutput() InstancePluginArrayOutput {
	return o
}

func (o InstancePluginArrayOutput) ToInstancePluginArrayOutputWithContext(ctx context.Context) InstancePluginArrayOutput {
	return o
}

func (o InstancePluginArrayOutput) Index(i pulumi.IntInput) InstancePluginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InstancePlugin {
		return vs[0].([]*InstancePlugin)[vs[1].(int)]
	}).(InstancePluginOutput)
}

type InstancePluginMapOutput struct{ *pulumi.OutputState }

func (InstancePluginMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InstancePlugin)(nil)).Elem()
}

func (o InstancePluginMapOutput) ToInstancePluginMapOutput() InstancePluginMapOutput {
	return o
}

func (o InstancePluginMapOutput) ToInstancePluginMapOutputWithContext(ctx context.Context) InstancePluginMapOutput {
	return o
}

func (o InstancePluginMapOutput) MapIndex(k pulumi.StringInput) InstancePluginOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InstancePlugin {
		return vs[0].(map[string]*InstancePlugin)[vs[1].(string)]
	}).(InstancePluginOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePluginInput)(nil)).Elem(), &InstancePlugin{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePluginArrayInput)(nil)).Elem(), InstancePluginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InstancePluginMapInput)(nil)).Elem(), InstancePluginMap{})
	pulumi.RegisterOutputType(InstancePluginOutput{})
	pulumi.RegisterOutputType(InstancePluginArrayOutput{})
	pulumi.RegisterOutputType(InstancePluginMapOutput{})
}
