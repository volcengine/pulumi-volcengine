// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage ssl vpn client cert
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     *pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooGateway, err := vpn.NewGateway(ctx, "fooGateway", &vpn.GatewayArgs{
//				VpcId:             fooVpc.ID(),
//				SubnetId:          fooSubnet.ID(),
//				Bandwidth:         pulumi.Int(5),
//				VpnGatewayName:    pulumi.String("acc-test1"),
//				Description:       pulumi.String("acc-test1"),
//				Period:            pulumi.Int(7),
//				ProjectName:       pulumi.String("default"),
//				SslEnabled:        pulumi.Bool(true),
//				SslMaxConnections: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			fooSslVpnServer, err := vpn.NewSslVpnServer(ctx, "fooSslVpnServer", &vpn.SslVpnServerArgs{
//				VpnGatewayId: fooGateway.ID(),
//				LocalSubnets: pulumi.StringArray{
//					fooSubnet.CidrBlock,
//				},
//				ClientIpPool:     pulumi.String("172.16.2.0/24"),
//				SslVpnServerName: pulumi.String("acc-test-ssl"),
//				Description:      pulumi.String("acc-test"),
//				Protocol:         pulumi.String("UDP"),
//				Cipher:           pulumi.String("AES-128-CBC"),
//				Auth:             pulumi.String("SHA1"),
//				Compress:         pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewSslVpnClientCert(ctx, "fooSslVpnClientCert", &vpn.SslVpnClientCertArgs{
//				SslVpnServerId:       fooSslVpnServer.ID(),
//				SslVpnClientCertName: pulumi.String("acc-test-client-cert"),
//				Description:          pulumi.String("acc-test"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SSL VPN Client Cert can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vpn/sslVpnClientCert:SslVpnClientCert default vsc-2d6b7gjrzc2yo58ozfcx2****
//
// ```
type SslVpnClientCert struct {
	pulumi.CustomResourceState

	// The CA certificate.
	CaCertificate pulumi.StringOutput `pulumi:"caCertificate"`
	// The status of the ssl vpn client cert.
	CertificateStatus pulumi.StringOutput `pulumi:"certificateStatus"`
	// The client certificate.
	ClientCertificate pulumi.StringOutput `pulumi:"clientCertificate"`
	// The key of the ssl vpn client.
	ClientKey pulumi.StringOutput `pulumi:"clientKey"`
	// The creation time of the ssl vpn client cert.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The description of the ssl vpn client cert.
	Description pulumi.StringOutput `pulumi:"description"`
	// The expired time of the ssl vpn client cert.
	ExpiredTime pulumi.StringOutput `pulumi:"expiredTime"`
	// The config of the open vpn client.
	OpenVpnClientConfig pulumi.StringOutput `pulumi:"openVpnClientConfig"`
	// The name of the ssl vpn client cert.
	SslVpnClientCertName pulumi.StringOutput `pulumi:"sslVpnClientCertName"`
	// The id of the ssl vpn server.
	SslVpnServerId pulumi.StringOutput `pulumi:"sslVpnServerId"`
	// The status of the ssl vpn client.
	Status pulumi.StringOutput `pulumi:"status"`
	// The update time of the ssl vpn client cert.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
}

// NewSslVpnClientCert registers a new resource with the given unique name, arguments, and options.
func NewSslVpnClientCert(ctx *pulumi.Context,
	name string, args *SslVpnClientCertArgs, opts ...pulumi.ResourceOption) (*SslVpnClientCert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SslVpnServerId == nil {
		return nil, errors.New("invalid value for required argument 'SslVpnServerId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SslVpnClientCert
	err := ctx.RegisterResource("volcengine:vpn/sslVpnClientCert:SslVpnClientCert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslVpnClientCert gets an existing SslVpnClientCert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslVpnClientCert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslVpnClientCertState, opts ...pulumi.ResourceOption) (*SslVpnClientCert, error) {
	var resource SslVpnClientCert
	err := ctx.ReadResource("volcengine:vpn/sslVpnClientCert:SslVpnClientCert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslVpnClientCert resources.
type sslVpnClientCertState struct {
	// The CA certificate.
	CaCertificate *string `pulumi:"caCertificate"`
	// The status of the ssl vpn client cert.
	CertificateStatus *string `pulumi:"certificateStatus"`
	// The client certificate.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// The key of the ssl vpn client.
	ClientKey *string `pulumi:"clientKey"`
	// The creation time of the ssl vpn client cert.
	CreationTime *string `pulumi:"creationTime"`
	// The description of the ssl vpn client cert.
	Description *string `pulumi:"description"`
	// The expired time of the ssl vpn client cert.
	ExpiredTime *string `pulumi:"expiredTime"`
	// The config of the open vpn client.
	OpenVpnClientConfig *string `pulumi:"openVpnClientConfig"`
	// The name of the ssl vpn client cert.
	SslVpnClientCertName *string `pulumi:"sslVpnClientCertName"`
	// The id of the ssl vpn server.
	SslVpnServerId *string `pulumi:"sslVpnServerId"`
	// The status of the ssl vpn client.
	Status *string `pulumi:"status"`
	// The update time of the ssl vpn client cert.
	UpdateTime *string `pulumi:"updateTime"`
}

type SslVpnClientCertState struct {
	// The CA certificate.
	CaCertificate pulumi.StringPtrInput
	// The status of the ssl vpn client cert.
	CertificateStatus pulumi.StringPtrInput
	// The client certificate.
	ClientCertificate pulumi.StringPtrInput
	// The key of the ssl vpn client.
	ClientKey pulumi.StringPtrInput
	// The creation time of the ssl vpn client cert.
	CreationTime pulumi.StringPtrInput
	// The description of the ssl vpn client cert.
	Description pulumi.StringPtrInput
	// The expired time of the ssl vpn client cert.
	ExpiredTime pulumi.StringPtrInput
	// The config of the open vpn client.
	OpenVpnClientConfig pulumi.StringPtrInput
	// The name of the ssl vpn client cert.
	SslVpnClientCertName pulumi.StringPtrInput
	// The id of the ssl vpn server.
	SslVpnServerId pulumi.StringPtrInput
	// The status of the ssl vpn client.
	Status pulumi.StringPtrInput
	// The update time of the ssl vpn client cert.
	UpdateTime pulumi.StringPtrInput
}

func (SslVpnClientCertState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslVpnClientCertState)(nil)).Elem()
}

type sslVpnClientCertArgs struct {
	// The description of the ssl vpn client cert.
	Description *string `pulumi:"description"`
	// The name of the ssl vpn client cert.
	SslVpnClientCertName *string `pulumi:"sslVpnClientCertName"`
	// The id of the ssl vpn server.
	SslVpnServerId string `pulumi:"sslVpnServerId"`
}

// The set of arguments for constructing a SslVpnClientCert resource.
type SslVpnClientCertArgs struct {
	// The description of the ssl vpn client cert.
	Description pulumi.StringPtrInput
	// The name of the ssl vpn client cert.
	SslVpnClientCertName pulumi.StringPtrInput
	// The id of the ssl vpn server.
	SslVpnServerId pulumi.StringInput
}

func (SslVpnClientCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslVpnClientCertArgs)(nil)).Elem()
}

type SslVpnClientCertInput interface {
	pulumi.Input

	ToSslVpnClientCertOutput() SslVpnClientCertOutput
	ToSslVpnClientCertOutputWithContext(ctx context.Context) SslVpnClientCertOutput
}

func (*SslVpnClientCert) ElementType() reflect.Type {
	return reflect.TypeOf((**SslVpnClientCert)(nil)).Elem()
}

func (i *SslVpnClientCert) ToSslVpnClientCertOutput() SslVpnClientCertOutput {
	return i.ToSslVpnClientCertOutputWithContext(context.Background())
}

func (i *SslVpnClientCert) ToSslVpnClientCertOutputWithContext(ctx context.Context) SslVpnClientCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslVpnClientCertOutput)
}

// SslVpnClientCertArrayInput is an input type that accepts SslVpnClientCertArray and SslVpnClientCertArrayOutput values.
// You can construct a concrete instance of `SslVpnClientCertArrayInput` via:
//
//	SslVpnClientCertArray{ SslVpnClientCertArgs{...} }
type SslVpnClientCertArrayInput interface {
	pulumi.Input

	ToSslVpnClientCertArrayOutput() SslVpnClientCertArrayOutput
	ToSslVpnClientCertArrayOutputWithContext(context.Context) SslVpnClientCertArrayOutput
}

type SslVpnClientCertArray []SslVpnClientCertInput

func (SslVpnClientCertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SslVpnClientCert)(nil)).Elem()
}

func (i SslVpnClientCertArray) ToSslVpnClientCertArrayOutput() SslVpnClientCertArrayOutput {
	return i.ToSslVpnClientCertArrayOutputWithContext(context.Background())
}

func (i SslVpnClientCertArray) ToSslVpnClientCertArrayOutputWithContext(ctx context.Context) SslVpnClientCertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslVpnClientCertArrayOutput)
}

// SslVpnClientCertMapInput is an input type that accepts SslVpnClientCertMap and SslVpnClientCertMapOutput values.
// You can construct a concrete instance of `SslVpnClientCertMapInput` via:
//
//	SslVpnClientCertMap{ "key": SslVpnClientCertArgs{...} }
type SslVpnClientCertMapInput interface {
	pulumi.Input

	ToSslVpnClientCertMapOutput() SslVpnClientCertMapOutput
	ToSslVpnClientCertMapOutputWithContext(context.Context) SslVpnClientCertMapOutput
}

type SslVpnClientCertMap map[string]SslVpnClientCertInput

func (SslVpnClientCertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SslVpnClientCert)(nil)).Elem()
}

func (i SslVpnClientCertMap) ToSslVpnClientCertMapOutput() SslVpnClientCertMapOutput {
	return i.ToSslVpnClientCertMapOutputWithContext(context.Background())
}

func (i SslVpnClientCertMap) ToSslVpnClientCertMapOutputWithContext(ctx context.Context) SslVpnClientCertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslVpnClientCertMapOutput)
}

type SslVpnClientCertOutput struct{ *pulumi.OutputState }

func (SslVpnClientCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslVpnClientCert)(nil)).Elem()
}

func (o SslVpnClientCertOutput) ToSslVpnClientCertOutput() SslVpnClientCertOutput {
	return o
}

func (o SslVpnClientCertOutput) ToSslVpnClientCertOutputWithContext(ctx context.Context) SslVpnClientCertOutput {
	return o
}

// The CA certificate.
func (o SslVpnClientCertOutput) CaCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.CaCertificate }).(pulumi.StringOutput)
}

// The status of the ssl vpn client cert.
func (o SslVpnClientCertOutput) CertificateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.CertificateStatus }).(pulumi.StringOutput)
}

// The client certificate.
func (o SslVpnClientCertOutput) ClientCertificate() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.ClientCertificate }).(pulumi.StringOutput)
}

// The key of the ssl vpn client.
func (o SslVpnClientCertOutput) ClientKey() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.ClientKey }).(pulumi.StringOutput)
}

// The creation time of the ssl vpn client cert.
func (o SslVpnClientCertOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The description of the ssl vpn client cert.
func (o SslVpnClientCertOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The expired time of the ssl vpn client cert.
func (o SslVpnClientCertOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.ExpiredTime }).(pulumi.StringOutput)
}

// The config of the open vpn client.
func (o SslVpnClientCertOutput) OpenVpnClientConfig() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.OpenVpnClientConfig }).(pulumi.StringOutput)
}

// The name of the ssl vpn client cert.
func (o SslVpnClientCertOutput) SslVpnClientCertName() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.SslVpnClientCertName }).(pulumi.StringOutput)
}

// The id of the ssl vpn server.
func (o SslVpnClientCertOutput) SslVpnServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.SslVpnServerId }).(pulumi.StringOutput)
}

// The status of the ssl vpn client.
func (o SslVpnClientCertOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The update time of the ssl vpn client cert.
func (o SslVpnClientCertOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnClientCert) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

type SslVpnClientCertArrayOutput struct{ *pulumi.OutputState }

func (SslVpnClientCertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SslVpnClientCert)(nil)).Elem()
}

func (o SslVpnClientCertArrayOutput) ToSslVpnClientCertArrayOutput() SslVpnClientCertArrayOutput {
	return o
}

func (o SslVpnClientCertArrayOutput) ToSslVpnClientCertArrayOutputWithContext(ctx context.Context) SslVpnClientCertArrayOutput {
	return o
}

func (o SslVpnClientCertArrayOutput) Index(i pulumi.IntInput) SslVpnClientCertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SslVpnClientCert {
		return vs[0].([]*SslVpnClientCert)[vs[1].(int)]
	}).(SslVpnClientCertOutput)
}

type SslVpnClientCertMapOutput struct{ *pulumi.OutputState }

func (SslVpnClientCertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SslVpnClientCert)(nil)).Elem()
}

func (o SslVpnClientCertMapOutput) ToSslVpnClientCertMapOutput() SslVpnClientCertMapOutput {
	return o
}

func (o SslVpnClientCertMapOutput) ToSslVpnClientCertMapOutputWithContext(ctx context.Context) SslVpnClientCertMapOutput {
	return o
}

func (o SslVpnClientCertMapOutput) MapIndex(k pulumi.StringInput) SslVpnClientCertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SslVpnClientCert {
		return vs[0].(map[string]*SslVpnClientCert)[vs[1].(string)]
	}).(SslVpnClientCertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SslVpnClientCertInput)(nil)).Elem(), &SslVpnClientCert{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslVpnClientCertArrayInput)(nil)).Elem(), SslVpnClientCertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslVpnClientCertMapInput)(nil)).Elem(), SslVpnClientCertMap{})
	pulumi.RegisterOutputType(SslVpnClientCertOutput{})
	pulumi.RegisterOutputType(SslVpnClientCertArrayOutput{})
	pulumi.RegisterOutputType(SslVpnClientCertMapOutput{})
}
