// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage vpn gateway route
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.NewGatewayRoute(ctx, "foo", &vpn.GatewayRouteArgs{
//				DestinationCidrBlock: pulumi.String("192.168.0.0/20"),
//				NextHopId:            pulumi.String("vgc-2d5ww3ww2lwcg58ozfe61ppc3"),
//				VpnGatewayId:         pulumi.String("vgw-2c012ea9fm5mo2dx0efxg46qi"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VpnGatewayRoute can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vpn/gatewayRoute:GatewayRoute default vgr-3tex2c6c0v844c****
//
// ```
type GatewayRoute struct {
	pulumi.CustomResourceState

	// The create time of VPN gateway route.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The destination cidr block of the VPN gateway route.
	DestinationCidrBlock pulumi.StringOutput `pulumi:"destinationCidrBlock"`
	// The next hop id of the VPN gateway route.
	NextHopId pulumi.StringOutput `pulumi:"nextHopId"`
	// The status of the VPN gateway route.
	Status pulumi.StringOutput `pulumi:"status"`
	// The update time of VPN gateway route.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The ID of the VPN gateway of the VPN gateway route.
	VpnGatewayId pulumi.StringOutput `pulumi:"vpnGatewayId"`
	// The ID of the VPN gateway route.
	VpnGatewayRouteId pulumi.StringOutput `pulumi:"vpnGatewayRouteId"`
}

// NewGatewayRoute registers a new resource with the given unique name, arguments, and options.
func NewGatewayRoute(ctx *pulumi.Context,
	name string, args *GatewayRouteArgs, opts ...pulumi.ResourceOption) (*GatewayRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DestinationCidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'DestinationCidrBlock'")
	}
	if args.NextHopId == nil {
		return nil, errors.New("invalid value for required argument 'NextHopId'")
	}
	if args.VpnGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VpnGatewayId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource GatewayRoute
	err := ctx.RegisterResource("volcengine:vpn/gatewayRoute:GatewayRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGatewayRoute gets an existing GatewayRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGatewayRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GatewayRouteState, opts ...pulumi.ResourceOption) (*GatewayRoute, error) {
	var resource GatewayRoute
	err := ctx.ReadResource("volcengine:vpn/gatewayRoute:GatewayRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GatewayRoute resources.
type gatewayRouteState struct {
	// The create time of VPN gateway route.
	CreationTime *string `pulumi:"creationTime"`
	// The destination cidr block of the VPN gateway route.
	DestinationCidrBlock *string `pulumi:"destinationCidrBlock"`
	// The next hop id of the VPN gateway route.
	NextHopId *string `pulumi:"nextHopId"`
	// The status of the VPN gateway route.
	Status *string `pulumi:"status"`
	// The update time of VPN gateway route.
	UpdateTime *string `pulumi:"updateTime"`
	// The ID of the VPN gateway of the VPN gateway route.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
	// The ID of the VPN gateway route.
	VpnGatewayRouteId *string `pulumi:"vpnGatewayRouteId"`
}

type GatewayRouteState struct {
	// The create time of VPN gateway route.
	CreationTime pulumi.StringPtrInput
	// The destination cidr block of the VPN gateway route.
	DestinationCidrBlock pulumi.StringPtrInput
	// The next hop id of the VPN gateway route.
	NextHopId pulumi.StringPtrInput
	// The status of the VPN gateway route.
	Status pulumi.StringPtrInput
	// The update time of VPN gateway route.
	UpdateTime pulumi.StringPtrInput
	// The ID of the VPN gateway of the VPN gateway route.
	VpnGatewayId pulumi.StringPtrInput
	// The ID of the VPN gateway route.
	VpnGatewayRouteId pulumi.StringPtrInput
}

func (GatewayRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayRouteState)(nil)).Elem()
}

type gatewayRouteArgs struct {
	// The destination cidr block of the VPN gateway route.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// The next hop id of the VPN gateway route.
	NextHopId string `pulumi:"nextHopId"`
	// The ID of the VPN gateway of the VPN gateway route.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a GatewayRoute resource.
type GatewayRouteArgs struct {
	// The destination cidr block of the VPN gateway route.
	DestinationCidrBlock pulumi.StringInput
	// The next hop id of the VPN gateway route.
	NextHopId pulumi.StringInput
	// The ID of the VPN gateway of the VPN gateway route.
	VpnGatewayId pulumi.StringInput
}

func (GatewayRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*gatewayRouteArgs)(nil)).Elem()
}

type GatewayRouteInput interface {
	pulumi.Input

	ToGatewayRouteOutput() GatewayRouteOutput
	ToGatewayRouteOutputWithContext(ctx context.Context) GatewayRouteOutput
}

func (*GatewayRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayRoute)(nil)).Elem()
}

func (i *GatewayRoute) ToGatewayRouteOutput() GatewayRouteOutput {
	return i.ToGatewayRouteOutputWithContext(context.Background())
}

func (i *GatewayRoute) ToGatewayRouteOutputWithContext(ctx context.Context) GatewayRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteOutput)
}

// GatewayRouteArrayInput is an input type that accepts GatewayRouteArray and GatewayRouteArrayOutput values.
// You can construct a concrete instance of `GatewayRouteArrayInput` via:
//
//	GatewayRouteArray{ GatewayRouteArgs{...} }
type GatewayRouteArrayInput interface {
	pulumi.Input

	ToGatewayRouteArrayOutput() GatewayRouteArrayOutput
	ToGatewayRouteArrayOutputWithContext(context.Context) GatewayRouteArrayOutput
}

type GatewayRouteArray []GatewayRouteInput

func (GatewayRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayRoute)(nil)).Elem()
}

func (i GatewayRouteArray) ToGatewayRouteArrayOutput() GatewayRouteArrayOutput {
	return i.ToGatewayRouteArrayOutputWithContext(context.Background())
}

func (i GatewayRouteArray) ToGatewayRouteArrayOutputWithContext(ctx context.Context) GatewayRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteArrayOutput)
}

// GatewayRouteMapInput is an input type that accepts GatewayRouteMap and GatewayRouteMapOutput values.
// You can construct a concrete instance of `GatewayRouteMapInput` via:
//
//	GatewayRouteMap{ "key": GatewayRouteArgs{...} }
type GatewayRouteMapInput interface {
	pulumi.Input

	ToGatewayRouteMapOutput() GatewayRouteMapOutput
	ToGatewayRouteMapOutputWithContext(context.Context) GatewayRouteMapOutput
}

type GatewayRouteMap map[string]GatewayRouteInput

func (GatewayRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayRoute)(nil)).Elem()
}

func (i GatewayRouteMap) ToGatewayRouteMapOutput() GatewayRouteMapOutput {
	return i.ToGatewayRouteMapOutputWithContext(context.Background())
}

func (i GatewayRouteMap) ToGatewayRouteMapOutputWithContext(ctx context.Context) GatewayRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRouteMapOutput)
}

type GatewayRouteOutput struct{ *pulumi.OutputState }

func (GatewayRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GatewayRoute)(nil)).Elem()
}

func (o GatewayRouteOutput) ToGatewayRouteOutput() GatewayRouteOutput {
	return o
}

func (o GatewayRouteOutput) ToGatewayRouteOutputWithContext(ctx context.Context) GatewayRouteOutput {
	return o
}

// The create time of VPN gateway route.
func (o GatewayRouteOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayRoute) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The destination cidr block of the VPN gateway route.
func (o GatewayRouteOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayRoute) pulumi.StringOutput { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// The next hop id of the VPN gateway route.
func (o GatewayRouteOutput) NextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayRoute) pulumi.StringOutput { return v.NextHopId }).(pulumi.StringOutput)
}

// The status of the VPN gateway route.
func (o GatewayRouteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayRoute) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The update time of VPN gateway route.
func (o GatewayRouteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayRoute) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The ID of the VPN gateway of the VPN gateway route.
func (o GatewayRouteOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayRoute) pulumi.StringOutput { return v.VpnGatewayId }).(pulumi.StringOutput)
}

// The ID of the VPN gateway route.
func (o GatewayRouteOutput) VpnGatewayRouteId() pulumi.StringOutput {
	return o.ApplyT(func(v *GatewayRoute) pulumi.StringOutput { return v.VpnGatewayRouteId }).(pulumi.StringOutput)
}

type GatewayRouteArrayOutput struct{ *pulumi.OutputState }

func (GatewayRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GatewayRoute)(nil)).Elem()
}

func (o GatewayRouteArrayOutput) ToGatewayRouteArrayOutput() GatewayRouteArrayOutput {
	return o
}

func (o GatewayRouteArrayOutput) ToGatewayRouteArrayOutputWithContext(ctx context.Context) GatewayRouteArrayOutput {
	return o
}

func (o GatewayRouteArrayOutput) Index(i pulumi.IntInput) GatewayRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GatewayRoute {
		return vs[0].([]*GatewayRoute)[vs[1].(int)]
	}).(GatewayRouteOutput)
}

type GatewayRouteMapOutput struct{ *pulumi.OutputState }

func (GatewayRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GatewayRoute)(nil)).Elem()
}

func (o GatewayRouteMapOutput) ToGatewayRouteMapOutput() GatewayRouteMapOutput {
	return o
}

func (o GatewayRouteMapOutput) ToGatewayRouteMapOutputWithContext(ctx context.Context) GatewayRouteMapOutput {
	return o
}

func (o GatewayRouteMapOutput) MapIndex(k pulumi.StringInput) GatewayRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GatewayRoute {
		return vs[0].(map[string]*GatewayRoute)[vs[1].(string)]
	}).(GatewayRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayRouteInput)(nil)).Elem(), &GatewayRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayRouteArrayInput)(nil)).Elem(), GatewayRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayRouteMapInput)(nil)).Elem(), GatewayRouteMap{})
	pulumi.RegisterOutputType(GatewayRouteOutput{})
	pulumi.RegisterOutputType(GatewayRouteArrayOutput{})
	pulumi.RegisterOutputType(GatewayRouteMapOutput{})
}
