// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ssl vpn servers
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     *pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooGateway, err := vpn.NewGateway(ctx, "fooGateway", &vpn.GatewayArgs{
//				VpcId:             fooVpc.ID(),
//				SubnetId:          fooSubnet.ID(),
//				Bandwidth:         pulumi.Int(5),
//				VpnGatewayName:    pulumi.String("acc-test1"),
//				Description:       pulumi.String("acc-test1"),
//				Period:            pulumi.Int(7),
//				ProjectName:       pulumi.String("default"),
//				SslEnabled:        pulumi.Bool(true),
//				SslMaxConnections: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			fooSslVpnServer, err := vpn.NewSslVpnServer(ctx, "fooSslVpnServer", &vpn.SslVpnServerArgs{
//				VpnGatewayId: fooGateway.ID(),
//				LocalSubnets: pulumi.StringArray{
//					fooSubnet.CidrBlock,
//				},
//				ClientIpPool:     pulumi.String("172.16.2.0/24"),
//				SslVpnServerName: pulumi.String("acc-test-ssl"),
//				Description:      pulumi.String("acc-test"),
//				Protocol:         pulumi.String("UDP"),
//				Cipher:           pulumi.String("AES-128-CBC"),
//				Auth:             pulumi.String("SHA1"),
//				Compress:         pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_ = vpn.SslVpnServersOutput(ctx, vpn.SslVpnServersOutputArgs{
//				Ids: pulumi.StringArray{
//					fooSslVpnServer.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func SslVpnServers(ctx *pulumi.Context, args *SslVpnServersArgs, opts ...pulumi.InvokeOption) (*SslVpnServersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv SslVpnServersResult
	err := ctx.Invoke("volcengine:vpn/sslVpnServers:SslVpnServers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking SslVpnServers.
type SslVpnServersArgs struct {
	// The ids list.
	Ids []string `pulumi:"ids"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The name of the ssl vpn server.
	SslVpnServerName *string `pulumi:"sslVpnServerName"`
	// The id of the vpn gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

// A collection of values returned by SslVpnServers.
type SslVpnServersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	OutputFile *string  `pulumi:"outputFile"`
	// The name of the SSL server.
	SslVpnServerName *string `pulumi:"sslVpnServerName"`
	// List of SSL VPN servers.
	SslVpnServers []SslVpnServersSslVpnServer `pulumi:"sslVpnServers"`
	// The total count of SSL VPN server query.
	TotalCount int `pulumi:"totalCount"`
	// The vpn gateway id.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

func SslVpnServersOutput(ctx *pulumi.Context, args SslVpnServersOutputArgs, opts ...pulumi.InvokeOption) SslVpnServersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (SslVpnServersResult, error) {
			args := v.(SslVpnServersArgs)
			r, err := SslVpnServers(ctx, &args, opts...)
			var s SslVpnServersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(SslVpnServersResultOutput)
}

// A collection of arguments for invoking SslVpnServers.
type SslVpnServersOutputArgs struct {
	// The ids list.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The name of the ssl vpn server.
	SslVpnServerName pulumi.StringPtrInput `pulumi:"sslVpnServerName"`
	// The id of the vpn gateway.
	VpnGatewayId pulumi.StringPtrInput `pulumi:"vpnGatewayId"`
}

func (SslVpnServersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SslVpnServersArgs)(nil)).Elem()
}

// A collection of values returned by SslVpnServers.
type SslVpnServersResultOutput struct{ *pulumi.OutputState }

func (SslVpnServersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SslVpnServersResult)(nil)).Elem()
}

func (o SslVpnServersResultOutput) ToSslVpnServersResultOutput() SslVpnServersResultOutput {
	return o
}

func (o SslVpnServersResultOutput) ToSslVpnServersResultOutputWithContext(ctx context.Context) SslVpnServersResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o SslVpnServersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v SslVpnServersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o SslVpnServersResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v SslVpnServersResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o SslVpnServersResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslVpnServersResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The name of the SSL server.
func (o SslVpnServersResultOutput) SslVpnServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslVpnServersResult) *string { return v.SslVpnServerName }).(pulumi.StringPtrOutput)
}

// List of SSL VPN servers.
func (o SslVpnServersResultOutput) SslVpnServers() SslVpnServersSslVpnServerArrayOutput {
	return o.ApplyT(func(v SslVpnServersResult) []SslVpnServersSslVpnServer { return v.SslVpnServers }).(SslVpnServersSslVpnServerArrayOutput)
}

// The total count of SSL VPN server query.
func (o SslVpnServersResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v SslVpnServersResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The vpn gateway id.
func (o SslVpnServersResultOutput) VpnGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SslVpnServersResult) *string { return v.VpnGatewayId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(SslVpnServersResultOutput{})
}
