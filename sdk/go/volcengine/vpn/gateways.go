// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of vpn gateways
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.Gateways(ctx, &vpn.GatewaysArgs{
//				Ids: []string{
//					"vgw-2c012ea9fm5mo2dx0efxg46qi",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Gateways(ctx *pulumi.Context, args *GatewaysArgs, opts ...pulumi.InvokeOption) (*GatewaysResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GatewaysResult
	err := ctx.Invoke("volcengine:vpn/gateways:Gateways", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Gateways.
type GatewaysArgs struct {
	// A list of VPN gateway ids.
	Ids []string `pulumi:"ids"`
	// A IP address of the VPN gateway.
	IpAddress *string `pulumi:"ipAddress"`
	// A Name Regex of VPN gateway.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// A subnet ID of the VPN gateway.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []GatewaysTag `pulumi:"tags"`
	// A VPC ID of the VPN gateway.
	VpcId *string `pulumi:"vpcId"`
	// A list of VPN gateway names.
	VpnGatewayNames []string `pulumi:"vpnGatewayNames"`
}

// A collection of values returned by Gateways.
type GatewaysResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The IP address of the VPN gateway.
	IpAddress  *string `pulumi:"ipAddress"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	SubnetId   *string `pulumi:"subnetId"`
	// Tags.
	Tags []GatewaysTag `pulumi:"tags"`
	// The total count of VPN gateway query.
	TotalCount int `pulumi:"totalCount"`
	// The VPC ID of the VPN gateway.
	VpcId           *string  `pulumi:"vpcId"`
	VpnGatewayNames []string `pulumi:"vpnGatewayNames"`
	// The collection of VPN gateway query.
	VpnGateways []GatewaysVpnGateway `pulumi:"vpnGateways"`
}

func GatewaysOutput(ctx *pulumi.Context, args GatewaysOutputArgs, opts ...pulumi.InvokeOption) GatewaysResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GatewaysResult, error) {
			args := v.(GatewaysArgs)
			r, err := Gateways(ctx, &args, opts...)
			var s GatewaysResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GatewaysResultOutput)
}

// A collection of arguments for invoking Gateways.
type GatewaysOutputArgs struct {
	// A list of VPN gateway ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A IP address of the VPN gateway.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// A Name Regex of VPN gateway.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// A subnet ID of the VPN gateway.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// Tags.
	Tags GatewaysTagArrayInput `pulumi:"tags"`
	// A VPC ID of the VPN gateway.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
	// A list of VPN gateway names.
	VpnGatewayNames pulumi.StringArrayInput `pulumi:"vpnGatewayNames"`
}

func (GatewaysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysArgs)(nil)).Elem()
}

// A collection of values returned by Gateways.
type GatewaysResultOutput struct{ *pulumi.OutputState }

func (GatewaysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysResult)(nil)).Elem()
}

func (o GatewaysResultOutput) ToGatewaysResultOutput() GatewaysResultOutput {
	return o
}

func (o GatewaysResultOutput) ToGatewaysResultOutputWithContext(ctx context.Context) GatewaysResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GatewaysResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GatewaysResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaysResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The IP address of the VPN gateway.
func (o GatewaysResultOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaysResult) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

func (o GatewaysResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaysResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GatewaysResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaysResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GatewaysResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaysResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Tags.
func (o GatewaysResultOutput) Tags() GatewaysTagArrayOutput {
	return o.ApplyT(func(v GatewaysResult) []GatewaysTag { return v.Tags }).(GatewaysTagArrayOutput)
}

// The total count of VPN gateway query.
func (o GatewaysResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GatewaysResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The VPC ID of the VPN gateway.
func (o GatewaysResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaysResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func (o GatewaysResultOutput) VpnGatewayNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GatewaysResult) []string { return v.VpnGatewayNames }).(pulumi.StringArrayOutput)
}

// The collection of VPN gateway query.
func (o GatewaysResultOutput) VpnGateways() GatewaysVpnGatewayArrayOutput {
	return o.ApplyT(func(v GatewaysResult) []GatewaysVpnGateway { return v.VpnGateways }).(GatewaysVpnGatewayArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GatewaysResultOutput{})
}
