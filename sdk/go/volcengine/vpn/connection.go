// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage vpn connection
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.NewConnection(ctx, "foo", &vpn.ConnectionArgs{
//				CustomerGatewayId:   pulumi.String("cgw-12ayj1s157gn417q7y29bixqy"),
//				Description:         pulumi.String("tf-test"),
//				DpdAction:           pulumi.String("none"),
//				IkeConfigAuthAlg:    pulumi.String("md5"),
//				IkeConfigDhGroup:    pulumi.String("group2"),
//				IkeConfigEncAlg:     pulumi.String("aes"),
//				IkeConfigLifetime:   pulumi.Int(9000),
//				IkeConfigLocalId:    pulumi.String("tf_test"),
//				IkeConfigMode:       pulumi.String("main"),
//				IkeConfigPsk:        pulumi.String("tftest@!3"),
//				IkeConfigRemoteId:   pulumi.String("tf_test"),
//				IkeConfigVersion:    pulumi.String("ikev1"),
//				IpsecConfigAuthAlg:  pulumi.String("sha256"),
//				IpsecConfigDhGroup:  pulumi.String("group2"),
//				IpsecConfigEncAlg:   pulumi.String("aes"),
//				IpsecConfigLifetime: pulumi.Int(9000),
//				LocalSubnets: pulumi.StringArray{
//					pulumi.String("192.168.0.0/22"),
//				},
//				NatTraversal: pulumi.Bool(true),
//				ProjectName:  pulumi.String("default"),
//				RemoteSubnets: pulumi.StringArray{
//					pulumi.String("192.161.0.0/20"),
//				},
//				VpnConnectionName: pulumi.String("tf-test"),
//				VpnGatewayId:      pulumi.String("vgw-2feq19gnyc9hc59gp68914u6o"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// VpnConnection can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:vpn/connection:Connection default vgc-3tex2x1cwd4c6c0v****
//
// ```
type Connection struct {
	pulumi.CustomResourceState

	// The account ID of the VPN connection.
	AccountId pulumi.StringOutput `pulumi:"accountId"`
	// The IPsec attach status.
	AttachStatus pulumi.StringOutput `pulumi:"attachStatus"`
	// The attach type of the VPN connection, the value can be `VpnGateway` or `TransitRouter`.
	AttachType pulumi.StringPtrOutput `pulumi:"attachType"`
	// The business status of IPsec connection, valid when the attach type is 'TransitRouter'.
	BusinessStatus pulumi.StringOutput `pulumi:"businessStatus"`
	// The connect status of the VPN connection.
	ConnectStatus pulumi.StringOutput `pulumi:"connectStatus"`
	// The create time of VPN connection.
	CreationTime pulumi.StringOutput `pulumi:"creationTime"`
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringOutput `pulumi:"customerGatewayId"`
	// The delete time of resource, valid when the attach type is 'TransitRouter'.
	DeletedTime pulumi.StringOutput `pulumi:"deletedTime"`
	// The description of the VPN connection.
	Description pulumi.StringOutput `pulumi:"description"`
	// The dpd action of the VPN connection.
	DpdAction pulumi.StringPtrOutput `pulumi:"dpdAction"`
	// The auth alg of the ike config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IkeConfigAuthAlg pulumi.StringPtrOutput `pulumi:"ikeConfigAuthAlg"`
	// The dk group of the ike config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14`. The default value is `group2`.
	IkeConfigDhGroup pulumi.StringPtrOutput `pulumi:"ikeConfigDhGroup"`
	// The enc alg of the ike config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IkeConfigEncAlg pulumi.StringPtrOutput `pulumi:"ikeConfigEncAlg"`
	// The lifetime of the ike config of the VPN connection. Value: 900~86400.
	IkeConfigLifetime pulumi.IntPtrOutput `pulumi:"ikeConfigLifetime"`
	// The localId of the ike config of the VPN connection.
	IkeConfigLocalId pulumi.StringOutput `pulumi:"ikeConfigLocalId"`
	// The mode of the ike config of the VPN connection. Valid values are `main`, `aggressive`, and default value is `main`.
	IkeConfigMode pulumi.StringPtrOutput `pulumi:"ikeConfigMode"`
	// The psk of the ike config of the VPN connection. The length does not exceed 100 characters, and only uppercase and lowercase letters, special symbols and numbers are allowed.
	IkeConfigPsk pulumi.StringOutput `pulumi:"ikeConfigPsk"`
	// The remote id of the ike config of the VPN connection.
	IkeConfigRemoteId pulumi.StringOutput `pulumi:"ikeConfigRemoteId"`
	// The version of the ike config of the VPN connection. The value can be `ikev1` or `ikev2`. The default value is `ikev1`.
	IkeConfigVersion pulumi.StringPtrOutput `pulumi:"ikeConfigVersion"`
	// The ip address of transit router, valid when the attach type is 'TransitRouter'.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The auth alg of the ipsec config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IpsecConfigAuthAlg pulumi.StringPtrOutput `pulumi:"ipsecConfigAuthAlg"`
	// The dh group of the ipsec config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14` and `disable`. The default value is `group2`.
	IpsecConfigDhGroup pulumi.StringPtrOutput `pulumi:"ipsecConfigDhGroup"`
	// The enc alg of the ipsec config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IpsecConfigEncAlg pulumi.StringPtrOutput `pulumi:"ipsecConfigEncAlg"`
	// The ipsec config of the ike config of the VPN connection. Value: 900~86400.
	IpsecConfigLifetime pulumi.IntPtrOutput `pulumi:"ipsecConfigLifetime"`
	// The local subnet of the VPN connection. Up to 5 network segments are supported.
	LocalSubnets pulumi.StringArrayOutput `pulumi:"localSubnets"`
	// Whether to enable connection logging. After enabling Connection Day, you can view and download IPsec connection logs, and use the log information to troubleshoot IPsec connection problems yourself.
	LogEnabled pulumi.BoolPtrOutput `pulumi:"logEnabled"`
	// The nat traversal of the VPN connection.
	NatTraversal pulumi.BoolPtrOutput `pulumi:"natTraversal"`
	// Whether to initiate negotiation mode immediately.
	NegotiateInstantly pulumi.BoolPtrOutput `pulumi:"negotiateInstantly"`
	// The overdue time of resource, valid when the attach type is 'TransitRouter'.
	OverdueTime pulumi.StringOutput `pulumi:"overdueTime"`
	// The project name of the VPN connection.
	ProjectName pulumi.StringPtrOutput `pulumi:"projectName"`
	// The remote subnet of the VPN connection. Up to 5 network segments are supported.
	RemoteSubnets pulumi.StringArrayOutput `pulumi:"remoteSubnets"`
	// The status of the VPN connection.
	Status pulumi.StringOutput `pulumi:"status"`
	// The id of transit router, valid when the attach type is 'TransitRouter'.
	TransitRouterId pulumi.StringOutput `pulumi:"transitRouterId"`
	// The update time of VPN connection.
	UpdateTime pulumi.StringOutput `pulumi:"updateTime"`
	// The ID of the VPN connection.
	VpnConnectionId pulumi.StringOutput `pulumi:"vpnConnectionId"`
	// The name of the VPN connection.
	VpnConnectionName pulumi.StringOutput `pulumi:"vpnConnectionName"`
	// The ID of the vpn gateway. If the `AttachType` is not passed or the passed value is `VpnGateway`, this parameter must be filled. If the value of `AttachType` is `TransitRouter`, this parameter does not need to be filled.
	VpnGatewayId pulumi.StringPtrOutput `pulumi:"vpnGatewayId"`
	// The zone id of transit router, valid when the attach type is 'TransitRouter'.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewConnection registers a new resource with the given unique name, arguments, and options.
func NewConnection(ctx *pulumi.Context,
	name string, args *ConnectionArgs, opts ...pulumi.ResourceOption) (*Connection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CustomerGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'CustomerGatewayId'")
	}
	if args.IkeConfigPsk == nil {
		return nil, errors.New("invalid value for required argument 'IkeConfigPsk'")
	}
	if args.LocalSubnets == nil {
		return nil, errors.New("invalid value for required argument 'LocalSubnets'")
	}
	if args.RemoteSubnets == nil {
		return nil, errors.New("invalid value for required argument 'RemoteSubnets'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Connection
	err := ctx.RegisterResource("volcengine:vpn/connection:Connection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnection gets an existing Connection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectionState, opts ...pulumi.ResourceOption) (*Connection, error) {
	var resource Connection
	err := ctx.ReadResource("volcengine:vpn/connection:Connection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Connection resources.
type connectionState struct {
	// The account ID of the VPN connection.
	AccountId *string `pulumi:"accountId"`
	// The IPsec attach status.
	AttachStatus *string `pulumi:"attachStatus"`
	// The attach type of the VPN connection, the value can be `VpnGateway` or `TransitRouter`.
	AttachType *string `pulumi:"attachType"`
	// The business status of IPsec connection, valid when the attach type is 'TransitRouter'.
	BusinessStatus *string `pulumi:"businessStatus"`
	// The connect status of the VPN connection.
	ConnectStatus *string `pulumi:"connectStatus"`
	// The create time of VPN connection.
	CreationTime *string `pulumi:"creationTime"`
	// The ID of the customer gateway.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// The delete time of resource, valid when the attach type is 'TransitRouter'.
	DeletedTime *string `pulumi:"deletedTime"`
	// The description of the VPN connection.
	Description *string `pulumi:"description"`
	// The dpd action of the VPN connection.
	DpdAction *string `pulumi:"dpdAction"`
	// The auth alg of the ike config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IkeConfigAuthAlg *string `pulumi:"ikeConfigAuthAlg"`
	// The dk group of the ike config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14`. The default value is `group2`.
	IkeConfigDhGroup *string `pulumi:"ikeConfigDhGroup"`
	// The enc alg of the ike config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IkeConfigEncAlg *string `pulumi:"ikeConfigEncAlg"`
	// The lifetime of the ike config of the VPN connection. Value: 900~86400.
	IkeConfigLifetime *int `pulumi:"ikeConfigLifetime"`
	// The localId of the ike config of the VPN connection.
	IkeConfigLocalId *string `pulumi:"ikeConfigLocalId"`
	// The mode of the ike config of the VPN connection. Valid values are `main`, `aggressive`, and default value is `main`.
	IkeConfigMode *string `pulumi:"ikeConfigMode"`
	// The psk of the ike config of the VPN connection. The length does not exceed 100 characters, and only uppercase and lowercase letters, special symbols and numbers are allowed.
	IkeConfigPsk *string `pulumi:"ikeConfigPsk"`
	// The remote id of the ike config of the VPN connection.
	IkeConfigRemoteId *string `pulumi:"ikeConfigRemoteId"`
	// The version of the ike config of the VPN connection. The value can be `ikev1` or `ikev2`. The default value is `ikev1`.
	IkeConfigVersion *string `pulumi:"ikeConfigVersion"`
	// The ip address of transit router, valid when the attach type is 'TransitRouter'.
	IpAddress *string `pulumi:"ipAddress"`
	// The auth alg of the ipsec config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IpsecConfigAuthAlg *string `pulumi:"ipsecConfigAuthAlg"`
	// The dh group of the ipsec config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14` and `disable`. The default value is `group2`.
	IpsecConfigDhGroup *string `pulumi:"ipsecConfigDhGroup"`
	// The enc alg of the ipsec config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IpsecConfigEncAlg *string `pulumi:"ipsecConfigEncAlg"`
	// The ipsec config of the ike config of the VPN connection. Value: 900~86400.
	IpsecConfigLifetime *int `pulumi:"ipsecConfigLifetime"`
	// The local subnet of the VPN connection. Up to 5 network segments are supported.
	LocalSubnets []string `pulumi:"localSubnets"`
	// Whether to enable connection logging. After enabling Connection Day, you can view and download IPsec connection logs, and use the log information to troubleshoot IPsec connection problems yourself.
	LogEnabled *bool `pulumi:"logEnabled"`
	// The nat traversal of the VPN connection.
	NatTraversal *bool `pulumi:"natTraversal"`
	// Whether to initiate negotiation mode immediately.
	NegotiateInstantly *bool `pulumi:"negotiateInstantly"`
	// The overdue time of resource, valid when the attach type is 'TransitRouter'.
	OverdueTime *string `pulumi:"overdueTime"`
	// The project name of the VPN connection.
	ProjectName *string `pulumi:"projectName"`
	// The remote subnet of the VPN connection. Up to 5 network segments are supported.
	RemoteSubnets []string `pulumi:"remoteSubnets"`
	// The status of the VPN connection.
	Status *string `pulumi:"status"`
	// The id of transit router, valid when the attach type is 'TransitRouter'.
	TransitRouterId *string `pulumi:"transitRouterId"`
	// The update time of VPN connection.
	UpdateTime *string `pulumi:"updateTime"`
	// The ID of the VPN connection.
	VpnConnectionId *string `pulumi:"vpnConnectionId"`
	// The name of the VPN connection.
	VpnConnectionName *string `pulumi:"vpnConnectionName"`
	// The ID of the vpn gateway. If the `AttachType` is not passed or the passed value is `VpnGateway`, this parameter must be filled. If the value of `AttachType` is `TransitRouter`, this parameter does not need to be filled.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
	// The zone id of transit router, valid when the attach type is 'TransitRouter'.
	ZoneId *string `pulumi:"zoneId"`
}

type ConnectionState struct {
	// The account ID of the VPN connection.
	AccountId pulumi.StringPtrInput
	// The IPsec attach status.
	AttachStatus pulumi.StringPtrInput
	// The attach type of the VPN connection, the value can be `VpnGateway` or `TransitRouter`.
	AttachType pulumi.StringPtrInput
	// The business status of IPsec connection, valid when the attach type is 'TransitRouter'.
	BusinessStatus pulumi.StringPtrInput
	// The connect status of the VPN connection.
	ConnectStatus pulumi.StringPtrInput
	// The create time of VPN connection.
	CreationTime pulumi.StringPtrInput
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringPtrInput
	// The delete time of resource, valid when the attach type is 'TransitRouter'.
	DeletedTime pulumi.StringPtrInput
	// The description of the VPN connection.
	Description pulumi.StringPtrInput
	// The dpd action of the VPN connection.
	DpdAction pulumi.StringPtrInput
	// The auth alg of the ike config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IkeConfigAuthAlg pulumi.StringPtrInput
	// The dk group of the ike config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14`. The default value is `group2`.
	IkeConfigDhGroup pulumi.StringPtrInput
	// The enc alg of the ike config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IkeConfigEncAlg pulumi.StringPtrInput
	// The lifetime of the ike config of the VPN connection. Value: 900~86400.
	IkeConfigLifetime pulumi.IntPtrInput
	// The localId of the ike config of the VPN connection.
	IkeConfigLocalId pulumi.StringPtrInput
	// The mode of the ike config of the VPN connection. Valid values are `main`, `aggressive`, and default value is `main`.
	IkeConfigMode pulumi.StringPtrInput
	// The psk of the ike config of the VPN connection. The length does not exceed 100 characters, and only uppercase and lowercase letters, special symbols and numbers are allowed.
	IkeConfigPsk pulumi.StringPtrInput
	// The remote id of the ike config of the VPN connection.
	IkeConfigRemoteId pulumi.StringPtrInput
	// The version of the ike config of the VPN connection. The value can be `ikev1` or `ikev2`. The default value is `ikev1`.
	IkeConfigVersion pulumi.StringPtrInput
	// The ip address of transit router, valid when the attach type is 'TransitRouter'.
	IpAddress pulumi.StringPtrInput
	// The auth alg of the ipsec config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IpsecConfigAuthAlg pulumi.StringPtrInput
	// The dh group of the ipsec config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14` and `disable`. The default value is `group2`.
	IpsecConfigDhGroup pulumi.StringPtrInput
	// The enc alg of the ipsec config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IpsecConfigEncAlg pulumi.StringPtrInput
	// The ipsec config of the ike config of the VPN connection. Value: 900~86400.
	IpsecConfigLifetime pulumi.IntPtrInput
	// The local subnet of the VPN connection. Up to 5 network segments are supported.
	LocalSubnets pulumi.StringArrayInput
	// Whether to enable connection logging. After enabling Connection Day, you can view and download IPsec connection logs, and use the log information to troubleshoot IPsec connection problems yourself.
	LogEnabled pulumi.BoolPtrInput
	// The nat traversal of the VPN connection.
	NatTraversal pulumi.BoolPtrInput
	// Whether to initiate negotiation mode immediately.
	NegotiateInstantly pulumi.BoolPtrInput
	// The overdue time of resource, valid when the attach type is 'TransitRouter'.
	OverdueTime pulumi.StringPtrInput
	// The project name of the VPN connection.
	ProjectName pulumi.StringPtrInput
	// The remote subnet of the VPN connection. Up to 5 network segments are supported.
	RemoteSubnets pulumi.StringArrayInput
	// The status of the VPN connection.
	Status pulumi.StringPtrInput
	// The id of transit router, valid when the attach type is 'TransitRouter'.
	TransitRouterId pulumi.StringPtrInput
	// The update time of VPN connection.
	UpdateTime pulumi.StringPtrInput
	// The ID of the VPN connection.
	VpnConnectionId pulumi.StringPtrInput
	// The name of the VPN connection.
	VpnConnectionName pulumi.StringPtrInput
	// The ID of the vpn gateway. If the `AttachType` is not passed or the passed value is `VpnGateway`, this parameter must be filled. If the value of `AttachType` is `TransitRouter`, this parameter does not need to be filled.
	VpnGatewayId pulumi.StringPtrInput
	// The zone id of transit router, valid when the attach type is 'TransitRouter'.
	ZoneId pulumi.StringPtrInput
}

func (ConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionState)(nil)).Elem()
}

type connectionArgs struct {
	// The attach type of the VPN connection, the value can be `VpnGateway` or `TransitRouter`.
	AttachType *string `pulumi:"attachType"`
	// The ID of the customer gateway.
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// The description of the VPN connection.
	Description *string `pulumi:"description"`
	// The dpd action of the VPN connection.
	DpdAction *string `pulumi:"dpdAction"`
	// The auth alg of the ike config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IkeConfigAuthAlg *string `pulumi:"ikeConfigAuthAlg"`
	// The dk group of the ike config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14`. The default value is `group2`.
	IkeConfigDhGroup *string `pulumi:"ikeConfigDhGroup"`
	// The enc alg of the ike config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IkeConfigEncAlg *string `pulumi:"ikeConfigEncAlg"`
	// The lifetime of the ike config of the VPN connection. Value: 900~86400.
	IkeConfigLifetime *int `pulumi:"ikeConfigLifetime"`
	// The localId of the ike config of the VPN connection.
	IkeConfigLocalId *string `pulumi:"ikeConfigLocalId"`
	// The mode of the ike config of the VPN connection. Valid values are `main`, `aggressive`, and default value is `main`.
	IkeConfigMode *string `pulumi:"ikeConfigMode"`
	// The psk of the ike config of the VPN connection. The length does not exceed 100 characters, and only uppercase and lowercase letters, special symbols and numbers are allowed.
	IkeConfigPsk string `pulumi:"ikeConfigPsk"`
	// The remote id of the ike config of the VPN connection.
	IkeConfigRemoteId *string `pulumi:"ikeConfigRemoteId"`
	// The version of the ike config of the VPN connection. The value can be `ikev1` or `ikev2`. The default value is `ikev1`.
	IkeConfigVersion *string `pulumi:"ikeConfigVersion"`
	// The auth alg of the ipsec config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IpsecConfigAuthAlg *string `pulumi:"ipsecConfigAuthAlg"`
	// The dh group of the ipsec config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14` and `disable`. The default value is `group2`.
	IpsecConfigDhGroup *string `pulumi:"ipsecConfigDhGroup"`
	// The enc alg of the ipsec config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IpsecConfigEncAlg *string `pulumi:"ipsecConfigEncAlg"`
	// The ipsec config of the ike config of the VPN connection. Value: 900~86400.
	IpsecConfigLifetime *int `pulumi:"ipsecConfigLifetime"`
	// The local subnet of the VPN connection. Up to 5 network segments are supported.
	LocalSubnets []string `pulumi:"localSubnets"`
	// Whether to enable connection logging. After enabling Connection Day, you can view and download IPsec connection logs, and use the log information to troubleshoot IPsec connection problems yourself.
	LogEnabled *bool `pulumi:"logEnabled"`
	// The nat traversal of the VPN connection.
	NatTraversal *bool `pulumi:"natTraversal"`
	// Whether to initiate negotiation mode immediately.
	NegotiateInstantly *bool `pulumi:"negotiateInstantly"`
	// The project name of the VPN connection.
	ProjectName *string `pulumi:"projectName"`
	// The remote subnet of the VPN connection. Up to 5 network segments are supported.
	RemoteSubnets []string `pulumi:"remoteSubnets"`
	// The name of the VPN connection.
	VpnConnectionName *string `pulumi:"vpnConnectionName"`
	// The ID of the vpn gateway. If the `AttachType` is not passed or the passed value is `VpnGateway`, this parameter must be filled. If the value of `AttachType` is `TransitRouter`, this parameter does not need to be filled.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a Connection resource.
type ConnectionArgs struct {
	// The attach type of the VPN connection, the value can be `VpnGateway` or `TransitRouter`.
	AttachType pulumi.StringPtrInput
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringInput
	// The description of the VPN connection.
	Description pulumi.StringPtrInput
	// The dpd action of the VPN connection.
	DpdAction pulumi.StringPtrInput
	// The auth alg of the ike config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IkeConfigAuthAlg pulumi.StringPtrInput
	// The dk group of the ike config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14`. The default value is `group2`.
	IkeConfigDhGroup pulumi.StringPtrInput
	// The enc alg of the ike config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IkeConfigEncAlg pulumi.StringPtrInput
	// The lifetime of the ike config of the VPN connection. Value: 900~86400.
	IkeConfigLifetime pulumi.IntPtrInput
	// The localId of the ike config of the VPN connection.
	IkeConfigLocalId pulumi.StringPtrInput
	// The mode of the ike config of the VPN connection. Valid values are `main`, `aggressive`, and default value is `main`.
	IkeConfigMode pulumi.StringPtrInput
	// The psk of the ike config of the VPN connection. The length does not exceed 100 characters, and only uppercase and lowercase letters, special symbols and numbers are allowed.
	IkeConfigPsk pulumi.StringInput
	// The remote id of the ike config of the VPN connection.
	IkeConfigRemoteId pulumi.StringPtrInput
	// The version of the ike config of the VPN connection. The value can be `ikev1` or `ikev2`. The default value is `ikev1`.
	IkeConfigVersion pulumi.StringPtrInput
	// The auth alg of the ipsec config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
	IpsecConfigAuthAlg pulumi.StringPtrInput
	// The dh group of the ipsec config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14` and `disable`. The default value is `group2`.
	IpsecConfigDhGroup pulumi.StringPtrInput
	// The enc alg of the ipsec config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
	IpsecConfigEncAlg pulumi.StringPtrInput
	// The ipsec config of the ike config of the VPN connection. Value: 900~86400.
	IpsecConfigLifetime pulumi.IntPtrInput
	// The local subnet of the VPN connection. Up to 5 network segments are supported.
	LocalSubnets pulumi.StringArrayInput
	// Whether to enable connection logging. After enabling Connection Day, you can view and download IPsec connection logs, and use the log information to troubleshoot IPsec connection problems yourself.
	LogEnabled pulumi.BoolPtrInput
	// The nat traversal of the VPN connection.
	NatTraversal pulumi.BoolPtrInput
	// Whether to initiate negotiation mode immediately.
	NegotiateInstantly pulumi.BoolPtrInput
	// The project name of the VPN connection.
	ProjectName pulumi.StringPtrInput
	// The remote subnet of the VPN connection. Up to 5 network segments are supported.
	RemoteSubnets pulumi.StringArrayInput
	// The name of the VPN connection.
	VpnConnectionName pulumi.StringPtrInput
	// The ID of the vpn gateway. If the `AttachType` is not passed or the passed value is `VpnGateway`, this parameter must be filled. If the value of `AttachType` is `TransitRouter`, this parameter does not need to be filled.
	VpnGatewayId pulumi.StringPtrInput
}

func (ConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectionArgs)(nil)).Elem()
}

type ConnectionInput interface {
	pulumi.Input

	ToConnectionOutput() ConnectionOutput
	ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput
}

func (*Connection) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (i *Connection) ToConnectionOutput() ConnectionOutput {
	return i.ToConnectionOutputWithContext(context.Background())
}

func (i *Connection) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionOutput)
}

// ConnectionArrayInput is an input type that accepts ConnectionArray and ConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionArrayInput` via:
//
//	ConnectionArray{ ConnectionArgs{...} }
type ConnectionArrayInput interface {
	pulumi.Input

	ToConnectionArrayOutput() ConnectionArrayOutput
	ToConnectionArrayOutputWithContext(context.Context) ConnectionArrayOutput
}

type ConnectionArray []ConnectionInput

func (ConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (i ConnectionArray) ToConnectionArrayOutput() ConnectionArrayOutput {
	return i.ToConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionArray) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionArrayOutput)
}

// ConnectionMapInput is an input type that accepts ConnectionMap and ConnectionMapOutput values.
// You can construct a concrete instance of `ConnectionMapInput` via:
//
//	ConnectionMap{ "key": ConnectionArgs{...} }
type ConnectionMapInput interface {
	pulumi.Input

	ToConnectionMapOutput() ConnectionMapOutput
	ToConnectionMapOutputWithContext(context.Context) ConnectionMapOutput
}

type ConnectionMap map[string]ConnectionInput

func (ConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (i ConnectionMap) ToConnectionMapOutput() ConnectionMapOutput {
	return i.ToConnectionMapOutputWithContext(context.Background())
}

func (i ConnectionMap) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionMapOutput)
}

type ConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Connection)(nil)).Elem()
}

func (o ConnectionOutput) ToConnectionOutput() ConnectionOutput {
	return o
}

func (o ConnectionOutput) ToConnectionOutputWithContext(ctx context.Context) ConnectionOutput {
	return o
}

// The account ID of the VPN connection.
func (o ConnectionOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.AccountId }).(pulumi.StringOutput)
}

// The IPsec attach status.
func (o ConnectionOutput) AttachStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.AttachStatus }).(pulumi.StringOutput)
}

// The attach type of the VPN connection, the value can be `VpnGateway` or `TransitRouter`.
func (o ConnectionOutput) AttachType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.AttachType }).(pulumi.StringPtrOutput)
}

// The business status of IPsec connection, valid when the attach type is 'TransitRouter'.
func (o ConnectionOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The connect status of the VPN connection.
func (o ConnectionOutput) ConnectStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ConnectStatus }).(pulumi.StringOutput)
}

// The create time of VPN connection.
func (o ConnectionOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CreationTime }).(pulumi.StringOutput)
}

// The ID of the customer gateway.
func (o ConnectionOutput) CustomerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.CustomerGatewayId }).(pulumi.StringOutput)
}

// The delete time of resource, valid when the attach type is 'TransitRouter'.
func (o ConnectionOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.DeletedTime }).(pulumi.StringOutput)
}

// The description of the VPN connection.
func (o ConnectionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The dpd action of the VPN connection.
func (o ConnectionOutput) DpdAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.DpdAction }).(pulumi.StringPtrOutput)
}

// The auth alg of the ike config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
func (o ConnectionOutput) IkeConfigAuthAlg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeConfigAuthAlg }).(pulumi.StringPtrOutput)
}

// The dk group of the ike config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14`. The default value is `group2`.
func (o ConnectionOutput) IkeConfigDhGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeConfigDhGroup }).(pulumi.StringPtrOutput)
}

// The enc alg of the ike config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
func (o ConnectionOutput) IkeConfigEncAlg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeConfigEncAlg }).(pulumi.StringPtrOutput)
}

// The lifetime of the ike config of the VPN connection. Value: 900~86400.
func (o ConnectionOutput) IkeConfigLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.IntPtrOutput { return v.IkeConfigLifetime }).(pulumi.IntPtrOutput)
}

// The localId of the ike config of the VPN connection.
func (o ConnectionOutput) IkeConfigLocalId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.IkeConfigLocalId }).(pulumi.StringOutput)
}

// The mode of the ike config of the VPN connection. Valid values are `main`, `aggressive`, and default value is `main`.
func (o ConnectionOutput) IkeConfigMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeConfigMode }).(pulumi.StringPtrOutput)
}

// The psk of the ike config of the VPN connection. The length does not exceed 100 characters, and only uppercase and lowercase letters, special symbols and numbers are allowed.
func (o ConnectionOutput) IkeConfigPsk() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.IkeConfigPsk }).(pulumi.StringOutput)
}

// The remote id of the ike config of the VPN connection.
func (o ConnectionOutput) IkeConfigRemoteId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.IkeConfigRemoteId }).(pulumi.StringOutput)
}

// The version of the ike config of the VPN connection. The value can be `ikev1` or `ikev2`. The default value is `ikev1`.
func (o ConnectionOutput) IkeConfigVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IkeConfigVersion }).(pulumi.StringPtrOutput)
}

// The ip address of transit router, valid when the attach type is 'TransitRouter'.
func (o ConnectionOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.IpAddress }).(pulumi.StringOutput)
}

// The auth alg of the ipsec config of the VPN connection. Valid value are `sha1`, `md5`, `sha256`, `sha384`, `sha512`, `sm3`. The default value is `sha1`.
func (o ConnectionOutput) IpsecConfigAuthAlg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IpsecConfigAuthAlg }).(pulumi.StringPtrOutput)
}

// The dh group of the ipsec config of the VPN connection. Valid value are `group1`, `group2`, `group5`, `group14` and `disable`. The default value is `group2`.
func (o ConnectionOutput) IpsecConfigDhGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IpsecConfigDhGroup }).(pulumi.StringPtrOutput)
}

// The enc alg of the ipsec config of the VPN connection. Valid value are `aes`, `aes192`, `aes256`, `des`, `3des`, `sm4`. The default value is `aes`.
func (o ConnectionOutput) IpsecConfigEncAlg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.IpsecConfigEncAlg }).(pulumi.StringPtrOutput)
}

// The ipsec config of the ike config of the VPN connection. Value: 900~86400.
func (o ConnectionOutput) IpsecConfigLifetime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.IntPtrOutput { return v.IpsecConfigLifetime }).(pulumi.IntPtrOutput)
}

// The local subnet of the VPN connection. Up to 5 network segments are supported.
func (o ConnectionOutput) LocalSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringArrayOutput { return v.LocalSubnets }).(pulumi.StringArrayOutput)
}

// Whether to enable connection logging. After enabling Connection Day, you can view and download IPsec connection logs, and use the log information to troubleshoot IPsec connection problems yourself.
func (o ConnectionOutput) LogEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolPtrOutput { return v.LogEnabled }).(pulumi.BoolPtrOutput)
}

// The nat traversal of the VPN connection.
func (o ConnectionOutput) NatTraversal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolPtrOutput { return v.NatTraversal }).(pulumi.BoolPtrOutput)
}

// Whether to initiate negotiation mode immediately.
func (o ConnectionOutput) NegotiateInstantly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.BoolPtrOutput { return v.NegotiateInstantly }).(pulumi.BoolPtrOutput)
}

// The overdue time of resource, valid when the attach type is 'TransitRouter'.
func (o ConnectionOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.OverdueTime }).(pulumi.StringOutput)
}

// The project name of the VPN connection.
func (o ConnectionOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The remote subnet of the VPN connection. Up to 5 network segments are supported.
func (o ConnectionOutput) RemoteSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringArrayOutput { return v.RemoteSubnets }).(pulumi.StringArrayOutput)
}

// The status of the VPN connection.
func (o ConnectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The id of transit router, valid when the attach type is 'TransitRouter'.
func (o ConnectionOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.TransitRouterId }).(pulumi.StringOutput)
}

// The update time of VPN connection.
func (o ConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.UpdateTime }).(pulumi.StringOutput)
}

// The ID of the VPN connection.
func (o ConnectionOutput) VpnConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.VpnConnectionId }).(pulumi.StringOutput)
}

// The name of the VPN connection.
func (o ConnectionOutput) VpnConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.VpnConnectionName }).(pulumi.StringOutput)
}

// The ID of the vpn gateway. If the `AttachType` is not passed or the passed value is `VpnGateway`, this parameter must be filled. If the value of `AttachType` is `TransitRouter`, this parameter does not need to be filled.
func (o ConnectionOutput) VpnGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringPtrOutput { return v.VpnGatewayId }).(pulumi.StringPtrOutput)
}

// The zone id of transit router, valid when the attach type is 'TransitRouter'.
func (o ConnectionOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *Connection) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type ConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Connection)(nil)).Elem()
}

func (o ConnectionArrayOutput) ToConnectionArrayOutput() ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) ToConnectionArrayOutputWithContext(ctx context.Context) ConnectionArrayOutput {
	return o
}

func (o ConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].([]*Connection)[vs[1].(int)]
	}).(ConnectionOutput)
}

type ConnectionMapOutput struct{ *pulumi.OutputState }

func (ConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Connection)(nil)).Elem()
}

func (o ConnectionMapOutput) ToConnectionMapOutput() ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) ToConnectionMapOutputWithContext(ctx context.Context) ConnectionMapOutput {
	return o
}

func (o ConnectionMapOutput) MapIndex(k pulumi.StringInput) ConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Connection {
		return vs[0].(map[string]*Connection)[vs[1].(string)]
	}).(ConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionInput)(nil)).Elem(), &Connection{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionArrayInput)(nil)).Elem(), ConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionMapInput)(nil)).Elem(), ConnectionMap{})
	pulumi.RegisterOutputType(ConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionArrayOutput{})
	pulumi.RegisterOutputType(ConnectionMapOutput{})
}
