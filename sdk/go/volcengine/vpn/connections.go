// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of vpn connections
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := vpn.Connections(ctx, &vpn.ConnectionsArgs{
//				Ids: []string{
//					"vgc-2d5wwids8cdts58ozfe63k2uq",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Connections(ctx *pulumi.Context, args *ConnectionsArgs, opts ...pulumi.InvokeOption) (*ConnectionsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv ConnectionsResult
	err := ctx.Invoke("volcengine:vpn/connections:Connections", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Connections.
type ConnectionsArgs struct {
	// An ID of customer gateway.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// A list of VPN connection ids.
	Ids []string `pulumi:"ids"`
	// A Name Regex of VPN connection.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// A list of VPN connection names.
	VpnConnectionNames []string `pulumi:"vpnConnectionNames"`
	// An ID of VPN gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

// A collection of values returned by Connections.
type ConnectionsResult struct {
	// The ID of the customer gateway.
	CustomerGatewayId *string `pulumi:"customerGatewayId"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// The total count of VPN connection query.
	TotalCount         int      `pulumi:"totalCount"`
	VpnConnectionNames []string `pulumi:"vpnConnectionNames"`
	// The collection of VPN connection query.
	VpnConnections []ConnectionsVpnConnection `pulumi:"vpnConnections"`
	// The ID of the vpn gateway.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

func ConnectionsOutput(ctx *pulumi.Context, args ConnectionsOutputArgs, opts ...pulumi.InvokeOption) ConnectionsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ConnectionsResult, error) {
			args := v.(ConnectionsArgs)
			r, err := Connections(ctx, &args, opts...)
			var s ConnectionsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ConnectionsResultOutput)
}

// A collection of arguments for invoking Connections.
type ConnectionsOutputArgs struct {
	// An ID of customer gateway.
	CustomerGatewayId pulumi.StringPtrInput `pulumi:"customerGatewayId"`
	// A list of VPN connection ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of VPN connection.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// A list of VPN connection names.
	VpnConnectionNames pulumi.StringArrayInput `pulumi:"vpnConnectionNames"`
	// An ID of VPN gateway.
	VpnGatewayId pulumi.StringPtrInput `pulumi:"vpnGatewayId"`
}

func (ConnectionsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionsArgs)(nil)).Elem()
}

// A collection of values returned by Connections.
type ConnectionsResultOutput struct{ *pulumi.OutputState }

func (ConnectionsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionsResult)(nil)).Elem()
}

func (o ConnectionsResultOutput) ToConnectionsResultOutput() ConnectionsResultOutput {
	return o
}

func (o ConnectionsResultOutput) ToConnectionsResultOutputWithContext(ctx context.Context) ConnectionsResultOutput {
	return o
}

// The ID of the customer gateway.
func (o ConnectionsResultOutput) CustomerGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionsResult) *string { return v.CustomerGatewayId }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ConnectionsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ConnectionsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o ConnectionsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ConnectionsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of VPN connection query.
func (o ConnectionsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ConnectionsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func (o ConnectionsResultOutput) VpnConnectionNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionsResult) []string { return v.VpnConnectionNames }).(pulumi.StringArrayOutput)
}

// The collection of VPN connection query.
func (o ConnectionsResultOutput) VpnConnections() ConnectionsVpnConnectionArrayOutput {
	return o.ApplyT(func(v ConnectionsResult) []ConnectionsVpnConnection { return v.VpnConnections }).(ConnectionsVpnConnectionArrayOutput)
}

// The ID of the vpn gateway.
func (o ConnectionsResultOutput) VpnGatewayId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConnectionsResult) *string { return v.VpnGatewayId }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ConnectionsResultOutput{})
}
