// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage ssl vpn server
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooZones, err := ecs.Zones(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String(fooZones.Zones[0].Id),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooGateway, err := vpn.NewGateway(ctx, "fooGateway", &vpn.GatewayArgs{
//				VpcId:             fooVpc.ID(),
//				SubnetId:          fooSubnet.ID(),
//				Bandwidth:         pulumi.Int(5),
//				VpnGatewayName:    pulumi.String("acc-test1"),
//				Description:       pulumi.String("acc-test1"),
//				Period:            pulumi.Int(7),
//				ProjectName:       pulumi.String("default"),
//				SslEnabled:        pulumi.Bool(true),
//				SslMaxConnections: pulumi.Int(5),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = vpn.NewSslVpnServer(ctx, "fooSslVpnServer", &vpn.SslVpnServerArgs{
//				VpnGatewayId: fooGateway.ID(),
//				LocalSubnets: pulumi.StringArray{
//					fooSubnet.CidrBlock,
//				},
//				ClientIpPool:     pulumi.String("172.16.2.0/24"),
//				SslVpnServerName: pulumi.String("acc-test-ssl"),
//				Description:      pulumi.String("acc-test"),
//				Protocol:         pulumi.String("UDP"),
//				Cipher:           pulumi.String("AES-128-CBC"),
//				Auth:             pulumi.String("SHA1"),
//				Compress:         pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// SSL VPN server can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:vpn/sslVpnServer:SslVpnServer default vss-zm55pqtvk17oq32zd****
// ```
type SslVpnServer struct {
	pulumi.CustomResourceState

	// The authentication algorithm of the SSL server.
	// Values:
	// `SHA1` (default)
	// `MD5`
	// `None` (do not use encryption).
	Auth pulumi.StringPtrOutput `pulumi:"auth"`
	// The encryption algorithm of the SSL server.
	// Values:
	// `AES-128-CBC` (default)
	// `AES-192-CBC`
	// `AES-256-CBC`
	// `None` (do not use encryption).
	Cipher pulumi.StringPtrOutput `pulumi:"cipher"`
	// SSL client network segment.
	ClientIpPool pulumi.StringOutput `pulumi:"clientIpPool"`
	// Whether to compress the transmitted data. The default value is false.
	Compress pulumi.BoolPtrOutput `pulumi:"compress"`
	// The description of the ssl server.
	Description pulumi.StringOutput `pulumi:"description"`
	// The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
	LocalSubnets pulumi.StringArrayOutput `pulumi:"localSubnets"`
	// The port of the ssl server. Valid values: 1~65535. Default is 1194. The following ports are not supported: 22, 68, 179, 323, 500, 4500.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The project name of the ssl server.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
	Protocol pulumi.StringPtrOutput `pulumi:"protocol"`
	// The id of the ssl vpn server.
	SslVpnServerId pulumi.StringOutput `pulumi:"sslVpnServerId"`
	// The name of the SSL server.
	SslVpnServerName pulumi.StringOutput `pulumi:"sslVpnServerName"`
	// The vpn gateway id.
	VpnGatewayId pulumi.StringOutput `pulumi:"vpnGatewayId"`
}

// NewSslVpnServer registers a new resource with the given unique name, arguments, and options.
func NewSslVpnServer(ctx *pulumi.Context,
	name string, args *SslVpnServerArgs, opts ...pulumi.ResourceOption) (*SslVpnServer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClientIpPool == nil {
		return nil, errors.New("invalid value for required argument 'ClientIpPool'")
	}
	if args.LocalSubnets == nil {
		return nil, errors.New("invalid value for required argument 'LocalSubnets'")
	}
	if args.VpnGatewayId == nil {
		return nil, errors.New("invalid value for required argument 'VpnGatewayId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SslVpnServer
	err := ctx.RegisterResource("volcengine:vpn/sslVpnServer:SslVpnServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSslVpnServer gets an existing SslVpnServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSslVpnServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SslVpnServerState, opts ...pulumi.ResourceOption) (*SslVpnServer, error) {
	var resource SslVpnServer
	err := ctx.ReadResource("volcengine:vpn/sslVpnServer:SslVpnServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SslVpnServer resources.
type sslVpnServerState struct {
	// The authentication algorithm of the SSL server.
	// Values:
	// `SHA1` (default)
	// `MD5`
	// `None` (do not use encryption).
	Auth *string `pulumi:"auth"`
	// The encryption algorithm of the SSL server.
	// Values:
	// `AES-128-CBC` (default)
	// `AES-192-CBC`
	// `AES-256-CBC`
	// `None` (do not use encryption).
	Cipher *string `pulumi:"cipher"`
	// SSL client network segment.
	ClientIpPool *string `pulumi:"clientIpPool"`
	// Whether to compress the transmitted data. The default value is false.
	Compress *bool `pulumi:"compress"`
	// The description of the ssl server.
	Description *string `pulumi:"description"`
	// The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
	LocalSubnets []string `pulumi:"localSubnets"`
	// The port of the ssl server. Valid values: 1~65535. Default is 1194. The following ports are not supported: 22, 68, 179, 323, 500, 4500.
	Port *int `pulumi:"port"`
	// The project name of the ssl server.
	ProjectName *string `pulumi:"projectName"`
	// The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
	Protocol *string `pulumi:"protocol"`
	// The id of the ssl vpn server.
	SslVpnServerId *string `pulumi:"sslVpnServerId"`
	// The name of the SSL server.
	SslVpnServerName *string `pulumi:"sslVpnServerName"`
	// The vpn gateway id.
	VpnGatewayId *string `pulumi:"vpnGatewayId"`
}

type SslVpnServerState struct {
	// The authentication algorithm of the SSL server.
	// Values:
	// `SHA1` (default)
	// `MD5`
	// `None` (do not use encryption).
	Auth pulumi.StringPtrInput
	// The encryption algorithm of the SSL server.
	// Values:
	// `AES-128-CBC` (default)
	// `AES-192-CBC`
	// `AES-256-CBC`
	// `None` (do not use encryption).
	Cipher pulumi.StringPtrInput
	// SSL client network segment.
	ClientIpPool pulumi.StringPtrInput
	// Whether to compress the transmitted data. The default value is false.
	Compress pulumi.BoolPtrInput
	// The description of the ssl server.
	Description pulumi.StringPtrInput
	// The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
	LocalSubnets pulumi.StringArrayInput
	// The port of the ssl server. Valid values: 1~65535. Default is 1194. The following ports are not supported: 22, 68, 179, 323, 500, 4500.
	Port pulumi.IntPtrInput
	// The project name of the ssl server.
	ProjectName pulumi.StringPtrInput
	// The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
	Protocol pulumi.StringPtrInput
	// The id of the ssl vpn server.
	SslVpnServerId pulumi.StringPtrInput
	// The name of the SSL server.
	SslVpnServerName pulumi.StringPtrInput
	// The vpn gateway id.
	VpnGatewayId pulumi.StringPtrInput
}

func (SslVpnServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*sslVpnServerState)(nil)).Elem()
}

type sslVpnServerArgs struct {
	// The authentication algorithm of the SSL server.
	// Values:
	// `SHA1` (default)
	// `MD5`
	// `None` (do not use encryption).
	Auth *string `pulumi:"auth"`
	// The encryption algorithm of the SSL server.
	// Values:
	// `AES-128-CBC` (default)
	// `AES-192-CBC`
	// `AES-256-CBC`
	// `None` (do not use encryption).
	Cipher *string `pulumi:"cipher"`
	// SSL client network segment.
	ClientIpPool string `pulumi:"clientIpPool"`
	// Whether to compress the transmitted data. The default value is false.
	Compress *bool `pulumi:"compress"`
	// The description of the ssl server.
	Description *string `pulumi:"description"`
	// The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
	LocalSubnets []string `pulumi:"localSubnets"`
	// The port of the ssl server. Valid values: 1~65535. Default is 1194. The following ports are not supported: 22, 68, 179, 323, 500, 4500.
	Port *int `pulumi:"port"`
	// The project name of the ssl server.
	ProjectName *string `pulumi:"projectName"`
	// The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
	Protocol *string `pulumi:"protocol"`
	// The name of the SSL server.
	SslVpnServerName *string `pulumi:"sslVpnServerName"`
	// The vpn gateway id.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
}

// The set of arguments for constructing a SslVpnServer resource.
type SslVpnServerArgs struct {
	// The authentication algorithm of the SSL server.
	// Values:
	// `SHA1` (default)
	// `MD5`
	// `None` (do not use encryption).
	Auth pulumi.StringPtrInput
	// The encryption algorithm of the SSL server.
	// Values:
	// `AES-128-CBC` (default)
	// `AES-192-CBC`
	// `AES-256-CBC`
	// `None` (do not use encryption).
	Cipher pulumi.StringPtrInput
	// SSL client network segment.
	ClientIpPool pulumi.StringInput
	// Whether to compress the transmitted data. The default value is false.
	Compress pulumi.BoolPtrInput
	// The description of the ssl server.
	Description pulumi.StringPtrInput
	// The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
	LocalSubnets pulumi.StringArrayInput
	// The port of the ssl server. Valid values: 1~65535. Default is 1194. The following ports are not supported: 22, 68, 179, 323, 500, 4500.
	Port pulumi.IntPtrInput
	// The project name of the ssl server.
	ProjectName pulumi.StringPtrInput
	// The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
	Protocol pulumi.StringPtrInput
	// The name of the SSL server.
	SslVpnServerName pulumi.StringPtrInput
	// The vpn gateway id.
	VpnGatewayId pulumi.StringInput
}

func (SslVpnServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sslVpnServerArgs)(nil)).Elem()
}

type SslVpnServerInput interface {
	pulumi.Input

	ToSslVpnServerOutput() SslVpnServerOutput
	ToSslVpnServerOutputWithContext(ctx context.Context) SslVpnServerOutput
}

func (*SslVpnServer) ElementType() reflect.Type {
	return reflect.TypeOf((**SslVpnServer)(nil)).Elem()
}

func (i *SslVpnServer) ToSslVpnServerOutput() SslVpnServerOutput {
	return i.ToSslVpnServerOutputWithContext(context.Background())
}

func (i *SslVpnServer) ToSslVpnServerOutputWithContext(ctx context.Context) SslVpnServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslVpnServerOutput)
}

// SslVpnServerArrayInput is an input type that accepts SslVpnServerArray and SslVpnServerArrayOutput values.
// You can construct a concrete instance of `SslVpnServerArrayInput` via:
//
//	SslVpnServerArray{ SslVpnServerArgs{...} }
type SslVpnServerArrayInput interface {
	pulumi.Input

	ToSslVpnServerArrayOutput() SslVpnServerArrayOutput
	ToSslVpnServerArrayOutputWithContext(context.Context) SslVpnServerArrayOutput
}

type SslVpnServerArray []SslVpnServerInput

func (SslVpnServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SslVpnServer)(nil)).Elem()
}

func (i SslVpnServerArray) ToSslVpnServerArrayOutput() SslVpnServerArrayOutput {
	return i.ToSslVpnServerArrayOutputWithContext(context.Background())
}

func (i SslVpnServerArray) ToSslVpnServerArrayOutputWithContext(ctx context.Context) SslVpnServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslVpnServerArrayOutput)
}

// SslVpnServerMapInput is an input type that accepts SslVpnServerMap and SslVpnServerMapOutput values.
// You can construct a concrete instance of `SslVpnServerMapInput` via:
//
//	SslVpnServerMap{ "key": SslVpnServerArgs{...} }
type SslVpnServerMapInput interface {
	pulumi.Input

	ToSslVpnServerMapOutput() SslVpnServerMapOutput
	ToSslVpnServerMapOutputWithContext(context.Context) SslVpnServerMapOutput
}

type SslVpnServerMap map[string]SslVpnServerInput

func (SslVpnServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SslVpnServer)(nil)).Elem()
}

func (i SslVpnServerMap) ToSslVpnServerMapOutput() SslVpnServerMapOutput {
	return i.ToSslVpnServerMapOutputWithContext(context.Background())
}

func (i SslVpnServerMap) ToSslVpnServerMapOutputWithContext(ctx context.Context) SslVpnServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SslVpnServerMapOutput)
}

type SslVpnServerOutput struct{ *pulumi.OutputState }

func (SslVpnServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SslVpnServer)(nil)).Elem()
}

func (o SslVpnServerOutput) ToSslVpnServerOutput() SslVpnServerOutput {
	return o
}

func (o SslVpnServerOutput) ToSslVpnServerOutputWithContext(ctx context.Context) SslVpnServerOutput {
	return o
}

// The authentication algorithm of the SSL server.
// Values:
// `SHA1` (default)
// `MD5`
// `None` (do not use encryption).
func (o SslVpnServerOutput) Auth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringPtrOutput { return v.Auth }).(pulumi.StringPtrOutput)
}

// The encryption algorithm of the SSL server.
// Values:
// `AES-128-CBC` (default)
// `AES-192-CBC`
// `AES-256-CBC`
// `None` (do not use encryption).
func (o SslVpnServerOutput) Cipher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringPtrOutput { return v.Cipher }).(pulumi.StringPtrOutput)
}

// SSL client network segment.
func (o SslVpnServerOutput) ClientIpPool() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringOutput { return v.ClientIpPool }).(pulumi.StringOutput)
}

// Whether to compress the transmitted data. The default value is false.
func (o SslVpnServerOutput) Compress() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.BoolPtrOutput { return v.Compress }).(pulumi.BoolPtrOutput)
}

// The description of the ssl server.
func (o SslVpnServerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
func (o SslVpnServerOutput) LocalSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringArrayOutput { return v.LocalSubnets }).(pulumi.StringArrayOutput)
}

// The port of the ssl server. Valid values: 1~65535. Default is 1194. The following ports are not supported: 22, 68, 179, 323, 500, 4500.
func (o SslVpnServerOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// The project name of the ssl server.
func (o SslVpnServerOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
func (o SslVpnServerOutput) Protocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringPtrOutput { return v.Protocol }).(pulumi.StringPtrOutput)
}

// The id of the ssl vpn server.
func (o SslVpnServerOutput) SslVpnServerId() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringOutput { return v.SslVpnServerId }).(pulumi.StringOutput)
}

// The name of the SSL server.
func (o SslVpnServerOutput) SslVpnServerName() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringOutput { return v.SslVpnServerName }).(pulumi.StringOutput)
}

// The vpn gateway id.
func (o SslVpnServerOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v *SslVpnServer) pulumi.StringOutput { return v.VpnGatewayId }).(pulumi.StringOutput)
}

type SslVpnServerArrayOutput struct{ *pulumi.OutputState }

func (SslVpnServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SslVpnServer)(nil)).Elem()
}

func (o SslVpnServerArrayOutput) ToSslVpnServerArrayOutput() SslVpnServerArrayOutput {
	return o
}

func (o SslVpnServerArrayOutput) ToSslVpnServerArrayOutputWithContext(ctx context.Context) SslVpnServerArrayOutput {
	return o
}

func (o SslVpnServerArrayOutput) Index(i pulumi.IntInput) SslVpnServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SslVpnServer {
		return vs[0].([]*SslVpnServer)[vs[1].(int)]
	}).(SslVpnServerOutput)
}

type SslVpnServerMapOutput struct{ *pulumi.OutputState }

func (SslVpnServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SslVpnServer)(nil)).Elem()
}

func (o SslVpnServerMapOutput) ToSslVpnServerMapOutput() SslVpnServerMapOutput {
	return o
}

func (o SslVpnServerMapOutput) ToSslVpnServerMapOutputWithContext(ctx context.Context) SslVpnServerMapOutput {
	return o
}

func (o SslVpnServerMapOutput) MapIndex(k pulumi.StringInput) SslVpnServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SslVpnServer {
		return vs[0].(map[string]*SslVpnServer)[vs[1].(string)]
	}).(SslVpnServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SslVpnServerInput)(nil)).Elem(), &SslVpnServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslVpnServerArrayInput)(nil)).Elem(), SslVpnServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SslVpnServerMapInput)(nil)).Elem(), SslVpnServerMap{})
	pulumi.RegisterOutputType(SslVpnServerOutput{})
	pulumi.RegisterOutputType(SslVpnServerArrayOutput{})
	pulumi.RegisterOutputType(SslVpnServerMapOutput{})
}
