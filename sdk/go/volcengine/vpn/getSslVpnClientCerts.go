// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of ssl vpn client certs
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/ecs"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
// func main() {
// pulumi.Run(func(ctx *pulumi.Context) error {
// fooZones, err := ecs.GetZones(ctx, nil, nil);
// if err != nil {
// return err
// }
// fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
// VpcName: pulumi.String("acc-test-vpc"),
// CidrBlock: pulumi.String("172.16.0.0/16"),
// })
// if err != nil {
// return err
// }
// fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
// SubnetName: pulumi.String("acc-test-subnet"),
// CidrBlock: pulumi.String("172.16.0.0/24"),
// ZoneId: pulumi.String(fooZones.Zones[0].Id),
// VpcId: fooVpc.ID(),
// })
// if err != nil {
// return err
// }
// fooGateway, err := vpn.NewGateway(ctx, "fooGateway", &vpn.GatewayArgs{
// VpcId: fooVpc.ID(),
// SubnetId: fooSubnet.ID(),
// Bandwidth: pulumi.Int(5),
// VpnGatewayName: pulumi.String("acc-test1"),
// Description: pulumi.String("acc-test1"),
// Period: pulumi.Int(7),
// ProjectName: pulumi.String("default"),
// SslEnabled: pulumi.Bool(true),
// SslMaxConnections: pulumi.Int(5),
// })
// if err != nil {
// return err
// }
// fooSslVpnServer, err := vpn.NewSslVpnServer(ctx, "fooSslVpnServer", &vpn.SslVpnServerArgs{
// VpnGatewayId: fooGateway.ID(),
// LocalSubnets: pulumi.StringArray{
// fooSubnet.CidrBlock,
// },
// ClientIpPool: pulumi.String("172.16.2.0/24"),
// SslVpnServerName: pulumi.String("acc-test-ssl"),
// Description: pulumi.String("acc-test"),
// Protocol: pulumi.String("UDP"),
// Cipher: pulumi.String("AES-128-CBC"),
// Auth: pulumi.String("SHA1"),
// Compress: pulumi.Bool(true),
// })
// if err != nil {
// return err
// }
// var fooSslVpnClientCert []*vpn.SslVpnClientCert
//
//	for index := 0; index < 5; index++ {
//	    key0 := index
//	    val0 := index
//
// __res, err := vpn.NewSslVpnClientCert(ctx, fmt.Sprintf("fooSslVpnClientCert-%v", key0), &vpn.SslVpnClientCertArgs{
// SslVpnServerId: fooSslVpnServer.ID(),
// SslVpnClientCertName: pulumi.String(fmt.Sprintf("acc-test-client-cert-%v", val0)),
// Description: pulumi.String("acc-test"),
// })
// if err != nil {
// return err
// }
// fooSslVpnClientCert = append(fooSslVpnClientCert, __res)
// }
// _ = vpn.GetSslVpnClientCertsOutput(ctx, vpn.GetSslVpnClientCertsOutputArgs{
// Ids: %!v(PANIC=Format method: fatal: A failure has occurred: unlowered splat expression @ #-functions-volcengine:vpn-getSslVpnClientCerts:getSslVpnClientCerts.pp:44,9-34),
// }, nil);
// return nil
// })
// }
// ```
func GetSslVpnClientCerts(ctx *pulumi.Context, args *GetSslVpnClientCertsArgs, opts ...pulumi.InvokeOption) (*GetSslVpnClientCertsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetSslVpnClientCertsResult
	err := ctx.Invoke("volcengine:vpn/getSslVpnClientCerts:getSslVpnClientCerts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSslVpnClientCerts.
type GetSslVpnClientCertsArgs struct {
	// The ids list of ssl vpn client cert.
	Ids []string `pulumi:"ids"`
	// A Name Regex of ssl vpn client cert.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The name of the ssl vpn client cert.
	SslVpnClientCertName *string `pulumi:"sslVpnClientCertName"`
	// The id of the ssl vpn server.
	SslVpnServerId *string `pulumi:"sslVpnServerId"`
}

// A collection of values returned by getSslVpnClientCerts.
type GetSslVpnClientCertsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	NameRegex  *string  `pulumi:"nameRegex"`
	OutputFile *string  `pulumi:"outputFile"`
	// The name of the ssl vpn client cert.
	SslVpnClientCertName *string `pulumi:"sslVpnClientCertName"`
	// The collection of of ssl vpn client certs.
	SslVpnClientCerts []GetSslVpnClientCertsSslVpnClientCert `pulumi:"sslVpnClientCerts"`
	// The id of the ssl vpn server.
	SslVpnServerId *string `pulumi:"sslVpnServerId"`
	// The total count of ssl vpn client cert query.
	TotalCount int `pulumi:"totalCount"`
}

func GetSslVpnClientCertsOutput(ctx *pulumi.Context, args GetSslVpnClientCertsOutputArgs, opts ...pulumi.InvokeOption) GetSslVpnClientCertsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetSslVpnClientCertsResult, error) {
			args := v.(GetSslVpnClientCertsArgs)
			r, err := GetSslVpnClientCerts(ctx, &args, opts...)
			var s GetSslVpnClientCertsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetSslVpnClientCertsResultOutput)
}

// A collection of arguments for invoking getSslVpnClientCerts.
type GetSslVpnClientCertsOutputArgs struct {
	// The ids list of ssl vpn client cert.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A Name Regex of ssl vpn client cert.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The name of the ssl vpn client cert.
	SslVpnClientCertName pulumi.StringPtrInput `pulumi:"sslVpnClientCertName"`
	// The id of the ssl vpn server.
	SslVpnServerId pulumi.StringPtrInput `pulumi:"sslVpnServerId"`
}

func (GetSslVpnClientCertsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSslVpnClientCertsArgs)(nil)).Elem()
}

// A collection of values returned by getSslVpnClientCerts.
type GetSslVpnClientCertsResultOutput struct{ *pulumi.OutputState }

func (GetSslVpnClientCertsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSslVpnClientCertsResult)(nil)).Elem()
}

func (o GetSslVpnClientCertsResultOutput) ToGetSslVpnClientCertsResultOutput() GetSslVpnClientCertsResultOutput {
	return o
}

func (o GetSslVpnClientCertsResultOutput) ToGetSslVpnClientCertsResultOutputWithContext(ctx context.Context) GetSslVpnClientCertsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetSslVpnClientCertsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetSslVpnClientCertsResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetSslVpnClientCertsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetSslVpnClientCertsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The name of the ssl vpn client cert.
func (o GetSslVpnClientCertsResultOutput) SslVpnClientCertName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsResult) *string { return v.SslVpnClientCertName }).(pulumi.StringPtrOutput)
}

// The collection of of ssl vpn client certs.
func (o GetSslVpnClientCertsResultOutput) SslVpnClientCerts() GetSslVpnClientCertsSslVpnClientCertArrayOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsResult) []GetSslVpnClientCertsSslVpnClientCert { return v.SslVpnClientCerts }).(GetSslVpnClientCertsSslVpnClientCertArrayOutput)
}

// The id of the ssl vpn server.
func (o GetSslVpnClientCertsResultOutput) SslVpnServerId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsResult) *string { return v.SslVpnServerId }).(pulumi.StringPtrOutput)
}

// The total count of ssl vpn client cert query.
func (o GetSslVpnClientCertsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetSslVpnClientCertsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetSslVpnClientCertsResultOutput{})
}
