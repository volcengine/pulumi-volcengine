// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

var _ = internal.GetEnvOrDefault

type ConnectionsVpnConnection struct {
	// The account ID of the VPN connection.
	AccountId string `pulumi:"accountId"`
	// The IPsec attach status.
	AttachStatus string `pulumi:"attachStatus"`
	// The IPsec attach type.
	AttachType string `pulumi:"attachType"`
	// The business status of IPsec connection, valid when the attach type is 'TransitRouter'.
	BusinessStatus string `pulumi:"businessStatus"`
	// The connect status of the VPN connection.
	ConnectStatus string `pulumi:"connectStatus"`
	// The create time of VPN connection.
	CreationTime string `pulumi:"creationTime"`
	// An ID of customer gateway.
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// The delete time of resource, valid when the attach type is 'TransitRouter'.
	DeletedTime string `pulumi:"deletedTime"`
	// The description of the VPN connection.
	Description string `pulumi:"description"`
	// The dpd action of the VPN connection.
	DpdAction string `pulumi:"dpdAction"`
	// The ID of the VPN connection.
	Id string `pulumi:"id"`
	// The auth alg of the ike config of the VPN connection.
	IkeConfigAuthAlg string `pulumi:"ikeConfigAuthAlg"`
	// The dk group of the ike config of the VPN connection.
	IkeConfigDhGroup string `pulumi:"ikeConfigDhGroup"`
	// The enc alg of the ike config of the VPN connection.
	IkeConfigEncAlg string `pulumi:"ikeConfigEncAlg"`
	// The lifetime of the ike config of the VPN connection.
	IkeConfigLifetime int `pulumi:"ikeConfigLifetime"`
	// The localId of the ike config of the VPN connection.
	IkeConfigLocalId string `pulumi:"ikeConfigLocalId"`
	// The mode of the ike config of the VPN connection.
	IkeConfigMode string `pulumi:"ikeConfigMode"`
	// The psk of the ike config of the VPN connection.
	IkeConfigPsk string `pulumi:"ikeConfigPsk"`
	// The remote id of the ike config of the VPN connection.
	IkeConfigRemoteId string `pulumi:"ikeConfigRemoteId"`
	// The version of the ike config of the VPN connection.
	IkeConfigVersion string `pulumi:"ikeConfigVersion"`
	// The ip address of transit router, valid when the attach type is 'TransitRouter'.
	IpAddress string `pulumi:"ipAddress"`
	// The auth alg of the ipsec config of the VPN connection.
	IpsecConfigAuthAlg string `pulumi:"ipsecConfigAuthAlg"`
	// The dh group of the ipsec config of the VPN connection.
	IpsecConfigDhGroup string `pulumi:"ipsecConfigDhGroup"`
	// The enc alg of the ipsec config of the VPN connection.
	IpsecConfigEncAlg string `pulumi:"ipsecConfigEncAlg"`
	// The lifetime of the ike config of the VPN connection.
	IpsecConfigLifetime int `pulumi:"ipsecConfigLifetime"`
	// The local subnet of the VPN connection.
	LocalSubnets []string `pulumi:"localSubnets"`
	// Whether to enable the connection log.
	LogEnabled bool `pulumi:"logEnabled"`
	// The nat traversal of the VPN connection.
	NatTraversal bool `pulumi:"natTraversal"`
	// Whether to initiate negotiation mode immediately.
	NegotiateInstantly bool `pulumi:"negotiateInstantly"`
	// The overdue time of resource, valid when the attach type is 'TransitRouter'.
	OverdueTime string `pulumi:"overdueTime"`
	// The remote subnet of the VPN connection.
	RemoteSubnets []string `pulumi:"remoteSubnets"`
	// The status of the VPN connection.
	Status string `pulumi:"status"`
	// The id of transit router, valid when the attach type is 'TransitRouter'.
	TransitRouterId string `pulumi:"transitRouterId"`
	// The update time of VPN connection.
	UpdateTime string `pulumi:"updateTime"`
	// The ID of the VPN connection.
	VpnConnectionId string `pulumi:"vpnConnectionId"`
	// The name of the VPN connection.
	VpnConnectionName string `pulumi:"vpnConnectionName"`
	// An ID of VPN gateway.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
	// The zone id of transit router, valid when the attach type is 'TransitRouter'.
	ZoneId string `pulumi:"zoneId"`
}

// ConnectionsVpnConnectionInput is an input type that accepts ConnectionsVpnConnectionArgs and ConnectionsVpnConnectionOutput values.
// You can construct a concrete instance of `ConnectionsVpnConnectionInput` via:
//
//	ConnectionsVpnConnectionArgs{...}
type ConnectionsVpnConnectionInput interface {
	pulumi.Input

	ToConnectionsVpnConnectionOutput() ConnectionsVpnConnectionOutput
	ToConnectionsVpnConnectionOutputWithContext(context.Context) ConnectionsVpnConnectionOutput
}

type ConnectionsVpnConnectionArgs struct {
	// The account ID of the VPN connection.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The IPsec attach status.
	AttachStatus pulumi.StringInput `pulumi:"attachStatus"`
	// The IPsec attach type.
	AttachType pulumi.StringInput `pulumi:"attachType"`
	// The business status of IPsec connection, valid when the attach type is 'TransitRouter'.
	BusinessStatus pulumi.StringInput `pulumi:"businessStatus"`
	// The connect status of the VPN connection.
	ConnectStatus pulumi.StringInput `pulumi:"connectStatus"`
	// The create time of VPN connection.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// An ID of customer gateway.
	CustomerGatewayId pulumi.StringInput `pulumi:"customerGatewayId"`
	// The delete time of resource, valid when the attach type is 'TransitRouter'.
	DeletedTime pulumi.StringInput `pulumi:"deletedTime"`
	// The description of the VPN connection.
	Description pulumi.StringInput `pulumi:"description"`
	// The dpd action of the VPN connection.
	DpdAction pulumi.StringInput `pulumi:"dpdAction"`
	// The ID of the VPN connection.
	Id pulumi.StringInput `pulumi:"id"`
	// The auth alg of the ike config of the VPN connection.
	IkeConfigAuthAlg pulumi.StringInput `pulumi:"ikeConfigAuthAlg"`
	// The dk group of the ike config of the VPN connection.
	IkeConfigDhGroup pulumi.StringInput `pulumi:"ikeConfigDhGroup"`
	// The enc alg of the ike config of the VPN connection.
	IkeConfigEncAlg pulumi.StringInput `pulumi:"ikeConfigEncAlg"`
	// The lifetime of the ike config of the VPN connection.
	IkeConfigLifetime pulumi.IntInput `pulumi:"ikeConfigLifetime"`
	// The localId of the ike config of the VPN connection.
	IkeConfigLocalId pulumi.StringInput `pulumi:"ikeConfigLocalId"`
	// The mode of the ike config of the VPN connection.
	IkeConfigMode pulumi.StringInput `pulumi:"ikeConfigMode"`
	// The psk of the ike config of the VPN connection.
	IkeConfigPsk pulumi.StringInput `pulumi:"ikeConfigPsk"`
	// The remote id of the ike config of the VPN connection.
	IkeConfigRemoteId pulumi.StringInput `pulumi:"ikeConfigRemoteId"`
	// The version of the ike config of the VPN connection.
	IkeConfigVersion pulumi.StringInput `pulumi:"ikeConfigVersion"`
	// The ip address of transit router, valid when the attach type is 'TransitRouter'.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The auth alg of the ipsec config of the VPN connection.
	IpsecConfigAuthAlg pulumi.StringInput `pulumi:"ipsecConfigAuthAlg"`
	// The dh group of the ipsec config of the VPN connection.
	IpsecConfigDhGroup pulumi.StringInput `pulumi:"ipsecConfigDhGroup"`
	// The enc alg of the ipsec config of the VPN connection.
	IpsecConfigEncAlg pulumi.StringInput `pulumi:"ipsecConfigEncAlg"`
	// The lifetime of the ike config of the VPN connection.
	IpsecConfigLifetime pulumi.IntInput `pulumi:"ipsecConfigLifetime"`
	// The local subnet of the VPN connection.
	LocalSubnets pulumi.StringArrayInput `pulumi:"localSubnets"`
	// Whether to enable the connection log.
	LogEnabled pulumi.BoolInput `pulumi:"logEnabled"`
	// The nat traversal of the VPN connection.
	NatTraversal pulumi.BoolInput `pulumi:"natTraversal"`
	// Whether to initiate negotiation mode immediately.
	NegotiateInstantly pulumi.BoolInput `pulumi:"negotiateInstantly"`
	// The overdue time of resource, valid when the attach type is 'TransitRouter'.
	OverdueTime pulumi.StringInput `pulumi:"overdueTime"`
	// The remote subnet of the VPN connection.
	RemoteSubnets pulumi.StringArrayInput `pulumi:"remoteSubnets"`
	// The status of the VPN connection.
	Status pulumi.StringInput `pulumi:"status"`
	// The id of transit router, valid when the attach type is 'TransitRouter'.
	TransitRouterId pulumi.StringInput `pulumi:"transitRouterId"`
	// The update time of VPN connection.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// The ID of the VPN connection.
	VpnConnectionId pulumi.StringInput `pulumi:"vpnConnectionId"`
	// The name of the VPN connection.
	VpnConnectionName pulumi.StringInput `pulumi:"vpnConnectionName"`
	// An ID of VPN gateway.
	VpnGatewayId pulumi.StringInput `pulumi:"vpnGatewayId"`
	// The zone id of transit router, valid when the attach type is 'TransitRouter'.
	ZoneId pulumi.StringInput `pulumi:"zoneId"`
}

func (ConnectionsVpnConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionsVpnConnection)(nil)).Elem()
}

func (i ConnectionsVpnConnectionArgs) ToConnectionsVpnConnectionOutput() ConnectionsVpnConnectionOutput {
	return i.ToConnectionsVpnConnectionOutputWithContext(context.Background())
}

func (i ConnectionsVpnConnectionArgs) ToConnectionsVpnConnectionOutputWithContext(ctx context.Context) ConnectionsVpnConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionsVpnConnectionOutput)
}

// ConnectionsVpnConnectionArrayInput is an input type that accepts ConnectionsVpnConnectionArray and ConnectionsVpnConnectionArrayOutput values.
// You can construct a concrete instance of `ConnectionsVpnConnectionArrayInput` via:
//
//	ConnectionsVpnConnectionArray{ ConnectionsVpnConnectionArgs{...} }
type ConnectionsVpnConnectionArrayInput interface {
	pulumi.Input

	ToConnectionsVpnConnectionArrayOutput() ConnectionsVpnConnectionArrayOutput
	ToConnectionsVpnConnectionArrayOutputWithContext(context.Context) ConnectionsVpnConnectionArrayOutput
}

type ConnectionsVpnConnectionArray []ConnectionsVpnConnectionInput

func (ConnectionsVpnConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionsVpnConnection)(nil)).Elem()
}

func (i ConnectionsVpnConnectionArray) ToConnectionsVpnConnectionArrayOutput() ConnectionsVpnConnectionArrayOutput {
	return i.ToConnectionsVpnConnectionArrayOutputWithContext(context.Background())
}

func (i ConnectionsVpnConnectionArray) ToConnectionsVpnConnectionArrayOutputWithContext(ctx context.Context) ConnectionsVpnConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConnectionsVpnConnectionArrayOutput)
}

type ConnectionsVpnConnectionOutput struct{ *pulumi.OutputState }

func (ConnectionsVpnConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConnectionsVpnConnection)(nil)).Elem()
}

func (o ConnectionsVpnConnectionOutput) ToConnectionsVpnConnectionOutput() ConnectionsVpnConnectionOutput {
	return o
}

func (o ConnectionsVpnConnectionOutput) ToConnectionsVpnConnectionOutputWithContext(ctx context.Context) ConnectionsVpnConnectionOutput {
	return o
}

// The account ID of the VPN connection.
func (o ConnectionsVpnConnectionOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.AccountId }).(pulumi.StringOutput)
}

// The IPsec attach status.
func (o ConnectionsVpnConnectionOutput) AttachStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.AttachStatus }).(pulumi.StringOutput)
}

// The IPsec attach type.
func (o ConnectionsVpnConnectionOutput) AttachType() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.AttachType }).(pulumi.StringOutput)
}

// The business status of IPsec connection, valid when the attach type is 'TransitRouter'.
func (o ConnectionsVpnConnectionOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The connect status of the VPN connection.
func (o ConnectionsVpnConnectionOutput) ConnectStatus() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.ConnectStatus }).(pulumi.StringOutput)
}

// The create time of VPN connection.
func (o ConnectionsVpnConnectionOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.CreationTime }).(pulumi.StringOutput)
}

// An ID of customer gateway.
func (o ConnectionsVpnConnectionOutput) CustomerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.CustomerGatewayId }).(pulumi.StringOutput)
}

// The delete time of resource, valid when the attach type is 'TransitRouter'.
func (o ConnectionsVpnConnectionOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.DeletedTime }).(pulumi.StringOutput)
}

// The description of the VPN connection.
func (o ConnectionsVpnConnectionOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.Description }).(pulumi.StringOutput)
}

// The dpd action of the VPN connection.
func (o ConnectionsVpnConnectionOutput) DpdAction() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.DpdAction }).(pulumi.StringOutput)
}

// The ID of the VPN connection.
func (o ConnectionsVpnConnectionOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.Id }).(pulumi.StringOutput)
}

// The auth alg of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IkeConfigAuthAlg() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IkeConfigAuthAlg }).(pulumi.StringOutput)
}

// The dk group of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IkeConfigDhGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IkeConfigDhGroup }).(pulumi.StringOutput)
}

// The enc alg of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IkeConfigEncAlg() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IkeConfigEncAlg }).(pulumi.StringOutput)
}

// The lifetime of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IkeConfigLifetime() pulumi.IntOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) int { return v.IkeConfigLifetime }).(pulumi.IntOutput)
}

// The localId of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IkeConfigLocalId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IkeConfigLocalId }).(pulumi.StringOutput)
}

// The mode of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IkeConfigMode() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IkeConfigMode }).(pulumi.StringOutput)
}

// The psk of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IkeConfigPsk() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IkeConfigPsk }).(pulumi.StringOutput)
}

// The remote id of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IkeConfigRemoteId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IkeConfigRemoteId }).(pulumi.StringOutput)
}

// The version of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IkeConfigVersion() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IkeConfigVersion }).(pulumi.StringOutput)
}

// The ip address of transit router, valid when the attach type is 'TransitRouter'.
func (o ConnectionsVpnConnectionOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The auth alg of the ipsec config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IpsecConfigAuthAlg() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IpsecConfigAuthAlg }).(pulumi.StringOutput)
}

// The dh group of the ipsec config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IpsecConfigDhGroup() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IpsecConfigDhGroup }).(pulumi.StringOutput)
}

// The enc alg of the ipsec config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IpsecConfigEncAlg() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.IpsecConfigEncAlg }).(pulumi.StringOutput)
}

// The lifetime of the ike config of the VPN connection.
func (o ConnectionsVpnConnectionOutput) IpsecConfigLifetime() pulumi.IntOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) int { return v.IpsecConfigLifetime }).(pulumi.IntOutput)
}

// The local subnet of the VPN connection.
func (o ConnectionsVpnConnectionOutput) LocalSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) []string { return v.LocalSubnets }).(pulumi.StringArrayOutput)
}

// Whether to enable the connection log.
func (o ConnectionsVpnConnectionOutput) LogEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) bool { return v.LogEnabled }).(pulumi.BoolOutput)
}

// The nat traversal of the VPN connection.
func (o ConnectionsVpnConnectionOutput) NatTraversal() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) bool { return v.NatTraversal }).(pulumi.BoolOutput)
}

// Whether to initiate negotiation mode immediately.
func (o ConnectionsVpnConnectionOutput) NegotiateInstantly() pulumi.BoolOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) bool { return v.NegotiateInstantly }).(pulumi.BoolOutput)
}

// The overdue time of resource, valid when the attach type is 'TransitRouter'.
func (o ConnectionsVpnConnectionOutput) OverdueTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.OverdueTime }).(pulumi.StringOutput)
}

// The remote subnet of the VPN connection.
func (o ConnectionsVpnConnectionOutput) RemoteSubnets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) []string { return v.RemoteSubnets }).(pulumi.StringArrayOutput)
}

// The status of the VPN connection.
func (o ConnectionsVpnConnectionOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.Status }).(pulumi.StringOutput)
}

// The id of transit router, valid when the attach type is 'TransitRouter'.
func (o ConnectionsVpnConnectionOutput) TransitRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.TransitRouterId }).(pulumi.StringOutput)
}

// The update time of VPN connection.
func (o ConnectionsVpnConnectionOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// The ID of the VPN connection.
func (o ConnectionsVpnConnectionOutput) VpnConnectionId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.VpnConnectionId }).(pulumi.StringOutput)
}

// The name of the VPN connection.
func (o ConnectionsVpnConnectionOutput) VpnConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.VpnConnectionName }).(pulumi.StringOutput)
}

// An ID of VPN gateway.
func (o ConnectionsVpnConnectionOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.VpnGatewayId }).(pulumi.StringOutput)
}

// The zone id of transit router, valid when the attach type is 'TransitRouter'.
func (o ConnectionsVpnConnectionOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v ConnectionsVpnConnection) string { return v.ZoneId }).(pulumi.StringOutput)
}

type ConnectionsVpnConnectionArrayOutput struct{ *pulumi.OutputState }

func (ConnectionsVpnConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ConnectionsVpnConnection)(nil)).Elem()
}

func (o ConnectionsVpnConnectionArrayOutput) ToConnectionsVpnConnectionArrayOutput() ConnectionsVpnConnectionArrayOutput {
	return o
}

func (o ConnectionsVpnConnectionArrayOutput) ToConnectionsVpnConnectionArrayOutputWithContext(ctx context.Context) ConnectionsVpnConnectionArrayOutput {
	return o
}

func (o ConnectionsVpnConnectionArrayOutput) Index(i pulumi.IntInput) ConnectionsVpnConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ConnectionsVpnConnection {
		return vs[0].([]ConnectionsVpnConnection)[vs[1].(int)]
	}).(ConnectionsVpnConnectionOutput)
}

type CustomerGatewaysCustomerGateway struct {
	// The account ID of the customer gateway.
	AccountId string `pulumi:"accountId"`
	// The connection count of the customer gateway.
	ConnectionCount int `pulumi:"connectionCount"`
	// The create time of customer gateway.
	CreationTime string `pulumi:"creationTime"`
	// The ID of the customer gateway.
	CustomerGatewayId string `pulumi:"customerGatewayId"`
	// The name of the customer gateway.
	CustomerGatewayName string `pulumi:"customerGatewayName"`
	// The description of the customer gateway.
	Description string `pulumi:"description"`
	// The ID of the customer gateway.
	Id string `pulumi:"id"`
	// A IP address of the customer gateway.
	IpAddress string `pulumi:"ipAddress"`
	// The status of the customer gateway.
	Status string `pulumi:"status"`
	// The update time of customer gateway.
	UpdateTime string `pulumi:"updateTime"`
}

// CustomerGatewaysCustomerGatewayInput is an input type that accepts CustomerGatewaysCustomerGatewayArgs and CustomerGatewaysCustomerGatewayOutput values.
// You can construct a concrete instance of `CustomerGatewaysCustomerGatewayInput` via:
//
//	CustomerGatewaysCustomerGatewayArgs{...}
type CustomerGatewaysCustomerGatewayInput interface {
	pulumi.Input

	ToCustomerGatewaysCustomerGatewayOutput() CustomerGatewaysCustomerGatewayOutput
	ToCustomerGatewaysCustomerGatewayOutputWithContext(context.Context) CustomerGatewaysCustomerGatewayOutput
}

type CustomerGatewaysCustomerGatewayArgs struct {
	// The account ID of the customer gateway.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The connection count of the customer gateway.
	ConnectionCount pulumi.IntInput `pulumi:"connectionCount"`
	// The create time of customer gateway.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// The ID of the customer gateway.
	CustomerGatewayId pulumi.StringInput `pulumi:"customerGatewayId"`
	// The name of the customer gateway.
	CustomerGatewayName pulumi.StringInput `pulumi:"customerGatewayName"`
	// The description of the customer gateway.
	Description pulumi.StringInput `pulumi:"description"`
	// The ID of the customer gateway.
	Id pulumi.StringInput `pulumi:"id"`
	// A IP address of the customer gateway.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The status of the customer gateway.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of customer gateway.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
}

func (CustomerGatewaysCustomerGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerGatewaysCustomerGateway)(nil)).Elem()
}

func (i CustomerGatewaysCustomerGatewayArgs) ToCustomerGatewaysCustomerGatewayOutput() CustomerGatewaysCustomerGatewayOutput {
	return i.ToCustomerGatewaysCustomerGatewayOutputWithContext(context.Background())
}

func (i CustomerGatewaysCustomerGatewayArgs) ToCustomerGatewaysCustomerGatewayOutputWithContext(ctx context.Context) CustomerGatewaysCustomerGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerGatewaysCustomerGatewayOutput)
}

// CustomerGatewaysCustomerGatewayArrayInput is an input type that accepts CustomerGatewaysCustomerGatewayArray and CustomerGatewaysCustomerGatewayArrayOutput values.
// You can construct a concrete instance of `CustomerGatewaysCustomerGatewayArrayInput` via:
//
//	CustomerGatewaysCustomerGatewayArray{ CustomerGatewaysCustomerGatewayArgs{...} }
type CustomerGatewaysCustomerGatewayArrayInput interface {
	pulumi.Input

	ToCustomerGatewaysCustomerGatewayArrayOutput() CustomerGatewaysCustomerGatewayArrayOutput
	ToCustomerGatewaysCustomerGatewayArrayOutputWithContext(context.Context) CustomerGatewaysCustomerGatewayArrayOutput
}

type CustomerGatewaysCustomerGatewayArray []CustomerGatewaysCustomerGatewayInput

func (CustomerGatewaysCustomerGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomerGatewaysCustomerGateway)(nil)).Elem()
}

func (i CustomerGatewaysCustomerGatewayArray) ToCustomerGatewaysCustomerGatewayArrayOutput() CustomerGatewaysCustomerGatewayArrayOutput {
	return i.ToCustomerGatewaysCustomerGatewayArrayOutputWithContext(context.Background())
}

func (i CustomerGatewaysCustomerGatewayArray) ToCustomerGatewaysCustomerGatewayArrayOutputWithContext(ctx context.Context) CustomerGatewaysCustomerGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CustomerGatewaysCustomerGatewayArrayOutput)
}

type CustomerGatewaysCustomerGatewayOutput struct{ *pulumi.OutputState }

func (CustomerGatewaysCustomerGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CustomerGatewaysCustomerGateway)(nil)).Elem()
}

func (o CustomerGatewaysCustomerGatewayOutput) ToCustomerGatewaysCustomerGatewayOutput() CustomerGatewaysCustomerGatewayOutput {
	return o
}

func (o CustomerGatewaysCustomerGatewayOutput) ToCustomerGatewaysCustomerGatewayOutputWithContext(ctx context.Context) CustomerGatewaysCustomerGatewayOutput {
	return o
}

// The account ID of the customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) string { return v.AccountId }).(pulumi.StringOutput)
}

// The connection count of the customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) ConnectionCount() pulumi.IntOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) int { return v.ConnectionCount }).(pulumi.IntOutput)
}

// The create time of customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The ID of the customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) CustomerGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) string { return v.CustomerGatewayId }).(pulumi.StringOutput)
}

// The name of the customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) CustomerGatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) string { return v.CustomerGatewayName }).(pulumi.StringOutput)
}

// The description of the customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) string { return v.Description }).(pulumi.StringOutput)
}

// The ID of the customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) string { return v.Id }).(pulumi.StringOutput)
}

// A IP address of the customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The status of the customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of customer gateway.
func (o CustomerGatewaysCustomerGatewayOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v CustomerGatewaysCustomerGateway) string { return v.UpdateTime }).(pulumi.StringOutput)
}

type CustomerGatewaysCustomerGatewayArrayOutput struct{ *pulumi.OutputState }

func (CustomerGatewaysCustomerGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CustomerGatewaysCustomerGateway)(nil)).Elem()
}

func (o CustomerGatewaysCustomerGatewayArrayOutput) ToCustomerGatewaysCustomerGatewayArrayOutput() CustomerGatewaysCustomerGatewayArrayOutput {
	return o
}

func (o CustomerGatewaysCustomerGatewayArrayOutput) ToCustomerGatewaysCustomerGatewayArrayOutputWithContext(ctx context.Context) CustomerGatewaysCustomerGatewayArrayOutput {
	return o
}

func (o CustomerGatewaysCustomerGatewayArrayOutput) Index(i pulumi.IntInput) CustomerGatewaysCustomerGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CustomerGatewaysCustomerGateway {
		return vs[0].([]CustomerGatewaysCustomerGateway)[vs[1].(int)]
	}).(CustomerGatewaysCustomerGatewayOutput)
}

type GatewayRoutesVpnGatewayRoute struct {
	// The create time of VPN gateway route.
	CreationTime string `pulumi:"creationTime"`
	// A destination cidr block.
	DestinationCidrBlock string `pulumi:"destinationCidrBlock"`
	// The ID of the VPN gateway route.
	Id string `pulumi:"id"`
	// An ID of next hop.
	NextHopId string `pulumi:"nextHopId"`
	// The status of the VPN gateway route.
	Status string `pulumi:"status"`
	// The update time of VPN gateway route.
	UpdateTime string `pulumi:"updateTime"`
	// An ID of VPN gateway.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
	// The ID of the VPN gateway route.
	VpnGatewayRouteId string `pulumi:"vpnGatewayRouteId"`
}

// GatewayRoutesVpnGatewayRouteInput is an input type that accepts GatewayRoutesVpnGatewayRouteArgs and GatewayRoutesVpnGatewayRouteOutput values.
// You can construct a concrete instance of `GatewayRoutesVpnGatewayRouteInput` via:
//
//	GatewayRoutesVpnGatewayRouteArgs{...}
type GatewayRoutesVpnGatewayRouteInput interface {
	pulumi.Input

	ToGatewayRoutesVpnGatewayRouteOutput() GatewayRoutesVpnGatewayRouteOutput
	ToGatewayRoutesVpnGatewayRouteOutputWithContext(context.Context) GatewayRoutesVpnGatewayRouteOutput
}

type GatewayRoutesVpnGatewayRouteArgs struct {
	// The create time of VPN gateway route.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// A destination cidr block.
	DestinationCidrBlock pulumi.StringInput `pulumi:"destinationCidrBlock"`
	// The ID of the VPN gateway route.
	Id pulumi.StringInput `pulumi:"id"`
	// An ID of next hop.
	NextHopId pulumi.StringInput `pulumi:"nextHopId"`
	// The status of the VPN gateway route.
	Status pulumi.StringInput `pulumi:"status"`
	// The update time of VPN gateway route.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// An ID of VPN gateway.
	VpnGatewayId pulumi.StringInput `pulumi:"vpnGatewayId"`
	// The ID of the VPN gateway route.
	VpnGatewayRouteId pulumi.StringInput `pulumi:"vpnGatewayRouteId"`
}

func (GatewayRoutesVpnGatewayRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRoutesVpnGatewayRoute)(nil)).Elem()
}

func (i GatewayRoutesVpnGatewayRouteArgs) ToGatewayRoutesVpnGatewayRouteOutput() GatewayRoutesVpnGatewayRouteOutput {
	return i.ToGatewayRoutesVpnGatewayRouteOutputWithContext(context.Background())
}

func (i GatewayRoutesVpnGatewayRouteArgs) ToGatewayRoutesVpnGatewayRouteOutputWithContext(ctx context.Context) GatewayRoutesVpnGatewayRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRoutesVpnGatewayRouteOutput)
}

// GatewayRoutesVpnGatewayRouteArrayInput is an input type that accepts GatewayRoutesVpnGatewayRouteArray and GatewayRoutesVpnGatewayRouteArrayOutput values.
// You can construct a concrete instance of `GatewayRoutesVpnGatewayRouteArrayInput` via:
//
//	GatewayRoutesVpnGatewayRouteArray{ GatewayRoutesVpnGatewayRouteArgs{...} }
type GatewayRoutesVpnGatewayRouteArrayInput interface {
	pulumi.Input

	ToGatewayRoutesVpnGatewayRouteArrayOutput() GatewayRoutesVpnGatewayRouteArrayOutput
	ToGatewayRoutesVpnGatewayRouteArrayOutputWithContext(context.Context) GatewayRoutesVpnGatewayRouteArrayOutput
}

type GatewayRoutesVpnGatewayRouteArray []GatewayRoutesVpnGatewayRouteInput

func (GatewayRoutesVpnGatewayRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewayRoutesVpnGatewayRoute)(nil)).Elem()
}

func (i GatewayRoutesVpnGatewayRouteArray) ToGatewayRoutesVpnGatewayRouteArrayOutput() GatewayRoutesVpnGatewayRouteArrayOutput {
	return i.ToGatewayRoutesVpnGatewayRouteArrayOutputWithContext(context.Background())
}

func (i GatewayRoutesVpnGatewayRouteArray) ToGatewayRoutesVpnGatewayRouteArrayOutputWithContext(ctx context.Context) GatewayRoutesVpnGatewayRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayRoutesVpnGatewayRouteArrayOutput)
}

type GatewayRoutesVpnGatewayRouteOutput struct{ *pulumi.OutputState }

func (GatewayRoutesVpnGatewayRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayRoutesVpnGatewayRoute)(nil)).Elem()
}

func (o GatewayRoutesVpnGatewayRouteOutput) ToGatewayRoutesVpnGatewayRouteOutput() GatewayRoutesVpnGatewayRouteOutput {
	return o
}

func (o GatewayRoutesVpnGatewayRouteOutput) ToGatewayRoutesVpnGatewayRouteOutputWithContext(ctx context.Context) GatewayRoutesVpnGatewayRouteOutput {
	return o
}

// The create time of VPN gateway route.
func (o GatewayRoutesVpnGatewayRouteOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayRoutesVpnGatewayRoute) string { return v.CreationTime }).(pulumi.StringOutput)
}

// A destination cidr block.
func (o GatewayRoutesVpnGatewayRouteOutput) DestinationCidrBlock() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayRoutesVpnGatewayRoute) string { return v.DestinationCidrBlock }).(pulumi.StringOutput)
}

// The ID of the VPN gateway route.
func (o GatewayRoutesVpnGatewayRouteOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayRoutesVpnGatewayRoute) string { return v.Id }).(pulumi.StringOutput)
}

// An ID of next hop.
func (o GatewayRoutesVpnGatewayRouteOutput) NextHopId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayRoutesVpnGatewayRoute) string { return v.NextHopId }).(pulumi.StringOutput)
}

// The status of the VPN gateway route.
func (o GatewayRoutesVpnGatewayRouteOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayRoutesVpnGatewayRoute) string { return v.Status }).(pulumi.StringOutput)
}

// The update time of VPN gateway route.
func (o GatewayRoutesVpnGatewayRouteOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayRoutesVpnGatewayRoute) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// An ID of VPN gateway.
func (o GatewayRoutesVpnGatewayRouteOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayRoutesVpnGatewayRoute) string { return v.VpnGatewayId }).(pulumi.StringOutput)
}

// The ID of the VPN gateway route.
func (o GatewayRoutesVpnGatewayRouteOutput) VpnGatewayRouteId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayRoutesVpnGatewayRoute) string { return v.VpnGatewayRouteId }).(pulumi.StringOutput)
}

type GatewayRoutesVpnGatewayRouteArrayOutput struct{ *pulumi.OutputState }

func (GatewayRoutesVpnGatewayRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewayRoutesVpnGatewayRoute)(nil)).Elem()
}

func (o GatewayRoutesVpnGatewayRouteArrayOutput) ToGatewayRoutesVpnGatewayRouteArrayOutput() GatewayRoutesVpnGatewayRouteArrayOutput {
	return o
}

func (o GatewayRoutesVpnGatewayRouteArrayOutput) ToGatewayRoutesVpnGatewayRouteArrayOutputWithContext(ctx context.Context) GatewayRoutesVpnGatewayRouteArrayOutput {
	return o
}

func (o GatewayRoutesVpnGatewayRouteArrayOutput) Index(i pulumi.IntInput) GatewayRoutesVpnGatewayRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewayRoutesVpnGatewayRoute {
		return vs[0].([]GatewayRoutesVpnGatewayRoute)[vs[1].(int)]
	}).(GatewayRoutesVpnGatewayRouteOutput)
}

type GatewayTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GatewayTagInput is an input type that accepts GatewayTagArgs and GatewayTagOutput values.
// You can construct a concrete instance of `GatewayTagInput` via:
//
//	GatewayTagArgs{...}
type GatewayTagInput interface {
	pulumi.Input

	ToGatewayTagOutput() GatewayTagOutput
	ToGatewayTagOutputWithContext(context.Context) GatewayTagOutput
}

type GatewayTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GatewayTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayTag)(nil)).Elem()
}

func (i GatewayTagArgs) ToGatewayTagOutput() GatewayTagOutput {
	return i.ToGatewayTagOutputWithContext(context.Background())
}

func (i GatewayTagArgs) ToGatewayTagOutputWithContext(ctx context.Context) GatewayTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayTagOutput)
}

// GatewayTagArrayInput is an input type that accepts GatewayTagArray and GatewayTagArrayOutput values.
// You can construct a concrete instance of `GatewayTagArrayInput` via:
//
//	GatewayTagArray{ GatewayTagArgs{...} }
type GatewayTagArrayInput interface {
	pulumi.Input

	ToGatewayTagArrayOutput() GatewayTagArrayOutput
	ToGatewayTagArrayOutputWithContext(context.Context) GatewayTagArrayOutput
}

type GatewayTagArray []GatewayTagInput

func (GatewayTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewayTag)(nil)).Elem()
}

func (i GatewayTagArray) ToGatewayTagArrayOutput() GatewayTagArrayOutput {
	return i.ToGatewayTagArrayOutputWithContext(context.Background())
}

func (i GatewayTagArray) ToGatewayTagArrayOutputWithContext(ctx context.Context) GatewayTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewayTagArrayOutput)
}

type GatewayTagOutput struct{ *pulumi.OutputState }

func (GatewayTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewayTag)(nil)).Elem()
}

func (o GatewayTagOutput) ToGatewayTagOutput() GatewayTagOutput {
	return o
}

func (o GatewayTagOutput) ToGatewayTagOutputWithContext(ctx context.Context) GatewayTagOutput {
	return o
}

// The Key of Tags.
func (o GatewayTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GatewayTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GatewayTag) string { return v.Value }).(pulumi.StringOutput)
}

type GatewayTagArrayOutput struct{ *pulumi.OutputState }

func (GatewayTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewayTag)(nil)).Elem()
}

func (o GatewayTagArrayOutput) ToGatewayTagArrayOutput() GatewayTagArrayOutput {
	return o
}

func (o GatewayTagArrayOutput) ToGatewayTagArrayOutputWithContext(ctx context.Context) GatewayTagArrayOutput {
	return o
}

func (o GatewayTagArrayOutput) Index(i pulumi.IntInput) GatewayTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewayTag {
		return vs[0].([]GatewayTag)[vs[1].(int)]
	}).(GatewayTagOutput)
}

type GatewaysTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GatewaysTagInput is an input type that accepts GatewaysTagArgs and GatewaysTagOutput values.
// You can construct a concrete instance of `GatewaysTagInput` via:
//
//	GatewaysTagArgs{...}
type GatewaysTagInput interface {
	pulumi.Input

	ToGatewaysTagOutput() GatewaysTagOutput
	ToGatewaysTagOutputWithContext(context.Context) GatewaysTagOutput
}

type GatewaysTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GatewaysTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysTag)(nil)).Elem()
}

func (i GatewaysTagArgs) ToGatewaysTagOutput() GatewaysTagOutput {
	return i.ToGatewaysTagOutputWithContext(context.Background())
}

func (i GatewaysTagArgs) ToGatewaysTagOutputWithContext(ctx context.Context) GatewaysTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysTagOutput)
}

// GatewaysTagArrayInput is an input type that accepts GatewaysTagArray and GatewaysTagArrayOutput values.
// You can construct a concrete instance of `GatewaysTagArrayInput` via:
//
//	GatewaysTagArray{ GatewaysTagArgs{...} }
type GatewaysTagArrayInput interface {
	pulumi.Input

	ToGatewaysTagArrayOutput() GatewaysTagArrayOutput
	ToGatewaysTagArrayOutputWithContext(context.Context) GatewaysTagArrayOutput
}

type GatewaysTagArray []GatewaysTagInput

func (GatewaysTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysTag)(nil)).Elem()
}

func (i GatewaysTagArray) ToGatewaysTagArrayOutput() GatewaysTagArrayOutput {
	return i.ToGatewaysTagArrayOutputWithContext(context.Background())
}

func (i GatewaysTagArray) ToGatewaysTagArrayOutputWithContext(ctx context.Context) GatewaysTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysTagArrayOutput)
}

type GatewaysTagOutput struct{ *pulumi.OutputState }

func (GatewaysTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysTag)(nil)).Elem()
}

func (o GatewaysTagOutput) ToGatewaysTagOutput() GatewaysTagOutput {
	return o
}

func (o GatewaysTagOutput) ToGatewaysTagOutputWithContext(ctx context.Context) GatewaysTagOutput {
	return o
}

// The Key of Tags.
func (o GatewaysTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GatewaysTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysTag) string { return v.Value }).(pulumi.StringOutput)
}

type GatewaysTagArrayOutput struct{ *pulumi.OutputState }

func (GatewaysTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysTag)(nil)).Elem()
}

func (o GatewaysTagArrayOutput) ToGatewaysTagArrayOutput() GatewaysTagArrayOutput {
	return o
}

func (o GatewaysTagArrayOutput) ToGatewaysTagArrayOutputWithContext(ctx context.Context) GatewaysTagArrayOutput {
	return o
}

func (o GatewaysTagArrayOutput) Index(i pulumi.IntInput) GatewaysTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaysTag {
		return vs[0].([]GatewaysTag)[vs[1].(int)]
	}).(GatewaysTagOutput)
}

type GatewaysVpnGateway struct {
	// The account ID of the VPN gateway.
	AccountId string `pulumi:"accountId"`
	// The bandwidth of the VPN gateway.
	Bandwidth int `pulumi:"bandwidth"`
	// The BillingType of the VPN gateway.
	BillingType string `pulumi:"billingType"`
	// The business status of the VPN gateway.
	BusinessStatus string `pulumi:"businessStatus"`
	// The connection count of the VPN gateway.
	ConnectionCount int `pulumi:"connectionCount"`
	// The create time of VPN gateway.
	CreationTime string `pulumi:"creationTime"`
	// The deleted time of the VPN gateway.
	DeletedTime string `pulumi:"deletedTime"`
	// The description of the VPN gateway.
	Description string `pulumi:"description"`
	// The expired time of the VPN gateway.
	ExpiredTime string `pulumi:"expiredTime"`
	// The ID of the VPN gateway.
	Id string `pulumi:"id"`
	// A IP address of the VPN gateway.
	IpAddress string `pulumi:"ipAddress"`
	// The lock reason of the VPN gateway.
	LockReason string `pulumi:"lockReason"`
	// The route count of the VPN gateway.
	RouteCount int `pulumi:"routeCount"`
	// The status of the VPN gateway.
	Status string `pulumi:"status"`
	// A subnet ID of the VPN gateway.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []GatewaysVpnGatewayTag `pulumi:"tags"`
	// The update time of VPN gateway.
	UpdateTime string `pulumi:"updateTime"`
	// A VPC ID of the VPN gateway.
	VpcId string `pulumi:"vpcId"`
	// The ID of the VPN gateway.
	VpnGatewayId string `pulumi:"vpnGatewayId"`
	// The name of the VPN gateway.
	VpnGatewayName string `pulumi:"vpnGatewayName"`
}

// GatewaysVpnGatewayInput is an input type that accepts GatewaysVpnGatewayArgs and GatewaysVpnGatewayOutput values.
// You can construct a concrete instance of `GatewaysVpnGatewayInput` via:
//
//	GatewaysVpnGatewayArgs{...}
type GatewaysVpnGatewayInput interface {
	pulumi.Input

	ToGatewaysVpnGatewayOutput() GatewaysVpnGatewayOutput
	ToGatewaysVpnGatewayOutputWithContext(context.Context) GatewaysVpnGatewayOutput
}

type GatewaysVpnGatewayArgs struct {
	// The account ID of the VPN gateway.
	AccountId pulumi.StringInput `pulumi:"accountId"`
	// The bandwidth of the VPN gateway.
	Bandwidth pulumi.IntInput `pulumi:"bandwidth"`
	// The BillingType of the VPN gateway.
	BillingType pulumi.StringInput `pulumi:"billingType"`
	// The business status of the VPN gateway.
	BusinessStatus pulumi.StringInput `pulumi:"businessStatus"`
	// The connection count of the VPN gateway.
	ConnectionCount pulumi.IntInput `pulumi:"connectionCount"`
	// The create time of VPN gateway.
	CreationTime pulumi.StringInput `pulumi:"creationTime"`
	// The deleted time of the VPN gateway.
	DeletedTime pulumi.StringInput `pulumi:"deletedTime"`
	// The description of the VPN gateway.
	Description pulumi.StringInput `pulumi:"description"`
	// The expired time of the VPN gateway.
	ExpiredTime pulumi.StringInput `pulumi:"expiredTime"`
	// The ID of the VPN gateway.
	Id pulumi.StringInput `pulumi:"id"`
	// A IP address of the VPN gateway.
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// The lock reason of the VPN gateway.
	LockReason pulumi.StringInput `pulumi:"lockReason"`
	// The route count of the VPN gateway.
	RouteCount pulumi.IntInput `pulumi:"routeCount"`
	// The status of the VPN gateway.
	Status pulumi.StringInput `pulumi:"status"`
	// A subnet ID of the VPN gateway.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// Tags.
	Tags GatewaysVpnGatewayTagArrayInput `pulumi:"tags"`
	// The update time of VPN gateway.
	UpdateTime pulumi.StringInput `pulumi:"updateTime"`
	// A VPC ID of the VPN gateway.
	VpcId pulumi.StringInput `pulumi:"vpcId"`
	// The ID of the VPN gateway.
	VpnGatewayId pulumi.StringInput `pulumi:"vpnGatewayId"`
	// The name of the VPN gateway.
	VpnGatewayName pulumi.StringInput `pulumi:"vpnGatewayName"`
}

func (GatewaysVpnGatewayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysVpnGateway)(nil)).Elem()
}

func (i GatewaysVpnGatewayArgs) ToGatewaysVpnGatewayOutput() GatewaysVpnGatewayOutput {
	return i.ToGatewaysVpnGatewayOutputWithContext(context.Background())
}

func (i GatewaysVpnGatewayArgs) ToGatewaysVpnGatewayOutputWithContext(ctx context.Context) GatewaysVpnGatewayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysVpnGatewayOutput)
}

// GatewaysVpnGatewayArrayInput is an input type that accepts GatewaysVpnGatewayArray and GatewaysVpnGatewayArrayOutput values.
// You can construct a concrete instance of `GatewaysVpnGatewayArrayInput` via:
//
//	GatewaysVpnGatewayArray{ GatewaysVpnGatewayArgs{...} }
type GatewaysVpnGatewayArrayInput interface {
	pulumi.Input

	ToGatewaysVpnGatewayArrayOutput() GatewaysVpnGatewayArrayOutput
	ToGatewaysVpnGatewayArrayOutputWithContext(context.Context) GatewaysVpnGatewayArrayOutput
}

type GatewaysVpnGatewayArray []GatewaysVpnGatewayInput

func (GatewaysVpnGatewayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysVpnGateway)(nil)).Elem()
}

func (i GatewaysVpnGatewayArray) ToGatewaysVpnGatewayArrayOutput() GatewaysVpnGatewayArrayOutput {
	return i.ToGatewaysVpnGatewayArrayOutputWithContext(context.Background())
}

func (i GatewaysVpnGatewayArray) ToGatewaysVpnGatewayArrayOutputWithContext(ctx context.Context) GatewaysVpnGatewayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysVpnGatewayArrayOutput)
}

type GatewaysVpnGatewayOutput struct{ *pulumi.OutputState }

func (GatewaysVpnGatewayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysVpnGateway)(nil)).Elem()
}

func (o GatewaysVpnGatewayOutput) ToGatewaysVpnGatewayOutput() GatewaysVpnGatewayOutput {
	return o
}

func (o GatewaysVpnGatewayOutput) ToGatewaysVpnGatewayOutputWithContext(ctx context.Context) GatewaysVpnGatewayOutput {
	return o
}

// The account ID of the VPN gateway.
func (o GatewaysVpnGatewayOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.AccountId }).(pulumi.StringOutput)
}

// The bandwidth of the VPN gateway.
func (o GatewaysVpnGatewayOutput) Bandwidth() pulumi.IntOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) int { return v.Bandwidth }).(pulumi.IntOutput)
}

// The BillingType of the VPN gateway.
func (o GatewaysVpnGatewayOutput) BillingType() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.BillingType }).(pulumi.StringOutput)
}

// The business status of the VPN gateway.
func (o GatewaysVpnGatewayOutput) BusinessStatus() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.BusinessStatus }).(pulumi.StringOutput)
}

// The connection count of the VPN gateway.
func (o GatewaysVpnGatewayOutput) ConnectionCount() pulumi.IntOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) int { return v.ConnectionCount }).(pulumi.IntOutput)
}

// The create time of VPN gateway.
func (o GatewaysVpnGatewayOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.CreationTime }).(pulumi.StringOutput)
}

// The deleted time of the VPN gateway.
func (o GatewaysVpnGatewayOutput) DeletedTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.DeletedTime }).(pulumi.StringOutput)
}

// The description of the VPN gateway.
func (o GatewaysVpnGatewayOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.Description }).(pulumi.StringOutput)
}

// The expired time of the VPN gateway.
func (o GatewaysVpnGatewayOutput) ExpiredTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.ExpiredTime }).(pulumi.StringOutput)
}

// The ID of the VPN gateway.
func (o GatewaysVpnGatewayOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.Id }).(pulumi.StringOutput)
}

// A IP address of the VPN gateway.
func (o GatewaysVpnGatewayOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.IpAddress }).(pulumi.StringOutput)
}

// The lock reason of the VPN gateway.
func (o GatewaysVpnGatewayOutput) LockReason() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.LockReason }).(pulumi.StringOutput)
}

// The route count of the VPN gateway.
func (o GatewaysVpnGatewayOutput) RouteCount() pulumi.IntOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) int { return v.RouteCount }).(pulumi.IntOutput)
}

// The status of the VPN gateway.
func (o GatewaysVpnGatewayOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.Status }).(pulumi.StringOutput)
}

// A subnet ID of the VPN gateway.
func (o GatewaysVpnGatewayOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Tags.
func (o GatewaysVpnGatewayOutput) Tags() GatewaysVpnGatewayTagArrayOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) []GatewaysVpnGatewayTag { return v.Tags }).(GatewaysVpnGatewayTagArrayOutput)
}

// The update time of VPN gateway.
func (o GatewaysVpnGatewayOutput) UpdateTime() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.UpdateTime }).(pulumi.StringOutput)
}

// A VPC ID of the VPN gateway.
func (o GatewaysVpnGatewayOutput) VpcId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.VpcId }).(pulumi.StringOutput)
}

// The ID of the VPN gateway.
func (o GatewaysVpnGatewayOutput) VpnGatewayId() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.VpnGatewayId }).(pulumi.StringOutput)
}

// The name of the VPN gateway.
func (o GatewaysVpnGatewayOutput) VpnGatewayName() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGateway) string { return v.VpnGatewayName }).(pulumi.StringOutput)
}

type GatewaysVpnGatewayArrayOutput struct{ *pulumi.OutputState }

func (GatewaysVpnGatewayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysVpnGateway)(nil)).Elem()
}

func (o GatewaysVpnGatewayArrayOutput) ToGatewaysVpnGatewayArrayOutput() GatewaysVpnGatewayArrayOutput {
	return o
}

func (o GatewaysVpnGatewayArrayOutput) ToGatewaysVpnGatewayArrayOutputWithContext(ctx context.Context) GatewaysVpnGatewayArrayOutput {
	return o
}

func (o GatewaysVpnGatewayArrayOutput) Index(i pulumi.IntInput) GatewaysVpnGatewayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaysVpnGateway {
		return vs[0].([]GatewaysVpnGateway)[vs[1].(int)]
	}).(GatewaysVpnGatewayOutput)
}

type GatewaysVpnGatewayTag struct {
	// The Key of Tags.
	Key string `pulumi:"key"`
	// The Value of Tags.
	Value string `pulumi:"value"`
}

// GatewaysVpnGatewayTagInput is an input type that accepts GatewaysVpnGatewayTagArgs and GatewaysVpnGatewayTagOutput values.
// You can construct a concrete instance of `GatewaysVpnGatewayTagInput` via:
//
//	GatewaysVpnGatewayTagArgs{...}
type GatewaysVpnGatewayTagInput interface {
	pulumi.Input

	ToGatewaysVpnGatewayTagOutput() GatewaysVpnGatewayTagOutput
	ToGatewaysVpnGatewayTagOutputWithContext(context.Context) GatewaysVpnGatewayTagOutput
}

type GatewaysVpnGatewayTagArgs struct {
	// The Key of Tags.
	Key pulumi.StringInput `pulumi:"key"`
	// The Value of Tags.
	Value pulumi.StringInput `pulumi:"value"`
}

func (GatewaysVpnGatewayTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysVpnGatewayTag)(nil)).Elem()
}

func (i GatewaysVpnGatewayTagArgs) ToGatewaysVpnGatewayTagOutput() GatewaysVpnGatewayTagOutput {
	return i.ToGatewaysVpnGatewayTagOutputWithContext(context.Background())
}

func (i GatewaysVpnGatewayTagArgs) ToGatewaysVpnGatewayTagOutputWithContext(ctx context.Context) GatewaysVpnGatewayTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysVpnGatewayTagOutput)
}

// GatewaysVpnGatewayTagArrayInput is an input type that accepts GatewaysVpnGatewayTagArray and GatewaysVpnGatewayTagArrayOutput values.
// You can construct a concrete instance of `GatewaysVpnGatewayTagArrayInput` via:
//
//	GatewaysVpnGatewayTagArray{ GatewaysVpnGatewayTagArgs{...} }
type GatewaysVpnGatewayTagArrayInput interface {
	pulumi.Input

	ToGatewaysVpnGatewayTagArrayOutput() GatewaysVpnGatewayTagArrayOutput
	ToGatewaysVpnGatewayTagArrayOutputWithContext(context.Context) GatewaysVpnGatewayTagArrayOutput
}

type GatewaysVpnGatewayTagArray []GatewaysVpnGatewayTagInput

func (GatewaysVpnGatewayTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysVpnGatewayTag)(nil)).Elem()
}

func (i GatewaysVpnGatewayTagArray) ToGatewaysVpnGatewayTagArrayOutput() GatewaysVpnGatewayTagArrayOutput {
	return i.ToGatewaysVpnGatewayTagArrayOutputWithContext(context.Background())
}

func (i GatewaysVpnGatewayTagArray) ToGatewaysVpnGatewayTagArrayOutputWithContext(ctx context.Context) GatewaysVpnGatewayTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GatewaysVpnGatewayTagArrayOutput)
}

type GatewaysVpnGatewayTagOutput struct{ *pulumi.OutputState }

func (GatewaysVpnGatewayTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GatewaysVpnGatewayTag)(nil)).Elem()
}

func (o GatewaysVpnGatewayTagOutput) ToGatewaysVpnGatewayTagOutput() GatewaysVpnGatewayTagOutput {
	return o
}

func (o GatewaysVpnGatewayTagOutput) ToGatewaysVpnGatewayTagOutputWithContext(ctx context.Context) GatewaysVpnGatewayTagOutput {
	return o
}

// The Key of Tags.
func (o GatewaysVpnGatewayTagOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGatewayTag) string { return v.Key }).(pulumi.StringOutput)
}

// The Value of Tags.
func (o GatewaysVpnGatewayTagOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GatewaysVpnGatewayTag) string { return v.Value }).(pulumi.StringOutput)
}

type GatewaysVpnGatewayTagArrayOutput struct{ *pulumi.OutputState }

func (GatewaysVpnGatewayTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GatewaysVpnGatewayTag)(nil)).Elem()
}

func (o GatewaysVpnGatewayTagArrayOutput) ToGatewaysVpnGatewayTagArrayOutput() GatewaysVpnGatewayTagArrayOutput {
	return o
}

func (o GatewaysVpnGatewayTagArrayOutput) ToGatewaysVpnGatewayTagArrayOutputWithContext(ctx context.Context) GatewaysVpnGatewayTagArrayOutput {
	return o
}

func (o GatewaysVpnGatewayTagArrayOutput) Index(i pulumi.IntInput) GatewaysVpnGatewayTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GatewaysVpnGatewayTag {
		return vs[0].([]GatewaysVpnGatewayTag)[vs[1].(int)]
	}).(GatewaysVpnGatewayTagOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionsVpnConnectionInput)(nil)).Elem(), ConnectionsVpnConnectionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConnectionsVpnConnectionArrayInput)(nil)).Elem(), ConnectionsVpnConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerGatewaysCustomerGatewayInput)(nil)).Elem(), CustomerGatewaysCustomerGatewayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CustomerGatewaysCustomerGatewayArrayInput)(nil)).Elem(), CustomerGatewaysCustomerGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayRoutesVpnGatewayRouteInput)(nil)).Elem(), GatewayRoutesVpnGatewayRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayRoutesVpnGatewayRouteArrayInput)(nil)).Elem(), GatewayRoutesVpnGatewayRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayTagInput)(nil)).Elem(), GatewayTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewayTagArrayInput)(nil)).Elem(), GatewayTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysTagInput)(nil)).Elem(), GatewaysTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysTagArrayInput)(nil)).Elem(), GatewaysTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysVpnGatewayInput)(nil)).Elem(), GatewaysVpnGatewayArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysVpnGatewayArrayInput)(nil)).Elem(), GatewaysVpnGatewayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysVpnGatewayTagInput)(nil)).Elem(), GatewaysVpnGatewayTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GatewaysVpnGatewayTagArrayInput)(nil)).Elem(), GatewaysVpnGatewayTagArray{})
	pulumi.RegisterOutputType(ConnectionsVpnConnectionOutput{})
	pulumi.RegisterOutputType(ConnectionsVpnConnectionArrayOutput{})
	pulumi.RegisterOutputType(CustomerGatewaysCustomerGatewayOutput{})
	pulumi.RegisterOutputType(CustomerGatewaysCustomerGatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewayRoutesVpnGatewayRouteOutput{})
	pulumi.RegisterOutputType(GatewayRoutesVpnGatewayRouteArrayOutput{})
	pulumi.RegisterOutputType(GatewayTagOutput{})
	pulumi.RegisterOutputType(GatewayTagArrayOutput{})
	pulumi.RegisterOutputType(GatewaysTagOutput{})
	pulumi.RegisterOutputType(GatewaysTagArrayOutput{})
	pulumi.RegisterOutputType(GatewaysVpnGatewayOutput{})
	pulumi.RegisterOutputType(GatewaysVpnGatewayArrayOutput{})
	pulumi.RegisterOutputType(GatewaysVpnGatewayTagOutput{})
	pulumi.RegisterOutputType(GatewaysVpnGatewayTagArrayOutput{})
}
