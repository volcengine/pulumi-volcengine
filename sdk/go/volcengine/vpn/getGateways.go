// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package vpn

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of vpn gateways
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpc"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/vpn"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			fooVpc, err := vpc.NewVpc(ctx, "fooVpc", &vpc.VpcArgs{
//				VpcName:   pulumi.String("acc-test-vpc"),
//				CidrBlock: pulumi.String("172.16.0.0/16"),
//			})
//			if err != nil {
//				return err
//			}
//			fooSubnet, err := vpc.NewSubnet(ctx, "fooSubnet", &vpc.SubnetArgs{
//				SubnetName: pulumi.String("acc-test-subnet"),
//				CidrBlock:  pulumi.String("172.16.0.0/24"),
//				ZoneId:     pulumi.String("cn-beijing-a"),
//				VpcId:      fooVpc.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			fooGateway, err := vpn.NewGateway(ctx, "fooGateway", &vpn.GatewayArgs{
//				VpcId:          fooVpc.ID(),
//				SubnetId:       fooSubnet.ID(),
//				Bandwidth:      pulumi.Int(20),
//				VpnGatewayName: pulumi.String("acc-test"),
//				Description:    pulumi.String("acc-test"),
//				Period:         pulumi.Int(2),
//				ProjectName:    pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = vpn.GetGatewaysOutput(ctx, vpn.GetGatewaysOutputArgs{
//				Ids: pulumi.StringArray{
//					fooGateway.ID(),
//				},
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func GetGateways(ctx *pulumi.Context, args *GetGatewaysArgs, opts ...pulumi.InvokeOption) (*GetGatewaysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetGatewaysResult
	err := ctx.Invoke("volcengine:vpn/getGateways:getGateways", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getGateways.
type GetGatewaysArgs struct {
	// A list of VPN gateway ids.
	Ids []string `pulumi:"ids"`
	// A IP address of the VPN gateway.
	IpAddress *string `pulumi:"ipAddress"`
	// Whether IPSec is enabled.
	IpsecEnabled *bool `pulumi:"ipsecEnabled"`
	// A Name Regex of VPN gateway.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project name of the VPN gateway.
	ProjectName *string `pulumi:"projectName"`
	// Whether ssl is enabled.
	SslEnabled *bool `pulumi:"sslEnabled"`
	// The status of the VPN gateway.
	Status *string `pulumi:"status"`
	// A subnet ID of the VPN gateway.
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []GetGatewaysTag `pulumi:"tags"`
	// A VPC ID of the VPN gateway.
	VpcId *string `pulumi:"vpcId"`
	// A list of VPN gateway names.
	VpnGatewayNames []string `pulumi:"vpnGatewayNames"`
}

// A collection of values returned by getGateways.
type GetGatewaysResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id  string   `pulumi:"id"`
	Ids []string `pulumi:"ids"`
	// The IP address of the VPN gateway.
	IpAddress *string `pulumi:"ipAddress"`
	// Whether ipsec is enabled.
	IpsecEnabled *bool   `pulumi:"ipsecEnabled"`
	NameRegex    *string `pulumi:"nameRegex"`
	OutputFile   *string `pulumi:"outputFile"`
	// The name of project.
	ProjectName *string `pulumi:"projectName"`
	// Whether ssl is enabled.
	SslEnabled *bool `pulumi:"sslEnabled"`
	// The status of the VPN gateway.
	Status   *string `pulumi:"status"`
	SubnetId *string `pulumi:"subnetId"`
	// Tags.
	Tags []GetGatewaysTag `pulumi:"tags"`
	// The total count of VPN gateway query.
	TotalCount int `pulumi:"totalCount"`
	// The VPC ID of the VPN gateway.
	VpcId           *string  `pulumi:"vpcId"`
	VpnGatewayNames []string `pulumi:"vpnGatewayNames"`
	// The collection of VPN gateway query.
	VpnGateways []GetGatewaysVpnGateway `pulumi:"vpnGateways"`
}

func GetGatewaysOutput(ctx *pulumi.Context, args GetGatewaysOutputArgs, opts ...pulumi.InvokeOption) GetGatewaysResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetGatewaysResult, error) {
			args := v.(GetGatewaysArgs)
			r, err := GetGateways(ctx, &args, opts...)
			var s GetGatewaysResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetGatewaysResultOutput)
}

// A collection of arguments for invoking getGateways.
type GetGatewaysOutputArgs struct {
	// A list of VPN gateway ids.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// A IP address of the VPN gateway.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// Whether IPSec is enabled.
	IpsecEnabled pulumi.BoolPtrInput `pulumi:"ipsecEnabled"`
	// A Name Regex of VPN gateway.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project name of the VPN gateway.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// Whether ssl is enabled.
	SslEnabled pulumi.BoolPtrInput `pulumi:"sslEnabled"`
	// The status of the VPN gateway.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// A subnet ID of the VPN gateway.
	SubnetId pulumi.StringPtrInput `pulumi:"subnetId"`
	// Tags.
	Tags GetGatewaysTagArrayInput `pulumi:"tags"`
	// A VPC ID of the VPN gateway.
	VpcId pulumi.StringPtrInput `pulumi:"vpcId"`
	// A list of VPN gateway names.
	VpnGatewayNames pulumi.StringArrayInput `pulumi:"vpnGatewayNames"`
}

func (GetGatewaysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewaysArgs)(nil)).Elem()
}

// A collection of values returned by getGateways.
type GetGatewaysResultOutput struct{ *pulumi.OutputState }

func (GetGatewaysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGatewaysResult)(nil)).Elem()
}

func (o GetGatewaysResultOutput) ToGetGatewaysResultOutput() GetGatewaysResultOutput {
	return o
}

func (o GetGatewaysResultOutput) ToGetGatewaysResultOutputWithContext(ctx context.Context) GetGatewaysResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetGatewaysResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGatewaysResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGatewaysResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGatewaysResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

// The IP address of the VPN gateway.
func (o GetGatewaysResultOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewaysResult) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Whether ipsec is enabled.
func (o GetGatewaysResultOutput) IpsecEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetGatewaysResult) *bool { return v.IpsecEnabled }).(pulumi.BoolPtrOutput)
}

func (o GetGatewaysResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewaysResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetGatewaysResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewaysResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The name of project.
func (o GetGatewaysResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewaysResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// Whether ssl is enabled.
func (o GetGatewaysResultOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetGatewaysResult) *bool { return v.SslEnabled }).(pulumi.BoolPtrOutput)
}

// The status of the VPN gateway.
func (o GetGatewaysResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewaysResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o GetGatewaysResultOutput) SubnetId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewaysResult) *string { return v.SubnetId }).(pulumi.StringPtrOutput)
}

// Tags.
func (o GetGatewaysResultOutput) Tags() GetGatewaysTagArrayOutput {
	return o.ApplyT(func(v GetGatewaysResult) []GetGatewaysTag { return v.Tags }).(GetGatewaysTagArrayOutput)
}

// The total count of VPN gateway query.
func (o GetGatewaysResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetGatewaysResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

// The VPC ID of the VPN gateway.
func (o GetGatewaysResultOutput) VpcId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetGatewaysResult) *string { return v.VpcId }).(pulumi.StringPtrOutput)
}

func (o GetGatewaysResultOutput) VpnGatewayNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGatewaysResult) []string { return v.VpnGatewayNames }).(pulumi.StringArrayOutput)
}

// The collection of VPN gateway query.
func (o GetGatewaysResultOutput) VpnGateways() GetGatewaysVpnGatewayArrayOutput {
	return o.ApplyT(func(v GetGatewaysResult) []GetGatewaysVpnGateway { return v.VpnGateways }).(GetGatewaysVpnGatewayArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(GetGatewaysResultOutput{})
}
