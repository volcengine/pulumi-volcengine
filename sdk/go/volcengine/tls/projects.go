// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of tls projects
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.Projects(ctx, &tls.ProjectsArgs{
//				ProjectId: pulumi.StringRef("e020c978-4f05-40e1-9167-0113d3ef****"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Projects(ctx *pulumi.Context, args *ProjectsArgs, opts ...pulumi.InvokeOption) (*ProjectsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv ProjectsResult
	err := ctx.Invoke("volcengine:tls/projects:Projects", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Projects.
type ProjectsArgs struct {
	// The IAM project name of the tls project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// Whether to match accurately when filtering based on ProjectName.
	IsFullName *bool `pulumi:"isFullName"`
	// A Name Regex of tls project.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The id of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.
	ProjectId *string `pulumi:"projectId"`
	// The name of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []ProjectsTag `pulumi:"tags"`
}

// A collection of values returned by Projects.
type ProjectsResult struct {
	// The IAM project name of the tls project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	IsFullName *bool   `pulumi:"isFullName"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The ID of the tls project.
	ProjectId *string `pulumi:"projectId"`
	// The name of the tls project.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []ProjectsTag `pulumi:"tags"`
	// The collection of tls project query.
	TlsProjects []ProjectsTlsProject `pulumi:"tlsProjects"`
	// The total count of tls project query.
	TotalCount int `pulumi:"totalCount"`
}

func ProjectsOutput(ctx *pulumi.Context, args ProjectsOutputArgs, opts ...pulumi.InvokeOption) ProjectsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ProjectsResult, error) {
			args := v.(ProjectsArgs)
			r, err := Projects(ctx, &args, opts...)
			var s ProjectsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ProjectsResultOutput)
}

// A collection of arguments for invoking Projects.
type ProjectsOutputArgs struct {
	// The IAM project name of the tls project.
	IamProjectName pulumi.StringPtrInput `pulumi:"iamProjectName"`
	// Whether to match accurately when filtering based on ProjectName.
	IsFullName pulumi.BoolPtrInput `pulumi:"isFullName"`
	// A Name Regex of tls project.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The id of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The name of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// Tags.
	Tags ProjectsTagArrayInput `pulumi:"tags"`
}

func (ProjectsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectsArgs)(nil)).Elem()
}

// A collection of values returned by Projects.
type ProjectsResultOutput struct{ *pulumi.OutputState }

func (ProjectsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProjectsResult)(nil)).Elem()
}

func (o ProjectsResultOutput) ToProjectsResultOutput() ProjectsResultOutput {
	return o
}

func (o ProjectsResultOutput) ToProjectsResultOutputWithContext(ctx context.Context) ProjectsResultOutput {
	return o
}

// The IAM project name of the tls project.
func (o ProjectsResultOutput) IamProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectsResult) *string { return v.IamProjectName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ProjectsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ProjectsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ProjectsResultOutput) IsFullName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ProjectsResult) *bool { return v.IsFullName }).(pulumi.BoolPtrOutput)
}

func (o ProjectsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ProjectsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The ID of the tls project.
func (o ProjectsResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectsResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The name of the tls project.
func (o ProjectsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ProjectsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// Tags.
func (o ProjectsResultOutput) Tags() ProjectsTagArrayOutput {
	return o.ApplyT(func(v ProjectsResult) []ProjectsTag { return v.Tags }).(ProjectsTagArrayOutput)
}

// The collection of tls project query.
func (o ProjectsResultOutput) TlsProjects() ProjectsTlsProjectArrayOutput {
	return o.ApplyT(func(v ProjectsResult) []ProjectsTlsProject { return v.TlsProjects }).(ProjectsTlsProjectArrayOutput)
}

// The total count of tls project query.
func (o ProjectsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ProjectsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ProjectsResultOutput{})
}
