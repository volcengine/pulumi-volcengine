// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use this data source to query detailed information of tls hosts
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.Hosts(ctx, &tls.HostsArgs{
//				HostGroupId: "527102e2-1e4f-45f4-a990-751152125da7",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func Hosts(ctx *pulumi.Context, args *HostsArgs, opts ...pulumi.InvokeOption) (*HostsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv HostsResult
	err := ctx.Invoke("volcengine:tls/hosts:Hosts", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Hosts.
type HostsArgs struct {
	// The the heartbeat status.
	HeartbeatStatus *int `pulumi:"heartbeatStatus"`
	// The id of host group.
	HostGroupId string `pulumi:"hostGroupId"`
	// The ip address.
	Ip *string `pulumi:"ip"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by Hosts.
type HostsResult struct {
	// The the heartbeat status.
	HeartbeatStatus *int `pulumi:"heartbeatStatus"`
	// The id of host group.
	HostGroupId string `pulumi:"hostGroupId"`
	// The collection of query.
	HostInfos []HostsHostInfo `pulumi:"hostInfos"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// The ip address.
	Ip         *string `pulumi:"ip"`
	OutputFile *string `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func HostsOutput(ctx *pulumi.Context, args HostsOutputArgs, opts ...pulumi.InvokeOption) HostsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (HostsResult, error) {
			args := v.(HostsArgs)
			r, err := Hosts(ctx, &args, opts...)
			var s HostsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(HostsResultOutput)
}

// A collection of arguments for invoking Hosts.
type HostsOutputArgs struct {
	// The the heartbeat status.
	HeartbeatStatus pulumi.IntPtrInput `pulumi:"heartbeatStatus"`
	// The id of host group.
	HostGroupId pulumi.StringInput `pulumi:"hostGroupId"`
	// The ip address.
	Ip pulumi.StringPtrInput `pulumi:"ip"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (HostsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*HostsArgs)(nil)).Elem()
}

// A collection of values returned by Hosts.
type HostsResultOutput struct{ *pulumi.OutputState }

func (HostsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HostsResult)(nil)).Elem()
}

func (o HostsResultOutput) ToHostsResultOutput() HostsResultOutput {
	return o
}

func (o HostsResultOutput) ToHostsResultOutputWithContext(ctx context.Context) HostsResultOutput {
	return o
}

// The the heartbeat status.
func (o HostsResultOutput) HeartbeatStatus() pulumi.IntPtrOutput {
	return o.ApplyT(func(v HostsResult) *int { return v.HeartbeatStatus }).(pulumi.IntPtrOutput)
}

// The id of host group.
func (o HostsResultOutput) HostGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v HostsResult) string { return v.HostGroupId }).(pulumi.StringOutput)
}

// The collection of query.
func (o HostsResultOutput) HostInfos() HostsHostInfoArrayOutput {
	return o.ApplyT(func(v HostsResult) []HostsHostInfo { return v.HostInfos }).(HostsHostInfoArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o HostsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v HostsResult) string { return v.Id }).(pulumi.StringOutput)
}

// The ip address.
func (o HostsResultOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostsResult) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o HostsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v HostsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o HostsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v HostsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(HostsResultOutput{})
}
