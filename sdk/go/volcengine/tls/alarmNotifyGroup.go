// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage tls alarm notify group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.NewAlarmNotifyGroup(ctx, "foo", &tls.AlarmNotifyGroupArgs{
//				AlarmNotifyGroupName: pulumi.String("tf-test"),
//				IamProjectName:       pulumi.String("yyy"),
//				NotifyTypes: pulumi.StringArray{
//					pulumi.String("Trigger"),
//				},
//				Receivers: tls.AlarmNotifyGroupReceiverArray{
//					&tls.AlarmNotifyGroupReceiverArgs{
//						EndTime: pulumi.String("23:59:59"),
//						ReceiverChannels: pulumi.StringArray{
//							pulumi.String("Email"),
//							pulumi.String("Sms"),
//						},
//						ReceiverNames: pulumi.StringArray{
//							pulumi.String("vke-qs"),
//						},
//						ReceiverType: pulumi.String("User"),
//						StartTime:    pulumi.String("23:00:00"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tls alarm notify group can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:tls/alarmNotifyGroup:AlarmNotifyGroup default fa************
//
// ```
type AlarmNotifyGroup struct {
	pulumi.CustomResourceState

	// The alarm notification group id.
	AlarmNotifyGroupId pulumi.StringOutput `pulumi:"alarmNotifyGroupId"`
	// The name of the notify group.
	AlarmNotifyGroupName pulumi.StringOutput `pulumi:"alarmNotifyGroupName"`
	// The name of the iam project.
	IamProjectName pulumi.StringPtrOutput `pulumi:"iamProjectName"`
	// The notify type.
	NotifyTypes pulumi.StringArrayOutput `pulumi:"notifyTypes"`
	// List of IAM users to receive alerts.
	Receivers AlarmNotifyGroupReceiverArrayOutput `pulumi:"receivers"`
}

// NewAlarmNotifyGroup registers a new resource with the given unique name, arguments, and options.
func NewAlarmNotifyGroup(ctx *pulumi.Context,
	name string, args *AlarmNotifyGroupArgs, opts ...pulumi.ResourceOption) (*AlarmNotifyGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlarmNotifyGroupName == nil {
		return nil, errors.New("invalid value for required argument 'AlarmNotifyGroupName'")
	}
	if args.NotifyTypes == nil {
		return nil, errors.New("invalid value for required argument 'NotifyTypes'")
	}
	if args.Receivers == nil {
		return nil, errors.New("invalid value for required argument 'Receivers'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource AlarmNotifyGroup
	err := ctx.RegisterResource("volcengine:tls/alarmNotifyGroup:AlarmNotifyGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlarmNotifyGroup gets an existing AlarmNotifyGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarmNotifyGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlarmNotifyGroupState, opts ...pulumi.ResourceOption) (*AlarmNotifyGroup, error) {
	var resource AlarmNotifyGroup
	err := ctx.ReadResource("volcengine:tls/alarmNotifyGroup:AlarmNotifyGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlarmNotifyGroup resources.
type alarmNotifyGroupState struct {
	// The alarm notification group id.
	AlarmNotifyGroupId *string `pulumi:"alarmNotifyGroupId"`
	// The name of the notify group.
	AlarmNotifyGroupName *string `pulumi:"alarmNotifyGroupName"`
	// The name of the iam project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// The notify type.
	NotifyTypes []string `pulumi:"notifyTypes"`
	// List of IAM users to receive alerts.
	Receivers []AlarmNotifyGroupReceiver `pulumi:"receivers"`
}

type AlarmNotifyGroupState struct {
	// The alarm notification group id.
	AlarmNotifyGroupId pulumi.StringPtrInput
	// The name of the notify group.
	AlarmNotifyGroupName pulumi.StringPtrInput
	// The name of the iam project.
	IamProjectName pulumi.StringPtrInput
	// The notify type.
	NotifyTypes pulumi.StringArrayInput
	// List of IAM users to receive alerts.
	Receivers AlarmNotifyGroupReceiverArrayInput
}

func (AlarmNotifyGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmNotifyGroupState)(nil)).Elem()
}

type alarmNotifyGroupArgs struct {
	// The name of the notify group.
	AlarmNotifyGroupName string `pulumi:"alarmNotifyGroupName"`
	// The name of the iam project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// The notify type.
	NotifyTypes []string `pulumi:"notifyTypes"`
	// List of IAM users to receive alerts.
	Receivers []AlarmNotifyGroupReceiver `pulumi:"receivers"`
}

// The set of arguments for constructing a AlarmNotifyGroup resource.
type AlarmNotifyGroupArgs struct {
	// The name of the notify group.
	AlarmNotifyGroupName pulumi.StringInput
	// The name of the iam project.
	IamProjectName pulumi.StringPtrInput
	// The notify type.
	NotifyTypes pulumi.StringArrayInput
	// List of IAM users to receive alerts.
	Receivers AlarmNotifyGroupReceiverArrayInput
}

func (AlarmNotifyGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmNotifyGroupArgs)(nil)).Elem()
}

type AlarmNotifyGroupInput interface {
	pulumi.Input

	ToAlarmNotifyGroupOutput() AlarmNotifyGroupOutput
	ToAlarmNotifyGroupOutputWithContext(ctx context.Context) AlarmNotifyGroupOutput
}

func (*AlarmNotifyGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmNotifyGroup)(nil)).Elem()
}

func (i *AlarmNotifyGroup) ToAlarmNotifyGroupOutput() AlarmNotifyGroupOutput {
	return i.ToAlarmNotifyGroupOutputWithContext(context.Background())
}

func (i *AlarmNotifyGroup) ToAlarmNotifyGroupOutputWithContext(ctx context.Context) AlarmNotifyGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmNotifyGroupOutput)
}

// AlarmNotifyGroupArrayInput is an input type that accepts AlarmNotifyGroupArray and AlarmNotifyGroupArrayOutput values.
// You can construct a concrete instance of `AlarmNotifyGroupArrayInput` via:
//
//	AlarmNotifyGroupArray{ AlarmNotifyGroupArgs{...} }
type AlarmNotifyGroupArrayInput interface {
	pulumi.Input

	ToAlarmNotifyGroupArrayOutput() AlarmNotifyGroupArrayOutput
	ToAlarmNotifyGroupArrayOutputWithContext(context.Context) AlarmNotifyGroupArrayOutput
}

type AlarmNotifyGroupArray []AlarmNotifyGroupInput

func (AlarmNotifyGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlarmNotifyGroup)(nil)).Elem()
}

func (i AlarmNotifyGroupArray) ToAlarmNotifyGroupArrayOutput() AlarmNotifyGroupArrayOutput {
	return i.ToAlarmNotifyGroupArrayOutputWithContext(context.Background())
}

func (i AlarmNotifyGroupArray) ToAlarmNotifyGroupArrayOutputWithContext(ctx context.Context) AlarmNotifyGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmNotifyGroupArrayOutput)
}

// AlarmNotifyGroupMapInput is an input type that accepts AlarmNotifyGroupMap and AlarmNotifyGroupMapOutput values.
// You can construct a concrete instance of `AlarmNotifyGroupMapInput` via:
//
//	AlarmNotifyGroupMap{ "key": AlarmNotifyGroupArgs{...} }
type AlarmNotifyGroupMapInput interface {
	pulumi.Input

	ToAlarmNotifyGroupMapOutput() AlarmNotifyGroupMapOutput
	ToAlarmNotifyGroupMapOutputWithContext(context.Context) AlarmNotifyGroupMapOutput
}

type AlarmNotifyGroupMap map[string]AlarmNotifyGroupInput

func (AlarmNotifyGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlarmNotifyGroup)(nil)).Elem()
}

func (i AlarmNotifyGroupMap) ToAlarmNotifyGroupMapOutput() AlarmNotifyGroupMapOutput {
	return i.ToAlarmNotifyGroupMapOutputWithContext(context.Background())
}

func (i AlarmNotifyGroupMap) ToAlarmNotifyGroupMapOutputWithContext(ctx context.Context) AlarmNotifyGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmNotifyGroupMapOutput)
}

type AlarmNotifyGroupOutput struct{ *pulumi.OutputState }

func (AlarmNotifyGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlarmNotifyGroup)(nil)).Elem()
}

func (o AlarmNotifyGroupOutput) ToAlarmNotifyGroupOutput() AlarmNotifyGroupOutput {
	return o
}

func (o AlarmNotifyGroupOutput) ToAlarmNotifyGroupOutputWithContext(ctx context.Context) AlarmNotifyGroupOutput {
	return o
}

// The alarm notification group id.
func (o AlarmNotifyGroupOutput) AlarmNotifyGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmNotifyGroup) pulumi.StringOutput { return v.AlarmNotifyGroupId }).(pulumi.StringOutput)
}

// The name of the notify group.
func (o AlarmNotifyGroupOutput) AlarmNotifyGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *AlarmNotifyGroup) pulumi.StringOutput { return v.AlarmNotifyGroupName }).(pulumi.StringOutput)
}

// The name of the iam project.
func (o AlarmNotifyGroupOutput) IamProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlarmNotifyGroup) pulumi.StringPtrOutput { return v.IamProjectName }).(pulumi.StringPtrOutput)
}

// The notify type.
func (o AlarmNotifyGroupOutput) NotifyTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlarmNotifyGroup) pulumi.StringArrayOutput { return v.NotifyTypes }).(pulumi.StringArrayOutput)
}

// List of IAM users to receive alerts.
func (o AlarmNotifyGroupOutput) Receivers() AlarmNotifyGroupReceiverArrayOutput {
	return o.ApplyT(func(v *AlarmNotifyGroup) AlarmNotifyGroupReceiverArrayOutput { return v.Receivers }).(AlarmNotifyGroupReceiverArrayOutput)
}

type AlarmNotifyGroupArrayOutput struct{ *pulumi.OutputState }

func (AlarmNotifyGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlarmNotifyGroup)(nil)).Elem()
}

func (o AlarmNotifyGroupArrayOutput) ToAlarmNotifyGroupArrayOutput() AlarmNotifyGroupArrayOutput {
	return o
}

func (o AlarmNotifyGroupArrayOutput) ToAlarmNotifyGroupArrayOutputWithContext(ctx context.Context) AlarmNotifyGroupArrayOutput {
	return o
}

func (o AlarmNotifyGroupArrayOutput) Index(i pulumi.IntInput) AlarmNotifyGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlarmNotifyGroup {
		return vs[0].([]*AlarmNotifyGroup)[vs[1].(int)]
	}).(AlarmNotifyGroupOutput)
}

type AlarmNotifyGroupMapOutput struct{ *pulumi.OutputState }

func (AlarmNotifyGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlarmNotifyGroup)(nil)).Elem()
}

func (o AlarmNotifyGroupMapOutput) ToAlarmNotifyGroupMapOutput() AlarmNotifyGroupMapOutput {
	return o
}

func (o AlarmNotifyGroupMapOutput) ToAlarmNotifyGroupMapOutputWithContext(ctx context.Context) AlarmNotifyGroupMapOutput {
	return o
}

func (o AlarmNotifyGroupMapOutput) MapIndex(k pulumi.StringInput) AlarmNotifyGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlarmNotifyGroup {
		return vs[0].(map[string]*AlarmNotifyGroup)[vs[1].(string)]
	}).(AlarmNotifyGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmNotifyGroupInput)(nil)).Elem(), &AlarmNotifyGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmNotifyGroupArrayInput)(nil)).Elem(), AlarmNotifyGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmNotifyGroupMapInput)(nil)).Elem(), AlarmNotifyGroupMap{})
	pulumi.RegisterOutputType(AlarmNotifyGroupOutput{})
	pulumi.RegisterOutputType(AlarmNotifyGroupArrayOutput{})
	pulumi.RegisterOutputType(AlarmNotifyGroupMapOutput{})
}
