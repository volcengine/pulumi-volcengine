// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tls etl tasks
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.GetEtlTasks(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.tls.EtlTasks has been deprecated in favor of volcengine.tls.getEtlTasks
func EtlTasks(ctx *pulumi.Context, args *EtlTasksArgs, opts ...pulumi.InvokeOption) (*EtlTasksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv EtlTasksResult
	err := ctx.Invoke("volcengine:tls/etlTasks:EtlTasks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking EtlTasks.
type EtlTasksArgs struct {
	// Specify the IAM project name to query the data processing tasks under the specified IAM project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Specify the log item ID for querying the data processing tasks under the specified log item.
	ProjectId *string `pulumi:"projectId"`
	// Specify the name of the log item for querying the data processing tasks under the specified log item. Support fuzzy query.
	ProjectName *string `pulumi:"projectName"`
	// Specify the log topic ID for querying the data processing tasks related to this log topic.
	SourceTopicId *string `pulumi:"sourceTopicId"`
	// Specify the name of the log topic for querying the data processing tasks related to this log topic. Support fuzzy matching.
	SourceTopicName *string `pulumi:"sourceTopicName"`
	// Specify the processing task status for querying data processing tasks in this status.
	Status *string `pulumi:"status"`
	// The ID of the processing task.
	TaskId *string `pulumi:"taskId"`
	// The name of the processing task.
	TaskName *string `pulumi:"taskName"`
}

// A collection of values returned by EtlTasks.
type EtlTasksResult struct {
	IamProjectName *string `pulumi:"iamProjectName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The log item ID used for storing the processed logs.
	ProjectId *string `pulumi:"projectId"`
	// The name of the log item used for storing the processed logs.
	ProjectName *string `pulumi:"projectName"`
	// The log topic ID where the log to be processed is located.
	SourceTopicId *string `pulumi:"sourceTopicId"`
	// The name of the log topic where the log to be processed is located.
	SourceTopicName *string `pulumi:"sourceTopicName"`
	Status          *string `pulumi:"status"`
	// The ID of the processing task.
	TaskId   *string `pulumi:"taskId"`
	TaskName *string `pulumi:"taskName"`
	// Detailed information of the processing task.
	Tasks []EtlTasksTask `pulumi:"tasks"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func EtlTasksOutput(ctx *pulumi.Context, args EtlTasksOutputArgs, opts ...pulumi.InvokeOption) EtlTasksResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (EtlTasksResult, error) {
			args := v.(EtlTasksArgs)
			r, err := EtlTasks(ctx, &args, opts...)
			var s EtlTasksResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(EtlTasksResultOutput)
}

// A collection of arguments for invoking EtlTasks.
type EtlTasksOutputArgs struct {
	// Specify the IAM project name to query the data processing tasks under the specified IAM project.
	IamProjectName pulumi.StringPtrInput `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Specify the log item ID for querying the data processing tasks under the specified log item.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Specify the name of the log item for querying the data processing tasks under the specified log item. Support fuzzy query.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// Specify the log topic ID for querying the data processing tasks related to this log topic.
	SourceTopicId pulumi.StringPtrInput `pulumi:"sourceTopicId"`
	// Specify the name of the log topic for querying the data processing tasks related to this log topic. Support fuzzy matching.
	SourceTopicName pulumi.StringPtrInput `pulumi:"sourceTopicName"`
	// Specify the processing task status for querying data processing tasks in this status.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// The ID of the processing task.
	TaskId pulumi.StringPtrInput `pulumi:"taskId"`
	// The name of the processing task.
	TaskName pulumi.StringPtrInput `pulumi:"taskName"`
}

func (EtlTasksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*EtlTasksArgs)(nil)).Elem()
}

// A collection of values returned by EtlTasks.
type EtlTasksResultOutput struct{ *pulumi.OutputState }

func (EtlTasksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EtlTasksResult)(nil)).Elem()
}

func (o EtlTasksResultOutput) ToEtlTasksResultOutput() EtlTasksResultOutput {
	return o
}

func (o EtlTasksResultOutput) ToEtlTasksResultOutputWithContext(ctx context.Context) EtlTasksResultOutput {
	return o
}

func (o EtlTasksResultOutput) IamProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.IamProjectName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o EtlTasksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v EtlTasksResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o EtlTasksResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o EtlTasksResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The log item ID used for storing the processed logs.
func (o EtlTasksResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The name of the log item used for storing the processed logs.
func (o EtlTasksResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The log topic ID where the log to be processed is located.
func (o EtlTasksResultOutput) SourceTopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.SourceTopicId }).(pulumi.StringPtrOutput)
}

// The name of the log topic where the log to be processed is located.
func (o EtlTasksResultOutput) SourceTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.SourceTopicName }).(pulumi.StringPtrOutput)
}

func (o EtlTasksResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// The ID of the processing task.
func (o EtlTasksResultOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

func (o EtlTasksResultOutput) TaskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v EtlTasksResult) *string { return v.TaskName }).(pulumi.StringPtrOutput)
}

// Detailed information of the processing task.
func (o EtlTasksResultOutput) Tasks() EtlTasksTaskArrayOutput {
	return o.ApplyT(func(v EtlTasksResult) []EtlTasksTask { return v.Tasks }).(EtlTasksTaskArrayOutput)
}

// The total count of query.
func (o EtlTasksResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v EtlTasksResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(EtlTasksResultOutput{})
}
