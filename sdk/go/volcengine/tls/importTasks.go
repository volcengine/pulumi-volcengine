// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tls import tasks
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.GetImportTasks(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.tls.ImportTasks has been deprecated in favor of volcengine.tls.getImportTasks
func ImportTasks(ctx *pulumi.Context, args *ImportTasksArgs, opts ...pulumi.InvokeOption) (*ImportTasksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ImportTasksResult
	err := ctx.Invoke("volcengine:tls/importTasks:ImportTasks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ImportTasks.
type ImportTasksArgs struct {
	// Specify the IAM project name to query the data import tasks under the specified IAM project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Specify the log item ID for querying the data import tasks under the specified log item.
	ProjectId *string `pulumi:"projectId"`
	// Specify the name of the log item for querying the data import tasks under the specified log item. Support fuzzy query..
	ProjectName *string `pulumi:"projectName"`
	// Specify the import type for querying the data import tasks related to this import type.
	SourceType *string `pulumi:"sourceType"`
	// Specify the status of the import task.
	Status *string `pulumi:"status"`
	// Import the task ID of the data to be queried.
	TaskId *string `pulumi:"taskId"`
	// Import the task name of the data to be queried.
	TaskName *string `pulumi:"taskName"`
	// Specify the log topic ID for querying the data import tasks related to this log topic.
	TopicId *string `pulumi:"topicId"`
	// Specify the name of the log topic for querying the data import tasks related to this log topic. Support fuzzy query.
	TopicName *string `pulumi:"topicName"`
}

// A collection of values returned by ImportTasks.
type ImportTasksResult struct {
	IamProjectName *string `pulumi:"iamProjectName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// Specify the log item ID for querying the data import tasks under the specified log item.
	ProjectId *string `pulumi:"projectId"`
	// Specify the name of the log item for querying the data import tasks under the specified log item. Support fuzzy query..
	ProjectName *string `pulumi:"projectName"`
	// Specify the import type for querying the data import tasks related to this import type.
	SourceType *string `pulumi:"sourceType"`
	Status     *string `pulumi:"status"`
	// Import the task ID of the data to be queried.
	TaskId *string `pulumi:"taskId"`
	// Data import task list.
	TaskInfos []ImportTasksTaskInfo `pulumi:"taskInfos"`
	// Import the task name of the data to be queried.
	TaskName *string `pulumi:"taskName"`
	// Specify the log topic ID for querying the data import tasks related to this log topic.
	TopicId *string `pulumi:"topicId"`
	// Specify the name of the log topic for querying the data import tasks related to this log topic. Support fuzzy query.
	TopicName *string `pulumi:"topicName"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ImportTasksOutput(ctx *pulumi.Context, args ImportTasksOutputArgs, opts ...pulumi.InvokeOption) ImportTasksResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ImportTasksResult, error) {
			args := v.(ImportTasksArgs)
			r, err := ImportTasks(ctx, &args, opts...)
			var s ImportTasksResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ImportTasksResultOutput)
}

// A collection of arguments for invoking ImportTasks.
type ImportTasksOutputArgs struct {
	// Specify the IAM project name to query the data import tasks under the specified IAM project.
	IamProjectName pulumi.StringPtrInput `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Specify the log item ID for querying the data import tasks under the specified log item.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Specify the name of the log item for querying the data import tasks under the specified log item. Support fuzzy query..
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// Specify the import type for querying the data import tasks related to this import type.
	SourceType pulumi.StringPtrInput `pulumi:"sourceType"`
	// Specify the status of the import task.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Import the task ID of the data to be queried.
	TaskId pulumi.StringPtrInput `pulumi:"taskId"`
	// Import the task name of the data to be queried.
	TaskName pulumi.StringPtrInput `pulumi:"taskName"`
	// Specify the log topic ID for querying the data import tasks related to this log topic.
	TopicId pulumi.StringPtrInput `pulumi:"topicId"`
	// Specify the name of the log topic for querying the data import tasks related to this log topic. Support fuzzy query.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (ImportTasksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportTasksArgs)(nil)).Elem()
}

// A collection of values returned by ImportTasks.
type ImportTasksResultOutput struct{ *pulumi.OutputState }

func (ImportTasksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ImportTasksResult)(nil)).Elem()
}

func (o ImportTasksResultOutput) ToImportTasksResultOutput() ImportTasksResultOutput {
	return o
}

func (o ImportTasksResultOutput) ToImportTasksResultOutputWithContext(ctx context.Context) ImportTasksResultOutput {
	return o
}

func (o ImportTasksResultOutput) IamProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.IamProjectName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ImportTasksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ImportTasksResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ImportTasksResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ImportTasksResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// Specify the log item ID for querying the data import tasks under the specified log item.
func (o ImportTasksResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// Specify the name of the log item for querying the data import tasks under the specified log item. Support fuzzy query..
func (o ImportTasksResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// Specify the import type for querying the data import tasks related to this import type.
func (o ImportTasksResultOutput) SourceType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.SourceType }).(pulumi.StringPtrOutput)
}

func (o ImportTasksResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Import the task ID of the data to be queried.
func (o ImportTasksResultOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Data import task list.
func (o ImportTasksResultOutput) TaskInfos() ImportTasksTaskInfoArrayOutput {
	return o.ApplyT(func(v ImportTasksResult) []ImportTasksTaskInfo { return v.TaskInfos }).(ImportTasksTaskInfoArrayOutput)
}

// Import the task name of the data to be queried.
func (o ImportTasksResultOutput) TaskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.TaskName }).(pulumi.StringPtrOutput)
}

// Specify the log topic ID for querying the data import tasks related to this log topic.
func (o ImportTasksResultOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

// Specify the name of the log topic for querying the data import tasks related to this log topic. Support fuzzy query.
func (o ImportTasksResultOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ImportTasksResult) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o ImportTasksResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ImportTasksResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ImportTasksResultOutput{})
}
