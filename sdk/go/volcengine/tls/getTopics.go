// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tls topics
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.GetTopics(ctx, &tls.GetTopicsArgs{
//				ProjectId: "e020c978-4f05-40e1-9167-0113d3ef****",
//				TopicId:   pulumi.StringRef("edf051ed-3c46-49ba-9339-bea628fe****"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetTopics(ctx *pulumi.Context, args *GetTopicsArgs, opts ...pulumi.InvokeOption) (*GetTopicsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetTopicsResult
	err := ctx.Invoke("volcengine:tls/getTopics:getTopics", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTopics.
type GetTopicsArgs struct {
	// Whether to match accurately when filtering based on TopicName.
	IsFullName *bool `pulumi:"isFullName"`
	// A Name Regex of tls topic.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project id of tls topic.
	ProjectId string `pulumi:"projectId"`
	// Tags.
	Tags []GetTopicsTag `pulumi:"tags"`
	// The id of tls topic. This field supports fuzzy queries. It is not supported to specify both TopicName and TopicId at the same time.
	TopicId *string `pulumi:"topicId"`
	// The name of tls topic. This field supports fuzzy queries. It is not supported to specify both TopicName and TopicId at the same time.
	TopicName *string `pulumi:"topicName"`
}

// A collection of values returned by getTopics.
type GetTopicsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	IsFullName *bool   `pulumi:"isFullName"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The project id of the tls topic.
	ProjectId string `pulumi:"projectId"`
	// Tags.
	Tags []GetTopicsTag `pulumi:"tags"`
	// The collection of tls topic query.
	TlsTopics []GetTopicsTlsTopic `pulumi:"tlsTopics"`
	// The ID of the tls topic.
	TopicId *string `pulumi:"topicId"`
	// The name of the tls topic.
	TopicName *string `pulumi:"topicName"`
	// The total count of tls topic query.
	TotalCount int `pulumi:"totalCount"`
}

func GetTopicsOutput(ctx *pulumi.Context, args GetTopicsOutputArgs, opts ...pulumi.InvokeOption) GetTopicsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTopicsResult, error) {
			args := v.(GetTopicsArgs)
			r, err := GetTopics(ctx, &args, opts...)
			var s GetTopicsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTopicsResultOutput)
}

// A collection of arguments for invoking getTopics.
type GetTopicsOutputArgs struct {
	// Whether to match accurately when filtering based on TopicName.
	IsFullName pulumi.BoolPtrInput `pulumi:"isFullName"`
	// A Name Regex of tls topic.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project id of tls topic.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// Tags.
	Tags GetTopicsTagArrayInput `pulumi:"tags"`
	// The id of tls topic. This field supports fuzzy queries. It is not supported to specify both TopicName and TopicId at the same time.
	TopicId pulumi.StringPtrInput `pulumi:"topicId"`
	// The name of tls topic. This field supports fuzzy queries. It is not supported to specify both TopicName and TopicId at the same time.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (GetTopicsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsArgs)(nil)).Elem()
}

// A collection of values returned by getTopics.
type GetTopicsResultOutput struct{ *pulumi.OutputState }

func (GetTopicsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTopicsResult)(nil)).Elem()
}

func (o GetTopicsResultOutput) ToGetTopicsResultOutput() GetTopicsResultOutput {
	return o
}

func (o GetTopicsResultOutput) ToGetTopicsResultOutputWithContext(ctx context.Context) GetTopicsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o GetTopicsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetTopicsResultOutput) IsFullName() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *bool { return v.IsFullName }).(pulumi.BoolPtrOutput)
}

func (o GetTopicsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetTopicsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The project id of the tls topic.
func (o GetTopicsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetTopicsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Tags.
func (o GetTopicsResultOutput) Tags() GetTopicsTagArrayOutput {
	return o.ApplyT(func(v GetTopicsResult) []GetTopicsTag { return v.Tags }).(GetTopicsTagArrayOutput)
}

// The collection of tls topic query.
func (o GetTopicsResultOutput) TlsTopics() GetTopicsTlsTopicArrayOutput {
	return o.ApplyT(func(v GetTopicsResult) []GetTopicsTlsTopic { return v.TlsTopics }).(GetTopicsTlsTopicArrayOutput)
}

// The ID of the tls topic.
func (o GetTopicsResultOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

// The name of the tls topic.
func (o GetTopicsResultOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetTopicsResult) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

// The total count of tls topic query.
func (o GetTopicsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetTopicsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTopicsResultOutput{})
}
