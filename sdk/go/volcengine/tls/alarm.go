// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage tls alarm
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.NewAlarm(ctx, "foo", &tls.AlarmArgs{
//				AlarmName: pulumi.String("test"),
//				AlarmNotifyGroups: pulumi.StringArray{
//					pulumi.String("3019107f-28a2-4208-a2b6-c33fcb97ac3a"),
//				},
//				AlarmPeriodDetail: &tls.AlarmAlarmPeriodDetailArgs{
//					Email:          pulumi.Int(2),
//					GeneralWebhook: pulumi.Int(3),
//					Phone:          pulumi.Int(10),
//					Sms:            pulumi.Int(10),
//				},
//				Condition: pulumi.String("$1.errNum>0"),
//				ProjectId: pulumi.String("cc44f8b6-0328-4622-b043-023fca735cd4"),
//				QueryRequests: tls.AlarmQueryRequestArray{
//					&tls.AlarmQueryRequestArgs{
//						EndTimeOffset:   pulumi.Int(0),
//						Number:          pulumi.Int(1),
//						Query:           pulumi.String("Failed | select count(*) as errNum"),
//						StartTimeOffset: -15,
//						TopicId:         pulumi.String("af1a2240-ba62-4f18-b421-bde2f9684e57"),
//					},
//				},
//				RequestCycle: &tls.AlarmRequestCycleArgs{
//					Time: pulumi.Int(11),
//					Type: pulumi.String("Period"),
//				},
//				UserDefineMsg: pulumi.String("test for terraform"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// tls alarm can be imported using the id and project id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:tls/alarm:Alarm default projectId:fc************
//
// ```
type Alarm struct {
	pulumi.CustomResourceState

	// The alarm id.
	AlarmId pulumi.StringOutput `pulumi:"alarmId"`
	// The name of the alarm.
	AlarmName pulumi.StringOutput `pulumi:"alarmName"`
	// List of notification groups corresponding to the alarm.
	AlarmNotifyGroups pulumi.StringArrayOutput `pulumi:"alarmNotifyGroups"`
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriod pulumi.IntPtrOutput `pulumi:"alarmPeriod"`
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriodDetail AlarmAlarmPeriodDetailPtrOutput `pulumi:"alarmPeriodDetail"`
	// Alarm trigger condition.
	Condition pulumi.StringOutput `pulumi:"condition"`
	// The project id.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Search and analyze sentences, 1~3 can be configured.
	QueryRequests AlarmQueryRequestArrayOutput `pulumi:"queryRequests"`
	// The execution period of the alarm task.
	RequestCycle AlarmRequestCycleOutput `pulumi:"requestCycle"`
	// Whether to enable the alert policy. The default value is true, that is, on.
	Status pulumi.BoolPtrOutput `pulumi:"status"`
	// Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.
	TriggerPeriod pulumi.IntPtrOutput `pulumi:"triggerPeriod"`
	// Customize the alarm notification content.
	UserDefineMsg pulumi.StringPtrOutput `pulumi:"userDefineMsg"`
}

// NewAlarm registers a new resource with the given unique name, arguments, and options.
func NewAlarm(ctx *pulumi.Context,
	name string, args *AlarmArgs, opts ...pulumi.ResourceOption) (*Alarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlarmName == nil {
		return nil, errors.New("invalid value for required argument 'AlarmName'")
	}
	if args.AlarmNotifyGroups == nil {
		return nil, errors.New("invalid value for required argument 'AlarmNotifyGroups'")
	}
	if args.Condition == nil {
		return nil, errors.New("invalid value for required argument 'Condition'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.QueryRequests == nil {
		return nil, errors.New("invalid value for required argument 'QueryRequests'")
	}
	if args.RequestCycle == nil {
		return nil, errors.New("invalid value for required argument 'RequestCycle'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Alarm
	err := ctx.RegisterResource("volcengine:tls/alarm:Alarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlarm gets an existing Alarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlarmState, opts ...pulumi.ResourceOption) (*Alarm, error) {
	var resource Alarm
	err := ctx.ReadResource("volcengine:tls/alarm:Alarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alarm resources.
type alarmState struct {
	// The alarm id.
	AlarmId *string `pulumi:"alarmId"`
	// The name of the alarm.
	AlarmName *string `pulumi:"alarmName"`
	// List of notification groups corresponding to the alarm.
	AlarmNotifyGroups []string `pulumi:"alarmNotifyGroups"`
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriod *int `pulumi:"alarmPeriod"`
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriodDetail *AlarmAlarmPeriodDetail `pulumi:"alarmPeriodDetail"`
	// Alarm trigger condition.
	Condition *string `pulumi:"condition"`
	// The project id.
	ProjectId *string `pulumi:"projectId"`
	// Search and analyze sentences, 1~3 can be configured.
	QueryRequests []AlarmQueryRequest `pulumi:"queryRequests"`
	// The execution period of the alarm task.
	RequestCycle *AlarmRequestCycle `pulumi:"requestCycle"`
	// Whether to enable the alert policy. The default value is true, that is, on.
	Status *bool `pulumi:"status"`
	// Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.
	TriggerPeriod *int `pulumi:"triggerPeriod"`
	// Customize the alarm notification content.
	UserDefineMsg *string `pulumi:"userDefineMsg"`
}

type AlarmState struct {
	// The alarm id.
	AlarmId pulumi.StringPtrInput
	// The name of the alarm.
	AlarmName pulumi.StringPtrInput
	// List of notification groups corresponding to the alarm.
	AlarmNotifyGroups pulumi.StringArrayInput
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriod pulumi.IntPtrInput
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriodDetail AlarmAlarmPeriodDetailPtrInput
	// Alarm trigger condition.
	Condition pulumi.StringPtrInput
	// The project id.
	ProjectId pulumi.StringPtrInput
	// Search and analyze sentences, 1~3 can be configured.
	QueryRequests AlarmQueryRequestArrayInput
	// The execution period of the alarm task.
	RequestCycle AlarmRequestCyclePtrInput
	// Whether to enable the alert policy. The default value is true, that is, on.
	Status pulumi.BoolPtrInput
	// Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.
	TriggerPeriod pulumi.IntPtrInput
	// Customize the alarm notification content.
	UserDefineMsg pulumi.StringPtrInput
}

func (AlarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmState)(nil)).Elem()
}

type alarmArgs struct {
	// The name of the alarm.
	AlarmName string `pulumi:"alarmName"`
	// List of notification groups corresponding to the alarm.
	AlarmNotifyGroups []string `pulumi:"alarmNotifyGroups"`
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriod *int `pulumi:"alarmPeriod"`
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriodDetail *AlarmAlarmPeriodDetail `pulumi:"alarmPeriodDetail"`
	// Alarm trigger condition.
	Condition string `pulumi:"condition"`
	// The project id.
	ProjectId string `pulumi:"projectId"`
	// Search and analyze sentences, 1~3 can be configured.
	QueryRequests []AlarmQueryRequest `pulumi:"queryRequests"`
	// The execution period of the alarm task.
	RequestCycle AlarmRequestCycle `pulumi:"requestCycle"`
	// Whether to enable the alert policy. The default value is true, that is, on.
	Status *bool `pulumi:"status"`
	// Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.
	TriggerPeriod *int `pulumi:"triggerPeriod"`
	// Customize the alarm notification content.
	UserDefineMsg *string `pulumi:"userDefineMsg"`
}

// The set of arguments for constructing a Alarm resource.
type AlarmArgs struct {
	// The name of the alarm.
	AlarmName pulumi.StringInput
	// List of notification groups corresponding to the alarm.
	AlarmNotifyGroups pulumi.StringArrayInput
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriod pulumi.IntPtrInput
	// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
	AlarmPeriodDetail AlarmAlarmPeriodDetailPtrInput
	// Alarm trigger condition.
	Condition pulumi.StringInput
	// The project id.
	ProjectId pulumi.StringInput
	// Search and analyze sentences, 1~3 can be configured.
	QueryRequests AlarmQueryRequestArrayInput
	// The execution period of the alarm task.
	RequestCycle AlarmRequestCycleInput
	// Whether to enable the alert policy. The default value is true, that is, on.
	Status pulumi.BoolPtrInput
	// Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.
	TriggerPeriod pulumi.IntPtrInput
	// Customize the alarm notification content.
	UserDefineMsg pulumi.StringPtrInput
}

func (AlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alarmArgs)(nil)).Elem()
}

type AlarmInput interface {
	pulumi.Input

	ToAlarmOutput() AlarmOutput
	ToAlarmOutputWithContext(ctx context.Context) AlarmOutput
}

func (*Alarm) ElementType() reflect.Type {
	return reflect.TypeOf((**Alarm)(nil)).Elem()
}

func (i *Alarm) ToAlarmOutput() AlarmOutput {
	return i.ToAlarmOutputWithContext(context.Background())
}

func (i *Alarm) ToAlarmOutputWithContext(ctx context.Context) AlarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmOutput)
}

// AlarmArrayInput is an input type that accepts AlarmArray and AlarmArrayOutput values.
// You can construct a concrete instance of `AlarmArrayInput` via:
//
//	AlarmArray{ AlarmArgs{...} }
type AlarmArrayInput interface {
	pulumi.Input

	ToAlarmArrayOutput() AlarmArrayOutput
	ToAlarmArrayOutputWithContext(context.Context) AlarmArrayOutput
}

type AlarmArray []AlarmInput

func (AlarmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alarm)(nil)).Elem()
}

func (i AlarmArray) ToAlarmArrayOutput() AlarmArrayOutput {
	return i.ToAlarmArrayOutputWithContext(context.Background())
}

func (i AlarmArray) ToAlarmArrayOutputWithContext(ctx context.Context) AlarmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmArrayOutput)
}

// AlarmMapInput is an input type that accepts AlarmMap and AlarmMapOutput values.
// You can construct a concrete instance of `AlarmMapInput` via:
//
//	AlarmMap{ "key": AlarmArgs{...} }
type AlarmMapInput interface {
	pulumi.Input

	ToAlarmMapOutput() AlarmMapOutput
	ToAlarmMapOutputWithContext(context.Context) AlarmMapOutput
}

type AlarmMap map[string]AlarmInput

func (AlarmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alarm)(nil)).Elem()
}

func (i AlarmMap) ToAlarmMapOutput() AlarmMapOutput {
	return i.ToAlarmMapOutputWithContext(context.Background())
}

func (i AlarmMap) ToAlarmMapOutputWithContext(ctx context.Context) AlarmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlarmMapOutput)
}

type AlarmOutput struct{ *pulumi.OutputState }

func (AlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alarm)(nil)).Elem()
}

func (o AlarmOutput) ToAlarmOutput() AlarmOutput {
	return o
}

func (o AlarmOutput) ToAlarmOutputWithContext(ctx context.Context) AlarmOutput {
	return o
}

// The alarm id.
func (o AlarmOutput) AlarmId() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarm) pulumi.StringOutput { return v.AlarmId }).(pulumi.StringOutput)
}

// The name of the alarm.
func (o AlarmOutput) AlarmName() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarm) pulumi.StringOutput { return v.AlarmName }).(pulumi.StringOutput)
}

// List of notification groups corresponding to the alarm.
func (o AlarmOutput) AlarmNotifyGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Alarm) pulumi.StringArrayOutput { return v.AlarmNotifyGroups }).(pulumi.StringArrayOutput)
}

// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
func (o AlarmOutput) AlarmPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Alarm) pulumi.IntPtrOutput { return v.AlarmPeriod }).(pulumi.IntPtrOutput)
}

// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
func (o AlarmOutput) AlarmPeriodDetail() AlarmAlarmPeriodDetailPtrOutput {
	return o.ApplyT(func(v *Alarm) AlarmAlarmPeriodDetailPtrOutput { return v.AlarmPeriodDetail }).(AlarmAlarmPeriodDetailPtrOutput)
}

// Alarm trigger condition.
func (o AlarmOutput) Condition() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarm) pulumi.StringOutput { return v.Condition }).(pulumi.StringOutput)
}

// The project id.
func (o AlarmOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *Alarm) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Search and analyze sentences, 1~3 can be configured.
func (o AlarmOutput) QueryRequests() AlarmQueryRequestArrayOutput {
	return o.ApplyT(func(v *Alarm) AlarmQueryRequestArrayOutput { return v.QueryRequests }).(AlarmQueryRequestArrayOutput)
}

// The execution period of the alarm task.
func (o AlarmOutput) RequestCycle() AlarmRequestCycleOutput {
	return o.ApplyT(func(v *Alarm) AlarmRequestCycleOutput { return v.RequestCycle }).(AlarmRequestCycleOutput)
}

// Whether to enable the alert policy. The default value is true, that is, on.
func (o AlarmOutput) Status() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Alarm) pulumi.BoolPtrOutput { return v.Status }).(pulumi.BoolPtrOutput)
}

// Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.
func (o AlarmOutput) TriggerPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Alarm) pulumi.IntPtrOutput { return v.TriggerPeriod }).(pulumi.IntPtrOutput)
}

// Customize the alarm notification content.
func (o AlarmOutput) UserDefineMsg() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Alarm) pulumi.StringPtrOutput { return v.UserDefineMsg }).(pulumi.StringPtrOutput)
}

type AlarmArrayOutput struct{ *pulumi.OutputState }

func (AlarmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alarm)(nil)).Elem()
}

func (o AlarmArrayOutput) ToAlarmArrayOutput() AlarmArrayOutput {
	return o
}

func (o AlarmArrayOutput) ToAlarmArrayOutputWithContext(ctx context.Context) AlarmArrayOutput {
	return o
}

func (o AlarmArrayOutput) Index(i pulumi.IntInput) AlarmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alarm {
		return vs[0].([]*Alarm)[vs[1].(int)]
	}).(AlarmOutput)
}

type AlarmMapOutput struct{ *pulumi.OutputState }

func (AlarmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alarm)(nil)).Elem()
}

func (o AlarmMapOutput) ToAlarmMapOutput() AlarmMapOutput {
	return o
}

func (o AlarmMapOutput) ToAlarmMapOutputWithContext(ctx context.Context) AlarmMapOutput {
	return o
}

func (o AlarmMapOutput) MapIndex(k pulumi.StringInput) AlarmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alarm {
		return vs[0].(map[string]*Alarm)[vs[1].(string)]
	}).(AlarmOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmInput)(nil)).Elem(), &Alarm{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmArrayInput)(nil)).Elem(), AlarmArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlarmMapInput)(nil)).Elem(), AlarmMap{})
	pulumi.RegisterOutputType(AlarmOutput{})
	pulumi.RegisterOutputType(AlarmArrayOutput{})
	pulumi.RegisterOutputType(AlarmMapOutput{})
}
