// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tls alarm notify groups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.GetAlarmNotifyGroups(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAlarmNotifyGroups(ctx *pulumi.Context, args *GetAlarmNotifyGroupsArgs, opts ...pulumi.InvokeOption) (*GetAlarmNotifyGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAlarmNotifyGroupsResult
	err := ctx.Invoke("volcengine:tls/getAlarmNotifyGroups:getAlarmNotifyGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlarmNotifyGroups.
type GetAlarmNotifyGroupsArgs struct {
	// The id of the alarm notify group.
	AlarmNotifyGroupId *string `pulumi:"alarmNotifyGroupId"`
	// The name of the alarm notify group.
	AlarmNotifyGroupName *string `pulumi:"alarmNotifyGroupName"`
	// The name of the iam project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The name of the receiver.
	ReceiverName *string `pulumi:"receiverName"`
}

// A collection of values returned by getAlarmNotifyGroups.
type GetAlarmNotifyGroupsResult struct {
	// The id of the notify group.
	AlarmNotifyGroupId *string `pulumi:"alarmNotifyGroupId"`
	// Name of the notification group.
	AlarmNotifyGroupName *string `pulumi:"alarmNotifyGroupName"`
	// The list of the notify groups.
	Groups []GetAlarmNotifyGroupsGroup `pulumi:"groups"`
	// The iam project name.
	IamProjectName *string `pulumi:"iamProjectName"`
	// The provider-assigned unique ID for this managed resource.
	Id           string  `pulumi:"id"`
	OutputFile   *string `pulumi:"outputFile"`
	ReceiverName *string `pulumi:"receiverName"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetAlarmNotifyGroupsOutput(ctx *pulumi.Context, args GetAlarmNotifyGroupsOutputArgs, opts ...pulumi.InvokeOption) GetAlarmNotifyGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAlarmNotifyGroupsResult, error) {
			args := v.(GetAlarmNotifyGroupsArgs)
			r, err := GetAlarmNotifyGroups(ctx, &args, opts...)
			var s GetAlarmNotifyGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAlarmNotifyGroupsResultOutput)
}

// A collection of arguments for invoking getAlarmNotifyGroups.
type GetAlarmNotifyGroupsOutputArgs struct {
	// The id of the alarm notify group.
	AlarmNotifyGroupId pulumi.StringPtrInput `pulumi:"alarmNotifyGroupId"`
	// The name of the alarm notify group.
	AlarmNotifyGroupName pulumi.StringPtrInput `pulumi:"alarmNotifyGroupName"`
	// The name of the iam project.
	IamProjectName pulumi.StringPtrInput `pulumi:"iamProjectName"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The name of the receiver.
	ReceiverName pulumi.StringPtrInput `pulumi:"receiverName"`
}

func (GetAlarmNotifyGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmNotifyGroupsArgs)(nil)).Elem()
}

// A collection of values returned by getAlarmNotifyGroups.
type GetAlarmNotifyGroupsResultOutput struct{ *pulumi.OutputState }

func (GetAlarmNotifyGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmNotifyGroupsResult)(nil)).Elem()
}

func (o GetAlarmNotifyGroupsResultOutput) ToGetAlarmNotifyGroupsResultOutput() GetAlarmNotifyGroupsResultOutput {
	return o
}

func (o GetAlarmNotifyGroupsResultOutput) ToGetAlarmNotifyGroupsResultOutputWithContext(ctx context.Context) GetAlarmNotifyGroupsResultOutput {
	return o
}

// The id of the notify group.
func (o GetAlarmNotifyGroupsResultOutput) AlarmNotifyGroupId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmNotifyGroupsResult) *string { return v.AlarmNotifyGroupId }).(pulumi.StringPtrOutput)
}

// Name of the notification group.
func (o GetAlarmNotifyGroupsResultOutput) AlarmNotifyGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmNotifyGroupsResult) *string { return v.AlarmNotifyGroupName }).(pulumi.StringPtrOutput)
}

// The list of the notify groups.
func (o GetAlarmNotifyGroupsResultOutput) Groups() GetAlarmNotifyGroupsGroupArrayOutput {
	return o.ApplyT(func(v GetAlarmNotifyGroupsResult) []GetAlarmNotifyGroupsGroup { return v.Groups }).(GetAlarmNotifyGroupsGroupArrayOutput)
}

// The iam project name.
func (o GetAlarmNotifyGroupsResultOutput) IamProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmNotifyGroupsResult) *string { return v.IamProjectName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAlarmNotifyGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlarmNotifyGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAlarmNotifyGroupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmNotifyGroupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetAlarmNotifyGroupsResultOutput) ReceiverName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmNotifyGroupsResult) *string { return v.ReceiverName }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetAlarmNotifyGroupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetAlarmNotifyGroupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAlarmNotifyGroupsResultOutput{})
}
