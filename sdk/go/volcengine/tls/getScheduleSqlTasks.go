// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tls schedule sql tasks
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.GetScheduleSqlTasks(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetScheduleSqlTasks(ctx *pulumi.Context, args *GetScheduleSqlTasksArgs, opts ...pulumi.InvokeOption) (*GetScheduleSqlTasksResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetScheduleSqlTasksResult
	err := ctx.Invoke("volcengine:tls/getScheduleSqlTasks:getScheduleSqlTasks", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getScheduleSqlTasks.
type GetScheduleSqlTasksArgs struct {
	// IAM log project name.
	IamProjectName *string `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The log project ID to which the source log topic belongs.
	ProjectId *string `pulumi:"projectId"`
	// The name of the log item to which the source log topic belongs.
	ProjectName *string `pulumi:"projectName"`
	// Source log topic name.
	SourceTopicName *string `pulumi:"sourceTopicName"`
	// Timed SQL analysis task status.
	Status *string `pulumi:"status"`
	// Timed SQL analysis task ID.
	TaskId *string `pulumi:"taskId"`
	// Timed SQL analysis task name.
	TaskName *string `pulumi:"taskName"`
	// Source log topic ID.
	TopicId *string `pulumi:"topicId"`
}

// A collection of values returned by getScheduleSqlTasks.
type GetScheduleSqlTasksResult struct {
	IamProjectName *string `pulumi:"iamProjectName"`
	// The provider-assigned unique ID for this managed resource.
	Id          string  `pulumi:"id"`
	NameRegex   *string `pulumi:"nameRegex"`
	OutputFile  *string `pulumi:"outputFile"`
	ProjectId   *string `pulumi:"projectId"`
	ProjectName *string `pulumi:"projectName"`
	// The name of the source log topic where the original log for timed SQL analysis is located.
	SourceTopicName *string `pulumi:"sourceTopicName"`
	// Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
	Status *string `pulumi:"status"`
	// Timed SQL analysis task ID.
	TaskId *string `pulumi:"taskId"`
	// Timed SQL analysis task name.
	TaskName *string `pulumi:"taskName"`
	// The List of timed SQL analysis tasks.
	Tasks   []GetScheduleSqlTasksTask `pulumi:"tasks"`
	TopicId *string                   `pulumi:"topicId"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetScheduleSqlTasksOutput(ctx *pulumi.Context, args GetScheduleSqlTasksOutputArgs, opts ...pulumi.InvokeOption) GetScheduleSqlTasksResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetScheduleSqlTasksResult, error) {
			args := v.(GetScheduleSqlTasksArgs)
			r, err := GetScheduleSqlTasks(ctx, &args, opts...)
			var s GetScheduleSqlTasksResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetScheduleSqlTasksResultOutput)
}

// A collection of arguments for invoking getScheduleSqlTasks.
type GetScheduleSqlTasksOutputArgs struct {
	// IAM log project name.
	IamProjectName pulumi.StringPtrInput `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The log project ID to which the source log topic belongs.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The name of the log item to which the source log topic belongs.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// Source log topic name.
	SourceTopicName pulumi.StringPtrInput `pulumi:"sourceTopicName"`
	// Timed SQL analysis task status.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Timed SQL analysis task ID.
	TaskId pulumi.StringPtrInput `pulumi:"taskId"`
	// Timed SQL analysis task name.
	TaskName pulumi.StringPtrInput `pulumi:"taskName"`
	// Source log topic ID.
	TopicId pulumi.StringPtrInput `pulumi:"topicId"`
}

func (GetScheduleSqlTasksOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduleSqlTasksArgs)(nil)).Elem()
}

// A collection of values returned by getScheduleSqlTasks.
type GetScheduleSqlTasksResultOutput struct{ *pulumi.OutputState }

func (GetScheduleSqlTasksResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetScheduleSqlTasksResult)(nil)).Elem()
}

func (o GetScheduleSqlTasksResultOutput) ToGetScheduleSqlTasksResultOutput() GetScheduleSqlTasksResultOutput {
	return o
}

func (o GetScheduleSqlTasksResultOutput) ToGetScheduleSqlTasksResultOutputWithContext(ctx context.Context) GetScheduleSqlTasksResultOutput {
	return o
}

func (o GetScheduleSqlTasksResultOutput) IamProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.IamProjectName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetScheduleSqlTasksResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetScheduleSqlTasksResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o GetScheduleSqlTasksResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

func (o GetScheduleSqlTasksResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

func (o GetScheduleSqlTasksResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The name of the source log topic where the original log for timed SQL analysis is located.
func (o GetScheduleSqlTasksResultOutput) SourceTopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.SourceTopicName }).(pulumi.StringPtrOutput)
}

// Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
func (o GetScheduleSqlTasksResultOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Timed SQL analysis task ID.
func (o GetScheduleSqlTasksResultOutput) TaskId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.TaskId }).(pulumi.StringPtrOutput)
}

// Timed SQL analysis task name.
func (o GetScheduleSqlTasksResultOutput) TaskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.TaskName }).(pulumi.StringPtrOutput)
}

// The List of timed SQL analysis tasks.
func (o GetScheduleSqlTasksResultOutput) Tasks() GetScheduleSqlTasksTaskArrayOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) []GetScheduleSqlTasksTask { return v.Tasks }).(GetScheduleSqlTasksTaskArrayOutput)
}

func (o GetScheduleSqlTasksResultOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetScheduleSqlTasksResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetScheduleSqlTasksResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetScheduleSqlTasksResultOutput{})
}
