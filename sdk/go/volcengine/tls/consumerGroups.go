// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tls consumer groups
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.GetConsumerGroups(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.tls.ConsumerGroups has been deprecated in favor of volcengine.tls.getConsumerGroups
func ConsumerGroups(ctx *pulumi.Context, args *ConsumerGroupsArgs, opts ...pulumi.InvokeOption) (*ConsumerGroupsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ConsumerGroupsResult
	err := ctx.Invoke("volcengine:tls/consumerGroups:ConsumerGroups", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ConsumerGroups.
type ConsumerGroupsArgs struct {
	// The name of the consumer group.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// IAM log project name.
	IamProjectName *string `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The log project ID to which the consumption group belongs.
	ProjectId *string `pulumi:"projectId"`
	// The name of the log item to which the consumption group belongs.
	ProjectName *string `pulumi:"projectName"`
	// The log topic ID to which the consumer belongs.
	TopicId *string `pulumi:"topicId"`
	// The name of the log topic to which the consumption group belongs.
	TopicName *string `pulumi:"topicName"`
}

// A collection of values returned by ConsumerGroups.
type ConsumerGroupsResult struct {
	// The name of the consumer group.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// List of log service consumption groups.
	ConsumerGroups []ConsumerGroupsConsumerGroup `pulumi:"consumerGroups"`
	IamProjectName *string                       `pulumi:"iamProjectName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The log project ID to which the consumption group belongs.
	ProjectId *string `pulumi:"projectId"`
	// The name of the log item to which the consumption group belongs.
	ProjectName *string `pulumi:"projectName"`
	// The list of log topic ids to be consumed by the consumer group.
	TopicId   *string `pulumi:"topicId"`
	TopicName *string `pulumi:"topicName"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ConsumerGroupsOutput(ctx *pulumi.Context, args ConsumerGroupsOutputArgs, opts ...pulumi.InvokeOption) ConsumerGroupsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ConsumerGroupsResult, error) {
			args := v.(ConsumerGroupsArgs)
			r, err := ConsumerGroups(ctx, &args, opts...)
			var s ConsumerGroupsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ConsumerGroupsResultOutput)
}

// A collection of arguments for invoking ConsumerGroups.
type ConsumerGroupsOutputArgs struct {
	// The name of the consumer group.
	ConsumerGroupName pulumi.StringPtrInput `pulumi:"consumerGroupName"`
	// IAM log project name.
	IamProjectName pulumi.StringPtrInput `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The log project ID to which the consumption group belongs.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// The name of the log item to which the consumption group belongs.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// The log topic ID to which the consumer belongs.
	TopicId pulumi.StringPtrInput `pulumi:"topicId"`
	// The name of the log topic to which the consumption group belongs.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (ConsumerGroupsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerGroupsArgs)(nil)).Elem()
}

// A collection of values returned by ConsumerGroups.
type ConsumerGroupsResultOutput struct{ *pulumi.OutputState }

func (ConsumerGroupsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ConsumerGroupsResult)(nil)).Elem()
}

func (o ConsumerGroupsResultOutput) ToConsumerGroupsResultOutput() ConsumerGroupsResultOutput {
	return o
}

func (o ConsumerGroupsResultOutput) ToConsumerGroupsResultOutputWithContext(ctx context.Context) ConsumerGroupsResultOutput {
	return o
}

// The name of the consumer group.
func (o ConsumerGroupsResultOutput) ConsumerGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) *string { return v.ConsumerGroupName }).(pulumi.StringPtrOutput)
}

// List of log service consumption groups.
func (o ConsumerGroupsResultOutput) ConsumerGroups() ConsumerGroupsConsumerGroupArrayOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) []ConsumerGroupsConsumerGroup { return v.ConsumerGroups }).(ConsumerGroupsConsumerGroupArrayOutput)
}

func (o ConsumerGroupsResultOutput) IamProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) *string { return v.IamProjectName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ConsumerGroupsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ConsumerGroupsResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ConsumerGroupsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The log project ID to which the consumption group belongs.
func (o ConsumerGroupsResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The name of the log item to which the consumption group belongs.
func (o ConsumerGroupsResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// The list of log topic ids to be consumed by the consumer group.
func (o ConsumerGroupsResultOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

func (o ConsumerGroupsResultOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o ConsumerGroupsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ConsumerGroupsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ConsumerGroupsResultOutput{})
}
