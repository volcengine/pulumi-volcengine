// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage tls shipper
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.NewShipper(ctx, "foo", &tls.ShipperArgs{
//				ContentInfo: &tls.ShipperContentInfoArgs{
//					Format: pulumi.String("json"),
//					JsonInfo: &tls.ShipperContentInfoJsonInfoArgs{
//						Enable: pulumi.Bool(true),
//						Keys: pulumi.StringArray{
//							pulumi.String("__content"),
//							pulumi.String("__pod_name__"),
//							pulumi.String("__path__"),
//							pulumi.String("__tf-test__"),
//						},
//					},
//				},
//				ShipperEndTime:   pulumi.Int(1751255700021),
//				ShipperName:      pulumi.String("tf-test"),
//				ShipperStartTime: pulumi.Int(1750737324521),
//				ShipperType:      pulumi.String("tos"),
//				TopicId:          pulumi.String("8ba48bd7-2493-4300-b1d0-cb7xxxxxx"),
//				TosShipperInfo: &tls.ShipperTosShipperInfoArgs{
//					Bucket:          pulumi.String("tf-test"),
//					Compress:        pulumi.String("snappy"),
//					Interval:        pulumi.Int(100),
//					MaxSize:         pulumi.Int(100),
//					PartitionFormat: pulumi.String("%Y/%m/%d/%H/%M"),
//					Prefix:          pulumi.String("terraform_1.9.4_linux_amd64.zip"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Shipper can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:tls/shipper:Shipper default resource_id
// ```
type Shipper struct {
	pulumi.CustomResourceState

	// Configuration of the delivery format for log content.
	ContentInfo ShipperContentInfoOutput `pulumi:"contentInfo"`
	// JSON format log content configuration.
	KafkaShipperInfo ShipperKafkaShipperInfoOutput `pulumi:"kafkaShipperInfo"`
	// Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperEndTime pulumi.IntPtrOutput `pulumi:"shipperEndTime"`
	// Delivery configuration name.
	ShipperName pulumi.StringOutput `pulumi:"shipperName"`
	// Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperStartTime pulumi.IntPtrOutput `pulumi:"shipperStartTime"`
	// The type of delivery.
	ShipperType pulumi.StringOutput `pulumi:"shipperType"`
	// Whether to enable the delivery configuration. The default value is true.
	Status pulumi.BoolOutput `pulumi:"status"`
	// The log topic ID where the log to be delivered is located.
	TopicId pulumi.StringOutput `pulumi:"topicId"`
	// Deliver the relevant configuration to the object storage (TOS).
	TosShipperInfo ShipperTosShipperInfoOutput `pulumi:"tosShipperInfo"`
}

// NewShipper registers a new resource with the given unique name, arguments, and options.
func NewShipper(ctx *pulumi.Context,
	name string, args *ShipperArgs, opts ...pulumi.ResourceOption) (*Shipper, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ContentInfo == nil {
		return nil, errors.New("invalid value for required argument 'ContentInfo'")
	}
	if args.ShipperName == nil {
		return nil, errors.New("invalid value for required argument 'ShipperName'")
	}
	if args.TopicId == nil {
		return nil, errors.New("invalid value for required argument 'TopicId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Shipper
	err := ctx.RegisterResource("volcengine:tls/shipper:Shipper", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetShipper gets an existing Shipper resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetShipper(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ShipperState, opts ...pulumi.ResourceOption) (*Shipper, error) {
	var resource Shipper
	err := ctx.ReadResource("volcengine:tls/shipper:Shipper", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Shipper resources.
type shipperState struct {
	// Configuration of the delivery format for log content.
	ContentInfo *ShipperContentInfo `pulumi:"contentInfo"`
	// JSON format log content configuration.
	KafkaShipperInfo *ShipperKafkaShipperInfo `pulumi:"kafkaShipperInfo"`
	// Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperEndTime *int `pulumi:"shipperEndTime"`
	// Delivery configuration name.
	ShipperName *string `pulumi:"shipperName"`
	// Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperStartTime *int `pulumi:"shipperStartTime"`
	// The type of delivery.
	ShipperType *string `pulumi:"shipperType"`
	// Whether to enable the delivery configuration. The default value is true.
	Status *bool `pulumi:"status"`
	// The log topic ID where the log to be delivered is located.
	TopicId *string `pulumi:"topicId"`
	// Deliver the relevant configuration to the object storage (TOS).
	TosShipperInfo *ShipperTosShipperInfo `pulumi:"tosShipperInfo"`
}

type ShipperState struct {
	// Configuration of the delivery format for log content.
	ContentInfo ShipperContentInfoPtrInput
	// JSON format log content configuration.
	KafkaShipperInfo ShipperKafkaShipperInfoPtrInput
	// Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperEndTime pulumi.IntPtrInput
	// Delivery configuration name.
	ShipperName pulumi.StringPtrInput
	// Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperStartTime pulumi.IntPtrInput
	// The type of delivery.
	ShipperType pulumi.StringPtrInput
	// Whether to enable the delivery configuration. The default value is true.
	Status pulumi.BoolPtrInput
	// The log topic ID where the log to be delivered is located.
	TopicId pulumi.StringPtrInput
	// Deliver the relevant configuration to the object storage (TOS).
	TosShipperInfo ShipperTosShipperInfoPtrInput
}

func (ShipperState) ElementType() reflect.Type {
	return reflect.TypeOf((*shipperState)(nil)).Elem()
}

type shipperArgs struct {
	// Configuration of the delivery format for log content.
	ContentInfo ShipperContentInfo `pulumi:"contentInfo"`
	// JSON format log content configuration.
	KafkaShipperInfo *ShipperKafkaShipperInfo `pulumi:"kafkaShipperInfo"`
	// Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperEndTime *int `pulumi:"shipperEndTime"`
	// Delivery configuration name.
	ShipperName string `pulumi:"shipperName"`
	// Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperStartTime *int `pulumi:"shipperStartTime"`
	// The type of delivery.
	ShipperType *string `pulumi:"shipperType"`
	// Whether to enable the delivery configuration. The default value is true.
	Status *bool `pulumi:"status"`
	// The log topic ID where the log to be delivered is located.
	TopicId string `pulumi:"topicId"`
	// Deliver the relevant configuration to the object storage (TOS).
	TosShipperInfo *ShipperTosShipperInfo `pulumi:"tosShipperInfo"`
}

// The set of arguments for constructing a Shipper resource.
type ShipperArgs struct {
	// Configuration of the delivery format for log content.
	ContentInfo ShipperContentInfoInput
	// JSON format log content configuration.
	KafkaShipperInfo ShipperKafkaShipperInfoPtrInput
	// Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperEndTime pulumi.IntPtrInput
	// Delivery configuration name.
	ShipperName pulumi.StringInput
	// Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	ShipperStartTime pulumi.IntPtrInput
	// The type of delivery.
	ShipperType pulumi.StringPtrInput
	// Whether to enable the delivery configuration. The default value is true.
	Status pulumi.BoolPtrInput
	// The log topic ID where the log to be delivered is located.
	TopicId pulumi.StringInput
	// Deliver the relevant configuration to the object storage (TOS).
	TosShipperInfo ShipperTosShipperInfoPtrInput
}

func (ShipperArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*shipperArgs)(nil)).Elem()
}

type ShipperInput interface {
	pulumi.Input

	ToShipperOutput() ShipperOutput
	ToShipperOutputWithContext(ctx context.Context) ShipperOutput
}

func (*Shipper) ElementType() reflect.Type {
	return reflect.TypeOf((**Shipper)(nil)).Elem()
}

func (i *Shipper) ToShipperOutput() ShipperOutput {
	return i.ToShipperOutputWithContext(context.Background())
}

func (i *Shipper) ToShipperOutputWithContext(ctx context.Context) ShipperOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShipperOutput)
}

// ShipperArrayInput is an input type that accepts ShipperArray and ShipperArrayOutput values.
// You can construct a concrete instance of `ShipperArrayInput` via:
//
//	ShipperArray{ ShipperArgs{...} }
type ShipperArrayInput interface {
	pulumi.Input

	ToShipperArrayOutput() ShipperArrayOutput
	ToShipperArrayOutputWithContext(context.Context) ShipperArrayOutput
}

type ShipperArray []ShipperInput

func (ShipperArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Shipper)(nil)).Elem()
}

func (i ShipperArray) ToShipperArrayOutput() ShipperArrayOutput {
	return i.ToShipperArrayOutputWithContext(context.Background())
}

func (i ShipperArray) ToShipperArrayOutputWithContext(ctx context.Context) ShipperArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShipperArrayOutput)
}

// ShipperMapInput is an input type that accepts ShipperMap and ShipperMapOutput values.
// You can construct a concrete instance of `ShipperMapInput` via:
//
//	ShipperMap{ "key": ShipperArgs{...} }
type ShipperMapInput interface {
	pulumi.Input

	ToShipperMapOutput() ShipperMapOutput
	ToShipperMapOutputWithContext(context.Context) ShipperMapOutput
}

type ShipperMap map[string]ShipperInput

func (ShipperMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Shipper)(nil)).Elem()
}

func (i ShipperMap) ToShipperMapOutput() ShipperMapOutput {
	return i.ToShipperMapOutputWithContext(context.Background())
}

func (i ShipperMap) ToShipperMapOutputWithContext(ctx context.Context) ShipperMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ShipperMapOutput)
}

type ShipperOutput struct{ *pulumi.OutputState }

func (ShipperOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Shipper)(nil)).Elem()
}

func (o ShipperOutput) ToShipperOutput() ShipperOutput {
	return o
}

func (o ShipperOutput) ToShipperOutputWithContext(ctx context.Context) ShipperOutput {
	return o
}

// Configuration of the delivery format for log content.
func (o ShipperOutput) ContentInfo() ShipperContentInfoOutput {
	return o.ApplyT(func(v *Shipper) ShipperContentInfoOutput { return v.ContentInfo }).(ShipperContentInfoOutput)
}

// JSON format log content configuration.
func (o ShipperOutput) KafkaShipperInfo() ShipperKafkaShipperInfoOutput {
	return o.ApplyT(func(v *Shipper) ShipperKafkaShipperInfoOutput { return v.KafkaShipperInfo }).(ShipperKafkaShipperInfoOutput)
}

// Delivery end time, millisecond timestamp. If not configured, it will keep delivering. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o ShipperOutput) ShipperEndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Shipper) pulumi.IntPtrOutput { return v.ShipperEndTime }).(pulumi.IntPtrOutput)
}

// Delivery configuration name.
func (o ShipperOutput) ShipperName() pulumi.StringOutput {
	return o.ApplyT(func(v *Shipper) pulumi.StringOutput { return v.ShipperName }).(pulumi.StringOutput)
}

// Delivery start time, millisecond timestamp. If not configured, it defaults to the current time. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o ShipperOutput) ShipperStartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Shipper) pulumi.IntPtrOutput { return v.ShipperStartTime }).(pulumi.IntPtrOutput)
}

// The type of delivery.
func (o ShipperOutput) ShipperType() pulumi.StringOutput {
	return o.ApplyT(func(v *Shipper) pulumi.StringOutput { return v.ShipperType }).(pulumi.StringOutput)
}

// Whether to enable the delivery configuration. The default value is true.
func (o ShipperOutput) Status() pulumi.BoolOutput {
	return o.ApplyT(func(v *Shipper) pulumi.BoolOutput { return v.Status }).(pulumi.BoolOutput)
}

// The log topic ID where the log to be delivered is located.
func (o ShipperOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *Shipper) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

// Deliver the relevant configuration to the object storage (TOS).
func (o ShipperOutput) TosShipperInfo() ShipperTosShipperInfoOutput {
	return o.ApplyT(func(v *Shipper) ShipperTosShipperInfoOutput { return v.TosShipperInfo }).(ShipperTosShipperInfoOutput)
}

type ShipperArrayOutput struct{ *pulumi.OutputState }

func (ShipperArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Shipper)(nil)).Elem()
}

func (o ShipperArrayOutput) ToShipperArrayOutput() ShipperArrayOutput {
	return o
}

func (o ShipperArrayOutput) ToShipperArrayOutputWithContext(ctx context.Context) ShipperArrayOutput {
	return o
}

func (o ShipperArrayOutput) Index(i pulumi.IntInput) ShipperOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Shipper {
		return vs[0].([]*Shipper)[vs[1].(int)]
	}).(ShipperOutput)
}

type ShipperMapOutput struct{ *pulumi.OutputState }

func (ShipperMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Shipper)(nil)).Elem()
}

func (o ShipperMapOutput) ToShipperMapOutput() ShipperMapOutput {
	return o
}

func (o ShipperMapOutput) ToShipperMapOutputWithContext(ctx context.Context) ShipperMapOutput {
	return o
}

func (o ShipperMapOutput) MapIndex(k pulumi.StringInput) ShipperOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Shipper {
		return vs[0].(map[string]*Shipper)[vs[1].(string)]
	}).(ShipperOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ShipperInput)(nil)).Elem(), &Shipper{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShipperArrayInput)(nil)).Elem(), ShipperArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ShipperMapInput)(nil)).Elem(), ShipperMap{})
	pulumi.RegisterOutputType(ShipperOutput{})
	pulumi.RegisterOutputType(ShipperArrayOutput{})
	pulumi.RegisterOutputType(ShipperMapOutput{})
}
