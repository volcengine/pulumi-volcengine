// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage tls project
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.NewProject(ctx, "foo", &tls.ProjectArgs{
//				Description:    pulumi.String("tf-desc"),
//				IamProjectName: pulumi.String("default"),
//				ProjectName:    pulumi.String("tf-test"),
//				Tags: tls.ProjectTagArray{
//					&tls.ProjectTagArgs{
//						Key:   pulumi.String("k1"),
//						Value: pulumi.String("v1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Tls Project can be imported using the id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:tls/project:Project default e020c978-4f05-40e1-9167-0113d3ef****
//
// ```
type Project struct {
	pulumi.CustomResourceState

	// The create time of the tls project.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The description of the tls project.
	Description pulumi.StringOutput `pulumi:"description"`
	// The IAM project name of the tls project.
	IamProjectName pulumi.StringOutput `pulumi:"iamProjectName"`
	// The inner net domain of the tls project.
	InnerNetDomain pulumi.StringOutput `pulumi:"innerNetDomain"`
	// The name of the tls project.
	ProjectName pulumi.StringOutput `pulumi:"projectName"`
	// Tags.
	Tags ProjectTagArrayOutput `pulumi:"tags"`
	// The count of topics in the tls project.
	TopicCount pulumi.IntOutput `pulumi:"topicCount"`
}

// NewProject registers a new resource with the given unique name, arguments, and options.
func NewProject(ctx *pulumi.Context,
	name string, args *ProjectArgs, opts ...pulumi.ResourceOption) (*Project, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectName == nil {
		return nil, errors.New("invalid value for required argument 'ProjectName'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Project
	err := ctx.RegisterResource("volcengine:tls/project:Project", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProject gets an existing Project resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProjectState, opts ...pulumi.ResourceOption) (*Project, error) {
	var resource Project
	err := ctx.ReadResource("volcengine:tls/project:Project", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Project resources.
type projectState struct {
	// The create time of the tls project.
	CreateTime *string `pulumi:"createTime"`
	// The description of the tls project.
	Description *string `pulumi:"description"`
	// The IAM project name of the tls project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// The inner net domain of the tls project.
	InnerNetDomain *string `pulumi:"innerNetDomain"`
	// The name of the tls project.
	ProjectName *string `pulumi:"projectName"`
	// Tags.
	Tags []ProjectTag `pulumi:"tags"`
	// The count of topics in the tls project.
	TopicCount *int `pulumi:"topicCount"`
}

type ProjectState struct {
	// The create time of the tls project.
	CreateTime pulumi.StringPtrInput
	// The description of the tls project.
	Description pulumi.StringPtrInput
	// The IAM project name of the tls project.
	IamProjectName pulumi.StringPtrInput
	// The inner net domain of the tls project.
	InnerNetDomain pulumi.StringPtrInput
	// The name of the tls project.
	ProjectName pulumi.StringPtrInput
	// Tags.
	Tags ProjectTagArrayInput
	// The count of topics in the tls project.
	TopicCount pulumi.IntPtrInput
}

func (ProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*projectState)(nil)).Elem()
}

type projectArgs struct {
	// The description of the tls project.
	Description *string `pulumi:"description"`
	// The IAM project name of the tls project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// The name of the tls project.
	ProjectName string `pulumi:"projectName"`
	// Tags.
	Tags []ProjectTag `pulumi:"tags"`
}

// The set of arguments for constructing a Project resource.
type ProjectArgs struct {
	// The description of the tls project.
	Description pulumi.StringPtrInput
	// The IAM project name of the tls project.
	IamProjectName pulumi.StringPtrInput
	// The name of the tls project.
	ProjectName pulumi.StringInput
	// Tags.
	Tags ProjectTagArrayInput
}

func (ProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*projectArgs)(nil)).Elem()
}

type ProjectInput interface {
	pulumi.Input

	ToProjectOutput() ProjectOutput
	ToProjectOutputWithContext(ctx context.Context) ProjectOutput
}

func (*Project) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (i *Project) ToProjectOutput() ProjectOutput {
	return i.ToProjectOutputWithContext(context.Background())
}

func (i *Project) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectOutput)
}

// ProjectArrayInput is an input type that accepts ProjectArray and ProjectArrayOutput values.
// You can construct a concrete instance of `ProjectArrayInput` via:
//
//	ProjectArray{ ProjectArgs{...} }
type ProjectArrayInput interface {
	pulumi.Input

	ToProjectArrayOutput() ProjectArrayOutput
	ToProjectArrayOutputWithContext(context.Context) ProjectArrayOutput
}

type ProjectArray []ProjectInput

func (ProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (i ProjectArray) ToProjectArrayOutput() ProjectArrayOutput {
	return i.ToProjectArrayOutputWithContext(context.Background())
}

func (i ProjectArray) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectArrayOutput)
}

// ProjectMapInput is an input type that accepts ProjectMap and ProjectMapOutput values.
// You can construct a concrete instance of `ProjectMapInput` via:
//
//	ProjectMap{ "key": ProjectArgs{...} }
type ProjectMapInput interface {
	pulumi.Input

	ToProjectMapOutput() ProjectMapOutput
	ToProjectMapOutputWithContext(context.Context) ProjectMapOutput
}

type ProjectMap map[string]ProjectInput

func (ProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (i ProjectMap) ToProjectMapOutput() ProjectMapOutput {
	return i.ToProjectMapOutputWithContext(context.Background())
}

func (i ProjectMap) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProjectMapOutput)
}

type ProjectOutput struct{ *pulumi.OutputState }

func (ProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Project)(nil)).Elem()
}

func (o ProjectOutput) ToProjectOutput() ProjectOutput {
	return o
}

func (o ProjectOutput) ToProjectOutputWithContext(ctx context.Context) ProjectOutput {
	return o
}

// The create time of the tls project.
func (o ProjectOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The description of the tls project.
func (o ProjectOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The IAM project name of the tls project.
func (o ProjectOutput) IamProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.IamProjectName }).(pulumi.StringOutput)
}

// The inner net domain of the tls project.
func (o ProjectOutput) InnerNetDomain() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.InnerNetDomain }).(pulumi.StringOutput)
}

// The name of the tls project.
func (o ProjectOutput) ProjectName() pulumi.StringOutput {
	return o.ApplyT(func(v *Project) pulumi.StringOutput { return v.ProjectName }).(pulumi.StringOutput)
}

// Tags.
func (o ProjectOutput) Tags() ProjectTagArrayOutput {
	return o.ApplyT(func(v *Project) ProjectTagArrayOutput { return v.Tags }).(ProjectTagArrayOutput)
}

// The count of topics in the tls project.
func (o ProjectOutput) TopicCount() pulumi.IntOutput {
	return o.ApplyT(func(v *Project) pulumi.IntOutput { return v.TopicCount }).(pulumi.IntOutput)
}

type ProjectArrayOutput struct{ *pulumi.OutputState }

func (ProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Project)(nil)).Elem()
}

func (o ProjectArrayOutput) ToProjectArrayOutput() ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) ToProjectArrayOutputWithContext(ctx context.Context) ProjectArrayOutput {
	return o
}

func (o ProjectArrayOutput) Index(i pulumi.IntInput) ProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Project {
		return vs[0].([]*Project)[vs[1].(int)]
	}).(ProjectOutput)
}

type ProjectMapOutput struct{ *pulumi.OutputState }

func (ProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Project)(nil)).Elem()
}

func (o ProjectMapOutput) ToProjectMapOutput() ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) ToProjectMapOutputWithContext(ctx context.Context) ProjectMapOutput {
	return o
}

func (o ProjectMapOutput) MapIndex(k pulumi.StringInput) ProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Project {
		return vs[0].(map[string]*Project)[vs[1].(string)]
	}).(ProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectInput)(nil)).Elem(), &Project{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectArrayInput)(nil)).Elem(), ProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProjectMapInput)(nil)).Elem(), ProjectMap{})
	pulumi.RegisterOutputType(ProjectOutput{})
	pulumi.RegisterOutputType(ProjectArrayOutput{})
	pulumi.RegisterOutputType(ProjectMapOutput{})
}
