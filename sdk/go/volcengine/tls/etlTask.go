// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage tls etl task
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.NewEtlTask(ctx, "foo", &tls.EtlTaskArgs{
//				Description:   pulumi.String("for-tf-test"),
//				DslType:       pulumi.String("NORMAL"),
//				Enable:        pulumi.Bool(true),
//				FromTime:      pulumi.Int(1750649545),
//				Script:        pulumi.String(""),
//				SourceTopicId: pulumi.String("8ba48bd7-2493-4300-b1d0-cb7xxxxxxx"),
//				TargetResources: tls.EtlTaskTargetResourceArray{
//					&tls.EtlTaskTargetResourceArgs{
//						Alias:   pulumi.String("tf-test-1"),
//						TopicId: pulumi.String("b966e41a-d6a6-4999-bd75-39962xxxxxx"),
//					},
//					&tls.EtlTaskTargetResourceArgs{
//						Alias:   pulumi.String("tf-test-2"),
//						TopicId: pulumi.String("0ed72ac8-9531-4967-b216-ac3xxxxx"),
//					},
//				},
//				TaskType: pulumi.String("Resident"),
//				ToTime:   pulumi.Int(1750735958),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// EtlTask can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:tls/etlTask:EtlTask default resource_id
// ```
type EtlTask struct {
	pulumi.CustomResourceState

	// A simple description of the data processing task.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DslType pulumi.StringOutput `pulumi:"dslType"`
	// Whether to enable the data processing task.
	Enable pulumi.BoolOutput `pulumi:"enable"`
	// The start time of the data to be processed.
	FromTime pulumi.IntPtrOutput `pulumi:"fromTime"`
	// The name of the processing task.
	Name pulumi.StringOutput `pulumi:"name"`
	// Processing rules.
	Script pulumi.StringOutput `pulumi:"script"`
	// The log topic where the log to be processed is located.
	SourceTopicId pulumi.StringOutput `pulumi:"sourceTopicId"`
	// Output the relevant information of the target.
	TargetResources EtlTaskTargetResourceArrayOutput `pulumi:"targetResources"`
	// The task type is fixed as Resident.
	TaskType pulumi.StringOutput `pulumi:"taskType"`
	// The end time of the data to be processed.
	ToTime pulumi.IntPtrOutput `pulumi:"toTime"`
}

// NewEtlTask registers a new resource with the given unique name, arguments, and options.
func NewEtlTask(ctx *pulumi.Context,
	name string, args *EtlTaskArgs, opts ...pulumi.ResourceOption) (*EtlTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DslType == nil {
		return nil, errors.New("invalid value for required argument 'DslType'")
	}
	if args.Enable == nil {
		return nil, errors.New("invalid value for required argument 'Enable'")
	}
	if args.Script == nil {
		return nil, errors.New("invalid value for required argument 'Script'")
	}
	if args.SourceTopicId == nil {
		return nil, errors.New("invalid value for required argument 'SourceTopicId'")
	}
	if args.TargetResources == nil {
		return nil, errors.New("invalid value for required argument 'TargetResources'")
	}
	if args.TaskType == nil {
		return nil, errors.New("invalid value for required argument 'TaskType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EtlTask
	err := ctx.RegisterResource("volcengine:tls/etlTask:EtlTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEtlTask gets an existing EtlTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEtlTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EtlTaskState, opts ...pulumi.ResourceOption) (*EtlTask, error) {
	var resource EtlTask
	err := ctx.ReadResource("volcengine:tls/etlTask:EtlTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EtlTask resources.
type etlTaskState struct {
	// A simple description of the data processing task.
	Description *string `pulumi:"description"`
	// DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DslType *string `pulumi:"dslType"`
	// Whether to enable the data processing task.
	Enable *bool `pulumi:"enable"`
	// The start time of the data to be processed.
	FromTime *int `pulumi:"fromTime"`
	// The name of the processing task.
	Name *string `pulumi:"name"`
	// Processing rules.
	Script *string `pulumi:"script"`
	// The log topic where the log to be processed is located.
	SourceTopicId *string `pulumi:"sourceTopicId"`
	// Output the relevant information of the target.
	TargetResources []EtlTaskTargetResource `pulumi:"targetResources"`
	// The task type is fixed as Resident.
	TaskType *string `pulumi:"taskType"`
	// The end time of the data to be processed.
	ToTime *int `pulumi:"toTime"`
}

type EtlTaskState struct {
	// A simple description of the data processing task.
	Description pulumi.StringPtrInput
	// DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DslType pulumi.StringPtrInput
	// Whether to enable the data processing task.
	Enable pulumi.BoolPtrInput
	// The start time of the data to be processed.
	FromTime pulumi.IntPtrInput
	// The name of the processing task.
	Name pulumi.StringPtrInput
	// Processing rules.
	Script pulumi.StringPtrInput
	// The log topic where the log to be processed is located.
	SourceTopicId pulumi.StringPtrInput
	// Output the relevant information of the target.
	TargetResources EtlTaskTargetResourceArrayInput
	// The task type is fixed as Resident.
	TaskType pulumi.StringPtrInput
	// The end time of the data to be processed.
	ToTime pulumi.IntPtrInput
}

func (EtlTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*etlTaskState)(nil)).Elem()
}

type etlTaskArgs struct {
	// A simple description of the data processing task.
	Description *string `pulumi:"description"`
	// DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DslType string `pulumi:"dslType"`
	// Whether to enable the data processing task.
	Enable bool `pulumi:"enable"`
	// The start time of the data to be processed.
	FromTime *int `pulumi:"fromTime"`
	// The name of the processing task.
	Name *string `pulumi:"name"`
	// Processing rules.
	Script string `pulumi:"script"`
	// The log topic where the log to be processed is located.
	SourceTopicId string `pulumi:"sourceTopicId"`
	// Output the relevant information of the target.
	TargetResources []EtlTaskTargetResource `pulumi:"targetResources"`
	// The task type is fixed as Resident.
	TaskType string `pulumi:"taskType"`
	// The end time of the data to be processed.
	ToTime *int `pulumi:"toTime"`
}

// The set of arguments for constructing a EtlTask resource.
type EtlTaskArgs struct {
	// A simple description of the data processing task.
	Description pulumi.StringPtrInput
	// DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
	DslType pulumi.StringInput
	// Whether to enable the data processing task.
	Enable pulumi.BoolInput
	// The start time of the data to be processed.
	FromTime pulumi.IntPtrInput
	// The name of the processing task.
	Name pulumi.StringPtrInput
	// Processing rules.
	Script pulumi.StringInput
	// The log topic where the log to be processed is located.
	SourceTopicId pulumi.StringInput
	// Output the relevant information of the target.
	TargetResources EtlTaskTargetResourceArrayInput
	// The task type is fixed as Resident.
	TaskType pulumi.StringInput
	// The end time of the data to be processed.
	ToTime pulumi.IntPtrInput
}

func (EtlTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*etlTaskArgs)(nil)).Elem()
}

type EtlTaskInput interface {
	pulumi.Input

	ToEtlTaskOutput() EtlTaskOutput
	ToEtlTaskOutputWithContext(ctx context.Context) EtlTaskOutput
}

func (*EtlTask) ElementType() reflect.Type {
	return reflect.TypeOf((**EtlTask)(nil)).Elem()
}

func (i *EtlTask) ToEtlTaskOutput() EtlTaskOutput {
	return i.ToEtlTaskOutputWithContext(context.Background())
}

func (i *EtlTask) ToEtlTaskOutputWithContext(ctx context.Context) EtlTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtlTaskOutput)
}

// EtlTaskArrayInput is an input type that accepts EtlTaskArray and EtlTaskArrayOutput values.
// You can construct a concrete instance of `EtlTaskArrayInput` via:
//
//	EtlTaskArray{ EtlTaskArgs{...} }
type EtlTaskArrayInput interface {
	pulumi.Input

	ToEtlTaskArrayOutput() EtlTaskArrayOutput
	ToEtlTaskArrayOutputWithContext(context.Context) EtlTaskArrayOutput
}

type EtlTaskArray []EtlTaskInput

func (EtlTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EtlTask)(nil)).Elem()
}

func (i EtlTaskArray) ToEtlTaskArrayOutput() EtlTaskArrayOutput {
	return i.ToEtlTaskArrayOutputWithContext(context.Background())
}

func (i EtlTaskArray) ToEtlTaskArrayOutputWithContext(ctx context.Context) EtlTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtlTaskArrayOutput)
}

// EtlTaskMapInput is an input type that accepts EtlTaskMap and EtlTaskMapOutput values.
// You can construct a concrete instance of `EtlTaskMapInput` via:
//
//	EtlTaskMap{ "key": EtlTaskArgs{...} }
type EtlTaskMapInput interface {
	pulumi.Input

	ToEtlTaskMapOutput() EtlTaskMapOutput
	ToEtlTaskMapOutputWithContext(context.Context) EtlTaskMapOutput
}

type EtlTaskMap map[string]EtlTaskInput

func (EtlTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EtlTask)(nil)).Elem()
}

func (i EtlTaskMap) ToEtlTaskMapOutput() EtlTaskMapOutput {
	return i.ToEtlTaskMapOutputWithContext(context.Background())
}

func (i EtlTaskMap) ToEtlTaskMapOutputWithContext(ctx context.Context) EtlTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EtlTaskMapOutput)
}

type EtlTaskOutput struct{ *pulumi.OutputState }

func (EtlTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EtlTask)(nil)).Elem()
}

func (o EtlTaskOutput) ToEtlTaskOutput() EtlTaskOutput {
	return o
}

func (o EtlTaskOutput) ToEtlTaskOutputWithContext(ctx context.Context) EtlTaskOutput {
	return o
}

// A simple description of the data processing task.
func (o EtlTaskOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EtlTask) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
func (o EtlTaskOutput) DslType() pulumi.StringOutput {
	return o.ApplyT(func(v *EtlTask) pulumi.StringOutput { return v.DslType }).(pulumi.StringOutput)
}

// Whether to enable the data processing task.
func (o EtlTaskOutput) Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v *EtlTask) pulumi.BoolOutput { return v.Enable }).(pulumi.BoolOutput)
}

// The start time of the data to be processed.
func (o EtlTaskOutput) FromTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EtlTask) pulumi.IntPtrOutput { return v.FromTime }).(pulumi.IntPtrOutput)
}

// The name of the processing task.
func (o EtlTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EtlTask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Processing rules.
func (o EtlTaskOutput) Script() pulumi.StringOutput {
	return o.ApplyT(func(v *EtlTask) pulumi.StringOutput { return v.Script }).(pulumi.StringOutput)
}

// The log topic where the log to be processed is located.
func (o EtlTaskOutput) SourceTopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *EtlTask) pulumi.StringOutput { return v.SourceTopicId }).(pulumi.StringOutput)
}

// Output the relevant information of the target.
func (o EtlTaskOutput) TargetResources() EtlTaskTargetResourceArrayOutput {
	return o.ApplyT(func(v *EtlTask) EtlTaskTargetResourceArrayOutput { return v.TargetResources }).(EtlTaskTargetResourceArrayOutput)
}

// The task type is fixed as Resident.
func (o EtlTaskOutput) TaskType() pulumi.StringOutput {
	return o.ApplyT(func(v *EtlTask) pulumi.StringOutput { return v.TaskType }).(pulumi.StringOutput)
}

// The end time of the data to be processed.
func (o EtlTaskOutput) ToTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *EtlTask) pulumi.IntPtrOutput { return v.ToTime }).(pulumi.IntPtrOutput)
}

type EtlTaskArrayOutput struct{ *pulumi.OutputState }

func (EtlTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EtlTask)(nil)).Elem()
}

func (o EtlTaskArrayOutput) ToEtlTaskArrayOutput() EtlTaskArrayOutput {
	return o
}

func (o EtlTaskArrayOutput) ToEtlTaskArrayOutputWithContext(ctx context.Context) EtlTaskArrayOutput {
	return o
}

func (o EtlTaskArrayOutput) Index(i pulumi.IntInput) EtlTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EtlTask {
		return vs[0].([]*EtlTask)[vs[1].(int)]
	}).(EtlTaskOutput)
}

type EtlTaskMapOutput struct{ *pulumi.OutputState }

func (EtlTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EtlTask)(nil)).Elem()
}

func (o EtlTaskMapOutput) ToEtlTaskMapOutput() EtlTaskMapOutput {
	return o
}

func (o EtlTaskMapOutput) ToEtlTaskMapOutputWithContext(ctx context.Context) EtlTaskMapOutput {
	return o
}

func (o EtlTaskMapOutput) MapIndex(k pulumi.StringInput) EtlTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EtlTask {
		return vs[0].(map[string]*EtlTask)[vs[1].(string)]
	}).(EtlTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EtlTaskInput)(nil)).Elem(), &EtlTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtlTaskArrayInput)(nil)).Elem(), EtlTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EtlTaskMapInput)(nil)).Elem(), EtlTaskMap{})
	pulumi.RegisterOutputType(EtlTaskOutput{})
	pulumi.RegisterOutputType(EtlTaskArrayOutput{})
	pulumi.RegisterOutputType(EtlTaskMapOutput{})
}
