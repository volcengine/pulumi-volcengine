// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage tls consumer group
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.NewConsumerGroup(ctx, "foo", &tls.ConsumerGroupArgs{
//				ConsumerGroupName: pulumi.String("tf-test-consumer-group"),
//				HeartbeatTtl:      pulumi.Int(120),
//				OrderedConsume:    pulumi.Bool(false),
//				ProjectId:         pulumi.String("17ba378d-de43-495e-8906-03aexxxxxx"),
//				TopicIdLists: pulumi.StringArray{
//					pulumi.String("0ed72ac8-9531-4967-b216-ac30xxxxxx"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ConsumerGroup can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:tls/consumerGroup:ConsumerGroup default resource_id
// ```
type ConsumerGroup struct {
	pulumi.CustomResourceState

	// The name of the consumer group.
	ConsumerGroupName pulumi.StringOutput `pulumi:"consumerGroupName"`
	// The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
	HeartbeatTtl pulumi.IntOutput `pulumi:"heartbeatTtl"`
	// Whether to consume in sequence.
	OrderedConsume pulumi.BoolOutput `pulumi:"orderedConsume"`
	// The log project ID to which the consumption group belongs.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The list of log topic ids to be consumed by the consumer group.
	TopicIdLists pulumi.StringArrayOutput `pulumi:"topicIdLists"`
}

// NewConsumerGroup registers a new resource with the given unique name, arguments, and options.
func NewConsumerGroup(ctx *pulumi.Context,
	name string, args *ConsumerGroupArgs, opts ...pulumi.ResourceOption) (*ConsumerGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConsumerGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ConsumerGroupName'")
	}
	if args.HeartbeatTtl == nil {
		return nil, errors.New("invalid value for required argument 'HeartbeatTtl'")
	}
	if args.OrderedConsume == nil {
		return nil, errors.New("invalid value for required argument 'OrderedConsume'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.TopicIdLists == nil {
		return nil, errors.New("invalid value for required argument 'TopicIdLists'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ConsumerGroup
	err := ctx.RegisterResource("volcengine:tls/consumerGroup:ConsumerGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConsumerGroup gets an existing ConsumerGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConsumerGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConsumerGroupState, opts ...pulumi.ResourceOption) (*ConsumerGroup, error) {
	var resource ConsumerGroup
	err := ctx.ReadResource("volcengine:tls/consumerGroup:ConsumerGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConsumerGroup resources.
type consumerGroupState struct {
	// The name of the consumer group.
	ConsumerGroupName *string `pulumi:"consumerGroupName"`
	// The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
	HeartbeatTtl *int `pulumi:"heartbeatTtl"`
	// Whether to consume in sequence.
	OrderedConsume *bool `pulumi:"orderedConsume"`
	// The log project ID to which the consumption group belongs.
	ProjectId *string `pulumi:"projectId"`
	// The list of log topic ids to be consumed by the consumer group.
	TopicIdLists []string `pulumi:"topicIdLists"`
}

type ConsumerGroupState struct {
	// The name of the consumer group.
	ConsumerGroupName pulumi.StringPtrInput
	// The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
	HeartbeatTtl pulumi.IntPtrInput
	// Whether to consume in sequence.
	OrderedConsume pulumi.BoolPtrInput
	// The log project ID to which the consumption group belongs.
	ProjectId pulumi.StringPtrInput
	// The list of log topic ids to be consumed by the consumer group.
	TopicIdLists pulumi.StringArrayInput
}

func (ConsumerGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerGroupState)(nil)).Elem()
}

type consumerGroupArgs struct {
	// The name of the consumer group.
	ConsumerGroupName string `pulumi:"consumerGroupName"`
	// The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
	HeartbeatTtl int `pulumi:"heartbeatTtl"`
	// Whether to consume in sequence.
	OrderedConsume bool `pulumi:"orderedConsume"`
	// The log project ID to which the consumption group belongs.
	ProjectId string `pulumi:"projectId"`
	// The list of log topic ids to be consumed by the consumer group.
	TopicIdLists []string `pulumi:"topicIdLists"`
}

// The set of arguments for constructing a ConsumerGroup resource.
type ConsumerGroupArgs struct {
	// The name of the consumer group.
	ConsumerGroupName pulumi.StringInput
	// The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
	HeartbeatTtl pulumi.IntInput
	// Whether to consume in sequence.
	OrderedConsume pulumi.BoolInput
	// The log project ID to which the consumption group belongs.
	ProjectId pulumi.StringInput
	// The list of log topic ids to be consumed by the consumer group.
	TopicIdLists pulumi.StringArrayInput
}

func (ConsumerGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*consumerGroupArgs)(nil)).Elem()
}

type ConsumerGroupInput interface {
	pulumi.Input

	ToConsumerGroupOutput() ConsumerGroupOutput
	ToConsumerGroupOutputWithContext(ctx context.Context) ConsumerGroupOutput
}

func (*ConsumerGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerGroup)(nil)).Elem()
}

func (i *ConsumerGroup) ToConsumerGroupOutput() ConsumerGroupOutput {
	return i.ToConsumerGroupOutputWithContext(context.Background())
}

func (i *ConsumerGroup) ToConsumerGroupOutputWithContext(ctx context.Context) ConsumerGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerGroupOutput)
}

// ConsumerGroupArrayInput is an input type that accepts ConsumerGroupArray and ConsumerGroupArrayOutput values.
// You can construct a concrete instance of `ConsumerGroupArrayInput` via:
//
//	ConsumerGroupArray{ ConsumerGroupArgs{...} }
type ConsumerGroupArrayInput interface {
	pulumi.Input

	ToConsumerGroupArrayOutput() ConsumerGroupArrayOutput
	ToConsumerGroupArrayOutputWithContext(context.Context) ConsumerGroupArrayOutput
}

type ConsumerGroupArray []ConsumerGroupInput

func (ConsumerGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerGroup)(nil)).Elem()
}

func (i ConsumerGroupArray) ToConsumerGroupArrayOutput() ConsumerGroupArrayOutput {
	return i.ToConsumerGroupArrayOutputWithContext(context.Background())
}

func (i ConsumerGroupArray) ToConsumerGroupArrayOutputWithContext(ctx context.Context) ConsumerGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerGroupArrayOutput)
}

// ConsumerGroupMapInput is an input type that accepts ConsumerGroupMap and ConsumerGroupMapOutput values.
// You can construct a concrete instance of `ConsumerGroupMapInput` via:
//
//	ConsumerGroupMap{ "key": ConsumerGroupArgs{...} }
type ConsumerGroupMapInput interface {
	pulumi.Input

	ToConsumerGroupMapOutput() ConsumerGroupMapOutput
	ToConsumerGroupMapOutputWithContext(context.Context) ConsumerGroupMapOutput
}

type ConsumerGroupMap map[string]ConsumerGroupInput

func (ConsumerGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerGroup)(nil)).Elem()
}

func (i ConsumerGroupMap) ToConsumerGroupMapOutput() ConsumerGroupMapOutput {
	return i.ToConsumerGroupMapOutputWithContext(context.Background())
}

func (i ConsumerGroupMap) ToConsumerGroupMapOutputWithContext(ctx context.Context) ConsumerGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ConsumerGroupMapOutput)
}

type ConsumerGroupOutput struct{ *pulumi.OutputState }

func (ConsumerGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ConsumerGroup)(nil)).Elem()
}

func (o ConsumerGroupOutput) ToConsumerGroupOutput() ConsumerGroupOutput {
	return o
}

func (o ConsumerGroupOutput) ToConsumerGroupOutputWithContext(ctx context.Context) ConsumerGroupOutput {
	return o
}

// The name of the consumer group.
func (o ConsumerGroupOutput) ConsumerGroupName() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerGroup) pulumi.StringOutput { return v.ConsumerGroupName }).(pulumi.StringOutput)
}

// The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
func (o ConsumerGroupOutput) HeartbeatTtl() pulumi.IntOutput {
	return o.ApplyT(func(v *ConsumerGroup) pulumi.IntOutput { return v.HeartbeatTtl }).(pulumi.IntOutput)
}

// Whether to consume in sequence.
func (o ConsumerGroupOutput) OrderedConsume() pulumi.BoolOutput {
	return o.ApplyT(func(v *ConsumerGroup) pulumi.BoolOutput { return v.OrderedConsume }).(pulumi.BoolOutput)
}

// The log project ID to which the consumption group belongs.
func (o ConsumerGroupOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ConsumerGroup) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The list of log topic ids to be consumed by the consumer group.
func (o ConsumerGroupOutput) TopicIdLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ConsumerGroup) pulumi.StringArrayOutput { return v.TopicIdLists }).(pulumi.StringArrayOutput)
}

type ConsumerGroupArrayOutput struct{ *pulumi.OutputState }

func (ConsumerGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ConsumerGroup)(nil)).Elem()
}

func (o ConsumerGroupArrayOutput) ToConsumerGroupArrayOutput() ConsumerGroupArrayOutput {
	return o
}

func (o ConsumerGroupArrayOutput) ToConsumerGroupArrayOutputWithContext(ctx context.Context) ConsumerGroupArrayOutput {
	return o
}

func (o ConsumerGroupArrayOutput) Index(i pulumi.IntInput) ConsumerGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ConsumerGroup {
		return vs[0].([]*ConsumerGroup)[vs[1].(int)]
	}).(ConsumerGroupOutput)
}

type ConsumerGroupMapOutput struct{ *pulumi.OutputState }

func (ConsumerGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ConsumerGroup)(nil)).Elem()
}

func (o ConsumerGroupMapOutput) ToConsumerGroupMapOutput() ConsumerGroupMapOutput {
	return o
}

func (o ConsumerGroupMapOutput) ToConsumerGroupMapOutputWithContext(ctx context.Context) ConsumerGroupMapOutput {
	return o
}

func (o ConsumerGroupMapOutput) MapIndex(k pulumi.StringInput) ConsumerGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ConsumerGroup {
		return vs[0].(map[string]*ConsumerGroup)[vs[1].(string)]
	}).(ConsumerGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerGroupInput)(nil)).Elem(), &ConsumerGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerGroupArrayInput)(nil)).Elem(), ConsumerGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ConsumerGroupMapInput)(nil)).Elem(), ConsumerGroupMap{})
	pulumi.RegisterOutputType(ConsumerGroupOutput{})
	pulumi.RegisterOutputType(ConsumerGroupArrayOutput{})
	pulumi.RegisterOutputType(ConsumerGroupMapOutput{})
}
