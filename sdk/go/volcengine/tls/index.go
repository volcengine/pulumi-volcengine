// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a resource to manage tls index
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.NewIndex(ctx, "foo", &tls.IndexArgs{
//				FullText: &tls.IndexFullTextArgs{
//					CaseSensitive:  pulumi.Bool(true),
//					Delimiter:      pulumi.String("!"),
//					IncludeChinese: pulumi.Bool(false),
//				},
//				KeyValues: tls.IndexKeyValueArray{
//					&tls.IndexKeyValueArgs{
//						CaseSensitive:  pulumi.Bool(true),
//						Delimiter:      pulumi.String("!"),
//						IncludeChinese: pulumi.Bool(false),
//						JsonKeys: tls.IndexKeyValueJsonKeyArray{
//							&tls.IndexKeyValueJsonKeyArgs{
//								Key:       pulumi.String("k2.k4"),
//								ValueType: pulumi.String("text"),
//							},
//							&tls.IndexKeyValueJsonKeyArgs{
//								Key:       pulumi.String("k3.k4"),
//								ValueType: pulumi.String("long"),
//							},
//						},
//						Key:       pulumi.String("k1"),
//						SqlFlag:   pulumi.Bool(false),
//						ValueType: pulumi.String("json"),
//					},
//					&tls.IndexKeyValueArgs{
//						CaseSensitive:  pulumi.Bool(true),
//						Delimiter:      pulumi.String("!"),
//						IncludeChinese: pulumi.Bool(false),
//						Key:            pulumi.String("k5"),
//						SqlFlag:        pulumi.Bool(false),
//						ValueType:      pulumi.String("text"),
//					},
//				},
//				TopicId: pulumi.String("65d67d34-c5b4-4ec8-b3a9-175d3366****"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Tls Index can be imported using the topic id, e.g.
//
// ```sh
//
//	$ pulumi import volcengine:tls/index:Index default index:edf051ed-3c46-49ba-9339-bea628fe****
//
// ```
type Index struct {
	pulumi.CustomResourceState

	// The create time of the tls index.
	CreateTime pulumi.StringOutput `pulumi:"createTime"`
	// The full text info of the tls index.
	FullText IndexFullTextPtrOutput `pulumi:"fullText"`
	// The key value info of the tls index.
	KeyValues IndexKeyValueArrayOutput `pulumi:"keyValues"`
	// The modify time of the tls index.
	ModifyTime pulumi.StringOutput `pulumi:"modifyTime"`
	// The topic id of the tls index.
	TopicId pulumi.StringOutput `pulumi:"topicId"`
}

// NewIndex registers a new resource with the given unique name, arguments, and options.
func NewIndex(ctx *pulumi.Context,
	name string, args *IndexArgs, opts ...pulumi.ResourceOption) (*Index, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TopicId == nil {
		return nil, errors.New("invalid value for required argument 'TopicId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource Index
	err := ctx.RegisterResource("volcengine:tls/index:Index", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIndex gets an existing Index resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IndexState, opts ...pulumi.ResourceOption) (*Index, error) {
	var resource Index
	err := ctx.ReadResource("volcengine:tls/index:Index", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Index resources.
type indexState struct {
	// The create time of the tls index.
	CreateTime *string `pulumi:"createTime"`
	// The full text info of the tls index.
	FullText *IndexFullText `pulumi:"fullText"`
	// The key value info of the tls index.
	KeyValues []IndexKeyValue `pulumi:"keyValues"`
	// The modify time of the tls index.
	ModifyTime *string `pulumi:"modifyTime"`
	// The topic id of the tls index.
	TopicId *string `pulumi:"topicId"`
}

type IndexState struct {
	// The create time of the tls index.
	CreateTime pulumi.StringPtrInput
	// The full text info of the tls index.
	FullText IndexFullTextPtrInput
	// The key value info of the tls index.
	KeyValues IndexKeyValueArrayInput
	// The modify time of the tls index.
	ModifyTime pulumi.StringPtrInput
	// The topic id of the tls index.
	TopicId pulumi.StringPtrInput
}

func (IndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*indexState)(nil)).Elem()
}

type indexArgs struct {
	// The full text info of the tls index.
	FullText *IndexFullText `pulumi:"fullText"`
	// The key value info of the tls index.
	KeyValues []IndexKeyValue `pulumi:"keyValues"`
	// The topic id of the tls index.
	TopicId string `pulumi:"topicId"`
}

// The set of arguments for constructing a Index resource.
type IndexArgs struct {
	// The full text info of the tls index.
	FullText IndexFullTextPtrInput
	// The key value info of the tls index.
	KeyValues IndexKeyValueArrayInput
	// The topic id of the tls index.
	TopicId pulumi.StringInput
}

func (IndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*indexArgs)(nil)).Elem()
}

type IndexInput interface {
	pulumi.Input

	ToIndexOutput() IndexOutput
	ToIndexOutputWithContext(ctx context.Context) IndexOutput
}

func (*Index) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (i *Index) ToIndexOutput() IndexOutput {
	return i.ToIndexOutputWithContext(context.Background())
}

func (i *Index) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexOutput)
}

// IndexArrayInput is an input type that accepts IndexArray and IndexArrayOutput values.
// You can construct a concrete instance of `IndexArrayInput` via:
//
//	IndexArray{ IndexArgs{...} }
type IndexArrayInput interface {
	pulumi.Input

	ToIndexArrayOutput() IndexArrayOutput
	ToIndexArrayOutputWithContext(context.Context) IndexArrayOutput
}

type IndexArray []IndexInput

func (IndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (i IndexArray) ToIndexArrayOutput() IndexArrayOutput {
	return i.ToIndexArrayOutputWithContext(context.Background())
}

func (i IndexArray) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexArrayOutput)
}

// IndexMapInput is an input type that accepts IndexMap and IndexMapOutput values.
// You can construct a concrete instance of `IndexMapInput` via:
//
//	IndexMap{ "key": IndexArgs{...} }
type IndexMapInput interface {
	pulumi.Input

	ToIndexMapOutput() IndexMapOutput
	ToIndexMapOutputWithContext(context.Context) IndexMapOutput
}

type IndexMap map[string]IndexInput

func (IndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (i IndexMap) ToIndexMapOutput() IndexMapOutput {
	return i.ToIndexMapOutputWithContext(context.Background())
}

func (i IndexMap) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IndexMapOutput)
}

type IndexOutput struct{ *pulumi.OutputState }

func (IndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Index)(nil)).Elem()
}

func (o IndexOutput) ToIndexOutput() IndexOutput {
	return o
}

func (o IndexOutput) ToIndexOutputWithContext(ctx context.Context) IndexOutput {
	return o
}

// The create time of the tls index.
func (o IndexOutput) CreateTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.CreateTime }).(pulumi.StringOutput)
}

// The full text info of the tls index.
func (o IndexOutput) FullText() IndexFullTextPtrOutput {
	return o.ApplyT(func(v *Index) IndexFullTextPtrOutput { return v.FullText }).(IndexFullTextPtrOutput)
}

// The key value info of the tls index.
func (o IndexOutput) KeyValues() IndexKeyValueArrayOutput {
	return o.ApplyT(func(v *Index) IndexKeyValueArrayOutput { return v.KeyValues }).(IndexKeyValueArrayOutput)
}

// The modify time of the tls index.
func (o IndexOutput) ModifyTime() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.ModifyTime }).(pulumi.StringOutput)
}

// The topic id of the tls index.
func (o IndexOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *Index) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

type IndexArrayOutput struct{ *pulumi.OutputState }

func (IndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Index)(nil)).Elem()
}

func (o IndexArrayOutput) ToIndexArrayOutput() IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) ToIndexArrayOutputWithContext(ctx context.Context) IndexArrayOutput {
	return o
}

func (o IndexArrayOutput) Index(i pulumi.IntInput) IndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Index {
		return vs[0].([]*Index)[vs[1].(int)]
	}).(IndexOutput)
}

type IndexMapOutput struct{ *pulumi.OutputState }

func (IndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Index)(nil)).Elem()
}

func (o IndexMapOutput) ToIndexMapOutput() IndexMapOutput {
	return o
}

func (o IndexMapOutput) ToIndexMapOutputWithContext(ctx context.Context) IndexMapOutput {
	return o
}

func (o IndexMapOutput) MapIndex(k pulumi.StringInput) IndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Index {
		return vs[0].(map[string]*Index)[vs[1].(string)]
	}).(IndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IndexInput)(nil)).Elem(), &Index{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexArrayInput)(nil)).Elem(), IndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IndexMapInput)(nil)).Elem(), IndexMap{})
	pulumi.RegisterOutputType(IndexOutput{})
	pulumi.RegisterOutputType(IndexArrayOutput{})
	pulumi.RegisterOutputType(IndexMapOutput{})
}
