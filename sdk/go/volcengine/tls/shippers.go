// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tls shippers
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.GetShippers(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Deprecated: volcengine.tls.Shippers has been deprecated in favor of volcengine.tls.getShippers
func Shippers(ctx *pulumi.Context, args *ShippersArgs, opts ...pulumi.InvokeOption) (*ShippersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ShippersResult
	err := ctx.Invoke("volcengine:tls/shippers:Shippers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking Shippers.
type ShippersArgs struct {
	// Specify the IAM project name for querying the data delivery configuration under the specified IAM project.
	IamProjectName *string `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex *string `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// Specify the log item ID for querying the data delivery configuration under the specified log item.
	ProjectId *string `pulumi:"projectId"`
	// Specify the name of the log item for querying the data delivery configuration under the specified log item. Support fuzzy matching.
	ProjectName *string `pulumi:"projectName"`
	// Delivery configuration ID.
	ShipperId *string `pulumi:"shipperId"`
	// Delivery configuration name.
	ShipperName *string `pulumi:"shipperName"`
	// Specify the delivery type for querying the delivery configuration related to that delivery type.
	ShipperType *string `pulumi:"shipperType"`
	// Specify the log topic ID for querying the data delivery configuration related to this log topic.
	TopicId *string `pulumi:"topicId"`
	// Specify the name of the log topic for querying the data delivery configuration related to this log topic. Support fuzzy matching.
	TopicName *string `pulumi:"topicName"`
}

// A collection of values returned by Shippers.
type ShippersResult struct {
	IamProjectName *string `pulumi:"iamProjectName"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	NameRegex  *string `pulumi:"nameRegex"`
	OutputFile *string `pulumi:"outputFile"`
	// The log project ID where the log to be delivered is located.
	ProjectId *string `pulumi:"projectId"`
	// The name of the log item where the log to be delivered is located.
	ProjectName *string `pulumi:"projectName"`
	// Deliver configuration ID.
	ShipperId *string `pulumi:"shipperId"`
	// Delivery configuration name.
	ShipperName *string `pulumi:"shipperName"`
	// The type of delivery.
	ShipperType *string `pulumi:"shipperType"`
	// Submit the relevant information of the configuration.
	Shippers []ShippersShipper `pulumi:"shippers"`
	// The log topic ID where the log to be delivered is located.
	TopicId *string `pulumi:"topicId"`
	// The name of the log topic where the log to be delivered is located.
	TopicName *string `pulumi:"topicName"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func ShippersOutput(ctx *pulumi.Context, args ShippersOutputArgs, opts ...pulumi.InvokeOption) ShippersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ShippersResult, error) {
			args := v.(ShippersArgs)
			r, err := Shippers(ctx, &args, opts...)
			var s ShippersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ShippersResultOutput)
}

// A collection of arguments for invoking Shippers.
type ShippersOutputArgs struct {
	// Specify the IAM project name for querying the data delivery configuration under the specified IAM project.
	IamProjectName pulumi.StringPtrInput `pulumi:"iamProjectName"`
	// A Name Regex of Resource.
	NameRegex pulumi.StringPtrInput `pulumi:"nameRegex"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// Specify the log item ID for querying the data delivery configuration under the specified log item.
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
	// Specify the name of the log item for querying the data delivery configuration under the specified log item. Support fuzzy matching.
	ProjectName pulumi.StringPtrInput `pulumi:"projectName"`
	// Delivery configuration ID.
	ShipperId pulumi.StringPtrInput `pulumi:"shipperId"`
	// Delivery configuration name.
	ShipperName pulumi.StringPtrInput `pulumi:"shipperName"`
	// Specify the delivery type for querying the delivery configuration related to that delivery type.
	ShipperType pulumi.StringPtrInput `pulumi:"shipperType"`
	// Specify the log topic ID for querying the data delivery configuration related to this log topic.
	TopicId pulumi.StringPtrInput `pulumi:"topicId"`
	// Specify the name of the log topic for querying the data delivery configuration related to this log topic. Support fuzzy matching.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (ShippersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ShippersArgs)(nil)).Elem()
}

// A collection of values returned by Shippers.
type ShippersResultOutput struct{ *pulumi.OutputState }

func (ShippersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ShippersResult)(nil)).Elem()
}

func (o ShippersResultOutput) ToShippersResultOutput() ShippersResultOutput {
	return o
}

func (o ShippersResultOutput) ToShippersResultOutputWithContext(ctx context.Context) ShippersResultOutput {
	return o
}

func (o ShippersResultOutput) IamProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.IamProjectName }).(pulumi.StringPtrOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o ShippersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ShippersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o ShippersResultOutput) NameRegex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.NameRegex }).(pulumi.StringPtrOutput)
}

func (o ShippersResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The log project ID where the log to be delivered is located.
func (o ShippersResultOutput) ProjectId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.ProjectId }).(pulumi.StringPtrOutput)
}

// The name of the log item where the log to be delivered is located.
func (o ShippersResultOutput) ProjectName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.ProjectName }).(pulumi.StringPtrOutput)
}

// Deliver configuration ID.
func (o ShippersResultOutput) ShipperId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.ShipperId }).(pulumi.StringPtrOutput)
}

// Delivery configuration name.
func (o ShippersResultOutput) ShipperName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.ShipperName }).(pulumi.StringPtrOutput)
}

// The type of delivery.
func (o ShippersResultOutput) ShipperType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.ShipperType }).(pulumi.StringPtrOutput)
}

// Submit the relevant information of the configuration.
func (o ShippersResultOutput) Shippers() ShippersShipperArrayOutput {
	return o.ApplyT(func(v ShippersResult) []ShippersShipper { return v.Shippers }).(ShippersShipperArrayOutput)
}

// The log topic ID where the log to be delivered is located.
func (o ShippersResultOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

// The name of the log topic where the log to be delivered is located.
func (o ShippersResultOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ShippersResult) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o ShippersResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v ShippersResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(ShippersResultOutput{})
}
