// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tls kafka consumers
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.GetKafkaConsumers(ctx, &tls.GetKafkaConsumersArgs{
//				Ids: []string{
//					"65d67d34-c5b4-4ec8-b3a9-175d33668b45",
//					"cfb5c08b-0c7a-44fa-8971-8afc12f1b123",
//					"edf051ed-3c46-49ba-9339-bea628fedc15",
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetKafkaConsumers(ctx *pulumi.Context, args *GetKafkaConsumersArgs, opts ...pulumi.InvokeOption) (*GetKafkaConsumersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetKafkaConsumersResult
	err := ctx.Invoke("volcengine:tls/getKafkaConsumers:getKafkaConsumers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getKafkaConsumers.
type GetKafkaConsumersArgs struct {
	// A list of topic IDs.
	Ids []string `pulumi:"ids"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
}

// A collection of values returned by getKafkaConsumers.
type GetKafkaConsumersResult struct {
	// The collection of query.
	Datas []GetKafkaConsumersData `pulumi:"datas"`
	// The provider-assigned unique ID for this managed resource.
	Id         string   `pulumi:"id"`
	Ids        []string `pulumi:"ids"`
	OutputFile *string  `pulumi:"outputFile"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetKafkaConsumersOutput(ctx *pulumi.Context, args GetKafkaConsumersOutputArgs, opts ...pulumi.InvokeOption) GetKafkaConsumersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetKafkaConsumersResult, error) {
			args := v.(GetKafkaConsumersArgs)
			r, err := GetKafkaConsumers(ctx, &args, opts...)
			var s GetKafkaConsumersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetKafkaConsumersResultOutput)
}

// A collection of arguments for invoking getKafkaConsumers.
type GetKafkaConsumersOutputArgs struct {
	// A list of topic IDs.
	Ids pulumi.StringArrayInput `pulumi:"ids"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
}

func (GetKafkaConsumersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaConsumersArgs)(nil)).Elem()
}

// A collection of values returned by getKafkaConsumers.
type GetKafkaConsumersResultOutput struct{ *pulumi.OutputState }

func (GetKafkaConsumersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetKafkaConsumersResult)(nil)).Elem()
}

func (o GetKafkaConsumersResultOutput) ToGetKafkaConsumersResultOutput() GetKafkaConsumersResultOutput {
	return o
}

func (o GetKafkaConsumersResultOutput) ToGetKafkaConsumersResultOutputWithContext(ctx context.Context) GetKafkaConsumersResultOutput {
	return o
}

// The collection of query.
func (o GetKafkaConsumersResultOutput) Datas() GetKafkaConsumersDataArrayOutput {
	return o.ApplyT(func(v GetKafkaConsumersResult) []GetKafkaConsumersData { return v.Datas }).(GetKafkaConsumersDataArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetKafkaConsumersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetKafkaConsumersResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetKafkaConsumersResultOutput) Ids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetKafkaConsumersResult) []string { return v.Ids }).(pulumi.StringArrayOutput)
}

func (o GetKafkaConsumersResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetKafkaConsumersResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetKafkaConsumersResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetKafkaConsumersResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetKafkaConsumersResultOutput{})
}
