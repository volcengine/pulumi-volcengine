// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Use this data source to query detailed information of tls alarms
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.GetAlarms(ctx, &tls.GetAlarmsArgs{
//				ProjectId: "cc44f8b6-0328-4622-b043-023fca735cd4",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetAlarms(ctx *pulumi.Context, args *GetAlarmsArgs, opts ...pulumi.InvokeOption) (*GetAlarmsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetAlarmsResult
	err := ctx.Invoke("volcengine:tls/getAlarms:getAlarms", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlarms.
type GetAlarmsArgs struct {
	// The alarm id.
	AlarmId *string `pulumi:"alarmId"`
	// The alarm name.
	AlarmName *string `pulumi:"alarmName"`
	// File name where to save data source results.
	OutputFile *string `pulumi:"outputFile"`
	// The project id.
	ProjectId string `pulumi:"projectId"`
	// The status.
	Status *bool `pulumi:"status"`
	// The topic id.
	TopicId *string `pulumi:"topicId"`
	// The topic name.
	TopicName *string `pulumi:"topicName"`
}

// A collection of values returned by getAlarms.
type GetAlarmsResult struct {
	// The alarm id.
	AlarmId *string `pulumi:"alarmId"`
	// The name of the alarm.
	AlarmName *string `pulumi:"alarmName"`
	// The list of alarms.
	Alarms []GetAlarmsAlarm `pulumi:"alarms"`
	// The provider-assigned unique ID for this managed resource.
	Id         string  `pulumi:"id"`
	OutputFile *string `pulumi:"outputFile"`
	// The project id.
	ProjectId string `pulumi:"projectId"`
	// Whether to enable the alert policy. The default value is true, that is, on.
	Status *bool `pulumi:"status"`
	// The id of the topic.
	TopicId *string `pulumi:"topicId"`
	// The name of the topic.
	TopicName *string `pulumi:"topicName"`
	// The total count of query.
	TotalCount int `pulumi:"totalCount"`
}

func GetAlarmsOutput(ctx *pulumi.Context, args GetAlarmsOutputArgs, opts ...pulumi.InvokeOption) GetAlarmsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetAlarmsResult, error) {
			args := v.(GetAlarmsArgs)
			r, err := GetAlarms(ctx, &args, opts...)
			var s GetAlarmsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetAlarmsResultOutput)
}

// A collection of arguments for invoking getAlarms.
type GetAlarmsOutputArgs struct {
	// The alarm id.
	AlarmId pulumi.StringPtrInput `pulumi:"alarmId"`
	// The alarm name.
	AlarmName pulumi.StringPtrInput `pulumi:"alarmName"`
	// File name where to save data source results.
	OutputFile pulumi.StringPtrInput `pulumi:"outputFile"`
	// The project id.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// The status.
	Status pulumi.BoolPtrInput `pulumi:"status"`
	// The topic id.
	TopicId pulumi.StringPtrInput `pulumi:"topicId"`
	// The topic name.
	TopicName pulumi.StringPtrInput `pulumi:"topicName"`
}

func (GetAlarmsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmsArgs)(nil)).Elem()
}

// A collection of values returned by getAlarms.
type GetAlarmsResultOutput struct{ *pulumi.OutputState }

func (GetAlarmsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAlarmsResult)(nil)).Elem()
}

func (o GetAlarmsResultOutput) ToGetAlarmsResultOutput() GetAlarmsResultOutput {
	return o
}

func (o GetAlarmsResultOutput) ToGetAlarmsResultOutputWithContext(ctx context.Context) GetAlarmsResultOutput {
	return o
}

// The alarm id.
func (o GetAlarmsResultOutput) AlarmId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmsResult) *string { return v.AlarmId }).(pulumi.StringPtrOutput)
}

// The name of the alarm.
func (o GetAlarmsResultOutput) AlarmName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmsResult) *string { return v.AlarmName }).(pulumi.StringPtrOutput)
}

// The list of alarms.
func (o GetAlarmsResultOutput) Alarms() GetAlarmsAlarmArrayOutput {
	return o.ApplyT(func(v GetAlarmsResult) []GetAlarmsAlarm { return v.Alarms }).(GetAlarmsAlarmArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetAlarmsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlarmsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetAlarmsResultOutput) OutputFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmsResult) *string { return v.OutputFile }).(pulumi.StringPtrOutput)
}

// The project id.
func (o GetAlarmsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetAlarmsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Whether to enable the alert policy. The default value is true, that is, on.
func (o GetAlarmsResultOutput) Status() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v GetAlarmsResult) *bool { return v.Status }).(pulumi.BoolPtrOutput)
}

// The id of the topic.
func (o GetAlarmsResultOutput) TopicId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmsResult) *string { return v.TopicId }).(pulumi.StringPtrOutput)
}

// The name of the topic.
func (o GetAlarmsResultOutput) TopicName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetAlarmsResult) *string { return v.TopicName }).(pulumi.StringPtrOutput)
}

// The total count of query.
func (o GetAlarmsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetAlarmsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetAlarmsResultOutput{})
}
