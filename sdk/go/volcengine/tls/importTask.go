// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package tls

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/internal"
)

// Provides a resource to manage tls import task
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/volcengine/pulumi-volcengine/sdk/go/volcengine/tls"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := tls.NewImportTask(ctx, "foo", &tls.ImportTaskArgs{
//				Description: pulumi.String("tf-test"),
//				ImportSourceInfo: &tls.ImportTaskImportSourceInfoArgs{
//					KafkaSourceInfo: &tls.ImportTaskImportSourceInfoKafkaSourceInfoArgs{
//						Encode:            pulumi.String("UTF-8"),
//						Host:              pulumi.String("1.1.1.1"),
//						InitialOffset:     pulumi.Int(0),
//						TimeSourceDefault: pulumi.Int(1),
//						Topic:             pulumi.String("topic-1,topic-2,topic-3"),
//					},
//				},
//				SourceType: pulumi.String("kafka"),
//				TargetInfo: &tls.ImportTaskTargetInfoArgs{
//					ExtractRule: &tls.ImportTaskTargetInfoExtractRuleArgs{
//						UnMatchLogKey:       pulumi.String("key-failed"),
//						UnMatchUpLoadSwitch: pulumi.Bool(true),
//					},
//					LogType: pulumi.String("json_log"),
//					Region:  pulumi.String("cn-beijing"),
//				},
//				TaskName: pulumi.String("tf-test-task-name-kafka"),
//				TopicId:  pulumi.String("b966e41a-d6a6-4999-bd75-39xxxxxxx"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ImportTask can be imported using the id, e.g.
//
// ```sh
// $ pulumi import volcengine:tls/importTask:ImportTask default resource_id
// ```
type ImportTask struct {
	pulumi.CustomResourceState

	// Data import task description.
	Description pulumi.StringOutput `pulumi:"description"`
	// The source information of the data import task.
	ImportSourceInfo ImportTaskImportSourceInfoOutput `pulumi:"importSourceInfo"`
	// The log project ID used for storing data.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Import the source type.
	SourceType pulumi.StringOutput `pulumi:"sourceType"`
	// The status of the data import task.
	Status pulumi.IntOutput `pulumi:"status"`
	// The output information of the data import task.
	TargetInfo ImportTaskTargetInfoOutput `pulumi:"targetInfo"`
	// Data import task name.
	TaskName pulumi.StringOutput `pulumi:"taskName"`
	// The log topic ID used for storing data.
	TopicId pulumi.StringOutput `pulumi:"topicId"`
}

// NewImportTask registers a new resource with the given unique name, arguments, and options.
func NewImportTask(ctx *pulumi.Context,
	name string, args *ImportTaskArgs, opts ...pulumi.ResourceOption) (*ImportTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ImportSourceInfo == nil {
		return nil, errors.New("invalid value for required argument 'ImportSourceInfo'")
	}
	if args.TargetInfo == nil {
		return nil, errors.New("invalid value for required argument 'TargetInfo'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ImportTask
	err := ctx.RegisterResource("volcengine:tls/importTask:ImportTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetImportTask gets an existing ImportTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetImportTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ImportTaskState, opts ...pulumi.ResourceOption) (*ImportTask, error) {
	var resource ImportTask
	err := ctx.ReadResource("volcengine:tls/importTask:ImportTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ImportTask resources.
type importTaskState struct {
	// Data import task description.
	Description *string `pulumi:"description"`
	// The source information of the data import task.
	ImportSourceInfo *ImportTaskImportSourceInfo `pulumi:"importSourceInfo"`
	// The log project ID used for storing data.
	ProjectId *string `pulumi:"projectId"`
	// Import the source type.
	SourceType *string `pulumi:"sourceType"`
	// The status of the data import task.
	Status *int `pulumi:"status"`
	// The output information of the data import task.
	TargetInfo *ImportTaskTargetInfo `pulumi:"targetInfo"`
	// Data import task name.
	TaskName *string `pulumi:"taskName"`
	// The log topic ID used for storing data.
	TopicId *string `pulumi:"topicId"`
}

type ImportTaskState struct {
	// Data import task description.
	Description pulumi.StringPtrInput
	// The source information of the data import task.
	ImportSourceInfo ImportTaskImportSourceInfoPtrInput
	// The log project ID used for storing data.
	ProjectId pulumi.StringPtrInput
	// Import the source type.
	SourceType pulumi.StringPtrInput
	// The status of the data import task.
	Status pulumi.IntPtrInput
	// The output information of the data import task.
	TargetInfo ImportTaskTargetInfoPtrInput
	// Data import task name.
	TaskName pulumi.StringPtrInput
	// The log topic ID used for storing data.
	TopicId pulumi.StringPtrInput
}

func (ImportTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*importTaskState)(nil)).Elem()
}

type importTaskArgs struct {
	// Data import task description.
	Description *string `pulumi:"description"`
	// The source information of the data import task.
	ImportSourceInfo ImportTaskImportSourceInfo `pulumi:"importSourceInfo"`
	// The log project ID used for storing data.
	ProjectId *string `pulumi:"projectId"`
	// Import the source type.
	SourceType *string `pulumi:"sourceType"`
	// The status of the data import task.
	Status *int `pulumi:"status"`
	// The output information of the data import task.
	TargetInfo ImportTaskTargetInfo `pulumi:"targetInfo"`
	// Data import task name.
	TaskName *string `pulumi:"taskName"`
	// The log topic ID used for storing data.
	TopicId *string `pulumi:"topicId"`
}

// The set of arguments for constructing a ImportTask resource.
type ImportTaskArgs struct {
	// Data import task description.
	Description pulumi.StringPtrInput
	// The source information of the data import task.
	ImportSourceInfo ImportTaskImportSourceInfoInput
	// The log project ID used for storing data.
	ProjectId pulumi.StringPtrInput
	// Import the source type.
	SourceType pulumi.StringPtrInput
	// The status of the data import task.
	Status pulumi.IntPtrInput
	// The output information of the data import task.
	TargetInfo ImportTaskTargetInfoInput
	// Data import task name.
	TaskName pulumi.StringPtrInput
	// The log topic ID used for storing data.
	TopicId pulumi.StringPtrInput
}

func (ImportTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*importTaskArgs)(nil)).Elem()
}

type ImportTaskInput interface {
	pulumi.Input

	ToImportTaskOutput() ImportTaskOutput
	ToImportTaskOutputWithContext(ctx context.Context) ImportTaskOutput
}

func (*ImportTask) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportTask)(nil)).Elem()
}

func (i *ImportTask) ToImportTaskOutput() ImportTaskOutput {
	return i.ToImportTaskOutputWithContext(context.Background())
}

func (i *ImportTask) ToImportTaskOutputWithContext(ctx context.Context) ImportTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportTaskOutput)
}

// ImportTaskArrayInput is an input type that accepts ImportTaskArray and ImportTaskArrayOutput values.
// You can construct a concrete instance of `ImportTaskArrayInput` via:
//
//	ImportTaskArray{ ImportTaskArgs{...} }
type ImportTaskArrayInput interface {
	pulumi.Input

	ToImportTaskArrayOutput() ImportTaskArrayOutput
	ToImportTaskArrayOutputWithContext(context.Context) ImportTaskArrayOutput
}

type ImportTaskArray []ImportTaskInput

func (ImportTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImportTask)(nil)).Elem()
}

func (i ImportTaskArray) ToImportTaskArrayOutput() ImportTaskArrayOutput {
	return i.ToImportTaskArrayOutputWithContext(context.Background())
}

func (i ImportTaskArray) ToImportTaskArrayOutputWithContext(ctx context.Context) ImportTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportTaskArrayOutput)
}

// ImportTaskMapInput is an input type that accepts ImportTaskMap and ImportTaskMapOutput values.
// You can construct a concrete instance of `ImportTaskMapInput` via:
//
//	ImportTaskMap{ "key": ImportTaskArgs{...} }
type ImportTaskMapInput interface {
	pulumi.Input

	ToImportTaskMapOutput() ImportTaskMapOutput
	ToImportTaskMapOutputWithContext(context.Context) ImportTaskMapOutput
}

type ImportTaskMap map[string]ImportTaskInput

func (ImportTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImportTask)(nil)).Elem()
}

func (i ImportTaskMap) ToImportTaskMapOutput() ImportTaskMapOutput {
	return i.ToImportTaskMapOutputWithContext(context.Background())
}

func (i ImportTaskMap) ToImportTaskMapOutputWithContext(ctx context.Context) ImportTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ImportTaskMapOutput)
}

type ImportTaskOutput struct{ *pulumi.OutputState }

func (ImportTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ImportTask)(nil)).Elem()
}

func (o ImportTaskOutput) ToImportTaskOutput() ImportTaskOutput {
	return o
}

func (o ImportTaskOutput) ToImportTaskOutputWithContext(ctx context.Context) ImportTaskOutput {
	return o
}

// Data import task description.
func (o ImportTaskOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportTask) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The source information of the data import task.
func (o ImportTaskOutput) ImportSourceInfo() ImportTaskImportSourceInfoOutput {
	return o.ApplyT(func(v *ImportTask) ImportTaskImportSourceInfoOutput { return v.ImportSourceInfo }).(ImportTaskImportSourceInfoOutput)
}

// The log project ID used for storing data.
func (o ImportTaskOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportTask) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Import the source type.
func (o ImportTaskOutput) SourceType() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportTask) pulumi.StringOutput { return v.SourceType }).(pulumi.StringOutput)
}

// The status of the data import task.
func (o ImportTaskOutput) Status() pulumi.IntOutput {
	return o.ApplyT(func(v *ImportTask) pulumi.IntOutput { return v.Status }).(pulumi.IntOutput)
}

// The output information of the data import task.
func (o ImportTaskOutput) TargetInfo() ImportTaskTargetInfoOutput {
	return o.ApplyT(func(v *ImportTask) ImportTaskTargetInfoOutput { return v.TargetInfo }).(ImportTaskTargetInfoOutput)
}

// Data import task name.
func (o ImportTaskOutput) TaskName() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportTask) pulumi.StringOutput { return v.TaskName }).(pulumi.StringOutput)
}

// The log topic ID used for storing data.
func (o ImportTaskOutput) TopicId() pulumi.StringOutput {
	return o.ApplyT(func(v *ImportTask) pulumi.StringOutput { return v.TopicId }).(pulumi.StringOutput)
}

type ImportTaskArrayOutput struct{ *pulumi.OutputState }

func (ImportTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ImportTask)(nil)).Elem()
}

func (o ImportTaskArrayOutput) ToImportTaskArrayOutput() ImportTaskArrayOutput {
	return o
}

func (o ImportTaskArrayOutput) ToImportTaskArrayOutputWithContext(ctx context.Context) ImportTaskArrayOutput {
	return o
}

func (o ImportTaskArrayOutput) Index(i pulumi.IntInput) ImportTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ImportTask {
		return vs[0].([]*ImportTask)[vs[1].(int)]
	}).(ImportTaskOutput)
}

type ImportTaskMapOutput struct{ *pulumi.OutputState }

func (ImportTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ImportTask)(nil)).Elem()
}

func (o ImportTaskMapOutput) ToImportTaskMapOutput() ImportTaskMapOutput {
	return o
}

func (o ImportTaskMapOutput) ToImportTaskMapOutputWithContext(ctx context.Context) ImportTaskMapOutput {
	return o
}

func (o ImportTaskMapOutput) MapIndex(k pulumi.StringInput) ImportTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ImportTask {
		return vs[0].(map[string]*ImportTask)[vs[1].(string)]
	}).(ImportTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ImportTaskInput)(nil)).Elem(), &ImportTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImportTaskArrayInput)(nil)).Elem(), ImportTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ImportTaskMapInput)(nil)).Elem(), ImportTaskMap{})
	pulumi.RegisterOutputType(ImportTaskOutput{})
	pulumi.RegisterOutputType(ImportTaskArrayOutput{})
	pulumi.RegisterOutputType(ImportTaskMapOutput{})
}
