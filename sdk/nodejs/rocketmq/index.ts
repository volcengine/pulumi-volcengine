// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccessKeysArgs, AccessKeysResult, AccessKeysOutputArgs } from "./accessKeys";
export const accessKeys: typeof import("./accessKeys").accessKeys = null as any;
export const accessKeysOutput: typeof import("./accessKeys").accessKeysOutput = null as any;
utilities.lazyLoad(exports, ["accessKeys","accessKeysOutput"], () => require("./accessKeys"));

export { AllowListsArgs, AllowListsResult, AllowListsOutputArgs } from "./allowLists";
export const allowLists: typeof import("./allowLists").allowLists = null as any;
export const allowListsOutput: typeof import("./allowLists").allowListsOutput = null as any;
utilities.lazyLoad(exports, ["allowLists","allowListsOutput"], () => require("./allowLists"));

export { GetAccessKeysArgs, GetAccessKeysResult, GetAccessKeysOutputArgs } from "./getAccessKeys";
export const getAccessKeys: typeof import("./getAccessKeys").getAccessKeys = null as any;
export const getAccessKeysOutput: typeof import("./getAccessKeys").getAccessKeysOutput = null as any;
utilities.lazyLoad(exports, ["getAccessKeys","getAccessKeysOutput"], () => require("./getAccessKeys"));

export { GetAllowListsArgs, GetAllowListsResult, GetAllowListsOutputArgs } from "./getAllowLists";
export const getAllowLists: typeof import("./getAllowLists").getAllowLists = null as any;
export const getAllowListsOutput: typeof import("./getAllowLists").getAllowListsOutput = null as any;
utilities.lazyLoad(exports, ["getAllowLists","getAllowListsOutput"], () => require("./getAllowLists"));

export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetTopicsArgs, GetTopicsResult, GetTopicsOutputArgs } from "./getTopics";
export const getTopics: typeof import("./getTopics").getTopics = null as any;
export const getTopicsOutput: typeof import("./getTopics").getTopicsOutput = null as any;
utilities.lazyLoad(exports, ["getTopics","getTopicsOutput"], () => require("./getTopics"));

export { GroupsArgs, GroupsResult, GroupsOutputArgs } from "./groups";
export const groups: typeof import("./groups").groups = null as any;
export const groupsOutput: typeof import("./groups").groupsOutput = null as any;
utilities.lazyLoad(exports, ["groups","groupsOutput"], () => require("./groups"));

export { InstancesArgs, InstancesResult, InstancesOutputArgs } from "./instances";
export const instances: typeof import("./instances").instances = null as any;
export const instancesOutput: typeof import("./instances").instancesOutput = null as any;
utilities.lazyLoad(exports, ["instances","instancesOutput"], () => require("./instances"));

export { RocketMQAccessKeyArgs, RocketMQAccessKeyState } from "./rocketMQAccessKey";
export type RocketMQAccessKey = import("./rocketMQAccessKey").RocketMQAccessKey;
export const RocketMQAccessKey: typeof import("./rocketMQAccessKey").RocketMQAccessKey = null as any;
utilities.lazyLoad(exports, ["RocketMQAccessKey"], () => require("./rocketMQAccessKey"));

export { RocketMQAllowListArgs, RocketMQAllowListState } from "./rocketMQAllowList";
export type RocketMQAllowList = import("./rocketMQAllowList").RocketMQAllowList;
export const RocketMQAllowList: typeof import("./rocketMQAllowList").RocketMQAllowList = null as any;
utilities.lazyLoad(exports, ["RocketMQAllowList"], () => require("./rocketMQAllowList"));

export { RocketMQAllowListAssociateArgs, RocketMQAllowListAssociateState } from "./rocketMQAllowListAssociate";
export type RocketMQAllowListAssociate = import("./rocketMQAllowListAssociate").RocketMQAllowListAssociate;
export const RocketMQAllowListAssociate: typeof import("./rocketMQAllowListAssociate").RocketMQAllowListAssociate = null as any;
utilities.lazyLoad(exports, ["RocketMQAllowListAssociate"], () => require("./rocketMQAllowListAssociate"));

export { RocketMQGroupArgs, RocketMQGroupState } from "./rocketMQGroup";
export type RocketMQGroup = import("./rocketMQGroup").RocketMQGroup;
export const RocketMQGroup: typeof import("./rocketMQGroup").RocketMQGroup = null as any;
utilities.lazyLoad(exports, ["RocketMQGroup"], () => require("./rocketMQGroup"));

export { RocketMQInstanceArgs, RocketMQInstanceState } from "./rocketMQInstance";
export type RocketMQInstance = import("./rocketMQInstance").RocketMQInstance;
export const RocketMQInstance: typeof import("./rocketMQInstance").RocketMQInstance = null as any;
utilities.lazyLoad(exports, ["RocketMQInstance"], () => require("./rocketMQInstance"));

export { RocketMQPublicAddressArgs, RocketMQPublicAddressState } from "./rocketMQPublicAddress";
export type RocketMQPublicAddress = import("./rocketMQPublicAddress").RocketMQPublicAddress;
export const RocketMQPublicAddress: typeof import("./rocketMQPublicAddress").RocketMQPublicAddress = null as any;
utilities.lazyLoad(exports, ["RocketMQPublicAddress"], () => require("./rocketMQPublicAddress"));

export { RocketMQTopicArgs, RocketMQTopicState } from "./rocketMQTopic";
export type RocketMQTopic = import("./rocketMQTopic").RocketMQTopic;
export const RocketMQTopic: typeof import("./rocketMQTopic").RocketMQTopic = null as any;
utilities.lazyLoad(exports, ["RocketMQTopic"], () => require("./rocketMQTopic"));

export { TopicsArgs, TopicsResult, TopicsOutputArgs } from "./topics";
export const topics: typeof import("./topics").topics = null as any;
export const topicsOutput: typeof import("./topics").topicsOutput = null as any;
utilities.lazyLoad(exports, ["topics","topicsOutput"], () => require("./topics"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey":
                return new RocketMQAccessKey(name, <any>undefined, { urn })
            case "volcengine:rocketmq/rocketMQAllowList:RocketMQAllowList":
                return new RocketMQAllowList(name, <any>undefined, { urn })
            case "volcengine:rocketmq/rocketMQAllowListAssociate:RocketMQAllowListAssociate":
                return new RocketMQAllowListAssociate(name, <any>undefined, { urn })
            case "volcengine:rocketmq/rocketMQGroup:RocketMQGroup":
                return new RocketMQGroup(name, <any>undefined, { urn })
            case "volcengine:rocketmq/rocketMQInstance:RocketMQInstance":
                return new RocketMQInstance(name, <any>undefined, { urn })
            case "volcengine:rocketmq/rocketMQPublicAddress:RocketMQPublicAddress":
                return new RocketMQPublicAddress(name, <any>undefined, { urn })
            case "volcengine:rocketmq/rocketMQTopic:RocketMQTopic":
                return new RocketMQTopic(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "rocketmq/rocketMQAccessKey", _module)
pulumi.runtime.registerResourceModule("volcengine", "rocketmq/rocketMQAllowList", _module)
pulumi.runtime.registerResourceModule("volcengine", "rocketmq/rocketMQAllowListAssociate", _module)
pulumi.runtime.registerResourceModule("volcengine", "rocketmq/rocketMQGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "rocketmq/rocketMQInstance", _module)
pulumi.runtime.registerResourceModule("volcengine", "rocketmq/rocketMQPublicAddress", _module)
pulumi.runtime.registerResourceModule("volcengine", "rocketmq/rocketMQTopic", _module)
