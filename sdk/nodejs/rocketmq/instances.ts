// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of rocketmq instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.rocketmq.getInstances({
 *     instanceId: "rocketmq-cnoeea6b32118fc2",
 * });
 * ```
 */
/** @deprecated volcengine.rocketmq.Instances has been deprecated in favor of volcengine.rocketmq.getInstances */
export function instances(args?: InstancesArgs, opts?: pulumi.InvokeOptions): Promise<InstancesResult> {
    pulumi.log.warn("instances is deprecated: volcengine.rocketmq.Instances has been deprecated in favor of volcengine.rocketmq.getInstances")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:rocketmq/instances:Instances", {
        "chargeType": args.chargeType,
        "instanceId": args.instanceId,
        "instanceName": args.instanceName,
        "instanceStatus": args.instanceStatus,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "spec": args.spec,
        "tags": args.tags,
        "version": args.version,
        "vpcId": args.vpcId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking Instances.
 */
export interface InstancesArgs {
    /**
     * The charge type of rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
     */
    chargeType?: string;
    /**
     * The id of rocketmq instance.
     */
    instanceId?: string;
    /**
     * The name of rocketmq instance. This field support fuzzy query.
     */
    instanceName?: string;
    /**
     * The status of rocketmq instance.
     */
    instanceStatus?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of rocketmq instance.
     */
    projectName?: string;
    /**
     * The spec of rocketmq instance.
     */
    spec?: string;
    /**
     * Tags.
     */
    tags?: inputs.rocketmq.InstancesTag[];
    /**
     * The version of rocketmq instance. Valid values: `4.8`.
     */
    version?: string;
    /**
     * The vpc id of rocketmq instance.
     */
    vpcId?: string;
    /**
     * The zone id of rocketmq instance.
     */
    zoneId?: string;
}

/**
 * A collection of values returned by Instances.
 */
export interface InstancesResult {
    /**
     * The charge type of the rocketmq instance.
     */
    readonly chargeType?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the rocketmq instance.
     */
    readonly instanceId?: string;
    /**
     * The name of the rocketmq instance.
     */
    readonly instanceName?: string;
    /**
     * The status of the rocketmq instance.
     */
    readonly instanceStatus?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The project name of the rocketmq instance.
     */
    readonly projectName?: string;
    /**
     * The collection of query.
     */
    readonly rocketmqInstances: outputs.rocketmq.InstancesRocketmqInstance[];
    readonly spec?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.rocketmq.InstancesTag[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    /**
     * The version of the rocketmq instance.
     */
    readonly version?: string;
    /**
     * The vpc id of the rocketmq instance.
     */
    readonly vpcId?: string;
    /**
     * The zone id of the rocketmq instance.
     */
    readonly zoneId?: string;
}
/**
 * Use this data source to query detailed information of rocketmq instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.rocketmq.getInstances({
 *     instanceId: "rocketmq-cnoeea6b32118fc2",
 * });
 * ```
 */
/** @deprecated volcengine.rocketmq.Instances has been deprecated in favor of volcengine.rocketmq.getInstances */
export function instancesOutput(args?: InstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<InstancesResult> {
    return pulumi.output(args).apply((a: any) => instances(a, opts))
}

/**
 * A collection of arguments for invoking Instances.
 */
export interface InstancesOutputArgs {
    /**
     * The charge type of rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
     */
    chargeType?: pulumi.Input<string>;
    /**
     * The id of rocketmq instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of rocketmq instance. This field support fuzzy query.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The status of rocketmq instance.
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of rocketmq instance.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The spec of rocketmq instance.
     */
    spec?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.rocketmq.InstancesTagArgs>[]>;
    /**
     * The version of rocketmq instance. Valid values: `4.8`.
     */
    version?: pulumi.Input<string>;
    /**
     * The vpc id of rocketmq instance.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The zone id of rocketmq instance.
     */
    zoneId?: pulumi.Input<string>;
}
