// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage rocketmq topic
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooRocketMQInstance = new volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance", {
 *     zoneIds: [fooZones.then(fooZones => fooZones.zones?.[0]?.id)],
 *     subnetId: fooSubnet.id,
 *     version: "4.8",
 *     computeSpec: "rocketmq.n1.x2.micro",
 *     storageSpace: 300,
 *     autoScaleQueue: true,
 *     fileReservedTime: 10,
 *     instanceName: "acc-test-rocketmq",
 *     instanceDescription: "acc-test",
 *     projectName: "default",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooRocketMQAccessKey = new volcengine.rocketmq.RocketMQAccessKey("fooRocketMQAccessKey", {
 *     instanceId: fooRocketMQInstance.id,
 *     description: "acc-test-key",
 *     allAuthority: "SUB",
 * });
 * const fooRocketMQTopic = new volcengine.rocketmq.RocketMQTopic("fooRocketMQTopic", {
 *     instanceId: fooRocketMQInstance.id,
 *     topicName: "acc-test-rocketmq-topic",
 *     description: "acc-test",
 *     queueNumber: 2,
 *     messageType: 1,
 *     accessPolicies: [{
 *         accessKey: fooRocketMQAccessKey.accessKey,
 *         authority: "PUB",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * RocketmqTopic can be imported using the instance_id:topic_name, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:rocketmq/rocketMQTopic:RocketMQTopic default resource_id
 * ```
 */
export class RocketMQTopic extends pulumi.CustomResource {
    /**
     * Get an existing RocketMQTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RocketMQTopicState, opts?: pulumi.CustomResourceOptions): RocketMQTopic {
        return new RocketMQTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:rocketmq/rocketMQTopic:RocketMQTopic';

    /**
     * Returns true if the given object is an instance of RocketMQTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RocketMQTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RocketMQTopic.__pulumiType;
    }

    /**
     * The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
     */
    public readonly accessPolicies!: pulumi.Output<outputs.rocketmq.RocketMQTopicAccessPolicy[]>;
    /**
     * The description of the rocketmq topic.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The groups information of the rocketmq topic.
     */
    public /*out*/ readonly groups!: pulumi.Output<outputs.rocketmq.RocketMQTopicGroup[]>;
    /**
     * The id of rocketmq instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
     */
    public readonly messageType!: pulumi.Output<number>;
    /**
     * The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
     */
    public readonly queueNumber!: pulumi.Output<number>;
    /**
     * The queues information of the rocketmq topic.
     */
    public /*out*/ readonly queues!: pulumi.Output<outputs.rocketmq.RocketMQTopicQueue[]>;
    /**
     * The name of the rocketmq topic.
     */
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a RocketMQTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RocketMQTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RocketMQTopicArgs | RocketMQTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RocketMQTopicState | undefined;
            resourceInputs["accessPolicies"] = state ? state.accessPolicies : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["messageType"] = state ? state.messageType : undefined;
            resourceInputs["queueNumber"] = state ? state.queueNumber : undefined;
            resourceInputs["queues"] = state ? state.queues : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as RocketMQTopicArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.messageType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'messageType'");
            }
            if ((!args || args.queueNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'queueNumber'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["messageType"] = args ? args.messageType : undefined;
            resourceInputs["queueNumber"] = args ? args.queueNumber : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
            resourceInputs["groups"] = undefined /*out*/;
            resourceInputs["queues"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RocketMQTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RocketMQTopic resources.
 */
export interface RocketMQTopicState {
    /**
     * The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
     */
    accessPolicies?: pulumi.Input<pulumi.Input<inputs.rocketmq.RocketMQTopicAccessPolicy>[]>;
    /**
     * The description of the rocketmq topic.
     */
    description?: pulumi.Input<string>;
    /**
     * The groups information of the rocketmq topic.
     */
    groups?: pulumi.Input<pulumi.Input<inputs.rocketmq.RocketMQTopicGroup>[]>;
    /**
     * The id of rocketmq instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
     */
    messageType?: pulumi.Input<number>;
    /**
     * The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
     */
    queueNumber?: pulumi.Input<number>;
    /**
     * The queues information of the rocketmq topic.
     */
    queues?: pulumi.Input<pulumi.Input<inputs.rocketmq.RocketMQTopicQueue>[]>;
    /**
     * The name of the rocketmq topic.
     */
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RocketMQTopic resource.
 */
export interface RocketMQTopicArgs {
    /**
     * The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
     */
    accessPolicies?: pulumi.Input<pulumi.Input<inputs.rocketmq.RocketMQTopicAccessPolicy>[]>;
    /**
     * The description of the rocketmq topic.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of rocketmq instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
     */
    messageType: pulumi.Input<number>;
    /**
     * The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
     */
    queueNumber: pulumi.Input<number>;
    /**
     * The name of the rocketmq topic.
     */
    topicName: pulumi.Input<string>;
}
