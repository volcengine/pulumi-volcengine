// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage rocketmq access key
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooRocketMQInstance = new volcengine.rocketmq.RocketMQInstance("fooRocketMQInstance", {
 *     zoneIds: [fooZones.then(fooZones => fooZones.zones?.[0]?.id)],
 *     subnetId: fooSubnet.id,
 *     version: "4.8",
 *     computeSpec: "rocketmq.n1.x2.micro",
 *     storageSpace: 300,
 *     autoScaleQueue: true,
 *     fileReservedTime: 10,
 *     instanceName: "acc-test-rocketmq",
 *     instanceDescription: "acc-test",
 *     projectName: "default",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooRocketMQAccessKey = new volcengine.rocketmq.RocketMQAccessKey("fooRocketMQAccessKey", {
 *     instanceId: fooRocketMQInstance.id,
 *     description: "acc-test-key",
 *     allAuthority: "SUB",
 * });
 * ```
 *
 * ## Import
 *
 * RocketmqAccessKey can be imported using the instance_id:access_key, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey default resource_id
 * ```
 */
export class RocketMQAccessKey extends pulumi.CustomResource {
    /**
     * Get an existing RocketMQAccessKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RocketMQAccessKeyState, opts?: pulumi.CustomResourceOptions): RocketMQAccessKey {
        return new RocketMQAccessKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey';

    /**
     * Returns true if the given object is an instance of RocketMQAccessKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RocketMQAccessKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RocketMQAccessKey.__pulumiType;
    }

    /**
     * The access key id of the rocketmq key.
     */
    public /*out*/ readonly accessKey!: pulumi.Output<string>;
    /**
     * The acl config of the rocketmq key.
     */
    public /*out*/ readonly aclConfigJson!: pulumi.Output<string>;
    /**
     * The active status of the rocketmq key.
     */
    public /*out*/ readonly actived!: pulumi.Output<boolean>;
    /**
     * The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
     */
    public readonly allAuthority!: pulumi.Output<string>;
    /**
     * The create time of the rocketmq key.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The id of rocketmq instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The secret key of the rocketmq key.
     */
    public /*out*/ readonly secretKey!: pulumi.Output<string>;
    /**
     * The custom authority of the rocketmq key.
     */
    public /*out*/ readonly topicPermissions!: pulumi.Output<outputs.rocketmq.RocketMQAccessKeyTopicPermission[]>;

    /**
     * Create a RocketMQAccessKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RocketMQAccessKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RocketMQAccessKeyArgs | RocketMQAccessKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RocketMQAccessKeyState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["aclConfigJson"] = state ? state.aclConfigJson : undefined;
            resourceInputs["actived"] = state ? state.actived : undefined;
            resourceInputs["allAuthority"] = state ? state.allAuthority : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["topicPermissions"] = state ? state.topicPermissions : undefined;
        } else {
            const args = argsOrState as RocketMQAccessKeyArgs | undefined;
            if ((!args || args.allAuthority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allAuthority'");
            }
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["allAuthority"] = args ? args.allAuthority : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["aclConfigJson"] = undefined /*out*/;
            resourceInputs["actived"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
            resourceInputs["topicPermissions"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["secretKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(RocketMQAccessKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RocketMQAccessKey resources.
 */
export interface RocketMQAccessKeyState {
    /**
     * The access key id of the rocketmq key.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * The acl config of the rocketmq key.
     */
    aclConfigJson?: pulumi.Input<string>;
    /**
     * The active status of the rocketmq key.
     */
    actived?: pulumi.Input<boolean>;
    /**
     * The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
     */
    allAuthority?: pulumi.Input<string>;
    /**
     * The create time of the rocketmq key.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of rocketmq instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The secret key of the rocketmq key.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * The custom authority of the rocketmq key.
     */
    topicPermissions?: pulumi.Input<pulumi.Input<inputs.rocketmq.RocketMQAccessKeyTopicPermission>[]>;
}

/**
 * The set of arguments for constructing a RocketMQAccessKey resource.
 */
export interface RocketMQAccessKeyArgs {
    /**
     * The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
     */
    allAuthority: pulumi.Input<string>;
    /**
     * The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
     */
    description: pulumi.Input<string>;
    /**
     * The id of rocketmq instance.
     */
    instanceId: pulumi.Input<string>;
}
