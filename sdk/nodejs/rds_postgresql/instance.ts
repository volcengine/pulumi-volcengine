// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage rds postgresql instance
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rds_postgresql.Instance("fooInstance", {
 *     dbEngineVersion: "PostgreSQL_12",
 *     nodeSpec: "rds.postgres.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 40,
 *     subnetId: fooSubnet.id,
 *     instanceName: "acc-test-1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     projectName: "default",
 *     tags: [{
 *         key: "tfk1",
 *         value: "tfv1",
 *     }],
 *     parameters: [
 *         {
 *             name: "auto_explain.log_analyze",
 *             value: "off",
 *         },
 *         {
 *             name: "auto_explain.log_format",
 *             value: "text",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * RdsPostgresqlInstance can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:rds_postgresql/instance:Instance default postgres-21a3333b****
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:rds_postgresql/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * The instance has used backup space. Unit: GB.
     */
    public /*out*/ readonly backupUse!: pulumi.Output<number>;
    /**
     * Payment methods.
     */
    public /*out*/ readonly chargeDetails!: pulumi.Output<outputs.rds_postgresql.InstanceChargeDetail[]>;
    /**
     * Payment methods.
     */
    public readonly chargeInfo!: pulumi.Output<outputs.rds_postgresql.InstanceChargeInfo>;
    /**
     * Node creation local time.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Data synchronization mode.
     */
    public /*out*/ readonly dataSyncMode!: pulumi.Output<string>;
    /**
     * Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
     */
    public readonly dbEngineVersion!: pulumi.Output<string>;
    /**
     * The endpoint info of the RDS instance.
     */
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.rds_postgresql.InstanceEndpoint[]>;
    /**
     * Instance ID.
     */
    public /*out*/ readonly instanceId!: pulumi.Output<string>;
    /**
     * Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
     */
    public readonly instanceName!: pulumi.Output<string | undefined>;
    /**
     * The status of the RDS PostgreSQL instance.
     */
    public /*out*/ readonly instanceStatus!: pulumi.Output<string>;
    /**
     * The instance type of the RDS PostgreSQL instance.
     */
    public /*out*/ readonly instanceType!: pulumi.Output<string>;
    /**
     * Memory size in GB.
     */
    public /*out*/ readonly memory!: pulumi.Output<number>;
    /**
     * The number of nodes.
     */
    public /*out*/ readonly nodeNumber!: pulumi.Output<number>;
    /**
     * The specification of primary node and secondary node.
     */
    public readonly nodeSpec!: pulumi.Output<string>;
    /**
     * Instance node information.
     */
    public /*out*/ readonly nodes!: pulumi.Output<outputs.rds_postgresql.InstanceNode[]>;
    /**
     * Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
     */
    public readonly parameters!: pulumi.Output<outputs.rds_postgresql.InstanceParameter[] | undefined>;
    /**
     * The available zone of primary node.
     */
    public readonly primaryZoneId!: pulumi.Output<string>;
    /**
     * The project name of the RDS instance.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The region of the RDS PostgreSQL instance.
     */
    public /*out*/ readonly regionId!: pulumi.Output<string>;
    /**
     * The available zone of secondary node.
     */
    public readonly secondaryZoneId!: pulumi.Output<string>;
    /**
     * Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
     */
    public readonly storageSpace!: pulumi.Output<number | undefined>;
    /**
     * Instance storage type.
     */
    public /*out*/ readonly storageType!: pulumi.Output<string>;
    /**
     * Subnet ID of the RDS PostgreSQL instance.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.rds_postgresql.InstanceTag[] | undefined>;
    /**
     * The update time of the RDS PostgreSQL instance.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * CPU size.
     */
    public /*out*/ readonly vCpu!: pulumi.Output<number>;
    /**
     * The vpc ID of the RDS PostgreSQL instance.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    /**
     * The available zone of the RDS PostgreSQL instance.
     */
    public /*out*/ readonly zoneId!: pulumi.Output<string>;
    /**
     * ID of the availability zone where each instance is located.
     */
    public /*out*/ readonly zoneIds!: pulumi.Output<string[]>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["backupUse"] = state ? state.backupUse : undefined;
            resourceInputs["chargeDetails"] = state ? state.chargeDetails : undefined;
            resourceInputs["chargeInfo"] = state ? state.chargeInfo : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["dataSyncMode"] = state ? state.dataSyncMode : undefined;
            resourceInputs["dbEngineVersion"] = state ? state.dbEngineVersion : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["instanceStatus"] = state ? state.instanceStatus : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["memory"] = state ? state.memory : undefined;
            resourceInputs["nodeNumber"] = state ? state.nodeNumber : undefined;
            resourceInputs["nodeSpec"] = state ? state.nodeSpec : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["primaryZoneId"] = state ? state.primaryZoneId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["secondaryZoneId"] = state ? state.secondaryZoneId : undefined;
            resourceInputs["storageSpace"] = state ? state.storageSpace : undefined;
            resourceInputs["storageType"] = state ? state.storageType : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vCpu"] = state ? state.vCpu : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneIds"] = state ? state.zoneIds : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.chargeInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chargeInfo'");
            }
            if ((!args || args.dbEngineVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbEngineVersion'");
            }
            if ((!args || args.nodeSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeSpec'");
            }
            if ((!args || args.primaryZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryZoneId'");
            }
            if ((!args || args.secondaryZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secondaryZoneId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["chargeInfo"] = args ? args.chargeInfo : undefined;
            resourceInputs["dbEngineVersion"] = args ? args.dbEngineVersion : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["nodeSpec"] = args ? args.nodeSpec : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["primaryZoneId"] = args ? args.primaryZoneId : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["secondaryZoneId"] = args ? args.secondaryZoneId : undefined;
            resourceInputs["storageSpace"] = args ? args.storageSpace : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["backupUse"] = undefined /*out*/;
            resourceInputs["chargeDetails"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["dataSyncMode"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["instanceId"] = undefined /*out*/;
            resourceInputs["instanceStatus"] = undefined /*out*/;
            resourceInputs["instanceType"] = undefined /*out*/;
            resourceInputs["memory"] = undefined /*out*/;
            resourceInputs["nodeNumber"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["storageType"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vCpu"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
            resourceInputs["zoneIds"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * The instance has used backup space. Unit: GB.
     */
    backupUse?: pulumi.Input<number>;
    /**
     * Payment methods.
     */
    chargeDetails?: pulumi.Input<pulumi.Input<inputs.rds_postgresql.InstanceChargeDetail>[]>;
    /**
     * Payment methods.
     */
    chargeInfo?: pulumi.Input<inputs.rds_postgresql.InstanceChargeInfo>;
    /**
     * Node creation local time.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Data synchronization mode.
     */
    dataSyncMode?: pulumi.Input<string>;
    /**
     * Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
     */
    dbEngineVersion?: pulumi.Input<string>;
    /**
     * The endpoint info of the RDS instance.
     */
    endpoints?: pulumi.Input<pulumi.Input<inputs.rds_postgresql.InstanceEndpoint>[]>;
    /**
     * Instance ID.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The status of the RDS PostgreSQL instance.
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * The instance type of the RDS PostgreSQL instance.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * Memory size in GB.
     */
    memory?: pulumi.Input<number>;
    /**
     * The number of nodes.
     */
    nodeNumber?: pulumi.Input<number>;
    /**
     * The specification of primary node and secondary node.
     */
    nodeSpec?: pulumi.Input<string>;
    /**
     * Instance node information.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.rds_postgresql.InstanceNode>[]>;
    /**
     * Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.rds_postgresql.InstanceParameter>[]>;
    /**
     * The available zone of primary node.
     */
    primaryZoneId?: pulumi.Input<string>;
    /**
     * The project name of the RDS instance.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The region of the RDS PostgreSQL instance.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The available zone of secondary node.
     */
    secondaryZoneId?: pulumi.Input<string>;
    /**
     * Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
     */
    storageSpace?: pulumi.Input<number>;
    /**
     * Instance storage type.
     */
    storageType?: pulumi.Input<string>;
    /**
     * Subnet ID of the RDS PostgreSQL instance.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.rds_postgresql.InstanceTag>[]>;
    /**
     * The update time of the RDS PostgreSQL instance.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * CPU size.
     */
    vCpu?: pulumi.Input<number>;
    /**
     * The vpc ID of the RDS PostgreSQL instance.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The available zone of the RDS PostgreSQL instance.
     */
    zoneId?: pulumi.Input<string>;
    /**
     * ID of the availability zone where each instance is located.
     */
    zoneIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * Payment methods.
     */
    chargeInfo: pulumi.Input<inputs.rds_postgresql.InstanceChargeInfo>;
    /**
     * Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
     */
    dbEngineVersion: pulumi.Input<string>;
    /**
     * Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The specification of primary node and secondary node.
     */
    nodeSpec: pulumi.Input<string>;
    /**
     * Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
     */
    parameters?: pulumi.Input<pulumi.Input<inputs.rds_postgresql.InstanceParameter>[]>;
    /**
     * The available zone of primary node.
     */
    primaryZoneId: pulumi.Input<string>;
    /**
     * The project name of the RDS instance.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The available zone of secondary node.
     */
    secondaryZoneId: pulumi.Input<string>;
    /**
     * Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
     */
    storageSpace?: pulumi.Input<number>;
    /**
     * Subnet ID of the RDS PostgreSQL instance.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.rds_postgresql.InstanceTag>[]>;
}
