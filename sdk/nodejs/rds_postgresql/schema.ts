// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage rds postgresql schema
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rds_postgresql.Instance("fooInstance", {
 *     dbEngineVersion: "PostgreSQL_12",
 *     nodeSpec: "rds.postgres.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 40,
 *     subnetId: fooSubnet.id,
 *     instanceName: "acc-test-1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     projectName: "default",
 *     tags: [{
 *         key: "tfk1",
 *         value: "tfv1",
 *     }],
 *     parameters: [
 *         {
 *             name: "auto_explain.log_analyze",
 *             value: "off",
 *         },
 *         {
 *             name: "auto_explain.log_format",
 *             value: "text",
 *         },
 *     ],
 * });
 * const fooDatabase = new volcengine.rds_postgresql.Database("fooDatabase", {
 *     dbName: "acc-test",
 *     instanceId: fooInstance.id,
 *     cType: "C",
 *     collate: "zh_CN.utf8",
 * });
 * const fooAccount = new volcengine.rds_postgresql.Account("fooAccount", {
 *     accountName: "acc-test-account",
 *     accountPassword: "9wc@********12",
 *     accountType: "Normal",
 *     instanceId: fooInstance.id,
 *     accountPrivileges: "Inherit,Login,CreateRole,CreateDB",
 * });
 * const foo1 = new volcengine.rds_postgresql.Account("foo1", {
 *     accountName: "acc-test-account1",
 *     accountPassword: "9wc@*******12",
 *     accountType: "Normal",
 *     instanceId: fooInstance.id,
 *     accountPrivileges: "Inherit,Login,CreateRole,CreateDB",
 * });
 * const fooSchema = new volcengine.rds_postgresql.Schema("fooSchema", {
 *     dbName: fooDatabase.dbName,
 *     instanceId: fooInstance.id,
 *     owner: fooAccount.accountName,
 *     schemaName: "acc-test-schema",
 * });
 * ```
 *
 * ## Import
 *
 * RdsPostgresqlSchema can be imported using the instance id, database name and schema name, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:rds_postgresql/schema:Schema default instance_id:db_name:schema_name
 * ```
 */
export class Schema extends pulumi.CustomResource {
    /**
     * Get an existing Schema resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SchemaState, opts?: pulumi.CustomResourceOptions): Schema {
        return new Schema(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:rds_postgresql/schema:Schema';

    /**
     * Returns true if the given object is an instance of Schema.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Schema {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Schema.__pulumiType;
    }

    /**
     * The name of the database.
     */
    public readonly dbName!: pulumi.Output<string>;
    /**
     * The id of the postgresql instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The owner of the schema.
     */
    public readonly owner!: pulumi.Output<string>;
    /**
     * The name of the schema.
     */
    public readonly schemaName!: pulumi.Output<string>;

    /**
     * Create a Schema resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SchemaArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SchemaArgs | SchemaState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SchemaState | undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["schemaName"] = state ? state.schemaName : undefined;
        } else {
            const args = argsOrState as SchemaArgs | undefined;
            if ((!args || args.dbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.owner === undefined) && !opts.urn) {
                throw new Error("Missing required property 'owner'");
            }
            if ((!args || args.schemaName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schemaName'");
            }
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["schemaName"] = args ? args.schemaName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Schema.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Schema resources.
 */
export interface SchemaState {
    /**
     * The name of the database.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The id of the postgresql instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The owner of the schema.
     */
    owner?: pulumi.Input<string>;
    /**
     * The name of the schema.
     */
    schemaName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Schema resource.
 */
export interface SchemaArgs {
    /**
     * The name of the database.
     */
    dbName: pulumi.Input<string>;
    /**
     * The id of the postgresql instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The owner of the schema.
     */
    owner: pulumi.Input<string>;
    /**
     * The name of the schema.
     */
    schemaName: pulumi.Input<string>;
}
