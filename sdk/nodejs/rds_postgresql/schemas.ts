// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of rds postgresql schemas
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rds_postgresql.Instance("fooInstance", {
 *     dbEngineVersion: "PostgreSQL_12",
 *     nodeSpec: "rds.postgres.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 40,
 *     subnetId: fooSubnet.id,
 *     instanceName: "acc-test-1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     projectName: "default",
 *     tags: [{
 *         key: "tfk1",
 *         value: "tfv1",
 *     }],
 *     parameters: [
 *         {
 *             name: "auto_explain.log_analyze",
 *             value: "off",
 *         },
 *         {
 *             name: "auto_explain.log_format",
 *             value: "text",
 *         },
 *     ],
 * });
 * const fooDatabase = new volcengine.rds_postgresql.Database("fooDatabase", {
 *     dbName: "acc-test",
 *     instanceId: fooInstance.id,
 *     cType: "C",
 *     collate: "zh_CN.utf8",
 * });
 * const fooAccount = new volcengine.rds_postgresql.Account("fooAccount", {
 *     accountName: "acc-test-account",
 *     accountPassword: "9wc@********12",
 *     accountType: "Normal",
 *     instanceId: fooInstance.id,
 *     accountPrivileges: "Inherit,Login,CreateRole,CreateDB",
 * });
 * const foo1 = new volcengine.rds_postgresql.Account("foo1", {
 *     accountName: "acc-test-account1",
 *     accountPassword: "9wc@*******12",
 *     accountType: "Normal",
 *     instanceId: fooInstance.id,
 *     accountPrivileges: "Inherit,Login,CreateRole,CreateDB",
 * });
 * const fooSchema = new volcengine.rds_postgresql.Schema("fooSchema", {
 *     dbName: fooDatabase.dbName,
 *     instanceId: fooInstance.id,
 *     owner: fooAccount.accountName,
 *     schemaName: "acc-test-schema",
 * });
 * const fooSchemas = volcengine.rds_postgresql.getSchemasOutput({
 *     dbName: fooSchema.dbName,
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.rds_postgresql.Schemas has been deprecated in favor of volcengine.rds_postgresql.getSchemas */
export function schemas(args: SchemasArgs, opts?: pulumi.InvokeOptions): Promise<SchemasResult> {
    pulumi.log.warn("schemas is deprecated: volcengine.rds_postgresql.Schemas has been deprecated in favor of volcengine.rds_postgresql.getSchemas")

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:rds_postgresql/schemas:Schemas", {
        "dbName": args.dbName,
        "instanceId": args.instanceId,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking Schemas.
 */
export interface SchemasArgs {
    /**
     * The name of the database.
     */
    dbName?: string;
    /**
     * The id of the instance.
     */
    instanceId: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
}

/**
 * A collection of values returned by Schemas.
 */
export interface SchemasResult {
    /**
     * The name of the database.
     */
    readonly dbName?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly outputFile?: string;
    /**
     * The collection of query.
     */
    readonly schemas: outputs.rds_postgresql.SchemasSchema[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of rds postgresql schemas
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rds_postgresql.Instance("fooInstance", {
 *     dbEngineVersion: "PostgreSQL_12",
 *     nodeSpec: "rds.postgres.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 40,
 *     subnetId: fooSubnet.id,
 *     instanceName: "acc-test-1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     projectName: "default",
 *     tags: [{
 *         key: "tfk1",
 *         value: "tfv1",
 *     }],
 *     parameters: [
 *         {
 *             name: "auto_explain.log_analyze",
 *             value: "off",
 *         },
 *         {
 *             name: "auto_explain.log_format",
 *             value: "text",
 *         },
 *     ],
 * });
 * const fooDatabase = new volcengine.rds_postgresql.Database("fooDatabase", {
 *     dbName: "acc-test",
 *     instanceId: fooInstance.id,
 *     cType: "C",
 *     collate: "zh_CN.utf8",
 * });
 * const fooAccount = new volcengine.rds_postgresql.Account("fooAccount", {
 *     accountName: "acc-test-account",
 *     accountPassword: "9wc@********12",
 *     accountType: "Normal",
 *     instanceId: fooInstance.id,
 *     accountPrivileges: "Inherit,Login,CreateRole,CreateDB",
 * });
 * const foo1 = new volcengine.rds_postgresql.Account("foo1", {
 *     accountName: "acc-test-account1",
 *     accountPassword: "9wc@*******12",
 *     accountType: "Normal",
 *     instanceId: fooInstance.id,
 *     accountPrivileges: "Inherit,Login,CreateRole,CreateDB",
 * });
 * const fooSchema = new volcengine.rds_postgresql.Schema("fooSchema", {
 *     dbName: fooDatabase.dbName,
 *     instanceId: fooInstance.id,
 *     owner: fooAccount.accountName,
 *     schemaName: "acc-test-schema",
 * });
 * const fooSchemas = volcengine.rds_postgresql.getSchemasOutput({
 *     dbName: fooSchema.dbName,
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.rds_postgresql.Schemas has been deprecated in favor of volcengine.rds_postgresql.getSchemas */
export function schemasOutput(args: SchemasOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<SchemasResult> {
    return pulumi.output(args).apply((a: any) => schemas(a, opts))
}

/**
 * A collection of arguments for invoking Schemas.
 */
export interface SchemasOutputArgs {
    /**
     * The name of the database.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The id of the instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
}
