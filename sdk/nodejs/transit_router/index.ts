// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BandwidthPackageArgs, BandwidthPackageState } from "./bandwidthPackage";
export type BandwidthPackage = import("./bandwidthPackage").BandwidthPackage;
export const BandwidthPackage: typeof import("./bandwidthPackage").BandwidthPackage = null as any;
utilities.lazyLoad(exports, ["BandwidthPackage"], () => require("./bandwidthPackage"));

export { BandwidthPackagesArgs, BandwidthPackagesResult, BandwidthPackagesOutputArgs } from "./bandwidthPackages";
export const bandwidthPackages: typeof import("./bandwidthPackages").bandwidthPackages = null as any;
export const bandwidthPackagesOutput: typeof import("./bandwidthPackages").bandwidthPackagesOutput = null as any;
utilities.lazyLoad(exports, ["bandwidthPackages","bandwidthPackagesOutput"], () => require("./bandwidthPackages"));

export { DirectConnectGatewayAttachmentArgs, DirectConnectGatewayAttachmentState } from "./directConnectGatewayAttachment";
export type DirectConnectGatewayAttachment = import("./directConnectGatewayAttachment").DirectConnectGatewayAttachment;
export const DirectConnectGatewayAttachment: typeof import("./directConnectGatewayAttachment").DirectConnectGatewayAttachment = null as any;
utilities.lazyLoad(exports, ["DirectConnectGatewayAttachment"], () => require("./directConnectGatewayAttachment"));

export { DirectConnectGatewayAttachmentsArgs, DirectConnectGatewayAttachmentsResult, DirectConnectGatewayAttachmentsOutputArgs } from "./directConnectGatewayAttachments";
export const directConnectGatewayAttachments: typeof import("./directConnectGatewayAttachments").directConnectGatewayAttachments = null as any;
export const directConnectGatewayAttachmentsOutput: typeof import("./directConnectGatewayAttachments").directConnectGatewayAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["directConnectGatewayAttachments","directConnectGatewayAttachmentsOutput"], () => require("./directConnectGatewayAttachments"));

export { GrantRuleArgs, GrantRuleState } from "./grantRule";
export type GrantRule = import("./grantRule").GrantRule;
export const GrantRule: typeof import("./grantRule").GrantRule = null as any;
utilities.lazyLoad(exports, ["GrantRule"], () => require("./grantRule"));

export { GrantRulesArgs, GrantRulesResult, GrantRulesOutputArgs } from "./grantRules";
export const grantRules: typeof import("./grantRules").grantRules = null as any;
export const grantRulesOutput: typeof import("./grantRules").grantRulesOutput = null as any;
utilities.lazyLoad(exports, ["grantRules","grantRulesOutput"], () => require("./grantRules"));

export { PeerAttachmentArgs, PeerAttachmentState } from "./peerAttachment";
export type PeerAttachment = import("./peerAttachment").PeerAttachment;
export const PeerAttachment: typeof import("./peerAttachment").PeerAttachment = null as any;
utilities.lazyLoad(exports, ["PeerAttachment"], () => require("./peerAttachment"));

export { PeerAttachmentsArgs, PeerAttachmentsResult, PeerAttachmentsOutputArgs } from "./peerAttachments";
export const peerAttachments: typeof import("./peerAttachments").peerAttachments = null as any;
export const peerAttachmentsOutput: typeof import("./peerAttachments").peerAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["peerAttachments","peerAttachmentsOutput"], () => require("./peerAttachments"));

export { RouteEntriesArgs, RouteEntriesResult, RouteEntriesOutputArgs } from "./routeEntries";
export const routeEntries: typeof import("./routeEntries").routeEntries = null as any;
export const routeEntriesOutput: typeof import("./routeEntries").routeEntriesOutput = null as any;
utilities.lazyLoad(exports, ["routeEntries","routeEntriesOutput"], () => require("./routeEntries"));

export { RouteEntryArgs, RouteEntryState } from "./routeEntry";
export type RouteEntry = import("./routeEntry").RouteEntry;
export const RouteEntry: typeof import("./routeEntry").RouteEntry = null as any;
utilities.lazyLoad(exports, ["RouteEntry"], () => require("./routeEntry"));

export { RouteTableArgs, RouteTableState } from "./routeTable";
export type RouteTable = import("./routeTable").RouteTable;
export const RouteTable: typeof import("./routeTable").RouteTable = null as any;
utilities.lazyLoad(exports, ["RouteTable"], () => require("./routeTable"));

export { RouteTableAssociationArgs, RouteTableAssociationState } from "./routeTableAssociation";
export type RouteTableAssociation = import("./routeTableAssociation").RouteTableAssociation;
export const RouteTableAssociation: typeof import("./routeTableAssociation").RouteTableAssociation = null as any;
utilities.lazyLoad(exports, ["RouteTableAssociation"], () => require("./routeTableAssociation"));

export { RouteTableAssociationsArgs, RouteTableAssociationsResult, RouteTableAssociationsOutputArgs } from "./routeTableAssociations";
export const routeTableAssociations: typeof import("./routeTableAssociations").routeTableAssociations = null as any;
export const routeTableAssociationsOutput: typeof import("./routeTableAssociations").routeTableAssociationsOutput = null as any;
utilities.lazyLoad(exports, ["routeTableAssociations","routeTableAssociationsOutput"], () => require("./routeTableAssociations"));

export { RouteTablePropagationArgs, RouteTablePropagationState } from "./routeTablePropagation";
export type RouteTablePropagation = import("./routeTablePropagation").RouteTablePropagation;
export const RouteTablePropagation: typeof import("./routeTablePropagation").RouteTablePropagation = null as any;
utilities.lazyLoad(exports, ["RouteTablePropagation"], () => require("./routeTablePropagation"));

export { RouteTablePropagationsArgs, RouteTablePropagationsResult, RouteTablePropagationsOutputArgs } from "./routeTablePropagations";
export const routeTablePropagations: typeof import("./routeTablePropagations").routeTablePropagations = null as any;
export const routeTablePropagationsOutput: typeof import("./routeTablePropagations").routeTablePropagationsOutput = null as any;
utilities.lazyLoad(exports, ["routeTablePropagations","routeTablePropagationsOutput"], () => require("./routeTablePropagations"));

export { RouteTablesArgs, RouteTablesResult, RouteTablesOutputArgs } from "./routeTables";
export const routeTables: typeof import("./routeTables").routeTables = null as any;
export const routeTablesOutput: typeof import("./routeTables").routeTablesOutput = null as any;
utilities.lazyLoad(exports, ["routeTables","routeTablesOutput"], () => require("./routeTables"));

export { SharedTransitRouterStateArgs, SharedTransitRouterStateState } from "./sharedTransitRouterState";
export type SharedTransitRouterState = import("./sharedTransitRouterState").SharedTransitRouterState;
export const SharedTransitRouterState: typeof import("./sharedTransitRouterState").SharedTransitRouterState = null as any;
utilities.lazyLoad(exports, ["SharedTransitRouterState"], () => require("./sharedTransitRouterState"));

export { TransitRouterArgs, TransitRouterState } from "./transitRouter";
export type TransitRouter = import("./transitRouter").TransitRouter;
export const TransitRouter: typeof import("./transitRouter").TransitRouter = null as any;
utilities.lazyLoad(exports, ["TransitRouter"], () => require("./transitRouter"));

export { TransitRoutersArgs, TransitRoutersResult, TransitRoutersOutputArgs } from "./transitRouters";
export const transitRouters: typeof import("./transitRouters").transitRouters = null as any;
export const transitRoutersOutput: typeof import("./transitRouters").transitRoutersOutput = null as any;
utilities.lazyLoad(exports, ["transitRouters","transitRoutersOutput"], () => require("./transitRouters"));

export { VpcAttachmentArgs, VpcAttachmentState } from "./vpcAttachment";
export type VpcAttachment = import("./vpcAttachment").VpcAttachment;
export const VpcAttachment: typeof import("./vpcAttachment").VpcAttachment = null as any;
utilities.lazyLoad(exports, ["VpcAttachment"], () => require("./vpcAttachment"));

export { VpcAttachmentsArgs, VpcAttachmentsResult, VpcAttachmentsOutputArgs } from "./vpcAttachments";
export const vpcAttachments: typeof import("./vpcAttachments").vpcAttachments = null as any;
export const vpcAttachmentsOutput: typeof import("./vpcAttachments").vpcAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["vpcAttachments","vpcAttachmentsOutput"], () => require("./vpcAttachments"));

export { VpnAttachmentArgs, VpnAttachmentState } from "./vpnAttachment";
export type VpnAttachment = import("./vpnAttachment").VpnAttachment;
export const VpnAttachment: typeof import("./vpnAttachment").VpnAttachment = null as any;
utilities.lazyLoad(exports, ["VpnAttachment"], () => require("./vpnAttachment"));

export { VpnAttachmentsArgs, VpnAttachmentsResult, VpnAttachmentsOutputArgs } from "./vpnAttachments";
export const vpnAttachments: typeof import("./vpnAttachments").vpnAttachments = null as any;
export const vpnAttachmentsOutput: typeof import("./vpnAttachments").vpnAttachmentsOutput = null as any;
utilities.lazyLoad(exports, ["vpnAttachments","vpnAttachmentsOutput"], () => require("./vpnAttachments"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:transit_router/bandwidthPackage:BandwidthPackage":
                return new BandwidthPackage(name, <any>undefined, { urn })
            case "volcengine:transit_router/directConnectGatewayAttachment:DirectConnectGatewayAttachment":
                return new DirectConnectGatewayAttachment(name, <any>undefined, { urn })
            case "volcengine:transit_router/grantRule:GrantRule":
                return new GrantRule(name, <any>undefined, { urn })
            case "volcengine:transit_router/peerAttachment:PeerAttachment":
                return new PeerAttachment(name, <any>undefined, { urn })
            case "volcengine:transit_router/routeEntry:RouteEntry":
                return new RouteEntry(name, <any>undefined, { urn })
            case "volcengine:transit_router/routeTable:RouteTable":
                return new RouteTable(name, <any>undefined, { urn })
            case "volcengine:transit_router/routeTableAssociation:RouteTableAssociation":
                return new RouteTableAssociation(name, <any>undefined, { urn })
            case "volcengine:transit_router/routeTablePropagation:RouteTablePropagation":
                return new RouteTablePropagation(name, <any>undefined, { urn })
            case "volcengine:transit_router/sharedTransitRouterState:SharedTransitRouterState":
                return new SharedTransitRouterState(name, <any>undefined, { urn })
            case "volcengine:transit_router/transitRouter:TransitRouter":
                return new TransitRouter(name, <any>undefined, { urn })
            case "volcengine:transit_router/vpcAttachment:VpcAttachment":
                return new VpcAttachment(name, <any>undefined, { urn })
            case "volcengine:transit_router/vpnAttachment:VpnAttachment":
                return new VpnAttachment(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "transit_router/bandwidthPackage", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/directConnectGatewayAttachment", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/grantRule", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/peerAttachment", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/routeEntry", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/routeTable", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/routeTableAssociation", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/routeTablePropagation", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/sharedTransitRouterState", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/transitRouter", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/vpcAttachment", _module)
pulumi.runtime.registerResourceModule("volcengine", "transit_router/vpnAttachment", _module)
