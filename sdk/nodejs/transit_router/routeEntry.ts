// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage transit router route entry
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.transit_router.RouteEntry("foo", {
 *     description: "tf test 23",
 *     destinationCidrBlock: "192.168.0.0/24",
 *     transitRouterRouteEntryName: "tf-entry-23",
 *     transitRouterRouteEntryNextHopType: "BlackHole",
 *     transitRouterRouteTableId: "tr-rtb-12b7qd3fmzf2817q7y2jkbd55",
 * });
 * ```
 *
 * ## Import
 *
 * transit router route entry can be imported using the table and entry id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:transit_router/routeEntry:RouteEntry default tr-rtb-12b7qd3fmzf2817q7y2jkbd55:tr-rte-1i5i8khf9m58gae5kcx6***
 * ```
 */
export class RouteEntry extends pulumi.CustomResource {
    /**
     * Get an existing RouteEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteEntryState, opts?: pulumi.CustomResourceOptions): RouteEntry {
        return new RouteEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:transit_router/routeEntry:RouteEntry';

    /**
     * Returns true if the given object is an instance of RouteEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteEntry.__pulumiType;
    }

    /**
     * The creation time of the route entry.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * Description of the transit router route entry.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The target network segment of the route entry.
     */
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    /**
     * The status of the route entry.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The id of the route entry.
     */
    public /*out*/ readonly transitRouterRouteEntryId!: pulumi.Output<string>;
    /**
     * The name of the route entry.
     */
    public readonly transitRouterRouteEntryName!: pulumi.Output<string>;
    /**
     * The next hot id of the routing entry. When the parameter TransitRouterRouteEntryNextHopType is Attachment, this parameter must be filled.
     */
    public readonly transitRouterRouteEntryNextHopId!: pulumi.Output<string | undefined>;
    /**
     * The next hop type of the routing entry. The value can be Attachment or BlackHole.
     */
    public readonly transitRouterRouteEntryNextHopType!: pulumi.Output<string>;
    /**
     * The type of the route entry.
     */
    public /*out*/ readonly transitRouterRouteEntryType!: pulumi.Output<string>;
    /**
     * The id of the route table.
     */
    public readonly transitRouterRouteTableId!: pulumi.Output<string>;
    /**
     * The update time of the route entry.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a RouteEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteEntryArgs | RouteEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteEntryState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["transitRouterRouteEntryId"] = state ? state.transitRouterRouteEntryId : undefined;
            resourceInputs["transitRouterRouteEntryName"] = state ? state.transitRouterRouteEntryName : undefined;
            resourceInputs["transitRouterRouteEntryNextHopId"] = state ? state.transitRouterRouteEntryNextHopId : undefined;
            resourceInputs["transitRouterRouteEntryNextHopType"] = state ? state.transitRouterRouteEntryNextHopType : undefined;
            resourceInputs["transitRouterRouteEntryType"] = state ? state.transitRouterRouteEntryType : undefined;
            resourceInputs["transitRouterRouteTableId"] = state ? state.transitRouterRouteTableId : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as RouteEntryArgs | undefined;
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.transitRouterRouteEntryNextHopType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitRouterRouteEntryNextHopType'");
            }
            if ((!args || args.transitRouterRouteTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitRouterRouteTableId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["transitRouterRouteEntryName"] = args ? args.transitRouterRouteEntryName : undefined;
            resourceInputs["transitRouterRouteEntryNextHopId"] = args ? args.transitRouterRouteEntryNextHopId : undefined;
            resourceInputs["transitRouterRouteEntryNextHopType"] = args ? args.transitRouterRouteEntryNextHopType : undefined;
            resourceInputs["transitRouterRouteTableId"] = args ? args.transitRouterRouteTableId : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["transitRouterRouteEntryId"] = undefined /*out*/;
            resourceInputs["transitRouterRouteEntryType"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteEntry resources.
 */
export interface RouteEntryState {
    /**
     * The creation time of the route entry.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * Description of the transit router route entry.
     */
    description?: pulumi.Input<string>;
    /**
     * The target network segment of the route entry.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * The status of the route entry.
     */
    status?: pulumi.Input<string>;
    /**
     * The id of the route entry.
     */
    transitRouterRouteEntryId?: pulumi.Input<string>;
    /**
     * The name of the route entry.
     */
    transitRouterRouteEntryName?: pulumi.Input<string>;
    /**
     * The next hot id of the routing entry. When the parameter TransitRouterRouteEntryNextHopType is Attachment, this parameter must be filled.
     */
    transitRouterRouteEntryNextHopId?: pulumi.Input<string>;
    /**
     * The next hop type of the routing entry. The value can be Attachment or BlackHole.
     */
    transitRouterRouteEntryNextHopType?: pulumi.Input<string>;
    /**
     * The type of the route entry.
     */
    transitRouterRouteEntryType?: pulumi.Input<string>;
    /**
     * The id of the route table.
     */
    transitRouterRouteTableId?: pulumi.Input<string>;
    /**
     * The update time of the route entry.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteEntry resource.
 */
export interface RouteEntryArgs {
    /**
     * Description of the transit router route entry.
     */
    description?: pulumi.Input<string>;
    /**
     * The target network segment of the route entry.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * The name of the route entry.
     */
    transitRouterRouteEntryName?: pulumi.Input<string>;
    /**
     * The next hot id of the routing entry. When the parameter TransitRouterRouteEntryNextHopType is Attachment, this parameter must be filled.
     */
    transitRouterRouteEntryNextHopId?: pulumi.Input<string>;
    /**
     * The next hop type of the routing entry. The value can be Attachment or BlackHole.
     */
    transitRouterRouteEntryNextHopType: pulumi.Input<string>;
    /**
     * The id of the route table.
     */
    transitRouterRouteTableId: pulumi.Input<string>;
}
