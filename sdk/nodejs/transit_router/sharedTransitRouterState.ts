// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage transit router shared transit router state
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const secondAccount = new volcengine.Provider("secondAccount", {
 *     accessKey: "access_key_2",
 *     secretKey: "secret_key_2",
 *     region: "region_2",
 * });
 * const fooTransitRouter = new volcengine.transit_router.TransitRouter("fooTransitRouter", {
 *     transitRouterName: "acc-test-tr",
 *     description: "acc-test",
 * });
 * const fooGrantRule = new volcengine.transit_router.GrantRule("fooGrantRule", {
 *     grantAccountId: "2000xxxxx",
 *     description: "acc-test-tf",
 *     transitRouterId: fooTransitRouter.id,
 * });
 * const fooSharedTransitRouterState = new volcengine.transit_router.SharedTransitRouterState("fooSharedTransitRouterState", {
 *     transitRouterId: fooTransitRouter.id,
 *     action: "Accept",
 * }, {
 *     provider: volcengine.second_account,
 * });
 * ```
 *
 * ## Import
 *
 * SharedTransitRouterState can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:transit_router/sharedTransitRouterState:SharedTransitRouterState default state:transitRouterId
 * ```
 */
export class SharedTransitRouterState extends pulumi.CustomResource {
    /**
     * Get an existing SharedTransitRouterState resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedTransitRouterStateState, opts?: pulumi.CustomResourceOptions): SharedTransitRouterState {
        return new SharedTransitRouterState(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:transit_router/sharedTransitRouterState:SharedTransitRouterState';

    /**
     * Returns true if the given object is an instance of SharedTransitRouterState.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedTransitRouterState {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedTransitRouterState.__pulumiType;
    }

    /**
     * `Accept` or `Reject` the shared transit router. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The id of the transit router.
     */
    public readonly transitRouterId!: pulumi.Output<string>;

    /**
     * Create a SharedTransitRouterState resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedTransitRouterStateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedTransitRouterStateArgs | SharedTransitRouterStateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedTransitRouterStateState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["transitRouterId"] = state ? state.transitRouterId : undefined;
        } else {
            const args = argsOrState as SharedTransitRouterStateArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.transitRouterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'transitRouterId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["transitRouterId"] = args ? args.transitRouterId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedTransitRouterState.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SharedTransitRouterState resources.
 */
export interface SharedTransitRouterStateState {
    /**
     * `Accept` or `Reject` the shared transit router. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    action?: pulumi.Input<string>;
    /**
     * The id of the transit router.
     */
    transitRouterId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SharedTransitRouterState resource.
 */
export interface SharedTransitRouterStateArgs {
    /**
     * `Accept` or `Reject` the shared transit router. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    action: pulumi.Input<string>;
    /**
     * The id of the transit router.
     */
    transitRouterId: pulumi.Input<string>;
}
