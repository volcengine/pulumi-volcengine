// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of ebs snapshot groups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     securityGroupName: "acc-test-security-group",
 *     vpcId: fooVpc.id,
 * });
 * const fooImages = volcengine.ecs.Images({
 *     osType: "Linux",
 *     visibility: "public",
 *     instanceTypeId: "ecs.g3il.large",
 * });
 * const fooInstance = new volcengine.ecs.Instance("fooInstance", {
 *     instanceName: "acc-test-ecs",
 *     description: "acc-test",
 *     hostName: "tf-acc-test",
 *     imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *     instanceType: "ecs.g3il.large",
 *     password: "93f0cb0614Aab12",
 *     instanceChargeType: "PostPaid",
 *     systemVolumeType: "ESSD_PL0",
 *     systemVolumeSize: 40,
 *     subnetId: fooSubnet.id,
 *     securityGroupIds: [fooSecurityGroup.id],
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooVolume = new volcengine.ebs.Volume("fooVolume", {
 *     volumeName: "acc-test-volume",
 *     volumeType: "ESSD_PL0",
 *     description: "acc-test",
 *     kind: "data",
 *     size: 500,
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     volumeChargeType: "PostPaid",
 *     projectName: "default",
 * });
 * const fooVolumeAttach = new volcengine.ebs.VolumeAttach("fooVolumeAttach", {
 *     instanceId: fooInstance.id,
 *     volumeId: fooVolume.id,
 * });
 * const fooSnapshotGroup = new volcengine.ebs.SnapshotGroup("fooSnapshotGroup", {
 *     volumeIds: [
 *         fooInstance.systemVolumeId,
 *         fooVolume.id,
 *     ],
 *     instanceId: fooInstance.id,
 *     description: "acc-test",
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * }, {
 *     dependsOn: [fooVolumeAttach],
 * });
 * const fooSnapshotGroups = volcengine.ebs.SnapshotGroupsOutput({
 *     ids: [fooSnapshotGroup.id],
 * });
 * ```
 */
export function snapshotGroups(args?: SnapshotGroupsArgs, opts?: pulumi.InvokeOptions): Promise<SnapshotGroupsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:ebs/snapshotGroups:SnapshotGroups", {
        "ids": args.ids,
        "instanceId": args.instanceId,
        "name": args.name,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "statuses": args.statuses,
    }, opts);
}

/**
 * A collection of arguments for invoking SnapshotGroups.
 */
export interface SnapshotGroupsArgs {
    /**
     * A list of snapshot group IDs.
     */
    ids?: string[];
    /**
     * The instance id of snapshot group.
     */
    instanceId?: string;
    /**
     * The name of snapshot group.
     */
    name?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of snapshot group.
     */
    projectName?: string;
    /**
     * A list of snapshot group status. Valid values: `creating`, `available`, `failed`.
     */
    statuses?: string[];
}

/**
 * A collection of values returned by SnapshotGroups.
 */
export interface SnapshotGroupsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The instance id of the snapshot group.
     */
    readonly instanceId?: string;
    /**
     * The name of the snapshot group.
     */
    readonly name?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The id of the snapshot.
     */
    readonly projectName?: string;
    /**
     * The collection of query.
     */
    readonly snapshotGroups: outputs.ebs.SnapshotGroupsSnapshotGroup[];
    /**
     * The status of the snapshot group.
     */
    readonly statuses?: string[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of ebs snapshot groups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     securityGroupName: "acc-test-security-group",
 *     vpcId: fooVpc.id,
 * });
 * const fooImages = volcengine.ecs.Images({
 *     osType: "Linux",
 *     visibility: "public",
 *     instanceTypeId: "ecs.g3il.large",
 * });
 * const fooInstance = new volcengine.ecs.Instance("fooInstance", {
 *     instanceName: "acc-test-ecs",
 *     description: "acc-test",
 *     hostName: "tf-acc-test",
 *     imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *     instanceType: "ecs.g3il.large",
 *     password: "93f0cb0614Aab12",
 *     instanceChargeType: "PostPaid",
 *     systemVolumeType: "ESSD_PL0",
 *     systemVolumeSize: 40,
 *     subnetId: fooSubnet.id,
 *     securityGroupIds: [fooSecurityGroup.id],
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooVolume = new volcengine.ebs.Volume("fooVolume", {
 *     volumeName: "acc-test-volume",
 *     volumeType: "ESSD_PL0",
 *     description: "acc-test",
 *     kind: "data",
 *     size: 500,
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     volumeChargeType: "PostPaid",
 *     projectName: "default",
 * });
 * const fooVolumeAttach = new volcengine.ebs.VolumeAttach("fooVolumeAttach", {
 *     instanceId: fooInstance.id,
 *     volumeId: fooVolume.id,
 * });
 * const fooSnapshotGroup = new volcengine.ebs.SnapshotGroup("fooSnapshotGroup", {
 *     volumeIds: [
 *         fooInstance.systemVolumeId,
 *         fooVolume.id,
 *     ],
 *     instanceId: fooInstance.id,
 *     description: "acc-test",
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * }, {
 *     dependsOn: [fooVolumeAttach],
 * });
 * const fooSnapshotGroups = volcengine.ebs.SnapshotGroupsOutput({
 *     ids: [fooSnapshotGroup.id],
 * });
 * ```
 */
export function snapshotGroupsOutput(args?: SnapshotGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<SnapshotGroupsResult> {
    return pulumi.output(args).apply((a: any) => snapshotGroups(a, opts))
}

/**
 * A collection of arguments for invoking SnapshotGroups.
 */
export interface SnapshotGroupsOutputArgs {
    /**
     * A list of snapshot group IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance id of snapshot group.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of snapshot group.
     */
    name?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of snapshot group.
     */
    projectName?: pulumi.Input<string>;
    /**
     * A list of snapshot group status. Valid values: `creating`, `available`, `failed`.
     */
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
}
