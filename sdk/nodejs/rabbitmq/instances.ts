// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of rabbitmq instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rabbitmq.Instance("fooInstance", {
 *     zoneIds: [
 *         fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *         fooZones.then(fooZones => fooZones.zones?.[1]?.id),
 *         fooZones.then(fooZones => fooZones.zones?.[2]?.id),
 *     ],
 *     subnetId: fooSubnet.id,
 *     version: "3.8.18",
 *     userName: "acc-test-user",
 *     userPassword: "93f0cb0614Aab12",
 *     computeSpec: "rabbitmq.n3.x2.small",
 *     storageSpace: 300,
 *     instanceName: "acc-test-rabbitmq",
 *     instanceDescription: "acc-test",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooInstances = volcengine.rabbitmq.getInstancesOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.rabbitmq.Instances has been deprecated in favor of volcengine.rabbitmq.getInstances */
export function instances(args?: InstancesArgs, opts?: pulumi.InvokeOptions): Promise<InstancesResult> {
    pulumi.log.warn("instances is deprecated: volcengine.rabbitmq.Instances has been deprecated in favor of volcengine.rabbitmq.getInstances")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:rabbitmq/instances:Instances", {
        "chargeType": args.chargeType,
        "instanceId": args.instanceId,
        "instanceName": args.instanceName,
        "instanceStatus": args.instanceStatus,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "spec": args.spec,
        "tags": args.tags,
        "vpcId": args.vpcId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking Instances.
 */
export interface InstancesArgs {
    /**
     * The charge type of rabbitmq instance.
     */
    chargeType?: string;
    /**
     * The id of rabbitmq instance. This field supports fuzzy query.
     */
    instanceId?: string;
    /**
     * The name of rabbitmq instance. This field supports fuzzy query.
     */
    instanceName?: string;
    /**
     * The status of rabbitmq instance.
     */
    instanceStatus?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of rabbitmq instance.
     */
    projectName?: string;
    /**
     * The calculation specification of rabbitmq instance.
     */
    spec?: string;
    /**
     * Tags.
     */
    tags?: inputs.rabbitmq.InstancesTag[];
    /**
     * The vpc id of rabbitmq instance. This field supports fuzzy query.
     */
    vpcId?: string;
    /**
     * The zone id of rabbitmq instance. This field supports fuzzy query.
     */
    zoneId?: string;
}

/**
 * A collection of values returned by Instances.
 */
export interface InstancesResult {
    /**
     * The charge type of the rabbitmq instance.
     */
    readonly chargeType?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the rabbitmq instance.
     */
    readonly instanceId?: string;
    /**
     * The name of the rabbitmq instance.
     */
    readonly instanceName?: string;
    /**
     * The status of the rabbitmq instance.
     */
    readonly instanceStatus?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The project name of the rabbitmq instance.
     */
    readonly projectName?: string;
    /**
     * The collection of query.
     */
    readonly rabbitmqInstances: outputs.rabbitmq.InstancesRabbitmqInstance[];
    readonly spec?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.rabbitmq.InstancesTag[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    /**
     * The vpc id of the rabbitmq instance.
     */
    readonly vpcId?: string;
    /**
     * The zone id of the rabbitmq instance.
     */
    readonly zoneId?: string;
}
/**
 * Use this data source to query detailed information of rabbitmq instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rabbitmq.Instance("fooInstance", {
 *     zoneIds: [
 *         fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *         fooZones.then(fooZones => fooZones.zones?.[1]?.id),
 *         fooZones.then(fooZones => fooZones.zones?.[2]?.id),
 *     ],
 *     subnetId: fooSubnet.id,
 *     version: "3.8.18",
 *     userName: "acc-test-user",
 *     userPassword: "93f0cb0614Aab12",
 *     computeSpec: "rabbitmq.n3.x2.small",
 *     storageSpace: 300,
 *     instanceName: "acc-test-rabbitmq",
 *     instanceDescription: "acc-test",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooInstances = volcengine.rabbitmq.getInstancesOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.rabbitmq.Instances has been deprecated in favor of volcengine.rabbitmq.getInstances */
export function instancesOutput(args?: InstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<InstancesResult> {
    return pulumi.output(args).apply((a: any) => instances(a, opts))
}

/**
 * A collection of arguments for invoking Instances.
 */
export interface InstancesOutputArgs {
    /**
     * The charge type of rabbitmq instance.
     */
    chargeType?: pulumi.Input<string>;
    /**
     * The id of rabbitmq instance. This field supports fuzzy query.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of rabbitmq instance. This field supports fuzzy query.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The status of rabbitmq instance.
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of rabbitmq instance.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The calculation specification of rabbitmq instance.
     */
    spec?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.rabbitmq.InstancesTagArgs>[]>;
    /**
     * The vpc id of rabbitmq instance. This field supports fuzzy query.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The zone id of rabbitmq instance. This field supports fuzzy query.
     */
    zoneId?: pulumi.Input<string>;
}
