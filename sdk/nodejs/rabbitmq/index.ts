// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetInstancePluginsArgs, GetInstancePluginsResult, GetInstancePluginsOutputArgs } from "./getInstancePlugins";
export const getInstancePlugins: typeof import("./getInstancePlugins").getInstancePlugins = null as any;
export const getInstancePluginsOutput: typeof import("./getInstancePlugins").getInstancePluginsOutput = null as any;
utilities.lazyLoad(exports, ["getInstancePlugins","getInstancePluginsOutput"], () => require("./getInstancePlugins"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstancePluginArgs, InstancePluginState } from "./instancePlugin";
export type InstancePlugin = import("./instancePlugin").InstancePlugin;
export const InstancePlugin: typeof import("./instancePlugin").InstancePlugin = null as any;
utilities.lazyLoad(exports, ["InstancePlugin"], () => require("./instancePlugin"));

export { InstancePluginsArgs, InstancePluginsResult, InstancePluginsOutputArgs } from "./instancePlugins";
export const instancePlugins: typeof import("./instancePlugins").instancePlugins = null as any;
export const instancePluginsOutput: typeof import("./instancePlugins").instancePluginsOutput = null as any;
utilities.lazyLoad(exports, ["instancePlugins","instancePluginsOutput"], () => require("./instancePlugins"));

export { InstancesArgs, InstancesResult, InstancesOutputArgs } from "./instances";
export const instances: typeof import("./instances").instances = null as any;
export const instancesOutput: typeof import("./instances").instancesOutput = null as any;
utilities.lazyLoad(exports, ["instances","instancesOutput"], () => require("./instances"));

export { PublicAddressArgs, PublicAddressState } from "./publicAddress";
export type PublicAddress = import("./publicAddress").PublicAddress;
export const PublicAddress: typeof import("./publicAddress").PublicAddress = null as any;
utilities.lazyLoad(exports, ["PublicAddress"], () => require("./publicAddress"));

export { RegionsArgs, RegionsResult, RegionsOutputArgs } from "./regions";
export const regions: typeof import("./regions").regions = null as any;
export const regionsOutput: typeof import("./regions").regionsOutput = null as any;
utilities.lazyLoad(exports, ["regions","regionsOutput"], () => require("./regions"));

export { ZonesArgs, ZonesResult, ZonesOutputArgs } from "./zones";
export const zones: typeof import("./zones").zones = null as any;
export const zonesOutput: typeof import("./zones").zonesOutput = null as any;
utilities.lazyLoad(exports, ["zones","zonesOutput"], () => require("./zones"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:rabbitmq/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "volcengine:rabbitmq/instancePlugin:InstancePlugin":
                return new InstancePlugin(name, <any>undefined, { urn })
            case "volcengine:rabbitmq/publicAddress:PublicAddress":
                return new PublicAddress(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "rabbitmq/instance", _module)
pulumi.runtime.registerResourceModule("volcengine", "rabbitmq/instancePlugin", _module)
pulumi.runtime.registerResourceModule("volcengine", "rabbitmq/publicAddress", _module)
