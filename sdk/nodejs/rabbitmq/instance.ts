// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage rabbitmq instance
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rabbitmq.Instance("fooInstance", {
 *     zoneIds: [
 *         fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *         fooZones.then(fooZones => fooZones.zones?.[1]?.id),
 *         fooZones.then(fooZones => fooZones.zones?.[2]?.id),
 *     ],
 *     subnetId: fooSubnet.id,
 *     version: "3.8.18",
 *     userName: "acc-test-user",
 *     userPassword: "93f0cb0614Aab12",
 *     computeSpec: "rabbitmq.n3.x2.small",
 *     storageSpace: 300,
 *     instanceName: "acc-test-rabbitmq",
 *     instanceDescription: "acc-test",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * RabbitmqInstance can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:rabbitmq/instance:Instance default resource_id
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:rabbitmq/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * The account id of the rabbitmq instance.
     */
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * Whether enable the public network parsing function of the rabbitmq instance.
     */
    public /*out*/ readonly applyPrivateDnsToPublic!: pulumi.Output<boolean>;
    /**
     * The type of the rabbitmq instance.
     */
    public /*out*/ readonly archType!: pulumi.Output<string>;
    /**
     * The charge information of the rocketmq instance.
     */
    public readonly chargeInfo!: pulumi.Output<outputs.rabbitmq.InstanceChargeInfo>;
    /**
     * The compute specification of the rabbitmq instance.
     */
    public readonly computeSpec!: pulumi.Output<string>;
    /**
     * The create time of the rabbitmq instance.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The eip id of the rabbitmq instance.
     */
    public /*out*/ readonly eipId!: pulumi.Output<string>;
    /**
     * The endpoint info of the rabbitmq instance.
     */
    public /*out*/ readonly endpoints!: pulumi.Output<outputs.rabbitmq.InstanceEndpoint[]>;
    /**
     * The WebUI admin user name of the rabbitmq instance.
     */
    public /*out*/ readonly initUserName!: pulumi.Output<string>;
    /**
     * The description of the rabbitmq instance.
     */
    public readonly instanceDescription!: pulumi.Output<string | undefined>;
    /**
     * The name of the rabbitmq instance.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * The status of the rabbitmq instance.
     */
    public /*out*/ readonly instanceStatus!: pulumi.Output<string>;
    /**
     * The IAM project name where the rabbitmq instance resides.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The region id of the rabbitmq instance.
     */
    public /*out*/ readonly regionId!: pulumi.Output<string>;
    /**
     * The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
     */
    public readonly storageSpace!: pulumi.Output<number>;
    /**
     * The subnet id of the rabbitmq instance.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.rabbitmq.InstanceTag[] | undefined>;
    /**
     * The used storage space of the rabbitmq instance. Unit: GiB.
     */
    public /*out*/ readonly usedStorageSpace!: pulumi.Output<number>;
    /**
     * The administrator name of the rabbitmq instance.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    public readonly userPassword!: pulumi.Output<string>;
    /**
     * The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
     */
    public readonly version!: pulumi.Output<string>;
    /**
     * The vpc id of the rabbitmq instance.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    /**
     * The zone id of the rabbitmq instance. Support specifying multiple availability zones.
     */
    public readonly zoneIds!: pulumi.Output<string[]>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["applyPrivateDnsToPublic"] = state ? state.applyPrivateDnsToPublic : undefined;
            resourceInputs["archType"] = state ? state.archType : undefined;
            resourceInputs["chargeInfo"] = state ? state.chargeInfo : undefined;
            resourceInputs["computeSpec"] = state ? state.computeSpec : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["eipId"] = state ? state.eipId : undefined;
            resourceInputs["endpoints"] = state ? state.endpoints : undefined;
            resourceInputs["initUserName"] = state ? state.initUserName : undefined;
            resourceInputs["instanceDescription"] = state ? state.instanceDescription : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["instanceStatus"] = state ? state.instanceStatus : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["storageSpace"] = state ? state.storageSpace : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["usedStorageSpace"] = state ? state.usedStorageSpace : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userPassword"] = state ? state.userPassword : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["zoneIds"] = state ? state.zoneIds : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.chargeInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'chargeInfo'");
            }
            if ((!args || args.computeSpec === undefined) && !opts.urn) {
                throw new Error("Missing required property 'computeSpec'");
            }
            if ((!args || args.storageSpace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storageSpace'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if ((!args || args.userPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPassword'");
            }
            if ((!args || args.version === undefined) && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            if ((!args || args.zoneIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneIds'");
            }
            resourceInputs["chargeInfo"] = args ? args.chargeInfo : undefined;
            resourceInputs["computeSpec"] = args ? args.computeSpec : undefined;
            resourceInputs["instanceDescription"] = args ? args.instanceDescription : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["storageSpace"] = args ? args.storageSpace : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userPassword"] = args?.userPassword ? pulumi.secret(args.userPassword) : undefined;
            resourceInputs["version"] = args ? args.version : undefined;
            resourceInputs["zoneIds"] = args ? args.zoneIds : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["applyPrivateDnsToPublic"] = undefined /*out*/;
            resourceInputs["archType"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["eipId"] = undefined /*out*/;
            resourceInputs["endpoints"] = undefined /*out*/;
            resourceInputs["initUserName"] = undefined /*out*/;
            resourceInputs["instanceStatus"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["usedStorageSpace"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["userPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * The account id of the rabbitmq instance.
     */
    accountId?: pulumi.Input<string>;
    /**
     * Whether enable the public network parsing function of the rabbitmq instance.
     */
    applyPrivateDnsToPublic?: pulumi.Input<boolean>;
    /**
     * The type of the rabbitmq instance.
     */
    archType?: pulumi.Input<string>;
    /**
     * The charge information of the rocketmq instance.
     */
    chargeInfo?: pulumi.Input<inputs.rabbitmq.InstanceChargeInfo>;
    /**
     * The compute specification of the rabbitmq instance.
     */
    computeSpec?: pulumi.Input<string>;
    /**
     * The create time of the rabbitmq instance.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The eip id of the rabbitmq instance.
     */
    eipId?: pulumi.Input<string>;
    /**
     * The endpoint info of the rabbitmq instance.
     */
    endpoints?: pulumi.Input<pulumi.Input<inputs.rabbitmq.InstanceEndpoint>[]>;
    /**
     * The WebUI admin user name of the rabbitmq instance.
     */
    initUserName?: pulumi.Input<string>;
    /**
     * The description of the rabbitmq instance.
     */
    instanceDescription?: pulumi.Input<string>;
    /**
     * The name of the rabbitmq instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The status of the rabbitmq instance.
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * The IAM project name where the rabbitmq instance resides.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The region id of the rabbitmq instance.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
     */
    storageSpace?: pulumi.Input<number>;
    /**
     * The subnet id of the rabbitmq instance.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.rabbitmq.InstanceTag>[]>;
    /**
     * The used storage space of the rabbitmq instance. Unit: GiB.
     */
    usedStorageSpace?: pulumi.Input<number>;
    /**
     * The administrator name of the rabbitmq instance.
     */
    userName?: pulumi.Input<string>;
    /**
     * The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    userPassword?: pulumi.Input<string>;
    /**
     * The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
     */
    version?: pulumi.Input<string>;
    /**
     * The vpc id of the rabbitmq instance.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The zone id of the rabbitmq instance. Support specifying multiple availability zones.
     */
    zoneIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The charge information of the rocketmq instance.
     */
    chargeInfo: pulumi.Input<inputs.rabbitmq.InstanceChargeInfo>;
    /**
     * The compute specification of the rabbitmq instance.
     */
    computeSpec: pulumi.Input<string>;
    /**
     * The description of the rabbitmq instance.
     */
    instanceDescription?: pulumi.Input<string>;
    /**
     * The name of the rabbitmq instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The IAM project name where the rabbitmq instance resides.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
     */
    storageSpace: pulumi.Input<number>;
    /**
     * The subnet id of the rabbitmq instance.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.rabbitmq.InstanceTag>[]>;
    /**
     * The administrator name of the rabbitmq instance.
     */
    userName: pulumi.Input<string>;
    /**
     * The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    userPassword: pulumi.Input<string>;
    /**
     * The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
     */
    version: pulumi.Input<string>;
    /**
     * The zone id of the rabbitmq instance. Support specifying multiple availability zones.
     */
    zoneIds: pulumi.Input<pulumi.Input<string>[]>;
}
