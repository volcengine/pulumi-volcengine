// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cr registry state
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.cr.State("foo", {action: "Start"});
 * ```
 *
 * ## Import
 *
 * CR registry state can be imported using the state:registry_name, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:cr/state:State default state:cr-basic
 * ```
 */
export class State extends pulumi.CustomResource {
    /**
     * Get an existing State resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StateState, opts?: pulumi.CustomResourceOptions): State {
        return new State(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cr/state:State';

    /**
     * Returns true if the given object is an instance of State.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is State {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === State.__pulumiType;
    }

    /**
     * Start cr instance action,the value must be `Start`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The cr instance id.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The status of cr instance.
     */
    public /*out*/ readonly status!: pulumi.Output<outputs.cr.StateStatus>;

    /**
     * Create a State resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StateArgs | StateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StateState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as StateArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(State.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering State resources.
 */
export interface StateState {
    /**
     * Start cr instance action,the value must be `Start`.
     */
    action?: pulumi.Input<string>;
    /**
     * The cr instance id.
     */
    name?: pulumi.Input<string>;
    /**
     * The status of cr instance.
     */
    status?: pulumi.Input<inputs.cr.StateStatus>;
}

/**
 * The set of arguments for constructing a State resource.
 */
export interface StateArgs {
    /**
     * Start cr instance action,the value must be `Start`.
     */
    action: pulumi.Input<string>;
    /**
     * The cr instance id.
     */
    name?: pulumi.Input<string>;
}
