// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cr vpc endpoint
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.cr.VpcEndpoint("foo", {
 *     registry: "enterprise-1",
 *     vpcs: [
 *         {
 *             accountId: 0,
 *             vpcId: "vpc-3resbfzl3xgjk5zsk2iuq3vhk",
 *         },
 *         {
 *             subnetId: "subnet-2d62do4697i8058ozfdszxl30",
 *             vpcId: "vpc-3red9li8dd8g05zsk2iadytvy",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * CR Vpc endpoint can be imported using the crVpcEndpoint:registry, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:cr/vpcEndpoint:VpcEndpoint default crVpcEndpoint:cr-basic
 * ```
 */
export class VpcEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing VpcEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcEndpointState, opts?: pulumi.CustomResourceOptions): VpcEndpoint {
        return new VpcEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cr/vpcEndpoint:VpcEndpoint';

    /**
     * Returns true if the given object is an instance of VpcEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VpcEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpcEndpoint.__pulumiType;
    }

    /**
     * The Cr Registry name.
     */
    public readonly registry!: pulumi.Output<string>;
    /**
     * List of vpc meta. When apply is executed for the first time, the vpcs in the tf file will be added to the existing vpcs, and subsequent apply will overwrite the existing vpcs with the vpcs in the tf file.
     */
    public readonly vpcs!: pulumi.Output<outputs.cr.VpcEndpointVpc[]>;

    /**
     * Create a VpcEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcEndpointArgs | VpcEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcEndpointState | undefined;
            resourceInputs["registry"] = state ? state.registry : undefined;
            resourceInputs["vpcs"] = state ? state.vpcs : undefined;
        } else {
            const args = argsOrState as VpcEndpointArgs | undefined;
            if ((!args || args.registry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registry'");
            }
            if ((!args || args.vpcs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcs'");
            }
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["vpcs"] = args ? args.vpcs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VpcEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VpcEndpoint resources.
 */
export interface VpcEndpointState {
    /**
     * The Cr Registry name.
     */
    registry?: pulumi.Input<string>;
    /**
     * List of vpc meta. When apply is executed for the first time, the vpcs in the tf file will be added to the existing vpcs, and subsequent apply will overwrite the existing vpcs with the vpcs in the tf file.
     */
    vpcs?: pulumi.Input<pulumi.Input<inputs.cr.VpcEndpointVpc>[]>;
}

/**
 * The set of arguments for constructing a VpcEndpoint resource.
 */
export interface VpcEndpointArgs {
    /**
     * The Cr Registry name.
     */
    registry: pulumi.Input<string>;
    /**
     * List of vpc meta. When apply is executed for the first time, the vpcs in the tf file will be added to the existing vpcs, and subsequent apply will overwrite the existing vpcs with the vpcs in the tf file.
     */
    vpcs: pulumi.Input<pulumi.Input<inputs.cr.VpcEndpointVpc>[]>;
}
