// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cr registry
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.cr.Registry("foo", {
 *     deleteImmediately: false,
 *     password: "1qaz!QAZ",
 * });
 * ```
 *
 * ## Import
 *
 * CR Instance can be imported using the name, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:cr/registry:Registry default enterprise-x
 * ```
 */
export class Registry extends pulumi.CustomResource {
    /**
     * Get an existing Registry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RegistryState, opts?: pulumi.CustomResourceOptions): Registry {
        return new Registry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cr/registry:Registry';

    /**
     * Returns true if the given object is an instance of Registry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Registry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Registry.__pulumiType;
    }

    /**
     * The charge type of registry.
     */
    public /*out*/ readonly chargeType!: pulumi.Output<string>;
    /**
     * The creation time of registry.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * Whether delete registry immediately. Only effected in delete action.
     */
    public readonly deleteImmediately!: pulumi.Output<boolean | undefined>;
    /**
     * The domain of registry.
     */
    public /*out*/ readonly domains!: pulumi.Output<outputs.cr.RegistryDomain[]>;
    /**
     * The name of registry.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The password of registry user.
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * The status of registry.
     */
    public /*out*/ readonly statuses!: pulumi.Output<outputs.cr.RegistryStatus[]>;
    /**
     * The type of registry.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * The status of user.
     */
    public /*out*/ readonly userStatus!: pulumi.Output<string>;
    /**
     * The username of cr instance.
     */
    public /*out*/ readonly username!: pulumi.Output<string>;

    /**
     * Create a Registry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: RegistryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RegistryArgs | RegistryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RegistryState | undefined;
            resourceInputs["chargeType"] = state ? state.chargeType : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["deleteImmediately"] = state ? state.deleteImmediately : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["statuses"] = state ? state.statuses : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["userStatus"] = state ? state.userStatus : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as RegistryArgs | undefined;
            resourceInputs["deleteImmediately"] = args ? args.deleteImmediately : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["chargeType"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["domains"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["userStatus"] = undefined /*out*/;
            resourceInputs["username"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Registry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Registry resources.
 */
export interface RegistryState {
    /**
     * The charge type of registry.
     */
    chargeType?: pulumi.Input<string>;
    /**
     * The creation time of registry.
     */
    createTime?: pulumi.Input<string>;
    /**
     * Whether delete registry immediately. Only effected in delete action.
     */
    deleteImmediately?: pulumi.Input<boolean>;
    /**
     * The domain of registry.
     */
    domains?: pulumi.Input<pulumi.Input<inputs.cr.RegistryDomain>[]>;
    /**
     * The name of registry.
     */
    name?: pulumi.Input<string>;
    /**
     * The password of registry user.
     */
    password?: pulumi.Input<string>;
    /**
     * The status of registry.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.cr.RegistryStatus>[]>;
    /**
     * The type of registry.
     */
    type?: pulumi.Input<string>;
    /**
     * The status of user.
     */
    userStatus?: pulumi.Input<string>;
    /**
     * The username of cr instance.
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Registry resource.
 */
export interface RegistryArgs {
    /**
     * Whether delete registry immediately. Only effected in delete action.
     */
    deleteImmediately?: pulumi.Input<boolean>;
    /**
     * The name of registry.
     */
    name?: pulumi.Input<string>;
    /**
     * The password of registry user.
     */
    password?: pulumi.Input<string>;
}
