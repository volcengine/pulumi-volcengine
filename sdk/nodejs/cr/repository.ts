// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cr repository
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.cr.Repository("foo", {
 *     accessLevel: "Public",
 *     description: "A test repository created by terraform.",
 *     namespace: "namespace-1",
 *     registry: "tf-2",
 * });
 * ```
 *
 * ## Import
 *
 * CR Repository can be imported using the registry:namespace:name, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:cr/repository:Repository default cr-basic:namespace-1:repo-1
 * ```
 */
export class Repository extends pulumi.CustomResource {
    /**
     * Get an existing Repository resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryState, opts?: pulumi.CustomResourceOptions): Repository {
        return new Repository(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cr/repository:Repository';

    /**
     * Returns true if the given object is an instance of Repository.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Repository {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Repository.__pulumiType;
    }

    /**
     * The access level of CrRepository.
     */
    public readonly accessLevel!: pulumi.Output<string | undefined>;
    /**
     * The creation time of repository.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The description of CrRepository.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of CrRepository.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The target namespace name.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The CrRegistry name.
     */
    public readonly registry!: pulumi.Output<string>;
    /**
     * The last update time of repository.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a Repository resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryArgs | RepositoryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryState | undefined;
            resourceInputs["accessLevel"] = state ? state.accessLevel : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["registry"] = state ? state.registry : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as RepositoryArgs | undefined;
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.registry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registry'");
            }
            resourceInputs["accessLevel"] = args ? args.accessLevel : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Repository.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Repository resources.
 */
export interface RepositoryState {
    /**
     * The access level of CrRepository.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * The creation time of repository.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of CrRepository.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of CrRepository.
     */
    name?: pulumi.Input<string>;
    /**
     * The target namespace name.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The CrRegistry name.
     */
    registry?: pulumi.Input<string>;
    /**
     * The last update time of repository.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Repository resource.
 */
export interface RepositoryArgs {
    /**
     * The access level of CrRepository.
     */
    accessLevel?: pulumi.Input<string>;
    /**
     * The description of CrRepository.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of CrRepository.
     */
    name?: pulumi.Input<string>;
    /**
     * The target namespace name.
     */
    namespace: pulumi.Input<string>;
    /**
     * The CrRegistry name.
     */
    registry: pulumi.Input<string>;
}
