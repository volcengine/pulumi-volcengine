// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cr endpoint acl policy
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooRegistry = new volcengine.cr.Registry("fooRegistry", {project: "default"});
 * const fooEndpoint = new volcengine.cr.Endpoint("fooEndpoint", {
 *     registry: fooRegistry.id,
 *     enabled: true,
 * });
 * const fooEndpointAclPolicy: volcengine.cr.EndpointAclPolicy[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooEndpointAclPolicy.push(new volcengine.cr.EndpointAclPolicy(`fooEndpointAclPolicy-${range.value}`, {
 *         registry: fooEndpoint.registry,
 *         type: "Public",
 *         entry: `192.168.0.${range.value}`,
 *         description: `test-${range.value}`,
 *     }));
 * }
 * ```
 *
 * ## Import
 *
 * CrEndpointAclPolicy can be imported using the registry:entry, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:cr/endpointAclPolicy:EndpointAclPolicy default resource_id
 * ```
 */
export class EndpointAclPolicy extends pulumi.CustomResource {
    /**
     * Get an existing EndpointAclPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointAclPolicyState, opts?: pulumi.CustomResourceOptions): EndpointAclPolicy {
        return new EndpointAclPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cr/endpointAclPolicy:EndpointAclPolicy';

    /**
     * Returns true if the given object is an instance of EndpointAclPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EndpointAclPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EndpointAclPolicy.__pulumiType;
    }

    /**
     * The description of the acl policy.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The ip list of the acl policy.
     */
    public readonly entry!: pulumi.Output<string>;
    /**
     * The registry name.
     */
    public readonly registry!: pulumi.Output<string>;
    /**
     * The type of the acl policy. Valid values: `Public`.
     */
    public readonly type!: pulumi.Output<string>;

    /**
     * Create a EndpointAclPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointAclPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointAclPolicyArgs | EndpointAclPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointAclPolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["entry"] = state ? state.entry : undefined;
            resourceInputs["registry"] = state ? state.registry : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as EndpointAclPolicyArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.entry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'entry'");
            }
            if ((!args || args.registry === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registry'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["entry"] = args ? args.entry : undefined;
            resourceInputs["registry"] = args ? args.registry : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EndpointAclPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EndpointAclPolicy resources.
 */
export interface EndpointAclPolicyState {
    /**
     * The description of the acl policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The ip list of the acl policy.
     */
    entry?: pulumi.Input<string>;
    /**
     * The registry name.
     */
    registry?: pulumi.Input<string>;
    /**
     * The type of the acl policy. Valid values: `Public`.
     */
    type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EndpointAclPolicy resource.
 */
export interface EndpointAclPolicyArgs {
    /**
     * The description of the acl policy.
     */
    description: pulumi.Input<string>;
    /**
     * The ip list of the acl policy.
     */
    entry: pulumi.Input<string>;
    /**
     * The registry name.
     */
    registry: pulumi.Input<string>;
    /**
     * The type of the acl policy. Valid values: `Public`.
     */
    type: pulumi.Input<string>;
}
