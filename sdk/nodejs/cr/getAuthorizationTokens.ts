// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of cr authorization tokens
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.cr.getAuthorizationTokens({
 *     registry: "tf-1",
 * });
 * ```
 */
export function getAuthorizationTokens(args: GetAuthorizationTokensArgs, opts?: pulumi.InvokeOptions): Promise<GetAuthorizationTokensResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:cr/getAuthorizationTokens:getAuthorizationTokens", {
        "outputFile": args.outputFile,
        "registry": args.registry,
    }, opts);
}

/**
 * A collection of arguments for invoking getAuthorizationTokens.
 */
export interface GetAuthorizationTokensArgs {
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The cr instance name want to query.
     */
    registry: string;
}

/**
 * A collection of values returned by getAuthorizationTokens.
 */
export interface GetAuthorizationTokensResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly outputFile?: string;
    readonly registry: string;
    /**
     * The collection of users.
     */
    readonly tokens: outputs.cr.GetAuthorizationTokensToken[];
    /**
     * The total count of instance query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of cr authorization tokens
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.cr.getAuthorizationTokens({
 *     registry: "tf-1",
 * });
 * ```
 */
export function getAuthorizationTokensOutput(args: GetAuthorizationTokensOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAuthorizationTokensResult> {
    return pulumi.output(args).apply((a: any) => getAuthorizationTokens(a, opts))
}

/**
 * A collection of arguments for invoking getAuthorizationTokens.
 */
export interface GetAuthorizationTokensOutputArgs {
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The cr instance name want to query.
     */
    registry: pulumi.Input<string>;
}
