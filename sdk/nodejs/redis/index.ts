// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountsArgs, AccountsResult, AccountsOutputArgs } from "./accounts";
export const accounts: typeof import("./accounts").accounts = null as any;
export const accountsOutput: typeof import("./accounts").accountsOutput = null as any;
utilities.lazyLoad(exports, ["accounts","accountsOutput"], () => require("./accounts"));

export { AllowListArgs, AllowListState } from "./allowList";
export type AllowList = import("./allowList").AllowList;
export const AllowList: typeof import("./allowList").AllowList = null as any;
utilities.lazyLoad(exports, ["AllowList"], () => require("./allowList"));

export { AllowListAssociateArgs, AllowListAssociateState } from "./allowListAssociate";
export type AllowListAssociate = import("./allowListAssociate").AllowListAssociate;
export const AllowListAssociate: typeof import("./allowListAssociate").AllowListAssociate = null as any;
utilities.lazyLoad(exports, ["AllowListAssociate"], () => require("./allowListAssociate"));

export { AllowListsArgs, AllowListsResult, AllowListsOutputArgs } from "./allowLists";
export const allowLists: typeof import("./allowLists").allowLists = null as any;
export const allowListsOutput: typeof import("./allowLists").allowListsOutput = null as any;
utilities.lazyLoad(exports, ["allowLists","allowListsOutput"], () => require("./allowLists"));

export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BackupRestoreArgs, BackupRestoreState } from "./backupRestore";
export type BackupRestore = import("./backupRestore").BackupRestore;
export const BackupRestore: typeof import("./backupRestore").BackupRestore = null as any;
utilities.lazyLoad(exports, ["BackupRestore"], () => require("./backupRestore"));

export { BackupsArgs, BackupsResult, BackupsOutputArgs } from "./backups";
export const backups: typeof import("./backups").backups = null as any;
export const backupsOutput: typeof import("./backups").backupsOutput = null as any;
utilities.lazyLoad(exports, ["backups","backupsOutput"], () => require("./backups"));

export { BigKeysArgs, BigKeysResult, BigKeysOutputArgs } from "./bigKeys";
export const bigKeys: typeof import("./bigKeys").bigKeys = null as any;
export const bigKeysOutput: typeof import("./bigKeys").bigKeysOutput = null as any;
utilities.lazyLoad(exports, ["bigKeys","bigKeysOutput"], () => require("./bigKeys"));

export { ContinuousBackupArgs, ContinuousBackupState } from "./continuousBackup";
export type ContinuousBackup = import("./continuousBackup").ContinuousBackup;
export const ContinuousBackup: typeof import("./continuousBackup").ContinuousBackup = null as any;
utilities.lazyLoad(exports, ["ContinuousBackup"], () => require("./continuousBackup"));

export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { GetAccountsArgs, GetAccountsResult, GetAccountsOutputArgs } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetAllowListsArgs, GetAllowListsResult, GetAllowListsOutputArgs } from "./getAllowLists";
export const getAllowLists: typeof import("./getAllowLists").getAllowLists = null as any;
export const getAllowListsOutput: typeof import("./getAllowLists").getAllowListsOutput = null as any;
utilities.lazyLoad(exports, ["getAllowLists","getAllowListsOutput"], () => require("./getAllowLists"));

export { GetBackupsArgs, GetBackupsResult, GetBackupsOutputArgs } from "./getBackups";
export const getBackups: typeof import("./getBackups").getBackups = null as any;
export const getBackupsOutput: typeof import("./getBackups").getBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getBackups","getBackupsOutput"], () => require("./getBackups"));

export { GetBigKeysArgs, GetBigKeysResult, GetBigKeysOutputArgs } from "./getBigKeys";
export const getBigKeys: typeof import("./getBigKeys").getBigKeys = null as any;
export const getBigKeysOutput: typeof import("./getBigKeys").getBigKeysOutput = null as any;
utilities.lazyLoad(exports, ["getBigKeys","getBigKeysOutput"], () => require("./getBigKeys"));

export { GetInstanceSpecsArgs, GetInstanceSpecsResult, GetInstanceSpecsOutputArgs } from "./getInstanceSpecs";
export const getInstanceSpecs: typeof import("./getInstanceSpecs").getInstanceSpecs = null as any;
export const getInstanceSpecsOutput: typeof import("./getInstanceSpecs").getInstanceSpecsOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceSpecs","getInstanceSpecsOutput"], () => require("./getInstanceSpecs"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetParameterGroupsArgs, GetParameterGroupsResult, GetParameterGroupsOutputArgs } from "./getParameterGroups";
export const getParameterGroups: typeof import("./getParameterGroups").getParameterGroups = null as any;
export const getParameterGroupsOutput: typeof import("./getParameterGroups").getParameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getParameterGroups","getParameterGroupsOutput"], () => require("./getParameterGroups"));

export { GetPitrTimeWindowsArgs, GetPitrTimeWindowsResult, GetPitrTimeWindowsOutputArgs } from "./getPitrTimeWindows";
export const getPitrTimeWindows: typeof import("./getPitrTimeWindows").getPitrTimeWindows = null as any;
export const getPitrTimeWindowsOutput: typeof import("./getPitrTimeWindows").getPitrTimeWindowsOutput = null as any;
utilities.lazyLoad(exports, ["getPitrTimeWindows","getPitrTimeWindowsOutput"], () => require("./getPitrTimeWindows"));

export { GetPlannedEventsArgs, GetPlannedEventsResult, GetPlannedEventsOutputArgs } from "./getPlannedEvents";
export const getPlannedEvents: typeof import("./getPlannedEvents").getPlannedEvents = null as any;
export const getPlannedEventsOutput: typeof import("./getPlannedEvents").getPlannedEventsOutput = null as any;
utilities.lazyLoad(exports, ["getPlannedEvents","getPlannedEventsOutput"], () => require("./getPlannedEvents"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceSpecsArgs, InstanceSpecsResult, InstanceSpecsOutputArgs } from "./instanceSpecs";
export const instanceSpecs: typeof import("./instanceSpecs").instanceSpecs = null as any;
export const instanceSpecsOutput: typeof import("./instanceSpecs").instanceSpecsOutput = null as any;
utilities.lazyLoad(exports, ["instanceSpecs","instanceSpecsOutput"], () => require("./instanceSpecs"));

export { InstancesArgs, InstancesResult, InstancesOutputArgs } from "./instances";
export const instances: typeof import("./instances").instances = null as any;
export const instancesOutput: typeof import("./instances").instancesOutput = null as any;
utilities.lazyLoad(exports, ["instances","instancesOutput"], () => require("./instances"));

export { ParameterGroupArgs, ParameterGroupState } from "./parameterGroup";
export type ParameterGroup = import("./parameterGroup").ParameterGroup;
export const ParameterGroup: typeof import("./parameterGroup").ParameterGroup = null as any;
utilities.lazyLoad(exports, ["ParameterGroup"], () => require("./parameterGroup"));

export { ParameterGroupsArgs, ParameterGroupsResult, ParameterGroupsOutputArgs } from "./parameterGroups";
export const parameterGroups: typeof import("./parameterGroups").parameterGroups = null as any;
export const parameterGroupsOutput: typeof import("./parameterGroups").parameterGroupsOutput = null as any;
utilities.lazyLoad(exports, ["parameterGroups","parameterGroupsOutput"], () => require("./parameterGroups"));

export { PitrTimeWindowsArgs, PitrTimeWindowsResult, PitrTimeWindowsOutputArgs } from "./pitrTimeWindows";
export const pitrTimeWindows: typeof import("./pitrTimeWindows").pitrTimeWindows = null as any;
export const pitrTimeWindowsOutput: typeof import("./pitrTimeWindows").pitrTimeWindowsOutput = null as any;
utilities.lazyLoad(exports, ["pitrTimeWindows","pitrTimeWindowsOutput"], () => require("./pitrTimeWindows"));

export { PlannedEventsArgs, PlannedEventsResult, PlannedEventsOutputArgs } from "./plannedEvents";
export const plannedEvents: typeof import("./plannedEvents").plannedEvents = null as any;
export const plannedEventsOutput: typeof import("./plannedEvents").plannedEventsOutput = null as any;
utilities.lazyLoad(exports, ["plannedEvents","plannedEventsOutput"], () => require("./plannedEvents"));

export { RegionsArgs, RegionsResult, RegionsOutputArgs } from "./regions";
export const regions: typeof import("./regions").regions = null as any;
export const regionsOutput: typeof import("./regions").regionsOutput = null as any;
utilities.lazyLoad(exports, ["regions","regionsOutput"], () => require("./regions"));

export { StateArgs, StateState } from "./state";
export type State = import("./state").State;
export const State: typeof import("./state").State = null as any;
utilities.lazyLoad(exports, ["State"], () => require("./state"));

export { ZonesArgs, ZonesResult, ZonesOutputArgs } from "./zones";
export const zones: typeof import("./zones").zones = null as any;
export const zonesOutput: typeof import("./zones").zonesOutput = null as any;
utilities.lazyLoad(exports, ["zones","zonesOutput"], () => require("./zones"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:redis/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "volcengine:redis/allowList:AllowList":
                return new AllowList(name, <any>undefined, { urn })
            case "volcengine:redis/allowListAssociate:AllowListAssociate":
                return new AllowListAssociate(name, <any>undefined, { urn })
            case "volcengine:redis/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "volcengine:redis/backupRestore:BackupRestore":
                return new BackupRestore(name, <any>undefined, { urn })
            case "volcengine:redis/continuousBackup:ContinuousBackup":
                return new ContinuousBackup(name, <any>undefined, { urn })
            case "volcengine:redis/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "volcengine:redis/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "volcengine:redis/parameterGroup:ParameterGroup":
                return new ParameterGroup(name, <any>undefined, { urn })
            case "volcengine:redis/state:State":
                return new State(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "redis/account", _module)
pulumi.runtime.registerResourceModule("volcengine", "redis/allowList", _module)
pulumi.runtime.registerResourceModule("volcengine", "redis/allowListAssociate", _module)
pulumi.runtime.registerResourceModule("volcengine", "redis/backup", _module)
pulumi.runtime.registerResourceModule("volcengine", "redis/backupRestore", _module)
pulumi.runtime.registerResourceModule("volcengine", "redis/continuousBackup", _module)
pulumi.runtime.registerResourceModule("volcengine", "redis/endpoint", _module)
pulumi.runtime.registerResourceModule("volcengine", "redis/instance", _module)
pulumi.runtime.registerResourceModule("volcengine", "redis/parameterGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "redis/state", _module)
