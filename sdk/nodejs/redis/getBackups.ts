// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of redis backups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.redis.Instance("fooInstance", {
 *     zoneIds: [fooZones.then(fooZones => fooZones.zones?.[0]?.id)],
 *     instanceName: "acc-test-tf-redis",
 *     shardedCluster: 1,
 *     password: "1qaz!QAZ12",
 *     nodeNumber: 2,
 *     shardCapacity: 1024,
 *     shardNumber: 2,
 *     engineVersion: "5.0",
 *     subnetId: fooSubnet.id,
 *     deletionProtection: "disabled",
 *     vpcAuthMode: "close",
 *     chargeType: "PostPaid",
 *     port: 6381,
 *     projectName: "default",
 * });
 * const fooBackup: volcengine.redis.Backup[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooBackup.push(new volcengine.redis.Backup(`fooBackup-${range.value}`, {instanceId: fooInstance.id}));
 * }
 * const fooBackups = volcengine.redis.getBackupsOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
export function getBackups(args?: GetBackupsArgs, opts?: pulumi.InvokeOptions): Promise<GetBackupsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:redis/getBackups:getBackups", {
        "backupPointId": args.backupPointId,
        "backupPointName": args.backupPointName,
        "backupStrategyLists": args.backupStrategyLists,
        "endTime": args.endTime,
        "instanceId": args.instanceId,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "scope": args.scope,
        "startTime": args.startTime,
    }, opts);
}

/**
 * A collection of arguments for invoking getBackups.
 */
export interface GetBackupsArgs {
    /**
     * The id of backup point.
     */
    backupPointId?: string;
    /**
     * Backup name, supporting fuzzy query.
     */
    backupPointName?: string;
    /**
     * The list of backup strategy, support AutomatedBackup and ManualBackup.
     */
    backupStrategyLists?: string[];
    /**
     * Query end time.
     */
    endTime?: string;
    /**
     * Id of instance.
     */
    instanceId?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * Back up the project to which it belongs.
     */
    projectName?: string;
    /**
     * The query scope of the backup.
     */
    scope?: string;
    /**
     * Query start time.
     */
    startTime?: string;
}

/**
 * A collection of values returned by getBackups.
 */
export interface GetBackupsResult {
    /**
     * The id of backup point.
     */
    readonly backupPointId?: string;
    readonly backupPointName?: string;
    readonly backupStrategyLists?: string[];
    /**
     * Information of backups.
     */
    readonly backups: outputs.redis.GetBackupsBackup[];
    /**
     * End time of backup.
     */
    readonly endTime?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Id of instance.
     */
    readonly instanceId?: string;
    readonly outputFile?: string;
    /**
     * Project name of instance.
     */
    readonly projectName?: string;
    readonly scope?: string;
    /**
     * Start time of backup.
     */
    readonly startTime?: string;
    /**
     * The total count of backup query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of redis backups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.redis.Instance("fooInstance", {
 *     zoneIds: [fooZones.then(fooZones => fooZones.zones?.[0]?.id)],
 *     instanceName: "acc-test-tf-redis",
 *     shardedCluster: 1,
 *     password: "1qaz!QAZ12",
 *     nodeNumber: 2,
 *     shardCapacity: 1024,
 *     shardNumber: 2,
 *     engineVersion: "5.0",
 *     subnetId: fooSubnet.id,
 *     deletionProtection: "disabled",
 *     vpcAuthMode: "close",
 *     chargeType: "PostPaid",
 *     port: 6381,
 *     projectName: "default",
 * });
 * const fooBackup: volcengine.redis.Backup[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooBackup.push(new volcengine.redis.Backup(`fooBackup-${range.value}`, {instanceId: fooInstance.id}));
 * }
 * const fooBackups = volcengine.redis.getBackupsOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
export function getBackupsOutput(args?: GetBackupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBackupsResult> {
    return pulumi.output(args).apply((a: any) => getBackups(a, opts))
}

/**
 * A collection of arguments for invoking getBackups.
 */
export interface GetBackupsOutputArgs {
    /**
     * The id of backup point.
     */
    backupPointId?: pulumi.Input<string>;
    /**
     * Backup name, supporting fuzzy query.
     */
    backupPointName?: pulumi.Input<string>;
    /**
     * The list of backup strategy, support AutomatedBackup and ManualBackup.
     */
    backupStrategyLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Query end time.
     */
    endTime?: pulumi.Input<string>;
    /**
     * Id of instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * Back up the project to which it belongs.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The query scope of the backup.
     */
    scope?: pulumi.Input<string>;
    /**
     * Query start time.
     */
    startTime?: pulumi.Input<string>;
}
