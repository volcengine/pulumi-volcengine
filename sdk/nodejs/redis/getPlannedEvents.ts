// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of redis planned events
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.redis.Instance("fooInstance", {
 *     zoneIds: [fooZones.then(fooZones => fooZones.zones?.[0]?.id)],
 *     instanceName: "acc-test-tf-redis",
 *     shardedCluster: 1,
 *     password: "1qaz!QAZ12",
 *     nodeNumber: 2,
 *     shardCapacity: 1024,
 *     shardNumber: 2,
 *     engineVersion: "5.0",
 *     subnetId: fooSubnet.id,
 *     deletionProtection: "disabled",
 *     vpcAuthMode: "close",
 *     chargeType: "PostPaid",
 *     port: 6381,
 *     projectName: "default",
 * });
 * const fooPlannedEvents = volcengine.redis.getPlannedEventsOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
export function getPlannedEvents(args?: GetPlannedEventsArgs, opts?: pulumi.InvokeOptions): Promise<GetPlannedEventsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:redis/getPlannedEvents:getPlannedEvents", {
        "instanceId": args.instanceId,
        "maxStartTime": args.maxStartTime,
        "minStartTime": args.minStartTime,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getPlannedEvents.
 */
export interface GetPlannedEventsArgs {
    /**
     * The ID of instance.
     */
    instanceId?: string;
    /**
     * The latest execution time of the planned events that need to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
     */
    maxStartTime?: string;
    /**
     * The earliest execution time of the planned event that needs to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
     */
    minStartTime?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
}

/**
 * A collection of values returned by getPlannedEvents.
 */
export interface GetPlannedEventsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of instance.
     */
    readonly instanceId?: string;
    readonly maxStartTime?: string;
    readonly minStartTime?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The List of planned event information.
     */
    readonly plannedEvents: outputs.redis.GetPlannedEventsPlannedEvent[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of redis planned events
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.redis.Instance("fooInstance", {
 *     zoneIds: [fooZones.then(fooZones => fooZones.zones?.[0]?.id)],
 *     instanceName: "acc-test-tf-redis",
 *     shardedCluster: 1,
 *     password: "1qaz!QAZ12",
 *     nodeNumber: 2,
 *     shardCapacity: 1024,
 *     shardNumber: 2,
 *     engineVersion: "5.0",
 *     subnetId: fooSubnet.id,
 *     deletionProtection: "disabled",
 *     vpcAuthMode: "close",
 *     chargeType: "PostPaid",
 *     port: 6381,
 *     projectName: "default",
 * });
 * const fooPlannedEvents = volcengine.redis.getPlannedEventsOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
export function getPlannedEventsOutput(args?: GetPlannedEventsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPlannedEventsResult> {
    return pulumi.output(args).apply((a: any) => getPlannedEvents(a, opts))
}

/**
 * A collection of arguments for invoking getPlannedEvents.
 */
export interface GetPlannedEventsOutputArgs {
    /**
     * The ID of instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The latest execution time of the planned events that need to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
     */
    maxStartTime?: pulumi.Input<string>;
    /**
     * The earliest execution time of the planned event that needs to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
     */
    minStartTime?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
}
