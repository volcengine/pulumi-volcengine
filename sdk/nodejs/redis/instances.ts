// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of redis instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.redis.Instance("fooInstance", {
 *     zoneIds: [fooZones.then(fooZones => fooZones.zones?.[0]?.id)],
 *     instanceName: "acc-test-tf-redis",
 *     shardedCluster: 1,
 *     password: "1qaz!QAZ12",
 *     nodeNumber: 2,
 *     shardCapacity: 1024,
 *     shardNumber: 2,
 *     engineVersion: "5.0",
 *     subnetId: fooSubnet.id,
 *     deletionProtection: "disabled",
 *     vpcAuthMode: "close",
 *     chargeType: "PostPaid",
 *     port: 6381,
 *     projectName: "default",
 * });
 * const fooInstances = volcengine.redis.getInstancesOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.redis.Instances has been deprecated in favor of volcengine.redis.getInstances */
export function instances(args?: InstancesArgs, opts?: pulumi.InvokeOptions): Promise<InstancesResult> {
    pulumi.log.warn("instances is deprecated: volcengine.redis.Instances has been deprecated in favor of volcengine.redis.getInstances")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:redis/instances:Instances", {
        "chargeType": args.chargeType,
        "engineVersion": args.engineVersion,
        "instanceId": args.instanceId,
        "instanceName": args.instanceName,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "shardedCluster": args.shardedCluster,
        "status": args.status,
        "tags": args.tags,
        "vpcId": args.vpcId,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking Instances.
 */
export interface InstancesArgs {
    /**
     * The charge type of redis instance to query. Valid values: `PostPaid`, `PrePaid`.
     */
    chargeType?: string;
    /**
     * The engine version of redis instance to query. Valid values: `4.0`, `5.0`, `6.0`.
     */
    engineVersion?: string;
    /**
     * The id of redis instance to query. This field supports fuzzy queries.
     */
    instanceId?: string;
    /**
     * The name of redis instance to query. This field supports fuzzy queries.
     */
    instanceName?: string;
    /**
     * A name regex of redis.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of redis instance to query.
     */
    projectName?: string;
    /**
     * Whether enable sharded cluster for redis instance. Valid values: 0, 1.
     */
    shardedCluster?: number;
    /**
     * The status of redis instance to query.
     */
    status?: string;
    /**
     * Tags.
     */
    tags?: inputs.redis.InstancesTag[];
    /**
     * The vpc id of redis instance to query. This field supports fuzzy queries.
     */
    vpcId?: string;
    /**
     * The zone id of redis instance to query. This field supports fuzzy queries.
     */
    zoneId?: string;
}

/**
 * A collection of values returned by Instances.
 */
export interface InstancesResult {
    /**
     * The charge type of the redis instance.
     */
    readonly chargeType?: string;
    /**
     * The engine version of the redis instance.
     */
    readonly engineVersion?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the redis instance.
     */
    readonly instanceId?: string;
    /**
     * The name of the redis instance.
     */
    readonly instanceName?: string;
    /**
     * The collection of redis instances query.
     */
    readonly instances: outputs.redis.InstancesInstance[];
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The project name of the redis instance.
     */
    readonly projectName?: string;
    /**
     * Whether enable sharded cluster for the redis instance.
     */
    readonly shardedCluster?: number;
    /**
     * The status of the redis instance.
     */
    readonly status?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.redis.InstancesTag[];
    /**
     * The total count of redis instances query.
     */
    readonly totalCount: number;
    /**
     * The vpc ID of the redis instance.
     */
    readonly vpcId?: string;
    readonly zoneId?: string;
}
/**
 * Use this data source to query detailed information of redis instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.redis.Instance("fooInstance", {
 *     zoneIds: [fooZones.then(fooZones => fooZones.zones?.[0]?.id)],
 *     instanceName: "acc-test-tf-redis",
 *     shardedCluster: 1,
 *     password: "1qaz!QAZ12",
 *     nodeNumber: 2,
 *     shardCapacity: 1024,
 *     shardNumber: 2,
 *     engineVersion: "5.0",
 *     subnetId: fooSubnet.id,
 *     deletionProtection: "disabled",
 *     vpcAuthMode: "close",
 *     chargeType: "PostPaid",
 *     port: 6381,
 *     projectName: "default",
 * });
 * const fooInstances = volcengine.redis.getInstancesOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.redis.Instances has been deprecated in favor of volcengine.redis.getInstances */
export function instancesOutput(args?: InstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<InstancesResult> {
    return pulumi.output(args).apply((a: any) => instances(a, opts))
}

/**
 * A collection of arguments for invoking Instances.
 */
export interface InstancesOutputArgs {
    /**
     * The charge type of redis instance to query. Valid values: `PostPaid`, `PrePaid`.
     */
    chargeType?: pulumi.Input<string>;
    /**
     * The engine version of redis instance to query. Valid values: `4.0`, `5.0`, `6.0`.
     */
    engineVersion?: pulumi.Input<string>;
    /**
     * The id of redis instance to query. This field supports fuzzy queries.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of redis instance to query. This field supports fuzzy queries.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * A name regex of redis.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of redis instance to query.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Whether enable sharded cluster for redis instance. Valid values: 0, 1.
     */
    shardedCluster?: pulumi.Input<number>;
    /**
     * The status of redis instance to query.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.redis.InstancesTagArgs>[]>;
    /**
     * The vpc id of redis instance to query. This field supports fuzzy queries.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The zone id of redis instance to query. This field supports fuzzy queries.
     */
    zoneId?: pulumi.Input<string>;
}
