// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage tos bucket notification
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooBucket = new volcengine.tos.Bucket("fooBucket", {
 *     bucketName: "tf-acc-test-bucket",
 *     publicAcl: "private",
 *     azRedundancy: "multi-az",
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooBucketNotification = new volcengine.tos.BucketNotification("fooBucketNotification", {
 *     bucketName: fooBucket.id,
 *     rules: {
 *         ruleId: "acc-test-rule",
 *         events: [
 *             "tos:ObjectCreated:Put",
 *             "tos:ObjectCreated:Post",
 *         ],
 *         destination: {
 *             veFaas: [
 *                 {
 *                     functionId: "80w95pns",
 *                 },
 *                 {
 *                     functionId: "crnrfajj",
 *                 },
 *             ],
 *         },
 *         filter: {
 *             tosKey: {
 *                 filterRules: [
 *                     {
 *                         name: "prefix",
 *                         value: "a",
 *                     },
 *                     {
 *                         name: "suffix",
 *                         value: "b",
 *                     },
 *                 ],
 *             },
 *         },
 *     },
 * });
 * const foo1 = new volcengine.tos.BucketNotification("foo1", {
 *     bucketName: fooBucket.id,
 *     rules: {
 *         ruleId: "acc-test-rule-1",
 *         events: [
 *             "tos:ObjectRemoved:Delete",
 *             "tos:ObjectRemoved:DeleteMarkerCreated",
 *         ],
 *         destination: {
 *             veFaas: [
 *                 {
 *                     functionId: "80w95pns",
 *                 },
 *                 {
 *                     functionId: "crnrfajj",
 *                 },
 *             ],
 *         },
 *         filter: {
 *             tosKey: {
 *                 filterRules: [
 *                     {
 *                         name: "prefix",
 *                         value: "aaa",
 *                     },
 *                     {
 *                         name: "suffix",
 *                         value: "bbb",
 *                     },
 *                 ],
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * TosBucketNotification can be imported using the bucketName, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:tos/bucketNotification:BucketNotification default resource_id
 * ```
 */
export class BucketNotification extends pulumi.CustomResource {
    /**
     * Get an existing BucketNotification resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketNotificationState, opts?: pulumi.CustomResourceOptions): BucketNotification {
        return new BucketNotification(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:tos/bucketNotification:BucketNotification';

    /**
     * Returns true if the given object is an instance of BucketNotification.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketNotification {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketNotification.__pulumiType;
    }

    /**
     * The name of the bucket.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * The notification rule of the bucket.
     */
    public readonly rules!: pulumi.Output<outputs.tos.BucketNotificationRules>;
    /**
     * The version of the notification.
     */
    public /*out*/ readonly version!: pulumi.Output<string>;

    /**
     * Create a BucketNotification resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketNotificationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketNotificationArgs | BucketNotificationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketNotificationState | undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["rules"] = state ? state.rules : undefined;
            resourceInputs["version"] = state ? state.version : undefined;
        } else {
            const args = argsOrState as BucketNotificationArgs | undefined;
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.rules === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rules'");
            }
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["rules"] = args ? args.rules : undefined;
            resourceInputs["version"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketNotification.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketNotification resources.
 */
export interface BucketNotificationState {
    /**
     * The name of the bucket.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The notification rule of the bucket.
     */
    rules?: pulumi.Input<inputs.tos.BucketNotificationRules>;
    /**
     * The version of the notification.
     */
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BucketNotification resource.
 */
export interface BucketNotificationArgs {
    /**
     * The name of the bucket.
     */
    bucketName: pulumi.Input<string>;
    /**
     * The notification rule of the bucket.
     */
    rules: pulumi.Input<inputs.tos.BucketNotificationRules>;
}
