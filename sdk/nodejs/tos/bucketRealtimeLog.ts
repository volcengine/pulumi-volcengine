// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage tos bucket realtime log
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * // When deleting this resource, the tls related resources such as project and topic will not be automatically deleted
 * const foo = new volcengine.tos.BucketRealtimeLog("foo", {
 *     accessLogConfiguration: {
 *         ttl: 6,
 *     },
 *     bucketName: "terraform-demo",
 *     role: "TOSLogArchiveTLSRole",
 * });
 * ```
 *
 * ## Import
 *
 * TosBucketRealtimeLog can be imported using the bucket_name, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:tos/bucketRealtimeLog:BucketRealtimeLog default resource_id
 * ```
 */
export class BucketRealtimeLog extends pulumi.CustomResource {
    /**
     * Get an existing BucketRealtimeLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BucketRealtimeLogState, opts?: pulumi.CustomResourceOptions): BucketRealtimeLog {
        return new BucketRealtimeLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:tos/bucketRealtimeLog:BucketRealtimeLog';

    /**
     * Returns true if the given object is an instance of BucketRealtimeLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BucketRealtimeLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BucketRealtimeLog.__pulumiType;
    }

    /**
     * The export schedule of the bucket inventory.
     */
    public readonly accessLogConfiguration!: pulumi.Output<outputs.tos.BucketRealtimeLogAccessLogConfiguration>;
    /**
     * The name of the bucket.
     */
    public readonly bucketName!: pulumi.Output<string>;
    /**
     * The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
     */
    public readonly role!: pulumi.Output<string>;

    /**
     * Create a BucketRealtimeLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BucketRealtimeLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BucketRealtimeLogArgs | BucketRealtimeLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BucketRealtimeLogState | undefined;
            resourceInputs["accessLogConfiguration"] = state ? state.accessLogConfiguration : undefined;
            resourceInputs["bucketName"] = state ? state.bucketName : undefined;
            resourceInputs["role"] = state ? state.role : undefined;
        } else {
            const args = argsOrState as BucketRealtimeLogArgs | undefined;
            if ((!args || args.accessLogConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'accessLogConfiguration'");
            }
            if ((!args || args.bucketName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bucketName'");
            }
            if ((!args || args.role === undefined) && !opts.urn) {
                throw new Error("Missing required property 'role'");
            }
            resourceInputs["accessLogConfiguration"] = args ? args.accessLogConfiguration : undefined;
            resourceInputs["bucketName"] = args ? args.bucketName : undefined;
            resourceInputs["role"] = args ? args.role : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BucketRealtimeLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BucketRealtimeLog resources.
 */
export interface BucketRealtimeLogState {
    /**
     * The export schedule of the bucket inventory.
     */
    accessLogConfiguration?: pulumi.Input<inputs.tos.BucketRealtimeLogAccessLogConfiguration>;
    /**
     * The name of the bucket.
     */
    bucketName?: pulumi.Input<string>;
    /**
     * The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
     */
    role?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BucketRealtimeLog resource.
 */
export interface BucketRealtimeLogArgs {
    /**
     * The export schedule of the bucket inventory.
     */
    accessLogConfiguration: pulumi.Input<inputs.tos.BucketRealtimeLogAccessLogConfiguration>;
    /**
     * The name of the bucket.
     */
    bucketName: pulumi.Input<string>;
    /**
     * The role name used to grant TOS access to create resources such as projects and topics, and write logs to the TLS logging service. You can use the default TOS role `TOSLogArchiveTLSRole`.
     */
    role: pulumi.Input<string>;
}
