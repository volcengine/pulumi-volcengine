// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage nas permission group
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.nas.PermissionGroup("foo", {
 *     description: "acctest1",
 *     permissionGroupName: "acc-test1",
 *     permissionRules: [
 *         {
 *             cidrIp: "*",
 *             rwMode: "RW",
 *             useMode: "All_squash",
 *         },
 *         {
 *             cidrIp: "192.168.0.0",
 *             rwMode: "RO",
 *             useMode: "All_squash",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Nas Permission Group can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:nas/permissionGroup:PermissionGroup default pgroup-1f85db2c****
 * ```
 */
export class PermissionGroup extends pulumi.CustomResource {
    /**
     * Get an existing PermissionGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionGroupState, opts?: pulumi.CustomResourceOptions): PermissionGroup {
        return new PermissionGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:nas/permissionGroup:PermissionGroup';

    /**
     * Returns true if the given object is an instance of PermissionGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PermissionGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PermissionGroup.__pulumiType;
    }

    /**
     * The description of the permission group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The id of the permission group.
     */
    public /*out*/ readonly permissionGroupId!: pulumi.Output<string>;
    /**
     * The name of the permission group.
     */
    public readonly permissionGroupName!: pulumi.Output<string>;
    /**
     * The list of permissions rules.
     */
    public readonly permissionRules!: pulumi.Output<outputs.nas.PermissionGroupPermissionRule[] | undefined>;

    /**
     * Create a PermissionGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionGroupArgs | PermissionGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionGroupState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["permissionGroupId"] = state ? state.permissionGroupId : undefined;
            resourceInputs["permissionGroupName"] = state ? state.permissionGroupName : undefined;
            resourceInputs["permissionRules"] = state ? state.permissionRules : undefined;
        } else {
            const args = argsOrState as PermissionGroupArgs | undefined;
            if ((!args || args.permissionGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionGroupName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["permissionGroupName"] = args ? args.permissionGroupName : undefined;
            resourceInputs["permissionRules"] = args ? args.permissionRules : undefined;
            resourceInputs["permissionGroupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PermissionGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PermissionGroup resources.
 */
export interface PermissionGroupState {
    /**
     * The description of the permission group.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of the permission group.
     */
    permissionGroupId?: pulumi.Input<string>;
    /**
     * The name of the permission group.
     */
    permissionGroupName?: pulumi.Input<string>;
    /**
     * The list of permissions rules.
     */
    permissionRules?: pulumi.Input<pulumi.Input<inputs.nas.PermissionGroupPermissionRule>[]>;
}

/**
 * The set of arguments for constructing a PermissionGroup resource.
 */
export interface PermissionGroupArgs {
    /**
     * The description of the permission group.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the permission group.
     */
    permissionGroupName: pulumi.Input<string>;
    /**
     * The list of permissions rules.
     */
    permissionRules?: pulumi.Input<pulumi.Input<inputs.nas.PermissionGroupPermissionRule>[]>;
}
