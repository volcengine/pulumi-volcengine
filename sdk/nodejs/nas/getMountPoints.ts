// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of nas mount points
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.nas.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooPermissionGroup = new volcengine.nas.PermissionGroup("fooPermissionGroup", {
 *     permissionGroupName: "acc-test",
 *     description: "acctest",
 *     permissionRules: [
 *         {
 *             cidrIp: "*",
 *             rwMode: "RW",
 *             useMode: "All_squash",
 *         },
 *         {
 *             cidrIp: "192.168.0.0",
 *             rwMode: "RO",
 *             useMode: "All_squash",
 *         },
 *     ],
 * });
 * const fooFileSystem = new volcengine.nas.FileSystem("fooFileSystem", {
 *     fileSystemName: "acc-test-fs",
 *     description: "acc-test",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     capacity: 103,
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooMountPoint = new volcengine.nas.MountPoint("fooMountPoint", {
 *     fileSystemId: fooFileSystem.id,
 *     mountPointName: "acc-test",
 *     permissionGroupId: fooPermissionGroup.id,
 *     subnetId: fooSubnet.id,
 * });
 * const fooMountPoints = volcengine.nas.getMountPointsOutput({
 *     fileSystemId: fooFileSystem.id,
 *     mountPointId: fooMountPoint.mountPointId,
 * });
 * ```
 */
export function getMountPoints(args: GetMountPointsArgs, opts?: pulumi.InvokeOptions): Promise<GetMountPointsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:nas/getMountPoints:getMountPoints", {
        "fileSystemId": args.fileSystemId,
        "mountPointId": args.mountPointId,
        "mountPointName": args.mountPointName,
        "outputFile": args.outputFile,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking getMountPoints.
 */
export interface GetMountPointsArgs {
    /**
     * The id of the file system.
     */
    fileSystemId: string;
    /**
     * The id of the mount point.
     */
    mountPointId?: string;
    /**
     * The name of the mount point.
     */
    mountPointName?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The id of the vpc.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by getMountPoints.
 */
export interface GetMountPointsResult {
    /**
     * The id of the file system.
     */
    readonly fileSystemId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the mount point.
     */
    readonly mountPointId?: string;
    /**
     * The name of the mount point.
     */
    readonly mountPointName?: string;
    /**
     * The list of the mount point.
     */
    readonly mountPoints: outputs.nas.GetMountPointsMountPoint[];
    readonly outputFile?: string;
    /**
     * The total count of nas mount points query.
     */
    readonly totalCount: number;
    /**
     * The id of the vpc.
     */
    readonly vpcId?: string;
}
/**
 * Use this data source to query detailed information of nas mount points
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.nas.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooPermissionGroup = new volcengine.nas.PermissionGroup("fooPermissionGroup", {
 *     permissionGroupName: "acc-test",
 *     description: "acctest",
 *     permissionRules: [
 *         {
 *             cidrIp: "*",
 *             rwMode: "RW",
 *             useMode: "All_squash",
 *         },
 *         {
 *             cidrIp: "192.168.0.0",
 *             rwMode: "RO",
 *             useMode: "All_squash",
 *         },
 *     ],
 * });
 * const fooFileSystem = new volcengine.nas.FileSystem("fooFileSystem", {
 *     fileSystemName: "acc-test-fs",
 *     description: "acc-test",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     capacity: 103,
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooMountPoint = new volcengine.nas.MountPoint("fooMountPoint", {
 *     fileSystemId: fooFileSystem.id,
 *     mountPointName: "acc-test",
 *     permissionGroupId: fooPermissionGroup.id,
 *     subnetId: fooSubnet.id,
 * });
 * const fooMountPoints = volcengine.nas.getMountPointsOutput({
 *     fileSystemId: fooFileSystem.id,
 *     mountPointId: fooMountPoint.mountPointId,
 * });
 * ```
 */
export function getMountPointsOutput(args: GetMountPointsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMountPointsResult> {
    return pulumi.output(args).apply((a: any) => getMountPoints(a, opts))
}

/**
 * A collection of arguments for invoking getMountPoints.
 */
export interface GetMountPointsOutputArgs {
    /**
     * The id of the file system.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * The id of the mount point.
     */
    mountPointId?: pulumi.Input<string>;
    /**
     * The name of the mount point.
     */
    mountPointName?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The id of the vpc.
     */
    vpcId?: pulumi.Input<string>;
}
