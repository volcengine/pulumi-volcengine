// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FileSystemArgs, FileSystemState } from "./fileSystem";
export type FileSystem = import("./fileSystem").FileSystem;
export const FileSystem: typeof import("./fileSystem").FileSystem = null as any;
utilities.lazyLoad(exports, ["FileSystem"], () => require("./fileSystem"));

export { FileSystemsArgs, FileSystemsResult, FileSystemsOutputArgs } from "./fileSystems";
export const fileSystems: typeof import("./fileSystems").fileSystems = null as any;
export const fileSystemsOutput: typeof import("./fileSystems").fileSystemsOutput = null as any;
utilities.lazyLoad(exports, ["fileSystems","fileSystemsOutput"], () => require("./fileSystems"));

export { MountPointArgs, MountPointState } from "./mountPoint";
export type MountPoint = import("./mountPoint").MountPoint;
export const MountPoint: typeof import("./mountPoint").MountPoint = null as any;
utilities.lazyLoad(exports, ["MountPoint"], () => require("./mountPoint"));

export { MountPointsArgs, MountPointsResult, MountPointsOutputArgs } from "./mountPoints";
export const mountPoints: typeof import("./mountPoints").mountPoints = null as any;
export const mountPointsOutput: typeof import("./mountPoints").mountPointsOutput = null as any;
utilities.lazyLoad(exports, ["mountPoints","mountPointsOutput"], () => require("./mountPoints"));

export { PermissionGroupArgs, PermissionGroupState } from "./permissionGroup";
export type PermissionGroup = import("./permissionGroup").PermissionGroup;
export const PermissionGroup: typeof import("./permissionGroup").PermissionGroup = null as any;
utilities.lazyLoad(exports, ["PermissionGroup"], () => require("./permissionGroup"));

export { PermissionGroupsArgs, PermissionGroupsResult, PermissionGroupsOutputArgs } from "./permissionGroups";
export const permissionGroups: typeof import("./permissionGroups").permissionGroups = null as any;
export const permissionGroupsOutput: typeof import("./permissionGroups").permissionGroupsOutput = null as any;
utilities.lazyLoad(exports, ["permissionGroups","permissionGroupsOutput"], () => require("./permissionGroups"));

export { RegionsArgs, RegionsResult, RegionsOutputArgs } from "./regions";
export const regions: typeof import("./regions").regions = null as any;
export const regionsOutput: typeof import("./regions").regionsOutput = null as any;
utilities.lazyLoad(exports, ["regions","regionsOutput"], () => require("./regions"));

export { SnapshotArgs, SnapshotState } from "./snapshot";
export type Snapshot = import("./snapshot").Snapshot;
export const Snapshot: typeof import("./snapshot").Snapshot = null as any;
utilities.lazyLoad(exports, ["Snapshot"], () => require("./snapshot"));

export { SnapshotsArgs, SnapshotsResult, SnapshotsOutputArgs } from "./snapshots";
export const snapshots: typeof import("./snapshots").snapshots = null as any;
export const snapshotsOutput: typeof import("./snapshots").snapshotsOutput = null as any;
utilities.lazyLoad(exports, ["snapshots","snapshotsOutput"], () => require("./snapshots"));

export { ZonesArgs, ZonesResult, ZonesOutputArgs } from "./zones";
export const zones: typeof import("./zones").zones = null as any;
export const zonesOutput: typeof import("./zones").zonesOutput = null as any;
utilities.lazyLoad(exports, ["zones","zonesOutput"], () => require("./zones"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:nas/fileSystem:FileSystem":
                return new FileSystem(name, <any>undefined, { urn })
            case "volcengine:nas/mountPoint:MountPoint":
                return new MountPoint(name, <any>undefined, { urn })
            case "volcengine:nas/permissionGroup:PermissionGroup":
                return new PermissionGroup(name, <any>undefined, { urn })
            case "volcengine:nas/snapshot:Snapshot":
                return new Snapshot(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "nas/fileSystem", _module)
pulumi.runtime.registerResourceModule("volcengine", "nas/mountPoint", _module)
pulumi.runtime.registerResourceModule("volcengine", "nas/permissionGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "nas/snapshot", _module)
