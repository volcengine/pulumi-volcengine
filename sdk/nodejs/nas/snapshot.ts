// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage nas snapshot
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.nas.Snapshot("foo", {
 *     description: "desc2",
 *     fileSystemId: "enas-cnbj5c18f02afe0e",
 *     snapshotName: "tfsnap3",
 * });
 * ```
 *
 * ## Import
 *
 * Nas Snapshot can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:nas/snapshot:Snapshot default snap-472a716f****
 * ```
 */
export class Snapshot extends pulumi.CustomResource {
    /**
     * Get an existing Snapshot resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SnapshotState, opts?: pulumi.CustomResourceOptions): Snapshot {
        return new Snapshot(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:nas/snapshot:Snapshot';

    /**
     * Returns true if the given object is an instance of Snapshot.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Snapshot {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Snapshot.__pulumiType;
    }

    /**
     * The create time of snapshot.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The description of snapshot.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the file system.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * The name of file system.
     */
    public /*out*/ readonly fileSystemName!: pulumi.Output<string>;
    /**
     * Whether is encrypt.
     */
    public /*out*/ readonly isEncrypt!: pulumi.Output<boolean>;
    /**
     * The progress of snapshot.
     */
    public /*out*/ readonly progress!: pulumi.Output<string>;
    /**
     * The name of snapshot.
     */
    public readonly snapshotName!: pulumi.Output<string>;
    /**
     * The type of snapshot.
     */
    public /*out*/ readonly snapshotType!: pulumi.Output<string>;
    /**
     * The size of source.
     */
    public /*out*/ readonly sourceSize!: pulumi.Output<number>;
    /**
     * The source version info.
     */
    public /*out*/ readonly sourceVersion!: pulumi.Output<string>;
    /**
     * The status of snapshot.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The ID of zone.
     */
    public /*out*/ readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Snapshot resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SnapshotArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SnapshotArgs | SnapshotState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SnapshotState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["fileSystemName"] = state ? state.fileSystemName : undefined;
            resourceInputs["isEncrypt"] = state ? state.isEncrypt : undefined;
            resourceInputs["progress"] = state ? state.progress : undefined;
            resourceInputs["snapshotName"] = state ? state.snapshotName : undefined;
            resourceInputs["snapshotType"] = state ? state.snapshotType : undefined;
            resourceInputs["sourceSize"] = state ? state.sourceSize : undefined;
            resourceInputs["sourceVersion"] = state ? state.sourceVersion : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as SnapshotArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.snapshotName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snapshotName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["snapshotName"] = args ? args.snapshotName : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["fileSystemName"] = undefined /*out*/;
            resourceInputs["isEncrypt"] = undefined /*out*/;
            resourceInputs["progress"] = undefined /*out*/;
            resourceInputs["snapshotType"] = undefined /*out*/;
            resourceInputs["sourceSize"] = undefined /*out*/;
            resourceInputs["sourceVersion"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Snapshot.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Snapshot resources.
 */
export interface SnapshotState {
    /**
     * The create time of snapshot.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of snapshot.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the file system.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * The name of file system.
     */
    fileSystemName?: pulumi.Input<string>;
    /**
     * Whether is encrypt.
     */
    isEncrypt?: pulumi.Input<boolean>;
    /**
     * The progress of snapshot.
     */
    progress?: pulumi.Input<string>;
    /**
     * The name of snapshot.
     */
    snapshotName?: pulumi.Input<string>;
    /**
     * The type of snapshot.
     */
    snapshotType?: pulumi.Input<string>;
    /**
     * The size of source.
     */
    sourceSize?: pulumi.Input<number>;
    /**
     * The source version info.
     */
    sourceVersion?: pulumi.Input<string>;
    /**
     * The status of snapshot.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of zone.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Snapshot resource.
 */
export interface SnapshotArgs {
    /**
     * The description of snapshot.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the file system.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * The name of snapshot.
     */
    snapshotName: pulumi.Input<string>;
}
