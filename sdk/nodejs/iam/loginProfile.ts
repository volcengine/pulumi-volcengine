// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage iam login profile
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.iam.LoginProfile("foo", {
 *     loginAllowed: true,
 *     password: "******",
 *     passwordResetRequired: false,
 *     userName: "tf-test",
 * });
 * ```
 *
 * ## Import
 *
 * Login profile can be imported using the UserName, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:iam/loginProfile:LoginProfile default user_name
 * ```
 */
export class LoginProfile extends pulumi.CustomResource {
    /**
     * Get an existing LoginProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoginProfileState, opts?: pulumi.CustomResourceOptions): LoginProfile {
        return new LoginProfile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:iam/loginProfile:LoginProfile';

    /**
     * Returns true if the given object is an instance of LoginProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoginProfile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoginProfile.__pulumiType;
    }

    /**
     * The flag of login allowed.
     */
    public readonly loginAllowed!: pulumi.Output<boolean | undefined>;
    /**
     * The password.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Is required reset password when next time login in.
     */
    public readonly passwordResetRequired!: pulumi.Output<boolean | undefined>;
    /**
     * The user name.
     */
    public readonly userName!: pulumi.Output<string>;

    /**
     * Create a LoginProfile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoginProfileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoginProfileArgs | LoginProfileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoginProfileState | undefined;
            resourceInputs["loginAllowed"] = state ? state.loginAllowed : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["passwordResetRequired"] = state ? state.passwordResetRequired : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
        } else {
            const args = argsOrState as LoginProfileArgs | undefined;
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            resourceInputs["loginAllowed"] = args ? args.loginAllowed : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["passwordResetRequired"] = args ? args.passwordResetRequired : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LoginProfile.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoginProfile resources.
 */
export interface LoginProfileState {
    /**
     * The flag of login allowed.
     */
    loginAllowed?: pulumi.Input<boolean>;
    /**
     * The password.
     */
    password?: pulumi.Input<string>;
    /**
     * Is required reset password when next time login in.
     */
    passwordResetRequired?: pulumi.Input<boolean>;
    /**
     * The user name.
     */
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoginProfile resource.
 */
export interface LoginProfileArgs {
    /**
     * The flag of login allowed.
     */
    loginAllowed?: pulumi.Input<boolean>;
    /**
     * The password.
     */
    password: pulumi.Input<string>;
    /**
     * Is required reset password when next time login in.
     */
    passwordResetRequired?: pulumi.Input<boolean>;
    /**
     * The user name.
     */
    userName: pulumi.Input<string>;
}
