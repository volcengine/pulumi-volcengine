// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of iam policies
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.iam.Policies({
 *     query: "AdministratorAccess",
 * });
 * ```
 */
export function policies(args?: PoliciesArgs, opts?: pulumi.InvokeOptions): Promise<PoliciesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:iam/policies:Policies", {
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "query": args.query,
        "roleName": args.roleName,
        "scope": args.scope,
        "status": args.status,
        "userName": args.userName,
    }, opts);
}

/**
 * A collection of arguments for invoking Policies.
 */
export interface PoliciesArgs {
    /**
     * A Name Regex of Policy.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * Query policies, support policy name or description.
     */
    query?: string;
    /**
     * The name of the IAM role.
     */
    roleName?: string;
    /**
     * The scope of the Policy.
     */
    scope?: string;
    /**
     * The status of policy.
     */
    status?: string;
    /**
     * The name of the IAM user.
     */
    userName?: string;
}

/**
 * A collection of values returned by Policies.
 */
export interface PoliciesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The collection of Policy query.
     */
    readonly policies: outputs.iam.PoliciesPolicy[];
    readonly query?: string;
    /**
     * The name of the IAM role.The data show only query with role_name.
     */
    readonly roleName?: string;
    readonly scope?: string;
    readonly status?: string;
    /**
     * The total count of Policy query.
     */
    readonly totalCount: number;
    /**
     * The name of the IAM user.The data show only query with user_name.
     */
    readonly userName?: string;
}
/**
 * Use this data source to query detailed information of iam policies
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.iam.Policies({
 *     query: "AdministratorAccess",
 * });
 * ```
 */
export function policiesOutput(args?: PoliciesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<PoliciesResult> {
    return pulumi.output(args).apply((a: any) => policies(a, opts))
}

/**
 * A collection of arguments for invoking Policies.
 */
export interface PoliciesOutputArgs {
    /**
     * A Name Regex of Policy.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * Query policies, support policy name or description.
     */
    query?: pulumi.Input<string>;
    /**
     * The name of the IAM role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * The scope of the Policy.
     */
    scope?: pulumi.Input<string>;
    /**
     * The status of policy.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the IAM user.
     */
    userName?: pulumi.Input<string>;
}
