// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage iam role
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.iam.Role("foo", {
 *     description: "created by terraform",
 *     displayName: "terraform role",
 *     maxSessionDuration: 43200,
 *     roleName: "TerraformTestRole",
 *     trustPolicyDocument: "{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"sts:AssumeRole\"],\"Principal\":{\"Service\":[\"auto_scaling\"]}}]}",
 * });
 * ```
 *
 * ## Import
 *
 * Iam role can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:iam/role:Role default TerraformTestRole
 * ```
 */
export class Role extends pulumi.CustomResource {
    /**
     * Get an existing Role resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoleState, opts?: pulumi.CustomResourceOptions): Role {
        return new Role(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:iam/role:Role';

    /**
     * Returns true if the given object is an instance of Role.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Role {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Role.__pulumiType;
    }

    /**
     * The description of the Role.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The display name of the Role.
     */
    public readonly displayName!: pulumi.Output<string>;
    /**
     * The max session duration of the Role.
     */
    public readonly maxSessionDuration!: pulumi.Output<number | undefined>;
    /**
     * The name of the Role.
     */
    public readonly roleName!: pulumi.Output<string>;
    /**
     * The resource name of the Role.
     */
    public /*out*/ readonly trn!: pulumi.Output<string>;
    /**
     * The trust policy document of the Role.
     */
    public readonly trustPolicyDocument!: pulumi.Output<string>;

    /**
     * Create a Role resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoleArgs | RoleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["displayName"] = state ? state.displayName : undefined;
            resourceInputs["maxSessionDuration"] = state ? state.maxSessionDuration : undefined;
            resourceInputs["roleName"] = state ? state.roleName : undefined;
            resourceInputs["trn"] = state ? state.trn : undefined;
            resourceInputs["trustPolicyDocument"] = state ? state.trustPolicyDocument : undefined;
        } else {
            const args = argsOrState as RoleArgs | undefined;
            if ((!args || args.displayName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'displayName'");
            }
            if ((!args || args.roleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleName'");
            }
            if ((!args || args.trustPolicyDocument === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trustPolicyDocument'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["displayName"] = args ? args.displayName : undefined;
            resourceInputs["maxSessionDuration"] = args ? args.maxSessionDuration : undefined;
            resourceInputs["roleName"] = args ? args.roleName : undefined;
            resourceInputs["trustPolicyDocument"] = args ? args.trustPolicyDocument : undefined;
            resourceInputs["trn"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Role.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Role resources.
 */
export interface RoleState {
    /**
     * The description of the Role.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the Role.
     */
    displayName?: pulumi.Input<string>;
    /**
     * The max session duration of the Role.
     */
    maxSessionDuration?: pulumi.Input<number>;
    /**
     * The name of the Role.
     */
    roleName?: pulumi.Input<string>;
    /**
     * The resource name of the Role.
     */
    trn?: pulumi.Input<string>;
    /**
     * The trust policy document of the Role.
     */
    trustPolicyDocument?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Role resource.
 */
export interface RoleArgs {
    /**
     * The description of the Role.
     */
    description?: pulumi.Input<string>;
    /**
     * The display name of the Role.
     */
    displayName: pulumi.Input<string>;
    /**
     * The max session duration of the Role.
     */
    maxSessionDuration?: pulumi.Input<number>;
    /**
     * The name of the Role.
     */
    roleName: pulumi.Input<string>;
    /**
     * The trust policy document of the Role.
     */
    trustPolicyDocument: pulumi.Input<string>;
}
