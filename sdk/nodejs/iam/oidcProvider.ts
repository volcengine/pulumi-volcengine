// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage iam oidc provider
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.iam.OidcProvider("foo", {
 *     clientIds: [
 *         "test-client-id-1",
 *         "test-client-id-2",
 *     ],
 *     description: "acc-test-oidc",
 *     issuanceLimitTime: 6,
 *     issuerUrl: "test-issuer-url",
 *     oidcProviderName: "oidc_provider",
 *     thumbprints: [
 *         "test-thumbprint-1",
 *         "test-thumbprint-2",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * IamOidcProvider can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:iam/oidcProvider:OidcProvider default resource_id
 * ```
 */
export class OidcProvider extends pulumi.CustomResource {
    /**
     * Get an existing OidcProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OidcProviderState, opts?: pulumi.CustomResourceOptions): OidcProvider {
        return new OidcProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:iam/oidcProvider:OidcProvider';

    /**
     * Returns true if the given object is an instance of OidcProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OidcProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OidcProvider.__pulumiType;
    }

    /**
     * The client IDs of the OIDC provider.
     */
    public readonly clientIds!: pulumi.Output<string[]>;
    /**
     * The create date of the OIDC provider.
     */
    public /*out*/ readonly createDate!: pulumi.Output<string>;
    /**
     * The description of the OIDC provider.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The issuance limit time of the OIDC provider.
     */
    public readonly issuanceLimitTime!: pulumi.Output<number | undefined>;
    /**
     * The URL of the OIDC provider.
     */
    public readonly issuerUrl!: pulumi.Output<string>;
    /**
     * The name of the OIDC provider.
     */
    public readonly oidcProviderName!: pulumi.Output<string>;
    /**
     * The thumbprints of the OIDC provider.
     */
    public readonly thumbprints!: pulumi.Output<string[]>;
    /**
     * The trn of OIDC provider.
     */
    public /*out*/ readonly trn!: pulumi.Output<string>;
    /**
     * The update date of the OIDC provider.
     */
    public /*out*/ readonly updateDate!: pulumi.Output<string>;

    /**
     * Create a OidcProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OidcProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OidcProviderArgs | OidcProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OidcProviderState | undefined;
            resourceInputs["clientIds"] = state ? state.clientIds : undefined;
            resourceInputs["createDate"] = state ? state.createDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["issuanceLimitTime"] = state ? state.issuanceLimitTime : undefined;
            resourceInputs["issuerUrl"] = state ? state.issuerUrl : undefined;
            resourceInputs["oidcProviderName"] = state ? state.oidcProviderName : undefined;
            resourceInputs["thumbprints"] = state ? state.thumbprints : undefined;
            resourceInputs["trn"] = state ? state.trn : undefined;
            resourceInputs["updateDate"] = state ? state.updateDate : undefined;
        } else {
            const args = argsOrState as OidcProviderArgs | undefined;
            if ((!args || args.clientIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientIds'");
            }
            if ((!args || args.issuerUrl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUrl'");
            }
            if ((!args || args.oidcProviderName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'oidcProviderName'");
            }
            if ((!args || args.thumbprints === undefined) && !opts.urn) {
                throw new Error("Missing required property 'thumbprints'");
            }
            resourceInputs["clientIds"] = args ? args.clientIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["issuanceLimitTime"] = args ? args.issuanceLimitTime : undefined;
            resourceInputs["issuerUrl"] = args ? args.issuerUrl : undefined;
            resourceInputs["oidcProviderName"] = args ? args.oidcProviderName : undefined;
            resourceInputs["thumbprints"] = args ? args.thumbprints : undefined;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["trn"] = undefined /*out*/;
            resourceInputs["updateDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OidcProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OidcProvider resources.
 */
export interface OidcProviderState {
    /**
     * The client IDs of the OIDC provider.
     */
    clientIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The create date of the OIDC provider.
     */
    createDate?: pulumi.Input<string>;
    /**
     * The description of the OIDC provider.
     */
    description?: pulumi.Input<string>;
    /**
     * The issuance limit time of the OIDC provider.
     */
    issuanceLimitTime?: pulumi.Input<number>;
    /**
     * The URL of the OIDC provider.
     */
    issuerUrl?: pulumi.Input<string>;
    /**
     * The name of the OIDC provider.
     */
    oidcProviderName?: pulumi.Input<string>;
    /**
     * The thumbprints of the OIDC provider.
     */
    thumbprints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The trn of OIDC provider.
     */
    trn?: pulumi.Input<string>;
    /**
     * The update date of the OIDC provider.
     */
    updateDate?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OidcProvider resource.
 */
export interface OidcProviderArgs {
    /**
     * The client IDs of the OIDC provider.
     */
    clientIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the OIDC provider.
     */
    description?: pulumi.Input<string>;
    /**
     * The issuance limit time of the OIDC provider.
     */
    issuanceLimitTime?: pulumi.Input<number>;
    /**
     * The URL of the OIDC provider.
     */
    issuerUrl: pulumi.Input<string>;
    /**
     * The name of the OIDC provider.
     */
    oidcProviderName: pulumi.Input<string>;
    /**
     * The thumbprints of the OIDC provider.
     */
    thumbprints: pulumi.Input<pulumi.Input<string>[]>;
}
