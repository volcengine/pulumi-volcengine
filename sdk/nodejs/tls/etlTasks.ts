// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of tls etl tasks
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.tls.getEtlTasks({});
 * ```
 */
/** @deprecated volcengine.tls.EtlTasks has been deprecated in favor of volcengine.tls.getEtlTasks */
export function etlTasks(args?: EtlTasksArgs, opts?: pulumi.InvokeOptions): Promise<EtlTasksResult> {
    pulumi.log.warn("etlTasks is deprecated: volcengine.tls.EtlTasks has been deprecated in favor of volcengine.tls.getEtlTasks")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:tls/etlTasks:EtlTasks", {
        "iamProjectName": args.iamProjectName,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectId": args.projectId,
        "projectName": args.projectName,
        "sourceTopicId": args.sourceTopicId,
        "sourceTopicName": args.sourceTopicName,
        "status": args.status,
        "taskId": args.taskId,
        "taskName": args.taskName,
    }, opts);
}

/**
 * A collection of arguments for invoking EtlTasks.
 */
export interface EtlTasksArgs {
    /**
     * Specify the IAM project name to query the data processing tasks under the specified IAM project.
     */
    iamProjectName?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * Specify the log item ID for querying the data processing tasks under the specified log item.
     */
    projectId?: string;
    /**
     * Specify the name of the log item for querying the data processing tasks under the specified log item. Support fuzzy query.
     */
    projectName?: string;
    /**
     * Specify the log topic ID for querying the data processing tasks related to this log topic.
     */
    sourceTopicId?: string;
    /**
     * Specify the name of the log topic for querying the data processing tasks related to this log topic. Support fuzzy matching.
     */
    sourceTopicName?: string;
    /**
     * Specify the processing task status for querying data processing tasks in this status.
     */
    status?: string;
    /**
     * The ID of the processing task.
     */
    taskId?: string;
    /**
     * The name of the processing task.
     */
    taskName?: string;
}

/**
 * A collection of values returned by EtlTasks.
 */
export interface EtlTasksResult {
    readonly iamProjectName?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The log item ID used for storing the processed logs.
     */
    readonly projectId?: string;
    /**
     * The name of the log item used for storing the processed logs.
     */
    readonly projectName?: string;
    /**
     * The log topic ID where the log to be processed is located.
     */
    readonly sourceTopicId?: string;
    /**
     * The name of the log topic where the log to be processed is located.
     */
    readonly sourceTopicName?: string;
    readonly status?: string;
    /**
     * The ID of the processing task.
     */
    readonly taskId?: string;
    readonly taskName?: string;
    /**
     * Detailed information of the processing task.
     */
    readonly tasks: outputs.tls.EtlTasksTask[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of tls etl tasks
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.tls.getEtlTasks({});
 * ```
 */
/** @deprecated volcengine.tls.EtlTasks has been deprecated in favor of volcengine.tls.getEtlTasks */
export function etlTasksOutput(args?: EtlTasksOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<EtlTasksResult> {
    return pulumi.output(args).apply((a: any) => etlTasks(a, opts))
}

/**
 * A collection of arguments for invoking EtlTasks.
 */
export interface EtlTasksOutputArgs {
    /**
     * Specify the IAM project name to query the data processing tasks under the specified IAM project.
     */
    iamProjectName?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * Specify the log item ID for querying the data processing tasks under the specified log item.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Specify the name of the log item for querying the data processing tasks under the specified log item. Support fuzzy query.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Specify the log topic ID for querying the data processing tasks related to this log topic.
     */
    sourceTopicId?: pulumi.Input<string>;
    /**
     * Specify the name of the log topic for querying the data processing tasks related to this log topic. Support fuzzy matching.
     */
    sourceTopicName?: pulumi.Input<string>;
    /**
     * Specify the processing task status for querying data processing tasks in this status.
     */
    status?: pulumi.Input<string>;
    /**
     * The ID of the processing task.
     */
    taskId?: pulumi.Input<string>;
    /**
     * The name of the processing task.
     */
    taskName?: pulumi.Input<string>;
}
