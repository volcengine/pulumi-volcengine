// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage tls rule
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.tls.Rule("foo", {
 *     topicId: "7bfa2cdc-4f8b-4cf9-b4c9-0ed05c33349f",
 *     ruleName: "test",
 *     logType: "minimalist_log",
 *     logSample: "2018-05-22 15:35:53.850 INFO XXXX",
 *     inputType: 1,
 *     userDefineRule: {
 *         enableRawLog: false,
 *         tailFiles: true,
 *         shardHashKey: {
 *             hashKey: "3C",
 *         },
 *         plugin: {
 *             processors: [
 *                 JSON.stringify({
 *                     json: {
 *                         field: "__content__",
 *                         trim_keys: {
 *                             mode: "all",
 *                             chars: "#",
 *                         },
 *                         trim_values: {
 *                             mode: "all",
 *                             chars: "#t",
 *                         },
 *                         allow_overwrite_keys: true,
 *                         allow_empty_values: true,
 *                     },
 *                 }),
 *                 JSON.stringify({
 *                     json: {
 *                         field: "__content__",
 *                         trim_keys: {
 *                             mode: "all",
 *                             chars: "#xx",
 *                         },
 *                         trim_values: {
 *                             mode: "all",
 *                             chars: "#txxxt",
 *                         },
 *                         allow_overwrite_keys: true,
 *                         allow_empty_values: true,
 *                     },
 *                 }),
 *             ],
 *         },
 *         advanced: {
 *             closeInactive: 10,
 *             closeRemoved: false,
 *             closeRenamed: false,
 *             closeEof: false,
 *             closeTimeout: 1,
 *         },
 *     },
 *     containerRule: {
 *         stream: "all",
 *         containerNameRegex: ".*test.*",
 *         includeContainerLabelRegex: {
 *             Key1: "Value12",
 *             Key2: "Value23",
 *         },
 *         excludeContainerLabelRegex: {
 *             Key1: "Value12",
 *             Key2: "Value22",
 *         },
 *         includeContainerEnvRegex: {
 *             Key1: "Value1",
 *             Key2: "Value2",
 *         },
 *         excludeContainerEnvRegex: {
 *             Key1: "Value1",
 *             Key2: "Value2",
 *         },
 *         envTag: {
 *             Key1: "Value1",
 *             Key2: "Value2",
 *         },
 *         kubernetesRule: {
 *             namespaceNameRegex: ".*test.*",
 *             workloadType: "Deployment",
 *             workloadNameRegex: ".*test.*",
 *             includePodLabelRegex: {
 *                 Key1: "Value1",
 *                 Key2: "Value2",
 *             },
 *             excludePodLabelRegex: {
 *                 Key1: "Value1",
 *                 Key2: "Value2",
 *             },
 *             podNameRegex: ".*test.*",
 *             labelTag: {
 *                 Key1: "Value1",
 *                 Key2: "Value2",
 *             },
 *             annotationTag: {
 *                 Key1: "Value1",
 *                 Key2: "Value2",
 *             },
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * tls rule can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:tls/rule:Rule default fa************
 * ```
 */
export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:tls/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * Container collection rules.
     */
    public readonly containerRule!: pulumi.Output<outputs.tls.RuleContainerRule | undefined>;
    /**
     * Collect the blacklist list.
     */
    public readonly excludePaths!: pulumi.Output<outputs.tls.RuleExcludePath[] | undefined>;
    /**
     * The extract rule.
     */
    public readonly extractRule!: pulumi.Output<outputs.tls.RuleExtractRule>;
    /**
     * The type of the collection configuration. Validate value can be `0`(host log file), `1`(K8s container standard output) and `2`(Log files in the K8s container).
     */
    public readonly inputType!: pulumi.Output<number | undefined>;
    /**
     * The sample of the log.
     */
    public readonly logSample!: pulumi.Output<string | undefined>;
    /**
     * The log type. The value can be one of the following: `minimalistLog`, `jsonLog`, `delimiterLog`, `multilineLog`, `fullregexLog`.
     */
    public readonly logType!: pulumi.Output<string | undefined>;
    /**
     * Collection path list.
     */
    public readonly paths!: pulumi.Output<string[] | undefined>;
    /**
     * The id of the rule.
     */
    public /*out*/ readonly ruleId!: pulumi.Output<string>;
    /**
     * The name of the collection configuration.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * The ID of the log topic to which the collection configuration belongs.
     */
    public readonly topicId!: pulumi.Output<string>;
    /**
     * User-defined collection rules.
     */
    public readonly userDefineRule!: pulumi.Output<outputs.tls.RuleUserDefineRule | undefined>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["containerRule"] = state ? state.containerRule : undefined;
            resourceInputs["excludePaths"] = state ? state.excludePaths : undefined;
            resourceInputs["extractRule"] = state ? state.extractRule : undefined;
            resourceInputs["inputType"] = state ? state.inputType : undefined;
            resourceInputs["logSample"] = state ? state.logSample : undefined;
            resourceInputs["logType"] = state ? state.logType : undefined;
            resourceInputs["paths"] = state ? state.paths : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
            resourceInputs["userDefineRule"] = state ? state.userDefineRule : undefined;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.topicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicId'");
            }
            resourceInputs["containerRule"] = args ? args.containerRule : undefined;
            resourceInputs["excludePaths"] = args ? args.excludePaths : undefined;
            resourceInputs["extractRule"] = args ? args.extractRule : undefined;
            resourceInputs["inputType"] = args ? args.inputType : undefined;
            resourceInputs["logSample"] = args ? args.logSample : undefined;
            resourceInputs["logType"] = args ? args.logType : undefined;
            resourceInputs["paths"] = args ? args.paths : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
            resourceInputs["userDefineRule"] = args ? args.userDefineRule : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    /**
     * Container collection rules.
     */
    containerRule?: pulumi.Input<inputs.tls.RuleContainerRule>;
    /**
     * Collect the blacklist list.
     */
    excludePaths?: pulumi.Input<pulumi.Input<inputs.tls.RuleExcludePath>[]>;
    /**
     * The extract rule.
     */
    extractRule?: pulumi.Input<inputs.tls.RuleExtractRule>;
    /**
     * The type of the collection configuration. Validate value can be `0`(host log file), `1`(K8s container standard output) and `2`(Log files in the K8s container).
     */
    inputType?: pulumi.Input<number>;
    /**
     * The sample of the log.
     */
    logSample?: pulumi.Input<string>;
    /**
     * The log type. The value can be one of the following: `minimalistLog`, `jsonLog`, `delimiterLog`, `multilineLog`, `fullregexLog`.
     */
    logType?: pulumi.Input<string>;
    /**
     * Collection path list.
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The id of the rule.
     */
    ruleId?: pulumi.Input<string>;
    /**
     * The name of the collection configuration.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * The ID of the log topic to which the collection configuration belongs.
     */
    topicId?: pulumi.Input<string>;
    /**
     * User-defined collection rules.
     */
    userDefineRule?: pulumi.Input<inputs.tls.RuleUserDefineRule>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * Container collection rules.
     */
    containerRule?: pulumi.Input<inputs.tls.RuleContainerRule>;
    /**
     * Collect the blacklist list.
     */
    excludePaths?: pulumi.Input<pulumi.Input<inputs.tls.RuleExcludePath>[]>;
    /**
     * The extract rule.
     */
    extractRule?: pulumi.Input<inputs.tls.RuleExtractRule>;
    /**
     * The type of the collection configuration. Validate value can be `0`(host log file), `1`(K8s container standard output) and `2`(Log files in the K8s container).
     */
    inputType?: pulumi.Input<number>;
    /**
     * The sample of the log.
     */
    logSample?: pulumi.Input<string>;
    /**
     * The log type. The value can be one of the following: `minimalistLog`, `jsonLog`, `delimiterLog`, `multilineLog`, `fullregexLog`.
     */
    logType?: pulumi.Input<string>;
    /**
     * Collection path list.
     */
    paths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the collection configuration.
     */
    ruleName: pulumi.Input<string>;
    /**
     * The ID of the log topic to which the collection configuration belongs.
     */
    topicId: pulumi.Input<string>;
    /**
     * User-defined collection rules.
     */
    userDefineRule?: pulumi.Input<inputs.tls.RuleUserDefineRule>;
}
