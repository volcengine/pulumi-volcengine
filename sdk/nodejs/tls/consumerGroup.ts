// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage tls consumer group
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.tls.ConsumerGroup("foo", {
 *     consumerGroupName: "tf-test-consumer-group",
 *     heartbeatTtl: 120,
 *     orderedConsume: false,
 *     projectId: "17ba378d-de43-495e-8906-03aexxxxxx",
 *     topicIdLists: ["0ed72ac8-9531-4967-b216-ac30xxxxxx"],
 * });
 * ```
 *
 * ## Import
 *
 * ConsumerGroup can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:tls/consumerGroup:ConsumerGroup default resource_id
 * ```
 */
export class ConsumerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ConsumerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ConsumerGroupState, opts?: pulumi.CustomResourceOptions): ConsumerGroup {
        return new ConsumerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:tls/consumerGroup:ConsumerGroup';

    /**
     * Returns true if the given object is an instance of ConsumerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ConsumerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ConsumerGroup.__pulumiType;
    }

    /**
     * The name of the consumer group.
     */
    public readonly consumerGroupName!: pulumi.Output<string>;
    /**
     * The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
     */
    public readonly heartbeatTtl!: pulumi.Output<number>;
    /**
     * Whether to consume in sequence.
     */
    public readonly orderedConsume!: pulumi.Output<boolean>;
    /**
     * The log project ID to which the consumption group belongs.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The list of log topic ids to be consumed by the consumer group.
     */
    public readonly topicIdLists!: pulumi.Output<string[]>;

    /**
     * Create a ConsumerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ConsumerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ConsumerGroupArgs | ConsumerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ConsumerGroupState | undefined;
            resourceInputs["consumerGroupName"] = state ? state.consumerGroupName : undefined;
            resourceInputs["heartbeatTtl"] = state ? state.heartbeatTtl : undefined;
            resourceInputs["orderedConsume"] = state ? state.orderedConsume : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["topicIdLists"] = state ? state.topicIdLists : undefined;
        } else {
            const args = argsOrState as ConsumerGroupArgs | undefined;
            if ((!args || args.consumerGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'consumerGroupName'");
            }
            if ((!args || args.heartbeatTtl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'heartbeatTtl'");
            }
            if ((!args || args.orderedConsume === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orderedConsume'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.topicIdLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicIdLists'");
            }
            resourceInputs["consumerGroupName"] = args ? args.consumerGroupName : undefined;
            resourceInputs["heartbeatTtl"] = args ? args.heartbeatTtl : undefined;
            resourceInputs["orderedConsume"] = args ? args.orderedConsume : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["topicIdLists"] = args ? args.topicIdLists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ConsumerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ConsumerGroup resources.
 */
export interface ConsumerGroupState {
    /**
     * The name of the consumer group.
     */
    consumerGroupName?: pulumi.Input<string>;
    /**
     * The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
     */
    heartbeatTtl?: pulumi.Input<number>;
    /**
     * Whether to consume in sequence.
     */
    orderedConsume?: pulumi.Input<boolean>;
    /**
     * The log project ID to which the consumption group belongs.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The list of log topic ids to be consumed by the consumer group.
     */
    topicIdLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ConsumerGroup resource.
 */
export interface ConsumerGroupArgs {
    /**
     * The name of the consumer group.
     */
    consumerGroupName: pulumi.Input<string>;
    /**
     * The time of heart rate expiration, measured in seconds, has a value range of 1 to 300.
     */
    heartbeatTtl: pulumi.Input<number>;
    /**
     * Whether to consume in sequence.
     */
    orderedConsume: pulumi.Input<boolean>;
    /**
     * The log project ID to which the consumption group belongs.
     */
    projectId: pulumi.Input<string>;
    /**
     * The list of log topic ids to be consumed by the consumer group.
     */
    topicIdLists: pulumi.Input<pulumi.Input<string>[]>;
}
