// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage tls import task
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.tls.ImportTask("foo", {
 *     description: "tf-test",
 *     importSourceInfo: {
 *         kafkaSourceInfo: {
 *             encode: "UTF-8",
 *             host: "1.1.1.1",
 *             initialOffset: 0,
 *             timeSourceDefault: 1,
 *             topic: "topic-1,topic-2,topic-3",
 *         },
 *     },
 *     sourceType: "kafka",
 *     targetInfo: {
 *         extractRule: {
 *             unMatchLogKey: "key-failed",
 *             unMatchUpLoadSwitch: true,
 *         },
 *         logType: "json_log",
 *         region: "cn-beijing",
 *     },
 *     taskName: "tf-test-task-name-kafka",
 *     topicId: "b966e41a-d6a6-4999-bd75-39xxxxxxx",
 * });
 * ```
 *
 * ## Import
 *
 * ImportTask can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:tls/importTask:ImportTask default resource_id
 * ```
 */
export class ImportTask extends pulumi.CustomResource {
    /**
     * Get an existing ImportTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImportTaskState, opts?: pulumi.CustomResourceOptions): ImportTask {
        return new ImportTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:tls/importTask:ImportTask';

    /**
     * Returns true if the given object is an instance of ImportTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImportTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImportTask.__pulumiType;
    }

    /**
     * Data import task description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The source information of the data import task.
     */
    public readonly importSourceInfo!: pulumi.Output<outputs.tls.ImportTaskImportSourceInfo>;
    /**
     * The log project ID used for storing data.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Import the source type.
     */
    public readonly sourceType!: pulumi.Output<string>;
    /**
     * The status of the data import task.
     */
    public readonly status!: pulumi.Output<number>;
    /**
     * The output information of the data import task.
     */
    public readonly targetInfo!: pulumi.Output<outputs.tls.ImportTaskTargetInfo>;
    /**
     * Data import task name.
     */
    public readonly taskName!: pulumi.Output<string>;
    /**
     * The log topic ID used for storing data.
     */
    public readonly topicId!: pulumi.Output<string>;

    /**
     * Create a ImportTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImportTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImportTaskArgs | ImportTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImportTaskState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["importSourceInfo"] = state ? state.importSourceInfo : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["targetInfo"] = state ? state.targetInfo : undefined;
            resourceInputs["taskName"] = state ? state.taskName : undefined;
            resourceInputs["topicId"] = state ? state.topicId : undefined;
        } else {
            const args = argsOrState as ImportTaskArgs | undefined;
            if ((!args || args.importSourceInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'importSourceInfo'");
            }
            if ((!args || args.targetInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetInfo'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["importSourceInfo"] = args ? args.importSourceInfo : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["targetInfo"] = args ? args.targetInfo : undefined;
            resourceInputs["taskName"] = args ? args.taskName : undefined;
            resourceInputs["topicId"] = args ? args.topicId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImportTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImportTask resources.
 */
export interface ImportTaskState {
    /**
     * Data import task description.
     */
    description?: pulumi.Input<string>;
    /**
     * The source information of the data import task.
     */
    importSourceInfo?: pulumi.Input<inputs.tls.ImportTaskImportSourceInfo>;
    /**
     * The log project ID used for storing data.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Import the source type.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * The status of the data import task.
     */
    status?: pulumi.Input<number>;
    /**
     * The output information of the data import task.
     */
    targetInfo?: pulumi.Input<inputs.tls.ImportTaskTargetInfo>;
    /**
     * Data import task name.
     */
    taskName?: pulumi.Input<string>;
    /**
     * The log topic ID used for storing data.
     */
    topicId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImportTask resource.
 */
export interface ImportTaskArgs {
    /**
     * Data import task description.
     */
    description?: pulumi.Input<string>;
    /**
     * The source information of the data import task.
     */
    importSourceInfo: pulumi.Input<inputs.tls.ImportTaskImportSourceInfo>;
    /**
     * The log project ID used for storing data.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Import the source type.
     */
    sourceType?: pulumi.Input<string>;
    /**
     * The status of the data import task.
     */
    status?: pulumi.Input<number>;
    /**
     * The output information of the data import task.
     */
    targetInfo: pulumi.Input<inputs.tls.ImportTaskTargetInfo>;
    /**
     * Data import task name.
     */
    taskName?: pulumi.Input<string>;
    /**
     * The log topic ID used for storing data.
     */
    topicId?: pulumi.Input<string>;
}
