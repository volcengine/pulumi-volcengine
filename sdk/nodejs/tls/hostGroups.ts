// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of tls host groups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.tls.HostGroups({
 *     hostGroupId: "fbea6619-7b0c-40f3-ac7e-45c63e3f676e",
 *     hostGroupName: "cn",
 * });
 * ```
 */
export function hostGroups(args?: HostGroupsArgs, opts?: pulumi.InvokeOptions): Promise<HostGroupsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:tls/hostGroups:HostGroups", {
        "autoUpdate": args.autoUpdate,
        "hostGroupId": args.hostGroupId,
        "hostGroupName": args.hostGroupName,
        "hostIdentifier": args.hostIdentifier,
        "iamProjectName": args.iamProjectName,
        "outputFile": args.outputFile,
        "serviceLogging": args.serviceLogging,
    }, opts);
}

/**
 * A collection of arguments for invoking HostGroups.
 */
export interface HostGroupsArgs {
    /**
     * Whether enable auto update.
     */
    autoUpdate?: boolean;
    /**
     * The id of host group.
     */
    hostGroupId?: string;
    /**
     * The name of host group.
     */
    hostGroupName?: string;
    /**
     * The identifier of host.
     */
    hostIdentifier?: string;
    /**
     * The project name of iam.
     */
    iamProjectName?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * Whether enable service logging.
     */
    serviceLogging?: boolean;
}

/**
 * A collection of values returned by HostGroups.
 */
export interface HostGroupsResult {
    /**
     * Whether enable auto update.
     */
    readonly autoUpdate?: boolean;
    /**
     * The id of host group.
     */
    readonly hostGroupId?: string;
    /**
     * The name of host group.
     */
    readonly hostGroupName?: string;
    /**
     * The identifier of host.
     */
    readonly hostIdentifier?: string;
    /**
     * The project name of iam.
     */
    readonly iamProjectName?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The collection of query.
     */
    readonly infos: outputs.tls.HostGroupsInfo[];
    readonly outputFile?: string;
    /**
     * Whether enable service logging.
     */
    readonly serviceLogging?: boolean;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of tls host groups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.tls.HostGroups({
 *     hostGroupId: "fbea6619-7b0c-40f3-ac7e-45c63e3f676e",
 *     hostGroupName: "cn",
 * });
 * ```
 */
export function hostGroupsOutput(args?: HostGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<HostGroupsResult> {
    return pulumi.output(args).apply((a: any) => hostGroups(a, opts))
}

/**
 * A collection of arguments for invoking HostGroups.
 */
export interface HostGroupsOutputArgs {
    /**
     * Whether enable auto update.
     */
    autoUpdate?: pulumi.Input<boolean>;
    /**
     * The id of host group.
     */
    hostGroupId?: pulumi.Input<string>;
    /**
     * The name of host group.
     */
    hostGroupName?: pulumi.Input<string>;
    /**
     * The identifier of host.
     */
    hostIdentifier?: pulumi.Input<string>;
    /**
     * The project name of iam.
     */
    iamProjectName?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * Whether enable service logging.
     */
    serviceLogging?: pulumi.Input<boolean>;
}
