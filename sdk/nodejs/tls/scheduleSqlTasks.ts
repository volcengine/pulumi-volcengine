// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of tls schedule sql tasks
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.tls.getScheduleSqlTasks({});
 * ```
 */
/** @deprecated volcengine.tls.ScheduleSqlTasks has been deprecated in favor of volcengine.tls.getScheduleSqlTasks */
export function scheduleSqlTasks(args?: ScheduleSqlTasksArgs, opts?: pulumi.InvokeOptions): Promise<ScheduleSqlTasksResult> {
    pulumi.log.warn("scheduleSqlTasks is deprecated: volcengine.tls.ScheduleSqlTasks has been deprecated in favor of volcengine.tls.getScheduleSqlTasks")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:tls/scheduleSqlTasks:ScheduleSqlTasks", {
        "iamProjectName": args.iamProjectName,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectId": args.projectId,
        "projectName": args.projectName,
        "sourceTopicName": args.sourceTopicName,
        "status": args.status,
        "taskId": args.taskId,
        "taskName": args.taskName,
        "topicId": args.topicId,
    }, opts);
}

/**
 * A collection of arguments for invoking ScheduleSqlTasks.
 */
export interface ScheduleSqlTasksArgs {
    /**
     * IAM log project name.
     */
    iamProjectName?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The log project ID to which the source log topic belongs.
     */
    projectId?: string;
    /**
     * The name of the log item to which the source log topic belongs.
     */
    projectName?: string;
    /**
     * Source log topic name.
     */
    sourceTopicName?: string;
    /**
     * Timed SQL analysis task status.
     */
    status?: string;
    /**
     * Timed SQL analysis task ID.
     */
    taskId?: string;
    /**
     * Timed SQL analysis task name.
     */
    taskName?: string;
    /**
     * Source log topic ID.
     */
    topicId?: string;
}

/**
 * A collection of values returned by ScheduleSqlTasks.
 */
export interface ScheduleSqlTasksResult {
    readonly iamProjectName?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    readonly projectId?: string;
    readonly projectName?: string;
    /**
     * The name of the source log topic where the original log for timed SQL analysis is located.
     */
    readonly sourceTopicName?: string;
    /**
     * Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
     */
    readonly status?: string;
    /**
     * Timed SQL analysis task ID.
     */
    readonly taskId?: string;
    /**
     * Timed SQL analysis task name.
     */
    readonly taskName?: string;
    /**
     * The List of timed SQL analysis tasks.
     */
    readonly tasks: outputs.tls.ScheduleSqlTasksTask[];
    readonly topicId?: string;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of tls schedule sql tasks
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.tls.getScheduleSqlTasks({});
 * ```
 */
/** @deprecated volcengine.tls.ScheduleSqlTasks has been deprecated in favor of volcengine.tls.getScheduleSqlTasks */
export function scheduleSqlTasksOutput(args?: ScheduleSqlTasksOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ScheduleSqlTasksResult> {
    return pulumi.output(args).apply((a: any) => scheduleSqlTasks(a, opts))
}

/**
 * A collection of arguments for invoking ScheduleSqlTasks.
 */
export interface ScheduleSqlTasksOutputArgs {
    /**
     * IAM log project name.
     */
    iamProjectName?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The log project ID to which the source log topic belongs.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The name of the log item to which the source log topic belongs.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Source log topic name.
     */
    sourceTopicName?: pulumi.Input<string>;
    /**
     * Timed SQL analysis task status.
     */
    status?: pulumi.Input<string>;
    /**
     * Timed SQL analysis task ID.
     */
    taskId?: pulumi.Input<string>;
    /**
     * Timed SQL analysis task name.
     */
    taskName?: pulumi.Input<string>;
    /**
     * Source log topic ID.
     */
    topicId?: pulumi.Input<string>;
}
