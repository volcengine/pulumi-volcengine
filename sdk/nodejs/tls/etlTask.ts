// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage tls etl task
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.tls.EtlTask("foo", {
 *     description: "for-tf-test",
 *     dslType: "NORMAL",
 *     enable: true,
 *     fromTime: 1750649545,
 *     script: "",
 *     sourceTopicId: "8ba48bd7-2493-4300-b1d0-cb7xxxxxxx",
 *     targetResources: [
 *         {
 *             alias: "tf-test-1",
 *             topicId: "b966e41a-d6a6-4999-bd75-39962xxxxxx",
 *         },
 *         {
 *             alias: "tf-test-2",
 *             topicId: "0ed72ac8-9531-4967-b216-ac3xxxxx",
 *         },
 *     ],
 *     taskType: "Resident",
 *     toTime: 1750735958,
 * });
 * ```
 *
 * ## Import
 *
 * EtlTask can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:tls/etlTask:EtlTask default resource_id
 * ```
 */
export class EtlTask extends pulumi.CustomResource {
    /**
     * Get an existing EtlTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EtlTaskState, opts?: pulumi.CustomResourceOptions): EtlTask {
        return new EtlTask(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:tls/etlTask:EtlTask';

    /**
     * Returns true if the given object is an instance of EtlTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EtlTask {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EtlTask.__pulumiType;
    }

    /**
     * A simple description of the data processing task.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    public readonly dslType!: pulumi.Output<string>;
    /**
     * Whether to enable the data processing task.
     */
    public readonly enable!: pulumi.Output<boolean>;
    /**
     * The start time of the data to be processed.
     */
    public readonly fromTime!: pulumi.Output<number | undefined>;
    /**
     * The name of the processing task.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Processing rules.
     */
    public readonly script!: pulumi.Output<string>;
    /**
     * The log topic where the log to be processed is located.
     */
    public readonly sourceTopicId!: pulumi.Output<string>;
    /**
     * Output the relevant information of the target.
     */
    public readonly targetResources!: pulumi.Output<outputs.tls.EtlTaskTargetResource[]>;
    /**
     * The task type is fixed as Resident.
     */
    public readonly taskType!: pulumi.Output<string>;
    /**
     * The end time of the data to be processed.
     */
    public readonly toTime!: pulumi.Output<number | undefined>;

    /**
     * Create a EtlTask resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EtlTaskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EtlTaskArgs | EtlTaskState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EtlTaskState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dslType"] = state ? state.dslType : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["fromTime"] = state ? state.fromTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["script"] = state ? state.script : undefined;
            resourceInputs["sourceTopicId"] = state ? state.sourceTopicId : undefined;
            resourceInputs["targetResources"] = state ? state.targetResources : undefined;
            resourceInputs["taskType"] = state ? state.taskType : undefined;
            resourceInputs["toTime"] = state ? state.toTime : undefined;
        } else {
            const args = argsOrState as EtlTaskArgs | undefined;
            if ((!args || args.dslType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dslType'");
            }
            if ((!args || args.enable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enable'");
            }
            if ((!args || args.script === undefined) && !opts.urn) {
                throw new Error("Missing required property 'script'");
            }
            if ((!args || args.sourceTopicId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceTopicId'");
            }
            if ((!args || args.targetResources === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetResources'");
            }
            if ((!args || args.taskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskType'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dslType"] = args ? args.dslType : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["fromTime"] = args ? args.fromTime : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["script"] = args ? args.script : undefined;
            resourceInputs["sourceTopicId"] = args ? args.sourceTopicId : undefined;
            resourceInputs["targetResources"] = args ? args.targetResources : undefined;
            resourceInputs["taskType"] = args ? args.taskType : undefined;
            resourceInputs["toTime"] = args ? args.toTime : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EtlTask.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EtlTask resources.
 */
export interface EtlTaskState {
    /**
     * A simple description of the data processing task.
     */
    description?: pulumi.Input<string>;
    /**
     * DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    dslType?: pulumi.Input<string>;
    /**
     * Whether to enable the data processing task.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The start time of the data to be processed.
     */
    fromTime?: pulumi.Input<number>;
    /**
     * The name of the processing task.
     */
    name?: pulumi.Input<string>;
    /**
     * Processing rules.
     */
    script?: pulumi.Input<string>;
    /**
     * The log topic where the log to be processed is located.
     */
    sourceTopicId?: pulumi.Input<string>;
    /**
     * Output the relevant information of the target.
     */
    targetResources?: pulumi.Input<pulumi.Input<inputs.tls.EtlTaskTargetResource>[]>;
    /**
     * The task type is fixed as Resident.
     */
    taskType?: pulumi.Input<string>;
    /**
     * The end time of the data to be processed.
     */
    toTime?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a EtlTask resource.
 */
export interface EtlTaskArgs {
    /**
     * A simple description of the data processing task.
     */
    description?: pulumi.Input<string>;
    /**
     * DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    dslType: pulumi.Input<string>;
    /**
     * Whether to enable the data processing task.
     */
    enable: pulumi.Input<boolean>;
    /**
     * The start time of the data to be processed.
     */
    fromTime?: pulumi.Input<number>;
    /**
     * The name of the processing task.
     */
    name?: pulumi.Input<string>;
    /**
     * Processing rules.
     */
    script: pulumi.Input<string>;
    /**
     * The log topic where the log to be processed is located.
     */
    sourceTopicId: pulumi.Input<string>;
    /**
     * Output the relevant information of the target.
     */
    targetResources: pulumi.Input<pulumi.Input<inputs.tls.EtlTaskTargetResource>[]>;
    /**
     * The task type is fixed as Resident.
     */
    taskType: pulumi.Input<string>;
    /**
     * The end time of the data to be processed.
     */
    toTime?: pulumi.Input<number>;
}
