// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage tls topic
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.tls.Topic("foo", {
 *     autoSplit: true,
 *     description: "test",
 *     enableTracking: true,
 *     maxSplitShard: 10,
 *     projectId: "e020c978-4f05-40e1-9167-0113d3ef****",
 *     shardCount: 2,
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 *     timeFormat: "%Y-%m-%dT%H:%M:%S,%f",
 *     timeKey: "request_time",
 *     topicName: "tf-test-topic",
 *     ttl: 10,
 * });
 * ```
 *
 * ## Import
 *
 * Tls Topic can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:tls/topic:Topic default edf051ed-3c46-49ba-9339-bea628fe****
 * ```
 */
export class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicState, opts?: pulumi.CustomResourceOptions): Topic {
        return new Topic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:tls/topic:Topic';

    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Topic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Topic.__pulumiType;
    }

    /**
     * Whether to enable automatic partition splitting function of the tls topic.
     */
    public readonly autoSplit!: pulumi.Output<boolean>;
    /**
     * The create time of the tls topic.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The description of the tls project.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether to enable WebTracking function of the tls topic.
     */
    public readonly enableTracking!: pulumi.Output<boolean>;
    /**
     * The max count of shards in the tls topic.
     */
    public readonly maxSplitShard!: pulumi.Output<number>;
    /**
     * The modify time of the tls topic.
     */
    public /*out*/ readonly modifyTime!: pulumi.Output<string>;
    /**
     * The project id of the tls topic.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The count of shards in the tls topic. Valid value range: 1-10.
     */
    public readonly shardCount!: pulumi.Output<number>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.tls.TopicTag[] | undefined>;
    /**
     * The format of the time field.
     */
    public readonly timeFormat!: pulumi.Output<string>;
    /**
     * The name of the time field.
     */
    public readonly timeKey!: pulumi.Output<string>;
    /**
     * The name of the tls topic.
     */
    public readonly topicName!: pulumi.Output<string>;
    /**
     * The data storage time of the tls topic. Unit: Day. Valid value range: 1-3650.
     */
    public readonly ttl!: pulumi.Output<number>;

    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicArgs | TopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TopicState | undefined;
            resourceInputs["autoSplit"] = state ? state.autoSplit : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableTracking"] = state ? state.enableTracking : undefined;
            resourceInputs["maxSplitShard"] = state ? state.maxSplitShard : undefined;
            resourceInputs["modifyTime"] = state ? state.modifyTime : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["shardCount"] = state ? state.shardCount : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["timeFormat"] = state ? state.timeFormat : undefined;
            resourceInputs["timeKey"] = state ? state.timeKey : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
        } else {
            const args = argsOrState as TopicArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.shardCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'shardCount'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            if ((!args || args.ttl === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ttl'");
            }
            resourceInputs["autoSplit"] = args ? args.autoSplit : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableTracking"] = args ? args.enableTracking : undefined;
            resourceInputs["maxSplitShard"] = args ? args.maxSplitShard : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["shardCount"] = args ? args.shardCount : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["timeFormat"] = args ? args.timeFormat : undefined;
            resourceInputs["timeKey"] = args ? args.timeKey : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["modifyTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Topic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Topic resources.
 */
export interface TopicState {
    /**
     * Whether to enable automatic partition splitting function of the tls topic.
     */
    autoSplit?: pulumi.Input<boolean>;
    /**
     * The create time of the tls topic.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of the tls project.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable WebTracking function of the tls topic.
     */
    enableTracking?: pulumi.Input<boolean>;
    /**
     * The max count of shards in the tls topic.
     */
    maxSplitShard?: pulumi.Input<number>;
    /**
     * The modify time of the tls topic.
     */
    modifyTime?: pulumi.Input<string>;
    /**
     * The project id of the tls topic.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The count of shards in the tls topic. Valid value range: 1-10.
     */
    shardCount?: pulumi.Input<number>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.tls.TopicTag>[]>;
    /**
     * The format of the time field.
     */
    timeFormat?: pulumi.Input<string>;
    /**
     * The name of the time field.
     */
    timeKey?: pulumi.Input<string>;
    /**
     * The name of the tls topic.
     */
    topicName?: pulumi.Input<string>;
    /**
     * The data storage time of the tls topic. Unit: Day. Valid value range: 1-3650.
     */
    ttl?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    /**
     * Whether to enable automatic partition splitting function of the tls topic.
     */
    autoSplit?: pulumi.Input<boolean>;
    /**
     * The description of the tls project.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable WebTracking function of the tls topic.
     */
    enableTracking?: pulumi.Input<boolean>;
    /**
     * The max count of shards in the tls topic.
     */
    maxSplitShard?: pulumi.Input<number>;
    /**
     * The project id of the tls topic.
     */
    projectId: pulumi.Input<string>;
    /**
     * The count of shards in the tls topic. Valid value range: 1-10.
     */
    shardCount: pulumi.Input<number>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.tls.TopicTag>[]>;
    /**
     * The format of the time field.
     */
    timeFormat?: pulumi.Input<string>;
    /**
     * The name of the time field.
     */
    timeKey?: pulumi.Input<string>;
    /**
     * The name of the tls topic.
     */
    topicName: pulumi.Input<string>;
    /**
     * The data storage time of the tls topic. Unit: Day. Valid value range: 1-3650.
     */
    ttl: pulumi.Input<number>;
}
