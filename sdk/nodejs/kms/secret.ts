// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage kms secret
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.kms.Secret("foo", {
 *     description: "tf-test",
 *     secretName: "tf-test1",
 *     secretType: "Generic",
 *     secretValue: "{\"dasdasd\":\"dasdasd\"}",
 * });
 * ```
 *
 * ## Import
 *
 * KmsSecret can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:kms/secret:Secret default resource_id
 * ```
 */
export class Secret extends pulumi.CustomResource {
    /**
     * Get an existing Secret resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecretState, opts?: pulumi.CustomResourceOptions): Secret {
        return new Secret(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:kms/secret:Secret';

    /**
     * Returns true if the given object is an instance of Secret.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Secret {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Secret.__pulumiType;
    }

    /**
     * The rotation state of the secret.
     */
    public readonly automaticRotation!: pulumi.Output<boolean | undefined>;
    /**
     * The date when the secret was created.
     */
    public /*out*/ readonly creationDate!: pulumi.Output<number>;
    /**
     * The description of the secret.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The TRN of the KMS key used to encrypt the secret value.
     */
    public readonly encryptionKey!: pulumi.Output<string>;
    /**
     * The extended configurations of the secret.
     */
    public readonly extendedConfig!: pulumi.Output<string>;
    /**
     * The last time the secret was rotated.
     */
    public /*out*/ readonly lastRotationTime!: pulumi.Output<string>;
    /**
     * Indicates whether the secret is hosted.
     */
    public /*out*/ readonly managed!: pulumi.Output<boolean>;
    /**
     * The project name of the secret.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The interval at which automatic rotation is performed.
     */
    public readonly rotationInterval!: pulumi.Output<string>;
    /**
     * Rotation interval second.
     */
    public /*out*/ readonly rotationIntervalSecond!: pulumi.Output<number>;
    /**
     * The rotation state of the secret.
     */
    public /*out*/ readonly rotationState!: pulumi.Output<string>;
    /**
     * The time when the secret will be deleted.
     */
    public /*out*/ readonly scheduleDeleteTime!: pulumi.Output<string>;
    /**
     * The next time the secret will be rotated.
     */
    public /*out*/ readonly scheduleRotationTime!: pulumi.Output<string>;
    /**
     * The name of the secret.
     */
    public readonly secretName!: pulumi.Output<string>;
    /**
     * The type of the secret.
     */
    public readonly secretType!: pulumi.Output<string>;
    /**
     * The value of the secret.
     */
    public readonly secretValue!: pulumi.Output<string>;
    /**
     * The state of secret.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The information about the tenant resource name (TRN).
     */
    public /*out*/ readonly trn!: pulumi.Output<string>;
    /**
     * The tenant ID of the secret.
     */
    public /*out*/ readonly uid!: pulumi.Output<string>;
    /**
     * The date when the secret was updated.
     */
    public /*out*/ readonly updateDate!: pulumi.Output<number>;
    /**
     * The ID of secret.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;

    /**
     * Create a Secret resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecretArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecretArgs | SecretState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecretState | undefined;
            resourceInputs["automaticRotation"] = state ? state.automaticRotation : undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptionKey"] = state ? state.encryptionKey : undefined;
            resourceInputs["extendedConfig"] = state ? state.extendedConfig : undefined;
            resourceInputs["lastRotationTime"] = state ? state.lastRotationTime : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["rotationInterval"] = state ? state.rotationInterval : undefined;
            resourceInputs["rotationIntervalSecond"] = state ? state.rotationIntervalSecond : undefined;
            resourceInputs["rotationState"] = state ? state.rotationState : undefined;
            resourceInputs["scheduleDeleteTime"] = state ? state.scheduleDeleteTime : undefined;
            resourceInputs["scheduleRotationTime"] = state ? state.scheduleRotationTime : undefined;
            resourceInputs["secretName"] = state ? state.secretName : undefined;
            resourceInputs["secretType"] = state ? state.secretType : undefined;
            resourceInputs["secretValue"] = state ? state.secretValue : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["trn"] = state ? state.trn : undefined;
            resourceInputs["uid"] = state ? state.uid : undefined;
            resourceInputs["updateDate"] = state ? state.updateDate : undefined;
            resourceInputs["uuid"] = state ? state.uuid : undefined;
        } else {
            const args = argsOrState as SecretArgs | undefined;
            if ((!args || args.secretName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretName'");
            }
            if ((!args || args.secretType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretType'");
            }
            if ((!args || args.secretValue === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretValue'");
            }
            resourceInputs["automaticRotation"] = args ? args.automaticRotation : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["encryptionKey"] = args ? args.encryptionKey : undefined;
            resourceInputs["extendedConfig"] = args ? args.extendedConfig : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["rotationInterval"] = args ? args.rotationInterval : undefined;
            resourceInputs["secretName"] = args ? args.secretName : undefined;
            resourceInputs["secretType"] = args ? args.secretType : undefined;
            resourceInputs["secretValue"] = args ? args.secretValue : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["lastRotationTime"] = undefined /*out*/;
            resourceInputs["managed"] = undefined /*out*/;
            resourceInputs["rotationIntervalSecond"] = undefined /*out*/;
            resourceInputs["rotationState"] = undefined /*out*/;
            resourceInputs["scheduleDeleteTime"] = undefined /*out*/;
            resourceInputs["scheduleRotationTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["trn"] = undefined /*out*/;
            resourceInputs["uid"] = undefined /*out*/;
            resourceInputs["updateDate"] = undefined /*out*/;
            resourceInputs["uuid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Secret.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Secret resources.
 */
export interface SecretState {
    /**
     * The rotation state of the secret.
     */
    automaticRotation?: pulumi.Input<boolean>;
    /**
     * The date when the secret was created.
     */
    creationDate?: pulumi.Input<number>;
    /**
     * The description of the secret.
     */
    description?: pulumi.Input<string>;
    /**
     * The TRN of the KMS key used to encrypt the secret value.
     */
    encryptionKey?: pulumi.Input<string>;
    /**
     * The extended configurations of the secret.
     */
    extendedConfig?: pulumi.Input<string>;
    /**
     * The last time the secret was rotated.
     */
    lastRotationTime?: pulumi.Input<string>;
    /**
     * Indicates whether the secret is hosted.
     */
    managed?: pulumi.Input<boolean>;
    /**
     * The project name of the secret.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The interval at which automatic rotation is performed.
     */
    rotationInterval?: pulumi.Input<string>;
    /**
     * Rotation interval second.
     */
    rotationIntervalSecond?: pulumi.Input<number>;
    /**
     * The rotation state of the secret.
     */
    rotationState?: pulumi.Input<string>;
    /**
     * The time when the secret will be deleted.
     */
    scheduleDeleteTime?: pulumi.Input<string>;
    /**
     * The next time the secret will be rotated.
     */
    scheduleRotationTime?: pulumi.Input<string>;
    /**
     * The name of the secret.
     */
    secretName?: pulumi.Input<string>;
    /**
     * The type of the secret.
     */
    secretType?: pulumi.Input<string>;
    /**
     * The value of the secret.
     */
    secretValue?: pulumi.Input<string>;
    /**
     * The state of secret.
     */
    state?: pulumi.Input<string>;
    /**
     * The information about the tenant resource name (TRN).
     */
    trn?: pulumi.Input<string>;
    /**
     * The tenant ID of the secret.
     */
    uid?: pulumi.Input<string>;
    /**
     * The date when the secret was updated.
     */
    updateDate?: pulumi.Input<number>;
    /**
     * The ID of secret.
     */
    uuid?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Secret resource.
 */
export interface SecretArgs {
    /**
     * The rotation state of the secret.
     */
    automaticRotation?: pulumi.Input<boolean>;
    /**
     * The description of the secret.
     */
    description?: pulumi.Input<string>;
    /**
     * The TRN of the KMS key used to encrypt the secret value.
     */
    encryptionKey?: pulumi.Input<string>;
    /**
     * The extended configurations of the secret.
     */
    extendedConfig?: pulumi.Input<string>;
    /**
     * The project name of the secret.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The interval at which automatic rotation is performed.
     */
    rotationInterval?: pulumi.Input<string>;
    /**
     * The name of the secret.
     */
    secretName: pulumi.Input<string>;
    /**
     * The type of the secret.
     */
    secretType: pulumi.Input<string>;
    /**
     * The value of the secret.
     */
    secretValue: pulumi.Input<string>;
}
