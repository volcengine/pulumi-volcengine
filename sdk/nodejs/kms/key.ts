// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage kms key
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooKeyring = new volcengine.kms.Keyring("fooKeyring", {
 *     keyringName: "tf-test",
 *     description: "tf-test",
 *     projectName: "default",
 * });
 * const fooKey = new volcengine.kms.Key("fooKey", {
 *     keyringName: fooKeyring.keyringName,
 *     keyName: "mrk-tf-key-mod",
 *     description: "tf test key-mod",
 *     tags: [{
 *         key: "tfkey3",
 *         value: "tfvalue3",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * KmsKey can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:kms/key:Key default resource_id
 * ```
 */
export class Key extends pulumi.CustomResource {
    /**
     * Get an existing Key resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyState, opts?: pulumi.CustomResourceOptions): Key {
        return new Key(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:kms/key:Key';

    /**
     * Returns true if the given object is an instance of Key.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Key {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Key.__pulumiType;
    }

    /**
     * The date when the keyring was created.
     */
    public /*out*/ readonly creationDate!: pulumi.Output<number>;
    /**
     * The description of the key.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The time when the key material will expire.
     */
    public /*out*/ readonly keyMaterialExpireTime!: pulumi.Output<string>;
    /**
     * The name of the CMK.
     */
    public readonly keyName!: pulumi.Output<string>;
    /**
     * The type of the keys.
     */
    public readonly keySpec!: pulumi.Output<string>;
    /**
     * The usage of the key.
     */
    public readonly keyUsage!: pulumi.Output<string>;
    /**
     * The name of the keyring.
     */
    public readonly keyringName!: pulumi.Output<string>;
    /**
     * The last time the key was rotated.
     */
    public /*out*/ readonly lastRotationTime!: pulumi.Output<string>;
    /**
     * Whether it is the master key of the Multi-region type.
     */
    public readonly multiRegion!: pulumi.Output<boolean>;
    /**
     * The configuration of Multi-region key.
     */
    public /*out*/ readonly multiRegionConfiguration!: pulumi.Output<outputs.kms.KeyMultiRegionConfiguration>;
    /**
     * The origin of the key.
     */
    public readonly origin!: pulumi.Output<string>;
    /**
     * The pre-deletion cycle of the key.
     */
    public readonly pendingWindowInDays!: pulumi.Output<number | undefined>;
    /**
     * The protection level of the key.
     */
    public readonly protectionLevel!: pulumi.Output<string>;
    /**
     * The rotation state of the key.
     */
    public readonly rotateState!: pulumi.Output<string | undefined>;
    /**
     * The rotation configuration of the key.
     */
    public /*out*/ readonly rotationState!: pulumi.Output<string>;
    /**
     * The time when the key will be deleted.
     */
    public /*out*/ readonly scheduleDeleteTime!: pulumi.Output<string>;
    /**
     * The next time the key will be rotated.
     */
    public /*out*/ readonly scheduleRotationTime!: pulumi.Output<string>;
    /**
     * The state of the key.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.kms.KeyTag[] | undefined>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly trn!: pulumi.Output<string>;
    /**
     * The date when the keyring was updated.
     */
    public /*out*/ readonly updateDate!: pulumi.Output<number>;

    /**
     * Create a Key resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyArgs | KeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyState | undefined;
            resourceInputs["creationDate"] = state ? state.creationDate : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["keyMaterialExpireTime"] = state ? state.keyMaterialExpireTime : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["keySpec"] = state ? state.keySpec : undefined;
            resourceInputs["keyUsage"] = state ? state.keyUsage : undefined;
            resourceInputs["keyringName"] = state ? state.keyringName : undefined;
            resourceInputs["lastRotationTime"] = state ? state.lastRotationTime : undefined;
            resourceInputs["multiRegion"] = state ? state.multiRegion : undefined;
            resourceInputs["multiRegionConfiguration"] = state ? state.multiRegionConfiguration : undefined;
            resourceInputs["origin"] = state ? state.origin : undefined;
            resourceInputs["pendingWindowInDays"] = state ? state.pendingWindowInDays : undefined;
            resourceInputs["protectionLevel"] = state ? state.protectionLevel : undefined;
            resourceInputs["rotateState"] = state ? state.rotateState : undefined;
            resourceInputs["rotationState"] = state ? state.rotationState : undefined;
            resourceInputs["scheduleDeleteTime"] = state ? state.scheduleDeleteTime : undefined;
            resourceInputs["scheduleRotationTime"] = state ? state.scheduleRotationTime : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trn"] = state ? state.trn : undefined;
            resourceInputs["updateDate"] = state ? state.updateDate : undefined;
        } else {
            const args = argsOrState as KeyArgs | undefined;
            if ((!args || args.keyName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyName'");
            }
            if ((!args || args.keyringName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyringName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["keySpec"] = args ? args.keySpec : undefined;
            resourceInputs["keyUsage"] = args ? args.keyUsage : undefined;
            resourceInputs["keyringName"] = args ? args.keyringName : undefined;
            resourceInputs["multiRegion"] = args ? args.multiRegion : undefined;
            resourceInputs["origin"] = args ? args.origin : undefined;
            resourceInputs["pendingWindowInDays"] = args ? args.pendingWindowInDays : undefined;
            resourceInputs["protectionLevel"] = args ? args.protectionLevel : undefined;
            resourceInputs["rotateState"] = args ? args.rotateState : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["creationDate"] = undefined /*out*/;
            resourceInputs["keyMaterialExpireTime"] = undefined /*out*/;
            resourceInputs["lastRotationTime"] = undefined /*out*/;
            resourceInputs["multiRegionConfiguration"] = undefined /*out*/;
            resourceInputs["rotationState"] = undefined /*out*/;
            resourceInputs["scheduleDeleteTime"] = undefined /*out*/;
            resourceInputs["scheduleRotationTime"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
            resourceInputs["trn"] = undefined /*out*/;
            resourceInputs["updateDate"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Key.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Key resources.
 */
export interface KeyState {
    /**
     * The date when the keyring was created.
     */
    creationDate?: pulumi.Input<number>;
    /**
     * The description of the key.
     */
    description?: pulumi.Input<string>;
    /**
     * The time when the key material will expire.
     */
    keyMaterialExpireTime?: pulumi.Input<string>;
    /**
     * The name of the CMK.
     */
    keyName?: pulumi.Input<string>;
    /**
     * The type of the keys.
     */
    keySpec?: pulumi.Input<string>;
    /**
     * The usage of the key.
     */
    keyUsage?: pulumi.Input<string>;
    /**
     * The name of the keyring.
     */
    keyringName?: pulumi.Input<string>;
    /**
     * The last time the key was rotated.
     */
    lastRotationTime?: pulumi.Input<string>;
    /**
     * Whether it is the master key of the Multi-region type.
     */
    multiRegion?: pulumi.Input<boolean>;
    /**
     * The configuration of Multi-region key.
     */
    multiRegionConfiguration?: pulumi.Input<inputs.kms.KeyMultiRegionConfiguration>;
    /**
     * The origin of the key.
     */
    origin?: pulumi.Input<string>;
    /**
     * The pre-deletion cycle of the key.
     */
    pendingWindowInDays?: pulumi.Input<number>;
    /**
     * The protection level of the key.
     */
    protectionLevel?: pulumi.Input<string>;
    /**
     * The rotation state of the key.
     */
    rotateState?: pulumi.Input<string>;
    /**
     * The rotation configuration of the key.
     */
    rotationState?: pulumi.Input<string>;
    /**
     * The time when the key will be deleted.
     */
    scheduleDeleteTime?: pulumi.Input<string>;
    /**
     * The next time the key will be rotated.
     */
    scheduleRotationTime?: pulumi.Input<string>;
    /**
     * The state of the key.
     */
    state?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.kms.KeyTag>[]>;
    /**
     * The name of the resource.
     */
    trn?: pulumi.Input<string>;
    /**
     * The date when the keyring was updated.
     */
    updateDate?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Key resource.
 */
export interface KeyArgs {
    /**
     * The description of the key.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the CMK.
     */
    keyName: pulumi.Input<string>;
    /**
     * The type of the keys.
     */
    keySpec?: pulumi.Input<string>;
    /**
     * The usage of the key.
     */
    keyUsage?: pulumi.Input<string>;
    /**
     * The name of the keyring.
     */
    keyringName: pulumi.Input<string>;
    /**
     * Whether it is the master key of the Multi-region type.
     */
    multiRegion?: pulumi.Input<boolean>;
    /**
     * The origin of the key.
     */
    origin?: pulumi.Input<string>;
    /**
     * The pre-deletion cycle of the key.
     */
    pendingWindowInDays?: pulumi.Input<number>;
    /**
     * The protection level of the key.
     */
    protectionLevel?: pulumi.Input<string>;
    /**
     * The rotation state of the key.
     */
    rotateState?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.kms.KeyTag>[]>;
}
