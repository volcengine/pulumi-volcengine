// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage kms key rotation
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.kms.KeyRotation("foo", {keyId: "m_cn-guilin-boe_63c08fe9-42e8-4c10-a09e-8e8e6xxxxxx"});
 * ```
 *
 * ## Import
 *
 * KmsKeyRotation can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:kms/keyRotation:KeyRotation default resource_id
 * ```
 *
 * or
 *
 * ```sh
 * $ pulumi import volcengine:kms/keyRotation:KeyRotation default key_name:keyring_name
 * ```
 */
export class KeyRotation extends pulumi.CustomResource {
    /**
     * Get an existing KeyRotation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyRotationState, opts?: pulumi.CustomResourceOptions): KeyRotation {
        return new KeyRotation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:kms/keyRotation:KeyRotation';

    /**
     * Returns true if the given object is an instance of KeyRotation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyRotation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyRotation.__pulumiType;
    }

    /**
     * The id of the CMK.
     */
    public readonly keyId!: pulumi.Output<string>;
    /**
     * The name of the CMK.
     */
    public readonly keyName!: pulumi.Output<string>;
    /**
     * The name of the keyring.
     */
    public readonly keyringName!: pulumi.Output<string | undefined>;
    /**
     * The state of the key rotation.
     */
    public /*out*/ readonly rotationState!: pulumi.Output<string>;

    /**
     * Create a KeyRotation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KeyRotationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyRotationArgs | KeyRotationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyRotationState | undefined;
            resourceInputs["keyId"] = state ? state.keyId : undefined;
            resourceInputs["keyName"] = state ? state.keyName : undefined;
            resourceInputs["keyringName"] = state ? state.keyringName : undefined;
            resourceInputs["rotationState"] = state ? state.rotationState : undefined;
        } else {
            const args = argsOrState as KeyRotationArgs | undefined;
            resourceInputs["keyId"] = args ? args.keyId : undefined;
            resourceInputs["keyName"] = args ? args.keyName : undefined;
            resourceInputs["keyringName"] = args ? args.keyringName : undefined;
            resourceInputs["rotationState"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyRotation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyRotation resources.
 */
export interface KeyRotationState {
    /**
     * The id of the CMK.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The name of the CMK.
     */
    keyName?: pulumi.Input<string>;
    /**
     * The name of the keyring.
     */
    keyringName?: pulumi.Input<string>;
    /**
     * The state of the key rotation.
     */
    rotationState?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyRotation resource.
 */
export interface KeyRotationArgs {
    /**
     * The id of the CMK.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The name of the CMK.
     */
    keyName?: pulumi.Input<string>;
    /**
     * The name of the keyring.
     */
    keyringName?: pulumi.Input<string>;
}
