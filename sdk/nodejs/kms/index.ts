// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetKeyringsArgs, GetKeyringsResult, GetKeyringsOutputArgs } from "./getKeyrings";
export const getKeyrings: typeof import("./getKeyrings").getKeyrings = null as any;
export const getKeyringsOutput: typeof import("./getKeyrings").getKeyringsOutput = null as any;
utilities.lazyLoad(exports, ["getKeyrings","getKeyringsOutput"], () => require("./getKeyrings"));

export { GetKeysArgs, GetKeysResult, GetKeysOutputArgs } from "./getKeys";
export const getKeys: typeof import("./getKeys").getKeys = null as any;
export const getKeysOutput: typeof import("./getKeys").getKeysOutput = null as any;
utilities.lazyLoad(exports, ["getKeys","getKeysOutput"], () => require("./getKeys"));

export { GetSecretsArgs, GetSecretsResult, GetSecretsOutputArgs } from "./getSecrets";
export const getSecrets: typeof import("./getSecrets").getSecrets = null as any;
export const getSecretsOutput: typeof import("./getSecrets").getSecretsOutput = null as any;
utilities.lazyLoad(exports, ["getSecrets","getSecretsOutput"], () => require("./getSecrets"));

export { KeyArgs, KeyState } from "./key";
export type Key = import("./key").Key;
export const Key: typeof import("./key").Key = null as any;
utilities.lazyLoad(exports, ["Key"], () => require("./key"));

export { KeyArchiveArgs, KeyArchiveState } from "./keyArchive";
export type KeyArchive = import("./keyArchive").KeyArchive;
export const KeyArchive: typeof import("./keyArchive").KeyArchive = null as any;
utilities.lazyLoad(exports, ["KeyArchive"], () => require("./keyArchive"));

export { KeyEnableArgs, KeyEnableState } from "./keyEnable";
export type KeyEnable = import("./keyEnable").KeyEnable;
export const KeyEnable: typeof import("./keyEnable").KeyEnable = null as any;
utilities.lazyLoad(exports, ["KeyEnable"], () => require("./keyEnable"));

export { KeyRotationArgs, KeyRotationState } from "./keyRotation";
export type KeyRotation = import("./keyRotation").KeyRotation;
export const KeyRotation: typeof import("./keyRotation").KeyRotation = null as any;
utilities.lazyLoad(exports, ["KeyRotation"], () => require("./keyRotation"));

export { KeyringArgs, KeyringState } from "./keyring";
export type Keyring = import("./keyring").Keyring;
export const Keyring: typeof import("./keyring").Keyring = null as any;
utilities.lazyLoad(exports, ["Keyring"], () => require("./keyring"));

export { KeyringsArgs, KeyringsResult, KeyringsOutputArgs } from "./keyrings";
export const keyrings: typeof import("./keyrings").keyrings = null as any;
export const keyringsOutput: typeof import("./keyrings").keyringsOutput = null as any;
utilities.lazyLoad(exports, ["keyrings","keyringsOutput"], () => require("./keyrings"));

export { KeysArgs, KeysResult, KeysOutputArgs } from "./keys";
export const keys: typeof import("./keys").keys = null as any;
export const keysOutput: typeof import("./keys").keysOutput = null as any;
utilities.lazyLoad(exports, ["keys","keysOutput"], () => require("./keys"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { SecretsArgs, SecretsResult, SecretsOutputArgs } from "./secrets";
export const secrets: typeof import("./secrets").secrets = null as any;
export const secretsOutput: typeof import("./secrets").secretsOutput = null as any;
utilities.lazyLoad(exports, ["secrets","secretsOutput"], () => require("./secrets"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:kms/key:Key":
                return new Key(name, <any>undefined, { urn })
            case "volcengine:kms/keyArchive:KeyArchive":
                return new KeyArchive(name, <any>undefined, { urn })
            case "volcengine:kms/keyEnable:KeyEnable":
                return new KeyEnable(name, <any>undefined, { urn })
            case "volcengine:kms/keyRotation:KeyRotation":
                return new KeyRotation(name, <any>undefined, { urn })
            case "volcengine:kms/keyring:Keyring":
                return new Keyring(name, <any>undefined, { urn })
            case "volcengine:kms/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "kms/key", _module)
pulumi.runtime.registerResourceModule("volcengine", "kms/keyArchive", _module)
pulumi.runtime.registerResourceModule("volcengine", "kms/keyEnable", _module)
pulumi.runtime.registerResourceModule("volcengine", "kms/keyRotation", _module)
pulumi.runtime.registerResourceModule("volcengine", "kms/keyring", _module)
pulumi.runtime.registerResourceModule("volcengine", "kms/secret", _module)
