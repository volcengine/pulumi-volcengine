// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cloudfs access
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo1 = new volcengine.cloudfs.Access("foo1", {
 *     fsName: "tftest2",
 *     securityGroupId: "sg-rrv1klfg5s00v0x578mx14m",
 *     subnetId: "subnet-13fca1crr5d6o3n6nu46cyb5m",
 *     vpcRouteEnabled: false,
 * });
 * ```
 *
 * ## Import
 *
 * CloudFs Access can be imported using the FsName:AccessId, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:cloudfs/access:Access default tfname:access-**rdgmedx3fow
 * ```
 */
export class Access extends pulumi.CustomResource {
    /**
     * Get an existing Access resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AccessState, opts?: pulumi.CustomResourceOptions): Access {
        return new Access(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cloudfs/access:Access';

    /**
     * Returns true if the given object is an instance of Access.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Access {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Access.__pulumiType;
    }

    /**
     * The account id of access.
     */
    public readonly accessAccountId!: pulumi.Output<number>;
    /**
     * The iam role of access. If the VPC of another account is attached, the other account needs to create a role with CFSCacheAccess permission, and enter the role name as a parameter.
     */
    public readonly accessIamRole!: pulumi.Output<string | undefined>;
    /**
     * The id of access.
     */
    public /*out*/ readonly accessId!: pulumi.Output<string>;
    /**
     * The service name of access.
     */
    public /*out*/ readonly accessServiceName!: pulumi.Output<string>;
    /**
     * The creation time.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The name of file system.
     */
    public readonly fsName!: pulumi.Output<string>;
    /**
     * Whether is default access.
     */
    public /*out*/ readonly isDefault!: pulumi.Output<boolean>;
    /**
     * The id of security group.
     */
    public readonly securityGroupId!: pulumi.Output<string>;
    /**
     * Status of access.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The id of subnet.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The id of vpc.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    /**
     * Whether enable all vpc route.
     */
    public readonly vpcRouteEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a Access resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AccessArgs | AccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AccessState | undefined;
            resourceInputs["accessAccountId"] = state ? state.accessAccountId : undefined;
            resourceInputs["accessIamRole"] = state ? state.accessIamRole : undefined;
            resourceInputs["accessId"] = state ? state.accessId : undefined;
            resourceInputs["accessServiceName"] = state ? state.accessServiceName : undefined;
            resourceInputs["createdTime"] = state ? state.createdTime : undefined;
            resourceInputs["fsName"] = state ? state.fsName : undefined;
            resourceInputs["isDefault"] = state ? state.isDefault : undefined;
            resourceInputs["securityGroupId"] = state ? state.securityGroupId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcRouteEnabled"] = state ? state.vpcRouteEnabled : undefined;
        } else {
            const args = argsOrState as AccessArgs | undefined;
            if ((!args || args.fsName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fsName'");
            }
            if ((!args || args.securityGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityGroupId'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["accessAccountId"] = args ? args.accessAccountId : undefined;
            resourceInputs["accessIamRole"] = args ? args.accessIamRole : undefined;
            resourceInputs["fsName"] = args ? args.fsName : undefined;
            resourceInputs["securityGroupId"] = args ? args.securityGroupId : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["vpcRouteEnabled"] = args ? args.vpcRouteEnabled : undefined;
            resourceInputs["accessId"] = undefined /*out*/;
            resourceInputs["accessServiceName"] = undefined /*out*/;
            resourceInputs["createdTime"] = undefined /*out*/;
            resourceInputs["isDefault"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Access.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Access resources.
 */
export interface AccessState {
    /**
     * The account id of access.
     */
    accessAccountId?: pulumi.Input<number>;
    /**
     * The iam role of access. If the VPC of another account is attached, the other account needs to create a role with CFSCacheAccess permission, and enter the role name as a parameter.
     */
    accessIamRole?: pulumi.Input<string>;
    /**
     * The id of access.
     */
    accessId?: pulumi.Input<string>;
    /**
     * The service name of access.
     */
    accessServiceName?: pulumi.Input<string>;
    /**
     * The creation time.
     */
    createdTime?: pulumi.Input<string>;
    /**
     * The name of file system.
     */
    fsName?: pulumi.Input<string>;
    /**
     * Whether is default access.
     */
    isDefault?: pulumi.Input<boolean>;
    /**
     * The id of security group.
     */
    securityGroupId?: pulumi.Input<string>;
    /**
     * Status of access.
     */
    status?: pulumi.Input<string>;
    /**
     * The id of subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The id of vpc.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Whether enable all vpc route.
     */
    vpcRouteEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Access resource.
 */
export interface AccessArgs {
    /**
     * The account id of access.
     */
    accessAccountId?: pulumi.Input<number>;
    /**
     * The iam role of access. If the VPC of another account is attached, the other account needs to create a role with CFSCacheAccess permission, and enter the role name as a parameter.
     */
    accessIamRole?: pulumi.Input<string>;
    /**
     * The name of file system.
     */
    fsName: pulumi.Input<string>;
    /**
     * The id of security group.
     */
    securityGroupId: pulumi.Input<string>;
    /**
     * The id of subnet.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Whether enable all vpc route.
     */
    vpcRouteEnabled?: pulumi.Input<boolean>;
}
