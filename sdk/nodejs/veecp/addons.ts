// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of veecp addons
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooAddon = new volcengine.veecp.Addon("fooAddon", {
 *     clusterId: "ccvd7mte6t101fno98u60",
 *     version: "1.8.6-edge.4",
 *     deployNodeType: "Node",
 *     deployMode: "Unmanaged",
 * });
 * const fooAddons = volcengine.veecp.getAddonsOutput({
 *     name: fooAddon.name,
 * });
 * ```
 */
/** @deprecated volcengine.veecp.Addons has been deprecated in favor of volcengine.veecp.getAddons */
export function addons(args?: AddonsArgs, opts?: pulumi.InvokeOptions): Promise<AddonsResult> {
    pulumi.log.warn("addons is deprecated: volcengine.veecp.Addons has been deprecated in favor of volcengine.veecp.getAddons")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:veecp/addons:Addons", {
        "categories": args.categories,
        "deployModes": args.deployModes,
        "deployNodeTypes": args.deployNodeTypes,
        "kubernetesVersions": args.kubernetesVersions,
        "name": args.name,
        "necessaries": args.necessaries,
        "outputFile": args.outputFile,
        "podNetworkModes": args.podNetworkModes,
    }, opts);
}

/**
 * A collection of arguments for invoking Addons.
 */
export interface AddonsArgs {
    /**
     * The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
     */
    categories?: string[];
    /**
     * The deploy model, the value is `Managed` or `Unmanaged`.
     */
    deployModes?: string[];
    /**
     * The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deployMode is `Unmanaged`.
     */
    deployNodeTypes?: string[];
    /**
     * A list of Kubernetes Versions.
     */
    kubernetesVersions?: string[];
    /**
     * The name of the addon.
     */
    name?: string;
    /**
     * The necessaries of addons, the value is `Required` or `Recommended` or `OnDemand`.
     */
    necessaries?: string[];
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
     */
    podNetworkModes?: string[];
}

/**
 * A collection of values returned by Addons.
 */
export interface AddonsResult {
    /**
     * The collection of addons query.
     */
    readonly addons: outputs.veecp.AddonsAddon[];
    readonly categories?: string[];
    readonly deployModes?: string[];
    /**
     * The deploy node types.
     */
    readonly deployNodeTypes?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly kubernetesVersions?: string[];
    /**
     * The name of addon.
     */
    readonly name?: string;
    readonly necessaries?: string[];
    readonly outputFile?: string;
    /**
     * The network modes of pod.
     */
    readonly podNetworkModes?: string[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of veecp addons
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooAddon = new volcengine.veecp.Addon("fooAddon", {
 *     clusterId: "ccvd7mte6t101fno98u60",
 *     version: "1.8.6-edge.4",
 *     deployNodeType: "Node",
 *     deployMode: "Unmanaged",
 * });
 * const fooAddons = volcengine.veecp.getAddonsOutput({
 *     name: fooAddon.name,
 * });
 * ```
 */
/** @deprecated volcengine.veecp.Addons has been deprecated in favor of volcengine.veecp.getAddons */
export function addonsOutput(args?: AddonsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<AddonsResult> {
    return pulumi.output(args).apply((a: any) => addons(a, opts))
}

/**
 * A collection of arguments for invoking Addons.
 */
export interface AddonsOutputArgs {
    /**
     * The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
     */
    categories?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The deploy model, the value is `Managed` or `Unmanaged`.
     */
    deployModes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deployMode is `Unmanaged`.
     */
    deployNodeTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of Kubernetes Versions.
     */
    kubernetesVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the addon.
     */
    name?: pulumi.Input<string>;
    /**
     * The necessaries of addons, the value is `Required` or `Recommended` or `OnDemand`.
     */
    necessaries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
     */
    podNetworkModes?: pulumi.Input<pulumi.Input<string>[]>;
}
