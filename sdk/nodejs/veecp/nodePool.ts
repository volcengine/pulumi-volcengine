// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage veecp node pool
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     vpcId: fooVpc.id,
 *     securityGroupName: "acc-test-security-group2",
 * });
 * const fooCluster = new volcengine.veecp.Cluster("fooCluster", {
 *     description: "created by terraform",
 *     deleteProtectionEnabled: false,
 *     profile: "Edge",
 *     clusterConfig: {
 *         subnetIds: [fooSubnet.id],
 *         apiServerPublicAccessEnabled: true,
 *         apiServerPublicAccessConfig: {
 *             publicAccessNetworkConfig: {
 *                 billingType: "PostPaidByBandwidth",
 *                 bandwidth: 1,
 *             },
 *         },
 *         resourcePublicAccessDefaultEnabled: true,
 *     },
 *     podsConfig: {
 *         podNetworkMode: "Flannel",
 *         flannelConfig: {
 *             podCidrs: ["172.22.224.0/20"],
 *             maxPodsPerNode: 64,
 *         },
 *     },
 *     servicesConfig: {
 *         serviceCidrsv4s: ["172.30.0.0/18"],
 *     },
 * });
 * const fooNodePool = new volcengine.veecp.NodePool("fooNodePool", {
 *     clusterId: fooCluster.id,
 *     clientToken: "FGAHIxa23412FGAIOHioj",
 *     autoScaling: {
 *         enabled: true,
 *         minReplicas: 0,
 *         maxReplicas: 5,
 *         desiredReplicas: 0,
 *         priority: 5,
 *         subnetPolicy: "ZoneBalance",
 *     },
 *     nodeConfig: {
 *         instanceTypeIds: ["ecs.c1ie.xlarge"],
 *         subnetIds: [fooSubnet.id],
 *         imageId: "",
 *         systemVolume: {
 *             type: "ESSD_PL0",
 *             size: 80,
 *         },
 *         dataVolumes: [
 *             {
 *                 type: "ESSD_PL0",
 *                 size: 80,
 *                 mountPoint: "/tf1",
 *             },
 *             {
 *                 type: "ESSD_PL0",
 *                 size: 60,
 *                 mountPoint: "/tf2",
 *             },
 *         ],
 *         initializeScript: "ZWNobyBoZWxsbyB0ZXJyYWZvcm0h",
 *         security: {
 *             login: {
 *                 password: "UHdkMTIzNDU2",
 *             },
 *             securityStrategies: ["Hids"],
 *             securityGroupIds: [fooSecurityGroup.id],
 *         },
 *         additionalContainerStorageEnabled: false,
 *         instanceChargeType: "PostPaid",
 *         namePrefix: "acc-test",
 *         ecsTags: [{
 *             key: "ecs_k1",
 *             value: "ecs_v1",
 *         }],
 *     },
 *     kubernetesConfig: {
 *         labels: [{
 *             key: "label1",
 *             value: "value1",
 *         }],
 *         taints: [{
 *             key: "taint-key/node-type",
 *             value: "taint-value",
 *             effect: "NoSchedule",
 *         }],
 *         cordon: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * VeecpNodePool can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:veecp/nodePool:NodePool default resource_id
 * ```
 */
export class NodePool extends pulumi.CustomResource {
    /**
     * Get an existing NodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NodePoolState, opts?: pulumi.CustomResourceOptions): NodePool {
        return new NodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:veecp/nodePool:NodePool';

    /**
     * Returns true if the given object is an instance of NodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NodePool.__pulumiType;
    }

    /**
     * The node pool elastic scaling configuration information.
     */
    public readonly autoScaling!: pulumi.Output<outputs.veecp.NodePoolAutoScaling>;
    /**
     * The ClientToken of NodePool.
     */
    public readonly clientToken!: pulumi.Output<string | undefined>;
    /**
     * The ClusterId of NodePool.
     */
    public readonly clusterId!: pulumi.Output<string | undefined>;
    /**
     * The list of existing ECS instance ids. Add existing instances with same type of security group under the same cluster VPC to the custom node pool.
     * Note that removing instance ids from the list will only remove the nodes from cluster and not release the ECS instances. But deleting node pool will release the ECS instances in it.
     * It is not recommended to use this field, it is recommended to use `volcengineVeecpNode` resource to add an existing instance to a custom node pool.
     */
    public readonly instanceIds!: pulumi.Output<string[] | undefined>;
    /**
     * Whether to keep instance name when adding an existing instance to a custom node pool, the value is `true` or `false`.
     * This field is valid only when adding new instances to the custom node pool.
     */
    public readonly keepInstanceName!: pulumi.Output<boolean | undefined>;
    /**
     * The KubernetesConfig of NodeConfig.
     */
    public readonly kubernetesConfig!: pulumi.Output<outputs.veecp.NodePoolKubernetesConfig>;
    /**
     * The Name of NodePool.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Config of NodePool.
     */
    public readonly nodeConfig!: pulumi.Output<outputs.veecp.NodePoolNodeConfig>;
    /**
     * The NodeStatistics of NodeConfig.
     */
    public /*out*/ readonly nodeStatistics!: pulumi.Output<outputs.veecp.NodePoolNodeStatistic[]>;

    /**
     * Create a NodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NodePoolArgs | NodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NodePoolState | undefined;
            resourceInputs["autoScaling"] = state ? state.autoScaling : undefined;
            resourceInputs["clientToken"] = state ? state.clientToken : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["instanceIds"] = state ? state.instanceIds : undefined;
            resourceInputs["keepInstanceName"] = state ? state.keepInstanceName : undefined;
            resourceInputs["kubernetesConfig"] = state ? state.kubernetesConfig : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nodeConfig"] = state ? state.nodeConfig : undefined;
            resourceInputs["nodeStatistics"] = state ? state.nodeStatistics : undefined;
        } else {
            const args = argsOrState as NodePoolArgs | undefined;
            if ((!args || args.kubernetesConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubernetesConfig'");
            }
            if ((!args || args.nodeConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeConfig'");
            }
            resourceInputs["autoScaling"] = args ? args.autoScaling : undefined;
            resourceInputs["clientToken"] = args ? args.clientToken : undefined;
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["instanceIds"] = args ? args.instanceIds : undefined;
            resourceInputs["keepInstanceName"] = args ? args.keepInstanceName : undefined;
            resourceInputs["kubernetesConfig"] = args ? args.kubernetesConfig : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nodeConfig"] = args ? args.nodeConfig : undefined;
            resourceInputs["nodeStatistics"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NodePool resources.
 */
export interface NodePoolState {
    /**
     * The node pool elastic scaling configuration information.
     */
    autoScaling?: pulumi.Input<inputs.veecp.NodePoolAutoScaling>;
    /**
     * The ClientToken of NodePool.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * The ClusterId of NodePool.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The list of existing ECS instance ids. Add existing instances with same type of security group under the same cluster VPC to the custom node pool.
     * Note that removing instance ids from the list will only remove the nodes from cluster and not release the ECS instances. But deleting node pool will release the ECS instances in it.
     * It is not recommended to use this field, it is recommended to use `volcengineVeecpNode` resource to add an existing instance to a custom node pool.
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to keep instance name when adding an existing instance to a custom node pool, the value is `true` or `false`.
     * This field is valid only when adding new instances to the custom node pool.
     */
    keepInstanceName?: pulumi.Input<boolean>;
    /**
     * The KubernetesConfig of NodeConfig.
     */
    kubernetesConfig?: pulumi.Input<inputs.veecp.NodePoolKubernetesConfig>;
    /**
     * The Name of NodePool.
     */
    name?: pulumi.Input<string>;
    /**
     * The Config of NodePool.
     */
    nodeConfig?: pulumi.Input<inputs.veecp.NodePoolNodeConfig>;
    /**
     * The NodeStatistics of NodeConfig.
     */
    nodeStatistics?: pulumi.Input<pulumi.Input<inputs.veecp.NodePoolNodeStatistic>[]>;
}

/**
 * The set of arguments for constructing a NodePool resource.
 */
export interface NodePoolArgs {
    /**
     * The node pool elastic scaling configuration information.
     */
    autoScaling?: pulumi.Input<inputs.veecp.NodePoolAutoScaling>;
    /**
     * The ClientToken of NodePool.
     */
    clientToken?: pulumi.Input<string>;
    /**
     * The ClusterId of NodePool.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The list of existing ECS instance ids. Add existing instances with same type of security group under the same cluster VPC to the custom node pool.
     * Note that removing instance ids from the list will only remove the nodes from cluster and not release the ECS instances. But deleting node pool will release the ECS instances in it.
     * It is not recommended to use this field, it is recommended to use `volcengineVeecpNode` resource to add an existing instance to a custom node pool.
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether to keep instance name when adding an existing instance to a custom node pool, the value is `true` or `false`.
     * This field is valid only when adding new instances to the custom node pool.
     */
    keepInstanceName?: pulumi.Input<boolean>;
    /**
     * The KubernetesConfig of NodeConfig.
     */
    kubernetesConfig: pulumi.Input<inputs.veecp.NodePoolKubernetesConfig>;
    /**
     * The Name of NodePool.
     */
    name?: pulumi.Input<string>;
    /**
     * The Config of NodePool.
     */
    nodeConfig: pulumi.Input<inputs.veecp.NodePoolNodeConfig>;
}
