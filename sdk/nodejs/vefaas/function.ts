// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vefaas function
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vefaas.Function("foo", {
 *     description: "123131231",
 *     exclusiveMode: false,
 *     requestTimeout: 30,
 *     runtime: "golang/v1",
 * });
 * ```
 *
 * ## Import
 *
 * VefaasFunction can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:vefaas/function:Function default resource_id
 * ```
 */
export class Function extends pulumi.CustomResource {
    /**
     * Get an existing Function resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionState, opts?: pulumi.CustomResourceOptions): Function {
        return new Function(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vefaas/function:Function';

    /**
     * Returns true if the given object is an instance of Function.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Function {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Function.__pulumiType;
    }

    /**
     * The size of code package.
     */
    public /*out*/ readonly codeSize!: pulumi.Output<number>;
    /**
     * Maximum code package size.
     */
    public /*out*/ readonly codeSizeLimit!: pulumi.Output<number>;
    /**
     * The custom startup command for the instance.
     */
    public readonly command!: pulumi.Output<string | undefined>;
    /**
     * Function CPU charging policy.
     */
    public readonly cpuStrategy!: pulumi.Output<string | undefined>;
    /**
     * The creation time of the function.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The description of Function.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Function environment variable.
     */
    public readonly envs!: pulumi.Output<outputs.vefaas.FunctionEnv[]>;
    /**
     * Exclusive mode switch.
     */
    public readonly exclusiveMode!: pulumi.Output<boolean>;
    /**
     * Function to initialize timeout configuration.
     */
    public readonly initializerSec!: pulumi.Output<number>;
    /**
     * The last update time of the function.
     */
    public /*out*/ readonly lastUpdateTime!: pulumi.Output<string>;
    /**
     * Maximum concurrency of a single instance.
     */
    public readonly maxConcurrency!: pulumi.Output<number>;
    /**
     * Maximum memory for a single instance.
     */
    public readonly memoryMb!: pulumi.Output<number>;
    /**
     * The name of Function.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The configuration of file storage NAS mount.
     */
    public readonly nasStorage!: pulumi.Output<outputs.vefaas.FunctionNasStorage>;
    /**
     * The owner of Function.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Custom listening port for the instance.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * Request timeout (in seconds).
     */
    public readonly requestTimeout!: pulumi.Output<number>;
    /**
     * The runtime of Function.
     */
    public readonly runtime!: pulumi.Output<string>;
    /**
     * Code source.
     */
    public readonly source!: pulumi.Output<string | undefined>;
    /**
     * Access configuration for the image repository.
     */
    public readonly sourceAccessConfig!: pulumi.Output<outputs.vefaas.FunctionSourceAccessConfig | undefined>;
    /**
     * Maximum code package size.
     */
    public /*out*/ readonly sourceLocation!: pulumi.Output<string>;
    /**
     * Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
     */
    public readonly sourceType!: pulumi.Output<string>;
    /**
     * Function log configuration.
     */
    public readonly tlsConfig!: pulumi.Output<outputs.vefaas.FunctionTlsConfig>;
    /**
     * The configuration of Object Storage TOS mount.
     */
    public readonly tosMountConfig!: pulumi.Output<outputs.vefaas.FunctionTosMountConfig>;
    /**
     * The number of triggers for this Function.
     */
    public /*out*/ readonly triggersCount!: pulumi.Output<number>;
    /**
     * The configuration of VPC.
     */
    public readonly vpcConfig!: pulumi.Output<outputs.vefaas.FunctionVpcConfig>;

    /**
     * Create a Function resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionArgs | FunctionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionState | undefined;
            resourceInputs["codeSize"] = state ? state.codeSize : undefined;
            resourceInputs["codeSizeLimit"] = state ? state.codeSizeLimit : undefined;
            resourceInputs["command"] = state ? state.command : undefined;
            resourceInputs["cpuStrategy"] = state ? state.cpuStrategy : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["envs"] = state ? state.envs : undefined;
            resourceInputs["exclusiveMode"] = state ? state.exclusiveMode : undefined;
            resourceInputs["initializerSec"] = state ? state.initializerSec : undefined;
            resourceInputs["lastUpdateTime"] = state ? state.lastUpdateTime : undefined;
            resourceInputs["maxConcurrency"] = state ? state.maxConcurrency : undefined;
            resourceInputs["memoryMb"] = state ? state.memoryMb : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nasStorage"] = state ? state.nasStorage : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["requestTimeout"] = state ? state.requestTimeout : undefined;
            resourceInputs["runtime"] = state ? state.runtime : undefined;
            resourceInputs["source"] = state ? state.source : undefined;
            resourceInputs["sourceAccessConfig"] = state ? state.sourceAccessConfig : undefined;
            resourceInputs["sourceLocation"] = state ? state.sourceLocation : undefined;
            resourceInputs["sourceType"] = state ? state.sourceType : undefined;
            resourceInputs["tlsConfig"] = state ? state.tlsConfig : undefined;
            resourceInputs["tosMountConfig"] = state ? state.tosMountConfig : undefined;
            resourceInputs["triggersCount"] = state ? state.triggersCount : undefined;
            resourceInputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        } else {
            const args = argsOrState as FunctionArgs | undefined;
            if ((!args || args.runtime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'runtime'");
            }
            resourceInputs["command"] = args ? args.command : undefined;
            resourceInputs["cpuStrategy"] = args ? args.cpuStrategy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["envs"] = args ? args.envs : undefined;
            resourceInputs["exclusiveMode"] = args ? args.exclusiveMode : undefined;
            resourceInputs["initializerSec"] = args ? args.initializerSec : undefined;
            resourceInputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            resourceInputs["memoryMb"] = args ? args.memoryMb : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["nasStorage"] = args ? args.nasStorage : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["requestTimeout"] = args ? args.requestTimeout : undefined;
            resourceInputs["runtime"] = args ? args.runtime : undefined;
            resourceInputs["source"] = args ? args.source : undefined;
            resourceInputs["sourceAccessConfig"] = args ? args.sourceAccessConfig : undefined;
            resourceInputs["sourceType"] = args ? args.sourceType : undefined;
            resourceInputs["tlsConfig"] = args ? args.tlsConfig : undefined;
            resourceInputs["tosMountConfig"] = args ? args.tosMountConfig : undefined;
            resourceInputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            resourceInputs["codeSize"] = undefined /*out*/;
            resourceInputs["codeSizeLimit"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["lastUpdateTime"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
            resourceInputs["sourceLocation"] = undefined /*out*/;
            resourceInputs["triggersCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Function.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Function resources.
 */
export interface FunctionState {
    /**
     * The size of code package.
     */
    codeSize?: pulumi.Input<number>;
    /**
     * Maximum code package size.
     */
    codeSizeLimit?: pulumi.Input<number>;
    /**
     * The custom startup command for the instance.
     */
    command?: pulumi.Input<string>;
    /**
     * Function CPU charging policy.
     */
    cpuStrategy?: pulumi.Input<string>;
    /**
     * The creation time of the function.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The description of Function.
     */
    description?: pulumi.Input<string>;
    /**
     * Function environment variable.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.vefaas.FunctionEnv>[]>;
    /**
     * Exclusive mode switch.
     */
    exclusiveMode?: pulumi.Input<boolean>;
    /**
     * Function to initialize timeout configuration.
     */
    initializerSec?: pulumi.Input<number>;
    /**
     * The last update time of the function.
     */
    lastUpdateTime?: pulumi.Input<string>;
    /**
     * Maximum concurrency of a single instance.
     */
    maxConcurrency?: pulumi.Input<number>;
    /**
     * Maximum memory for a single instance.
     */
    memoryMb?: pulumi.Input<number>;
    /**
     * The name of Function.
     */
    name?: pulumi.Input<string>;
    /**
     * The configuration of file storage NAS mount.
     */
    nasStorage?: pulumi.Input<inputs.vefaas.FunctionNasStorage>;
    /**
     * The owner of Function.
     */
    owner?: pulumi.Input<string>;
    /**
     * Custom listening port for the instance.
     */
    port?: pulumi.Input<number>;
    /**
     * Request timeout (in seconds).
     */
    requestTimeout?: pulumi.Input<number>;
    /**
     * The runtime of Function.
     */
    runtime?: pulumi.Input<string>;
    /**
     * Code source.
     */
    source?: pulumi.Input<string>;
    /**
     * Access configuration for the image repository.
     */
    sourceAccessConfig?: pulumi.Input<inputs.vefaas.FunctionSourceAccessConfig>;
    /**
     * Maximum code package size.
     */
    sourceLocation?: pulumi.Input<string>;
    /**
     * Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
     */
    sourceType?: pulumi.Input<string>;
    /**
     * Function log configuration.
     */
    tlsConfig?: pulumi.Input<inputs.vefaas.FunctionTlsConfig>;
    /**
     * The configuration of Object Storage TOS mount.
     */
    tosMountConfig?: pulumi.Input<inputs.vefaas.FunctionTosMountConfig>;
    /**
     * The number of triggers for this Function.
     */
    triggersCount?: pulumi.Input<number>;
    /**
     * The configuration of VPC.
     */
    vpcConfig?: pulumi.Input<inputs.vefaas.FunctionVpcConfig>;
}

/**
 * The set of arguments for constructing a Function resource.
 */
export interface FunctionArgs {
    /**
     * The custom startup command for the instance.
     */
    command?: pulumi.Input<string>;
    /**
     * Function CPU charging policy.
     */
    cpuStrategy?: pulumi.Input<string>;
    /**
     * The description of Function.
     */
    description?: pulumi.Input<string>;
    /**
     * Function environment variable.
     */
    envs?: pulumi.Input<pulumi.Input<inputs.vefaas.FunctionEnv>[]>;
    /**
     * Exclusive mode switch.
     */
    exclusiveMode?: pulumi.Input<boolean>;
    /**
     * Function to initialize timeout configuration.
     */
    initializerSec?: pulumi.Input<number>;
    /**
     * Maximum concurrency of a single instance.
     */
    maxConcurrency?: pulumi.Input<number>;
    /**
     * Maximum memory for a single instance.
     */
    memoryMb?: pulumi.Input<number>;
    /**
     * The name of Function.
     */
    name?: pulumi.Input<string>;
    /**
     * The configuration of file storage NAS mount.
     */
    nasStorage?: pulumi.Input<inputs.vefaas.FunctionNasStorage>;
    /**
     * Custom listening port for the instance.
     */
    port?: pulumi.Input<number>;
    /**
     * Request timeout (in seconds).
     */
    requestTimeout?: pulumi.Input<number>;
    /**
     * The runtime of Function.
     */
    runtime: pulumi.Input<string>;
    /**
     * Code source.
     */
    source?: pulumi.Input<string>;
    /**
     * Access configuration for the image repository.
     */
    sourceAccessConfig?: pulumi.Input<inputs.vefaas.FunctionSourceAccessConfig>;
    /**
     * Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
     */
    sourceType?: pulumi.Input<string>;
    /**
     * Function log configuration.
     */
    tlsConfig?: pulumi.Input<inputs.vefaas.FunctionTlsConfig>;
    /**
     * The configuration of Object Storage TOS mount.
     */
    tosMountConfig?: pulumi.Input<inputs.vefaas.FunctionTosMountConfig>;
    /**
     * The configuration of VPC.
     */
    vpcConfig?: pulumi.Input<inputs.vefaas.FunctionVpcConfig>;
}
