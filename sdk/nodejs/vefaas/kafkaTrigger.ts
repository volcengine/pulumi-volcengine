// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vefaas kafka trigger
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vefaas.KafkaTrigger("foo", {
 *     functionId: "35ybaxxx",
 *     mqInstanceId: "kafka-cnngmbeq10mcxxxx",
 *     topicName: "topic",
 *     kafkaCredentials: {
 *         password: "Waxxxxxx",
 *         username: "test-1",
 *         mechanism: "PLAIN",
 *     },
 *     batchSize: 100,
 *     description: "modify",
 * });
 * ```
 *
 * ## Import
 *
 * VefaasKafkaTrigger can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:vefaas/kafkaTrigger:KafkaTrigger default resource_id
 * ```
 */
export class KafkaTrigger extends pulumi.CustomResource {
    /**
     * Get an existing KafkaTrigger resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KafkaTriggerState, opts?: pulumi.CustomResourceOptions): KafkaTrigger {
        return new KafkaTrigger(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vefaas/kafkaTrigger:KafkaTrigger';

    /**
     * Returns true if the given object is an instance of KafkaTrigger.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KafkaTrigger {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KafkaTrigger.__pulumiType;
    }

    /**
     * The maximum waiting time for batch consumption of triggers.
     */
    public readonly batchFlushDurationMilliseconds!: pulumi.Output<number>;
    /**
     * The number of messages per batch consumed by the trigger in bulk.
     */
    public readonly batchSize!: pulumi.Output<number>;
    /**
     * The consumer group name of the message queue Kafka instance.
     */
    public /*out*/ readonly consumerGroup!: pulumi.Output<string>;
    /**
     * The creation time of the Kafka trigger.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The description of the Kafka trigger.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether to enable triggers at the same time as creating them.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The ID of Function.
     */
    public readonly functionId!: pulumi.Output<string>;
    /**
     * Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    public readonly kafkaCredentials!: pulumi.Output<outputs.vefaas.KafkaTriggerKafkaCredentials>;
    /**
     * The last update time of the Kafka trigger.
     */
    public /*out*/ readonly lastUpdateTime!: pulumi.Output<string>;
    /**
     * The maximum number of retries when a function has a runtime error.
     */
    public readonly maximumRetryAttempts!: pulumi.Output<number>;
    /**
     * The instance ID of Message queue Kafka.
     */
    public readonly mqInstanceId!: pulumi.Output<string>;
    /**
     * The name of the Kafka trigger.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Specify the location where the messages in the Topic start to be consumed.
     */
    public readonly startingPosition!: pulumi.Output<string>;
    /**
     * The status of Kafka trigger.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The Topic name of the message queue Kafka instance.
     */
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a KafkaTrigger resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KafkaTriggerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KafkaTriggerArgs | KafkaTriggerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KafkaTriggerState | undefined;
            resourceInputs["batchFlushDurationMilliseconds"] = state ? state.batchFlushDurationMilliseconds : undefined;
            resourceInputs["batchSize"] = state ? state.batchSize : undefined;
            resourceInputs["consumerGroup"] = state ? state.consumerGroup : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["functionId"] = state ? state.functionId : undefined;
            resourceInputs["kafkaCredentials"] = state ? state.kafkaCredentials : undefined;
            resourceInputs["lastUpdateTime"] = state ? state.lastUpdateTime : undefined;
            resourceInputs["maximumRetryAttempts"] = state ? state.maximumRetryAttempts : undefined;
            resourceInputs["mqInstanceId"] = state ? state.mqInstanceId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["startingPosition"] = state ? state.startingPosition : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as KafkaTriggerArgs | undefined;
            if ((!args || args.functionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionId'");
            }
            if ((!args || args.kafkaCredentials === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaCredentials'");
            }
            if ((!args || args.mqInstanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mqInstanceId'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["batchFlushDurationMilliseconds"] = args ? args.batchFlushDurationMilliseconds : undefined;
            resourceInputs["batchSize"] = args ? args.batchSize : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["functionId"] = args ? args.functionId : undefined;
            resourceInputs["kafkaCredentials"] = args ? args.kafkaCredentials : undefined;
            resourceInputs["maximumRetryAttempts"] = args ? args.maximumRetryAttempts : undefined;
            resourceInputs["mqInstanceId"] = args ? args.mqInstanceId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["startingPosition"] = args ? args.startingPosition : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
            resourceInputs["consumerGroup"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["lastUpdateTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KafkaTrigger.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KafkaTrigger resources.
 */
export interface KafkaTriggerState {
    /**
     * The maximum waiting time for batch consumption of triggers.
     */
    batchFlushDurationMilliseconds?: pulumi.Input<number>;
    /**
     * The number of messages per batch consumed by the trigger in bulk.
     */
    batchSize?: pulumi.Input<number>;
    /**
     * The consumer group name of the message queue Kafka instance.
     */
    consumerGroup?: pulumi.Input<string>;
    /**
     * The creation time of the Kafka trigger.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The description of the Kafka trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable triggers at the same time as creating them.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of Function.
     */
    functionId?: pulumi.Input<string>;
    /**
     * Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    kafkaCredentials?: pulumi.Input<inputs.vefaas.KafkaTriggerKafkaCredentials>;
    /**
     * The last update time of the Kafka trigger.
     */
    lastUpdateTime?: pulumi.Input<string>;
    /**
     * The maximum number of retries when a function has a runtime error.
     */
    maximumRetryAttempts?: pulumi.Input<number>;
    /**
     * The instance ID of Message queue Kafka.
     */
    mqInstanceId?: pulumi.Input<string>;
    /**
     * The name of the Kafka trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * Specify the location where the messages in the Topic start to be consumed.
     */
    startingPosition?: pulumi.Input<string>;
    /**
     * The status of Kafka trigger.
     */
    status?: pulumi.Input<string>;
    /**
     * The Topic name of the message queue Kafka instance.
     */
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KafkaTrigger resource.
 */
export interface KafkaTriggerArgs {
    /**
     * The maximum waiting time for batch consumption of triggers.
     */
    batchFlushDurationMilliseconds?: pulumi.Input<number>;
    /**
     * The number of messages per batch consumed by the trigger in bulk.
     */
    batchSize?: pulumi.Input<number>;
    /**
     * The description of the Kafka trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable triggers at the same time as creating them.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of Function.
     */
    functionId: pulumi.Input<string>;
    /**
     * Kafka identity authentication. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    kafkaCredentials: pulumi.Input<inputs.vefaas.KafkaTriggerKafkaCredentials>;
    /**
     * The maximum number of retries when a function has a runtime error.
     */
    maximumRetryAttempts?: pulumi.Input<number>;
    /**
     * The instance ID of Message queue Kafka.
     */
    mqInstanceId: pulumi.Input<string>;
    /**
     * The name of the Kafka trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * Specify the location where the messages in the Topic start to be consumed.
     */
    startingPosition?: pulumi.Input<string>;
    /**
     * The Topic name of the message queue Kafka instance.
     */
    topicName: pulumi.Input<string>;
}
