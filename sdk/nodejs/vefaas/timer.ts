// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vefaas timer
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vefaas.Timer("foo", {
 *     crontab: "*&#47;10 * * * *",
 *     functionId: "35ybaxxx",
 * });
 * ```
 *
 * ## Import
 *
 * VefaasTimer can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:vefaas/timer:Timer default FunctionId:Id
 * ```
 */
export class Timer extends pulumi.CustomResource {
    /**
     * Get an existing Timer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TimerState, opts?: pulumi.CustomResourceOptions): Timer {
        return new Timer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vefaas/timer:Timer';

    /**
     * Returns true if the given object is an instance of Timer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Timer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Timer.__pulumiType;
    }

    /**
     * The creation time of the Timer trigger.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * Set the timing trigger time of the Timer trigger.
     */
    public readonly crontab!: pulumi.Output<string>;
    /**
     * The description of the Timer trigger.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether the Timer trigger allows concurrency.
     */
    public readonly enableConcurrency!: pulumi.Output<boolean>;
    /**
     * Whether the Timer trigger is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The ID of Function.
     */
    public readonly functionId!: pulumi.Output<string>;
    /**
     * The last update time of the Timer trigger.
     */
    public /*out*/ readonly lastUpdateTime!: pulumi.Output<string>;
    /**
     * The name of the Timer trigger.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The Timer trigger sends the content payload of the request.
     */
    public readonly payload!: pulumi.Output<string>;
    /**
     * The retry count of the Timer trigger.
     */
    public readonly retries!: pulumi.Output<number>;

    /**
     * Create a Timer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TimerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TimerArgs | TimerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TimerState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["crontab"] = state ? state.crontab : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableConcurrency"] = state ? state.enableConcurrency : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["functionId"] = state ? state.functionId : undefined;
            resourceInputs["lastUpdateTime"] = state ? state.lastUpdateTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["payload"] = state ? state.payload : undefined;
            resourceInputs["retries"] = state ? state.retries : undefined;
        } else {
            const args = argsOrState as TimerArgs | undefined;
            if ((!args || args.crontab === undefined) && !opts.urn) {
                throw new Error("Missing required property 'crontab'");
            }
            if ((!args || args.functionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionId'");
            }
            resourceInputs["crontab"] = args ? args.crontab : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableConcurrency"] = args ? args.enableConcurrency : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["functionId"] = args ? args.functionId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["payload"] = args ? args.payload : undefined;
            resourceInputs["retries"] = args ? args.retries : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["lastUpdateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Timer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Timer resources.
 */
export interface TimerState {
    /**
     * The creation time of the Timer trigger.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * Set the timing trigger time of the Timer trigger.
     */
    crontab?: pulumi.Input<string>;
    /**
     * The description of the Timer trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the Timer trigger allows concurrency.
     */
    enableConcurrency?: pulumi.Input<boolean>;
    /**
     * Whether the Timer trigger is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of Function.
     */
    functionId?: pulumi.Input<string>;
    /**
     * The last update time of the Timer trigger.
     */
    lastUpdateTime?: pulumi.Input<string>;
    /**
     * The name of the Timer trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The Timer trigger sends the content payload of the request.
     */
    payload?: pulumi.Input<string>;
    /**
     * The retry count of the Timer trigger.
     */
    retries?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Timer resource.
 */
export interface TimerArgs {
    /**
     * Set the timing trigger time of the Timer trigger.
     */
    crontab: pulumi.Input<string>;
    /**
     * The description of the Timer trigger.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether the Timer trigger allows concurrency.
     */
    enableConcurrency?: pulumi.Input<boolean>;
    /**
     * Whether the Timer trigger is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The ID of Function.
     */
    functionId: pulumi.Input<string>;
    /**
     * The name of the Timer trigger.
     */
    name?: pulumi.Input<string>;
    /**
     * The Timer trigger sends the content payload of the request.
     */
    payload?: pulumi.Input<string>;
    /**
     * The retry count of the Timer trigger.
     */
    retries?: pulumi.Input<number>;
}
