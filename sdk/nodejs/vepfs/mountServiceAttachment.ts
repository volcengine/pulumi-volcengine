// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vepfs mount service attachment
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooFileSystem = new volcengine.vepfs.FileSystem("fooFileSystem", {
 *     fileSystemName: "acc-test-file-system",
 *     subnetId: fooSubnet.id,
 *     storeType: "Advance_100",
 *     description: "tf-test",
 *     capacity: 12,
 *     project: "default",
 *     enableRestripe: false,
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooMountService = new volcengine.vepfs.MountService("fooMountService", {
 *     mountServiceName: "acc-test-mount-service",
 *     subnetId: fooSubnet.id,
 *     nodeType: "ecs.g1ie.large",
 *     project: "default",
 * });
 * const fooMountServiceAttachment = new volcengine.vepfs.MountServiceAttachment("fooMountServiceAttachment", {
 *     mountServiceId: fooMountService.id,
 *     fileSystemId: fooFileSystem.id,
 * });
 * ```
 *
 * ## Import
 *
 * VepfsMountServiceAttachment can be imported using the mount_service_id:file_system_id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:vepfs/mountServiceAttachment:MountServiceAttachment default mount_service_id:file_system_id
 * ```
 */
export class MountServiceAttachment extends pulumi.CustomResource {
    /**
     * Get an existing MountServiceAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MountServiceAttachmentState, opts?: pulumi.CustomResourceOptions): MountServiceAttachment {
        return new MountServiceAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vepfs/mountServiceAttachment:MountServiceAttachment';

    /**
     * Returns true if the given object is an instance of MountServiceAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MountServiceAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MountServiceAttachment.__pulumiType;
    }

    /**
     * The attach status of the vepfs file system.
     */
    public /*out*/ readonly attachStatus!: pulumi.Output<string>;
    /**
     * The custom mount directory, the default value is file system id.
     */
    public readonly customerPath!: pulumi.Output<string>;
    /**
     * The id of the vepfs file system.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * The id of the mount service.
     */
    public readonly mountServiceId!: pulumi.Output<string>;

    /**
     * Create a MountServiceAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MountServiceAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MountServiceAttachmentArgs | MountServiceAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MountServiceAttachmentState | undefined;
            resourceInputs["attachStatus"] = state ? state.attachStatus : undefined;
            resourceInputs["customerPath"] = state ? state.customerPath : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["mountServiceId"] = state ? state.mountServiceId : undefined;
        } else {
            const args = argsOrState as MountServiceAttachmentArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.mountServiceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mountServiceId'");
            }
            resourceInputs["customerPath"] = args ? args.customerPath : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["mountServiceId"] = args ? args.mountServiceId : undefined;
            resourceInputs["attachStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MountServiceAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MountServiceAttachment resources.
 */
export interface MountServiceAttachmentState {
    /**
     * The attach status of the vepfs file system.
     */
    attachStatus?: pulumi.Input<string>;
    /**
     * The custom mount directory, the default value is file system id.
     */
    customerPath?: pulumi.Input<string>;
    /**
     * The id of the vepfs file system.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * The id of the mount service.
     */
    mountServiceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MountServiceAttachment resource.
 */
export interface MountServiceAttachmentArgs {
    /**
     * The custom mount directory, the default value is file system id.
     */
    customerPath?: pulumi.Input<string>;
    /**
     * The id of the vepfs file system.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * The id of the mount service.
     */
    mountServiceId: pulumi.Input<string>;
}
