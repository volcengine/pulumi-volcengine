// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of vepfs mount services
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooMountService = new volcengine.vepfs.MountService("fooMountService", {
 *     mountServiceName: "acc-test-mount-service",
 *     subnetId: fooSubnet.id,
 *     nodeType: "ecs.g1ie.large",
 *     project: "default",
 * });
 * const fooMountServices = volcengine.vepfs.getMountServicesOutput({
 *     mountServiceId: fooMountService.id,
 * });
 * ```
 */
/** @deprecated volcengine.vepfs.MountServices has been deprecated in favor of volcengine.vepfs.getMountServices */
export function mountServices(args?: MountServicesArgs, opts?: pulumi.InvokeOptions): Promise<MountServicesResult> {
    pulumi.log.warn("mountServices is deprecated: volcengine.vepfs.MountServices has been deprecated in favor of volcengine.vepfs.getMountServices")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vepfs/mountServices:MountServices", {
        "fileSystemId": args.fileSystemId,
        "mountServiceId": args.mountServiceId,
        "mountServiceName": args.mountServiceName,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "statuses": args.statuses,
    }, opts);
}

/**
 * A collection of arguments for invoking MountServices.
 */
export interface MountServicesArgs {
    /**
     * The id of Vepfs File System.
     */
    fileSystemId?: string;
    /**
     * The id of mount service.
     */
    mountServiceId?: string;
    /**
     * The name of mount service. This field support fuzzy query.
     */
    mountServiceName?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The query status list of mount service.
     */
    statuses?: string[];
}

/**
 * A collection of values returned by MountServices.
 */
export interface MountServicesResult {
    /**
     * The id of the vepfs file system.
     */
    readonly fileSystemId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the mount service.
     */
    readonly mountServiceId?: string;
    /**
     * The name of the mount service.
     */
    readonly mountServiceName?: string;
    /**
     * The collection of query.
     */
    readonly mountServices: outputs.vepfs.MountServicesMountService[];
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The status of the mount service.
     */
    readonly statuses?: string[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of vepfs mount services
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooMountService = new volcengine.vepfs.MountService("fooMountService", {
 *     mountServiceName: "acc-test-mount-service",
 *     subnetId: fooSubnet.id,
 *     nodeType: "ecs.g1ie.large",
 *     project: "default",
 * });
 * const fooMountServices = volcengine.vepfs.getMountServicesOutput({
 *     mountServiceId: fooMountService.id,
 * });
 * ```
 */
/** @deprecated volcengine.vepfs.MountServices has been deprecated in favor of volcengine.vepfs.getMountServices */
export function mountServicesOutput(args?: MountServicesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<MountServicesResult> {
    return pulumi.output(args).apply((a: any) => mountServices(a, opts))
}

/**
 * A collection of arguments for invoking MountServices.
 */
export interface MountServicesOutputArgs {
    /**
     * The id of Vepfs File System.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * The id of mount service.
     */
    mountServiceId?: pulumi.Input<string>;
    /**
     * The name of mount service. This field support fuzzy query.
     */
    mountServiceName?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The query status list of mount service.
     */
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
}
