// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vepfs mount service
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooMountService = new volcengine.vepfs.MountService("fooMountService", {
 *     mountServiceName: "acc-test-mount-service",
 *     subnetId: fooSubnet.id,
 *     nodeType: "ecs.g1ie.large",
 *     project: "default",
 * });
 * ```
 *
 * ## Import
 *
 * VepfsMountService can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:vepfs/mountService:MountService default resource_id
 * ```
 */
export class MountService extends pulumi.CustomResource {
    /**
     * Get an existing MountService resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MountServiceState, opts?: pulumi.CustomResourceOptions): MountService {
        return new MountService(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vepfs/mountService:MountService';

    /**
     * Returns true if the given object is an instance of MountService.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MountService {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MountService.__pulumiType;
    }

    /**
     * The account id of the vepfs file system.
     */
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * The attached file system info of the mount service.
     */
    public /*out*/ readonly attachFileSystems!: pulumi.Output<outputs.vepfs.MountServiceAttachFileSystem[]>;
    /**
     * The created time of the mount service.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The name of the mount service.
     */
    public readonly mountServiceName!: pulumi.Output<string>;
    /**
     * The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    public readonly nodeType!: pulumi.Output<string>;
    /**
     * The nodes info of the mount service.
     */
    public /*out*/ readonly nodes!: pulumi.Output<outputs.vepfs.MountServiceNode[]>;
    /**
     * The node type of the mount service.
     */
    public readonly project!: pulumi.Output<string>;
    /**
     * The region id of the mount service.
     */
    public /*out*/ readonly regionId!: pulumi.Output<string>;
    /**
     * The status of the mount service.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The subnet id of the mount service.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * The vpc id of the mount service.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    /**
     * The zone id of the mount service.
     */
    public /*out*/ readonly zoneId!: pulumi.Output<string>;
    /**
     * The zone name of the mount service.
     */
    public /*out*/ readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a MountService resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MountServiceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MountServiceArgs | MountServiceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MountServiceState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["attachFileSystems"] = state ? state.attachFileSystems : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["mountServiceName"] = state ? state.mountServiceName : undefined;
            resourceInputs["nodeType"] = state ? state.nodeType : undefined;
            resourceInputs["nodes"] = state ? state.nodes : undefined;
            resourceInputs["project"] = state ? state.project : undefined;
            resourceInputs["regionId"] = state ? state.regionId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as MountServiceArgs | undefined;
            if ((!args || args.mountServiceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'mountServiceName'");
            }
            if ((!args || args.nodeType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeType'");
            }
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["mountServiceName"] = args ? args.mountServiceName : undefined;
            resourceInputs["nodeType"] = args ? args.nodeType : undefined;
            resourceInputs["project"] = args ? args.project : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["attachFileSystems"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["nodes"] = undefined /*out*/;
            resourceInputs["regionId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
            resourceInputs["zoneId"] = undefined /*out*/;
            resourceInputs["zoneName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MountService.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MountService resources.
 */
export interface MountServiceState {
    /**
     * The account id of the vepfs file system.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The attached file system info of the mount service.
     */
    attachFileSystems?: pulumi.Input<pulumi.Input<inputs.vepfs.MountServiceAttachFileSystem>[]>;
    /**
     * The created time of the mount service.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The name of the mount service.
     */
    mountServiceName?: pulumi.Input<string>;
    /**
     * The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    nodeType?: pulumi.Input<string>;
    /**
     * The nodes info of the mount service.
     */
    nodes?: pulumi.Input<pulumi.Input<inputs.vepfs.MountServiceNode>[]>;
    /**
     * The node type of the mount service.
     */
    project?: pulumi.Input<string>;
    /**
     * The region id of the mount service.
     */
    regionId?: pulumi.Input<string>;
    /**
     * The status of the mount service.
     */
    status?: pulumi.Input<string>;
    /**
     * The subnet id of the mount service.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * The vpc id of the mount service.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The zone id of the mount service.
     */
    zoneId?: pulumi.Input<string>;
    /**
     * The zone name of the mount service.
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MountService resource.
 */
export interface MountServiceArgs {
    /**
     * The name of the mount service.
     */
    mountServiceName: pulumi.Input<string>;
    /**
     * The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    nodeType: pulumi.Input<string>;
    /**
     * The node type of the mount service.
     */
    project?: pulumi.Input<string>;
    /**
     * The subnet id of the mount service.
     */
    subnetId: pulumi.Input<string>;
}
