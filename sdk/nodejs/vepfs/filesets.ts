// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of vepfs filesets
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooFileSystem = new volcengine.vepfs.FileSystem("fooFileSystem", {
 *     fileSystemName: "acc-test-file-system",
 *     subnetId: fooSubnet.id,
 *     storeType: "Advance_100",
 *     description: "tf-test",
 *     capacity: 12,
 *     project: "default",
 *     enableRestripe: false,
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooFileset = new volcengine.vepfs.Fileset("fooFileset", {
 *     fileSystemId: fooFileSystem.id,
 *     filesetName: "acc-test-fileset",
 *     filesetPath: "/tf-test/",
 *     maxIops: 100,
 *     maxBandwidth: 10,
 *     fileLimit: 20,
 *     capacityLimit: 30,
 * });
 * const fooFilesets = volcengine.vepfs.FilesetsOutput({
 *     fileSystemId: fooFileSystem.id,
 *     filesetId: fooFileset.id,
 * });
 * ```
 */
export function filesets(args: FilesetsArgs, opts?: pulumi.InvokeOptions): Promise<FilesetsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vepfs/filesets:Filesets", {
        "fileSystemId": args.fileSystemId,
        "filesetId": args.filesetId,
        "filesetName": args.filesetName,
        "filesetPath": args.filesetPath,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "statuses": args.statuses,
    }, opts);
}

/**
 * A collection of arguments for invoking Filesets.
 */
export interface FilesetsArgs {
    /**
     * The id of Vepfs File System.
     */
    fileSystemId: string;
    /**
     * The id of Vepfs Fileset.
     */
    filesetId?: string;
    /**
     * The name of Vepfs Fileset. This field support fuzzy query.
     */
    filesetName?: string;
    /**
     * The path of Vepfs Fileset. This field support fuzzy query.
     */
    filesetPath?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The query status list of Vepfs Fileset.
     */
    statuses?: string[];
}

/**
 * A collection of values returned by Filesets.
 */
export interface FilesetsResult {
    readonly fileSystemId: string;
    /**
     * The id of the vepfs fileset.
     */
    readonly filesetId?: string;
    /**
     * The name of the vepfs fileset.
     */
    readonly filesetName?: string;
    /**
     * The path of the vepfs fileset.
     */
    readonly filesetPath?: string;
    /**
     * The collection of query.
     */
    readonly filesets: outputs.vepfs.FilesetsFileset[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The status of the vepfs fileset.
     */
    readonly statuses?: string[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of vepfs filesets
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooFileSystem = new volcengine.vepfs.FileSystem("fooFileSystem", {
 *     fileSystemName: "acc-test-file-system",
 *     subnetId: fooSubnet.id,
 *     storeType: "Advance_100",
 *     description: "tf-test",
 *     capacity: 12,
 *     project: "default",
 *     enableRestripe: false,
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooFileset = new volcengine.vepfs.Fileset("fooFileset", {
 *     fileSystemId: fooFileSystem.id,
 *     filesetName: "acc-test-fileset",
 *     filesetPath: "/tf-test/",
 *     maxIops: 100,
 *     maxBandwidth: 10,
 *     fileLimit: 20,
 *     capacityLimit: 30,
 * });
 * const fooFilesets = volcengine.vepfs.FilesetsOutput({
 *     fileSystemId: fooFileSystem.id,
 *     filesetId: fooFileset.id,
 * });
 * ```
 */
export function filesetsOutput(args: FilesetsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<FilesetsResult> {
    return pulumi.output(args).apply((a: any) => filesets(a, opts))
}

/**
 * A collection of arguments for invoking Filesets.
 */
export interface FilesetsOutputArgs {
    /**
     * The id of Vepfs File System.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * The id of Vepfs Fileset.
     */
    filesetId?: pulumi.Input<string>;
    /**
     * The name of Vepfs Fileset. This field support fuzzy query.
     */
    filesetName?: pulumi.Input<string>;
    /**
     * The path of Vepfs Fileset. This field support fuzzy query.
     */
    filesetPath?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The query status list of Vepfs Fileset.
     */
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
}
