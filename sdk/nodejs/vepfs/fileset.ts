// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vepfs fileset
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooFileSystem = new volcengine.vepfs.FileSystem("fooFileSystem", {
 *     fileSystemName: "acc-test-file-system",
 *     subnetId: fooSubnet.id,
 *     storeType: "Advance_100",
 *     description: "tf-test",
 *     capacity: 12,
 *     project: "default",
 *     enableRestripe: false,
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooFileset = new volcengine.vepfs.Fileset("fooFileset", {
 *     fileSystemId: fooFileSystem.id,
 *     filesetName: "acc-test-fileset",
 *     filesetPath: "/tf-test/",
 *     maxIops: 100,
 *     maxBandwidth: 10,
 *     fileLimit: 20,
 *     capacityLimit: 30,
 * });
 * ```
 *
 * ## Import
 *
 * VepfsFileset can be imported using the file_system_id:fileset_id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:vepfs/fileset:Fileset default file_system_id:fileset_id
 * ```
 */
export class Fileset extends pulumi.CustomResource {
    /**
     * Get an existing Fileset resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FilesetState, opts?: pulumi.CustomResourceOptions): Fileset {
        return new Fileset(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vepfs/fileset:Fileset';

    /**
     * Returns true if the given object is an instance of Fileset.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Fileset {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Fileset.__pulumiType;
    }

    /**
     * The capacity limit of the vepfs fileset. Unit: Gib.
     */
    public readonly capacityLimit!: pulumi.Output<number | undefined>;
    /**
     * The used capacity of the vepfs fileset. Unit: GiB.
     */
    public /*out*/ readonly capacityUsed!: pulumi.Output<number>;
    /**
     * The create time of the vepfs fileset.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The file number limit of the vepfs fileset.
     */
    public readonly fileLimit!: pulumi.Output<number | undefined>;
    /**
     * The id of the vepfs file system.
     */
    public readonly fileSystemId!: pulumi.Output<string>;
    /**
     * The used file number of the vepfs fileset.
     */
    public /*out*/ readonly fileUsed!: pulumi.Output<number>;
    /**
     * The name of the vepfs fileset.
     */
    public readonly filesetName!: pulumi.Output<string>;
    /**
     * The path of the vepfs fileset.
     */
    public readonly filesetPath!: pulumi.Output<string>;
    /**
     * The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
     */
    public readonly maxBandwidth!: pulumi.Output<number | undefined>;
    /**
     * The max number of inode in the vepfs fileset.
     */
    public /*out*/ readonly maxInodeNum!: pulumi.Output<number>;
    /**
     * The max IOPS qos limit of the vepfs fileset.
     */
    public readonly maxIops!: pulumi.Output<number | undefined>;
    /**
     * The status of the vepfs fileset.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a Fileset resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FilesetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FilesetArgs | FilesetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FilesetState | undefined;
            resourceInputs["capacityLimit"] = state ? state.capacityLimit : undefined;
            resourceInputs["capacityUsed"] = state ? state.capacityUsed : undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["fileLimit"] = state ? state.fileLimit : undefined;
            resourceInputs["fileSystemId"] = state ? state.fileSystemId : undefined;
            resourceInputs["fileUsed"] = state ? state.fileUsed : undefined;
            resourceInputs["filesetName"] = state ? state.filesetName : undefined;
            resourceInputs["filesetPath"] = state ? state.filesetPath : undefined;
            resourceInputs["maxBandwidth"] = state ? state.maxBandwidth : undefined;
            resourceInputs["maxInodeNum"] = state ? state.maxInodeNum : undefined;
            resourceInputs["maxIops"] = state ? state.maxIops : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as FilesetArgs | undefined;
            if ((!args || args.fileSystemId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fileSystemId'");
            }
            if ((!args || args.filesetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filesetName'");
            }
            if ((!args || args.filesetPath === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filesetPath'");
            }
            resourceInputs["capacityLimit"] = args ? args.capacityLimit : undefined;
            resourceInputs["fileLimit"] = args ? args.fileLimit : undefined;
            resourceInputs["fileSystemId"] = args ? args.fileSystemId : undefined;
            resourceInputs["filesetName"] = args ? args.filesetName : undefined;
            resourceInputs["filesetPath"] = args ? args.filesetPath : undefined;
            resourceInputs["maxBandwidth"] = args ? args.maxBandwidth : undefined;
            resourceInputs["maxIops"] = args ? args.maxIops : undefined;
            resourceInputs["capacityUsed"] = undefined /*out*/;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["fileUsed"] = undefined /*out*/;
            resourceInputs["maxInodeNum"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Fileset.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Fileset resources.
 */
export interface FilesetState {
    /**
     * The capacity limit of the vepfs fileset. Unit: Gib.
     */
    capacityLimit?: pulumi.Input<number>;
    /**
     * The used capacity of the vepfs fileset. Unit: GiB.
     */
    capacityUsed?: pulumi.Input<number>;
    /**
     * The create time of the vepfs fileset.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The file number limit of the vepfs fileset.
     */
    fileLimit?: pulumi.Input<number>;
    /**
     * The id of the vepfs file system.
     */
    fileSystemId?: pulumi.Input<string>;
    /**
     * The used file number of the vepfs fileset.
     */
    fileUsed?: pulumi.Input<number>;
    /**
     * The name of the vepfs fileset.
     */
    filesetName?: pulumi.Input<string>;
    /**
     * The path of the vepfs fileset.
     */
    filesetPath?: pulumi.Input<string>;
    /**
     * The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
     */
    maxBandwidth?: pulumi.Input<number>;
    /**
     * The max number of inode in the vepfs fileset.
     */
    maxInodeNum?: pulumi.Input<number>;
    /**
     * The max IOPS qos limit of the vepfs fileset.
     */
    maxIops?: pulumi.Input<number>;
    /**
     * The status of the vepfs fileset.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Fileset resource.
 */
export interface FilesetArgs {
    /**
     * The capacity limit of the vepfs fileset. Unit: Gib.
     */
    capacityLimit?: pulumi.Input<number>;
    /**
     * The file number limit of the vepfs fileset.
     */
    fileLimit?: pulumi.Input<number>;
    /**
     * The id of the vepfs file system.
     */
    fileSystemId: pulumi.Input<string>;
    /**
     * The name of the vepfs fileset.
     */
    filesetName: pulumi.Input<string>;
    /**
     * The path of the vepfs fileset.
     */
    filesetPath: pulumi.Input<string>;
    /**
     * The max bandwidth qos limit of the vepfs fileset. Unit: MB/s.
     */
    maxBandwidth?: pulumi.Input<number>;
    /**
     * The max IOPS qos limit of the vepfs fileset.
     */
    maxIops?: pulumi.Input<number>;
}
