// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * (Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds parameter template
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.rds.ParameterTemplate("foo", {
 *     templateDesc: "created by terraform",
 *     templateName: "tf-template",
 *     templateParams: [
 *         {
 *             name: "auto_increment_increment",
 *             runningValue: "2",
 *         },
 *         {
 *             name: "slow_query_log",
 *             runningValue: "ON",
 *         },
 *         {
 *             name: "net_retry_count",
 *             runningValue: "33",
 *         },
 *     ],
 *     templateType: "MySQL",
 *     templateTypeVersion: "MySQL_Community_5_7",
 * });
 * ```
 *
 * ## Import
 *
 * RDS Instance can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:rds/parameterTemplate:ParameterTemplate default mysql-sys-80bb93aa14be22d0
 * ```
 */
export class ParameterTemplate extends pulumi.CustomResource {
    /**
     * Get an existing ParameterTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ParameterTemplateState, opts?: pulumi.CustomResourceOptions): ParameterTemplate {
        return new ParameterTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:rds/parameterTemplate:ParameterTemplate';

    /**
     * Returns true if the given object is an instance of ParameterTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ParameterTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ParameterTemplate.__pulumiType;
    }

    /**
     * Parameter template description.
     */
    public readonly templateDesc!: pulumi.Output<string | undefined>;
    /**
     * Parameter template name.
     */
    public readonly templateName!: pulumi.Output<string>;
    /**
     * Template parameters. InstanceParam only needs to pass Name and RunningValue.
     */
    public readonly templateParams!: pulumi.Output<outputs.rds.ParameterTemplateTemplateParam[]>;
    /**
     * Parameter template database type, range of values:
     * MySQL - MySQL database. (Defaults).
     */
    public readonly templateType!: pulumi.Output<string | undefined>;
    /**
     * Parameter template database version, value range:
     * MySQL_Community_5_7 - MySQL 5.7 (default)
     * MySQL_8_0 - MySQL 8.0.
     */
    public readonly templateTypeVersion!: pulumi.Output<string | undefined>;

    /**
     * Create a ParameterTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ParameterTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ParameterTemplateArgs | ParameterTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ParameterTemplateState | undefined;
            resourceInputs["templateDesc"] = state ? state.templateDesc : undefined;
            resourceInputs["templateName"] = state ? state.templateName : undefined;
            resourceInputs["templateParams"] = state ? state.templateParams : undefined;
            resourceInputs["templateType"] = state ? state.templateType : undefined;
            resourceInputs["templateTypeVersion"] = state ? state.templateTypeVersion : undefined;
        } else {
            const args = argsOrState as ParameterTemplateArgs | undefined;
            if ((!args || args.templateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateName'");
            }
            if ((!args || args.templateParams === undefined) && !opts.urn) {
                throw new Error("Missing required property 'templateParams'");
            }
            resourceInputs["templateDesc"] = args ? args.templateDesc : undefined;
            resourceInputs["templateName"] = args ? args.templateName : undefined;
            resourceInputs["templateParams"] = args ? args.templateParams : undefined;
            resourceInputs["templateType"] = args ? args.templateType : undefined;
            resourceInputs["templateTypeVersion"] = args ? args.templateTypeVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ParameterTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ParameterTemplate resources.
 */
export interface ParameterTemplateState {
    /**
     * Parameter template description.
     */
    templateDesc?: pulumi.Input<string>;
    /**
     * Parameter template name.
     */
    templateName?: pulumi.Input<string>;
    /**
     * Template parameters. InstanceParam only needs to pass Name and RunningValue.
     */
    templateParams?: pulumi.Input<pulumi.Input<inputs.rds.ParameterTemplateTemplateParam>[]>;
    /**
     * Parameter template database type, range of values:
     * MySQL - MySQL database. (Defaults).
     */
    templateType?: pulumi.Input<string>;
    /**
     * Parameter template database version, value range:
     * MySQL_Community_5_7 - MySQL 5.7 (default)
     * MySQL_8_0 - MySQL 8.0.
     */
    templateTypeVersion?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ParameterTemplate resource.
 */
export interface ParameterTemplateArgs {
    /**
     * Parameter template description.
     */
    templateDesc?: pulumi.Input<string>;
    /**
     * Parameter template name.
     */
    templateName: pulumi.Input<string>;
    /**
     * Template parameters. InstanceParam only needs to pass Name and RunningValue.
     */
    templateParams: pulumi.Input<pulumi.Input<inputs.rds.ParameterTemplateTemplateParam>[]>;
    /**
     * Parameter template database type, range of values:
     * MySQL - MySQL database. (Defaults).
     */
    templateType?: pulumi.Input<string>;
    /**
     * Parameter template database version, value range:
     * MySQL_Community_5_7 - MySQL 5.7 (default)
     * MySQL_8_0 - MySQL 8.0.
     */
    templateTypeVersion?: pulumi.Input<string>;
}
