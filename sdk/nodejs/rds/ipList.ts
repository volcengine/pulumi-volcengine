// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * (Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds ip list
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.rds.IpList("foo", {
 *     groupName: "foo",
 *     instanceId: "mysql-0fdd3bab2e7c",
 *     ipLists: [
 *         "1.1.1.1",
 *         "2.2.2.2",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * RDSIPList can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:rds/ipList:IpList default mysql-42b38c769c4b:group_name
 * ```
 */
export class IpList extends pulumi.CustomResource {
    /**
     * Get an existing IpList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IpListState, opts?: pulumi.CustomResourceOptions): IpList {
        return new IpList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:rds/ipList:IpList';

    /**
     * Returns true if the given object is an instance of IpList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IpList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IpList.__pulumiType;
    }

    /**
     * The name of the RDS ip list.
     */
    public readonly groupName!: pulumi.Output<string>;
    /**
     * The ID of the RDS instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The list of IP address.
     */
    public readonly ipLists!: pulumi.Output<string[]>;

    /**
     * Create a IpList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IpListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IpListArgs | IpListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IpListState | undefined;
            resourceInputs["groupName"] = state ? state.groupName : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["ipLists"] = state ? state.ipLists : undefined;
        } else {
            const args = argsOrState as IpListArgs | undefined;
            if ((!args || args.groupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupName'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.ipLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipLists'");
            }
            resourceInputs["groupName"] = args ? args.groupName : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["ipLists"] = args ? args.ipLists : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IpList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IpList resources.
 */
export interface IpListState {
    /**
     * The name of the RDS ip list.
     */
    groupName?: pulumi.Input<string>;
    /**
     * The ID of the RDS instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The list of IP address.
     */
    ipLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a IpList resource.
 */
export interface IpListArgs {
    /**
     * The name of the RDS ip list.
     */
    groupName: pulumi.Input<string>;
    /**
     * The ID of the RDS instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The list of IP address.
     */
    ipLists: pulumi.Input<pulumi.Input<string>[]>;
}
