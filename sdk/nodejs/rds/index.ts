// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountPrivilegeArgs, AccountPrivilegeState } from "./accountPrivilege";
export type AccountPrivilege = import("./accountPrivilege").AccountPrivilege;
export const AccountPrivilege: typeof import("./accountPrivilege").AccountPrivilege = null as any;
utilities.lazyLoad(exports, ["AccountPrivilege"], () => require("./accountPrivilege"));

export { AccountsArgs, AccountsResult, AccountsOutputArgs } from "./accounts";
export const accounts: typeof import("./accounts").accounts = null as any;
export const accountsOutput: typeof import("./accounts").accountsOutput = null as any;
utilities.lazyLoad(exports, ["accounts","accountsOutput"], () => require("./accounts"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabasesArgs, DatabasesResult, DatabasesOutputArgs } from "./databases";
export const databases: typeof import("./databases").databases = null as any;
export const databasesOutput: typeof import("./databases").databasesOutput = null as any;
utilities.lazyLoad(exports, ["databases","databasesOutput"], () => require("./databases"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstancesArgs, InstancesResult, InstancesOutputArgs } from "./instances";
export const instances: typeof import("./instances").instances = null as any;
export const instancesOutput: typeof import("./instances").instancesOutput = null as any;
utilities.lazyLoad(exports, ["instances","instancesOutput"], () => require("./instances"));

export { IpListArgs, IpListState } from "./ipList";
export type IpList = import("./ipList").IpList;
export const IpList: typeof import("./ipList").IpList = null as any;
utilities.lazyLoad(exports, ["IpList"], () => require("./ipList"));

export { IpListsArgs, IpListsResult, IpListsOutputArgs } from "./ipLists";
export const ipLists: typeof import("./ipLists").ipLists = null as any;
export const ipListsOutput: typeof import("./ipLists").ipListsOutput = null as any;
utilities.lazyLoad(exports, ["ipLists","ipListsOutput"], () => require("./ipLists"));

export { ParameterTemplateArgs, ParameterTemplateState } from "./parameterTemplate";
export type ParameterTemplate = import("./parameterTemplate").ParameterTemplate;
export const ParameterTemplate: typeof import("./parameterTemplate").ParameterTemplate = null as any;
utilities.lazyLoad(exports, ["ParameterTemplate"], () => require("./parameterTemplate"));

export { ParameterTemplatesArgs, ParameterTemplatesResult, ParameterTemplatesOutputArgs } from "./parameterTemplates";
export const parameterTemplates: typeof import("./parameterTemplates").parameterTemplates = null as any;
export const parameterTemplatesOutput: typeof import("./parameterTemplates").parameterTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["parameterTemplates","parameterTemplatesOutput"], () => require("./parameterTemplates"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:rds/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "volcengine:rds/accountPrivilege:AccountPrivilege":
                return new AccountPrivilege(name, <any>undefined, { urn })
            case "volcengine:rds/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "volcengine:rds/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "volcengine:rds/ipList:IpList":
                return new IpList(name, <any>undefined, { urn })
            case "volcengine:rds/parameterTemplate:ParameterTemplate":
                return new ParameterTemplate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "rds/account", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds/accountPrivilege", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds/database", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds/instance", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds/ipList", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds/parameterTemplate", _module)
