// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of cdn configs
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooCdnCertificate = new volcengine.cdn.CdnCertificate("fooCdnCertificate", {
 *     certificate: "",
 *     privateKey: "",
 *     desc: "tftest",
 *     source: "cdn_cert_hosting",
 * });
 * const fooCdnDomain = new volcengine.cdn.CdnDomain("fooCdnDomain", {
 *     domain: "tftest.byte-test.com",
 *     serviceType: "web",
 *     tags: [
 *         {
 *             key: "tfkey1",
 *             value: "tfvalue1",
 *         },
 *         {
 *             key: "tfkey2",
 *             value: "tfvalue2",
 *         },
 *     ],
 *     domainConfig: pulumi.jsonStringify({
 *         OriginProtocol: "https",
 *         Origin: [{
 *             OriginAction: {
 *                 OriginLines: [{
 *                     Address: "1.1.1.1",
 *                     HttpPort: "80",
 *                     HttpsPort: "443",
 *                     InstanceType: "ip",
 *                     OriginType: "primary",
 *                     PrivateBucketAccess: false,
 *                     Weight: "2",
 *                 }],
 *             },
 *         }],
 *         HTTPS: {
 *             CertInfo: {
 *                 CertId: fooCdnCertificate.id,
 *             },
 *             DisableHttp: false,
 *             HTTP2: true,
 *             Switch: true,
 *             Ocsp: false,
 *             TlsVersion: [
 *                 "tlsv1.1",
 *                 "tlsv1.2",
 *             ],
 *         },
 *     }),
 * });
 * const fooConfigs = volcengine.cdn.getConfigsOutput({
 *     domain: fooCdnDomain.id,
 * });
 * ```
 */
export function getConfigs(args: GetConfigsArgs, opts?: pulumi.InvokeOptions): Promise<GetConfigsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:cdn/getConfigs:getConfigs", {
        "domain": args.domain,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getConfigs.
 */
export interface GetConfigsArgs {
    /**
     * The domain name.
     */
    domain: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
}

/**
 * A collection of values returned by getConfigs.
 */
export interface GetConfigsResult {
    /**
     * The domain name.
     */
    readonly domain: string;
    /**
     * The collection of query.
     */
    readonly domainConfigs: outputs.cdn.GetConfigsDomainConfig[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly outputFile?: string;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of cdn configs
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooCdnCertificate = new volcengine.cdn.CdnCertificate("fooCdnCertificate", {
 *     certificate: "",
 *     privateKey: "",
 *     desc: "tftest",
 *     source: "cdn_cert_hosting",
 * });
 * const fooCdnDomain = new volcengine.cdn.CdnDomain("fooCdnDomain", {
 *     domain: "tftest.byte-test.com",
 *     serviceType: "web",
 *     tags: [
 *         {
 *             key: "tfkey1",
 *             value: "tfvalue1",
 *         },
 *         {
 *             key: "tfkey2",
 *             value: "tfvalue2",
 *         },
 *     ],
 *     domainConfig: pulumi.jsonStringify({
 *         OriginProtocol: "https",
 *         Origin: [{
 *             OriginAction: {
 *                 OriginLines: [{
 *                     Address: "1.1.1.1",
 *                     HttpPort: "80",
 *                     HttpsPort: "443",
 *                     InstanceType: "ip",
 *                     OriginType: "primary",
 *                     PrivateBucketAccess: false,
 *                     Weight: "2",
 *                 }],
 *             },
 *         }],
 *         HTTPS: {
 *             CertInfo: {
 *                 CertId: fooCdnCertificate.id,
 *             },
 *             DisableHttp: false,
 *             HTTP2: true,
 *             Switch: true,
 *             Ocsp: false,
 *             TlsVersion: [
 *                 "tlsv1.1",
 *                 "tlsv1.2",
 *             ],
 *         },
 *     }),
 * });
 * const fooConfigs = volcengine.cdn.getConfigsOutput({
 *     domain: fooCdnDomain.id,
 * });
 * ```
 */
export function getConfigsOutput(args: GetConfigsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetConfigsResult> {
    return pulumi.output(args).apply((a: any) => getConfigs(a, opts))
}

/**
 * A collection of arguments for invoking getConfigs.
 */
export interface GetConfigsOutputArgs {
    /**
     * The domain name.
     */
    domain: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
}
