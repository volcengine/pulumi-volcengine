// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cdn shared config
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.cdn.SharedConfig("foo", {
 *     allowIpAccessRule: {
 *         rules: [
 *             "1.1.1.1",
 *             "2.2.2.0/24",
 *             "3.3.3.3",
 *         ],
 *     },
 *     allowRefererAccessRule: {
 *         commonType: {
 *             rules: [
 *                 "1.1.1.1",
 *                 "2.2.2.0/24",
 *                 "3.3.4.4",
 *             ],
 *         },
 *     },
 *     commonMatchList: {
 *         commonType: {
 *             rules: [
 *                 "1.1.1.1",
 *                 "2.2.2.0/24",
 *             ],
 *         },
 *     },
 *     configName: "tftest",
 *     configType: "allow_referer_access_rule",
 *     denyIpAccessRule: {
 *         rules: [
 *             "1.1.1.1",
 *             "2.2.2.0/24",
 *         ],
 *     },
 *     denyRefererAccessRule: {
 *         commonType: {
 *             rules: [
 *                 "1.1.1.1",
 *                 "2.2.2.0/24",
 *             ],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * CdnSharedConfig can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:cdn/sharedConfig:SharedConfig default resource_id
 * ```
 */
export class SharedConfig extends pulumi.CustomResource {
    /**
     * Get an existing SharedConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SharedConfigState, opts?: pulumi.CustomResourceOptions): SharedConfig {
        return new SharedConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cdn/sharedConfig:SharedConfig';

    /**
     * Returns true if the given object is an instance of SharedConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SharedConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SharedConfig.__pulumiType;
    }

    /**
     * The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
     */
    public readonly allowIpAccessRule!: pulumi.Output<outputs.cdn.SharedConfigAllowIpAccessRule | undefined>;
    /**
     * The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
     */
    public readonly allowRefererAccessRule!: pulumi.Output<outputs.cdn.SharedConfigAllowRefererAccessRule | undefined>;
    /**
     * The configuration for a common list is represented by ConfigType common_match_list.
     */
    public readonly commonMatchList!: pulumi.Output<outputs.cdn.SharedConfigCommonMatchList | undefined>;
    /**
     * The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
     */
    public readonly configName!: pulumi.Output<string>;
    /**
     * The type of the shared config. The type of global configuration. The parameter can have the following values: `denyIpAccessRule`: represents IP blacklist. `allowIpAccessRule`: represents IP whitelist. `denyRefererAccessRule`: represents Referer blacklist. `allowRefererAccessRule`: represents Referer whitelist. `commonMatchList`: represents common list.
     */
    public readonly configType!: pulumi.Output<string>;
    /**
     * The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
     */
    public readonly denyIpAccessRule!: pulumi.Output<outputs.cdn.SharedConfigDenyIpAccessRule | undefined>;
    /**
     * The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
     */
    public readonly denyRefererAccessRule!: pulumi.Output<outputs.cdn.SharedConfigDenyRefererAccessRule | undefined>;
    /**
     * The ProjectName of the cdn shared config.
     */
    public readonly projectName!: pulumi.Output<string>;

    /**
     * Create a SharedConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SharedConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SharedConfigArgs | SharedConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SharedConfigState | undefined;
            resourceInputs["allowIpAccessRule"] = state ? state.allowIpAccessRule : undefined;
            resourceInputs["allowRefererAccessRule"] = state ? state.allowRefererAccessRule : undefined;
            resourceInputs["commonMatchList"] = state ? state.commonMatchList : undefined;
            resourceInputs["configName"] = state ? state.configName : undefined;
            resourceInputs["configType"] = state ? state.configType : undefined;
            resourceInputs["denyIpAccessRule"] = state ? state.denyIpAccessRule : undefined;
            resourceInputs["denyRefererAccessRule"] = state ? state.denyRefererAccessRule : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
        } else {
            const args = argsOrState as SharedConfigArgs | undefined;
            if ((!args || args.configName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configName'");
            }
            if ((!args || args.configType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configType'");
            }
            resourceInputs["allowIpAccessRule"] = args ? args.allowIpAccessRule : undefined;
            resourceInputs["allowRefererAccessRule"] = args ? args.allowRefererAccessRule : undefined;
            resourceInputs["commonMatchList"] = args ? args.commonMatchList : undefined;
            resourceInputs["configName"] = args ? args.configName : undefined;
            resourceInputs["configType"] = args ? args.configType : undefined;
            resourceInputs["denyIpAccessRule"] = args ? args.denyIpAccessRule : undefined;
            resourceInputs["denyRefererAccessRule"] = args ? args.denyRefererAccessRule : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SharedConfig.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SharedConfig resources.
 */
export interface SharedConfigState {
    /**
     * The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
     */
    allowIpAccessRule?: pulumi.Input<inputs.cdn.SharedConfigAllowIpAccessRule>;
    /**
     * The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
     */
    allowRefererAccessRule?: pulumi.Input<inputs.cdn.SharedConfigAllowRefererAccessRule>;
    /**
     * The configuration for a common list is represented by ConfigType common_match_list.
     */
    commonMatchList?: pulumi.Input<inputs.cdn.SharedConfigCommonMatchList>;
    /**
     * The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
     */
    configName?: pulumi.Input<string>;
    /**
     * The type of the shared config. The type of global configuration. The parameter can have the following values: `denyIpAccessRule`: represents IP blacklist. `allowIpAccessRule`: represents IP whitelist. `denyRefererAccessRule`: represents Referer blacklist. `allowRefererAccessRule`: represents Referer whitelist. `commonMatchList`: represents common list.
     */
    configType?: pulumi.Input<string>;
    /**
     * The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
     */
    denyIpAccessRule?: pulumi.Input<inputs.cdn.SharedConfigDenyIpAccessRule>;
    /**
     * The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
     */
    denyRefererAccessRule?: pulumi.Input<inputs.cdn.SharedConfigDenyRefererAccessRule>;
    /**
     * The ProjectName of the cdn shared config.
     */
    projectName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SharedConfig resource.
 */
export interface SharedConfigArgs {
    /**
     * The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
     */
    allowIpAccessRule?: pulumi.Input<inputs.cdn.SharedConfigAllowIpAccessRule>;
    /**
     * The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
     */
    allowRefererAccessRule?: pulumi.Input<inputs.cdn.SharedConfigAllowRefererAccessRule>;
    /**
     * The configuration for a common list is represented by ConfigType common_match_list.
     */
    commonMatchList?: pulumi.Input<inputs.cdn.SharedConfigCommonMatchList>;
    /**
     * The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
     */
    configName: pulumi.Input<string>;
    /**
     * The type of the shared config. The type of global configuration. The parameter can have the following values: `denyIpAccessRule`: represents IP blacklist. `allowIpAccessRule`: represents IP whitelist. `denyRefererAccessRule`: represents Referer blacklist. `allowRefererAccessRule`: represents Referer whitelist. `commonMatchList`: represents common list.
     */
    configType: pulumi.Input<string>;
    /**
     * The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
     */
    denyIpAccessRule?: pulumi.Input<inputs.cdn.SharedConfigDenyIpAccessRule>;
    /**
     * The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
     */
    denyRefererAccessRule?: pulumi.Input<inputs.cdn.SharedConfigDenyRefererAccessRule>;
    /**
     * The ProjectName of the cdn shared config.
     */
    projectName?: pulumi.Input<string>;
}
