// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface ProviderAssumeRole {
    /**
     * The session name to use when making the AssumeRole call.
     */
    assumeRoleSessionName: pulumi.Input<string>;
    /**
     * The TRN of the role to assume.
     */
    assumeRoleTrn: pulumi.Input<string>;
    /**
     * The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
     */
    durationSeconds: pulumi.Input<number>;
    /**
     * A more restrictive policy when making the AssumeRole call.
     */
    policy?: pulumi.Input<string>;
}

export interface ProviderAssumeRoleWithOidc {
    /**
     * The duration of the session when making the AssumeRole call. Its value ranges from 900 to 43200(seconds), and default is 3600 seconds.
     */
    durationSeconds: pulumi.Input<number>;
    /**
     * The OIDC token to use when making the AssumeRole call.
     */
    oidcToken: pulumi.Input<string>;
    /**
     * A more restrictive policy when making the AssumeRole call.
     */
    policy?: pulumi.Input<string>;
    /**
     * The session name to use when making the AssumeRole call.
     */
    roleSessionName: pulumi.Input<string>;
    /**
     * The TRN of the role to assume, in the format `trn:iam:${AccountId}:role/${RoleName}`.
     */
    roleTrn: pulumi.Input<string>;
}
export namespace alb {
    export interface AclAclEntry {
        /**
         * The description of the AclEntry.
         */
        description?: pulumi.Input<string>;
        /**
         * The content of the AclEntry.
         */
        entry: pulumi.Input<string>;
    }

    export interface AlbEipBillingConfig {
        /**
         * The peek bandwidth of the EIP which automatically assigned to the Alb. Unit: Mbps.
         */
        bandwidth: pulumi.Input<number>;
        /**
         * The billing type of the EIP which automatically assigned to the Alb. Valid values: `PostPaidByBandwidth`, `PostPaidByTraffic`.
         */
        eipBillingType: pulumi.Input<string>;
        /**
         * The ISP of the EIP which automatically associated to the Alb, the value can be `BGP`.
         */
        isp: pulumi.Input<string>;
    }

    export interface AlbIpv6EipBillingConfig {
        /**
         * The peek bandwidth of the Ipv6 EIP which automatically assigned to the Alb. Unit: Mbps.
         */
        bandwidth: pulumi.Input<number>;
        /**
         * The billing type of the Tpv6 EIP which automatically assigned to the Alb. Valid values: `PostPaidByBandwidth`, `PostPaidByTraffic`.
         */
        billingType: pulumi.Input<string>;
        /**
         * The ISP of the Ipv6 EIP which automatically associated to the Alb, the value can be `BGP`.
         */
        isp: pulumi.Input<string>;
    }

    export interface AlbTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface AlbZoneMapping {
        /**
         * The IP address information of the Alb in this availability zone.
         */
        loadBalancerAddresses?: pulumi.Input<pulumi.Input<inputs.alb.AlbZoneMappingLoadBalancerAddress>[]>;
        /**
         * The subnet id of the Alb in this availability zone.
         */
        subnetId?: pulumi.Input<string>;
        /**
         * The availability zone id of the Alb.
         */
        zoneId?: pulumi.Input<string>;
    }

    export interface AlbZoneMappingLoadBalancerAddress {
        /**
         * The Eip address of the Alb in this availability zone.
         */
        eipAddress?: pulumi.Input<string>;
        /**
         * The Eip id of alb instance in this availability zone.
         */
        eipId?: pulumi.Input<string>;
        /**
         * The Eni address of the Alb in this availability zone.
         */
        eniAddress?: pulumi.Input<string>;
        /**
         * The Eni id of the Alb in this availability zone.
         */
        eniId?: pulumi.Input<string>;
        /**
         * The Eni Ipv6 address of the Alb in this availability zone.
         */
        eniIpv6Address?: pulumi.Input<string>;
        /**
         * The Ipv6 Eip id of alb instance in this availability zone.
         */
        ipv6EipId?: pulumi.Input<string>;
    }

    export interface AlbsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface AlbsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetAlbsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetAlbsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface RuleRedirectConfig {
        /**
         * The redirect domain, only support exact domain name.
         */
        redirectDomain?: pulumi.Input<string>;
        /**
         * The redirect http code, support 301(default), 302, 307, 308.
         */
        redirectHttpCode?: pulumi.Input<string>;
        /**
         * The redirect port.
         */
        redirectPort?: pulumi.Input<string>;
        /**
         * The redirect protocol, support HTTP, HTTPS(default).
         */
        redirectProtocol?: pulumi.Input<string>;
        /**
         * The redirect URI.
         */
        redirectUri?: pulumi.Input<string>;
    }

    export interface RuleRewriteConfig {
        /**
         * Rewrite path.
         */
        rewritePath: pulumi.Input<string>;
    }

    export interface ServerGroupHealthCheck {
        /**
         * The domain of health check.
         */
        domain?: pulumi.Input<string>;
        /**
         * The enable status of health check function. Valid values: `on`, `off`. Default is `on`.
         */
        enabled?: pulumi.Input<string>;
        /**
         * The healthy threshold of health check. Valid value range in 2~10. Default is 3.
         */
        healthyThreshold?: pulumi.Input<number>;
        /**
         * The normal http status code of health check, the value can be `http2xx` or `http3xx` or `http4xx` or `http5xx`.
         */
        httpCode?: pulumi.Input<string>;
        /**
         * The http version of health check. Valid values: `HTTP1.0`, `HTTP1.1`. Default is `HTTP1.0`.
         */
        httpVersion?: pulumi.Input<string>;
        /**
         * The interval executing health check. Unit: second. Valid value range in 1~300. Default is 2.
         */
        interval?: pulumi.Input<number>;
        /**
         * The method of health check. Valid values: `GET` or `HEAD`. Default is `HEAD`.
         */
        method?: pulumi.Input<string>;
        /**
         * The response timeout of health check. Unit: second. Valid value range in 1~60. Default is 2.
         */
        timeout?: pulumi.Input<number>;
        /**
         * The unhealthy threshold of health check. Valid value range in 2~10. Default is 3.
         */
        unhealthyThreshold?: pulumi.Input<number>;
        /**
         * The uri of health check.
         */
        uri?: pulumi.Input<string>;
    }

    export interface ServerGroupStickySessionConfig {
        /**
         * The cookie name of the sticky session. This field is required when the value of the `stickySessionType` is `server`.
         */
        cookie?: pulumi.Input<string>;
        /**
         * The cookie timeout of the sticky session. Unit: second. Valid value range in 1~86400. Default is 1000. This field is required when the value of the `stickySessionType` is `insert`.
         */
        cookieTimeout?: pulumi.Input<number>;
        /**
         * The enable status of sticky session. Valid values: `on`, `off`. Default is `off`.
         */
        stickySessionEnabled?: pulumi.Input<string>;
        /**
         * The cookie handle type of the sticky session. Valid values: `insert`, `server`. Default is `insert`. This field is required when the value of the `stickySessionEnabled` is `on`.
         */
        stickySessionType?: pulumi.Input<string>;
    }

}

export namespace apig {
    export interface ApigGatewayBackendSpec {
        /**
         * Whether the api gateway support vke flannel cni.
         */
        isVkeWithFlannelCniSupported: pulumi.Input<boolean>;
        /**
         * The vke pod cidr of the api gateway.
         */
        vkePodCidr: pulumi.Input<string>;
    }

    export interface ApigGatewayLogSpec {
        /**
         * Whether the api gateway enable tls log.
         */
        enable: pulumi.Input<boolean>;
        /**
         * The project id of the tls. This field is required when `enable` is true.
         */
        projectId?: pulumi.Input<string>;
        /**
         * The topic id of the tls.
         */
        topicId?: pulumi.Input<string>;
    }

    export interface ApigGatewayMonitorSpec {
        /**
         * Whether the api gateway enable monitor.
         */
        enable: pulumi.Input<boolean>;
        /**
         * The workspace id of the monitor. This field is required when `enable` is true.
         */
        workspaceId?: pulumi.Input<string>;
    }

    export interface ApigGatewayNetworkSpec {
        /**
         * The subnet ids of the network spec.
         */
        subnetIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The vpc id of the network spec.
         */
        vpcId: pulumi.Input<string>;
    }

    export interface ApigGatewayResourceSpec {
        /**
         * The clb spec code of the resource spec. Valid values: `small1`, `small2`, `medium1`, `medium2`, `large1`, `large2`.
         */
        clbSpecCode?: pulumi.Input<string>;
        /**
         * The instance spec code of the resource spec. Valid values: `1c2g`, `2c4g`, `4c8g`, `8c16g`.
         */
        instanceSpecCode: pulumi.Input<string>;
        /**
         * The network type of the resource spec. The default values for both `enablePublicNetwork` and `enablePrivateNetwork` are true.
         */
        networkType?: pulumi.Input<inputs.apig.ApigGatewayResourceSpecNetworkType>;
        /**
         * The public network bandwidth of the resource spec.
         */
        publicNetworkBandwidth?: pulumi.Input<number>;
        /**
         * The public network billing type of the resource spec. Valid values: `traffic`, `bandwidth`.
         */
        publicNetworkBillingType?: pulumi.Input<string>;
        /**
         * The replicas of the resource spec.
         */
        replicas: pulumi.Input<number>;
    }

    export interface ApigGatewayResourceSpecNetworkType {
        /**
         * Whether the api gateway enable private network.
         */
        enablePrivateNetwork: pulumi.Input<boolean>;
        /**
         * Whether the api gateway enable public network.
         */
        enablePublicNetwork: pulumi.Input<boolean>;
    }

    export interface ApigGatewayServiceAuthSpec {
        /**
         * Whether the api gateway service enable auth.
         */
        enable: pulumi.Input<boolean>;
    }

    export interface ApigGatewayTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ApigRouteAdvancedSetting {
        /**
         * The cors policy setting of the api gateway route.
         */
        corsPolicySetting?: pulumi.Input<inputs.apig.ApigRouteAdvancedSettingCorsPolicySetting>;
        /**
         * The header operations of the api gateway route.
         */
        headerOperations?: pulumi.Input<pulumi.Input<inputs.apig.ApigRouteAdvancedSettingHeaderOperation>[]>;
        /**
         * The mirror policies of the api gateway route.
         */
        mirrorPolicies?: pulumi.Input<pulumi.Input<inputs.apig.ApigRouteAdvancedSettingMirrorPolicy>[]>;
        /**
         * The retry policy setting of the api gateway route.
         */
        retryPolicySetting?: pulumi.Input<inputs.apig.ApigRouteAdvancedSettingRetryPolicySetting>;
        /**
         * The timeout setting of the api gateway route.
         */
        timeoutSetting?: pulumi.Input<inputs.apig.ApigRouteAdvancedSettingTimeoutSetting>;
        /**
         * The url rewrite setting of the api gateway route.
         */
        urlRewriteSetting?: pulumi.Input<inputs.apig.ApigRouteAdvancedSettingUrlRewriteSetting>;
    }

    export interface ApigRouteAdvancedSettingCorsPolicySetting {
        /**
         * Whether the cors policy setting is enabled.
         */
        enable?: pulumi.Input<boolean>;
    }

    export interface ApigRouteAdvancedSettingHeaderOperation {
        /**
         * The direction type of the header. Valid values: `request`, `response`.
         */
        directionType?: pulumi.Input<string>;
        /**
         * The key of the header.
         */
        key: pulumi.Input<string>;
        /**
         * The operation of the header. Valid values: `set`, `add`, `remove`.
         */
        operation: pulumi.Input<string>;
        /**
         * The value of the header.
         */
        value?: pulumi.Input<string>;
    }

    export interface ApigRouteAdvancedSettingMirrorPolicy {
        /**
         * The percent of the mirror policy.
         */
        percent?: pulumi.Input<inputs.apig.ApigRouteAdvancedSettingMirrorPolicyPercent>;
        /**
         * The upstream of the mirror policy.
         */
        upstream: pulumi.Input<inputs.apig.ApigRouteAdvancedSettingMirrorPolicyUpstream>;
    }

    export interface ApigRouteAdvancedSettingMirrorPolicyPercent {
        /**
         * The percent value of the mirror policy.
         */
        value: pulumi.Input<number>;
    }

    export interface ApigRouteAdvancedSettingMirrorPolicyUpstream {
        /**
         * The type of the api gateway upstream.
         */
        type: pulumi.Input<string>;
        /**
         * The id of the api gateway upstream.
         */
        upstreamId: pulumi.Input<string>;
        /**
         * The version of the api gateway upstream.
         */
        version?: pulumi.Input<string>;
    }

    export interface ApigRouteAdvancedSettingRetryPolicySetting {
        /**
         * The attempts of the api gateway route.
         */
        attempts?: pulumi.Input<number>;
        /**
         * Whether the retry policy setting is enabled.
         */
        enable?: pulumi.Input<boolean>;
        /**
         * The http codes of the api gateway route.
         */
        httpCodes?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The per try timeout of the api gateway route.
         */
        perTryTimeout?: pulumi.Input<number>;
        /**
         * The retry on of the api gateway route. Valid values: `5xx`, `reset`, `connect-failure`, `refused-stream`, `cancelled`, `deadline-exceeded`, `internal`, `resource-exhausted`, `unavailable`.
         */
        retryOns?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ApigRouteAdvancedSettingTimeoutSetting {
        /**
         * Whether the timeout setting is enabled.
         */
        enable?: pulumi.Input<boolean>;
        /**
         * The timeout of the api gateway route. Unit: s.
         */
        timeout?: pulumi.Input<number>;
    }

    export interface ApigRouteAdvancedSettingUrlRewriteSetting {
        /**
         * Whether the url rewrite setting is enabled.
         */
        enable?: pulumi.Input<boolean>;
        /**
         * The url rewrite path of the api gateway route.
         */
        urlRewrite?: pulumi.Input<string>;
    }

    export interface ApigRouteCustomDomain {
        /**
         * The domain of the api gateway route.
         */
        domain?: pulumi.Input<string>;
        /**
         * The id of the custom domain.
         */
        id?: pulumi.Input<string>;
    }

    export interface ApigRouteDomain {
        /**
         * The domain of the api gateway route.
         */
        domain?: pulumi.Input<string>;
        /**
         * The type of the domain.
         */
        type?: pulumi.Input<string>;
    }

    export interface ApigRouteMatchRule {
        /**
         * The header of the api gateway route.
         */
        headers?: pulumi.Input<pulumi.Input<inputs.apig.ApigRouteMatchRuleHeader>[]>;
        /**
         * The method of the api gateway route. Valid values: `GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONS`, `CONNECT`.
         */
        methods?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The path of the api gateway route.
         */
        path: pulumi.Input<inputs.apig.ApigRouteMatchRulePath>;
        /**
         * The query string of the api gateway route.
         */
        queryStrings?: pulumi.Input<pulumi.Input<inputs.apig.ApigRouteMatchRuleQueryString>[]>;
    }

    export interface ApigRouteMatchRuleHeader {
        /**
         * The key of the header.
         */
        key: pulumi.Input<string>;
        /**
         * The path of the api gateway route.
         */
        value: pulumi.Input<inputs.apig.ApigRouteMatchRuleHeaderValue>;
    }

    export interface ApigRouteMatchRuleHeaderValue {
        /**
         * The match content of the api gateway route.
         */
        matchContent: pulumi.Input<string>;
        /**
         * The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
         */
        matchType: pulumi.Input<string>;
    }

    export interface ApigRouteMatchRulePath {
        /**
         * The match content of the api gateway route.
         */
        matchContent: pulumi.Input<string>;
        /**
         * The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
         */
        matchType: pulumi.Input<string>;
    }

    export interface ApigRouteMatchRuleQueryString {
        /**
         * The key of the query string.
         */
        key: pulumi.Input<string>;
        /**
         * The path of the api gateway route.
         */
        value: pulumi.Input<inputs.apig.ApigRouteMatchRuleQueryStringValue>;
    }

    export interface ApigRouteMatchRuleQueryStringValue {
        /**
         * The match content of the api gateway route.
         */
        matchContent: pulumi.Input<string>;
        /**
         * The match type of the api gateway route. Valid values: `Prefix`, `Exact`, `Regex`.
         */
        matchType: pulumi.Input<string>;
    }

    export interface ApigRouteUpstreamList {
        /**
         * The ai provider settings of the api gateway route.
         */
        aiProviderSettings?: pulumi.Input<inputs.apig.ApigRouteUpstreamListAiProviderSettings>;
        /**
         * The id of the api gateway upstream.
         */
        upstreamId: pulumi.Input<string>;
        /**
         * The version of the api gateway upstream.
         */
        version?: pulumi.Input<string>;
        /**
         * The weight of the api gateway upstream. Valid values: 0~10000.
         */
        weight: pulumi.Input<number>;
    }

    export interface ApigRouteUpstreamListAiProviderSettings {
        /**
         * The model of the ai provider.
         */
        model: pulumi.Input<string>;
        /**
         * The target path of the ai provider.
         */
        targetPath: pulumi.Input<string>;
    }

    export interface ApigUpstreamCircuitBreakingSettings {
        /**
         * The base ejection time of circuit breaking. Unit: ms. Default is 10s.
         */
        baseEjectionTime?: pulumi.Input<number>;
        /**
         * The consecutive errors of circuit breaking. Default is 5.
         */
        consecutiveErrors?: pulumi.Input<number>;
        /**
         * Whether the circuit breaking is enabled.
         */
        enable: pulumi.Input<boolean>;
        /**
         * The interval of circuit breaking. Unit: ms. Default is 10s.
         */
        interval?: pulumi.Input<number>;
        /**
         * The max ejection percent of circuit breaking. Default is 20%.
         */
        maxEjectionPercent?: pulumi.Input<number>;
        /**
         * The min health percent of circuit breaking. Default is 60%.
         */
        minHealthPercent?: pulumi.Input<number>;
    }

    export interface ApigUpstreamLoadBalancerSettings {
        /**
         * The consistent hash lb of apig upstream.
         */
        consistentHashLb?: pulumi.Input<inputs.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLb>;
        /**
         * The load balancer policy of apig upstream. Valid values: `SimpleLB`, `ConsistentHashLB`.
         */
        lbPolicy: pulumi.Input<string>;
        /**
         * The simple load balancer of apig upstream. Valid values: `ROUND_ROBIN`, `LEAST_CONN`, `RANDOM`.
         */
        simpleLb?: pulumi.Input<string>;
        /**
         * The warmup duration of apig upstream lb. This field is valid when the simpleLb is `ROUND_ROBIN` or `LEAST_CONN`.
         */
        warmupDuration?: pulumi.Input<number>;
    }

    export interface ApigUpstreamLoadBalancerSettingsConsistentHashLb {
        /**
         * The hash key of apig upstream consistent hash lb. Valid values: `HTTPCookie`, `HttpHeaderName`, `HttpQueryParameterName`, `UseSourceIp`.
         */
        hashKey: pulumi.Input<string>;
        /**
         * The http cookie of apig upstream consistent hash lb.
         */
        httpCookie?: pulumi.Input<inputs.apig.ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookie>;
        /**
         * The http header name of apig upstream consistent hash lb.
         */
        httpHeaderName?: pulumi.Input<string>;
        /**
         * The http query parameter name of apig upstream consistent hash lb.
         */
        httpQueryParameterName?: pulumi.Input<string>;
        /**
         * The use source ip of apig upstream consistent hash lb.
         */
        useSourceIp?: pulumi.Input<boolean>;
    }

    export interface ApigUpstreamLoadBalancerSettingsConsistentHashLbHttpCookie {
        /**
         * The name of apig upstream consistent hash lb http cookie.
         */
        name: pulumi.Input<string>;
        /**
         * The path of apig upstream consistent hash lb http cookie.
         */
        path: pulumi.Input<string>;
        /**
         * The ttl of apig upstream consistent hash lb http cookie.
         */
        ttl: pulumi.Input<number>;
    }

    export interface ApigUpstreamSourceIngressSetting {
        /**
         * Whether to enable all ingress classes.
         */
        enableAllIngressClasses?: pulumi.Input<boolean>;
        /**
         * Whether to enable all namespaces.
         */
        enableAllNamespaces?: pulumi.Input<boolean>;
        /**
         * Whether to enable ingress.
         */
        enableIngress?: pulumi.Input<boolean>;
        /**
         * Whether to enable ingress without ingress class.
         */
        enableIngressWithoutIngressClass?: pulumi.Input<boolean>;
        /**
         * The ingress classes of ingress settings.
         */
        ingressClasses?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The update status of ingress settings.
         */
        updateStatus?: pulumi.Input<boolean>;
        /**
         * The watch namespaces of ingress settings.
         */
        watchNamespaces?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ApigUpstreamSourceSourceSpec {
        /**
         * The k8s source of apig upstream source.
         */
        k8sSource?: pulumi.Input<inputs.apig.ApigUpstreamSourceSourceSpecK8sSource>;
        /**
         * The nacos source of apig upstream source.
         */
        nacosSource?: pulumi.Input<inputs.apig.ApigUpstreamSourceSourceSpecNacosSource>;
    }

    export interface ApigUpstreamSourceSourceSpecK8sSource {
        /**
         * The cluster id of k8s source.
         */
        clusterId: pulumi.Input<string>;
        /**
         * The cluster type of k8s source.
         */
        clusterType?: pulumi.Input<string>;
    }

    export interface ApigUpstreamSourceSourceSpecNacosSource {
        /**
         * The address of nacos source.
         */
        address?: pulumi.Input<string>;
        /**
         * The auth config of nacos source.
         */
        authConfig?: pulumi.Input<inputs.apig.ApigUpstreamSourceSourceSpecNacosSourceAuthConfig>;
        /**
         * The context path of nacos source.
         */
        contextPath?: pulumi.Input<string>;
        /**
         * The grpc port of nacos source.
         */
        grpcPort?: pulumi.Input<number>;
        /**
         * The http port of nacos source.
         */
        httpPort?: pulumi.Input<number>;
        /**
         * The nacos id of nacos source.
         */
        nacosId: pulumi.Input<string>;
        /**
         * The nacos name of nacos source.
         */
        nacosName?: pulumi.Input<string>;
    }

    export interface ApigUpstreamSourceSourceSpecNacosSourceAuthConfig {
        /**
         * The basic auth config of nacos source.
         */
        basic?: pulumi.Input<inputs.apig.ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasic>;
    }

    export interface ApigUpstreamSourceSourceSpecNacosSourceAuthConfigBasic {
        /**
         * The password of basic auth config of nacos source.
         */
        password: pulumi.Input<string>;
        /**
         * The username of basic auth config of nacos source.
         */
        username: pulumi.Input<string>;
    }

    export interface ApigUpstreamTlsSettings {
        /**
         * The sni of apig upstream tls setting.
         */
        sni?: pulumi.Input<string>;
        /**
         * The tls mode of apig upstream tls setting. Valid values: `DISABLE`, `SIMPLE`.
         */
        tlsMode: pulumi.Input<string>;
    }

    export interface ApigUpstreamUpstreamSpec {
        /**
         * The ai provider of apig upstream.
         */
        aiProvider?: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecAiProvider>;
        /**
         * The domain of apig upstream.
         */
        domain?: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecDomain>;
        /**
         * The ecs list of apig upstream.
         */
        ecsLists?: pulumi.Input<pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecEcsList>[]>;
        /**
         * The fixed ip list of apig upstream.
         */
        fixedIpLists?: pulumi.Input<pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecFixedIpList>[]>;
        /**
         * The k8s service of apig upstream.
         */
        k8sService?: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecK8sService>;
        /**
         * The nacos service of apig upstream.
         */
        nacosService?: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecNacosService>;
        /**
         * The vefaas of apig upstream.
         */
        veFaas?: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecVeFaas>;
        /**
         * The mlp of apig upstream.
         */
        veMlp?: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecVeMlp>;
    }

    export interface ApigUpstreamUpstreamSpecAiProvider {
        /**
         * The base url of ai provider.
         */
        baseUrl: pulumi.Input<string>;
        /**
         * The custom body params of ai provider.
         */
        customBodyParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The custom header params of ai provider.
         */
        customHeaderParams?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The custom model service of ai provider.
         */
        customModelService?: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecAiProviderCustomModelService>;
        /**
         * The name of ai provider.
         */
        name: pulumi.Input<string>;
        /**
         * The token of ai provider.
         */
        token: pulumi.Input<string>;
    }

    export interface ApigUpstreamUpstreamSpecAiProviderCustomModelService {
        /**
         * The name of custom model service.
         */
        name: pulumi.Input<string>;
        /**
         * The namespace of custom model service.
         */
        namespace: pulumi.Input<string>;
        /**
         * The port of custom model service.
         */
        port: pulumi.Input<number>;
    }

    export interface ApigUpstreamUpstreamSpecDomain {
        /**
         * The domain list of apig upstream.
         */
        domainList: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecDomainDomainList>;
        /**
         * The protocol of apig upstream. Valid values: `HTTP`, `HTTPS`.
         */
        protocol?: pulumi.Input<string>;
    }

    export interface ApigUpstreamUpstreamSpecDomainDomainList {
        /**
         * The domain of apig upstream.
         */
        domain: pulumi.Input<string>;
        /**
         * The port of domain. Default is 80 for HTTP, 443 for HTTPS.
         */
        port?: pulumi.Input<number>;
    }

    export interface ApigUpstreamUpstreamSpecEcsList {
        /**
         * The instance id of ecs.
         */
        ecsId: pulumi.Input<string>;
        /**
         * The ip of ecs.
         */
        ip: pulumi.Input<string>;
        /**
         * The port of ecs.
         */
        port: pulumi.Input<number>;
    }

    export interface ApigUpstreamUpstreamSpecFixedIpList {
        /**
         * The ip of apig upstream.
         */
        ip: pulumi.Input<string>;
        /**
         * The port of apig upstream.
         */
        port: pulumi.Input<number>;
    }

    export interface ApigUpstreamUpstreamSpecK8sService {
        /**
         * The name of k8s service.
         */
        name: pulumi.Input<string>;
        /**
         * The namespace of k8s service.
         */
        namespace: pulumi.Input<string>;
        /**
         * The port of k8s service.
         */
        port: pulumi.Input<number>;
    }

    export interface ApigUpstreamUpstreamSpecNacosService {
        /**
         * The group of nacos service.
         */
        group: pulumi.Input<string>;
        /**
         * The namespace of nacos service.
         */
        namespace: pulumi.Input<string>;
        /**
         * The namespace id of nacos service.
         */
        namespaceId?: pulumi.Input<string>;
        /**
         * The service of nacos service.
         */
        service: pulumi.Input<string>;
        /**
         * The upstream source id.
         */
        upstreamSourceId: pulumi.Input<string>;
    }

    export interface ApigUpstreamUpstreamSpecVeFaas {
        /**
         * The function id of vefaas.
         */
        functionId: pulumi.Input<string>;
    }

    export interface ApigUpstreamUpstreamSpecVeMlp {
        /**
         * The k8s service of mlp.
         */
        k8sService: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecVeMlpK8sService>;
        /**
         * The service discover type of mlp.
         */
        serviceDiscoverType: pulumi.Input<string>;
        /**
         * The service id of mlp.
         */
        serviceId: pulumi.Input<string>;
        /**
         * The service name of mlp.
         */
        serviceName?: pulumi.Input<string>;
        /**
         * The service url of mlp.
         */
        serviceUrl?: pulumi.Input<string>;
        /**
         * The upstream source id.
         */
        upstreamSourceId?: pulumi.Input<string>;
    }

    export interface ApigUpstreamUpstreamSpecVeMlpK8sService {
        /**
         * The cluster info of k8s service.
         */
        clusterInfo: pulumi.Input<inputs.apig.ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfo>;
        /**
         * The name of k8s service.
         */
        name: pulumi.Input<string>;
        /**
         * The namespace of k8s service.
         */
        namespace: pulumi.Input<string>;
        /**
         * The port of k8s service.
         */
        port: pulumi.Input<number>;
    }

    export interface ApigUpstreamUpstreamSpecVeMlpK8sServiceClusterInfo {
        /**
         * The account id of k8s service.
         */
        accountId: pulumi.Input<number>;
        /**
         * The cluster name of k8s service.
         */
        clusterName: pulumi.Input<string>;
    }

    export interface ApigUpstreamVersionDetail {
        /**
         * The labels of apig upstream version.
         */
        labels?: pulumi.Input<pulumi.Input<inputs.apig.ApigUpstreamVersionDetailLabel>[]>;
        /**
         * The name of the apig upstream.
         */
        name?: pulumi.Input<string>;
        /**
         * The update time of apig upstream version.
         */
        updateTime?: pulumi.Input<string>;
    }

    export interface ApigUpstreamVersionDetailLabel {
        /**
         * The key of apig upstream version label.
         */
        key?: pulumi.Input<string>;
        /**
         * The value of apig upstream version label.
         */
        value?: pulumi.Input<string>;
    }

    export interface ApigUpstreamVersionUpstreamVersion {
        /**
         * The labels of apig upstream version.
         */
        labels?: pulumi.Input<pulumi.Input<inputs.apig.ApigUpstreamVersionUpstreamVersionLabel>[]>;
        /**
         * The name of apig upstream version.
         */
        name: pulumi.Input<string>;
        /**
         * The update time of apig upstream version.
         */
        updateTime?: pulumi.Input<string>;
    }

    export interface ApigUpstreamVersionUpstreamVersionLabel {
        /**
         * The key of apig upstream version label.
         */
        key: pulumi.Input<string>;
        /**
         * The value of apig upstream version label.
         */
        value: pulumi.Input<string>;
    }

    export interface GatewaysTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GatewaysTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetGatewaysTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetGatewaysTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace autoscaling {
    export interface ScalingConfigurationTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ScalingConfigurationVolume {
        /**
         * The delete with instance flag of volume. Valid values: true, false. Default value: true.
         */
        deleteWithInstance?: pulumi.Input<boolean>;
        /**
         * The size of volume. System disk value range: 10 - 500. The value range of the data disk: 10 - 8192.
         */
        size: pulumi.Input<number>;
        /**
         * The type of volume.
         */
        volumeType: pulumi.Input<string>;
    }

    export interface ScalingGroupLaunchTemplateOverride {
        /**
         * The instance type.
         */
        instanceType: pulumi.Input<string>;
    }

    export interface ScalingGroupServerGroupAttribute {
        /**
         * The load balancer id.
         */
        loadBalancerId?: pulumi.Input<string>;
        /**
         * The port receiving request of the server group. Value range: 1 ~ 65535.
         */
        port: pulumi.Input<number>;
        /**
         * The id of the server group.
         */
        serverGroupId: pulumi.Input<string>;
        /**
         * The weight of the instance. Value range: 0 ~ 100.
         */
        weight: pulumi.Input<number>;
    }

    export interface ScalingGroupTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ScalingLifecycleHookLifecycleCommand {
        /**
         * Batch job command ID, which indicates the batch job command to be executed after triggering the lifecycle hook and installed in the instance.
         */
        commandId: pulumi.Input<string>;
        /**
         * Parameters and parameter values in batch job commands.
         * The number of parameters ranges from 0 to 60.
         */
        parameters?: pulumi.Input<string>;
    }

}

export namespace bandwidth_package {
    export interface BandwidthPackageTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface BandwidthPackagesTagFilter {
        /**
         * The key of the tag.
         */
        key: string;
        /**
         * The values of the tag.
         */
        values: string[];
    }

    export interface BandwidthPackagesTagFilterArgs {
        /**
         * The key of the tag.
         */
        key: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetBandwidthPackagesTagFilter {
        /**
         * The key of the tag.
         */
        key: string;
        /**
         * The values of the tag.
         */
        values: string[];
    }

    export interface GetBandwidthPackagesTagFilterArgs {
        /**
         * The key of the tag.
         */
        key: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace bioos {
    export interface ClusterSharedConfig {
        /**
         * Whether to enable a shared cluster. This value must be `true`.
         */
        enable: pulumi.Input<boolean>;
    }

    export interface ClusterVkeConfig {
        /**
         * The id of the vke cluster.
         */
        clusterId: pulumi.Input<string>;
        /**
         * The name of the StorageClass that the vke cluster has installed.
         */
        storageClass: pulumi.Input<string>;
    }

}

export namespace cdn {
    export interface CdnDomainSharedCname {
        /**
         * Assign a CNAME to the accelerated domain.
         */
        cname: pulumi.Input<string>;
        /**
         * Specify whether to enable shared CNAME.
         */
        switch: pulumi.Input<boolean>;
    }

    export interface CdnDomainTag {
        /**
         * The key of the tag.
         */
        key: pulumi.Input<string>;
        /**
         * The value of the tag.
         */
        value: pulumi.Input<string>;
    }

    export interface SharedConfigAllowIpAccessRule {
        /**
         * The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
         */
        rules: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SharedConfigAllowRefererAccessRule {
        /**
         * Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
         */
        allowEmpty?: pulumi.Input<boolean>;
        /**
         * The content indicating the Referer whitelist.
         */
        commonType: pulumi.Input<inputs.cdn.SharedConfigAllowRefererAccessRuleCommonType>;
    }

    export interface SharedConfigAllowRefererAccessRuleCommonType {
        /**
         * This list is case-sensitive when matching requests. Default is true.
         */
        ignoreCase?: pulumi.Input<boolean>;
        /**
         * The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
         */
        rules: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SharedConfigCommonMatchList {
        /**
         * The content indicating the Referer blacklist.
         */
        commonType: pulumi.Input<inputs.cdn.SharedConfigCommonMatchListCommonType>;
    }

    export interface SharedConfigCommonMatchListCommonType {
        /**
         * This list is case-sensitive when matching requests. Default is true.
         */
        ignoreCase?: pulumi.Input<boolean>;
        /**
         * The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
         */
        rules: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SharedConfigDenyIpAccessRule {
        /**
         * The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
         */
        rules: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface SharedConfigDenyRefererAccessRule {
        /**
         * Indicates whether an empty Referer header, or a request without a Referer header, is not allowed. Default is false.
         */
        allowEmpty?: pulumi.Input<boolean>;
        /**
         * The content indicating the Referer blacklist.
         */
        commonType: pulumi.Input<inputs.cdn.SharedConfigDenyRefererAccessRuleCommonType>;
    }

    export interface SharedConfigDenyRefererAccessRuleCommonType {
        /**
         * This list is case-sensitive when matching requests. Default is true.
         */
        ignoreCase?: pulumi.Input<boolean>;
        /**
         * The entries in this list are an array of IP addresses and CIDR network segments. The total number of entries cannot exceed 3,000. The IP addresses and segments can be in IPv4 and IPv6 format. Duplicate entries in the list will be removed and will not count towards the limit.
         */
        rules: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace cen {
    export interface BandwidthPackageTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface BandwidthPackagesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface BandwidthPackagesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface CenTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface CensTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface CensTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetBandwidthPackagesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetBandwidthPackagesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetCensTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetCensTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ServiceRouteEntryPublishToInstance {
        /**
         * Cloud service access routes need to publish the network instance ID.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * The region where the cloud service access route needs to be published.
         */
        instanceRegionId?: pulumi.Input<string>;
        /**
         * The network instance type that needs to be published for cloud service access routes. The values are as follows: `VPC`, `DCGW`.
         */
        instanceType?: pulumi.Input<string>;
    }
}

export namespace clb {
    export interface AclAclEntry {
        /**
         * The description of the AclEntry.
         */
        description?: pulumi.Input<string>;
        /**
         * The content of the AclEntry.
         */
        entry: pulumi.Input<string>;
    }

    export interface CertificateTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface CertificatesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface CertificatesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ClbEipBillingConfig {
        /**
         * The peek bandwidth of the EIP which automatically assigned to CLB.
         */
        bandwidth?: pulumi.Input<number>;
        /**
         * The billing type of the EIP which automatically assigned to CLB. And optional choice contains `PostPaidByBandwidth` or `PostPaidByTraffic` or `PrePaid`.When creating a `PrePaid` public CLB, this field must be specified as `PrePaid` simultaneously.When the LoadBalancerBillingType changes from `PostPaid` to `PrePaid`, please manually modify the value of this field to `PrePaid` simultaneously.
         */
        eipBillingType: pulumi.Input<string>;
        /**
         * The ISP of the EIP which automatically associated to CLB, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom` or `SingleLine_BGP` or `Static_BGP` or `Fusion_BGP`.
         */
        isp: pulumi.Input<string>;
    }

    export interface ClbTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ClbsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface ClbsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetCertificatesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetCertificatesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetClbsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetClbsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ListenerHealthCheck {
        /**
         * The domain of health check.
         */
        domain?: pulumi.Input<string>;
        /**
         * The enable status of health check function. Optional choice contains `on`, `off`.
         */
        enabled?: pulumi.Input<string>;
        /**
         * The healthy threshold of health check, default 3, range in 2~10.
         */
        healthyThreshold?: pulumi.Input<number>;
        /**
         * The normal http status code of health check, the value can be `http2xx` or `http3xx` or `http4xx` or `http5xx`.
         */
        httpCode?: pulumi.Input<string>;
        /**
         * The interval executing health check, default 2, range in 1~300.
         */
        interval?: pulumi.Input<number>;
        /**
         * The method of health check, the value can be `GET` or `HEAD`.
         */
        method?: pulumi.Input<string>;
        /**
         * The response timeout of health check, default 2, range in 1~60..
         */
        timeout?: pulumi.Input<number>;
        /**
         * The UDP expect of health check. This field must be specified simultaneously with field `udpRequest`.
         */
        udpExpect?: pulumi.Input<string>;
        /**
         * The UDP request of health check. This field must be specified simultaneously with field `udpExpect`.
         */
        udpRequest?: pulumi.Input<string>;
        /**
         * The unhealthy threshold of health check, default 3, range in 2~10.
         */
        unHealthyThreshold?: pulumi.Input<number>;
        /**
         * The uri of health check.
         */
        uri?: pulumi.Input<string>;
    }

}

export namespace cloud_firewall {
    export interface CfwDnsControlPolicySource {
        /**
         * The region of the source vpc.
         */
        region: pulumi.Input<string>;
        /**
         * The id of the source vpc.
         */
        vpcId: pulumi.Input<string>;
    }

}

export namespace cloud_identity {
    export interface GroupMember {
        /**
         * The description of the cloud identity group.
         */
        description?: pulumi.Input<string>;
        /**
         * The display name of the cloud identity group.
         */
        displayName?: pulumi.Input<string>;
        /**
         * The email of the cloud identity user.
         */
        email?: pulumi.Input<string>;
        /**
         * The identity type of the cloud identity user.
         */
        identityType?: pulumi.Input<string>;
        /**
         * The join time of the cloud identity user.
         */
        joinTime?: pulumi.Input<string>;
        /**
         * The phone of the cloud identity user.
         */
        phone?: pulumi.Input<string>;
        /**
         * The source of the cloud identity group.
         */
        source?: pulumi.Input<string>;
        /**
         * The id of the cloud identity user.
         */
        userId?: pulumi.Input<string>;
        /**
         * The name of the cloud identity user.
         */
        userName?: pulumi.Input<string>;
    }

    export interface PermissionSetPermissionPolicy {
        /**
         * The document of the cloud identity permission set inline policy. When the `permissionPolicyType` is `Inline`, this field must be specified.
         */
        inlinePolicyDocument?: pulumi.Input<string>;
        /**
         * The name of the cloud identity permission set system policy. When the `permissionPolicyType` is `System`, this field must be specified.
         */
        permissionPolicyName?: pulumi.Input<string>;
        /**
         * The type of the cloud identity permission set policy. Valid values: `System`, `Inline`.
         */
        permissionPolicyType: pulumi.Input<string>;
    }

}

export namespace cloud_monitor {
    export interface EventRuleEffectiveTime {
        /**
         * End time for rule activation.
         */
        endTime: pulumi.Input<string>;
        /**
         * Start time for rule activation.
         */
        startTime: pulumi.Input<string>;
    }

    export interface EventRuleFilterPattern {
        /**
         * Event source corresponding to pattern matching.
         */
        source: pulumi.Input<string>;
        /**
         * The list of corresponding event types in pattern matching, currently set to match any.
         */
        types: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface EventRuleMessageQueue {
        /**
         * The kafka instance id.
         */
        instanceId: pulumi.Input<string>;
        /**
         * The region.
         */
        region: pulumi.Input<string>;
        /**
         * The topic name.
         */
        topic: pulumi.Input<string>;
        /**
         * The message queue type, only support kafka now.
         */
        type: pulumi.Input<string>;
        /**
         * The vpc id.
         */
        vpcId: pulumi.Input<string>;
    }

    export interface EventRuleTlsTarget {
        /**
         * The project id.
         */
        projectId: pulumi.Input<string>;
        /**
         * The project name.
         */
        projectName: pulumi.Input<string>;
        /**
         * The Chinese region name.
         */
        regionNameCn: pulumi.Input<string>;
        /**
         * The English region name.
         */
        regionNameEn: pulumi.Input<string>;
        /**
         * The topic id.
         */
        topicId: pulumi.Input<string>;
    }

    export interface RuleCondition {
        /**
         * The comparison operation of the cloud monitor rule. Valid values: `>`, `>=`, `<`, `<=`, `!=`, `=`.
         */
        comparisonOperator: pulumi.Input<string>;
        /**
         * The metric name of the cloud monitor rule.
         */
        metricName: pulumi.Input<string>;
        /**
         * The metric unit of the cloud monitor rule.
         */
        metricUnit: pulumi.Input<string>;
        /**
         * The period of the cloud monitor rule.
         */
        period?: pulumi.Input<string>;
        /**
         * The statistics of the cloud monitor rule. Valid values: `avg`, `max`, `min`.
         */
        statistics: pulumi.Input<string>;
        /**
         * The threshold of the cloud monitor rule.
         */
        threshold: pulumi.Input<string>;
    }

    export interface RuleOriginalDimension {
        /**
         * The key of the dimension.
         */
        key: pulumi.Input<string>;
        /**
         * The value of the dimension.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleRecoveryNotify {
        /**
         * Whether to enable the recovery notify function.
         */
        enable?: pulumi.Input<boolean>;
    }

}

export namespace cloudfs {
}

export namespace config {
}

export namespace cr {
    export interface EndpointAclPolicy {
        /**
         * The description of the acl policy.
         */
        description?: pulumi.Input<string>;
        /**
         * The ip of the acl policy.
         */
        entry?: pulumi.Input<string>;
    }

    export interface GetRegistriesResourceTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        values: string[];
    }

    export interface GetRegistriesResourceTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetRegistriesStatus {
        /**
         * The condition of registry.
         */
        condition?: string;
        /**
         * The phase of status.
         */
        phase?: string;
    }

    export interface GetRegistriesStatusArgs {
        /**
         * The condition of registry.
         */
        condition?: pulumi.Input<string>;
        /**
         * The phase of status.
         */
        phase?: pulumi.Input<string>;
    }

    export interface RegistriesResourceTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        values: string[];
    }

    export interface RegistriesResourceTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RegistriesStatus {
        /**
         * The condition of registry.
         */
        condition?: string;
        /**
         * The phase of status.
         */
        phase?: string;
    }

    export interface RegistriesStatusArgs {
        /**
         * The condition of registry.
         */
        condition?: pulumi.Input<string>;
        /**
         * The phase of status.
         */
        phase?: pulumi.Input<string>;
    }

    export interface RegistryDomain {
        /**
         * The domain of registry.
         */
        domain?: pulumi.Input<string>;
        /**
         * The type of registry. Valid values: `Enterprise`, `Micro`. Default is `Enterprise`.
         */
        type?: pulumi.Input<string>;
    }

    export interface RegistryProxyCache {
        /**
         * The endpoint of proxy cache.
         */
        endpoint?: pulumi.Input<string>;
        /**
         * The password of proxy cache.
         */
        password?: pulumi.Input<string>;
        /**
         * Whether to skip ssl verify.
         */
        skipSslVerify?: pulumi.Input<boolean>;
        /**
         * The type of proxy cache. Valid values: `DockerHub`, `DockerRegistry`.
         */
        type: pulumi.Input<string>;
        /**
         * The username of proxy cache.
         */
        username?: pulumi.Input<string>;
    }

    export interface RegistryResourceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface RegistryStatus {
        /**
         * The condition of registry.
         */
        conditions?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The phase status of registry.
         */
        phase?: pulumi.Input<string>;
    }

    export interface StateStatus {
        /**
         * The condition of instance.
         */
        conditions?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The phase status of instance.
         */
        phase?: pulumi.Input<string>;
    }

    export interface TagChartAttribute {
        /**
         * The Helm version.
         */
        apiVersion?: pulumi.Input<string>;
        /**
         * The name of OCI product.
         */
        name?: pulumi.Input<string>;
        /**
         * The Helm Chart version.
         */
        version?: pulumi.Input<string>;
    }

    export interface TagImageAttribute {
        /**
         * The image architecture.
         */
        architecture?: pulumi.Input<string>;
        /**
         * The image author.
         */
        author?: pulumi.Input<string>;
        /**
         * The digest of image.
         */
        digest?: pulumi.Input<string>;
        /**
         * The iamge os.
         */
        os?: pulumi.Input<string>;
    }

    export interface VpcEndpointVpc {
        /**
         * The id of the account. When you need to expose the Enterprise Edition instance to a VPC under another primary account, you need to specify the ID of the primary account to which the VPC belongs.
         */
        accountId?: pulumi.Input<number>;
        /**
         * The id of the subnet. If not specified, the subnet with the most remaining IPs under the VPC will be automatically selected.
         */
        subnetId?: pulumi.Input<string>;
        /**
         * The id of the vpc.
         */
        vpcId?: pulumi.Input<string>;
    }

}

export namespace direct_connect {
    export interface ConnectionTag {
        /**
         * The tag key.
         */
        key?: pulumi.Input<string>;
        /**
         * The tag value.
         */
        value?: pulumi.Input<string>;
    }

    export interface ConnectionsTagFilter {
        /**
         * The tag key of cloud resource instance.
         */
        key?: string;
        /**
         * The tag value of cloud resource instance.
         */
        value?: string;
    }

    export interface ConnectionsTagFilterArgs {
        /**
         * The tag key of cloud resource instance.
         */
        key?: pulumi.Input<string>;
        /**
         * The tag value of cloud resource instance.
         */
        value?: pulumi.Input<string>;
    }

    export interface GatewayTag {
        /**
         * The tag key.
         */
        key?: pulumi.Input<string>;
        /**
         * The tag value.
         */
        value?: pulumi.Input<string>;
    }

    export interface GatewaysTagFilter {
        /**
         * The tag key of cloud resource instance.
         */
        key?: string;
        /**
         * The tag value of cloud resource instance.
         */
        value?: string;
    }

    export interface GatewaysTagFilterArgs {
        /**
         * The tag key of cloud resource instance.
         */
        key?: pulumi.Input<string>;
        /**
         * The tag value of cloud resource instance.
         */
        value?: pulumi.Input<string>;
    }

    export interface GetConnectionsTagFilter {
        /**
         * The tag key of cloud resource instance.
         */
        key?: string;
        /**
         * The tag value of cloud resource instance.
         */
        value?: string;
    }

    export interface GetConnectionsTagFilterArgs {
        /**
         * The tag key of cloud resource instance.
         */
        key?: pulumi.Input<string>;
        /**
         * The tag value of cloud resource instance.
         */
        value?: pulumi.Input<string>;
    }

    export interface GetGatewaysTagFilter {
        /**
         * The tag key of cloud resource instance.
         */
        key?: string;
        /**
         * The tag value of cloud resource instance.
         */
        value?: string;
    }

    export interface GetGatewaysTagFilterArgs {
        /**
         * The tag key of cloud resource instance.
         */
        key?: pulumi.Input<string>;
        /**
         * The tag value of cloud resource instance.
         */
        value?: pulumi.Input<string>;
    }

    export interface GetVirtualInterfacesTagFilter {
        /**
         * The tag key of cloud resource instance.
         */
        key?: string;
        /**
         * The tag value of cloud resource instance.
         */
        value?: string;
    }

    export interface GetVirtualInterfacesTagFilterArgs {
        /**
         * The tag key of cloud resource instance.
         */
        key?: pulumi.Input<string>;
        /**
         * The tag value of cloud resource instance.
         */
        value?: pulumi.Input<string>;
    }

    export interface VirtualInterfaceTag {
        /**
         * The tag key.
         */
        key?: pulumi.Input<string>;
        /**
         * The tag value.
         */
        value?: pulumi.Input<string>;
    }

    export interface VirtualInterfacesTagFilter {
        /**
         * The tag key of cloud resource instance.
         */
        key?: string;
        /**
         * The tag value of cloud resource instance.
         */
        value?: string;
    }

    export interface VirtualInterfacesTagFilterArgs {
        /**
         * The tag key of cloud resource instance.
         */
        key?: pulumi.Input<string>;
        /**
         * The tag value of cloud resource instance.
         */
        value?: pulumi.Input<string>;
    }

}

export namespace dns {
    export interface GetZonesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        values: string[];
    }

    export interface GetZonesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ZoneTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ZonesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        values: string[];
    }

    export interface ZonesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace ebs {
    export interface AutoSnapshotPoliciesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface AutoSnapshotPoliciesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface AutoSnapshotPolicyTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetAutoSnapshotPoliciesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetAutoSnapshotPoliciesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetSnapshotsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetSnapshotsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetVolumesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetVolumesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface SnapshotGroupTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface SnapshotTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface SnapshotsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface SnapshotsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface VolumeTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface VolumesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface VolumesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace ecs {
    export interface CommandParameterDefinition {
        /**
         * The decimal precision of the custom parameter. This field is required when the parameter type is `Digit`.
         */
        decimalPrecision?: pulumi.Input<number>;
        /**
         * The default value of the custom parameter.
         */
        defaultValue?: pulumi.Input<string>;
        /**
         * The maximum length of the custom parameter. This field is required when the parameter type is `String`.
         */
        maxLength?: pulumi.Input<number>;
        /**
         * The maximum value of the custom parameter. This field is required when the parameter type is `Digit`.
         */
        maxValue?: pulumi.Input<string>;
        /**
         * The minimum length of the custom parameter. This field is required when the parameter type is `String`.
         */
        minLength?: pulumi.Input<number>;
        /**
         * The minimum value of the custom parameter. This field is required when the parameter type is `Digit`.
         */
        minValue?: pulumi.Input<string>;
        /**
         * The name of the custom parameter.
         */
        name: pulumi.Input<string>;
        /**
         * Whether the custom parameter is required.
         */
        required?: pulumi.Input<boolean>;
        /**
         * The type of the custom parameter. Valid values: `String`, `Digit`.
         */
        type: pulumi.Input<string>;
    }

    export interface CommandTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface CommandsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface CommandsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetCommandsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetCommandsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetImagesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetImagesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetInstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetInvocationsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInvocationsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ImageImportTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ImageTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ImagesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface ImagesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceCpuOptions {
        /**
         * The number of subnuma in socket, only support for ebm. `1` indicates disabling SNC/NPS function. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
         */
        numaPerSocket?: pulumi.Input<number>;
        /**
         * The per core of threads, only support for ebm. `1` indicates disabling hyper threading function.
         */
        threadsPerCore?: pulumi.Input<number>;
    }

    export interface InstanceDataVolume {
        /**
         * The delete with instance flag of volume.
         */
        deleteWithInstance?: pulumi.Input<boolean>;
        /**
         * The size of volume. The value range of the data volume size is ESSD_PL0: 10~32768, ESSD_FlexPL: 10~32768, PTSSD: 20~8192.
         */
        size: pulumi.Input<number>;
        /**
         * The type of volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
         */
        volumeType: pulumi.Input<string>;
    }

    export interface InstanceEipAddress {
        /**
         * The peek bandwidth of the EIP. The value range in 1~500 for PostPaidByBandwidth, and 1~200 for PostPaidByTraffic. Default is 1.
         */
        bandwidthMbps?: pulumi.Input<number>;
        /**
         * The id of the bandwidth package, indicates that the public IP address will be added to the bandwidth package.
         */
        bandwidthPackageId?: pulumi.Input<string>;
        /**
         * The billing type of the EIP Address. Valid values: `PayByBandwidth`, `PayByTraffic`. Default is `PayByBandwidth`.
         */
        chargeType?: pulumi.Input<string>;
        /**
         * The ISP of the EIP. Valid values: `BGP`, `ChinaMobile`, `ChinaUnicom`, `ChinaTelecom`, `SingleLine_BGP`, `Static_BGP`.
         */
        isp?: pulumi.Input<string>;
    }

    export interface InstanceGpuDevice {
        /**
         * The Count of GPU device.
         */
        count?: pulumi.Input<number>;
        /**
         * The Encrypted Memory Size of GPU device.
         */
        encryptedMemorySize?: pulumi.Input<number>;
        /**
         * The memory size of ECS instance.
         */
        memorySize?: pulumi.Input<number>;
        /**
         * The Product Name of GPU device.
         */
        productName?: pulumi.Input<string>;
    }

    export interface InstanceSecondaryNetworkInterface {
        /**
         * The private ip address of secondary networkInterface.
         */
        primaryIpAddress?: pulumi.Input<string>;
        /**
         * The security group ID set of secondary networkInterface.
         */
        securityGroupIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The subnet ID of secondary networkInterface.
         */
        subnetId: pulumi.Input<string>;
    }

    export interface InstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InvocationParameter {
        /**
         * The name of the parameter.
         */
        name: pulumi.Input<string>;
        /**
         * The value of the parameter.
         */
        value: pulumi.Input<string>;
    }

    export interface InvocationTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InvocationsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InvocationsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface LaunchTemplateNetworkInterface {
        /**
         * The security group ID associated with the NIC.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The private network subnet ID of the instance, when creating the instance, supports binding the secondary NIC at the same time.
         */
        subnetId?: pulumi.Input<string>;
    }

    export interface LaunchTemplateVolume {
        /**
         * The delete with instance flag of volume. Valid values: true, false. Default value: true.
         */
        deleteWithInstance?: pulumi.Input<boolean>;
        /**
         * The size of volume.
         */
        size?: pulumi.Input<number>;
        /**
         * The type of volume.
         */
        volumeType?: pulumi.Input<string>;
    }

}

export namespace eip {
    export interface AddressTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface AddressesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface AddressesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetAddressesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetAddressesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }
}

export namespace escloud {
    export interface InstanceInstanceConfiguration {
        /**
         * The password of administrator account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
         */
        adminPassword: pulumi.Input<string>;
        /**
         * The name of administrator account(should be admin).
         */
        adminUserName: pulumi.Input<string>;
        /**
         * The charge type of ESCloud instance, the value can be PostPaid or PrePaid.
         */
        chargeType: pulumi.Input<string>;
        /**
         * Configuration code used for billing.
         */
        configurationCode: pulumi.Input<string>;
        /**
         * Whether Https access is enabled.
         */
        enableHttps: pulumi.Input<boolean>;
        /**
         * Whether the Master node is independent.
         */
        enablePureMaster: pulumi.Input<boolean>;
        /**
         * Whether to force restart when changes are made. If true, it means that the cluster will be forced to restart without paying attention to instance availability. Works only on modified the nodeSpecsAssigns field.
         */
        forceRestartAfterScale?: pulumi.Input<boolean>;
        /**
         * The name of ESCloud instance.
         */
        instanceName?: pulumi.Input<string>;
        /**
         * The maintainable date for the instance. Works only on modified scenes.
         */
        maintenanceDays?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The maintainable time period for the instance. Works only on modified scenes.
         */
        maintenanceTime?: pulumi.Input<string>;
        /**
         * The number and configuration of various ESCloud instance node. Kibana NodeSpecsAssign should not be modified.
         */
        nodeSpecsAssigns: pulumi.Input<pulumi.Input<inputs.escloud.InstanceInstanceConfigurationNodeSpecsAssign>[]>;
        /**
         * The project name  to which the ESCloud instance belongs.
         */
        projectName?: pulumi.Input<string>;
        /**
         * The region ID of ESCloud instance.
         */
        regionId?: pulumi.Input<string>;
        /**
         * The ID of subnet, the subnet must belong to the AZ selected.
         */
        subnetId: pulumi.Input<string>;
        /**
         * The version of ESCloud instance, the value is V6_7 or V7_10.
         */
        version: pulumi.Input<string>;
        /**
         * The available zone ID of ESCloud instance.
         */
        zoneId?: pulumi.Input<string>;
        /**
         * The zone count of the ESCloud instance used.
         */
        zoneNumber: pulumi.Input<number>;
    }

    export interface InstanceInstanceConfigurationNodeSpecsAssign {
        /**
         * The number of node.
         */
        number: pulumi.Input<number>;
        /**
         * The name of compute resource spec, the value is `kibana.x2.small` or `es.x4.medium` or `es.x4.large` or `es.x4.xlarge` or `es.x2.2xlarge` or `es.x4.2xlarge` or `es.x2.3xlarge`.
         */
        resourceSpecName: pulumi.Input<string>;
        /**
         * The size of storage. Kibana NodeSpecsAssign should not specify this field.
         */
        storageSize?: pulumi.Input<number>;
        /**
         * The name of storage spec. Kibana NodeSpecsAssign should not specify this field.
         */
        storageSpecName?: pulumi.Input<string>;
        /**
         * The type of node, the value is `Master` or `Hot` or `Kibana`.
         */
        type: pulumi.Input<string>;
    }

}

export namespace escloud_v2 {
    export interface EscloudInstanceV2NetworkSpec {
        /**
         * The bandwidth of the eip. Unit: Mbps.
         */
        bandwidth: pulumi.Input<number>;
        /**
         * Whether the eip is opened.
         */
        isOpen: pulumi.Input<boolean>;
        /**
         * The spec name of public network.
         */
        specName: pulumi.Input<string>;
        /**
         * The type of public network, valid values: `Elasticsearch`, `Kibana`.
         */
        type: pulumi.Input<string>;
    }

    export interface EscloudInstanceV2NodeSpecsAssign {
        /**
         * The extra performance of FlexPL storage spec.
         */
        extraPerformance?: pulumi.Input<inputs.escloud_v2.EscloudInstanceV2NodeSpecsAssignExtraPerformance>;
        /**
         * The number of node.
         */
        number: pulumi.Input<number>;
        /**
         * The name of compute resource spec.
         */
        resourceSpecName: pulumi.Input<string>;
        /**
         * The size of storage. Unit: GiB. the adjustment step size is 10GiB. Default is 100 GiB. Kibana NodeSpecsAssign should specify this field to 0.
         */
        storageSize: pulumi.Input<number>;
        /**
         * The name of storage spec. Kibana NodeSpecsAssign should specify this field to ``.
         */
        storageSpecName: pulumi.Input<string>;
        /**
         * The type of node, valid values: `Master`, `Hot`, `Cold`, `Warm`, `Kibana`, `Coordinator`.
         */
        type: pulumi.Input<string>;
    }

    export interface EscloudInstanceV2NodeSpecsAssignExtraPerformance {
        /**
         * When your data node chooses to use FlexPL storage type and the storage specification configuration is 500GiB or above, it supports purchasing bandwidth packages to increase disk bandwidth.
         * The unit is MiB, and the adjustment step size is 10MiB.
         */
        throughput: pulumi.Input<number>;
    }

    export interface EscloudInstanceV2Tag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface EscloudInstancesV2Tag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        values: string[];
    }

    export interface EscloudInstancesV2TagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetEscloudInstancesV2Tag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        values: string[];
    }

    export interface GetEscloudInstancesV2TagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace financial_relation {
}

export namespace iam {
}

export namespace kafka {
    export interface GetInstancesTag {
        /**
         * The key of tag.
         */
        key: string;
        /**
         * The value of tag.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The key of tag.
         */
        key: pulumi.Input<string>;
        /**
         * The value of tag.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceParameter {
        /**
         * Parameter name.
         */
        parameterName: pulumi.Input<string>;
        /**
         * Parameter value.
         */
        parameterValue: pulumi.Input<string>;
    }

    export interface InstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The key of tag.
         */
        key: string;
        /**
         * The value of tag.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The key of tag.
         */
        key: pulumi.Input<string>;
        /**
         * The value of tag.
         */
        value: pulumi.Input<string>;
    }

    export interface TopicAccessPolicy {
        /**
         * The access policy of SASL user. Valid values: `PubSub`, `Pub`, `Sub`.
         */
        accessPolicy: pulumi.Input<string>;
        /**
         * The name of SASL user.
         */
        userName: pulumi.Input<string>;
    }

    export interface TopicParameters {
        /**
         * The retention hours of log. Unit: hour. Valid values: 0-2160. Default is 72.
         */
        logRetentionHours?: pulumi.Input<number>;
        /**
         * The max byte of message. Unit: MB. Valid values: 1-12. Default is 10.
         */
        messageMaxByte?: pulumi.Input<number>;
        /**
         * The min number of sync replica. The default value is the replica number minus 1.
         */
        minInsyncReplicaNumber?: pulumi.Input<number>;
    }

}

export namespace kms {
    export interface GetKeysTag {
        /**
         * The key of the tag.
         */
        key: string;
        /**
         * The values of the tag.
         */
        values: string[];
    }

    export interface GetKeysTagArgs {
        /**
         * The key of the tag.
         */
        key: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface KeyMultiRegionConfiguration {
        /**
         * The type of the multi-region key.
         */
        multiRegionKeyType?: pulumi.Input<string>;
        /**
         * Trn and region id of the primary multi-region key.
         */
        primaryKey?: pulumi.Input<inputs.kms.KeyMultiRegionConfigurationPrimaryKey>;
        /**
         * Trn and region id of replica multi-region keys.
         */
        replicaKeys?: pulumi.Input<pulumi.Input<inputs.kms.KeyMultiRegionConfigurationReplicaKey>[]>;
    }

    export interface KeyMultiRegionConfigurationPrimaryKey {
        /**
         * The region id of multi-region key.
         */
        region?: pulumi.Input<string>;
        /**
         * The name of the resource.
         */
        trn?: pulumi.Input<string>;
    }

    export interface KeyMultiRegionConfigurationReplicaKey {
        /**
         * The region id of multi-region key.
         */
        region?: pulumi.Input<string>;
        /**
         * The name of the resource.
         */
        trn?: pulumi.Input<string>;
    }

    export interface KeyTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface KeysTag {
        /**
         * The key of the tag.
         */
        key: string;
        /**
         * The values of the tag.
         */
        values: string[];
    }

    export interface KeysTagArgs {
        /**
         * The key of the tag.
         */
        key: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace mongodb {
    export interface AccountAccountPrivilege {
        /**
         * The name of database.
         */
        dbName: pulumi.Input<string>;
        /**
         * The role names of the account.
         */
        roleNames: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetInstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceMongo {
        /**
         * The mongos node ID.
         */
        mongosNodeId?: pulumi.Input<string>;
        /**
         * The spec of node. When the instanceType is ReplicaSet, this parameter represents the computing node specification of the replica set instance. When the instanceType is ShardedCluster, this parameter represents the specification of the Shard node.
         */
        nodeSpec?: pulumi.Input<string>;
        /**
         * The node status.
         */
        nodeStatus?: pulumi.Input<string>;
    }

    export interface InstanceNodeAvailabilityZone {
        /**
         * The number of readonly nodes in current zone. Currently, only ReplicaSet instances and Shard in ShardedCluster instances support adding readonly nodes.
         * When the instanceType is ReplicaSet, this value represents the total number of readonly nodes in a single replica set instance. Each instance of the replica set supports adding up to 5 readonly nodes.
         * When the instanceType is ShardedCluster, this value represents the number of readonly nodes in each shard. Each shard can add up to 5 readonly nodes.
         */
        nodeNumber: pulumi.Input<number>;
        /**
         * The zone id of readonly nodes.
         */
        zoneId: pulumi.Input<string>;
    }

    export interface InstanceShard {
        /**
         * The shard id.
         */
        shardId?: pulumi.Input<string>;
    }

    export interface InstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface MongoAllowListAssociatedInstance {
        /**
         * The instance id that bound to the allow list.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * The instance name that bound to the allow list.
         */
        instanceName?: pulumi.Input<string>;
        /**
         * The project name of the allow list.
         */
        projectName?: pulumi.Input<string>;
        /**
         * The VPC ID.
         */
        vpc?: pulumi.Input<string>;
    }

}

export namespace nas {
    export interface FileSystemTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface FileSystemsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface FileSystemsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetFileSystemsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetFileSystemsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetPermissionGroupsFilter {
        /**
         * Filters permission groups for specified characteristics based on attributes. The parameters that support filtering are as follows: `PermissionGroupName`, `PermissionGroupId`.
         */
        key: string;
        /**
         * The value of the filter item.
         */
        value: string;
    }

    export interface GetPermissionGroupsFilterArgs {
        /**
         * Filters permission groups for specified characteristics based on attributes. The parameters that support filtering are as follows: `PermissionGroupName`, `PermissionGroupId`.
         */
        key: pulumi.Input<string>;
        /**
         * The value of the filter item.
         */
        value: pulumi.Input<string>;
    }

    export interface PermissionGroupPermissionRule {
        /**
         * Client IP addresses that are allowed access.
         */
        cidrIp: pulumi.Input<string>;
        /**
         * Permission group read and write rules. The value description is as follows:
         * `RW`: Allows reading and writing.
         * `RO`: read-only mode.
         */
        rwMode: pulumi.Input<string>;
        /**
         * Permission group user permissions. The value description is as follows:
         * `All_squash`: All access users are mapped to anonymous users or user groups.
         * `No_all_squash`: The access user is first matched with the local user, and then mapped to an anonymous user or user group after the match fails.
         * `Root_squash`: Map the Root user as an anonymous user or user group.
         * `No_root_squash`: The Root user maintains the Root account authority.
         */
        useMode: pulumi.Input<string>;
    }

    export interface PermissionGroupsFilter {
        /**
         * Filters permission groups for specified characteristics based on attributes. The parameters that support filtering are as follows: `PermissionGroupName`, `PermissionGroupId`.
         */
        key: string;
        /**
         * The value of the filter item.
         */
        value: string;
    }

    export interface PermissionGroupsFilterArgs {
        /**
         * Filters permission groups for specified characteristics based on attributes. The parameters that support filtering are as follows: `PermissionGroupName`, `PermissionGroupId`.
         */
        key: pulumi.Input<string>;
        /**
         * The value of the filter item.
         */
        value: pulumi.Input<string>;
    }

}

export namespace nat {
    export interface GatewayTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GatewaysTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GatewaysTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetGatewaysTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetGatewaysTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace organization {
    export interface AccountTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace private_zone {
    export interface GetPrivateZonesTagFilter {
        /**
         * The key of the tag.
         */
        key?: string;
        /**
         * The values of the tag.
         */
        values?: string[];
    }

    export interface GetPrivateZonesTagFilterArgs {
        /**
         * The key of the tag.
         */
        key?: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetResolverEndpointsTagFilter {
        /**
         * The key of the tag.
         */
        key?: string;
        /**
         * The values of the tag.
         */
        values?: string[];
    }

    export interface GetResolverEndpointsTagFilterArgs {
        /**
         * The key of the tag.
         */
        key?: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetResolverRulesTagFilter {
        /**
         * The key of the tag.
         */
        key?: string;
        /**
         * The values of the tag.
         */
        values?: string[];
    }

    export interface GetResolverRulesTagFilterArgs {
        /**
         * The key of the tag.
         */
        key?: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface PrivateZoneTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface PrivateZoneVpc {
        /**
         * The region of the bind vpc. The default value is the region of the default provider config.
         */
        region?: pulumi.Input<string>;
        /**
         * The id of the bind vpc.
         */
        vpcId: pulumi.Input<string>;
    }

    export interface PrivateZonesTagFilter {
        /**
         * The key of the tag.
         */
        key?: string;
        /**
         * The values of the tag.
         */
        values?: string[];
    }

    export interface PrivateZonesTagFilterArgs {
        /**
         * The key of the tag.
         */
        key?: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ResolverEndpointIpConfig {
        /**
         * Id of the availability zone.
         */
        azId: pulumi.Input<string>;
        /**
         * Source IP address of traffic. You can add up to 6 IP addresses at most. To ensure high availability, you must add at least two IP addresses.
         */
        ip: pulumi.Input<string>;
        /**
         * Id of the subnet.
         */
        subnetId: pulumi.Input<string>;
    }

    export interface ResolverEndpointTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ResolverEndpointsTagFilter {
        /**
         * The key of the tag.
         */
        key?: string;
        /**
         * The values of the tag.
         */
        values?: string[];
    }

    export interface ResolverEndpointsTagFilterArgs {
        /**
         * The key of the tag.
         */
        key?: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ResolverRuleForwardIp {
        /**
         * IP address of the external DNS server. This parameter is only valid when the Type parameter is OUTBOUND and is a required parameter.
         */
        ip: pulumi.Input<string>;
        /**
         * The port of the external DNS server. Default is 53. This parameter is only valid and optional when the Type parameter is OUTBOUND.
         */
        port?: pulumi.Input<number>;
    }

    export interface ResolverRuleTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ResolverRuleVpc {
        /**
         * The region of the bind vpc. The default value is the region of the default provider config.
         */
        region?: pulumi.Input<string>;
        /**
         * The id of the bind vpc.
         */
        vpcId: pulumi.Input<string>;
    }

    export interface ResolverRulesTagFilter {
        /**
         * The key of the tag.
         */
        key?: string;
        /**
         * The values of the tag.
         */
        values?: string[];
    }

    export interface ResolverRulesTagFilterArgs {
        /**
         * The key of the tag.
         */
        key?: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }
}

export namespace privatelink {
    export interface VpcEndpointConnectionZone {
        /**
         * The id of the network interface.
         */
        networkInterfaceId?: pulumi.Input<string>;
        /**
         * The ip address of the network interface.
         */
        networkInterfaceIp?: pulumi.Input<string>;
        /**
         * The id of the resource.
         */
        resourceId?: pulumi.Input<string>;
        /**
         * The id of the subnet.
         */
        subnetId?: pulumi.Input<string>;
        /**
         * The domain of the zone.
         */
        zoneDomain?: pulumi.Input<string>;
        /**
         * The id of the zone.
         */
        zoneId?: pulumi.Input<string>;
        /**
         * The status of the zone.
         */
        zoneStatus?: pulumi.Input<string>;
    }

    export interface VpcEndpointServiceResource {
        /**
         * The id of resource.
         */
        resourceId: pulumi.Input<string>;
        /**
         * The type of resource.
         */
        resourceType: pulumi.Input<string>;
    }

}

export namespace rabbitmq {
    export interface GetInstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceChargeInfo {
        /**
         * Whether to automatically renew in prepaid scenarios. Default is false.
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * The charge type of the rabbitmq instance. Valid values: `PostPaid`, `PrePaid`.
         */
        chargeType: pulumi.Input<string>;
        /**
         * Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Month`, the value range is 1-9. When PeriodUnit is specified as `Year`, the value range is 1-3. Default is 1.
         */
        period?: pulumi.Input<number>;
        /**
         * The purchase cycle in the prepaid scenario. Valid values: `Month`, `Year`. Default is `Month`.
         */
        periodUnit?: pulumi.Input<string>;
    }

    export interface InstanceEndpoint {
        /**
         * The endpoint type of the rabbitmq instance.
         */
        endpointType?: pulumi.Input<string>;
        /**
         * The internal endpoint of the rabbitmq instance.
         */
        internalEndpoint?: pulumi.Input<string>;
        /**
         * The network type of the rabbitmq instance.
         */
        networkType?: pulumi.Input<string>;
        /**
         * The public endpoint of the rabbitmq instance.
         */
        publicEndpoint?: pulumi.Input<string>;
    }

    export interface InstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace rds {
    export interface AccountPrivilegeDbPrivilege {
        /**
         * The privilege type of the account.
         */
        accountPrivilege: pulumi.Input<string>;
        /**
         * The privilege string of the account.
         */
        accountPrivilegeStr?: pulumi.Input<string>;
        /**
         * The name of database.
         */
        dbName: pulumi.Input<string>;
    }

    export interface InstanceConnectionInfo {
        /**
         * Whether global read-only is enabled.
         */
        enableReadOnly?: pulumi.Input<string>;
        /**
         * Whether read-write separation is enabled.
         */
        enableReadWriteSplitting?: pulumi.Input<string>;
        /**
         * The internal domain of the RDS instance.
         */
        internalDomain?: pulumi.Input<string>;
        /**
         * The interval port of the RDS instance.
         */
        internalPort?: pulumi.Input<string>;
        /**
         * The public domain of the RDS instance.
         */
        publicDomain?: pulumi.Input<string>;
        /**
         * The public port of the RDS instance.
         */
        publicPort?: pulumi.Input<string>;
    }

    export interface ParameterTemplateTemplateParam {
        /**
         * Parameter name.
         */
        name?: pulumi.Input<string>;
        /**
         * Parameter running value.
         */
        runningValue?: pulumi.Input<string>;
    }

}

export namespace rds_mssql {
    export interface BackupBackupMeta {
        /**
         * The name of the database.
         */
        dbName: pulumi.Input<string>;
    }

    export interface GetInstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceChargeInfo {
        /**
         * Whether to enable automatic renewal in the prepaid scenario. This parameter can be set when the ChargeType is `Prepaid`.
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * Charge end time.
         */
        chargeEndTime?: pulumi.Input<string>;
        /**
         * Charge start time.
         */
        chargeStartTime?: pulumi.Input<string>;
        /**
         * The charge status.
         */
        chargeStatus?: pulumi.Input<string>;
        /**
         * The charge type. Valid values: `PostPaid`, `PrePaid`.
         */
        chargeType: pulumi.Input<string>;
        /**
         * Expected release time when overdue fees are shut down.
         */
        overdueReclaimTime?: pulumi.Input<string>;
        /**
         * Time for Disconnection due to Unpaid Fees.
         */
        overdueTime?: pulumi.Input<string>;
        /**
         * Purchase duration in a prepaid scenario. This parameter is required when the ChargeType is `Prepaid`.
         */
        period?: pulumi.Input<number>;
    }

    export interface InstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace rds_mysql {
    export interface AccountAccountPrivilege {
        /**
         * The privilege type of the account.
         */
        accountPrivilege: pulumi.Input<string>;
        /**
         * The privilege detail of the account.
         */
        accountPrivilegeDetail?: pulumi.Input<string>;
        /**
         * The name of database.
         */
        dbName: pulumi.Input<string>;
    }

    export interface AccountTableColumnPrivilege {
        /**
         * Column permission information of the account.
         */
        columnPrivileges?: pulumi.Input<pulumi.Input<inputs.rds_mysql.AccountTableColumnPrivilegeColumnPrivilege>[]>;
        /**
         * Settings for table column permissions of the account.
         */
        dbName: pulumi.Input<string>;
        /**
         * Table permission information of the account.
         */
        tablePrivileges?: pulumi.Input<pulumi.Input<inputs.rds_mysql.AccountTableColumnPrivilegeTablePrivilege>[]>;
    }

    export interface AccountTableColumnPrivilegeColumnPrivilege {
        /**
         * Table privileges of the account.
         */
        accountPrivilegeDetail?: pulumi.Input<string>;
        /**
         * The name of the column for setting permissions on the account.
         */
        columnName: pulumi.Input<string>;
        /**
         * The name of the table for setting permissions on the account.
         */
        tableName: pulumi.Input<string>;
    }

    export interface AccountTableColumnPrivilegeTablePrivilege {
        /**
         * Table privileges of the account.
         */
        accountPrivilegeDetail?: pulumi.Input<string>;
        /**
         * The name of the table for setting permissions on the account.
         */
        tableName: pulumi.Input<string>;
    }

    export interface AllowlistSecurityGroupBindInfo {
        /**
         * The schema for the associated security group.
         * IngressDirectionIp: Incoming Direction IP.
         * AssociateEcsIp: Associate ECSIP.
         * explain: In the CreateAllowList interface, SecurityGroupBindInfoObject BindMode and SecurityGroupId fields are required.
         */
        bindMode: pulumi.Input<string>;
        /**
         * The security group id of the allow list.
         */
        securityGroupId: pulumi.Input<string>;
    }

    export interface BackupBackupMeta {
        /**
         * Specify the database that needs to be backed up.
         */
        dbName: pulumi.Input<string>;
        /**
         * Specify the tables to be backed up in the specified database. When this field is empty, it defaults to full database backup.
         */
        tableNames?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface BackupPolicyCrossBackupPolicy {
        /**
         * Whether to enable cross-region backup.
         * true: Enable.
         * false: Disable. Default value.
         */
        backupEnabled?: pulumi.Input<boolean>;
        /**
         * The destination region ID for cross-region backup. When the value of BackupEnabled is true, this parameter is required.
         */
        crossBackupRegion?: pulumi.Input<string>;
        /**
         * Whether to enable cross-region log backup. true: Enable. false: Disable. Default value. Description: Cross-region log backup can only be enabled when cross-region backup is enabled.
         */
        logBackupEnabled?: pulumi.Input<boolean>;
        /**
         * The number of days to retain cross - region backups, with a value range of 7 to 1825 days.
         */
        retention?: pulumi.Input<number>;
    }

    export interface EndpointReadOnlyNodeWeight {
        /**
         * Read-only nodes require NodeId to be passed, while primary nodes do not require it.
         */
        nodeId?: pulumi.Input<string>;
        /**
         * The primary node needs to pass in the NodeType as Primary, while the read-only node does not need to pass it in.
         */
        nodeType?: pulumi.Input<string>;
        /**
         * The read weight of the node increases by 100, with a maximum value of 10000.
         */
        weight: pulumi.Input<number>;
    }

    export interface GetInstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceAutoStorageScalingConfig {
        /**
         * Whether to enable the instance's auto - scaling function. Values:
         * true: Yes.
         * false: No. Description: When StorageConfig is used as a request parameter, if the value of EnableStorageAutoScale is false, the StorageThreshold and StorageUpperBound parameters do not need to be passed in.
         */
        enableStorageAutoScale: pulumi.Input<boolean>;
        /**
         * The proportion of available storage space that triggers automatic expansion. The value range is 10 to 50, and the default value is 10, with the unit being %.
         */
        storageThreshold?: pulumi.Input<number>;
        /**
         * The upper limit of the storage space that can be automatically expanded. The lower limit of the value of this field is the instance storage space + 20GB; the upper limit of the value is the upper limit of the storage space value range corresponding to the instance master node specification, with the unit being GB. For detailed information on the selectable storage space value range of different specifications, please refer to Product Specifications.
         */
        storageUpperBound?: pulumi.Input<number>;
    }

    export interface InstanceChargeDetail {
        /**
         * Whether to automatically renew in prepaid scenarios.
         * Autorenew_Enable
         * Autorenew_Disable (default).
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * Billing expiry time (yearly and monthly only).
         */
        chargeEndTime?: pulumi.Input<string>;
        /**
         * Billing start time (pay-as-you-go & monthly subscription).
         */
        chargeStartTime?: pulumi.Input<string>;
        /**
         * Pay status. Value:
         * normal - normal
         * overdue - overdue
         * .
         */
        chargeStatus?: pulumi.Input<string>;
        /**
         * Payment type. Value:
         * PostPaid - Pay-As-You-Go
         * PrePaid - Yearly and monthly (default).
         */
        chargeType?: pulumi.Input<string>;
        /**
         * Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
         */
        overdueReclaimTime?: pulumi.Input<string>;
        /**
         * Shutdown time in arrears (pay-as-you-go & monthly subscription).
         */
        overdueTime?: pulumi.Input<string>;
        /**
         * Purchase duration in prepaid scenarios. Default: 1.
         */
        period?: pulumi.Input<number>;
        /**
         * The purchase cycle in the prepaid scenario.
         * Month - monthly subscription (default)
         * Year - Package year.
         */
        periodUnit?: pulumi.Input<string>;
        /**
         * Restore time of temporary upgrade.
         */
        tempModifyEndTime?: pulumi.Input<string>;
        /**
         * Temporary upgrade start time.
         */
        tempModifyStartTime?: pulumi.Input<string>;
    }

    export interface InstanceChargeInfo {
        /**
         * Whether to automatically renew in prepaid scenarios.
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * Payment type. Value:
         * PostPaid - Pay-As-You-Go
         * PrePaid - Yearly and monthly (default).
         */
        chargeType: pulumi.Input<string>;
        /**
         * Purchase duration in prepaid scenarios. Default: 1.
         */
        period?: pulumi.Input<number>;
        /**
         * The purchase cycle in the prepaid scenario.
         * Month - monthly subscription (default)
         * Year - Package year.
         */
        periodUnit?: pulumi.Input<string>;
    }

    export interface InstanceEndpoint {
        /**
         * Address list.
         */
        addresses?: pulumi.Input<pulumi.Input<inputs.rds_mysql.InstanceEndpointAddress>[]>;
        /**
         * When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
         */
        autoAddNewNodes?: pulumi.Input<string>;
        /**
         * Address description.
         */
        description?: pulumi.Input<string>;
        /**
         * Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
         */
        enableReadOnly?: pulumi.Input<string>;
        /**
         * Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
         */
        enableReadWriteSplitting?: pulumi.Input<string>;
        /**
         * Instance connection terminal ID.
         */
        endpointId?: pulumi.Input<string>;
        /**
         * The instance connection terminal name.
         */
        endpointName?: pulumi.Input<string>;
        /**
         * Terminal type:
         * Cluster: The default terminal. (created by default)
         * Primary: Primary node terminal.
         * Custom: Custom terminal.
         * Direct: Direct connection to the terminal. (Only the operation and maintenance side)
         * AllNode: All node terminals. (Only the operation and maintenance side).
         */
        endpointType?: pulumi.Input<string>;
        /**
         * Whether the idle connection reclaim function is enabled. true: Enabled. false: Disabled.
         */
        idleConnectionReclaim?: pulumi.Input<boolean>;
        /**
         * The list of nodes configured by the connection terminal and the corresponding read-only weights.
         */
        nodeWeights?: pulumi.Input<pulumi.Input<inputs.rds_mysql.InstanceEndpointNodeWeight>[]>;
        /**
         * Read and write mode:
         * ReadWrite: read and write
         * ReadOnly: read only (default).
         */
        readWriteMode?: pulumi.Input<string>;
    }

    export interface InstanceEndpointAddress {
        /**
         * DNS Visibility.
         */
        dnsVisibility?: pulumi.Input<boolean>;
        /**
         * Connect domain name.
         */
        domain?: pulumi.Input<string>;
        /**
         * The ID of the EIP, only valid for Public addresses.
         */
        eipId?: pulumi.Input<string>;
        /**
         * The IP Address.
         */
        ipAddress?: pulumi.Input<string>;
        /**
         * Network address type, temporarily Private, Public, PublicService.
         */
        networkType?: pulumi.Input<string>;
        /**
         * The Port.
         */
        port?: pulumi.Input<string>;
        /**
         * Subnet ID of the RDS instance.
         */
        subnetId?: pulumi.Input<string>;
    }

    export interface InstanceEndpointNodeWeight {
        /**
         * Node ID.
         */
        nodeId?: pulumi.Input<string>;
        /**
         * Node type. Value: Primary: Primary node.
         * Secondary: Standby node.
         * ReadOnly: Read-only node.
         */
        nodeType?: pulumi.Input<string>;
        /**
         * The weight of the node.
         */
        weight?: pulumi.Input<number>;
    }

    export interface InstanceFeatureState {
        /**
         * Whether it is enabled. Values:
         * true: Enabled.
         * false: Disabled.
         */
        enable?: pulumi.Input<boolean>;
        /**
         * Feature name.
         */
        featureName?: pulumi.Input<string>;
        /**
         * Whether it support this function. Value:
         * true: Supported.
         * false: Not supported.
         */
        support?: pulumi.Input<boolean>;
    }

    export interface InstanceMaintenanceWindow {
        /**
         * Maintenance cycle granularity, values: Week: Week. Month: Month.
         */
        dayKind?: pulumi.Input<string>;
        /**
         * Specify the maintainable time period of a certain day of the week. The values are: Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday. Multiple selections are allowed. If this value is not specified or is empty, it defaults to specifying all seven days of the week.
         */
        dayOfWeeks?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Maintenance period of an instance. Format: HH:mmZ-HH:mmZ (UTC time).
         */
        maintenanceTime?: pulumi.Input<string>;
    }

    export interface InstanceNode {
        /**
         * Node creation local time.
         */
        createTime?: pulumi.Input<string>;
        /**
         * Instance ID.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * Memory size in GB.
         */
        memory?: pulumi.Input<number>;
        /**
         * Node ID.
         */
        nodeId?: pulumi.Input<string>;
        /**
         * The specification of primary node and secondary node.
         */
        nodeSpec?: pulumi.Input<string>;
        /**
         * Node state, value: aligned with instance state.
         */
        nodeStatus?: pulumi.Input<string>;
        /**
         * Node type. Value: Primary: Primary node.
         * Secondary: Standby node.
         * ReadOnly: Read-only node.
         */
        nodeType?: pulumi.Input<string>;
        /**
         * The region of the RDS instance.
         */
        regionId?: pulumi.Input<string>;
        /**
         * The update time of the RDS instance.
         */
        updateTime?: pulumi.Input<string>;
        /**
         * CPU size.
         */
        vCpu?: pulumi.Input<number>;
        /**
         * The available zone of the RDS instance.
         */
        zoneId?: pulumi.Input<string>;
    }

    export interface InstanceParameter {
        /**
         * Parameter name.
         */
        parameterName: pulumi.Input<string>;
        /**
         * Parameter value.
         */
        parameterValue: pulumi.Input<string>;
    }

    export interface InstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ParameterTemplateTemplateParam {
        /**
         * Instance parameter name.
         * Description: When using CreateParameterTemplate and ModifyParameterTemplate as request parameters, only Name and RunningValue need to be passed in.
         */
        name: pulumi.Input<string>;
        /**
         * Parameter running value.
         * Description: When making request parameters in CreateParameterTemplate and ModifyParameterTemplate, only Name and RunningValue need to be passed in.
         */
        runningValue: pulumi.Input<string>;
    }

}

export namespace rds_postgresql {
    export interface AllowlistAssociatedInstance {
        /**
         * The id of the postgresql instance.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * The name of the postgresql instance.
         */
        instanceName?: pulumi.Input<string>;
        /**
         * The id of the vpc.
         */
        vpc?: pulumi.Input<string>;
    }

    export interface GetInstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceChargeDetail {
        /**
         * Whether to automatically renew in prepaid scenarios.
         * Autorenew_Enable
         * Autorenew_Disable (default).
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * Billing expiry time (yearly and monthly only).
         */
        chargeEndTime?: pulumi.Input<string>;
        /**
         * Billing start time (pay-as-you-go & monthly subscription).
         */
        chargeStartTime?: pulumi.Input<string>;
        /**
         * Pay status. Value:
         * normal - normal
         * overdue - overdue
         * .
         */
        chargeStatus?: pulumi.Input<string>;
        /**
         * Payment type. Value:
         * PostPaid - Pay-As-You-Go
         * PrePaid - Yearly and monthly (default).
         */
        chargeType?: pulumi.Input<string>;
        /**
         * Estimated release time when arrears are closed (pay-as-you-go & monthly subscription).
         */
        overdueReclaimTime?: pulumi.Input<string>;
        /**
         * Shutdown time in arrears (pay-as-you-go & monthly subscription).
         */
        overdueTime?: pulumi.Input<string>;
        /**
         * Purchase duration in prepaid scenarios. Default: 1.
         */
        period?: pulumi.Input<number>;
        /**
         * The purchase cycle in the prepaid scenario.
         * Month - monthly subscription (default)
         * Year - Package year.
         */
        periodUnit?: pulumi.Input<string>;
        /**
         * Temporary upgrade of restoration time.
         */
        tempModifyEndTime?: pulumi.Input<string>;
        /**
         * Start time of temporary upgrade.
         */
        tempModifyStartTime?: pulumi.Input<string>;
    }

    export interface InstanceChargeInfo {
        /**
         * Whether to automatically renew in prepaid scenarios.
         */
        autoRenew?: pulumi.Input<boolean>;
        chargeType: pulumi.Input<string>;
        /**
         * Purchase duration in prepaid scenarios. Default: 1.
         */
        period?: pulumi.Input<number>;
        /**
         * The purchase cycle in the prepaid scenario.
         * Month - monthly subscription (default)
         * Year - Package year.
         */
        periodUnit?: pulumi.Input<string>;
    }

    export interface InstanceEndpoint {
        /**
         * Address list.
         */
        addresses?: pulumi.Input<pulumi.Input<inputs.rds_postgresql.InstanceEndpointAddress>[]>;
        /**
         * When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
         */
        autoAddNewNodes?: pulumi.Input<string>;
        /**
         * Address description.
         */
        description?: pulumi.Input<string>;
        /**
         * Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
         */
        enableReadOnly?: pulumi.Input<string>;
        /**
         * Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
         */
        enableReadWriteSplitting?: pulumi.Input<string>;
        /**
         * Instance connection terminal ID.
         */
        endpointId?: pulumi.Input<string>;
        /**
         * The instance connection terminal name.
         */
        endpointName?: pulumi.Input<string>;
        /**
         * Terminal type:
         * Cluster: The default terminal. (created by default)
         * Primary: Primary node terminal.
         * Custom: Custom terminal.
         * Direct: Direct connection to the terminal. (Only the operation and maintenance side)
         * AllNode: All node terminals. (Only the operation and maintenance side).
         */
        endpointType?: pulumi.Input<string>;
        /**
         * The list of nodes configured by the connection terminal and the corresponding read-only weights.
         */
        readOnlyNodeWeights?: pulumi.Input<pulumi.Input<inputs.rds_postgresql.InstanceEndpointReadOnlyNodeWeight>[]>;
        /**
         * Read and write mode:
         * ReadWrite: read and write
         * ReadOnly: read only (default).
         */
        readWriteMode?: pulumi.Input<string>;
    }

    export interface InstanceEndpointAddress {
        /**
         * DNS Visibility.
         */
        dnsVisibility?: pulumi.Input<boolean>;
        /**
         * Connect domain name.
         */
        domain?: pulumi.Input<string>;
        /**
         * The ID of the EIP, only valid for Public addresses.
         */
        eipId?: pulumi.Input<string>;
        /**
         * The IP Address.
         */
        ipAddress?: pulumi.Input<string>;
        /**
         * Network address type, temporarily Private, Public, PublicService.
         */
        networkType?: pulumi.Input<string>;
        /**
         * The Port.
         */
        port?: pulumi.Input<string>;
        /**
         * Subnet ID of the RDS PostgreSQL instance.
         */
        subnetId?: pulumi.Input<string>;
    }

    export interface InstanceEndpointReadOnlyNodeWeight {
        /**
         * Node ID.
         */
        nodeId?: pulumi.Input<string>;
        /**
         * Node type. Value: Primary: Primary node.
         * Secondary: Standby node.
         * ReadOnly: Read-only node.
         */
        nodeType?: pulumi.Input<string>;
        /**
         * The weight of the node.
         */
        weight?: pulumi.Input<number>;
    }

    export interface InstanceNode {
        /**
         * Node creation local time.
         */
        createTime?: pulumi.Input<string>;
        /**
         * Instance ID.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * Memory size in GB.
         */
        memory?: pulumi.Input<number>;
        /**
         * Node ID.
         */
        nodeId?: pulumi.Input<string>;
        /**
         * The specification of primary node and secondary node.
         */
        nodeSpec?: pulumi.Input<string>;
        /**
         * Node state, value: aligned with instance state.
         */
        nodeStatus?: pulumi.Input<string>;
        /**
         * Node type. Value: Primary: Primary node.
         * Secondary: Standby node.
         * ReadOnly: Read-only node.
         */
        nodeType?: pulumi.Input<string>;
        /**
         * The region of the RDS PostgreSQL instance.
         */
        regionId?: pulumi.Input<string>;
        /**
         * The update time of the RDS PostgreSQL instance.
         */
        updateTime?: pulumi.Input<string>;
        /**
         * CPU size.
         */
        vCpu?: pulumi.Input<number>;
        /**
         * The available zone of the RDS PostgreSQL instance.
         */
        zoneId?: pulumi.Input<string>;
    }

    export interface InstanceParameter {
        /**
         * Parameter name.
         */
        name: pulumi.Input<string>;
        /**
         * Parameter value.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace rds_v2 {
    export interface RdsInstanceV2ChargeInfo {
        /**
         * Whether to automatically renew in prepaid scenarios.
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * Payment type. Value:
         * PostPaid - Pay-As-You-Go
         * PrePaid - Yearly and monthly (default).
         */
        chargeType: pulumi.Input<string>;
        /**
         * Purchase duration in prepaid scenarios. Default: 1.
         */
        period?: pulumi.Input<number>;
        /**
         * The purchase cycle in the prepaid scenario.
         * Month - monthly subscription (default)
         * Year - Package year.
         */
        periodUnit?: pulumi.Input<string>;
    }

    export interface RdsInstanceV2ConnectionInfo {
        /**
         * Address list.
         */
        addresses?: pulumi.Input<pulumi.Input<inputs.rds_v2.RdsInstanceV2ConnectionInfoAddress>[]>;
        /**
         * When the terminal type is read-write terminal or read-only terminal, it supports setting whether new nodes are automatically added.
         */
        autoAddNewNodes?: pulumi.Input<string>;
        /**
         * Address description.
         */
        description?: pulumi.Input<string>;
        /**
         * Whether global read-only is enabled, value: Enable: Enable. Disable: Disabled.
         */
        enableReadOnly?: pulumi.Input<string>;
        /**
         * Whether read-write separation is enabled, value: Enable: Enable. Disable: Disabled.
         */
        enableReadWriteSplitting?: pulumi.Input<string>;
        /**
         * Instance connection terminal ID.
         */
        endpointId?: pulumi.Input<string>;
        /**
         * The instance connection terminal name.
         */
        endpointName?: pulumi.Input<string>;
        /**
         * Terminal type:
         * Cluster: The default terminal. (created by default)
         * Primary: Primary node terminal.
         * Custom: Custom terminal.
         * Direct: Direct connection to the terminal. (Only the operation and maintenance side)
         * AllNode: All node terminals. (Only the operation and maintenance side).
         */
        endpointType?: pulumi.Input<string>;
        /**
         * The list of nodes configured by the connection terminal and the corresponding read-only weights.
         */
        readOnlyNodeWeights?: pulumi.Input<pulumi.Input<inputs.rds_v2.RdsInstanceV2ConnectionInfoReadOnlyNodeWeight>[]>;
        /**
         * Read and write mode:
         * ReadWrite: read and write
         * ReadOnly: read only (default).
         */
        readWriteMode?: pulumi.Input<string>;
    }

    export interface RdsInstanceV2ConnectionInfoAddress {
        /**
         * Connect domain name.
         */
        domain?: pulumi.Input<string>;
        /**
         * The ID of the EIP, only valid for Public addresses.
         */
        eipId?: pulumi.Input<string>;
        /**
         * The IP Address.
         */
        ipAddress?: pulumi.Input<string>;
        /**
         * Network address type, temporarily Private, Public, PublicService.
         */
        networkType?: pulumi.Input<string>;
        /**
         * The Port.
         */
        port?: pulumi.Input<string>;
        /**
         * Subnet ID.
         */
        subnetId?: pulumi.Input<string>;
    }

    export interface RdsInstanceV2ConnectionInfoReadOnlyNodeWeight {
        /**
         * The ID of the node.
         */
        nodeId?: pulumi.Input<string>;
        /**
         * The type of the node.
         */
        nodeType?: pulumi.Input<string>;
        /**
         * The weight of the node.
         */
        weight?: pulumi.Input<number>;
    }

    export interface RdsInstanceV2NodeInfo {
        /**
         * The ID of the node.
         */
        nodeId?: pulumi.Input<string>;
        /**
         * Masternode specs. Pass
         * DescribeDBInstanceSpecs Query the instance specifications that can be sold.
         */
        nodeSpec: pulumi.Input<string>;
        /**
         * Node type, the value is "Primary", "Secondary", "ReadOnly".
         */
        nodeType: pulumi.Input<string>;
        /**
         * Zone ID.
         */
        zoneId: pulumi.Input<string>;
    }

}

export namespace redis {
    export interface AllowListAssociatedInstance {
        /**
         * Id of instance.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * Name of instance.
         */
        instanceName?: pulumi.Input<string>;
        /**
         * Id of virtual private cloud.
         */
        vpc?: pulumi.Input<string>;
    }

    export interface AllowListSecurityGroupBindInfo {
        /**
         * Security group association mode. The value range is as follows: IngressDirectionIp: The input direction IP, which is the IP involved in the TCP protocol and ALL protocol in the source address of the secure group input direction to access the database. If the source address is configured as a secure group, it will be ignored. AssociateEcsIp: Associate ECS IP, which allows cloud servers within the security group to access the database. Currently, only the IP information of the main network card is supported for import.
         */
        bindMode?: pulumi.Input<string>;
        /**
         * The list of ips in the associated security group has been linked.
         */
        ipLists?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The associated security group ID.
         */
        securityGroupId?: pulumi.Input<string>;
        /**
         * The name of the associated security group.
         */
        securityGroupName?: pulumi.Input<string>;
    }

    export interface BackupBackupPointDownloadUrl {
        /**
         * The private network download address for RDB files.
         */
        privateDownloadUrl?: pulumi.Input<string>;
        /**
         * The public network download address for RDB files.
         */
        publicDownloadUrl?: pulumi.Input<string>;
        /**
         * RDB file size, unit: Byte.
         */
        rdbFileSize?: pulumi.Input<number>;
        /**
         * The shard ID where the RDB file is located.
         */
        shardId?: pulumi.Input<string>;
    }

    export interface BackupInstanceInfo {
        /**
         * Id of account.
         */
        accountId?: pulumi.Input<number>;
        /**
         * Arch type of instance(Standard/Cluster).
         */
        archType?: pulumi.Input<string>;
        /**
         * Charge type of instance(Postpaid/Prepaid).
         */
        chargeType?: pulumi.Input<string>;
        /**
         * The status of the deletion protection function of the instance.
         */
        deletionProtection?: pulumi.Input<string>;
        /**
         * Engine version of instance.
         */
        engineVersion?: pulumi.Input<string>;
        /**
         * Expired time of instance.
         */
        expiredTime?: pulumi.Input<string>;
        /**
         * Id of instance to create backup.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * Name of instance.
         */
        instanceName?: pulumi.Input<string>;
        /**
         * The maintainable period (in UTC) of the instance.
         */
        maintenanceTime?: pulumi.Input<string>;
        /**
         * Network type of instance.
         */
        networkType?: pulumi.Input<string>;
        /**
         * Id of region.
         */
        regionId?: pulumi.Input<string>;
        /**
         * Count of replica in which shard.
         */
        replicas?: pulumi.Input<number>;
        /**
         * Capacity of shard.
         */
        shardCapacity?: pulumi.Input<number>;
        /**
         * The number of shards in the instance.
         */
        shardNumber?: pulumi.Input<number>;
        /**
         * Total capacity of instance.
         */
        totalCapacity?: pulumi.Input<number>;
        /**
         * The private network ID of the instance.
         */
        vpcId?: pulumi.Input<string>;
        /**
         * List of id of zone.
         */
        zoneIds?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetInstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceConfigureNode {
        /**
         * Set the availability zone to which the node belongs. The number of nodes of an instance (i.e., NodeNumber) and the availability zone deployment scheme (i.e., the value of the MultiAZ parameter) will affect the filling of the current parameter. Among them:
         * When a new instance is a single-node instance (i.e., the value of NodeNumber is 1), only a single availability zone deployment scheme is allowed (i.e., the value of MultiAZ must be disabled). At this time, only one availability zone needs to be passed in AZ, and all nodes in the instance will be deployed in this availability zone. When creating a new instance as a primary-standby instance (that is, when the value of NodeNumber is greater than or equal to 2), the number of availability zones passed in must be equal to the number of nodes in a single shard (that is, the value of the NodeNumber parameter), and the value of AZ must comply with the multi-availability zone deployment scheme rules. The specific rules are as follows: If the primary-standby instance selects the multi-availability zone deployment scheme (that is, the value of MultiAZ is enabled), then at least two different availability zone IDs must be passed in in AZ, and the first availability zone is the availability zone where the primary node is located. If the primary and standby instances choose a single availability zone deployment scheme (that is, the value of MultiAZ is disabled), then the availability zones passed in for each node must be the same.
         */
        az: pulumi.Input<string>;
    }

    export interface InstanceParamValue {
        /**
         * The name of configuration parameter.
         */
        name: pulumi.Input<string>;
        /**
         * The value of configuration parameter.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ParameterGroupParamValue {
        /**
         * The parameter names that need to be included in the parameter template.
         */
        name: pulumi.Input<string>;
        /**
         * The parameter values set for the corresponding parameters.
         */
        value: pulumi.Input<string>;
    }

}

export namespace rocketmq {
    export interface GetInstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface RocketMQAccessKeyTopicPermission {
        /**
         * The custom authority for the topic.
         */
        permission?: pulumi.Input<string>;
        /**
         * The name of the rocketmq topic.
         */
        topicName?: pulumi.Input<string>;
    }

    export interface RocketMQAllowListAssociatedInstance {
        /**
         * The id of the rocketmq instance.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * The name of the rocketmq instance.
         */
        instanceName?: pulumi.Input<string>;
        /**
         * The vpc id of the rocketmq instance.
         */
        vpc?: pulumi.Input<string>;
    }

    export interface RocketMQInstanceChargeInfo {
        /**
         * Whether to automatically renew in prepaid scenarios. Default is false.
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * The charge type of the rocketmq instance. Valid values: `PostPaid`, `PrePaid`.
         */
        chargeType: pulumi.Input<string>;
        /**
         * Purchase duration in prepaid scenarios. When PeriodUnit is specified as `Monthly`, the value range is 1-9. When PeriodUnit is specified as `Yearly`, the value range is 1-3. Default is 1.
         */
        period?: pulumi.Input<number>;
        /**
         * The purchase cycle in the prepaid scenario. Valid values: `Monthly`, `Yearly`. Default is `Monthly`.
         */
        periodUnit?: pulumi.Input<string>;
    }

    export interface RocketMQInstanceConnectionInfo {
        /**
         * The endpoint address ip of the rocketmq.
         */
        endpointAddressIp?: pulumi.Input<string>;
        /**
         * The endpoint type of the rocketmq.
         */
        endpointType?: pulumi.Input<string>;
        /**
         * The internal endpoint of the rocketmq.
         */
        internalEndpoint?: pulumi.Input<string>;
        /**
         * The network type of the rocketmq.
         */
        networkType?: pulumi.Input<string>;
        /**
         * The public endpoint of the rocketmq.
         */
        publicEndpoint?: pulumi.Input<string>;
    }

    export interface RocketMQInstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface RocketMQTopicAccessPolicy {
        /**
         * The access key of the rocketmq key.
         */
        accessKey: pulumi.Input<string>;
        /**
         * The authority of the rocketmq key for the current topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
         */
        authority: pulumi.Input<string>;
    }

    export interface RocketMQTopicGroup {
        /**
         * The id of the rocketmq group.
         */
        groupId?: pulumi.Input<string>;
        /**
         * The message model of the rocketmq group.
         */
        messageModel?: pulumi.Input<string>;
        /**
         * The sub string of the rocketmq group.
         */
        subString?: pulumi.Input<string>;
    }

    export interface RocketMQTopicQueue {
        /**
         * The end offset of the rocketmq queue.
         */
        endOffset?: pulumi.Input<number>;
        /**
         * The last update timestamp of the rocketmq queue.
         */
        lastUpdateTimestamp?: pulumi.Input<number>;
        /**
         * The message count of the rocketmq queue.
         */
        messageCount?: pulumi.Input<number>;
        /**
         * The id of the rocketmq queue.
         */
        queueId?: pulumi.Input<string>;
        /**
         * The start offset of the rocketmq queue.
         */
        startOffset?: pulumi.Input<number>;
    }

}

export namespace tls {
    export interface AlarmAlarmPeriodDetail {
        /**
         * Email alarm period, the unit is minutes, and the value range is 1~1440.
         */
        email: pulumi.Input<number>;
        /**
         * Customize the webhook alarm period, the unit is minutes, and the value range is 1~1440.
         */
        generalWebhook: pulumi.Input<number>;
        /**
         * Telephone alarm cycle, the unit is minutes, and the value range is 10~1440.
         */
        phone: pulumi.Input<number>;
        /**
         * SMS alarm cycle, the unit is minutes, and the value range is 10~1440.
         */
        sms: pulumi.Input<number>;
    }

    export interface AlarmNotifyGroupReceiver {
        /**
         * The end time.
         */
        endTime: pulumi.Input<string>;
        /**
         * The list of the receiver channels. Currently supported channels: Email, Sms, Phone.
         */
        receiverChannels: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * List of the receiver names.
         */
        receiverNames: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The receiver type, Can be set as: `User`(The id of user).
         */
        receiverType: pulumi.Input<string>;
        /**
         * The start time.
         */
        startTime: pulumi.Input<string>;
    }

    export interface AlarmQueryRequest {
        /**
         * The end time of the query range is relative to the current historical time. The unit is minutes. The value is not positive and must be greater than StartTimeOffset. The maximum value is 0 and the minimum value is -1440.
         */
        endTimeOffset: pulumi.Input<number>;
        /**
         * Alarm object sequence number; increments from 1.
         */
        number: pulumi.Input<number>;
        /**
         * Query statement, the maximum supported length is 1024.
         */
        query: pulumi.Input<string>;
        /**
         * The start time of the query range is relative to the current historical time, in minutes. The value is non-positive, the maximum value is 0, and the minimum value is -1440.
         */
        startTimeOffset: pulumi.Input<number>;
        /**
         * The id of the topic.
         */
        topicId: pulumi.Input<string>;
    }

    export interface AlarmRequestCycle {
        /**
         * The cycle of alarm task execution, or the time point of periodic execution. The unit is minutes, and the value range is 1~1440.
         */
        time: pulumi.Input<number>;
        /**
         * Execution cycle type.
         * Period: Periodic execution, which means executing once every certain period of time.
         * Fixed: Regular execution, which means executing at a fixed time point every day.
         */
        type: pulumi.Input<string>;
    }

    export interface EtlTaskTargetResource {
        /**
         * Customize the name of the output target, which needs to be used to refer to the output target in the data processing rules.
         */
        alias: pulumi.Input<string>;
        /**
         * Cross-account authorized character names.
         */
        roleTrn?: pulumi.Input<string>;
        /**
         * Log topics used for storing processed logs.
         */
        topicId: pulumi.Input<string>;
    }

    export interface GetProjectsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetProjectsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetTopicsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetTopicsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ImportTaskImportSourceInfo {
        /**
         * TOS imports source information.
         */
        kafkaSourceInfo?: pulumi.Input<inputs.tls.ImportTaskImportSourceInfoKafkaSourceInfo>;
        /**
         * TOS imports source information.
         */
        tosSourceInfo?: pulumi.Input<inputs.tls.ImportTaskImportSourceInfoTosSourceInfo>;
    }

    export interface ImportTaskImportSourceInfoKafkaSourceInfo {
        /**
         * The encoding format of the data.
         */
        encode?: pulumi.Input<string>;
        /**
         * Kafka consumer group.
         */
        group?: pulumi.Input<string>;
        /**
         * The service addresses corresponding to different types of Kafka clusters are different.
         */
        host?: pulumi.Input<string>;
        /**
         * The starting position of data import.
         */
        initialOffset?: pulumi.Input<number>;
        /**
         * When you are using the Volcano Engine Message Queue Kafka version, it should be set to the Kafka instance ID.
         */
        instanceId?: pulumi.Input<string>;
        /**
         * Whether to enable authentication.
         */
        isNeedAuth?: pulumi.Input<boolean>;
        /**
         * Password authentication mechanism.
         */
        mechanism?: pulumi.Input<string>;
        /**
         * The Kafka SASL user password used for identity authentication.
         */
        password?: pulumi.Input<string>;
        /**
         * Secure Transport protocol.
         */
        protocol?: pulumi.Input<string>;
        /**
         * Specify the log time.
         */
        timeSourceDefault?: pulumi.Input<number>;
        /**
         * Kafka Topic name.
         */
        topic?: pulumi.Input<string>;
        /**
         * The Kafka SASL username used for identity authentication.
         */
        username?: pulumi.Input<string>;
    }

    export interface ImportTaskImportSourceInfoTosSourceInfo {
        /**
         * The TOS bucket where the log file is located.
         */
        bucket?: pulumi.Input<string>;
        /**
         * The compression mode of data in the TOS bucket.
         */
        compressType?: pulumi.Input<string>;
        /**
         * The path of the file to be imported in the TOS bucket.
         */
        prefix?: pulumi.Input<string>;
        /**
         * The region where the TOS bucket is located. Support cross-regional data import.
         */
        region?: pulumi.Input<string>;
    }

    export interface ImportTaskTargetInfo {
        /**
         * Log extraction rules.
         */
        extractRule?: pulumi.Input<inputs.tls.ImportTaskTargetInfoExtractRule>;
        /**
         * Log sample.
         */
        logSample?: pulumi.Input<string>;
        /**
         * Specify the log parsing type when importing.
         */
        logType: pulumi.Input<string>;
        /**
         * Regional ID.
         */
        region: pulumi.Input<string>;
    }

    export interface ImportTaskTargetInfoExtractRule {
        /**
         * The regular expression used to identify the first line in each log, and its matching part will serve as the beginning of the log.
         */
        beginRegex?: pulumi.Input<string>;
        /**
         * Log delimiter.
         */
        delimiter?: pulumi.Input<string>;
        /**
         * List of log field names (Keys).
         */
        keys?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Reference symbol. The content wrapped by the reference will not be separated but will be parsed into a complete field. It is valid if and only if the LogType is delimiter_log.
         */
        quote?: pulumi.Input<string>;
        /**
         * The number of log lines skipped.
         */
        skipLineCount?: pulumi.Input<number>;
        /**
         * A regular expression for extracting time, used to extract the time value in the TimeKey field and parse it into the corresponding collection time.
         */
        timeExtractRegex?: pulumi.Input<string>;
        /**
         * The parsing format of the time field.
         */
        timeFormat?: pulumi.Input<string>;
        /**
         * The field name of the log time field.
         */
        timeKey?: pulumi.Input<string>;
        /**
         * Time zone, supporting both machine time zone (default) and custom time zone. Among them, the custom time zone supports GMT and UTC.
         */
        timeZone?: pulumi.Input<string>;
        /**
         * When uploading a log that failed to parse, the key name of the parse failed log.
         */
        unMatchLogKey?: pulumi.Input<string>;
        /**
         * Whether to upload the logs of failed parsing.
         */
        unMatchUpLoadSwitch?: pulumi.Input<boolean>;
    }

    export interface IndexFullText {
        /**
         * Whether the FullTextInfo is case sensitive.
         */
        caseSensitive: pulumi.Input<boolean>;
        /**
         * The delimiter of the FullTextInfo.
         */
        delimiter?: pulumi.Input<string>;
        /**
         * Whether the FullTextInfo include chinese.
         */
        includeChinese?: pulumi.Input<boolean>;
    }

    export interface IndexKeyValue {
        /**
         * Whether the value is case sensitive.
         */
        caseSensitive?: pulumi.Input<boolean>;
        /**
         * The delimiter of the value.
         */
        delimiter?: pulumi.Input<string>;
        /**
         * Whether the value include chinese.
         */
        includeChinese?: pulumi.Input<boolean>;
        /**
         * Whether to create indexes for all fields in JSON fields with text values. This field is valid when the `valueType` is `json`.
         */
        indexAll?: pulumi.Input<boolean>;
        /**
         * The JSON subfield key value index.
         */
        jsonKeys?: pulumi.Input<pulumi.Input<inputs.tls.IndexKeyValueJsonKey>[]>;
        /**
         * The key of the KeyValueInfo.
         */
        key: pulumi.Input<string>;
        /**
         * Whether the filed is enabled for analysis.
         */
        sqlFlag?: pulumi.Input<boolean>;
        /**
         * The type of value. Valid values: `long`, `double`, `text`, `json`.
         */
        valueType: pulumi.Input<string>;
    }

    export interface IndexKeyValueJsonKey {
        /**
         * The key of the subfield key value index.
         */
        key: pulumi.Input<string>;
        /**
         * The type of value. Valid values: `long`, `double`, `text`.
         */
        valueType: pulumi.Input<string>;
    }

    export interface IndexUserInnerKeyValue {
        /**
         * Whether the value is case sensitive.
         */
        caseSensitive?: pulumi.Input<boolean>;
        /**
         * The delimiter of the value.
         */
        delimiter?: pulumi.Input<string>;
        /**
         * Whether the value include chinese.
         */
        includeChinese?: pulumi.Input<boolean>;
        /**
         * The JSON subfield key value index.
         */
        jsonKeys?: pulumi.Input<pulumi.Input<inputs.tls.IndexUserInnerKeyValueJsonKey>[]>;
        /**
         * The key of the KeyValueInfo.
         */
        key: pulumi.Input<string>;
        /**
         * Whether the filed is enabled for analysis.
         */
        sqlFlag?: pulumi.Input<boolean>;
        /**
         * The type of value. Valid values: `long`, `double`, `text`, `json`.
         */
        valueType: pulumi.Input<string>;
    }

    export interface IndexUserInnerKeyValueJsonKey {
        /**
         * The key of the subfield key value index.
         */
        key: pulumi.Input<string>;
        /**
         * The type of value. Valid values: `long`, `double`, `text`.
         */
        valueType: pulumi.Input<string>;
    }

    export interface ProjectTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ProjectsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface ProjectsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface RuleContainerRule {
        /**
         * The name of the container to be collected.
         */
        containerNameRegex?: pulumi.Input<string>;
        /**
         * Whether to add environment variables as log tags to raw log data.
         */
        envTag?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The container environment variable blacklist is used to specify the range of containers not to be collected.
         */
        excludeContainerEnvRegex?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The container Label blacklist is used to specify the range of containers not to be collected.
         */
        excludeContainerLabelRegex?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The container environment variable whitelist specifies the container to be collected through the container environment variable. If the whitelist is not enabled, it means that all containers are specified to be collected.
         */
        includeContainerEnvRegex?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The container label whitelist specifies the containers to be collected through the container label. If the whitelist is not enabled, all containers are specified to be collected.
         */
        includeContainerLabelRegex?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Collection rules for Kubernetes containers.
         */
        kubernetesRule?: pulumi.Input<inputs.tls.RuleContainerRuleKubernetesRule>;
        /**
         * The collection mode.
         */
        stream: pulumi.Input<string>;
    }

    export interface RuleContainerRuleKubernetesRule {
        /**
         * Whether to add Kubernetes Annotation as a log tag to the raw log data.
         */
        annotationTag?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Specify the containers not to be collected through the Pod Label blacklist, and not enable means to collect all containers.
         */
        excludePodLabelRegex?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The Pod Label whitelist is used to specify containers to be collected. When the Pod Label whitelist is not enabled, it means that all containers are collected.
         */
        includePodLabelRegex?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Whether to add Kubernetes Label as a log label to the original log data.
         */
        labelTag?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * The name of the Kubernetes Namespace to be collected. If no Namespace name is specified, all containers will be collected. Namespace names support regular matching.
         */
        namespaceNameRegex?: pulumi.Input<string>;
        /**
         * The Pod name is used to specify the container to be collected. When no Pod name is specified, it means to collect all containers.
         */
        podNameRegex?: pulumi.Input<string>;
        /**
         * Specify the container to be collected by the name of the workload. When no workload name is specified, all containers are collected. The workload name supports regular matching.
         */
        workloadNameRegex?: pulumi.Input<string>;
        /**
         * Specify the containers to be collected by the type of workload, only one type can be selected. When no type is specified, it means all types of containers are collected. The supported types of workloads are:
         * Deployment: stateless workload.
         * StatefulSet: stateful workload.
         * DaemonSet: daemon process.
         * Job: task.
         * CronJob: scheduled task.
         */
        workloadType?: pulumi.Input<string>;
    }

    export interface RuleExcludePath {
        /**
         * Collection path type. The path type can be `File` or `Path`.
         */
        type: pulumi.Input<string>;
        /**
         * Collection path.
         */
        value: pulumi.Input<string>;
    }

    export interface RuleExtractRule {
        /**
         * The first log line needs to match the regular expression.
         */
        beginRegex?: pulumi.Input<string>;
        /**
         * The delimiter of the log.
         */
        delimiter?: pulumi.Input<string>;
        /**
         * The filter key list.
         */
        filterKeyRegexes?: pulumi.Input<pulumi.Input<inputs.tls.RuleExtractRuleFilterKeyRegex>[]>;
        /**
         * A list of log field names (Key).
         */
        keys?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The entire log needs to match the regular expression.
         */
        logRegex?: pulumi.Input<string>;
        /**
         * Automatically extract log fields according to the specified log template.
         */
        logTemplate?: pulumi.Input<inputs.tls.RuleExtractRuleLogTemplate>;
        /**
         * Parsing format of the time field.
         */
        timeFormat?: pulumi.Input<string>;
        /**
         * The field name of the log time field.
         */
        timeKey?: pulumi.Input<string>;
        /**
         * When uploading the failed log, the key name of the failed log.
         */
        unMatchLogKey?: pulumi.Input<string>;
        /**
         * Whether to upload the log of parsing failure.
         */
        unMatchUpLoadSwitch?: pulumi.Input<boolean>;
    }

    export interface RuleExtractRuleFilterKeyRegex {
        /**
         * The name of the filter key.
         */
        key: pulumi.Input<string>;
        /**
         * The log content of the filter field needs to match the regular expression.
         */
        regex: pulumi.Input<string>;
    }

    export interface RuleExtractRuleLogTemplate {
        /**
         * Log template content.
         */
        format: pulumi.Input<string>;
        /**
         * The type of the log template.
         */
        type: pulumi.Input<string>;
    }

    export interface RuleUserDefineRule {
        /**
         * LogCollector extension configuration.
         */
        advanced?: pulumi.Input<inputs.tls.RuleUserDefineRuleAdvanced>;
        /**
         * Whether to upload raw logs.
         */
        enableRawLog?: pulumi.Input<boolean>;
        /**
         * Add constant fields to logs.
         */
        fields?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        /**
         * Rules for parsing collection paths. After the rules are set, the fields in the collection path will be extracted through the regular expressions specified in the rules, and added to the log data as metadata.
         */
        parsePathRule?: pulumi.Input<inputs.tls.RuleUserDefineRuleParsePathRule>;
        /**
         * Plugin configuration. After the plugin configuration is enabled, one or more LogCollector processor plugins can be added to parse logs with complex or variable structures.
         */
        plugin?: pulumi.Input<inputs.tls.RuleUserDefineRulePlugin>;
        /**
         * Rules for routing log partitions. Setting this parameter indicates that the HashKey routing shard mode is used when collecting logs, and Log Service will write the data to the shard containing the specified Key value.
         */
        shardHashKey?: pulumi.Input<inputs.tls.RuleUserDefineRuleShardHashKey>;
        /**
         * LogCollector collection strategy, which specifies whether LogCollector collects incremental logs or full logs. The default is false, which means to collect all logs.
         */
        tailFiles?: pulumi.Input<boolean>;
    }

    export interface RuleUserDefineRuleAdvanced {
        /**
         * Whether to release the log file handle after reading to the end of the log file. The default is false.
         */
        closeEof?: pulumi.Input<boolean>;
        /**
         * The wait time to release the log file handle. When the log file has not written a new log for more than the specified time, release the handle of the log file.
         */
        closeInactive?: pulumi.Input<number>;
        /**
         * After the log file is removed, whether to release the handle of the log file. The default is false.
         */
        closeRemoved?: pulumi.Input<boolean>;
        /**
         * After the log file is renamed, whether to release the handle of the log file. The default is false.
         */
        closeRenamed?: pulumi.Input<boolean>;
        /**
         * The maximum length of time that LogCollector monitors log files. The unit is seconds, and the default is 0 seconds, which means that there is no limit to the length of time LogCollector monitors log files.
         */
        closeTimeout?: pulumi.Input<number>;
    }

    export interface RuleUserDefineRuleParsePathRule {
        /**
         * A list of field names. Log Service will parse the path sample (PathSample) into multiple fields according to the regular expression (Regex), and Keys is used to specify the field name of each field.
         */
        keys?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Sample capture path for a real scene.
         */
        pathSample?: pulumi.Input<string>;
        /**
         * Regular expression for extracting path fields. It must match the collection path sample, otherwise it cannot be extracted successfully.
         */
        regex?: pulumi.Input<string>;
    }

    export interface RuleUserDefineRulePlugin {
        /**
         * LogCollector plugin.
         */
        processors: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RuleUserDefineRuleShardHashKey {
        /**
         * The HashKey of the log group is used to specify the partition (shard) to be written to by the current log group.
         */
        hashKey: pulumi.Input<string>;
    }

    export interface ScheduleSqlTaskRequestCycle {
        /**
         * Cron expression. The log service specifies the timed execution of alarm tasks through the Cron expression. The minimum granularity of Cron expressions is minutes, 24 hours. For example, 0 18 * * * indicates that an alarm task is executed exactly at 18:00 every day.
         */
        cronTab?: pulumi.Input<string>;
        /**
         * When setting the Type to Cron, the time zone also needs to be set.
         */
        cronTimeZone?: pulumi.Input<string>;
        /**
         * The scheduling cycle or the time point of regular execution (the number of minutes away from 00:00), with a value range of 1 to 1440, and the unit is minutes.
         */
        time: pulumi.Input<number>;
        /**
         * The type of Scheduling cycle.
         */
        type: pulumi.Input<string>;
    }

    export interface ShipperContentInfo {
        /**
         * CSV format log content configuration.
         */
        csvInfo?: pulumi.Input<inputs.tls.ShipperContentInfoCsvInfo>;
        /**
         * Log content parsing format.
         */
        format?: pulumi.Input<string>;
        /**
         * JSON format log content configuration.
         */
        jsonInfo?: pulumi.Input<inputs.tls.ShipperContentInfoJsonInfo>;
    }

    export interface ShipperContentInfoCsvInfo {
        /**
         * Delimiters are supported, including commas, tabs, vertical bars, semicolons, and Spaces.
         */
        delimiter: pulumi.Input<string>;
        /**
         * When the field content contains a delimiter, use an escape character to wrap the field. Currently, only single quotes, double quotes, and null characters are supported.
         */
        escapeChar: pulumi.Input<string>;
        /**
         * Configure the fields that need to be delivered.
         */
        keys: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Invalid field filling content, with a length ranging from 0 to 128.
         */
        nonFieldContent: pulumi.Input<string>;
        /**
         * Whether to print the Key on the first line.
         */
        printHeader: pulumi.Input<boolean>;
    }

    export interface ShipperContentInfoJsonInfo {
        /**
         * Enable the flag.
         */
        enable: pulumi.Input<boolean>;
        /**
         * Whether to escape or not. It must be configured as true.
         */
        escape?: pulumi.Input<boolean>;
        /**
         * When delivering in JSON format, if this parameter is not configured, it indicates that all fields have been delivered. Including __content__ (choice), __source__, __path__, __time__, __image_name__, __container_name__, __pod_name__, __pod_uid__, namespace, __tag____client_ip__, __tag____receive_time__.
         */
        keys?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ShipperKafkaShipperInfo {
        /**
         * Compression formats currently supported include snappy, gzip, lz4, and none.
         */
        compress: pulumi.Input<string>;
        /**
         * Delivery end time, millisecond timestamp. If not configured, it will keep delivering.
         */
        endTime?: pulumi.Input<number>;
        /**
         * Kafka instance.
         */
        instance: pulumi.Input<string>;
        /**
         * The name of the Kafka Topic.
         */
        kafkaTopic: pulumi.Input<string>;
        /**
         * Delivery start time, millisecond timestamp. If not configured, the default is the current time.
         */
        startTime?: pulumi.Input<number>;
    }

    export interface ShipperTosShipperInfo {
        /**
         * When choosing a TOS bucket, it must be located in the same region as the source log topic.
         */
        bucket: pulumi.Input<string>;
        /**
         * Compression formats currently supported include snappy, gzip, lz4, and none.
         */
        compress?: pulumi.Input<string>;
        /**
         * The delivery time interval, measured in seconds, ranges from 300 to 900.
         */
        interval?: pulumi.Input<number>;
        /**
         * The maximum size of the original file that can be delivered to each partition (Shard), that is, the size of the uncompressed log file. The unit is MiB, and the value range is 5 to 256.
         */
        maxSize?: pulumi.Input<number>;
        /**
         * Partition rules for delivering logs.
         */
        partitionFormat?: pulumi.Input<string>;
        /**
         * The top-level directory name of the storage bucket. All log data delivered through this delivery configuration will be delivered to this directory.
         */
        prefix?: pulumi.Input<string>;
    }

    export interface TopicTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TopicsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface TopicsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace tos {
    export interface BucketAccountAcl {
        /**
         * The accountId to control.
         */
        accountId: pulumi.Input<string>;
        /**
         * The acl type to control.Valid value is CanonicalUser.
         */
        aclType?: pulumi.Input<string>;
        /**
         * The permission to control.Valid value is FULL_CONTROL|READ|READ_ACP|WRITE|WRITE_ACP.
         */
        permission: pulumi.Input<string>;
    }

    export interface BucketCorsCorsRule {
        /**
         * The list of headers that are allowed in a preflight request.
         */
        allowedHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The list of HTTP methods that are allowed in a preflight request. Valid values: `PUT`, `POST`, `DELETE`, `GET`, `HEAD`.
         */
        allowedMethods: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The list of origins that are allowed to make requests to the bucket.
         */
        allowedOrigins: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The list of headers that are exposed in the response to a preflight request. It is recommended to add two expose headers, X-Tos-Request-Id and ETag.
         */
        exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The maximum amount of time that a preflight request can be cached. Unit: second. Default value: 3600.
         */
        maxAgeSeconds?: pulumi.Input<number>;
        /**
         * Indicates whether the bucket returns the 'Vary: Origin' header in the response to preflight requests. Default value: false.
         */
        responseVary?: pulumi.Input<boolean>;
    }

    export interface BucketEncryptionRule {
        /**
         * The server side encryption configuration.
         */
        applyServerSideEncryptionByDefault: pulumi.Input<inputs.tos.BucketEncryptionRuleApplyServerSideEncryptionByDefault>;
    }

    export interface BucketEncryptionRuleApplyServerSideEncryptionByDefault {
        /**
         * The kms data encryption. Valid values: `AES256`, `SM4`. Default is `AES256`.
         */
        kmsDataEncryption?: pulumi.Input<string>;
        /**
         * The kms master key id. This field is required when `sseAlgorithm` is `kms`. The format is `trn:kms:<region>:<accountID>:keyrings/<keyring>/keys/<key>`.
         */
        kmsMasterKeyId?: pulumi.Input<string>;
        /**
         * The server side encryption algorithm. Valid values: `kms`, `AES256`, `SM4`.
         */
        sseAlgorithm: pulumi.Input<string>;
    }

    export interface BucketInventoryDestination {
        /**
         * The destination tos bucket information of the bucket inventory.
         */
        tosBucketDestination: pulumi.Input<inputs.tos.BucketInventoryDestinationTosBucketDestination>;
    }

    export interface BucketInventoryDestinationTosBucketDestination {
        /**
         * The account id of the destination tos bucket.
         */
        accountId: pulumi.Input<string>;
        /**
         * The name of the destination tos bucket.
         */
        bucket: pulumi.Input<string>;
        /**
         * The format of the bucket inventory. Valid values: `CSV`.
         */
        format: pulumi.Input<string>;
        /**
         * The storage path prefix of the bucket inventory in destination tos bucket.
         */
        prefix?: pulumi.Input<string>;
        /**
         * The role name used to grant TOS access to read all files from the source bucket and write files to the destination bucket. You can use the default TOS role `TosArchiveTOSInventory`.
         */
        role: pulumi.Input<string>;
    }

    export interface BucketInventoryFilter {
        /**
         * The prefix matching information of the exported object. If not set, a list of all objects in the bucket will be generated by default.
         */
        prefix?: pulumi.Input<string>;
    }

    export interface BucketInventoryOptionalFields {
        /**
         * The information exported from the bucket inventory. Valid values: `Size`, `LastModifiedDate`, `ETag`, `StorageClass`, `IsMultipartUploaded`, `EncryptionStatus`, `CRC64`, `ReplicationStatus`.
         */
        fields?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface BucketInventorySchedule {
        /**
         * The export schedule of the bucket inventory. Valid values: `Daily`, `Weekly`.
         */
        frequency: pulumi.Input<string>;
    }

    export interface BucketNotificationRules {
        /**
         * The destination info of the notification.
         */
        destination: pulumi.Input<inputs.tos.BucketNotificationRulesDestination>;
        /**
         * The event type of the notification.
         */
        events: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The filter of the notification.
         */
        filter?: pulumi.Input<inputs.tos.BucketNotificationRulesFilter>;
        /**
         * The rule name of the notification.
         */
        ruleId: pulumi.Input<string>;
    }

    export interface BucketNotificationRulesDestination {
        /**
         * The VeFaas info of the destination.
         */
        veFaas?: pulumi.Input<pulumi.Input<inputs.tos.BucketNotificationRulesDestinationVeFaa>[]>;
    }

    export interface BucketNotificationRulesDestinationVeFaa {
        /**
         * The function id of the destination.
         */
        functionId: pulumi.Input<string>;
    }

    export interface BucketNotificationRulesFilter {
        /**
         * The tos filter of the notification.
         */
        tosKey?: pulumi.Input<inputs.tos.BucketNotificationRulesFilterTosKey>;
    }

    export interface BucketNotificationRulesFilterTosKey {
        /**
         * The filter rules of the notification.
         */
        filterRules?: pulumi.Input<pulumi.Input<inputs.tos.BucketNotificationRulesFilterTosKeyFilterRule>[]>;
    }

    export interface BucketNotificationRulesFilterTosKeyFilterRule {
        /**
         * The name of the filter rule. Valid values: `prefix`, `suffix`.
         */
        name?: pulumi.Input<string>;
        /**
         * The value of the filter rule.
         */
        value?: pulumi.Input<string>;
    }

    export interface BucketObjectAccountAcl {
        /**
         * The accountId to control.
         */
        accountId: pulumi.Input<string>;
        /**
         * The acl type to control.Valid value is CanonicalUser.
         */
        aclType?: pulumi.Input<string>;
        /**
         * The permission to control.Valid value is FULL_CONTROL|READ|READ_ACP|WRITE|WRITE_ACP.
         */
        permission: pulumi.Input<string>;
    }

    export interface BucketObjectTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface BucketRealtimeLogAccessLogConfiguration {
        /**
         * The ID of the tls dashboard.
         */
        tlsDashboardId?: pulumi.Input<string>;
        /**
         * The ID of the tls project.
         */
        tlsProjectId?: pulumi.Input<string>;
        /**
         * The ID of the tls topic.
         */
        tlsTopicId?: pulumi.Input<string>;
        /**
         * The TLS log retention duration. Unit in days. Valid values range is 1~3650. default is 7.
         */
        ttl?: pulumi.Input<number>;
    }

    export interface BucketTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace transit_router {
    export interface BandwidthPackageAllocation {
        /**
         * The delete time of the transit router bandwidth package.
         */
        allocateTime?: pulumi.Input<string>;
        /**
         * The delete time of the transit router bandwidth package.
         */
        deleteTime?: pulumi.Input<string>;
        /**
         * The local region id of the transit router.
         */
        localRegionId?: pulumi.Input<string>;
        /**
         * The ID of the peer attachment.
         */
        transitRouterPeerAttachmentId?: pulumi.Input<string>;
    }

    export interface BandwidthPackageTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface BandwidthPackagesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface BandwidthPackagesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface DirectConnectGatewayAttachmentTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface DirectConnectGatewayAttachmentsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface DirectConnectGatewayAttachmentsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetBandwidthPackagesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetBandwidthPackagesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetDirectConnectGatewayAttachmentsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetDirectConnectGatewayAttachmentsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetPeerAttachmentsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetPeerAttachmentsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetRouteTablesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetRouteTablesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetTransitRoutersTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetTransitRoutersTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetVpcAttachmentsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetVpcAttachmentsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetVpnAttachmentsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetVpnAttachmentsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface PeerAttachmentTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface PeerAttachmentsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface PeerAttachmentsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface RouteTableTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface RouteTablesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface RouteTablesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TransitRouterTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TransitRouterTransitRouterAttachment {
        /**
         * The create time.
         */
        creationTime?: pulumi.Input<string>;
        /**
         * The id of resource.
         */
        resourceId?: pulumi.Input<string>;
        /**
         * The type of resource.
         */
        resourceType?: pulumi.Input<string>;
        /**
         * The status of the transit router.
         */
        status?: pulumi.Input<string>;
        /**
         * The id of transit router attachment.
         */
        transitRouterAttachmentId?: pulumi.Input<string>;
        /**
         * The name of transit router attachment.
         */
        transitRouterAttachmentName?: pulumi.Input<string>;
        /**
         * The id of transit router route table.
         */
        transitRouterRouteTableId?: pulumi.Input<string>;
        /**
         * The update time.
         */
        updateTime?: pulumi.Input<string>;
    }

    export interface TransitRoutersTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface TransitRoutersTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface VpcAttachmentAttachPoint {
        /**
         * The id of subnet.
         */
        subnetId: pulumi.Input<string>;
        /**
         * The id of zone.
         */
        zoneId: pulumi.Input<string>;
    }

    export interface VpcAttachmentTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface VpcAttachmentsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface VpcAttachmentsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface VpnAttachmentTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface VpnAttachmentsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface VpnAttachmentsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }
}

export namespace vedb_mysql {
    export interface AccountAccountPrivilege {
        /**
         * Authorization database privilege types: 
         * ReadWrite: Read and write privilege.
         * ReadOnly: Read-only privilege.
         * DDLOnly: Only DDL privilege.
         * DMLOnly: Only DML privilege.
         * Custom: Custom privilege.
         */
        accountPrivilege: pulumi.Input<string>;
        /**
         * The specific SQL operation permissions contained in the permission type are separated by English commas (,) between multiple strings.
         * When used as a request parameter in the CreateDatabase interface, when the AccountPrivilege value is Custom, this parameter is required. Value range (multiple selections allowed): SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, REFERENCES, INDEX, ALTER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, EVENT, TRIGGER. When used as a return parameter in the DescribeDatabases interface, regardless of the value of AccountPrivilege, the details of the SQL operation permissions contained in this permission type are returned. For the specific SQL operation permissions contained in each permission type, please refer to the account permission list.
         */
        accountPrivilegeDetail?: pulumi.Input<string>;
        /**
         * Database name requiring authorization.
         */
        dbName: pulumi.Input<string>;
    }

    export interface BackupBackupPolicy {
        /**
         * Data backup retention period, value: 7 to 30 days.
         */
        backupRetentionPeriod: pulumi.Input<number>;
        /**
         * The time for executing the backup task has an interval window of 2 hours and must be an even-hour time. Format: HH:mmZ-HH:mmZ (UTC time).
         */
        backupTime: pulumi.Input<string>;
        /**
         * Full backup period. It is recommended to select at least 2 days per week for full backup. Multiple values are separated by English commas (,). Values: Monday: Monday. Tuesday: Tuesday. Wednesday: Wednesday. Thursday: Thursday. Friday: Friday. Saturday: Saturday. Sunday: Sunday.
         */
        fullBackupPeriod: pulumi.Input<string>;
    }

    export interface GetInstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetInstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstanceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface InstancesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface InstancesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }
}

export namespace veecp {
    export interface BatchEdgeMachinesStatus {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        edgeNodeStatusConditionType?: string;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: string;
    }

    export interface BatchEdgeMachinesStatusArgs {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        edgeNodeStatusConditionType?: pulumi.Input<string>;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface ClusterClusterConfig {
        /**
         * Cluster API Server public network access configuration information. It takes effect only when ApiServerPublicAccessEnabled=true.
         */
        apiServerPublicAccessConfig?: pulumi.Input<inputs.veecp.ClusterClusterConfigApiServerPublicAccessConfig>;
        /**
         * Cluster API Server public network access configuration, values:
         * false: (default value). closed
         * true: opened.
         */
        apiServerPublicAccessEnabled?: pulumi.Input<boolean>;
        /**
         * Node public network access configuration, values:
         * false: (default value). Do not enable public network access. Existing NAT gateways and rules are not affected. true: Enable public network access. After enabling, a NAT gateway is automatically created for the cluster's private network and corresponding rules are configured. Note: This parameter cannot be modified after the cluster is created. Please configure it reasonably.
         */
        resourcePublicAccessDefaultEnabled?: pulumi.Input<boolean>;
        /**
         * The subnet ID for communication within the private network (VPC) of the cluster control plane. You can call the private network API to obtain the subnet ID. Note: When creating a cluster, please ensure that all specified SubnetIds (including but not limited to this parameter) belong to the same private network. It is recommended that you choose subnets in different availability zones as much as possible to improve the high availability of the cluster control plane. Please note that this parameter is not supported to be modified after the cluster is created. Please configure it reasonably.
         */
        subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterClusterConfigApiServerPublicAccessConfig {
        /**
         * Public network access network configuration.
         */
        publicAccessNetworkConfig?: pulumi.Input<inputs.veecp.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig>;
    }

    export interface ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig {
        /**
         * The peak bandwidth of the public IP, unit: Mbps.
         */
        bandwidth?: pulumi.Input<number>;
        /**
         * Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
         */
        billingType?: pulumi.Input<string>;
    }

    export interface ClusterLoggingConfig {
        /**
         * The TLS log item ID of the collection target.
         */
        logProjectId?: pulumi.Input<string>;
        /**
         * Cluster logging options. This structure can only be modified and added, and cannot be deleted. When encountering a `cannot be deleted` error, please query the log setups of the current cluster and fill in the current `tf` file.
         */
        logSetups?: pulumi.Input<pulumi.Input<inputs.veecp.ClusterLoggingConfigLogSetup>[]>;
    }

    export interface ClusterLoggingConfigLogSetup {
        /**
         * Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
         */
        logTtl?: pulumi.Input<number>;
        /**
         * The current types of logs that can be enabled are:
         * Audit: Cluster audit logs.
         * KubeApiServer: kube-apiserver component logs.
         * KubeScheduler: kube-scheduler component logs.
         * KubeControllerManager: kube-controller-manager component logs.
         */
        logType: pulumi.Input<string>;
    }

    export interface ClusterPodsConfig {
        /**
         * Flannel network configuration. It can be configured only when PodNetworkMode=Flannel, but it is not mandatory.
         */
        flannelConfig?: pulumi.Input<inputs.veecp.ClusterPodsConfigFlannelConfig>;
        /**
         * Container network model, values: Flannel: Flannel network model, an independent Underlay container network solution. Combined with the global routing capability of a private network (VPC), it realizes a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution implemented based on the elastic network interface (ENI) of a private network, with high network communication performance. Description: After the cluster is created, this parameter is not supported to be modified temporarily. Please configure it reasonably.
         */
        podNetworkMode: pulumi.Input<string>;
        /**
         * VPC-CNI network configuration. PodNetworkMode=VpcCniShared, but it is not mandatory.
         */
        vpcCniConfig?: pulumi.Input<inputs.veecp.ClusterPodsConfigVpcCniConfig>;
    }

    export interface ClusterPodsConfigFlannelConfig {
        /**
         * Upper limit of the number of single-node Pod instances in the Flannel model container network. Values: 64(default value), 16, 32, 128, 256.
         */
        maxPodsPerNode?: pulumi.Input<number>;
        /**
         * Pod CIDR of Flannel model container network. Only configurable when PodNetworkMode=Flannel, but not mandatory. Note: The number of Pods in the cluster is limited by the number of IPs in this CIDR. This parameter cannot be modified after cluster creation. Please plan the Pod CIDR reasonably. Cannot conflict with the following network segments: private network network segments corresponding to ClusterConfig.SubnetIds. All clusters within the same private network's FlannelConfig.PodCidrs. All clusters within the same private network's ServiceConfig.ServiceCidrsv4. Different clusters within the same private network's FlannelConfig.PodCidrs cannot conflict.
         */
        podCidrs: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterPodsConfigVpcCniConfig {
        /**
         * A list of Pod subnet IDs for the VPC-CNI container network.
         */
        subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterServicesConfig {
        /**
         * CIDR used by services within the cluster. It cannot conflict with the following network segments: FlannelConfig.PodCidrs. SubnetIds of all clusters within the same private network or FlannelConfig.VpcConfig.SubnetIds. ServiceConfig.ServiceCidrsv4 of all clusters within the same private network (this parameter).It is stated that currently only one array element is supported. When multiple values are specified, only the first value takes effect.
         */
        serviceCidrsv4s: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClustersStatus {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
         */
        conditionsType?: string;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: string;
    }

    export interface ClustersStatusArgs {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface EdgeNodeAutoCompleteConfig {
        /**
         * The address of the machine to be managed.
         */
        address?: pulumi.Input<string>;
        /**
         * Directly managed through the edge computing instance ID. When it is true, there is no need to provide Address. Only DirectAddInstances needs to be provided.
         */
        directAdd?: pulumi.Input<boolean>;
        /**
         * Edge computing instance ID on Volcano Engine.
         */
        directAddInstances?: pulumi.Input<pulumi.Input<inputs.veecp.EdgeNodeAutoCompleteConfigDirectAddInstance>[]>;
        /**
         * Enable/Disable automatic management.
         */
        enable: pulumi.Input<boolean>;
        /**
         * Login credentials.
         */
        machineAuth?: pulumi.Input<inputs.veecp.EdgeNodeAutoCompleteConfigMachineAuth>;
    }

    export interface EdgeNodeAutoCompleteConfigDirectAddInstance {
        /**
         * Edge service ID.
         */
        cloudServerIdentity: pulumi.Input<string>;
        /**
         * Edge computing instance ID.
         */
        instanceIdentity: pulumi.Input<string>;
    }

    export interface EdgeNodeAutoCompleteConfigMachineAuth {
        /**
         * Authentication method. Currently only Password is open.
         */
        authType: pulumi.Input<string>;
        /**
         * SSH port, default 22.
         */
        sshPort: pulumi.Input<number>;
        /**
         * Login username.
         */
        user: pulumi.Input<string>;
    }

    export interface EdgeNodePoolBillingConfigs {
        /**
         * Whether to automatically renew the node pool.
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * The pre-paid period of the node pool, in months. The value range is 1-9. This parameter takes effect only when the billingType is PrePaid.
         */
        prePaidPeriod: pulumi.Input<number>;
        /**
         * Prepaid period number.
         */
        prePaidPeriodNumber: pulumi.Input<number>;
    }

    export interface EdgeNodePoolElasticConfig {
        /**
         * The node pool elastic scaling configuration information.
         */
        autoScaleConfig?: pulumi.Input<inputs.veecp.EdgeNodePoolElasticConfigAutoScaleConfig>;
        /**
         * The ID of the edge service corresponding to the elastic node. On the edge computing node's edge service page, obtain the edge service ID.
         */
        cloudServerIdentity: pulumi.Input<string>;
        instanceArea?: pulumi.Input<inputs.veecp.EdgeNodePoolElasticConfigInstanceArea>;
    }

    export interface EdgeNodePoolElasticConfigAutoScaleConfig {
        /**
         * The DesiredReplicas of AutoScaling, default 0, range in minReplicas to max_replicas.
         */
        desiredReplicas: pulumi.Input<number>;
        /**
         * Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
         */
        enabled: pulumi.Input<boolean>;
        /**
         * The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
         */
        maxReplicas: pulumi.Input<number>;
        /**
         * The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
         */
        minReplicas: pulumi.Input<number>;
        /**
         * The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnetPolicy` is `Priority`.
         */
        priority: pulumi.Input<number>;
    }

    export interface EdgeNodePoolElasticConfigInstanceArea {
        /**
         * Region name. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
         */
        areaName?: pulumi.Input<string>;
        /**
         * The cluster name.
         */
        clusterName?: pulumi.Input<string>;
        /**
         * Default operator. When using three-line nodes, this parameter can be configured. After configuration, this operator will be used as the default export.
         */
        defaultIsp?: pulumi.Input<string>;
        /**
         * Public network configuration of three-line nodes. If it is a single-line node, this parameter will be ignored. Value range: single_interface_multi_ip: Single network card with multiple IPs. single_interface_cmcc_ip: Single network card with China Mobile IP. Relevant permissions need to be opened by submitting a work order. single_interface_cucc_ip: Single network card with China Unicom IP. Relevant permissions need to be opened by submitting a work order. single_interface_ctcc_ip: Single network card with China Telecom IP. Relevant permissions need to be opened by submitting a work order. multi_interface_multi_ip: Multiple network cards with multiple IPs. Relevant permissions need to be opened by submitting a work order. no_interface: No public network network card. Relevant permissions need to be opened by submitting a work order. If this parameter is not configured: When there is a public network network card, singleInterfaceMultiIp is used by default. When there is no public network network card, noInterface is used by default.
         */
        externalNetworkMode?: pulumi.Input<string>;
        /**
         * Operator. You can obtain the regions and operators supported by instance specifications through the ListAvailableResourceInfo interface.
         */
        isp?: pulumi.Input<string>;
        /**
         * The subnet id.
         */
        subnetId?: pulumi.Input<string>;
        /**
         * The vpc id.
         */
        vpcIdentity?: pulumi.Input<string>;
    }

    export interface EdgeNodePoolKubernetesConfig {
        /**
         * The Labels of KubernetesConfig.
         */
        labels?: pulumi.Input<pulumi.Input<inputs.veecp.EdgeNodePoolKubernetesConfigLabel>[]>;
        /**
         * The Taints of KubernetesConfig.
         */
        taints?: pulumi.Input<pulumi.Input<inputs.veecp.EdgeNodePoolKubernetesConfigTaint>[]>;
    }

    export interface EdgeNodePoolKubernetesConfigLabel {
        /**
         * The Key of Labels.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Labels.
         */
        value?: pulumi.Input<string>;
    }

    export interface EdgeNodePoolKubernetesConfigTaint {
        /**
         * The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
         */
        effect?: pulumi.Input<string>;
        /**
         * The Key of Taints.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Taints.
         */
        value?: pulumi.Input<string>;
    }

    export interface EdgeNodePoolsStatus {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: string;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: string;
    }

    export interface EdgeNodePoolsStatusArgs {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface EdgeNodesStatus {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        edgeNodeStatusConditionType?: string;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
         */
        phase?: string;
    }

    export interface EdgeNodesStatusArgs {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        edgeNodeStatusConditionType?: pulumi.Input<string>;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface GetBatchEdgeMachinesStatus {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        edgeNodeStatusConditionType?: string;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: string;
    }

    export interface GetBatchEdgeMachinesStatusArgs {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        edgeNodeStatusConditionType?: pulumi.Input<string>;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface GetClustersStatus {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
         */
        conditionsType?: string;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: string;
    }

    export interface GetClustersStatusArgs {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface GetEdgeNodePoolsStatus {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: string;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: string;
    }

    export interface GetEdgeNodePoolsStatusArgs {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface GetEdgeNodesStatus {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        edgeNodeStatusConditionType?: string;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
         */
        phase?: string;
    }

    export interface GetEdgeNodesStatusArgs {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        edgeNodeStatusConditionType?: pulumi.Input<string>;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface GetNodePoolsStatus {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: string;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: string;
    }

    export interface GetNodePoolsStatusArgs {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface NodePoolAutoScaling {
        /**
         * The DesiredReplicas of AutoScaling, default 0, range in minReplicas to max_replicas.
         */
        desiredReplicas?: pulumi.Input<number>;
        /**
         * Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
         */
        maxReplicas?: pulumi.Input<number>;
        /**
         * The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
         */
        minReplicas?: pulumi.Input<number>;
        /**
         * The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnetPolicy` is `Priority`.
         */
        priority?: pulumi.Input<number>;
        /**
         * Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
         */
        subnetPolicy?: pulumi.Input<string>;
    }

    export interface NodePoolKubernetesConfig {
        /**
         * Whether to disable the function of automatically synchronizing labels and taints to existing nodes. Default is false.
         */
        autoSyncDisabled?: pulumi.Input<boolean>;
        /**
         * The Cordon of KubernetesConfig.
         */
        cordon: pulumi.Input<boolean>;
        /**
         * The Labels of KubernetesConfig.
         */
        labels?: pulumi.Input<pulumi.Input<inputs.veecp.NodePoolKubernetesConfigLabel>[]>;
        /**
         * The NamePrefix of node metadata.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * The Taints of KubernetesConfig.
         */
        taints?: pulumi.Input<pulumi.Input<inputs.veecp.NodePoolKubernetesConfigTaint>[]>;
    }

    export interface NodePoolKubernetesConfigLabel {
        /**
         * The Key of Labels.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Labels.
         */
        value?: pulumi.Input<string>;
    }

    export interface NodePoolKubernetesConfigTaint {
        /**
         * The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
         */
        effect?: pulumi.Input<string>;
        /**
         * The Key of Taints.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Taints.
         */
        value?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfig {
        /**
         * The AdditionalContainerStorageEnabled of NodeConfig.
         */
        additionalContainerStorageEnabled?: pulumi.Input<boolean>;
        /**
         * Is AutoRenew of PrePaid instance of NodeConfig. Valid values: true, false. when InstanceChargeType is PrePaid, default value is true.
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * The AutoRenewPeriod of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 6, 12. Unit: month. when InstanceChargeType is PrePaid and AutoRenew enable, default value is 1.
         */
        autoRenewPeriod?: pulumi.Input<number>;
        /**
         * The DataVolumes of NodeConfig.
         */
        dataVolumes?: pulumi.Input<pulumi.Input<inputs.veecp.NodePoolNodeConfigDataVolume>[]>;
        /**
         * Tags for Ecs.
         */
        ecsTags?: pulumi.Input<pulumi.Input<inputs.veecp.NodePoolNodeConfigEcsTag>[]>;
        /**
         * The IDs of HpcCluster, only one ID is supported currently.
         */
        hpcClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The ImageId of NodeConfig.
         */
        imageId?: pulumi.Input<string>;
        /**
         * The initializeScript of NodeConfig.
         */
        initializeScript?: pulumi.Input<string>;
        /**
         * The InstanceChargeType of PrePaid instance of NodeConfig. Valid values: PostPaid, PrePaid. Default value: PostPaid.
         */
        instanceChargeType?: pulumi.Input<string>;
        /**
         * The InstanceTypeIds of NodeConfig. The value can get from volcengine.veecp.getSupportResourceTypes datasource.
         */
        instanceTypeIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The NamePrefix of NodeConfig.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * The Period of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36. Unit: month. when InstanceChargeType is PrePaid, default value is 12.
         */
        period?: pulumi.Input<number>;
        /**
         * The Security of NodeConfig.
         */
        security: pulumi.Input<inputs.veecp.NodePoolNodeConfigSecurity>;
        /**
         * The SubnetIds of NodeConfig.
         */
        subnetIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The SystemVolume of NodeConfig.
         */
        systemVolume?: pulumi.Input<inputs.veecp.NodePoolNodeConfigSystemVolume>;
    }

    export interface NodePoolNodeConfigDataVolume {
        /**
         * The target mount directory of the disk. Must start with `/`.
         */
        mountPoint?: pulumi.Input<string>;
        /**
         * The Size of DataVolumes, the value range in 20~32768. Default value is `20`.
         */
        size?: pulumi.Input<number>;
        /**
         * The Type of DataVolumes, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`. Default value is `ESSD_PL0`.
         */
        type?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigEcsTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigSecurity {
        /**
         * The Login of Security.
         */
        login?: pulumi.Input<inputs.veecp.NodePoolNodeConfigSecurityLogin>;
        /**
         * The SecurityGroupIds of Security.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The SecurityStrategies of Security, the value can be empty or `Hids`.
         */
        securityStrategies?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NodePoolNodeConfigSecurityLogin {
        /**
         * The Password of Security, this field must be encoded with base64.
         */
        password?: pulumi.Input<string>;
        /**
         * The SshKeyPairName of Security.
         */
        sshKeyPairName?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigSystemVolume {
        /**
         * The Size of SystemVolume, the value range in 20~2048.
         */
        size?: pulumi.Input<number>;
        /**
         * The Type of SystemVolume, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`.
         */
        type?: pulumi.Input<string>;
    }

    export interface NodePoolNodeStatistic {
        /**
         * The CreatingCount of Node.
         */
        creatingCount?: pulumi.Input<number>;
        /**
         * The DeletingCount of Node.
         */
        deletingCount?: pulumi.Input<number>;
        /**
         * The FailedCount of Node.
         */
        failedCount?: pulumi.Input<number>;
        /**
         * The RunningCount of Node.
         */
        runningCount?: pulumi.Input<number>;
        /**
         * (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
         *
         * @deprecated This field has been deprecated and is not recommended for use.
         */
        startingCount?: pulumi.Input<number>;
        /**
         * (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
         *
         * @deprecated This field has been deprecated and is not recommended for use.
         */
        stoppedCount?: pulumi.Input<number>;
        /**
         * (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
         *
         * @deprecated This field has been deprecated and is not recommended for use.
         */
        stoppingCount?: pulumi.Input<number>;
        /**
         * The TotalCount of Node.
         */
        totalCount?: pulumi.Input<number>;
        /**
         * The UpdatingCount of Node.
         */
        updatingCount?: pulumi.Input<number>;
    }

    export interface NodePoolsStatus {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: string;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: string;
    }

    export interface NodePoolsStatusArgs {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: pulumi.Input<string>;
    }

}

export namespace veenedge {
    export interface CloudServerBillingConfig {
        /**
         * The method of bandwidth billing. The value can be `MonthlyP95` or `DailyPeak`.
         */
        bandwidthBillingMethod: pulumi.Input<string>;
        /**
         * The method of computing billing. The value can be `MonthlyPeak` or `DailyPeak`.
         */
        computingBillingMethod: pulumi.Input<string>;
    }

    export interface CloudServerCustomData {
        /**
         * The custom data info.
         */
        data: pulumi.Input<string>;
    }

    export interface CloudServerNetworkConfig {
        /**
         * The peak of bandwidth.
         */
        bandwidthPeak: pulumi.Input<string>;
        /**
         * The name of custom external interface.
         */
        customExternalInterfaceName?: pulumi.Input<string>;
        /**
         * The name of custom internal interface.
         */
        customInternalInterfaceName?: pulumi.Input<string>;
        /**
         * Whether enable ipv6.
         */
        enableIpv6?: pulumi.Input<boolean>;
        /**
         * The internal peak of bandwidth.
         */
        internalBandwidthPeak?: pulumi.Input<string>;
    }

    export interface CloudServerScheduleStrategy {
        /**
         * The network strategy.
         */
        networkStrategy: pulumi.Input<string>;
        /**
         * The price strategy. The value can be `highPriority` or `lowPriority`.
         */
        priceStrategy: pulumi.Input<string>;
        /**
         * The type of schedule strategy. The value can be `dispersion` or `concentration`.
         */
        scheduleStrategy: pulumi.Input<string>;
    }

    export interface CloudServerStorageConfig {
        /**
         * The disk list info of data.
         */
        dataDiskLists?: pulumi.Input<pulumi.Input<inputs.veenedge.CloudServerStorageConfigDataDiskList>[]>;
        /**
         * The disk info of system.
         */
        systemDisk: pulumi.Input<inputs.veenedge.CloudServerStorageConfigSystemDisk>;
    }

    export interface CloudServerStorageConfigDataDiskList {
        /**
         * The capacity of storage.
         */
        capacity: pulumi.Input<string>;
        /**
         * The type of storage. The value can be `CloudBlockHDD` or `CloudBlockSSD`.
         */
        storageType: pulumi.Input<string>;
    }

    export interface CloudServerStorageConfigSystemDisk {
        /**
         * The capacity of storage.
         */
        capacity: pulumi.Input<string>;
        /**
         * The type of storage. The value can be `CloudBlockHDD` or `CloudBlockSSD`.
         */
        storageType: pulumi.Input<string>;
    }

}

export namespace vefaas {
    export interface FunctionEnv {
        /**
         * The Key of the environment variable.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of the environment variable.
         */
        value: pulumi.Input<string>;
    }

    export interface FunctionNasStorage {
        /**
         * Whether to enable NAS storage mounting.
         */
        enableNas: pulumi.Input<boolean>;
        /**
         * The configuration of NAS.
         */
        nasConfigs?: pulumi.Input<pulumi.Input<inputs.vefaas.FunctionNasStorageNasConfig>[]>;
    }

    export interface FunctionNasStorageNasConfig {
        /**
         * The ID of NAS file system.
         */
        fileSystemId: pulumi.Input<string>;
        /**
         * The directory of Function local mount.
         */
        localMountPath: pulumi.Input<string>;
        /**
         * The ID of NAS mount point.
         */
        mountPointId: pulumi.Input<string>;
        /**
         * Remote directory of the file system.
         */
        remotePath: pulumi.Input<string>;
    }

    export interface FunctionSourceAccessConfig {
        /**
         * The image repository password.
         */
        password: pulumi.Input<boolean>;
        /**
         * Mirror repository username.
         */
        username: pulumi.Input<string>;
    }

    export interface FunctionTlsConfig {
        /**
         * TLS log function switch.
         */
        enableLog: pulumi.Input<boolean>;
        /**
         * The project ID of TLS log topic.
         */
        tlsProjectId?: pulumi.Input<string>;
        /**
         * The topic ID of TLS log topic.
         */
        tlsTopicId?: pulumi.Input<string>;
    }

    export interface FunctionTosMountConfig {
        /**
         * After enabling TOS, you need to provide an AKSK with access rights to the TOS domain name. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
         */
        credentials?: pulumi.Input<inputs.vefaas.FunctionTosMountConfigCredentials>;
        /**
         * Whether to enable TOS storage mounting.
         */
        enableTos: pulumi.Input<boolean>;
        /**
         * After enabling TOS, you need to provide a TOS storage configuration list, with a maximum of 5 items.
         */
        mountPoints?: pulumi.Input<pulumi.Input<inputs.vefaas.FunctionTosMountConfigMountPoint>[]>;
    }

    export interface FunctionTosMountConfigCredentials {
        /**
         * The AccessKey ID (AK) of the Volcano Engine account.
         */
        accessKeyId: pulumi.Input<string>;
        /**
         * The Secret Access Key (SK) of the Volcano Engine account.
         */
        secretAccessKey: pulumi.Input<string>;
    }

    export interface FunctionTosMountConfigMountPoint {
        /**
         * TOS bucket.
         */
        bucketName: pulumi.Input<string>;
        /**
         * The mounted TOS Bucket path.
         */
        bucketPath: pulumi.Input<string>;
        /**
         * TOS Access domain name.
         */
        endpoint: pulumi.Input<string>;
        /**
         * Function local mount directory.
         */
        localMountPath: pulumi.Input<string>;
        /**
         * Function local directory access permissions. After mounting the TOS Bucket, whether the function local mount directory has read-only permissions.
         */
        readOnly?: pulumi.Input<boolean>;
    }

    export interface FunctionVpcConfig {
        /**
         * Function access to the public network switch.
         */
        enableSharedInternetAccess?: pulumi.Input<boolean>;
        /**
         * Whether the function enables private network access.
         */
        enableVpc: pulumi.Input<boolean>;
        /**
         * The ID of security group.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The ID of subnet.
         */
        subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The ID of VPC.
         */
        vpcId?: pulumi.Input<string>;
    }

    export interface GetReleasesFilter {
        /**
         * Filter key enumeration.
         */
        name?: string;
        /**
         * The filtering value of the query.
         */
        values?: string[];
    }

    export interface GetReleasesFilterArgs {
        /**
         * Filter key enumeration.
         */
        name?: pulumi.Input<string>;
        /**
         * The filtering value of the query.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetReleasesOrderBy {
        /**
         * Whether the sorting result is sorted in ascending order.
         */
        ascend?: boolean;
        /**
         * Key names used for sorting.
         */
        key?: string;
    }

    export interface GetReleasesOrderByArgs {
        /**
         * Whether the sorting result is sorted in ascending order.
         */
        ascend?: pulumi.Input<boolean>;
        /**
         * Key names used for sorting.
         */
        key?: pulumi.Input<string>;
    }

    export interface KafkaTriggerKafkaCredentials {
        /**
         * Kafka authentication mechanism.
         */
        mechanism: pulumi.Input<string>;
        /**
         * The SASL/PLAIN user password set when creating a Kafka instance.
         */
        password: pulumi.Input<string>;
        /**
         * The SASL/PLAIN user name set when creating a Kafka instance.
         */
        username: pulumi.Input<string>;
    }

    export interface ReleasesFilter {
        /**
         * Filter key enumeration.
         */
        name?: string;
        /**
         * The filtering value of the query.
         */
        values?: string[];
    }

    export interface ReleasesFilterArgs {
        /**
         * Filter key enumeration.
         */
        name?: pulumi.Input<string>;
        /**
         * The filtering value of the query.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ReleasesOrderBy {
        /**
         * Whether the sorting result is sorted in ascending order.
         */
        ascend?: boolean;
        /**
         * Key names used for sorting.
         */
        key?: string;
    }

    export interface ReleasesOrderByArgs {
        /**
         * Whether the sorting result is sorted in ascending order.
         */
        ascend?: pulumi.Input<boolean>;
        /**
         * Key names used for sorting.
         */
        key?: pulumi.Input<string>;
    }

}

export namespace vepfs {
    export interface FileSystemTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface MountServiceAttachFileSystem {
        /**
         * The account id of the vepfs file system.
         */
        accountId?: pulumi.Input<string>;
        /**
         * The id of the vepfs file system.
         */
        customerPath?: pulumi.Input<string>;
        /**
         * The id of the vepfs file system.
         */
        fileSystemId?: pulumi.Input<string>;
        /**
         * The name of the vepfs file system.
         */
        fileSystemName?: pulumi.Input<string>;
        /**
         * The status of the mount service.
         */
        status?: pulumi.Input<string>;
    }

    export interface MountServiceNode {
        /**
         * The default password of ecs instance.
         */
        defaultPassword?: pulumi.Input<string>;
        /**
         * The id of ecs instance.
         */
        nodeId?: pulumi.Input<string>;
    }

}

export namespace vke {
    export interface AddonsStatus {
        /**
         * The state condition in the current main state of the addon, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`,`Unknown`, `ClusterNotRunning`, `CrashLoopBackOff`, `SchedulingFailed`, `NameConflict`, `ResourceCleanupFailed`, `ClusterVersionUpgrading`.
         */
        conditionsType?: string;
        /**
         * The status of addon. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.
         */
        phase?: string;
    }

    export interface AddonsStatusArgs {
        /**
         * The state condition in the current main state of the addon, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`,`Unknown`, `ClusterNotRunning`, `CrashLoopBackOff`, `SchedulingFailed`, `NameConflict`, `ResourceCleanupFailed`, `ClusterVersionUpgrading`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The status of addon. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface ClusterClusterConfig {
        /**
         * Cluster API Server public network access configuration.
         */
        apiServerPublicAccessConfig?: pulumi.Input<inputs.vke.ClusterClusterConfigApiServerPublicAccessConfig>;
        /**
         * Cluster API Server public network access configuration, the value is `true` or `false`.
         */
        apiServerPublicAccessEnabled?: pulumi.Input<boolean>;
        /**
         * [SkipDoc]The IpFamily configuration,the value is `Ipv4` or `DualStack`.
         */
        ipFamily?: pulumi.Input<string>;
        /**
         * Node public network access configuration, the value is `true` or `false`.
         */
        resourcePublicAccessDefaultEnabled?: pulumi.Input<boolean>;
        /**
         * The subnet ID for the cluster control plane to communicate within the private network.
         * Up to 3 subnets can be selected from each available zone, and a maximum of 2 subnets can be added to each available zone.
         * Cannot support deleting configured subnets.
         */
        subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterClusterConfigApiServerPublicAccessConfig {
        /**
         * Public network access network configuration.
         */
        publicAccessNetworkConfig?: pulumi.Input<inputs.vke.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig>;
    }

    export interface ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfig {
        /**
         * The peak bandwidth of the public IP, unit: Mbps.
         */
        bandwidth?: pulumi.Input<number>;
        /**
         * Billing type of public IP, the value is `PostPaidByBandwidth` or `PostPaidByTraffic`.
         */
        billingType?: pulumi.Input<string>;
    }

    export interface ClusterIrsaConfig {
        /**
         * The audience of the IRSA.
         */
        audience?: pulumi.Input<string>;
        /**
         * Whether to enable IRSA for the cluster.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The issuer of the IRSA.
         */
        issuer?: pulumi.Input<string>;
        /**
         * The JWKS URL of the IRSA.
         */
        jwksUrl?: pulumi.Input<string>;
        /**
         * The OIDC trn of the IRSA.
         */
        oidcTrn?: pulumi.Input<string>;
        /**
         * The OpenID Connect configuration URL of the IRSA.
         */
        openIdConfigUrl?: pulumi.Input<string>;
    }

    export interface ClusterLoggingConfig {
        /**
         * The TLS log item ID of the collection target.
         */
        logProjectId?: pulumi.Input<string>;
        /**
         * Cluster logging options. This structure can only be modified and added, and cannot be deleted. When encountering a `cannot be deleted` error, please query the log setups of the current cluster and fill in the current `tf` file.
         */
        logSetups?: pulumi.Input<pulumi.Input<inputs.vke.ClusterLoggingConfigLogSetup>[]>;
    }

    export interface ClusterLoggingConfigLogSetup {
        /**
         * Whether to enable the log option, true means enable, false means not enable, the default is false. When Enabled is changed from false to true, a new Topic will be created.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The storage time of logs in Log Service. After the specified log storage time is exceeded, the expired logs in this log topic will be automatically cleared. The unit is days, and the default is 30 days. The value range is 1 to 3650, specifying 3650 days means permanent storage.
         */
        logTtl?: pulumi.Input<number>;
        /**
         * The current types of logs that can be enabled are:
         * Audit: Cluster audit logs.
         * KubeApiServer: kube-apiserver component logs.
         * KubeScheduler: kube-scheduler component logs.
         * KubeControllerManager: kube-controller-manager component logs.
         */
        logType: pulumi.Input<string>;
    }

    export interface ClusterPodsConfig {
        /**
         * Flannel network configuration.
         */
        flannelConfig?: pulumi.Input<inputs.vke.ClusterPodsConfigFlannelConfig>;
        /**
         * The container network model of the cluster, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
         */
        podNetworkMode: pulumi.Input<string>;
        /**
         * VPC-CNI network configuration.
         */
        vpcCniConfig?: pulumi.Input<inputs.vke.ClusterPodsConfigVpcCniConfig>;
    }

    export interface ClusterPodsConfigFlannelConfig {
        /**
         * The maximum number of single-node Pod instances for a Flannel container network, the value can be `16` or `32` or `64` or `128` or `256`.
         */
        maxPodsPerNode?: pulumi.Input<number>;
        /**
         * Pod CIDR for the Flannel container network.
         */
        podCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterPodsConfigVpcCniConfig {
        /**
         * A list of Pod subnet IDs for the VPC-CNI container network.
         */
        subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The private network where the cluster control plane network resides.
         */
        vpcId?: pulumi.Input<string>;
    }

    export interface ClusterServicesConfig {
        /**
         * The IPv4 private network address exposed by the service.
         */
        serviceCidrsv4s: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ClusterTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface ClustersStatus {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
         */
        conditionsType?: string;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: string;
    }

    export interface ClustersStatusArgs {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface ClustersTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface ClustersTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface DefaultNodePoolBatchAttachInstance {
        /**
         * The flag of additional container storage enable, the value is `true` or `false`..Default is `false`.
         */
        additionalContainerStorageEnabled?: pulumi.Input<boolean>;
        /**
         * The container storage path.When additionalContainerStorageEnabled is `false` will ignore.
         */
        containerStoragePath?: pulumi.Input<string>;
        /**
         * ID of the resource.
         */
        id?: pulumi.Input<string>;
        /**
         * The Image Id to the ECS Instance.
         */
        imageId?: pulumi.Input<string>;
        /**
         * The instance id.
         */
        instanceId: pulumi.Input<string>;
        /**
         * The flag of keep instance name, the value is `true` or `false`.Default is `false`.
         */
        keepInstanceName?: pulumi.Input<boolean>;
        /**
         * The status phase to the Node.
         */
        phase?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolBatchAttachKubernetesConfig {
        /**
         * The Cordon of KubernetesConfig.
         */
        cordon?: pulumi.Input<boolean>;
        /**
         * The Labels of KubernetesConfig.
         */
        labels?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachKubernetesConfigLabel>[]>;
        /**
         * The Taints of KubernetesConfig.
         */
        taints?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachKubernetesConfigTaint>[]>;
    }

    export interface DefaultNodePoolBatchAttachKubernetesConfigLabel {
        /**
         * The Key of Labels.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Labels.
         */
        value?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolBatchAttachKubernetesConfigTaint {
        /**
         * The Effect of Taints. The value can be one of the following: `NoSchedule`, `NoExecute`, `PreferNoSchedule`, default value is `NoSchedule`.
         */
        effect?: pulumi.Input<string>;
        /**
         * The Key of Taints.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Taints.
         */
        value?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolBatchAttachNodeConfig {
        /**
         * Tags for Ecs.
         */
        ecsTags?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachNodeConfigEcsTag>[]>;
        /**
         * The initializeScript of NodeConfig.
         */
        initializeScript?: pulumi.Input<string>;
        /**
         * The NamePrefix of NodeConfig.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * The PreScript of NodeConfig.
         */
        preScript?: pulumi.Input<string>;
        /**
         * The Security of NodeConfig.
         */
        securities?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachNodeConfigSecurity>[]>;
    }

    export interface DefaultNodePoolBatchAttachNodeConfigEcsTag {
        /**
         * The Key of Tags.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolBatchAttachNodeConfigSecurity {
        /**
         * The Login of Security.
         */
        logins?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachNodeConfigSecurityLogin>[]>;
        /**
         * The SecurityGroupIds of Security.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The SecurityStrategies of Security.
         */
        securityStrategies?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface DefaultNodePoolBatchAttachNodeConfigSecurityLogin {
        /**
         * The Password of Security.
         */
        password?: pulumi.Input<string>;
        /**
         * The SshKeyPairName of Security.
         */
        sshKeyPairName?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolBatchAttachTag {
        /**
         * The Key of Tags.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolInstance {
        /**
         * The flag of additional container storage enable, the value is `true` or `false`..Default is `false`.
         */
        additionalContainerStorageEnabled?: pulumi.Input<boolean>;
        /**
         * The container storage path.When additionalContainerStorageEnabled is `false` will ignore.
         */
        containerStoragePath?: pulumi.Input<string>;
        /**
         * ID of the resource.
         */
        id?: pulumi.Input<string>;
        /**
         * The Image Id to the ECS Instance.
         */
        imageId?: pulumi.Input<string>;
        /**
         * The instance id.
         */
        instanceId: pulumi.Input<string>;
        /**
         * The flag of keep instance name, the value is `true` or `false`.Default is `false`.
         */
        keepInstanceName?: pulumi.Input<boolean>;
        /**
         * The status phase to the Node.
         */
        phase?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolKubernetesConfig {
        /**
         * The Cordon of KubernetesConfig.
         */
        cordon: pulumi.Input<boolean>;
        /**
         * The Labels of KubernetesConfig.
         */
        labels?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolKubernetesConfigLabel>[]>;
        /**
         * The NamePrefix of node metadata.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * The Taints of KubernetesConfig.
         */
        taints?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolKubernetesConfigTaint>[]>;
    }

    export interface DefaultNodePoolKubernetesConfigLabel {
        /**
         * The Key of Labels.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Labels.
         */
        value?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolKubernetesConfigTaint {
        /**
         * The Effect of Taints.
         */
        effect?: pulumi.Input<string>;
        /**
         * The Key of Taints.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Taints.
         */
        value?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolNodeConfig {
        /**
         * Tags for Ecs.
         */
        ecsTags?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolNodeConfigEcsTag>[]>;
        /**
         * The initializeScript of NodeConfig.
         */
        initializeScript?: pulumi.Input<string>;
        /**
         * The NamePrefix of NodeConfig.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * The PreScript of NodeConfig.
         */
        preScript?: pulumi.Input<string>;
        /**
         * The Security of NodeConfig.
         */
        security: pulumi.Input<inputs.vke.DefaultNodePoolNodeConfigSecurity>;
    }

    export interface DefaultNodePoolNodeConfigEcsTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface DefaultNodePoolNodeConfigSecurity {
        /**
         * The Login of Security.
         */
        login: pulumi.Input<inputs.vke.DefaultNodePoolNodeConfigSecurityLogin>;
        /**
         * The SecurityGroupIds of Security.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The SecurityStrategies of Security.
         */
        securityStrategies?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface DefaultNodePoolNodeConfigSecurityLogin {
        /**
         * The Password of Security.
         */
        password?: pulumi.Input<string>;
        /**
         * The SshKeyPairName of Security.
         */
        sshKeyPairName?: pulumi.Input<string>;
    }

    export interface DefaultNodePoolTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetAddonsStatus {
        /**
         * The state condition in the current main state of the addon, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`,`Unknown`, `ClusterNotRunning`, `CrashLoopBackOff`, `SchedulingFailed`, `NameConflict`, `ResourceCleanupFailed`, `ClusterVersionUpgrading`.
         */
        conditionsType?: string;
        /**
         * The status of addon. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.
         */
        phase?: string;
    }

    export interface GetAddonsStatusArgs {
        /**
         * The state condition in the current main state of the addon, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`,`Unknown`, `ClusterNotRunning`, `CrashLoopBackOff`, `SchedulingFailed`, `NameConflict`, `ResourceCleanupFailed`, `ClusterVersionUpgrading`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The status of addon. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Failed`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface GetClustersStatus {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
         */
        conditionsType?: string;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: string;
    }

    export interface GetClustersStatusArgs {
        /**
         * The state condition in the current main state of the cluster, that is, the reason for entering the main state, there can be multiple reasons, the value contains `Progressing`, `Ok`, `Degraded`, `SetByProvider`, `Balance`, `Security`, `CreateError`, `ResourceCleanupFailed`, `LimitedByQuota`, `StockOut`,`Unknown`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The status of cluster. the value contains `Creating`, `Running`, `Updating`, `Deleting`, `Stopped`, `Failed`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface GetClustersTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetClustersTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetNodePoolsStatus {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: string;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: string;
    }

    export interface GetNodePoolsStatusArgs {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface GetNodePoolsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetNodePoolsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetNodesStatus {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        conditionsType?: string;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
         */
        phase?: string;
    }

    export interface GetNodesStatusArgs {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface NodeKubernetesConfig {
        /**
         * The Cordon of KubernetesConfig.
         */
        cordon?: pulumi.Input<boolean>;
        /**
         * The Labels of KubernetesConfig.
         */
        labels?: pulumi.Input<pulumi.Input<inputs.vke.NodeKubernetesConfigLabel>[]>;
        /**
         * The Taints of KubernetesConfig.
         */
        taints?: pulumi.Input<pulumi.Input<inputs.vke.NodeKubernetesConfigTaint>[]>;
    }

    export interface NodeKubernetesConfigLabel {
        /**
         * The Key of Labels.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Labels.
         */
        value?: pulumi.Input<string>;
    }

    export interface NodeKubernetesConfigTaint {
        /**
         * The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
         */
        effect?: pulumi.Input<string>;
        /**
         * The Key of Taints.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Taints.
         */
        value?: pulumi.Input<string>;
    }

    export interface NodePoolAutoScaling {
        /**
         * The DesiredReplicas of AutoScaling, default 0, range in minReplicas to max_replicas.
         */
        desiredReplicas?: pulumi.Input<number>;
        /**
         * Whether to enable the auto scaling function of the node pool. When a node needs to be manually added to the node pool, the value of this field must be `false`.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The MaxReplicas of AutoScaling, default 10, range in 1~2000. This field is valid when the value of `enabled` is `true`.
         */
        maxReplicas?: pulumi.Input<number>;
        /**
         * The MinReplicas of AutoScaling, default 0. This field is valid when the value of `enabled` is `true`.
         */
        minReplicas?: pulumi.Input<number>;
        /**
         * The Priority of AutoScaling, default 10, rang in 0~100. This field is valid when the value of `enabled` is `true` and the value of `subnetPolicy` is `Priority`.
         */
        priority?: pulumi.Input<number>;
        /**
         * Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
         */
        subnetPolicy?: pulumi.Input<string>;
    }

    export interface NodePoolKubernetesConfig {
        /**
         * Whether to disable the function of automatically synchronizing labels and taints to existing nodes. Default is false.
         */
        autoSyncDisabled?: pulumi.Input<boolean>;
        /**
         * The Cordon of KubernetesConfig.
         */
        cordon: pulumi.Input<boolean>;
        /**
         * The KubeletConfig of KubernetesConfig. After adding parameters, deleting parameters does not take effect.
         */
        kubeletConfig?: pulumi.Input<inputs.vke.NodePoolKubernetesConfigKubeletConfig>;
        /**
         * The Labels of KubernetesConfig.
         */
        labels?: pulumi.Input<pulumi.Input<inputs.vke.NodePoolKubernetesConfigLabel>[]>;
        /**
         * The NamePrefix of node metadata.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * The Taints of KubernetesConfig.
         */
        taints?: pulumi.Input<pulumi.Input<inputs.vke.NodePoolKubernetesConfigTaint>[]>;
    }

    export interface NodePoolKubernetesConfigKubeletConfig {
        /**
         * The FeatureGates of KubeletConfig.
         */
        featureGates?: pulumi.Input<inputs.vke.NodePoolKubernetesConfigKubeletConfigFeatureGates>;
        /**
         * The TopologyManagerPolicy of KubeletConfig. Valid values: `none`, `restricted`, `best-effort`, `single-numa-node`. Default is `none`.
         */
        topologyManagerPolicy?: pulumi.Input<string>;
        /**
         * The TopologyManagerScope of KubeletConfig. Valid values: `container`.
         */
        topologyManagerScope?: pulumi.Input<string>;
    }

    export interface NodePoolKubernetesConfigKubeletConfigFeatureGates {
        /**
         * Whether to enable QoSResourceManager. Default is false.
         */
        qosResourceManager?: pulumi.Input<boolean>;
    }

    export interface NodePoolKubernetesConfigLabel {
        /**
         * The Key of Labels.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Labels.
         */
        value?: pulumi.Input<string>;
    }

    export interface NodePoolKubernetesConfigTaint {
        /**
         * The Effect of Taints, the value can be `NoSchedule` or `NoExecute` or `PreferNoSchedule`.
         */
        effect?: pulumi.Input<string>;
        /**
         * The Key of Taints.
         */
        key?: pulumi.Input<string>;
        /**
         * The Value of Taints.
         */
        value?: pulumi.Input<string>;
    }

    export interface NodePoolManagement {
        /**
         * Whether to enable the management function of the node pool. Default is `false`.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The Remedy Config of NodePool. This field is valid when the value of `enabled` is `true`.
         */
        remedyConfig?: pulumi.Input<inputs.vke.NodePoolManagementRemedyConfig>;
    }

    export interface NodePoolManagementRemedyConfig {
        /**
         * Whether to enable the remedy function of the node pool. Default is `false`.
         */
        enabled?: pulumi.Input<boolean>;
        /**
         * The ID of the remedy policy. This field is valid when the value of `enabled` is `true`.
         */
        id?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfig {
        /**
         * The AdditionalContainerStorageEnabled of NodeConfig.
         */
        additionalContainerStorageEnabled?: pulumi.Input<boolean>;
        /**
         * Is AutoRenew of PrePaid instance of NodeConfig. Valid values: true, false. when InstanceChargeType is PrePaid, default value is true.
         */
        autoRenew?: pulumi.Input<boolean>;
        /**
         * The AutoRenewPeriod of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 6, 12. Unit: month. when InstanceChargeType is PrePaid and AutoRenew enable, default value is 1.
         */
        autoRenewPeriod?: pulumi.Input<number>;
        /**
         * The DataVolumes of NodeConfig.
         */
        dataVolumes?: pulumi.Input<pulumi.Input<inputs.vke.NodePoolNodeConfigDataVolume>[]>;
        /**
         * Tags for Ecs.
         */
        ecsTags?: pulumi.Input<pulumi.Input<inputs.vke.NodePoolNodeConfigEcsTag>[]>;
        /**
         * The IDs of HpcCluster, only one ID is supported currently.
         */
        hpcClusterIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The ImageId of NodeConfig.
         */
        imageId?: pulumi.Input<string>;
        /**
         * The initializeScript of NodeConfig.
         */
        initializeScript?: pulumi.Input<string>;
        /**
         * The InstanceChargeType of PrePaid instance of NodeConfig. Valid values: PostPaid, PrePaid. Default value: PostPaid.
         */
        instanceChargeType?: pulumi.Input<string>;
        /**
         * The InstanceTypeIds of NodeConfig. The value can get from volcengine.vke.getSupportResourceTypes datasource.
         */
        instanceTypeIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The NamePrefix of NodeConfig.
         */
        namePrefix?: pulumi.Input<string>;
        /**
         * The Period of PrePaid instance of NodeConfig. Valid values: 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 24, 36. Unit: month. when InstanceChargeType is PrePaid, default value is 12.
         */
        period?: pulumi.Input<number>;
        /**
         * The PreScript of NodeConfig.
         */
        preScript?: pulumi.Input<string>;
        /**
         * The project name of the ecs instance.
         */
        projectName?: pulumi.Input<string>;
        /**
         * The Security of NodeConfig.
         */
        security: pulumi.Input<inputs.vke.NodePoolNodeConfigSecurity>;
        /**
         * The SubnetIds of NodeConfig.
         */
        subnetIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The SystemVolume of NodeConfig.
         */
        systemVolume?: pulumi.Input<inputs.vke.NodePoolNodeConfigSystemVolume>;
    }

    export interface NodePoolNodeConfigDataVolume {
        /**
         * The target mount directory of the disk. Must start with `/`.
         */
        mountPoint?: pulumi.Input<string>;
        /**
         * The Size of DataVolumes, the value range in 20~32768. Default value is `20`.
         */
        size?: pulumi.Input<number>;
        /**
         * The Type of DataVolumes, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`. Default value is `ESSD_PL0`.
         */
        type?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigEcsTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigSecurity {
        /**
         * The Login of Security.
         */
        login?: pulumi.Input<inputs.vke.NodePoolNodeConfigSecurityLogin>;
        /**
         * The SecurityGroupIds of Security.
         */
        securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The SecurityStrategies of Security, the value can be empty or `Hids`.
         */
        securityStrategies?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NodePoolNodeConfigSecurityLogin {
        /**
         * The Password of Security, this field must be encoded with base64.
         */
        password?: pulumi.Input<string>;
        /**
         * The SshKeyPairName of Security.
         */
        sshKeyPairName?: pulumi.Input<string>;
    }

    export interface NodePoolNodeConfigSystemVolume {
        /**
         * The Size of SystemVolume, the value range in 20~2048.
         */
        size?: pulumi.Input<number>;
        /**
         * The Type of SystemVolume, the value can be `PTSSD` or `ESSD_PL0` or `ESSD_FlexPL`.
         */
        type?: pulumi.Input<string>;
    }

    export interface NodePoolNodeStatistic {
        /**
         * The CreatingCount of Node.
         */
        creatingCount?: pulumi.Input<number>;
        /**
         * The DeletingCount of Node.
         */
        deletingCount?: pulumi.Input<number>;
        /**
         * The FailedCount of Node.
         */
        failedCount?: pulumi.Input<number>;
        /**
         * The RunningCount of Node.
         */
        runningCount?: pulumi.Input<number>;
        /**
         * (**Deprecated**) This field has been deprecated and is not recommended for use. The StartingCount of Node.
         *
         * @deprecated This field has been deprecated and is not recommended for use.
         */
        startingCount?: pulumi.Input<number>;
        /**
         * (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppedCount of Node.
         *
         * @deprecated This field has been deprecated and is not recommended for use.
         */
        stoppedCount?: pulumi.Input<number>;
        /**
         * (**Deprecated**) This field has been deprecated and is not recommended for use. The StoppingCount of Node.
         *
         * @deprecated This field has been deprecated and is not recommended for use.
         */
        stoppingCount?: pulumi.Input<number>;
        /**
         * The TotalCount of Node.
         */
        totalCount?: pulumi.Input<number>;
        /**
         * The UpdatingCount of Node.
         */
        updatingCount?: pulumi.Input<number>;
    }

    export interface NodePoolTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface NodePoolsStatus {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: string;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: string;
    }

    export interface NodePoolsStatusArgs {
        /**
         * Indicates the status condition of the node pool in the active state. The value can be `Progressing` or `Ok` or `VersionPartlyUpgraded` or `StockOut` or `LimitedByQuota` or `Balance` or `Degraded` or `ClusterVersionUpgrading` or `Cluster` or `ResourceCleanupFailed` or `Unknown` or `ClusterNotRunning` or `SetByProvider`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
         */
        phase?: pulumi.Input<string>;
    }

    export interface NodePoolsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface NodePoolsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface NodesStatus {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        conditionsType?: string;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
         */
        phase?: string;
    }

    export interface NodesStatusArgs {
        /**
         * The Type of Node Condition, the value is `Progressing` or `Ok` or `Unschedulable` or `InitilizeFailed` or `Unknown` or `NotReady` or `Security` or `Balance` or `ResourceCleanupFailed`.
         */
        conditionsType?: pulumi.Input<string>;
        /**
         * The Phase of Node, the value is `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Starting` or `Stopping` or `Stopped`.
         */
        phase?: pulumi.Input<string>;
    }

}

export namespace vmp {
    export interface AlertingRuleAnnotation {
        /**
         * The name of the annotation.
         */
        name: pulumi.Input<string>;
        /**
         * The value of the annotation.
         */
        value: pulumi.Input<string>;
    }

    export interface AlertingRuleLabel {
        /**
         * The name of the label.
         */
        name: pulumi.Input<string>;
        /**
         * The value of the label.
         */
        value: pulumi.Input<string>;
    }

    export interface AlertingRuleLevel {
        /**
         * The comparator of the vmp alerting rule. Valid values: `>`, `>=`, `<`, `<=`, `==`, `!=`.
         */
        comparator: pulumi.Input<string>;
        /**
         * The duration of the alerting rule. Valid values: `0s`, `1m`, `2m`, `5m`, `10m`.
         */
        for: pulumi.Input<string>;
        /**
         * The level of the vmp alerting rule. Valid values: `P0`, `P1`, `P2`. The value of this field cannot be duplicate.
         */
        level: pulumi.Input<string>;
        /**
         * The threshold of the vmp alerting rule.
         */
        threshold: pulumi.Input<number>;
    }

    export interface AlertingRuleQuery {
        /**
         * The prom ql of query.
         */
        promQl: pulumi.Input<string>;
        /**
         * The id of the workspace.
         */
        workspaceId: pulumi.Input<string>;
    }

    export interface ContactDingTalkBotWebhook {
        /**
         * The address of webhook.
         */
        address: pulumi.Input<string>;
        /**
         * The mobiles of user.
         */
        atMobiles?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The ids of user.
         */
        atUserIds?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The secret key of webhook.
         */
        secretKey?: pulumi.Input<string>;
    }

    export interface ContactLarkBotWebhook {
        /**
         * The address of webhook.
         */
        address: pulumi.Input<string>;
        /**
         * The secret key of webhook.
         */
        secretKey?: pulumi.Input<string>;
    }

    export interface ContactPhoneNumber {
        /**
         * The country code of phone number. The value is `+86`.
         */
        countryCode: pulumi.Input<string>;
        /**
         * The number of phone number.
         */
        number: pulumi.Input<string>;
    }

    export interface ContactWeComBotWebhook {
        /**
         * The address of webhook.
         */
        address: pulumi.Input<string>;
        /**
         * The ids of user.
         */
        atUserIds?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface ContactWebhook {
        /**
         * The address of webhook.
         */
        address: pulumi.Input<string>;
        /**
         * The token of webhook.
         */
        token?: pulumi.Input<string>;
    }

    export interface GetWorkspacesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        values: string[];
    }

    export interface GetWorkspacesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NotifyGroupPolicyLevel {
        /**
         * The aggregate dimension, the value can be `__rule__`.
         */
        groupBies: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The aggregation cycle. Integer form, unit is second.
         */
        groupInterval: pulumi.Input<string>;
        /**
         * The wait time. Integer form, unit is second.
         */
        groupWait: pulumi.Input<string>;
        /**
         * The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
         */
        level: pulumi.Input<string>;
        /**
         * The notification cycle. Integer form, unit is second.
         */
        repeatInterval: pulumi.Input<string>;
    }

    export interface NotifyPolicyLevel {
        /**
         * The alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
         */
        channels: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The contact group for the alarm notification policy.
         */
        contactGroupIds: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * The level of the policy, the value can be one of the following: `P0`, `P1`, `P2`.
         */
        level: pulumi.Input<string>;
        /**
         * The resolved alarm notification method of the alarm notification policy, the optional value can be `Email`, `Webhook`, `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
         */
        resolvedChannels?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface NotifyTemplateActive {
        /**
         * The content of notify template.
         */
        content: pulumi.Input<string>;
        /**
         * The title of notify template.
         */
        title: pulumi.Input<string>;
    }

    export interface NotifyTemplateResolved {
        /**
         * The content of notify template.
         */
        content: pulumi.Input<string>;
        /**
         * The title of notify template.
         */
        title: pulumi.Input<string>;
    }

    export interface WorkspaceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface WorkspacesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        values: string[];
    }

    export interface WorkspacesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        values: pulumi.Input<pulumi.Input<string>[]>;
    }

}

export namespace vpc {
    export interface FlowLogTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface FlowLogsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface FlowLogsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetFlowLogsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetFlowLogsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetHaVipsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetHaVipsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetNetworkAclsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetNetworkAclsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetNetworkInterfacesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetNetworkInterfacesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetPrefixListsTagFilter {
        /**
         * The key of the tag.
         */
        key?: string;
        /**
         * The values of the tag.
         */
        values?: string[];
    }

    export interface GetPrefixListsTagFilterArgs {
        /**
         * The key of the tag.
         */
        key?: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface GetRouteTablesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetRouteTablesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetSecurityGroupsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetSecurityGroupsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetSubnetsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetSubnetsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetTrafficMirrorFilterRulesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetTrafficMirrorFilterRulesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetTrafficMirrorFiltersTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetTrafficMirrorFiltersTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetTrafficMirrorSessionsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetTrafficMirrorSessionsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetTrafficMirrorTargetsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetTrafficMirrorTargetsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetVpcsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetVpcsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface HaVipTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface HaVipsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface HaVipsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface NetworkAclEgressAclEntry {
        /**
         * The description of entry.
         */
        description?: pulumi.Input<string>;
        /**
         * The DestinationCidrIp of entry.
         */
        destinationCidrIp?: pulumi.Input<string>;
        /**
         * The id of entry.
         */
        networkAclEntryId?: pulumi.Input<string>;
        /**
         * The name of entry.
         */
        networkAclEntryName?: pulumi.Input<string>;
        /**
         * The policy of entry. Default is `accept`. The value can be `accept` or `drop`.
         */
        policy?: pulumi.Input<string>;
        /**
         * The port of entry. Default is `-1/-1`. When Protocol is `all`, `icmp` or `gre`, the port range is `-1/-1`, which means no port restriction.When the Protocol is `tcp` or `udp`, the port range is `1~65535`, and the format is `1/200`, `80/80`,which means port 1 to port 200, port 80.
         */
        port?: pulumi.Input<string>;
        /**
         * The priority of entry.
         */
        priority?: pulumi.Input<number>;
        /**
         * The protocol of entry. The value can be `icmp` or `gre` or `tcp` or `udp` or `all`. Default is `all`.
         */
        protocol?: pulumi.Input<string>;
    }

    export interface NetworkAclIngressAclEntry {
        /**
         * The description of entry.
         */
        description?: pulumi.Input<string>;
        /**
         * The id of entry.
         */
        networkAclEntryId?: pulumi.Input<string>;
        /**
         * The name of entry.
         */
        networkAclEntryName?: pulumi.Input<string>;
        /**
         * The policy of entry, default is `accept`. The value can be `accept` or `drop`.
         */
        policy?: pulumi.Input<string>;
        /**
         * The port of entry. Default is `-1/-1`. When Protocol is `all`, `icmp` or `gre`, the port range is `-1/-1`, which means no port restriction. When the Protocol is `tcp` or `udp`, the port range is `1~65535`, and the format is `1/200`, `80/80`, which means port 1 to port 200, port 80.
         */
        port?: pulumi.Input<string>;
        /**
         * The priority of entry.
         */
        priority?: pulumi.Input<number>;
        /**
         * The protocol of entry, default is `all`. The value can be `icmp` or `gre` or `tcp` or `udp` or `all`.
         */
        protocol?: pulumi.Input<string>;
        /**
         * The SourceCidrIp of entry.
         */
        sourceCidrIp?: pulumi.Input<string>;
    }

    export interface NetworkAclTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface NetworkAclsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface NetworkAclsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface NetworkInterfaceTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface NetworkInterfacesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface NetworkInterfacesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface PrefixListPrefixListAssociation {
        /**
         * Associated resource ID.
         */
        resourceId?: pulumi.Input<string>;
        /**
         * Related resource types.
         */
        resourceType?: pulumi.Input<string>;
    }

    export interface PrefixListPrefixListEntry {
        /**
         * CIDR of prefix list entries.
         */
        cidr?: pulumi.Input<string>;
        /**
         * Description of prefix list entries.
         */
        description?: pulumi.Input<string>;
    }

    export interface PrefixListTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface PrefixListsTagFilter {
        /**
         * The key of the tag.
         */
        key?: string;
        /**
         * The values of the tag.
         */
        values?: string[];
    }

    export interface PrefixListsTagFilterArgs {
        /**
         * The key of the tag.
         */
        key?: pulumi.Input<string>;
        /**
         * The values of the tag.
         */
        values?: pulumi.Input<pulumi.Input<string>[]>;
    }

    export interface RouteTableTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface RouteTablesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface RouteTablesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface SecurityGroupTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface SecurityGroupsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface SecurityGroupsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface SubnetTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface SubnetsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface SubnetsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TrafficMirrorFilterRulesTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface TrafficMirrorFilterRulesTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TrafficMirrorFilterTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TrafficMirrorFiltersTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface TrafficMirrorFiltersTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TrafficMirrorSessionTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TrafficMirrorSessionsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface TrafficMirrorSessionsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TrafficMirrorTargetTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface TrafficMirrorTargetsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface TrafficMirrorTargetsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface VpcAssociateCen {
        /**
         * The ID of CEN.
         */
        cenId?: pulumi.Input<string>;
        /**
         * The owner ID of CEN.
         */
        cenOwnerId?: pulumi.Input<string>;
        /**
         * The status of CEN.
         */
        cenStatus?: pulumi.Input<string>;
    }

    export interface VpcTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface VpcsTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface VpcsTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace vpn {
    export interface GatewayTag {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GatewaysTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GatewaysTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

    export interface GetGatewaysTag {
        /**
         * The Key of Tags.
         */
        key: string;
        /**
         * The Value of Tags.
         */
        value: string;
    }

    export interface GetGatewaysTagArgs {
        /**
         * The Key of Tags.
         */
        key: pulumi.Input<string>;
        /**
         * The Value of Tags.
         */
        value: pulumi.Input<string>;
    }

}

export namespace waf {
    export interface AclRuleAccurateGroup {
        /**
         * Details of advanced conditions.
         */
        accurateRules: pulumi.Input<pulumi.Input<inputs.waf.AclRuleAccurateGroupAccurateRule>[]>;
        /**
         * The logical relationship of advanced conditions.
         */
        logic: pulumi.Input<number>;
    }

    export interface AclRuleAccurateGroupAccurateRule {
        /**
         * The HTTP object to be added to the advanced conditions.
         */
        httpObj: pulumi.Input<string>;
        /**
         * The matching field for HTTP objects.
         */
        objType: pulumi.Input<number>;
        /**
         * The logical operator for the condition.
         */
        opretar: pulumi.Input<number>;
        /**
         * Operate the properties of the http object.
         */
        property: pulumi.Input<number>;
        /**
         * The value to be matched.
         */
        valueString: pulumi.Input<string>;
    }

    export interface AclRuleHostGroup {
        /**
         * The ID of the domain group.
         */
        hostGroupId?: pulumi.Input<number>;
        /**
         * Rule name.
         */
        name?: pulumi.Input<string>;
    }

    export interface AclRuleIpGroup {
        /**
         * Required if IpAddType = 2.
         */
        ipGroupId?: pulumi.Input<number>;
        /**
         * Rule name.
         */
        name?: pulumi.Input<string>;
    }

    export interface BotAnalyseProtectRuleAccurateGroup {
        /**
         * Request characteristic information of the rule group.
         */
        accurateRules?: pulumi.Input<pulumi.Input<inputs.waf.BotAnalyseProtectRuleAccurateGroupAccurateRule>[]>;
        /**
         * In the rule group, the high-level conditional operation relationships corresponding to each rule.
         */
        logic?: pulumi.Input<number>;
    }

    export interface BotAnalyseProtectRuleAccurateGroupAccurateRule {
        /**
         * Custom object.
         */
        httpObj?: pulumi.Input<string>;
        /**
         * matching field.
         */
        objType?: pulumi.Input<number>;
        /**
         * The logical operator for the condition.
         */
        opretar?: pulumi.Input<number>;
        /**
         * Operate the properties of the http object.
         */
        property?: pulumi.Input<number>;
        /**
         * The value to be matched.
         */
        valueString?: pulumi.Input<string>;
    }

    export interface BotAnalyseProtectRuleRuleGroup {
        /**
         * Rule group information.
         */
        group?: pulumi.Input<inputs.waf.BotAnalyseProtectRuleRuleGroupGroup>;
        /**
         * Specific rule information within the rule group.
         */
        rules?: pulumi.Input<pulumi.Input<inputs.waf.BotAnalyseProtectRuleRuleGroupRule>[]>;
    }

    export interface BotAnalyseProtectRuleRuleGroupGroup {
        /**
         * After the rule creation is completed, the priority of the automatically generated rule group.
         */
        accurateGroupPriority?: pulumi.Input<number>;
        /**
         * Request characteristic information of the rule group.
         */
        accurateRules?: pulumi.Input<pulumi.Input<inputs.waf.BotAnalyseProtectRuleRuleGroupGroupAccurateRule>[]>;
        /**
         * Rule unique identifier.
         */
        id?: pulumi.Input<number>;
        /**
         * In the rule group, the high-level conditional operation relationships corresponding to each rule.
         */
        logic?: pulumi.Input<number>;
    }

    export interface BotAnalyseProtectRuleRuleGroupGroupAccurateRule {
        /**
         * Custom object.
         */
        httpObj?: pulumi.Input<string>;
        /**
         * matching field.
         */
        objType?: pulumi.Input<number>;
        /**
         * The logical operator for the condition.
         */
        opretar?: pulumi.Input<number>;
        /**
         * Operate the properties of the http object.
         */
        property?: pulumi.Input<number>;
        /**
         * The value to be matched.
         */
        valueString?: pulumi.Input<string>;
    }

    export interface BotAnalyseProtectRuleRuleGroupRule {
        /**
         * Advanced conditions.
         */
        accurateGroup?: pulumi.Input<inputs.waf.BotAnalyseProtectRuleRuleGroupRuleAccurateGroup>;
        /**
         * After the rule creation is completed, the priority of the automatically generated rule group.
         */
        accurateGroupPriority?: pulumi.Input<number>;
        /**
         * Perform the action after verification/challenge.
         */
        actionAfterVerification?: pulumi.Input<number>;
        /**
         * perform the action.
         */
        actionType?: pulumi.Input<number>;
        /**
         * Limit the duration.
         */
        effectTime?: pulumi.Input<number>;
        /**
         * Whether to enable the rules.
         */
        enable?: pulumi.Input<number>;
        /**
         * Exemption time takes effect when the execution action is human-machine challenge /JS/ Proof of work.
         */
        exemptionTime?: pulumi.Input<number>;
        /**
         * Statistical objects, with multiple objects separated by commas.
         */
        field?: pulumi.Input<string>;
        /**
         * Website domain names that require the setting of protection rules.
         */
        host?: pulumi.Input<string>;
        /**
         * Rule unique identifier.
         */
        id?: pulumi.Input<number>;
        /**
         * The name of rule.
         */
        name?: pulumi.Input<string>;
        /**
         * JS challenge/human-machine verification pass rate.
         */
        passRatio?: pulumi.Input<number>;
        /**
         * The requested path.
         */
        path?: pulumi.Input<string>;
        /**
         * The path access frequency threshold is enabled when StatisticalType=1.
         */
        pathThreshold?: pulumi.Input<number>;
        /**
         * Priority of rule effectiveness.
         */
        rulePriority?: pulumi.Input<number>;
        /**
         * Rule label, that is, the complete rule ID.
         */
        ruleTag?: pulumi.Input<string>;
        /**
         * The IP proportion of the same statistical object needs to be configured when StatisticalType=3.
         */
        singleProportion?: pulumi.Input<number>;
        /**
         * The maximum number of ips of the same statistical object is enabled when StatisticalType=2.
         */
        singleThreshold?: pulumi.Input<number>;
        /**
         * The duration of statistics.
         */
        statisticalDuration?: pulumi.Input<number>;
        /**
         * Statistical content and methods.
         */
        statisticalType?: pulumi.Input<number>;
        /**
         * Rule update time.
         */
        updateTime?: pulumi.Input<string>;
    }

    export interface BotAnalyseProtectRuleRuleGroupRuleAccurateGroup {
        /**
         * After the rule creation is completed, the priority of the automatically generated rule group.
         */
        accurateGroupPriority?: pulumi.Input<number>;
        /**
         * Request characteristic information of the rule group.
         */
        accurateRules?: pulumi.Input<pulumi.Input<inputs.waf.BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRule>[]>;
        /**
         * Rule unique identifier.
         */
        id?: pulumi.Input<number>;
        /**
         * In the rule group, the high-level conditional operation relationships corresponding to each rule.
         */
        logic?: pulumi.Input<number>;
    }

    export interface BotAnalyseProtectRuleRuleGroupRuleAccurateGroupAccurateRule {
        /**
         * Custom object.
         */
        httpObj?: pulumi.Input<string>;
        /**
         * matching field.
         */
        objType?: pulumi.Input<number>;
        /**
         * The logical operator for the condition.
         */
        opretar?: pulumi.Input<number>;
        /**
         * Operate the properties of the http object.
         */
        property?: pulumi.Input<number>;
        /**
         * The value to be matched.
         */
        valueString?: pulumi.Input<string>;
    }

    export interface CcRuleAccurateGroup {
        /**
         * Details of advanced conditions.
         */
        accurateRules: pulumi.Input<pulumi.Input<inputs.waf.CcRuleAccurateGroupAccurateRule>[]>;
        /**
         * The logical relationship of advanced conditions.
         */
        logic: pulumi.Input<number>;
    }

    export interface CcRuleAccurateGroupAccurateRule {
        /**
         * The HTTP object to be added to the advanced conditions.
         */
        httpObj: pulumi.Input<string>;
        /**
         * The matching field for HTTP objects.
         */
        objType: pulumi.Input<number>;
        /**
         * The logical operator for the condition.
         */
        opretar: pulumi.Input<number>;
        /**
         * Operate the properties of the http object.
         */
        property: pulumi.Input<number>;
        /**
         * The value to be matched.
         */
        valueString: pulumi.Input<string>;
    }

    export interface CcRuleCronConf {
        /**
         * The weekly cycle days and cycle time periods.
         */
        crontab: pulumi.Input<string>;
        /**
         * The threshold of the number of requests for path access.
         */
        pathThreshold: pulumi.Input<number>;
        /**
         * The threshold of the number of visits to each statistical object.
         */
        singleThreshold: pulumi.Input<number>;
    }

    export interface CcRuleRuleGroup {
        /**
         * Rule group information.
         */
        group?: pulumi.Input<inputs.waf.CcRuleRuleGroupGroup>;
        /**
         * Specific rule information within the rule group.
         */
        rules?: pulumi.Input<pulumi.Input<inputs.waf.CcRuleRuleGroupRule>[]>;
    }

    export interface CcRuleRuleGroupGroup {
        /**
         * After the rule creation is completed, the priority of the automatically generated rule group.
         */
        accurateGroupPriority?: pulumi.Input<number>;
        /**
         * Request characteristic information of the rule group.
         */
        accurateRules?: pulumi.Input<pulumi.Input<inputs.waf.CcRuleRuleGroupGroupAccurateRule>[]>;
        /**
         * The ID of Rule group.
         */
        id?: pulumi.Input<number>;
        /**
         * In the rule group, the high-level conditional operation relationships corresponding to each rule.
         */
        logic?: pulumi.Input<number>;
    }

    export interface CcRuleRuleGroupGroupAccurateRule {
        /**
         * The HTTP object to be added to the advanced conditions.
         */
        httpObj?: pulumi.Input<string>;
        /**
         * The matching field for HTTP objects.
         */
        objType?: pulumi.Input<number>;
        /**
         * The logical operator for the condition.
         */
        opretar?: pulumi.Input<number>;
        /**
         * Operate the properties of the http object.
         */
        property?: pulumi.Input<number>;
        /**
         * The value to be matched.
         */
        valueString?: pulumi.Input<string>;
    }

    export interface CcRuleRuleGroupRule {
        /**
         * Advanced conditions.
         */
        accurateGroup?: pulumi.Input<inputs.waf.CcRuleRuleGroupRuleAccurateGroup>;
        /**
         * After the rule creation is completed, the priority of the automatically generated rule group.
         */
        accurateGroupPriority?: pulumi.Input<number>;
        /**
         * The actions performed on subsequent requests after meeting the statistical conditions.
         */
        ccType?: pulumi.Input<number>;
        /**
         * The statistical period of the strategy.
         */
        countTime?: pulumi.Input<number>;
        /**
         * Details of the periodic loop configuration.
         */
        cronConfs?: pulumi.Input<pulumi.Input<inputs.waf.CcRuleRuleGroupRuleCronConf>[]>;
        /**
         * Whether to set the cycle to take effect.
         */
        cronEnable?: pulumi.Input<number>;
        /**
         * Limit the duration, that is, the effective duration of the action.
         */
        effectTime?: pulumi.Input<number>;
        /**
         * Whether to enable the rules.
         */
        enable?: pulumi.Input<number>;
        /**
         * Strategy exemption time.
         */
        exemptionTime?: pulumi.Input<number>;
        /**
         * statistical object.
         */
        field?: pulumi.Input<string>;
        /**
         * Website domain names that require the setting of protection rules.
         */
        host?: pulumi.Input<string>;
        /**
         * The ID of Rule group.
         */
        id?: pulumi.Input<number>;
        /**
         * The name of cc rule.
         */
        name?: pulumi.Input<string>;
        /**
         * The threshold of the total number of times the request path is accessed.
         */
        pathThreshold?: pulumi.Input<number>;
        /**
         * Rule execution priority.
         */
        rulePriority?: pulumi.Input<number>;
        /**
         * Rule label, that is, the complete rule ID.
         */
        ruleTag?: pulumi.Input<string>;
        /**
         * The threshold of the number of times each statistical object accesses the request path.
         */
        singleThreshold?: pulumi.Input<number>;
        /**
         * Rule update time.
         */
        updateTime?: pulumi.Input<string>;
        /**
         * The website request path that needs protection.
         */
        url?: pulumi.Input<string>;
    }

    export interface CcRuleRuleGroupRuleAccurateGroup {
        /**
         * After the rule creation is completed, the priority of the automatically generated rule group.
         */
        accurateGroupPriority?: pulumi.Input<number>;
        /**
         * Details of advanced conditions.
         */
        accurateRules?: pulumi.Input<pulumi.Input<inputs.waf.CcRuleRuleGroupRuleAccurateGroupAccurateRule>[]>;
        /**
         * The ID of Rule group.
         */
        id?: pulumi.Input<number>;
        /**
         * The logical relationship of advanced conditions.
         */
        logic?: pulumi.Input<number>;
    }

    export interface CcRuleRuleGroupRuleAccurateGroupAccurateRule {
        /**
         * The HTTP object to be added to the advanced conditions.
         */
        httpObj?: pulumi.Input<string>;
        /**
         * The matching field for HTTP objects.
         */
        objType?: pulumi.Input<number>;
        /**
         * The logical operator for the condition.
         */
        opretar?: pulumi.Input<number>;
        /**
         * Operate the properties of the http object.
         */
        property?: pulumi.Input<number>;
        /**
         * The value to be matched.
         */
        valueString?: pulumi.Input<string>;
    }

    export interface CcRuleRuleGroupRuleCronConf {
        /**
         * The weekly cycle days and cycle time periods.
         */
        crontab?: pulumi.Input<string>;
        /**
         * The threshold of the number of requests for path access.
         */
        pathThreshold?: pulumi.Input<number>;
        /**
         * The threshold of the number of visits to each statistical object.
         */
        singleThreshold?: pulumi.Input<number>;
    }

    export interface CustomBotAccurate {
        /**
         * Details of advanced conditions.
         */
        accurateRules?: pulumi.Input<pulumi.Input<inputs.waf.CustomBotAccurateAccurateRule>[]>;
        /**
         * The logical relationship of advanced conditions.
         */
        logic?: pulumi.Input<number>;
    }

    export interface CustomBotAccurateAccurateRule {
        /**
         * The HTTP object to be added to the advanced conditions.
         */
        httpObj?: pulumi.Input<string>;
        /**
         * The matching field for HTTP objects.
         */
        objType?: pulumi.Input<number>;
        /**
         * The logical operator for the condition.
         */
        opretar?: pulumi.Input<number>;
        /**
         * Operate the properties of the http object.
         */
        property?: pulumi.Input<number>;
        /**
         * The value to be matched.
         */
        valueString?: pulumi.Input<string>;
    }

    export interface CustomPageAccurate {
        /**
         * Details of advanced conditions.
         */
        accurateRules: pulumi.Input<pulumi.Input<inputs.waf.CustomPageAccurateAccurateRule>[]>;
        /**
         * The logical relationship of advanced conditions.
         */
        logic: pulumi.Input<number>;
    }

    export interface CustomPageAccurateAccurateRule {
        /**
         * The HTTP object to be added to the advanced conditions.
         */
        httpObj: pulumi.Input<string>;
        /**
         * The matching field for HTTP objects.
         */
        objType: pulumi.Input<number>;
        /**
         * The logical operator for the condition.
         */
        opretar: pulumi.Input<number>;
        /**
         * Operate the properties of the http object.
         */
        property: pulumi.Input<number>;
        /**
         * The value to be matched.
         */
        valueString: pulumi.Input<string>;
    }

    export interface HostGroupRelatedRule {
        /**
         * The name of the rule.
         */
        ruleName?: pulumi.Input<string>;
        /**
         * The ID of the rule.
         */
        ruleTag?: pulumi.Input<string>;
        /**
         * The type of the rule.
         */
        ruleType?: pulumi.Input<string>;
    }

    export interface IpGroupRelatedRule {
        /**
         * The information of the protected domain names associated with the rules.
         */
        host?: pulumi.Input<string>;
        /**
         * The name of the rule.
         */
        ruleName?: pulumi.Input<string>;
        /**
         * The ID of the rule.
         */
        ruleTag?: pulumi.Input<string>;
        /**
         * The type of the rule.
         */
        ruleType?: pulumi.Input<string>;
    }

    export interface VulnerabilityAdvanceConfig {
        /**
         * Configuration of the automatic blocking capability for directory traversal.
         */
        autoTraversal: pulumi.Input<inputs.waf.VulnerabilityAdvanceConfigAutoTraversal>;
        /**
         * Configuration of high-frequency scanning automatic blocking capability.
         */
        freqScan: pulumi.Input<inputs.waf.VulnerabilityAdvanceConfigFreqScan>;
    }

    export interface VulnerabilityAdvanceConfigAutoTraversal {
        /**
         * Rule switch, controlling whether the current rule takes effect.
         */
        enable?: pulumi.Input<boolean>;
        /**
         * Rule detail.
         */
        rule?: pulumi.Input<inputs.waf.VulnerabilityAdvanceConfigAutoTraversalRule>;
        /**
         * Directory traversal automatically blocks the rule label, that is, the complete rule ID.
         */
        ruleTag?: pulumi.Input<string>;
    }

    export interface VulnerabilityAdvanceConfigAutoTraversalRule {
        /**
         * Disposal action.
         */
        action: pulumi.Input<number>;
        /**
         * Disposal action.
         */
        countTime: pulumi.Input<number>;
        /**
         * Ban time (seconds).
         */
        effectTime: pulumi.Input<number>;
        /**
         * The body records the units displayed at the front end of the length: s, min, hour, and day.
         */
        effectTimeViewUnit: pulumi.Input<string>;
        /**
         * statistical object.
         */
        field: pulumi.Input<string>;
        /**
         * The number of request triggers.
         */
        hitRequestCount: pulumi.Input<number>;
        /**
         * Hit percentage: 0-99.
         */
        responseHttpStatusHitPercent: pulumi.Input<number>;
        /**
         * Response status code.
         */
        responseHttpStatuses: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface VulnerabilityAdvanceConfigFreqScan {
        /**
         * Rule switch, controlling whether the current rule takes effect.
         */
        enable?: pulumi.Input<boolean>;
        /**
         * Rule detail.
         */
        rule?: pulumi.Input<inputs.waf.VulnerabilityAdvanceConfigFreqScanRule>;
        /**
         * Directory traversal automatically blocks the rule label, that is, the complete rule ID.
         */
        ruleTag?: pulumi.Input<string>;
    }

    export interface VulnerabilityAdvanceConfigFreqScanRule {
        /**
         * Disposal action.
         */
        action: pulumi.Input<number>;
        /**
         * Disposal action.
         */
        countTime: pulumi.Input<number>;
        /**
         * Ban time (seconds).
         */
        effectTime: pulumi.Input<number>;
        /**
         * The body records the units displayed at the front end of the length: s, min, hour, and day.
         */
        effectTimeViewUnit: pulumi.Input<string>;
        /**
         * statistical object.
         */
        field: pulumi.Input<string>;
        /**
         * The number of request triggers.
         */
        hitRequestCount: pulumi.Input<number>;
    }

    export interface VulnerabilityRuleDetail {
        /**
         * The accuracy of the rules. Only when updating the custom vulnerability rules.
         */
        accuracy?: pulumi.Input<number>;
        /**
         * The ID of CVE. Only when updating the custom vulnerability rules.
         */
        cveId?: pulumi.Input<string>;
        /**
         * The description of the rules. Only when updating the custom vulnerability rules.
         */
        description?: pulumi.Input<string>;
        /**
         * Risk grade. Only when updating the custom vulnerability rules.
         */
        riskLevel?: pulumi.Input<number>;
        /**
         * The name of rule. Only when updating the custom vulnerability rules.
         */
        ruleName?: pulumi.Input<string>;
        /**
         * First-level rule category. Only when updating the custom vulnerability rules.
         */
        ruleSetName?: pulumi.Input<string>;
        /**
         * Rule label, that is, the complete rule ID. Only when updating the custom vulnerability rules.
         */
        ruleTag?: pulumi.Input<string>;
        /**
         * Secondary rule category. Only when updating the custom vulnerability rules.
         */
        subcategory?: pulumi.Input<string>;
        /**
         * The update time of the rules. Only when updating the custom vulnerability rules.
         */
        updateTime?: pulumi.Input<string>;
    }

    export interface VulnerabilitySystemRuleSwitch {
        /**
         * Custom rule switch.
         */
        customSystemRuleSwitch?: pulumi.Input<number>;
        /**
         * The ID of rule.
         */
        ruleId?: pulumi.Input<number>;
    }

    export interface WafDomainBackendGroup {
        /**
         * Access port number.
         */
        accessPorts?: pulumi.Input<pulumi.Input<number>[]>;
        /**
         * The details of the source station group.
         */
        backends?: pulumi.Input<pulumi.Input<inputs.waf.WafDomainBackendGroupBackend>[]>;
        /**
         * Source station group name.
         */
        name?: pulumi.Input<string>;
    }

    export interface WafDomainBackendGroupBackend {
        /**
         * Source station IP address.
         */
        ip?: pulumi.Input<string>;
        /**
         * Source station port number.
         */
        port?: pulumi.Input<number>;
        /**
         * The agreement of Source Station.
         */
        protocol?: pulumi.Input<string>;
        /**
         * The weight of the source station rules.
         */
        weight?: pulumi.Input<number>;
    }

    export interface WafDomainCloudAccessConfig {
        /**
         * The access protocol needs to be consistent with the monitoring protocol.
         */
        accessProtocol?: pulumi.Input<string>;
        /**
         * The ID of instance.
         */
        instanceId: pulumi.Input<string>;
        /**
         * The name of instance. Works only on modified scenes.
         */
        instanceName?: pulumi.Input<string>;
        /**
         * The ID of listener.
         */
        listenerId?: pulumi.Input<string>;
        /**
         * Whether the instance is unbound from the alb and is unbound on the ALB side. Works only on modified scenes.
         */
        lostAssociationFromAlb?: pulumi.Input<number>;
        /**
         * The port number corresponding to the listener.
         */
        port?: pulumi.Input<string>;
        /**
         * The type of Listener protocol.
         */
        protocol?: pulumi.Input<string>;
    }

    export interface WafDomainExtraDefenceModeLbInstance {
        /**
         * Set the protection mode for exceptional ALB instances. Works only on modified scenes.
         */
        defenceMode?: pulumi.Input<number>;
        /**
         * The Id of ALB instance. Works only on modified scenes.
         */
        instanceId?: pulumi.Input<string>;
    }

    export interface WafDomainProtocolPorts {
        /**
         * Ports supported by the HTTP protocol.
         */
        http?: pulumi.Input<pulumi.Input<number>[]>;
        /**
         * Ports supported by the HTTPs protocol.
         */
        https?: pulumi.Input<pulumi.Input<number>[]>;
    }

    export interface WafDomainTlsFieldsConfig {
        /**
         * The configuration of Headers. Works only on modified scenes.
         */
        headersConfig?: pulumi.Input<inputs.waf.WafDomainTlsFieldsConfigHeadersConfig>;
    }

    export interface WafDomainTlsFieldsConfigHeadersConfig {
        /**
         * Whether the log contains this field. Works only on modified scenes.
         */
        enable?: pulumi.Input<number>;
        /**
         * For the use of composite fields, exclude the fields in the keyword list from the JSON of the fields. Works only on modified scenes.
         */
        excludedKeyLists?: pulumi.Input<pulumi.Input<string>[]>;
        /**
         * Create statistical indexes for the fields of the list. Works only on modified scenes.
         */
        statisticalKeyLists?: pulumi.Input<pulumi.Input<string>[]>;
    }
}
