// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of vedb mysql instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[2]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.vedb_mysql.Instance("fooInstance", {
 *     chargeType: "PostPaid",
 *     storageChargeType: "PostPaid",
 *     dbEngineVersion: "MySQL_8_0",
 *     dbMinorVersion: "3.0",
 *     nodeNumber: 2,
 *     nodeSpec: "vedb.mysql.x4.large",
 *     subnetId: fooSubnet.id,
 *     instanceName: "tf-test",
 *     projectName: "testA",
 *     tags: [
 *         {
 *             key: "tftest",
 *             value: "tftest",
 *         },
 *         {
 *             key: "tftest2",
 *             value: "tftest2",
 *         },
 *     ],
 * });
 * const fooInstances = volcengine.vedb_mysql.getInstancesOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.vedb_mysql.Instances has been deprecated in favor of volcengine.vedb_mysql.getInstances */
export function instances(args?: InstancesArgs, opts?: pulumi.InvokeOptions): Promise<InstancesResult> {
    pulumi.log.warn("instances is deprecated: volcengine.vedb_mysql.Instances has been deprecated in favor of volcengine.vedb_mysql.getInstances")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vedb_mysql/instances:Instances", {
        "chargeType": args.chargeType,
        "createTimeEnd": args.createTimeEnd,
        "createTimeStart": args.createTimeStart,
        "dbEngineVersion": args.dbEngineVersion,
        "instanceId": args.instanceId,
        "instanceName": args.instanceName,
        "instanceStatus": args.instanceStatus,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "tags": args.tags,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking Instances.
 */
export interface InstancesArgs {
    /**
     * The charge type of the veDB Mysql instance.
     */
    chargeType?: string;
    /**
     * The end time of creating veDB Mysql instance.
     */
    createTimeEnd?: string;
    /**
     * The start time of creating veDB Mysql instance.
     */
    createTimeStart?: string;
    /**
     * The version of the veDB Mysql instance.
     */
    dbEngineVersion?: string;
    /**
     * The id of the veDB Mysql instance.
     */
    instanceId?: string;
    /**
     * The name of the veDB Mysql instance.
     */
    instanceName?: string;
    /**
     * The status of the veDB Mysql instance.
     */
    instanceStatus?: string;
    /**
     * A Name Regex of veDB mysql instance.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of the veDB Mysql instance.
     */
    projectName?: string;
    /**
     * Tags.
     */
    tags?: inputs.vedb_mysql.InstancesTag[];
    /**
     * The available zone of the veDB Mysql instance.
     */
    zoneId?: string;
}

/**
 * A collection of values returned by Instances.
 */
export interface InstancesResult {
    /**
     * Calculate the billing type. Values:
     * PostPaid: Pay-as-you-go (postpaid).
     * PrePaid: Monthly/yearly subscription (prepaid).
     */
    readonly chargeType?: string;
    readonly createTimeEnd?: string;
    readonly createTimeStart?: string;
    /**
     * The engine version of the veDB Mysql instance.
     */
    readonly dbEngineVersion?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of the veDB Mysql instance.
     */
    readonly instanceId?: string;
    /**
     * The name of the veDB Mysql instance.
     */
    readonly instanceName?: string;
    /**
     * The status of the veDB Mysql instance.
     */
    readonly instanceStatus?: string;
    /**
     * The collection of query.
     */
    readonly instances: outputs.vedb_mysql.InstancesInstance[];
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The project name of the veDB Mysql instance.
     */
    readonly projectName?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.vedb_mysql.InstancesTag[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    /**
     * The zone id.
     */
    readonly zoneId?: string;
}
/**
 * Use this data source to query detailed information of vedb mysql instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[2]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.vedb_mysql.Instance("fooInstance", {
 *     chargeType: "PostPaid",
 *     storageChargeType: "PostPaid",
 *     dbEngineVersion: "MySQL_8_0",
 *     dbMinorVersion: "3.0",
 *     nodeNumber: 2,
 *     nodeSpec: "vedb.mysql.x4.large",
 *     subnetId: fooSubnet.id,
 *     instanceName: "tf-test",
 *     projectName: "testA",
 *     tags: [
 *         {
 *             key: "tftest",
 *             value: "tftest",
 *         },
 *         {
 *             key: "tftest2",
 *             value: "tftest2",
 *         },
 *     ],
 * });
 * const fooInstances = volcengine.vedb_mysql.getInstancesOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.vedb_mysql.Instances has been deprecated in favor of volcengine.vedb_mysql.getInstances */
export function instancesOutput(args?: InstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<InstancesResult> {
    return pulumi.output(args).apply((a: any) => instances(a, opts))
}

/**
 * A collection of arguments for invoking Instances.
 */
export interface InstancesOutputArgs {
    /**
     * The charge type of the veDB Mysql instance.
     */
    chargeType?: pulumi.Input<string>;
    /**
     * The end time of creating veDB Mysql instance.
     */
    createTimeEnd?: pulumi.Input<string>;
    /**
     * The start time of creating veDB Mysql instance.
     */
    createTimeStart?: pulumi.Input<string>;
    /**
     * The version of the veDB Mysql instance.
     */
    dbEngineVersion?: pulumi.Input<string>;
    /**
     * The id of the veDB Mysql instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of the veDB Mysql instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The status of the veDB Mysql instance.
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * A Name Regex of veDB mysql instance.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of the veDB Mysql instance.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vedb_mysql.InstancesTagArgs>[]>;
    /**
     * The available zone of the veDB Mysql instance.
     */
    zoneId?: pulumi.Input<string>;
}
