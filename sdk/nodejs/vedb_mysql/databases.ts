// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of vedb mysql databases
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[2]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.vedb_mysql.Instance("fooInstance", {
 *     chargeType: "PostPaid",
 *     storageChargeType: "PostPaid",
 *     dbEngineVersion: "MySQL_8_0",
 *     dbMinorVersion: "3.0",
 *     nodeNumber: 2,
 *     nodeSpec: "vedb.mysql.x4.large",
 *     subnetId: fooSubnet.id,
 *     instanceName: "tf-test",
 *     projectName: "testA",
 *     tags: [
 *         {
 *             key: "tftest",
 *             value: "tftest",
 *         },
 *         {
 *             key: "tftest2",
 *             value: "tftest2",
 *         },
 *     ],
 * });
 * const fooDatabase = new volcengine.vedb_mysql.Database("fooDatabase", {
 *     dbName: "tf-table",
 *     instanceId: fooInstance.id,
 * });
 * const fooDatabases = volcengine.vedb_mysql.getDatabasesOutput({
 *     dbName: fooDatabase.dbName,
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.vedb_mysql.Databases has been deprecated in favor of volcengine.vedb_mysql.getDatabases */
export function databases(args: DatabasesArgs, opts?: pulumi.InvokeOptions): Promise<DatabasesResult> {
    pulumi.log.warn("databases is deprecated: volcengine.vedb_mysql.Databases has been deprecated in favor of volcengine.vedb_mysql.getDatabases")

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vedb_mysql/databases:Databases", {
        "dbName": args.dbName,
        "instanceId": args.instanceId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking Databases.
 */
export interface DatabasesArgs {
    /**
     * Database name.
     */
    dbName?: string;
    /**
     * The instance id.
     */
    instanceId: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
}

/**
 * A collection of values returned by Databases.
 */
export interface DatabasesResult {
    /**
     * The collection of query.
     */
    readonly databases: outputs.vedb_mysql.DatabasesDatabase[];
    /**
     * The name of the database. Naming rules:
     * Unique name. Start with a lowercase letter and end with a letter or number. The length is within 2 to 64 characters.
     * Consist of lowercase letters, numbers, underscores (_), or hyphens (-).
     * The name cannot contain certain reserved words.
     */
    readonly dbName?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of vedb mysql databases
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[2]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.vedb_mysql.Instance("fooInstance", {
 *     chargeType: "PostPaid",
 *     storageChargeType: "PostPaid",
 *     dbEngineVersion: "MySQL_8_0",
 *     dbMinorVersion: "3.0",
 *     nodeNumber: 2,
 *     nodeSpec: "vedb.mysql.x4.large",
 *     subnetId: fooSubnet.id,
 *     instanceName: "tf-test",
 *     projectName: "testA",
 *     tags: [
 *         {
 *             key: "tftest",
 *             value: "tftest",
 *         },
 *         {
 *             key: "tftest2",
 *             value: "tftest2",
 *         },
 *     ],
 * });
 * const fooDatabase = new volcengine.vedb_mysql.Database("fooDatabase", {
 *     dbName: "tf-table",
 *     instanceId: fooInstance.id,
 * });
 * const fooDatabases = volcengine.vedb_mysql.getDatabasesOutput({
 *     dbName: fooDatabase.dbName,
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.vedb_mysql.Databases has been deprecated in favor of volcengine.vedb_mysql.getDatabases */
export function databasesOutput(args: DatabasesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<DatabasesResult> {
    return pulumi.output(args).apply((a: any) => databases(a, opts))
}

/**
 * A collection of arguments for invoking Databases.
 */
export interface DatabasesOutputArgs {
    /**
     * Database name.
     */
    dbName?: pulumi.Input<string>;
    /**
     * The instance id.
     */
    instanceId: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
}
