// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of vedb mysql allowlists
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooAllowlist = new volcengine.vedb_mysql.Allowlist("fooAllowlist", {
 *     allowListName: "acc-test-allowlist",
 *     allowListDesc: "acc-test",
 *     allowListType: "IPv4",
 *     allowLists: [
 *         "192.168.0.0/24",
 *         "192.168.1.0/24",
 *         "192.168.2.0/24",
 *     ],
 * });
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[2]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.vedb_mysql.Instance("fooInstance", {
 *     chargeType: "PostPaid",
 *     storageChargeType: "PostPaid",
 *     dbEngineVersion: "MySQL_8_0",
 *     dbMinorVersion: "3.0",
 *     nodeNumber: 2,
 *     nodeSpec: "vedb.mysql.x4.large",
 *     subnetId: fooSubnet.id,
 *     instanceName: "tf-test",
 *     projectName: "testA",
 *     tags: [
 *         {
 *             key: "tftest",
 *             value: "tftest",
 *         },
 *         {
 *             key: "tftest2",
 *             value: "tftest2",
 *         },
 *     ],
 * });
 * const fooAllowlistAssociate = new volcengine.vedb_mysql.AllowlistAssociate("fooAllowlistAssociate", {
 *     allowListId: fooAllowlist.id,
 *     instanceId: fooInstance.id,
 * });
 * const fooAllowlists = volcengine.vedb_mysql.getAllowlistsOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.vedb_mysql.Allowlists has been deprecated in favor of volcengine.vedb_mysql.getAllowlists */
export function allowlists(args: AllowlistsArgs, opts?: pulumi.InvokeOptions): Promise<AllowlistsResult> {
    pulumi.log.warn("allowlists is deprecated: volcengine.vedb_mysql.Allowlists has been deprecated in favor of volcengine.vedb_mysql.getAllowlists")

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vedb_mysql/allowlists:Allowlists", {
        "instanceId": args.instanceId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "regionId": args.regionId,
    }, opts);
}

/**
 * A collection of arguments for invoking Allowlists.
 */
export interface AllowlistsArgs {
    /**
     * Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
     */
    instanceId?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The region of the allow lists.
     */
    regionId: string;
}

/**
 * A collection of values returned by Allowlists.
 */
export interface AllowlistsResult {
    /**
     * The collection of query.
     */
    readonly allowLists: outputs.vedb_mysql.AllowlistsAllowList[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the instance.
     */
    readonly instanceId?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    readonly regionId: string;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of vedb mysql allowlists
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooAllowlist = new volcengine.vedb_mysql.Allowlist("fooAllowlist", {
 *     allowListName: "acc-test-allowlist",
 *     allowListDesc: "acc-test",
 *     allowListType: "IPv4",
 *     allowLists: [
 *         "192.168.0.0/24",
 *         "192.168.1.0/24",
 *         "192.168.2.0/24",
 *     ],
 * });
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[2]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.vedb_mysql.Instance("fooInstance", {
 *     chargeType: "PostPaid",
 *     storageChargeType: "PostPaid",
 *     dbEngineVersion: "MySQL_8_0",
 *     dbMinorVersion: "3.0",
 *     nodeNumber: 2,
 *     nodeSpec: "vedb.mysql.x4.large",
 *     subnetId: fooSubnet.id,
 *     instanceName: "tf-test",
 *     projectName: "testA",
 *     tags: [
 *         {
 *             key: "tftest",
 *             value: "tftest",
 *         },
 *         {
 *             key: "tftest2",
 *             value: "tftest2",
 *         },
 *     ],
 * });
 * const fooAllowlistAssociate = new volcengine.vedb_mysql.AllowlistAssociate("fooAllowlistAssociate", {
 *     allowListId: fooAllowlist.id,
 *     instanceId: fooInstance.id,
 * });
 * const fooAllowlists = volcengine.vedb_mysql.getAllowlistsOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
/** @deprecated volcengine.vedb_mysql.Allowlists has been deprecated in favor of volcengine.vedb_mysql.getAllowlists */
export function allowlistsOutput(args: AllowlistsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<AllowlistsResult> {
    return pulumi.output(args).apply((a: any) => allowlists(a, opts))
}

/**
 * A collection of arguments for invoking Allowlists.
 */
export interface AllowlistsOutputArgs {
    /**
     * Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The region of the allow lists.
     */
    regionId: pulumi.Input<string>;
}
