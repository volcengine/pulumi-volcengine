// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage veenedge vpc
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.veenedge.Vpc("foo", {
 *     clusterName: "b****t02",
 *     vpcName: "tf-test-2",
 * });
 * ```
 *
 * ## Import
 *
 * VPC can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:veenedge/vpc:Vpc default vpc-mizl7m1k
 * ```
 *
 *  If you need to create a VPC, you need to apply for permission from the administrator in advance. You can only delete the vpc from web consul
 */
export class Vpc extends pulumi.CustomResource {
    /**
     * Get an existing Vpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcState, opts?: pulumi.CustomResourceOptions): Vpc {
        return new Vpc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:veenedge/vpc:Vpc';

    /**
     * Returns true if the given object is an instance of Vpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpc.__pulumiType;
    }

    /**
     * The cidr info.
     */
    public readonly cidr!: pulumi.Output<string | undefined>;
    /**
     * The name of the cluster.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * The description of the VPC.
     */
    public readonly desc!: pulumi.Output<string>;
    /**
     * The name of the VPC.
     */
    public readonly vpcName!: pulumi.Output<string>;

    /**
     * Create a Vpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcArgs | VpcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcState | undefined;
            resourceInputs["cidr"] = state ? state.cidr : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["desc"] = state ? state.desc : undefined;
            resourceInputs["vpcName"] = state ? state.vpcName : undefined;
        } else {
            const args = argsOrState as VpcArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.desc === undefined) && !opts.urn) {
                throw new Error("Missing required property 'desc'");
            }
            if ((!args || args.vpcName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcName'");
            }
            resourceInputs["cidr"] = args ? args.cidr : undefined;
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["desc"] = args ? args.desc : undefined;
            resourceInputs["vpcName"] = args ? args.vpcName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vpc resources.
 */
export interface VpcState {
    /**
     * The cidr info.
     */
    cidr?: pulumi.Input<string>;
    /**
     * The name of the cluster.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * The description of the VPC.
     */
    desc?: pulumi.Input<string>;
    /**
     * The name of the VPC.
     */
    vpcName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vpc resource.
 */
export interface VpcArgs {
    /**
     * The cidr info.
     */
    cidr?: pulumi.Input<string>;
    /**
     * The name of the cluster.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The description of the VPC.
     */
    desc: pulumi.Input<string>;
    /**
     * The name of the VPC.
     */
    vpcName: pulumi.Input<string>;
}
