// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cloud monitor rule
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.cloud_monitor.Rule("foo", {
 *     alertMethods: [
 *         "Email",
 *         "Webhook",
 *     ],
 *     conditionOperator: "||",
 *     conditions: [
 *         {
 *             comparisonOperator: ">",
 *             metricName: "DiskUsageAvail",
 *             metricUnit: "Megabytes",
 *             statistics: "avg",
 *             threshold: "100",
 *         },
 *         {
 *             comparisonOperator: ">",
 *             metricName: "DiskUsageUtilization",
 *             metricUnit: "Percent",
 *             statistics: "avg",
 *             threshold: "90",
 *         },
 *     ],
 *     contactGroupIds: ["174284616403161****"],
 *     description: "acc-test",
 *     effectEndAt: "22:55",
 *     effectStartAt: "00:15",
 *     enableState: "disable",
 *     evaluationCount: 5,
 *     level: "warning",
 *     multipleConditions: true,
 *     namespace: "VCM_ECS",
 *     originalDimensions: [
 *         {
 *             key: "ResourceID",
 *             values: ["*"],
 *         },
 *         {
 *             key: "DiskName",
 *             values: [
 *                 "vda",
 *                 "vda1",
 *             ],
 *         },
 *     ],
 *     recoveryNotify: {
 *         enable: true,
 *     },
 *     regions: [
 *         "cn-beijing",
 *         "cn-shanghai",
 *     ],
 *     ruleName: "acc-test-rule",
 *     silenceTime: 5,
 *     subNamespace: "Storage",
 *     webhookIds: [
 *         "187655704106731****",
 *         "187655712542447****",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * CloudMonitorRule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:cloud_monitor/rule:Rule default 174284623567451****
 * ```
 */
export class Rule extends pulumi.CustomResource {
    /**
     * Get an existing Rule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RuleState, opts?: pulumi.CustomResourceOptions): Rule {
        return new Rule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cloud_monitor/rule:Rule';

    /**
     * Returns true if the given object is an instance of Rule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Rule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Rule.__pulumiType;
    }

    /**
     * The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
     */
    public readonly alertMethods!: pulumi.Output<string[]>;
    /**
     * The alert state of the cloud monitor rule.
     */
    public /*out*/ readonly alertState!: pulumi.Output<string>;
    /**
     * The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
     */
    public readonly conditionOperator!: pulumi.Output<string>;
    /**
     * The conditions of the cloud monitor rule.
     */
    public readonly conditions!: pulumi.Output<outputs.cloud_monitor.RuleCondition[]>;
    /**
     * The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
     */
    public readonly contactGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * The created time of the cloud monitor rule.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the cloud monitor rule.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The effect end time of the cloud monitor rule. The expression is `HH:MM`.
     */
    public readonly effectEndAt!: pulumi.Output<string>;
    /**
     * The effect start time of the cloud monitor rule. The expression is `HH:MM`.
     */
    public readonly effectStartAt!: pulumi.Output<string>;
    /**
     * The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
     */
    public readonly enableState!: pulumi.Output<string>;
    /**
     * The evaluation count of the cloud monitor rule.
     */
    public readonly evaluationCount!: pulumi.Output<number>;
    /**
     * The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
     */
    public readonly level!: pulumi.Output<string>;
    /**
     * Whether to enable the multiple conditions function of the cloud monitor rule.
     */
    public readonly multipleConditions!: pulumi.Output<boolean>;
    /**
     * The namespace of the cloud monitor rule.
     */
    public readonly namespace!: pulumi.Output<string>;
    /**
     * The original dimensions of the cloud monitor rule.
     */
    public readonly originalDimensions!: pulumi.Output<outputs.cloud_monitor.RuleOriginalDimension[]>;
    /**
     * The recovery notify of the cloud monitor rule.
     */
    public readonly recoveryNotify!: pulumi.Output<outputs.cloud_monitor.RuleRecoveryNotify>;
    /**
     * The region ids of the cloud monitor rule.
     */
    public readonly regions!: pulumi.Output<string[]>;
    /**
     * The name of the cloud monitor rule.
     */
    public readonly ruleName!: pulumi.Output<string>;
    /**
     * The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
     */
    public readonly silenceTime!: pulumi.Output<number>;
    /**
     * The sub namespace of the cloud monitor rule.
     */
    public readonly subNamespace!: pulumi.Output<string>;
    /**
     * The updated time of the cloud monitor rule.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The web hook of the cloud monitor rule. When the alert method is `Webhook`, one of `webHook` and `webhookIds` must be specified.
     */
    public readonly webHook!: pulumi.Output<string | undefined>;
    /**
     * The web hook id list of the cloud monitor rule. When the alert method is `Webhook`, one of `webHook` and `webhookIds` must be specified.
     */
    public readonly webhookIds!: pulumi.Output<string[] | undefined>;

    /**
     * Create a Rule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RuleArgs | RuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RuleState | undefined;
            resourceInputs["alertMethods"] = state ? state.alertMethods : undefined;
            resourceInputs["alertState"] = state ? state.alertState : undefined;
            resourceInputs["conditionOperator"] = state ? state.conditionOperator : undefined;
            resourceInputs["conditions"] = state ? state.conditions : undefined;
            resourceInputs["contactGroupIds"] = state ? state.contactGroupIds : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["effectEndAt"] = state ? state.effectEndAt : undefined;
            resourceInputs["effectStartAt"] = state ? state.effectStartAt : undefined;
            resourceInputs["enableState"] = state ? state.enableState : undefined;
            resourceInputs["evaluationCount"] = state ? state.evaluationCount : undefined;
            resourceInputs["level"] = state ? state.level : undefined;
            resourceInputs["multipleConditions"] = state ? state.multipleConditions : undefined;
            resourceInputs["namespace"] = state ? state.namespace : undefined;
            resourceInputs["originalDimensions"] = state ? state.originalDimensions : undefined;
            resourceInputs["recoveryNotify"] = state ? state.recoveryNotify : undefined;
            resourceInputs["regions"] = state ? state.regions : undefined;
            resourceInputs["ruleName"] = state ? state.ruleName : undefined;
            resourceInputs["silenceTime"] = state ? state.silenceTime : undefined;
            resourceInputs["subNamespace"] = state ? state.subNamespace : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["webHook"] = state ? state.webHook : undefined;
            resourceInputs["webhookIds"] = state ? state.webhookIds : undefined;
        } else {
            const args = argsOrState as RuleArgs | undefined;
            if ((!args || args.alertMethods === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertMethods'");
            }
            if ((!args || args.conditions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'conditions'");
            }
            if ((!args || args.effectEndAt === undefined) && !opts.urn) {
                throw new Error("Missing required property 'effectEndAt'");
            }
            if ((!args || args.effectStartAt === undefined) && !opts.urn) {
                throw new Error("Missing required property 'effectStartAt'");
            }
            if ((!args || args.enableState === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enableState'");
            }
            if ((!args || args.evaluationCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'evaluationCount'");
            }
            if ((!args || args.level === undefined) && !opts.urn) {
                throw new Error("Missing required property 'level'");
            }
            if ((!args || args.namespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'namespace'");
            }
            if ((!args || args.originalDimensions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'originalDimensions'");
            }
            if ((!args || args.regions === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regions'");
            }
            if ((!args || args.ruleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ruleName'");
            }
            if ((!args || args.silenceTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'silenceTime'");
            }
            if ((!args || args.subNamespace === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subNamespace'");
            }
            resourceInputs["alertMethods"] = args ? args.alertMethods : undefined;
            resourceInputs["conditionOperator"] = args ? args.conditionOperator : undefined;
            resourceInputs["conditions"] = args ? args.conditions : undefined;
            resourceInputs["contactGroupIds"] = args ? args.contactGroupIds : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["effectEndAt"] = args ? args.effectEndAt : undefined;
            resourceInputs["effectStartAt"] = args ? args.effectStartAt : undefined;
            resourceInputs["enableState"] = args ? args.enableState : undefined;
            resourceInputs["evaluationCount"] = args ? args.evaluationCount : undefined;
            resourceInputs["level"] = args ? args.level : undefined;
            resourceInputs["multipleConditions"] = args ? args.multipleConditions : undefined;
            resourceInputs["namespace"] = args ? args.namespace : undefined;
            resourceInputs["originalDimensions"] = args ? args.originalDimensions : undefined;
            resourceInputs["recoveryNotify"] = args ? args.recoveryNotify : undefined;
            resourceInputs["regions"] = args ? args.regions : undefined;
            resourceInputs["ruleName"] = args ? args.ruleName : undefined;
            resourceInputs["silenceTime"] = args ? args.silenceTime : undefined;
            resourceInputs["subNamespace"] = args ? args.subNamespace : undefined;
            resourceInputs["webHook"] = args ? args.webHook : undefined;
            resourceInputs["webhookIds"] = args ? args.webhookIds : undefined;
            resourceInputs["alertState"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Rule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rule resources.
 */
export interface RuleState {
    /**
     * The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
     */
    alertMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The alert state of the cloud monitor rule.
     */
    alertState?: pulumi.Input<string>;
    /**
     * The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
     */
    conditionOperator?: pulumi.Input<string>;
    /**
     * The conditions of the cloud monitor rule.
     */
    conditions?: pulumi.Input<pulumi.Input<inputs.cloud_monitor.RuleCondition>[]>;
    /**
     * The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
     */
    contactGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The created time of the cloud monitor rule.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the cloud monitor rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The effect end time of the cloud monitor rule. The expression is `HH:MM`.
     */
    effectEndAt?: pulumi.Input<string>;
    /**
     * The effect start time of the cloud monitor rule. The expression is `HH:MM`.
     */
    effectStartAt?: pulumi.Input<string>;
    /**
     * The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
     */
    enableState?: pulumi.Input<string>;
    /**
     * The evaluation count of the cloud monitor rule.
     */
    evaluationCount?: pulumi.Input<number>;
    /**
     * The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
     */
    level?: pulumi.Input<string>;
    /**
     * Whether to enable the multiple conditions function of the cloud monitor rule.
     */
    multipleConditions?: pulumi.Input<boolean>;
    /**
     * The namespace of the cloud monitor rule.
     */
    namespace?: pulumi.Input<string>;
    /**
     * The original dimensions of the cloud monitor rule.
     */
    originalDimensions?: pulumi.Input<pulumi.Input<inputs.cloud_monitor.RuleOriginalDimension>[]>;
    /**
     * The recovery notify of the cloud monitor rule.
     */
    recoveryNotify?: pulumi.Input<inputs.cloud_monitor.RuleRecoveryNotify>;
    /**
     * The region ids of the cloud monitor rule.
     */
    regions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the cloud monitor rule.
     */
    ruleName?: pulumi.Input<string>;
    /**
     * The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
     */
    silenceTime?: pulumi.Input<number>;
    /**
     * The sub namespace of the cloud monitor rule.
     */
    subNamespace?: pulumi.Input<string>;
    /**
     * The updated time of the cloud monitor rule.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The web hook of the cloud monitor rule. When the alert method is `Webhook`, one of `webHook` and `webhookIds` must be specified.
     */
    webHook?: pulumi.Input<string>;
    /**
     * The web hook id list of the cloud monitor rule. When the alert method is `Webhook`, one of `webHook` and `webhookIds` must be specified.
     */
    webhookIds?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Rule resource.
 */
export interface RuleArgs {
    /**
     * The alert methods of the cloud monitor rule. Valid values: `Email`, `Phone`, `SMS`, `Webhook`.
     */
    alertMethods: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The condition operator of the cloud monitor rule. Valid values: `&&`, `||`.
     */
    conditionOperator?: pulumi.Input<string>;
    /**
     * The conditions of the cloud monitor rule.
     */
    conditions: pulumi.Input<pulumi.Input<inputs.cloud_monitor.RuleCondition>[]>;
    /**
     * The contact group ids of the cloud monitor rule. When the alert method is `Email`, `SMS`, or `Phone`, This field must be specified.
     */
    contactGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the cloud monitor rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The effect end time of the cloud monitor rule. The expression is `HH:MM`.
     */
    effectEndAt: pulumi.Input<string>;
    /**
     * The effect start time of the cloud monitor rule. The expression is `HH:MM`.
     */
    effectStartAt: pulumi.Input<string>;
    /**
     * The enable state of the cloud monitor rule. Valid values: `enable`, `disable`.
     */
    enableState: pulumi.Input<string>;
    /**
     * The evaluation count of the cloud monitor rule.
     */
    evaluationCount: pulumi.Input<number>;
    /**
     * The level of the cloud monitor rule. Valid values: `critical`, `warning`, `notice`.
     */
    level: pulumi.Input<string>;
    /**
     * Whether to enable the multiple conditions function of the cloud monitor rule.
     */
    multipleConditions?: pulumi.Input<boolean>;
    /**
     * The namespace of the cloud monitor rule.
     */
    namespace: pulumi.Input<string>;
    /**
     * The original dimensions of the cloud monitor rule.
     */
    originalDimensions: pulumi.Input<pulumi.Input<inputs.cloud_monitor.RuleOriginalDimension>[]>;
    /**
     * The recovery notify of the cloud monitor rule.
     */
    recoveryNotify?: pulumi.Input<inputs.cloud_monitor.RuleRecoveryNotify>;
    /**
     * The region ids of the cloud monitor rule.
     */
    regions: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the cloud monitor rule.
     */
    ruleName: pulumi.Input<string>;
    /**
     * The silence time of the cloud monitor rule. Unit in minutes. Valid values: 5, 30, 60, 180, 360, 720, 1440.
     */
    silenceTime: pulumi.Input<number>;
    /**
     * The sub namespace of the cloud monitor rule.
     */
    subNamespace: pulumi.Input<string>;
    /**
     * The web hook of the cloud monitor rule. When the alert method is `Webhook`, one of `webHook` and `webhookIds` must be specified.
     */
    webHook?: pulumi.Input<string>;
    /**
     * The web hook id list of the cloud monitor rule. When the alert method is `Webhook`, one of `webHook` and `webhookIds` must be specified.
     */
    webhookIds?: pulumi.Input<pulumi.Input<string>[]>;
}
