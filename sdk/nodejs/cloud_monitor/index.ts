// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ContactArgs, ContactState } from "./contact";
export type Contact = import("./contact").Contact;
export const Contact: typeof import("./contact").Contact = null as any;
utilities.lazyLoad(exports, ["Contact"], () => require("./contact"));

export { ContactGroupArgs, ContactGroupState } from "./contactGroup";
export type ContactGroup = import("./contactGroup").ContactGroup;
export const ContactGroup: typeof import("./contactGroup").ContactGroup = null as any;
utilities.lazyLoad(exports, ["ContactGroup"], () => require("./contactGroup"));

export { ContactGroupsArgs, ContactGroupsResult, ContactGroupsOutputArgs } from "./contactGroups";
export const contactGroups: typeof import("./contactGroups").contactGroups = null as any;
export const contactGroupsOutput: typeof import("./contactGroups").contactGroupsOutput = null as any;
utilities.lazyLoad(exports, ["contactGroups","contactGroupsOutput"], () => require("./contactGroups"));

export { ContactsArgs, ContactsResult, ContactsOutputArgs } from "./contacts";
export const contacts: typeof import("./contacts").contacts = null as any;
export const contactsOutput: typeof import("./contacts").contactsOutput = null as any;
utilities.lazyLoad(exports, ["contacts","contactsOutput"], () => require("./contacts"));

export { EventRuleArgs, EventRuleState } from "./eventRule";
export type EventRule = import("./eventRule").EventRule;
export const EventRule: typeof import("./eventRule").EventRule = null as any;
utilities.lazyLoad(exports, ["EventRule"], () => require("./eventRule"));

export { EventRulesArgs, EventRulesResult, EventRulesOutputArgs } from "./eventRules";
export const eventRules: typeof import("./eventRules").eventRules = null as any;
export const eventRulesOutput: typeof import("./eventRules").eventRulesOutput = null as any;
utilities.lazyLoad(exports, ["eventRules","eventRulesOutput"], () => require("./eventRules"));

export { GetContactGroupsArgs, GetContactGroupsResult, GetContactGroupsOutputArgs } from "./getContactGroups";
export const getContactGroups: typeof import("./getContactGroups").getContactGroups = null as any;
export const getContactGroupsOutput: typeof import("./getContactGroups").getContactGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getContactGroups","getContactGroupsOutput"], () => require("./getContactGroups"));

export { GetContactsArgs, GetContactsResult, GetContactsOutputArgs } from "./getContacts";
export const getContacts: typeof import("./getContacts").getContacts = null as any;
export const getContactsOutput: typeof import("./getContacts").getContactsOutput = null as any;
utilities.lazyLoad(exports, ["getContacts","getContactsOutput"], () => require("./getContacts"));

export { GetEventRulesArgs, GetEventRulesResult, GetEventRulesOutputArgs } from "./getEventRules";
export const getEventRules: typeof import("./getEventRules").getEventRules = null as any;
export const getEventRulesOutput: typeof import("./getEventRules").getEventRulesOutput = null as any;
utilities.lazyLoad(exports, ["getEventRules","getEventRulesOutput"], () => require("./getEventRules"));

export { GetRulesArgs, GetRulesResult, GetRulesOutputArgs } from "./getRules";
export const getRules: typeof import("./getRules").getRules = null as any;
export const getRulesOutput: typeof import("./getRules").getRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRules","getRulesOutput"], () => require("./getRules"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { RulesArgs, RulesResult, RulesOutputArgs } from "./rules";
export const rules: typeof import("./rules").rules = null as any;
export const rulesOutput: typeof import("./rules").rulesOutput = null as any;
utilities.lazyLoad(exports, ["rules","rulesOutput"], () => require("./rules"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:cloud_monitor/contact:Contact":
                return new Contact(name, <any>undefined, { urn })
            case "volcengine:cloud_monitor/contactGroup:ContactGroup":
                return new ContactGroup(name, <any>undefined, { urn })
            case "volcengine:cloud_monitor/eventRule:EventRule":
                return new EventRule(name, <any>undefined, { urn })
            case "volcengine:cloud_monitor/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "cloud_monitor/contact", _module)
pulumi.runtime.registerResourceModule("volcengine", "cloud_monitor/contactGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "cloud_monitor/eventRule", _module)
pulumi.runtime.registerResourceModule("volcengine", "cloud_monitor/rule", _module)
