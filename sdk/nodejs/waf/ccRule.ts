// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage waf cc rule
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.waf.CcRule("foo", {
 *     accurateGroup: {
 *         accurateRules: [
 *             {
 *                 httpObj: "request.uri",
 *                 objType: 1,
 *                 opretar: 2,
 *                 property: 0,
 *                 valueString: "tf",
 *             },
 *             {
 *                 httpObj: "request.schema",
 *                 objType: 0,
 *                 opretar: 2,
 *                 property: 0,
 *                 valueString: "tf-2",
 *             },
 *         ],
 *         logic: 2,
 *     },
 *     ccType: 1,
 *     countTime: 102,
 *     cronConfs: [
 *         {
 *             crontab: "* 0 * * 1,2,3,4,5,6,0",
 *             pathThreshold: 123,
 *             singleThreshold: 234,
 *         },
 *         {
 *             crontab: "* 3-8 * * 1,2,3,4,5,6,0",
 *             pathThreshold: 345,
 *             singleThreshold: 456,
 *         },
 *     ],
 *     cronEnable: 1,
 *     effectTime: 200,
 *     enable: 1,
 *     exemptionTime: 0,
 *     field: "HEADER:User-Agemnt",
 *     host: "www.tf-test.com",
 *     pathThreshold: 101,
 *     rulePriority: 2,
 *     singleThreshold: 100,
 *     url: "/",
 * });
 * ```
 *
 * ## Import
 *
 * WafCcRule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:waf/ccRule:CcRule default resource_id:Host
 * ```
 */
export class CcRule extends pulumi.CustomResource {
    /**
     * Get an existing CcRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CcRuleState, opts?: pulumi.CustomResourceOptions): CcRule {
        return new CcRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:waf/ccRule:CcRule';

    /**
     * Returns true if the given object is an instance of CcRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CcRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CcRule.__pulumiType;
    }

    /**
     * Advanced conditions.
     */
    public readonly accurateGroup!: pulumi.Output<outputs.waf.CcRuleAccurateGroup | undefined>;
    /**
     * Whether to enable advanced conditions.
     */
    public readonly advancedEnable!: pulumi.Output<boolean | undefined>;
    /**
     * The actions performed on subsequent requests after meeting the statistical conditions.
     */
    public readonly ccType!: pulumi.Output<number>;
    /**
     * The statistical period of the strategy.
     */
    public readonly countTime!: pulumi.Output<number>;
    /**
     * Details of the periodic loop configuration.
     */
    public readonly cronConfs!: pulumi.Output<outputs.waf.CcRuleCronConf[] | undefined>;
    /**
     * Whether to set the cycle to take effect.
     */
    public readonly cronEnable!: pulumi.Output<number | undefined>;
    /**
     * Limit the duration, that is, the effective duration of the action.
     */
    public readonly effectTime!: pulumi.Output<number>;
    /**
     * Whether to enable the rules.
     */
    public readonly enable!: pulumi.Output<number>;
    /**
     * The total number of enabled rules within the rule group.
     */
    public /*out*/ readonly enableCount!: pulumi.Output<number>;
    /**
     * Strategy exemption time.
     */
    public readonly exemptionTime!: pulumi.Output<number | undefined>;
    /**
     * statistical object.
     */
    public readonly field!: pulumi.Output<string>;
    /**
     * Website domain names that require the setting of protection rules.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The creation time of the rule group.
     */
    public /*out*/ readonly insertTime!: pulumi.Output<string>;
    /**
     * The name of cc rule.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The threshold of the total number of times the request path is accessed.
     */
    public readonly pathThreshold!: pulumi.Output<number>;
    /**
     * The Name of the affiliated project resource.
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * Details of the rule group.
     */
    public /*out*/ readonly ruleGroups!: pulumi.Output<outputs.waf.CcRuleRuleGroup[]>;
    /**
     * Rule execution priority.
     */
    public readonly rulePriority!: pulumi.Output<number>;
    /**
     * The threshold of the number of times each statistical object accesses the request path.
     */
    public readonly singleThreshold!: pulumi.Output<number>;
    /**
     * The total number of rules within the rule group.
     */
    public /*out*/ readonly totalCount!: pulumi.Output<number>;
    /**
     * The website request path that needs protection.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a CcRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CcRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CcRuleArgs | CcRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CcRuleState | undefined;
            resourceInputs["accurateGroup"] = state ? state.accurateGroup : undefined;
            resourceInputs["advancedEnable"] = state ? state.advancedEnable : undefined;
            resourceInputs["ccType"] = state ? state.ccType : undefined;
            resourceInputs["countTime"] = state ? state.countTime : undefined;
            resourceInputs["cronConfs"] = state ? state.cronConfs : undefined;
            resourceInputs["cronEnable"] = state ? state.cronEnable : undefined;
            resourceInputs["effectTime"] = state ? state.effectTime : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["enableCount"] = state ? state.enableCount : undefined;
            resourceInputs["exemptionTime"] = state ? state.exemptionTime : undefined;
            resourceInputs["field"] = state ? state.field : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["insertTime"] = state ? state.insertTime : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["pathThreshold"] = state ? state.pathThreshold : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["ruleGroups"] = state ? state.ruleGroups : undefined;
            resourceInputs["rulePriority"] = state ? state.rulePriority : undefined;
            resourceInputs["singleThreshold"] = state ? state.singleThreshold : undefined;
            resourceInputs["totalCount"] = state ? state.totalCount : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as CcRuleArgs | undefined;
            if ((!args || args.ccType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ccType'");
            }
            if ((!args || args.countTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'countTime'");
            }
            if ((!args || args.effectTime === undefined) && !opts.urn) {
                throw new Error("Missing required property 'effectTime'");
            }
            if ((!args || args.enable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enable'");
            }
            if ((!args || args.field === undefined) && !opts.urn) {
                throw new Error("Missing required property 'field'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.pathThreshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pathThreshold'");
            }
            if ((!args || args.rulePriority === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rulePriority'");
            }
            if ((!args || args.singleThreshold === undefined) && !opts.urn) {
                throw new Error("Missing required property 'singleThreshold'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["accurateGroup"] = args ? args.accurateGroup : undefined;
            resourceInputs["advancedEnable"] = args ? args.advancedEnable : undefined;
            resourceInputs["ccType"] = args ? args.ccType : undefined;
            resourceInputs["countTime"] = args ? args.countTime : undefined;
            resourceInputs["cronConfs"] = args ? args.cronConfs : undefined;
            resourceInputs["cronEnable"] = args ? args.cronEnable : undefined;
            resourceInputs["effectTime"] = args ? args.effectTime : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["exemptionTime"] = args ? args.exemptionTime : undefined;
            resourceInputs["field"] = args ? args.field : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["pathThreshold"] = args ? args.pathThreshold : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["rulePriority"] = args ? args.rulePriority : undefined;
            resourceInputs["singleThreshold"] = args ? args.singleThreshold : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["enableCount"] = undefined /*out*/;
            resourceInputs["insertTime"] = undefined /*out*/;
            resourceInputs["ruleGroups"] = undefined /*out*/;
            resourceInputs["totalCount"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CcRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CcRule resources.
 */
export interface CcRuleState {
    /**
     * Advanced conditions.
     */
    accurateGroup?: pulumi.Input<inputs.waf.CcRuleAccurateGroup>;
    /**
     * Whether to enable advanced conditions.
     */
    advancedEnable?: pulumi.Input<boolean>;
    /**
     * The actions performed on subsequent requests after meeting the statistical conditions.
     */
    ccType?: pulumi.Input<number>;
    /**
     * The statistical period of the strategy.
     */
    countTime?: pulumi.Input<number>;
    /**
     * Details of the periodic loop configuration.
     */
    cronConfs?: pulumi.Input<pulumi.Input<inputs.waf.CcRuleCronConf>[]>;
    /**
     * Whether to set the cycle to take effect.
     */
    cronEnable?: pulumi.Input<number>;
    /**
     * Limit the duration, that is, the effective duration of the action.
     */
    effectTime?: pulumi.Input<number>;
    /**
     * Whether to enable the rules.
     */
    enable?: pulumi.Input<number>;
    /**
     * The total number of enabled rules within the rule group.
     */
    enableCount?: pulumi.Input<number>;
    /**
     * Strategy exemption time.
     */
    exemptionTime?: pulumi.Input<number>;
    /**
     * statistical object.
     */
    field?: pulumi.Input<string>;
    /**
     * Website domain names that require the setting of protection rules.
     */
    host?: pulumi.Input<string>;
    /**
     * The creation time of the rule group.
     */
    insertTime?: pulumi.Input<string>;
    /**
     * The name of cc rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The threshold of the total number of times the request path is accessed.
     */
    pathThreshold?: pulumi.Input<number>;
    /**
     * The Name of the affiliated project resource.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Details of the rule group.
     */
    ruleGroups?: pulumi.Input<pulumi.Input<inputs.waf.CcRuleRuleGroup>[]>;
    /**
     * Rule execution priority.
     */
    rulePriority?: pulumi.Input<number>;
    /**
     * The threshold of the number of times each statistical object accesses the request path.
     */
    singleThreshold?: pulumi.Input<number>;
    /**
     * The total number of rules within the rule group.
     */
    totalCount?: pulumi.Input<number>;
    /**
     * The website request path that needs protection.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CcRule resource.
 */
export interface CcRuleArgs {
    /**
     * Advanced conditions.
     */
    accurateGroup?: pulumi.Input<inputs.waf.CcRuleAccurateGroup>;
    /**
     * Whether to enable advanced conditions.
     */
    advancedEnable?: pulumi.Input<boolean>;
    /**
     * The actions performed on subsequent requests after meeting the statistical conditions.
     */
    ccType: pulumi.Input<number>;
    /**
     * The statistical period of the strategy.
     */
    countTime: pulumi.Input<number>;
    /**
     * Details of the periodic loop configuration.
     */
    cronConfs?: pulumi.Input<pulumi.Input<inputs.waf.CcRuleCronConf>[]>;
    /**
     * Whether to set the cycle to take effect.
     */
    cronEnable?: pulumi.Input<number>;
    /**
     * Limit the duration, that is, the effective duration of the action.
     */
    effectTime: pulumi.Input<number>;
    /**
     * Whether to enable the rules.
     */
    enable: pulumi.Input<number>;
    /**
     * Strategy exemption time.
     */
    exemptionTime?: pulumi.Input<number>;
    /**
     * statistical object.
     */
    field: pulumi.Input<string>;
    /**
     * Website domain names that require the setting of protection rules.
     */
    host: pulumi.Input<string>;
    /**
     * The name of cc rule.
     */
    name?: pulumi.Input<string>;
    /**
     * The threshold of the total number of times the request path is accessed.
     */
    pathThreshold: pulumi.Input<number>;
    /**
     * The Name of the affiliated project resource.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Rule execution priority.
     */
    rulePriority: pulumi.Input<number>;
    /**
     * The threshold of the number of times each statistical object accesses the request path.
     */
    singleThreshold: pulumi.Input<number>;
    /**
     * The website request path that needs protection.
     */
    url: pulumi.Input<string>;
}
