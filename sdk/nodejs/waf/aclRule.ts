// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage waf acl rule
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.waf.AclRule("foo", {
 *     accurateGroup: {
 *         accurateRules: [{
 *             httpObj: "request.uri",
 *             objType: 1,
 *             opretar: 2,
 *             property: 0,
 *             valueString: "GET",
 *         }],
 *         logic: 1,
 *     },
 *     aclType: "Allow",
 *     action: "block",
 *     advanced: 1,
 *     description: "tf-test",
 *     enable: 1,
 *     hostAddType: 3,
 *     hostLists: ["www.tf-test.com"],
 *     ipAddType: 3,
 *     ipLists: [
 *         "1.2.2.2",
 *         "1.2.3.30",
 *     ],
 *     projectName: "default",
 *     url: "/",
 * });
 * ```
 *
 * ## Import
 *
 * WafAclRule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:waf/aclRule:AclRule default resource_id:AclType
 * ```
 */
export class AclRule extends pulumi.CustomResource {
    /**
     * Get an existing AclRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AclRuleState, opts?: pulumi.CustomResourceOptions): AclRule {
        return new AclRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:waf/aclRule:AclRule';

    /**
     * Returns true if the given object is an instance of AclRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AclRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AclRule.__pulumiType;
    }

    /**
     * Advanced conditions.
     */
    public readonly accurateGroup!: pulumi.Output<outputs.waf.AclRuleAccurateGroup>;
    /**
     * The type of access control rules.
     */
    public readonly aclType!: pulumi.Output<string>;
    /**
     * Action to be taken on requests that match the rule.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Whether to set advanced conditions.
     */
    public readonly advanced!: pulumi.Output<number>;
    /**
     * IP address.
     */
    public /*out*/ readonly clientIp!: pulumi.Output<string>;
    /**
     * Rule description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Whether to enable the rule.
     */
    public readonly enable!: pulumi.Output<number>;
    /**
     * Type of domain name addition.
     */
    public readonly hostAddType!: pulumi.Output<number>;
    /**
     * The ID of the domain group.
     */
    public readonly hostGroupIds!: pulumi.Output<number[]>;
    /**
     * The list of domain name groups.
     */
    public /*out*/ readonly hostGroups!: pulumi.Output<outputs.waf.AclRuleHostGroup[]>;
    /**
     * Required if HostAddType = 3. Single or multiple domain names are supported.
     */
    public readonly hostLists!: pulumi.Output<string[]>;
    /**
     * Type of IP address addition.
     */
    public readonly ipAddType!: pulumi.Output<number>;
    /**
     * Required if IpAddType = 2.
     */
    public readonly ipGroupIds!: pulumi.Output<number[]>;
    /**
     * The list of domain name groups.
     */
    public /*out*/ readonly ipGroups!: pulumi.Output<outputs.waf.AclRuleIpGroup[]>;
    /**
     * Required if IpAddType = 3. Single or multiple IP addresses are supported.
     */
    public readonly ipLists!: pulumi.Output<string[]>;
    /**
     * Country or region code.
     */
    public readonly ipLocationCountries!: pulumi.Output<string[]>;
    /**
     * Domestic region code.
     */
    public readonly ipLocationSubregions!: pulumi.Output<string[]>;
    /**
     * Rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The name of the project to which your domain names belong.
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * Rule unique identifier.
     */
    public /*out*/ readonly ruleTag!: pulumi.Output<string>;
    /**
     * Update time of the rule.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The path of Matching.
     */
    public readonly url!: pulumi.Output<string>;

    /**
     * Create a AclRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AclRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AclRuleArgs | AclRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AclRuleState | undefined;
            resourceInputs["accurateGroup"] = state ? state.accurateGroup : undefined;
            resourceInputs["aclType"] = state ? state.aclType : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["advanced"] = state ? state.advanced : undefined;
            resourceInputs["clientIp"] = state ? state.clientIp : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["hostAddType"] = state ? state.hostAddType : undefined;
            resourceInputs["hostGroupIds"] = state ? state.hostGroupIds : undefined;
            resourceInputs["hostGroups"] = state ? state.hostGroups : undefined;
            resourceInputs["hostLists"] = state ? state.hostLists : undefined;
            resourceInputs["ipAddType"] = state ? state.ipAddType : undefined;
            resourceInputs["ipGroupIds"] = state ? state.ipGroupIds : undefined;
            resourceInputs["ipGroups"] = state ? state.ipGroups : undefined;
            resourceInputs["ipLists"] = state ? state.ipLists : undefined;
            resourceInputs["ipLocationCountries"] = state ? state.ipLocationCountries : undefined;
            resourceInputs["ipLocationSubregions"] = state ? state.ipLocationSubregions : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["ruleTag"] = state ? state.ruleTag : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
        } else {
            const args = argsOrState as AclRuleArgs | undefined;
            if ((!args || args.aclType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aclType'");
            }
            if ((!args || args.enable === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enable'");
            }
            if ((!args || args.hostAddType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostAddType'");
            }
            if ((!args || args.ipAddType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddType'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["accurateGroup"] = args ? args.accurateGroup : undefined;
            resourceInputs["aclType"] = args ? args.aclType : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["advanced"] = args ? args.advanced : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enable"] = args ? args.enable : undefined;
            resourceInputs["hostAddType"] = args ? args.hostAddType : undefined;
            resourceInputs["hostGroupIds"] = args ? args.hostGroupIds : undefined;
            resourceInputs["hostLists"] = args ? args.hostLists : undefined;
            resourceInputs["ipAddType"] = args ? args.ipAddType : undefined;
            resourceInputs["ipGroupIds"] = args ? args.ipGroupIds : undefined;
            resourceInputs["ipLists"] = args ? args.ipLists : undefined;
            resourceInputs["ipLocationCountries"] = args ? args.ipLocationCountries : undefined;
            resourceInputs["ipLocationSubregions"] = args ? args.ipLocationSubregions : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["clientIp"] = undefined /*out*/;
            resourceInputs["hostGroups"] = undefined /*out*/;
            resourceInputs["ipGroups"] = undefined /*out*/;
            resourceInputs["ruleTag"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AclRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AclRule resources.
 */
export interface AclRuleState {
    /**
     * Advanced conditions.
     */
    accurateGroup?: pulumi.Input<inputs.waf.AclRuleAccurateGroup>;
    /**
     * The type of access control rules.
     */
    aclType?: pulumi.Input<string>;
    /**
     * Action to be taken on requests that match the rule.
     */
    action?: pulumi.Input<string>;
    /**
     * Whether to set advanced conditions.
     */
    advanced?: pulumi.Input<number>;
    /**
     * IP address.
     */
    clientIp?: pulumi.Input<string>;
    /**
     * Rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the rule.
     */
    enable?: pulumi.Input<number>;
    /**
     * Type of domain name addition.
     */
    hostAddType?: pulumi.Input<number>;
    /**
     * The ID of the domain group.
     */
    hostGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of domain name groups.
     */
    hostGroups?: pulumi.Input<pulumi.Input<inputs.waf.AclRuleHostGroup>[]>;
    /**
     * Required if HostAddType = 3. Single or multiple domain names are supported.
     */
    hostLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of IP address addition.
     */
    ipAddType?: pulumi.Input<number>;
    /**
     * Required if IpAddType = 2.
     */
    ipGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * The list of domain name groups.
     */
    ipGroups?: pulumi.Input<pulumi.Input<inputs.waf.AclRuleIpGroup>[]>;
    /**
     * Required if IpAddType = 3. Single or multiple IP addresses are supported.
     */
    ipLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Country or region code.
     */
    ipLocationCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domestic region code.
     */
    ipLocationSubregions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the project to which your domain names belong.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Rule unique identifier.
     */
    ruleTag?: pulumi.Input<string>;
    /**
     * Update time of the rule.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The path of Matching.
     */
    url?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AclRule resource.
 */
export interface AclRuleArgs {
    /**
     * Advanced conditions.
     */
    accurateGroup?: pulumi.Input<inputs.waf.AclRuleAccurateGroup>;
    /**
     * The type of access control rules.
     */
    aclType: pulumi.Input<string>;
    /**
     * Action to be taken on requests that match the rule.
     */
    action?: pulumi.Input<string>;
    /**
     * Whether to set advanced conditions.
     */
    advanced?: pulumi.Input<number>;
    /**
     * Rule description.
     */
    description?: pulumi.Input<string>;
    /**
     * Whether to enable the rule.
     */
    enable: pulumi.Input<number>;
    /**
     * Type of domain name addition.
     */
    hostAddType: pulumi.Input<number>;
    /**
     * The ID of the domain group.
     */
    hostGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Required if HostAddType = 3. Single or multiple domain names are supported.
     */
    hostLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Type of IP address addition.
     */
    ipAddType: pulumi.Input<number>;
    /**
     * Required if IpAddType = 2.
     */
    ipGroupIds?: pulumi.Input<pulumi.Input<number>[]>;
    /**
     * Required if IpAddType = 3. Single or multiple IP addresses are supported.
     */
    ipLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Country or region code.
     */
    ipLocationCountries?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Domestic region code.
     */
    ipLocationSubregions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of the project to which your domain names belong.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The path of Matching.
     */
    url: pulumi.Input<string>;
}
