// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage waf instance ctl
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.waf.InstanceCtl("foo", {
 *     allowEnable: 0,
 *     blockEnable: 1,
 *     projectName: "default",
 * });
 * ```
 *
 * ## Import
 *
 * WafInstanceCtl can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:waf/instanceCtl:InstanceCtl default resource_id
 * ```
 */
export class InstanceCtl extends pulumi.CustomResource {
    /**
     * Get an existing InstanceCtl resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceCtlState, opts?: pulumi.CustomResourceOptions): InstanceCtl {
        return new InstanceCtl(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:waf/instanceCtl:InstanceCtl';

    /**
     * Returns true if the given object is an instance of InstanceCtl.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is InstanceCtl {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === InstanceCtl.__pulumiType;
    }

    /**
     * Whether to enable the allowed access list policy for the instance corresponding to the current region.
     */
    public readonly allowEnable!: pulumi.Output<number>;
    /**
     * Whether to enable the prohibited access list policy for the instance corresponding to the current region.
     */
    public readonly blockEnable!: pulumi.Output<number>;
    /**
     * The name of the project associated with the current resource.
     */
    public readonly projectName!: pulumi.Output<string | undefined>;

    /**
     * Create a InstanceCtl resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: InstanceCtlArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceCtlArgs | InstanceCtlState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceCtlState | undefined;
            resourceInputs["allowEnable"] = state ? state.allowEnable : undefined;
            resourceInputs["blockEnable"] = state ? state.blockEnable : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
        } else {
            const args = argsOrState as InstanceCtlArgs | undefined;
            resourceInputs["allowEnable"] = args ? args.allowEnable : undefined;
            resourceInputs["blockEnable"] = args ? args.blockEnable : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(InstanceCtl.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering InstanceCtl resources.
 */
export interface InstanceCtlState {
    /**
     * Whether to enable the allowed access list policy for the instance corresponding to the current region.
     */
    allowEnable?: pulumi.Input<number>;
    /**
     * Whether to enable the prohibited access list policy for the instance corresponding to the current region.
     */
    blockEnable?: pulumi.Input<number>;
    /**
     * The name of the project associated with the current resource.
     */
    projectName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a InstanceCtl resource.
 */
export interface InstanceCtlArgs {
    /**
     * Whether to enable the allowed access list policy for the instance corresponding to the current region.
     */
    allowEnable?: pulumi.Input<number>;
    /**
     * Whether to enable the prohibited access list policy for the instance corresponding to the current region.
     */
    blockEnable?: pulumi.Input<number>;
    /**
     * The name of the project associated with the current resource.
     */
    projectName?: pulumi.Input<string>;
}
