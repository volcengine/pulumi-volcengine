// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage waf host group
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.waf.HostGroup("foo", {
 *     description: "tf-test",
 *     hostLists: ["www.tf-test.com"],
 * });
 * ```
 *
 * ## Import
 *
 * WafHostGroup can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:waf/hostGroup:HostGroup default resource_id
 * ```
 */
export class HostGroup extends pulumi.CustomResource {
    /**
     * Get an existing HostGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HostGroupState, opts?: pulumi.CustomResourceOptions): HostGroup {
        return new HostGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:waf/hostGroup:HostGroup';

    /**
     * Returns true if the given object is an instance of HostGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HostGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HostGroup.__pulumiType;
    }

    /**
     * Domain name list modification action. Works only on modified scenes.
     */
    public readonly action!: pulumi.Output<string | undefined>;
    /**
     * Domain name group description.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The number of domain names contained in the domain name group.
     */
    public /*out*/ readonly hostCount!: pulumi.Output<number>;
    /**
     * The ID of the domain name group.
     */
    public /*out*/ readonly hostGroupId!: pulumi.Output<number>;
    /**
     * Domain names that need to be added to this domain name group.
     */
    public readonly hostLists!: pulumi.Output<string[]>;
    /**
     * The name of the domain name group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The project of Domain name group.
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * The list of associated rules.
     */
    public /*out*/ readonly relatedRules!: pulumi.Output<outputs.waf.HostGroupRelatedRule[]>;
    /**
     * Domain name group update time.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a HostGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HostGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HostGroupArgs | HostGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HostGroupState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["hostCount"] = state ? state.hostCount : undefined;
            resourceInputs["hostGroupId"] = state ? state.hostGroupId : undefined;
            resourceInputs["hostLists"] = state ? state.hostLists : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["relatedRules"] = state ? state.relatedRules : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as HostGroupArgs | undefined;
            if ((!args || args.hostLists === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostLists'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["hostLists"] = args ? args.hostLists : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["hostCount"] = undefined /*out*/;
            resourceInputs["hostGroupId"] = undefined /*out*/;
            resourceInputs["relatedRules"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HostGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HostGroup resources.
 */
export interface HostGroupState {
    /**
     * Domain name list modification action. Works only on modified scenes.
     */
    action?: pulumi.Input<string>;
    /**
     * Domain name group description.
     */
    description?: pulumi.Input<string>;
    /**
     * The number of domain names contained in the domain name group.
     */
    hostCount?: pulumi.Input<number>;
    /**
     * The ID of the domain name group.
     */
    hostGroupId?: pulumi.Input<number>;
    /**
     * Domain names that need to be added to this domain name group.
     */
    hostLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the domain name group.
     */
    name?: pulumi.Input<string>;
    /**
     * The project of Domain name group.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The list of associated rules.
     */
    relatedRules?: pulumi.Input<pulumi.Input<inputs.waf.HostGroupRelatedRule>[]>;
    /**
     * Domain name group update time.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HostGroup resource.
 */
export interface HostGroupArgs {
    /**
     * Domain name list modification action. Works only on modified scenes.
     */
    action?: pulumi.Input<string>;
    /**
     * Domain name group description.
     */
    description?: pulumi.Input<string>;
    /**
     * Domain names that need to be added to this domain name group.
     */
    hostLists: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the domain name group.
     */
    name?: pulumi.Input<string>;
    /**
     * The project of Domain name group.
     */
    projectName?: pulumi.Input<string>;
}
