// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclRuleArgs, AclRuleState } from "./aclRule";
export type AclRule = import("./aclRule").AclRule;
export const AclRule: typeof import("./aclRule").AclRule = null as any;
utilities.lazyLoad(exports, ["AclRule"], () => require("./aclRule"));

export { AclRulesArgs, AclRulesResult, AclRulesOutputArgs } from "./aclRules";
export const aclRules: typeof import("./aclRules").aclRules = null as any;
export const aclRulesOutput: typeof import("./aclRules").aclRulesOutput = null as any;
utilities.lazyLoad(exports, ["aclRules","aclRulesOutput"], () => require("./aclRules"));

export { BotAnalyseProtectRuleArgs, BotAnalyseProtectRuleState } from "./botAnalyseProtectRule";
export type BotAnalyseProtectRule = import("./botAnalyseProtectRule").BotAnalyseProtectRule;
export const BotAnalyseProtectRule: typeof import("./botAnalyseProtectRule").BotAnalyseProtectRule = null as any;
utilities.lazyLoad(exports, ["BotAnalyseProtectRule"], () => require("./botAnalyseProtectRule"));

export { BotAnalyseProtectRulesArgs, BotAnalyseProtectRulesResult, BotAnalyseProtectRulesOutputArgs } from "./botAnalyseProtectRules";
export const botAnalyseProtectRules: typeof import("./botAnalyseProtectRules").botAnalyseProtectRules = null as any;
export const botAnalyseProtectRulesOutput: typeof import("./botAnalyseProtectRules").botAnalyseProtectRulesOutput = null as any;
utilities.lazyLoad(exports, ["botAnalyseProtectRules","botAnalyseProtectRulesOutput"], () => require("./botAnalyseProtectRules"));

export { CcRuleArgs, CcRuleState } from "./ccRule";
export type CcRule = import("./ccRule").CcRule;
export const CcRule: typeof import("./ccRule").CcRule = null as any;
utilities.lazyLoad(exports, ["CcRule"], () => require("./ccRule"));

export { CcRulesArgs, CcRulesResult, CcRulesOutputArgs } from "./ccRules";
export const ccRules: typeof import("./ccRules").ccRules = null as any;
export const ccRulesOutput: typeof import("./ccRules").ccRulesOutput = null as any;
utilities.lazyLoad(exports, ["ccRules","ccRulesOutput"], () => require("./ccRules"));

export { CustomBotArgs, CustomBotState } from "./customBot";
export type CustomBot = import("./customBot").CustomBot;
export const CustomBot: typeof import("./customBot").CustomBot = null as any;
utilities.lazyLoad(exports, ["CustomBot"], () => require("./customBot"));

export { CustomBotsArgs, CustomBotsResult, CustomBotsOutputArgs } from "./customBots";
export const customBots: typeof import("./customBots").customBots = null as any;
export const customBotsOutput: typeof import("./customBots").customBotsOutput = null as any;
utilities.lazyLoad(exports, ["customBots","customBotsOutput"], () => require("./customBots"));

export { CustomPageArgs, CustomPageState } from "./customPage";
export type CustomPage = import("./customPage").CustomPage;
export const CustomPage: typeof import("./customPage").CustomPage = null as any;
utilities.lazyLoad(exports, ["CustomPage"], () => require("./customPage"));

export { CustomPagesArgs, CustomPagesResult, CustomPagesOutputArgs } from "./customPages";
export const customPages: typeof import("./customPages").customPages = null as any;
export const customPagesOutput: typeof import("./customPages").customPagesOutput = null as any;
utilities.lazyLoad(exports, ["customPages","customPagesOutput"], () => require("./customPages"));

export { DomainsArgs, DomainsResult, DomainsOutputArgs } from "./domains";
export const domains: typeof import("./domains").domains = null as any;
export const domainsOutput: typeof import("./domains").domainsOutput = null as any;
utilities.lazyLoad(exports, ["domains","domainsOutput"], () => require("./domains"));

export { GetAclRulesArgs, GetAclRulesResult, GetAclRulesOutputArgs } from "./getAclRules";
export const getAclRules: typeof import("./getAclRules").getAclRules = null as any;
export const getAclRulesOutput: typeof import("./getAclRules").getAclRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAclRules","getAclRulesOutput"], () => require("./getAclRules"));

export { GetBotAnalyseProtectRulesArgs, GetBotAnalyseProtectRulesResult, GetBotAnalyseProtectRulesOutputArgs } from "./getBotAnalyseProtectRules";
export const getBotAnalyseProtectRules: typeof import("./getBotAnalyseProtectRules").getBotAnalyseProtectRules = null as any;
export const getBotAnalyseProtectRulesOutput: typeof import("./getBotAnalyseProtectRules").getBotAnalyseProtectRulesOutput = null as any;
utilities.lazyLoad(exports, ["getBotAnalyseProtectRules","getBotAnalyseProtectRulesOutput"], () => require("./getBotAnalyseProtectRules"));

export { GetCcRulesArgs, GetCcRulesResult, GetCcRulesOutputArgs } from "./getCcRules";
export const getCcRules: typeof import("./getCcRules").getCcRules = null as any;
export const getCcRulesOutput: typeof import("./getCcRules").getCcRulesOutput = null as any;
utilities.lazyLoad(exports, ["getCcRules","getCcRulesOutput"], () => require("./getCcRules"));

export { GetCustomBotsArgs, GetCustomBotsResult, GetCustomBotsOutputArgs } from "./getCustomBots";
export const getCustomBots: typeof import("./getCustomBots").getCustomBots = null as any;
export const getCustomBotsOutput: typeof import("./getCustomBots").getCustomBotsOutput = null as any;
utilities.lazyLoad(exports, ["getCustomBots","getCustomBotsOutput"], () => require("./getCustomBots"));

export { GetCustomPagesArgs, GetCustomPagesResult, GetCustomPagesOutputArgs } from "./getCustomPages";
export const getCustomPages: typeof import("./getCustomPages").getCustomPages = null as any;
export const getCustomPagesOutput: typeof import("./getCustomPages").getCustomPagesOutput = null as any;
utilities.lazyLoad(exports, ["getCustomPages","getCustomPagesOutput"], () => require("./getCustomPages"));

export { GetDomainsArgs, GetDomainsResult, GetDomainsOutputArgs } from "./getDomains";
export const getDomains: typeof import("./getDomains").getDomains = null as any;
export const getDomainsOutput: typeof import("./getDomains").getDomainsOutput = null as any;
utilities.lazyLoad(exports, ["getDomains","getDomainsOutput"], () => require("./getDomains"));

export { GetHostGroupsArgs, GetHostGroupsResult, GetHostGroupsOutputArgs } from "./getHostGroups";
export const getHostGroups: typeof import("./getHostGroups").getHostGroups = null as any;
export const getHostGroupsOutput: typeof import("./getHostGroups").getHostGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getHostGroups","getHostGroupsOutput"], () => require("./getHostGroups"));

export { GetIpGroupsArgs, GetIpGroupsResult, GetIpGroupsOutputArgs } from "./getIpGroups";
export const getIpGroups: typeof import("./getIpGroups").getIpGroups = null as any;
export const getIpGroupsOutput: typeof import("./getIpGroups").getIpGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getIpGroups","getIpGroupsOutput"], () => require("./getIpGroups"));

export { GetProhibitionsArgs, GetProhibitionsResult, GetProhibitionsOutputArgs } from "./getProhibitions";
export const getProhibitions: typeof import("./getProhibitions").getProhibitions = null as any;
export const getProhibitionsOutput: typeof import("./getProhibitions").getProhibitionsOutput = null as any;
utilities.lazyLoad(exports, ["getProhibitions","getProhibitionsOutput"], () => require("./getProhibitions"));

export { GetServiceCertificatesArgs, GetServiceCertificatesResult, GetServiceCertificatesOutputArgs } from "./getServiceCertificates";
export const getServiceCertificates: typeof import("./getServiceCertificates").getServiceCertificates = null as any;
export const getServiceCertificatesOutput: typeof import("./getServiceCertificates").getServiceCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["getServiceCertificates","getServiceCertificatesOutput"], () => require("./getServiceCertificates"));

export { GetSystemBotsArgs, GetSystemBotsResult, GetSystemBotsOutputArgs } from "./getSystemBots";
export const getSystemBots: typeof import("./getSystemBots").getSystemBots = null as any;
export const getSystemBotsOutput: typeof import("./getSystemBots").getSystemBotsOutput = null as any;
utilities.lazyLoad(exports, ["getSystemBots","getSystemBotsOutput"], () => require("./getSystemBots"));

export { HostGroupArgs, HostGroupState } from "./hostGroup";
export type HostGroup = import("./hostGroup").HostGroup;
export const HostGroup: typeof import("./hostGroup").HostGroup = null as any;
utilities.lazyLoad(exports, ["HostGroup"], () => require("./hostGroup"));

export { HostGroupsArgs, HostGroupsResult, HostGroupsOutputArgs } from "./hostGroups";
export const hostGroups: typeof import("./hostGroups").hostGroups = null as any;
export const hostGroupsOutput: typeof import("./hostGroups").hostGroupsOutput = null as any;
utilities.lazyLoad(exports, ["hostGroups","hostGroupsOutput"], () => require("./hostGroups"));

export { InstanceCtlArgs, InstanceCtlState } from "./instanceCtl";
export type InstanceCtl = import("./instanceCtl").InstanceCtl;
export const InstanceCtl: typeof import("./instanceCtl").InstanceCtl = null as any;
utilities.lazyLoad(exports, ["InstanceCtl"], () => require("./instanceCtl"));

export { IpGroupArgs, IpGroupState } from "./ipGroup";
export type IpGroup = import("./ipGroup").IpGroup;
export const IpGroup: typeof import("./ipGroup").IpGroup = null as any;
utilities.lazyLoad(exports, ["IpGroup"], () => require("./ipGroup"));

export { IpGroupsArgs, IpGroupsResult, IpGroupsOutputArgs } from "./ipGroups";
export const ipGroups: typeof import("./ipGroups").ipGroups = null as any;
export const ipGroupsOutput: typeof import("./ipGroups").ipGroupsOutput = null as any;
utilities.lazyLoad(exports, ["ipGroups","ipGroupsOutput"], () => require("./ipGroups"));

export { ProhibitionsArgs, ProhibitionsResult, ProhibitionsOutputArgs } from "./prohibitions";
export const prohibitions: typeof import("./prohibitions").prohibitions = null as any;
export const prohibitionsOutput: typeof import("./prohibitions").prohibitionsOutput = null as any;
utilities.lazyLoad(exports, ["prohibitions","prohibitionsOutput"], () => require("./prohibitions"));

export { ServiceCertificatesArgs, ServiceCertificatesResult, ServiceCertificatesOutputArgs } from "./serviceCertificates";
export const serviceCertificates: typeof import("./serviceCertificates").serviceCertificates = null as any;
export const serviceCertificatesOutput: typeof import("./serviceCertificates").serviceCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["serviceCertificates","serviceCertificatesOutput"], () => require("./serviceCertificates"));

export { SystemBotArgs, SystemBotState } from "./systemBot";
export type SystemBot = import("./systemBot").SystemBot;
export const SystemBot: typeof import("./systemBot").SystemBot = null as any;
utilities.lazyLoad(exports, ["SystemBot"], () => require("./systemBot"));

export { SystemBotsArgs, SystemBotsResult, SystemBotsOutputArgs } from "./systemBots";
export const systemBots: typeof import("./systemBots").systemBots = null as any;
export const systemBotsOutput: typeof import("./systemBots").systemBotsOutput = null as any;
utilities.lazyLoad(exports, ["systemBots","systemBotsOutput"], () => require("./systemBots"));

export { VulnerabilityArgs, VulnerabilityState } from "./vulnerability";
export type Vulnerability = import("./vulnerability").Vulnerability;
export const Vulnerability: typeof import("./vulnerability").Vulnerability = null as any;
utilities.lazyLoad(exports, ["Vulnerability"], () => require("./vulnerability"));

export { WafDomainArgs, WafDomainState } from "./wafDomain";
export type WafDomain = import("./wafDomain").WafDomain;
export const WafDomain: typeof import("./wafDomain").WafDomain = null as any;
utilities.lazyLoad(exports, ["WafDomain"], () => require("./wafDomain"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:waf/aclRule:AclRule":
                return new AclRule(name, <any>undefined, { urn })
            case "volcengine:waf/botAnalyseProtectRule:BotAnalyseProtectRule":
                return new BotAnalyseProtectRule(name, <any>undefined, { urn })
            case "volcengine:waf/ccRule:CcRule":
                return new CcRule(name, <any>undefined, { urn })
            case "volcengine:waf/customBot:CustomBot":
                return new CustomBot(name, <any>undefined, { urn })
            case "volcengine:waf/customPage:CustomPage":
                return new CustomPage(name, <any>undefined, { urn })
            case "volcengine:waf/hostGroup:HostGroup":
                return new HostGroup(name, <any>undefined, { urn })
            case "volcengine:waf/instanceCtl:InstanceCtl":
                return new InstanceCtl(name, <any>undefined, { urn })
            case "volcengine:waf/ipGroup:IpGroup":
                return new IpGroup(name, <any>undefined, { urn })
            case "volcengine:waf/systemBot:SystemBot":
                return new SystemBot(name, <any>undefined, { urn })
            case "volcengine:waf/vulnerability:Vulnerability":
                return new Vulnerability(name, <any>undefined, { urn })
            case "volcengine:waf/wafDomain:WafDomain":
                return new WafDomain(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "waf/aclRule", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/botAnalyseProtectRule", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/ccRule", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/customBot", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/customPage", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/hostGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/instanceCtl", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/ipGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/systemBot", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/vulnerability", _module)
pulumi.runtime.registerResourceModule("volcengine", "waf/wafDomain", _module)
