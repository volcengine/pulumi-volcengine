// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage kafka topic
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.kafka.Instance("fooInstance", {
 *     instanceName: "acc-test-kafka",
 *     instanceDescription: "tf-test",
 *     version: "2.2.2",
 *     computeSpec: "kafka.20xrate.hw",
 *     subnetId: fooSubnet.id,
 *     userName: "tf-user",
 *     userPassword: "tf-pass!@q1",
 *     chargeType: "PostPaid",
 *     storageSpace: 300,
 *     partitionNumber: 350,
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 *     parameters: [
 *         {
 *             parameterName: "MessageMaxByte",
 *             parameterValue: "12",
 *         },
 *         {
 *             parameterName: "LogRetentionHours",
 *             parameterValue: "70",
 *         },
 *     ],
 * });
 * const fooSaslUser = new volcengine.kafka.SaslUser("fooSaslUser", {
 *     userName: "acc-test-user",
 *     instanceId: fooInstance.id,
 *     userPassword: "suqsnis123!",
 *     description: "tf-test",
 *     allAuthority: true,
 *     passwordType: "Scram",
 * });
 * const fooTopic = new volcengine.kafka.Topic("fooTopic", {
 *     topicName: "acc-test-topic",
 *     instanceId: fooInstance.id,
 *     description: "tf-test",
 *     partitionNumber: 15,
 *     replicaNumber: 3,
 *     parameters: {
 *         minInsyncReplicaNumber: 2,
 *         messageMaxByte: 10,
 *         logRetentionHours: 96,
 *     },
 *     allAuthority: false,
 *     accessPolicies: [{
 *         userName: fooSaslUser.userName,
 *         accessPolicy: "Pub",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * KafkaTopic can be imported using the instance_id:topic_name, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:kafka/topic:Topic default kafka-cnoeeapetf4s****:topic
 * ```
 */
export class Topic extends pulumi.CustomResource {
    /**
     * Get an existing Topic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TopicState, opts?: pulumi.CustomResourceOptions): Topic {
        return new Topic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:kafka/topic:Topic';

    /**
     * Returns true if the given object is an instance of Topic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Topic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Topic.__pulumiType;
    }

    /**
     * The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
     */
    public readonly accessPolicies!: pulumi.Output<outputs.kafka.TopicAccessPolicy[] | undefined>;
    /**
     * Whether the kafka topic is configured to be accessible by all users. Default: true.
     */
    public readonly allAuthority!: pulumi.Output<boolean | undefined>;
    /**
     * The description of the kafka topic.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The instance id of the kafka topic.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The parameters of the kafka topic.
     */
    public readonly parameters!: pulumi.Output<outputs.kafka.TopicParameters>;
    /**
     * The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
     */
    public readonly partitionNumber!: pulumi.Output<number>;
    /**
     * The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
     */
    public readonly replicaNumber!: pulumi.Output<number | undefined>;
    /**
     * The name of the kafka topic.
     */
    public readonly topicName!: pulumi.Output<string>;

    /**
     * Create a Topic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TopicArgs | TopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TopicState | undefined;
            resourceInputs["accessPolicies"] = state ? state.accessPolicies : undefined;
            resourceInputs["allAuthority"] = state ? state.allAuthority : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["parameters"] = state ? state.parameters : undefined;
            resourceInputs["partitionNumber"] = state ? state.partitionNumber : undefined;
            resourceInputs["replicaNumber"] = state ? state.replicaNumber : undefined;
            resourceInputs["topicName"] = state ? state.topicName : undefined;
        } else {
            const args = argsOrState as TopicArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.partitionNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'partitionNumber'");
            }
            if ((!args || args.topicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topicName'");
            }
            resourceInputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            resourceInputs["allAuthority"] = args ? args.allAuthority : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["parameters"] = args ? args.parameters : undefined;
            resourceInputs["partitionNumber"] = args ? args.partitionNumber : undefined;
            resourceInputs["replicaNumber"] = args ? args.replicaNumber : undefined;
            resourceInputs["topicName"] = args ? args.topicName : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Topic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Topic resources.
 */
export interface TopicState {
    /**
     * The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
     */
    accessPolicies?: pulumi.Input<pulumi.Input<inputs.kafka.TopicAccessPolicy>[]>;
    /**
     * Whether the kafka topic is configured to be accessible by all users. Default: true.
     */
    allAuthority?: pulumi.Input<boolean>;
    /**
     * The description of the kafka topic.
     */
    description?: pulumi.Input<string>;
    /**
     * The instance id of the kafka topic.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The parameters of the kafka topic.
     */
    parameters?: pulumi.Input<inputs.kafka.TopicParameters>;
    /**
     * The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
     */
    partitionNumber?: pulumi.Input<number>;
    /**
     * The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
     */
    replicaNumber?: pulumi.Input<number>;
    /**
     * The name of the kafka topic.
     */
    topicName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Topic resource.
 */
export interface TopicArgs {
    /**
     * The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
     */
    accessPolicies?: pulumi.Input<pulumi.Input<inputs.kafka.TopicAccessPolicy>[]>;
    /**
     * Whether the kafka topic is configured to be accessible by all users. Default: true.
     */
    allAuthority?: pulumi.Input<boolean>;
    /**
     * The description of the kafka topic.
     */
    description?: pulumi.Input<string>;
    /**
     * The instance id of the kafka topic.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The parameters of the kafka topic.
     */
    parameters?: pulumi.Input<inputs.kafka.TopicParameters>;
    /**
     * The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
     */
    partitionNumber: pulumi.Input<number>;
    /**
     * The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
     */
    replicaNumber?: pulumi.Input<number>;
    /**
     * The name of the kafka topic.
     */
    topicName: pulumi.Input<string>;
}
