// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of kafka sasl users
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.kafka.Instance("fooInstance", {
 *     instanceName: "acc-test-kafka",
 *     instanceDescription: "tf-test",
 *     version: "2.2.2",
 *     computeSpec: "kafka.20xrate.hw",
 *     subnetId: fooSubnet.id,
 *     userName: "tf-user",
 *     userPassword: "tf-pass!@q1",
 *     chargeType: "PostPaid",
 *     storageSpace: 300,
 *     partitionNumber: 350,
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 *     parameters: [
 *         {
 *             parameterName: "MessageMaxByte",
 *             parameterValue: "12",
 *         },
 *         {
 *             parameterName: "LogRetentionHours",
 *             parameterValue: "70",
 *         },
 *     ],
 * });
 * const fooSaslUser = new volcengine.kafka.SaslUser("fooSaslUser", {
 *     userName: "acc-test-user",
 *     instanceId: fooInstance.id,
 *     userPassword: "suqsnis123!",
 *     description: "tf-test",
 *     allAuthority: true,
 *     passwordType: "Scram",
 * });
 * const default = volcengine.kafka.getSaslUsersOutput({
 *     instanceId: fooInstance.id,
 *     userName: fooSaslUser.userName,
 * });
 * ```
 */
/** @deprecated volcengine.kafka.SaslUsers has been deprecated in favor of volcengine.kafka.getSaslUsers */
export function saslUsers(args: SaslUsersArgs, opts?: pulumi.InvokeOptions): Promise<SaslUsersResult> {
    pulumi.log.warn("saslUsers is deprecated: volcengine.kafka.SaslUsers has been deprecated in favor of volcengine.kafka.getSaslUsers")

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:kafka/saslUsers:SaslUsers", {
        "instanceId": args.instanceId,
        "outputFile": args.outputFile,
        "userName": args.userName,
    }, opts);
}

/**
 * A collection of arguments for invoking SaslUsers.
 */
export interface SaslUsersArgs {
    /**
     * The id of instance.
     */
    instanceId: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The user name, support fuzzy matching.
     */
    userName?: string;
}

/**
 * A collection of values returned by SaslUsers.
 */
export interface SaslUsersResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly outputFile?: string;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    /**
     * The name of user.
     */
    readonly userName?: string;
    /**
     * The collection of query.
     */
    readonly users: outputs.kafka.SaslUsersUser[];
}
/**
 * Use this data source to query detailed information of kafka sasl users
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.kafka.Instance("fooInstance", {
 *     instanceName: "acc-test-kafka",
 *     instanceDescription: "tf-test",
 *     version: "2.2.2",
 *     computeSpec: "kafka.20xrate.hw",
 *     subnetId: fooSubnet.id,
 *     userName: "tf-user",
 *     userPassword: "tf-pass!@q1",
 *     chargeType: "PostPaid",
 *     storageSpace: 300,
 *     partitionNumber: 350,
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 *     parameters: [
 *         {
 *             parameterName: "MessageMaxByte",
 *             parameterValue: "12",
 *         },
 *         {
 *             parameterName: "LogRetentionHours",
 *             parameterValue: "70",
 *         },
 *     ],
 * });
 * const fooSaslUser = new volcengine.kafka.SaslUser("fooSaslUser", {
 *     userName: "acc-test-user",
 *     instanceId: fooInstance.id,
 *     userPassword: "suqsnis123!",
 *     description: "tf-test",
 *     allAuthority: true,
 *     passwordType: "Scram",
 * });
 * const default = volcengine.kafka.getSaslUsersOutput({
 *     instanceId: fooInstance.id,
 *     userName: fooSaslUser.userName,
 * });
 * ```
 */
/** @deprecated volcengine.kafka.SaslUsers has been deprecated in favor of volcengine.kafka.getSaslUsers */
export function saslUsersOutput(args: SaslUsersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<SaslUsersResult> {
    return pulumi.output(args).apply((a: any) => saslUsers(a, opts))
}

/**
 * A collection of arguments for invoking SaslUsers.
 */
export interface SaslUsersOutputArgs {
    /**
     * The id of instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The user name, support fuzzy matching.
     */
    userName?: pulumi.Input<string>;
}
