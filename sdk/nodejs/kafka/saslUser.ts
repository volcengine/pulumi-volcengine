// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage kafka sasl user
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.kafka.Instance("fooInstance", {
 *     instanceName: "acc-test-kafka",
 *     instanceDescription: "tf-test",
 *     version: "2.2.2",
 *     computeSpec: "kafka.20xrate.hw",
 *     subnetId: fooSubnet.id,
 *     userName: "tf-user",
 *     userPassword: "tf-pass!@q1",
 *     chargeType: "PostPaid",
 *     storageSpace: 300,
 *     partitionNumber: 350,
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 *     parameters: [
 *         {
 *             parameterName: "MessageMaxByte",
 *             parameterValue: "12",
 *         },
 *         {
 *             parameterName: "LogRetentionHours",
 *             parameterValue: "70",
 *         },
 *     ],
 * });
 * const fooSaslUser = new volcengine.kafka.SaslUser("fooSaslUser", {
 *     userName: "acc-test-user",
 *     instanceId: fooInstance.id,
 *     userPassword: "suqsnis123!",
 *     description: "tf-test",
 *     allAuthority: true,
 *     passwordType: "Scram",
 * });
 * ```
 *
 * ## Import
 *
 * KafkaSaslUser can be imported using the kafka_id:username, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:kafka/saslUser:SaslUser default kafka-cnngbnntswg1****:tfuser
 * ```
 */
export class SaslUser extends pulumi.CustomResource {
    /**
     * Get an existing SaslUser resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SaslUserState, opts?: pulumi.CustomResourceOptions): SaslUser {
        return new SaslUser(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:kafka/saslUser:SaslUser';

    /**
     * Returns true if the given object is an instance of SaslUser.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SaslUser {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SaslUser.__pulumiType;
    }

    /**
     * Whether this user has read and write permissions for all topics. Default is true.
     */
    public readonly allAuthority!: pulumi.Output<boolean | undefined>;
    /**
     * The description of user.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The id of instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
     */
    public readonly passwordType!: pulumi.Output<string | undefined>;
    /**
     * The name of user.
     */
    public readonly userName!: pulumi.Output<string>;
    /**
     * The password of user.
     */
    public readonly userPassword!: pulumi.Output<string>;

    /**
     * Create a SaslUser resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SaslUserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SaslUserArgs | SaslUserState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SaslUserState | undefined;
            resourceInputs["allAuthority"] = state ? state.allAuthority : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["passwordType"] = state ? state.passwordType : undefined;
            resourceInputs["userName"] = state ? state.userName : undefined;
            resourceInputs["userPassword"] = state ? state.userPassword : undefined;
        } else {
            const args = argsOrState as SaslUserArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.userName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userName'");
            }
            if ((!args || args.userPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPassword'");
            }
            resourceInputs["allAuthority"] = args ? args.allAuthority : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["passwordType"] = args ? args.passwordType : undefined;
            resourceInputs["userName"] = args ? args.userName : undefined;
            resourceInputs["userPassword"] = args?.userPassword ? pulumi.secret(args.userPassword) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["userPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SaslUser.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SaslUser resources.
 */
export interface SaslUserState {
    /**
     * Whether this user has read and write permissions for all topics. Default is true.
     */
    allAuthority?: pulumi.Input<boolean>;
    /**
     * The description of user.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
     */
    passwordType?: pulumi.Input<string>;
    /**
     * The name of user.
     */
    userName?: pulumi.Input<string>;
    /**
     * The password of user.
     */
    userPassword?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SaslUser resource.
 */
export interface SaslUserArgs {
    /**
     * Whether this user has read and write permissions for all topics. Default is true.
     */
    allAuthority?: pulumi.Input<boolean>;
    /**
     * The description of user.
     */
    description?: pulumi.Input<string>;
    /**
     * The id of instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
     */
    passwordType?: pulumi.Input<string>;
    /**
     * The name of user.
     */
    userName: pulumi.Input<string>;
    /**
     * The password of user.
     */
    userPassword: pulumi.Input<string>;
}
