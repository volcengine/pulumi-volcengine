// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * (Deprecated! Recommend use volcengine.escloud_v2.EscloudInstanceV2 replace) Use this data source to query detailed information of escloud instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet_new",
 *     description: "tfdesc",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.escloud.Instance("fooInstance", {instanceConfiguration: {
 *     version: "V6_7",
 *     zoneNumber: 1,
 *     enableHttps: true,
 *     adminUserName: "admin",
 *     adminPassword: "Password@@",
 *     chargeType: "PostPaid",
 *     configurationCode: "es.standard",
 *     enablePureMaster: true,
 *     instanceName: "acc-test-0",
 *     nodeSpecsAssigns: [
 *         {
 *             type: "Master",
 *             number: 3,
 *             resourceSpecName: "es.x4.medium",
 *             storageSpecName: "es.volume.essd.pl0",
 *             storageSize: 100,
 *         },
 *         {
 *             type: "Hot",
 *             number: 2,
 *             resourceSpecName: "es.x4.large",
 *             storageSpecName: "es.volume.essd.pl0",
 *             storageSize: 100,
 *         },
 *         {
 *             type: "Kibana",
 *             number: 1,
 *             resourceSpecName: "kibana.x2.small",
 *         },
 *     ],
 *     subnetId: fooSubnet.id,
 *     projectName: "default",
 *     forceRestartAfterScale: false,
 * }});
 * const fooInstances = volcengine.escloud.getInstancesOutput({
 *     ids: [fooInstance.id],
 * });
 * ```
 */
export function getInstances(args?: GetInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetInstancesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:escloud/getInstances:getInstances", {
        "chargeTypes": args.chargeTypes,
        "ids": args.ids,
        "names": args.names,
        "outputFile": args.outputFile,
        "statuses": args.statuses,
        "versions": args.versions,
        "zoneIds": args.zoneIds,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesArgs {
    /**
     * The charge types of instance.
     */
    chargeTypes?: string[];
    /**
     * A list of instance IDs.
     */
    ids?: string[];
    /**
     * The names of instance.
     */
    names?: string[];
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The list status of instance.
     */
    statuses?: string[];
    /**
     * The versions of instance.
     */
    versions?: string[];
    /**
     * The available zone IDs of instance.
     */
    zoneIds?: string[];
}

/**
 * A collection of values returned by getInstances.
 */
export interface GetInstancesResult {
    readonly chargeTypes?: string[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The collection of instance query.
     */
    readonly instances: outputs.escloud.GetInstancesInstance[];
    readonly names?: string[];
    readonly outputFile?: string;
    readonly statuses?: string[];
    /**
     * The total count of instance query.
     */
    readonly totalCount: number;
    readonly versions?: string[];
    readonly zoneIds?: string[];
}
/**
 * (Deprecated! Recommend use volcengine.escloud_v2.EscloudInstanceV2 replace) Use this data source to query detailed information of escloud instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet_new",
 *     description: "tfdesc",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.escloud.Instance("fooInstance", {instanceConfiguration: {
 *     version: "V6_7",
 *     zoneNumber: 1,
 *     enableHttps: true,
 *     adminUserName: "admin",
 *     adminPassword: "Password@@",
 *     chargeType: "PostPaid",
 *     configurationCode: "es.standard",
 *     enablePureMaster: true,
 *     instanceName: "acc-test-0",
 *     nodeSpecsAssigns: [
 *         {
 *             type: "Master",
 *             number: 3,
 *             resourceSpecName: "es.x4.medium",
 *             storageSpecName: "es.volume.essd.pl0",
 *             storageSize: 100,
 *         },
 *         {
 *             type: "Hot",
 *             number: 2,
 *             resourceSpecName: "es.x4.large",
 *             storageSpecName: "es.volume.essd.pl0",
 *             storageSize: 100,
 *         },
 *         {
 *             type: "Kibana",
 *             number: 1,
 *             resourceSpecName: "kibana.x2.small",
 *         },
 *     ],
 *     subnetId: fooSubnet.id,
 *     projectName: "default",
 *     forceRestartAfterScale: false,
 * }});
 * const fooInstances = volcengine.escloud.getInstancesOutput({
 *     ids: [fooInstance.id],
 * });
 * ```
 */
export function getInstancesOutput(args?: GetInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstancesResult> {
    return pulumi.output(args).apply((a: any) => getInstances(a, opts))
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesOutputArgs {
    /**
     * The charge types of instance.
     */
    chargeTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of instance IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The names of instance.
     */
    names?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The list status of instance.
     */
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The versions of instance.
     */
    versions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The available zone IDs of instance.
     */
    zoneIds?: pulumi.Input<pulumi.Input<string>[]>;
}
