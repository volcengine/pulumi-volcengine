// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage escloud instance
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.escloud.Instance("foo", {instanceConfiguration: {
 *     adminPassword: "xxxx",
 *     adminUserName: "admin",
 *     chargeType: "PostPaid",
 *     configurationCode: "es.standard",
 *     enableHttps: true,
 *     enablePureMaster: true,
 *     forceRestartAfterScale: false,
 *     instanceName: "from-tf4",
 *     nodeSpecsAssigns: [
 *         {
 *             number: 3,
 *             resourceSpecName: "es.x4.medium",
 *             storageSize: 100,
 *             storageSpecName: "es.volume.essd.pl0",
 *             type: "Master",
 *         },
 *         {
 *             number: 2,
 *             resourceSpecName: "es.x4.large",
 *             storageSize: 100,
 *             storageSpecName: "es.volume.essd.pl0",
 *             type: "Hot",
 *         },
 *         {
 *             number: 1,
 *             resourceSpecName: "kibana.x2.small",
 *             type: "Kibana",
 *         },
 *     ],
 *     projectName: "default",
 *     subnetId: "subnet-2bz9vxrixqigw2dx0eextz50p",
 *     version: "V6_7",
 *     zoneNumber: 1,
 * }});
 * ```
 *
 * ## Import
 *
 * ESCloud Instance can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:escloud/instance:Instance default n769ewmjjqyqh5dv
 * ```
 */
export class Instance extends pulumi.CustomResource {
    /**
     * Get an existing Instance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InstanceState, opts?: pulumi.CustomResourceOptions): Instance {
        return new Instance(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:escloud/instance:Instance';

    /**
     * Returns true if the given object is an instance of Instance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Instance {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Instance.__pulumiType;
    }

    /**
     * The configuration of ESCloud instance.
     */
    public readonly instanceConfiguration!: pulumi.Output<outputs.escloud.InstanceInstanceConfiguration>;

    /**
     * Create a Instance resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InstanceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InstanceArgs | InstanceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InstanceState | undefined;
            resourceInputs["instanceConfiguration"] = state ? state.instanceConfiguration : undefined;
        } else {
            const args = argsOrState as InstanceArgs | undefined;
            if ((!args || args.instanceConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceConfiguration'");
            }
            resourceInputs["instanceConfiguration"] = args ? args.instanceConfiguration : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Instance.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Instance resources.
 */
export interface InstanceState {
    /**
     * The configuration of ESCloud instance.
     */
    instanceConfiguration?: pulumi.Input<inputs.escloud.InstanceInstanceConfiguration>;
}

/**
 * The set of arguments for constructing a Instance resource.
 */
export interface InstanceArgs {
    /**
     * The configuration of ESCloud instance.
     */
    instanceConfiguration: pulumi.Input<inputs.escloud.InstanceInstanceConfiguration>;
}
