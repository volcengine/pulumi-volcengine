// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of clbs
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooClb: volcengine.clb.Clb[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooClb.push(new volcengine.clb.Clb(`fooClb-${range.value}`, {
 *         type: "public",
 *         subnetId: fooSubnet.id,
 *         loadBalancerSpec: "small_1",
 *         description: "acc-test-demo",
 *         loadBalancerName: `acc-test-clb-${range.value}`,
 *         loadBalancerBillingType: "PostPaid",
 *         eipBillingConfig: {
 *             isp: "BGP",
 *             eipBillingType: "PostPaidByBandwidth",
 *             bandwidth: 1,
 *         },
 *         tags: [{
 *             key: "k1",
 *             value: "v1",
 *         }],
 *     }));
 * }
 * const fooClbs = volcengine.clb.ClbsOutput({
 *     ids: fooClb.map(__item => __item.id),
 * });
 * ```
 */
export function clbs(args?: ClbsArgs, opts?: pulumi.InvokeOptions): Promise<ClbsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:clb/clbs:Clbs", {
        "eniAddress": args.eniAddress,
        "ids": args.ids,
        "loadBalancerName": args.loadBalancerName,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "tags": args.tags,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking Clbs.
 */
export interface ClbsArgs {
    /**
     * The private ip address of the Clb.
     */
    eniAddress?: string;
    /**
     * A list of Clb IDs.
     */
    ids?: string[];
    /**
     * The name of the Clb.
     */
    loadBalancerName?: string;
    /**
     * A Name Regex of Clb.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The ProjectName of Clb.
     */
    projectName?: string;
    /**
     * Tags.
     */
    tags?: inputs.clb.ClbsTag[];
    /**
     * The id of the VPC.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by Clbs.
 */
export interface ClbsResult {
    /**
     * The collection of Clb query.
     */
    readonly clbs: outputs.clb.ClbsClb[];
    /**
     * The Eni address of the Clb.
     */
    readonly eniAddress?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The name of the Clb.
     */
    readonly loadBalancerName?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The ProjectName of the Clb.
     */
    readonly projectName?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.clb.ClbsTag[];
    /**
     * The total count of Clb query.
     */
    readonly totalCount: number;
    /**
     * The vpc ID of the Clb.
     */
    readonly vpcId?: string;
}
/**
 * Use this data source to query detailed information of clbs
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooClb: volcengine.clb.Clb[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooClb.push(new volcengine.clb.Clb(`fooClb-${range.value}`, {
 *         type: "public",
 *         subnetId: fooSubnet.id,
 *         loadBalancerSpec: "small_1",
 *         description: "acc-test-demo",
 *         loadBalancerName: `acc-test-clb-${range.value}`,
 *         loadBalancerBillingType: "PostPaid",
 *         eipBillingConfig: {
 *             isp: "BGP",
 *             eipBillingType: "PostPaidByBandwidth",
 *             bandwidth: 1,
 *         },
 *         tags: [{
 *             key: "k1",
 *             value: "v1",
 *         }],
 *     }));
 * }
 * const fooClbs = volcengine.clb.ClbsOutput({
 *     ids: fooClb.map(__item => __item.id),
 * });
 * ```
 */
export function clbsOutput(args?: ClbsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ClbsResult> {
    return pulumi.output(args).apply((a: any) => clbs(a, opts))
}

/**
 * A collection of arguments for invoking Clbs.
 */
export interface ClbsOutputArgs {
    /**
     * The private ip address of the Clb.
     */
    eniAddress?: pulumi.Input<string>;
    /**
     * A list of Clb IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Clb.
     */
    loadBalancerName?: pulumi.Input<string>;
    /**
     * A Name Regex of Clb.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The ProjectName of Clb.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.clb.ClbsTagArgs>[]>;
    /**
     * The id of the VPC.
     */
    vpcId?: pulumi.Input<string>;
}
