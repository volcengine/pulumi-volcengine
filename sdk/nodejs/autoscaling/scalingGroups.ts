// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of scaling groups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooScalingGroup: volcengine.autoscaling.ScalingGroup[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooScalingGroup.push(new volcengine.autoscaling.ScalingGroup(`fooScalingGroup-${range.value}`, {
 *         scalingGroupName: `acc-test-scaling-group-${range.value}`,
 *         subnetIds: [fooSubnet.id],
 *         multiAzPolicy: "BALANCE",
 *         desireInstanceNumber: 0,
 *         minInstanceNumber: 0,
 *         maxInstanceNumber: 10,
 *         instanceTerminatePolicy: "OldestInstance",
 *         defaultCooldown: 30,
 *         tags: [
 *             {
 *                 key: "k2",
 *                 value: "v2",
 *             },
 *             {
 *                 key: "k1",
 *                 value: "v1",
 *             },
 *         ],
 *     }));
 * }
 * const default = volcengine.autoscaling.ScalingGroupsOutput({
 *     ids: fooScalingGroup.map(__item => __item.id),
 * });
 * ```
 */
export function scalingGroups(args?: ScalingGroupsArgs, opts?: pulumi.InvokeOptions): Promise<ScalingGroupsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:autoscaling/scalingGroups:ScalingGroups", {
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "scalingGroupNames": args.scalingGroupNames,
    }, opts);
}

/**
 * A collection of arguments for invoking ScalingGroups.
 */
export interface ScalingGroupsArgs {
    /**
     * A list of scaling group ids.
     */
    ids?: string[];
    /**
     * A Name Regex of scaling group.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * A list of scaling group names.
     */
    scalingGroupNames?: string[];
}

/**
 * A collection of values returned by ScalingGroups.
 */
export interface ScalingGroupsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    readonly nameRegex?: string;
    readonly outputFile?: string;
    readonly scalingGroupNames?: string[];
    /**
     * The collection of scaling group query.
     */
    readonly scalingGroups: outputs.autoscaling.ScalingGroupsScalingGroup[];
    /**
     * The total count of scaling group query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of scaling groups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooScalingGroup: volcengine.autoscaling.ScalingGroup[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooScalingGroup.push(new volcengine.autoscaling.ScalingGroup(`fooScalingGroup-${range.value}`, {
 *         scalingGroupName: `acc-test-scaling-group-${range.value}`,
 *         subnetIds: [fooSubnet.id],
 *         multiAzPolicy: "BALANCE",
 *         desireInstanceNumber: 0,
 *         minInstanceNumber: 0,
 *         maxInstanceNumber: 10,
 *         instanceTerminatePolicy: "OldestInstance",
 *         defaultCooldown: 30,
 *         tags: [
 *             {
 *                 key: "k2",
 *                 value: "v2",
 *             },
 *             {
 *                 key: "k1",
 *                 value: "v1",
 *             },
 *         ],
 *     }));
 * }
 * const default = volcengine.autoscaling.ScalingGroupsOutput({
 *     ids: fooScalingGroup.map(__item => __item.id),
 * });
 * ```
 */
export function scalingGroupsOutput(args?: ScalingGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ScalingGroupsResult> {
    return pulumi.output(args).apply((a: any) => scalingGroups(a, opts))
}

/**
 * A collection of arguments for invoking ScalingGroups.
 */
export interface ScalingGroupsOutputArgs {
    /**
     * A list of scaling group ids.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A Name Regex of scaling group.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * A list of scaling group names.
     */
    scalingGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
}
