// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of scaling configurations
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     securityGroupName: "acc-test-security-group",
 *     vpcId: fooVpc.id,
 * });
 * const fooImages = volcengine.ecs.getImages({
 *     osType: "Linux",
 *     visibility: "public",
 *     instanceTypeId: "ecs.g1.large",
 * });
 * const fooScalingGroup = new volcengine.autoscaling.ScalingGroup("fooScalingGroup", {
 *     scalingGroupName: "acc-test-scaling-group",
 *     subnetIds: [fooSubnet.id],
 *     multiAzPolicy: "BALANCE",
 *     desireInstanceNumber: 0,
 *     minInstanceNumber: 0,
 *     maxInstanceNumber: 1,
 *     instanceTerminatePolicy: "OldestInstance",
 *     defaultCooldown: 10,
 * });
 * const fooScalingConfiguration: volcengine.autoscaling.ScalingConfiguration[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooScalingConfiguration.push(new volcengine.autoscaling.ScalingConfiguration(`fooScalingConfiguration-${range.value}`, {
 *         imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *         instanceName: "acc-test-instance",
 *         instanceTypes: ["ecs.g1.large"],
 *         password: "93f0cb0614Aab12",
 *         scalingConfigurationName: `acc-test-scaling-config-${range.value}`,
 *         scalingGroupId: fooScalingGroup.id,
 *         securityGroupIds: [fooSecurityGroup.id],
 *         volumes: [{
 *             volumeType: "ESSD_PL0",
 *             size: 50,
 *             deleteWithInstance: true,
 *         }],
 *     }));
 * }
 * const fooScalingConfigurations = volcengine.autoscaling.getScalingConfigurationsOutput({
 *     ids: fooScalingConfiguration.map(__item => __item.id),
 * });
 * ```
 */
/** @deprecated volcengine.autoscaling.ScalingConfigurations has been deprecated in favor of volcengine.autoscaling.getScalingConfigurations */
export function scalingConfigurations(args?: ScalingConfigurationsArgs, opts?: pulumi.InvokeOptions): Promise<ScalingConfigurationsResult> {
    pulumi.log.warn("scalingConfigurations is deprecated: volcengine.autoscaling.ScalingConfigurations has been deprecated in favor of volcengine.autoscaling.getScalingConfigurations")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:autoscaling/scalingConfigurations:ScalingConfigurations", {
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "scalingConfigurationNames": args.scalingConfigurationNames,
        "scalingGroupId": args.scalingGroupId,
    }, opts);
}

/**
 * A collection of arguments for invoking ScalingConfigurations.
 */
export interface ScalingConfigurationsArgs {
    /**
     * A list of scaling configuration ids.
     */
    ids?: string[];
    /**
     * A Name Regex of scaling configuration.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * A list of scaling configuration names.
     */
    scalingConfigurationNames?: string[];
    /**
     * An id of scaling group.
     */
    scalingGroupId?: string;
}

/**
 * A collection of values returned by ScalingConfigurations.
 */
export interface ScalingConfigurationsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    readonly nameRegex?: string;
    readonly outputFile?: string;
    readonly scalingConfigurationNames?: string[];
    /**
     * The collection of scaling configuration query.
     */
    readonly scalingConfigurations: outputs.autoscaling.ScalingConfigurationsScalingConfiguration[];
    /**
     * The id of the scaling group to which the scaling configuration belongs.
     */
    readonly scalingGroupId?: string;
    /**
     * The total count of scaling configuration query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of scaling configurations
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     securityGroupName: "acc-test-security-group",
 *     vpcId: fooVpc.id,
 * });
 * const fooImages = volcengine.ecs.getImages({
 *     osType: "Linux",
 *     visibility: "public",
 *     instanceTypeId: "ecs.g1.large",
 * });
 * const fooScalingGroup = new volcengine.autoscaling.ScalingGroup("fooScalingGroup", {
 *     scalingGroupName: "acc-test-scaling-group",
 *     subnetIds: [fooSubnet.id],
 *     multiAzPolicy: "BALANCE",
 *     desireInstanceNumber: 0,
 *     minInstanceNumber: 0,
 *     maxInstanceNumber: 1,
 *     instanceTerminatePolicy: "OldestInstance",
 *     defaultCooldown: 10,
 * });
 * const fooScalingConfiguration: volcengine.autoscaling.ScalingConfiguration[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooScalingConfiguration.push(new volcengine.autoscaling.ScalingConfiguration(`fooScalingConfiguration-${range.value}`, {
 *         imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *         instanceName: "acc-test-instance",
 *         instanceTypes: ["ecs.g1.large"],
 *         password: "93f0cb0614Aab12",
 *         scalingConfigurationName: `acc-test-scaling-config-${range.value}`,
 *         scalingGroupId: fooScalingGroup.id,
 *         securityGroupIds: [fooSecurityGroup.id],
 *         volumes: [{
 *             volumeType: "ESSD_PL0",
 *             size: 50,
 *             deleteWithInstance: true,
 *         }],
 *     }));
 * }
 * const fooScalingConfigurations = volcengine.autoscaling.getScalingConfigurationsOutput({
 *     ids: fooScalingConfiguration.map(__item => __item.id),
 * });
 * ```
 */
/** @deprecated volcengine.autoscaling.ScalingConfigurations has been deprecated in favor of volcengine.autoscaling.getScalingConfigurations */
export function scalingConfigurationsOutput(args?: ScalingConfigurationsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ScalingConfigurationsResult> {
    return pulumi.output(args).apply((a: any) => scalingConfigurations(a, opts))
}

/**
 * A collection of arguments for invoking ScalingConfigurations.
 */
export interface ScalingConfigurationsOutputArgs {
    /**
     * A list of scaling configuration ids.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A Name Regex of scaling configuration.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * A list of scaling configuration names.
     */
    scalingConfigurationNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An id of scaling group.
     */
    scalingGroupId?: pulumi.Input<string>;
}
