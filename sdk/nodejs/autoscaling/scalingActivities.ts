// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of scaling activities
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     securityGroupName: "acc-test-security-group",
 *     vpcId: fooVpc.id,
 * });
 * const fooImages = volcengine.ecs.Images({
 *     osType: "Linux",
 *     visibility: "public",
 *     instanceTypeId: "ecs.g1.large",
 * });
 * const fooKeyPair = new volcengine.ecs.KeyPair("fooKeyPair", {
 *     description: "acc-test-2",
 *     keyPairName: "acc-test-key-pair-name",
 * });
 * const fooLaunchTemplate = new volcengine.ecs.LaunchTemplate("fooLaunchTemplate", {
 *     description: "acc-test-desc",
 *     eipBandwidth: 200,
 *     eipBillingType: "PostPaidByBandwidth",
 *     eipIsp: "BGP",
 *     hostName: "acc-hostname",
 *     imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *     instanceChargeType: "PostPaid",
 *     instanceName: "acc-instance-name",
 *     instanceTypeId: "ecs.g1.large",
 *     keyPairName: fooKeyPair.keyPairName,
 *     launchTemplateName: "acc-test-template",
 *     networkInterfaces: [{
 *         subnetId: fooSubnet.id,
 *         securityGroupIds: [fooSecurityGroup.id],
 *     }],
 *     volumes: [{
 *         volumeType: "ESSD_PL0",
 *         size: 50,
 *         deleteWithInstance: true,
 *     }],
 * });
 * const fooScalingGroup = new volcengine.autoscaling.ScalingGroup("fooScalingGroup", {
 *     scalingGroupName: "acc-test-scaling-group",
 *     subnetIds: [fooSubnet.id],
 *     multiAzPolicy: "BALANCE",
 *     desireInstanceNumber: -1,
 *     minInstanceNumber: 0,
 *     maxInstanceNumber: 10,
 *     instanceTerminatePolicy: "OldestInstance",
 *     defaultCooldown: 10,
 *     launchTemplateId: fooLaunchTemplate.id,
 *     launchTemplateVersion: "Default",
 * });
 * const fooScalingGroupEnabler = new volcengine.autoscaling.ScalingGroupEnabler("fooScalingGroupEnabler", {scalingGroupId: fooScalingGroup.id});
 * const fooInstance: volcengine.ecs.Instance[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooInstance.push(new volcengine.ecs.Instance(`fooInstance-${range.value}`, {
 *         instanceName: `acc-test-ecs-${range.value}`,
 *         description: "acc-test",
 *         hostName: "tf-acc-test",
 *         imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *         instanceType: "ecs.g1.large",
 *         password: "93f0cb0614Aab12",
 *         instanceChargeType: "PostPaid",
 *         systemVolumeType: "ESSD_PL0",
 *         systemVolumeSize: 40,
 *         subnetId: fooSubnet.id,
 *         securityGroupIds: [fooSecurityGroup.id],
 *     }));
 * }
 * const fooScalingInstanceAttachment: volcengine.autoscaling.ScalingInstanceAttachment[] = [];
 * fooInstance.length.apply(rangeBody => {
 *     for (const range = {value: 0}; range.value < rangeBody; range.value++) {
 *         fooScalingInstanceAttachment.push(new volcengine.autoscaling.ScalingInstanceAttachment(`fooScalingInstanceAttachment-${range.value}`, {
 *             instanceId: fooInstance[range.value].id,
 *             scalingGroupId: fooScalingGroup.id,
 *             entrusted: true,
 *         }, {
 *         dependsOn: [fooScalingGroupEnabler],
 *     }));
 *     }
 * });
 * const fooScalingActivities = volcengine.autoscaling.ScalingActivitiesOutput({
 *     scalingGroupId: fooScalingGroup.id,
 * });
 * ```
 */
export function scalingActivities(args: ScalingActivitiesArgs, opts?: pulumi.InvokeOptions): Promise<ScalingActivitiesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:autoscaling/scalingActivities:ScalingActivities", {
        "endTime": args.endTime,
        "ids": args.ids,
        "outputFile": args.outputFile,
        "scalingGroupId": args.scalingGroupId,
        "startTime": args.startTime,
        "statusCode": args.statusCode,
    }, opts);
}

/**
 * A collection of arguments for invoking ScalingActivities.
 */
export interface ScalingActivitiesArgs {
    /**
     * An end time to start a Scaling Activity.
     */
    endTime?: string;
    /**
     * A list of Scaling Activity IDs.
     */
    ids?: string[];
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * A Id of Scaling Group.
     */
    scalingGroupId: string;
    /**
     * A start time to start a Scaling Activity.
     */
    startTime?: string;
    /**
     * A status code of Scaling Activity. Valid values: Init, Running, Success, PartialSuccess, Error, Rejected, Exception.
     */
    statusCode?: string;
}

/**
 * A collection of values returned by ScalingActivities.
 */
export interface ScalingActivitiesResult {
    /**
     * The collection of Scaling Activity query.
     */
    readonly activities: outputs.autoscaling.ScalingActivitiesActivity[];
    readonly endTime?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    readonly outputFile?: string;
    /**
     * The scaling group Id.
     */
    readonly scalingGroupId: string;
    readonly startTime?: string;
    /**
     * The Status Code of Scaling Activity.
     */
    readonly statusCode?: string;
    /**
     * The total count of Scaling Activity query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of scaling activities
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     securityGroupName: "acc-test-security-group",
 *     vpcId: fooVpc.id,
 * });
 * const fooImages = volcengine.ecs.Images({
 *     osType: "Linux",
 *     visibility: "public",
 *     instanceTypeId: "ecs.g1.large",
 * });
 * const fooKeyPair = new volcengine.ecs.KeyPair("fooKeyPair", {
 *     description: "acc-test-2",
 *     keyPairName: "acc-test-key-pair-name",
 * });
 * const fooLaunchTemplate = new volcengine.ecs.LaunchTemplate("fooLaunchTemplate", {
 *     description: "acc-test-desc",
 *     eipBandwidth: 200,
 *     eipBillingType: "PostPaidByBandwidth",
 *     eipIsp: "BGP",
 *     hostName: "acc-hostname",
 *     imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *     instanceChargeType: "PostPaid",
 *     instanceName: "acc-instance-name",
 *     instanceTypeId: "ecs.g1.large",
 *     keyPairName: fooKeyPair.keyPairName,
 *     launchTemplateName: "acc-test-template",
 *     networkInterfaces: [{
 *         subnetId: fooSubnet.id,
 *         securityGroupIds: [fooSecurityGroup.id],
 *     }],
 *     volumes: [{
 *         volumeType: "ESSD_PL0",
 *         size: 50,
 *         deleteWithInstance: true,
 *     }],
 * });
 * const fooScalingGroup = new volcengine.autoscaling.ScalingGroup("fooScalingGroup", {
 *     scalingGroupName: "acc-test-scaling-group",
 *     subnetIds: [fooSubnet.id],
 *     multiAzPolicy: "BALANCE",
 *     desireInstanceNumber: -1,
 *     minInstanceNumber: 0,
 *     maxInstanceNumber: 10,
 *     instanceTerminatePolicy: "OldestInstance",
 *     defaultCooldown: 10,
 *     launchTemplateId: fooLaunchTemplate.id,
 *     launchTemplateVersion: "Default",
 * });
 * const fooScalingGroupEnabler = new volcengine.autoscaling.ScalingGroupEnabler("fooScalingGroupEnabler", {scalingGroupId: fooScalingGroup.id});
 * const fooInstance: volcengine.ecs.Instance[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooInstance.push(new volcengine.ecs.Instance(`fooInstance-${range.value}`, {
 *         instanceName: `acc-test-ecs-${range.value}`,
 *         description: "acc-test",
 *         hostName: "tf-acc-test",
 *         imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *         instanceType: "ecs.g1.large",
 *         password: "93f0cb0614Aab12",
 *         instanceChargeType: "PostPaid",
 *         systemVolumeType: "ESSD_PL0",
 *         systemVolumeSize: 40,
 *         subnetId: fooSubnet.id,
 *         securityGroupIds: [fooSecurityGroup.id],
 *     }));
 * }
 * const fooScalingInstanceAttachment: volcengine.autoscaling.ScalingInstanceAttachment[] = [];
 * fooInstance.length.apply(rangeBody => {
 *     for (const range = {value: 0}; range.value < rangeBody; range.value++) {
 *         fooScalingInstanceAttachment.push(new volcengine.autoscaling.ScalingInstanceAttachment(`fooScalingInstanceAttachment-${range.value}`, {
 *             instanceId: fooInstance[range.value].id,
 *             scalingGroupId: fooScalingGroup.id,
 *             entrusted: true,
 *         }, {
 *         dependsOn: [fooScalingGroupEnabler],
 *     }));
 *     }
 * });
 * const fooScalingActivities = volcengine.autoscaling.ScalingActivitiesOutput({
 *     scalingGroupId: fooScalingGroup.id,
 * });
 * ```
 */
export function scalingActivitiesOutput(args: ScalingActivitiesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ScalingActivitiesResult> {
    return pulumi.output(args).apply((a: any) => scalingActivities(a, opts))
}

/**
 * A collection of arguments for invoking ScalingActivities.
 */
export interface ScalingActivitiesOutputArgs {
    /**
     * An end time to start a Scaling Activity.
     */
    endTime?: pulumi.Input<string>;
    /**
     * A list of Scaling Activity IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * A Id of Scaling Group.
     */
    scalingGroupId: pulumi.Input<string>;
    /**
     * A start time to start a Scaling Activity.
     */
    startTime?: pulumi.Input<string>;
    /**
     * A status code of Scaling Activity. Valid values: Init, Running, Success, PartialSuccess, Error, Rejected, Exception.
     */
    statusCode?: pulumi.Input<string>;
}
