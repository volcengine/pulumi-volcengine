// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of cen bandwidth packages
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooBandwidthPackage: volcengine.cen.BandwidthPackage[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     fooBandwidthPackage.push(new volcengine.cen.BandwidthPackage(`fooBandwidthPackage-${range.value}`, {
 *         localGeographicRegionSetId: "China",
 *         peerGeographicRegionSetId: "China",
 *         bandwidth: 2,
 *         cenBandwidthPackageName: `acc-test-cen-bp-${range.value}`,
 *         description: "acc-test",
 *         billingType: "PrePaid",
 *         periodUnit: "Month",
 *         period: 1,
 *         projectName: "default",
 *         tags: [{
 *             key: "k1",
 *             value: "v1",
 *         }],
 *     }));
 * }
 * const fooBandwidthPackages = volcengine.cen.getBandwidthPackagesOutput({
 *     ids: fooBandwidthPackage.map(__item => __item.id),
 * });
 * ```
 */
export function getBandwidthPackages(args?: GetBandwidthPackagesArgs, opts?: pulumi.InvokeOptions): Promise<GetBandwidthPackagesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:cen/getBandwidthPackages:getBandwidthPackages", {
        "cenBandwidthPackageNames": args.cenBandwidthPackageNames,
        "cenId": args.cenId,
        "ids": args.ids,
        "localGeographicRegionSetId": args.localGeographicRegionSetId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "peerGeographicRegionSetId": args.peerGeographicRegionSetId,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking getBandwidthPackages.
 */
export interface GetBandwidthPackagesArgs {
    /**
     * A list of cen bandwidth package names.
     */
    cenBandwidthPackageNames?: string[];
    /**
     * A cen id.
     */
    cenId?: string;
    /**
     * A list of cen bandwidth package IDs.
     */
    ids?: string[];
    /**
     * A local geographic region set id.
     */
    localGeographicRegionSetId?: string;
    /**
     * A Name Regex of cen bandwidth package.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * A peer geographic region set id.
     */
    peerGeographicRegionSetId?: string;
    /**
     * Tags.
     */
    tags?: inputs.cen.GetBandwidthPackagesTag[];
}

/**
 * A collection of values returned by getBandwidthPackages.
 */
export interface GetBandwidthPackagesResult {
    /**
     * The collection of cen bandwidth package query.
     */
    readonly bandwidthPackages: outputs.cen.GetBandwidthPackagesBandwidthPackage[];
    readonly cenBandwidthPackageNames?: string[];
    readonly cenId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The local geographic region set id of the cen bandwidth package.
     */
    readonly localGeographicRegionSetId?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The peer geographic region set id of the cen bandwidth package.
     */
    readonly peerGeographicRegionSetId?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.cen.GetBandwidthPackagesTag[];
    /**
     * The total count of cen bandwidth package query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of cen bandwidth packages
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooBandwidthPackage: volcengine.cen.BandwidthPackage[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     fooBandwidthPackage.push(new volcengine.cen.BandwidthPackage(`fooBandwidthPackage-${range.value}`, {
 *         localGeographicRegionSetId: "China",
 *         peerGeographicRegionSetId: "China",
 *         bandwidth: 2,
 *         cenBandwidthPackageName: `acc-test-cen-bp-${range.value}`,
 *         description: "acc-test",
 *         billingType: "PrePaid",
 *         periodUnit: "Month",
 *         period: 1,
 *         projectName: "default",
 *         tags: [{
 *             key: "k1",
 *             value: "v1",
 *         }],
 *     }));
 * }
 * const fooBandwidthPackages = volcengine.cen.getBandwidthPackagesOutput({
 *     ids: fooBandwidthPackage.map(__item => __item.id),
 * });
 * ```
 */
export function getBandwidthPackagesOutput(args?: GetBandwidthPackagesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBandwidthPackagesResult> {
    return pulumi.output(args).apply((a: any) => getBandwidthPackages(a, opts))
}

/**
 * A collection of arguments for invoking getBandwidthPackages.
 */
export interface GetBandwidthPackagesOutputArgs {
    /**
     * A list of cen bandwidth package names.
     */
    cenBandwidthPackageNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A cen id.
     */
    cenId?: pulumi.Input<string>;
    /**
     * A list of cen bandwidth package IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A local geographic region set id.
     */
    localGeographicRegionSetId?: pulumi.Input<string>;
    /**
     * A Name Regex of cen bandwidth package.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * A peer geographic region set id.
     */
    peerGeographicRegionSetId?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.cen.GetBandwidthPackagesTagArgs>[]>;
}
