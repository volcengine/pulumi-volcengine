// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cen route entry
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.cen.RouteEntry("foo", {
 *     cenId: "cen-12ar8uclj68sg17q7y20v9gil",
 *     destinationCidrBlock: "192.168.0.0/24",
 *     instanceId: "vpc-im67wjcikxkw8gbssx8ufpj8",
 *     instanceRegionId: "cn-beijing",
 *     instanceType: "VPC",
 * });
 * const foo1 = new volcengine.cen.RouteEntry("foo1", {
 *     cenId: "cen-12ar8uclj68sg17q7y20v9gil",
 *     destinationCidrBlock: "192.168.17.0/24",
 *     instanceId: "vpc-im67wjcikxkw8gbssx8ufpj8",
 *     instanceRegionId: "cn-beijing",
 *     instanceType: "VPC",
 * });
 * ```
 *
 * ## Import
 *
 * CenRouteEntry can be imported using the CenId:DestinationCidrBlock:InstanceId:InstanceType:InstanceRegionId, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:cen/routeEntry:RouteEntry default cen-2nim00ybaylts7trquyzt****:100.XX.XX.0/24:vpc-vtbnbb04qw3k2hgi12cv****:VPC:cn-beijing
 * ```
 */
export class RouteEntry extends pulumi.CustomResource {
    /**
     * Get an existing RouteEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteEntryState, opts?: pulumi.CustomResourceOptions): RouteEntry {
        return new RouteEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cen/routeEntry:RouteEntry';

    /**
     * Returns true if the given object is an instance of RouteEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteEntry.__pulumiType;
    }

    /**
     * The AS path of the cen route entry.
     */
    public /*out*/ readonly asPaths!: pulumi.Output<string[]>;
    /**
     * The cen ID of the cen route entry.
     */
    public readonly cenId!: pulumi.Output<string>;
    /**
     * The destination cidr block of the cen route entry.
     */
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    /**
     * The instance id of the next hop of the cen route entry.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * The instance region id of the next hop of the cen route entry.
     */
    public readonly instanceRegionId!: pulumi.Output<string>;
    /**
     * The instance type of the next hop of the cen route entry.
     */
    public readonly instanceType!: pulumi.Output<string | undefined>;
    /**
     * The publish status of the cen route entry.
     */
    public /*out*/ readonly publishStatus!: pulumi.Output<string>;
    /**
     * The status of the cen route entry.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a RouteEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteEntryArgs | RouteEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteEntryState | undefined;
            resourceInputs["asPaths"] = state ? state.asPaths : undefined;
            resourceInputs["cenId"] = state ? state.cenId : undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["instanceRegionId"] = state ? state.instanceRegionId : undefined;
            resourceInputs["instanceType"] = state ? state.instanceType : undefined;
            resourceInputs["publishStatus"] = state ? state.publishStatus : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as RouteEntryArgs | undefined;
            if ((!args || args.cenId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cenId'");
            }
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            if ((!args || args.instanceRegionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceRegionId'");
            }
            resourceInputs["cenId"] = args ? args.cenId : undefined;
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["instanceRegionId"] = args ? args.instanceRegionId : undefined;
            resourceInputs["instanceType"] = args ? args.instanceType : undefined;
            resourceInputs["asPaths"] = undefined /*out*/;
            resourceInputs["publishStatus"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteEntry resources.
 */
export interface RouteEntryState {
    /**
     * The AS path of the cen route entry.
     */
    asPaths?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The cen ID of the cen route entry.
     */
    cenId?: pulumi.Input<string>;
    /**
     * The destination cidr block of the cen route entry.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * The instance id of the next hop of the cen route entry.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The instance region id of the next hop of the cen route entry.
     */
    instanceRegionId?: pulumi.Input<string>;
    /**
     * The instance type of the next hop of the cen route entry.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The publish status of the cen route entry.
     */
    publishStatus?: pulumi.Input<string>;
    /**
     * The status of the cen route entry.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteEntry resource.
 */
export interface RouteEntryArgs {
    /**
     * The cen ID of the cen route entry.
     */
    cenId: pulumi.Input<string>;
    /**
     * The destination cidr block of the cen route entry.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * The instance id of the next hop of the cen route entry.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The instance region id of the next hop of the cen route entry.
     */
    instanceRegionId: pulumi.Input<string>;
    /**
     * The instance type of the next hop of the cen route entry.
     */
    instanceType?: pulumi.Input<string>;
}
