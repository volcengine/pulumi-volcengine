// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage ecs key pair
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.ecs.KeyPair("foo", {
 *     description: "acc-test",
 *     keyPairName: "acc-test-key-name",
 * });
 * ```
 *
 * ## Import
 *
 * ECS key pair can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:ecs/keyPair:KeyPair default kp-mizl7m1kqccg5smt1bdpijuj
 * ```
 */
export class KeyPair extends pulumi.CustomResource {
    /**
     * Get an existing KeyPair resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KeyPairState, opts?: pulumi.CustomResourceOptions): KeyPair {
        return new KeyPair(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:ecs/keyPair:KeyPair';

    /**
     * Returns true if the given object is an instance of KeyPair.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KeyPair {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeyPair.__pulumiType;
    }

    /**
     * The description of key pair.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The finger print info.
     */
    public /*out*/ readonly fingerPrint!: pulumi.Output<string>;
    /**
     * Target file to save private key. It is recommended that the value not be empty. You only have one chance to download the private key, the volcengine will not save your private key, please keep it safe. In the TF import scenario, this field will not write the private key locally.
     */
    public readonly keyFile!: pulumi.Output<string | undefined>;
    /**
     * The id of key pair.
     */
    public /*out*/ readonly keyPairId!: pulumi.Output<string>;
    /**
     * The name of key pair.
     */
    public readonly keyPairName!: pulumi.Output<string>;
    /**
     * Public key string.
     */
    public readonly publicKey!: pulumi.Output<string | undefined>;

    /**
     * Create a KeyPair resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KeyPairArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KeyPairArgs | KeyPairState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KeyPairState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["fingerPrint"] = state ? state.fingerPrint : undefined;
            resourceInputs["keyFile"] = state ? state.keyFile : undefined;
            resourceInputs["keyPairId"] = state ? state.keyPairId : undefined;
            resourceInputs["keyPairName"] = state ? state.keyPairName : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
        } else {
            const args = argsOrState as KeyPairArgs | undefined;
            if ((!args || args.keyPairName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyPairName'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["keyFile"] = args ? args.keyFile : undefined;
            resourceInputs["keyPairName"] = args ? args.keyPairName : undefined;
            resourceInputs["publicKey"] = args ? args.publicKey : undefined;
            resourceInputs["fingerPrint"] = undefined /*out*/;
            resourceInputs["keyPairId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KeyPair.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KeyPair resources.
 */
export interface KeyPairState {
    /**
     * The description of key pair.
     */
    description?: pulumi.Input<string>;
    /**
     * The finger print info.
     */
    fingerPrint?: pulumi.Input<string>;
    /**
     * Target file to save private key. It is recommended that the value not be empty. You only have one chance to download the private key, the volcengine will not save your private key, please keep it safe. In the TF import scenario, this field will not write the private key locally.
     */
    keyFile?: pulumi.Input<string>;
    /**
     * The id of key pair.
     */
    keyPairId?: pulumi.Input<string>;
    /**
     * The name of key pair.
     */
    keyPairName?: pulumi.Input<string>;
    /**
     * Public key string.
     */
    publicKey?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KeyPair resource.
 */
export interface KeyPairArgs {
    /**
     * The description of key pair.
     */
    description?: pulumi.Input<string>;
    /**
     * Target file to save private key. It is recommended that the value not be empty. You only have one chance to download the private key, the volcengine will not save your private key, please keep it safe. In the TF import scenario, this field will not write the private key locally.
     */
    keyFile?: pulumi.Input<string>;
    /**
     * The name of key pair.
     */
    keyPairName: pulumi.Input<string>;
    /**
     * Public key string.
     */
    publicKey?: pulumi.Input<string>;
}
