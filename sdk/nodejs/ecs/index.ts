// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AvailableResourcesArgs, AvailableResourcesResult, AvailableResourcesOutputArgs } from "./availableResources";
export const availableResources: typeof import("./availableResources").availableResources = null as any;
export const availableResourcesOutput: typeof import("./availableResources").availableResourcesOutput = null as any;
utilities.lazyLoad(exports, ["availableResources","availableResourcesOutput"], () => require("./availableResources"));

export { CommandArgs, CommandState } from "./command";
export type Command = import("./command").Command;
export const Command: typeof import("./command").Command = null as any;
utilities.lazyLoad(exports, ["Command"], () => require("./command"));

export { CommandsArgs, CommandsResult, CommandsOutputArgs } from "./commands";
export const commands: typeof import("./commands").commands = null as any;
export const commandsOutput: typeof import("./commands").commandsOutput = null as any;
utilities.lazyLoad(exports, ["commands","commandsOutput"], () => require("./commands"));

export { DeploymentSetArgs, DeploymentSetState } from "./deploymentSet";
export type DeploymentSet = import("./deploymentSet").DeploymentSet;
export const DeploymentSet: typeof import("./deploymentSet").DeploymentSet = null as any;
utilities.lazyLoad(exports, ["DeploymentSet"], () => require("./deploymentSet"));

export { DeploymentSetAssociateArgs, DeploymentSetAssociateState } from "./deploymentSetAssociate";
export type DeploymentSetAssociate = import("./deploymentSetAssociate").DeploymentSetAssociate;
export const DeploymentSetAssociate: typeof import("./deploymentSetAssociate").DeploymentSetAssociate = null as any;
utilities.lazyLoad(exports, ["DeploymentSetAssociate"], () => require("./deploymentSetAssociate"));

export { DeploymentSetsArgs, DeploymentSetsResult, DeploymentSetsOutputArgs } from "./deploymentSets";
export const deploymentSets: typeof import("./deploymentSets").deploymentSets = null as any;
export const deploymentSetsOutput: typeof import("./deploymentSets").deploymentSetsOutput = null as any;
utilities.lazyLoad(exports, ["deploymentSets","deploymentSetsOutput"], () => require("./deploymentSets"));

export { GetAvailableResourcesArgs, GetAvailableResourcesResult, GetAvailableResourcesOutputArgs } from "./getAvailableResources";
export const getAvailableResources: typeof import("./getAvailableResources").getAvailableResources = null as any;
export const getAvailableResourcesOutput: typeof import("./getAvailableResources").getAvailableResourcesOutput = null as any;
utilities.lazyLoad(exports, ["getAvailableResources","getAvailableResourcesOutput"], () => require("./getAvailableResources"));

export { GetCommandsArgs, GetCommandsResult, GetCommandsOutputArgs } from "./getCommands";
export const getCommands: typeof import("./getCommands").getCommands = null as any;
export const getCommandsOutput: typeof import("./getCommands").getCommandsOutput = null as any;
utilities.lazyLoad(exports, ["getCommands","getCommandsOutput"], () => require("./getCommands"));

export { GetDeploymentSetsArgs, GetDeploymentSetsResult, GetDeploymentSetsOutputArgs } from "./getDeploymentSets";
export const getDeploymentSets: typeof import("./getDeploymentSets").getDeploymentSets = null as any;
export const getDeploymentSetsOutput: typeof import("./getDeploymentSets").getDeploymentSetsOutput = null as any;
utilities.lazyLoad(exports, ["getDeploymentSets","getDeploymentSetsOutput"], () => require("./getDeploymentSets"));

export { GetHpcClustersArgs, GetHpcClustersResult, GetHpcClustersOutputArgs } from "./getHpcClusters";
export const getHpcClusters: typeof import("./getHpcClusters").getHpcClusters = null as any;
export const getHpcClustersOutput: typeof import("./getHpcClusters").getHpcClustersOutput = null as any;
utilities.lazyLoad(exports, ["getHpcClusters","getHpcClustersOutput"], () => require("./getHpcClusters"));

export { GetImageSharePermissionsArgs, GetImageSharePermissionsResult, GetImageSharePermissionsOutputArgs } from "./getImageSharePermissions";
export const getImageSharePermissions: typeof import("./getImageSharePermissions").getImageSharePermissions = null as any;
export const getImageSharePermissionsOutput: typeof import("./getImageSharePermissions").getImageSharePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getImageSharePermissions","getImageSharePermissionsOutput"], () => require("./getImageSharePermissions"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetInstanceTypesArgs, GetInstanceTypesResult, GetInstanceTypesOutputArgs } from "./getInstanceTypes";
export const getInstanceTypes: typeof import("./getInstanceTypes").getInstanceTypes = null as any;
export const getInstanceTypesOutput: typeof import("./getInstanceTypes").getInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTypes","getInstanceTypesOutput"], () => require("./getInstanceTypes"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetInvocationResultsArgs, GetInvocationResultsResult, GetInvocationResultsOutputArgs } from "./getInvocationResults";
export const getInvocationResults: typeof import("./getInvocationResults").getInvocationResults = null as any;
export const getInvocationResultsOutput: typeof import("./getInvocationResults").getInvocationResultsOutput = null as any;
utilities.lazyLoad(exports, ["getInvocationResults","getInvocationResultsOutput"], () => require("./getInvocationResults"));

export { GetInvocationsArgs, GetInvocationsResult, GetInvocationsOutputArgs } from "./getInvocations";
export const getInvocations: typeof import("./getInvocations").getInvocations = null as any;
export const getInvocationsOutput: typeof import("./getInvocations").getInvocationsOutput = null as any;
utilities.lazyLoad(exports, ["getInvocations","getInvocationsOutput"], () => require("./getInvocations"));

export { GetKeyPairsArgs, GetKeyPairsResult, GetKeyPairsOutputArgs } from "./getKeyPairs";
export const getKeyPairs: typeof import("./getKeyPairs").getKeyPairs = null as any;
export const getKeyPairsOutput: typeof import("./getKeyPairs").getKeyPairsOutput = null as any;
utilities.lazyLoad(exports, ["getKeyPairs","getKeyPairsOutput"], () => require("./getKeyPairs"));

export { GetLaunchTemplatesArgs, GetLaunchTemplatesResult, GetLaunchTemplatesOutputArgs } from "./getLaunchTemplates";
export const getLaunchTemplates: typeof import("./getLaunchTemplates").getLaunchTemplates = null as any;
export const getLaunchTemplatesOutput: typeof import("./getLaunchTemplates").getLaunchTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getLaunchTemplates","getLaunchTemplatesOutput"], () => require("./getLaunchTemplates"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { HpcClusterArgs, HpcClusterState } from "./hpcCluster";
export type HpcCluster = import("./hpcCluster").HpcCluster;
export const HpcCluster: typeof import("./hpcCluster").HpcCluster = null as any;
utilities.lazyLoad(exports, ["HpcCluster"], () => require("./hpcCluster"));

export { HpcClustersArgs, HpcClustersResult, HpcClustersOutputArgs } from "./hpcClusters";
export const hpcClusters: typeof import("./hpcClusters").hpcClusters = null as any;
export const hpcClustersOutput: typeof import("./hpcClusters").hpcClustersOutput = null as any;
utilities.lazyLoad(exports, ["hpcClusters","hpcClustersOutput"], () => require("./hpcClusters"));

export { IamRoleAttachmentArgs, IamRoleAttachmentState } from "./iamRoleAttachment";
export type IamRoleAttachment = import("./iamRoleAttachment").IamRoleAttachment;
export const IamRoleAttachment: typeof import("./iamRoleAttachment").IamRoleAttachment = null as any;
utilities.lazyLoad(exports, ["IamRoleAttachment"], () => require("./iamRoleAttachment"));

export { ImageArgs, ImageState } from "./image";
export type Image = import("./image").Image;
export const Image: typeof import("./image").Image = null as any;
utilities.lazyLoad(exports, ["Image"], () => require("./image"));

export { ImageImportArgs, ImageImportState } from "./imageImport";
export type ImageImport = import("./imageImport").ImageImport;
export const ImageImport: typeof import("./imageImport").ImageImport = null as any;
utilities.lazyLoad(exports, ["ImageImport"], () => require("./imageImport"));

export { ImageSharePermissionArgs, ImageSharePermissionState } from "./imageSharePermission";
export type ImageSharePermission = import("./imageSharePermission").ImageSharePermission;
export const ImageSharePermission: typeof import("./imageSharePermission").ImageSharePermission = null as any;
utilities.lazyLoad(exports, ["ImageSharePermission"], () => require("./imageSharePermission"));

export { ImageSharePermissionsArgs, ImageSharePermissionsResult, ImageSharePermissionsOutputArgs } from "./imageSharePermissions";
export const imageSharePermissions: typeof import("./imageSharePermissions").imageSharePermissions = null as any;
export const imageSharePermissionsOutput: typeof import("./imageSharePermissions").imageSharePermissionsOutput = null as any;
utilities.lazyLoad(exports, ["imageSharePermissions","imageSharePermissionsOutput"], () => require("./imageSharePermissions"));

export { ImagesArgs, ImagesResult, ImagesOutputArgs } from "./images";
export const images: typeof import("./images").images = null as any;
export const imagesOutput: typeof import("./images").imagesOutput = null as any;
utilities.lazyLoad(exports, ["images","imagesOutput"], () => require("./images"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceTypesArgs, InstanceTypesResult, InstanceTypesOutputArgs } from "./instanceTypes";
export const instanceTypes: typeof import("./instanceTypes").instanceTypes = null as any;
export const instanceTypesOutput: typeof import("./instanceTypes").instanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["instanceTypes","instanceTypesOutput"], () => require("./instanceTypes"));

export { InstancesArgs, InstancesResult, InstancesOutputArgs } from "./instances";
export const instances: typeof import("./instances").instances = null as any;
export const instancesOutput: typeof import("./instances").instancesOutput = null as any;
utilities.lazyLoad(exports, ["instances","instancesOutput"], () => require("./instances"));

export { InvocationArgs, InvocationState } from "./invocation";
export type Invocation = import("./invocation").Invocation;
export const Invocation: typeof import("./invocation").Invocation = null as any;
utilities.lazyLoad(exports, ["Invocation"], () => require("./invocation"));

export { InvocationResultsArgs, InvocationResultsResult, InvocationResultsOutputArgs } from "./invocationResults";
export const invocationResults: typeof import("./invocationResults").invocationResults = null as any;
export const invocationResultsOutput: typeof import("./invocationResults").invocationResultsOutput = null as any;
utilities.lazyLoad(exports, ["invocationResults","invocationResultsOutput"], () => require("./invocationResults"));

export { InvocationsArgs, InvocationsResult, InvocationsOutputArgs } from "./invocations";
export const invocations: typeof import("./invocations").invocations = null as any;
export const invocationsOutput: typeof import("./invocations").invocationsOutput = null as any;
utilities.lazyLoad(exports, ["invocations","invocationsOutput"], () => require("./invocations"));

export { KeyPairArgs, KeyPairState } from "./keyPair";
export type KeyPair = import("./keyPair").KeyPair;
export const KeyPair: typeof import("./keyPair").KeyPair = null as any;
utilities.lazyLoad(exports, ["KeyPair"], () => require("./keyPair"));

export { KeyPairAssociateArgs, KeyPairAssociateState } from "./keyPairAssociate";
export type KeyPairAssociate = import("./keyPairAssociate").KeyPairAssociate;
export const KeyPairAssociate: typeof import("./keyPairAssociate").KeyPairAssociate = null as any;
utilities.lazyLoad(exports, ["KeyPairAssociate"], () => require("./keyPairAssociate"));

export { KeyPairsArgs, KeyPairsResult, KeyPairsOutputArgs } from "./keyPairs";
export const keyPairs: typeof import("./keyPairs").keyPairs = null as any;
export const keyPairsOutput: typeof import("./keyPairs").keyPairsOutput = null as any;
utilities.lazyLoad(exports, ["keyPairs","keyPairsOutput"], () => require("./keyPairs"));

export { LaunchTemplateArgs, LaunchTemplateState } from "./launchTemplate";
export type LaunchTemplate = import("./launchTemplate").LaunchTemplate;
export const LaunchTemplate: typeof import("./launchTemplate").LaunchTemplate = null as any;
utilities.lazyLoad(exports, ["LaunchTemplate"], () => require("./launchTemplate"));

export { LaunchTemplatesArgs, LaunchTemplatesResult, LaunchTemplatesOutputArgs } from "./launchTemplates";
export const launchTemplates: typeof import("./launchTemplates").launchTemplates = null as any;
export const launchTemplatesOutput: typeof import("./launchTemplates").launchTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["launchTemplates","launchTemplatesOutput"], () => require("./launchTemplates"));

export { RegionsArgs, RegionsResult, RegionsOutputArgs } from "./regions";
export const regions: typeof import("./regions").regions = null as any;
export const regionsOutput: typeof import("./regions").regionsOutput = null as any;
utilities.lazyLoad(exports, ["regions","regionsOutput"], () => require("./regions"));

export { StateArgs, StateState } from "./state";
export type State = import("./state").State;
export const State: typeof import("./state").State = null as any;
utilities.lazyLoad(exports, ["State"], () => require("./state"));

export { ZonesArgs, ZonesResult, ZonesOutputArgs } from "./zones";
export const zones: typeof import("./zones").zones = null as any;
export const zonesOutput: typeof import("./zones").zonesOutput = null as any;
utilities.lazyLoad(exports, ["zones","zonesOutput"], () => require("./zones"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:ecs/command:Command":
                return new Command(name, <any>undefined, { urn })
            case "volcengine:ecs/deploymentSet:DeploymentSet":
                return new DeploymentSet(name, <any>undefined, { urn })
            case "volcengine:ecs/deploymentSetAssociate:DeploymentSetAssociate":
                return new DeploymentSetAssociate(name, <any>undefined, { urn })
            case "volcengine:ecs/hpcCluster:HpcCluster":
                return new HpcCluster(name, <any>undefined, { urn })
            case "volcengine:ecs/iamRoleAttachment:IamRoleAttachment":
                return new IamRoleAttachment(name, <any>undefined, { urn })
            case "volcengine:ecs/image:Image":
                return new Image(name, <any>undefined, { urn })
            case "volcengine:ecs/imageImport:ImageImport":
                return new ImageImport(name, <any>undefined, { urn })
            case "volcengine:ecs/imageSharePermission:ImageSharePermission":
                return new ImageSharePermission(name, <any>undefined, { urn })
            case "volcengine:ecs/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "volcengine:ecs/invocation:Invocation":
                return new Invocation(name, <any>undefined, { urn })
            case "volcengine:ecs/keyPair:KeyPair":
                return new KeyPair(name, <any>undefined, { urn })
            case "volcengine:ecs/keyPairAssociate:KeyPairAssociate":
                return new KeyPairAssociate(name, <any>undefined, { urn })
            case "volcengine:ecs/launchTemplate:LaunchTemplate":
                return new LaunchTemplate(name, <any>undefined, { urn })
            case "volcengine:ecs/state:State":
                return new State(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "ecs/command", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/deploymentSet", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/deploymentSetAssociate", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/hpcCluster", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/iamRoleAttachment", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/image", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/imageImport", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/imageSharePermission", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/instance", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/invocation", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/keyPair", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/keyPairAssociate", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/launchTemplate", _module)
pulumi.runtime.registerResourceModule("volcengine", "ecs/state", _module)
