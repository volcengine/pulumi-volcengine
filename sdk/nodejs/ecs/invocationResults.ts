// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of ecs invocation results
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.ecs.InvocationResults({
 *     invocationId: "ivk-ych9y4vujvl8j01c****",
 *     invocationResultStatuses: ["Success"],
 * });
 * ```
 */
export function invocationResults(args: InvocationResultsArgs, opts?: pulumi.InvokeOptions): Promise<InvocationResultsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:ecs/invocationResults:InvocationResults", {
        "commandId": args.commandId,
        "instanceId": args.instanceId,
        "invocationId": args.invocationId,
        "invocationResultStatuses": args.invocationResultStatuses,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking InvocationResults.
 */
export interface InvocationResultsArgs {
    /**
     * The id of ecs command.
     */
    commandId?: string;
    /**
     * The id of ecs instance.
     */
    instanceId?: string;
    /**
     * The id of ecs invocation.
     */
    invocationId: string;
    /**
     * The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
     */
    invocationResultStatuses?: string[];
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
}

/**
 * A collection of values returned by InvocationResults.
 */
export interface InvocationResultsResult {
    /**
     * The id of the ecs command.
     */
    readonly commandId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the ecs instance.
     */
    readonly instanceId?: string;
    /**
     * The id of the ecs invocation.
     */
    readonly invocationId: string;
    /**
     * The status of ecs invocation in a single instance.
     */
    readonly invocationResultStatuses?: string[];
    /**
     * The collection of query.
     */
    readonly invocationResults: outputs.ecs.InvocationResultsInvocationResult[];
    readonly outputFile?: string;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of ecs invocation results
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.ecs.InvocationResults({
 *     invocationId: "ivk-ych9y4vujvl8j01c****",
 *     invocationResultStatuses: ["Success"],
 * });
 * ```
 */
export function invocationResultsOutput(args: InvocationResultsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<InvocationResultsResult> {
    return pulumi.output(args).apply((a: any) => invocationResults(a, opts))
}

/**
 * A collection of arguments for invoking InvocationResults.
 */
export interface InvocationResultsOutputArgs {
    /**
     * The id of ecs command.
     */
    commandId?: pulumi.Input<string>;
    /**
     * The id of ecs instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The id of ecs invocation.
     */
    invocationId: pulumi.Input<string>;
    /**
     * The list of status of ecs invocation in a single instance. Valid values: `Pending`, `Running`, `Success`, `Failed`, `Timeout`.
     */
    invocationResultStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
}
