// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage ecs instance state
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     securityGroupName: "acc-test-security-group",
 *     vpcId: fooVpc.id,
 * });
 * const fooImages = volcengine.ecs.Images({
 *     osType: "Linux",
 *     visibility: "public",
 *     instanceTypeId: "ecs.g1.large",
 * });
 * const fooInstance = new volcengine.ecs.Instance("fooInstance", {
 *     instanceName: "acc-test-ecs",
 *     imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *     instanceType: "ecs.g1.large",
 *     password: "93f0cb0614Aab12",
 *     instanceChargeType: "PostPaid",
 *     systemVolumeType: "ESSD_PL0",
 *     systemVolumeSize: 40,
 *     subnetId: fooSubnet.id,
 *     securityGroupIds: [fooSecurityGroup.id],
 * });
 * const fooState = new volcengine.ecs.State("fooState", {
 *     instanceId: fooInstance.id,
 *     action: "Stop",
 *     stoppedMode: "KeepCharging",
 * });
 * ```
 *
 * ## Import
 *
 * State Instance can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:ecs/state:State default state:i-mizl7m1kqccg5smt1bdpijuj
 * ```
 */
export class State extends pulumi.CustomResource {
    /**
     * Get an existing State resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StateState, opts?: pulumi.CustomResourceOptions): State {
        return new State(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:ecs/state:State';

    /**
     * Returns true if the given object is an instance of State.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is State {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === State.__pulumiType;
    }

    /**
     * Start or Stop of Instance Action, the value can be `Start`, `Stop` or `ForceStop`.
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * Id of Instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Status of Instance.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Stop Mode of Instance, the value can be `KeepCharging` or `StopCharging`, default `KeepCharging`.
     */
    public readonly stoppedMode!: pulumi.Output<string | undefined>;

    /**
     * Create a State resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StateArgs | StateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StateState | undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stoppedMode"] = state ? state.stoppedMode : undefined;
        } else {
            const args = argsOrState as StateArgs | undefined;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["stoppedMode"] = args ? args.stoppedMode : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(State.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering State resources.
 */
export interface StateState {
    /**
     * Start or Stop of Instance Action, the value can be `Start`, `Stop` or `ForceStop`.
     */
    action?: pulumi.Input<string>;
    /**
     * Id of Instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Status of Instance.
     */
    status?: pulumi.Input<string>;
    /**
     * Stop Mode of Instance, the value can be `KeepCharging` or `StopCharging`, default `KeepCharging`.
     */
    stoppedMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a State resource.
 */
export interface StateArgs {
    /**
     * Start or Stop of Instance Action, the value can be `Start`, `Stop` or `ForceStop`.
     */
    action: pulumi.Input<string>;
    /**
     * Id of Instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * Stop Mode of Instance, the value can be `KeepCharging` or `StopCharging`, default `KeepCharging`.
     */
    stoppedMode?: pulumi.Input<string>;
}
