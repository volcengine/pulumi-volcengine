// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage ecs invocation
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.ecs.Invocation("foo", {
 *     commandId: "cmd-ychkepkhtim0tr3b****",
 *     frequency: "5m",
 *     instanceIds: ["i-ychmz92487l8j00o****"],
 *     invocationDescription: "tf",
 *     invocationName: "tf-test",
 *     launchTime: "2023-06-20T09:48:00Z",
 *     recurrenceEndTime: "2023-06-20T09:59:00Z",
 *     repeatMode: "Rate",
 *     timeout: 90,
 *     username: "root",
 *     workingDir: "/home",
 * });
 * ```
 *
 * ## Import
 *
 * EcsInvocation can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:ecs/invocation:Invocation default ivk-ychnxnm45dl8j0mm****
 * ```
 */
export class Invocation extends pulumi.CustomResource {
    /**
     * Get an existing Invocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: InvocationState, opts?: pulumi.CustomResourceOptions): Invocation {
        return new Invocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:ecs/invocation:Invocation';

    /**
     * Returns true if the given object is an instance of Invocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Invocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Invocation.__pulumiType;
    }

    /**
     * The command id of the ecs invocation.
     */
    public readonly commandId!: pulumi.Output<string>;
    /**
     * The end time of the ecs invocation.
     */
    public /*out*/ readonly endTime!: pulumi.Output<string>;
    /**
     * The frequency of the ecs invocation. This field is valid and required when the value of the repeatMode field is `Rate`.
     */
    public readonly frequency!: pulumi.Output<string | undefined>;
    /**
     * The list of ECS instance IDs.
     */
    public readonly instanceIds!: pulumi.Output<string[]>;
    /**
     * The description of the ecs invocation.
     */
    public readonly invocationDescription!: pulumi.Output<string | undefined>;
    /**
     * The name of the ecs invocation.
     */
    public readonly invocationName!: pulumi.Output<string>;
    /**
     * The status of the ecs invocation.
     */
    public /*out*/ readonly invocationStatus!: pulumi.Output<string>;
    /**
     * The launch time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate` or `Fixed`.
     */
    public readonly launchTime!: pulumi.Output<string | undefined>;
    /**
     * The recurrence end time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate`.
     */
    public readonly recurrenceEndTime!: pulumi.Output<string | undefined>;
    /**
     * The repeat mode of the ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
     */
    public readonly repeatMode!: pulumi.Output<string | undefined>;
    /**
     * The start time of the ecs invocation.
     */
    public /*out*/ readonly startTime!: pulumi.Output<string>;
    /**
     * The timeout of the ecs command. Valid value range: 10-600. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * The username of the ecs command. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * The working directory of the ecs invocation. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
     */
    public readonly workingDir!: pulumi.Output<string>;

    /**
     * Create a Invocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: InvocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: InvocationArgs | InvocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as InvocationState | undefined;
            resourceInputs["commandId"] = state ? state.commandId : undefined;
            resourceInputs["endTime"] = state ? state.endTime : undefined;
            resourceInputs["frequency"] = state ? state.frequency : undefined;
            resourceInputs["instanceIds"] = state ? state.instanceIds : undefined;
            resourceInputs["invocationDescription"] = state ? state.invocationDescription : undefined;
            resourceInputs["invocationName"] = state ? state.invocationName : undefined;
            resourceInputs["invocationStatus"] = state ? state.invocationStatus : undefined;
            resourceInputs["launchTime"] = state ? state.launchTime : undefined;
            resourceInputs["recurrenceEndTime"] = state ? state.recurrenceEndTime : undefined;
            resourceInputs["repeatMode"] = state ? state.repeatMode : undefined;
            resourceInputs["startTime"] = state ? state.startTime : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["workingDir"] = state ? state.workingDir : undefined;
        } else {
            const args = argsOrState as InvocationArgs | undefined;
            if ((!args || args.commandId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandId'");
            }
            if ((!args || args.instanceIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceIds'");
            }
            if ((!args || args.invocationName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'invocationName'");
            }
            if ((!args || args.username === undefined) && !opts.urn) {
                throw new Error("Missing required property 'username'");
            }
            resourceInputs["commandId"] = args ? args.commandId : undefined;
            resourceInputs["frequency"] = args ? args.frequency : undefined;
            resourceInputs["instanceIds"] = args ? args.instanceIds : undefined;
            resourceInputs["invocationDescription"] = args ? args.invocationDescription : undefined;
            resourceInputs["invocationName"] = args ? args.invocationName : undefined;
            resourceInputs["launchTime"] = args ? args.launchTime : undefined;
            resourceInputs["recurrenceEndTime"] = args ? args.recurrenceEndTime : undefined;
            resourceInputs["repeatMode"] = args ? args.repeatMode : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["workingDir"] = args ? args.workingDir : undefined;
            resourceInputs["endTime"] = undefined /*out*/;
            resourceInputs["invocationStatus"] = undefined /*out*/;
            resourceInputs["startTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Invocation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Invocation resources.
 */
export interface InvocationState {
    /**
     * The command id of the ecs invocation.
     */
    commandId?: pulumi.Input<string>;
    /**
     * The end time of the ecs invocation.
     */
    endTime?: pulumi.Input<string>;
    /**
     * The frequency of the ecs invocation. This field is valid and required when the value of the repeatMode field is `Rate`.
     */
    frequency?: pulumi.Input<string>;
    /**
     * The list of ECS instance IDs.
     */
    instanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the ecs invocation.
     */
    invocationDescription?: pulumi.Input<string>;
    /**
     * The name of the ecs invocation.
     */
    invocationName?: pulumi.Input<string>;
    /**
     * The status of the ecs invocation.
     */
    invocationStatus?: pulumi.Input<string>;
    /**
     * The launch time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate` or `Fixed`.
     */
    launchTime?: pulumi.Input<string>;
    /**
     * The recurrence end time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate`.
     */
    recurrenceEndTime?: pulumi.Input<string>;
    /**
     * The repeat mode of the ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
     */
    repeatMode?: pulumi.Input<string>;
    /**
     * The start time of the ecs invocation.
     */
    startTime?: pulumi.Input<string>;
    /**
     * The timeout of the ecs command. Valid value range: 10-600. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The username of the ecs command. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
     */
    username?: pulumi.Input<string>;
    /**
     * The working directory of the ecs invocation. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
     */
    workingDir?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Invocation resource.
 */
export interface InvocationArgs {
    /**
     * The command id of the ecs invocation.
     */
    commandId: pulumi.Input<string>;
    /**
     * The frequency of the ecs invocation. This field is valid and required when the value of the repeatMode field is `Rate`.
     */
    frequency?: pulumi.Input<string>;
    /**
     * The list of ECS instance IDs.
     */
    instanceIds: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The description of the ecs invocation.
     */
    invocationDescription?: pulumi.Input<string>;
    /**
     * The name of the ecs invocation.
     */
    invocationName: pulumi.Input<string>;
    /**
     * The launch time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate` or `Fixed`.
     */
    launchTime?: pulumi.Input<string>;
    /**
     * The recurrence end time of the ecs invocation. RFC3339 format. This field is valid and required when the value of the repeatMode field is `Rate`.
     */
    recurrenceEndTime?: pulumi.Input<string>;
    /**
     * The repeat mode of the ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
     */
    repeatMode?: pulumi.Input<string>;
    /**
     * The timeout of the ecs command. Valid value range: 10-600. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The username of the ecs command. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
     */
    username: pulumi.Input<string>;
    /**
     * The working directory of the ecs invocation. When this field is not specified, use the value of the field with the same name in ecs command as the default value.
     */
    workingDir?: pulumi.Input<string>;
}
