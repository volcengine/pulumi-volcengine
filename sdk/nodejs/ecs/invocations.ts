// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of ecs invocations
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.ecs.Invocations({
 *     invocationId: "ivk-ych9y4vujvl8j01c****",
 *     invocationStatuses: ["Success"],
 * });
 * ```
 */
export function invocations(args?: InvocationsArgs, opts?: pulumi.InvokeOptions): Promise<InvocationsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:ecs/invocations:Invocations", {
        "commandId": args.commandId,
        "commandName": args.commandName,
        "commandType": args.commandType,
        "invocationId": args.invocationId,
        "invocationName": args.invocationName,
        "invocationStatuses": args.invocationStatuses,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "repeatMode": args.repeatMode,
    }, opts);
}

/**
 * A collection of arguments for invoking Invocations.
 */
export interface InvocationsArgs {
    /**
     * The id of ecs command.
     */
    commandId?: string;
    /**
     * The name of ecs command. This field support fuzzy query.
     */
    commandName?: string;
    /**
     * The type of ecs command. Valid values: `Shell`.
     */
    commandType?: string;
    /**
     * The id of ecs invocation.
     */
    invocationId?: string;
    /**
     * The name of ecs invocation. This field support fuzzy query.
     */
    invocationName?: string;
    /**
     * The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
     */
    invocationStatuses?: string[];
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
     */
    repeatMode?: string;
}

/**
 * A collection of values returned by Invocations.
 */
export interface InvocationsResult {
    /**
     * The id of the ecs command.
     */
    readonly commandId?: string;
    /**
     * The name of the ecs command.
     */
    readonly commandName?: string;
    /**
     * The type of the ecs command.
     */
    readonly commandType?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the ecs invocation.
     */
    readonly invocationId?: string;
    /**
     * The name of the ecs invocation.
     */
    readonly invocationName?: string;
    /**
     * The status of the ecs invocation.
     */
    readonly invocationStatuses?: string[];
    /**
     * The collection of query.
     */
    readonly invocations: outputs.ecs.InvocationsInvocation[];
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The repeat mode of the ecs invocation.
     */
    readonly repeatMode?: string;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of ecs invocations
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const default = volcengine.ecs.Invocations({
 *     invocationId: "ivk-ych9y4vujvl8j01c****",
 *     invocationStatuses: ["Success"],
 * });
 * ```
 */
export function invocationsOutput(args?: InvocationsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<InvocationsResult> {
    return pulumi.output(args).apply((a: any) => invocations(a, opts))
}

/**
 * A collection of arguments for invoking Invocations.
 */
export interface InvocationsOutputArgs {
    /**
     * The id of ecs command.
     */
    commandId?: pulumi.Input<string>;
    /**
     * The name of ecs command. This field support fuzzy query.
     */
    commandName?: pulumi.Input<string>;
    /**
     * The type of ecs command. Valid values: `Shell`.
     */
    commandType?: pulumi.Input<string>;
    /**
     * The id of ecs invocation.
     */
    invocationId?: pulumi.Input<string>;
    /**
     * The name of ecs invocation. This field support fuzzy query.
     */
    invocationName?: pulumi.Input<string>;
    /**
     * The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
     */
    invocationStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
     */
    repeatMode?: pulumi.Input<string>;
}
