// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage iam role attachment
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     securityGroupName: "acc-test-security-group",
 *     vpcId: fooVpc.id,
 * });
 * const fooImages = volcengine.ecs.getImages({
 *     osType: "Linux",
 *     visibility: "public",
 *     instanceTypeId: "ecs.g1ie.large",
 * });
 * const fooInstance = new volcengine.ecs.Instance("fooInstance", {
 *     instanceName: "acc-test-ecs",
 *     description: "acc-test",
 *     hostName: "tf-acc-test",
 *     imageId: fooImages.then(fooImages => fooImages.images?.[0]?.imageId),
 *     instanceType: "ecs.g1ie.large",
 *     password: "93f0cb0614Aab12",
 *     instanceChargeType: "PostPaid",
 *     systemVolumeType: "ESSD_PL0",
 *     systemVolumeSize: 40,
 *     dataVolumes: [{
 *         volumeType: "ESSD_PL0",
 *         size: 50,
 *         deleteWithInstance: true,
 *     }],
 *     subnetId: fooSubnet.id,
 *     securityGroupIds: [fooSecurityGroup.id],
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooRole = new volcengine.iam.Role("fooRole", {
 *     roleName: "acc-test-role",
 *     displayName: "acc-test",
 *     description: "acc-test",
 *     trustPolicyDocument: "{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"sts:AssumeRole\"],\"Principal\":{\"Service\":[\"ecs\"]}}]}",
 *     maxSessionDuration: 36000,
 * });
 * const fooIamRoleAttachment = new volcengine.ecs.IamRoleAttachment("fooIamRoleAttachment", {
 *     iamRoleName: fooRole.id,
 *     instanceId: fooInstance.id,
 * });
 * ```
 *
 * ## Import
 *
 * IamRoleAttachment can be imported using the iam_role_name:instance_id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:ecs/iamRoleAttachment:IamRoleAttachment default role_name:instance_id
 * ```
 */
export class IamRoleAttachment extends pulumi.CustomResource {
    /**
     * Get an existing IamRoleAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamRoleAttachmentState, opts?: pulumi.CustomResourceOptions): IamRoleAttachment {
        return new IamRoleAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:ecs/iamRoleAttachment:IamRoleAttachment';

    /**
     * Returns true if the given object is an instance of IamRoleAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamRoleAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamRoleAttachment.__pulumiType;
    }

    /**
     * The name of the iam role.
     */
    public readonly iamRoleName!: pulumi.Output<string>;
    /**
     * The id of the ecs instance.
     */
    public readonly instanceId!: pulumi.Output<string>;

    /**
     * Create a IamRoleAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamRoleAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamRoleAttachmentArgs | IamRoleAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamRoleAttachmentState | undefined;
            resourceInputs["iamRoleName"] = state ? state.iamRoleName : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
        } else {
            const args = argsOrState as IamRoleAttachmentArgs | undefined;
            if ((!args || args.iamRoleName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'iamRoleName'");
            }
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["iamRoleName"] = args ? args.iamRoleName : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamRoleAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamRoleAttachment resources.
 */
export interface IamRoleAttachmentState {
    /**
     * The name of the iam role.
     */
    iamRoleName?: pulumi.Input<string>;
    /**
     * The id of the ecs instance.
     */
    instanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamRoleAttachment resource.
 */
export interface IamRoleAttachmentArgs {
    /**
     * The name of the iam role.
     */
    iamRoleName: pulumi.Input<string>;
    /**
     * The id of the ecs instance.
     */
    instanceId: pulumi.Input<string>;
}
