// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage ecs command
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.ecs.Command("foo", {
 *     commandContent: "IyEvYmluL2Jhc2gKCgplY2hvICJvcGVyYXRpb24gc3VjY2VzcyEi",
 *     description: "tf",
 *     timeout: 100,
 *     username: "root",
 *     workingDir: "/home",
 * });
 * ```
 *
 * ## Import
 *
 * EcsCommand can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:ecs/command:Command default cmd-ychkepkhtim0tr3bcsw1
 * ```
 */
export class Command extends pulumi.CustomResource {
    /**
     * Get an existing Command resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CommandState, opts?: pulumi.CustomResourceOptions): Command {
        return new Command(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:ecs/command:Command';

    /**
     * Returns true if the given object is an instance of Command.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Command {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Command.__pulumiType;
    }

    /**
     * The base64 encoded content of the ecs command.
     */
    public readonly commandContent!: pulumi.Output<string>;
    /**
     * The create time of the ecs command.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the ecs command.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The invocation times of the ecs command. Public commands do not display the invocation times.
     */
    public /*out*/ readonly invocationTimes!: pulumi.Output<number>;
    /**
     * The name of the ecs command.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The timeout of the ecs command. Valid value range: 10-600.
     */
    public readonly timeout!: pulumi.Output<number>;
    /**
     * The update time of the ecs command.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The username of the ecs command.
     */
    public readonly username!: pulumi.Output<string>;
    /**
     * The working directory of the ecs command.
     */
    public readonly workingDir!: pulumi.Output<string>;

    /**
     * Create a Command resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CommandArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CommandArgs | CommandState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CommandState | undefined;
            resourceInputs["commandContent"] = state ? state.commandContent : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["invocationTimes"] = state ? state.invocationTimes : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["timeout"] = state ? state.timeout : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
            resourceInputs["workingDir"] = state ? state.workingDir : undefined;
        } else {
            const args = argsOrState as CommandArgs | undefined;
            if ((!args || args.commandContent === undefined) && !opts.urn) {
                throw new Error("Missing required property 'commandContent'");
            }
            resourceInputs["commandContent"] = args ? args.commandContent : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["timeout"] = args ? args.timeout : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
            resourceInputs["workingDir"] = args ? args.workingDir : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["invocationTimes"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Command.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Command resources.
 */
export interface CommandState {
    /**
     * The base64 encoded content of the ecs command.
     */
    commandContent?: pulumi.Input<string>;
    /**
     * The create time of the ecs command.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the ecs command.
     */
    description?: pulumi.Input<string>;
    /**
     * The invocation times of the ecs command. Public commands do not display the invocation times.
     */
    invocationTimes?: pulumi.Input<number>;
    /**
     * The name of the ecs command.
     */
    name?: pulumi.Input<string>;
    /**
     * The timeout of the ecs command. Valid value range: 10-600.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The update time of the ecs command.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The username of the ecs command.
     */
    username?: pulumi.Input<string>;
    /**
     * The working directory of the ecs command.
     */
    workingDir?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Command resource.
 */
export interface CommandArgs {
    /**
     * The base64 encoded content of the ecs command.
     */
    commandContent: pulumi.Input<string>;
    /**
     * The description of the ecs command.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the ecs command.
     */
    name?: pulumi.Input<string>;
    /**
     * The timeout of the ecs command. Valid value range: 10-600.
     */
    timeout?: pulumi.Input<number>;
    /**
     * The username of the ecs command.
     */
    username?: pulumi.Input<string>;
    /**
     * The working directory of the ecs command.
     */
    workingDir?: pulumi.Input<string>;
}
