// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage image import
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.ecs.ImageImport("foo", {
 *     bootMode: "UEFI",
 *     description: "acc-test",
 *     imageName: "acc-test-image",
 *     platform: "CentOS",
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 *     url: "https://*****_system.qcow2",
 * });
 * ```
 *
 * ## Import
 *
 * ImageImport can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:ecs/imageImport:ImageImport default resource_id
 * ```
 */
export class ImageImport extends pulumi.CustomResource {
    /**
     * Get an existing ImageImport resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ImageImportState, opts?: pulumi.CustomResourceOptions): ImageImport {
        return new ImageImport(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:ecs/imageImport:ImageImport';

    /**
     * Returns true if the given object is an instance of ImageImport.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ImageImport {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ImageImport.__pulumiType;
    }

    /**
     * The architecture of the custom image. Valid values: `amd64`, `arm64`.
     */
    public readonly architecture!: pulumi.Output<string>;
    /**
     * The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
     */
    public readonly bootMode!: pulumi.Output<string>;
    /**
     * The create time of Image.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the custom image.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the custom image.
     */
    public readonly imageName!: pulumi.Output<string>;
    /**
     * Whether the Image support cloud-init.
     */
    public /*out*/ readonly isSupportCloudInit!: pulumi.Output<boolean>;
    /**
     * The license type of the custom image. Valid values: `VolcanoEngine`.
     */
    public readonly licenseType!: pulumi.Output<string>;
    /**
     * The name of Image operating system.
     */
    public /*out*/ readonly osName!: pulumi.Output<string>;
    /**
     * The os type of the custom image. Valid values: `linux`, `Windows`.
     */
    public readonly osType!: pulumi.Output<string>;
    /**
     * The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
     */
    public readonly platform!: pulumi.Output<string>;
    /**
     * The platform version of the custom image.
     */
    public readonly platformVersion!: pulumi.Output<string>;
    /**
     * The project name of the custom image.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The share mode of Image.
     */
    public /*out*/ readonly shareStatus!: pulumi.Output<string>;
    /**
     * The size(GiB) of Image.
     */
    public /*out*/ readonly size!: pulumi.Output<number>;
    /**
     * The status of Image.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.ecs.ImageImportTag[] | undefined>;
    /**
     * The update time of Image.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    public readonly url!: pulumi.Output<string>;
    /**
     * The visibility of Image.
     */
    public /*out*/ readonly visibility!: pulumi.Output<string>;

    /**
     * Create a ImageImport resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ImageImportArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ImageImportArgs | ImageImportState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ImageImportState | undefined;
            resourceInputs["architecture"] = state ? state.architecture : undefined;
            resourceInputs["bootMode"] = state ? state.bootMode : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["imageName"] = state ? state.imageName : undefined;
            resourceInputs["isSupportCloudInit"] = state ? state.isSupportCloudInit : undefined;
            resourceInputs["licenseType"] = state ? state.licenseType : undefined;
            resourceInputs["osName"] = state ? state.osName : undefined;
            resourceInputs["osType"] = state ? state.osType : undefined;
            resourceInputs["platform"] = state ? state.platform : undefined;
            resourceInputs["platformVersion"] = state ? state.platformVersion : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["shareStatus"] = state ? state.shareStatus : undefined;
            resourceInputs["size"] = state ? state.size : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["url"] = state ? state.url : undefined;
            resourceInputs["visibility"] = state ? state.visibility : undefined;
        } else {
            const args = argsOrState as ImageImportArgs | undefined;
            if ((!args || args.imageName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'imageName'");
            }
            if ((!args || args.platform === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platform'");
            }
            if ((!args || args.url === undefined) && !opts.urn) {
                throw new Error("Missing required property 'url'");
            }
            resourceInputs["architecture"] = args ? args.architecture : undefined;
            resourceInputs["bootMode"] = args ? args.bootMode : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["imageName"] = args ? args.imageName : undefined;
            resourceInputs["licenseType"] = args ? args.licenseType : undefined;
            resourceInputs["osType"] = args ? args.osType : undefined;
            resourceInputs["platform"] = args ? args.platform : undefined;
            resourceInputs["platformVersion"] = args ? args.platformVersion : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["url"] = args ? args.url : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["isSupportCloudInit"] = undefined /*out*/;
            resourceInputs["osName"] = undefined /*out*/;
            resourceInputs["shareStatus"] = undefined /*out*/;
            resourceInputs["size"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["visibility"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ImageImport.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ImageImport resources.
 */
export interface ImageImportState {
    /**
     * The architecture of the custom image. Valid values: `amd64`, `arm64`.
     */
    architecture?: pulumi.Input<string>;
    /**
     * The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
     */
    bootMode?: pulumi.Input<string>;
    /**
     * The create time of Image.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the custom image.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the custom image.
     */
    imageName?: pulumi.Input<string>;
    /**
     * Whether the Image support cloud-init.
     */
    isSupportCloudInit?: pulumi.Input<boolean>;
    /**
     * The license type of the custom image. Valid values: `VolcanoEngine`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * The name of Image operating system.
     */
    osName?: pulumi.Input<string>;
    /**
     * The os type of the custom image. Valid values: `linux`, `Windows`.
     */
    osType?: pulumi.Input<string>;
    /**
     * The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
     */
    platform?: pulumi.Input<string>;
    /**
     * The platform version of the custom image.
     */
    platformVersion?: pulumi.Input<string>;
    /**
     * The project name of the custom image.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The share mode of Image.
     */
    shareStatus?: pulumi.Input<string>;
    /**
     * The size(GiB) of Image.
     */
    size?: pulumi.Input<number>;
    /**
     * The status of Image.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.ImageImportTag>[]>;
    /**
     * The update time of Image.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    url?: pulumi.Input<string>;
    /**
     * The visibility of Image.
     */
    visibility?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ImageImport resource.
 */
export interface ImageImportArgs {
    /**
     * The architecture of the custom image. Valid values: `amd64`, `arm64`.
     */
    architecture?: pulumi.Input<string>;
    /**
     * The boot mode of the custom image. Valid values: `BIOS`, `UEFI`.
     */
    bootMode?: pulumi.Input<string>;
    /**
     * The description of the custom image.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the custom image.
     */
    imageName: pulumi.Input<string>;
    /**
     * The license type of the custom image. Valid values: `VolcanoEngine`.
     */
    licenseType?: pulumi.Input<string>;
    /**
     * The os type of the custom image. Valid values: `linux`, `Windows`.
     */
    osType?: pulumi.Input<string>;
    /**
     * The platform of the custom image. Valid values: `CentOS`, `Debian`, `veLinux`, `Windows Server`, `Fedora`, `OpenSUSE`, `Ubuntu`, `Rocky Linux`, `AlmaLinux`.
     */
    platform: pulumi.Input<string>;
    /**
     * The platform version of the custom image.
     */
    platformVersion?: pulumi.Input<string>;
    /**
     * The project name of the custom image.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.ecs.ImageImportTag>[]>;
    /**
     * The url of the custom image in tos bucket.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    url: pulumi.Input<string>;
}
