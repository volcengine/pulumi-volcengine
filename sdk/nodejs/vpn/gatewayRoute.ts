// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vpn gateway route
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vpn.GatewayRoute("foo", {
 *     destinationCidrBlock: "192.168.0.0/20",
 *     nextHopId: "vgc-2d5ww3ww2lwcg58ozfe61ppc3",
 *     vpnGatewayId: "vgw-2c012ea9fm5mo2dx0efxg46qi",
 * });
 * ```
 *
 * ## Import
 *
 * VpnGatewayRoute can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:vpn/gatewayRoute:GatewayRoute default vgr-3tex2c6c0v844c****
 * ```
 */
export class GatewayRoute extends pulumi.CustomResource {
    /**
     * Get an existing GatewayRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayRouteState, opts?: pulumi.CustomResourceOptions): GatewayRoute {
        return new GatewayRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vpn/gatewayRoute:GatewayRoute';

    /**
     * Returns true if the given object is an instance of GatewayRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayRoute.__pulumiType;
    }

    /**
     * The create time of VPN gateway route.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The destination cidr block of the VPN gateway route.
     */
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    /**
     * The next hop id of the VPN gateway route.
     */
    public readonly nextHopId!: pulumi.Output<string>;
    /**
     * The status of the VPN gateway route.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The update time of VPN gateway route.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The ID of the VPN gateway of the VPN gateway route.
     */
    public readonly vpnGatewayId!: pulumi.Output<string>;
    /**
     * The ID of the VPN gateway route.
     */
    public /*out*/ readonly vpnGatewayRouteId!: pulumi.Output<string>;

    /**
     * Create a GatewayRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayRouteArgs | GatewayRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayRouteState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["nextHopId"] = state ? state.nextHopId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
            resourceInputs["vpnGatewayRouteId"] = state ? state.vpnGatewayRouteId : undefined;
        } else {
            const args = argsOrState as GatewayRouteArgs | undefined;
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.nextHopId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHopId'");
            }
            if ((!args || args.vpnGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["nextHopId"] = args ? args.nextHopId : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vpnGatewayRouteId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayRoute resources.
 */
export interface GatewayRouteState {
    /**
     * The create time of VPN gateway route.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The destination cidr block of the VPN gateway route.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * The next hop id of the VPN gateway route.
     */
    nextHopId?: pulumi.Input<string>;
    /**
     * The status of the VPN gateway route.
     */
    status?: pulumi.Input<string>;
    /**
     * The update time of VPN gateway route.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway of the VPN gateway route.
     */
    vpnGatewayId?: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway route.
     */
    vpnGatewayRouteId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayRoute resource.
 */
export interface GatewayRouteArgs {
    /**
     * The destination cidr block of the VPN gateway route.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * The next hop id of the VPN gateway route.
     */
    nextHopId: pulumi.Input<string>;
    /**
     * The ID of the VPN gateway of the VPN gateway route.
     */
    vpnGatewayId: pulumi.Input<string>;
}
