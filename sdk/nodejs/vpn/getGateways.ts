// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of vpn gateways
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooGateway = new volcengine.vpn.Gateway("fooGateway", {
 *     vpcId: fooVpc.id,
 *     subnetId: fooSubnet.id,
 *     bandwidth: 20,
 *     vpnGatewayName: "acc-test",
 *     description: "acc-test",
 *     period: 2,
 *     projectName: "default",
 * });
 * const fooGateways = volcengine.vpn.getGatewaysOutput({
 *     ids: [fooGateway.id],
 * });
 * ```
 */
export function getGateways(args?: GetGatewaysArgs, opts?: pulumi.InvokeOptions): Promise<GetGatewaysResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vpn/getGateways:getGateways", {
        "ids": args.ids,
        "ipAddress": args.ipAddress,
        "ipsecEnabled": args.ipsecEnabled,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "sslEnabled": args.sslEnabled,
        "status": args.status,
        "subnetId": args.subnetId,
        "tags": args.tags,
        "vpcId": args.vpcId,
        "vpnGatewayNames": args.vpnGatewayNames,
    }, opts);
}

/**
 * A collection of arguments for invoking getGateways.
 */
export interface GetGatewaysArgs {
    /**
     * A list of VPN gateway ids.
     */
    ids?: string[];
    /**
     * A IP address of the VPN gateway.
     */
    ipAddress?: string;
    /**
     * Whether IPSec is enabled.
     */
    ipsecEnabled?: boolean;
    /**
     * A Name Regex of VPN gateway.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of the VPN gateway.
     */
    projectName?: string;
    /**
     * Whether ssl is enabled.
     */
    sslEnabled?: boolean;
    /**
     * The status of the VPN gateway.
     */
    status?: string;
    /**
     * A subnet ID of the VPN gateway.
     */
    subnetId?: string;
    /**
     * Tags.
     */
    tags?: inputs.vpn.GetGatewaysTag[];
    /**
     * A VPC ID of the VPN gateway.
     */
    vpcId?: string;
    /**
     * A list of VPN gateway names.
     */
    vpnGatewayNames?: string[];
}

/**
 * A collection of values returned by getGateways.
 */
export interface GetGatewaysResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The IP address of the VPN gateway.
     */
    readonly ipAddress?: string;
    /**
     * Whether ipsec is enabled.
     */
    readonly ipsecEnabled?: boolean;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The name of project.
     */
    readonly projectName?: string;
    /**
     * Whether ssl is enabled.
     */
    readonly sslEnabled?: boolean;
    /**
     * The status of the VPN gateway.
     */
    readonly status?: string;
    readonly subnetId?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.vpn.GetGatewaysTag[];
    /**
     * The total count of VPN gateway query.
     */
    readonly totalCount: number;
    /**
     * The VPC ID of the VPN gateway.
     */
    readonly vpcId?: string;
    readonly vpnGatewayNames?: string[];
    /**
     * The collection of VPN gateway query.
     */
    readonly vpnGateways: outputs.vpn.GetGatewaysVpnGateway[];
}
/**
 * Use this data source to query detailed information of vpn gateways
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooGateway = new volcengine.vpn.Gateway("fooGateway", {
 *     vpcId: fooVpc.id,
 *     subnetId: fooSubnet.id,
 *     bandwidth: 20,
 *     vpnGatewayName: "acc-test",
 *     description: "acc-test",
 *     period: 2,
 *     projectName: "default",
 * });
 * const fooGateways = volcengine.vpn.getGatewaysOutput({
 *     ids: [fooGateway.id],
 * });
 * ```
 */
export function getGatewaysOutput(args?: GetGatewaysOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGatewaysResult> {
    return pulumi.output(args).apply((a: any) => getGateways(a, opts))
}

/**
 * A collection of arguments for invoking getGateways.
 */
export interface GetGatewaysOutputArgs {
    /**
     * A list of VPN gateway ids.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A IP address of the VPN gateway.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * Whether IPSec is enabled.
     */
    ipsecEnabled?: pulumi.Input<boolean>;
    /**
     * A Name Regex of VPN gateway.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of the VPN gateway.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Whether ssl is enabled.
     */
    sslEnabled?: pulumi.Input<boolean>;
    /**
     * The status of the VPN gateway.
     */
    status?: pulumi.Input<string>;
    /**
     * A subnet ID of the VPN gateway.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vpn.GetGatewaysTagArgs>[]>;
    /**
     * A VPC ID of the VPN gateway.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * A list of VPN gateway names.
     */
    vpnGatewayNames?: pulumi.Input<pulumi.Input<string>[]>;
}
