// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage ssl vpn server
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooGateway = new volcengine.vpn.Gateway("fooGateway", {
 *     vpcId: fooVpc.id,
 *     subnetId: fooSubnet.id,
 *     bandwidth: 5,
 *     vpnGatewayName: "acc-test1",
 *     description: "acc-test1",
 *     period: 7,
 *     projectName: "default",
 *     sslEnabled: true,
 *     sslMaxConnections: 5,
 * });
 * const fooSslVpnServer = new volcengine.vpn.SslVpnServer("fooSslVpnServer", {
 *     vpnGatewayId: fooGateway.id,
 *     localSubnets: [fooSubnet.cidrBlock],
 *     clientIpPool: "172.16.2.0/24",
 *     sslVpnServerName: "acc-test-ssl",
 *     description: "acc-test",
 *     protocol: "UDP",
 *     cipher: "AES-128-CBC",
 *     auth: "SHA1",
 *     compress: true,
 * });
 * ```
 *
 * ## Import
 *
 * SSL VPN server can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:vpn/sslVpnServer:SslVpnServer default vss-zm55pqtvk17oq32zd****
 * ```
 */
export class SslVpnServer extends pulumi.CustomResource {
    /**
     * Get an existing SslVpnServer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslVpnServerState, opts?: pulumi.CustomResourceOptions): SslVpnServer {
        return new SslVpnServer(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vpn/sslVpnServer:SslVpnServer';

    /**
     * Returns true if the given object is an instance of SslVpnServer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslVpnServer {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslVpnServer.__pulumiType;
    }

    /**
     * The authentication algorithm of the SSL server.
     * Values:
     * `SHA1` (default)
     * `MD5`
     * `None` (do not use encryption).
     */
    public readonly auth!: pulumi.Output<string | undefined>;
    /**
     * The encryption algorithm of the SSL server.
     * Values:
     * `AES-128-CBC` (default)
     * `AES-192-CBC`
     * `AES-256-CBC`
     * `None` (do not use encryption).
     */
    public readonly cipher!: pulumi.Output<string | undefined>;
    /**
     * SSL client network segment.
     */
    public readonly clientIpPool!: pulumi.Output<string>;
    /**
     * Whether to compress the transmitted data. The default value is false.
     */
    public readonly compress!: pulumi.Output<boolean | undefined>;
    /**
     * The description of the ssl server.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
     */
    public readonly localSubnets!: pulumi.Output<string[]>;
    /**
     * The port of the ssl server. Valid values: 1~65535. Default is 1194. The following ports are not supported: 22, 68, 179, 323, 500, 4500.
     */
    public readonly port!: pulumi.Output<number | undefined>;
    /**
     * The project name of the ssl server.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
     */
    public readonly protocol!: pulumi.Output<string | undefined>;
    /**
     * The id of the ssl vpn server.
     */
    public /*out*/ readonly sslVpnServerId!: pulumi.Output<string>;
    /**
     * The name of the SSL server.
     */
    public readonly sslVpnServerName!: pulumi.Output<string>;
    /**
     * The vpn gateway id.
     */
    public readonly vpnGatewayId!: pulumi.Output<string>;

    /**
     * Create a SslVpnServer resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslVpnServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslVpnServerArgs | SslVpnServerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslVpnServerState | undefined;
            resourceInputs["auth"] = state ? state.auth : undefined;
            resourceInputs["cipher"] = state ? state.cipher : undefined;
            resourceInputs["clientIpPool"] = state ? state.clientIpPool : undefined;
            resourceInputs["compress"] = state ? state.compress : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["localSubnets"] = state ? state.localSubnets : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["sslVpnServerId"] = state ? state.sslVpnServerId : undefined;
            resourceInputs["sslVpnServerName"] = state ? state.sslVpnServerName : undefined;
            resourceInputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        } else {
            const args = argsOrState as SslVpnServerArgs | undefined;
            if ((!args || args.clientIpPool === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clientIpPool'");
            }
            if ((!args || args.localSubnets === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localSubnets'");
            }
            if ((!args || args.vpnGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpnGatewayId'");
            }
            resourceInputs["auth"] = args ? args.auth : undefined;
            resourceInputs["cipher"] = args ? args.cipher : undefined;
            resourceInputs["clientIpPool"] = args ? args.clientIpPool : undefined;
            resourceInputs["compress"] = args ? args.compress : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["localSubnets"] = args ? args.localSubnets : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["sslVpnServerName"] = args ? args.sslVpnServerName : undefined;
            resourceInputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            resourceInputs["sslVpnServerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SslVpnServer.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SslVpnServer resources.
 */
export interface SslVpnServerState {
    /**
     * The authentication algorithm of the SSL server.
     * Values:
     * `SHA1` (default)
     * `MD5`
     * `None` (do not use encryption).
     */
    auth?: pulumi.Input<string>;
    /**
     * The encryption algorithm of the SSL server.
     * Values:
     * `AES-128-CBC` (default)
     * `AES-192-CBC`
     * `AES-256-CBC`
     * `None` (do not use encryption).
     */
    cipher?: pulumi.Input<string>;
    /**
     * SSL client network segment.
     */
    clientIpPool?: pulumi.Input<string>;
    /**
     * Whether to compress the transmitted data. The default value is false.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * The description of the ssl server.
     */
    description?: pulumi.Input<string>;
    /**
     * The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
     */
    localSubnets?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The port of the ssl server. Valid values: 1~65535. Default is 1194. The following ports are not supported: 22, 68, 179, 323, 500, 4500.
     */
    port?: pulumi.Input<number>;
    /**
     * The project name of the ssl server.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The id of the ssl vpn server.
     */
    sslVpnServerId?: pulumi.Input<string>;
    /**
     * The name of the SSL server.
     */
    sslVpnServerName?: pulumi.Input<string>;
    /**
     * The vpn gateway id.
     */
    vpnGatewayId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslVpnServer resource.
 */
export interface SslVpnServerArgs {
    /**
     * The authentication algorithm of the SSL server.
     * Values:
     * `SHA1` (default)
     * `MD5`
     * `None` (do not use encryption).
     */
    auth?: pulumi.Input<string>;
    /**
     * The encryption algorithm of the SSL server.
     * Values:
     * `AES-128-CBC` (default)
     * `AES-192-CBC`
     * `AES-256-CBC`
     * `None` (do not use encryption).
     */
    cipher?: pulumi.Input<string>;
    /**
     * SSL client network segment.
     */
    clientIpPool: pulumi.Input<string>;
    /**
     * Whether to compress the transmitted data. The default value is false.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * The description of the ssl server.
     */
    description?: pulumi.Input<string>;
    /**
     * The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
     */
    localSubnets: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The port of the ssl server. Valid values: 1~65535. Default is 1194. The following ports are not supported: 22, 68, 179, 323, 500, 4500.
     */
    port?: pulumi.Input<number>;
    /**
     * The project name of the ssl server.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The name of the SSL server.
     */
    sslVpnServerName?: pulumi.Input<string>;
    /**
     * The vpn gateway id.
     */
    vpnGatewayId: pulumi.Input<string>;
}
