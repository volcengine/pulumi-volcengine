// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage customer gateway
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vpn.CustomerGateway("foo", {
 *     customerGatewayName: "tf-test",
 *     description: "tf-test",
 *     ipAddress: "192.0.1.3",
 *     projectName: "default",
 * });
 * ```
 *
 * ## Import
 *
 * CustomerGateway can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:vpn/customerGateway:CustomerGateway default cgw-2byswc356dybk2dx0eed2****
 * ```
 */
export class CustomerGateway extends pulumi.CustomResource {
    /**
     * Get an existing CustomerGateway resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomerGatewayState, opts?: pulumi.CustomResourceOptions): CustomerGateway {
        return new CustomerGateway(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vpn/customerGateway:CustomerGateway';

    /**
     * Returns true if the given object is an instance of CustomerGateway.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomerGateway {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomerGateway.__pulumiType;
    }

    /**
     * The account ID of the customer gateway.
     */
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * The connection count of the customer gateway.
     */
    public /*out*/ readonly connectionCount!: pulumi.Output<number>;
    /**
     * The create time of customer gateway.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The ID of the customer gateway.
     */
    public /*out*/ readonly customerGatewayId!: pulumi.Output<string>;
    /**
     * The name of the customer gateway.
     */
    public readonly customerGatewayName!: pulumi.Output<string>;
    /**
     * The description of the customer gateway.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The IP address of the customer gateway.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * The project name of the VPN customer gateway.
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * The status of the customer gateway.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The update time of customer gateway.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;

    /**
     * Create a CustomerGateway resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomerGatewayArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomerGatewayArgs | CustomerGatewayState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomerGatewayState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["connectionCount"] = state ? state.connectionCount : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            resourceInputs["customerGatewayName"] = state ? state.customerGatewayName : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
        } else {
            const args = argsOrState as CustomerGatewayArgs | undefined;
            if ((!args || args.ipAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ipAddress'");
            }
            resourceInputs["customerGatewayName"] = args ? args.customerGatewayName : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["connectionCount"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["customerGatewayId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomerGateway.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomerGateway resources.
 */
export interface CustomerGatewayState {
    /**
     * The account ID of the customer gateway.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The connection count of the customer gateway.
     */
    connectionCount?: pulumi.Input<number>;
    /**
     * The create time of customer gateway.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The ID of the customer gateway.
     */
    customerGatewayId?: pulumi.Input<string>;
    /**
     * The name of the customer gateway.
     */
    customerGatewayName?: pulumi.Input<string>;
    /**
     * The description of the customer gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * The IP address of the customer gateway.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The project name of the VPN customer gateway.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The status of the customer gateway.
     */
    status?: pulumi.Input<string>;
    /**
     * The update time of customer gateway.
     */
    updateTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CustomerGateway resource.
 */
export interface CustomerGatewayArgs {
    /**
     * The name of the customer gateway.
     */
    customerGatewayName?: pulumi.Input<string>;
    /**
     * The description of the customer gateway.
     */
    description?: pulumi.Input<string>;
    /**
     * The IP address of the customer gateway.
     */
    ipAddress: pulumi.Input<string>;
    /**
     * The project name of the VPN customer gateway.
     */
    projectName?: pulumi.Input<string>;
}
