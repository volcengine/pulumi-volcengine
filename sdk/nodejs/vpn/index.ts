// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectionsArgs, ConnectionsResult, ConnectionsOutputArgs } from "./connections";
export const connections: typeof import("./connections").connections = null as any;
export const connectionsOutput: typeof import("./connections").connectionsOutput = null as any;
utilities.lazyLoad(exports, ["connections","connectionsOutput"], () => require("./connections"));

export { CustomerGatewayArgs, CustomerGatewayState } from "./customerGateway";
export type CustomerGateway = import("./customerGateway").CustomerGateway;
export const CustomerGateway: typeof import("./customerGateway").CustomerGateway = null as any;
utilities.lazyLoad(exports, ["CustomerGateway"], () => require("./customerGateway"));

export { CustomerGatewaysArgs, CustomerGatewaysResult, CustomerGatewaysOutputArgs } from "./customerGateways";
export const customerGateways: typeof import("./customerGateways").customerGateways = null as any;
export const customerGatewaysOutput: typeof import("./customerGateways").customerGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["customerGateways","customerGatewaysOutput"], () => require("./customerGateways"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GatewayRouteArgs, GatewayRouteState } from "./gatewayRoute";
export type GatewayRoute = import("./gatewayRoute").GatewayRoute;
export const GatewayRoute: typeof import("./gatewayRoute").GatewayRoute = null as any;
utilities.lazyLoad(exports, ["GatewayRoute"], () => require("./gatewayRoute"));

export { GatewayRoutesArgs, GatewayRoutesResult, GatewayRoutesOutputArgs } from "./gatewayRoutes";
export const gatewayRoutes: typeof import("./gatewayRoutes").gatewayRoutes = null as any;
export const gatewayRoutesOutput: typeof import("./gatewayRoutes").gatewayRoutesOutput = null as any;
utilities.lazyLoad(exports, ["gatewayRoutes","gatewayRoutesOutput"], () => require("./gatewayRoutes"));

export { GatewaysArgs, GatewaysResult, GatewaysOutputArgs } from "./gateways";
export const gateways: typeof import("./gateways").gateways = null as any;
export const gatewaysOutput: typeof import("./gateways").gatewaysOutput = null as any;
utilities.lazyLoad(exports, ["gateways","gatewaysOutput"], () => require("./gateways"));

export { SslVpnClientCertArgs, SslVpnClientCertState } from "./sslVpnClientCert";
export type SslVpnClientCert = import("./sslVpnClientCert").SslVpnClientCert;
export const SslVpnClientCert: typeof import("./sslVpnClientCert").SslVpnClientCert = null as any;
utilities.lazyLoad(exports, ["SslVpnClientCert"], () => require("./sslVpnClientCert"));

export { SslVpnClientCertsArgs, SslVpnClientCertsResult, SslVpnClientCertsOutputArgs } from "./sslVpnClientCerts";
export const sslVpnClientCerts: typeof import("./sslVpnClientCerts").sslVpnClientCerts = null as any;
export const sslVpnClientCertsOutput: typeof import("./sslVpnClientCerts").sslVpnClientCertsOutput = null as any;
utilities.lazyLoad(exports, ["sslVpnClientCerts","sslVpnClientCertsOutput"], () => require("./sslVpnClientCerts"));

export { SslVpnServerArgs, SslVpnServerState } from "./sslVpnServer";
export type SslVpnServer = import("./sslVpnServer").SslVpnServer;
export const SslVpnServer: typeof import("./sslVpnServer").SslVpnServer = null as any;
utilities.lazyLoad(exports, ["SslVpnServer"], () => require("./sslVpnServer"));

export { SslVpnServersArgs, SslVpnServersResult, SslVpnServersOutputArgs } from "./sslVpnServers";
export const sslVpnServers: typeof import("./sslVpnServers").sslVpnServers = null as any;
export const sslVpnServersOutput: typeof import("./sslVpnServers").sslVpnServersOutput = null as any;
utilities.lazyLoad(exports, ["sslVpnServers","sslVpnServersOutput"], () => require("./sslVpnServers"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:vpn/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "volcengine:vpn/customerGateway:CustomerGateway":
                return new CustomerGateway(name, <any>undefined, { urn })
            case "volcengine:vpn/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "volcengine:vpn/gatewayRoute:GatewayRoute":
                return new GatewayRoute(name, <any>undefined, { urn })
            case "volcengine:vpn/sslVpnClientCert:SslVpnClientCert":
                return new SslVpnClientCert(name, <any>undefined, { urn })
            case "volcengine:vpn/sslVpnServer:SslVpnServer":
                return new SslVpnServer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "vpn/connection", _module)
pulumi.runtime.registerResourceModule("volcengine", "vpn/customerGateway", _module)
pulumi.runtime.registerResourceModule("volcengine", "vpn/gateway", _module)
pulumi.runtime.registerResourceModule("volcengine", "vpn/gatewayRoute", _module)
pulumi.runtime.registerResourceModule("volcengine", "vpn/sslVpnClientCert", _module)
pulumi.runtime.registerResourceModule("volcengine", "vpn/sslVpnServer", _module)
