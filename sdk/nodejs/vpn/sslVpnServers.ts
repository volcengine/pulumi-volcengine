// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of ssl vpn servers
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooGateway = new volcengine.vpn.Gateway("fooGateway", {
 *     vpcId: fooVpc.id,
 *     subnetId: fooSubnet.id,
 *     bandwidth: 5,
 *     vpnGatewayName: "acc-test1",
 *     description: "acc-test1",
 *     period: 7,
 *     projectName: "default",
 *     sslEnabled: true,
 *     sslMaxConnections: 5,
 * });
 * const fooSslVpnServer = new volcengine.vpn.SslVpnServer("fooSslVpnServer", {
 *     vpnGatewayId: fooGateway.id,
 *     localSubnets: [fooSubnet.cidrBlock],
 *     clientIpPool: "172.16.2.0/24",
 *     sslVpnServerName: "acc-test-ssl",
 *     description: "acc-test",
 *     protocol: "UDP",
 *     cipher: "AES-128-CBC",
 *     auth: "SHA1",
 *     compress: true,
 * });
 * const fooSslVpnServers = volcengine.vpn.SslVpnServersOutput({
 *     ids: [fooSslVpnServer.id],
 * });
 * ```
 */
export function sslVpnServers(args?: SslVpnServersArgs, opts?: pulumi.InvokeOptions): Promise<SslVpnServersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vpn/sslVpnServers:SslVpnServers", {
        "ids": args.ids,
        "outputFile": args.outputFile,
        "sslVpnServerName": args.sslVpnServerName,
        "vpnGatewayId": args.vpnGatewayId,
    }, opts);
}

/**
 * A collection of arguments for invoking SslVpnServers.
 */
export interface SslVpnServersArgs {
    /**
     * The ids list.
     */
    ids?: string[];
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The name of the ssl vpn server.
     */
    sslVpnServerName?: string;
    /**
     * The id of the vpn gateway.
     */
    vpnGatewayId?: string;
}

/**
 * A collection of values returned by SslVpnServers.
 */
export interface SslVpnServersResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    readonly outputFile?: string;
    /**
     * The name of the SSL server.
     */
    readonly sslVpnServerName?: string;
    /**
     * List of SSL VPN servers.
     */
    readonly sslVpnServers: outputs.vpn.SslVpnServersSslVpnServer[];
    /**
     * The total count of SSL VPN server query.
     */
    readonly totalCount: number;
    /**
     * The vpn gateway id.
     */
    readonly vpnGatewayId?: string;
}
/**
 * Use this data source to query detailed information of ssl vpn servers
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooGateway = new volcengine.vpn.Gateway("fooGateway", {
 *     vpcId: fooVpc.id,
 *     subnetId: fooSubnet.id,
 *     bandwidth: 5,
 *     vpnGatewayName: "acc-test1",
 *     description: "acc-test1",
 *     period: 7,
 *     projectName: "default",
 *     sslEnabled: true,
 *     sslMaxConnections: 5,
 * });
 * const fooSslVpnServer = new volcengine.vpn.SslVpnServer("fooSslVpnServer", {
 *     vpnGatewayId: fooGateway.id,
 *     localSubnets: [fooSubnet.cidrBlock],
 *     clientIpPool: "172.16.2.0/24",
 *     sslVpnServerName: "acc-test-ssl",
 *     description: "acc-test",
 *     protocol: "UDP",
 *     cipher: "AES-128-CBC",
 *     auth: "SHA1",
 *     compress: true,
 * });
 * const fooSslVpnServers = volcengine.vpn.SslVpnServersOutput({
 *     ids: [fooSslVpnServer.id],
 * });
 * ```
 */
export function sslVpnServersOutput(args?: SslVpnServersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<SslVpnServersResult> {
    return pulumi.output(args).apply((a: any) => sslVpnServers(a, opts))
}

/**
 * A collection of arguments for invoking SslVpnServers.
 */
export interface SslVpnServersOutputArgs {
    /**
     * The ids list.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The name of the ssl vpn server.
     */
    sslVpnServerName?: pulumi.Input<string>;
    /**
     * The id of the vpn gateway.
     */
    vpnGatewayId?: pulumi.Input<string>;
}
