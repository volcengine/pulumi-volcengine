// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vke default node pool batch attach
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as pulumi from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: "cn-beijing-a",
 *     vpcId: fooVpc.id,
 * });
 * const fooSecurityGroup = new volcengine.vpc.SecurityGroup("fooSecurityGroup", {
 *     vpcId: fooVpc.id,
 *     securityGroupName: "acc-test-security-group2",
 * });
 * const fooInstance = new volcengine.ecs.Instance("fooInstance", {
 *     imageId: "image-ybqi99s7yq8rx7mnk44b",
 *     instanceType: "ecs.g1ie.large",
 *     instanceName: "acc-test-ecs-name2",
 *     password: "93f0cb0614Aab12",
 *     instanceChargeType: "PostPaid",
 *     systemVolumeType: "ESSD_PL0",
 *     systemVolumeSize: 40,
 *     subnetId: fooSubnet.id,
 *     securityGroupIds: [fooSecurityGroup.id],
 * });
 * const fooCluster = new volcengine.vke.Cluster("fooCluster", {
 *     description: "created by terraform",
 *     deleteProtectionEnabled: false,
 *     clusterConfig: {
 *         subnetIds: [fooSubnet.id],
 *         apiServerPublicAccessEnabled: true,
 *         apiServerPublicAccessConfig: {
 *             publicAccessNetworkConfig: {
 *                 billingType: "PostPaidByBandwidth",
 *                 bandwidth: 1,
 *             },
 *         },
 *         resourcePublicAccessDefaultEnabled: true,
 *     },
 *     podsConfig: {
 *         podNetworkMode: "VpcCniShared",
 *         vpcCniConfig: {
 *             subnetIds: [fooSubnet.id],
 *         },
 *     },
 *     servicesConfig: {
 *         serviceCidrsv4s: ["172.30.0.0/18"],
 *     },
 *     tags: [{
 *         key: "tf-k1",
 *         value: "tf-v1",
 *     }],
 * });
 * const defaultDefaultNodePool = new volcengine.vke.DefaultNodePool("defaultDefaultNodePool", {
 *     clusterId: fooCluster.id,
 *     nodeConfig: {
 *         security: {
 *             login: {
 *                 password: "amw4WTdVcTRJVVFsUXpVTw==",
 *             },
 *             securityGroupIds: [fooSecurityGroup.id],
 *             securityStrategies: ["Hids"],
 *         },
 *         initializeScript: "ISMvYmluL2Jhc2gKZWNobyAx",
 *     },
 *     kubernetesConfig: {
 *         labels: [
 *             {
 *                 key: "tf-key1",
 *                 value: "tf-value1",
 *             },
 *             {
 *                 key: "tf-key2",
 *                 value: "tf-value2",
 *             },
 *         ],
 *         taints: [
 *             {
 *                 key: "tf-key3",
 *                 value: "tf-value3",
 *                 effect: "NoSchedule",
 *             },
 *             {
 *                 key: "tf-key4",
 *                 value: "tf-value4",
 *                 effect: "NoSchedule",
 *             },
 *         ],
 *         cordon: true,
 *     },
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const defaultDefaultNodePoolBatchAttach = new volcengine.vke.DefaultNodePoolBatchAttach("defaultDefaultNodePoolBatchAttach", {
 *     clusterId: fooCluster.id,
 *     defaultNodePoolId: defaultDefaultNodePool.id,
 *     instances: [{
 *         instanceId: fooInstance.id,
 *         keepInstanceName: true,
 *         additionalContainerStorageEnabled: false,
 *     }],
 *     kubernetesConfig: {
 *         labels: [
 *             {
 *                 key: "tf-key1",
 *                 value: "tf-value1",
 *             },
 *             {
 *                 key: "tf-key2",
 *                 value: "tf-value2",
 *             },
 *         ],
 *         taints: [
 *             {
 *                 key: "tf-key3",
 *                 value: "tf-value3",
 *                 effect: "NoSchedule",
 *             },
 *             {
 *                 key: "tf-key4",
 *                 value: "tf-value4",
 *                 effect: "NoSchedule",
 *             },
 *         ],
 *         cordon: true,
 *     },
 * });
 * ```
 */
export class DefaultNodePoolBatchAttach extends pulumi.CustomResource {
    /**
     * Get an existing DefaultNodePoolBatchAttach resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultNodePoolBatchAttachState, opts?: pulumi.CustomResourceOptions): DefaultNodePoolBatchAttach {
        return new DefaultNodePoolBatchAttach(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vke/defaultNodePoolBatchAttach:DefaultNodePoolBatchAttach';

    /**
     * Returns true if the given object is an instance of DefaultNodePoolBatchAttach.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultNodePoolBatchAttach {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultNodePoolBatchAttach.__pulumiType;
    }

    /**
     * The ClusterId of NodePool.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The default NodePool ID.
     */
    public readonly defaultNodePoolId!: pulumi.Output<string>;
    /**
     * The ECS InstanceIds add to NodePool.
     */
    public readonly instances!: pulumi.Output<outputs.vke.DefaultNodePoolBatchAttachInstance[] | undefined>;
    /**
     * Is import of the DefaultNodePool. It only works when imported, set to true.
     */
    public /*out*/ readonly isImport!: pulumi.Output<boolean>;
    /**
     * The KubernetesConfig of NodeConfig. Please note that this field is the configuration of the node. The same key is subject to the config of the node pool. Different keys take effect together.
     */
    public readonly kubernetesConfig!: pulumi.Output<outputs.vke.DefaultNodePoolBatchAttachKubernetesConfig | undefined>;
    /**
     * The Config of NodePool.
     */
    public /*out*/ readonly nodeConfigs!: pulumi.Output<outputs.vke.DefaultNodePoolBatchAttachNodeConfig[]>;
    /**
     * Tags.
     */
    public /*out*/ readonly tags!: pulumi.Output<outputs.vke.DefaultNodePoolBatchAttachTag[]>;

    /**
     * Create a DefaultNodePoolBatchAttach resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultNodePoolBatchAttachArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultNodePoolBatchAttachArgs | DefaultNodePoolBatchAttachState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultNodePoolBatchAttachState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["defaultNodePoolId"] = state ? state.defaultNodePoolId : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["isImport"] = state ? state.isImport : undefined;
            resourceInputs["kubernetesConfig"] = state ? state.kubernetesConfig : undefined;
            resourceInputs["nodeConfigs"] = state ? state.nodeConfigs : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DefaultNodePoolBatchAttachArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.defaultNodePoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultNodePoolId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["defaultNodePoolId"] = args ? args.defaultNodePoolId : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["kubernetesConfig"] = args ? args.kubernetesConfig : undefined;
            resourceInputs["isImport"] = undefined /*out*/;
            resourceInputs["nodeConfigs"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultNodePoolBatchAttach.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultNodePoolBatchAttach resources.
 */
export interface DefaultNodePoolBatchAttachState {
    /**
     * The ClusterId of NodePool.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The default NodePool ID.
     */
    defaultNodePoolId?: pulumi.Input<string>;
    /**
     * The ECS InstanceIds add to NodePool.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachInstance>[]>;
    /**
     * Is import of the DefaultNodePool. It only works when imported, set to true.
     */
    isImport?: pulumi.Input<boolean>;
    /**
     * The KubernetesConfig of NodeConfig. Please note that this field is the configuration of the node. The same key is subject to the config of the node pool. Different keys take effect together.
     */
    kubernetesConfig?: pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachKubernetesConfig>;
    /**
     * The Config of NodePool.
     */
    nodeConfigs?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachNodeConfig>[]>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachTag>[]>;
}

/**
 * The set of arguments for constructing a DefaultNodePoolBatchAttach resource.
 */
export interface DefaultNodePoolBatchAttachArgs {
    /**
     * The ClusterId of NodePool.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The default NodePool ID.
     */
    defaultNodePoolId: pulumi.Input<string>;
    /**
     * The ECS InstanceIds add to NodePool.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachInstance>[]>;
    /**
     * The KubernetesConfig of NodeConfig. Please note that this field is the configuration of the node. The same key is subject to the config of the node pool. Different keys take effect together.
     */
    kubernetesConfig?: pulumi.Input<inputs.vke.DefaultNodePoolBatchAttachKubernetesConfig>;
}
