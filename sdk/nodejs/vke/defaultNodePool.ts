// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vke default node pool
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const _default = new volcengine.vke.DefaultNodePool("default", {
 *     clusterId: "ccc2umdnqtoflv91lqtq0",
 *     instances: [
 *         {
 *             additionalContainerStorageEnabled: false,
 *             instanceId: "i-ybvza90ohwexzk8emaa3",
 *             keepInstanceName: false,
 *         },
 *         {
 *             additionalContainerStorageEnabled: true,
 *             containerStoragePath: "/",
 *             instanceId: "i-ybvza90ohxexzkm4zihf",
 *             keepInstanceName: false,
 *         },
 *     ],
 *     kubernetesConfig: {
 *         cordon: true,
 *         labels: [
 *             {
 *                 key: "aa",
 *                 value: "bb",
 *             },
 *             {
 *                 key: "cccc",
 *                 value: "dddd",
 *             },
 *         ],
 *         taints: [
 *             {
 *                 effect: "NoSchedule",
 *                 key: "cccc",
 *                 value: "dddd",
 *             },
 *             {
 *                 effect: "NoSchedule",
 *                 key: "aa11",
 *                 value: "111",
 *             },
 *         ],
 *     },
 *     nodeConfig: {
 *         ecsTags: [{
 *             key: "ecs_k1",
 *             value: "ecs_v1",
 *         }],
 *         initializeScript: "ISMvYmluL2Jhc2gKZWNobyAx",
 *         security: {
 *             login: {
 *                 password: "amw4WTdVcTRJVVFsUXpVTw==",
 *             },
 *             securityGroupIds: [
 *                 "sg-2d6t6djr2wge858ozfczv41xq",
 *                 "sg-3re6v4lz76yv45zsk2hjvvwcj",
 *             ],
 *             securityStrategies: ["Hids"],
 *         },
 *     },
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * VKE default node can be imported using the node id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:vke/defaultNodePool:DefaultNodePool default nc5t5epmrsf****
 * ```
 */
export class DefaultNodePool extends pulumi.CustomResource {
    /**
     * Get an existing DefaultNodePool resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DefaultNodePoolState, opts?: pulumi.CustomResourceOptions): DefaultNodePool {
        return new DefaultNodePool(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vke/defaultNodePool:DefaultNodePool';

    /**
     * Returns true if the given object is an instance of DefaultNodePool.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DefaultNodePool {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DefaultNodePool.__pulumiType;
    }

    /**
     * The ClusterId of NodePool.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The ECS InstanceIds add to NodePool.
     */
    public readonly instances!: pulumi.Output<outputs.vke.DefaultNodePoolInstance[] | undefined>;
    /**
     * Is import of the DefaultNodePool. It only works when imported, set to true.
     */
    public /*out*/ readonly isImport!: pulumi.Output<boolean>;
    /**
     * The KubernetesConfig of NodeConfig.
     */
    public readonly kubernetesConfig!: pulumi.Output<outputs.vke.DefaultNodePoolKubernetesConfig>;
    /**
     * The Config of NodePool.
     */
    public readonly nodeConfig!: pulumi.Output<outputs.vke.DefaultNodePoolNodeConfig>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.vke.DefaultNodePoolTag[] | undefined>;

    /**
     * Create a DefaultNodePool resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DefaultNodePoolArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DefaultNodePoolArgs | DefaultNodePoolState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DefaultNodePoolState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["instances"] = state ? state.instances : undefined;
            resourceInputs["isImport"] = state ? state.isImport : undefined;
            resourceInputs["kubernetesConfig"] = state ? state.kubernetesConfig : undefined;
            resourceInputs["nodeConfig"] = state ? state.nodeConfig : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as DefaultNodePoolArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.kubernetesConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kubernetesConfig'");
            }
            if ((!args || args.nodeConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nodeConfig'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["instances"] = args ? args.instances : undefined;
            resourceInputs["kubernetesConfig"] = args ? args.kubernetesConfig : undefined;
            resourceInputs["nodeConfig"] = args ? args.nodeConfig : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["isImport"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DefaultNodePool.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DefaultNodePool resources.
 */
export interface DefaultNodePoolState {
    /**
     * The ClusterId of NodePool.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The ECS InstanceIds add to NodePool.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolInstance>[]>;
    /**
     * Is import of the DefaultNodePool. It only works when imported, set to true.
     */
    isImport?: pulumi.Input<boolean>;
    /**
     * The KubernetesConfig of NodeConfig.
     */
    kubernetesConfig?: pulumi.Input<inputs.vke.DefaultNodePoolKubernetesConfig>;
    /**
     * The Config of NodePool.
     */
    nodeConfig?: pulumi.Input<inputs.vke.DefaultNodePoolNodeConfig>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolTag>[]>;
}

/**
 * The set of arguments for constructing a DefaultNodePool resource.
 */
export interface DefaultNodePoolArgs {
    /**
     * The ClusterId of NodePool.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The ECS InstanceIds add to NodePool.
     */
    instances?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolInstance>[]>;
    /**
     * The KubernetesConfig of NodeConfig.
     */
    kubernetesConfig: pulumi.Input<inputs.vke.DefaultNodePoolKubernetesConfig>;
    /**
     * The Config of NodePool.
     */
    nodeConfig: pulumi.Input<inputs.vke.DefaultNodePoolNodeConfig>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vke.DefaultNodePoolTag>[]>;
}
