// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AddonArgs, AddonState } from "./addon";
export type Addon = import("./addon").Addon;
export const Addon: typeof import("./addon").Addon = null as any;
utilities.lazyLoad(exports, ["Addon"], () => require("./addon"));

export { AddonsArgs, AddonsResult, AddonsOutputArgs } from "./addons";
export const addons: typeof import("./addons").addons = null as any;
export const addonsOutput: typeof import("./addons").addonsOutput = null as any;
utilities.lazyLoad(exports, ["addons","addonsOutput"], () => require("./addons"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClustersArgs, ClustersResult, ClustersOutputArgs } from "./clusters";
export const clusters: typeof import("./clusters").clusters = null as any;
export const clustersOutput: typeof import("./clusters").clustersOutput = null as any;
utilities.lazyLoad(exports, ["clusters","clustersOutput"], () => require("./clusters"));

export { DefaultNodePoolArgs, DefaultNodePoolState } from "./defaultNodePool";
export type DefaultNodePool = import("./defaultNodePool").DefaultNodePool;
export const DefaultNodePool: typeof import("./defaultNodePool").DefaultNodePool = null as any;
utilities.lazyLoad(exports, ["DefaultNodePool"], () => require("./defaultNodePool"));

export { DefaultNodePoolBatchAttachArgs, DefaultNodePoolBatchAttachState } from "./defaultNodePoolBatchAttach";
export type DefaultNodePoolBatchAttach = import("./defaultNodePoolBatchAttach").DefaultNodePoolBatchAttach;
export const DefaultNodePoolBatchAttach: typeof import("./defaultNodePoolBatchAttach").DefaultNodePoolBatchAttach = null as any;
utilities.lazyLoad(exports, ["DefaultNodePoolBatchAttach"], () => require("./defaultNodePoolBatchAttach"));

export { GetAddonsArgs, GetAddonsResult, GetAddonsOutputArgs } from "./getAddons";
export const getAddons: typeof import("./getAddons").getAddons = null as any;
export const getAddonsOutput: typeof import("./getAddons").getAddonsOutput = null as any;
utilities.lazyLoad(exports, ["getAddons","getAddonsOutput"], () => require("./getAddons"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetKubeconfigsArgs, GetKubeconfigsResult, GetKubeconfigsOutputArgs } from "./getKubeconfigs";
export const getKubeconfigs: typeof import("./getKubeconfigs").getKubeconfigs = null as any;
export const getKubeconfigsOutput: typeof import("./getKubeconfigs").getKubeconfigsOutput = null as any;
utilities.lazyLoad(exports, ["getKubeconfigs","getKubeconfigsOutput"], () => require("./getKubeconfigs"));

export { GetNodePoolsArgs, GetNodePoolsResult, GetNodePoolsOutputArgs } from "./getNodePools";
export const getNodePools: typeof import("./getNodePools").getNodePools = null as any;
export const getNodePoolsOutput: typeof import("./getNodePools").getNodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["getNodePools","getNodePoolsOutput"], () => require("./getNodePools"));

export { GetNodesArgs, GetNodesResult, GetNodesOutputArgs } from "./getNodes";
export const getNodes: typeof import("./getNodes").getNodes = null as any;
export const getNodesOutput: typeof import("./getNodes").getNodesOutput = null as any;
utilities.lazyLoad(exports, ["getNodes","getNodesOutput"], () => require("./getNodes"));

export { GetPermissionsArgs, GetPermissionsResult, GetPermissionsOutputArgs } from "./getPermissions";
export const getPermissions: typeof import("./getPermissions").getPermissions = null as any;
export const getPermissionsOutput: typeof import("./getPermissions").getPermissionsOutput = null as any;
utilities.lazyLoad(exports, ["getPermissions","getPermissionsOutput"], () => require("./getPermissions"));

export { GetSupportAddonsArgs, GetSupportAddonsResult, GetSupportAddonsOutputArgs } from "./getSupportAddons";
export const getSupportAddons: typeof import("./getSupportAddons").getSupportAddons = null as any;
export const getSupportAddonsOutput: typeof import("./getSupportAddons").getSupportAddonsOutput = null as any;
utilities.lazyLoad(exports, ["getSupportAddons","getSupportAddonsOutput"], () => require("./getSupportAddons"));

export { GetSupportResourceTypesArgs, GetSupportResourceTypesResult, GetSupportResourceTypesOutputArgs } from "./getSupportResourceTypes";
export const getSupportResourceTypes: typeof import("./getSupportResourceTypes").getSupportResourceTypes = null as any;
export const getSupportResourceTypesOutput: typeof import("./getSupportResourceTypes").getSupportResourceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getSupportResourceTypes","getSupportResourceTypesOutput"], () => require("./getSupportResourceTypes"));

export { KubeconfigArgs, KubeconfigState } from "./kubeconfig";
export type Kubeconfig = import("./kubeconfig").Kubeconfig;
export const Kubeconfig: typeof import("./kubeconfig").Kubeconfig = null as any;
utilities.lazyLoad(exports, ["Kubeconfig"], () => require("./kubeconfig"));

export { KubeconfigsArgs, KubeconfigsResult, KubeconfigsOutputArgs } from "./kubeconfigs";
export const kubeconfigs: typeof import("./kubeconfigs").kubeconfigs = null as any;
export const kubeconfigsOutput: typeof import("./kubeconfigs").kubeconfigsOutput = null as any;
utilities.lazyLoad(exports, ["kubeconfigs","kubeconfigsOutput"], () => require("./kubeconfigs"));

export { NodeArgs, NodeState } from "./node";
export type Node = import("./node").Node;
export const Node: typeof import("./node").Node = null as any;
utilities.lazyLoad(exports, ["Node"], () => require("./node"));

export { NodePoolArgs, NodePoolState } from "./nodePool";
export type NodePool = import("./nodePool").NodePool;
export const NodePool: typeof import("./nodePool").NodePool = null as any;
utilities.lazyLoad(exports, ["NodePool"], () => require("./nodePool"));

export { NodePoolsArgs, NodePoolsResult, NodePoolsOutputArgs } from "./nodePools";
export const nodePools: typeof import("./nodePools").nodePools = null as any;
export const nodePoolsOutput: typeof import("./nodePools").nodePoolsOutput = null as any;
utilities.lazyLoad(exports, ["nodePools","nodePoolsOutput"], () => require("./nodePools"));

export { NodesArgs, NodesResult, NodesOutputArgs } from "./nodes";
export const nodes: typeof import("./nodes").nodes = null as any;
export const nodesOutput: typeof import("./nodes").nodesOutput = null as any;
utilities.lazyLoad(exports, ["nodes","nodesOutput"], () => require("./nodes"));

export { PermissionArgs, PermissionState } from "./permission";
export type Permission = import("./permission").Permission;
export const Permission: typeof import("./permission").Permission = null as any;
utilities.lazyLoad(exports, ["Permission"], () => require("./permission"));

export { PermissionsArgs, PermissionsResult, PermissionsOutputArgs } from "./permissions";
export const permissions: typeof import("./permissions").permissions = null as any;
export const permissionsOutput: typeof import("./permissions").permissionsOutput = null as any;
utilities.lazyLoad(exports, ["permissions","permissionsOutput"], () => require("./permissions"));

export { SupportAddonsArgs, SupportAddonsResult, SupportAddonsOutputArgs } from "./supportAddons";
export const supportAddons: typeof import("./supportAddons").supportAddons = null as any;
export const supportAddonsOutput: typeof import("./supportAddons").supportAddonsOutput = null as any;
utilities.lazyLoad(exports, ["supportAddons","supportAddonsOutput"], () => require("./supportAddons"));

export { SupportResourceTypesArgs, SupportResourceTypesResult, SupportResourceTypesOutputArgs } from "./supportResourceTypes";
export const supportResourceTypes: typeof import("./supportResourceTypes").supportResourceTypes = null as any;
export const supportResourceTypesOutput: typeof import("./supportResourceTypes").supportResourceTypesOutput = null as any;
utilities.lazyLoad(exports, ["supportResourceTypes","supportResourceTypesOutput"], () => require("./supportResourceTypes"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:vke/addon:Addon":
                return new Addon(name, <any>undefined, { urn })
            case "volcengine:vke/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "volcengine:vke/defaultNodePool:DefaultNodePool":
                return new DefaultNodePool(name, <any>undefined, { urn })
            case "volcengine:vke/defaultNodePoolBatchAttach:DefaultNodePoolBatchAttach":
                return new DefaultNodePoolBatchAttach(name, <any>undefined, { urn })
            case "volcengine:vke/kubeconfig:Kubeconfig":
                return new Kubeconfig(name, <any>undefined, { urn })
            case "volcengine:vke/node:Node":
                return new Node(name, <any>undefined, { urn })
            case "volcengine:vke/nodePool:NodePool":
                return new NodePool(name, <any>undefined, { urn })
            case "volcengine:vke/permission:Permission":
                return new Permission(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "vke/addon", _module)
pulumi.runtime.registerResourceModule("volcengine", "vke/cluster", _module)
pulumi.runtime.registerResourceModule("volcengine", "vke/defaultNodePool", _module)
pulumi.runtime.registerResourceModule("volcengine", "vke/defaultNodePoolBatchAttach", _module)
pulumi.runtime.registerResourceModule("volcengine", "vke/kubeconfig", _module)
pulumi.runtime.registerResourceModule("volcengine", "vke/node", _module)
pulumi.runtime.registerResourceModule("volcengine", "vke/nodePool", _module)
pulumi.runtime.registerResourceModule("volcengine", "vke/permission", _module)
