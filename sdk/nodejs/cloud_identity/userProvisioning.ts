// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cloud identity user provisioning
 *
 * ## Import
 *
 * CloudIdentityUserProvisioning can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:cloud_identity/userProvisioning:UserProvisioning default resource_id
 * ```
 */
export class UserProvisioning extends pulumi.CustomResource {
    /**
     * Get an existing UserProvisioning resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserProvisioningState, opts?: pulumi.CustomResourceOptions): UserProvisioning {
        return new UserProvisioning(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cloud_identity/userProvisioning:UserProvisioning';

    /**
     * Returns true if the given object is an instance of UserProvisioning.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is UserProvisioning {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserProvisioning.__pulumiType;
    }

    /**
     * The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
     */
    public readonly deletionStrategy!: pulumi.Output<string>;
    /**
     * The description of the cloud identity user provisioning.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
     */
    public readonly duplicationStrategy!: pulumi.Output<string>;
    /**
     * The duplication suffix of the cloud identity user provisioning. When the `duplicationStrategy` is `KeepBoth`, this field must be specified.
     */
    public readonly duplicationSuffix!: pulumi.Output<string | undefined>;
    /**
     * The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
     */
    public readonly identitySourceStrategy!: pulumi.Output<string>;
    /**
     * A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principalType` is `User`.
     */
    public readonly policyName!: pulumi.Output<string | undefined>;
    /**
     * The principal id of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
     */
    public readonly principalId!: pulumi.Output<string>;
    /**
     * The principal name of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserName`. When the `principalType` is `Group`, this field is specified to `GroupName`.
     */
    public /*out*/ readonly principalName!: pulumi.Output<string>;
    /**
     * The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
     */
    public readonly principalType!: pulumi.Output<string>;
    /**
     * The status of the cloud identity user provisioning.
     */
    public /*out*/ readonly provisionStatus!: pulumi.Output<string>;
    /**
     * The target account id of the cloud identity user provisioning.
     */
    public readonly targetId!: pulumi.Output<string>;

    /**
     * Create a UserProvisioning resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserProvisioningArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserProvisioningArgs | UserProvisioningState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UserProvisioningState | undefined;
            resourceInputs["deletionStrategy"] = state ? state.deletionStrategy : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["duplicationStrategy"] = state ? state.duplicationStrategy : undefined;
            resourceInputs["duplicationSuffix"] = state ? state.duplicationSuffix : undefined;
            resourceInputs["identitySourceStrategy"] = state ? state.identitySourceStrategy : undefined;
            resourceInputs["policyName"] = state ? state.policyName : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["principalName"] = state ? state.principalName : undefined;
            resourceInputs["principalType"] = state ? state.principalType : undefined;
            resourceInputs["provisionStatus"] = state ? state.provisionStatus : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
        } else {
            const args = argsOrState as UserProvisioningArgs | undefined;
            if ((!args || args.deletionStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deletionStrategy'");
            }
            if ((!args || args.duplicationStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'duplicationStrategy'");
            }
            if ((!args || args.identitySourceStrategy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'identitySourceStrategy'");
            }
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if ((!args || args.principalType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalType'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            resourceInputs["deletionStrategy"] = args ? args.deletionStrategy : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["duplicationStrategy"] = args ? args.duplicationStrategy : undefined;
            resourceInputs["duplicationSuffix"] = args ? args.duplicationSuffix : undefined;
            resourceInputs["identitySourceStrategy"] = args ? args.identitySourceStrategy : undefined;
            resourceInputs["policyName"] = args ? args.policyName : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["principalType"] = args ? args.principalType : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["principalName"] = undefined /*out*/;
            resourceInputs["provisionStatus"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(UserProvisioning.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering UserProvisioning resources.
 */
export interface UserProvisioningState {
    /**
     * The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
     */
    deletionStrategy?: pulumi.Input<string>;
    /**
     * The description of the cloud identity user provisioning.
     */
    description?: pulumi.Input<string>;
    /**
     * The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
     */
    duplicationStrategy?: pulumi.Input<string>;
    /**
     * The duplication suffix of the cloud identity user provisioning. When the `duplicationStrategy` is `KeepBoth`, this field must be specified.
     */
    duplicationSuffix?: pulumi.Input<string>;
    /**
     * The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
     */
    identitySourceStrategy?: pulumi.Input<string>;
    /**
     * A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principalType` is `User`.
     */
    policyName?: pulumi.Input<string>;
    /**
     * The principal id of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
     */
    principalId?: pulumi.Input<string>;
    /**
     * The principal name of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserName`. When the `principalType` is `Group`, this field is specified to `GroupName`.
     */
    principalName?: pulumi.Input<string>;
    /**
     * The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
     */
    principalType?: pulumi.Input<string>;
    /**
     * The status of the cloud identity user provisioning.
     */
    provisionStatus?: pulumi.Input<string>;
    /**
     * The target account id of the cloud identity user provisioning.
     */
    targetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a UserProvisioning resource.
 */
export interface UserProvisioningArgs {
    /**
     * The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
     */
    deletionStrategy: pulumi.Input<string>;
    /**
     * The description of the cloud identity user provisioning.
     */
    description?: pulumi.Input<string>;
    /**
     * The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
     */
    duplicationStrategy: pulumi.Input<string>;
    /**
     * The duplication suffix of the cloud identity user provisioning. When the `duplicationStrategy` is `KeepBoth`, this field must be specified.
     */
    duplicationSuffix?: pulumi.Input<string>;
    /**
     * The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
     */
    identitySourceStrategy: pulumi.Input<string>;
    /**
     * A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principalType` is `User`.
     */
    policyName?: pulumi.Input<string>;
    /**
     * The principal id of the cloud identity user provisioning. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
     */
    principalId: pulumi.Input<string>;
    /**
     * The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
     */
    principalType: pulumi.Input<string>;
    /**
     * The target account id of the cloud identity user provisioning.
     */
    targetId: pulumi.Input<string>;
}
