// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of cloud identity users
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooUser: volcengine.cloud_identity.User[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     fooUser.push(new volcengine.cloud_identity.User(`fooUser-${range.value}`, {
 *         description: "tf",
 *         displayName: `tf-test-user-${range.value}`,
 *         email: "88@qq.com",
 *         phone: "181",
 *         userName: `acc-test-user-${range.value}`,
 *     }));
 * }
 * const fooUsers = volcengine.cloud_identity.Users({
 *     source: "Manual",
 *     userName: "acc-test-user",
 * });
 * ```
 */
export function users(args?: UsersArgs, opts?: pulumi.InvokeOptions): Promise<UsersResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:cloud_identity/users:Users", {
        "departmentId": args.departmentId,
        "displayName": args.displayName,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "source": args.source,
        "userName": args.userName,
    }, opts);
}

/**
 * A collection of arguments for invoking Users.
 */
export interface UsersArgs {
    /**
     * The department id.
     */
    departmentId?: string;
    /**
     * The display name of cloud identity user.
     */
    displayName?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The source of cloud identity user. Valid values: `Sync`, `Manual`.
     */
    source?: string;
    /**
     * The name of cloud identity user.
     */
    userName?: string;
}

/**
 * A collection of values returned by Users.
 */
export interface UsersResult {
    readonly departmentId?: string;
    /**
     * The display name of the cloud identity user.
     */
    readonly displayName?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The source of the cloud identity user.
     */
    readonly source?: string;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    /**
     * The name of the cloud identity user.
     */
    readonly userName?: string;
    /**
     * The collection of query.
     */
    readonly users: outputs.cloud_identity.UsersUser[];
}
/**
 * Use this data source to query detailed information of cloud identity users
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooUser: volcengine.cloud_identity.User[] = [];
 * for (const range = {value: 0}; range.value < 2; range.value++) {
 *     fooUser.push(new volcengine.cloud_identity.User(`fooUser-${range.value}`, {
 *         description: "tf",
 *         displayName: `tf-test-user-${range.value}`,
 *         email: "88@qq.com",
 *         phone: "181",
 *         userName: `acc-test-user-${range.value}`,
 *     }));
 * }
 * const fooUsers = volcengine.cloud_identity.Users({
 *     source: "Manual",
 *     userName: "acc-test-user",
 * });
 * ```
 */
export function usersOutput(args?: UsersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<UsersResult> {
    return pulumi.output(args).apply((a: any) => users(a, opts))
}

/**
 * A collection of arguments for invoking Users.
 */
export interface UsersOutputArgs {
    /**
     * The department id.
     */
    departmentId?: pulumi.Input<string>;
    /**
     * The display name of cloud identity user.
     */
    displayName?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The source of cloud identity user. Valid values: `Sync`, `Manual`.
     */
    source?: pulumi.Input<string>;
    /**
     * The name of cloud identity user.
     */
    userName?: pulumi.Input<string>;
}
