// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage cloud identity permission set assignment
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooPermissionSet = new volcengine.cloud_identity.PermissionSet("fooPermissionSet", {
 *     description: "tf",
 *     sessionDuration: 5000,
 *     permissionPolicies: [
 *         {
 *             permissionPolicyType: "System",
 *             permissionPolicyName: "AdministratorAccess",
 *             inlinePolicyDocument: "",
 *         },
 *         {
 *             permissionPolicyType: "System",
 *             permissionPolicyName: "ReadOnlyAccess",
 *             inlinePolicyDocument: "",
 *         },
 *         {
 *             permissionPolicyType: "Inline",
 *             inlinePolicyDocument: "{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}",
 *         },
 *     ],
 * });
 * const fooUser = new volcengine.cloud_identity.User("fooUser", {
 *     userName: "acc-test-user",
 *     displayName: "tf-test-user",
 *     description: "tf",
 *     email: "88@qq.com",
 *     phone: "181",
 * });
 * const fooPermissionSetAssignment = new volcengine.cloud_identity.PermissionSetAssignment("fooPermissionSetAssignment", {
 *     permissionSetId: fooPermissionSet.id,
 *     targetId: "210026****",
 *     principalType: "User",
 *     principalId: fooUser.id,
 * });
 * ```
 *
 * ## Import
 *
 * CloudIdentityPermissionSetAssignment can be imported using the permission_set_id:target_id:principal_type:principal_id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:cloud_identity/permissionSetAssignment:PermissionSetAssignment default resource_id
 * ```
 */
export class PermissionSetAssignment extends pulumi.CustomResource {
    /**
     * Get an existing PermissionSetAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PermissionSetAssignmentState, opts?: pulumi.CustomResourceOptions): PermissionSetAssignment {
        return new PermissionSetAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:cloud_identity/permissionSetAssignment:PermissionSetAssignment';

    /**
     * Returns true if the given object is an instance of PermissionSetAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PermissionSetAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PermissionSetAssignment.__pulumiType;
    }

    /**
     * The deprovision strategy when deleting the cloud identity permission set assignment. Valid values: `DeprovisionForLastPermissionSetOnAccount`, `None`. Default is `DeprovisionForLastPermissionSetOnAccount`. 
     * When the `deprovisionStrategy` is `DeprovisionForLastPermissionSetOnAccount`, and the permission set assignment to be deleted is the last assignment for the same account, this option is used for the DeprovisionPermissionSet operation.
     */
    public readonly deprovisionStrategy!: pulumi.Output<string | undefined>;
    /**
     * The id of the cloud identity permission set.
     */
    public readonly permissionSetId!: pulumi.Output<string>;
    /**
     * The principal id of the cloud identity permission set. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
     */
    public readonly principalId!: pulumi.Output<string>;
    /**
     * The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
     */
    public readonly principalType!: pulumi.Output<string>;
    /**
     * The target account id of the cloud identity permission set assignment.
     */
    public readonly targetId!: pulumi.Output<string>;

    /**
     * Create a PermissionSetAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PermissionSetAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PermissionSetAssignmentArgs | PermissionSetAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PermissionSetAssignmentState | undefined;
            resourceInputs["deprovisionStrategy"] = state ? state.deprovisionStrategy : undefined;
            resourceInputs["permissionSetId"] = state ? state.permissionSetId : undefined;
            resourceInputs["principalId"] = state ? state.principalId : undefined;
            resourceInputs["principalType"] = state ? state.principalType : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
        } else {
            const args = argsOrState as PermissionSetAssignmentArgs | undefined;
            if ((!args || args.permissionSetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'permissionSetId'");
            }
            if ((!args || args.principalId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalId'");
            }
            if ((!args || args.principalType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principalType'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            resourceInputs["deprovisionStrategy"] = args ? args.deprovisionStrategy : undefined;
            resourceInputs["permissionSetId"] = args ? args.permissionSetId : undefined;
            resourceInputs["principalId"] = args ? args.principalId : undefined;
            resourceInputs["principalType"] = args ? args.principalType : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PermissionSetAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PermissionSetAssignment resources.
 */
export interface PermissionSetAssignmentState {
    /**
     * The deprovision strategy when deleting the cloud identity permission set assignment. Valid values: `DeprovisionForLastPermissionSetOnAccount`, `None`. Default is `DeprovisionForLastPermissionSetOnAccount`. 
     * When the `deprovisionStrategy` is `DeprovisionForLastPermissionSetOnAccount`, and the permission set assignment to be deleted is the last assignment for the same account, this option is used for the DeprovisionPermissionSet operation.
     */
    deprovisionStrategy?: pulumi.Input<string>;
    /**
     * The id of the cloud identity permission set.
     */
    permissionSetId?: pulumi.Input<string>;
    /**
     * The principal id of the cloud identity permission set. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
     */
    principalId?: pulumi.Input<string>;
    /**
     * The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
     */
    principalType?: pulumi.Input<string>;
    /**
     * The target account id of the cloud identity permission set assignment.
     */
    targetId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PermissionSetAssignment resource.
 */
export interface PermissionSetAssignmentArgs {
    /**
     * The deprovision strategy when deleting the cloud identity permission set assignment. Valid values: `DeprovisionForLastPermissionSetOnAccount`, `None`. Default is `DeprovisionForLastPermissionSetOnAccount`. 
     * When the `deprovisionStrategy` is `DeprovisionForLastPermissionSetOnAccount`, and the permission set assignment to be deleted is the last assignment for the same account, this option is used for the DeprovisionPermissionSet operation.
     */
    deprovisionStrategy?: pulumi.Input<string>;
    /**
     * The id of the cloud identity permission set.
     */
    permissionSetId: pulumi.Input<string>;
    /**
     * The principal id of the cloud identity permission set. When the `principalType` is `User`, this field is specified to `UserId`. When the `principalType` is `Group`, this field is specified to `GroupId`.
     */
    principalId: pulumi.Input<string>;
    /**
     * The principal type of the cloud identity permission set. Valid values: `User`, `Group`.
     */
    principalType: pulumi.Input<string>;
    /**
     * The target account id of the cloud identity permission set assignment.
     */
    targetId: pulumi.Input<string>;
}
