// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { GetGroupsArgs, GetGroupsResult, GetGroupsOutputArgs } from "./getGroups";
export const getGroups: typeof import("./getGroups").getGroups = null as any;
export const getGroupsOutput: typeof import("./getGroups").getGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getGroups","getGroupsOutput"], () => require("./getGroups"));

export { GetPermissionSetAssignmentsArgs, GetPermissionSetAssignmentsResult, GetPermissionSetAssignmentsOutputArgs } from "./getPermissionSetAssignments";
export const getPermissionSetAssignments: typeof import("./getPermissionSetAssignments").getPermissionSetAssignments = null as any;
export const getPermissionSetAssignmentsOutput: typeof import("./getPermissionSetAssignments").getPermissionSetAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["getPermissionSetAssignments","getPermissionSetAssignmentsOutput"], () => require("./getPermissionSetAssignments"));

export { GetPermissionSetProvisioningsArgs, GetPermissionSetProvisioningsResult, GetPermissionSetProvisioningsOutputArgs } from "./getPermissionSetProvisionings";
export const getPermissionSetProvisionings: typeof import("./getPermissionSetProvisionings").getPermissionSetProvisionings = null as any;
export const getPermissionSetProvisioningsOutput: typeof import("./getPermissionSetProvisionings").getPermissionSetProvisioningsOutput = null as any;
utilities.lazyLoad(exports, ["getPermissionSetProvisionings","getPermissionSetProvisioningsOutput"], () => require("./getPermissionSetProvisionings"));

export { GetPermissionSetsArgs, GetPermissionSetsResult, GetPermissionSetsOutputArgs } from "./getPermissionSets";
export const getPermissionSets: typeof import("./getPermissionSets").getPermissionSets = null as any;
export const getPermissionSetsOutput: typeof import("./getPermissionSets").getPermissionSetsOutput = null as any;
utilities.lazyLoad(exports, ["getPermissionSets","getPermissionSetsOutput"], () => require("./getPermissionSets"));

export { GetUserProvisioningsArgs, GetUserProvisioningsResult, GetUserProvisioningsOutputArgs } from "./getUserProvisionings";
export const getUserProvisionings: typeof import("./getUserProvisionings").getUserProvisionings = null as any;
export const getUserProvisioningsOutput: typeof import("./getUserProvisionings").getUserProvisioningsOutput = null as any;
utilities.lazyLoad(exports, ["getUserProvisionings","getUserProvisioningsOutput"], () => require("./getUserProvisionings"));

export { GetUsersArgs, GetUsersResult, GetUsersOutputArgs } from "./getUsers";
export const getUsers: typeof import("./getUsers").getUsers = null as any;
export const getUsersOutput: typeof import("./getUsers").getUsersOutput = null as any;
utilities.lazyLoad(exports, ["getUsers","getUsersOutput"], () => require("./getUsers"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GroupsArgs, GroupsResult, GroupsOutputArgs } from "./groups";
export const groups: typeof import("./groups").groups = null as any;
export const groupsOutput: typeof import("./groups").groupsOutput = null as any;
utilities.lazyLoad(exports, ["groups","groupsOutput"], () => require("./groups"));

export { PermissionSetArgs, PermissionSetState } from "./permissionSet";
export type PermissionSet = import("./permissionSet").PermissionSet;
export const PermissionSet: typeof import("./permissionSet").PermissionSet = null as any;
utilities.lazyLoad(exports, ["PermissionSet"], () => require("./permissionSet"));

export { PermissionSetAssignmentArgs, PermissionSetAssignmentState } from "./permissionSetAssignment";
export type PermissionSetAssignment = import("./permissionSetAssignment").PermissionSetAssignment;
export const PermissionSetAssignment: typeof import("./permissionSetAssignment").PermissionSetAssignment = null as any;
utilities.lazyLoad(exports, ["PermissionSetAssignment"], () => require("./permissionSetAssignment"));

export { PermissionSetAssignmentsArgs, PermissionSetAssignmentsResult, PermissionSetAssignmentsOutputArgs } from "./permissionSetAssignments";
export const permissionSetAssignments: typeof import("./permissionSetAssignments").permissionSetAssignments = null as any;
export const permissionSetAssignmentsOutput: typeof import("./permissionSetAssignments").permissionSetAssignmentsOutput = null as any;
utilities.lazyLoad(exports, ["permissionSetAssignments","permissionSetAssignmentsOutput"], () => require("./permissionSetAssignments"));

export { PermissionSetProvisioningArgs, PermissionSetProvisioningState } from "./permissionSetProvisioning";
export type PermissionSetProvisioning = import("./permissionSetProvisioning").PermissionSetProvisioning;
export const PermissionSetProvisioning: typeof import("./permissionSetProvisioning").PermissionSetProvisioning = null as any;
utilities.lazyLoad(exports, ["PermissionSetProvisioning"], () => require("./permissionSetProvisioning"));

export { PermissionSetProvisioningsArgs, PermissionSetProvisioningsResult, PermissionSetProvisioningsOutputArgs } from "./permissionSetProvisionings";
export const permissionSetProvisionings: typeof import("./permissionSetProvisionings").permissionSetProvisionings = null as any;
export const permissionSetProvisioningsOutput: typeof import("./permissionSetProvisionings").permissionSetProvisioningsOutput = null as any;
utilities.lazyLoad(exports, ["permissionSetProvisionings","permissionSetProvisioningsOutput"], () => require("./permissionSetProvisionings"));

export { PermissionSetsArgs, PermissionSetsResult, PermissionSetsOutputArgs } from "./permissionSets";
export const permissionSets: typeof import("./permissionSets").permissionSets = null as any;
export const permissionSetsOutput: typeof import("./permissionSets").permissionSetsOutput = null as any;
utilities.lazyLoad(exports, ["permissionSets","permissionSetsOutput"], () => require("./permissionSets"));

export { UserArgs, UserState } from "./user";
export type User = import("./user").User;
export const User: typeof import("./user").User = null as any;
utilities.lazyLoad(exports, ["User"], () => require("./user"));

export { UserAttachmentArgs, UserAttachmentState } from "./userAttachment";
export type UserAttachment = import("./userAttachment").UserAttachment;
export const UserAttachment: typeof import("./userAttachment").UserAttachment = null as any;
utilities.lazyLoad(exports, ["UserAttachment"], () => require("./userAttachment"));

export { UserProvisioningArgs, UserProvisioningState } from "./userProvisioning";
export type UserProvisioning = import("./userProvisioning").UserProvisioning;
export const UserProvisioning: typeof import("./userProvisioning").UserProvisioning = null as any;
utilities.lazyLoad(exports, ["UserProvisioning"], () => require("./userProvisioning"));

export { UserProvisioningsArgs, UserProvisioningsResult, UserProvisioningsOutputArgs } from "./userProvisionings";
export const userProvisionings: typeof import("./userProvisionings").userProvisionings = null as any;
export const userProvisioningsOutput: typeof import("./userProvisionings").userProvisioningsOutput = null as any;
utilities.lazyLoad(exports, ["userProvisionings","userProvisioningsOutput"], () => require("./userProvisionings"));

export { UsersArgs, UsersResult, UsersOutputArgs } from "./users";
export const users: typeof import("./users").users = null as any;
export const usersOutput: typeof import("./users").usersOutput = null as any;
utilities.lazyLoad(exports, ["users","usersOutput"], () => require("./users"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:cloud_identity/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "volcengine:cloud_identity/permissionSet:PermissionSet":
                return new PermissionSet(name, <any>undefined, { urn })
            case "volcengine:cloud_identity/permissionSetAssignment:PermissionSetAssignment":
                return new PermissionSetAssignment(name, <any>undefined, { urn })
            case "volcengine:cloud_identity/permissionSetProvisioning:PermissionSetProvisioning":
                return new PermissionSetProvisioning(name, <any>undefined, { urn })
            case "volcengine:cloud_identity/user:User":
                return new User(name, <any>undefined, { urn })
            case "volcengine:cloud_identity/userAttachment:UserAttachment":
                return new UserAttachment(name, <any>undefined, { urn })
            case "volcengine:cloud_identity/userProvisioning:UserProvisioning":
                return new UserProvisioning(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "cloud_identity/group", _module)
pulumi.runtime.registerResourceModule("volcengine", "cloud_identity/permissionSet", _module)
pulumi.runtime.registerResourceModule("volcengine", "cloud_identity/permissionSetAssignment", _module)
pulumi.runtime.registerResourceModule("volcengine", "cloud_identity/permissionSetProvisioning", _module)
pulumi.runtime.registerResourceModule("volcengine", "cloud_identity/user", _module)
pulumi.runtime.registerResourceModule("volcengine", "cloud_identity/userAttachment", _module)
pulumi.runtime.registerResourceModule("volcengine", "cloud_identity/userProvisioning", _module)
