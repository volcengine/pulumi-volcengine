// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vpc
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vpc.Vpc("foo", {
 *     cidrBlock: "172.16.0.0/16",
 *     dnsServers: [
 *         "8.8.8.8",
 *         "114.114.114.114",
 *     ],
 *     projectName: "AS_test",
 *     vpcName: "tf-project-1",
 * });
 * ```
 *
 * ## Import
 *
 * VPC can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:vpc/vpc:Vpc default vpc-mizl7m1kqccg5smt1bdpijuj
 * ```
 */
export class Vpc extends pulumi.CustomResource {
    /**
     * Get an existing Vpc resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VpcState, opts?: pulumi.CustomResourceOptions): Vpc {
        return new Vpc(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vpc/vpc:Vpc';

    /**
     * Returns true if the given object is an instance of Vpc.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Vpc {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Vpc.__pulumiType;
    }

    /**
     * The account ID of VPC.
     */
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * The associate cen list of VPC.
     */
    public /*out*/ readonly associateCens!: pulumi.Output<outputs.vpc.VpcAssociateCen[]>;
    /**
     * The auxiliary cidr block list of VPC.
     */
    public /*out*/ readonly auxiliaryCidrBlocks!: pulumi.Output<string[]>;
    /**
     * A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * Creation time of VPC.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The description of the VPC.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
     */
    public readonly dnsServers!: pulumi.Output<string[] | undefined>;
    /**
     * Specifies whether to enable the IPv6 CIDR block of the VPC.
     */
    public readonly enableIpv6!: pulumi.Output<boolean>;
    /**
     * The IPv6 CIDR block of the VPC.
     */
    public readonly ipv6CidrBlock!: pulumi.Output<string>;
    /**
     * The nat gateway ID list of VPC.
     */
    public /*out*/ readonly natGatewayIds!: pulumi.Output<string[]>;
    /**
     * The ProjectName of the VPC.
     */
    public readonly projectName!: pulumi.Output<string | undefined>;
    /**
     * The route table ID list of VPC.
     */
    public /*out*/ readonly routeTableIds!: pulumi.Output<string[]>;
    /**
     * The security group ID list of VPC.
     */
    public /*out*/ readonly securityGroupIds!: pulumi.Output<string[]>;
    /**
     * Status of VPC.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The subnet ID list of VPC.
     */
    public /*out*/ readonly subnetIds!: pulumi.Output<string[]>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.vpc.VpcTag[] | undefined>;
    /**
     * The update time of VPC.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The ID of VPC.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;
    /**
     * The name of the VPC.
     */
    public readonly vpcName!: pulumi.Output<string>;

    /**
     * Create a Vpc resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VpcArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VpcArgs | VpcState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VpcState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["associateCens"] = state ? state.associateCens : undefined;
            resourceInputs["auxiliaryCidrBlocks"] = state ? state.auxiliaryCidrBlocks : undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dnsServers"] = state ? state.dnsServers : undefined;
            resourceInputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["natGatewayIds"] = state ? state.natGatewayIds : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["routeTableIds"] = state ? state.routeTableIds : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetIds"] = state ? state.subnetIds : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["vpcName"] = state ? state.vpcName : undefined;
        } else {
            const args = argsOrState as VpcArgs | undefined;
            if ((!args || args.cidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrBlock'");
            }
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dnsServers"] = args ? args.dnsServers : undefined;
            resourceInputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            resourceInputs["ipv6CidrBlock"] = args ? args.ipv6CidrBlock : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["vpcName"] = args ? args.vpcName : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["associateCens"] = undefined /*out*/;
            resourceInputs["auxiliaryCidrBlocks"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["natGatewayIds"] = undefined /*out*/;
            resourceInputs["routeTableIds"] = undefined /*out*/;
            resourceInputs["securityGroupIds"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subnetIds"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Vpc.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Vpc resources.
 */
export interface VpcState {
    /**
     * The account ID of VPC.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The associate cen list of VPC.
     */
    associateCens?: pulumi.Input<pulumi.Input<inputs.vpc.VpcAssociateCen>[]>;
    /**
     * The auxiliary cidr block list of VPC.
     */
    auxiliaryCidrBlocks?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * Creation time of VPC.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The description of the VPC.
     */
    description?: pulumi.Input<string>;
    /**
     * The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to enable the IPv6 CIDR block of the VPC.
     */
    enableIpv6?: pulumi.Input<boolean>;
    /**
     * The IPv6 CIDR block of the VPC.
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * The nat gateway ID list of VPC.
     */
    natGatewayIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ProjectName of the VPC.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The route table ID list of VPC.
     */
    routeTableIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The security group ID list of VPC.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Status of VPC.
     */
    status?: pulumi.Input<string>;
    /**
     * The subnet ID list of VPC.
     */
    subnetIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vpc.VpcTag>[]>;
    /**
     * The update time of VPC.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The ID of VPC.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * The name of the VPC.
     */
    vpcName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Vpc resource.
 */
export interface VpcArgs {
    /**
     * A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
     */
    cidrBlock: pulumi.Input<string>;
    /**
     * The description of the VPC.
     */
    description?: pulumi.Input<string>;
    /**
     * The DNS server list of the VPC. And you can specify 0 to 5 servers to this list.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specifies whether to enable the IPv6 CIDR block of the VPC.
     */
    enableIpv6?: pulumi.Input<boolean>;
    /**
     * The IPv6 CIDR block of the VPC.
     */
    ipv6CidrBlock?: pulumi.Input<string>;
    /**
     * The ProjectName of the VPC.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vpc.VpcTag>[]>;
    /**
     * The name of the VPC.
     */
    vpcName?: pulumi.Input<string>;
}
