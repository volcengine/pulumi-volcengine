// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage route entry
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vpc.RouteEntry("foo", {
 *     description: "tf-test-up",
 *     destinationCidrBlock: "0.0.0.0/2",
 *     nextHopId: "ngw-274gwbqe340zk7fap8spkzo7x",
 *     nextHopType: "NatGW",
 *     routeEntryName: "tf-test-up",
 *     routeTableId: "vtb-2744hslq5b7r47fap8tjomgnj",
 * });
 * ```
 *
 * ## Import
 *
 * Route entry can be imported using the route_table_id:route_entry_id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:vpc/routeEntry:RouteEntry default vtb-274e19skkuhog7fap8u4i8ird:rte-274e1g9ei4k5c7fap8sp974fq
 * ```
 */
export class RouteEntry extends pulumi.CustomResource {
    /**
     * Get an existing RouteEntry resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RouteEntryState, opts?: pulumi.CustomResourceOptions): RouteEntry {
        return new RouteEntry(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vpc/routeEntry:RouteEntry';

    /**
     * Returns true if the given object is an instance of RouteEntry.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RouteEntry {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RouteEntry.__pulumiType;
    }

    /**
     * The description of the route entry.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The destination CIDR block of the route entry.
     */
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    /**
     * The id of the next hop.
     */
    public readonly nextHopId!: pulumi.Output<string>;
    /**
     * The type of the next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`, `TransitRouter`.
     */
    public readonly nextHopType!: pulumi.Output<string>;
    /**
     * The id of the route entry.
     */
    public /*out*/ readonly routeEntryId!: pulumi.Output<string>;
    /**
     * The name of the route entry.
     */
    public readonly routeEntryName!: pulumi.Output<string | undefined>;
    /**
     * The id of the route table.
     */
    public readonly routeTableId!: pulumi.Output<string>;
    /**
     * The description of the route entry.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a RouteEntry resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RouteEntryArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RouteEntryArgs | RouteEntryState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RouteEntryState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["nextHopId"] = state ? state.nextHopId : undefined;
            resourceInputs["nextHopType"] = state ? state.nextHopType : undefined;
            resourceInputs["routeEntryId"] = state ? state.routeEntryId : undefined;
            resourceInputs["routeEntryName"] = state ? state.routeEntryName : undefined;
            resourceInputs["routeTableId"] = state ? state.routeTableId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as RouteEntryArgs | undefined;
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.nextHopId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHopId'");
            }
            if ((!args || args.nextHopType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHopType'");
            }
            if ((!args || args.routeTableId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeTableId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["nextHopId"] = args ? args.nextHopId : undefined;
            resourceInputs["nextHopType"] = args ? args.nextHopType : undefined;
            resourceInputs["routeEntryName"] = args ? args.routeEntryName : undefined;
            resourceInputs["routeTableId"] = args ? args.routeTableId : undefined;
            resourceInputs["routeEntryId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RouteEntry.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering RouteEntry resources.
 */
export interface RouteEntryState {
    /**
     * The description of the route entry.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination CIDR block of the route entry.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * The id of the next hop.
     */
    nextHopId?: pulumi.Input<string>;
    /**
     * The type of the next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`, `TransitRouter`.
     */
    nextHopType?: pulumi.Input<string>;
    /**
     * The id of the route entry.
     */
    routeEntryId?: pulumi.Input<string>;
    /**
     * The name of the route entry.
     */
    routeEntryName?: pulumi.Input<string>;
    /**
     * The id of the route table.
     */
    routeTableId?: pulumi.Input<string>;
    /**
     * The description of the route entry.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RouteEntry resource.
 */
export interface RouteEntryArgs {
    /**
     * The description of the route entry.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination CIDR block of the route entry.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * The id of the next hop.
     */
    nextHopId: pulumi.Input<string>;
    /**
     * The type of the next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`, `TransitRouter`.
     */
    nextHopType: pulumi.Input<string>;
    /**
     * The name of the route entry.
     */
    routeEntryName?: pulumi.Input<string>;
    /**
     * The id of the route table.
     */
    routeTableId: pulumi.Input<string>;
}
