// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of flow logs
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.vpc.getFlowLogs({
 *     flowLogIds: ["fl-13g4fqngluhog3n6nu57o****"],
 * });
 * ```
 */
/** @deprecated volcengine.vpc.FlowLogs has been deprecated in favor of volcengine.vpc.getFlowLogs */
export function flowLogs(args?: FlowLogsArgs, opts?: pulumi.InvokeOptions): Promise<FlowLogsResult> {
    pulumi.log.warn("flowLogs is deprecated: volcengine.vpc.FlowLogs has been deprecated in favor of volcengine.vpc.getFlowLogs")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vpc/flowLogs:FlowLogs", {
        "aggregationInterval": args.aggregationInterval,
        "description": args.description,
        "flowLogIds": args.flowLogIds,
        "flowLogName": args.flowLogName,
        "logProjectId": args.logProjectId,
        "logTopicId": args.logTopicId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "resourceId": args.resourceId,
        "resourceType": args.resourceType,
        "status": args.status,
        "tags": args.tags,
        "trafficType": args.trafficType,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking FlowLogs.
 */
export interface FlowLogsArgs {
    /**
     * The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
     */
    aggregationInterval?: number;
    /**
     * The description of flow log.
     */
    description?: string;
    /**
     * A list of flow log IDs.
     */
    flowLogIds?: string[];
    /**
     * The name of flow log.
     */
    flowLogName?: string;
    /**
     * The ID of log project.
     */
    logProjectId?: string;
    /**
     * The ID of log topic.
     */
    logTopicId?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of flow log.
     */
    projectName?: string;
    /**
     * The ID of resource.
     */
    resourceId?: string;
    /**
     * The type of resource. Valid values: `vpc`, `subnet`, `eni`.
     */
    resourceType?: string;
    /**
     * The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
     */
    status?: string;
    /**
     * Tags.
     */
    tags?: inputs.vpc.FlowLogsTag[];
    /**
     * The type of traffic. Valid values: `All`, `Allow`, `Drop`.
     */
    trafficType?: string;
    /**
     * The ID of VPC.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by FlowLogs.
 */
export interface FlowLogsResult {
    /**
     * The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
     */
    readonly aggregationInterval?: number;
    /**
     * The description of flow log.
     */
    readonly description?: string;
    readonly flowLogIds?: string[];
    /**
     * The name of flow log.
     */
    readonly flowLogName?: string;
    /**
     * The collection of query.
     */
    readonly flowLogs: outputs.vpc.FlowLogsFlowLog[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The ID of log project.
     */
    readonly logProjectId?: string;
    /**
     * The ID of log topic.
     */
    readonly logTopicId?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The project name of flow log.
     */
    readonly projectName?: string;
    /**
     * The ID of resource.
     */
    readonly resourceId?: string;
    /**
     * The type of resource. Valid values: `vpc`, `subnet`, `eni`.
     */
    readonly resourceType?: string;
    /**
     * The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
     */
    readonly status?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.vpc.FlowLogsTag[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    /**
     * The type of traffic. Valid values: `All`, `Allow`, `Drop`.
     */
    readonly trafficType?: string;
    /**
     * The ID of VPC.
     */
    readonly vpcId?: string;
}
/**
 * Use this data source to query detailed information of flow logs
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.vpc.getFlowLogs({
 *     flowLogIds: ["fl-13g4fqngluhog3n6nu57o****"],
 * });
 * ```
 */
/** @deprecated volcengine.vpc.FlowLogs has been deprecated in favor of volcengine.vpc.getFlowLogs */
export function flowLogsOutput(args?: FlowLogsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<FlowLogsResult> {
    return pulumi.output(args).apply((a: any) => flowLogs(a, opts))
}

/**
 * A collection of arguments for invoking FlowLogs.
 */
export interface FlowLogsOutputArgs {
    /**
     * The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
     */
    aggregationInterval?: pulumi.Input<number>;
    /**
     * The description of flow log.
     */
    description?: pulumi.Input<string>;
    /**
     * A list of flow log IDs.
     */
    flowLogIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of flow log.
     */
    flowLogName?: pulumi.Input<string>;
    /**
     * The ID of log project.
     */
    logProjectId?: pulumi.Input<string>;
    /**
     * The ID of log topic.
     */
    logTopicId?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of flow log.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The ID of resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The type of resource. Valid values: `vpc`, `subnet`, `eni`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The status of flow log. Valid values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vpc.FlowLogsTagArgs>[]>;
    /**
     * The type of traffic. Valid values: `All`, `Allow`, `Drop`.
     */
    trafficType?: pulumi.Input<string>;
    /**
     * The ID of VPC.
     */
    vpcId?: pulumi.Input<string>;
}
