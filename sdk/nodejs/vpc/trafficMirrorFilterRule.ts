// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage traffic mirror filter rule
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vpc.TrafficMirrorFilter("foo", {
 *     trafficMirrorFilterName: "acc-test-traffic-mirror-filter",
 *     description: "acc-test",
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const foo_ingress = new volcengine.vpc.TrafficMirrorFilterRule("foo-ingress", {
 *     trafficMirrorFilterId: foo.id,
 *     trafficDirection: "ingress",
 *     description: "acc-test",
 *     priority: 1,
 *     policy: "reject",
 *     protocol: "all",
 *     sourceCidrBlock: "10.0.1.0/24",
 *     sourcePortRange: "-1/-1",
 *     destinationCidrBlock: "10.0.0.0/24",
 *     destinationPortRange: "-1/-1",
 * });
 * const foo_egress = new volcengine.vpc.TrafficMirrorFilterRule("foo-egress", {
 *     trafficMirrorFilterId: foo.id,
 *     trafficDirection: "egress",
 *     description: "acc-test",
 *     priority: 2,
 *     policy: "reject",
 *     protocol: "tcp",
 *     sourceCidrBlock: "10.0.1.0/24",
 *     sourcePortRange: "80/80",
 *     destinationCidrBlock: "10.0.0.0/24",
 *     destinationPortRange: "88/90",
 * });
 * ```
 *
 * ## Import
 *
 * TrafficMirrorFilterRule can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:vpc/trafficMirrorFilterRule:TrafficMirrorFilterRule default resource_id
 * ```
 */
export class TrafficMirrorFilterRule extends pulumi.CustomResource {
    /**
     * Get an existing TrafficMirrorFilterRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TrafficMirrorFilterRuleState, opts?: pulumi.CustomResourceOptions): TrafficMirrorFilterRule {
        return new TrafficMirrorFilterRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vpc/trafficMirrorFilterRule:TrafficMirrorFilterRule';

    /**
     * Returns true if the given object is an instance of TrafficMirrorFilterRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is TrafficMirrorFilterRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorFilterRule.__pulumiType;
    }

    /**
     * The create time of traffic mirror filter rule.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of traffic mirror filter rule.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The destination cidr block of traffic mirror filter rule.
     */
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    /**
     * The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
     * When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
     */
    public readonly destinationPortRange!: pulumi.Output<string>;
    /**
     * The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
     */
    public readonly policy!: pulumi.Output<string>;
    /**
     * The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
     */
    public readonly priority!: pulumi.Output<number>;
    /**
     * The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The source cidr block of traffic mirror filter rule.
     */
    public readonly sourceCidrBlock!: pulumi.Output<string>;
    /**
     * The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
     * When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
     */
    public readonly sourcePortRange!: pulumi.Output<string>;
    /**
     * The status of traffic mirror filter rule.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
     */
    public readonly trafficDirection!: pulumi.Output<string>;
    /**
     * The ID of traffic mirror filter.
     */
    public readonly trafficMirrorFilterId!: pulumi.Output<string>;
    /**
     * The ID of traffic mirror filter rule.
     */
    public /*out*/ readonly trafficMirrorFilterRuleId!: pulumi.Output<string>;
    /**
     * The last update time of traffic mirror filter rule.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a TrafficMirrorFilterRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TrafficMirrorFilterRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TrafficMirrorFilterRuleArgs | TrafficMirrorFilterRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as TrafficMirrorFilterRuleState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["destinationPortRange"] = state ? state.destinationPortRange : undefined;
            resourceInputs["policy"] = state ? state.policy : undefined;
            resourceInputs["priority"] = state ? state.priority : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["sourceCidrBlock"] = state ? state.sourceCidrBlock : undefined;
            resourceInputs["sourcePortRange"] = state ? state.sourcePortRange : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["trafficDirection"] = state ? state.trafficDirection : undefined;
            resourceInputs["trafficMirrorFilterId"] = state ? state.trafficMirrorFilterId : undefined;
            resourceInputs["trafficMirrorFilterRuleId"] = state ? state.trafficMirrorFilterRuleId : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as TrafficMirrorFilterRuleArgs | undefined;
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.sourceCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceCidrBlock'");
            }
            if ((!args || args.trafficDirection === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficDirection'");
            }
            if ((!args || args.trafficMirrorFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["destinationPortRange"] = args ? args.destinationPortRange : undefined;
            resourceInputs["policy"] = args ? args.policy : undefined;
            resourceInputs["priority"] = args ? args.priority : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["sourceCidrBlock"] = args ? args.sourceCidrBlock : undefined;
            resourceInputs["sourcePortRange"] = args ? args.sourcePortRange : undefined;
            resourceInputs["trafficDirection"] = args ? args.trafficDirection : undefined;
            resourceInputs["trafficMirrorFilterId"] = args ? args.trafficMirrorFilterId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["trafficMirrorFilterRuleId"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(TrafficMirrorFilterRule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TrafficMirrorFilterRule resources.
 */
export interface TrafficMirrorFilterRuleState {
    /**
     * The create time of traffic mirror filter rule.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of traffic mirror filter rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination cidr block of traffic mirror filter rule.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
     * When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
     */
    destinationPortRange?: pulumi.Input<string>;
    /**
     * The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
     */
    policy?: pulumi.Input<string>;
    /**
     * The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
     */
    priority?: pulumi.Input<number>;
    /**
     * The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The source cidr block of traffic mirror filter rule.
     */
    sourceCidrBlock?: pulumi.Input<string>;
    /**
     * The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
     * When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
     */
    sourcePortRange?: pulumi.Input<string>;
    /**
     * The status of traffic mirror filter rule.
     */
    status?: pulumi.Input<string>;
    /**
     * The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
     */
    trafficDirection?: pulumi.Input<string>;
    /**
     * The ID of traffic mirror filter.
     */
    trafficMirrorFilterId?: pulumi.Input<string>;
    /**
     * The ID of traffic mirror filter rule.
     */
    trafficMirrorFilterRuleId?: pulumi.Input<string>;
    /**
     * The last update time of traffic mirror filter rule.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TrafficMirrorFilterRule resource.
 */
export interface TrafficMirrorFilterRuleArgs {
    /**
     * The description of traffic mirror filter rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The destination cidr block of traffic mirror filter rule.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * The destination port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
     * When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
     */
    destinationPortRange?: pulumi.Input<string>;
    /**
     * The policy of traffic mirror filter rule. Valid values: `accept`, `reject`.
     */
    policy: pulumi.Input<string>;
    /**
     * The priority of traffic mirror filter rule. Valid values: 1~1000. Default value is 1.
     */
    priority?: pulumi.Input<number>;
    /**
     * The protocol of traffic mirror filter rule. Valid values: `tcp`, `udp`, `icmp`, `all`.
     */
    protocol: pulumi.Input<string>;
    /**
     * The source cidr block of traffic mirror filter rule.
     */
    sourceCidrBlock: pulumi.Input<string>;
    /**
     * The source port range of traffic mirror filter rule. When the protocol is `all` or `icmp`, the value is `-1/-1`. 
     * When the protocol is `tcp` or `udp`, the value can be `1/200`, `80/80`, which means port 1 to port 200, port 80.
     */
    sourcePortRange?: pulumi.Input<string>;
    /**
     * The traffic direction of traffic mirror filter rule. Valid values: `ingress`; `egress`.
     */
    trafficDirection: pulumi.Input<string>;
    /**
     * The ID of traffic mirror filter.
     */
    trafficMirrorFilterId: pulumi.Input<string>;
}
