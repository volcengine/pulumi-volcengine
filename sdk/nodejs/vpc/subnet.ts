// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage subnet
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vpc.Subnet("foo", {
 *     cidrBlock: "192.168.1.0/24",
 *     subnetName: "subnet-test-2",
 *     vpcId: "vpc-2749wnlhro3y87fap8u5ztvt5",
 *     zoneId: "cn-beijing",
 * });
 * ```
 *
 * ## Import
 *
 * Subnet can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:vpc/subnet:Subnet default subnet-274oj9a8rs9a87fap8sf9515b
 * ```
 */
export class Subnet extends pulumi.CustomResource {
    /**
     * Get an existing Subnet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SubnetState, opts?: pulumi.CustomResourceOptions): Subnet {
        return new Subnet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vpc/subnet:Subnet';

    /**
     * Returns true if the given object is an instance of Subnet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Subnet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Subnet.__pulumiType;
    }

    /**
     * A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * Creation time of Subnet.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The description of the Subnet.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.
     */
    public readonly enableIpv6!: pulumi.Output<boolean>;
    /**
     * The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.
     */
    public readonly ipv6CidrBlock!: pulumi.Output<number>;
    /**
     * Status of Subnet.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The name of the Subnet.
     */
    public readonly subnetName!: pulumi.Output<string>;
    /**
     * Id of the VPC.
     */
    public readonly vpcId!: pulumi.Output<string>;
    /**
     * Id of the Zone.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a Subnet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SubnetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SubnetArgs | SubnetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SubnetState | undefined;
            resourceInputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableIpv6"] = state ? state.enableIpv6 : undefined;
            resourceInputs["ipv6CidrBlock"] = state ? state.ipv6CidrBlock : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetName"] = state ? state.subnetName : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as SubnetArgs | undefined;
            if ((!args || args.cidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cidrBlock'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            resourceInputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableIpv6"] = args ? args.enableIpv6 : undefined;
            resourceInputs["ipv6CidrBlock"] = args ? args.ipv6CidrBlock : undefined;
            resourceInputs["subnetName"] = args ? args.subnetName : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Subnet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Subnet resources.
 */
export interface SubnetState {
    /**
     * A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
     */
    cidrBlock?: pulumi.Input<string>;
    /**
     * Creation time of Subnet.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The description of the Subnet.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.
     */
    enableIpv6?: pulumi.Input<boolean>;
    /**
     * The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.
     */
    ipv6CidrBlock?: pulumi.Input<number>;
    /**
     * Status of Subnet.
     */
    status?: pulumi.Input<string>;
    /**
     * The name of the Subnet.
     */
    subnetName?: pulumi.Input<string>;
    /**
     * Id of the VPC.
     */
    vpcId?: pulumi.Input<string>;
    /**
     * Id of the Zone.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Subnet resource.
 */
export interface SubnetArgs {
    /**
     * A network address block which should be a subnet of the three internal network segments (10.0.0.0/16, 172.16.0.0/12 and 192.168.0.0/16).
     */
    cidrBlock: pulumi.Input<string>;
    /**
     * The description of the Subnet.
     */
    description?: pulumi.Input<string>;
    /**
     * Specifies whether to enable the IPv6 CIDR block of the Subnet. This field is only valid when modifying the Subnet.
     */
    enableIpv6?: pulumi.Input<boolean>;
    /**
     * The last eight bits of the IPv6 CIDR block of the Subnet. Valid values: 0 - 255.
     */
    ipv6CidrBlock?: pulumi.Input<number>;
    /**
     * The name of the Subnet.
     */
    subnetName?: pulumi.Input<string>;
    /**
     * Id of the VPC.
     */
    vpcId: pulumi.Input<string>;
    /**
     * Id of the Zone.
     */
    zoneId: pulumi.Input<string>;
}
