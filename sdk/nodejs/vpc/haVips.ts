// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of ha vips
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooHaVip = new volcengine.vpc.HaVip("fooHaVip", {
 *     haVipName: "acc-test-ha-vip",
 *     description: "acc-test",
 *     subnetId: fooSubnet.id,
 * });
 * //  ip_address = "172.16.0.5"
 * const fooHaVips = volcengine.vpc.getHaVipsOutput({
 *     ids: [fooHaVip.id],
 * });
 * ```
 */
/** @deprecated volcengine.vpc.HaVips has been deprecated in favor of volcengine.vpc.getHaVips */
export function haVips(args?: HaVipsArgs, opts?: pulumi.InvokeOptions): Promise<HaVipsResult> {
    pulumi.log.warn("haVips is deprecated: volcengine.vpc.HaVips has been deprecated in favor of volcengine.vpc.getHaVips")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vpc/haVips:HaVips", {
        "haVipName": args.haVipName,
        "ids": args.ids,
        "ipAddress": args.ipAddress,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "status": args.status,
        "subnetId": args.subnetId,
        "tags": args.tags,
        "vpcId": args.vpcId,
    }, opts);
}

/**
 * A collection of arguments for invoking HaVips.
 */
export interface HaVipsArgs {
    /**
     * The name of Ha Vip.
     */
    haVipName?: string;
    /**
     * A list of Ha Vip IDs.
     */
    ids?: string[];
    /**
     * The ip address of Ha Vip.
     */
    ipAddress?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of Ha Vip.
     */
    projectName?: string;
    /**
     * The status of Ha Vip.
     */
    status?: string;
    /**
     * The id of subnet.
     */
    subnetId?: string;
    /**
     * Tags.
     */
    tags?: inputs.vpc.HaVipsTag[];
    /**
     * The id of vpc.
     */
    vpcId?: string;
}

/**
 * A collection of values returned by HaVips.
 */
export interface HaVipsResult {
    /**
     * The name of the Ha Vip.
     */
    readonly haVipName?: string;
    /**
     * The collection of query.
     */
    readonly haVips: outputs.vpc.HaVipsHaVip[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The ip address of the Ha Vip.
     */
    readonly ipAddress?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The project name of the Ha Vip.
     */
    readonly projectName?: string;
    /**
     * The status of the Ha Vip.
     */
    readonly status?: string;
    /**
     * The subnet id of the Ha Vip.
     */
    readonly subnetId?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.vpc.HaVipsTag[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    /**
     * The vpc id of the Ha Vip.
     */
    readonly vpcId?: string;
}
/**
 * Use this data source to query detailed information of ha vips
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooHaVip = new volcengine.vpc.HaVip("fooHaVip", {
 *     haVipName: "acc-test-ha-vip",
 *     description: "acc-test",
 *     subnetId: fooSubnet.id,
 * });
 * //  ip_address = "172.16.0.5"
 * const fooHaVips = volcengine.vpc.getHaVipsOutput({
 *     ids: [fooHaVip.id],
 * });
 * ```
 */
/** @deprecated volcengine.vpc.HaVips has been deprecated in favor of volcengine.vpc.getHaVips */
export function haVipsOutput(args?: HaVipsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<HaVipsResult> {
    return pulumi.output(args).apply((a: any) => haVips(a, opts))
}

/**
 * A collection of arguments for invoking HaVips.
 */
export interface HaVipsOutputArgs {
    /**
     * The name of Ha Vip.
     */
    haVipName?: pulumi.Input<string>;
    /**
     * A list of Ha Vip IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ip address of Ha Vip.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of Ha Vip.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The status of Ha Vip.
     */
    status?: pulumi.Input<string>;
    /**
     * The id of subnet.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vpc.HaVipsTagArgs>[]>;
    /**
     * The id of vpc.
     */
    vpcId?: pulumi.Input<string>;
}
