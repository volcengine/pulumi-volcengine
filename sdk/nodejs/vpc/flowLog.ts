// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage flow log
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 *     projectName: "default",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooFlowLog = new volcengine.vpc.FlowLog("fooFlowLog", {
 *     flowLogName: "acc-test-flow-log",
 *     description: "acc-test",
 *     resourceType: "subnet",
 *     resourceId: fooSubnet.id,
 *     trafficType: "All",
 *     logProjectName: "acc-test-project",
 *     logTopicName: "acc-test-topic",
 *     aggregationInterval: 10,
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * FlowLog can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:vpc/flowLog:FlowLog default resource_id
 * ```
 */
export class FlowLog extends pulumi.CustomResource {
    /**
     * Get an existing FlowLog resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FlowLogState, opts?: pulumi.CustomResourceOptions): FlowLog {
        return new FlowLog(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vpc/flowLog:FlowLog';

    /**
     * Returns true if the given object is an instance of FlowLog.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FlowLog {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FlowLog.__pulumiType;
    }

    /**
     * The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
     */
    public readonly aggregationInterval!: pulumi.Output<number>;
    /**
     * The business status of flow log.
     */
    public /*out*/ readonly businessStatus!: pulumi.Output<string>;
    /**
     * The created time of flow log.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of flow log.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of flow log.
     */
    public readonly flowLogName!: pulumi.Output<string>;
    /**
     * The reason why flow log is locked.
     */
    public /*out*/ readonly lockReason!: pulumi.Output<string>;
    /**
     * The ID of log project.
     */
    public /*out*/ readonly logProjectId!: pulumi.Output<string>;
    /**
     * The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
     * When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    public readonly logProjectName!: pulumi.Output<string>;
    /**
     * The ID of log topic.
     */
    public /*out*/ readonly logTopicId!: pulumi.Output<string>;
    /**
     * The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
     * When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    public readonly logTopicName!: pulumi.Output<string>;
    /**
     * The project name of flow log.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The ID of resource.
     */
    public readonly resourceId!: pulumi.Output<string>;
    /**
     * The type of resource. Valid values: `vpc`, `subnet`, `eni`.
     */
    public readonly resourceType!: pulumi.Output<string>;
    /**
     * The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.vpc.FlowLogTag[] | undefined>;
    /**
     * The type of traffic. Valid values: `All`, `Allow`, `Drop`.
     */
    public readonly trafficType!: pulumi.Output<string>;
    /**
     * The updated time of flow log.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a FlowLog resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FlowLogArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FlowLogArgs | FlowLogState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FlowLogState | undefined;
            resourceInputs["aggregationInterval"] = state ? state.aggregationInterval : undefined;
            resourceInputs["businessStatus"] = state ? state.businessStatus : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["flowLogName"] = state ? state.flowLogName : undefined;
            resourceInputs["lockReason"] = state ? state.lockReason : undefined;
            resourceInputs["logProjectId"] = state ? state.logProjectId : undefined;
            resourceInputs["logProjectName"] = state ? state.logProjectName : undefined;
            resourceInputs["logTopicId"] = state ? state.logTopicId : undefined;
            resourceInputs["logTopicName"] = state ? state.logTopicName : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["resourceId"] = state ? state.resourceId : undefined;
            resourceInputs["resourceType"] = state ? state.resourceType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["trafficType"] = state ? state.trafficType : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as FlowLogArgs | undefined;
            if ((!args || args.aggregationInterval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'aggregationInterval'");
            }
            if ((!args || args.flowLogName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'flowLogName'");
            }
            if ((!args || args.logProjectName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logProjectName'");
            }
            if ((!args || args.logTopicName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logTopicName'");
            }
            if ((!args || args.resourceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceId'");
            }
            if ((!args || args.resourceType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'resourceType'");
            }
            if ((!args || args.trafficType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficType'");
            }
            resourceInputs["aggregationInterval"] = args ? args.aggregationInterval : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["flowLogName"] = args ? args.flowLogName : undefined;
            resourceInputs["logProjectName"] = args ? args.logProjectName : undefined;
            resourceInputs["logTopicName"] = args ? args.logTopicName : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["resourceId"] = args ? args.resourceId : undefined;
            resourceInputs["resourceType"] = args ? args.resourceType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["trafficType"] = args ? args.trafficType : undefined;
            resourceInputs["businessStatus"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["lockReason"] = undefined /*out*/;
            resourceInputs["logProjectId"] = undefined /*out*/;
            resourceInputs["logTopicId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FlowLog.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FlowLog resources.
 */
export interface FlowLogState {
    /**
     * The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
     */
    aggregationInterval?: pulumi.Input<number>;
    /**
     * The business status of flow log.
     */
    businessStatus?: pulumi.Input<string>;
    /**
     * The created time of flow log.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of flow log.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of flow log.
     */
    flowLogName?: pulumi.Input<string>;
    /**
     * The reason why flow log is locked.
     */
    lockReason?: pulumi.Input<string>;
    /**
     * The ID of log project.
     */
    logProjectId?: pulumi.Input<string>;
    /**
     * The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
     * When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    logProjectName?: pulumi.Input<string>;
    /**
     * The ID of log topic.
     */
    logTopicId?: pulumi.Input<string>;
    /**
     * The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
     * When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    logTopicName?: pulumi.Input<string>;
    /**
     * The project name of flow log.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The ID of resource.
     */
    resourceId?: pulumi.Input<string>;
    /**
     * The type of resource. Valid values: `vpc`, `subnet`, `eni`.
     */
    resourceType?: pulumi.Input<string>;
    /**
     * The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
     */
    status?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vpc.FlowLogTag>[]>;
    /**
     * The type of traffic. Valid values: `All`, `Allow`, `Drop`.
     */
    trafficType?: pulumi.Input<string>;
    /**
     * The updated time of flow log.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FlowLog resource.
 */
export interface FlowLogArgs {
    /**
     * The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
     */
    aggregationInterval: pulumi.Input<number>;
    /**
     * The description of flow log.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of flow log.
     */
    flowLogName: pulumi.Input<string>;
    /**
     * The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
     * When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    logProjectName: pulumi.Input<string>;
    /**
     * The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
     * When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignoreChanges ignore changes in fields.
     */
    logTopicName: pulumi.Input<string>;
    /**
     * The project name of flow log.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The ID of resource.
     */
    resourceId: pulumi.Input<string>;
    /**
     * The type of resource. Valid values: `vpc`, `subnet`, `eni`.
     */
    resourceType: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vpc.FlowLogTag>[]>;
    /**
     * The type of traffic. Valid values: `All`, `Allow`, `Drop`.
     */
    trafficType: pulumi.Input<string>;
}
