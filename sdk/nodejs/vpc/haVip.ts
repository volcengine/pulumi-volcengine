// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage ha vip
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.Zones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooHaVip = new volcengine.vpc.HaVip("fooHaVip", {
 *     haVipName: "acc-test-ha-vip",
 *     description: "acc-test",
 *     subnetId: fooSubnet.id,
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooAddress = new volcengine.eip.Address("fooAddress", {billingType: "PostPaidByTraffic"});
 * const fooAssociate = new volcengine.eip.Associate("fooAssociate", {
 *     allocationId: fooAddress.id,
 *     instanceId: fooHaVip.id,
 *     instanceType: "HaVip",
 * });
 * ```
 *
 * ## Import
 *
 * HaVip can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:vpc/haVip:HaVip default havip-2byzv8icq1b7k2dx0eegb****
 * ```
 */
export class HaVip extends pulumi.CustomResource {
    /**
     * Get an existing HaVip resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HaVipState, opts?: pulumi.CustomResourceOptions): HaVip {
        return new HaVip(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vpc/haVip:HaVip';

    /**
     * Returns true if the given object is an instance of HaVip.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is HaVip {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === HaVip.__pulumiType;
    }

    /**
     * The associated eip address of the Ha Vip.
     */
    public /*out*/ readonly associatedEipAddress!: pulumi.Output<string>;
    /**
     * The associated eip id of the Ha Vip.
     */
    public /*out*/ readonly associatedEipId!: pulumi.Output<string>;
    /**
     * The associated instance ids of the Ha Vip.
     */
    public /*out*/ readonly associatedInstanceIds!: pulumi.Output<string[]>;
    /**
     * The associated instance type of the Ha Vip.
     */
    public /*out*/ readonly associatedInstanceType!: pulumi.Output<string>;
    /**
     * The create time of the Ha Vip.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the Ha Vip.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The name of the Ha Vip.
     */
    public readonly haVipName!: pulumi.Output<string>;
    /**
     * The ip address of the Ha Vip.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * The master instance id of the Ha Vip.
     */
    public /*out*/ readonly masterInstanceId!: pulumi.Output<string>;
    /**
     * The project name of the Ha Vip.
     */
    public /*out*/ readonly projectName!: pulumi.Output<string>;
    /**
     * The status of the Ha Vip.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The subnet id of the Ha Vip.
     */
    public readonly subnetId!: pulumi.Output<string>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.vpc.HaVipTag[] | undefined>;
    /**
     * The update time of the Ha Vip.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The vpc id of the Ha Vip.
     */
    public /*out*/ readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a HaVip resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HaVipArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HaVipArgs | HaVipState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HaVipState | undefined;
            resourceInputs["associatedEipAddress"] = state ? state.associatedEipAddress : undefined;
            resourceInputs["associatedEipId"] = state ? state.associatedEipId : undefined;
            resourceInputs["associatedInstanceIds"] = state ? state.associatedInstanceIds : undefined;
            resourceInputs["associatedInstanceType"] = state ? state.associatedInstanceType : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["haVipName"] = state ? state.haVipName : undefined;
            resourceInputs["ipAddress"] = state ? state.ipAddress : undefined;
            resourceInputs["masterInstanceId"] = state ? state.masterInstanceId : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subnetId"] = state ? state.subnetId : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as HaVipArgs | undefined;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["haVipName"] = args ? args.haVipName : undefined;
            resourceInputs["ipAddress"] = args ? args.ipAddress : undefined;
            resourceInputs["subnetId"] = args ? args.subnetId : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["associatedEipAddress"] = undefined /*out*/;
            resourceInputs["associatedEipId"] = undefined /*out*/;
            resourceInputs["associatedInstanceIds"] = undefined /*out*/;
            resourceInputs["associatedInstanceType"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["masterInstanceId"] = undefined /*out*/;
            resourceInputs["projectName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["vpcId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(HaVip.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering HaVip resources.
 */
export interface HaVipState {
    /**
     * The associated eip address of the Ha Vip.
     */
    associatedEipAddress?: pulumi.Input<string>;
    /**
     * The associated eip id of the Ha Vip.
     */
    associatedEipId?: pulumi.Input<string>;
    /**
     * The associated instance ids of the Ha Vip.
     */
    associatedInstanceIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The associated instance type of the Ha Vip.
     */
    associatedInstanceType?: pulumi.Input<string>;
    /**
     * The create time of the Ha Vip.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the Ha Vip.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Ha Vip.
     */
    haVipName?: pulumi.Input<string>;
    /**
     * The ip address of the Ha Vip.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The master instance id of the Ha Vip.
     */
    masterInstanceId?: pulumi.Input<string>;
    /**
     * The project name of the Ha Vip.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The status of the Ha Vip.
     */
    status?: pulumi.Input<string>;
    /**
     * The subnet id of the Ha Vip.
     */
    subnetId?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vpc.HaVipTag>[]>;
    /**
     * The update time of the Ha Vip.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The vpc id of the Ha Vip.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a HaVip resource.
 */
export interface HaVipArgs {
    /**
     * The description of the Ha Vip.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Ha Vip.
     */
    haVipName?: pulumi.Input<string>;
    /**
     * The ip address of the Ha Vip.
     */
    ipAddress?: pulumi.Input<string>;
    /**
     * The subnet id of the Ha Vip.
     */
    subnetId: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vpc.HaVipTag>[]>;
}
