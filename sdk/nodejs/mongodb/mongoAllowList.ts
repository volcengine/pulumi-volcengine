// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage mongodb allow list
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.mongodb.MongoAllowList("foo", {
 *     allowList: "10.1.1.3,10.2.3.0/24,10.1.1.1",
 *     allowListDesc: "test1",
 *     allowListName: "tf-test-hh",
 *     allowListType: "IPv4",
 * });
 * ```
 *
 * ## Import
 *
 * mongodb allow list can be imported using the allowListId, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:mongodb/mongoAllowList:MongoAllowList default acl-d1fd76693bd54e658912e7337d5b****
 * ```
 */
export class MongoAllowList extends pulumi.CustomResource {
    /**
     * Get an existing MongoAllowList resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MongoAllowListState, opts?: pulumi.CustomResourceOptions): MongoAllowList {
        return new MongoAllowList(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:mongodb/mongoAllowList:MongoAllowList';

    /**
     * Returns true if the given object is an instance of MongoAllowList.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MongoAllowList {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MongoAllowList.__pulumiType;
    }

    /**
     * IP address or IP address segment in CIDR format.
     */
    public readonly allowList!: pulumi.Output<string>;
    /**
     * The description of allow list.
     */
    public readonly allowListDesc!: pulumi.Output<string>;
    /**
     * The name of allow list.
     */
    public readonly allowListName!: pulumi.Output<string>;
    /**
     * The IP address type of allow list, valid value contains `IPv4`.
     */
    public readonly allowListType!: pulumi.Output<string | undefined>;
    /**
     * The modify mode. Only support Cover mode.
     */
    public readonly modifyMode!: pulumi.Output<string | undefined>;

    /**
     * Create a MongoAllowList resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MongoAllowListArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MongoAllowListArgs | MongoAllowListState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MongoAllowListState | undefined;
            resourceInputs["allowList"] = state ? state.allowList : undefined;
            resourceInputs["allowListDesc"] = state ? state.allowListDesc : undefined;
            resourceInputs["allowListName"] = state ? state.allowListName : undefined;
            resourceInputs["allowListType"] = state ? state.allowListType : undefined;
            resourceInputs["modifyMode"] = state ? state.modifyMode : undefined;
        } else {
            const args = argsOrState as MongoAllowListArgs | undefined;
            if ((!args || args.allowList === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowList'");
            }
            if ((!args || args.allowListName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowListName'");
            }
            resourceInputs["allowList"] = args ? args.allowList : undefined;
            resourceInputs["allowListDesc"] = args ? args.allowListDesc : undefined;
            resourceInputs["allowListName"] = args ? args.allowListName : undefined;
            resourceInputs["allowListType"] = args ? args.allowListType : undefined;
            resourceInputs["modifyMode"] = args ? args.modifyMode : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MongoAllowList.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MongoAllowList resources.
 */
export interface MongoAllowListState {
    /**
     * IP address or IP address segment in CIDR format.
     */
    allowList?: pulumi.Input<string>;
    /**
     * The description of allow list.
     */
    allowListDesc?: pulumi.Input<string>;
    /**
     * The name of allow list.
     */
    allowListName?: pulumi.Input<string>;
    /**
     * The IP address type of allow list, valid value contains `IPv4`.
     */
    allowListType?: pulumi.Input<string>;
    /**
     * The modify mode. Only support Cover mode.
     */
    modifyMode?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MongoAllowList resource.
 */
export interface MongoAllowListArgs {
    /**
     * IP address or IP address segment in CIDR format.
     */
    allowList: pulumi.Input<string>;
    /**
     * The description of allow list.
     */
    allowListDesc?: pulumi.Input<string>;
    /**
     * The name of allow list.
     */
    allowListName: pulumi.Input<string>;
    /**
     * The IP address type of allow list, valid value contains `IPv4`.
     */
    allowListType?: pulumi.Input<string>;
    /**
     * The modify mode. Only support Cover mode.
     */
    modifyMode?: pulumi.Input<string>;
}
