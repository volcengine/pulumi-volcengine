// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of mongodb instance parameters
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.mongodb.Instance("fooInstance", {
 *     dbEngineVersion: "MongoDB_4_0",
 *     instanceType: "ReplicaSet",
 *     superAccountPassword: "@acc-test-123",
 *     nodeSpec: "mongo.2c4g",
 *     mongosNodeSpec: "mongo.mongos.2c4g",
 *     instanceName: "acc-test-mongo-replica",
 *     chargeType: "PostPaid",
 *     projectName: "default",
 *     mongosNodeNumber: 32,
 *     shardNumber: 3,
 *     storageSpaceGb: 20,
 *     subnetId: fooSubnet.id,
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooInstanceParameter = new volcengine.mongodb.InstanceParameter("fooInstanceParameter", {
 *     instanceId: fooInstance.id,
 *     parameterName: "cursorTimeoutMillis",
 *     parameterRole: "Node",
 *     parameterValue: "600111",
 * });
 * const fooInstanceParameters = volcengine.mongodb.getInstanceParametersOutput({
 *     instanceId: fooInstance.id,
 *     parameterNames: "cursorTimeoutMillis",
 *     parameterRole: "Node",
 * });
 * ```
 */
export function getInstanceParameters(args: GetInstanceParametersArgs, opts?: pulumi.InvokeOptions): Promise<GetInstanceParametersResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:mongodb/getInstanceParameters:getInstanceParameters", {
        "instanceId": args.instanceId,
        "outputFile": args.outputFile,
        "parameterNames": args.parameterNames,
        "parameterRole": args.parameterRole,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstanceParameters.
 */
export interface GetInstanceParametersArgs {
    /**
     * The instance ID to query.
     */
    instanceId: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The parameter names, support fuzzy query, case insensitive.
     */
    parameterNames?: string;
    /**
     * The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.
     */
    parameterRole?: string;
}

/**
 * A collection of values returned by getInstanceParameters.
 */
export interface GetInstanceParametersResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The instance ID.
     */
    readonly instanceId: string;
    /**
     * The list of parameters.
     */
    readonly instanceParameters: outputs.mongodb.GetInstanceParametersInstanceParameter[];
    readonly outputFile?: string;
    readonly parameterNames?: string;
    /**
     * The node type to which the parameter belongs.
     */
    readonly parameterRole?: string;
    /**
     * (**Deprecated**) This field has been deprecated and it is recommended to use instance_parameters. The collection of parameter query.
     *
     * @deprecated This field has been deprecated and it is recommended to use instance_parameters.
     */
    readonly parameters: outputs.mongodb.GetInstanceParametersParameter[];
    /**
     * The total count of mongodb instance parameter query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of mongodb instance parameters
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.mongodb.Instance("fooInstance", {
 *     dbEngineVersion: "MongoDB_4_0",
 *     instanceType: "ReplicaSet",
 *     superAccountPassword: "@acc-test-123",
 *     nodeSpec: "mongo.2c4g",
 *     mongosNodeSpec: "mongo.mongos.2c4g",
 *     instanceName: "acc-test-mongo-replica",
 *     chargeType: "PostPaid",
 *     projectName: "default",
 *     mongosNodeNumber: 32,
 *     shardNumber: 3,
 *     storageSpaceGb: 20,
 *     subnetId: fooSubnet.id,
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 * });
 * const fooInstanceParameter = new volcengine.mongodb.InstanceParameter("fooInstanceParameter", {
 *     instanceId: fooInstance.id,
 *     parameterName: "cursorTimeoutMillis",
 *     parameterRole: "Node",
 *     parameterValue: "600111",
 * });
 * const fooInstanceParameters = volcengine.mongodb.getInstanceParametersOutput({
 *     instanceId: fooInstance.id,
 *     parameterNames: "cursorTimeoutMillis",
 *     parameterRole: "Node",
 * });
 * ```
 */
export function getInstanceParametersOutput(args: GetInstanceParametersOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstanceParametersResult> {
    return pulumi.output(args).apply((a: any) => getInstanceParameters(a, opts))
}

/**
 * A collection of arguments for invoking getInstanceParameters.
 */
export interface GetInstanceParametersOutputArgs {
    /**
     * The instance ID to query.
     */
    instanceId: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The parameter names, support fuzzy query, case insensitive.
     */
    parameterNames?: pulumi.Input<string>;
    /**
     * The node type of instance parameter, valid value contains `Node`, `Shard`, `ConfigServer`, `Mongos`.
     */
    parameterRole?: pulumi.Input<string>;
}
