// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage mongodb endpoint
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.mongodb.Endpoint("foo", {
 *     eipIds: ["eip-3rfe12dvmz8qo5zsk2h91q05p"],
 *     instanceId: "mongo-replica-38cf5badeb9e",
 *     networkType: "Public",
 * });
 * ```
 *
 * ## Import
 *
 * mongodb endpoint can be imported using the instanceId:endpointId `instanceId`represents the instance that endpoint related to. `endpointId`the id of endpoint. e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:mongodb/endpoint:Endpoint default mongo-replica-e405f8e2****:BRhFA0pDAk0XXkxCZQ
 * ```
 */
export class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint {
        return new Endpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:mongodb/endpoint:Endpoint';

    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Endpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Endpoint.__pulumiType;
    }

    /**
     * A list of EIP IDs that need to be bound when applying for endpoint.
     */
    public readonly eipIds!: pulumi.Output<string[]>;
    /**
     * The id of endpoint.
     */
    public /*out*/ readonly endpointId!: pulumi.Output<string>;
    /**
     * The instance where the endpoint resides.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * A list of the Mongos node that needs to apply for the endpoint.
     */
    public readonly mongosNodeIds!: pulumi.Output<string[] | undefined>;
    /**
     * The network type of endpoint.
     */
    public readonly networkType!: pulumi.Output<string | undefined>;
    /**
     * The object ID corresponding to the endpoint.
     */
    public readonly objectId!: pulumi.Output<string>;

    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EndpointArgs | EndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EndpointState | undefined;
            resourceInputs["eipIds"] = state ? state.eipIds : undefined;
            resourceInputs["endpointId"] = state ? state.endpointId : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["mongosNodeIds"] = state ? state.mongosNodeIds : undefined;
            resourceInputs["networkType"] = state ? state.networkType : undefined;
            resourceInputs["objectId"] = state ? state.objectId : undefined;
        } else {
            const args = argsOrState as EndpointArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["eipIds"] = args ? args.eipIds : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["mongosNodeIds"] = args ? args.mongosNodeIds : undefined;
            resourceInputs["networkType"] = args ? args.networkType : undefined;
            resourceInputs["objectId"] = args ? args.objectId : undefined;
            resourceInputs["endpointId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Endpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    /**
     * A list of EIP IDs that need to be bound when applying for endpoint.
     */
    eipIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The id of endpoint.
     */
    endpointId?: pulumi.Input<string>;
    /**
     * The instance where the endpoint resides.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * A list of the Mongos node that needs to apply for the endpoint.
     */
    mongosNodeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The network type of endpoint.
     */
    networkType?: pulumi.Input<string>;
    /**
     * The object ID corresponding to the endpoint.
     */
    objectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    /**
     * A list of EIP IDs that need to be bound when applying for endpoint.
     */
    eipIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The instance where the endpoint resides.
     */
    instanceId: pulumi.Input<string>;
    /**
     * A list of the Mongos node that needs to apply for the endpoint.
     */
    mongosNodeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The network type of endpoint.
     */
    networkType?: pulumi.Input<string>;
    /**
     * The object ID corresponding to the endpoint.
     */
    objectId?: pulumi.Input<string>;
}
