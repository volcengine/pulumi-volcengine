// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage mongodb ssl state
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.mongodb.SslState("foo", {
 *     instanceId: "mongo-replica-f16e9298b121",
 *     sslAction: "Update",
 * });
 * // 选填 仅支持Update
 * ```
 *
 * ## Import
 *
 * mongodb ssl state can be imported using the ssl:instanceId, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:mongodb/sslState:SslState default ssl:mongo-shard-d050db19xxx
 * ```
 *
 *  Set `ssl_action` to `Update` will update ssl always when pulumi up.
 */
export class SslState extends pulumi.CustomResource {
    /**
     * Get an existing SslState resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SslStateState, opts?: pulumi.CustomResourceOptions): SslState {
        return new SslState(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:mongodb/sslState:SslState';

    /**
     * Returns true if the given object is an instance of SslState.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SslState {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SslState.__pulumiType;
    }

    /**
     * The ID of mongodb instance.
     */
    public readonly instanceId!: pulumi.Output<string>;
    /**
     * Whetehr SSL is valid.
     */
    public /*out*/ readonly isValid!: pulumi.Output<boolean>;
    /**
     * The action of ssl, valid value contains `Update`. Set `sslAction` to `Update` will update ssl always when pulumi up.
     */
    public readonly sslAction!: pulumi.Output<string | undefined>;
    /**
     * Whether SSL is enabled.
     */
    public /*out*/ readonly sslEnable!: pulumi.Output<boolean>;
    /**
     * The expire time of SSL.
     */
    public /*out*/ readonly sslExpiredTime!: pulumi.Output<string>;

    /**
     * Create a SslState resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SslStateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SslStateArgs | SslStateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SslStateState | undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
            resourceInputs["isValid"] = state ? state.isValid : undefined;
            resourceInputs["sslAction"] = state ? state.sslAction : undefined;
            resourceInputs["sslEnable"] = state ? state.sslEnable : undefined;
            resourceInputs["sslExpiredTime"] = state ? state.sslExpiredTime : undefined;
        } else {
            const args = argsOrState as SslStateArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["sslAction"] = args ? args.sslAction : undefined;
            resourceInputs["isValid"] = undefined /*out*/;
            resourceInputs["sslEnable"] = undefined /*out*/;
            resourceInputs["sslExpiredTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(SslState.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering SslState resources.
 */
export interface SslStateState {
    /**
     * The ID of mongodb instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * Whetehr SSL is valid.
     */
    isValid?: pulumi.Input<boolean>;
    /**
     * The action of ssl, valid value contains `Update`. Set `sslAction` to `Update` will update ssl always when pulumi up.
     */
    sslAction?: pulumi.Input<string>;
    /**
     * Whether SSL is enabled.
     */
    sslEnable?: pulumi.Input<boolean>;
    /**
     * The expire time of SSL.
     */
    sslExpiredTime?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a SslState resource.
 */
export interface SslStateArgs {
    /**
     * The ID of mongodb instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * The action of ssl, valid value contains `Update`. Set `sslAction` to `Update` will update ssl always when pulumi up.
     */
    sslAction?: pulumi.Input<string>;
}
