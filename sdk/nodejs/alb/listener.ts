// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage alb listener
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooCustomizedCfg = new volcengine.alb.CustomizedCfg("fooCustomizedCfg", {
 *     customizedCfgName: "acc-test-cfg1",
 *     description: "This is a test modify",
 *     customizedCfgContent: "proxy_connect_timeout 4s;proxy_request_buffering on;",
 *     projectName: "default",
 * });
 * const fooListener = new volcengine.alb.Listener("fooListener", {
 *     loadBalancerId: "alb-1iidd17v3klj474adhfrunyz9",
 *     listenerName: "acc-test-listener-1",
 *     protocol: "HTTPS",
 *     port: 6666,
 *     enabled: "on",
 *     certificateId: "cert-1iidd2pahdyio74adhfr9ajwg",
 *     caCertificateId: "cert-1iidd2r9ii0hs74adhfeodxo1",
 *     serverGroupId: "rsp-1g72w74y4umf42zbhq4k4hnln",
 *     enableHttp2: "on",
 *     enableQuic: "off",
 *     aclStatus: "on",
 *     aclType: "white",
 *     aclIds: [
 *         "acl-1g72w6z11ighs2zbhq4v3rvh4",
 *         "acl-1g72xvtt7kg002zbhq5diim3s",
 *     ],
 *     description: "acc test listener",
 *     customizedCfgId: fooCustomizedCfg.id,
 * });
 * ```
 *
 * ## Import
 *
 * AlbListener can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:alb/listener:Listener default lsn-273yv0mhs5xj47fap8sehiiso
 * ```
 */
export class Listener extends pulumi.CustomResource {
    /**
     * Get an existing Listener resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ListenerState, opts?: pulumi.CustomResourceOptions): Listener {
        return new Listener(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:alb/listener:Listener';

    /**
     * Returns true if the given object is an instance of Listener.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Listener {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Listener.__pulumiType;
    }

    /**
     * The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
     */
    public readonly aclIds!: pulumi.Output<string[] | undefined>;
    /**
     * The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
     */
    public readonly aclStatus!: pulumi.Output<string | undefined>;
    /**
     * The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
     */
    public readonly aclType!: pulumi.Output<string>;
    /**
     * The CA certificate id associated with the listener.
     */
    public readonly caCertificateId!: pulumi.Output<string | undefined>;
    /**
     * The certificate id associated with the listener.
     */
    public readonly certificateId!: pulumi.Output<string | undefined>;
    /**
     * Personalized configuration ID, with a value of " " when not bound.
     */
    public readonly customizedCfgId!: pulumi.Output<string | undefined>;
    /**
     * The description of the Listener.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The HTTP2 feature switch,valid value is on or off. Default is `off`.
     */
    public readonly enableHttp2!: pulumi.Output<string | undefined>;
    /**
     * The QUIC feature switch,valid value is on or off. Default is `off`.
     */
    public readonly enableQuic!: pulumi.Output<string | undefined>;
    /**
     * The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
     */
    public readonly enabled!: pulumi.Output<string | undefined>;
    /**
     * The ID of the Listener.
     */
    public /*out*/ readonly listenerId!: pulumi.Output<string>;
    /**
     * The name of the Listener.
     */
    public readonly listenerName!: pulumi.Output<string>;
    /**
     * The Id of the load balancer.
     */
    public readonly loadBalancerId!: pulumi.Output<string>;
    /**
     * The port receiving request of the Listener, the value range in 1~65535.
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * The server group id associated with the listener.
     */
    public readonly serverGroupId!: pulumi.Output<string>;

    /**
     * Create a Listener resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ListenerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ListenerArgs | ListenerState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ListenerState | undefined;
            resourceInputs["aclIds"] = state ? state.aclIds : undefined;
            resourceInputs["aclStatus"] = state ? state.aclStatus : undefined;
            resourceInputs["aclType"] = state ? state.aclType : undefined;
            resourceInputs["caCertificateId"] = state ? state.caCertificateId : undefined;
            resourceInputs["certificateId"] = state ? state.certificateId : undefined;
            resourceInputs["customizedCfgId"] = state ? state.customizedCfgId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enableHttp2"] = state ? state.enableHttp2 : undefined;
            resourceInputs["enableQuic"] = state ? state.enableQuic : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["listenerId"] = state ? state.listenerId : undefined;
            resourceInputs["listenerName"] = state ? state.listenerName : undefined;
            resourceInputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["serverGroupId"] = state ? state.serverGroupId : undefined;
        } else {
            const args = argsOrState as ListenerArgs | undefined;
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.serverGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serverGroupId'");
            }
            resourceInputs["aclIds"] = args ? args.aclIds : undefined;
            resourceInputs["aclStatus"] = args ? args.aclStatus : undefined;
            resourceInputs["aclType"] = args ? args.aclType : undefined;
            resourceInputs["caCertificateId"] = args ? args.caCertificateId : undefined;
            resourceInputs["certificateId"] = args ? args.certificateId : undefined;
            resourceInputs["customizedCfgId"] = args ? args.customizedCfgId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enableHttp2"] = args ? args.enableHttp2 : undefined;
            resourceInputs["enableQuic"] = args ? args.enableQuic : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["listenerName"] = args ? args.listenerName : undefined;
            resourceInputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["serverGroupId"] = args ? args.serverGroupId : undefined;
            resourceInputs["listenerId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Listener.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Listener resources.
 */
export interface ListenerState {
    /**
     * The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
     */
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
     */
    aclStatus?: pulumi.Input<string>;
    /**
     * The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
     */
    aclType?: pulumi.Input<string>;
    /**
     * The CA certificate id associated with the listener.
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * The certificate id associated with the listener.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * Personalized configuration ID, with a value of " " when not bound.
     */
    customizedCfgId?: pulumi.Input<string>;
    /**
     * The description of the Listener.
     */
    description?: pulumi.Input<string>;
    /**
     * The HTTP2 feature switch,valid value is on or off. Default is `off`.
     */
    enableHttp2?: pulumi.Input<string>;
    /**
     * The QUIC feature switch,valid value is on or off. Default is `off`.
     */
    enableQuic?: pulumi.Input<string>;
    /**
     * The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
     */
    enabled?: pulumi.Input<string>;
    /**
     * The ID of the Listener.
     */
    listenerId?: pulumi.Input<string>;
    /**
     * The name of the Listener.
     */
    listenerName?: pulumi.Input<string>;
    /**
     * The Id of the load balancer.
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * The port receiving request of the Listener, the value range in 1~65535.
     */
    port?: pulumi.Input<number>;
    /**
     * The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * The server group id associated with the listener.
     */
    serverGroupId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Listener resource.
 */
export interface ListenerArgs {
    /**
     * The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
     */
    aclIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
     */
    aclStatus?: pulumi.Input<string>;
    /**
     * The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
     */
    aclType?: pulumi.Input<string>;
    /**
     * The CA certificate id associated with the listener.
     */
    caCertificateId?: pulumi.Input<string>;
    /**
     * The certificate id associated with the listener.
     */
    certificateId?: pulumi.Input<string>;
    /**
     * Personalized configuration ID, with a value of " " when not bound.
     */
    customizedCfgId?: pulumi.Input<string>;
    /**
     * The description of the Listener.
     */
    description?: pulumi.Input<string>;
    /**
     * The HTTP2 feature switch,valid value is on or off. Default is `off`.
     */
    enableHttp2?: pulumi.Input<string>;
    /**
     * The QUIC feature switch,valid value is on or off. Default is `off`.
     */
    enableQuic?: pulumi.Input<string>;
    /**
     * The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
     */
    enabled?: pulumi.Input<string>;
    /**
     * The name of the Listener.
     */
    listenerName?: pulumi.Input<string>;
    /**
     * The Id of the load balancer.
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * The port receiving request of the Listener, the value range in 1~65535.
     */
    port: pulumi.Input<number>;
    /**
     * The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
     */
    protocol: pulumi.Input<string>;
    /**
     * The server group id associated with the listener.
     */
    serverGroupId: pulumi.Input<string>;
}
