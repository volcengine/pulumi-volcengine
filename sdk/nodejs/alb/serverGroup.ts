// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage alb server group
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooServerGroup = new volcengine.alb.ServerGroup("fooServerGroup", {
 *     vpcId: fooVpc.id,
 *     serverGroupName: "acc-test-server-group",
 *     description: "acc-test",
 *     serverGroupType: "instance",
 *     scheduler: "wlc",
 *     projectName: "default",
 *     healthCheck: {
 *         enabled: "on",
 *         interval: 3,
 *         timeout: 3,
 *         method: "GET",
 *     },
 *     stickySessionConfig: {
 *         stickySessionEnabled: "on",
 *         stickySessionType: "insert",
 *         cookieTimeout: 1100,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AlbServerGroup can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:alb/serverGroup:ServerGroup default resource_id
 * ```
 */
export class ServerGroup extends pulumi.CustomResource {
    /**
     * Get an existing ServerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerGroupState, opts?: pulumi.CustomResourceOptions): ServerGroup {
        return new ServerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:alb/serverGroup:ServerGroup';

    /**
     * Returns true if the given object is an instance of ServerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServerGroup.__pulumiType;
    }

    /**
     * The create time of the Alb server group.
     */
    public /*out*/ readonly createTime!: pulumi.Output<string>;
    /**
     * The description of the Alb server group.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The health check config of the Alb server group. The enable status of health check function defaults to `on`.
     */
    public readonly healthCheck!: pulumi.Output<outputs.alb.ServerGroupHealthCheck>;
    /**
     * The listener information of the Alb server group.
     */
    public /*out*/ readonly listeners!: pulumi.Output<string[]>;
    /**
     * The project name of the Alb server group.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
     */
    public readonly scheduler!: pulumi.Output<string | undefined>;
    /**
     * The server count of the Alb server group.
     */
    public /*out*/ readonly serverCount!: pulumi.Output<number>;
    /**
     * The name of the Alb server group.
     */
    public readonly serverGroupName!: pulumi.Output<string>;
    /**
     * The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
     */
    public readonly serverGroupType!: pulumi.Output<string | undefined>;
    /**
     * The status of the Alb server group.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
     */
    public readonly stickySessionConfig!: pulumi.Output<outputs.alb.ServerGroupStickySessionConfig>;
    /**
     * The update time of the Alb server group.
     */
    public /*out*/ readonly updateTime!: pulumi.Output<string>;
    /**
     * The vpc id of the Alb server group.
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a ServerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerGroupArgs | ServerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServerGroupState | undefined;
            resourceInputs["createTime"] = state ? state.createTime : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["healthCheck"] = state ? state.healthCheck : undefined;
            resourceInputs["listeners"] = state ? state.listeners : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["scheduler"] = state ? state.scheduler : undefined;
            resourceInputs["serverCount"] = state ? state.serverCount : undefined;
            resourceInputs["serverGroupName"] = state ? state.serverGroupName : undefined;
            resourceInputs["serverGroupType"] = state ? state.serverGroupType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["stickySessionConfig"] = state ? state.stickySessionConfig : undefined;
            resourceInputs["updateTime"] = state ? state.updateTime : undefined;
            resourceInputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as ServerGroupArgs | undefined;
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["healthCheck"] = args ? args.healthCheck : undefined;
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["scheduler"] = args ? args.scheduler : undefined;
            resourceInputs["serverGroupName"] = args ? args.serverGroupName : undefined;
            resourceInputs["serverGroupType"] = args ? args.serverGroupType : undefined;
            resourceInputs["stickySessionConfig"] = args ? args.stickySessionConfig : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["createTime"] = undefined /*out*/;
            resourceInputs["listeners"] = undefined /*out*/;
            resourceInputs["serverCount"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["updateTime"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServerGroup resources.
 */
export interface ServerGroupState {
    /**
     * The create time of the Alb server group.
     */
    createTime?: pulumi.Input<string>;
    /**
     * The description of the Alb server group.
     */
    description?: pulumi.Input<string>;
    /**
     * The health check config of the Alb server group. The enable status of health check function defaults to `on`.
     */
    healthCheck?: pulumi.Input<inputs.alb.ServerGroupHealthCheck>;
    /**
     * The listener information of the Alb server group.
     */
    listeners?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The project name of the Alb server group.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The server count of the Alb server group.
     */
    serverCount?: pulumi.Input<number>;
    /**
     * The name of the Alb server group.
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * The status of the Alb server group.
     */
    status?: pulumi.Input<string>;
    /**
     * The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
     */
    stickySessionConfig?: pulumi.Input<inputs.alb.ServerGroupStickySessionConfig>;
    /**
     * The update time of the Alb server group.
     */
    updateTime?: pulumi.Input<string>;
    /**
     * The vpc id of the Alb server group.
     */
    vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServerGroup resource.
 */
export interface ServerGroupArgs {
    /**
     * The description of the Alb server group.
     */
    description?: pulumi.Input<string>;
    /**
     * The health check config of the Alb server group. The enable status of health check function defaults to `on`.
     */
    healthCheck?: pulumi.Input<inputs.alb.ServerGroupHealthCheck>;
    /**
     * The project name of the Alb server group.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
     */
    scheduler?: pulumi.Input<string>;
    /**
     * The name of the Alb server group.
     */
    serverGroupName?: pulumi.Input<string>;
    /**
     * The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
     */
    serverGroupType?: pulumi.Input<string>;
    /**
     * The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
     */
    stickySessionConfig?: pulumi.Input<inputs.alb.ServerGroupStickySessionConfig>;
    /**
     * The vpc id of the Alb server group.
     */
    vpcId: pulumi.Input<string>;
}
