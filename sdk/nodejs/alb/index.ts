// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AclArgs, AclState } from "./acl";
export type Acl = import("./acl").Acl;
export const Acl: typeof import("./acl").Acl = null as any;
utilities.lazyLoad(exports, ["Acl"], () => require("./acl"));

export { AclsArgs, AclsResult, AclsOutputArgs } from "./acls";
export const acls: typeof import("./acls").acls = null as any;
export const aclsOutput: typeof import("./acls").aclsOutput = null as any;
utilities.lazyLoad(exports, ["acls","aclsOutput"], () => require("./acls"));

export { AlbArgs, AlbState } from "./alb";
export type Alb = import("./alb").Alb;
export const Alb: typeof import("./alb").Alb = null as any;
utilities.lazyLoad(exports, ["Alb"], () => require("./alb"));

export { AlbsArgs, AlbsResult, AlbsOutputArgs } from "./albs";
export const albs: typeof import("./albs").albs = null as any;
export const albsOutput: typeof import("./albs").albsOutput = null as any;
utilities.lazyLoad(exports, ["albs","albsOutput"], () => require("./albs"));

export { CaCertificatesArgs, CaCertificatesResult, CaCertificatesOutputArgs } from "./caCertificates";
export const caCertificates: typeof import("./caCertificates").caCertificates = null as any;
export const caCertificatesOutput: typeof import("./caCertificates").caCertificatesOutput = null as any;
utilities.lazyLoad(exports, ["caCertificates","caCertificatesOutput"], () => require("./caCertificates"));

export { CACertificateArgs, CACertificateState } from "./cacertificate";
export type CACertificate = import("./cacertificate").CACertificate;
export const CACertificate: typeof import("./cacertificate").CACertificate = null as any;
utilities.lazyLoad(exports, ["CACertificate"], () => require("./cacertificate"));

export { CertificateArgs, CertificateState } from "./certificate";
export type Certificate = import("./certificate").Certificate;
export const Certificate: typeof import("./certificate").Certificate = null as any;
utilities.lazyLoad(exports, ["Certificate"], () => require("./certificate"));

export { CertificatesArgs, CertificatesResult, CertificatesOutputArgs } from "./certificates";
export const certificates: typeof import("./certificates").certificates = null as any;
export const certificatesOutput: typeof import("./certificates").certificatesOutput = null as any;
utilities.lazyLoad(exports, ["certificates","certificatesOutput"], () => require("./certificates"));

export { CustomizedCfgArgs, CustomizedCfgState } from "./customizedCfg";
export type CustomizedCfg = import("./customizedCfg").CustomizedCfg;
export const CustomizedCfg: typeof import("./customizedCfg").CustomizedCfg = null as any;
utilities.lazyLoad(exports, ["CustomizedCfg"], () => require("./customizedCfg"));

export { CustomizedCfgsArgs, CustomizedCfgsResult, CustomizedCfgsOutputArgs } from "./customizedCfgs";
export const customizedCfgs: typeof import("./customizedCfgs").customizedCfgs = null as any;
export const customizedCfgsOutput: typeof import("./customizedCfgs").customizedCfgsOutput = null as any;
utilities.lazyLoad(exports, ["customizedCfgs","customizedCfgsOutput"], () => require("./customizedCfgs"));

export { HealthCheckTemplateArgs, HealthCheckTemplateState } from "./healthCheckTemplate";
export type HealthCheckTemplate = import("./healthCheckTemplate").HealthCheckTemplate;
export const HealthCheckTemplate: typeof import("./healthCheckTemplate").HealthCheckTemplate = null as any;
utilities.lazyLoad(exports, ["HealthCheckTemplate"], () => require("./healthCheckTemplate"));

export { HealthCheckTemplatesArgs, HealthCheckTemplatesResult, HealthCheckTemplatesOutputArgs } from "./healthCheckTemplates";
export const healthCheckTemplates: typeof import("./healthCheckTemplates").healthCheckTemplates = null as any;
export const healthCheckTemplatesOutput: typeof import("./healthCheckTemplates").healthCheckTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["healthCheckTemplates","healthCheckTemplatesOutput"], () => require("./healthCheckTemplates"));

export { ListenerArgs, ListenerState } from "./listener";
export type Listener = import("./listener").Listener;
export const Listener: typeof import("./listener").Listener = null as any;
utilities.lazyLoad(exports, ["Listener"], () => require("./listener"));

export { ListenerDomainExtensionArgs, ListenerDomainExtensionState } from "./listenerDomainExtension";
export type ListenerDomainExtension = import("./listenerDomainExtension").ListenerDomainExtension;
export const ListenerDomainExtension: typeof import("./listenerDomainExtension").ListenerDomainExtension = null as any;
utilities.lazyLoad(exports, ["ListenerDomainExtension"], () => require("./listenerDomainExtension"));

export { ListenerDomainExtensionsArgs, ListenerDomainExtensionsResult, ListenerDomainExtensionsOutputArgs } from "./listenerDomainExtensions";
export const listenerDomainExtensions: typeof import("./listenerDomainExtensions").listenerDomainExtensions = null as any;
export const listenerDomainExtensionsOutput: typeof import("./listenerDomainExtensions").listenerDomainExtensionsOutput = null as any;
utilities.lazyLoad(exports, ["listenerDomainExtensions","listenerDomainExtensionsOutput"], () => require("./listenerDomainExtensions"));

export { ListenersArgs, ListenersResult, ListenersOutputArgs } from "./listeners";
export const listeners: typeof import("./listeners").listeners = null as any;
export const listenersOutput: typeof import("./listeners").listenersOutput = null as any;
utilities.lazyLoad(exports, ["listeners","listenersOutput"], () => require("./listeners"));

export { RuleArgs, RuleState } from "./rule";
export type Rule = import("./rule").Rule;
export const Rule: typeof import("./rule").Rule = null as any;
utilities.lazyLoad(exports, ["Rule"], () => require("./rule"));

export { RulesArgs, RulesResult, RulesOutputArgs } from "./rules";
export const rules: typeof import("./rules").rules = null as any;
export const rulesOutput: typeof import("./rules").rulesOutput = null as any;
utilities.lazyLoad(exports, ["rules","rulesOutput"], () => require("./rules"));

export { ServerGroupArgs, ServerGroupState } from "./serverGroup";
export type ServerGroup = import("./serverGroup").ServerGroup;
export const ServerGroup: typeof import("./serverGroup").ServerGroup = null as any;
utilities.lazyLoad(exports, ["ServerGroup"], () => require("./serverGroup"));

export { ServerGroupServerArgs, ServerGroupServerState } from "./serverGroupServer";
export type ServerGroupServer = import("./serverGroupServer").ServerGroupServer;
export const ServerGroupServer: typeof import("./serverGroupServer").ServerGroupServer = null as any;
utilities.lazyLoad(exports, ["ServerGroupServer"], () => require("./serverGroupServer"));

export { ServerGroupServersArgs, ServerGroupServersResult, ServerGroupServersOutputArgs } from "./serverGroupServers";
export const serverGroupServers: typeof import("./serverGroupServers").serverGroupServers = null as any;
export const serverGroupServersOutput: typeof import("./serverGroupServers").serverGroupServersOutput = null as any;
utilities.lazyLoad(exports, ["serverGroupServers","serverGroupServersOutput"], () => require("./serverGroupServers"));

export { ServerGroupsArgs, ServerGroupsResult, ServerGroupsOutputArgs } from "./serverGroups";
export const serverGroups: typeof import("./serverGroups").serverGroups = null as any;
export const serverGroupsOutput: typeof import("./serverGroups").serverGroupsOutput = null as any;
utilities.lazyLoad(exports, ["serverGroups","serverGroupsOutput"], () => require("./serverGroups"));

export { ZonesArgs, ZonesResult, ZonesOutputArgs } from "./zones";
export const zones: typeof import("./zones").zones = null as any;
export const zonesOutput: typeof import("./zones").zonesOutput = null as any;
utilities.lazyLoad(exports, ["zones","zonesOutput"], () => require("./zones"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:alb/acl:Acl":
                return new Acl(name, <any>undefined, { urn })
            case "volcengine:alb/alb:Alb":
                return new Alb(name, <any>undefined, { urn })
            case "volcengine:alb/cACertificate:CACertificate":
                return new CACertificate(name, <any>undefined, { urn })
            case "volcengine:alb/certificate:Certificate":
                return new Certificate(name, <any>undefined, { urn })
            case "volcengine:alb/customizedCfg:CustomizedCfg":
                return new CustomizedCfg(name, <any>undefined, { urn })
            case "volcengine:alb/healthCheckTemplate:HealthCheckTemplate":
                return new HealthCheckTemplate(name, <any>undefined, { urn })
            case "volcengine:alb/listener:Listener":
                return new Listener(name, <any>undefined, { urn })
            case "volcengine:alb/listenerDomainExtension:ListenerDomainExtension":
                return new ListenerDomainExtension(name, <any>undefined, { urn })
            case "volcengine:alb/rule:Rule":
                return new Rule(name, <any>undefined, { urn })
            case "volcengine:alb/serverGroup:ServerGroup":
                return new ServerGroup(name, <any>undefined, { urn })
            case "volcengine:alb/serverGroupServer:ServerGroupServer":
                return new ServerGroupServer(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "alb/acl", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/alb", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/cACertificate", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/certificate", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/customizedCfg", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/healthCheckTemplate", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/listener", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/listenerDomainExtension", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/rule", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/serverGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "alb/serverGroupServer", _module)
