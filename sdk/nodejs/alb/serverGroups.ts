// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of alb server groups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooServerGroup: volcengine.alb.ServerGroup[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooServerGroup.push(new volcengine.alb.ServerGroup(`fooServerGroup-${range.value}`, {
 *         vpcId: fooVpc.id,
 *         serverGroupName: `acc-test-server-group-${range.value}`,
 *         description: "acc-test",
 *         serverGroupType: "instance",
 *         scheduler: "sh",
 *         projectName: "default",
 *         healthCheck: {
 *             enabled: "on",
 *             interval: 3,
 *             timeout: 3,
 *             method: "GET",
 *         },
 *         stickySessionConfig: {
 *             stickySessionEnabled: "on",
 *             stickySessionType: "insert",
 *             cookieTimeout: 1100,
 *         },
 *     }));
 * }
 * const fooServerGroups = volcengine.alb.ServerGroupsOutput({
 *     ids: fooServerGroup.map(__item => __item.id),
 * });
 * ```
 */
export function serverGroups(args?: ServerGroupsArgs, opts?: pulumi.InvokeOptions): Promise<ServerGroupsResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:alb/serverGroups:ServerGroups", {
        "ids": args.ids,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "serverGroupNames": args.serverGroupNames,
        "serverGroupType": args.serverGroupType,
    }, opts);
}

/**
 * A collection of arguments for invoking ServerGroups.
 */
export interface ServerGroupsArgs {
    /**
     * A list of Alb server group IDs.
     */
    ids?: string[];
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of Alb server group.
     */
    projectName?: string;
    /**
     * A list of Alb server group name.
     */
    serverGroupNames?: string[];
    /**
     * The type of Alb server group. Valid values: `instance`, `ip`.
     */
    serverGroupType?: string;
}

/**
 * A collection of values returned by ServerGroups.
 */
export interface ServerGroupsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The project name of the Alb server group.
     */
    readonly projectName?: string;
    readonly serverGroupNames?: string[];
    /**
     * The type of the Alb server group.
     */
    readonly serverGroupType?: string;
    /**
     * The collection of query.
     */
    readonly serverGroups: outputs.alb.ServerGroupsServerGroup[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of alb server groups
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooServerGroup: volcengine.alb.ServerGroup[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooServerGroup.push(new volcengine.alb.ServerGroup(`fooServerGroup-${range.value}`, {
 *         vpcId: fooVpc.id,
 *         serverGroupName: `acc-test-server-group-${range.value}`,
 *         description: "acc-test",
 *         serverGroupType: "instance",
 *         scheduler: "sh",
 *         projectName: "default",
 *         healthCheck: {
 *             enabled: "on",
 *             interval: 3,
 *             timeout: 3,
 *             method: "GET",
 *         },
 *         stickySessionConfig: {
 *             stickySessionEnabled: "on",
 *             stickySessionType: "insert",
 *             cookieTimeout: 1100,
 *         },
 *     }));
 * }
 * const fooServerGroups = volcengine.alb.ServerGroupsOutput({
 *     ids: fooServerGroup.map(__item => __item.id),
 * });
 * ```
 */
export function serverGroupsOutput(args?: ServerGroupsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ServerGroupsResult> {
    return pulumi.output(args).apply((a: any) => serverGroups(a, opts))
}

/**
 * A collection of arguments for invoking ServerGroups.
 */
export interface ServerGroupsOutputArgs {
    /**
     * A list of Alb server group IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of Alb server group.
     */
    projectName?: pulumi.Input<string>;
    /**
     * A list of Alb server group name.
     */
    serverGroupNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The type of Alb server group. Valid values: `instance`, `ip`.
     */
    serverGroupType?: pulumi.Input<string>;
}
