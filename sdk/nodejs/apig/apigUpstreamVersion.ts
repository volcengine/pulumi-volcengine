// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage apig upstream version
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const foo1 = new volcengine.vpc.Subnet("foo1", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const foo2 = new volcengine.vpc.Subnet("foo2", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.1.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[1]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooApigGateway = new volcengine.apig.ApigGateway("fooApigGateway", {
 *     type: "standard",
 *     comments: "acc-test",
 *     projectName: "default",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 *     networkSpec: {
 *         vpcId: fooVpc.id,
 *         subnetIds: [
 *             foo1.id,
 *             foo2.id,
 *         ],
 *     },
 *     resourceSpec: {
 *         replicas: 2,
 *         instanceSpecCode: "1c2g",
 *         clbSpecCode: "small_1",
 *         publicNetworkBillingType: "bandwidth",
 *         publicNetworkBandwidth: 1,
 *         networkType: {
 *             enablePublicNetwork: true,
 *             enablePrivateNetwork: true,
 *         },
 *     },
 *     logSpec: {
 *         enable: true,
 *         projectId: "d3cb87c0-faeb-4074-b1ee-9bd747865a76",
 *         topicId: "d339482e-d86d-4bd8-a9bb-f270417f00a1",
 *     },
 *     monitorSpec: {
 *         enable: true,
 *         workspaceId: "4ed1caf3-279d-4c5f-8301-87ea38e92ffc",
 *     },
 * });
 * const fooApigGatewayService = new volcengine.apig.ApigGatewayService("fooApigGatewayService", {
 *     gatewayId: fooApigGateway.id,
 *     serviceName: "acc-test-apig-service",
 *     comments: "acc-test",
 *     protocols: [
 *         "HTTP",
 *         "HTTPS",
 *     ],
 *     authSpec: {
 *         enable: false,
 *     },
 * });
 * const foo_k8sApigUpstreamSource = new volcengine.apig.ApigUpstreamSource("foo-k8sApigUpstreamSource", {
 *     gatewayId: fooApigGateway.id,
 *     comments: "acc-test-k8s",
 *     sourceType: "K8S",
 *     sourceSpec: {
 *         k8sSource: {
 *             clusterId: "cd197sac4mpmnruh7um80",
 *         },
 *     },
 *     ingressSettings: [{
 *         enableIngress: true,
 *         updateStatus: true,
 *         ingressClasses: ["test"],
 *         watchNamespaces: ["default"],
 *     }],
 * });
 * const foo_k8sApigUpstream = new volcengine.apig.ApigUpstream("foo-k8sApigUpstream", {
 *     gatewayId: fooApigGateway.id,
 *     comments: "acc-test",
 *     resourceType: "Console",
 *     protocol: "HTTP",
 *     loadBalancerSettings: {
 *         lbPolicy: "ConsistentHashLB",
 *         consistentHashLb: {
 *             hashKey: "HTTPCookie",
 *             httpCookie: {
 *                 name: "test",
 *                 path: "/",
 *                 ttl: 300,
 *             },
 *         },
 *     },
 *     tlsSettings: {
 *         tlsMode: "SIMPLE",
 *         sni: "test",
 *     },
 *     circuitBreakingSettings: {
 *         enable: false,
 *         consecutiveErrors: 5,
 *         interval: 10000,
 *         baseEjectionTime: 30000,
 *         maxEjectionPercent: 20,
 *         minHealthPercent: 60,
 *     },
 *     sourceType: "K8S",
 *     upstreamSpec: {
 *         k8sService: {
 *             namespace: "default",
 *             name: "kubernetes",
 *             port: 443,
 *         },
 *     },
 * }, {
 *     dependsOn: [foo_k8sApigUpstreamSource],
 * });
 * const fooApigUpstreamVersion = new volcengine.apig.ApigUpstreamVersion("fooApigUpstreamVersion", {
 *     upstreamId: foo_k8sApigUpstream.id,
 *     upstreamVersion: {
 *         name: "acc-test-version",
 *         labels: [{
 *             key: "k1",
 *             value: "v2",
 *         }],
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * ApigUpstreamVersion can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:apig/apigUpstreamVersion:ApigUpstreamVersion default resource_id
 * ```
 */
export class ApigUpstreamVersion extends pulumi.CustomResource {
    /**
     * Get an existing ApigUpstreamVersion resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApigUpstreamVersionState, opts?: pulumi.CustomResourceOptions): ApigUpstreamVersion {
        return new ApigUpstreamVersion(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:apig/apigUpstreamVersion:ApigUpstreamVersion';

    /**
     * Returns true if the given object is an instance of ApigUpstreamVersion.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApigUpstreamVersion {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApigUpstreamVersion.__pulumiType;
    }

    /**
     * The id of the apig upstream.
     */
    public readonly upstreamId!: pulumi.Output<string>;
    /**
     * The version of the apig upstream.
     */
    public readonly upstreamVersion!: pulumi.Output<outputs.apig.ApigUpstreamVersionUpstreamVersion>;

    /**
     * Create a ApigUpstreamVersion resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApigUpstreamVersionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApigUpstreamVersionArgs | ApigUpstreamVersionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApigUpstreamVersionState | undefined;
            resourceInputs["upstreamId"] = state ? state.upstreamId : undefined;
            resourceInputs["upstreamVersion"] = state ? state.upstreamVersion : undefined;
        } else {
            const args = argsOrState as ApigUpstreamVersionArgs | undefined;
            if ((!args || args.upstreamId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upstreamId'");
            }
            if ((!args || args.upstreamVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'upstreamVersion'");
            }
            resourceInputs["upstreamId"] = args ? args.upstreamId : undefined;
            resourceInputs["upstreamVersion"] = args ? args.upstreamVersion : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApigUpstreamVersion.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApigUpstreamVersion resources.
 */
export interface ApigUpstreamVersionState {
    /**
     * The id of the apig upstream.
     */
    upstreamId?: pulumi.Input<string>;
    /**
     * The version of the apig upstream.
     */
    upstreamVersion?: pulumi.Input<inputs.apig.ApigUpstreamVersionUpstreamVersion>;
}

/**
 * The set of arguments for constructing a ApigUpstreamVersion resource.
 */
export interface ApigUpstreamVersionArgs {
    /**
     * The id of the apig upstream.
     */
    upstreamId: pulumi.Input<string>;
    /**
     * The version of the apig upstream.
     */
    upstreamVersion: pulumi.Input<inputs.apig.ApigUpstreamVersionUpstreamVersion>;
}
