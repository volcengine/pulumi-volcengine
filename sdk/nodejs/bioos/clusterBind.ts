// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage bioos cluster bind
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const example = new volcengine.bioos.ClusterBind("example", {
 *     clusterId: "ucfhp1nteig48u8ufv8s0",
 *     type: "workflow",
 *     workspaceId: "wcfhp1vdeig48u8ufv8sg",
 * });
 * //必填
 * ```
 *
 * ## Import
 *
 * Cluster binder can be imported using the workspace id and cluster id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:bioos/clusterBind:ClusterBind default wc*****:uc***
 * ```
 */
export class ClusterBind extends pulumi.CustomResource {
    /**
     * Get an existing ClusterBind resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ClusterBindState, opts?: pulumi.CustomResourceOptions): ClusterBind {
        return new ClusterBind(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:bioos/clusterBind:ClusterBind';

    /**
     * Returns true if the given object is an instance of ClusterBind.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ClusterBind {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ClusterBind.__pulumiType;
    }

    /**
     * The id of the cluster.
     */
    public readonly clusterId!: pulumi.Output<string>;
    /**
     * The type of the cluster bind.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The id of the workspace.
     */
    public readonly workspaceId!: pulumi.Output<string>;

    /**
     * Create a ClusterBind resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ClusterBindArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ClusterBindArgs | ClusterBindState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ClusterBindState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["workspaceId"] = state ? state.workspaceId : undefined;
        } else {
            const args = argsOrState as ClusterBindArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.workspaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'workspaceId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["workspaceId"] = args ? args.workspaceId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ClusterBind.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ClusterBind resources.
 */
export interface ClusterBindState {
    /**
     * The id of the cluster.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * The type of the cluster bind.
     */
    type?: pulumi.Input<string>;
    /**
     * The id of the workspace.
     */
    workspaceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ClusterBind resource.
 */
export interface ClusterBindArgs {
    /**
     * The id of the cluster.
     */
    clusterId: pulumi.Input<string>;
    /**
     * The type of the cluster bind.
     */
    type: pulumi.Input<string>;
    /**
     * The id of the workspace.
     */
    workspaceId: pulumi.Input<string>;
}
