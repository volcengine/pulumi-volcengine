// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of rds mysql instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rds_mysql.Instance("fooInstance", {
 *     dbEngineVersion: "MySQL_5_7",
 *     nodeSpec: "rds.mysql.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 80,
 *     subnetId: fooSubnet.id,
 *     instanceName: "acc-test",
 *     lowerCaseTableNames: "1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     parameters: [
 *         {
 *             parameterName: "auto_increment_increment",
 *             parameterValue: "2",
 *         },
 *         {
 *             parameterName: "auto_increment_offset",
 *             parameterValue: "4",
 *         },
 *     ],
 * });
 * const fooInstances = volcengine.rds_mysql.getInstancesOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
export function getInstances(args?: GetInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetInstancesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:rds_mysql/getInstances:getInstances", {
        "chargeType": args.chargeType,
        "createTimeEnd": args.createTimeEnd,
        "createTimeStart": args.createTimeStart,
        "dbEngineVersion": args.dbEngineVersion,
        "instanceId": args.instanceId,
        "instanceName": args.instanceName,
        "instanceStatus": args.instanceStatus,
        "instanceType": args.instanceType,
        "kernelVersions": args.kernelVersions,
        "nameRegex": args.nameRegex,
        "nodeSpec": args.nodeSpec,
        "outputFile": args.outputFile,
        "privateNetworkIpAddress": args.privateNetworkIpAddress,
        "privateNetworkVpcId": args.privateNetworkVpcId,
        "projectName": args.projectName,
        "storageType": args.storageType,
        "tags": args.tags,
        "zoneId": args.zoneId,
    }, opts);
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesArgs {
    /**
     * The charge type of the RDS instance.
     */
    chargeType?: string;
    /**
     * The end time of creating RDS instance.
     */
    createTimeEnd?: string;
    /**
     * The start time of creating RDS instance.
     */
    createTimeStart?: string;
    /**
     * The version of the RDS instance.
     */
    dbEngineVersion?: string;
    /**
     * The id of the RDS instance.
     */
    instanceId?: string;
    /**
     * The name of the RDS instance.
     */
    instanceName?: string;
    /**
     * The status of the RDS instance.
     */
    instanceStatus?: string;
    /**
     * Instance type. The value is DoubleNode.
     */
    instanceType?: string;
    /**
     * The kernel version of the instance.
     */
    kernelVersions?: string[];
    /**
     * A Name Regex of RDS instance.
     */
    nameRegex?: string;
    /**
     * Primary node specification. For detailed information about the node specifications, please refer to Product Specifications.
     */
    nodeSpec?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The IP address of the instance's default terminal, used to query the instance by IP address.
     */
    privateNetworkIpAddress?: string;
    /**
     * The ID of the private network. Instances using the specified private network can be filtered by this field.
     */
    privateNetworkVpcId?: string;
    /**
     * The project name of the RDS instance.
     */
    projectName?: string;
    /**
     * Instance storage type. The value is LocalSSD, indicating a local SSD disk.
     */
    storageType?: string;
    /**
     * Tags.
     */
    tags?: inputs.rds_mysql.GetInstancesTag[];
    /**
     * The available zone of the RDS instance.
     */
    zoneId?: string;
}

/**
 * A collection of values returned by getInstances.
 */
export interface GetInstancesResult {
    /**
     * Payment type. Value:
     * PostPaid - Pay-As-You-Go
     * PrePaid - Yearly and monthly (default).
     */
    readonly chargeType?: string;
    readonly createTimeEnd?: string;
    readonly createTimeStart?: string;
    /**
     * The engine version of the RDS instance.
     */
    readonly dbEngineVersion?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Instance ID.
     */
    readonly instanceId?: string;
    /**
     * The name of the RDS instance.
     */
    readonly instanceName?: string;
    /**
     * The status of the RDS instance.
     */
    readonly instanceStatus?: string;
    readonly instanceType?: string;
    /**
     * The current kernel version of the RDS instance.
     */
    readonly kernelVersions?: string[];
    readonly nameRegex?: string;
    /**
     * General instance type, different from Custom instance type.
     */
    readonly nodeSpec?: string;
    readonly outputFile?: string;
    readonly privateNetworkIpAddress?: string;
    readonly privateNetworkVpcId?: string;
    /**
     * The project name of the RDS instance.
     */
    readonly projectName?: string;
    /**
     * The collection of RDS instance query.
     */
    readonly rdsMysqlInstances: outputs.rds_mysql.GetInstancesRdsMysqlInstance[];
    /**
     * Instance storage type.
     */
    readonly storageType?: string;
    /**
     * Tags.
     */
    readonly tags?: outputs.rds_mysql.GetInstancesTag[];
    /**
     * The total count of RDS instance query.
     */
    readonly totalCount: number;
    /**
     * The available zone of the RDS instance.
     */
    readonly zoneId?: string;
}
/**
 * Use this data source to query detailed information of rds mysql instances
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-project1",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-subnet-test-2",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rds_mysql.Instance("fooInstance", {
 *     dbEngineVersion: "MySQL_5_7",
 *     nodeSpec: "rds.mysql.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 80,
 *     subnetId: fooSubnet.id,
 *     instanceName: "acc-test",
 *     lowerCaseTableNames: "1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     parameters: [
 *         {
 *             parameterName: "auto_increment_increment",
 *             parameterValue: "2",
 *         },
 *         {
 *             parameterName: "auto_increment_offset",
 *             parameterValue: "4",
 *         },
 *     ],
 * });
 * const fooInstances = volcengine.rds_mysql.getInstancesOutput({
 *     instanceId: fooInstance.id,
 * });
 * ```
 */
export function getInstancesOutput(args?: GetInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInstancesResult> {
    return pulumi.output(args).apply((a: any) => getInstances(a, opts))
}

/**
 * A collection of arguments for invoking getInstances.
 */
export interface GetInstancesOutputArgs {
    /**
     * The charge type of the RDS instance.
     */
    chargeType?: pulumi.Input<string>;
    /**
     * The end time of creating RDS instance.
     */
    createTimeEnd?: pulumi.Input<string>;
    /**
     * The start time of creating RDS instance.
     */
    createTimeStart?: pulumi.Input<string>;
    /**
     * The version of the RDS instance.
     */
    dbEngineVersion?: pulumi.Input<string>;
    /**
     * The id of the RDS instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * The name of the RDS instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * The status of the RDS instance.
     */
    instanceStatus?: pulumi.Input<string>;
    /**
     * Instance type. The value is DoubleNode.
     */
    instanceType?: pulumi.Input<string>;
    /**
     * The kernel version of the instance.
     */
    kernelVersions?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A Name Regex of RDS instance.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * Primary node specification. For detailed information about the node specifications, please refer to Product Specifications.
     */
    nodeSpec?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The IP address of the instance's default terminal, used to query the instance by IP address.
     */
    privateNetworkIpAddress?: pulumi.Input<string>;
    /**
     * The ID of the private network. Instances using the specified private network can be filtered by this field.
     */
    privateNetworkVpcId?: pulumi.Input<string>;
    /**
     * The project name of the RDS instance.
     */
    projectName?: pulumi.Input<string>;
    /**
     * Instance storage type. The value is LocalSSD, indicating a local SSD disk.
     */
    storageType?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.rds_mysql.GetInstancesTagArgs>[]>;
    /**
     * The available zone of the RDS instance.
     */
    zoneId?: pulumi.Input<string>;
}
