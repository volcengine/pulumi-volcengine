// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage rds mysql allowlist
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.rds_mysql.Allowlist("foo", {
 *     allowListDesc: "acc-test",
 *     allowListName: "acc-test-allowlist",
 *     allowListType: "IPv4",
 *     securityGroupBindInfos: [
 *         {
 *             bindMode: "IngressDirectionIp",
 *             securityGroupId: "sg-13fd7wyduxekg3n6nu5t9fhj7",
 *         },
 *         {
 *             bindMode: "IngressDirectionIp",
 *             securityGroupId: "sg-mjoa9qfyzg1s5smt1a6dmc1l",
 *         },
 *     ],
 *     userAllowLists: [
 *         "192.168.0.0/24",
 *         "192.168.1.0/24",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * RDS AllowList can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:rds_mysql/allowlist:Allowlist default acl-d1fd76693bd54e658912e7337d5b****
 * ```
 */
export class Allowlist extends pulumi.CustomResource {
    /**
     * Get an existing Allowlist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AllowlistState, opts?: pulumi.CustomResourceOptions): Allowlist {
        return new Allowlist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:rds_mysql/allowlist:Allowlist';

    /**
     * Returns true if the given object is an instance of Allowlist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Allowlist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Allowlist.__pulumiType;
    }

    /**
     * White list category. Values:
     * Ordinary: Ordinary white list.
     * Default: Default white list.
     * Description: When this parameter is used as a request parameter, the default value is Ordinary.
     */
    public readonly allowListCategory!: pulumi.Output<string>;
    /**
     * The description of the allow list.
     */
    public readonly allowListDesc!: pulumi.Output<string | undefined>;
    /**
     * The id of the allow list.
     */
    public /*out*/ readonly allowListId!: pulumi.Output<string>;
    /**
     * The name of the allow list.
     */
    public readonly allowListName!: pulumi.Output<string>;
    /**
     * The type of IP address in the whitelist. Currently only IPv4 addresses are supported.
     */
    public readonly allowListType!: pulumi.Output<string>;
    /**
     * Enter an IP address or a range of IP addresses in CIDR format. Please note that if you want to use security group - related parameters, do not use this field. Instead, use the user_allow_list.
     */
    public readonly allowLists!: pulumi.Output<string[]>;
    /**
     * Whitelist information for the associated security group.
     */
    public readonly securityGroupBindInfos!: pulumi.Output<outputs.rds_mysql.AllowlistSecurityGroupBindInfo[] | undefined>;
    /**
     * The security group ids of the allow list.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * IP addresses outside the security group that need to be added to the whitelist. IP addresses or IP address segments in CIDR format can be entered. Note: This field cannot be used simultaneously with AllowList.
     */
    public readonly userAllowLists!: pulumi.Output<string[]>;

    /**
     * Create a Allowlist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AllowlistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AllowlistArgs | AllowlistState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AllowlistState | undefined;
            resourceInputs["allowListCategory"] = state ? state.allowListCategory : undefined;
            resourceInputs["allowListDesc"] = state ? state.allowListDesc : undefined;
            resourceInputs["allowListId"] = state ? state.allowListId : undefined;
            resourceInputs["allowListName"] = state ? state.allowListName : undefined;
            resourceInputs["allowListType"] = state ? state.allowListType : undefined;
            resourceInputs["allowLists"] = state ? state.allowLists : undefined;
            resourceInputs["securityGroupBindInfos"] = state ? state.securityGroupBindInfos : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["userAllowLists"] = state ? state.userAllowLists : undefined;
        } else {
            const args = argsOrState as AllowlistArgs | undefined;
            if ((!args || args.allowListName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'allowListName'");
            }
            resourceInputs["allowListCategory"] = args ? args.allowListCategory : undefined;
            resourceInputs["allowListDesc"] = args ? args.allowListDesc : undefined;
            resourceInputs["allowListName"] = args ? args.allowListName : undefined;
            resourceInputs["allowListType"] = args ? args.allowListType : undefined;
            resourceInputs["allowLists"] = args ? args.allowLists : undefined;
            resourceInputs["securityGroupBindInfos"] = args ? args.securityGroupBindInfos : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["userAllowLists"] = args ? args.userAllowLists : undefined;
            resourceInputs["allowListId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Allowlist.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Allowlist resources.
 */
export interface AllowlistState {
    /**
     * White list category. Values:
     * Ordinary: Ordinary white list.
     * Default: Default white list.
     * Description: When this parameter is used as a request parameter, the default value is Ordinary.
     */
    allowListCategory?: pulumi.Input<string>;
    /**
     * The description of the allow list.
     */
    allowListDesc?: pulumi.Input<string>;
    /**
     * The id of the allow list.
     */
    allowListId?: pulumi.Input<string>;
    /**
     * The name of the allow list.
     */
    allowListName?: pulumi.Input<string>;
    /**
     * The type of IP address in the whitelist. Currently only IPv4 addresses are supported.
     */
    allowListType?: pulumi.Input<string>;
    /**
     * Enter an IP address or a range of IP addresses in CIDR format. Please note that if you want to use security group - related parameters, do not use this field. Instead, use the user_allow_list.
     */
    allowLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whitelist information for the associated security group.
     */
    securityGroupBindInfos?: pulumi.Input<pulumi.Input<inputs.rds_mysql.AllowlistSecurityGroupBindInfo>[]>;
    /**
     * The security group ids of the allow list.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IP addresses outside the security group that need to be added to the whitelist. IP addresses or IP address segments in CIDR format can be entered. Note: This field cannot be used simultaneously with AllowList.
     */
    userAllowLists?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Allowlist resource.
 */
export interface AllowlistArgs {
    /**
     * White list category. Values:
     * Ordinary: Ordinary white list.
     * Default: Default white list.
     * Description: When this parameter is used as a request parameter, the default value is Ordinary.
     */
    allowListCategory?: pulumi.Input<string>;
    /**
     * The description of the allow list.
     */
    allowListDesc?: pulumi.Input<string>;
    /**
     * The name of the allow list.
     */
    allowListName: pulumi.Input<string>;
    /**
     * The type of IP address in the whitelist. Currently only IPv4 addresses are supported.
     */
    allowListType?: pulumi.Input<string>;
    /**
     * Enter an IP address or a range of IP addresses in CIDR format. Please note that if you want to use security group - related parameters, do not use this field. Instead, use the user_allow_list.
     */
    allowLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whitelist information for the associated security group.
     */
    securityGroupBindInfos?: pulumi.Input<pulumi.Input<inputs.rds_mysql.AllowlistSecurityGroupBindInfo>[]>;
    /**
     * The security group ids of the allow list.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * IP addresses outside the security group that need to be added to the whitelist. IP addresses or IP address segments in CIDR format can be entered. Note: This field cannot be used simultaneously with AllowList.
     */
    userAllowLists?: pulumi.Input<pulumi.Input<string>[]>;
}
