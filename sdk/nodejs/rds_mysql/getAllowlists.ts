// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of rds mysql allowlists
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooAllowlist: volcengine.rds_mysql.Allowlist[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooAllowlist.push(new volcengine.rds_mysql.Allowlist(`fooAllowlist-${range.value}`, {
 *         allowListName: `acc-test-allowlist-${range.value}`,
 *         allowListDesc: "acc-test",
 *         allowListType: "IPv4",
 *         allowLists: [
 *             "192.168.0.0/24",
 *             "192.168.1.0/24",
 *         ],
 *     }));
 * }
 * const fooInstance = new volcengine.rds_mysql.Instance("fooInstance", {
 *     instanceName: "acc-test-rds-mysql",
 *     dbEngineVersion: "MySQL_5_7",
 *     nodeSpec: "rds.mysql.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 80,
 *     subnetId: fooSubnet.id,
 *     lowerCaseTableNames: "1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     parameters: [
 *         {
 *             parameterName: "auto_increment_increment",
 *             parameterValue: "2",
 *         },
 *         {
 *             parameterName: "auto_increment_offset",
 *             parameterValue: "4",
 *         },
 *     ],
 *     allowListIds: fooAllowlist.map(__item => __item.id),
 * });
 * const fooAllowlists = volcengine.rds_mysql.getAllowlistsOutput({
 *     instanceId: fooInstance.id,
 *     regionId: "cn-beijing",
 * });
 * ```
 */
export function getAllowlists(args: GetAllowlistsArgs, opts?: pulumi.InvokeOptions): Promise<GetAllowlistsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:rds_mysql/getAllowlists:getAllowlists", {
        "instanceId": args.instanceId,
        "outputFile": args.outputFile,
        "regionId": args.regionId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAllowlists.
 */
export interface GetAllowlistsArgs {
    /**
     * Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
     */
    instanceId?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The region of the allow lists.
     */
    regionId: string;
}

/**
 * A collection of values returned by getAllowlists.
 */
export interface GetAllowlistsResult {
    /**
     * The list of allowed list.
     */
    readonly allowLists: outputs.rds_mysql.GetAllowlistsAllowList[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The id of the instance.
     */
    readonly instanceId?: string;
    readonly outputFile?: string;
    readonly regionId: string;
    /**
     * The total count of Scaling Activity query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of rds mysql allowlists
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooAllowlist: volcengine.rds_mysql.Allowlist[] = [];
 * for (const range = {value: 0}; range.value < 3; range.value++) {
 *     fooAllowlist.push(new volcengine.rds_mysql.Allowlist(`fooAllowlist-${range.value}`, {
 *         allowListName: `acc-test-allowlist-${range.value}`,
 *         allowListDesc: "acc-test",
 *         allowListType: "IPv4",
 *         allowLists: [
 *             "192.168.0.0/24",
 *             "192.168.1.0/24",
 *         ],
 *     }));
 * }
 * const fooInstance = new volcengine.rds_mysql.Instance("fooInstance", {
 *     instanceName: "acc-test-rds-mysql",
 *     dbEngineVersion: "MySQL_5_7",
 *     nodeSpec: "rds.mysql.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 80,
 *     subnetId: fooSubnet.id,
 *     lowerCaseTableNames: "1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     parameters: [
 *         {
 *             parameterName: "auto_increment_increment",
 *             parameterValue: "2",
 *         },
 *         {
 *             parameterName: "auto_increment_offset",
 *             parameterValue: "4",
 *         },
 *     ],
 *     allowListIds: fooAllowlist.map(__item => __item.id),
 * });
 * const fooAllowlists = volcengine.rds_mysql.getAllowlistsOutput({
 *     instanceId: fooInstance.id,
 *     regionId: "cn-beijing",
 * });
 * ```
 */
export function getAllowlistsOutput(args: GetAllowlistsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAllowlistsResult> {
    return pulumi.output(args).apply((a: any) => getAllowlists(a, opts))
}

/**
 * A collection of arguments for invoking getAllowlists.
 */
export interface GetAllowlistsOutputArgs {
    /**
     * Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
     */
    instanceId?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The region of the allow lists.
     */
    regionId: pulumi.Input<string>;
}
