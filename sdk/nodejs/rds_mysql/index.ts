// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountsArgs, AccountsResult, AccountsOutputArgs } from "./accounts";
export const accounts: typeof import("./accounts").accounts = null as any;
export const accountsOutput: typeof import("./accounts").accountsOutput = null as any;
utilities.lazyLoad(exports, ["accounts","accountsOutput"], () => require("./accounts"));

export { AllowlistArgs, AllowlistState } from "./allowlist";
export type Allowlist = import("./allowlist").Allowlist;
export const Allowlist: typeof import("./allowlist").Allowlist = null as any;
utilities.lazyLoad(exports, ["Allowlist"], () => require("./allowlist"));

export { AllowlistAssociateArgs, AllowlistAssociateState } from "./allowlistAssociate";
export type AllowlistAssociate = import("./allowlistAssociate").AllowlistAssociate;
export const AllowlistAssociate: typeof import("./allowlistAssociate").AllowlistAssociate = null as any;
utilities.lazyLoad(exports, ["AllowlistAssociate"], () => require("./allowlistAssociate"));

export { AllowlistsArgs, AllowlistsResult, AllowlistsOutputArgs } from "./allowlists";
export const allowlists: typeof import("./allowlists").allowlists = null as any;
export const allowlistsOutput: typeof import("./allowlists").allowlistsOutput = null as any;
utilities.lazyLoad(exports, ["allowlists","allowlistsOutput"], () => require("./allowlists"));

export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BackupPolicyArgs, BackupPolicyState } from "./backupPolicy";
export type BackupPolicy = import("./backupPolicy").BackupPolicy;
export const BackupPolicy: typeof import("./backupPolicy").BackupPolicy = null as any;
utilities.lazyLoad(exports, ["BackupPolicy"], () => require("./backupPolicy"));

export { BackupsArgs, BackupsResult, BackupsOutputArgs } from "./backups";
export const backups: typeof import("./backups").backups = null as any;
export const backupsOutput: typeof import("./backups").backupsOutput = null as any;
utilities.lazyLoad(exports, ["backups","backupsOutput"], () => require("./backups"));

export { DatabaseArgs, DatabaseState } from "./database";
export type Database = import("./database").Database;
export const Database: typeof import("./database").Database = null as any;
utilities.lazyLoad(exports, ["Database"], () => require("./database"));

export { DatabasesArgs, DatabasesResult, DatabasesOutputArgs } from "./databases";
export const databases: typeof import("./databases").databases = null as any;
export const databasesOutput: typeof import("./databases").databasesOutput = null as any;
utilities.lazyLoad(exports, ["databases","databasesOutput"], () => require("./databases"));

export { EndpointArgs, EndpointState } from "./endpoint";
export type Endpoint = import("./endpoint").Endpoint;
export const Endpoint: typeof import("./endpoint").Endpoint = null as any;
utilities.lazyLoad(exports, ["Endpoint"], () => require("./endpoint"));

export { EndpointPublicAddressArgs, EndpointPublicAddressState } from "./endpointPublicAddress";
export type EndpointPublicAddress = import("./endpointPublicAddress").EndpointPublicAddress;
export const EndpointPublicAddress: typeof import("./endpointPublicAddress").EndpointPublicAddress = null as any;
utilities.lazyLoad(exports, ["EndpointPublicAddress"], () => require("./endpointPublicAddress"));

export { EndpointsArgs, EndpointsResult, EndpointsOutputArgs } from "./endpoints";
export const endpoints: typeof import("./endpoints").endpoints = null as any;
export const endpointsOutput: typeof import("./endpoints").endpointsOutput = null as any;
utilities.lazyLoad(exports, ["endpoints","endpointsOutput"], () => require("./endpoints"));

export { GetAccountsArgs, GetAccountsResult, GetAccountsOutputArgs } from "./getAccounts";
export const getAccounts: typeof import("./getAccounts").getAccounts = null as any;
export const getAccountsOutput: typeof import("./getAccounts").getAccountsOutput = null as any;
utilities.lazyLoad(exports, ["getAccounts","getAccountsOutput"], () => require("./getAccounts"));

export { GetAllowlistsArgs, GetAllowlistsResult, GetAllowlistsOutputArgs } from "./getAllowlists";
export const getAllowlists: typeof import("./getAllowlists").getAllowlists = null as any;
export const getAllowlistsOutput: typeof import("./getAllowlists").getAllowlistsOutput = null as any;
utilities.lazyLoad(exports, ["getAllowlists","getAllowlistsOutput"], () => require("./getAllowlists"));

export { GetBackupsArgs, GetBackupsResult, GetBackupsOutputArgs } from "./getBackups";
export const getBackups: typeof import("./getBackups").getBackups = null as any;
export const getBackupsOutput: typeof import("./getBackups").getBackupsOutput = null as any;
utilities.lazyLoad(exports, ["getBackups","getBackupsOutput"], () => require("./getBackups"));

export { GetDatabasesArgs, GetDatabasesResult, GetDatabasesOutputArgs } from "./getDatabases";
export const getDatabases: typeof import("./getDatabases").getDatabases = null as any;
export const getDatabasesOutput: typeof import("./getDatabases").getDatabasesOutput = null as any;
utilities.lazyLoad(exports, ["getDatabases","getDatabasesOutput"], () => require("./getDatabases"));

export { GetEndpointsArgs, GetEndpointsResult, GetEndpointsOutputArgs } from "./getEndpoints";
export const getEndpoints: typeof import("./getEndpoints").getEndpoints = null as any;
export const getEndpointsOutput: typeof import("./getEndpoints").getEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getEndpoints","getEndpointsOutput"], () => require("./getEndpoints"));

export { GetInstanceSpecsArgs, GetInstanceSpecsResult, GetInstanceSpecsOutputArgs } from "./getInstanceSpecs";
export const getInstanceSpecs: typeof import("./getInstanceSpecs").getInstanceSpecs = null as any;
export const getInstanceSpecsOutput: typeof import("./getInstanceSpecs").getInstanceSpecsOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceSpecs","getInstanceSpecsOutput"], () => require("./getInstanceSpecs"));

export { GetInstancesArgs, GetInstancesResult, GetInstancesOutputArgs } from "./getInstances";
export const getInstances: typeof import("./getInstances").getInstances = null as any;
export const getInstancesOutput: typeof import("./getInstances").getInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getInstances","getInstancesOutput"], () => require("./getInstances"));

export { GetParameterTemplatesArgs, GetParameterTemplatesResult, GetParameterTemplatesOutputArgs } from "./getParameterTemplates";
export const getParameterTemplates: typeof import("./getParameterTemplates").getParameterTemplates = null as any;
export const getParameterTemplatesOutput: typeof import("./getParameterTemplates").getParameterTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getParameterTemplates","getParameterTemplatesOutput"], () => require("./getParameterTemplates"));

export { GetRegionsArgs, GetRegionsResult, GetRegionsOutputArgs } from "./getRegions";
export const getRegions: typeof import("./getRegions").getRegions = null as any;
export const getRegionsOutput: typeof import("./getRegions").getRegionsOutput = null as any;
utilities.lazyLoad(exports, ["getRegions","getRegionsOutput"], () => require("./getRegions"));

export { GetZonesArgs, GetZonesResult, GetZonesOutputArgs } from "./getZones";
export const getZones: typeof import("./getZones").getZones = null as any;
export const getZonesOutput: typeof import("./getZones").getZonesOutput = null as any;
utilities.lazyLoad(exports, ["getZones","getZonesOutput"], () => require("./getZones"));

export { InstanceArgs, InstanceState } from "./instance";
export type Instance = import("./instance").Instance;
export const Instance: typeof import("./instance").Instance = null as any;
utilities.lazyLoad(exports, ["Instance"], () => require("./instance"));

export { InstanceReadonlyNodeArgs, InstanceReadonlyNodeState } from "./instanceReadonlyNode";
export type InstanceReadonlyNode = import("./instanceReadonlyNode").InstanceReadonlyNode;
export const InstanceReadonlyNode: typeof import("./instanceReadonlyNode").InstanceReadonlyNode = null as any;
utilities.lazyLoad(exports, ["InstanceReadonlyNode"], () => require("./instanceReadonlyNode"));

export { InstanceSpecsArgs, InstanceSpecsResult, InstanceSpecsOutputArgs } from "./instanceSpecs";
export const instanceSpecs: typeof import("./instanceSpecs").instanceSpecs = null as any;
export const instanceSpecsOutput: typeof import("./instanceSpecs").instanceSpecsOutput = null as any;
utilities.lazyLoad(exports, ["instanceSpecs","instanceSpecsOutput"], () => require("./instanceSpecs"));

export { InstancesArgs, InstancesResult, InstancesOutputArgs } from "./instances";
export const instances: typeof import("./instances").instances = null as any;
export const instancesOutput: typeof import("./instances").instancesOutput = null as any;
utilities.lazyLoad(exports, ["instances","instancesOutput"], () => require("./instances"));

export { ParameterTemplateArgs, ParameterTemplateState } from "./parameterTemplate";
export type ParameterTemplate = import("./parameterTemplate").ParameterTemplate;
export const ParameterTemplate: typeof import("./parameterTemplate").ParameterTemplate = null as any;
utilities.lazyLoad(exports, ["ParameterTemplate"], () => require("./parameterTemplate"));

export { ParameterTemplatesArgs, ParameterTemplatesResult, ParameterTemplatesOutputArgs } from "./parameterTemplates";
export const parameterTemplates: typeof import("./parameterTemplates").parameterTemplates = null as any;
export const parameterTemplatesOutput: typeof import("./parameterTemplates").parameterTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["parameterTemplates","parameterTemplatesOutput"], () => require("./parameterTemplates"));

export { RegionsArgs, RegionsResult, RegionsOutputArgs } from "./regions";
export const regions: typeof import("./regions").regions = null as any;
export const regionsOutput: typeof import("./regions").regionsOutput = null as any;
utilities.lazyLoad(exports, ["regions","regionsOutput"], () => require("./regions"));

export { ZonesArgs, ZonesResult, ZonesOutputArgs } from "./zones";
export const zones: typeof import("./zones").zones = null as any;
export const zonesOutput: typeof import("./zones").zonesOutput = null as any;
utilities.lazyLoad(exports, ["zones","zonesOutput"], () => require("./zones"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:rds_mysql/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/allowlist:Allowlist":
                return new Allowlist(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/allowlistAssociate:AllowlistAssociate":
                return new AllowlistAssociate(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/backupPolicy:BackupPolicy":
                return new BackupPolicy(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/database:Database":
                return new Database(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/endpoint:Endpoint":
                return new Endpoint(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/endpointPublicAddress:EndpointPublicAddress":
                return new EndpointPublicAddress(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/instance:Instance":
                return new Instance(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/instanceReadonlyNode:InstanceReadonlyNode":
                return new InstanceReadonlyNode(name, <any>undefined, { urn })
            case "volcengine:rds_mysql/parameterTemplate:ParameterTemplate":
                return new ParameterTemplate(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/account", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/allowlist", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/allowlistAssociate", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/backup", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/backupPolicy", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/database", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/endpoint", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/endpointPublicAddress", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/instance", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/instanceReadonlyNode", _module)
pulumi.runtime.registerResourceModule("volcengine", "rds_mysql/parameterTemplate", _module)
