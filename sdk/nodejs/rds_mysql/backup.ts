// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage rds mysql backup
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.rds_mysql.Backup("foo", {
 *     backupMetas: [{
 *         dbName: "order",
 *     }],
 *     backupMethod: "Logical",
 *     instanceId: "mysql-c8c3f45c4b07",
 * });
 * ```
 *
 * ## Import
 *
 * RdsMysqlBackup can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:rds_mysql/backup:Backup default instanceId:backupId
 * ```
 */
export class Backup extends pulumi.CustomResource {
    /**
     * Get an existing Backup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BackupState, opts?: pulumi.CustomResourceOptions): Backup {
        return new Backup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:rds_mysql/backup:Backup';

    /**
     * Returns true if the given object is an instance of Backup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Backup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Backup.__pulumiType;
    }

    /**
     * The id of the backup.
     */
    public /*out*/ readonly backupId!: pulumi.Output<string>;
    /**
     * When creating a library table backup of logical backup type, it is used to specify the library table information to be backed up.
     * Prerequisite: When the value of BackupMethod is Logical, and the BackupType field is not passed.
     * Mutual exclusion situation: When the value of the BackupType field is DumpAll, this field is not effective.
     * Quantity limit: When creating a specified library table backup, the upper limit of the number of libraries is 5000, and the upper limit of the number of tables in each library is 5000.
     */
    public readonly backupMetas!: pulumi.Output<outputs.rds_mysql.BackupBackupMeta[] | undefined>;
    /**
     * Backup method. Value range: Full, full backup under physical backup type. Default value. DumpAll: full database backup under logical backup type. Prerequisite: If you need to create a full database backup of logical backup type, that is, when the value of BackupType is DumpAll, the backup type should be set to logical backup, that is, the value of BackupMethod should be Logical. If you need to create a database table backup of logical backup type, you do not need to pass in this field. You only need to specify the database and table to be backed up in the BackupMeta field.
     */
    public readonly backupMethod!: pulumi.Output<string>;
    /**
     * Backup type. Currently, only full backup is supported. The value is Full.
     */
    public readonly backupType!: pulumi.Output<string>;
    /**
     * The id of the instance.
     */
    public readonly instanceId!: pulumi.Output<string>;

    /**
     * Create a Backup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BackupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BackupArgs | BackupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BackupState | undefined;
            resourceInputs["backupId"] = state ? state.backupId : undefined;
            resourceInputs["backupMetas"] = state ? state.backupMetas : undefined;
            resourceInputs["backupMethod"] = state ? state.backupMethod : undefined;
            resourceInputs["backupType"] = state ? state.backupType : undefined;
            resourceInputs["instanceId"] = state ? state.instanceId : undefined;
        } else {
            const args = argsOrState as BackupArgs | undefined;
            if ((!args || args.instanceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceId'");
            }
            resourceInputs["backupMetas"] = args ? args.backupMetas : undefined;
            resourceInputs["backupMethod"] = args ? args.backupMethod : undefined;
            resourceInputs["backupType"] = args ? args.backupType : undefined;
            resourceInputs["instanceId"] = args ? args.instanceId : undefined;
            resourceInputs["backupId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Backup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Backup resources.
 */
export interface BackupState {
    /**
     * The id of the backup.
     */
    backupId?: pulumi.Input<string>;
    /**
     * When creating a library table backup of logical backup type, it is used to specify the library table information to be backed up.
     * Prerequisite: When the value of BackupMethod is Logical, and the BackupType field is not passed.
     * Mutual exclusion situation: When the value of the BackupType field is DumpAll, this field is not effective.
     * Quantity limit: When creating a specified library table backup, the upper limit of the number of libraries is 5000, and the upper limit of the number of tables in each library is 5000.
     */
    backupMetas?: pulumi.Input<pulumi.Input<inputs.rds_mysql.BackupBackupMeta>[]>;
    /**
     * Backup method. Value range: Full, full backup under physical backup type. Default value. DumpAll: full database backup under logical backup type. Prerequisite: If you need to create a full database backup of logical backup type, that is, when the value of BackupType is DumpAll, the backup type should be set to logical backup, that is, the value of BackupMethod should be Logical. If you need to create a database table backup of logical backup type, you do not need to pass in this field. You only need to specify the database and table to be backed up in the BackupMeta field.
     */
    backupMethod?: pulumi.Input<string>;
    /**
     * Backup type. Currently, only full backup is supported. The value is Full.
     */
    backupType?: pulumi.Input<string>;
    /**
     * The id of the instance.
     */
    instanceId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Backup resource.
 */
export interface BackupArgs {
    /**
     * When creating a library table backup of logical backup type, it is used to specify the library table information to be backed up.
     * Prerequisite: When the value of BackupMethod is Logical, and the BackupType field is not passed.
     * Mutual exclusion situation: When the value of the BackupType field is DumpAll, this field is not effective.
     * Quantity limit: When creating a specified library table backup, the upper limit of the number of libraries is 5000, and the upper limit of the number of tables in each library is 5000.
     */
    backupMetas?: pulumi.Input<pulumi.Input<inputs.rds_mysql.BackupBackupMeta>[]>;
    /**
     * Backup method. Value range: Full, full backup under physical backup type. Default value. DumpAll: full database backup under logical backup type. Prerequisite: If you need to create a full database backup of logical backup type, that is, when the value of BackupType is DumpAll, the backup type should be set to logical backup, that is, the value of BackupMethod should be Logical. If you need to create a database table backup of logical backup type, you do not need to pass in this field. You only need to specify the database and table to be backed up in the BackupMeta field.
     */
    backupMethod?: pulumi.Input<string>;
    /**
     * Backup type. Currently, only full backup is supported. The value is Full.
     */
    backupType?: pulumi.Input<string>;
    /**
     * The id of the instance.
     */
    instanceId: pulumi.Input<string>;
}
