// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of rds mysql accounts
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rds_mysql.Instance("fooInstance", {
 *     instanceName: "acc-test-rds-mysql",
 *     dbEngineVersion: "MySQL_5_7",
 *     nodeSpec: "rds.mysql.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 80,
 *     subnetId: fooSubnet.id,
 *     lowerCaseTableNames: "1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     parameters: [
 *         {
 *             parameterName: "auto_increment_increment",
 *             parameterValue: "2",
 *         },
 *         {
 *             parameterName: "auto_increment_offset",
 *             parameterValue: "4",
 *         },
 *     ],
 * });
 * const fooDatabase = new volcengine.rds_mysql.Database("fooDatabase", {
 *     dbName: "acc-test-db",
 *     instanceId: fooInstance.id,
 * });
 * const fooAccount = new volcengine.rds_mysql.Account("fooAccount", {
 *     accountName: "acc-test-account",
 *     accountPassword: "93f0cb0614Aab12",
 *     accountType: "Normal",
 *     instanceId: fooInstance.id,
 *     accountPrivileges: [{
 *         dbName: fooDatabase.dbName,
 *         accountPrivilege: "Custom",
 *         accountPrivilegeDetail: "SELECT,INSERT",
 *     }],
 * });
 * const fooAccounts = volcengine.rds_mysql.getAccountsOutput({
 *     instanceId: fooInstance.id,
 *     accountName: fooAccount.accountName,
 * });
 * ```
 */
export function getAccounts(args: GetAccountsArgs, opts?: pulumi.InvokeOptions): Promise<GetAccountsResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:rds_mysql/getAccounts:getAccounts", {
        "accountName": args.accountName,
        "instanceId": args.instanceId,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
    }, opts);
}

/**
 * A collection of arguments for invoking getAccounts.
 */
export interface GetAccountsArgs {
    /**
     * The name of the database account. This field supports fuzzy query.
     */
    accountName?: string;
    /**
     * The id of the RDS instance.
     */
    instanceId: string;
    /**
     * A Name Regex of database account.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
}

/**
 * A collection of values returned by getAccounts.
 */
export interface GetAccountsResult {
    /**
     * The name of the database account.
     */
    readonly accountName?: string;
    /**
     * The collection of RDS instance account query.
     */
    readonly accounts: outputs.rds_mysql.GetAccountsAccount[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly instanceId: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The total count of database account query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of rds mysql accounts
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooZones = volcengine.ecs.getZones({});
 * const fooVpc = new volcengine.vpc.Vpc("fooVpc", {
 *     vpcName: "acc-test-vpc",
 *     cidrBlock: "172.16.0.0/16",
 * });
 * const fooSubnet = new volcengine.vpc.Subnet("fooSubnet", {
 *     subnetName: "acc-test-subnet",
 *     cidrBlock: "172.16.0.0/24",
 *     zoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     vpcId: fooVpc.id,
 * });
 * const fooInstance = new volcengine.rds_mysql.Instance("fooInstance", {
 *     instanceName: "acc-test-rds-mysql",
 *     dbEngineVersion: "MySQL_5_7",
 *     nodeSpec: "rds.mysql.1c2g",
 *     primaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     secondaryZoneId: fooZones.then(fooZones => fooZones.zones?.[0]?.id),
 *     storageSpace: 80,
 *     subnetId: fooSubnet.id,
 *     lowerCaseTableNames: "1",
 *     chargeInfo: {
 *         chargeType: "PostPaid",
 *     },
 *     parameters: [
 *         {
 *             parameterName: "auto_increment_increment",
 *             parameterValue: "2",
 *         },
 *         {
 *             parameterName: "auto_increment_offset",
 *             parameterValue: "4",
 *         },
 *     ],
 * });
 * const fooDatabase = new volcengine.rds_mysql.Database("fooDatabase", {
 *     dbName: "acc-test-db",
 *     instanceId: fooInstance.id,
 * });
 * const fooAccount = new volcengine.rds_mysql.Account("fooAccount", {
 *     accountName: "acc-test-account",
 *     accountPassword: "93f0cb0614Aab12",
 *     accountType: "Normal",
 *     instanceId: fooInstance.id,
 *     accountPrivileges: [{
 *         dbName: fooDatabase.dbName,
 *         accountPrivilege: "Custom",
 *         accountPrivilegeDetail: "SELECT,INSERT",
 *     }],
 * });
 * const fooAccounts = volcengine.rds_mysql.getAccountsOutput({
 *     instanceId: fooInstance.id,
 *     accountName: fooAccount.accountName,
 * });
 * ```
 */
export function getAccountsOutput(args: GetAccountsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAccountsResult> {
    return pulumi.output(args).apply((a: any) => getAccounts(a, opts))
}

/**
 * A collection of arguments for invoking getAccounts.
 */
export interface GetAccountsOutputArgs {
    /**
     * The name of the database account. This field supports fuzzy query.
     */
    accountName?: pulumi.Input<string>;
    /**
     * The id of the RDS instance.
     */
    instanceId: pulumi.Input<string>;
    /**
     * A Name Regex of database account.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
}
