// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BgpPeerArgs, BgpPeerState } from "./bgpPeer";
export type BgpPeer = import("./bgpPeer").BgpPeer;
export const BgpPeer: typeof import("./bgpPeer").BgpPeer = null as any;
utilities.lazyLoad(exports, ["BgpPeer"], () => require("./bgpPeer"));

export { BgpPeersArgs, BgpPeersResult, BgpPeersOutputArgs } from "./bgpPeers";
export const bgpPeers: typeof import("./bgpPeers").bgpPeers = null as any;
export const bgpPeersOutput: typeof import("./bgpPeers").bgpPeersOutput = null as any;
utilities.lazyLoad(exports, ["bgpPeers","bgpPeersOutput"], () => require("./bgpPeers"));

export { ConnectionArgs, ConnectionState } from "./connection";
export type Connection = import("./connection").Connection;
export const Connection: typeof import("./connection").Connection = null as any;
utilities.lazyLoad(exports, ["Connection"], () => require("./connection"));

export { ConnectionsArgs, ConnectionsResult, ConnectionsOutputArgs } from "./connections";
export const connections: typeof import("./connections").connections = null as any;
export const connectionsOutput: typeof import("./connections").connectionsOutput = null as any;
utilities.lazyLoad(exports, ["connections","connectionsOutput"], () => require("./connections"));

export { GatewayArgs, GatewayState } from "./gateway";
export type Gateway = import("./gateway").Gateway;
export const Gateway: typeof import("./gateway").Gateway = null as any;
utilities.lazyLoad(exports, ["Gateway"], () => require("./gateway"));

export { GatewayRouteArgs, GatewayRouteState } from "./gatewayRoute";
export type GatewayRoute = import("./gatewayRoute").GatewayRoute;
export const GatewayRoute: typeof import("./gatewayRoute").GatewayRoute = null as any;
utilities.lazyLoad(exports, ["GatewayRoute"], () => require("./gatewayRoute"));

export { GatewayRoutesArgs, GatewayRoutesResult, GatewayRoutesOutputArgs } from "./gatewayRoutes";
export const gatewayRoutes: typeof import("./gatewayRoutes").gatewayRoutes = null as any;
export const gatewayRoutesOutput: typeof import("./gatewayRoutes").gatewayRoutesOutput = null as any;
utilities.lazyLoad(exports, ["gatewayRoutes","gatewayRoutesOutput"], () => require("./gatewayRoutes"));

export { GatewaysArgs, GatewaysResult, GatewaysOutputArgs } from "./gateways";
export const gateways: typeof import("./gateways").gateways = null as any;
export const gatewaysOutput: typeof import("./gateways").gatewaysOutput = null as any;
utilities.lazyLoad(exports, ["gateways","gatewaysOutput"], () => require("./gateways"));

export { GetBgpPeersArgs, GetBgpPeersResult, GetBgpPeersOutputArgs } from "./getBgpPeers";
export const getBgpPeers: typeof import("./getBgpPeers").getBgpPeers = null as any;
export const getBgpPeersOutput: typeof import("./getBgpPeers").getBgpPeersOutput = null as any;
utilities.lazyLoad(exports, ["getBgpPeers","getBgpPeersOutput"], () => require("./getBgpPeers"));

export { GetConnectionsArgs, GetConnectionsResult, GetConnectionsOutputArgs } from "./getConnections";
export const getConnections: typeof import("./getConnections").getConnections = null as any;
export const getConnectionsOutput: typeof import("./getConnections").getConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getConnections","getConnectionsOutput"], () => require("./getConnections"));

export { GetGatewayRoutesArgs, GetGatewayRoutesResult, GetGatewayRoutesOutputArgs } from "./getGatewayRoutes";
export const getGatewayRoutes: typeof import("./getGatewayRoutes").getGatewayRoutes = null as any;
export const getGatewayRoutesOutput: typeof import("./getGatewayRoutes").getGatewayRoutesOutput = null as any;
utilities.lazyLoad(exports, ["getGatewayRoutes","getGatewayRoutesOutput"], () => require("./getGatewayRoutes"));

export { GetGatewaysArgs, GetGatewaysResult, GetGatewaysOutputArgs } from "./getGateways";
export const getGateways: typeof import("./getGateways").getGateways = null as any;
export const getGatewaysOutput: typeof import("./getGateways").getGatewaysOutput = null as any;
utilities.lazyLoad(exports, ["getGateways","getGatewaysOutput"], () => require("./getGateways"));

export { GetVirtualInterfacesArgs, GetVirtualInterfacesResult, GetVirtualInterfacesOutputArgs } from "./getVirtualInterfaces";
export const getVirtualInterfaces: typeof import("./getVirtualInterfaces").getVirtualInterfaces = null as any;
export const getVirtualInterfacesOutput: typeof import("./getVirtualInterfaces").getVirtualInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["getVirtualInterfaces","getVirtualInterfacesOutput"], () => require("./getVirtualInterfaces"));

export { VirtualInterfaceArgs, VirtualInterfaceState } from "./virtualInterface";
export type VirtualInterface = import("./virtualInterface").VirtualInterface;
export const VirtualInterface: typeof import("./virtualInterface").VirtualInterface = null as any;
utilities.lazyLoad(exports, ["VirtualInterface"], () => require("./virtualInterface"));

export { VirtualInterfacesArgs, VirtualInterfacesResult, VirtualInterfacesOutputArgs } from "./virtualInterfaces";
export const virtualInterfaces: typeof import("./virtualInterfaces").virtualInterfaces = null as any;
export const virtualInterfacesOutput: typeof import("./virtualInterfaces").virtualInterfacesOutput = null as any;
utilities.lazyLoad(exports, ["virtualInterfaces","virtualInterfacesOutput"], () => require("./virtualInterfaces"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:direct_connect/bgpPeer:BgpPeer":
                return new BgpPeer(name, <any>undefined, { urn })
            case "volcengine:direct_connect/connection:Connection":
                return new Connection(name, <any>undefined, { urn })
            case "volcengine:direct_connect/gateway:Gateway":
                return new Gateway(name, <any>undefined, { urn })
            case "volcengine:direct_connect/gatewayRoute:GatewayRoute":
                return new GatewayRoute(name, <any>undefined, { urn })
            case "volcengine:direct_connect/virtualInterface:VirtualInterface":
                return new VirtualInterface(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "direct_connect/bgpPeer", _module)
pulumi.runtime.registerResourceModule("volcengine", "direct_connect/connection", _module)
pulumi.runtime.registerResourceModule("volcengine", "direct_connect/gateway", _module)
pulumi.runtime.registerResourceModule("volcengine", "direct_connect/gatewayRoute", _module)
pulumi.runtime.registerResourceModule("volcengine", "direct_connect/virtualInterface", _module)
