// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage direct connect gateway route
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.direct_connect.GatewayRoute("foo", {
 *     destinationCidrBlock: "192.168.40.0/24",
 *     directConnectGatewayId: "dcg-172frxs5utjb44d1w33op****",
 *     nextHopId: "dcv-1729lrbfx7fuo4d1w34pk****",
 * });
 * ```
 *
 * ## Import
 *
 * DirectConnectGatewayRoute can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:direct_connect/gatewayRoute:GatewayRoute default resource_id
 * ```
 */
export class GatewayRoute extends pulumi.CustomResource {
    /**
     * Get an existing GatewayRoute resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GatewayRouteState, opts?: pulumi.CustomResourceOptions): GatewayRoute {
        return new GatewayRoute(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:direct_connect/gatewayRoute:GatewayRoute';

    /**
     * Returns true if the given object is an instance of GatewayRoute.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is GatewayRoute {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GatewayRoute.__pulumiType;
    }

    /**
     * The id of account.
     */
    public /*out*/ readonly accountId!: pulumi.Output<string>;
    /**
     * The create time.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<string>;
    /**
     * The cidr block.
     */
    public readonly destinationCidrBlock!: pulumi.Output<string>;
    /**
     * The id of direct connect gateway.
     */
    public readonly directConnectGatewayId!: pulumi.Output<string>;
    /**
     * The id of direct connect gateway route.
     */
    public /*out*/ readonly directConnectGatewayRouteId!: pulumi.Output<string>;
    /**
     * The id of next hop.
     */
    public readonly nextHopId!: pulumi.Output<string>;
    /**
     * The type of next hop.
     */
    public /*out*/ readonly nextHopType!: pulumi.Output<string>;
    /**
     * The type of route.
     */
    public /*out*/ readonly routeType!: pulumi.Output<string>;
    /**
     * The status info.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a GatewayRoute resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GatewayRouteArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GatewayRouteArgs | GatewayRouteState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GatewayRouteState | undefined;
            resourceInputs["accountId"] = state ? state.accountId : undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["destinationCidrBlock"] = state ? state.destinationCidrBlock : undefined;
            resourceInputs["directConnectGatewayId"] = state ? state.directConnectGatewayId : undefined;
            resourceInputs["directConnectGatewayRouteId"] = state ? state.directConnectGatewayRouteId : undefined;
            resourceInputs["nextHopId"] = state ? state.nextHopId : undefined;
            resourceInputs["nextHopType"] = state ? state.nextHopType : undefined;
            resourceInputs["routeType"] = state ? state.routeType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as GatewayRouteArgs | undefined;
            if ((!args || args.destinationCidrBlock === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationCidrBlock'");
            }
            if ((!args || args.directConnectGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directConnectGatewayId'");
            }
            if ((!args || args.nextHopId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'nextHopId'");
            }
            resourceInputs["destinationCidrBlock"] = args ? args.destinationCidrBlock : undefined;
            resourceInputs["directConnectGatewayId"] = args ? args.directConnectGatewayId : undefined;
            resourceInputs["nextHopId"] = args ? args.nextHopId : undefined;
            resourceInputs["accountId"] = undefined /*out*/;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["directConnectGatewayRouteId"] = undefined /*out*/;
            resourceInputs["nextHopType"] = undefined /*out*/;
            resourceInputs["routeType"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GatewayRoute.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering GatewayRoute resources.
 */
export interface GatewayRouteState {
    /**
     * The id of account.
     */
    accountId?: pulumi.Input<string>;
    /**
     * The create time.
     */
    creationTime?: pulumi.Input<string>;
    /**
     * The cidr block.
     */
    destinationCidrBlock?: pulumi.Input<string>;
    /**
     * The id of direct connect gateway.
     */
    directConnectGatewayId?: pulumi.Input<string>;
    /**
     * The id of direct connect gateway route.
     */
    directConnectGatewayRouteId?: pulumi.Input<string>;
    /**
     * The id of next hop.
     */
    nextHopId?: pulumi.Input<string>;
    /**
     * The type of next hop.
     */
    nextHopType?: pulumi.Input<string>;
    /**
     * The type of route.
     */
    routeType?: pulumi.Input<string>;
    /**
     * The status info.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a GatewayRoute resource.
 */
export interface GatewayRouteArgs {
    /**
     * The cidr block.
     */
    destinationCidrBlock: pulumi.Input<string>;
    /**
     * The id of direct connect gateway.
     */
    directConnectGatewayId: pulumi.Input<string>;
    /**
     * The id of next hop.
     */
    nextHopId: pulumi.Input<string>;
}
