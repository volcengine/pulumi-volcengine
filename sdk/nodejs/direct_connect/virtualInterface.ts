// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage direct connect virtual interface
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.direct_connect.VirtualInterface("foo", {
 *     description: "tf-test",
 *     directConnectConnectionId: "dcc-rtkzeotzst1cu3numzi****",
 *     directConnectGatewayId: "dcg-638x4bjvjawwn3gd5xw****",
 *     enableBfd: false,
 *     localIp: "**.**.**.**&#47;**",
 *     peerIp: "**.**.**.**&#47;**",
 *     routeType: "Static",
 *     tags: [{
 *         key: "k1",
 *         value: "v1",
 *     }],
 *     virtualInterfaceName: "tf-test-vi",
 *     vlanId: 2,
 * });
 * ```
 *
 * ## Import
 *
 * DirectConnectVirtualInterface can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:direct_connect/virtualInterface:VirtualInterface default resource_id
 * ```
 */
export class VirtualInterface extends pulumi.CustomResource {
    /**
     * Get an existing VirtualInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VirtualInterfaceState, opts?: pulumi.CustomResourceOptions): VirtualInterface {
        return new VirtualInterface(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:direct_connect/virtualInterface:VirtualInterface';

    /**
     * Returns true if the given object is an instance of VirtualInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VirtualInterface {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VirtualInterface.__pulumiType;
    }

    /**
     * The band width limit of virtual interface,in Mbps.
     */
    public readonly bandwidth!: pulumi.Output<number>;
    /**
     * The BFD detect interval.
     */
    public readonly bfdDetectInterval!: pulumi.Output<number | undefined>;
    /**
     * The BFD detect times.
     */
    public readonly bfdDetectMultiplier!: pulumi.Output<number | undefined>;
    /**
     * The description of virtual interface.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The direct connect connection ID which associated with.
     */
    public readonly directConnectConnectionId!: pulumi.Output<string>;
    /**
     * The direct connect gateway ID which associated with.
     */
    public readonly directConnectGatewayId!: pulumi.Output<string>;
    /**
     * Whether enable BFD detect.
     */
    public readonly enableBfd!: pulumi.Output<boolean | undefined>;
    /**
     * Whether enable NQA detect.
     */
    public readonly enableNqa!: pulumi.Output<boolean | undefined>;
    /**
     * The local IP that associated with.
     */
    public readonly localIp!: pulumi.Output<string>;
    /**
     * The NQA detect interval.
     */
    public readonly nqaDetectInterval!: pulumi.Output<number | undefined>;
    /**
     * The NAQ detect times.
     */
    public readonly nqaDetectMultiplier!: pulumi.Output<number | undefined>;
    /**
     * The peer IP that associated with.
     */
    public readonly peerIp!: pulumi.Output<string>;
    /**
     * The route type of virtual interface,valid value contains `Static`,`BGP`.
     */
    public readonly routeType!: pulumi.Output<string>;
    /**
     * The tags that direct connect gateway added.
     */
    public readonly tags!: pulumi.Output<outputs.direct_connect.VirtualInterfaceTag[] | undefined>;
    /**
     * The name of virtual interface.
     */
    public readonly virtualInterfaceName!: pulumi.Output<string | undefined>;
    /**
     * The VLAN ID used to connect to the local IDC, please ensure that this VLAN ID is not occupied, the value range: 0 ~ 2999.
     */
    public readonly vlanId!: pulumi.Output<number>;

    /**
     * Create a VirtualInterface resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VirtualInterfaceArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VirtualInterfaceArgs | VirtualInterfaceState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VirtualInterfaceState | undefined;
            resourceInputs["bandwidth"] = state ? state.bandwidth : undefined;
            resourceInputs["bfdDetectInterval"] = state ? state.bfdDetectInterval : undefined;
            resourceInputs["bfdDetectMultiplier"] = state ? state.bfdDetectMultiplier : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["directConnectConnectionId"] = state ? state.directConnectConnectionId : undefined;
            resourceInputs["directConnectGatewayId"] = state ? state.directConnectGatewayId : undefined;
            resourceInputs["enableBfd"] = state ? state.enableBfd : undefined;
            resourceInputs["enableNqa"] = state ? state.enableNqa : undefined;
            resourceInputs["localIp"] = state ? state.localIp : undefined;
            resourceInputs["nqaDetectInterval"] = state ? state.nqaDetectInterval : undefined;
            resourceInputs["nqaDetectMultiplier"] = state ? state.nqaDetectMultiplier : undefined;
            resourceInputs["peerIp"] = state ? state.peerIp : undefined;
            resourceInputs["routeType"] = state ? state.routeType : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["virtualInterfaceName"] = state ? state.virtualInterfaceName : undefined;
            resourceInputs["vlanId"] = state ? state.vlanId : undefined;
        } else {
            const args = argsOrState as VirtualInterfaceArgs | undefined;
            if ((!args || args.directConnectConnectionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directConnectConnectionId'");
            }
            if ((!args || args.directConnectGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directConnectGatewayId'");
            }
            if ((!args || args.localIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'localIp'");
            }
            if ((!args || args.peerIp === undefined) && !opts.urn) {
                throw new Error("Missing required property 'peerIp'");
            }
            if ((!args || args.vlanId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vlanId'");
            }
            resourceInputs["bandwidth"] = args ? args.bandwidth : undefined;
            resourceInputs["bfdDetectInterval"] = args ? args.bfdDetectInterval : undefined;
            resourceInputs["bfdDetectMultiplier"] = args ? args.bfdDetectMultiplier : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["directConnectConnectionId"] = args ? args.directConnectConnectionId : undefined;
            resourceInputs["directConnectGatewayId"] = args ? args.directConnectGatewayId : undefined;
            resourceInputs["enableBfd"] = args ? args.enableBfd : undefined;
            resourceInputs["enableNqa"] = args ? args.enableNqa : undefined;
            resourceInputs["localIp"] = args ? args.localIp : undefined;
            resourceInputs["nqaDetectInterval"] = args ? args.nqaDetectInterval : undefined;
            resourceInputs["nqaDetectMultiplier"] = args ? args.nqaDetectMultiplier : undefined;
            resourceInputs["peerIp"] = args ? args.peerIp : undefined;
            resourceInputs["routeType"] = args ? args.routeType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["virtualInterfaceName"] = args ? args.virtualInterfaceName : undefined;
            resourceInputs["vlanId"] = args ? args.vlanId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VirtualInterface.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VirtualInterface resources.
 */
export interface VirtualInterfaceState {
    /**
     * The band width limit of virtual interface,in Mbps.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * The BFD detect interval.
     */
    bfdDetectInterval?: pulumi.Input<number>;
    /**
     * The BFD detect times.
     */
    bfdDetectMultiplier?: pulumi.Input<number>;
    /**
     * The description of virtual interface.
     */
    description?: pulumi.Input<string>;
    /**
     * The direct connect connection ID which associated with.
     */
    directConnectConnectionId?: pulumi.Input<string>;
    /**
     * The direct connect gateway ID which associated with.
     */
    directConnectGatewayId?: pulumi.Input<string>;
    /**
     * Whether enable BFD detect.
     */
    enableBfd?: pulumi.Input<boolean>;
    /**
     * Whether enable NQA detect.
     */
    enableNqa?: pulumi.Input<boolean>;
    /**
     * The local IP that associated with.
     */
    localIp?: pulumi.Input<string>;
    /**
     * The NQA detect interval.
     */
    nqaDetectInterval?: pulumi.Input<number>;
    /**
     * The NAQ detect times.
     */
    nqaDetectMultiplier?: pulumi.Input<number>;
    /**
     * The peer IP that associated with.
     */
    peerIp?: pulumi.Input<string>;
    /**
     * The route type of virtual interface,valid value contains `Static`,`BGP`.
     */
    routeType?: pulumi.Input<string>;
    /**
     * The tags that direct connect gateway added.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.direct_connect.VirtualInterfaceTag>[]>;
    /**
     * The name of virtual interface.
     */
    virtualInterfaceName?: pulumi.Input<string>;
    /**
     * The VLAN ID used to connect to the local IDC, please ensure that this VLAN ID is not occupied, the value range: 0 ~ 2999.
     */
    vlanId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a VirtualInterface resource.
 */
export interface VirtualInterfaceArgs {
    /**
     * The band width limit of virtual interface,in Mbps.
     */
    bandwidth?: pulumi.Input<number>;
    /**
     * The BFD detect interval.
     */
    bfdDetectInterval?: pulumi.Input<number>;
    /**
     * The BFD detect times.
     */
    bfdDetectMultiplier?: pulumi.Input<number>;
    /**
     * The description of virtual interface.
     */
    description?: pulumi.Input<string>;
    /**
     * The direct connect connection ID which associated with.
     */
    directConnectConnectionId: pulumi.Input<string>;
    /**
     * The direct connect gateway ID which associated with.
     */
    directConnectGatewayId: pulumi.Input<string>;
    /**
     * Whether enable BFD detect.
     */
    enableBfd?: pulumi.Input<boolean>;
    /**
     * Whether enable NQA detect.
     */
    enableNqa?: pulumi.Input<boolean>;
    /**
     * The local IP that associated with.
     */
    localIp: pulumi.Input<string>;
    /**
     * The NQA detect interval.
     */
    nqaDetectInterval?: pulumi.Input<number>;
    /**
     * The NAQ detect times.
     */
    nqaDetectMultiplier?: pulumi.Input<number>;
    /**
     * The peer IP that associated with.
     */
    peerIp: pulumi.Input<string>;
    /**
     * The route type of virtual interface,valid value contains `Static`,`BGP`.
     */
    routeType?: pulumi.Input<string>;
    /**
     * The tags that direct connect gateway added.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.direct_connect.VirtualInterfaceTag>[]>;
    /**
     * The name of virtual interface.
     */
    virtualInterfaceName?: pulumi.Input<string>;
    /**
     * The VLAN ID used to connect to the local IDC, please ensure that this VLAN ID is not occupied, the value range: 0 ~ 2999.
     */
    vlanId: pulumi.Input<number>;
}
