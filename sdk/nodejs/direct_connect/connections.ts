// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of direct connect connections
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.direct_connect.getConnections({
 *     directConnectConnectionName: "tf_test",
 * });
 * ```
 */
/** @deprecated volcengine.direct_connect.Connections has been deprecated in favor of volcengine.direct_connect.getConnections */
export function connections(args?: ConnectionsArgs, opts?: pulumi.InvokeOptions): Promise<ConnectionsResult> {
    pulumi.log.warn("connections is deprecated: volcengine.direct_connect.Connections has been deprecated in favor of volcengine.direct_connect.getConnections")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:direct_connect/connections:Connections", {
        "connectionType": args.connectionType,
        "directConnectAccessPointId": args.directConnectAccessPointId,
        "directConnectConnectionName": args.directConnectConnectionName,
        "ids": args.ids,
        "lineOperator": args.lineOperator,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "peerLocation": args.peerLocation,
        "tagFilters": args.tagFilters,
    }, opts);
}

/**
 * A collection of arguments for invoking Connections.
 */
export interface ConnectionsArgs {
    /**
     * The connection type of physical leased line,valid value contains `SharedConnection`,`DedicatedConnection`.
     */
    connectionType?: string;
    /**
     * The ID of the physical leased line access point.
     */
    directConnectAccessPointId?: string;
    /**
     * The name of directi connect connection.
     */
    directConnectConnectionName?: string;
    /**
     * A list of IDs.
     */
    ids?: string[];
    /**
     * The operator of the physical leased line,valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
     */
    lineOperator?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The peer access point of the physical leased line.
     */
    peerLocation?: string;
    /**
     * The filter tag of direct connect.
     */
    tagFilters?: inputs.direct_connect.ConnectionsTagFilter[];
}

/**
 * A collection of values returned by Connections.
 */
export interface ConnectionsResult {
    /**
     * The connection type of direct connect.
     */
    readonly connectionType?: string;
    /**
     * The access point id of direct connect.
     */
    readonly directConnectAccessPointId?: string;
    /**
     * The name of direct connect connection.
     */
    readonly directConnectConnectionName?: string;
    /**
     * The collection of query.
     */
    readonly directConnectConnections: outputs.direct_connect.ConnectionsDirectConnectConnection[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The operator of physical leased line.
     */
    readonly lineOperator?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The peer access point of the physical leased line.
     */
    readonly peerLocation?: string;
    readonly tagFilters?: outputs.direct_connect.ConnectionsTagFilter[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
}
/**
 * Use this data source to query detailed information of direct connect connections
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.direct_connect.getConnections({
 *     directConnectConnectionName: "tf_test",
 * });
 * ```
 */
/** @deprecated volcengine.direct_connect.Connections has been deprecated in favor of volcengine.direct_connect.getConnections */
export function connectionsOutput(args?: ConnectionsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ConnectionsResult> {
    return pulumi.output(args).apply((a: any) => connections(a, opts))
}

/**
 * A collection of arguments for invoking Connections.
 */
export interface ConnectionsOutputArgs {
    /**
     * The connection type of physical leased line,valid value contains `SharedConnection`,`DedicatedConnection`.
     */
    connectionType?: pulumi.Input<string>;
    /**
     * The ID of the physical leased line access point.
     */
    directConnectAccessPointId?: pulumi.Input<string>;
    /**
     * The name of directi connect connection.
     */
    directConnectConnectionName?: pulumi.Input<string>;
    /**
     * A list of IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The operator of the physical leased line,valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
     */
    lineOperator?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The peer access point of the physical leased line.
     */
    peerLocation?: pulumi.Input<string>;
    /**
     * The filter tag of direct connect.
     */
    tagFilters?: pulumi.Input<pulumi.Input<inputs.direct_connect.ConnectionsTagFilterArgs>[]>;
}
