// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of direct connect virtual interfaces
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.direct_connect.getVirtualInterfaces({
 *     virtualInterfaceName: "tf-test",
 * });
 * ```
 */
export function getVirtualInterfaces(args?: GetVirtualInterfacesArgs, opts?: pulumi.InvokeOptions): Promise<GetVirtualInterfacesResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:direct_connect/getVirtualInterfaces:getVirtualInterfaces", {
        "directConnectConnectionId": args.directConnectConnectionId,
        "directConnectGatewayId": args.directConnectGatewayId,
        "ids": args.ids,
        "localIp": args.localIp,
        "nameRegex": args.nameRegex,
        "outputFile": args.outputFile,
        "peerIp": args.peerIp,
        "routeType": args.routeType,
        "tagFilters": args.tagFilters,
        "virtualInterfaceName": args.virtualInterfaceName,
        "vlanId": args.vlanId,
    }, opts);
}

/**
 * A collection of arguments for invoking getVirtualInterfaces.
 */
export interface GetVirtualInterfacesArgs {
    /**
     * The direct connect connection ID that associated with this virtual interface.
     */
    directConnectConnectionId?: string;
    /**
     * The direct connect gateway ID that associated with this virtual interface.
     */
    directConnectGatewayId?: string;
    /**
     * A list of IDs.
     */
    ids?: string[];
    /**
     * The local IP that associated with this virtual interface.
     */
    localIp?: string;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The peer IP that associated with this virtual interface.
     */
    peerIp?: string;
    /**
     * The route type of virtual interface.
     */
    routeType?: string;
    /**
     * The filter tag of direct connect virtual interface.
     */
    tagFilters?: inputs.direct_connect.GetVirtualInterfacesTagFilter[];
    /**
     * The name of virtual interface.
     */
    virtualInterfaceName?: string;
    /**
     * The VLAN ID of virtual interface.
     */
    vlanId?: number;
}

/**
 * A collection of values returned by getVirtualInterfaces.
 */
export interface GetVirtualInterfacesResult {
    /**
     * The direct connect connection ID which associated with this virtual interface.
     */
    readonly directConnectConnectionId?: string;
    /**
     * The direct connect gateway ID which associated with this virtual interface.
     */
    readonly directConnectGatewayId?: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The local IP that associated with this virtual interface.
     */
    readonly localIp?: string;
    readonly nameRegex?: string;
    readonly outputFile?: string;
    /**
     * The peer IP that associated with this virtual interface.
     */
    readonly peerIp?: string;
    /**
     * The route type of this virtual interface.
     */
    readonly routeType?: string;
    readonly tagFilters?: outputs.direct_connect.GetVirtualInterfacesTagFilter[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    /**
     * The name of virtual interface.
     */
    readonly virtualInterfaceName?: string;
    /**
     * The collection of query.
     */
    readonly virtualInterfaces: outputs.direct_connect.GetVirtualInterfacesVirtualInterface[];
    /**
     * The VLAN ID of virtual interface.
     */
    readonly vlanId?: number;
}
/**
 * Use this data source to query detailed information of direct connect virtual interfaces
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 *
 * const foo = volcengine.direct_connect.getVirtualInterfaces({
 *     virtualInterfaceName: "tf-test",
 * });
 * ```
 */
export function getVirtualInterfacesOutput(args?: GetVirtualInterfacesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVirtualInterfacesResult> {
    return pulumi.output(args).apply((a: any) => getVirtualInterfaces(a, opts))
}

/**
 * A collection of arguments for invoking getVirtualInterfaces.
 */
export interface GetVirtualInterfacesOutputArgs {
    /**
     * The direct connect connection ID that associated with this virtual interface.
     */
    directConnectConnectionId?: pulumi.Input<string>;
    /**
     * The direct connect gateway ID that associated with this virtual interface.
     */
    directConnectGatewayId?: pulumi.Input<string>;
    /**
     * A list of IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The local IP that associated with this virtual interface.
     */
    localIp?: pulumi.Input<string>;
    /**
     * A Name Regex of Resource.
     */
    nameRegex?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The peer IP that associated with this virtual interface.
     */
    peerIp?: pulumi.Input<string>;
    /**
     * The route type of virtual interface.
     */
    routeType?: pulumi.Input<string>;
    /**
     * The filter tag of direct connect virtual interface.
     */
    tagFilters?: pulumi.Input<pulumi.Input<inputs.direct_connect.GetVirtualInterfacesTagFilterArgs>[]>;
    /**
     * The name of virtual interface.
     */
    virtualInterfaceName?: pulumi.Input<string>;
    /**
     * The VLAN ID of virtual interface.
     */
    vlanId?: pulumi.Input<number>;
}
