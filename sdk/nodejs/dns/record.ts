// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage dns record
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.dns.Record("foo", {
 *     host: "a.com",
 *     type: "A",
 *     value: "1.1.1.2",
 *     zid: 58846,
 * });
 * ```
 *
 * ## Import
 *
 * DnsRecord can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:dns/record:Record default ZID:recordId
 * ```
 */
export class Record extends pulumi.CustomResource {
    /**
     * Get an existing Record resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RecordState, opts?: pulumi.CustomResourceOptions): Record {
        return new Record(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:dns/record:Record';

    /**
     * Returns true if the given object is an instance of Record.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Record {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Record.__pulumiType;
    }

    /**
     * The creation time of the domain.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Whether the DNS record is enabled.
     */
    public /*out*/ readonly enable!: pulumi.Output<boolean>;
    /**
     * The host record, which is the domain prefix of the subdomain.
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * The value of the DNS record.
     */
    public readonly line!: pulumi.Output<string>;
    /**
     * The account ID that called this API.
     */
    public /*out*/ readonly operators!: pulumi.Output<string[]>;
    /**
     * The account ID that called this API.
     */
    public /*out*/ readonly pqdn!: pulumi.Output<string>;
    /**
     * The ID of the DNS record.
     */
    public /*out*/ readonly recordId!: pulumi.Output<string>;
    /**
     * The ID of the record set where the DNS record is located.
     */
    public /*out*/ readonly recordSetId!: pulumi.Output<string>;
    /**
     * The remark for the DNS record.
     */
    public readonly remark!: pulumi.Output<string>;
    /**
     * The tag information of the DNS record.
     */
    public /*out*/ readonly tags!: pulumi.Output<string[]>;
    /**
     * The Time-To-Live (TTL) of the DNS record, in seconds.
     */
    public readonly ttl!: pulumi.Output<number>;
    /**
     * The record type.
     */
    public readonly type!: pulumi.Output<string>;
    /**
     * The update time of the domain.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The value of the DNS record.
     */
    public readonly value!: pulumi.Output<string>;
    /**
     * The weight of the DNS record.
     */
    public readonly weight!: pulumi.Output<number>;
    /**
     * The ID of the domain to which you want to add a DNS record.
     */
    public readonly zid!: pulumi.Output<number>;

    /**
     * Create a Record resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RecordArgs | RecordState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RecordState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["enable"] = state ? state.enable : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["line"] = state ? state.line : undefined;
            resourceInputs["operators"] = state ? state.operators : undefined;
            resourceInputs["pqdn"] = state ? state.pqdn : undefined;
            resourceInputs["recordId"] = state ? state.recordId : undefined;
            resourceInputs["recordSetId"] = state ? state.recordSetId : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["ttl"] = state ? state.ttl : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
            resourceInputs["weight"] = state ? state.weight : undefined;
            resourceInputs["zid"] = state ? state.zid : undefined;
        } else {
            const args = argsOrState as RecordArgs | undefined;
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            if ((!args || args.zid === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zid'");
            }
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["line"] = args ? args.line : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["ttl"] = args ? args.ttl : undefined;
            resourceInputs["type"] = args ? args.type : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
            resourceInputs["weight"] = args ? args.weight : undefined;
            resourceInputs["zid"] = args ? args.zid : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["enable"] = undefined /*out*/;
            resourceInputs["operators"] = undefined /*out*/;
            resourceInputs["pqdn"] = undefined /*out*/;
            resourceInputs["recordId"] = undefined /*out*/;
            resourceInputs["recordSetId"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Record.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Record resources.
 */
export interface RecordState {
    /**
     * The creation time of the domain.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Whether the DNS record is enabled.
     */
    enable?: pulumi.Input<boolean>;
    /**
     * The host record, which is the domain prefix of the subdomain.
     */
    host?: pulumi.Input<string>;
    /**
     * The value of the DNS record.
     */
    line?: pulumi.Input<string>;
    /**
     * The account ID that called this API.
     */
    operators?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The account ID that called this API.
     */
    pqdn?: pulumi.Input<string>;
    /**
     * The ID of the DNS record.
     */
    recordId?: pulumi.Input<string>;
    /**
     * The ID of the record set where the DNS record is located.
     */
    recordSetId?: pulumi.Input<string>;
    /**
     * The remark for the DNS record.
     */
    remark?: pulumi.Input<string>;
    /**
     * The tag information of the DNS record.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Time-To-Live (TTL) of the DNS record, in seconds.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The record type.
     */
    type?: pulumi.Input<string>;
    /**
     * The update time of the domain.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The value of the DNS record.
     */
    value?: pulumi.Input<string>;
    /**
     * The weight of the DNS record.
     */
    weight?: pulumi.Input<number>;
    /**
     * The ID of the domain to which you want to add a DNS record.
     */
    zid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Record resource.
 */
export interface RecordArgs {
    /**
     * The host record, which is the domain prefix of the subdomain.
     */
    host: pulumi.Input<string>;
    /**
     * The value of the DNS record.
     */
    line?: pulumi.Input<string>;
    /**
     * The remark for the DNS record.
     */
    remark?: pulumi.Input<string>;
    /**
     * The Time-To-Live (TTL) of the DNS record, in seconds.
     */
    ttl?: pulumi.Input<number>;
    /**
     * The record type.
     */
    type: pulumi.Input<string>;
    /**
     * The value of the DNS record.
     */
    value: pulumi.Input<string>;
    /**
     * The weight of the DNS record.
     */
    weight?: pulumi.Input<number>;
    /**
     * The ID of the domain to which you want to add a DNS record.
     */
    zid: pulumi.Input<number>;
}
