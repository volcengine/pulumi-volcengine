// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { BackupArgs, BackupState } from "./backup";
export type Backup = import("./backup").Backup;
export const Backup: typeof import("./backup").Backup = null as any;
utilities.lazyLoad(exports, ["Backup"], () => require("./backup"));

export { BackupScheduleArgs, BackupScheduleState } from "./backupSchedule";
export type BackupSchedule = import("./backupSchedule").BackupSchedule;
export const BackupSchedule: typeof import("./backupSchedule").BackupSchedule = null as any;
utilities.lazyLoad(exports, ["BackupSchedule"], () => require("./backupSchedule"));

export { BackupsArgs, BackupsResult, BackupsOutputArgs } from "./backups";
export const backups: typeof import("./backups").backups = null as any;
export const backupsOutput: typeof import("./backups").backupsOutput = null as any;
utilities.lazyLoad(exports, ["backups","backupsOutput"], () => require("./backups"));

export { RecordArgs, RecordState } from "./record";
export type Record = import("./record").Record;
export const Record: typeof import("./record").Record = null as any;
utilities.lazyLoad(exports, ["Record"], () => require("./record"));

export { RecordSetsArgs, RecordSetsResult, RecordSetsOutputArgs } from "./recordSets";
export const recordSets: typeof import("./recordSets").recordSets = null as any;
export const recordSetsOutput: typeof import("./recordSets").recordSetsOutput = null as any;
utilities.lazyLoad(exports, ["recordSets","recordSetsOutput"], () => require("./recordSets"));

export { RecordsArgs, RecordsResult, RecordsOutputArgs } from "./records";
export const records: typeof import("./records").records = null as any;
export const recordsOutput: typeof import("./records").recordsOutput = null as any;
utilities.lazyLoad(exports, ["records","recordsOutput"], () => require("./records"));

export { ZoneArgs, ZoneState } from "./zone";
export type Zone = import("./zone").Zone;
export const Zone: typeof import("./zone").Zone = null as any;
utilities.lazyLoad(exports, ["Zone"], () => require("./zone"));

export { ZonesArgs, ZonesResult, ZonesOutputArgs } from "./zones";
export const zones: typeof import("./zones").zones = null as any;
export const zonesOutput: typeof import("./zones").zonesOutput = null as any;
utilities.lazyLoad(exports, ["zones","zonesOutput"], () => require("./zones"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:dns/backup:Backup":
                return new Backup(name, <any>undefined, { urn })
            case "volcengine:dns/backupSchedule:BackupSchedule":
                return new BackupSchedule(name, <any>undefined, { urn })
            case "volcengine:dns/record:Record":
                return new Record(name, <any>undefined, { urn })
            case "volcengine:dns/zone:Zone":
                return new Zone(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "dns/backup", _module)
pulumi.runtime.registerResourceModule("volcengine", "dns/backupSchedule", _module)
pulumi.runtime.registerResourceModule("volcengine", "dns/record", _module)
pulumi.runtime.registerResourceModule("volcengine", "dns/zone", _module)
