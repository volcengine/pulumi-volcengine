// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage dns zone
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.dns.Zone("foo", {
 *     projectName: "xxx",
 *     remark: "xxx",
 *     tags: [{
 *         key: "xx",
 *         value: "xx",
 *     }],
 *     zoneName: "xxxx.com",
 * });
 * ```
 *
 * ## Import
 *
 * Zone can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:dns/zone:Zone default resource_id
 * ```
 */
export class Zone extends pulumi.CustomResource {
    /**
     * Get an existing Zone resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneState, opts?: pulumi.CustomResourceOptions): Zone {
        return new Zone(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:dns/zone:Zone';

    /**
     * Returns true if the given object is an instance of Zone.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Zone {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Zone.__pulumiType;
    }

    /**
     * The list of DNS servers allocated to the domain by BytePlus DNS.
     */
    public /*out*/ readonly allocateDnsServerLists!: pulumi.Output<string[]>;
    /**
     * Whether automatic domain renewal is enabled.
     */
    public /*out*/ readonly autoRenew!: pulumi.Output<boolean>;
    /**
     * The version of DNS DDoS protection service.
     */
    public /*out*/ readonly dnsSecurity!: pulumi.Output<string>;
    /**
     * The expiration time of the domain.
     */
    public /*out*/ readonly expiredTime!: pulumi.Output<number>;
    /**
     * The ID of the instance. For free edition, the value of this field is null.
     */
    public /*out*/ readonly instanceNo!: pulumi.Output<string>;
    /**
     * Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
     */
    public /*out*/ readonly isNsCorrect!: pulumi.Output<boolean>;
    /**
     * Whether the domain is a subdomain.
     */
    public /*out*/ readonly isSubDomain!: pulumi.Output<boolean>;
    /**
     * The project to which the domain name belongs. The default value is default.
     */
    public readonly projectName!: pulumi.Output<string>;
    /**
     * The list of DNS servers actually used by the domain.
     */
    public /*out*/ readonly realDnsServerLists!: pulumi.Output<string[]>;
    /**
     * The total number of DNS records under the domain.
     */
    public /*out*/ readonly recordCount!: pulumi.Output<number>;
    /**
     * The remark for the domain.
     */
    public readonly remark!: pulumi.Output<string | undefined>;
    /**
     * The status of the domain.
     */
    public /*out*/ readonly stage!: pulumi.Output<number>;
    /**
     * The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
     */
    public /*out*/ readonly subDomainHost!: pulumi.Output<string>;
    /**
     * Tags.
     */
    public readonly tags!: pulumi.Output<outputs.dns.ZoneTag[] | undefined>;
    /**
     * The edition of the domain.
     */
    public /*out*/ readonly tradeCode!: pulumi.Output<string>;
    /**
     * The update time of the domain.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;
    /**
     * The ID of the domain.
     */
    public /*out*/ readonly zid!: pulumi.Output<number>;
    /**
     * The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
     */
    public readonly zoneName!: pulumi.Output<string>;

    /**
     * Create a Zone resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneArgs | ZoneState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZoneState | undefined;
            resourceInputs["allocateDnsServerLists"] = state ? state.allocateDnsServerLists : undefined;
            resourceInputs["autoRenew"] = state ? state.autoRenew : undefined;
            resourceInputs["dnsSecurity"] = state ? state.dnsSecurity : undefined;
            resourceInputs["expiredTime"] = state ? state.expiredTime : undefined;
            resourceInputs["instanceNo"] = state ? state.instanceNo : undefined;
            resourceInputs["isNsCorrect"] = state ? state.isNsCorrect : undefined;
            resourceInputs["isSubDomain"] = state ? state.isSubDomain : undefined;
            resourceInputs["projectName"] = state ? state.projectName : undefined;
            resourceInputs["realDnsServerLists"] = state ? state.realDnsServerLists : undefined;
            resourceInputs["recordCount"] = state ? state.recordCount : undefined;
            resourceInputs["remark"] = state ? state.remark : undefined;
            resourceInputs["stage"] = state ? state.stage : undefined;
            resourceInputs["subDomainHost"] = state ? state.subDomainHost : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["tradeCode"] = state ? state.tradeCode : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
            resourceInputs["zid"] = state ? state.zid : undefined;
            resourceInputs["zoneName"] = state ? state.zoneName : undefined;
        } else {
            const args = argsOrState as ZoneArgs | undefined;
            if ((!args || args.zoneName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneName'");
            }
            resourceInputs["projectName"] = args ? args.projectName : undefined;
            resourceInputs["remark"] = args ? args.remark : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["zoneName"] = args ? args.zoneName : undefined;
            resourceInputs["allocateDnsServerLists"] = undefined /*out*/;
            resourceInputs["autoRenew"] = undefined /*out*/;
            resourceInputs["dnsSecurity"] = undefined /*out*/;
            resourceInputs["expiredTime"] = undefined /*out*/;
            resourceInputs["instanceNo"] = undefined /*out*/;
            resourceInputs["isNsCorrect"] = undefined /*out*/;
            resourceInputs["isSubDomain"] = undefined /*out*/;
            resourceInputs["realDnsServerLists"] = undefined /*out*/;
            resourceInputs["recordCount"] = undefined /*out*/;
            resourceInputs["stage"] = undefined /*out*/;
            resourceInputs["subDomainHost"] = undefined /*out*/;
            resourceInputs["tradeCode"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
            resourceInputs["zid"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Zone.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Zone resources.
 */
export interface ZoneState {
    /**
     * The list of DNS servers allocated to the domain by BytePlus DNS.
     */
    allocateDnsServerLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether automatic domain renewal is enabled.
     */
    autoRenew?: pulumi.Input<boolean>;
    /**
     * The version of DNS DDoS protection service.
     */
    dnsSecurity?: pulumi.Input<string>;
    /**
     * The expiration time of the domain.
     */
    expiredTime?: pulumi.Input<number>;
    /**
     * The ID of the instance. For free edition, the value of this field is null.
     */
    instanceNo?: pulumi.Input<string>;
    /**
     * Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
     */
    isNsCorrect?: pulumi.Input<boolean>;
    /**
     * Whether the domain is a subdomain.
     */
    isSubDomain?: pulumi.Input<boolean>;
    /**
     * The project to which the domain name belongs. The default value is default.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The list of DNS servers actually used by the domain.
     */
    realDnsServerLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The total number of DNS records under the domain.
     */
    recordCount?: pulumi.Input<number>;
    /**
     * The remark for the domain.
     */
    remark?: pulumi.Input<string>;
    /**
     * The status of the domain.
     */
    stage?: pulumi.Input<number>;
    /**
     * The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
     */
    subDomainHost?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.dns.ZoneTag>[]>;
    /**
     * The edition of the domain.
     */
    tradeCode?: pulumi.Input<string>;
    /**
     * The update time of the domain.
     */
    updatedAt?: pulumi.Input<string>;
    /**
     * The ID of the domain.
     */
    zid?: pulumi.Input<number>;
    /**
     * The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
     */
    zoneName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Zone resource.
 */
export interface ZoneArgs {
    /**
     * The project to which the domain name belongs. The default value is default.
     */
    projectName?: pulumi.Input<string>;
    /**
     * The remark for the domain.
     */
    remark?: pulumi.Input<string>;
    /**
     * Tags.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.dns.ZoneTag>[]>;
    /**
     * The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
     */
    zoneName: pulumi.Input<string>;
}
