// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage organization service control policy attachment
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooServiceControlPolicy = new volcengine.organization.ServiceControlPolicy("fooServiceControlPolicy", {
 *     policyName: "tfpolicy11",
 *     description: "tftest1",
 *     statement: "{\"Statement\":[{\"Effect\":\"Deny\",\"Action\":[\"ecs:RunInstances\"],\"Resource\":[\"*\"]}]}",
 * });
 * const fooServiceControlPolicyAttachment = new volcengine.organization.ServiceControlPolicyAttachment("fooServiceControlPolicyAttachment", {
 *     policyId: fooServiceControlPolicy.id,
 *     targetId: "21*********94",
 *     targetType: "Account",
 * });
 * const foo1 = new volcengine.organization.ServiceControlPolicyAttachment("foo1", {
 *     policyId: fooServiceControlPolicy.id,
 *     targetId: "73*********9",
 *     targetType: "OU",
 * });
 * ```
 *
 * ## Import
 *
 * Service Control policy attachment can be imported using the id, e.g.
 *
 * ```sh
 *  $ pulumi import volcengine:organization/serviceControlPolicyAttachment:ServiceControlPolicyAttachment default PolicyID:TargetID
 * ```
 */
export class ServiceControlPolicyAttachment extends pulumi.CustomResource {
    /**
     * Get an existing ServiceControlPolicyAttachment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceControlPolicyAttachmentState, opts?: pulumi.CustomResourceOptions): ServiceControlPolicyAttachment {
        return new ServiceControlPolicyAttachment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:organization/serviceControlPolicyAttachment:ServiceControlPolicyAttachment';

    /**
     * Returns true if the given object is an instance of ServiceControlPolicyAttachment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceControlPolicyAttachment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceControlPolicyAttachment.__pulumiType;
    }

    /**
     * The id of policy.
     */
    public readonly policyId!: pulumi.Output<string>;
    /**
     * The id of target.
     */
    public readonly targetId!: pulumi.Output<string>;
    /**
     * The type of target. Support Account or OU.
     */
    public readonly targetType!: pulumi.Output<string>;

    /**
     * Create a ServiceControlPolicyAttachment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceControlPolicyAttachmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceControlPolicyAttachmentArgs | ServiceControlPolicyAttachmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceControlPolicyAttachmentState | undefined;
            resourceInputs["policyId"] = state ? state.policyId : undefined;
            resourceInputs["targetId"] = state ? state.targetId : undefined;
            resourceInputs["targetType"] = state ? state.targetType : undefined;
        } else {
            const args = argsOrState as ServiceControlPolicyAttachmentArgs | undefined;
            if ((!args || args.policyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policyId'");
            }
            if ((!args || args.targetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetId'");
            }
            if ((!args || args.targetType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'targetType'");
            }
            resourceInputs["policyId"] = args ? args.policyId : undefined;
            resourceInputs["targetId"] = args ? args.targetId : undefined;
            resourceInputs["targetType"] = args ? args.targetType : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ServiceControlPolicyAttachment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceControlPolicyAttachment resources.
 */
export interface ServiceControlPolicyAttachmentState {
    /**
     * The id of policy.
     */
    policyId?: pulumi.Input<string>;
    /**
     * The id of target.
     */
    targetId?: pulumi.Input<string>;
    /**
     * The type of target. Support Account or OU.
     */
    targetType?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceControlPolicyAttachment resource.
 */
export interface ServiceControlPolicyAttachmentArgs {
    /**
     * The id of policy.
     */
    policyId: pulumi.Input<string>;
    /**
     * The id of target.
     */
    targetId: pulumi.Input<string>;
    /**
     * The type of target. Support Account or OU.
     */
    targetType: pulumi.Input<string>;
}
