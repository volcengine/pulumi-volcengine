// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage organization unit
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooOrganization = new volcengine.organization.Organization("fooOrganization", {});
 * const fooUnits = volcengine.organization.Units({});
 * const fooUnit = new volcengine.organization.Unit("fooUnit", {
 *     parentId: fooUnits.then(fooUnits => .filter(unit => unit.parentId == "0").map(unit => (unit.id))[0]),
 *     description: "tf-test",
 * });
 * ```
 *
 * ## Import
 *
 * OrganizationUnit can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:organization/unit:Unit default ID
 * ```
 */
export class Unit extends pulumi.CustomResource {
    /**
     * Get an existing Unit resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UnitState, opts?: pulumi.CustomResourceOptions): Unit {
        return new Unit(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:organization/unit:Unit';

    /**
     * Returns true if the given object is an instance of Unit.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Unit {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Unit.__pulumiType;
    }

    /**
     * The depth of the organization unit.
     */
    public /*out*/ readonly depth!: pulumi.Output<number>;
    /**
     * Description of the organization unit.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Name of the organization unit.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The id of the organization.
     */
    public /*out*/ readonly orgId!: pulumi.Output<string>;
    /**
     * The organization type.
     */
    public /*out*/ readonly orgType!: pulumi.Output<number>;
    /**
     * The owner of the organization unit.
     */
    public /*out*/ readonly owner!: pulumi.Output<string>;
    /**
     * Parent Organization Unit ID.
     */
    public readonly parentId!: pulumi.Output<string>;

    /**
     * Create a Unit resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UnitArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UnitArgs | UnitState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as UnitState | undefined;
            resourceInputs["depth"] = state ? state.depth : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["orgId"] = state ? state.orgId : undefined;
            resourceInputs["orgType"] = state ? state.orgType : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["parentId"] = state ? state.parentId : undefined;
        } else {
            const args = argsOrState as UnitArgs | undefined;
            if ((!args || args.parentId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parentId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["parentId"] = args ? args.parentId : undefined;
            resourceInputs["depth"] = undefined /*out*/;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["orgType"] = undefined /*out*/;
            resourceInputs["owner"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Unit.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Unit resources.
 */
export interface UnitState {
    /**
     * The depth of the organization unit.
     */
    depth?: pulumi.Input<number>;
    /**
     * Description of the organization unit.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the organization unit.
     */
    name?: pulumi.Input<string>;
    /**
     * The id of the organization.
     */
    orgId?: pulumi.Input<string>;
    /**
     * The organization type.
     */
    orgType?: pulumi.Input<number>;
    /**
     * The owner of the organization unit.
     */
    owner?: pulumi.Input<string>;
    /**
     * Parent Organization Unit ID.
     */
    parentId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Unit resource.
 */
export interface UnitArgs {
    /**
     * Description of the organization unit.
     */
    description?: pulumi.Input<string>;
    /**
     * Name of the organization unit.
     */
    name?: pulumi.Input<string>;
    /**
     * Parent Organization Unit ID.
     */
    parentId: pulumi.Input<string>;
}
