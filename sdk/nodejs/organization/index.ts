// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AccountArgs, AccountState } from "./account";
export type Account = import("./account").Account;
export const Account: typeof import("./account").Account = null as any;
utilities.lazyLoad(exports, ["Account"], () => require("./account"));

export { AccountsArgs, AccountsResult, AccountsOutputArgs } from "./accounts";
export const accounts: typeof import("./accounts").accounts = null as any;
export const accountsOutput: typeof import("./accounts").accountsOutput = null as any;
utilities.lazyLoad(exports, ["accounts","accountsOutput"], () => require("./accounts"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { OrganizationsArgs, OrganizationsResult, OrganizationsOutputArgs } from "./organizations";
export const organizations: typeof import("./organizations").organizations = null as any;
export const organizationsOutput: typeof import("./organizations").organizationsOutput = null as any;
utilities.lazyLoad(exports, ["organizations","organizationsOutput"], () => require("./organizations"));

export { ServiceControlPoliciesArgs, ServiceControlPoliciesResult, ServiceControlPoliciesOutputArgs } from "./serviceControlPolicies";
export const serviceControlPolicies: typeof import("./serviceControlPolicies").serviceControlPolicies = null as any;
export const serviceControlPoliciesOutput: typeof import("./serviceControlPolicies").serviceControlPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["serviceControlPolicies","serviceControlPoliciesOutput"], () => require("./serviceControlPolicies"));

export { ServiceControlPolicyArgs, ServiceControlPolicyState } from "./serviceControlPolicy";
export type ServiceControlPolicy = import("./serviceControlPolicy").ServiceControlPolicy;
export const ServiceControlPolicy: typeof import("./serviceControlPolicy").ServiceControlPolicy = null as any;
utilities.lazyLoad(exports, ["ServiceControlPolicy"], () => require("./serviceControlPolicy"));

export { ServiceControlPolicyAttachmentArgs, ServiceControlPolicyAttachmentState } from "./serviceControlPolicyAttachment";
export type ServiceControlPolicyAttachment = import("./serviceControlPolicyAttachment").ServiceControlPolicyAttachment;
export const ServiceControlPolicyAttachment: typeof import("./serviceControlPolicyAttachment").ServiceControlPolicyAttachment = null as any;
utilities.lazyLoad(exports, ["ServiceControlPolicyAttachment"], () => require("./serviceControlPolicyAttachment"));

export { ServiceControlPolicyEnablerArgs, ServiceControlPolicyEnablerState } from "./serviceControlPolicyEnabler";
export type ServiceControlPolicyEnabler = import("./serviceControlPolicyEnabler").ServiceControlPolicyEnabler;
export const ServiceControlPolicyEnabler: typeof import("./serviceControlPolicyEnabler").ServiceControlPolicyEnabler = null as any;
utilities.lazyLoad(exports, ["ServiceControlPolicyEnabler"], () => require("./serviceControlPolicyEnabler"));

export { UnitArgs, UnitState } from "./unit";
export type Unit = import("./unit").Unit;
export const Unit: typeof import("./unit").Unit = null as any;
utilities.lazyLoad(exports, ["Unit"], () => require("./unit"));

export { UnitsArgs, UnitsResult, UnitsOutputArgs } from "./units";
export const units: typeof import("./units").units = null as any;
export const unitsOutput: typeof import("./units").unitsOutput = null as any;
utilities.lazyLoad(exports, ["units","unitsOutput"], () => require("./units"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:organization/account:Account":
                return new Account(name, <any>undefined, { urn })
            case "volcengine:organization/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "volcengine:organization/serviceControlPolicy:ServiceControlPolicy":
                return new ServiceControlPolicy(name, <any>undefined, { urn })
            case "volcengine:organization/serviceControlPolicyAttachment:ServiceControlPolicyAttachment":
                return new ServiceControlPolicyAttachment(name, <any>undefined, { urn })
            case "volcengine:organization/serviceControlPolicyEnabler:ServiceControlPolicyEnabler":
                return new ServiceControlPolicyEnabler(name, <any>undefined, { urn })
            case "volcengine:organization/unit:Unit":
                return new Unit(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "organization/account", _module)
pulumi.runtime.registerResourceModule("volcengine", "organization/organization", _module)
pulumi.runtime.registerResourceModule("volcengine", "organization/serviceControlPolicy", _module)
pulumi.runtime.registerResourceModule("volcengine", "organization/serviceControlPolicyAttachment", _module)
pulumi.runtime.registerResourceModule("volcengine", "organization/serviceControlPolicyEnabler", _module)
pulumi.runtime.registerResourceModule("volcengine", "organization/unit", _module)
