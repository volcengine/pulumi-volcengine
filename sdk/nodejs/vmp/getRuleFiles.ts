// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of vmp rule files
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooWorkspace = new volcengine.vmp.Workspace("fooWorkspace", {
 *     instanceTypeId: "vmp.standard.15d",
 *     deleteProtectionEnabled: false,
 *     description: "acc-test-1",
 *     username: "admin123",
 *     password: "*********",
 * });
 * const fooRuleFile = new volcengine.vmp.RuleFile("fooRuleFile", {
 *     workspaceId: fooWorkspace.id,
 *     description: "acc-test-1",
 *     content: `groups:
 *     - interval: 10s
 *       name: recording_rules
 *       rules:
 *         - expr: sum(irate(container_cpu_usage_seconds_total{image!=""}[5m])) by (pod) *100
 *           labels:
 *             team: operations
 *           record: pod:cpu:useage
 * `,
 * });
 * const fooRuleFiles = volcengine.vmp.getRuleFilesOutput({
 *     ids: [fooRuleFile.ruleFileId],
 *     workspaceId: fooWorkspace.id,
 * });
 * ```
 */
export function getRuleFiles(args: GetRuleFilesArgs, opts?: pulumi.InvokeOptions): Promise<GetRuleFilesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vmp/getRuleFiles:getRuleFiles", {
        "ids": args.ids,
        "name": args.name,
        "outputFile": args.outputFile,
        "status": args.status,
        "workspaceId": args.workspaceId,
    }, opts);
}

/**
 * A collection of arguments for invoking getRuleFiles.
 */
export interface GetRuleFilesArgs {
    /**
     * A list of Rule File IDs.
     */
    ids?: string[];
    /**
     * The name of rule file.
     */
    name?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The status of rule file.
     */
    status?: string;
    /**
     * The id of workspace.
     */
    workspaceId: string;
}

/**
 * A collection of values returned by getRuleFiles.
 */
export interface GetRuleFilesResult {
    /**
     * The collection of query.
     */
    readonly files: outputs.vmp.GetRuleFilesFile[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    /**
     * The name of rule file.
     */
    readonly name?: string;
    readonly outputFile?: string;
    /**
     * The status of rule file.
     */
    readonly status?: string;
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    readonly workspaceId: string;
}
/**
 * Use this data source to query detailed information of vmp rule files
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooWorkspace = new volcengine.vmp.Workspace("fooWorkspace", {
 *     instanceTypeId: "vmp.standard.15d",
 *     deleteProtectionEnabled: false,
 *     description: "acc-test-1",
 *     username: "admin123",
 *     password: "*********",
 * });
 * const fooRuleFile = new volcengine.vmp.RuleFile("fooRuleFile", {
 *     workspaceId: fooWorkspace.id,
 *     description: "acc-test-1",
 *     content: `groups:
 *     - interval: 10s
 *       name: recording_rules
 *       rules:
 *         - expr: sum(irate(container_cpu_usage_seconds_total{image!=""}[5m])) by (pod) *100
 *           labels:
 *             team: operations
 *           record: pod:cpu:useage
 * `,
 * });
 * const fooRuleFiles = volcengine.vmp.getRuleFilesOutput({
 *     ids: [fooRuleFile.ruleFileId],
 *     workspaceId: fooWorkspace.id,
 * });
 * ```
 */
export function getRuleFilesOutput(args: GetRuleFilesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetRuleFilesResult> {
    return pulumi.output(args).apply((a: any) => getRuleFiles(a, opts))
}

/**
 * A collection of arguments for invoking getRuleFiles.
 */
export interface GetRuleFilesOutputArgs {
    /**
     * A list of Rule File IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of rule file.
     */
    name?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The status of rule file.
     */
    status?: pulumi.Input<string>;
    /**
     * The id of workspace.
     */
    workspaceId: pulumi.Input<string>;
}
