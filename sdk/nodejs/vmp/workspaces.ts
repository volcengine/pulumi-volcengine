// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Use this data source to query detailed information of vmp workspaces
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooWorkspace = new volcengine.vmp.Workspace("fooWorkspace", {
 *     instanceTypeId: "vmp.standard.15d",
 *     deleteProtectionEnabled: false,
 *     description: "acc-test-1",
 *     username: "admin123",
 *     password: "*******",
 * });
 * const fooWorkspaces = volcengine.vmp.getWorkspacesOutput({
 *     ids: [fooWorkspace.id],
 * });
 * ```
 */
/** @deprecated volcengine.vmp.Workspaces has been deprecated in favor of volcengine.vmp.getWorkspaces */
export function workspaces(args?: WorkspacesArgs, opts?: pulumi.InvokeOptions): Promise<WorkspacesResult> {
    pulumi.log.warn("workspaces is deprecated: volcengine.vmp.Workspaces has been deprecated in favor of volcengine.vmp.getWorkspaces")
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("volcengine:vmp/workspaces:Workspaces", {
        "ids": args.ids,
        "instanceTypeIds": args.instanceTypeIds,
        "name": args.name,
        "outputFile": args.outputFile,
        "projectName": args.projectName,
        "statuses": args.statuses,
        "tags": args.tags,
    }, opts);
}

/**
 * A collection of arguments for invoking Workspaces.
 */
export interface WorkspacesArgs {
    /**
     * A list of Workspace IDs.
     */
    ids?: string[];
    /**
     * A list of Instance Type IDs.
     */
    instanceTypeIds?: string[];
    /**
     * The name of workspace.
     */
    name?: string;
    /**
     * File name where to save data source results.
     */
    outputFile?: string;
    /**
     * The project name of vmp workspace.
     */
    projectName?: string;
    /**
     * A list of Workspace status.
     */
    statuses?: string[];
    /**
     * The tags of vmp workspace.
     */
    tags?: inputs.vmp.WorkspacesTag[];
}

/**
 * A collection of values returned by Workspaces.
 */
export interface WorkspacesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly ids?: string[];
    readonly instanceTypeIds?: string[];
    /**
     * The name of workspace.
     */
    readonly name?: string;
    readonly outputFile?: string;
    /**
     * The project name of vmp workspace.
     */
    readonly projectName?: string;
    readonly statuses?: string[];
    /**
     * Tags.
     */
    readonly tags?: outputs.vmp.WorkspacesTag[];
    /**
     * The total count of query.
     */
    readonly totalCount: number;
    /**
     * The collection of query.
     */
    readonly workspaces: outputs.vmp.WorkspacesWorkspace[];
}
/**
 * Use this data source to query detailed information of vmp workspaces
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@pulumi/volcengine";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const fooWorkspace = new volcengine.vmp.Workspace("fooWorkspace", {
 *     instanceTypeId: "vmp.standard.15d",
 *     deleteProtectionEnabled: false,
 *     description: "acc-test-1",
 *     username: "admin123",
 *     password: "*******",
 * });
 * const fooWorkspaces = volcengine.vmp.getWorkspacesOutput({
 *     ids: [fooWorkspace.id],
 * });
 * ```
 */
/** @deprecated volcengine.vmp.Workspaces has been deprecated in favor of volcengine.vmp.getWorkspaces */
export function workspacesOutput(args?: WorkspacesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<WorkspacesResult> {
    return pulumi.output(args).apply((a: any) => workspaces(a, opts))
}

/**
 * A collection of arguments for invoking Workspaces.
 */
export interface WorkspacesOutputArgs {
    /**
     * A list of Workspace IDs.
     */
    ids?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list of Instance Type IDs.
     */
    instanceTypeIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of workspace.
     */
    name?: pulumi.Input<string>;
    /**
     * File name where to save data source results.
     */
    outputFile?: pulumi.Input<string>;
    /**
     * The project name of vmp workspace.
     */
    projectName?: pulumi.Input<string>;
    /**
     * A list of Workspace status.
     */
    statuses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The tags of vmp workspace.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.vmp.WorkspacesTagArgs>[]>;
}
