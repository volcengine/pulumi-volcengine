// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * Provides a resource to manage vmp notify group policy
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as volcengine from "@volcengine/pulumi";
 *
 * const foo = new volcengine.vmp.NotifyGroupPolicy("foo", {
 *     description: "acc-test-1",
 *     levels: [
 *         {
 *             groupBies: ["__rule__"],
 *             groupInterval: "30",
 *             groupWait: "35",
 *             level: "P2",
 *             repeatInterval: "30",
 *         },
 *         {
 *             groupBies: ["__rule__"],
 *             groupInterval: "30",
 *             groupWait: "30",
 *             level: "P0",
 *             repeatInterval: "30",
 *         },
 *         {
 *             groupBies: ["__rule__"],
 *             groupInterval: "45",
 *             groupWait: "40",
 *             level: "P1",
 *             repeatInterval: "30",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * VMP Notify Group Policy can be imported using the id, e.g.
 *
 * ```sh
 * $ pulumi import volcengine:vmp/notifyGroupPolicy:NotifyGroupPolicy default 60dde3ca-951c-4c05-8777-e5a7caa07ad6
 * ```
 */
export class NotifyGroupPolicy extends pulumi.CustomResource {
    /**
     * Get an existing NotifyGroupPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NotifyGroupPolicyState, opts?: pulumi.CustomResourceOptions): NotifyGroupPolicy {
        return new NotifyGroupPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'volcengine:vmp/notifyGroupPolicy:NotifyGroupPolicy';

    /**
     * Returns true if the given object is an instance of NotifyGroupPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NotifyGroupPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NotifyGroupPolicy.__pulumiType;
    }

    /**
     * The description of the notify group policy.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The levels of the notify group policy. Levels must be registered in three (`P0`, `P1`, `P2`) aggregation strategies, and `Level` cannot be repeated.
     */
    public readonly levels!: pulumi.Output<outputs.vmp.NotifyGroupPolicyLevel[]>;
    /**
     * The name of the notify group policy.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a NotifyGroupPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NotifyGroupPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NotifyGroupPolicyArgs | NotifyGroupPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as NotifyGroupPolicyState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["levels"] = state ? state.levels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as NotifyGroupPolicyArgs | undefined;
            if ((!args || args.levels === undefined) && !opts.urn) {
                throw new Error("Missing required property 'levels'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["levels"] = args ? args.levels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(NotifyGroupPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NotifyGroupPolicy resources.
 */
export interface NotifyGroupPolicyState {
    /**
     * The description of the notify group policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The levels of the notify group policy. Levels must be registered in three (`P0`, `P1`, `P2`) aggregation strategies, and `Level` cannot be repeated.
     */
    levels?: pulumi.Input<pulumi.Input<inputs.vmp.NotifyGroupPolicyLevel>[]>;
    /**
     * The name of the notify group policy.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NotifyGroupPolicy resource.
 */
export interface NotifyGroupPolicyArgs {
    /**
     * The description of the notify group policy.
     */
    description?: pulumi.Input<string>;
    /**
     * The levels of the notify group policy. Levels must be registered in three (`P0`, `P1`, `P2`) aggregation strategies, and `Level` cannot be repeated.
     */
    levels: pulumi.Input<pulumi.Input<inputs.vmp.NotifyGroupPolicyLevel>[]>;
    /**
     * The name of the notify group policy.
     */
    name?: pulumi.Input<string>;
}
