// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AlertingRuleArgs, AlertingRuleState } from "./alertingRule";
export type AlertingRule = import("./alertingRule").AlertingRule;
export const AlertingRule: typeof import("./alertingRule").AlertingRule = null as any;
utilities.lazyLoad(exports, ["AlertingRule"], () => require("./alertingRule"));

export { AlertingRulesArgs, AlertingRulesResult, AlertingRulesOutputArgs } from "./alertingRules";
export const alertingRules: typeof import("./alertingRules").alertingRules = null as any;
export const alertingRulesOutput: typeof import("./alertingRules").alertingRulesOutput = null as any;
utilities.lazyLoad(exports, ["alertingRules","alertingRulesOutput"], () => require("./alertingRules"));

export { AlertsArgs, AlertsResult, AlertsOutputArgs } from "./alerts";
export const alerts: typeof import("./alerts").alerts = null as any;
export const alertsOutput: typeof import("./alerts").alertsOutput = null as any;
utilities.lazyLoad(exports, ["alerts","alertsOutput"], () => require("./alerts"));

export { ContactArgs, ContactState } from "./contact";
export type Contact = import("./contact").Contact;
export const Contact: typeof import("./contact").Contact = null as any;
utilities.lazyLoad(exports, ["Contact"], () => require("./contact"));

export { ContactGroupArgs, ContactGroupState } from "./contactGroup";
export type ContactGroup = import("./contactGroup").ContactGroup;
export const ContactGroup: typeof import("./contactGroup").ContactGroup = null as any;
utilities.lazyLoad(exports, ["ContactGroup"], () => require("./contactGroup"));

export { ContactGroupsArgs, ContactGroupsResult, ContactGroupsOutputArgs } from "./contactGroups";
export const contactGroups: typeof import("./contactGroups").contactGroups = null as any;
export const contactGroupsOutput: typeof import("./contactGroups").contactGroupsOutput = null as any;
utilities.lazyLoad(exports, ["contactGroups","contactGroupsOutput"], () => require("./contactGroups"));

export { ContactsArgs, ContactsResult, ContactsOutputArgs } from "./contacts";
export const contacts: typeof import("./contacts").contacts = null as any;
export const contactsOutput: typeof import("./contacts").contactsOutput = null as any;
utilities.lazyLoad(exports, ["contacts","contactsOutput"], () => require("./contacts"));

export { GetAlertingRulesArgs, GetAlertingRulesResult, GetAlertingRulesOutputArgs } from "./getAlertingRules";
export const getAlertingRules: typeof import("./getAlertingRules").getAlertingRules = null as any;
export const getAlertingRulesOutput: typeof import("./getAlertingRules").getAlertingRulesOutput = null as any;
utilities.lazyLoad(exports, ["getAlertingRules","getAlertingRulesOutput"], () => require("./getAlertingRules"));

export { GetAlertsArgs, GetAlertsResult, GetAlertsOutputArgs } from "./getAlerts";
export const getAlerts: typeof import("./getAlerts").getAlerts = null as any;
export const getAlertsOutput: typeof import("./getAlerts").getAlertsOutput = null as any;
utilities.lazyLoad(exports, ["getAlerts","getAlertsOutput"], () => require("./getAlerts"));

export { GetContactGroupsArgs, GetContactGroupsResult, GetContactGroupsOutputArgs } from "./getContactGroups";
export const getContactGroups: typeof import("./getContactGroups").getContactGroups = null as any;
export const getContactGroupsOutput: typeof import("./getContactGroups").getContactGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getContactGroups","getContactGroupsOutput"], () => require("./getContactGroups"));

export { GetContactsArgs, GetContactsResult, GetContactsOutputArgs } from "./getContacts";
export const getContacts: typeof import("./getContacts").getContacts = null as any;
export const getContactsOutput: typeof import("./getContacts").getContactsOutput = null as any;
utilities.lazyLoad(exports, ["getContacts","getContactsOutput"], () => require("./getContacts"));

export { GetInstanceTypesArgs, GetInstanceTypesResult, GetInstanceTypesOutputArgs } from "./getInstanceTypes";
export const getInstanceTypes: typeof import("./getInstanceTypes").getInstanceTypes = null as any;
export const getInstanceTypesOutput: typeof import("./getInstanceTypes").getInstanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["getInstanceTypes","getInstanceTypesOutput"], () => require("./getInstanceTypes"));

export { GetNotifyGroupPoliciesArgs, GetNotifyGroupPoliciesResult, GetNotifyGroupPoliciesOutputArgs } from "./getNotifyGroupPolicies";
export const getNotifyGroupPolicies: typeof import("./getNotifyGroupPolicies").getNotifyGroupPolicies = null as any;
export const getNotifyGroupPoliciesOutput: typeof import("./getNotifyGroupPolicies").getNotifyGroupPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNotifyGroupPolicies","getNotifyGroupPoliciesOutput"], () => require("./getNotifyGroupPolicies"));

export { GetNotifyPoliciesArgs, GetNotifyPoliciesResult, GetNotifyPoliciesOutputArgs } from "./getNotifyPolicies";
export const getNotifyPolicies: typeof import("./getNotifyPolicies").getNotifyPolicies = null as any;
export const getNotifyPoliciesOutput: typeof import("./getNotifyPolicies").getNotifyPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["getNotifyPolicies","getNotifyPoliciesOutput"], () => require("./getNotifyPolicies"));

export { GetNotifyTemplatesArgs, GetNotifyTemplatesResult, GetNotifyTemplatesOutputArgs } from "./getNotifyTemplates";
export const getNotifyTemplates: typeof import("./getNotifyTemplates").getNotifyTemplates = null as any;
export const getNotifyTemplatesOutput: typeof import("./getNotifyTemplates").getNotifyTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getNotifyTemplates","getNotifyTemplatesOutput"], () => require("./getNotifyTemplates"));

export { GetRuleFilesArgs, GetRuleFilesResult, GetRuleFilesOutputArgs } from "./getRuleFiles";
export const getRuleFiles: typeof import("./getRuleFiles").getRuleFiles = null as any;
export const getRuleFilesOutput: typeof import("./getRuleFiles").getRuleFilesOutput = null as any;
utilities.lazyLoad(exports, ["getRuleFiles","getRuleFilesOutput"], () => require("./getRuleFiles"));

export { GetRulesArgs, GetRulesResult, GetRulesOutputArgs } from "./getRules";
export const getRules: typeof import("./getRules").getRules = null as any;
export const getRulesOutput: typeof import("./getRules").getRulesOutput = null as any;
utilities.lazyLoad(exports, ["getRules","getRulesOutput"], () => require("./getRules"));

export { GetWorkspacesArgs, GetWorkspacesResult, GetWorkspacesOutputArgs } from "./getWorkspaces";
export const getWorkspaces: typeof import("./getWorkspaces").getWorkspaces = null as any;
export const getWorkspacesOutput: typeof import("./getWorkspaces").getWorkspacesOutput = null as any;
utilities.lazyLoad(exports, ["getWorkspaces","getWorkspacesOutput"], () => require("./getWorkspaces"));

export { InstanceTypesArgs, InstanceTypesResult, InstanceTypesOutputArgs } from "./instanceTypes";
export const instanceTypes: typeof import("./instanceTypes").instanceTypes = null as any;
export const instanceTypesOutput: typeof import("./instanceTypes").instanceTypesOutput = null as any;
utilities.lazyLoad(exports, ["instanceTypes","instanceTypesOutput"], () => require("./instanceTypes"));

export { NotifyGroupPoliciesArgs, NotifyGroupPoliciesResult, NotifyGroupPoliciesOutputArgs } from "./notifyGroupPolicies";
export const notifyGroupPolicies: typeof import("./notifyGroupPolicies").notifyGroupPolicies = null as any;
export const notifyGroupPoliciesOutput: typeof import("./notifyGroupPolicies").notifyGroupPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["notifyGroupPolicies","notifyGroupPoliciesOutput"], () => require("./notifyGroupPolicies"));

export { NotifyGroupPolicyArgs, NotifyGroupPolicyState } from "./notifyGroupPolicy";
export type NotifyGroupPolicy = import("./notifyGroupPolicy").NotifyGroupPolicy;
export const NotifyGroupPolicy: typeof import("./notifyGroupPolicy").NotifyGroupPolicy = null as any;
utilities.lazyLoad(exports, ["NotifyGroupPolicy"], () => require("./notifyGroupPolicy"));

export { NotifyPoliciesArgs, NotifyPoliciesResult, NotifyPoliciesOutputArgs } from "./notifyPolicies";
export const notifyPolicies: typeof import("./notifyPolicies").notifyPolicies = null as any;
export const notifyPoliciesOutput: typeof import("./notifyPolicies").notifyPoliciesOutput = null as any;
utilities.lazyLoad(exports, ["notifyPolicies","notifyPoliciesOutput"], () => require("./notifyPolicies"));

export { NotifyPolicyArgs, NotifyPolicyState } from "./notifyPolicy";
export type NotifyPolicy = import("./notifyPolicy").NotifyPolicy;
export const NotifyPolicy: typeof import("./notifyPolicy").NotifyPolicy = null as any;
utilities.lazyLoad(exports, ["NotifyPolicy"], () => require("./notifyPolicy"));

export { NotifyTemplateArgs, NotifyTemplateState } from "./notifyTemplate";
export type NotifyTemplate = import("./notifyTemplate").NotifyTemplate;
export const NotifyTemplate: typeof import("./notifyTemplate").NotifyTemplate = null as any;
utilities.lazyLoad(exports, ["NotifyTemplate"], () => require("./notifyTemplate"));

export { NotifyTemplatesArgs, NotifyTemplatesResult, NotifyTemplatesOutputArgs } from "./notifyTemplates";
export const notifyTemplates: typeof import("./notifyTemplates").notifyTemplates = null as any;
export const notifyTemplatesOutput: typeof import("./notifyTemplates").notifyTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["notifyTemplates","notifyTemplatesOutput"], () => require("./notifyTemplates"));

export { RuleFileArgs, RuleFileState } from "./ruleFile";
export type RuleFile = import("./ruleFile").RuleFile;
export const RuleFile: typeof import("./ruleFile").RuleFile = null as any;
utilities.lazyLoad(exports, ["RuleFile"], () => require("./ruleFile"));

export { RuleFilesArgs, RuleFilesResult, RuleFilesOutputArgs } from "./ruleFiles";
export const ruleFiles: typeof import("./ruleFiles").ruleFiles = null as any;
export const ruleFilesOutput: typeof import("./ruleFiles").ruleFilesOutput = null as any;
utilities.lazyLoad(exports, ["ruleFiles","ruleFilesOutput"], () => require("./ruleFiles"));

export { RulesArgs, RulesResult, RulesOutputArgs } from "./rules";
export const rules: typeof import("./rules").rules = null as any;
export const rulesOutput: typeof import("./rules").rulesOutput = null as any;
utilities.lazyLoad(exports, ["rules","rulesOutput"], () => require("./rules"));

export { WorkspaceArgs, WorkspaceState } from "./workspace";
export type Workspace = import("./workspace").Workspace;
export const Workspace: typeof import("./workspace").Workspace = null as any;
utilities.lazyLoad(exports, ["Workspace"], () => require("./workspace"));

export { WorkspacesArgs, WorkspacesResult, WorkspacesOutputArgs } from "./workspaces";
export const workspaces: typeof import("./workspaces").workspaces = null as any;
export const workspacesOutput: typeof import("./workspaces").workspacesOutput = null as any;
utilities.lazyLoad(exports, ["workspaces","workspacesOutput"], () => require("./workspaces"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "volcengine:vmp/alertingRule:AlertingRule":
                return new AlertingRule(name, <any>undefined, { urn })
            case "volcengine:vmp/contact:Contact":
                return new Contact(name, <any>undefined, { urn })
            case "volcengine:vmp/contactGroup:ContactGroup":
                return new ContactGroup(name, <any>undefined, { urn })
            case "volcengine:vmp/notifyGroupPolicy:NotifyGroupPolicy":
                return new NotifyGroupPolicy(name, <any>undefined, { urn })
            case "volcengine:vmp/notifyPolicy:NotifyPolicy":
                return new NotifyPolicy(name, <any>undefined, { urn })
            case "volcengine:vmp/notifyTemplate:NotifyTemplate":
                return new NotifyTemplate(name, <any>undefined, { urn })
            case "volcengine:vmp/ruleFile:RuleFile":
                return new RuleFile(name, <any>undefined, { urn })
            case "volcengine:vmp/workspace:Workspace":
                return new Workspace(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("volcengine", "vmp/alertingRule", _module)
pulumi.runtime.registerResourceModule("volcengine", "vmp/contact", _module)
pulumi.runtime.registerResourceModule("volcengine", "vmp/contactGroup", _module)
pulumi.runtime.registerResourceModule("volcengine", "vmp/notifyGroupPolicy", _module)
pulumi.runtime.registerResourceModule("volcengine", "vmp/notifyPolicy", _module)
pulumi.runtime.registerResourceModule("volcengine", "vmp/notifyTemplate", _module)
pulumi.runtime.registerResourceModule("volcengine", "vmp/ruleFile", _module)
pulumi.runtime.registerResourceModule("volcengine", "vmp/workspace", _module)
