// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Veenedge
{
    public static class GetAvailableResources
    {
        /// <summary>
        /// Use this data source to query detailed information of veenedge available resources
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Veenedge.GetAvailableResources.Invoke(new()
        ///     {
        ///         BandwithLimit = 20,
        ///         CloudDiskType = "CloudSSD",
        ///         InstanceType = "ve******rge",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAvailableResourcesResult> InvokeAsync(GetAvailableResourcesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAvailableResourcesResult>("volcengine:veenedge/getAvailableResources:getAvailableResources", args ?? new GetAvailableResourcesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of veenedge available resources
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Veenedge.GetAvailableResources.Invoke(new()
        ///     {
        ///         BandwithLimit = 20,
        ///         CloudDiskType = "CloudSSD",
        ///         InstanceType = "ve******rge",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAvailableResourcesResult> Invoke(GetAvailableResourcesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAvailableResourcesResult>("volcengine:veenedge/getAvailableResources:getAvailableResources", args ?? new GetAvailableResourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAvailableResourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The limit of bandwidth.
        /// </summary>
        [Input("bandwithLimit", required: true)]
        public int BandwithLimit { get; set; }

        /// <summary>
        /// The type of storage. The value can be `CloudHDD` or `CloudSSD`.
        /// </summary>
        [Input("cloudDiskType", required: true)]
        public string CloudDiskType { get; set; } = null!;

        /// <summary>
        /// The type of instance.
        /// </summary>
        [Input("instanceType", required: true)]
        public string InstanceType { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetAvailableResourcesArgs()
        {
        }
        public static new GetAvailableResourcesArgs Empty => new GetAvailableResourcesArgs();
    }

    public sealed class GetAvailableResourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The limit of bandwidth.
        /// </summary>
        [Input("bandwithLimit", required: true)]
        public Input<int> BandwithLimit { get; set; } = null!;

        /// <summary>
        /// The type of storage. The value can be `CloudHDD` or `CloudSSD`.
        /// </summary>
        [Input("cloudDiskType", required: true)]
        public Input<string> CloudDiskType { get; set; } = null!;

        /// <summary>
        /// The type of instance.
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetAvailableResourcesInvokeArgs()
        {
        }
        public static new GetAvailableResourcesInvokeArgs Empty => new GetAvailableResourcesInvokeArgs();
    }


    [OutputType]
    public sealed class GetAvailableResourcesResult
    {
        public readonly int BandwithLimit;
        public readonly string CloudDiskType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceType;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of resource query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAvailableResourcesRegionResult> Regions;
        /// <summary>
        /// The total count of resource query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetAvailableResourcesResult(
            int bandwithLimit,

            string cloudDiskType,

            string id,

            string instanceType,

            string? outputFile,

            ImmutableArray<Outputs.GetAvailableResourcesRegionResult> regions,

            int totalCount)
        {
            BandwithLimit = bandwithLimit;
            CloudDiskType = cloudDiskType;
            Id = id;
            InstanceType = instanceType;
            OutputFile = outputFile;
            Regions = regions;
            TotalCount = totalCount;
        }
    }
}
