// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Kms
{
    /// <summary>
    /// Provides a resource to manage kms key
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooKeyring = new Volcengine.Kms.Keyring("fooKeyring", new()
    ///     {
    ///         KeyringName = "tf-test",
    ///         Description = "tf-test",
    ///         ProjectName = "default",
    ///     });
    /// 
    ///     var fooKey = new Volcengine.Kms.Key("fooKey", new()
    ///     {
    ///         KeyringName = fooKeyring.KeyringName,
    ///         KeyName = "mrk-tf-key-mod",
    ///         Description = "tf test key-mod",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Kms.Inputs.KeyTagArgs
    ///             {
    ///                 Key = "tfkey3",
    ///                 Value = "tfvalue3",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// KmsKey can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:kms/key:Key default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:kms/key:Key")]
    public partial class Key : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The date when the keyring was created.
        /// </summary>
        [Output("creationDate")]
        public Output<int> CreationDate { get; private set; } = null!;

        /// <summary>
        /// The description of the key.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The time when the key material will expire.
        /// </summary>
        [Output("keyMaterialExpireTime")]
        public Output<string> KeyMaterialExpireTime { get; private set; } = null!;

        /// <summary>
        /// The name of the CMK.
        /// </summary>
        [Output("keyName")]
        public Output<string> KeyName { get; private set; } = null!;

        /// <summary>
        /// The type of the keys.
        /// </summary>
        [Output("keySpec")]
        public Output<string> KeySpec { get; private set; } = null!;

        /// <summary>
        /// The usage of the key.
        /// </summary>
        [Output("keyUsage")]
        public Output<string> KeyUsage { get; private set; } = null!;

        /// <summary>
        /// The name of the keyring.
        /// </summary>
        [Output("keyringName")]
        public Output<string> KeyringName { get; private set; } = null!;

        /// <summary>
        /// The last time the key was rotated.
        /// </summary>
        [Output("lastRotationTime")]
        public Output<string> LastRotationTime { get; private set; } = null!;

        /// <summary>
        /// Whether it is the master key of the Multi-region type.
        /// </summary>
        [Output("multiRegion")]
        public Output<bool> MultiRegion { get; private set; } = null!;

        /// <summary>
        /// The configuration of Multi-region key.
        /// </summary>
        [Output("multiRegionConfiguration")]
        public Output<Outputs.KeyMultiRegionConfiguration> MultiRegionConfiguration { get; private set; } = null!;

        /// <summary>
        /// The origin of the key.
        /// </summary>
        [Output("origin")]
        public Output<string> Origin { get; private set; } = null!;

        /// <summary>
        /// The pre-deletion cycle of the key.
        /// </summary>
        [Output("pendingWindowInDays")]
        public Output<int?> PendingWindowInDays { get; private set; } = null!;

        /// <summary>
        /// The protection level of the key.
        /// </summary>
        [Output("protectionLevel")]
        public Output<string> ProtectionLevel { get; private set; } = null!;

        /// <summary>
        /// The rotation state of the key.
        /// </summary>
        [Output("rotateState")]
        public Output<string?> RotateState { get; private set; } = null!;

        /// <summary>
        /// The rotation configuration of the key.
        /// </summary>
        [Output("rotationState")]
        public Output<string> RotationState { get; private set; } = null!;

        /// <summary>
        /// The time when the key will be deleted.
        /// </summary>
        [Output("scheduleDeleteTime")]
        public Output<string> ScheduleDeleteTime { get; private set; } = null!;

        /// <summary>
        /// The next time the key will be rotated.
        /// </summary>
        [Output("scheduleRotationTime")]
        public Output<string> ScheduleRotationTime { get; private set; } = null!;

        /// <summary>
        /// The state of the key.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.KeyTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("trn")]
        public Output<string> Trn { get; private set; } = null!;

        /// <summary>
        /// The date when the keyring was updated.
        /// </summary>
        [Output("updateDate")]
        public Output<int> UpdateDate { get; private set; } = null!;


        /// <summary>
        /// Create a Key resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Key(string name, KeyArgs args, CustomResourceOptions? options = null)
            : base("volcengine:kms/key:Key", name, args ?? new KeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Key(string name, Input<string> id, KeyState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:kms/key:Key", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Key resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Key Get(string name, Input<string> id, KeyState? state = null, CustomResourceOptions? options = null)
        {
            return new Key(name, id, state, options);
        }
    }

    public sealed class KeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the key.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the CMK.
        /// </summary>
        [Input("keyName", required: true)]
        public Input<string> KeyName { get; set; } = null!;

        /// <summary>
        /// The type of the keys.
        /// </summary>
        [Input("keySpec")]
        public Input<string>? KeySpec { get; set; }

        /// <summary>
        /// The usage of the key.
        /// </summary>
        [Input("keyUsage")]
        public Input<string>? KeyUsage { get; set; }

        /// <summary>
        /// The name of the keyring.
        /// </summary>
        [Input("keyringName", required: true)]
        public Input<string> KeyringName { get; set; } = null!;

        /// <summary>
        /// Whether it is the master key of the Multi-region type.
        /// </summary>
        [Input("multiRegion")]
        public Input<bool>? MultiRegion { get; set; }

        /// <summary>
        /// The origin of the key.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The pre-deletion cycle of the key.
        /// </summary>
        [Input("pendingWindowInDays")]
        public Input<int>? PendingWindowInDays { get; set; }

        /// <summary>
        /// The protection level of the key.
        /// </summary>
        [Input("protectionLevel")]
        public Input<string>? ProtectionLevel { get; set; }

        /// <summary>
        /// The rotation state of the key.
        /// </summary>
        [Input("rotateState")]
        public Input<string>? RotateState { get; set; }

        [Input("tags")]
        private InputList<Inputs.KeyTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.KeyTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.KeyTagArgs>());
            set => _tags = value;
        }

        public KeyArgs()
        {
        }
        public static new KeyArgs Empty => new KeyArgs();
    }

    public sealed class KeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The date when the keyring was created.
        /// </summary>
        [Input("creationDate")]
        public Input<int>? CreationDate { get; set; }

        /// <summary>
        /// The description of the key.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The time when the key material will expire.
        /// </summary>
        [Input("keyMaterialExpireTime")]
        public Input<string>? KeyMaterialExpireTime { get; set; }

        /// <summary>
        /// The name of the CMK.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// The type of the keys.
        /// </summary>
        [Input("keySpec")]
        public Input<string>? KeySpec { get; set; }

        /// <summary>
        /// The usage of the key.
        /// </summary>
        [Input("keyUsage")]
        public Input<string>? KeyUsage { get; set; }

        /// <summary>
        /// The name of the keyring.
        /// </summary>
        [Input("keyringName")]
        public Input<string>? KeyringName { get; set; }

        /// <summary>
        /// The last time the key was rotated.
        /// </summary>
        [Input("lastRotationTime")]
        public Input<string>? LastRotationTime { get; set; }

        /// <summary>
        /// Whether it is the master key of the Multi-region type.
        /// </summary>
        [Input("multiRegion")]
        public Input<bool>? MultiRegion { get; set; }

        /// <summary>
        /// The configuration of Multi-region key.
        /// </summary>
        [Input("multiRegionConfiguration")]
        public Input<Inputs.KeyMultiRegionConfigurationGetArgs>? MultiRegionConfiguration { get; set; }

        /// <summary>
        /// The origin of the key.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// The pre-deletion cycle of the key.
        /// </summary>
        [Input("pendingWindowInDays")]
        public Input<int>? PendingWindowInDays { get; set; }

        /// <summary>
        /// The protection level of the key.
        /// </summary>
        [Input("protectionLevel")]
        public Input<string>? ProtectionLevel { get; set; }

        /// <summary>
        /// The rotation state of the key.
        /// </summary>
        [Input("rotateState")]
        public Input<string>? RotateState { get; set; }

        /// <summary>
        /// The rotation configuration of the key.
        /// </summary>
        [Input("rotationState")]
        public Input<string>? RotationState { get; set; }

        /// <summary>
        /// The time when the key will be deleted.
        /// </summary>
        [Input("scheduleDeleteTime")]
        public Input<string>? ScheduleDeleteTime { get; set; }

        /// <summary>
        /// The next time the key will be rotated.
        /// </summary>
        [Input("scheduleRotationTime")]
        public Input<string>? ScheduleRotationTime { get; set; }

        /// <summary>
        /// The state of the key.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        [Input("tags")]
        private InputList<Inputs.KeyTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.KeyTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.KeyTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Input("trn")]
        public Input<string>? Trn { get; set; }

        /// <summary>
        /// The date when the keyring was updated.
        /// </summary>
        [Input("updateDate")]
        public Input<int>? UpdateDate { get; set; }

        public KeyState()
        {
        }
        public static new KeyState Empty => new KeyState();
    }
}
