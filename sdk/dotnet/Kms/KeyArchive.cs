// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Kms
{
    /// <summary>
    /// Provides a resource to manage kms key archive
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooKeyring = new Volcengine.Kms.Keyring("fooKeyring", new()
    ///     {
    ///         KeyringName = "tf-test",
    ///         Description = "tf-test",
    ///         ProjectName = "default",
    ///     });
    /// 
    ///     var fooKey = new Volcengine.Kms.Key("fooKey", new()
    ///     {
    ///         KeyringName = fooKeyring.KeyringName,
    ///         KeyName = "mrk-tf-key-mod",
    ///         Description = "tf test key-mod",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Kms.Inputs.KeyTagArgs
    ///             {
    ///                 Key = "tfkey3",
    ///                 Value = "tfvalue3",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooKeyArchive = new Volcengine.Kms.KeyArchive("fooKeyArchive", new()
    ///     {
    ///         KeyId = fooKey.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// KmsKeyArchive can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:kms/keyArchive:KeyArchive default resource_id
    /// ```
    /// 
    /// or
    /// 
    /// ```sh
    /// $ pulumi import volcengine:kms/keyArchive:KeyArchive default key_name:keyring_name
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:kms/keyArchive:KeyArchive")]
    public partial class KeyArchive : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the CMK.
        /// </summary>
        [Output("keyId")]
        public Output<string> KeyId { get; private set; } = null!;

        /// <summary>
        /// The name of the CMK.
        /// </summary>
        [Output("keyName")]
        public Output<string> KeyName { get; private set; } = null!;

        /// <summary>
        /// The state of the key.
        /// </summary>
        [Output("keyState")]
        public Output<string> KeyState { get; private set; } = null!;

        /// <summary>
        /// The name of the keyring.
        /// </summary>
        [Output("keyringName")]
        public Output<string?> KeyringName { get; private set; } = null!;


        /// <summary>
        /// Create a KeyArchive resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public KeyArchive(string name, KeyArchiveArgs? args = null, CustomResourceOptions? options = null)
            : base("volcengine:kms/keyArchive:KeyArchive", name, args ?? new KeyArchiveArgs(), MakeResourceOptions(options, ""))
        {
        }

        private KeyArchive(string name, Input<string> id, KeyArchiveState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:kms/keyArchive:KeyArchive", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing KeyArchive resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static KeyArchive Get(string name, Input<string> id, KeyArchiveState? state = null, CustomResourceOptions? options = null)
        {
            return new KeyArchive(name, id, state, options);
        }
    }

    public sealed class KeyArchiveArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the CMK.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The name of the CMK.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// The name of the keyring.
        /// </summary>
        [Input("keyringName")]
        public Input<string>? KeyringName { get; set; }

        public KeyArchiveArgs()
        {
        }
        public static new KeyArchiveArgs Empty => new KeyArchiveArgs();
    }

    public sealed class KeyArchiveState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the CMK.
        /// </summary>
        [Input("keyId")]
        public Input<string>? KeyId { get; set; }

        /// <summary>
        /// The name of the CMK.
        /// </summary>
        [Input("keyName")]
        public Input<string>? KeyName { get; set; }

        /// <summary>
        /// The state of the key.
        /// </summary>
        [Input("keyState")]
        public Input<string>? KeyState { get; set; }

        /// <summary>
        /// The name of the keyring.
        /// </summary>
        [Input("keyringName")]
        public Input<string>? KeyringName { get; set; }

        public KeyArchiveState()
        {
        }
        public static new KeyArchiveState Empty => new KeyArchiveState();
    }
}
