// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Organization
{
    public static class Organizations
    {
        /// <summary>
        /// Use this data source to query detailed information of organizations
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Organization.Organizations.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<OrganizationsResult> InvokeAsync(OrganizationsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<OrganizationsResult>("volcengine:organization/organizations:Organizations", args ?? new OrganizationsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of organizations
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Organization.Organizations.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<OrganizationsResult> Invoke(OrganizationsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<OrganizationsResult>("volcengine:organization/organizations:Organizations", args ?? new OrganizationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class OrganizationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public OrganizationsArgs()
        {
        }
        public static new OrganizationsArgs Empty => new OrganizationsArgs();
    }

    public sealed class OrganizationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public OrganizationsInvokeArgs()
        {
        }
        public static new OrganizationsInvokeArgs Empty => new OrganizationsInvokeArgs();
    }


    [OutputType]
    public sealed class OrganizationsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameRegex;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.OrganizationsOrganizationResult> Organizations;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private OrganizationsResult(
            string id,

            string? nameRegex,

            ImmutableArray<Outputs.OrganizationsOrganizationResult> organizations,

            string? outputFile,

            int totalCount)
        {
            Id = id;
            NameRegex = nameRegex;
            Organizations = organizations;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
