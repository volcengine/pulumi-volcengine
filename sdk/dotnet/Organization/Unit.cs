// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Organization
{
    /// <summary>
    /// Provides a resource to manage organization unit
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooOrganization = new Volcengine.Organization.Organization("fooOrganization");
    /// 
    ///     var fooUnits = Volcengine.Organization.Units.Invoke();
    /// 
    ///     var fooUnit = new Volcengine.Organization.Unit("fooUnit", new()
    ///     {
    ///         ParentId = .Where(unit =&gt; unit.ParentId == "0").Select(unit =&gt; 
    ///         {
    ///             return  unit.Id;
    ///         })[0],
    ///         Description = "tf-test",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// OrganizationUnit can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:organization/unit:Unit default ID
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:organization/unit:Unit")]
    public partial class Unit : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The depth of the organization unit.
        /// </summary>
        [Output("depth")]
        public Output<int> Depth { get; private set; } = null!;

        /// <summary>
        /// Description of the organization unit.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Name of the organization unit.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The id of the organization.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// The organization type.
        /// </summary>
        [Output("orgType")]
        public Output<int> OrgType { get; private set; } = null!;

        /// <summary>
        /// The owner of the organization unit.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Parent Organization Unit ID.
        /// </summary>
        [Output("parentId")]
        public Output<string> ParentId { get; private set; } = null!;


        /// <summary>
        /// Create a Unit resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Unit(string name, UnitArgs args, CustomResourceOptions? options = null)
            : base("volcengine:organization/unit:Unit", name, args ?? new UnitArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Unit(string name, Input<string> id, UnitState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:organization/unit:Unit", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Unit resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Unit Get(string name, Input<string> id, UnitState? state = null, CustomResourceOptions? options = null)
        {
            return new Unit(name, id, state, options);
        }
    }

    public sealed class UnitArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the organization unit.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the organization unit.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Parent Organization Unit ID.
        /// </summary>
        [Input("parentId", required: true)]
        public Input<string> ParentId { get; set; } = null!;

        public UnitArgs()
        {
        }
        public static new UnitArgs Empty => new UnitArgs();
    }

    public sealed class UnitState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The depth of the organization unit.
        /// </summary>
        [Input("depth")]
        public Input<int>? Depth { get; set; }

        /// <summary>
        /// Description of the organization unit.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Name of the organization unit.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The id of the organization.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        /// <summary>
        /// The organization type.
        /// </summary>
        [Input("orgType")]
        public Input<int>? OrgType { get; set; }

        /// <summary>
        /// The owner of the organization unit.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Parent Organization Unit ID.
        /// </summary>
        [Input("parentId")]
        public Input<string>? ParentId { get; set; }

        public UnitState()
        {
        }
        public static new UnitState Empty => new UnitState();
    }
}
