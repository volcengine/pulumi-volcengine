// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mysql
{
    public static class ParameterTemplates
    {
        /// <summary>
        /// Use this data source to query detailed information of rds mysql parameter templates
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.ParameterTemplates.Invoke(new()
        ///     {
        ///         TemplateCategory = "DBEngine",
        ///         TemplateSource = "User",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<ParameterTemplatesResult> InvokeAsync(ParameterTemplatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ParameterTemplatesResult>("volcengine:rds_mysql/parameterTemplates:ParameterTemplates", args ?? new ParameterTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of rds mysql parameter templates
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.ParameterTemplates.Invoke(new()
        ///     {
        ///         TemplateCategory = "DBEngine",
        ///         TemplateSource = "User",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<ParameterTemplatesResult> Invoke(ParameterTemplatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ParameterTemplatesResult>("volcengine:rds_mysql/parameterTemplates:ParameterTemplates", args ?? new ParameterTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ParameterTemplatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Template category, with a value of DBEngine (database engine parameters).
        /// </summary>
        [Input("templateCategory")]
        public string? TemplateCategory { get; set; }

        /// <summary>
        /// Parameter template source, value range: System. User.
        /// </summary>
        [Input("templateSource")]
        public string? TemplateSource { get; set; }

        /// <summary>
        /// Database type of parameter template. The default value is Mysql.
        /// </summary>
        [Input("templateType")]
        public string? TemplateType { get; set; }

        /// <summary>
        /// Database version of parameter template. Value range:
        /// MySQL_5_7: Default value. MySQL 5.7 version.
        /// MySQL_8_0: MySQL 8.0 version.
        /// </summary>
        [Input("templateTypeVersion")]
        public string? TemplateTypeVersion { get; set; }

        public ParameterTemplatesArgs()
        {
        }
        public static new ParameterTemplatesArgs Empty => new ParameterTemplatesArgs();
    }

    public sealed class ParameterTemplatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Template category, with a value of DBEngine (database engine parameters).
        /// </summary>
        [Input("templateCategory")]
        public Input<string>? TemplateCategory { get; set; }

        /// <summary>
        /// Parameter template source, value range: System. User.
        /// </summary>
        [Input("templateSource")]
        public Input<string>? TemplateSource { get; set; }

        /// <summary>
        /// Database type of parameter template. The default value is Mysql.
        /// </summary>
        [Input("templateType")]
        public Input<string>? TemplateType { get; set; }

        /// <summary>
        /// Database version of parameter template. Value range:
        /// MySQL_5_7: Default value. MySQL 5.7 version.
        /// MySQL_8_0: MySQL 8.0 version.
        /// </summary>
        [Input("templateTypeVersion")]
        public Input<string>? TemplateTypeVersion { get; set; }

        public ParameterTemplatesInvokeArgs()
        {
        }
        public static new ParameterTemplatesInvokeArgs Empty => new ParameterTemplatesInvokeArgs();
    }


    [OutputType]
    public sealed class ParameterTemplatesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// Template category, with a value of DBEngine (database engine parameter).
        /// </summary>
        public readonly string? TemplateCategory;
        /// <summary>
        /// The type of parameter template. Values:
        /// System: System template.
        /// User: User template.
        /// </summary>
        public readonly string? TemplateSource;
        /// <summary>
        /// The database type of the parameter template. The default value is Mysql.
        /// </summary>
        public readonly string? TemplateType;
        /// <summary>
        /// Parameter template database version, value range:
        /// "MySQL_5_7": MySQL 5.7 version.
        /// "MySQL_8_0": MySQL 8.0 version.
        /// </summary>
        public readonly string? TemplateTypeVersion;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ParameterTemplatesTemplateResult> Templates;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private ParameterTemplatesResult(
            string id,

            string? outputFile,

            string? templateCategory,

            string? templateSource,

            string? templateType,

            string? templateTypeVersion,

            ImmutableArray<Outputs.ParameterTemplatesTemplateResult> templates,

            int totalCount)
        {
            Id = id;
            OutputFile = outputFile;
            TemplateCategory = templateCategory;
            TemplateSource = templateSource;
            TemplateType = templateType;
            TemplateTypeVersion = templateTypeVersion;
            Templates = templates;
            TotalCount = totalCount;
        }
    }
}
