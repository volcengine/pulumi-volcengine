// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mysql
{
    [Obsolete(@"volcengine.rds_mysql.PlannedEvents has been deprecated in favor of volcengine.rds_mysql.getPlannedEvents")]
    public static class PlannedEvents
    {
        /// <summary>
        /// Use this data source to query detailed information of rds mysql planned events
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.GetPlannedEvents.Invoke(new()
        ///     {
        ///         InstanceId = "mysql-b51d37110dd1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<PlannedEventsResult> InvokeAsync(PlannedEventsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<PlannedEventsResult>("volcengine:rds_mysql/plannedEvents:PlannedEvents", args ?? new PlannedEventsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of rds mysql planned events
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.GetPlannedEvents.Invoke(new()
        ///     {
        ///         InstanceId = "mysql-b51d37110dd1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<PlannedEventsResult> Invoke(PlannedEventsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<PlannedEventsResult>("volcengine:rds_mysql/plannedEvents:PlannedEvents", args ?? new PlannedEventsInvokeArgs(), options.WithDefaults());
    }


    public sealed class PlannedEventsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The start time of the planned event.
        /// </summary>
        [Input("beginTime")]
        public string? BeginTime { get; set; }

        /// <summary>
        /// The end time of the planned event.
        /// </summary>
        [Input("endTime")]
        public string? EndTime { get; set; }

        /// <summary>
        /// The id of the planned event.
        /// </summary>
        [Input("eventId")]
        public string? EventId { get; set; }

        [Input("eventTypes")]
        private List<string>? _eventTypes;

        /// <summary>
        /// The type of the planned event.
        /// </summary>
        public List<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new List<string>());
            set => _eventTypes = value;
        }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// The status of the planned event.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        public PlannedEventsArgs()
        {
        }
        public static new PlannedEventsArgs Empty => new PlannedEventsArgs();
    }

    public sealed class PlannedEventsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The start time of the planned event.
        /// </summary>
        [Input("beginTime")]
        public Input<string>? BeginTime { get; set; }

        /// <summary>
        /// The end time of the planned event.
        /// </summary>
        [Input("endTime")]
        public Input<string>? EndTime { get; set; }

        /// <summary>
        /// The id of the planned event.
        /// </summary>
        [Input("eventId")]
        public Input<string>? EventId { get; set; }

        [Input("eventTypes")]
        private InputList<string>? _eventTypes;

        /// <summary>
        /// The type of the planned event.
        /// </summary>
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// The status of the planned event.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        public PlannedEventsInvokeArgs()
        {
        }
        public static new PlannedEventsInvokeArgs Empty => new PlannedEventsInvokeArgs();
    }


    [OutputType]
    public sealed class PlannedEventsResult
    {
        public readonly string? BeginTime;
        public readonly string? EndTime;
        /// <summary>
        /// The id of the planned event.
        /// </summary>
        public readonly string? EventId;
        /// <summary>
        /// The type of the planned event.
        /// </summary>
        public readonly ImmutableArray<string> EventTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The id of the instance.
        /// </summary>
        public readonly string? InstanceId;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.PlannedEventsPlannedEventResult> PlannedEvents;
        /// <summary>
        /// Event status.
        /// </summary>
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private PlannedEventsResult(
            string? beginTime,

            string? endTime,

            string? eventId,

            ImmutableArray<string> eventTypes,

            string id,

            string? instanceId,

            string? outputFile,

            ImmutableArray<Outputs.PlannedEventsPlannedEventResult> plannedEvents,

            ImmutableArray<string> statuses,

            int totalCount)
        {
            BeginTime = beginTime;
            EndTime = endTime;
            EventId = eventId;
            EventTypes = eventTypes;
            Id = id;
            InstanceId = instanceId;
            OutputFile = outputFile;
            PlannedEvents = plannedEvents;
            Statuses = statuses;
            TotalCount = totalCount;
        }
    }
}
