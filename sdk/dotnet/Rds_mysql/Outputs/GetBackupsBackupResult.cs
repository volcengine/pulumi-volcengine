// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mysql.Outputs
{

    [OutputType]
    public sealed class GetBackupsBackupResult
    {
        /// <summary>
        /// The end time of the backup.
        /// </summary>
        public readonly string BackupEndTime;
        /// <summary>
        /// Backup file name.
        /// </summary>
        public readonly string BackupFileName;
        /// <summary>
        /// Backup file size, in bytes.
        /// </summary>
        public readonly int BackupFileSize;
        /// <summary>
        /// The id of the backup.
        /// </summary>
        public readonly string BackupId;
        /// <summary>
        /// Backup type, value: Physical: Physical backup. Default value. Logical: Logical backup. Description: There is no default value. When this field is not passed, backups of all states under the query conditions limited by other fields are returned.
        /// </summary>
        public readonly string BackupMethod;
        /// <summary>
        /// The region where the backup is located.
        /// </summary>
        public readonly string BackupRegion;
        /// <summary>
        /// The start time of the backup.
        /// </summary>
        public readonly string BackupStartTime;
        /// <summary>
        /// Backup status, values: Success: Success. Failed: Failed. Running: In progress. Description: There is no default value. When this field is not passed, all backups in all states under the query conditions limited by other fields are returned.
        /// </summary>
        public readonly string BackupStatus;
        /// <summary>
        /// Backup method, value: Full: Full backup under physical backup type or library table backup under logical backup type. Increment: Incremental backup under physical backup type. DumpAll: Full database backup under logical backup type. Description: There is no default value. When this field is not passed, all backups of all methods under the query conditions limited by other fields are returned.
        /// </summary>
        public readonly string BackupType;
        /// <summary>
        /// The time point of a consistent snapshot is in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
        /// </summary>
        public readonly string ConsistentTime;
        /// <summary>
        /// Creator of backup. Values: System: System. User: User. Description: There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
        /// </summary>
        public readonly string CreateType;
        /// <summary>
        /// The database table information contained in the backup set can include up to 10,000 tables.
        /// Explanation:
        /// When the database is empty, this field is not returned.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackupsBackupDbTableInfoResult> DbTableInfos;
        /// <summary>
        /// The decryption key of the backup.
        /// </summary>
        public readonly string DecryptionKey;
        /// <summary>
        /// Download status. Values:
        /// NotDownload: Not downloaded.
        /// Success: Downloaded.
        /// Failed: Download failed.
        /// Running: Downloading.
        /// </summary>
        public readonly string DownloadStatus;
        /// <summary>
        /// Error message.
        /// </summary>
        public readonly string ErrorMessage;
        /// <summary>
        /// Expired time of backup, in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
        /// </summary>
        public readonly string ExpiredTime;
        /// <summary>
        /// The id of the backup.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Is the data backup encrypted? Value:
        /// true: Encrypted.
        /// false: Not encrypted.
        /// </summary>
        public readonly bool IsEncrypted;
        /// <summary>
        /// Whether the backup has expired. Value:
        /// true: Expired.
        /// false: Not expired.
        /// </summary>
        public readonly bool IsExpired;
        /// <summary>
        /// Initialization Vector.
        /// </summary>
        public readonly string Iv;
        /// <summary>
        /// Statistics information about the storage space usage of backups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackupsBackupUsageStatResult> UsageStats;

        [OutputConstructor]
        private GetBackupsBackupResult(
            string backupEndTime,

            string backupFileName,

            int backupFileSize,

            string backupId,

            string backupMethod,

            string backupRegion,

            string backupStartTime,

            string backupStatus,

            string backupType,

            string consistentTime,

            string createType,

            ImmutableArray<Outputs.GetBackupsBackupDbTableInfoResult> dbTableInfos,

            string decryptionKey,

            string downloadStatus,

            string errorMessage,

            string expiredTime,

            string id,

            bool isEncrypted,

            bool isExpired,

            string iv,

            ImmutableArray<Outputs.GetBackupsBackupUsageStatResult> usageStats)
        {
            BackupEndTime = backupEndTime;
            BackupFileName = backupFileName;
            BackupFileSize = backupFileSize;
            BackupId = backupId;
            BackupMethod = backupMethod;
            BackupRegion = backupRegion;
            BackupStartTime = backupStartTime;
            BackupStatus = backupStatus;
            BackupType = backupType;
            ConsistentTime = consistentTime;
            CreateType = createType;
            DbTableInfos = dbTableInfos;
            DecryptionKey = decryptionKey;
            DownloadStatus = downloadStatus;
            ErrorMessage = errorMessage;
            ExpiredTime = expiredTime;
            Id = id;
            IsEncrypted = isEncrypted;
            IsExpired = isExpired;
            Iv = iv;
            UsageStats = usageStats;
        }
    }
}
