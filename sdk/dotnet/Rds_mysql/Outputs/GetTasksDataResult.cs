// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mysql.Outputs
{

    [OutputType]
    public sealed class GetTasksDataResult
    {
        /// <summary>
        /// The creation time of the task.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The completion time of the task.
        /// </summary>
        public readonly string FinishTime;
        /// <summary>
        /// Task progress. The unit is percentage. Description: Only tasks with a task status of In Progress, that is, tasks with a TaskStatus value of Running, will return the task progress.
        /// </summary>
        public readonly int Progress;
        /// <summary>
        /// The deadline for the planned startup. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Description: This field will only be returned for tasks in the "Waiting to Start", "Waiting to Execute", or "Waiting to Switch" states.
        /// </summary>
        public readonly string ScheduledExecuteEndTime;
        /// <summary>
        /// The scheduled end time for the switch. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Description: This field will only be returned for tasks in the "Waiting to Start", "Waiting to Execute", or "Waiting to Switch" states.
        /// </summary>
        public readonly string ScheduledSwitchEndTime;
        /// <summary>
        /// The start time of the scheduled switch. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Description: This field is returned only for tasks in the "Waiting to Start", "Waiting to Execute", or "Waiting to Switch" state.
        /// </summary>
        public readonly string ScheduledSwitchStartTime;
        /// <summary>
        /// The start time of the task.
        /// </summary>
        public readonly string StartTime;
        /// <summary>
        /// Task name.
        /// </summary>
        public readonly string TaskAction;
        /// <summary>
        /// Task Category. The values are as shown in the following list, and multiple values can be selected: BackupRecoveryManagement: Backup and Recovery Management. DatabaseAdminManagement: Database Administration Management. DatabaseProxy: Database Proxy. HighAvailability: High Availability. InstanceAttribute: Instance Attribute. InstanceManagement: Instance Management. NetworkManagement: Network Management. SecurityManagement: Security Management. SystemMaintainManagement: System Operation and Maintenance Management. VersionUpgrade: Version Upgrade.
        /// </summary>
        public readonly string TaskCategory;
        /// <summary>
        /// The description of the task.
        /// </summary>
        public readonly string TaskDesc;
        /// <summary>
        /// Detailed information of the task.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTasksDataTaskDetailResult> TaskDetails;
        /// <summary>
        /// Task ID. Description: For the two groups of parameters, TaskId and task time (CreationStartTime and CreationEndTime), one of them must be selected.
        /// </summary>
        public readonly string TaskId;
        /// <summary>
        /// Task parameters.
        /// </summary>
        public readonly string TaskParams;
        /// <summary>
        /// Progress details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTasksDataTaskProgressResult> TaskProgresses;
        /// <summary>
        /// Task status. The values are as shown in the following list, and multiple values can be selected: WaitSwitch: Waiting for switching. WaitStart: Waiting for execution. Canceled: Canceled. Stopped: Terminated. Running_BeforeSwitch: Running (before switching). Timeout: Execution Timeout. Success: Execution Success. Failed: Execution Failed. Running: In Execution. Stopping: In Termination.
        /// </summary>
        public readonly string TaskStatus;

        [OutputConstructor]
        private GetTasksDataResult(
            string createTime,

            string finishTime,

            int progress,

            string scheduledExecuteEndTime,

            string scheduledSwitchEndTime,

            string scheduledSwitchStartTime,

            string startTime,

            string taskAction,

            string taskCategory,

            string taskDesc,

            ImmutableArray<Outputs.GetTasksDataTaskDetailResult> taskDetails,

            string taskId,

            string taskParams,

            ImmutableArray<Outputs.GetTasksDataTaskProgressResult> taskProgresses,

            string taskStatus)
        {
            CreateTime = createTime;
            FinishTime = finishTime;
            Progress = progress;
            ScheduledExecuteEndTime = scheduledExecuteEndTime;
            ScheduledSwitchEndTime = scheduledSwitchEndTime;
            ScheduledSwitchStartTime = scheduledSwitchStartTime;
            StartTime = startTime;
            TaskAction = taskAction;
            TaskCategory = taskCategory;
            TaskDesc = taskDesc;
            TaskDetails = taskDetails;
            TaskId = taskId;
            TaskParams = taskParams;
            TaskProgresses = taskProgresses;
            TaskStatus = taskStatus;
        }
    }
}
