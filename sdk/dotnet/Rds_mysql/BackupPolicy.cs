// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mysql
{
    /// <summary>
    /// Provides a resource to manage rds mysql backup policy
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Rds_mysql.BackupPolicy("foo", new()
    ///     {
    ///         BinlogFileCountsEnable = true,
    ///         BinlogSpaceLimitEnable = true,
    ///         CrossBackupPolicy = new Volcengine.Rds_mysql.Inputs.BackupPolicyCrossBackupPolicyArgs
    ///         {
    ///             BackupEnabled = true,
    ///             CrossBackupRegion = "cn-chongqing-sdv",
    ///             LogBackupEnabled = true,
    ///             Retention = 10,
    ///         },
    ///         DataFullBackupPeriods = new[]
    ///         {
    ///             "Monday",
    ///             "Sunday",
    ///             "Tuesday",
    ///         },
    ///         InstanceId = "mysql-b51d37110dd1",
    ///         LockDdlTime = 80,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RdsMysqlBackupPolicy can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:rds_mysql/backupPolicy:BackupPolicy default instanceId:backupPolicy
    /// ```
    /// Warning:The resource cannot be deleted, and the destroy operation will not perform any actions.
    /// </summary>
    [VolcengineResourceType("volcengine:rds_mysql/backupPolicy:BackupPolicy")]
    public partial class BackupPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of destination regions for cross - region backup.
        /// </summary>
        [Output("availableCrossRegions")]
        public Output<ImmutableArray<string>> AvailableCrossRegions { get; private set; } = null!;

        /// <summary>
        /// Whether to retain all log backups before releasing an instance. Values:
        /// true: Yes.
        /// false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        /// </summary>
        [Output("binlogBackupAllRetention")]
        public Output<bool> BinlogBackupAllRetention { get; private set; } = null!;

        /// <summary>
        /// Whether to enable log backup function. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Output("binlogBackupEnabled")]
        public Output<bool> BinlogBackupEnabled { get; private set; } = null!;

        /// <summary>
        /// Is encryption enabled for log backups? Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Output("binlogBackupEncryptionEnabled")]
        public Output<bool> BinlogBackupEncryptionEnabled { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Output("binlogFileCountsEnable")]
        public Output<bool> BinlogFileCountsEnable { get; private set; } = null!;

        /// <summary>
        /// Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Output("binlogLimitCount")]
        public Output<int> BinlogLimitCount { get; private set; } = null!;

        /// <summary>
        /// Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        /// </summary>
        [Output("binlogLocalRetentionHour")]
        public Output<int> BinlogLocalRetentionHour { get; private set; } = null!;

        /// <summary>
        /// Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        /// </summary>
        [Output("binlogSpaceLimitEnable")]
        public Output<bool> BinlogSpaceLimitEnable { get; private set; } = null!;

        /// <summary>
        /// Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Output("binlogStoragePercentage")]
        public Output<int> BinlogStoragePercentage { get; private set; } = null!;

        /// <summary>
        /// Cross - region backup strategy.
        /// </summary>
        [Output("crossBackupPolicy")]
        public Output<Outputs.BackupPolicyCrossBackupPolicy> CrossBackupPolicy { get; private set; } = null!;

        /// <summary>
        /// Whether to retain all data backups before releasing the instance. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Output("dataBackupAllRetention")]
        public Output<bool> DataBackupAllRetention { get; private set; } = null!;

        /// <summary>
        /// Whether to enable encryption for data backup. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Output("dataBackupEncryptionEnabled")]
        public Output<bool> DataBackupEncryptionEnabled { get; private set; } = null!;

        /// <summary>
        /// Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        /// </summary>
        [Output("dataBackupRetentionDay")]
        public Output<int> DataBackupRetentionDay { get; private set; } = null!;

        /// <summary>
        /// Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        /// </summary>
        [Output("dataFullBackupPeriods")]
        public Output<ImmutableArray<string>> DataFullBackupPeriods { get; private set; } = null!;

        /// <summary>
        /// The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        /// </summary>
        [Output("dataFullBackupStartUtcHour")]
        public Output<int> DataFullBackupStartUtcHour { get; private set; } = null!;

        /// <summary>
        /// Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        /// </summary>
        [Output("dataFullBackupTime")]
        public Output<string> DataFullBackupTime { get; private set; } = null!;

        /// <summary>
        /// Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        /// </summary>
        [Output("dataIncrBackupPeriods")]
        public Output<ImmutableArray<string>> DataIncrBackupPeriods { get; private set; } = null!;

        /// <summary>
        /// Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        /// </summary>
        [Output("dataKeepDaysAfterReleased")]
        public Output<int> DataKeepDaysAfterReleased { get; private set; } = null!;

        /// <summary>
        /// Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        /// </summary>
        [Output("dataKeepPolicyAfterReleased")]
        public Output<string> DataKeepPolicyAfterReleased { get; private set; } = null!;

        /// <summary>
        /// Whether to enable high-frequency backup function. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Output("hourlyIncrBackupEnable")]
        public Output<bool> HourlyIncrBackupEnable { get; private set; } = null!;

        /// <summary>
        /// Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        /// </summary>
        [Output("incrBackupHourPeriod")]
        public Output<int> IncrBackupHourPeriod { get; private set; } = null!;

        /// <summary>
        /// The ID of the RDS instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        /// </summary>
        [Output("lockDdlTime")]
        public Output<int> LockDdlTime { get; private set; } = null!;

        /// <summary>
        /// Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Output("logBackupRetentionDay")]
        public Output<int> LogBackupRetentionDay { get; private set; } = null!;

        /// <summary>
        /// Is the retention policy for log backups the same as that for data backups?
        /// Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        /// </summary>
        [Output("retentionPolicySynced")]
        public Output<bool> RetentionPolicySynced { get; private set; } = null!;


        /// <summary>
        /// Create a BackupPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public BackupPolicy(string name, BackupPolicyArgs args, CustomResourceOptions? options = null)
            : base("volcengine:rds_mysql/backupPolicy:BackupPolicy", name, args ?? new BackupPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private BackupPolicy(string name, Input<string> id, BackupPolicyState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:rds_mysql/backupPolicy:BackupPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing BackupPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static BackupPolicy Get(string name, Input<string> id, BackupPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new BackupPolicy(name, id, state, options);
        }
    }

    public sealed class BackupPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to retain all log backups before releasing an instance. Values:
        /// true: Yes.
        /// false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        /// </summary>
        [Input("binlogBackupAllRetention")]
        public Input<bool>? BinlogBackupAllRetention { get; set; }

        /// <summary>
        /// Whether to enable log backup function. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("binlogBackupEnabled")]
        public Input<bool>? BinlogBackupEnabled { get; set; }

        /// <summary>
        /// Is encryption enabled for log backups? Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("binlogBackupEncryptionEnabled")]
        public Input<bool>? BinlogBackupEncryptionEnabled { get; set; }

        /// <summary>
        /// Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Input("binlogFileCountsEnable")]
        public Input<bool>? BinlogFileCountsEnable { get; set; }

        /// <summary>
        /// Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Input("binlogLimitCount")]
        public Input<int>? BinlogLimitCount { get; set; }

        /// <summary>
        /// Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        /// </summary>
        [Input("binlogLocalRetentionHour")]
        public Input<int>? BinlogLocalRetentionHour { get; set; }

        /// <summary>
        /// Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        /// </summary>
        [Input("binlogSpaceLimitEnable")]
        public Input<bool>? BinlogSpaceLimitEnable { get; set; }

        /// <summary>
        /// Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Input("binlogStoragePercentage")]
        public Input<int>? BinlogStoragePercentage { get; set; }

        /// <summary>
        /// Cross - region backup strategy.
        /// </summary>
        [Input("crossBackupPolicy")]
        public Input<Inputs.BackupPolicyCrossBackupPolicyArgs>? CrossBackupPolicy { get; set; }

        /// <summary>
        /// Whether to retain all data backups before releasing the instance. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("dataBackupAllRetention")]
        public Input<bool>? DataBackupAllRetention { get; set; }

        /// <summary>
        /// Whether to enable encryption for data backup. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("dataBackupEncryptionEnabled")]
        public Input<bool>? DataBackupEncryptionEnabled { get; set; }

        /// <summary>
        /// Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        /// </summary>
        [Input("dataBackupRetentionDay")]
        public Input<int>? DataBackupRetentionDay { get; set; }

        [Input("dataFullBackupPeriods")]
        private InputList<string>? _dataFullBackupPeriods;

        /// <summary>
        /// Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        /// </summary>
        public InputList<string> DataFullBackupPeriods
        {
            get => _dataFullBackupPeriods ?? (_dataFullBackupPeriods = new InputList<string>());
            set => _dataFullBackupPeriods = value;
        }

        /// <summary>
        /// The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        /// </summary>
        [Input("dataFullBackupStartUtcHour")]
        public Input<int>? DataFullBackupStartUtcHour { get; set; }

        /// <summary>
        /// Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        /// </summary>
        [Input("dataFullBackupTime")]
        public Input<string>? DataFullBackupTime { get; set; }

        [Input("dataIncrBackupPeriods")]
        private InputList<string>? _dataIncrBackupPeriods;

        /// <summary>
        /// Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        /// </summary>
        public InputList<string> DataIncrBackupPeriods
        {
            get => _dataIncrBackupPeriods ?? (_dataIncrBackupPeriods = new InputList<string>());
            set => _dataIncrBackupPeriods = value;
        }

        /// <summary>
        /// Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        /// </summary>
        [Input("dataKeepDaysAfterReleased")]
        public Input<int>? DataKeepDaysAfterReleased { get; set; }

        /// <summary>
        /// Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        /// </summary>
        [Input("dataKeepPolicyAfterReleased")]
        public Input<string>? DataKeepPolicyAfterReleased { get; set; }

        /// <summary>
        /// Whether to enable high-frequency backup function. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("hourlyIncrBackupEnable")]
        public Input<bool>? HourlyIncrBackupEnable { get; set; }

        /// <summary>
        /// Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        /// </summary>
        [Input("incrBackupHourPeriod")]
        public Input<int>? IncrBackupHourPeriod { get; set; }

        /// <summary>
        /// The ID of the RDS instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        /// </summary>
        [Input("lockDdlTime")]
        public Input<int>? LockDdlTime { get; set; }

        /// <summary>
        /// Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Input("logBackupRetentionDay")]
        public Input<int>? LogBackupRetentionDay { get; set; }

        /// <summary>
        /// Is the retention policy for log backups the same as that for data backups?
        /// Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        /// </summary>
        [Input("retentionPolicySynced")]
        public Input<bool>? RetentionPolicySynced { get; set; }

        public BackupPolicyArgs()
        {
        }
        public static new BackupPolicyArgs Empty => new BackupPolicyArgs();
    }

    public sealed class BackupPolicyState : global::Pulumi.ResourceArgs
    {
        [Input("availableCrossRegions")]
        private InputList<string>? _availableCrossRegions;

        /// <summary>
        /// List of destination regions for cross - region backup.
        /// </summary>
        public InputList<string> AvailableCrossRegions
        {
            get => _availableCrossRegions ?? (_availableCrossRegions = new InputList<string>());
            set => _availableCrossRegions = value;
        }

        /// <summary>
        /// Whether to retain all log backups before releasing an instance. Values:
        /// true: Yes.
        /// false: No. Description: BinlogBackupAllRetention is ineffective when the value of RetentionPolicySynced is true.
        /// </summary>
        [Input("binlogBackupAllRetention")]
        public Input<bool>? BinlogBackupAllRetention { get; set; }

        /// <summary>
        /// Whether to enable log backup function. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("binlogBackupEnabled")]
        public Input<bool>? BinlogBackupEnabled { get; set; }

        /// <summary>
        /// Is encryption enabled for log backups? Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("binlogBackupEncryptionEnabled")]
        public Input<bool>? BinlogBackupEncryptionEnabled { get; set; }

        /// <summary>
        /// Whether to enable the upper limit of local Binlog retention. Values: true: Enabled. false: Disabled. Description:When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Input("binlogFileCountsEnable")]
        public Input<bool>? BinlogFileCountsEnable { get; set; }

        /// <summary>
        /// Number of local Binlog retained, ranging from 6 to 1000, in units of pieces. Automatically delete local logs that exceed the retained number. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Input("binlogLimitCount")]
        public Input<int>? BinlogLimitCount { get; set; }

        /// <summary>
        /// Local Binlog retention duration, with a value ranging from 0 to 168, in hours. Local logs exceeding the retention duration will be automatically deleted. When set to 0, local logs will not be automatically deleted. Note: When modifying the log backup policy, this parameter needs to be passed.
        /// </summary>
        [Input("binlogLocalRetentionHour")]
        public Input<int>? BinlogLocalRetentionHour { get; set; }

        /// <summary>
        /// Whether to enable automatic cleanup of Binlog when space is too large. When the total storage space occupancy rate of the instance exceeds 80% or the remaining space is less than 5GB, the system will automatically start cleaning up the earliest local Binlog until the total space occupancy rate is lower than 80% and the remaining space is greater than 5GB. true: Enabled. false: Disabled. Description: This parameter needs to be passed in when modifying the log backup policy.
        /// </summary>
        [Input("binlogSpaceLimitEnable")]
        public Input<bool>? BinlogSpaceLimitEnable { get; set; }

        /// <summary>
        /// Maximum storage space usage rate can be set to 20% - 50%. After exceeding this limit, the earliest Binlog file will be automatically deleted until the space usage rate is lower than this ratio. Local Binlog space usage rate = Local Binlog size / Total available (purchased) instance space size. When modifying the log backup policy, this parameter needs to be passed in. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Input("binlogStoragePercentage")]
        public Input<int>? BinlogStoragePercentage { get; set; }

        /// <summary>
        /// Cross - region backup strategy.
        /// </summary>
        [Input("crossBackupPolicy")]
        public Input<Inputs.BackupPolicyCrossBackupPolicyGetArgs>? CrossBackupPolicy { get; set; }

        /// <summary>
        /// Whether to retain all data backups before releasing the instance. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("dataBackupAllRetention")]
        public Input<bool>? DataBackupAllRetention { get; set; }

        /// <summary>
        /// Whether to enable encryption for data backup. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("dataBackupEncryptionEnabled")]
        public Input<bool>? DataBackupEncryptionEnabled { get; set; }

        /// <summary>
        /// Data backup retention days, value range: 7 to 365 days. Default retention is 7 days.
        /// </summary>
        [Input("dataBackupRetentionDay")]
        public Input<int>? DataBackupRetentionDay { get; set; }

        [Input("dataFullBackupPeriods")]
        private InputList<string>? _dataFullBackupPeriods;

        /// <summary>
        /// Full backup period. It is recommended to select at least 2 days for full backup every week. Multiple values are separated by English commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday. When modifying the data backup policy, this parameter needs to be passed in.
        /// </summary>
        public InputList<string> DataFullBackupPeriods
        {
            get => _dataFullBackupPeriods ?? (_dataFullBackupPeriods = new InputList<string>());
            set => _dataFullBackupPeriods = value;
        }

        /// <summary>
        /// The start point (UTC time) of the time window for starting the full backup task. The time window length is 1 hour. Explanation: Both DataFullBackupStartUTCHour and DataFullBackupTime can be used to indicate the full backup time period of an instance. DataFullBackupStartUTCHour has higher priority. If both fields are returned at the same time, DataFullBackupStartUTCHour shall prevail.
        /// </summary>
        [Input("dataFullBackupStartUtcHour")]
        public Input<int>? DataFullBackupStartUtcHour { get; set; }

        /// <summary>
        /// Time window for executing backup tasks is one hour. Format: HH:mmZ-HH:mmZ (UTC time). Explanation: This parameter needs to be passed in when modifying the data backup policy.
        /// </summary>
        [Input("dataFullBackupTime")]
        public Input<string>? DataFullBackupTime { get; set; }

        [Input("dataIncrBackupPeriods")]
        private InputList<string>? _dataIncrBackupPeriods;

        /// <summary>
        /// Incremental backup period. Multiple values are separated by commas (,). Values: Monday. Tuesday. Wednesday. Thursday. Friday. Saturday. Sunday.Description: The incremental backup period cannot conflict with the full backup. When modifying the data backup policy, this parameter needs to be passed in.
        /// </summary>
        public InputList<string> DataIncrBackupPeriods
        {
            get => _dataIncrBackupPeriods ?? (_dataIncrBackupPeriods = new InputList<string>());
            set => _dataIncrBackupPeriods = value;
        }

        /// <summary>
        /// Backup retention days when an instance is released. Currently, only a value of 7 is supported.
        /// </summary>
        [Input("dataKeepDaysAfterReleased")]
        public Input<int>? DataKeepDaysAfterReleased { get; set; }

        /// <summary>
        /// Policy for retaining a backup of an instance after it is released. The values are: Last: Keep the last backup. Default value. All: Keep all backups of the instance.
        /// </summary>
        [Input("dataKeepPolicyAfterReleased")]
        public Input<string>? DataKeepPolicyAfterReleased { get; set; }

        /// <summary>
        /// Whether to enable high-frequency backup function. Values:
        /// true: Yes.
        /// false: No.
        /// </summary>
        [Input("hourlyIncrBackupEnable")]
        public Input<bool>? HourlyIncrBackupEnable { get; set; }

        /// <summary>
        /// Frequency of performing high-frequency incremental backups. Values: 2: Perform an incremental backup every 2 hours. 4: Perform an incremental backup every 4 hours. 6: Perform an incremental backup every 6 hours. 12: Perform an incremental backup every 12 hours. Description: This parameter takes effect only when HourlyIncrBackupEnable is set to true.
        /// </summary>
        [Input("incrBackupHourPeriod")]
        public Input<int>? IncrBackupHourPeriod { get; set; }

        /// <summary>
        /// The ID of the RDS instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Maximum waiting time for DDL. The default value is 30. The minimum value is 10. The maximum value is 1440. The unit is minutes. Description: Only instances of MySQL 8.0 version support this setting.
        /// </summary>
        [Input("lockDdlTime")]
        public Input<int>? LockDdlTime { get; set; }

        /// <summary>
        /// Binlog backup retention period. The value range is 7 to 365, in days. Explanation: When modifying the log backup policy, this parameter needs to be passed in.
        /// </summary>
        [Input("logBackupRetentionDay")]
        public Input<int>? LogBackupRetentionDay { get; set; }

        /// <summary>
        /// Is the retention policy for log backups the same as that for data backups?
        /// Explanation: When the value is true, LogBackupRetentionDay and BinlogBackupAllRetention are ignored.
        /// </summary>
        [Input("retentionPolicySynced")]
        public Input<bool>? RetentionPolicySynced { get; set; }

        public BackupPolicyState()
        {
        }
        public static new BackupPolicyState Empty => new BackupPolicyState();
    }
}
