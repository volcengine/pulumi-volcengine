// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mysql
{
    [Obsolete(@"volcengine.rds_mysql.Tasks has been deprecated in favor of volcengine.rds_mysql.getTasks")]
    public static class Tasks
    {
        /// <summary>
        /// Use this data source to query detailed information of rds mysql tasks
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.GetTasks.Invoke(new()
        ///     {
        ///         CreationEndTime = "2025-06-23T00:00:00Z",
        ///         CreationStartTime = "2025-06-21T00:00:00Z",
        ///         InstanceId = "mysql-b51d37110dd1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<TasksResult> InvokeAsync(TasksArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<TasksResult>("volcengine:rds_mysql/tasks:Tasks", args ?? new TasksArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of rds mysql tasks
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.GetTasks.Invoke(new()
        ///     {
        ///         CreationEndTime = "2025-06-23T00:00:00Z",
        ///         CreationStartTime = "2025-06-21T00:00:00Z",
        ///         InstanceId = "mysql-b51d37110dd1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<TasksResult> Invoke(TasksInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<TasksResult>("volcengine:rds_mysql/tasks:Tasks", args ?? new TasksInvokeArgs(), options.WithDefaults());
    }


    public sealed class TasksArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The end time of the task. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Instructions: For the two groups of parameters, task time (CreationStartTime and CreationEndTime) and TaskId, one of them must be selected. The maximum time interval between the task start time (CreationStartTime) and the task end time (CreationEndTime) shall not exceed 7 days.
        /// </summary>
        [Input("creationEndTime")]
        public string? CreationEndTime { get; set; }

        /// <summary>
        /// The start time of the task. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Instructions: For the two groups of parameters, task time (CreationStartTime and CreationEndTime) and TaskId, one of them must be selected. The maximum time interval between the task start time (CreationStartTime) and the task end time (CreationEndTime) cannot exceed 7 days.
        /// </summary>
        [Input("creationStartTime")]
        public string? CreationStartTime { get; set; }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("taskAction")]
        public string? TaskAction { get; set; }

        [Input("taskCategories")]
        private List<string>? _taskCategories;

        /// <summary>
        /// Task Category. The values are as shown in the following list, and multiple values can be selected: BackupRecoveryManagement: Backup and Recovery Management. DatabaseAdminManagement: Database Administration Management. DatabaseProxy: Database Proxy. HighAvailability: High Availability. InstanceAttribute: Instance Attribute. InstanceManagement: Instance Management. NetworkManagement: Network Management. SecurityManagement: Security Management. SystemMaintainManagement: System Operation and Maintenance Management. VersionUpgrade: Version Upgrade.
        /// </summary>
        public List<string> TaskCategories
        {
            get => _taskCategories ?? (_taskCategories = new List<string>());
            set => _taskCategories = value;
        }

        /// <summary>
        /// Task ID. Description: For the two groups of parameters, TaskId and task time (CreationStartTime and CreationEndTime), one of them must be selected.
        /// </summary>
        [Input("taskId")]
        public string? TaskId { get; set; }

        /// <summary>
        /// Task source. Values: User: Tenant. System: System. SystemUser: Internal operation and maintenance. UserMaintain: Maintenance operations initiated by system/operation and maintenance administrators and visible to tenants.
        /// </summary>
        [Input("taskSource")]
        public string? TaskSource { get; set; }

        [Input("taskStatuses")]
        private List<string>? _taskStatuses;

        /// <summary>
        /// Task status. The values are as shown in the following list, and multiple values can be selected: WaitSwitch: Waiting for switching. WaitStart: Waiting for execution. Canceled: Canceled. Stopped: Terminated. Running_BeforeSwitch: Running (before switching). Timeout: Execution Timeout. Success: Execution Success. Failed: Execution Failed. Running: In Execution. Stopping: In Termination.
        /// </summary>
        public List<string> TaskStatuses
        {
            get => _taskStatuses ?? (_taskStatuses = new List<string>());
            set => _taskStatuses = value;
        }

        /// <summary>
        /// Task type. Values: Web: Console request. OpenAPI: OpenAPI request. AssumeRole: Role - playing request. Other: Other requests.
        /// </summary>
        [Input("taskType")]
        public string? TaskType { get; set; }

        public TasksArgs()
        {
        }
        public static new TasksArgs Empty => new TasksArgs();
    }

    public sealed class TasksInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The end time of the task. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Instructions: For the two groups of parameters, task time (CreationStartTime and CreationEndTime) and TaskId, one of them must be selected. The maximum time interval between the task start time (CreationStartTime) and the task end time (CreationEndTime) shall not exceed 7 days.
        /// </summary>
        [Input("creationEndTime")]
        public Input<string>? CreationEndTime { get; set; }

        /// <summary>
        /// The start time of the task. The time format is yyyy-MM-ddTHH:mm:ssZ (UTC time). Instructions: For the two groups of parameters, task time (CreationStartTime and CreationEndTime) and TaskId, one of them must be selected. The maximum time interval between the task start time (CreationStartTime) and the task end time (CreationEndTime) cannot exceed 7 days.
        /// </summary>
        [Input("creationStartTime")]
        public Input<string>? CreationStartTime { get; set; }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Task name.
        /// </summary>
        [Input("taskAction")]
        public Input<string>? TaskAction { get; set; }

        [Input("taskCategories")]
        private InputList<string>? _taskCategories;

        /// <summary>
        /// Task Category. The values are as shown in the following list, and multiple values can be selected: BackupRecoveryManagement: Backup and Recovery Management. DatabaseAdminManagement: Database Administration Management. DatabaseProxy: Database Proxy. HighAvailability: High Availability. InstanceAttribute: Instance Attribute. InstanceManagement: Instance Management. NetworkManagement: Network Management. SecurityManagement: Security Management. SystemMaintainManagement: System Operation and Maintenance Management. VersionUpgrade: Version Upgrade.
        /// </summary>
        public InputList<string> TaskCategories
        {
            get => _taskCategories ?? (_taskCategories = new InputList<string>());
            set => _taskCategories = value;
        }

        /// <summary>
        /// Task ID. Description: For the two groups of parameters, TaskId and task time (CreationStartTime and CreationEndTime), one of them must be selected.
        /// </summary>
        [Input("taskId")]
        public Input<string>? TaskId { get; set; }

        /// <summary>
        /// Task source. Values: User: Tenant. System: System. SystemUser: Internal operation and maintenance. UserMaintain: Maintenance operations initiated by system/operation and maintenance administrators and visible to tenants.
        /// </summary>
        [Input("taskSource")]
        public Input<string>? TaskSource { get; set; }

        [Input("taskStatuses")]
        private InputList<string>? _taskStatuses;

        /// <summary>
        /// Task status. The values are as shown in the following list, and multiple values can be selected: WaitSwitch: Waiting for switching. WaitStart: Waiting for execution. Canceled: Canceled. Stopped: Terminated. Running_BeforeSwitch: Running (before switching). Timeout: Execution Timeout. Success: Execution Success. Failed: Execution Failed. Running: In Execution. Stopping: In Termination.
        /// </summary>
        public InputList<string> TaskStatuses
        {
            get => _taskStatuses ?? (_taskStatuses = new InputList<string>());
            set => _taskStatuses = value;
        }

        /// <summary>
        /// Task type. Values: Web: Console request. OpenAPI: OpenAPI request. AssumeRole: Role - playing request. Other: Other requests.
        /// </summary>
        [Input("taskType")]
        public Input<string>? TaskType { get; set; }

        public TasksInvokeArgs()
        {
        }
        public static new TasksInvokeArgs Empty => new TasksInvokeArgs();
    }


    [OutputType]
    public sealed class TasksResult
    {
        public readonly string? CreationEndTime;
        public readonly string? CreationStartTime;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.TasksDataResult> Datas;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Instance ID.
        /// </summary>
        public readonly string? InstanceId;
        public readonly string? OutputFile;
        public readonly string? ProjectName;
        /// <summary>
        /// Task name.
        /// </summary>
        public readonly string? TaskAction;
        /// <summary>
        /// Task category.
        /// </summary>
        public readonly ImmutableArray<string> TaskCategories;
        /// <summary>
        /// Task ID.
        /// </summary>
        public readonly string? TaskId;
        public readonly string? TaskSource;
        /// <summary>
        /// Task status. The values are as shown in the following list, and multiple values can be selected: WaitSwitch: Waiting for switching. WaitStart: Waiting for execution. Canceled: Canceled. Stopped: Terminated. Running_BeforeSwitch: Running (before switching). Timeout: Execution Timeout. Success: Execution Success. Failed: Execution Failed. Running: In Execution. Stopping: In Termination.
        /// </summary>
        public readonly ImmutableArray<string> TaskStatuses;
        public readonly string? TaskType;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private TasksResult(
            string? creationEndTime,

            string? creationStartTime,

            ImmutableArray<Outputs.TasksDataResult> datas,

            string id,

            string? instanceId,

            string? outputFile,

            string? projectName,

            string? taskAction,

            ImmutableArray<string> taskCategories,

            string? taskId,

            string? taskSource,

            ImmutableArray<string> taskStatuses,

            string? taskType,

            int totalCount)
        {
            CreationEndTime = creationEndTime;
            CreationStartTime = creationStartTime;
            Datas = datas;
            Id = id;
            InstanceId = instanceId;
            OutputFile = outputFile;
            ProjectName = projectName;
            TaskAction = taskAction;
            TaskCategories = taskCategories;
            TaskId = taskId;
            TaskSource = taskSource;
            TaskStatuses = taskStatuses;
            TaskType = taskType;
            TotalCount = totalCount;
        }
    }
}
