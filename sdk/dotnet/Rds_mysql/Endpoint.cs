// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mysql
{
    /// <summary>
    /// Provides a resource to manage rds mysql endpoint
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Rds_mysql.Endpoint("foo", new()
    ///     {
    ///         AutoAddNewNodes = true,
    ///         Description = "tf-test-1",
    ///         Domain = "mysql-38c3d4f05f6e-te-8c00-private.rds.ivolces.com",
    ///         EndpointName = "tf-test-1",
    ///         InstanceId = "mysql-38c3d4f05f6e",
    ///         Nodes = new[]
    ///         {
    ///             "Primary",
    ///             "mysql-38c3d4f05f6e-r3b0d",
    ///         },
    ///         Port = 3306,
    ///         ReadOnlyNodeDistributionType = "Custom",
    ///         ReadOnlyNodeMaxDelayTime = 30,
    ///         ReadOnlyNodeWeights = new[]
    ///         {
    ///             new Volcengine.Rds_mysql.Inputs.EndpointReadOnlyNodeWeightArgs
    ///             {
    ///                 NodeId = "mysql-38c3d4f05f6e-r3b0d",
    ///                 NodeType = "ReadOnly",
    ///                 Weight = 0,
    ///             },
    ///             new Volcengine.Rds_mysql.Inputs.EndpointReadOnlyNodeWeightArgs
    ///             {
    ///                 NodeType = "Primary",
    ///                 Weight = 100,
    ///             },
    ///         },
    ///         ReadWriteMode = "ReadWrite",
    ///         ReadWriteSpliting = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RdsMysqlEndpoint can be imported using the instance id and endpoint id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:rds_mysql/endpoint:Endpoint default mysql-3c25f219***:mysql-3c25f219****-custom-eeb5
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:rds_mysql/endpoint:Endpoint")]
    public partial class Endpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
        /// true: Automatically add.
        /// false: Do not automatically add (default).
        /// </summary>
        [Output("autoAddNewNodes")]
        public Output<bool?> AutoAddNewNodes { get; private set; } = null!;

        /// <summary>
        /// The description of the endpoint.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        /// </summary>
        [Output("endpointId")]
        public Output<string> EndpointId { get; private set; } = null!;

        /// <summary>
        /// The name of the endpoint.
        /// </summary>
        [Output("endpointName")]
        public Output<string> EndpointName { get; private set; } = null!;

        /// <summary>
        /// The id of the mysql instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<string>> Nodes { get; private set; } = null!;

        /// <summary>
        /// The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
        /// Default: Automatically allocate weights based on specifications (default).
        /// Custom: Custom weight allocation.
        /// </summary>
        [Output("readOnlyNodeDistributionType")]
        public Output<string> ReadOnlyNodeDistributionType { get; private set; } = null!;

        /// <summary>
        /// The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        /// </summary>
        [Output("readOnlyNodeMaxDelayTime")]
        public Output<int> ReadOnlyNodeMaxDelayTime { get; private set; } = null!;

        /// <summary>
        /// Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        /// </summary>
        [Output("readOnlyNodeWeights")]
        public Output<ImmutableArray<Outputs.EndpointReadOnlyNodeWeight>> ReadOnlyNodeWeights { get; private set; } = null!;

        /// <summary>
        /// Reading and writing mode: ReadWrite, ReadOnly(Default).
        /// </summary>
        [Output("readWriteMode")]
        public Output<string?> ReadWriteMode { get; private set; } = null!;

        /// <summary>
        /// Enable read-write separation. Possible values: TRUE, FALSE.
        /// This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        /// </summary>
        [Output("readWriteSpliting")]
        public Output<bool> ReadWriteSpliting { get; private set; } = null!;


        /// <summary>
        /// Create a Endpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Endpoint(string name, EndpointArgs args, CustomResourceOptions? options = null)
            : base("volcengine:rds_mysql/endpoint:Endpoint", name, args ?? new EndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Endpoint(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:rds_mysql/endpoint:Endpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Endpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Endpoint Get(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new Endpoint(name, id, state, options);
        }
    }

    public sealed class EndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
        /// true: Automatically add.
        /// false: Do not automatically add (default).
        /// </summary>
        [Input("autoAddNewNodes")]
        public Input<bool>? AutoAddNewNodes { get; set; }

        /// <summary>
        /// The description of the endpoint.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        /// </summary>
        [Input("endpointId")]
        public Input<string>? EndpointId { get; set; }

        /// <summary>
        /// The name of the endpoint.
        /// </summary>
        [Input("endpointName")]
        public Input<string>? EndpointName { get; set; }

        /// <summary>
        /// The id of the mysql instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        [Input("nodes", required: true)]
        private InputList<string>? _nodes;

        /// <summary>
        /// List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
        /// Default: Automatically allocate weights based on specifications (default).
        /// Custom: Custom weight allocation.
        /// </summary>
        [Input("readOnlyNodeDistributionType")]
        public Input<string>? ReadOnlyNodeDistributionType { get; set; }

        /// <summary>
        /// The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        /// </summary>
        [Input("readOnlyNodeMaxDelayTime")]
        public Input<int>? ReadOnlyNodeMaxDelayTime { get; set; }

        [Input("readOnlyNodeWeights")]
        private InputList<Inputs.EndpointReadOnlyNodeWeightArgs>? _readOnlyNodeWeights;

        /// <summary>
        /// Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        /// </summary>
        public InputList<Inputs.EndpointReadOnlyNodeWeightArgs> ReadOnlyNodeWeights
        {
            get => _readOnlyNodeWeights ?? (_readOnlyNodeWeights = new InputList<Inputs.EndpointReadOnlyNodeWeightArgs>());
            set => _readOnlyNodeWeights = value;
        }

        /// <summary>
        /// Reading and writing mode: ReadWrite, ReadOnly(Default).
        /// </summary>
        [Input("readWriteMode")]
        public Input<string>? ReadWriteMode { get; set; }

        /// <summary>
        /// Enable read-write separation. Possible values: TRUE, FALSE.
        /// This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        /// </summary>
        [Input("readWriteSpliting")]
        public Input<bool>? ReadWriteSpliting { get; set; }

        public EndpointArgs()
        {
        }
        public static new EndpointArgs Empty => new EndpointArgs();
    }

    public sealed class EndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// When the terminal type is a read-write terminal or a read-only terminal, support is provided for setting whether new nodes are automatically added. The values are:
        /// true: Automatically add.
        /// false: Do not automatically add (default).
        /// </summary>
        [Input("autoAddNewNodes")]
        public Input<bool>? AutoAddNewNodes { get; set; }

        /// <summary>
        /// The description of the endpoint.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Connection address, Please note that the connection address can only modify the prefix. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// The id of the endpoint. Import an exist endpoint, usually for import a default endpoint generated with instance creating.
        /// </summary>
        [Input("endpointId")]
        public Input<string>? EndpointId { get; set; }

        /// <summary>
        /// The name of the endpoint.
        /// </summary>
        [Input("endpointName")]
        public Input<string>? EndpointName { get; set; }

        /// <summary>
        /// The id of the mysql instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("nodes")]
        private InputList<string>? _nodes;

        /// <summary>
        /// List of node IDs configured for the endpoint. Required when EndpointType is Custom. To add a master node to the terminal, there is no need to fill in the master node ID, just fill in `Primary`.
        /// </summary>
        public InputList<string> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<string>());
            set => _nodes = value;
        }

        /// <summary>
        /// The port. Cannot modify public network port. In one call, it is not possible to modify both the connection address prefix and the port at the same time.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Read weight allocation mode. This parameter is required when enabling read-write separation setting to TRUE. Possible values:
        /// Default: Automatically allocate weights based on specifications (default).
        /// Custom: Custom weight allocation.
        /// </summary>
        [Input("readOnlyNodeDistributionType")]
        public Input<string>? ReadOnlyNodeDistributionType { get; set; }

        /// <summary>
        /// The maximum delay threshold for read-only nodes, when the delay time of a read-only node exceeds this value, the read traffic will not be sent to that node, unit: seconds. Value range: 0~3600. Default value: 30.
        /// </summary>
        [Input("readOnlyNodeMaxDelayTime")]
        public Input<int>? ReadOnlyNodeMaxDelayTime { get; set; }

        [Input("readOnlyNodeWeights")]
        private InputList<Inputs.EndpointReadOnlyNodeWeightGetArgs>? _readOnlyNodeWeights;

        /// <summary>
        /// Customize read weight distribution, that is, pass in the read request weight of the master node and read-only nodes. It increases by 100 and the maximum value is 10000. When the ReadOnlyNodeDistributionType value is Custom, this parameter needs to be passed in.
        /// </summary>
        public InputList<Inputs.EndpointReadOnlyNodeWeightGetArgs> ReadOnlyNodeWeights
        {
            get => _readOnlyNodeWeights ?? (_readOnlyNodeWeights = new InputList<Inputs.EndpointReadOnlyNodeWeightGetArgs>());
            set => _readOnlyNodeWeights = value;
        }

        /// <summary>
        /// Reading and writing mode: ReadWrite, ReadOnly(Default).
        /// </summary>
        [Input("readWriteMode")]
        public Input<string>? ReadWriteMode { get; set; }

        /// <summary>
        /// Enable read-write separation. Possible values: TRUE, FALSE.
        /// This setting can be configured when ReadWriteMode is set to read-write, but cannot be configured when ReadWriteMode is set to read-only. This parameter only applies to the default terminal.
        /// </summary>
        [Input("readWriteSpliting")]
        public Input<bool>? ReadWriteSpliting { get; set; }

        public EndpointState()
        {
        }
        public static new EndpointState Empty => new EndpointState();
    }
}
