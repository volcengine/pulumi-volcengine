// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mysql
{
    [Obsolete(@"volcengine.rds_mysql.AccountTableColumnInfos has been deprecated in favor of volcengine.rds_mysql.getAccountTableColumnInfos")]
    public static class AccountTableColumnInfos
    {
        /// <summary>
        /// Use this data source to query detailed information of rds mysql account table column infos
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.GetAccountTableColumnInfos.Invoke(new()
        ///     {
        ///         DbName = "ddd",
        ///         InstanceId = "mysql-b51d37110dd1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<AccountTableColumnInfosResult> InvokeAsync(AccountTableColumnInfosArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<AccountTableColumnInfosResult>("volcengine:rds_mysql/accountTableColumnInfos:AccountTableColumnInfos", args ?? new AccountTableColumnInfosArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of rds mysql account table column infos
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.GetAccountTableColumnInfos.Invoke(new()
        ///     {
        ///         DbName = "ddd",
        ///         InstanceId = "mysql-b51d37110dd1",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<AccountTableColumnInfosResult> Invoke(AccountTableColumnInfosInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<AccountTableColumnInfosResult>("volcengine:rds_mysql/accountTableColumnInfos:AccountTableColumnInfos", args ?? new AccountTableColumnInfosInvokeArgs(), options.WithDefaults());
    }


    public sealed class AccountTableColumnInfosArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the account.
        /// </summary>
        [Input("accountName")]
        public string? AccountName { get; set; }

        /// <summary>
        /// The name of the column.
        /// </summary>
        [Input("columnName")]
        public string? ColumnName { get; set; }

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("dbName", required: true)]
        public string DbName { get; set; } = null!;

        /// <summary>
        /// Specify the IP address for the account to access the database. The default value is %.
        /// </summary>
        [Input("host")]
        public string? Host { get; set; }

        /// <summary>
        /// The id of the mysql instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Specify the number of tables in the table column permission information to be returned. If it exceeds the setting, it will be truncated.
        /// </summary>
        [Input("tableLimit")]
        public int? TableLimit { get; set; }

        /// <summary>
        /// The name of the table.
        /// </summary>
        [Input("tableName")]
        public string? TableName { get; set; }

        public AccountTableColumnInfosArgs()
        {
        }
        public static new AccountTableColumnInfosArgs Empty => new AccountTableColumnInfosArgs();
    }

    public sealed class AccountTableColumnInfosInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the account.
        /// </summary>
        [Input("accountName")]
        public Input<string>? AccountName { get; set; }

        /// <summary>
        /// The name of the column.
        /// </summary>
        [Input("columnName")]
        public Input<string>? ColumnName { get; set; }

        /// <summary>
        /// The name of the database.
        /// </summary>
        [Input("dbName", required: true)]
        public Input<string> DbName { get; set; } = null!;

        /// <summary>
        /// Specify the IP address for the account to access the database. The default value is %.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The id of the mysql instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Specify the number of tables in the table column permission information to be returned. If it exceeds the setting, it will be truncated.
        /// </summary>
        [Input("tableLimit")]
        public Input<int>? TableLimit { get; set; }

        /// <summary>
        /// The name of the table.
        /// </summary>
        [Input("tableName")]
        public Input<string>? TableName { get; set; }

        public AccountTableColumnInfosInvokeArgs()
        {
        }
        public static new AccountTableColumnInfosInvokeArgs Empty => new AccountTableColumnInfosInvokeArgs();
    }


    [OutputType]
    public sealed class AccountTableColumnInfosResult
    {
        public readonly string? AccountName;
        /// <summary>
        /// The name of the column.
        /// </summary>
        public readonly string? ColumnName;
        public readonly string DbName;
        public readonly string? Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.AccountTableColumnInfosTableInfoResult> TableInfos;
        public readonly int? TableLimit;
        /// <summary>
        /// The name of the table.
        /// </summary>
        public readonly string? TableName;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private AccountTableColumnInfosResult(
            string? accountName,

            string? columnName,

            string dbName,

            string? host,

            string id,

            string instanceId,

            string? outputFile,

            ImmutableArray<Outputs.AccountTableColumnInfosTableInfoResult> tableInfos,

            int? tableLimit,

            string? tableName,

            int totalCount)
        {
            AccountName = accountName;
            ColumnName = columnName;
            DbName = dbName;
            Host = host;
            Id = id;
            InstanceId = instanceId;
            OutputFile = outputFile;
            TableInfos = tableInfos;
            TableLimit = tableLimit;
            TableName = tableName;
            TotalCount = totalCount;
        }
    }
}
