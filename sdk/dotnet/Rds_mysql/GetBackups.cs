// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mysql
{
    public static class GetBackups
    {
        /// <summary>
        /// Use this data source to query detailed information of rds mysql backups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.GetBackups.Invoke(new()
        ///     {
        ///         BackupEndTime = "",
        ///         BackupId = "",
        ///         BackupMethod = "",
        ///         BackupStartTime = "",
        ///         BackupStatus = "",
        ///         BackupType = "",
        ///         CreateType = "",
        ///         InstanceId = "",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBackupsResult> InvokeAsync(GetBackupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupsResult>("volcengine:rds_mysql/getBackups:getBackups", args ?? new GetBackupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of rds mysql backups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mysql.GetBackups.Invoke(new()
        ///     {
        ///         BackupEndTime = "",
        ///         BackupId = "",
        ///         BackupMethod = "",
        ///         BackupStartTime = "",
        ///         BackupStatus = "",
        ///         BackupType = "",
        ///         CreateType = "",
        ///         InstanceId = "",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBackupsResult> Invoke(GetBackupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupsResult>("volcengine:rds_mysql/getBackups:getBackups", args ?? new GetBackupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The end time of the backup.
        /// </summary>
        [Input("backupEndTime")]
        public string? BackupEndTime { get; set; }

        /// <summary>
        /// The id of the backup.
        /// </summary>
        [Input("backupId")]
        public string? BackupId { get; set; }

        /// <summary>
        /// Backup type, value: Physical: Physical backup. Default value. Logical: Logical backup. Description: There is no default value. When this field is not passed, backups of all states under the query conditions limited by other fields are returned.
        /// </summary>
        [Input("backupMethod")]
        public string? BackupMethod { get; set; }

        /// <summary>
        /// The start time of the backup.
        /// </summary>
        [Input("backupStartTime")]
        public string? BackupStartTime { get; set; }

        /// <summary>
        /// Backup status, values: Success: Success. Failed: Failed. Running: In progress. Description: There is no default value. When this field is not passed, all backups in all states under the query conditions limited by other fields are returned.
        /// </summary>
        [Input("backupStatus")]
        public string? BackupStatus { get; set; }

        /// <summary>
        /// Backup method, value: Full: Full backup under physical backup type or library table backup under logical backup type. Increment: Incremental backup under physical backup type. DumpAll: Full database backup under logical backup type. Description: There is no default value. When this field is not passed, all backups of all methods under the query conditions limited by other fields are returned.
        /// </summary>
        [Input("backupType")]
        public string? BackupType { get; set; }

        /// <summary>
        /// Creator of backup. Values: System: System. User: User. Description: There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
        /// </summary>
        [Input("createType")]
        public string? CreateType { get; set; }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetBackupsArgs()
        {
        }
        public static new GetBackupsArgs Empty => new GetBackupsArgs();
    }

    public sealed class GetBackupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The end time of the backup.
        /// </summary>
        [Input("backupEndTime")]
        public Input<string>? BackupEndTime { get; set; }

        /// <summary>
        /// The id of the backup.
        /// </summary>
        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        /// <summary>
        /// Backup type, value: Physical: Physical backup. Default value. Logical: Logical backup. Description: There is no default value. When this field is not passed, backups of all states under the query conditions limited by other fields are returned.
        /// </summary>
        [Input("backupMethod")]
        public Input<string>? BackupMethod { get; set; }

        /// <summary>
        /// The start time of the backup.
        /// </summary>
        [Input("backupStartTime")]
        public Input<string>? BackupStartTime { get; set; }

        /// <summary>
        /// Backup status, values: Success: Success. Failed: Failed. Running: In progress. Description: There is no default value. When this field is not passed, all backups in all states under the query conditions limited by other fields are returned.
        /// </summary>
        [Input("backupStatus")]
        public Input<string>? BackupStatus { get; set; }

        /// <summary>
        /// Backup method, value: Full: Full backup under physical backup type or library table backup under logical backup type. Increment: Incremental backup under physical backup type. DumpAll: Full database backup under logical backup type. Description: There is no default value. When this field is not passed, all backups of all methods under the query conditions limited by other fields are returned.
        /// </summary>
        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        /// <summary>
        /// Creator of backup. Values: System: System. User: User. Description: There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
        /// </summary>
        [Input("createType")]
        public Input<string>? CreateType { get; set; }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetBackupsInvokeArgs()
        {
        }
        public static new GetBackupsInvokeArgs Empty => new GetBackupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupsResult
    {
        /// <summary>
        /// The end time of backup, in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
        /// </summary>
        public readonly string? BackupEndTime;
        /// <summary>
        /// The id of the backup.
        /// </summary>
        public readonly string? BackupId;
        /// <summary>
        /// Backup type, value: Physical: Physical backup. Logical: Logical backup.
        /// </summary>
        public readonly string? BackupMethod;
        /// <summary>
        /// The start time of backup, in the format of yyyy-MM-ddTHH:mm:ss.sssZ (UTC time).
        /// </summary>
        public readonly string? BackupStartTime;
        /// <summary>
        /// Backup status, values: Success. Failed. Running.
        /// </summary>
        public readonly string? BackupStatus;
        /// <summary>
        /// Backup method, values:
        /// Full: Full backup under physical backup type or library table backup under logical backup type.
        /// Increment: Incremental backup under physical backup type (created by the system).
        /// DumpAll: Full database backup under logical backup type.
        /// Description:
        /// There is no default value. When this field is not passed, all types of backups under the query conditions limited by other fields are returned.
        /// </summary>
        public readonly string? BackupType;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBackupsBackupResult> Backups;
        /// <summary>
        /// Creator of backup. Values: System. User.
        /// </summary>
        public readonly string? CreateType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? InstanceId;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetBackupsResult(
            string? backupEndTime,

            string? backupId,

            string? backupMethod,

            string? backupStartTime,

            string? backupStatus,

            string? backupType,

            ImmutableArray<Outputs.GetBackupsBackupResult> backups,

            string? createType,

            string id,

            string? instanceId,

            string? outputFile,

            int totalCount)
        {
            BackupEndTime = backupEndTime;
            BackupId = backupId;
            BackupMethod = backupMethod;
            BackupStartTime = backupStartTime;
            BackupStatus = backupStatus;
            BackupType = backupType;
            Backups = backups;
            CreateType = createType;
            Id = id;
            InstanceId = instanceId;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
