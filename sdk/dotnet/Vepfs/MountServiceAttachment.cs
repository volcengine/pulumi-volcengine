// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vepfs
{
    /// <summary>
    /// Provides a resource to manage vepfs mount service attachment
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = "cn-beijing-a",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooFileSystem = new Volcengine.Vepfs.FileSystem("fooFileSystem", new()
    ///     {
    ///         FileSystemName = "acc-test-file-system",
    ///         SubnetId = fooSubnet.Id,
    ///         StoreType = "Advance_100",
    ///         Description = "tf-test",
    ///         Capacity = 12,
    ///         Project = "default",
    ///         EnableRestripe = false,
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vepfs.Inputs.FileSystemTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooMountService = new Volcengine.Vepfs.MountService("fooMountService", new()
    ///     {
    ///         MountServiceName = "acc-test-mount-service",
    ///         SubnetId = fooSubnet.Id,
    ///         NodeType = "ecs.g1ie.large",
    ///         Project = "default",
    ///     });
    /// 
    ///     var fooMountServiceAttachment = new Volcengine.Vepfs.MountServiceAttachment("fooMountServiceAttachment", new()
    ///     {
    ///         MountServiceId = fooMountService.Id,
    ///         FileSystemId = fooFileSystem.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VepfsMountServiceAttachment can be imported using the mount_service_id:file_system_id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vepfs/mountServiceAttachment:MountServiceAttachment default mount_service_id:file_system_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vepfs/mountServiceAttachment:MountServiceAttachment")]
    public partial class MountServiceAttachment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The attach status of the vepfs file system.
        /// </summary>
        [Output("attachStatus")]
        public Output<string> AttachStatus { get; private set; } = null!;

        /// <summary>
        /// The custom mount directory, the default value is file system id.
        /// </summary>
        [Output("customerPath")]
        public Output<string> CustomerPath { get; private set; } = null!;

        /// <summary>
        /// The id of the vepfs file system.
        /// </summary>
        [Output("fileSystemId")]
        public Output<string> FileSystemId { get; private set; } = null!;

        /// <summary>
        /// The id of the mount service.
        /// </summary>
        [Output("mountServiceId")]
        public Output<string> MountServiceId { get; private set; } = null!;


        /// <summary>
        /// Create a MountServiceAttachment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MountServiceAttachment(string name, MountServiceAttachmentArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vepfs/mountServiceAttachment:MountServiceAttachment", name, args ?? new MountServiceAttachmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MountServiceAttachment(string name, Input<string> id, MountServiceAttachmentState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vepfs/mountServiceAttachment:MountServiceAttachment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MountServiceAttachment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MountServiceAttachment Get(string name, Input<string> id, MountServiceAttachmentState? state = null, CustomResourceOptions? options = null)
        {
            return new MountServiceAttachment(name, id, state, options);
        }
    }

    public sealed class MountServiceAttachmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The custom mount directory, the default value is file system id.
        /// </summary>
        [Input("customerPath")]
        public Input<string>? CustomerPath { get; set; }

        /// <summary>
        /// The id of the vepfs file system.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The id of the mount service.
        /// </summary>
        [Input("mountServiceId", required: true)]
        public Input<string> MountServiceId { get; set; } = null!;

        public MountServiceAttachmentArgs()
        {
        }
        public static new MountServiceAttachmentArgs Empty => new MountServiceAttachmentArgs();
    }

    public sealed class MountServiceAttachmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The attach status of the vepfs file system.
        /// </summary>
        [Input("attachStatus")]
        public Input<string>? AttachStatus { get; set; }

        /// <summary>
        /// The custom mount directory, the default value is file system id.
        /// </summary>
        [Input("customerPath")]
        public Input<string>? CustomerPath { get; set; }

        /// <summary>
        /// The id of the vepfs file system.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// The id of the mount service.
        /// </summary>
        [Input("mountServiceId")]
        public Input<string>? MountServiceId { get; set; }

        public MountServiceAttachmentState()
        {
        }
        public static new MountServiceAttachmentState Empty => new MountServiceAttachmentState();
    }
}
