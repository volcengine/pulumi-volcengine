// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vepfs
{
    public static class Filesets
    {
        /// <summary>
        /// Use this data source to query detailed information of vepfs filesets
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijing-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooFileSystem = new Volcengine.Vepfs.FileSystem("fooFileSystem", new()
        ///     {
        ///         FileSystemName = "acc-test-file-system",
        ///         SubnetId = fooSubnet.Id,
        ///         StoreType = "Advance_100",
        ///         Description = "tf-test",
        ///         Capacity = 12,
        ///         Project = "default",
        ///         EnableRestripe = false,
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vepfs.Inputs.FileSystemTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooFileset = new Volcengine.Vepfs.Fileset("fooFileset", new()
        ///     {
        ///         FileSystemId = fooFileSystem.Id,
        ///         FilesetName = "acc-test-fileset",
        ///         FilesetPath = "/tf-test/",
        ///         MaxIops = 100,
        ///         MaxBandwidth = 10,
        ///         FileLimit = 20,
        ///         CapacityLimit = 30,
        ///     });
        /// 
        ///     var fooFilesets = Volcengine.Vepfs.Filesets.Invoke(new()
        ///     {
        ///         FileSystemId = fooFileSystem.Id,
        ///         FilesetId = fooFileset.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<FilesetsResult> InvokeAsync(FilesetsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<FilesetsResult>("volcengine:vepfs/filesets:Filesets", args ?? new FilesetsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vepfs filesets
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijing-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooFileSystem = new Volcengine.Vepfs.FileSystem("fooFileSystem", new()
        ///     {
        ///         FileSystemName = "acc-test-file-system",
        ///         SubnetId = fooSubnet.Id,
        ///         StoreType = "Advance_100",
        ///         Description = "tf-test",
        ///         Capacity = 12,
        ///         Project = "default",
        ///         EnableRestripe = false,
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vepfs.Inputs.FileSystemTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooFileset = new Volcengine.Vepfs.Fileset("fooFileset", new()
        ///     {
        ///         FileSystemId = fooFileSystem.Id,
        ///         FilesetName = "acc-test-fileset",
        ///         FilesetPath = "/tf-test/",
        ///         MaxIops = 100,
        ///         MaxBandwidth = 10,
        ///         FileLimit = 20,
        ///         CapacityLimit = 30,
        ///     });
        /// 
        ///     var fooFilesets = Volcengine.Vepfs.Filesets.Invoke(new()
        ///     {
        ///         FileSystemId = fooFileSystem.Id,
        ///         FilesetId = fooFileset.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<FilesetsResult> Invoke(FilesetsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<FilesetsResult>("volcengine:vepfs/filesets:Filesets", args ?? new FilesetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class FilesetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of Vepfs File System.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public string FileSystemId { get; set; } = null!;

        /// <summary>
        /// The id of Vepfs Fileset.
        /// </summary>
        [Input("filesetId")]
        public string? FilesetId { get; set; }

        /// <summary>
        /// The name of Vepfs Fileset. This field support fuzzy query.
        /// </summary>
        [Input("filesetName")]
        public string? FilesetName { get; set; }

        /// <summary>
        /// The path of Vepfs Fileset. This field support fuzzy query.
        /// </summary>
        [Input("filesetPath")]
        public string? FilesetPath { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// The query status list of Vepfs Fileset.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        public FilesetsArgs()
        {
        }
        public static new FilesetsArgs Empty => new FilesetsArgs();
    }

    public sealed class FilesetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of Vepfs File System.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The id of Vepfs Fileset.
        /// </summary>
        [Input("filesetId")]
        public Input<string>? FilesetId { get; set; }

        /// <summary>
        /// The name of Vepfs Fileset. This field support fuzzy query.
        /// </summary>
        [Input("filesetName")]
        public Input<string>? FilesetName { get; set; }

        /// <summary>
        /// The path of Vepfs Fileset. This field support fuzzy query.
        /// </summary>
        [Input("filesetPath")]
        public Input<string>? FilesetPath { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// The query status list of Vepfs Fileset.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        public FilesetsInvokeArgs()
        {
        }
        public static new FilesetsInvokeArgs Empty => new FilesetsInvokeArgs();
    }


    [OutputType]
    public sealed class FilesetsResult
    {
        public readonly string FileSystemId;
        /// <summary>
        /// The id of the vepfs fileset.
        /// </summary>
        public readonly string? FilesetId;
        /// <summary>
        /// The name of the vepfs fileset.
        /// </summary>
        public readonly string? FilesetName;
        /// <summary>
        /// The path of the vepfs fileset.
        /// </summary>
        public readonly string? FilesetPath;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.FilesetsFilesetResult> Filesets;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The status of the vepfs fileset.
        /// </summary>
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private FilesetsResult(
            string fileSystemId,

            string? filesetId,

            string? filesetName,

            string? filesetPath,

            ImmutableArray<Outputs.FilesetsFilesetResult> filesets,

            string id,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<string> statuses,

            int totalCount)
        {
            FileSystemId = fileSystemId;
            FilesetId = filesetId;
            FilesetName = filesetName;
            FilesetPath = filesetPath;
            Filesets = filesets;
            Id = id;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
        }
    }
}
