// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vepfs
{
    public static class MountServices
    {
        /// <summary>
        /// Use this data source to query detailed information of vepfs mount services
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijing-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooMountService = new Volcengine.Vepfs.MountService("fooMountService", new()
        ///     {
        ///         MountServiceName = "acc-test-mount-service",
        ///         SubnetId = fooSubnet.Id,
        ///         NodeType = "ecs.g1ie.large",
        ///         Project = "default",
        ///     });
        /// 
        ///     var fooMountServices = Volcengine.Vepfs.MountServices.Invoke(new()
        ///     {
        ///         MountServiceId = fooMountService.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<MountServicesResult> InvokeAsync(MountServicesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<MountServicesResult>("volcengine:vepfs/mountServices:MountServices", args ?? new MountServicesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vepfs mount services
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijing-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooMountService = new Volcengine.Vepfs.MountService("fooMountService", new()
        ///     {
        ///         MountServiceName = "acc-test-mount-service",
        ///         SubnetId = fooSubnet.Id,
        ///         NodeType = "ecs.g1ie.large",
        ///         Project = "default",
        ///     });
        /// 
        ///     var fooMountServices = Volcengine.Vepfs.MountServices.Invoke(new()
        ///     {
        ///         MountServiceId = fooMountService.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<MountServicesResult> Invoke(MountServicesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<MountServicesResult>("volcengine:vepfs/mountServices:MountServices", args ?? new MountServicesInvokeArgs(), options.WithDefaults());
    }


    public sealed class MountServicesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of Vepfs File System.
        /// </summary>
        [Input("fileSystemId")]
        public string? FileSystemId { get; set; }

        /// <summary>
        /// The id of mount service.
        /// </summary>
        [Input("mountServiceId")]
        public string? MountServiceId { get; set; }

        /// <summary>
        /// The name of mount service. This field support fuzzy query.
        /// </summary>
        [Input("mountServiceName")]
        public string? MountServiceName { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// The query status list of mount service.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        public MountServicesArgs()
        {
        }
        public static new MountServicesArgs Empty => new MountServicesArgs();
    }

    public sealed class MountServicesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of Vepfs File System.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        /// <summary>
        /// The id of mount service.
        /// </summary>
        [Input("mountServiceId")]
        public Input<string>? MountServiceId { get; set; }

        /// <summary>
        /// The name of mount service. This field support fuzzy query.
        /// </summary>
        [Input("mountServiceName")]
        public Input<string>? MountServiceName { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// The query status list of mount service.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        public MountServicesInvokeArgs()
        {
        }
        public static new MountServicesInvokeArgs Empty => new MountServicesInvokeArgs();
    }


    [OutputType]
    public sealed class MountServicesResult
    {
        /// <summary>
        /// The id of the vepfs file system.
        /// </summary>
        public readonly string? FileSystemId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The id of the mount service.
        /// </summary>
        public readonly string? MountServiceId;
        /// <summary>
        /// The name of the mount service.
        /// </summary>
        public readonly string? MountServiceName;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.MountServicesMountServiceResult> MountServices;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The status of the mount service.
        /// </summary>
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private MountServicesResult(
            string? fileSystemId,

            string id,

            string? mountServiceId,

            string? mountServiceName,

            ImmutableArray<Outputs.MountServicesMountServiceResult> mountServices,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<string> statuses,

            int totalCount)
        {
            FileSystemId = fileSystemId;
            Id = id;
            MountServiceId = mountServiceId;
            MountServiceName = mountServiceName;
            MountServices = mountServices;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
        }
    }
}
