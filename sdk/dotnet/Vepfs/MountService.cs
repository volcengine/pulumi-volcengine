// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vepfs
{
    /// <summary>
    /// Provides a resource to manage vepfs mount service
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = "cn-beijing-a",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooMountService = new Volcengine.Vepfs.MountService("fooMountService", new()
    ///     {
    ///         MountServiceName = "acc-test-mount-service",
    ///         SubnetId = fooSubnet.Id,
    ///         NodeType = "ecs.g1ie.large",
    ///         Project = "default",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VepfsMountService can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:vepfs/mountService:MountService default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vepfs/mountService:MountService")]
    public partial class MountService : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account id of the vepfs file system.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The attached file system info of the mount service.
        /// </summary>
        [Output("attachFileSystems")]
        public Output<ImmutableArray<Outputs.MountServiceAttachFileSystem>> AttachFileSystems { get; private set; } = null!;

        /// <summary>
        /// The created time of the mount service.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The name of the mount service.
        /// </summary>
        [Output("mountServiceName")]
        public Output<string> MountServiceName { get; private set; } = null!;

        /// <summary>
        /// The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("nodeType")]
        public Output<string> NodeType { get; private set; } = null!;

        /// <summary>
        /// The nodes info of the mount service.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.MountServiceNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// The node type of the mount service.
        /// </summary>
        [Output("project")]
        public Output<string> Project { get; private set; } = null!;

        /// <summary>
        /// The region id of the mount service.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// The status of the mount service.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The subnet id of the mount service.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The vpc id of the mount service.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The zone id of the mount service.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        /// <summary>
        /// The zone name of the mount service.
        /// </summary>
        [Output("zoneName")]
        public Output<string> ZoneName { get; private set; } = null!;


        /// <summary>
        /// Create a MountService resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MountService(string name, MountServiceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vepfs/mountService:MountService", name, args ?? new MountServiceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MountService(string name, Input<string> id, MountServiceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vepfs/mountService:MountService", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MountService resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MountService Get(string name, Input<string> id, MountServiceState? state = null, CustomResourceOptions? options = null)
        {
            return new MountService(name, id, state, options);
        }
    }

    public sealed class MountServiceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the mount service.
        /// </summary>
        [Input("mountServiceName", required: true)]
        public Input<string> MountServiceName { get; set; } = null!;

        /// <summary>
        /// The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("nodeType", required: true)]
        public Input<string> NodeType { get; set; } = null!;

        /// <summary>
        /// The node type of the mount service.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The subnet id of the mount service.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public MountServiceArgs()
        {
        }
        public static new MountServiceArgs Empty => new MountServiceArgs();
    }

    public sealed class MountServiceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account id of the vepfs file system.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        [Input("attachFileSystems")]
        private InputList<Inputs.MountServiceAttachFileSystemGetArgs>? _attachFileSystems;

        /// <summary>
        /// The attached file system info of the mount service.
        /// </summary>
        public InputList<Inputs.MountServiceAttachFileSystemGetArgs> AttachFileSystems
        {
            get => _attachFileSystems ?? (_attachFileSystems = new InputList<Inputs.MountServiceAttachFileSystemGetArgs>());
            set => _attachFileSystems = value;
        }

        /// <summary>
        /// The created time of the mount service.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The name of the mount service.
        /// </summary>
        [Input("mountServiceName")]
        public Input<string>? MountServiceName { get; set; }

        /// <summary>
        /// The node type of the mount service. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        [Input("nodes")]
        private InputList<Inputs.MountServiceNodeGetArgs>? _nodes;

        /// <summary>
        /// The nodes info of the mount service.
        /// </summary>
        public InputList<Inputs.MountServiceNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.MountServiceNodeGetArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// The node type of the mount service.
        /// </summary>
        [Input("project")]
        public Input<string>? Project { get; set; }

        /// <summary>
        /// The region id of the mount service.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// The status of the mount service.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The subnet id of the mount service.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The vpc id of the mount service.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The zone id of the mount service.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        /// <summary>
        /// The zone name of the mount service.
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public MountServiceState()
        {
        }
        public static new MountServiceState Empty => new MountServiceState();
    }
}
