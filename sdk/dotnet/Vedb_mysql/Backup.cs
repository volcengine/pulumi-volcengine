// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vedb_mysql
{
    /// <summary>
    /// Provides a resource to manage vedb mysql backup
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[2]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Vedb_mysql.Instance("fooInstance", new()
    ///     {
    ///         ChargeType = "PostPaid",
    ///         StorageChargeType = "PostPaid",
    ///         DbEngineVersion = "MySQL_8_0",
    ///         DbMinorVersion = "3.0",
    ///         NodeNumber = 2,
    ///         NodeSpec = "vedb.mysql.x4.large",
    ///         SubnetId = fooSubnet.Id,
    ///         InstanceName = "tf-test",
    ///         ProjectName = "testA",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "tftest",
    ///                 Value = "tftest",
    ///             },
    ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "tftest2",
    ///                 Value = "tftest2",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooBackup = new Volcengine.Vedb_mysql.Backup("fooBackup", new()
    ///     {
    ///         InstanceId = fooInstance.Id,
    ///         BackupPolicy = new Volcengine.Vedb_mysql.Inputs.BackupBackupPolicyArgs
    ///         {
    ///             BackupTime = "18:00Z-20:00Z",
    ///             FullBackupPeriod = "Monday,Tuesday,Wednesday",
    ///             BackupRetentionPeriod = 8,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VedbMysqlBackup can be imported using the instance id and backup id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vedb_mysql/backup:Backup default instanceID:backupId
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vedb_mysql/backup:Backup")]
    public partial class Backup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the backup.
        /// </summary>
        [Output("backupId")]
        public Output<string> BackupId { get; private set; } = null!;

        /// <summary>
        /// Backup method. Currently, only physical backup is supported. The value is Physical.
        /// </summary>
        [Output("backupMethod")]
        public Output<string> BackupMethod { get; private set; } = null!;

        /// <summary>
        /// Data backup strategy for instances.
        /// </summary>
        [Output("backupPolicy")]
        public Output<Outputs.BackupBackupPolicy> BackupPolicy { get; private set; } = null!;

        /// <summary>
        /// Backup type. Currently, only full backup is supported. The value is Full.
        /// </summary>
        [Output("backupType")]
        public Output<string> BackupType { get; private set; } = null!;

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;


        /// <summary>
        /// Create a Backup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Backup(string name, BackupArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vedb_mysql/backup:Backup", name, args ?? new BackupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Backup(string name, Input<string> id, BackupState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vedb_mysql/backup:Backup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Backup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Backup Get(string name, Input<string> id, BackupState? state = null, CustomResourceOptions? options = null)
        {
            return new Backup(name, id, state, options);
        }
    }

    public sealed class BackupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Backup method. Currently, only physical backup is supported. The value is Physical.
        /// </summary>
        [Input("backupMethod")]
        public Input<string>? BackupMethod { get; set; }

        /// <summary>
        /// Data backup strategy for instances.
        /// </summary>
        [Input("backupPolicy")]
        public Input<Inputs.BackupBackupPolicyArgs>? BackupPolicy { get; set; }

        /// <summary>
        /// Backup type. Currently, only full backup is supported. The value is Full.
        /// </summary>
        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        public BackupArgs()
        {
        }
        public static new BackupArgs Empty => new BackupArgs();
    }

    public sealed class BackupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the backup.
        /// </summary>
        [Input("backupId")]
        public Input<string>? BackupId { get; set; }

        /// <summary>
        /// Backup method. Currently, only physical backup is supported. The value is Physical.
        /// </summary>
        [Input("backupMethod")]
        public Input<string>? BackupMethod { get; set; }

        /// <summary>
        /// Data backup strategy for instances.
        /// </summary>
        [Input("backupPolicy")]
        public Input<Inputs.BackupBackupPolicyGetArgs>? BackupPolicy { get; set; }

        /// <summary>
        /// Backup type. Currently, only full backup is supported. The value is Full.
        /// </summary>
        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        public BackupState()
        {
        }
        public static new BackupState Empty => new BackupState();
    }
}
