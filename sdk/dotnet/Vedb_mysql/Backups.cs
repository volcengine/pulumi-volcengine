// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vedb_mysql
{
    public static class Backups
    {
        /// <summary>
        /// Use this data source to query detailed information of vedb mysql backups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[2]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Vedb_mysql.Instance("fooInstance", new()
        ///     {
        ///         ChargeType = "PostPaid",
        ///         StorageChargeType = "PostPaid",
        ///         DbEngineVersion = "MySQL_8_0",
        ///         DbMinorVersion = "3.0",
        ///         NodeNumber = 2,
        ///         NodeSpec = "vedb.mysql.x4.large",
        ///         SubnetId = fooSubnet.Id,
        ///         InstanceName = "tf-test",
        ///         ProjectName = "testA",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "tftest",
        ///                 Value = "tftest",
        ///             },
        ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "tftest2",
        ///                 Value = "tftest2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooBackup = new Volcengine.Vedb_mysql.Backup("fooBackup", new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         BackupPolicy = new Volcengine.Vedb_mysql.Inputs.BackupBackupPolicyArgs
        ///         {
        ///             BackupTime = "18:00Z-20:00Z",
        ///             FullBackupPeriod = "Monday,Tuesday,Wednesday",
        ///             BackupRetentionPeriod = 8,
        ///         },
        ///     });
        /// 
        ///     var fooBackups = Volcengine.Vedb_mysql.Backups.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<BackupsResult> InvokeAsync(BackupsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<BackupsResult>("volcengine:vedb_mysql/backups:Backups", args ?? new BackupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vedb mysql backups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[2]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Vedb_mysql.Instance("fooInstance", new()
        ///     {
        ///         ChargeType = "PostPaid",
        ///         StorageChargeType = "PostPaid",
        ///         DbEngineVersion = "MySQL_8_0",
        ///         DbMinorVersion = "3.0",
        ///         NodeNumber = 2,
        ///         NodeSpec = "vedb.mysql.x4.large",
        ///         SubnetId = fooSubnet.Id,
        ///         InstanceName = "tf-test",
        ///         ProjectName = "testA",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "tftest",
        ///                 Value = "tftest",
        ///             },
        ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "tftest2",
        ///                 Value = "tftest2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooBackup = new Volcengine.Vedb_mysql.Backup("fooBackup", new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         BackupPolicy = new Volcengine.Vedb_mysql.Inputs.BackupBackupPolicyArgs
        ///         {
        ///             BackupTime = "18:00Z-20:00Z",
        ///             FullBackupPeriod = "Monday,Tuesday,Wednesday",
        ///             BackupRetentionPeriod = 8,
        ///         },
        ///     });
        /// 
        ///     var fooBackups = Volcengine.Vedb_mysql.Backups.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<BackupsResult> Invoke(BackupsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<BackupsResult>("volcengine:vedb_mysql/backups:Backups", args ?? new BackupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class BackupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The end time of the backup.
        /// </summary>
        [Input("backupEndTime")]
        public string? BackupEndTime { get; set; }

        /// <summary>
        /// Backup method. Currently, only physical backup is supported. The value is Physical.
        /// </summary>
        [Input("backupMethod")]
        public string? BackupMethod { get; set; }

        /// <summary>
        /// The start time of the backup.
        /// </summary>
        [Input("backupStartTime")]
        public string? BackupStartTime { get; set; }

        /// <summary>
        /// The status of the backup.
        /// </summary>
        [Input("backupStatus")]
        public string? BackupStatus { get; set; }

        /// <summary>
        /// The type of the backup.
        /// </summary>
        [Input("backupType")]
        public string? BackupType { get; set; }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public BackupsArgs()
        {
        }
        public static new BackupsArgs Empty => new BackupsArgs();
    }

    public sealed class BackupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The end time of the backup.
        /// </summary>
        [Input("backupEndTime")]
        public Input<string>? BackupEndTime { get; set; }

        /// <summary>
        /// Backup method. Currently, only physical backup is supported. The value is Physical.
        /// </summary>
        [Input("backupMethod")]
        public Input<string>? BackupMethod { get; set; }

        /// <summary>
        /// The start time of the backup.
        /// </summary>
        [Input("backupStartTime")]
        public Input<string>? BackupStartTime { get; set; }

        /// <summary>
        /// The status of the backup.
        /// </summary>
        [Input("backupStatus")]
        public Input<string>? BackupStatus { get; set; }

        /// <summary>
        /// The type of the backup.
        /// </summary>
        [Input("backupType")]
        public Input<string>? BackupType { get; set; }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public BackupsInvokeArgs()
        {
        }
        public static new BackupsInvokeArgs Empty => new BackupsInvokeArgs();
    }


    [OutputType]
    public sealed class BackupsResult
    {
        /// <summary>
        /// The end time of the backup.
        /// </summary>
        public readonly string? BackupEndTime;
        /// <summary>
        /// The name of the backup method.
        /// </summary>
        public readonly string? BackupMethod;
        /// <summary>
        /// The start time of the backup.
        /// </summary>
        public readonly string? BackupStartTime;
        /// <summary>
        /// The status of the backup.
        /// </summary>
        public readonly string? BackupStatus;
        /// <summary>
        /// The type of the backup.
        /// </summary>
        public readonly string? BackupType;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.BackupsBackupResult> Backups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The id of the instance.
        /// </summary>
        public readonly string InstanceId;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private BackupsResult(
            string? backupEndTime,

            string? backupMethod,

            string? backupStartTime,

            string? backupStatus,

            string? backupType,

            ImmutableArray<Outputs.BackupsBackupResult> backups,

            string id,

            string instanceId,

            string? outputFile,

            int totalCount)
        {
            BackupEndTime = backupEndTime;
            BackupMethod = backupMethod;
            BackupStartTime = backupStartTime;
            BackupStatus = backupStatus;
            BackupType = backupType;
            Backups = backups;
            Id = id;
            InstanceId = instanceId;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
