// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vedb_mysql
{
    public static class Endpoints
    {
        /// <summary>
        /// Use this data source to query detailed information of vedb mysql endpoints
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[2]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Vedb_mysql.Instance("fooInstance", new()
        ///     {
        ///         ChargeType = "PostPaid",
        ///         StorageChargeType = "PostPaid",
        ///         DbEngineVersion = "MySQL_8_0",
        ///         DbMinorVersion = "3.0",
        ///         NodeNumber = 2,
        ///         NodeSpec = "vedb.mysql.x4.large",
        ///         SubnetId = fooSubnet.Id,
        ///         InstanceName = "tf-test",
        ///         ProjectName = "testA",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "tftest",
        ///                 Value = "tftest",
        ///             },
        ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "tftest2",
        ///                 Value = "tftest2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooInstances = Volcengine.Vedb_mysql.Instances.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        ///     var fooEndpoint = new Volcengine.Vedb_mysql.Endpoint("fooEndpoint", new()
        ///     {
        ///         EndpointType = "Custom",
        ///         InstanceId = fooInstance.Id,
        ///         NodeIds = new[]
        ///         {
        ///             fooInstances.Apply(instancesResult =&gt; instancesResult.Instances[0]?.Nodes[0]?.NodeId),
        ///             fooInstances.Apply(instancesResult =&gt; instancesResult.Instances[0]?.Nodes[1]?.NodeId),
        ///         },
        ///         ReadWriteMode = "ReadWrite",
        ///         EndpointName = "tf-test",
        ///         Description = "tf test",
        ///         MasterAcceptReadRequests = true,
        ///         DistributedTransaction = true,
        ///         ConsistLevel = "Session",
        ///         ConsistTimeout = 100000,
        ///         ConsistTimeoutAction = "ReadMaster",
        ///     });
        /// 
        ///     var fooEndpoints = Volcengine.Vedb_mysql.Endpoints.Invoke(new()
        ///     {
        ///         EndpointId = fooEndpoint.EndpointId,
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<EndpointsResult> InvokeAsync(EndpointsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<EndpointsResult>("volcengine:vedb_mysql/endpoints:Endpoints", args ?? new EndpointsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vedb mysql endpoints
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[2]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Vedb_mysql.Instance("fooInstance", new()
        ///     {
        ///         ChargeType = "PostPaid",
        ///         StorageChargeType = "PostPaid",
        ///         DbEngineVersion = "MySQL_8_0",
        ///         DbMinorVersion = "3.0",
        ///         NodeNumber = 2,
        ///         NodeSpec = "vedb.mysql.x4.large",
        ///         SubnetId = fooSubnet.Id,
        ///         InstanceName = "tf-test",
        ///         ProjectName = "testA",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "tftest",
        ///                 Value = "tftest",
        ///             },
        ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "tftest2",
        ///                 Value = "tftest2",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooInstances = Volcengine.Vedb_mysql.Instances.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        ///     var fooEndpoint = new Volcengine.Vedb_mysql.Endpoint("fooEndpoint", new()
        ///     {
        ///         EndpointType = "Custom",
        ///         InstanceId = fooInstance.Id,
        ///         NodeIds = new[]
        ///         {
        ///             fooInstances.Apply(instancesResult =&gt; instancesResult.Instances[0]?.Nodes[0]?.NodeId),
        ///             fooInstances.Apply(instancesResult =&gt; instancesResult.Instances[0]?.Nodes[1]?.NodeId),
        ///         },
        ///         ReadWriteMode = "ReadWrite",
        ///         EndpointName = "tf-test",
        ///         Description = "tf test",
        ///         MasterAcceptReadRequests = true,
        ///         DistributedTransaction = true,
        ///         ConsistLevel = "Session",
        ///         ConsistTimeout = 100000,
        ///         ConsistTimeoutAction = "ReadMaster",
        ///     });
        /// 
        ///     var fooEndpoints = Volcengine.Vedb_mysql.Endpoints.Invoke(new()
        ///     {
        ///         EndpointId = fooEndpoint.EndpointId,
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<EndpointsResult> Invoke(EndpointsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<EndpointsResult>("volcengine:vedb_mysql/endpoints:Endpoints", args ?? new EndpointsInvokeArgs(), options.WithDefaults());
    }


    public sealed class EndpointsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the endpoint.
        /// </summary>
        [Input("endpointId")]
        public string? EndpointId { get; set; }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public EndpointsArgs()
        {
        }
        public static new EndpointsArgs Empty => new EndpointsArgs();
    }

    public sealed class EndpointsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the endpoint.
        /// </summary>
        [Input("endpointId")]
        public Input<string>? EndpointId { get; set; }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public EndpointsInvokeArgs()
        {
        }
        public static new EndpointsInvokeArgs Empty => new EndpointsInvokeArgs();
    }


    [OutputType]
    public sealed class EndpointsResult
    {
        /// <summary>
        /// The id of the endpoint.
        /// </summary>
        public readonly string? EndpointId;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.EndpointsEndpointResult> Endpoints;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private EndpointsResult(
            string? endpointId,

            ImmutableArray<Outputs.EndpointsEndpointResult> endpoints,

            string id,

            string instanceId,

            string? nameRegex,

            string? outputFile,

            int totalCount)
        {
            EndpointId = endpointId;
            Endpoints = endpoints;
            Id = id;
            InstanceId = instanceId;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
