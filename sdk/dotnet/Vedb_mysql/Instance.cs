// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vedb_mysql
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[2]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Vedb_mysql.Instance("fooInstance", new()
    ///     {
    ///         ChargeType = "PostPaid",
    ///         StorageChargeType = "PostPaid",
    ///         DbEngineVersion = "MySQL_8_0",
    ///         DbMinorVersion = "3.0",
    ///         NodeNumber = 2,
    ///         NodeSpec = "vedb.mysql.x4.large",
    ///         SubnetId = fooSubnet.Id,
    ///         InstanceName = "tf-test",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "tftest",
    ///                 Value = "tftest",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VedbMysqlInstance can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vedb_mysql/instance:Instance default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vedb_mysql/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to automatically renew under the prepaid scenario. Values:
        /// true: Automatically renew.
        /// false: Do not automatically renew.
        /// Description:
        /// When the value of ChargeType (billing type) is PrePaid (monthly/yearly package), this parameter is required.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// Calculate the billing type. When calculating the billing type during instance creation, the possible values are as follows:
        /// PostPaid: Pay-as-you-go (postpaid).
        /// PrePaid: Monthly or yearly subscription (prepaid).
        /// </summary>
        [Output("chargeType")]
        public Output<string> ChargeType { get; private set; } = null!;

        /// <summary>
        /// Database engine version, with a fixed value of MySQL_8_0.
        /// </summary>
        [Output("dbEngineVersion")]
        public Output<string> DbEngineVersion { get; private set; } = null!;

        /// <summary>
        /// veDB MySQL minor version. For detailed instructions on version numbers, please refer to Version Number Management.
        /// 3.0 (default): veDB MySQL stable version, 100% compatible with MySQL 8.0.
        /// 3.1: Natively supports HTAP application scenarios and accelerates complex queries.
        /// 3.2: Natively supports HTAP application scenarios and accelerates complex queries. In addition, it has built-in cold data archiving capabilities. It can archive data with low-frequency access to object storage TOS to reduce storage costs.
        /// </summary>
        [Output("dbMinorVersion")]
        public Output<string?> DbMinorVersion { get; private set; } = null!;

        /// <summary>
        /// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("dbTimeZone")]
        public Output<string> DbTimeZone { get; private set; } = null!;

        /// <summary>
        /// Instance name. Naming rules:
        /// It cannot start with a number or a hyphen (-).
        /// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        /// The length must be within 1 to 128 characters.
        /// Description
        /// If the instance name is not filled in, the instance ID will be used as the instance name.
        /// When creating instances in batches, if an instance name is passed in, a serial number will be automatically added after the instance name.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// Whether table names are case-sensitive. The default value is 1. Value range:
        /// 0: Table names are case-sensitive. The backend stores them according to the actual table name.
        /// 1: (default) Table names are not case-sensitive. The backend stores them by converting table names to lowercase letters.
        /// Description:
        /// This rule cannot be modified after creating an instance. Please set it reasonably according to business requirements.
        /// </summary>
        [Output("lowerCaseTableNames")]
        public Output<string> LowerCaseTableNames { get; private set; } = null!;

        /// <summary>
        /// Number of instance nodes. The value range is from 2 to 16.
        /// </summary>
        [Output("nodeNumber")]
        public Output<int> NodeNumber { get; private set; } = null!;

        /// <summary>
        /// Node specification code of an instance.
        /// </summary>
        [Output("nodeSpec")]
        public Output<string> NodeSpec { get; private set; } = null!;

        /// <summary>
        /// Purchase duration in prepaid scenarios.
        /// Description:
        /// When the value of ChargeType (computing billing type) is PrePaid (monthly/yearly package), this parameter is required.
        /// </summary>
        [Output("period")]
        public Output<int> Period { get; private set; } = null!;

        /// <summary>
        /// Purchase cycle in prepaid scenarios.
        /// Month: Monthly package.
        /// Year: Annual package.
        /// Description:
        /// When the value of ChargeType (computing billing type) is PrePaid (monthly or annual package), this parameter is required.
        /// </summary>
        [Output("periodUnit")]
        public Output<string> PeriodUnit { get; private set; } = null!;

        /// <summary>
        /// Specify the private network port number for the connection terminal created by default for the instance. The default value is 3306, and the value range is 1000 to 65534.
        /// Note:
        /// This configuration item is only effective for the primary node terminal, default terminal, and HTAP cluster terminal. That is, after the instance is created successfully, for the newly created custom terminal, the port number is still 3306 by default.
        /// After the instance is created successfully, you can also modify the port number at any time. Currently, only modification through the console is supported.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Storage size in prepaid scenarios.
        /// Description: When the value of StorageChargeType (storage billing type) is PrePaid (monthly/yearly prepaid), this parameter is required.
        /// </summary>
        [Output("prePaidStorageInGb")]
        public Output<int> PrePaidStorageInGb { get; private set; } = null!;

        /// <summary>
        /// Project name of the instance. When this parameter is left blank, the newly created instance is added to the default project by default.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// Storage billing type. When this parameter is not passed, the storage billing type defaults to be the same as the computing billing type. The values are as follows:
        /// PostPaid: Pay-as-you-go (postpaid).
        /// PrePaid: Monthly or yearly subscription (prepaid).
        /// Note
        /// When the computing billing type is PostPaid, the storage billing type can only be PostPaid.
        /// When the computing billing type is PrePaid, the storage billing type can be PrePaid or PostPaid.
        /// </summary>
        [Output("storageChargeType")]
        public Output<string> StorageChargeType { get; private set; } = null!;

        /// <summary>
        /// Subnet ID of the veDB Mysql instance.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.InstanceTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vedb_mysql/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vedb_mysql/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to automatically renew under the prepaid scenario. Values:
        /// true: Automatically renew.
        /// false: Do not automatically renew.
        /// Description:
        /// When the value of ChargeType (billing type) is PrePaid (monthly/yearly package), this parameter is required.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// Calculate the billing type. When calculating the billing type during instance creation, the possible values are as follows:
        /// PostPaid: Pay-as-you-go (postpaid).
        /// PrePaid: Monthly or yearly subscription (prepaid).
        /// </summary>
        [Input("chargeType", required: true)]
        public Input<string> ChargeType { get; set; } = null!;

        /// <summary>
        /// Database engine version, with a fixed value of MySQL_8_0.
        /// </summary>
        [Input("dbEngineVersion", required: true)]
        public Input<string> DbEngineVersion { get; set; } = null!;

        /// <summary>
        /// veDB MySQL minor version. For detailed instructions on version numbers, please refer to Version Number Management.
        /// 3.0 (default): veDB MySQL stable version, 100% compatible with MySQL 8.0.
        /// 3.1: Natively supports HTAP application scenarios and accelerates complex queries.
        /// 3.2: Natively supports HTAP application scenarios and accelerates complex queries. In addition, it has built-in cold data archiving capabilities. It can archive data with low-frequency access to object storage TOS to reduce storage costs.
        /// </summary>
        [Input("dbMinorVersion")]
        public Input<string>? DbMinorVersion { get; set; }

        /// <summary>
        /// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dbTimeZone")]
        public Input<string>? DbTimeZone { get; set; }

        /// <summary>
        /// Instance name. Naming rules:
        /// It cannot start with a number or a hyphen (-).
        /// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        /// The length must be within 1 to 128 characters.
        /// Description
        /// If the instance name is not filled in, the instance ID will be used as the instance name.
        /// When creating instances in batches, if an instance name is passed in, a serial number will be automatically added after the instance name.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// Whether table names are case-sensitive. The default value is 1. Value range:
        /// 0: Table names are case-sensitive. The backend stores them according to the actual table name.
        /// 1: (default) Table names are not case-sensitive. The backend stores them by converting table names to lowercase letters.
        /// Description:
        /// This rule cannot be modified after creating an instance. Please set it reasonably according to business requirements.
        /// </summary>
        [Input("lowerCaseTableNames")]
        public Input<string>? LowerCaseTableNames { get; set; }

        /// <summary>
        /// Number of instance nodes. The value range is from 2 to 16.
        /// </summary>
        [Input("nodeNumber", required: true)]
        public Input<int> NodeNumber { get; set; } = null!;

        /// <summary>
        /// Node specification code of an instance.
        /// </summary>
        [Input("nodeSpec", required: true)]
        public Input<string> NodeSpec { get; set; } = null!;

        /// <summary>
        /// Purchase duration in prepaid scenarios.
        /// Description:
        /// When the value of ChargeType (computing billing type) is PrePaid (monthly/yearly package), this parameter is required.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Purchase cycle in prepaid scenarios.
        /// Month: Monthly package.
        /// Year: Annual package.
        /// Description:
        /// When the value of ChargeType (computing billing type) is PrePaid (monthly or annual package), this parameter is required.
        /// </summary>
        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// Specify the private network port number for the connection terminal created by default for the instance. The default value is 3306, and the value range is 1000 to 65534.
        /// Note:
        /// This configuration item is only effective for the primary node terminal, default terminal, and HTAP cluster terminal. That is, after the instance is created successfully, for the newly created custom terminal, the port number is still 3306 by default.
        /// After the instance is created successfully, you can also modify the port number at any time. Currently, only modification through the console is supported.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Storage size in prepaid scenarios.
        /// Description: When the value of StorageChargeType (storage billing type) is PrePaid (monthly/yearly prepaid), this parameter is required.
        /// </summary>
        [Input("prePaidStorageInGb")]
        public Input<int>? PrePaidStorageInGb { get; set; }

        /// <summary>
        /// Project name of the instance. When this parameter is left blank, the newly created instance is added to the default project by default.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Storage billing type. When this parameter is not passed, the storage billing type defaults to be the same as the computing billing type. The values are as follows:
        /// PostPaid: Pay-as-you-go (postpaid).
        /// PrePaid: Monthly or yearly subscription (prepaid).
        /// Note
        /// When the computing billing type is PostPaid, the storage billing type can only be PostPaid.
        /// When the computing billing type is PrePaid, the storage billing type can be PrePaid or PostPaid.
        /// </summary>
        [Input("storageChargeType")]
        public Input<string>? StorageChargeType { get; set; }

        /// <summary>
        /// Subnet ID of the veDB Mysql instance.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.InstanceTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagArgs>());
            set => _tags = value;
        }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to automatically renew under the prepaid scenario. Values:
        /// true: Automatically renew.
        /// false: Do not automatically renew.
        /// Description:
        /// When the value of ChargeType (billing type) is PrePaid (monthly/yearly package), this parameter is required.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// Calculate the billing type. When calculating the billing type during instance creation, the possible values are as follows:
        /// PostPaid: Pay-as-you-go (postpaid).
        /// PrePaid: Monthly or yearly subscription (prepaid).
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// Database engine version, with a fixed value of MySQL_8_0.
        /// </summary>
        [Input("dbEngineVersion")]
        public Input<string>? DbEngineVersion { get; set; }

        /// <summary>
        /// veDB MySQL minor version. For detailed instructions on version numbers, please refer to Version Number Management.
        /// 3.0 (default): veDB MySQL stable version, 100% compatible with MySQL 8.0.
        /// 3.1: Natively supports HTAP application scenarios and accelerates complex queries.
        /// 3.2: Natively supports HTAP application scenarios and accelerates complex queries. In addition, it has built-in cold data archiving capabilities. It can archive data with low-frequency access to object storage TOS to reduce storage costs.
        /// </summary>
        [Input("dbMinorVersion")]
        public Input<string>? DbMinorVersion { get; set; }

        /// <summary>
        /// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dbTimeZone")]
        public Input<string>? DbTimeZone { get; set; }

        /// <summary>
        /// Instance name. Naming rules:
        /// It cannot start with a number or a hyphen (-).
        /// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        /// The length must be within 1 to 128 characters.
        /// Description
        /// If the instance name is not filled in, the instance ID will be used as the instance name.
        /// When creating instances in batches, if an instance name is passed in, a serial number will be automatically added after the instance name.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// Whether table names are case-sensitive. The default value is 1. Value range:
        /// 0: Table names are case-sensitive. The backend stores them according to the actual table name.
        /// 1: (default) Table names are not case-sensitive. The backend stores them by converting table names to lowercase letters.
        /// Description:
        /// This rule cannot be modified after creating an instance. Please set it reasonably according to business requirements.
        /// </summary>
        [Input("lowerCaseTableNames")]
        public Input<string>? LowerCaseTableNames { get; set; }

        /// <summary>
        /// Number of instance nodes. The value range is from 2 to 16.
        /// </summary>
        [Input("nodeNumber")]
        public Input<int>? NodeNumber { get; set; }

        /// <summary>
        /// Node specification code of an instance.
        /// </summary>
        [Input("nodeSpec")]
        public Input<string>? NodeSpec { get; set; }

        /// <summary>
        /// Purchase duration in prepaid scenarios.
        /// Description:
        /// When the value of ChargeType (computing billing type) is PrePaid (monthly/yearly package), this parameter is required.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Purchase cycle in prepaid scenarios.
        /// Month: Monthly package.
        /// Year: Annual package.
        /// Description:
        /// When the value of ChargeType (computing billing type) is PrePaid (monthly or annual package), this parameter is required.
        /// </summary>
        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// Specify the private network port number for the connection terminal created by default for the instance. The default value is 3306, and the value range is 1000 to 65534.
        /// Note:
        /// This configuration item is only effective for the primary node terminal, default terminal, and HTAP cluster terminal. That is, after the instance is created successfully, for the newly created custom terminal, the port number is still 3306 by default.
        /// After the instance is created successfully, you can also modify the port number at any time. Currently, only modification through the console is supported.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Storage size in prepaid scenarios.
        /// Description: When the value of StorageChargeType (storage billing type) is PrePaid (monthly/yearly prepaid), this parameter is required.
        /// </summary>
        [Input("prePaidStorageInGb")]
        public Input<int>? PrePaidStorageInGb { get; set; }

        /// <summary>
        /// Project name of the instance. When this parameter is left blank, the newly created instance is added to the default project by default.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Storage billing type. When this parameter is not passed, the storage billing type defaults to be the same as the computing billing type. The values are as follows:
        /// PostPaid: Pay-as-you-go (postpaid).
        /// PrePaid: Monthly or yearly subscription (prepaid).
        /// Note
        /// When the computing billing type is PostPaid, the storage billing type can only be PostPaid.
        /// When the computing billing type is PrePaid, the storage billing type can be PrePaid or PostPaid.
        /// </summary>
        [Input("storageChargeType")]
        public Input<string>? StorageChargeType { get; set; }

        /// <summary>
        /// Subnet ID of the veDB Mysql instance.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Inputs.InstanceTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagGetArgs>());
            set => _tags = value;
        }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
