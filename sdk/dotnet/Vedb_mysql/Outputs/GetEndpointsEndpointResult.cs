// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vedb_mysql.Outputs
{

    [OutputType]
    public sealed class GetEndpointsEndpointResult
    {
        /// <summary>
        /// The address information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEndpointsEndpointAddressResult> Addresses;
        /// <summary>
        /// Set whether newly created read-only nodes will automatically join this connection endpoint. Values:
        /// true: Automatically join.
        /// false: Do not automatically join (default).
        /// </summary>
        public readonly bool AutoAddNewNodes;
        /// <summary>
        /// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
        /// Eventual: eventual consistency.
        /// Session: session consistency.
        /// Global: global consistency.
        /// Description
        /// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
        /// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        /// </summary>
        public readonly string ConsistLevel;
        /// <summary>
        /// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
        /// Explanation
        /// This parameter takes effect only when the value of ConsistLevel is Global or Session.
        /// </summary>
        public readonly int ConsistTimeout;
        /// <summary>
        /// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
        /// ReturnError: Return SQL error (wait replication complete timeout, please retry).
        /// ReadMaster: Send a request to the master node (default).
        /// Description
        /// This parameter takes effect only when the value of ConsistLevel is Global or Session.
        /// </summary>
        public readonly string ConsistTimeoutAction;
        /// <summary>
        /// Description information for connecting endpoint. The length cannot exceed 200 characters.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
        /// true: Enabled (default).
        /// false: Disabled.
        /// Description
        /// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        /// </summary>
        public readonly bool DistributedTransaction;
        /// <summary>
        /// The id of the endpoint.
        /// </summary>
        public readonly string EndpointId;
        /// <summary>
        /// Connect the endpoint name. The setting rules are as follows:
        /// It cannot start with a number or a hyphen (-).
        /// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        /// The length is 1 to 64 characters.
        /// </summary>
        public readonly string EndpointName;
        /// <summary>
        /// Connect terminal type. The value is fixed as Custom, indicating a custom terminal.
        /// </summary>
        public readonly string EndpointType;
        /// <summary>
        /// The id of the endpoint.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The master node accepts read requests. Value range:
        /// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
        /// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
        /// Description
        /// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        /// </summary>
        public readonly bool MasterAcceptReadRequests;
        /// <summary>
        /// Connect the node IDs associated with the endpoint.The filling rules are as follows:
        /// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
        /// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        /// </summary>
        public readonly ImmutableArray<string> NodeIds;
        /// <summary>
        /// Endpoint read-write mode. Values:
        /// ReadWrite: Read and write terminal.
        /// ReadOnly: Read-only terminal (default).
        /// </summary>
        public readonly string ReadWriteMode;

        [OutputConstructor]
        private GetEndpointsEndpointResult(
            ImmutableArray<Outputs.GetEndpointsEndpointAddressResult> addresses,

            bool autoAddNewNodes,

            string consistLevel,

            int consistTimeout,

            string consistTimeoutAction,

            string description,

            bool distributedTransaction,

            string endpointId,

            string endpointName,

            string endpointType,

            string id,

            bool masterAcceptReadRequests,

            ImmutableArray<string> nodeIds,

            string readWriteMode)
        {
            Addresses = addresses;
            AutoAddNewNodes = autoAddNewNodes;
            ConsistLevel = consistLevel;
            ConsistTimeout = consistTimeout;
            ConsistTimeoutAction = consistTimeoutAction;
            Description = description;
            DistributedTransaction = distributedTransaction;
            EndpointId = endpointId;
            EndpointName = endpointName;
            EndpointType = endpointType;
            Id = id;
            MasterAcceptReadRequests = masterAcceptReadRequests;
            NodeIds = nodeIds;
            ReadWriteMode = readWriteMode;
        }
    }
}
