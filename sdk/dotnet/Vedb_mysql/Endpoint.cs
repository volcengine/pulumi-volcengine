// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vedb_mysql
{
    /// <summary>
    /// Provides a resource to manage vedb mysql endpoint
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[2]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Vedb_mysql.Instance("fooInstance", new()
    ///     {
    ///         ChargeType = "PostPaid",
    ///         StorageChargeType = "PostPaid",
    ///         DbEngineVersion = "MySQL_8_0",
    ///         DbMinorVersion = "3.0",
    ///         NodeNumber = 2,
    ///         NodeSpec = "vedb.mysql.x4.large",
    ///         SubnetId = fooSubnet.Id,
    ///         InstanceName = "tf-test",
    ///         ProjectName = "testA",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "tftest",
    ///                 Value = "tftest",
    ///             },
    ///             new Volcengine.Vedb_mysql.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "tftest2",
    ///                 Value = "tftest2",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooInstances = Volcengine.Vedb_mysql.Instances.Invoke(new()
    ///     {
    ///         InstanceId = fooInstance.Id,
    ///     });
    /// 
    ///     var fooEndpoint = new Volcengine.Vedb_mysql.Endpoint("fooEndpoint", new()
    ///     {
    ///         EndpointType = "Custom",
    ///         InstanceId = fooInstance.Id,
    ///         NodeIds = new[]
    ///         {
    ///             fooInstances.Apply(instancesResult =&gt; instancesResult.Instances[0]?.Nodes[0]?.NodeId),
    ///             fooInstances.Apply(instancesResult =&gt; instancesResult.Instances[0]?.Nodes[1]?.NodeId),
    ///         },
    ///         ReadWriteMode = "ReadWrite",
    ///         EndpointName = "tf-test",
    ///         Description = "tf test",
    ///         MasterAcceptReadRequests = true,
    ///         DistributedTransaction = true,
    ///         ConsistLevel = "Session",
    ///         ConsistTimeout = 100000,
    ///         ConsistTimeoutAction = "ReadMaster",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VedbMysqlEndpoint can be imported using the instance id:endpoint id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vedb_mysql/endpoint:Endpoint default vedbm-iqnh3a7z****:vedbm-2pf2xk5v****-Custom-50yv
    /// ```
    /// Note: The master node endpoint only supports modifying the EndpointName and Description parameters. If values are passed in for other parameters, these values will be ignored without generating an error.
    /// The default endpoint does not support modifying the ReadWriteMode, AutoAddNewNodes, and Nodes parameters. If values are passed in for these parameters, these values will be ignored without generating an error.
    /// </summary>
    [VolcengineResourceType("volcengine:vedb_mysql/endpoint:Endpoint")]
    public partial class Endpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
        /// Eventual: eventual consistency.
        /// Session: session consistency.
        /// Global: global consistency.
        /// Description
        /// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
        /// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        /// </summary>
        [Output("consistLevel")]
        public Output<string> ConsistLevel { get; private set; } = null!;

        /// <summary>
        /// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
        /// Explanation
        /// This parameter takes effect only when the value of ConsistLevel is Global or Session.
        /// </summary>
        [Output("consistTimeout")]
        public Output<int> ConsistTimeout { get; private set; } = null!;

        /// <summary>
        /// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
        /// ReturnError: Return SQL error (wait replication complete timeout, please retry).
        /// ReadMaster: Send a request to the master node (default).
        /// Description
        /// This parameter takes effect only when the value of ConsistLevel is Global or Session.
        /// </summary>
        [Output("consistTimeoutAction")]
        public Output<string> ConsistTimeoutAction { get; private set; } = null!;

        /// <summary>
        /// Description information for connecting endpoint. The length cannot exceed 200 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
        /// true: Enabled (default).
        /// false: Disabled.
        /// Description
        /// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        /// </summary>
        [Output("distributedTransaction")]
        public Output<bool?> DistributedTransaction { get; private set; } = null!;

        /// <summary>
        /// The id of the endpoint.
        /// </summary>
        [Output("endpointId")]
        public Output<string> EndpointId { get; private set; } = null!;

        /// <summary>
        /// Connect the endpoint name. The setting rules are as follows:
        /// It cannot start with a number or a hyphen (-).
        /// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        /// The length is 1 to 64 characters.
        /// </summary>
        [Output("endpointName")]
        public Output<string> EndpointName { get; private set; } = null!;

        /// <summary>
        /// Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        /// </summary>
        [Output("endpointType")]
        public Output<string> EndpointType { get; private set; } = null!;

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The master node accepts read requests. Value range:
        /// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
        /// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
        /// Description
        /// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        /// </summary>
        [Output("masterAcceptReadRequests")]
        public Output<bool?> MasterAcceptReadRequests { get; private set; } = null!;

        /// <summary>
        /// Connect the node IDs associated with the endpoint.The filling rules are as follows:
        /// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
        /// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        /// </summary>
        [Output("nodeIds")]
        public Output<ImmutableArray<string>> NodeIds { get; private set; } = null!;

        /// <summary>
        /// Endpoint read-write mode. Values:
        /// ReadWrite: Read and write endpoint.
        /// ReadOnly: Read-only endpoint (default).
        /// </summary>
        [Output("readWriteMode")]
        public Output<string> ReadWriteMode { get; private set; } = null!;


        /// <summary>
        /// Create a Endpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Endpoint(string name, EndpointArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vedb_mysql/endpoint:Endpoint", name, args ?? new EndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Endpoint(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vedb_mysql/endpoint:Endpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Endpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Endpoint Get(string name, Input<string> id, EndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new Endpoint(name, id, state, options);
        }
    }

    public sealed class EndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
        /// Eventual: eventual consistency.
        /// Session: session consistency.
        /// Global: global consistency.
        /// Description
        /// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
        /// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        /// </summary>
        [Input("consistLevel")]
        public Input<string>? ConsistLevel { get; set; }

        /// <summary>
        /// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
        /// Explanation
        /// This parameter takes effect only when the value of ConsistLevel is Global or Session.
        /// </summary>
        [Input("consistTimeout")]
        public Input<int>? ConsistTimeout { get; set; }

        /// <summary>
        /// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
        /// ReturnError: Return SQL error (wait replication complete timeout, please retry).
        /// ReadMaster: Send a request to the master node (default).
        /// Description
        /// This parameter takes effect only when the value of ConsistLevel is Global or Session.
        /// </summary>
        [Input("consistTimeoutAction")]
        public Input<string>? ConsistTimeoutAction { get; set; }

        /// <summary>
        /// Description information for connecting endpoint. The length cannot exceed 200 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
        /// true: Enabled (default).
        /// false: Disabled.
        /// Description
        /// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        /// </summary>
        [Input("distributedTransaction")]
        public Input<bool>? DistributedTransaction { get; set; }

        /// <summary>
        /// Connect the endpoint name. The setting rules are as follows:
        /// It cannot start with a number or a hyphen (-).
        /// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        /// The length is 1 to 64 characters.
        /// </summary>
        [Input("endpointName")]
        public Input<string>? EndpointName { get; set; }

        /// <summary>
        /// Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        /// </summary>
        [Input("endpointType", required: true)]
        public Input<string> EndpointType { get; set; } = null!;

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The master node accepts read requests. Value range:
        /// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
        /// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
        /// Description
        /// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        /// </summary>
        [Input("masterAcceptReadRequests")]
        public Input<bool>? MasterAcceptReadRequests { get; set; }

        [Input("nodeIds", required: true)]
        private InputList<string>? _nodeIds;

        /// <summary>
        /// Connect the node IDs associated with the endpoint.The filling rules are as follows:
        /// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
        /// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        /// </summary>
        public InputList<string> NodeIds
        {
            get => _nodeIds ?? (_nodeIds = new InputList<string>());
            set => _nodeIds = value;
        }

        /// <summary>
        /// Endpoint read-write mode. Values:
        /// ReadWrite: Read and write endpoint.
        /// ReadOnly: Read-only endpoint (default).
        /// </summary>
        [Input("readWriteMode")]
        public Input<string>? ReadWriteMode { get; set; }

        public EndpointArgs()
        {
        }
        public static new EndpointArgs Empty => new EndpointArgs();
    }

    public sealed class EndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Consistency level. For detailed introduction of consistency level, please refer to consistency level. Value range:
        /// Eventual: eventual consistency.
        /// Session: session consistency.
        /// Global: global consistency.
        /// Description
        /// When the value of ReadWriteMode is ReadWrite, the selectable consistency levels are Eventual, Session (default), and Global.
        /// When the value of ReadWriteMode is ReadOnly, the consistency level is Eventual by default and cannot be changed.
        /// </summary>
        [Input("consistLevel")]
        public Input<string>? ConsistLevel { get; set; }

        /// <summary>
        /// When there is a large delay, the timeout period for read-only nodes to synchronize the latest data, in us. The value range is from 1us to 100000000us, and the default value is 10000us.
        /// Explanation
        /// This parameter takes effect only when the value of ConsistLevel is Global or Session.
        /// </summary>
        [Input("consistTimeout")]
        public Input<int>? ConsistTimeout { get; set; }

        /// <summary>
        /// Timeout policy after data synchronization timeout of read-only nodes supports the following two policies:
        /// ReturnError: Return SQL error (wait replication complete timeout, please retry).
        /// ReadMaster: Send a request to the master node (default).
        /// Description
        /// This parameter takes effect only when the value of ConsistLevel is Global or Session.
        /// </summary>
        [Input("consistTimeoutAction")]
        public Input<string>? ConsistTimeoutAction { get; set; }

        /// <summary>
        /// Description information for connecting endpoint. The length cannot exceed 200 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Set whether to enable transaction splitting. For detailed introduction to transaction splitting, please refer to transaction splitting. Value range:
        /// true: Enabled (default).
        /// false: Disabled.
        /// Description
        /// Only when the value of ReadWriteMode is ReadWrite, is enabling transaction splitting supported.
        /// </summary>
        [Input("distributedTransaction")]
        public Input<bool>? DistributedTransaction { get; set; }

        /// <summary>
        /// The id of the endpoint.
        /// </summary>
        [Input("endpointId")]
        public Input<string>? EndpointId { get; set; }

        /// <summary>
        /// Connect the endpoint name. The setting rules are as follows:
        /// It cannot start with a number or a hyphen (-).
        /// It can only contain Chinese characters, letters, numbers, underscores (_), and hyphens (-).
        /// The length is 1 to 64 characters.
        /// </summary>
        [Input("endpointName")]
        public Input<string>? EndpointName { get; set; }

        /// <summary>
        /// Connect endpoint type. The value is fixed as Custom, indicating a custom endpoint.
        /// </summary>
        [Input("endpointType")]
        public Input<string>? EndpointType { get; set; }

        /// <summary>
        /// The id of the instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The master node accepts read requests. Value range:
        /// true: (default) After enabling the master node to accept read functions, non-transactional read requests will be sent to the master node or read-only nodes in a load-balanced mode according to the number of active requests.
        /// false: After disabling the master node from accepting read requests, at this time, the master node only accepts transactional read requests, and non-transactional read requests will not be sent to the master node.
        /// Description
        /// Only when the value of ReadWriteMode is ReadWrite, enabling the master node to accept reads is supported.
        /// </summary>
        [Input("masterAcceptReadRequests")]
        public Input<bool>? MasterAcceptReadRequests { get; set; }

        [Input("nodeIds")]
        private InputList<string>? _nodeIds;

        /// <summary>
        /// Connect the node IDs associated with the endpoint.The filling rules are as follows:
        /// When the value of ReadWriteMode is ReadWrite, at least two nodes must be passed in, and the master node must be passed in.
        /// When the value of ReadWriteMode is ReadOnly, one or more read-only nodes can be passed in.
        /// </summary>
        public InputList<string> NodeIds
        {
            get => _nodeIds ?? (_nodeIds = new InputList<string>());
            set => _nodeIds = value;
        }

        /// <summary>
        /// Endpoint read-write mode. Values:
        /// ReadWrite: Read and write endpoint.
        /// ReadOnly: Read-only endpoint (default).
        /// </summary>
        [Input("readWriteMode")]
        public Input<string>? ReadWriteMode { get; set; }

        public EndpointState()
        {
        }
        public static new EndpointState Empty => new EndpointState();
    }
}
