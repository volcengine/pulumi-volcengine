// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cr
{
    [Obsolete(@"volcengine.cr.Registries has been deprecated in favor of volcengine.cr.getRegistries")]
    public static class Registries
    {
        /// <summary>
        /// Use this data source to query detailed information of cr registries
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cr.GetRegistries.Invoke(new()
        ///     {
        ///         Statuses = new[]
        ///         {
        ///             new Volcengine.Cr.Inputs.GetRegistriesStatusInputArgs
        ///             {
        ///                 Condition = "Ok",
        ///                 Phase = "Running",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<RegistriesResult> InvokeAsync(RegistriesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<RegistriesResult>("volcengine:cr/registries:Registries", args ?? new RegistriesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cr registries
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cr.GetRegistries.Invoke(new()
        ///     {
        ///         Statuses = new[]
        ///         {
        ///             new Volcengine.Cr.Inputs.GetRegistriesStatusInputArgs
        ///             {
        ///                 Condition = "Ok",
        ///                 Phase = "Running",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<RegistriesResult> Invoke(RegistriesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<RegistriesResult>("volcengine:cr/registries:Registries", args ?? new RegistriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class RegistriesArgs : global::Pulumi.InvokeArgs
    {
        [Input("names")]
        private List<string>? _names;

        /// <summary>
        /// The list of registry names to query.
        /// </summary>
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("resourceTags")]
        private List<Inputs.RegistriesResourceTagArgs>? _resourceTags;

        /// <summary>
        /// The tags of cr registry.
        /// </summary>
        public List<Inputs.RegistriesResourceTagArgs> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new List<Inputs.RegistriesResourceTagArgs>());
            set => _resourceTags = value;
        }

        [Input("statuses")]
        private List<Inputs.RegistriesStatusArgs>? _statuses;

        /// <summary>
        /// The list of registry statuses.
        /// </summary>
        public List<Inputs.RegistriesStatusArgs> Statuses
        {
            get => _statuses ?? (_statuses = new List<Inputs.RegistriesStatusArgs>());
            set => _statuses = value;
        }

        [Input("types")]
        private List<string>? _types;

        /// <summary>
        /// The list of registry types to query.
        /// </summary>
        public List<string> Types
        {
            get => _types ?? (_types = new List<string>());
            set => _types = value;
        }

        public RegistriesArgs()
        {
        }
        public static new RegistriesArgs Empty => new RegistriesArgs();
    }

    public sealed class RegistriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("names")]
        private InputList<string>? _names;

        /// <summary>
        /// The list of registry names to query.
        /// </summary>
        public InputList<string> Names
        {
            get => _names ?? (_names = new InputList<string>());
            set => _names = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("resourceTags")]
        private InputList<Inputs.RegistriesResourceTagInputArgs>? _resourceTags;

        /// <summary>
        /// The tags of cr registry.
        /// </summary>
        public InputList<Inputs.RegistriesResourceTagInputArgs> ResourceTags
        {
            get => _resourceTags ?? (_resourceTags = new InputList<Inputs.RegistriesResourceTagInputArgs>());
            set => _resourceTags = value;
        }

        [Input("statuses")]
        private InputList<Inputs.RegistriesStatusInputArgs>? _statuses;

        /// <summary>
        /// The list of registry statuses.
        /// </summary>
        public InputList<Inputs.RegistriesStatusInputArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.RegistriesStatusInputArgs>());
            set => _statuses = value;
        }

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// The list of registry types to query.
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        public RegistriesInvokeArgs()
        {
        }
        public static new RegistriesInvokeArgs Empty => new RegistriesInvokeArgs();
    }


    [OutputType]
    public sealed class RegistriesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of registry query.
        /// </summary>
        public readonly ImmutableArray<Outputs.RegistriesRegistryResult> Registries;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.RegistriesResourceTagResult> ResourceTags;
        public readonly ImmutableArray<Outputs.RegistriesStatusResult> Statuses;
        /// <summary>
        /// The total count of registry query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> Types;

        [OutputConstructor]
        private RegistriesResult(
            string id,

            ImmutableArray<string> names,

            string? outputFile,

            ImmutableArray<Outputs.RegistriesRegistryResult> registries,

            ImmutableArray<Outputs.RegistriesResourceTagResult> resourceTags,

            ImmutableArray<Outputs.RegistriesStatusResult> statuses,

            int totalCount,

            ImmutableArray<string> types)
        {
            Id = id;
            Names = names;
            OutputFile = outputFile;
            Registries = registries;
            ResourceTags = resourceTags;
            Statuses = statuses;
            TotalCount = totalCount;
            Types = types;
        }
    }
}
