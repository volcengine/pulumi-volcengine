// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cr
{
    public static class GetVpcEndpoints
    {
        /// <summary>
        /// Use this data source to query detailed information of cr vpc endpoints
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Cr.GetVpcEndpoints.Invoke(new()
        ///     {
        ///         Registry = "enterprise-1",
        ///         Statuses = new[]
        ///         {
        ///             "Enabled",
        ///             "Enabling",
        ///             "Disabling",
        ///             "Failed",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpcEndpointsResult> InvokeAsync(GetVpcEndpointsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcEndpointsResult>("volcengine:cr/getVpcEndpoints:getVpcEndpoints", args ?? new GetVpcEndpointsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cr vpc endpoints
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Cr.GetVpcEndpoints.Invoke(new()
        ///     {
        ///         Registry = "enterprise-1",
        ///         Statuses = new[]
        ///         {
        ///             "Enabled",
        ///             "Enabling",
        ///             "Disabling",
        ///             "Failed",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcEndpointsResult> Invoke(GetVpcEndpointsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcEndpointsResult>("volcengine:cr/getVpcEndpoints:getVpcEndpoints", args ?? new GetVpcEndpointsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcEndpointsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The CR registry name.
        /// </summary>
        [Input("registry", required: true)]
        public string Registry { get; set; } = null!;

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// VPC access entry state array, used to filter out VPC access entries in the specified state. Available values are Enabling, Enabled, Disabling, Failed.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        public GetVpcEndpointsArgs()
        {
        }
        public static new GetVpcEndpointsArgs Empty => new GetVpcEndpointsArgs();
    }

    public sealed class GetVpcEndpointsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The CR registry name.
        /// </summary>
        [Input("registry", required: true)]
        public Input<string> Registry { get; set; } = null!;

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// VPC access entry state array, used to filter out VPC access entries in the specified state. Available values are Enabling, Enabled, Disabling, Failed.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        public GetVpcEndpointsInvokeArgs()
        {
        }
        public static new GetVpcEndpointsInvokeArgs Empty => new GetVpcEndpointsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcEndpointsResult
    {
        /// <summary>
        /// List of CR vpc endpoints.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcEndpointsEndpointResult> Endpoints;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The name of CR registry.
        /// </summary>
        public readonly string Registry;
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// The total count of CR vpc endpoints query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetVpcEndpointsResult(
            ImmutableArray<Outputs.GetVpcEndpointsEndpointResult> endpoints,

            string id,

            string? outputFile,

            string registry,

            ImmutableArray<string> statuses,

            int totalCount)
        {
            Endpoints = endpoints;
            Id = id;
            OutputFile = outputFile;
            Registry = registry;
            Statuses = statuses;
            TotalCount = totalCount;
        }
    }
}
