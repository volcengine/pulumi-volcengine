// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cdn
{
    /// <summary>
    /// Provides a resource to manage cdn shared config
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Cdn.SharedConfig("foo", new()
    ///     {
    ///         AllowIpAccessRule = new Volcengine.Cdn.Inputs.SharedConfigAllowIpAccessRuleArgs
    ///         {
    ///             Rules = new[]
    ///             {
    ///                 "1.1.1.1",
    ///                 "2.2.2.0/24",
    ///                 "3.3.3.3",
    ///             },
    ///         },
    ///         AllowRefererAccessRule = new Volcengine.Cdn.Inputs.SharedConfigAllowRefererAccessRuleArgs
    ///         {
    ///             CommonType = new Volcengine.Cdn.Inputs.SharedConfigAllowRefererAccessRuleCommonTypeArgs
    ///             {
    ///                 Rules = new[]
    ///                 {
    ///                     "1.1.1.1",
    ///                     "2.2.2.0/24",
    ///                     "3.3.4.4",
    ///                 },
    ///             },
    ///         },
    ///         CommonMatchList = new Volcengine.Cdn.Inputs.SharedConfigCommonMatchListArgs
    ///         {
    ///             CommonType = new Volcengine.Cdn.Inputs.SharedConfigCommonMatchListCommonTypeArgs
    ///             {
    ///                 Rules = new[]
    ///                 {
    ///                     "1.1.1.1",
    ///                     "2.2.2.0/24",
    ///                 },
    ///             },
    ///         },
    ///         ConfigName = "tftest",
    ///         ConfigType = "allow_referer_access_rule",
    ///         DenyIpAccessRule = new Volcengine.Cdn.Inputs.SharedConfigDenyIpAccessRuleArgs
    ///         {
    ///             Rules = new[]
    ///             {
    ///                 "1.1.1.1",
    ///                 "2.2.2.0/24",
    ///             },
    ///         },
    ///         DenyRefererAccessRule = new Volcengine.Cdn.Inputs.SharedConfigDenyRefererAccessRuleArgs
    ///         {
    ///             CommonType = new Volcengine.Cdn.Inputs.SharedConfigDenyRefererAccessRuleCommonTypeArgs
    ///             {
    ///                 Rules = new[]
    ///                 {
    ///                     "1.1.1.1",
    ///                     "2.2.2.0/24",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CdnSharedConfig can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:cdn/sharedConfig:SharedConfig default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:cdn/sharedConfig:SharedConfig")]
    public partial class SharedConfig : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        /// </summary>
        [Output("allowIpAccessRule")]
        public Output<Outputs.SharedConfigAllowIpAccessRule?> AllowIpAccessRule { get; private set; } = null!;

        /// <summary>
        /// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        /// </summary>
        [Output("allowRefererAccessRule")]
        public Output<Outputs.SharedConfigAllowRefererAccessRule?> AllowRefererAccessRule { get; private set; } = null!;

        /// <summary>
        /// The configuration for a common list is represented by ConfigType common_match_list.
        /// </summary>
        [Output("commonMatchList")]
        public Output<Outputs.SharedConfigCommonMatchList?> CommonMatchList { get; private set; } = null!;

        /// <summary>
        /// The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        /// </summary>
        [Output("configName")]
        public Output<string> ConfigName { get; private set; } = null!;

        /// <summary>
        /// The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        /// </summary>
        [Output("configType")]
        public Output<string> ConfigType { get; private set; } = null!;

        /// <summary>
        /// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        /// </summary>
        [Output("denyIpAccessRule")]
        public Output<Outputs.SharedConfigDenyIpAccessRule?> DenyIpAccessRule { get; private set; } = null!;

        /// <summary>
        /// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        /// </summary>
        [Output("denyRefererAccessRule")]
        public Output<Outputs.SharedConfigDenyRefererAccessRule?> DenyRefererAccessRule { get; private set; } = null!;

        /// <summary>
        /// The ProjectName of the cdn shared config.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;


        /// <summary>
        /// Create a SharedConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SharedConfig(string name, SharedConfigArgs args, CustomResourceOptions? options = null)
            : base("volcengine:cdn/sharedConfig:SharedConfig", name, args ?? new SharedConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SharedConfig(string name, Input<string> id, SharedConfigState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:cdn/sharedConfig:SharedConfig", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SharedConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SharedConfig Get(string name, Input<string> id, SharedConfigState? state = null, CustomResourceOptions? options = null)
        {
            return new SharedConfig(name, id, state, options);
        }
    }

    public sealed class SharedConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        /// </summary>
        [Input("allowIpAccessRule")]
        public Input<Inputs.SharedConfigAllowIpAccessRuleArgs>? AllowIpAccessRule { get; set; }

        /// <summary>
        /// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        /// </summary>
        [Input("allowRefererAccessRule")]
        public Input<Inputs.SharedConfigAllowRefererAccessRuleArgs>? AllowRefererAccessRule { get; set; }

        /// <summary>
        /// The configuration for a common list is represented by ConfigType common_match_list.
        /// </summary>
        [Input("commonMatchList")]
        public Input<Inputs.SharedConfigCommonMatchListArgs>? CommonMatchList { get; set; }

        /// <summary>
        /// The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        /// </summary>
        [Input("configName", required: true)]
        public Input<string> ConfigName { get; set; } = null!;

        /// <summary>
        /// The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        /// </summary>
        [Input("configType", required: true)]
        public Input<string> ConfigType { get; set; } = null!;

        /// <summary>
        /// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        /// </summary>
        [Input("denyIpAccessRule")]
        public Input<Inputs.SharedConfigDenyIpAccessRuleArgs>? DenyIpAccessRule { get; set; }

        /// <summary>
        /// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        /// </summary>
        [Input("denyRefererAccessRule")]
        public Input<Inputs.SharedConfigDenyRefererAccessRuleArgs>? DenyRefererAccessRule { get; set; }

        /// <summary>
        /// The ProjectName of the cdn shared config.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        public SharedConfigArgs()
        {
        }
        public static new SharedConfigArgs Empty => new SharedConfigArgs();
    }

    public sealed class SharedConfigState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The configuration for IP whitelist corresponds to ConfigType allow_ip_access_rule.
        /// </summary>
        [Input("allowIpAccessRule")]
        public Input<Inputs.SharedConfigAllowIpAccessRuleGetArgs>? AllowIpAccessRule { get; set; }

        /// <summary>
        /// The configuration for the Referer whitelist corresponds to ConfigType allow_referer_access_rule.
        /// </summary>
        [Input("allowRefererAccessRule")]
        public Input<Inputs.SharedConfigAllowRefererAccessRuleGetArgs>? AllowRefererAccessRule { get; set; }

        /// <summary>
        /// The configuration for a common list is represented by ConfigType common_match_list.
        /// </summary>
        [Input("commonMatchList")]
        public Input<Inputs.SharedConfigCommonMatchListGetArgs>? CommonMatchList { get; set; }

        /// <summary>
        /// The name of the shared config. The name cannot be the same as the name of an existing global configuration under the main account.
        /// </summary>
        [Input("configName")]
        public Input<string>? ConfigName { get; set; }

        /// <summary>
        /// The type of the shared config. The type of global configuration. The parameter can have the following values: `deny_ip_access_rule`: represents IP blacklist. `allow_ip_access_rule`: represents IP whitelist. `deny_referer_access_rule`: represents Referer blacklist. `allow_referer_access_rule`: represents Referer whitelist. `common_match_list`: represents common list.
        /// </summary>
        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        /// <summary>
        /// The configuration for IP blacklist is denoted by ConfigType deny_ip_access_rule.
        /// </summary>
        [Input("denyIpAccessRule")]
        public Input<Inputs.SharedConfigDenyIpAccessRuleGetArgs>? DenyIpAccessRule { get; set; }

        /// <summary>
        /// The configuration for the Referer blacklist corresponds to ConfigType deny_referer_access_rule.
        /// </summary>
        [Input("denyRefererAccessRule")]
        public Input<Inputs.SharedConfigDenyRefererAccessRuleGetArgs>? DenyRefererAccessRule { get; set; }

        /// <summary>
        /// The ProjectName of the cdn shared config.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        public SharedConfigState()
        {
        }
        public static new SharedConfigState Empty => new SharedConfigState();
    }
}
