// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cdn
{
    public static class Certificates
    {
        /// <summary>
        /// Use this data source to query detailed information of cdn certificates
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooCdnCertificate = new Volcengine.Cdn.CdnCertificate("fooCdnCertificate", new()
        ///     {
        ///         Certificate = "",
        ///         PrivateKey = "",
        ///         Desc = "tftest",
        ///         Source = "cdn_cert_hosting",
        ///     });
        /// 
        ///     var fooCertificates = Volcengine.Cdn.Certificates.Invoke(new()
        ///     {
        ///         Source = fooCdnCertificate.Source,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<CertificatesResult> InvokeAsync(CertificatesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<CertificatesResult>("volcengine:cdn/certificates:Certificates", args ?? new CertificatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cdn certificates
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooCdnCertificate = new Volcengine.Cdn.CdnCertificate("fooCdnCertificate", new()
        ///     {
        ///         Certificate = "",
        ///         PrivateKey = "",
        ///         Desc = "tftest",
        ///         Source = "cdn_cert_hosting",
        ///     });
        /// 
        ///     var fooCertificates = Volcengine.Cdn.Certificates.Invoke(new()
        ///     {
        ///         Source = fooCdnCertificate.Source,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<CertificatesResult> Invoke(CertificatesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<CertificatesResult>("volcengine:cdn/certificates:Certificates", args ?? new CertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class CertificatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify a domain to obtain certificates that include that domain in the SAN field. The domain can be a wildcard domain. For example, specifying *.example.com will obtain certificates that include img.example.com or www.example.com in the SAN field.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        /// </summary>
        [Input("source", required: true)]
        public string Source { get; set; } = null!;

        /// <summary>
        /// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public CertificatesArgs()
        {
        }
        public static new CertificatesArgs Empty => new CertificatesArgs();
    }

    public sealed class CertificatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Specify a domain to obtain certificates that include that domain in the SAN field. The domain can be a wildcard domain. For example, specifying *.example.com will obtain certificates that include img.example.com or www.example.com in the SAN field.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        /// </summary>
        [Input("source", required: true)]
        public Input<string> Source { get; set; } = null!;

        /// <summary>
        /// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public CertificatesInvokeArgs()
        {
        }
        public static new CertificatesInvokeArgs Empty => new CertificatesInvokeArgs();
    }


    [OutputType]
    public sealed class CertificatesResult
    {
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.CertificatesCertInfoResult> CertInfos;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? Name;
        public readonly string? OutputFile;
        /// <summary>
        /// Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private CertificatesResult(
            ImmutableArray<Outputs.CertificatesCertInfoResult> certInfos,

            string id,

            string? name,

            string? outputFile,

            string source,

            string? status,

            int totalCount)
        {
            CertInfos = certInfos;
            Id = id;
            Name = name;
            OutputFile = outputFile;
            Source = source;
            Status = status;
            TotalCount = totalCount;
        }
    }
}
