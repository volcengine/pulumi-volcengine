// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cdn
{
    public static class GetSharedConfigs
    {
        /// <summary>
        /// Use this data source to query detailed information of cdn shared configs
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cdn.GetSharedConfigs.Invoke(new()
        ///     {
        ///         ConfigName = "tf-test",
        ///         ConfigType = "allow_ip_access_rule",
        ///         ProjectName = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSharedConfigsResult> InvokeAsync(GetSharedConfigsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSharedConfigsResult>("volcengine:cdn/getSharedConfigs:getSharedConfigs", args ?? new GetSharedConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cdn shared configs
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cdn.GetSharedConfigs.Invoke(new()
        ///     {
        ///         ConfigName = "tf-test",
        ///         ConfigType = "allow_ip_access_rule",
        ///         ProjectName = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSharedConfigsResult> Invoke(GetSharedConfigsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSharedConfigsResult>("volcengine:cdn/getSharedConfigs:getSharedConfigs", args ?? new GetSharedConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSharedConfigsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the shared config.
        /// </summary>
        [Input("configName")]
        public string? ConfigName { get; set; }

        /// <summary>
        /// The type of the shared config.
        /// </summary>
        [Input("configType")]
        public string? ConfigType { get; set; }

        [Input("configTypeLists")]
        private List<string>? _configTypeLists;

        /// <summary>
        /// The config type list. The parameter value can be a combination of available values for ConfigType. ConfigType and ConfigTypeList cannot be specified at the same time.
        /// </summary>
        public List<string> ConfigTypeLists
        {
            get => _configTypeLists ?? (_configTypeLists = new List<string>());
            set => _configTypeLists = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        public GetSharedConfigsArgs()
        {
        }
        public static new GetSharedConfigsArgs Empty => new GetSharedConfigsArgs();
    }

    public sealed class GetSharedConfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the shared config.
        /// </summary>
        [Input("configName")]
        public Input<string>? ConfigName { get; set; }

        /// <summary>
        /// The type of the shared config.
        /// </summary>
        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        [Input("configTypeLists")]
        private InputList<string>? _configTypeLists;

        /// <summary>
        /// The config type list. The parameter value can be a combination of available values for ConfigType. ConfigType and ConfigTypeList cannot be specified at the same time.
        /// </summary>
        public InputList<string> ConfigTypeLists
        {
            get => _configTypeLists ?? (_configTypeLists = new InputList<string>());
            set => _configTypeLists = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        public GetSharedConfigsInvokeArgs()
        {
        }
        public static new GetSharedConfigsInvokeArgs Empty => new GetSharedConfigsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSharedConfigsResult
    {
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSharedConfigsConfigDataResult> ConfigDatas;
        /// <summary>
        /// The name of the config.
        /// </summary>
        public readonly string? ConfigName;
        /// <summary>
        /// The type of the config.
        /// </summary>
        public readonly string? ConfigType;
        public readonly ImmutableArray<string> ConfigTypeLists;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The name of the project.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetSharedConfigsResult(
            ImmutableArray<Outputs.GetSharedConfigsConfigDataResult> configDatas,

            string? configName,

            string? configType,

            ImmutableArray<string> configTypeLists,

            string id,

            string? outputFile,

            string? projectName,

            int totalCount)
        {
            ConfigDatas = configDatas;
            ConfigName = configName;
            ConfigType = configType;
            ConfigTypeLists = configTypeLists;
            Id = id;
            OutputFile = outputFile;
            ProjectName = projectName;
            TotalCount = totalCount;
        }
    }
}
