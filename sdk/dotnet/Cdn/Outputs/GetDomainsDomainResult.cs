// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cdn.Outputs
{

    [OutputType]
    public sealed class GetDomainsDomainResult
    {
        /// <summary>
        /// The list of backup origin servers for accelerating this domain name. If no backup origin server is configured for this acceleration domain name, the parameter value is null.
        /// </summary>
        public readonly ImmutableArray<string> BackupOrigins;
        /// <summary>
        /// Indicates the role of the accelerated domain in the shared cache configuration. This parameter can take the following values: `target_host`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the target domain.`cache_shared_on`: Indicates that there is a shared cache configuration where the role of the accelerated domain is the configured domain.`""`: This parameter value is empty, indicating that the accelerated domain does not exist in any shared cache configuration.
        /// </summary>
        public readonly string CacheShared;
        /// <summary>
        /// If CacheShared is cache_shared_on, it means the target domain name that shares cache with the accelerated domain name. If CacheShared is target_host or an empty value, the parameter value is empty.
        /// </summary>
        public readonly string CacheSharedTargetHost;
        /// <summary>
        /// The CNAME address of the domain is automatically assigned when adding the domain.
        /// </summary>
        public readonly string Cname;
        /// <summary>
        /// The creation time of the domain.
        /// </summary>
        public readonly int CreateTime;
        /// <summary>
        /// Search by specifying domain name keywords, with fuzzy matching.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// Indicates the locked status of the accelerated domain.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsDomainDomainLockResult> DomainLocks;
        /// <summary>
        /// Specify HTTPS configuration to filter accelerated domains. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain has enabled HTTPS function.`false`: Indicates that the accelerated domain has not enabled HTTPS function.
        /// </summary>
        public readonly bool Https;
        /// <summary>
        /// Specify IPv6 configuration to filter accelerated domain names. The optional values for this parameter are as follows: `true`: Indicates that the accelerated domain name supports requests using IPv6 addresses.`false`: Indicates that the accelerated domain name does not support requests using IPv6 addresses.
        /// </summary>
        public readonly bool Ipv6;
        /// <summary>
        /// Indicates whether the accelerated domain name is a conflicting domain name. By default, each accelerated domain name is unique in the content delivery network. If you need to add an accelerated domain name that already exists in the content delivery network, you need to submit a ticket. If the domain name is added successfully, it becomes a conflicting domain name.
        /// </summary>
        public readonly bool IsConflictDomain;
        /// <summary>
        /// Configure the origin protocol for the accelerated domain.
        /// </summary>
        public readonly string OriginProtocol;
        /// <summary>
        /// Specify a primary origin server for filtering accelerated domains.
        /// </summary>
        public readonly ImmutableArray<string> PrimaryOrigins;
        /// <summary>
        /// The project name of the domain.
        /// </summary>
        public readonly string Project;
        /// <summary>
        /// Indicates the acceleration area. The parameter can take the following values: `chinese_mainland`: Indicates mainland China. `global`: Indicates global. `outside_chinese_mainland`: Indicates global (excluding mainland China).
        /// </summary>
        public readonly string ServiceRegion;
        /// <summary>
        /// The business type of the domain name is indicated by this parameter. The possible values are: `download`: for file downloads. `web`: for web pages. `video`: for audio and video on demand.
        /// </summary>
        public readonly string ServiceType;
        /// <summary>
        /// The status of the domain.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Filter by specified domain name tags, up to 10 tags can be specified. Each tag is entered as a string in the format of key:value.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDomainsDomainTagResult> Tags;
        /// <summary>
        /// The update time of the domain.
        /// </summary>
        public readonly int UpdateTime;

        [OutputConstructor]
        private GetDomainsDomainResult(
            ImmutableArray<string> backupOrigins,

            string cacheShared,

            string cacheSharedTargetHost,

            string cname,

            int createTime,

            string domain,

            ImmutableArray<Outputs.GetDomainsDomainDomainLockResult> domainLocks,

            bool https,

            bool ipv6,

            bool isConflictDomain,

            string originProtocol,

            ImmutableArray<string> primaryOrigins,

            string project,

            string serviceRegion,

            string serviceType,

            string status,

            ImmutableArray<Outputs.GetDomainsDomainTagResult> tags,

            int updateTime)
        {
            BackupOrigins = backupOrigins;
            CacheShared = cacheShared;
            CacheSharedTargetHost = cacheSharedTargetHost;
            Cname = cname;
            CreateTime = createTime;
            Domain = domain;
            DomainLocks = domainLocks;
            Https = https;
            Ipv6 = ipv6;
            IsConflictDomain = isConflictDomain;
            OriginProtocol = originProtocol;
            PrimaryOrigins = primaryOrigins;
            Project = project;
            ServiceRegion = serviceRegion;
            ServiceType = serviceType;
            Status = status;
            Tags = tags;
            UpdateTime = updateTime;
        }
    }
}
