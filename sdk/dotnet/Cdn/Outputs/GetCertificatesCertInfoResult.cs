// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cdn.Outputs
{

    [OutputType]
    public sealed class GetCertificatesCertInfoResult
    {
        /// <summary>
        /// ID indicating the certificate.
        /// </summary>
        public readonly string CertId;
        /// <summary>
        /// The domain name to which the certificate is issued.
        /// </summary>
        public readonly string CertName;
        /// <summary>
        /// The domain name associated with the certificate. If the certificate is not yet associated with any domain name, the parameter value is null.
        /// </summary>
        public readonly string ConfiguredDomain;
        /// <summary>
        /// The remark of the cert.
        /// </summary>
        public readonly string Desc;
        /// <summary>
        /// The domain names included in the SAN field of the certificate.
        /// </summary>
        public readonly string DnsName;
        /// <summary>
        /// The issuance time of the certificate is indicated. The unit is Unix timestamp.
        /// </summary>
        public readonly int EffectiveTime;
        /// <summary>
        /// The expiration time of the certificate is indicated. The unit is Unix timestamp.
        /// </summary>
        public readonly int ExpireTime;
        /// <summary>
        /// Specify the location for storing the certificate. The parameter can take the following values: `volc_cert_center`: indicates that the certificate will be stored in the certificate center.`cdn_cert_hosting`: indicates that the certificate will be hosted on the content delivery network.
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Specify one or more states to retrieve certificates in those states. By default, all certificates in all states are returned. You can specify the following states. Multiple states are separated by commas. running: Retrieves certificates with a validity period greater than 30 days. expired: Retrieves certificates that have already expired. expiring_soon: Retrieves certificates with a validity period less than or equal to 30 days but have not yet expired.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetCertificatesCertInfoResult(
            string certId,

            string certName,

            string configuredDomain,

            string desc,

            string dnsName,

            int effectiveTime,

            int expireTime,

            string source,

            string status)
        {
            CertId = certId;
            CertName = certName;
            ConfiguredDomain = configuredDomain;
            Desc = desc;
            DnsName = dnsName;
            EffectiveTime = effectiveTime;
            ExpireTime = expireTime;
            Source = source;
            Status = status;
        }
    }
}
