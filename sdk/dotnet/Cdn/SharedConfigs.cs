// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cdn
{
    [Obsolete(@"volcengine.cdn/sharedconfigs.SharedConfigs has been deprecated in favor of volcengine.cdn/getsharedconfigs.getSharedConfigs")]
    public static class SharedConfigs
    {
        /// <summary>
        /// Use this data source to query detailed information of cdn shared configs
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cdn.GetSharedConfigs.Invoke(new()
        ///     {
        ///         ConfigName = "tf-test",
        ///         ConfigType = "allow_ip_access_rule",
        ///         ProjectName = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<SharedConfigsResult> InvokeAsync(SharedConfigsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<SharedConfigsResult>("volcengine:cdn/sharedConfigs:SharedConfigs", args ?? new SharedConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cdn shared configs
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cdn.GetSharedConfigs.Invoke(new()
        ///     {
        ///         ConfigName = "tf-test",
        ///         ConfigType = "allow_ip_access_rule",
        ///         ProjectName = "default",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<SharedConfigsResult> Invoke(SharedConfigsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<SharedConfigsResult>("volcengine:cdn/sharedConfigs:SharedConfigs", args ?? new SharedConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class SharedConfigsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the shared config.
        /// </summary>
        [Input("configName")]
        public string? ConfigName { get; set; }

        /// <summary>
        /// The type of the shared config.
        /// </summary>
        [Input("configType")]
        public string? ConfigType { get; set; }

        [Input("configTypeLists")]
        private List<string>? _configTypeLists;

        /// <summary>
        /// The config type list. The parameter value can be a combination of available values for ConfigType. ConfigType and ConfigTypeList cannot be specified at the same time.
        /// </summary>
        public List<string> ConfigTypeLists
        {
            get => _configTypeLists ?? (_configTypeLists = new List<string>());
            set => _configTypeLists = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        public SharedConfigsArgs()
        {
        }
        public static new SharedConfigsArgs Empty => new SharedConfigsArgs();
    }

    public sealed class SharedConfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the shared config.
        /// </summary>
        [Input("configName")]
        public Input<string>? ConfigName { get; set; }

        /// <summary>
        /// The type of the shared config.
        /// </summary>
        [Input("configType")]
        public Input<string>? ConfigType { get; set; }

        [Input("configTypeLists")]
        private InputList<string>? _configTypeLists;

        /// <summary>
        /// The config type list. The parameter value can be a combination of available values for ConfigType. ConfigType and ConfigTypeList cannot be specified at the same time.
        /// </summary>
        public InputList<string> ConfigTypeLists
        {
            get => _configTypeLists ?? (_configTypeLists = new InputList<string>());
            set => _configTypeLists = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        public SharedConfigsInvokeArgs()
        {
        }
        public static new SharedConfigsInvokeArgs Empty => new SharedConfigsInvokeArgs();
    }


    [OutputType]
    public sealed class SharedConfigsResult
    {
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.SharedConfigsConfigDataResult> ConfigDatas;
        /// <summary>
        /// The name of the config.
        /// </summary>
        public readonly string? ConfigName;
        /// <summary>
        /// The type of the config.
        /// </summary>
        public readonly string? ConfigType;
        public readonly ImmutableArray<string> ConfigTypeLists;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The name of the project.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private SharedConfigsResult(
            ImmutableArray<Outputs.SharedConfigsConfigDataResult> configDatas,

            string? configName,

            string? configType,

            ImmutableArray<string> configTypeLists,

            string id,

            string? outputFile,

            string? projectName,

            int totalCount)
        {
            ConfigDatas = configDatas;
            ConfigName = configName;
            ConfigType = configType;
            ConfigTypeLists = configTypeLists;
            Id = id;
            OutputFile = outputFile;
            ProjectName = projectName;
            TotalCount = totalCount;
        }
    }
}
