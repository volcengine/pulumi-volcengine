// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cdn
{
    public static class Configs
    {
        /// <summary>
        /// Use this data source to query detailed information of cdn configs
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooCdnCertificate = new Volcengine.Cdn.CdnCertificate("fooCdnCertificate", new()
        ///     {
        ///         Certificate = "",
        ///         PrivateKey = "",
        ///         Desc = "tftest",
        ///         Source = "cdn_cert_hosting",
        ///     });
        /// 
        ///     var fooCdnDomain = new Volcengine.Cdn.CdnDomain("fooCdnDomain", new()
        ///     {
        ///         Domain = "tftest.byte-test.com",
        ///         ServiceType = "web",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cdn.Inputs.CdnDomainTagArgs
        ///             {
        ///                 Key = "tfkey1",
        ///                 Value = "tfvalue1",
        ///             },
        ///             new Volcengine.Cdn.Inputs.CdnDomainTagArgs
        ///             {
        ///                 Key = "tfkey2",
        ///                 Value = "tfvalue2",
        ///             },
        ///         },
        ///         DomainConfig = fooCdnCertificate.Id.Apply(id =&gt; JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["OriginProtocol"] = "https",
        ///             ["Origin"] = new[]
        ///             {
        ///                 new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["OriginAction"] = new Dictionary&lt;string, object?&gt;
        ///                     {
        ///                         ["OriginLines"] = new[]
        ///                         {
        ///                             new Dictionary&lt;string, object?&gt;
        ///                             {
        ///                                 ["Address"] = "1.1.1.1",
        ///                                 ["HttpPort"] = "80",
        ///                                 ["HttpsPort"] = "443",
        ///                                 ["InstanceType"] = "ip",
        ///                                 ["OriginType"] = "primary",
        ///                                 ["PrivateBucketAccess"] = false,
        ///                                 ["Weight"] = "2",
        ///                             },
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///             ["HTTPS"] = new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["CertInfo"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["CertId"] = id,
        ///                 },
        ///                 ["DisableHttp"] = false,
        ///                 ["HTTP2"] = true,
        ///                 ["Switch"] = true,
        ///                 ["Ocsp"] = false,
        ///                 ["TlsVersion"] = new[]
        ///                 {
        ///                     "tlsv1.1",
        ///                     "tlsv1.2",
        ///                 },
        ///             },
        ///         })),
        ///     });
        /// 
        ///     var fooConfigs = Volcengine.Cdn.Configs.Invoke(new()
        ///     {
        ///         Domain = fooCdnDomain.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<ConfigsResult> InvokeAsync(ConfigsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ConfigsResult>("volcengine:cdn/configs:Configs", args ?? new ConfigsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cdn configs
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooCdnCertificate = new Volcengine.Cdn.CdnCertificate("fooCdnCertificate", new()
        ///     {
        ///         Certificate = "",
        ///         PrivateKey = "",
        ///         Desc = "tftest",
        ///         Source = "cdn_cert_hosting",
        ///     });
        /// 
        ///     var fooCdnDomain = new Volcengine.Cdn.CdnDomain("fooCdnDomain", new()
        ///     {
        ///         Domain = "tftest.byte-test.com",
        ///         ServiceType = "web",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cdn.Inputs.CdnDomainTagArgs
        ///             {
        ///                 Key = "tfkey1",
        ///                 Value = "tfvalue1",
        ///             },
        ///             new Volcengine.Cdn.Inputs.CdnDomainTagArgs
        ///             {
        ///                 Key = "tfkey2",
        ///                 Value = "tfvalue2",
        ///             },
        ///         },
        ///         DomainConfig = fooCdnCertificate.Id.Apply(id =&gt; JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
        ///         {
        ///             ["OriginProtocol"] = "https",
        ///             ["Origin"] = new[]
        ///             {
        ///                 new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["OriginAction"] = new Dictionary&lt;string, object?&gt;
        ///                     {
        ///                         ["OriginLines"] = new[]
        ///                         {
        ///                             new Dictionary&lt;string, object?&gt;
        ///                             {
        ///                                 ["Address"] = "1.1.1.1",
        ///                                 ["HttpPort"] = "80",
        ///                                 ["HttpsPort"] = "443",
        ///                                 ["InstanceType"] = "ip",
        ///                                 ["OriginType"] = "primary",
        ///                                 ["PrivateBucketAccess"] = false,
        ///                                 ["Weight"] = "2",
        ///                             },
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///             ["HTTPS"] = new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["CertInfo"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["CertId"] = id,
        ///                 },
        ///                 ["DisableHttp"] = false,
        ///                 ["HTTP2"] = true,
        ///                 ["Switch"] = true,
        ///                 ["Ocsp"] = false,
        ///                 ["TlsVersion"] = new[]
        ///                 {
        ///                     "tlsv1.1",
        ///                     "tlsv1.2",
        ///                 },
        ///             },
        ///         })),
        ///     });
        /// 
        ///     var fooConfigs = Volcengine.Cdn.Configs.Invoke(new()
        ///     {
        ///         Domain = fooCdnDomain.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<ConfigsResult> Invoke(ConfigsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ConfigsResult>("volcengine:cdn/configs:Configs", args ?? new ConfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class ConfigsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain name.
        /// </summary>
        [Input("domain", required: true)]
        public string Domain { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public ConfigsArgs()
        {
        }
        public static new ConfigsArgs Empty => new ConfigsArgs();
    }

    public sealed class ConfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain name.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public ConfigsInvokeArgs()
        {
        }
        public static new ConfigsInvokeArgs Empty => new ConfigsInvokeArgs();
    }


    [OutputType]
    public sealed class ConfigsResult
    {
        /// <summary>
        /// The domain name.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConfigsDomainConfigResult> DomainConfigs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private ConfigsResult(
            string domain,

            ImmutableArray<Outputs.ConfigsDomainConfigResult> domainConfigs,

            string id,

            string? outputFile,

            int totalCount)
        {
            Domain = domain;
            DomainConfigs = domainConfigs;
            Id = id;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
