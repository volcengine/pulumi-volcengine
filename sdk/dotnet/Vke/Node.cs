// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vke
{
    /// <summary>
    /// Provides a resource to manage vke node
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
    ///     {
    ///         SecurityGroupName = "acc-test-security-group",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooImages = Volcengine.Ecs.Images.Invoke(new()
    ///     {
    ///         NameRegex = "veLinux 1.0 CentOS兼容版 64位",
    ///     });
    /// 
    ///     var fooCluster = new Volcengine.Vke.Cluster("fooCluster", new()
    ///     {
    ///         Description = "created by terraform",
    ///         DeleteProtectionEnabled = false,
    ///         ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs
    ///         {
    ///             SubnetIds = new[]
    ///             {
    ///                 fooSubnet.Id,
    ///             },
    ///             ApiServerPublicAccessEnabled = true,
    ///             ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
    ///             {
    ///                 PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
    ///                 {
    ///                     BillingType = "PostPaidByBandwidth",
    ///                     Bandwidth = 1,
    ///                 },
    ///             },
    ///             ResourcePublicAccessDefaultEnabled = true,
    ///         },
    ///         PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs
    ///         {
    ///             PodNetworkMode = "VpcCniShared",
    ///             VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs
    ///             {
    ///                 SubnetIds = new[]
    ///                 {
    ///                     fooSubnet.Id,
    ///                 },
    ///             },
    ///         },
    ///         ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs
    ///         {
    ///             ServiceCidrsv4s = new[]
    ///             {
    ///                 "172.30.0.0/18",
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vke.Inputs.ClusterTagArgs
    ///             {
    ///                 Key = "tf-k1",
    ///                 Value = "tf-v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooNodePool = new Volcengine.Vke.NodePool("fooNodePool", new()
    ///     {
    ///         ClusterId = fooCluster.Id,
    ///         AutoScaling = new Volcengine.Vke.Inputs.NodePoolAutoScalingArgs
    ///         {
    ///             Enabled = false,
    ///         },
    ///         NodeConfig = new Volcengine.Vke.Inputs.NodePoolNodeConfigArgs
    ///         {
    ///             InstanceTypeIds = new[]
    ///             {
    ///                 "ecs.g1ie.xlarge",
    ///             },
    ///             SubnetIds = new[]
    ///             {
    ///                 fooSubnet.Id,
    ///             },
    ///             ImageId = .Where(image =&gt; image.ImageName == "veLinux 1.0 CentOS兼容版 64位").Select(image =&gt; 
    ///             {
    ///                 return  image.ImageId;
    ///             })[0],
    ///             SystemVolume = new Volcengine.Vke.Inputs.NodePoolNodeConfigSystemVolumeArgs
    ///             {
    ///                 Type = "ESSD_PL0",
    ///                 Size = 50,
    ///             },
    ///             DataVolumes = new[]
    ///             {
    ///                 new Volcengine.Vke.Inputs.NodePoolNodeConfigDataVolumeArgs
    ///                 {
    ///                     Type = "ESSD_PL0",
    ///                     Size = 50,
    ///                     MountPoint = "/tf",
    ///                 },
    ///             },
    ///             InitializeScript = "ZWNobyBoZWxsbyB0ZXJyYWZvcm0h",
    ///             Security = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityArgs
    ///             {
    ///                 Login = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityLoginArgs
    ///                 {
    ///                     Password = "UHdkMTIzNDU2",
    ///                 },
    ///                 SecurityStrategies = new[]
    ///                 {
    ///                     "Hids",
    ///                 },
    ///                 SecurityGroupIds = new[]
    ///                 {
    ///                     fooSecurityGroup.Id,
    ///                 },
    ///             },
    ///             AdditionalContainerStorageEnabled = true,
    ///             InstanceChargeType = "PostPaid",
    ///             NamePrefix = "acc-test",
    ///             EcsTags = new[]
    ///             {
    ///                 new Volcengine.Vke.Inputs.NodePoolNodeConfigEcsTagArgs
    ///                 {
    ///                     Key = "ecs_k1",
    ///                     Value = "ecs_v1",
    ///                 },
    ///             },
    ///         },
    ///         KubernetesConfig = new Volcengine.Vke.Inputs.NodePoolKubernetesConfigArgs
    ///         {
    ///             Labels = new[]
    ///             {
    ///                 new Volcengine.Vke.Inputs.NodePoolKubernetesConfigLabelArgs
    ///                 {
    ///                     Key = "label1",
    ///                     Value = "value1",
    ///                 },
    ///             },
    ///             Taints = new[]
    ///             {
    ///                 new Volcengine.Vke.Inputs.NodePoolKubernetesConfigTaintArgs
    ///                 {
    ///                     Key = "taint-key/node-type",
    ///                     Value = "taint-value",
    ///                     Effect = "NoSchedule",
    ///                 },
    ///             },
    ///             Cordon = true,
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vke.Inputs.NodePoolTagArgs
    ///             {
    ///                 Key = "node-pool-k1",
    ///                 Value = "node-pool-v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
    ///     {
    ///         InstanceName = "acc-test-ecs",
    ///         HostName = "tf-acc-test",
    ///         ImageId = .Where(image =&gt; image.ImageName == "veLinux 1.0 CentOS兼容版 64位").Select(image =&gt; 
    ///         {
    ///             return  image.ImageId;
    ///         })[0],
    ///         InstanceType = "ecs.g1ie.xlarge",
    ///         Password = "93f0cb0614Aab12",
    ///         InstanceChargeType = "PostPaid",
    ///         SystemVolumeType = "ESSD_PL0",
    ///         SystemVolumeSize = 50,
    ///         DataVolumes = new[]
    ///         {
    ///             new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs
    ///             {
    ///                 VolumeType = "ESSD_PL0",
    ///                 Size = 50,
    ///                 DeleteWithInstance = true,
    ///             },
    ///         },
    ///         SubnetId = fooSubnet.Id,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             fooSecurityGroup.Id,
    ///         },
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Ecs.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooNode = new Volcengine.Vke.Node("fooNode", new()
    ///     {
    ///         ClusterId = fooCluster.Id,
    ///         InstanceId = fooInstance.Id,
    ///         NodePoolId = fooNodePool.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VKE node can be imported using the node id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:vke/node:Node default nc5t5epmrsf****
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vke/node:Node")]
    public partial class Node : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The flag of additional container storage enable, the value is `true` or `false`.
        /// </summary>
        [Output("additionalContainerStorageEnabled")]
        public Output<bool?> AdditionalContainerStorageEnabled { get; private set; } = null!;

        /// <summary>
        /// The client token.
        /// </summary>
        [Output("clientToken")]
        public Output<string> ClientToken { get; private set; } = null!;

        /// <summary>
        /// The cluster id.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The container storage path.
        /// </summary>
        [Output("containerStoragePath")]
        public Output<string> ContainerStoragePath { get; private set; } = null!;

        /// <summary>
        /// The ImageId of NodeConfig.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The initializeScript of Node.
        /// </summary>
        [Output("initializeScript")]
        public Output<string> InitializeScript { get; private set; } = null!;

        /// <summary>
        /// The instance id.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The flag of keep instance name, the value is `true` or `false`.
        /// </summary>
        [Output("keepInstanceName")]
        public Output<bool?> KeepInstanceName { get; private set; } = null!;

        /// <summary>
        /// The KubernetesConfig of Node.
        /// </summary>
        [Output("kubernetesConfig")]
        public Output<Outputs.NodeKubernetesConfig> KubernetesConfig { get; private set; } = null!;

        /// <summary>
        /// The node pool id.
        /// </summary>
        [Output("nodePoolId")]
        public Output<string> NodePoolId { get; private set; } = null!;


        /// <summary>
        /// Create a Node resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Node(string name, NodeArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vke/node:Node", name, args ?? new NodeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Node(string name, Input<string> id, NodeState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vke/node:Node", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Node resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Node Get(string name, Input<string> id, NodeState? state = null, CustomResourceOptions? options = null)
        {
            return new Node(name, id, state, options);
        }
    }

    public sealed class NodeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag of additional container storage enable, the value is `true` or `false`.
        /// </summary>
        [Input("additionalContainerStorageEnabled")]
        public Input<bool>? AdditionalContainerStorageEnabled { get; set; }

        /// <summary>
        /// The client token.
        /// </summary>
        [Input("clientToken")]
        public Input<string>? ClientToken { get; set; }

        /// <summary>
        /// The cluster id.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The container storage path.
        /// </summary>
        [Input("containerStoragePath")]
        public Input<string>? ContainerStoragePath { get; set; }

        /// <summary>
        /// The ImageId of NodeConfig.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The initializeScript of Node.
        /// </summary>
        [Input("initializeScript")]
        public Input<string>? InitializeScript { get; set; }

        /// <summary>
        /// The instance id.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The flag of keep instance name, the value is `true` or `false`.
        /// </summary>
        [Input("keepInstanceName")]
        public Input<bool>? KeepInstanceName { get; set; }

        /// <summary>
        /// The KubernetesConfig of Node.
        /// </summary>
        [Input("kubernetesConfig")]
        public Input<Inputs.NodeKubernetesConfigArgs>? KubernetesConfig { get; set; }

        /// <summary>
        /// The node pool id.
        /// </summary>
        [Input("nodePoolId")]
        public Input<string>? NodePoolId { get; set; }

        public NodeArgs()
        {
        }
        public static new NodeArgs Empty => new NodeArgs();
    }

    public sealed class NodeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag of additional container storage enable, the value is `true` or `false`.
        /// </summary>
        [Input("additionalContainerStorageEnabled")]
        public Input<bool>? AdditionalContainerStorageEnabled { get; set; }

        /// <summary>
        /// The client token.
        /// </summary>
        [Input("clientToken")]
        public Input<string>? ClientToken { get; set; }

        /// <summary>
        /// The cluster id.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The container storage path.
        /// </summary>
        [Input("containerStoragePath")]
        public Input<string>? ContainerStoragePath { get; set; }

        /// <summary>
        /// The ImageId of NodeConfig.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The initializeScript of Node.
        /// </summary>
        [Input("initializeScript")]
        public Input<string>? InitializeScript { get; set; }

        /// <summary>
        /// The instance id.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The flag of keep instance name, the value is `true` or `false`.
        /// </summary>
        [Input("keepInstanceName")]
        public Input<bool>? KeepInstanceName { get; set; }

        /// <summary>
        /// The KubernetesConfig of Node.
        /// </summary>
        [Input("kubernetesConfig")]
        public Input<Inputs.NodeKubernetesConfigGetArgs>? KubernetesConfig { get; set; }

        /// <summary>
        /// The node pool id.
        /// </summary>
        [Input("nodePoolId")]
        public Input<string>? NodePoolId { get; set; }

        public NodeState()
        {
        }
        public static new NodeState Empty => new NodeState();
    }
}
