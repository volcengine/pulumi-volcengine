// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vke
{
    public static class GetNodes
    {
        /// <summary>
        /// Use this data source to query detailed information of vke nodes
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.GetImages.Invoke(new()
        ///     {
        ///         NameRegex = "veLinux 1.0 CentOS兼容版 64位",
        ///     });
        /// 
        ///     var fooCluster = new Volcengine.Vke.Cluster("fooCluster", new()
        ///     {
        ///         Description = "created by terraform",
        ///         DeleteProtectionEnabled = false,
        ///         ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs
        ///         {
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             ApiServerPublicAccessEnabled = true,
        ///             ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
        ///             {
        ///                 PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
        ///                 {
        ///                     BillingType = "PostPaidByBandwidth",
        ///                     Bandwidth = 1,
        ///                 },
        ///             },
        ///             ResourcePublicAccessDefaultEnabled = true,
        ///         },
        ///         PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs
        ///         {
        ///             PodNetworkMode = "VpcCniShared",
        ///             VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs
        ///             {
        ///                 SubnetIds = new[]
        ///                 {
        ///                     fooSubnet.Id,
        ///                 },
        ///             },
        ///         },
        ///         ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs
        ///         {
        ///             ServiceCidrsv4s = new[]
        ///             {
        ///                 "172.30.0.0/18",
        ///             },
        ///         },
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vke.Inputs.ClusterTagArgs
        ///             {
        ///                 Key = "tf-k1",
        ///                 Value = "tf-v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooNodePool = new Volcengine.Vke.NodePool("fooNodePool", new()
        ///     {
        ///         ClusterId = fooCluster.Id,
        ///         AutoScaling = new Volcengine.Vke.Inputs.NodePoolAutoScalingArgs
        ///         {
        ///             Enabled = false,
        ///         },
        ///         NodeConfig = new Volcengine.Vke.Inputs.NodePoolNodeConfigArgs
        ///         {
        ///             InstanceTypeIds = new[]
        ///             {
        ///                 "ecs.g1ie.xlarge",
        ///             },
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             ImageId = .Where(image =&gt; image.ImageName == "veLinux 1.0 CentOS兼容版 64位").Select(image =&gt; 
        ///             {
        ///                 return image.ImageId;
        ///             }).ToList()[0],
        ///             SystemVolume = new Volcengine.Vke.Inputs.NodePoolNodeConfigSystemVolumeArgs
        ///             {
        ///                 Type = "ESSD_PL0",
        ///                 Size = 50,
        ///             },
        ///             DataVolumes = new[]
        ///             {
        ///                 new Volcengine.Vke.Inputs.NodePoolNodeConfigDataVolumeArgs
        ///                 {
        ///                     Type = "ESSD_PL0",
        ///                     Size = 50,
        ///                     MountPoint = "/tf",
        ///                 },
        ///             },
        ///             InitializeScript = "ZWNobyBoZWxsbyB0ZXJyYWZvcm0h",
        ///             Security = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityArgs
        ///             {
        ///                 Login = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityLoginArgs
        ///                 {
        ///                     Password = "UHdkMTIzNDU2",
        ///                 },
        ///                 SecurityStrategies = new[]
        ///                 {
        ///                     "Hids",
        ///                 },
        ///                 SecurityGroupIds = new[]
        ///                 {
        ///                     fooSecurityGroup.Id,
        ///                 },
        ///             },
        ///             AdditionalContainerStorageEnabled = true,
        ///             InstanceChargeType = "PostPaid",
        ///             NamePrefix = "acc-test",
        ///             EcsTags = new[]
        ///             {
        ///                 new Volcengine.Vke.Inputs.NodePoolNodeConfigEcsTagArgs
        ///                 {
        ///                     Key = "ecs_k1",
        ///                     Value = "ecs_v1",
        ///                 },
        ///             },
        ///         },
        ///         KubernetesConfig = new Volcengine.Vke.Inputs.NodePoolKubernetesConfigArgs
        ///         {
        ///             Labels = new[]
        ///             {
        ///                 new Volcengine.Vke.Inputs.NodePoolKubernetesConfigLabelArgs
        ///                 {
        ///                     Key = "label1",
        ///                     Value = "value1",
        ///                 },
        ///             },
        ///             Taints = new[]
        ///             {
        ///                 new Volcengine.Vke.Inputs.NodePoolKubernetesConfigTaintArgs
        ///                 {
        ///                     Key = "taint-key/node-type",
        ///                     Value = "taint-value",
        ///                     Effect = "NoSchedule",
        ///                 },
        ///             },
        ///             Cordon = true,
        ///         },
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vke.Inputs.NodePoolTagArgs
        ///             {
        ///                 Key = "node-pool-k1",
        ///                 Value = "node-pool-v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooInstance = new List&lt;Volcengine.Ecs.Instance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooInstance.Add(new Volcengine.Ecs.Instance($"fooInstance-{range.Value}", new()
        ///         {
        ///             InstanceName = $"acc-test-ecs-{range.Value}",
        ///             HostName = "tf-acc-test",
        ///             ImageId = .Where(image =&gt; image.ImageName == "veLinux 1.0 CentOS兼容版 64位").Select(image =&gt; 
        ///             {
        ///                 return image.ImageId;
        ///             }).ToList()[0],
        ///             InstanceType = "ecs.g1ie.xlarge",
        ///             Password = "93f0cb0614Aab12",
        ///             InstanceChargeType = "PostPaid",
        ///             SystemVolumeType = "ESSD_PL0",
        ///             SystemVolumeSize = 50,
        ///             DataVolumes = new[]
        ///             {
        ///                 new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs
        ///                 {
        ///                     VolumeType = "ESSD_PL0",
        ///                     Size = 50,
        ///                     DeleteWithInstance = true,
        ///                 },
        ///             },
        ///             SubnetId = fooSubnet.Id,
        ///             SecurityGroupIds = new[]
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Ecs.Inputs.InstanceTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooNode = new List&lt;Volcengine.Vke.Node&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooNode.Add(new Volcengine.Vke.Node($"fooNode-{range.Value}", new()
        ///         {
        ///             ClusterId = fooCluster.Id,
        ///             InstanceId = fooInstance[range.Value].Id,
        ///             NodePoolId = fooNodePool.Id,
        ///         }));
        ///     }
        ///     var fooNodes = Volcengine.Vke.GetNodes.Invoke(new()
        ///     {
        ///         Ids = fooNode.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetNodesResult> InvokeAsync(GetNodesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetNodesResult>("volcengine:vke/getNodes:getNodes", args ?? new GetNodesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vke nodes
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.GetImages.Invoke(new()
        ///     {
        ///         NameRegex = "veLinux 1.0 CentOS兼容版 64位",
        ///     });
        /// 
        ///     var fooCluster = new Volcengine.Vke.Cluster("fooCluster", new()
        ///     {
        ///         Description = "created by terraform",
        ///         DeleteProtectionEnabled = false,
        ///         ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs
        ///         {
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             ApiServerPublicAccessEnabled = true,
        ///             ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
        ///             {
        ///                 PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
        ///                 {
        ///                     BillingType = "PostPaidByBandwidth",
        ///                     Bandwidth = 1,
        ///                 },
        ///             },
        ///             ResourcePublicAccessDefaultEnabled = true,
        ///         },
        ///         PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs
        ///         {
        ///             PodNetworkMode = "VpcCniShared",
        ///             VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs
        ///             {
        ///                 SubnetIds = new[]
        ///                 {
        ///                     fooSubnet.Id,
        ///                 },
        ///             },
        ///         },
        ///         ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs
        ///         {
        ///             ServiceCidrsv4s = new[]
        ///             {
        ///                 "172.30.0.0/18",
        ///             },
        ///         },
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vke.Inputs.ClusterTagArgs
        ///             {
        ///                 Key = "tf-k1",
        ///                 Value = "tf-v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooNodePool = new Volcengine.Vke.NodePool("fooNodePool", new()
        ///     {
        ///         ClusterId = fooCluster.Id,
        ///         AutoScaling = new Volcengine.Vke.Inputs.NodePoolAutoScalingArgs
        ///         {
        ///             Enabled = false,
        ///         },
        ///         NodeConfig = new Volcengine.Vke.Inputs.NodePoolNodeConfigArgs
        ///         {
        ///             InstanceTypeIds = new[]
        ///             {
        ///                 "ecs.g1ie.xlarge",
        ///             },
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             ImageId = .Where(image =&gt; image.ImageName == "veLinux 1.0 CentOS兼容版 64位").Select(image =&gt; 
        ///             {
        ///                 return image.ImageId;
        ///             }).ToList()[0],
        ///             SystemVolume = new Volcengine.Vke.Inputs.NodePoolNodeConfigSystemVolumeArgs
        ///             {
        ///                 Type = "ESSD_PL0",
        ///                 Size = 50,
        ///             },
        ///             DataVolumes = new[]
        ///             {
        ///                 new Volcengine.Vke.Inputs.NodePoolNodeConfigDataVolumeArgs
        ///                 {
        ///                     Type = "ESSD_PL0",
        ///                     Size = 50,
        ///                     MountPoint = "/tf",
        ///                 },
        ///             },
        ///             InitializeScript = "ZWNobyBoZWxsbyB0ZXJyYWZvcm0h",
        ///             Security = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityArgs
        ///             {
        ///                 Login = new Volcengine.Vke.Inputs.NodePoolNodeConfigSecurityLoginArgs
        ///                 {
        ///                     Password = "UHdkMTIzNDU2",
        ///                 },
        ///                 SecurityStrategies = new[]
        ///                 {
        ///                     "Hids",
        ///                 },
        ///                 SecurityGroupIds = new[]
        ///                 {
        ///                     fooSecurityGroup.Id,
        ///                 },
        ///             },
        ///             AdditionalContainerStorageEnabled = true,
        ///             InstanceChargeType = "PostPaid",
        ///             NamePrefix = "acc-test",
        ///             EcsTags = new[]
        ///             {
        ///                 new Volcengine.Vke.Inputs.NodePoolNodeConfigEcsTagArgs
        ///                 {
        ///                     Key = "ecs_k1",
        ///                     Value = "ecs_v1",
        ///                 },
        ///             },
        ///         },
        ///         KubernetesConfig = new Volcengine.Vke.Inputs.NodePoolKubernetesConfigArgs
        ///         {
        ///             Labels = new[]
        ///             {
        ///                 new Volcengine.Vke.Inputs.NodePoolKubernetesConfigLabelArgs
        ///                 {
        ///                     Key = "label1",
        ///                     Value = "value1",
        ///                 },
        ///             },
        ///             Taints = new[]
        ///             {
        ///                 new Volcengine.Vke.Inputs.NodePoolKubernetesConfigTaintArgs
        ///                 {
        ///                     Key = "taint-key/node-type",
        ///                     Value = "taint-value",
        ///                     Effect = "NoSchedule",
        ///                 },
        ///             },
        ///             Cordon = true,
        ///         },
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vke.Inputs.NodePoolTagArgs
        ///             {
        ///                 Key = "node-pool-k1",
        ///                 Value = "node-pool-v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooInstance = new List&lt;Volcengine.Ecs.Instance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooInstance.Add(new Volcengine.Ecs.Instance($"fooInstance-{range.Value}", new()
        ///         {
        ///             InstanceName = $"acc-test-ecs-{range.Value}",
        ///             HostName = "tf-acc-test",
        ///             ImageId = .Where(image =&gt; image.ImageName == "veLinux 1.0 CentOS兼容版 64位").Select(image =&gt; 
        ///             {
        ///                 return image.ImageId;
        ///             }).ToList()[0],
        ///             InstanceType = "ecs.g1ie.xlarge",
        ///             Password = "93f0cb0614Aab12",
        ///             InstanceChargeType = "PostPaid",
        ///             SystemVolumeType = "ESSD_PL0",
        ///             SystemVolumeSize = 50,
        ///             DataVolumes = new[]
        ///             {
        ///                 new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs
        ///                 {
        ///                     VolumeType = "ESSD_PL0",
        ///                     Size = 50,
        ///                     DeleteWithInstance = true,
        ///                 },
        ///             },
        ///             SubnetId = fooSubnet.Id,
        ///             SecurityGroupIds = new[]
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Ecs.Inputs.InstanceTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooNode = new List&lt;Volcengine.Vke.Node&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooNode.Add(new Volcengine.Vke.Node($"fooNode-{range.Value}", new()
        ///         {
        ///             ClusterId = fooCluster.Id,
        ///             InstanceId = fooInstance[range.Value].Id,
        ///             NodePoolId = fooNodePool.Id,
        ///         }));
        ///     }
        ///     var fooNodes = Volcengine.Vke.GetNodes.Invoke(new()
        ///     {
        ///         Ids = fooNode.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetNodesResult> Invoke(GetNodesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetNodesResult>("volcengine:vke/getNodes:getNodes", args ?? new GetNodesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetNodesArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private List<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public List<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new List<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// The Create Client Token.
        /// </summary>
        [Input("createClientToken")]
        public string? CreateClientToken { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Node IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Name of Node.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A Name Regex of Node.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("nodePoolIds")]
        private List<string>? _nodePoolIds;

        /// <summary>
        /// The Node Pool IDs.
        /// </summary>
        public List<string> NodePoolIds
        {
            get => _nodePoolIds ?? (_nodePoolIds = new List<string>());
            set => _nodePoolIds = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<Inputs.GetNodesStatusArgs>? _statuses;

        /// <summary>
        /// The Status of filter.
        /// </summary>
        public List<Inputs.GetNodesStatusArgs> Statuses
        {
            get => _statuses ?? (_statuses = new List<Inputs.GetNodesStatusArgs>());
            set => _statuses = value;
        }

        [Input("zoneIds")]
        private List<string>? _zoneIds;

        /// <summary>
        /// The Zone IDs.
        /// </summary>
        public List<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new List<string>());
            set => _zoneIds = value;
        }

        public GetNodesArgs()
        {
        }
        public static new GetNodesArgs Empty => new GetNodesArgs();
    }

    public sealed class GetNodesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private InputList<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// The Create Client Token.
        /// </summary>
        [Input("createClientToken")]
        public Input<string>? CreateClientToken { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Node IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Name of Node.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Name Regex of Node.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("nodePoolIds")]
        private InputList<string>? _nodePoolIds;

        /// <summary>
        /// The Node Pool IDs.
        /// </summary>
        public InputList<string> NodePoolIds
        {
            get => _nodePoolIds ?? (_nodePoolIds = new InputList<string>());
            set => _nodePoolIds = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<Inputs.GetNodesStatusInputArgs>? _statuses;

        /// <summary>
        /// The Status of filter.
        /// </summary>
        public InputList<Inputs.GetNodesStatusInputArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.GetNodesStatusInputArgs>());
            set => _statuses = value;
        }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The Zone IDs.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public GetNodesInvokeArgs()
        {
        }
        public static new GetNodesInvokeArgs Empty => new GetNodesInvokeArgs();
    }


    [OutputType]
    public sealed class GetNodesResult
    {
        public readonly ImmutableArray<string> ClusterIds;
        /// <summary>
        /// The create client token of node.
        /// </summary>
        public readonly string? CreateClientToken;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The name of Node.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly ImmutableArray<string> NodePoolIds;
        /// <summary>
        /// The collection of Node query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNodesNodeResult> Nodes;
        public readonly string? OutputFile;
        public readonly ImmutableArray<Outputs.GetNodesStatusResult> Statuses;
        /// <summary>
        /// The total count of Node query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> ZoneIds;

        [OutputConstructor]
        private GetNodesResult(
            ImmutableArray<string> clusterIds,

            string? createClientToken,

            string id,

            ImmutableArray<string> ids,

            string? name,

            string? nameRegex,

            ImmutableArray<string> nodePoolIds,

            ImmutableArray<Outputs.GetNodesNodeResult> nodes,

            string? outputFile,

            ImmutableArray<Outputs.GetNodesStatusResult> statuses,

            int totalCount,

            ImmutableArray<string> zoneIds)
        {
            ClusterIds = clusterIds;
            CreateClientToken = createClientToken;
            Id = id;
            Ids = ids;
            Name = name;
            NameRegex = nameRegex;
            NodePoolIds = nodePoolIds;
            Nodes = nodes;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
            ZoneIds = zoneIds;
        }
    }
}
