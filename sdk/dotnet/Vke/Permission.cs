// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vke
{
    /// <summary>
    /// Provides a resource to manage vke permission
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     // create vpc
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     // create subnet
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     // create security group
    ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
    ///     {
    ///         SecurityGroupName = "acc-test-security-group",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     // create vke cluster
    ///     var fooCluster = new Volcengine.Vke.Cluster("fooCluster", new()
    ///     {
    ///         Description = "created by terraform",
    ///         ProjectName = "default",
    ///         DeleteProtectionEnabled = false,
    ///         ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs
    ///         {
    ///             SubnetIds = new[]
    ///             {
    ///                 fooSubnet.Id,
    ///             },
    ///             ApiServerPublicAccessEnabled = true,
    ///             ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
    ///             {
    ///                 PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
    ///                 {
    ///                     BillingType = "PostPaidByBandwidth",
    ///                     Bandwidth = 1,
    ///                 },
    ///             },
    ///             ResourcePublicAccessDefaultEnabled = true,
    ///         },
    ///         PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs
    ///         {
    ///             PodNetworkMode = "VpcCniShared",
    ///             VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs
    ///             {
    ///                 SubnetIds = new[]
    ///                 {
    ///                     fooSubnet.Id,
    ///                 },
    ///             },
    ///         },
    ///         ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs
    ///         {
    ///             ServiceCidrsv4s = new[]
    ///             {
    ///                 "172.30.0.0/18",
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vke.Inputs.ClusterTagArgs
    ///             {
    ///                 Key = "tf-k1",
    ///                 Value = "tf-v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooPermission = new Volcengine.Vke.Permission("fooPermission", new()
    ///     {
    ///         RoleName = "vke:visitor",
    ///         GranteeId = 385500000,
    ///         GranteeType = "User",
    ///         RoleDomain = "cluster",
    ///         ClusterId = fooCluster.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VkePermission can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vke/permission:Permission default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vke/permission:Permission")]
    public partial class Permission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The authorized time of the RBAC Permission.
        /// </summary>
        [Output("authorizedAt")]
        public Output<string> AuthorizedAt { get; private set; } = null!;

        /// <summary>
        /// The ID of the Authorizer.
        /// </summary>
        [Output("authorizerId")]
        public Output<int> AuthorizerId { get; private set; } = null!;

        /// <summary>
        /// The name of the Authorizer.
        /// </summary>
        [Output("authorizerName")]
        public Output<string> AuthorizerName { get; private set; } = null!;

        /// <summary>
        /// The type of the Authorizer.
        /// </summary>
        [Output("authorizerType")]
        public Output<string> AuthorizerType { get; private set; } = null!;

        /// <summary>
        /// The cluster ID that needs to be authorized to IAM users or roles.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The granted time of the RBAC Permission.
        /// </summary>
        [Output("grantedAt")]
        public Output<string> GrantedAt { get; private set; } = null!;

        /// <summary>
        /// The ID of the grantee.
        /// </summary>
        [Output("granteeId")]
        public Output<int> GranteeId { get; private set; } = null!;

        /// <summary>
        /// The type of the grantee. Valid values: `User`.
        /// </summary>
        [Output("granteeType")]
        public Output<string> GranteeType { get; private set; } = null!;

        /// <summary>
        /// Whether the RBAC role is a custom role. Default is false.
        /// </summary>
        [Output("isCustomRole")]
        public Output<bool> IsCustomRole { get; private set; } = null!;

        /// <summary>
        /// The name of the Kube Role Binding.
        /// </summary>
        [Output("kubeRoleBindingName")]
        public Output<string> KubeRoleBindingName { get; private set; } = null!;

        /// <summary>
        /// The message of the RBAC Permission.
        /// </summary>
        [Output("message")]
        public Output<string> Message { get; private set; } = null!;

        /// <summary>
        /// The namespace that needs to be authorized to IAM users or roles.
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// The revoked time of the RBAC Permission.
        /// </summary>
        [Output("revokedAt")]
        public Output<string> RevokedAt { get; private set; } = null!;

        /// <summary>
        /// The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("roleDomain")]
        public Output<string> RoleDomain { get; private set; } = null!;

        /// <summary>
        /// The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        /// </summary>
        [Output("roleName")]
        public Output<string> RoleName { get; private set; } = null!;

        /// <summary>
        /// The status of the RBAC Permission.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Permission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Permission(string name, PermissionArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vke/permission:Permission", name, args ?? new PermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Permission(string name, Input<string> id, PermissionState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vke/permission:Permission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Permission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Permission Get(string name, Input<string> id, PermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new Permission(name, id, state, options);
        }
    }

    public sealed class PermissionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The cluster ID that needs to be authorized to IAM users or roles.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The ID of the grantee.
        /// </summary>
        [Input("granteeId", required: true)]
        public Input<int> GranteeId { get; set; } = null!;

        /// <summary>
        /// The type of the grantee. Valid values: `User`.
        /// </summary>
        [Input("granteeType", required: true)]
        public Input<string> GranteeType { get; set; } = null!;

        /// <summary>
        /// Whether the RBAC role is a custom role. Default is false.
        /// </summary>
        [Input("isCustomRole")]
        public Input<bool>? IsCustomRole { get; set; }

        /// <summary>
        /// The namespace that needs to be authorized to IAM users or roles.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("roleDomain", required: true)]
        public Input<string> RoleDomain { get; set; } = null!;

        /// <summary>
        /// The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        public PermissionArgs()
        {
        }
        public static new PermissionArgs Empty => new PermissionArgs();
    }

    public sealed class PermissionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authorized time of the RBAC Permission.
        /// </summary>
        [Input("authorizedAt")]
        public Input<string>? AuthorizedAt { get; set; }

        /// <summary>
        /// The ID of the Authorizer.
        /// </summary>
        [Input("authorizerId")]
        public Input<int>? AuthorizerId { get; set; }

        /// <summary>
        /// The name of the Authorizer.
        /// </summary>
        [Input("authorizerName")]
        public Input<string>? AuthorizerName { get; set; }

        /// <summary>
        /// The type of the Authorizer.
        /// </summary>
        [Input("authorizerType")]
        public Input<string>? AuthorizerType { get; set; }

        /// <summary>
        /// The cluster ID that needs to be authorized to IAM users or roles.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The granted time of the RBAC Permission.
        /// </summary>
        [Input("grantedAt")]
        public Input<string>? GrantedAt { get; set; }

        /// <summary>
        /// The ID of the grantee.
        /// </summary>
        [Input("granteeId")]
        public Input<int>? GranteeId { get; set; }

        /// <summary>
        /// The type of the grantee. Valid values: `User`.
        /// </summary>
        [Input("granteeType")]
        public Input<string>? GranteeType { get; set; }

        /// <summary>
        /// Whether the RBAC role is a custom role. Default is false.
        /// </summary>
        [Input("isCustomRole")]
        public Input<bool>? IsCustomRole { get; set; }

        /// <summary>
        /// The name of the Kube Role Binding.
        /// </summary>
        [Input("kubeRoleBindingName")]
        public Input<string>? KubeRoleBindingName { get; set; }

        /// <summary>
        /// The message of the RBAC Permission.
        /// </summary>
        [Input("message")]
        public Input<string>? Message { get; set; }

        /// <summary>
        /// The namespace that needs to be authorized to IAM users or roles.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The revoked time of the RBAC Permission.
        /// </summary>
        [Input("revokedAt")]
        public Input<string>? RevokedAt { get; set; }

        /// <summary>
        /// The types of permissions granted to IAM users or roles. Valid values: `namespace`, `cluster`, `all_clusters`. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("roleDomain")]
        public Input<string>? RoleDomain { get; set; }

        /// <summary>
        /// The name of RBAC role. The following RBAC permissions can be granted: custom role name, system preset role names.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        /// <summary>
        /// The status of the RBAC Permission.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public PermissionState()
        {
        }
        public static new PermissionState Empty => new PermissionState();
    }
}
