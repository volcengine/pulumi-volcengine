// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vke
{
    public static class GetKubeconfigs
    {
        /// <summary>
        /// Use this data source to query detailed information of vke kubeconfigs
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooCluster = new Volcengine.Vke.Cluster("fooCluster", new()
        ///     {
        ///         Description = "created by terraform",
        ///         DeleteProtectionEnabled = false,
        ///         ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs
        ///         {
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             ApiServerPublicAccessEnabled = true,
        ///             ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
        ///             {
        ///                 PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
        ///                 {
        ///                     BillingType = "PostPaidByBandwidth",
        ///                     Bandwidth = 1,
        ///                 },
        ///             },
        ///             ResourcePublicAccessDefaultEnabled = true,
        ///         },
        ///         PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs
        ///         {
        ///             PodNetworkMode = "VpcCniShared",
        ///             VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs
        ///             {
        ///                 SubnetIds = new[]
        ///                 {
        ///                     fooSubnet.Id,
        ///                 },
        ///             },
        ///         },
        ///         ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs
        ///         {
        ///             ServiceCidrsv4s = new[]
        ///             {
        ///                 "172.30.0.0/18",
        ///             },
        ///         },
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vke.Inputs.ClusterTagArgs
        ///             {
        ///                 Key = "tf-k1",
        ///                 Value = "tf-v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var foo1 = new Volcengine.Vke.Kubeconfig("foo1", new()
        ///     {
        ///         ClusterId = fooCluster.Id,
        ///         Type = "Private",
        ///         ValidDuration = 2,
        ///     });
        /// 
        ///     var foo2 = new Volcengine.Vke.Kubeconfig("foo2", new()
        ///     {
        ///         ClusterId = fooCluster.Id,
        ///         Type = "Public",
        ///         ValidDuration = 2,
        ///     });
        /// 
        ///     var fooKubeconfigs = Volcengine.Vke.GetKubeconfigs.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             foo1.Id,
        ///             foo2.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetKubeconfigsResult> InvokeAsync(GetKubeconfigsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKubeconfigsResult>("volcengine:vke/getKubeconfigs:getKubeconfigs", args ?? new GetKubeconfigsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vke kubeconfigs
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooCluster = new Volcengine.Vke.Cluster("fooCluster", new()
        ///     {
        ///         Description = "created by terraform",
        ///         DeleteProtectionEnabled = false,
        ///         ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs
        ///         {
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             ApiServerPublicAccessEnabled = true,
        ///             ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
        ///             {
        ///                 PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
        ///                 {
        ///                     BillingType = "PostPaidByBandwidth",
        ///                     Bandwidth = 1,
        ///                 },
        ///             },
        ///             ResourcePublicAccessDefaultEnabled = true,
        ///         },
        ///         PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs
        ///         {
        ///             PodNetworkMode = "VpcCniShared",
        ///             VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs
        ///             {
        ///                 SubnetIds = new[]
        ///                 {
        ///                     fooSubnet.Id,
        ///                 },
        ///             },
        ///         },
        ///         ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs
        ///         {
        ///             ServiceCidrsv4s = new[]
        ///             {
        ///                 "172.30.0.0/18",
        ///             },
        ///         },
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Vke.Inputs.ClusterTagArgs
        ///             {
        ///                 Key = "tf-k1",
        ///                 Value = "tf-v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var foo1 = new Volcengine.Vke.Kubeconfig("foo1", new()
        ///     {
        ///         ClusterId = fooCluster.Id,
        ///         Type = "Private",
        ///         ValidDuration = 2,
        ///     });
        /// 
        ///     var foo2 = new Volcengine.Vke.Kubeconfig("foo2", new()
        ///     {
        ///         ClusterId = fooCluster.Id,
        ///         Type = "Public",
        ///         ValidDuration = 2,
        ///     });
        /// 
        ///     var fooKubeconfigs = Volcengine.Vke.GetKubeconfigs.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             foo1.Id,
        ///             foo2.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetKubeconfigsResult> Invoke(GetKubeconfigsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubeconfigsResult>("volcengine:vke/getKubeconfigs:getKubeconfigs", args ?? new GetKubeconfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubeconfigsArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private List<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public List<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new List<string>());
            set => _clusterIds = value;
        }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Kubeconfig IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Kubeconfig.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The page number of Kubeconfigs query.
        /// </summary>
        [Input("pageNumber")]
        public int? PageNumber { get; set; }

        /// <summary>
        /// The page size of Kubeconfigs query.
        /// </summary>
        [Input("pageSize")]
        public int? PageSize { get; set; }

        [Input("roleIds")]
        private List<int>? _roleIds;

        /// <summary>
        /// A list of Role IDs.
        /// </summary>
        public List<int> RoleIds
        {
            get => _roleIds ?? (_roleIds = new List<int>());
            set => _roleIds = value;
        }

        [Input("types")]
        private List<string>? _types;

        /// <summary>
        /// The type of Kubeconfigs query.
        /// </summary>
        public List<string> Types
        {
            get => _types ?? (_types = new List<string>());
            set => _types = value;
        }

        [Input("userIds")]
        private List<int>? _userIds;

        /// <summary>
        /// A list of User IDs.
        /// </summary>
        public List<int> UserIds
        {
            get => _userIds ?? (_userIds = new List<int>());
            set => _userIds = value;
        }

        public GetKubeconfigsArgs()
        {
        }
        public static new GetKubeconfigsArgs Empty => new GetKubeconfigsArgs();
    }

    public sealed class GetKubeconfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private InputList<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Kubeconfig IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Kubeconfig.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The page number of Kubeconfigs query.
        /// </summary>
        [Input("pageNumber")]
        public Input<int>? PageNumber { get; set; }

        /// <summary>
        /// The page size of Kubeconfigs query.
        /// </summary>
        [Input("pageSize")]
        public Input<int>? PageSize { get; set; }

        [Input("roleIds")]
        private InputList<int>? _roleIds;

        /// <summary>
        /// A list of Role IDs.
        /// </summary>
        public InputList<int> RoleIds
        {
            get => _roleIds ?? (_roleIds = new InputList<int>());
            set => _roleIds = value;
        }

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// The type of Kubeconfigs query.
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        [Input("userIds")]
        private InputList<int>? _userIds;

        /// <summary>
        /// A list of User IDs.
        /// </summary>
        public InputList<int> UserIds
        {
            get => _userIds ?? (_userIds = new InputList<int>());
            set => _userIds = value;
        }

        public GetKubeconfigsInvokeArgs()
        {
        }
        public static new GetKubeconfigsInvokeArgs Empty => new GetKubeconfigsInvokeArgs();
    }


    [OutputType]
    public sealed class GetKubeconfigsResult
    {
        public readonly ImmutableArray<string> ClusterIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The collection of VkeKubeconfig query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetKubeconfigsKubeconfigResult> Kubeconfigs;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        public readonly int PageNumber;
        public readonly int PageSize;
        public readonly ImmutableArray<int> RoleIds;
        /// <summary>
        /// The total count of Kubeconfig query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> Types;
        public readonly ImmutableArray<int> UserIds;

        [OutputConstructor]
        private GetKubeconfigsResult(
            ImmutableArray<string> clusterIds,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetKubeconfigsKubeconfigResult> kubeconfigs,

            string? nameRegex,

            string? outputFile,

            int pageNumber,

            int pageSize,

            ImmutableArray<int> roleIds,

            int totalCount,

            ImmutableArray<string> types,

            ImmutableArray<int> userIds)
        {
            ClusterIds = clusterIds;
            Id = id;
            Ids = ids;
            Kubeconfigs = kubeconfigs;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            PageNumber = pageNumber;
            PageSize = pageSize;
            RoleIds = roleIds;
            TotalCount = totalCount;
            Types = types;
            UserIds = userIds;
        }
    }
}
