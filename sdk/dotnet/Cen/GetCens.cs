// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cen
{
    public static class GetCens
    {
        /// <summary>
        /// Use this data source to query detailed information of cens
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooCen = new List&lt;Volcengine.Cen.Cen&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooCen.Add(new Volcengine.Cen.Cen($"fooCen-{range.Value}", new()
        ///         {
        ///             CenName = "acc-test-cen",
        ///             Description = "acc-test",
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Cen.Inputs.CenTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooCens = Volcengine.Cen.GetCens.Invoke(new()
        ///     {
        ///         Ids = fooCen.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCensResult> InvokeAsync(GetCensArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCensResult>("volcengine:cen/getCens:getCens", args ?? new GetCensArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cens
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooCen = new List&lt;Volcengine.Cen.Cen&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooCen.Add(new Volcengine.Cen.Cen($"fooCen-{range.Value}", new()
        ///         {
        ///             CenName = "acc-test-cen",
        ///             Description = "acc-test",
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Cen.Inputs.CenTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooCens = Volcengine.Cen.GetCens.Invoke(new()
        ///     {
        ///         Ids = fooCen.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCensResult> Invoke(GetCensInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCensResult>("volcengine:cen/getCens:getCens", args ?? new GetCensInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCensArgs : global::Pulumi.InvokeArgs
    {
        [Input("cenNames")]
        private List<string>? _cenNames;

        /// <summary>
        /// A list of cen names.
        /// </summary>
        public List<string> CenNames
        {
            get => _cenNames ?? (_cenNames = new List<string>());
            set => _cenNames = value;
        }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of cen IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of cen.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("tags")]
        private List<Inputs.GetCensTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetCensTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetCensTagArgs>());
            set => _tags = value;
        }

        public GetCensArgs()
        {
        }
        public static new GetCensArgs Empty => new GetCensArgs();
    }

    public sealed class GetCensInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("cenNames")]
        private InputList<string>? _cenNames;

        /// <summary>
        /// A list of cen names.
        /// </summary>
        public InputList<string> CenNames
        {
            get => _cenNames ?? (_cenNames = new InputList<string>());
            set => _cenNames = value;
        }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of cen IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of cen.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetCensTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetCensTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetCensTagInputArgs>());
            set => _tags = value;
        }

        public GetCensInvokeArgs()
        {
        }
        public static new GetCensInvokeArgs Empty => new GetCensInvokeArgs();
    }


    [OutputType]
    public sealed class GetCensResult
    {
        public readonly ImmutableArray<string> CenNames;
        /// <summary>
        /// The collection of cen query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCensCenResult> Cens;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCensTagResult> Tags;
        /// <summary>
        /// The total count of cen query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetCensResult(
            ImmutableArray<string> cenNames,

            ImmutableArray<Outputs.GetCensCenResult> cens,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<Outputs.GetCensTagResult> tags,

            int totalCount)
        {
            CenNames = cenNames;
            Cens = cens;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Tags = tags;
            TotalCount = totalCount;
        }
    }
}
