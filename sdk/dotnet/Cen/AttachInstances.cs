// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cen
{
    [Obsolete(@"volcengine.cen.AttachInstances has been deprecated in favor of volcengine.cen.getAttachInstances")]
    public static class AttachInstances
    {
        /// <summary>
        /// Use this data source to query detailed information of cen attach instances
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooCen = new Volcengine.Cen.Cen("fooCen", new()
        ///     {
        ///         CenName = "acc-test-cen",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.CenTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooAttachInstance = new Volcengine.Cen.AttachInstance("fooAttachInstance", new()
        ///     {
        ///         CenId = fooCen.Id,
        ///         InstanceId = fooVpc.Id,
        ///         InstanceRegionId = "cn-beijing",
        ///         InstanceType = "VPC",
        ///     });
        /// 
        ///     var fooAttachInstances = Volcengine.Cen.GetAttachInstances.Invoke(new()
        ///     {
        ///         CenId = fooAttachInstance.CenId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<AttachInstancesResult> InvokeAsync(AttachInstancesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<AttachInstancesResult>("volcengine:cen/attachInstances:AttachInstances", args ?? new AttachInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cen attach instances
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooCen = new Volcengine.Cen.Cen("fooCen", new()
        ///     {
        ///         CenName = "acc-test-cen",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.CenTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooAttachInstance = new Volcengine.Cen.AttachInstance("fooAttachInstance", new()
        ///     {
        ///         CenId = fooCen.Id,
        ///         InstanceId = fooVpc.Id,
        ///         InstanceRegionId = "cn-beijing",
        ///         InstanceType = "VPC",
        ///     });
        /// 
        ///     var fooAttachInstances = Volcengine.Cen.GetAttachInstances.Invoke(new()
        ///     {
        ///         CenId = fooAttachInstance.CenId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<AttachInstancesResult> Invoke(AttachInstancesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<AttachInstancesResult>("volcengine:cen/attachInstances:AttachInstances", args ?? new AttachInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class AttachInstancesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A cen ID.
        /// </summary>
        [Input("cenId")]
        public string? CenId { get; set; }

        /// <summary>
        /// An instance ID.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// A region id of instance.
        /// </summary>
        [Input("instanceRegionId")]
        public string? InstanceRegionId { get; set; }

        /// <summary>
        /// An instance type.
        /// </summary>
        [Input("instanceType")]
        public string? InstanceType { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public AttachInstancesArgs()
        {
        }
        public static new AttachInstancesArgs Empty => new AttachInstancesArgs();
    }

    public sealed class AttachInstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A cen ID.
        /// </summary>
        [Input("cenId")]
        public Input<string>? CenId { get; set; }

        /// <summary>
        /// An instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// A region id of instance.
        /// </summary>
        [Input("instanceRegionId")]
        public Input<string>? InstanceRegionId { get; set; }

        /// <summary>
        /// An instance type.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public AttachInstancesInvokeArgs()
        {
        }
        public static new AttachInstancesInvokeArgs Empty => new AttachInstancesInvokeArgs();
    }


    [OutputType]
    public sealed class AttachInstancesResult
    {
        /// <summary>
        /// The collection of cen attach instance query.
        /// </summary>
        public readonly ImmutableArray<Outputs.AttachInstancesAttachInstanceResult> AttachInstances;
        /// <summary>
        /// The ID of the cen.
        /// </summary>
        public readonly string? CenId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the instance.
        /// </summary>
        public readonly string? InstanceId;
        /// <summary>
        /// The region id of the instance.
        /// </summary>
        public readonly string? InstanceRegionId;
        /// <summary>
        /// The type of the instance.
        /// </summary>
        public readonly string? InstanceType;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of cen attach instance query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private AttachInstancesResult(
            ImmutableArray<Outputs.AttachInstancesAttachInstanceResult> attachInstances,

            string? cenId,

            string id,

            string? instanceId,

            string? instanceRegionId,

            string? instanceType,

            string? outputFile,

            int totalCount)
        {
            AttachInstances = attachInstances;
            CenId = cenId;
            Id = id;
            InstanceId = instanceId;
            InstanceRegionId = instanceRegionId;
            InstanceType = instanceType;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
