// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cen
{
    public static class GetInterRegionBandwidths
    {
        /// <summary>
        /// Use this data source to query detailed information of cen inter region bandwidths
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooCen = new Volcengine.Cen.Cen("fooCen", new()
        ///     {
        ///         CenName = "acc-test-cen",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.CenTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooBandwidthPackage = new Volcengine.Cen.BandwidthPackage("fooBandwidthPackage", new()
        ///     {
        ///         LocalGeographicRegionSetId = "China",
        ///         PeerGeographicRegionSetId = "China",
        ///         Bandwidth = 5,
        ///         CenBandwidthPackageName = "acc-test-cen-bp",
        ///         Description = "acc-test",
        ///         BillingType = "PrePaid",
        ///         PeriodUnit = "Month",
        ///         Period = 1,
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.BandwidthPackageTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooBandwidthPackageAssociate = new Volcengine.Cen.BandwidthPackageAssociate("fooBandwidthPackageAssociate", new()
        ///     {
        ///         CenBandwidthPackageId = fooBandwidthPackage.Id,
        ///         CenId = fooCen.Id,
        ///     });
        /// 
        ///     var fooInterRegionBandwidth = new Volcengine.Cen.InterRegionBandwidth("fooInterRegionBandwidth", new()
        ///     {
        ///         CenId = fooCen.Id,
        ///         LocalRegionId = "cn-beijing",
        ///         PeerRegionId = "cn-shanghai",
        ///         Bandwidth = 2,
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             fooBandwidthPackageAssociate,
        ///         },
        ///     });
        /// 
        ///     var fooInterRegionBandwidths = Volcengine.Cen.GetInterRegionBandwidths.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooInterRegionBandwidth.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInterRegionBandwidthsResult> InvokeAsync(GetInterRegionBandwidthsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInterRegionBandwidthsResult>("volcengine:cen/getInterRegionBandwidths:getInterRegionBandwidths", args ?? new GetInterRegionBandwidthsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cen inter region bandwidths
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooCen = new Volcengine.Cen.Cen("fooCen", new()
        ///     {
        ///         CenName = "acc-test-cen",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.CenTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooBandwidthPackage = new Volcengine.Cen.BandwidthPackage("fooBandwidthPackage", new()
        ///     {
        ///         LocalGeographicRegionSetId = "China",
        ///         PeerGeographicRegionSetId = "China",
        ///         Bandwidth = 5,
        ///         CenBandwidthPackageName = "acc-test-cen-bp",
        ///         Description = "acc-test",
        ///         BillingType = "PrePaid",
        ///         PeriodUnit = "Month",
        ///         Period = 1,
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.BandwidthPackageTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooBandwidthPackageAssociate = new Volcengine.Cen.BandwidthPackageAssociate("fooBandwidthPackageAssociate", new()
        ///     {
        ///         CenBandwidthPackageId = fooBandwidthPackage.Id,
        ///         CenId = fooCen.Id,
        ///     });
        /// 
        ///     var fooInterRegionBandwidth = new Volcengine.Cen.InterRegionBandwidth("fooInterRegionBandwidth", new()
        ///     {
        ///         CenId = fooCen.Id,
        ///         LocalRegionId = "cn-beijing",
        ///         PeerRegionId = "cn-shanghai",
        ///         Bandwidth = 2,
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             fooBandwidthPackageAssociate,
        ///         },
        ///     });
        /// 
        ///     var fooInterRegionBandwidths = Volcengine.Cen.GetInterRegionBandwidths.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooInterRegionBandwidth.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInterRegionBandwidthsResult> Invoke(GetInterRegionBandwidthsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterRegionBandwidthsResult>("volcengine:cen/getInterRegionBandwidths:getInterRegionBandwidths", args ?? new GetInterRegionBandwidthsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInterRegionBandwidthsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the cen.
        /// </summary>
        [Input("cenId")]
        public string? CenId { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of cen inter region bandwidth IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetInterRegionBandwidthsArgs()
        {
        }
        public static new GetInterRegionBandwidthsArgs Empty => new GetInterRegionBandwidthsArgs();
    }

    public sealed class GetInterRegionBandwidthsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the cen.
        /// </summary>
        [Input("cenId")]
        public Input<string>? CenId { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of cen inter region bandwidth IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetInterRegionBandwidthsInvokeArgs()
        {
        }
        public static new GetInterRegionBandwidthsInvokeArgs Empty => new GetInterRegionBandwidthsInvokeArgs();
    }


    [OutputType]
    public sealed class GetInterRegionBandwidthsResult
    {
        /// <summary>
        /// The cen ID of the cen inter region bandwidth.
        /// </summary>
        public readonly string? CenId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The collection of cen inter region bandwidth query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterRegionBandwidthsInterRegionBandwidthResult> InterRegionBandwidths;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of cen inter region bandwidth query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetInterRegionBandwidthsResult(
            string? cenId,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetInterRegionBandwidthsInterRegionBandwidthResult> interRegionBandwidths,

            string? outputFile,

            int totalCount)
        {
            CenId = cenId;
            Id = id;
            Ids = ids;
            InterRegionBandwidths = interRegionBandwidths;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
