// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cen
{
    [Obsolete(@"volcengine.cen.ServiceRouteEntries has been deprecated in favor of volcengine.cen.getServiceRouteEntries")]
    public static class ServiceRouteEntries
    {
        /// <summary>
        /// Use this data source to query detailed information of cen service route entries
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new List&lt;Volcengine.Vpc.Vpc&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooVpc.Add(new Volcengine.Vpc.Vpc($"fooVpc-{range.Value}", new()
        ///         {
        ///             VpcName = "acc-test-vpc",
        ///             CidrBlock = "172.16.0.0/16",
        ///         }));
        ///     }
        ///     var fooCen = new Volcengine.Cen.Cen("fooCen", new()
        ///     {
        ///         CenName = "acc-test-cen",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.CenTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooAttachInstance = new List&lt;Volcengine.Cen.AttachInstance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooAttachInstance.Add(new Volcengine.Cen.AttachInstance($"fooAttachInstance-{range.Value}", new()
        ///         {
        ///             CenId = fooCen.Id,
        ///             InstanceId = fooVpc[range.Value].Id,
        ///             InstanceRegionId = "cn-beijing",
        ///             InstanceType = "VPC",
        ///         }));
        ///     }
        ///     var fooServiceRouteEntry = new Volcengine.Cen.ServiceRouteEntry("fooServiceRouteEntry", new()
        ///     {
        ///         CenId = fooCen.Id,
        ///         DestinationCidrBlock = "100.64.0.0/11",
        ///         ServiceRegionId = "cn-beijing",
        ///         ServiceVpcId = fooAttachInstance[0].InstanceId,
        ///         Description = "acc-test",
        ///         PublishMode = "Custom",
        ///         PublishToInstances = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs
        ///             {
        ///                 InstanceRegionId = "cn-beijing",
        ///                 InstanceType = "VPC",
        ///                 InstanceId = fooAttachInstance[1].InstanceId,
        ///             },
        ///             new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs
        ///             {
        ///                 InstanceRegionId = "cn-beijing",
        ///                 InstanceType = "VPC",
        ///                 InstanceId = fooAttachInstance[2].InstanceId,
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooServiceRouteEntries = Volcengine.Cen.GetServiceRouteEntries.Invoke(new()
        ///     {
        ///         CenId = fooCen.Id,
        ///         DestinationCidrBlock = fooServiceRouteEntry.DestinationCidrBlock,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<ServiceRouteEntriesResult> InvokeAsync(ServiceRouteEntriesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ServiceRouteEntriesResult>("volcengine:cen/serviceRouteEntries:ServiceRouteEntries", args ?? new ServiceRouteEntriesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cen service route entries
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new List&lt;Volcengine.Vpc.Vpc&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooVpc.Add(new Volcengine.Vpc.Vpc($"fooVpc-{range.Value}", new()
        ///         {
        ///             VpcName = "acc-test-vpc",
        ///             CidrBlock = "172.16.0.0/16",
        ///         }));
        ///     }
        ///     var fooCen = new Volcengine.Cen.Cen("fooCen", new()
        ///     {
        ///         CenName = "acc-test-cen",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.CenTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooAttachInstance = new List&lt;Volcengine.Cen.AttachInstance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooAttachInstance.Add(new Volcengine.Cen.AttachInstance($"fooAttachInstance-{range.Value}", new()
        ///         {
        ///             CenId = fooCen.Id,
        ///             InstanceId = fooVpc[range.Value].Id,
        ///             InstanceRegionId = "cn-beijing",
        ///             InstanceType = "VPC",
        ///         }));
        ///     }
        ///     var fooServiceRouteEntry = new Volcengine.Cen.ServiceRouteEntry("fooServiceRouteEntry", new()
        ///     {
        ///         CenId = fooCen.Id,
        ///         DestinationCidrBlock = "100.64.0.0/11",
        ///         ServiceRegionId = "cn-beijing",
        ///         ServiceVpcId = fooAttachInstance[0].InstanceId,
        ///         Description = "acc-test",
        ///         PublishMode = "Custom",
        ///         PublishToInstances = new[]
        ///         {
        ///             new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs
        ///             {
        ///                 InstanceRegionId = "cn-beijing",
        ///                 InstanceType = "VPC",
        ///                 InstanceId = fooAttachInstance[1].InstanceId,
        ///             },
        ///             new Volcengine.Cen.Inputs.ServiceRouteEntryPublishToInstanceArgs
        ///             {
        ///                 InstanceRegionId = "cn-beijing",
        ///                 InstanceType = "VPC",
        ///                 InstanceId = fooAttachInstance[2].InstanceId,
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooServiceRouteEntries = Volcengine.Cen.GetServiceRouteEntries.Invoke(new()
        ///     {
        ///         CenId = fooCen.Id,
        ///         DestinationCidrBlock = fooServiceRouteEntry.DestinationCidrBlock,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<ServiceRouteEntriesResult> Invoke(ServiceRouteEntriesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ServiceRouteEntriesResult>("volcengine:cen/serviceRouteEntries:ServiceRouteEntries", args ?? new ServiceRouteEntriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ServiceRouteEntriesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A cen ID.
        /// </summary>
        [Input("cenId")]
        public string? CenId { get; set; }

        /// <summary>
        /// A destination cidr block.
        /// </summary>
        [Input("destinationCidrBlock")]
        public string? DestinationCidrBlock { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// A service region id.
        /// </summary>
        [Input("serviceRegionId")]
        public string? ServiceRegionId { get; set; }

        /// <summary>
        /// A service VPC id.
        /// </summary>
        [Input("serviceVpcId")]
        public string? ServiceVpcId { get; set; }

        public ServiceRouteEntriesArgs()
        {
        }
        public static new ServiceRouteEntriesArgs Empty => new ServiceRouteEntriesArgs();
    }

    public sealed class ServiceRouteEntriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A cen ID.
        /// </summary>
        [Input("cenId")]
        public Input<string>? CenId { get; set; }

        /// <summary>
        /// A destination cidr block.
        /// </summary>
        [Input("destinationCidrBlock")]
        public Input<string>? DestinationCidrBlock { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// A service region id.
        /// </summary>
        [Input("serviceRegionId")]
        public Input<string>? ServiceRegionId { get; set; }

        /// <summary>
        /// A service VPC id.
        /// </summary>
        [Input("serviceVpcId")]
        public Input<string>? ServiceVpcId { get; set; }

        public ServiceRouteEntriesInvokeArgs()
        {
        }
        public static new ServiceRouteEntriesInvokeArgs Empty => new ServiceRouteEntriesInvokeArgs();
    }


    [OutputType]
    public sealed class ServiceRouteEntriesResult
    {
        /// <summary>
        /// The cen ID of the cen service route entry.
        /// </summary>
        public readonly string? CenId;
        /// <summary>
        /// The destination cidr block of the cen service route entry.
        /// </summary>
        public readonly string? DestinationCidrBlock;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The service region id of the cen service route entry.
        /// </summary>
        public readonly string? ServiceRegionId;
        /// <summary>
        /// The collection of cen service route entry query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServiceRouteEntriesServiceRouteEntryResult> ServiceRouteEntries;
        /// <summary>
        /// The service VPC id of the cen service route entry.
        /// </summary>
        public readonly string? ServiceVpcId;
        /// <summary>
        /// The total count of cen service route entry.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private ServiceRouteEntriesResult(
            string? cenId,

            string? destinationCidrBlock,

            string id,

            string? outputFile,

            string? serviceRegionId,

            ImmutableArray<Outputs.ServiceRouteEntriesServiceRouteEntryResult> serviceRouteEntries,

            string? serviceVpcId,

            int totalCount)
        {
            CenId = cenId;
            DestinationCidrBlock = destinationCidrBlock;
            Id = id;
            OutputFile = outputFile;
            ServiceRegionId = serviceRegionId;
            ServiceRouteEntries = serviceRouteEntries;
            ServiceVpcId = serviceVpcId;
            TotalCount = totalCount;
        }
    }
}
