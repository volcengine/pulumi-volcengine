// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Dns
{
    public static class GetRecordSets
    {
        /// <summary>
        /// Use this data source to query detailed information of dns record sets
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Dns.GetZones.Invoke(new()
        ///     {
        ///         Key = "xxx",
        ///         SearchMode = "xx",
        ///     });
        /// 
        ///     var fooRecordSets = Volcengine.Dns.GetRecordSets.Invoke(new()
        ///     {
        ///         Zid = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Zid),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRecordSetsResult> InvokeAsync(GetRecordSetsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRecordSetsResult>("volcengine:dns/getRecordSets:getRecordSets", args ?? new GetRecordSetsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dns record sets
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Dns.GetZones.Invoke(new()
        ///     {
        ///         Key = "xxx",
        ///         SearchMode = "xx",
        ///     });
        /// 
        ///     var fooRecordSets = Volcengine.Dns.GetRecordSets.Invoke(new()
        ///     {
        ///         Zid = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Zid),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRecordSetsResult> Invoke(GetRecordSetsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRecordSetsResult>("volcengine:dns/getRecordSets:getRecordSets", args ?? new GetRecordSetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRecordSetsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain prefix of the record set.
        /// </summary>
        [Input("host")]
        public string? Host { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The record set ID.
        /// </summary>
        [Input("recordSetId")]
        public string? RecordSetId { get; set; }

        /// <summary>
        /// The matching mode for Host.
        /// </summary>
        [Input("searchMode")]
        public string? SearchMode { get; set; }

        /// <summary>
        /// The domain ID.
        /// </summary>
        [Input("zid", required: true)]
        public int Zid { get; set; }

        public GetRecordSetsArgs()
        {
        }
        public static new GetRecordSetsArgs Empty => new GetRecordSetsArgs();
    }

    public sealed class GetRecordSetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The domain prefix of the record set.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The record set ID.
        /// </summary>
        [Input("recordSetId")]
        public Input<string>? RecordSetId { get; set; }

        /// <summary>
        /// The matching mode for Host.
        /// </summary>
        [Input("searchMode")]
        public Input<string>? SearchMode { get; set; }

        /// <summary>
        /// The domain ID.
        /// </summary>
        [Input("zid", required: true)]
        public Input<int> Zid { get; set; } = null!;

        public GetRecordSetsInvokeArgs()
        {
        }
        public static new GetRecordSetsInvokeArgs Empty => new GetRecordSetsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRecordSetsResult
    {
        /// <summary>
        /// The host record contained in the DNS record set.
        /// </summary>
        public readonly string? Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        public readonly string? RecordSetId;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRecordSetsRecordSetResult> RecordSets;
        public readonly string? SearchMode;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        public readonly int Zid;

        [OutputConstructor]
        private GetRecordSetsResult(
            string? host,

            string id,

            string? nameRegex,

            string? outputFile,

            string? recordSetId,

            ImmutableArray<Outputs.GetRecordSetsRecordSetResult> recordSets,

            string? searchMode,

            int totalCount,

            int zid)
        {
            Host = host;
            Id = id;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            RecordSetId = recordSetId;
            RecordSets = recordSets;
            SearchMode = searchMode;
            TotalCount = totalCount;
            Zid = zid;
        }
    }
}
