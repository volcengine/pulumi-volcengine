// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Dns
{
    /// <summary>
    /// Provides a resource to manage dns record
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Dns.Record("foo", new()
    ///     {
    ///         Host = "a.com",
    ///         Type = "A",
    ///         Value = "1.1.1.2",
    ///         Zid = 58846,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DnsRecord can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:dns/record:Record default ZID:recordId
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:dns/record:Record")]
    public partial class Record : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the domain.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Whether the DNS record is enabled.
        /// </summary>
        [Output("enable")]
        public Output<bool> Enable { get; private set; } = null!;

        /// <summary>
        /// The host record, which is the domain prefix of the subdomain.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// The value of the DNS record.
        /// </summary>
        [Output("line")]
        public Output<string> Line { get; private set; } = null!;

        /// <summary>
        /// The account ID that called this API.
        /// </summary>
        [Output("operators")]
        public Output<ImmutableArray<string>> Operators { get; private set; } = null!;

        /// <summary>
        /// The account ID that called this API.
        /// </summary>
        [Output("pqdn")]
        public Output<string> Pqdn { get; private set; } = null!;

        /// <summary>
        /// The ID of the DNS record.
        /// </summary>
        [Output("recordId")]
        public Output<string> RecordId { get; private set; } = null!;

        /// <summary>
        /// The ID of the record set where the DNS record is located.
        /// </summary>
        [Output("recordSetId")]
        public Output<string> RecordSetId { get; private set; } = null!;

        /// <summary>
        /// The remark for the DNS record.
        /// </summary>
        [Output("remark")]
        public Output<string> Remark { get; private set; } = null!;

        /// <summary>
        /// The tag information of the DNS record.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// The Time-To-Live (TTL) of the DNS record, in seconds.
        /// </summary>
        [Output("ttl")]
        public Output<int> Ttl { get; private set; } = null!;

        /// <summary>
        /// The record type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The update time of the domain.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The value of the DNS record.
        /// </summary>
        [Output("value")]
        public Output<string> Value { get; private set; } = null!;

        /// <summary>
        /// The weight of the DNS record.
        /// </summary>
        [Output("weight")]
        public Output<int> Weight { get; private set; } = null!;

        /// <summary>
        /// The ID of the domain to which you want to add a DNS record.
        /// </summary>
        [Output("zid")]
        public Output<int> Zid { get; private set; } = null!;


        /// <summary>
        /// Create a Record resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Record(string name, RecordArgs args, CustomResourceOptions? options = null)
            : base("volcengine:dns/record:Record", name, args ?? new RecordArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Record(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:dns/record:Record", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Record resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Record Get(string name, Input<string> id, RecordState? state = null, CustomResourceOptions? options = null)
        {
            return new Record(name, id, state, options);
        }
    }

    public sealed class RecordArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The host record, which is the domain prefix of the subdomain.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The value of the DNS record.
        /// </summary>
        [Input("line")]
        public Input<string>? Line { get; set; }

        /// <summary>
        /// The remark for the DNS record.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// The Time-To-Live (TTL) of the DNS record, in seconds.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The record type.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// The value of the DNS record.
        /// </summary>
        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        /// <summary>
        /// The weight of the DNS record.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        /// <summary>
        /// The ID of the domain to which you want to add a DNS record.
        /// </summary>
        [Input("zid", required: true)]
        public Input<int> Zid { get; set; } = null!;

        public RecordArgs()
        {
        }
        public static new RecordArgs Empty => new RecordArgs();
    }

    public sealed class RecordState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the domain.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Whether the DNS record is enabled.
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// The host record, which is the domain prefix of the subdomain.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The value of the DNS record.
        /// </summary>
        [Input("line")]
        public Input<string>? Line { get; set; }

        [Input("operators")]
        private InputList<string>? _operators;

        /// <summary>
        /// The account ID that called this API.
        /// </summary>
        public InputList<string> Operators
        {
            get => _operators ?? (_operators = new InputList<string>());
            set => _operators = value;
        }

        /// <summary>
        /// The account ID that called this API.
        /// </summary>
        [Input("pqdn")]
        public Input<string>? Pqdn { get; set; }

        /// <summary>
        /// The ID of the DNS record.
        /// </summary>
        [Input("recordId")]
        public Input<string>? RecordId { get; set; }

        /// <summary>
        /// The ID of the record set where the DNS record is located.
        /// </summary>
        [Input("recordSetId")]
        public Input<string>? RecordSetId { get; set; }

        /// <summary>
        /// The remark for the DNS record.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// The tag information of the DNS record.
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The Time-To-Live (TTL) of the DNS record, in seconds.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        /// <summary>
        /// The record type.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The update time of the domain.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The value of the DNS record.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// The weight of the DNS record.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        /// <summary>
        /// The ID of the domain to which you want to add a DNS record.
        /// </summary>
        [Input("zid")]
        public Input<int>? Zid { get; set; }

        public RecordState()
        {
        }
        public static new RecordState Empty => new RecordState();
    }
}
