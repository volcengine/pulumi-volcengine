// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Dns.Outputs
{

    [OutputType]
    public sealed class ZonesZoneResult
    {
        /// <summary>
        /// The list of DNS servers allocated to the domain by BytePlus DNS.
        /// </summary>
        public readonly ImmutableArray<string> AllocateDnsServerLists;
        /// <summary>
        /// Whether automatic domain renewal is enabled.
        /// </summary>
        public readonly bool AutoRenew;
        /// <summary>
        /// The most recent update time of the domain.
        /// </summary>
        public readonly int CacheStage;
        /// <summary>
        /// The creation time of the domain.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The version of DNS DDoS protection service.
        /// </summary>
        public readonly string DnsSecurity;
        /// <summary>
        /// The expiration time of the domain.
        /// </summary>
        public readonly int ExpiredTime;
        /// <summary>
        /// The id of the zone.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the instance.
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// The ID of the instance. For free edition, the value of this field is null.
        /// </summary>
        public readonly string InstanceNo;
        /// <summary>
        /// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
        /// </summary>
        public readonly bool IsNsCorrect;
        /// <summary>
        /// Whether the domain is a subdomain.
        /// </summary>
        public readonly bool IsSubDomain;
        /// <summary>
        /// The ID of the account that last updated this domain.
        /// </summary>
        public readonly string LastOperator;
        /// <summary>
        /// The ProjectName of the domain.
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// The list of DNS servers actually used by the domain.
        /// </summary>
        public readonly ImmutableArray<string> RealDnsServerLists;
        /// <summary>
        /// The total number of DNS records contained in the domain.
        /// </summary>
        public readonly int RecordCount;
        /// <summary>
        /// The remarks for the domain.
        /// </summary>
        public readonly string Remark;
        /// <summary>
        /// The status of the domain.
        /// </summary>
        public readonly int Stage;
        /// <summary>
        /// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
        /// </summary>
        public readonly string SubDomainHost;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.ZonesZoneTagResult> Tags;
        /// <summary>
        /// The edition of the domain.
        /// </summary>
        public readonly string TradeCode;
        /// <summary>
        /// The most recent update time of the domain.
        /// </summary>
        public readonly string UpdatedAt;
        /// <summary>
        /// The ID of the domain.
        /// </summary>
        public readonly int Zid;
        /// <summary>
        /// The domain name.
        /// </summary>
        public readonly string ZoneName;

        [OutputConstructor]
        private ZonesZoneResult(
            ImmutableArray<string> allocateDnsServerLists,

            bool autoRenew,

            int cacheStage,

            string createdAt,

            string dnsSecurity,

            int expiredTime,

            string id,

            string instanceId,

            string instanceNo,

            bool isNsCorrect,

            bool isSubDomain,

            string lastOperator,

            string projectName,

            ImmutableArray<string> realDnsServerLists,

            int recordCount,

            string remark,

            int stage,

            string subDomainHost,

            ImmutableArray<Outputs.ZonesZoneTagResult> tags,

            string tradeCode,

            string updatedAt,

            int zid,

            string zoneName)
        {
            AllocateDnsServerLists = allocateDnsServerLists;
            AutoRenew = autoRenew;
            CacheStage = cacheStage;
            CreatedAt = createdAt;
            DnsSecurity = dnsSecurity;
            ExpiredTime = expiredTime;
            Id = id;
            InstanceId = instanceId;
            InstanceNo = instanceNo;
            IsNsCorrect = isNsCorrect;
            IsSubDomain = isSubDomain;
            LastOperator = lastOperator;
            ProjectName = projectName;
            RealDnsServerLists = realDnsServerLists;
            RecordCount = recordCount;
            Remark = remark;
            Stage = stage;
            SubDomainHost = subDomainHost;
            Tags = tags;
            TradeCode = tradeCode;
            UpdatedAt = updatedAt;
            Zid = zid;
            ZoneName = zoneName;
        }
    }
}
