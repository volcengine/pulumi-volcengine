// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Dns
{
    public static class GetZones
    {
        /// <summary>
        /// Use this data source to query detailed information of dns zones
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Dns.GetZones.Invoke(new()
        ///     {
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Dns.Inputs.GetZonesTagInputArgs
        ///             {
        ///                 Key = "xx",
        ///                 Values = new[]
        ///                 {
        ///                     "xx",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetZonesResult> InvokeAsync(GetZonesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZonesResult>("volcengine:dns/getZones:getZones", args ?? new GetZonesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dns zones
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Dns.GetZones.Invoke(new()
        ///     {
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Dns.Inputs.GetZonesTagInputArgs
        ///             {
        ///                 Key = "xx",
        ///                 Values = new[]
        ///                 {
        ///                     "xx",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetZonesResult> Invoke(GetZonesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZonesResult>("volcengine:dns/getZones:getZones", args ?? new GetZonesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZonesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The keyword included in domains.
        /// </summary>
        [Input("key")]
        public string? Key { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// The key for sorting the results.
        /// </summary>
        [Input("orderKey")]
        public string? OrderKey { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ProjectName of the domain.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// The matching mode for the Key parameter.
        /// </summary>
        [Input("searchMode")]
        public string? SearchMode { get; set; }

        /// <summary>
        /// The sorting order of the results.
        /// </summary>
        [Input("searchOrder")]
        public string? SearchOrder { get; set; }

        /// <summary>
        /// The status of the domain.
        /// </summary>
        [Input("stage")]
        public string? Stage { get; set; }

        [Input("tags")]
        private List<Inputs.GetZonesTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetZonesTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetZonesTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The edition of the domain.
        /// </summary>
        [Input("tradeCode")]
        public string? TradeCode { get; set; }

        public GetZonesArgs()
        {
        }
        public static new GetZonesArgs Empty => new GetZonesArgs();
    }

    public sealed class GetZonesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The keyword included in domains.
        /// </summary>
        [Input("key")]
        public Input<string>? Key { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// The key for sorting the results.
        /// </summary>
        [Input("orderKey")]
        public Input<string>? OrderKey { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The ProjectName of the domain.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The matching mode for the Key parameter.
        /// </summary>
        [Input("searchMode")]
        public Input<string>? SearchMode { get; set; }

        /// <summary>
        /// The sorting order of the results.
        /// </summary>
        [Input("searchOrder")]
        public Input<string>? SearchOrder { get; set; }

        /// <summary>
        /// The status of the domain.
        /// </summary>
        [Input("stage")]
        public Input<string>? Stage { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetZonesTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetZonesTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetZonesTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The edition of the domain.
        /// </summary>
        [Input("tradeCode")]
        public Input<string>? TradeCode { get; set; }

        public GetZonesInvokeArgs()
        {
        }
        public static new GetZonesInvokeArgs Empty => new GetZonesInvokeArgs();
    }


    [OutputType]
    public sealed class GetZonesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The Key of Tags.
        /// </summary>
        public readonly string? Key;
        public readonly string? NameRegex;
        public readonly string? OrderKey;
        public readonly string? OutputFile;
        /// <summary>
        /// The ProjectName of the domain.
        /// </summary>
        public readonly string? ProjectName;
        public readonly string? SearchMode;
        public readonly string? SearchOrder;
        /// <summary>
        /// The status of the domain.
        /// </summary>
        public readonly string? Stage;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZonesTagResult> Tags;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The edition of the domain.
        /// </summary>
        public readonly string? TradeCode;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetZonesZoneResult> Zones;

        [OutputConstructor]
        private GetZonesResult(
            string id,

            string? key,

            string? nameRegex,

            string? orderKey,

            string? outputFile,

            string? projectName,

            string? searchMode,

            string? searchOrder,

            string? stage,

            ImmutableArray<Outputs.GetZonesTagResult> tags,

            int totalCount,

            string? tradeCode,

            ImmutableArray<Outputs.GetZonesZoneResult> zones)
        {
            Id = id;
            Key = key;
            NameRegex = nameRegex;
            OrderKey = orderKey;
            OutputFile = outputFile;
            ProjectName = projectName;
            SearchMode = searchMode;
            SearchOrder = searchOrder;
            Stage = stage;
            Tags = tags;
            TotalCount = totalCount;
            TradeCode = tradeCode;
            Zones = zones;
        }
    }
}
