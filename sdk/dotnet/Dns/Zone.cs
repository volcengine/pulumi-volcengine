// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Dns
{
    /// <summary>
    /// Provides a resource to manage dns zone
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Dns.Zone("foo", new()
    ///     {
    ///         ProjectName = "xxx",
    ///         Remark = "xxx",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Dns.Inputs.ZoneTagArgs
    ///             {
    ///                 Key = "xx",
    ///                 Value = "xx",
    ///             },
    ///         },
    ///         ZoneName = "xxxx.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Zone can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:dns/zone:Zone default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:dns/zone:Zone")]
    public partial class Zone : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The list of DNS servers allocated to the domain by BytePlus DNS.
        /// </summary>
        [Output("allocateDnsServerLists")]
        public Output<ImmutableArray<string>> AllocateDnsServerLists { get; private set; } = null!;

        /// <summary>
        /// Whether automatic domain renewal is enabled.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The version of DNS DDoS protection service.
        /// </summary>
        [Output("dnsSecurity")]
        public Output<string> DnsSecurity { get; private set; } = null!;

        /// <summary>
        /// The expiration time of the domain.
        /// </summary>
        [Output("expiredTime")]
        public Output<int> ExpiredTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the instance. For free edition, the value of this field is null.
        /// </summary>
        [Output("instanceNo")]
        public Output<string> InstanceNo { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
        /// </summary>
        [Output("isNsCorrect")]
        public Output<bool> IsNsCorrect { get; private set; } = null!;

        /// <summary>
        /// Whether the domain is a subdomain.
        /// </summary>
        [Output("isSubDomain")]
        public Output<bool> IsSubDomain { get; private set; } = null!;

        /// <summary>
        /// The project to which the domain name belongs. The default value is default.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The list of DNS servers actually used by the domain.
        /// </summary>
        [Output("realDnsServerLists")]
        public Output<ImmutableArray<string>> RealDnsServerLists { get; private set; } = null!;

        /// <summary>
        /// The total number of DNS records under the domain.
        /// </summary>
        [Output("recordCount")]
        public Output<int> RecordCount { get; private set; } = null!;

        /// <summary>
        /// The remark for the domain.
        /// </summary>
        [Output("remark")]
        public Output<string?> Remark { get; private set; } = null!;

        /// <summary>
        /// The status of the domain.
        /// </summary>
        [Output("stage")]
        public Output<int> Stage { get; private set; } = null!;

        /// <summary>
        /// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
        /// </summary>
        [Output("subDomainHost")]
        public Output<string> SubDomainHost { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.ZoneTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The edition of the domain.
        /// </summary>
        [Output("tradeCode")]
        public Output<string> TradeCode { get; private set; } = null!;

        /// <summary>
        /// The update time of the domain.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The ID of the domain.
        /// </summary>
        [Output("zid")]
        public Output<int> Zid { get; private set; } = null!;

        /// <summary>
        /// The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        /// </summary>
        [Output("zoneName")]
        public Output<string> ZoneName { get; private set; } = null!;


        /// <summary>
        /// Create a Zone resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Zone(string name, ZoneArgs args, CustomResourceOptions? options = null)
            : base("volcengine:dns/zone:Zone", name, args ?? new ZoneArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Zone(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:dns/zone:Zone", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Zone resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Zone Get(string name, Input<string> id, ZoneState? state = null, CustomResourceOptions? options = null)
        {
            return new Zone(name, id, state, options);
        }
    }

    public sealed class ZoneArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The project to which the domain name belongs. The default value is default.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The remark for the domain.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        [Input("tags")]
        private InputList<Inputs.ZoneTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.ZoneTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ZoneTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        /// </summary>
        [Input("zoneName", required: true)]
        public Input<string> ZoneName { get; set; } = null!;

        public ZoneArgs()
        {
        }
        public static new ZoneArgs Empty => new ZoneArgs();
    }

    public sealed class ZoneState : global::Pulumi.ResourceArgs
    {
        [Input("allocateDnsServerLists")]
        private InputList<string>? _allocateDnsServerLists;

        /// <summary>
        /// The list of DNS servers allocated to the domain by BytePlus DNS.
        /// </summary>
        public InputList<string> AllocateDnsServerLists
        {
            get => _allocateDnsServerLists ?? (_allocateDnsServerLists = new InputList<string>());
            set => _allocateDnsServerLists = value;
        }

        /// <summary>
        /// Whether automatic domain renewal is enabled.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The version of DNS DDoS protection service.
        /// </summary>
        [Input("dnsSecurity")]
        public Input<string>? DnsSecurity { get; set; }

        /// <summary>
        /// The expiration time of the domain.
        /// </summary>
        [Input("expiredTime")]
        public Input<int>? ExpiredTime { get; set; }

        /// <summary>
        /// The ID of the instance. For free edition, the value of this field is null.
        /// </summary>
        [Input("instanceNo")]
        public Input<string>? InstanceNo { get; set; }

        /// <summary>
        /// Indicates whether the configuration of NS servers is correct. If the configuration is correct, the status of the domain in BytePlus DNS is Active.
        /// </summary>
        [Input("isNsCorrect")]
        public Input<bool>? IsNsCorrect { get; set; }

        /// <summary>
        /// Whether the domain is a subdomain.
        /// </summary>
        [Input("isSubDomain")]
        public Input<bool>? IsSubDomain { get; set; }

        /// <summary>
        /// The project to which the domain name belongs. The default value is default.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("realDnsServerLists")]
        private InputList<string>? _realDnsServerLists;

        /// <summary>
        /// The list of DNS servers actually used by the domain.
        /// </summary>
        public InputList<string> RealDnsServerLists
        {
            get => _realDnsServerLists ?? (_realDnsServerLists = new InputList<string>());
            set => _realDnsServerLists = value;
        }

        /// <summary>
        /// The total number of DNS records under the domain.
        /// </summary>
        [Input("recordCount")]
        public Input<int>? RecordCount { get; set; }

        /// <summary>
        /// The remark for the domain.
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// The status of the domain.
        /// </summary>
        [Input("stage")]
        public Input<int>? Stage { get; set; }

        /// <summary>
        /// The domain prefix of the subdomain. If the domain is not a subdomain, this parameter is null.
        /// </summary>
        [Input("subDomainHost")]
        public Input<string>? SubDomainHost { get; set; }

        [Input("tags")]
        private InputList<Inputs.ZoneTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.ZoneTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.ZoneTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The edition of the domain.
        /// </summary>
        [Input("tradeCode")]
        public Input<string>? TradeCode { get; set; }

        /// <summary>
        /// The update time of the domain.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The ID of the domain.
        /// </summary>
        [Input("zid")]
        public Input<int>? Zid { get; set; }

        /// <summary>
        /// The domain to be created. The domain must be a second-level domain and cannot be a wildcard domain.
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public ZoneState()
        {
        }
        public static new ZoneState Empty => new ZoneState();
    }
}
