// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Dns
{
    [Obsolete(@"volcengine.dns.Records has been deprecated in favor of volcengine.dns.getRecords")]
    public static class Records
    {
        /// <summary>
        /// Use this data source to query detailed information of dns records
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Dns.GetRecords.Invoke(new()
        ///     {
        ///         Zid = 58857,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<RecordsResult> InvokeAsync(RecordsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<RecordsResult>("volcengine:dns/records:Records", args ?? new RecordsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of dns records
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Dns.GetRecords.Invoke(new()
        ///     {
        ///         Zid = 58857,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<RecordsResult> Invoke(RecordsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<RecordsResult>("volcengine:dns/records:Records", args ?? new RecordsInvokeArgs(), options.WithDefaults());
    }


    public sealed class RecordsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain prefix of the DNS record.
        /// </summary>
        [Input("host")]
        public string? Host { get; set; }

        /// <summary>
        /// Line of the DNS record.
        /// </summary>
        [Input("line")]
        public string? Line { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The matching mode for the Host parameter.
        /// </summary>
        [Input("searchMode")]
        public string? SearchMode { get; set; }

        /// <summary>
        /// The Method to sort the returned list of DNS records.
        /// </summary>
        [Input("searchOrder")]
        public string? SearchOrder { get; set; }

        /// <summary>
        /// Type of the DNS record.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// Value of the DNS record.
        /// </summary>
        [Input("value")]
        public string? Value { get; set; }

        /// <summary>
        /// The ID of the domain.
        /// </summary>
        [Input("zid", required: true)]
        public int Zid { get; set; }

        public RecordsArgs()
        {
        }
        public static new RecordsArgs Empty => new RecordsArgs();
    }

    public sealed class RecordsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Domain prefix of the DNS record.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// Line of the DNS record.
        /// </summary>
        [Input("line")]
        public Input<string>? Line { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The matching mode for the Host parameter.
        /// </summary>
        [Input("searchMode")]
        public Input<string>? SearchMode { get; set; }

        /// <summary>
        /// The Method to sort the returned list of DNS records.
        /// </summary>
        [Input("searchOrder")]
        public Input<string>? SearchOrder { get; set; }

        /// <summary>
        /// Type of the DNS record.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Value of the DNS record.
        /// </summary>
        [Input("value")]
        public Input<string>? Value { get; set; }

        /// <summary>
        /// The ID of the domain.
        /// </summary>
        [Input("zid", required: true)]
        public Input<int> Zid { get; set; } = null!;

        public RecordsInvokeArgs()
        {
        }
        public static new RecordsInvokeArgs Empty => new RecordsInvokeArgs();
    }


    [OutputType]
    public sealed class RecordsResult
    {
        /// <summary>
        /// The host record included in the DNS record.
        /// </summary>
        public readonly string? Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The line code corresponding to the DNS record.
        /// </summary>
        public readonly string? Line;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.RecordsRecordResult> Records;
        public readonly string? SearchMode;
        public readonly string? SearchOrder;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The type of the DNS record.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The record value contained in the DNS record.
        /// </summary>
        public readonly string? Value;
        public readonly int Zid;

        [OutputConstructor]
        private RecordsResult(
            string? host,

            string id,

            string? line,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<Outputs.RecordsRecordResult> records,

            string? searchMode,

            string? searchOrder,

            int totalCount,

            string? type,

            string? value,

            int zid)
        {
            Host = host;
            Id = id;
            Line = line;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Records = records;
            SearchMode = searchMode;
            SearchOrder = searchOrder;
            TotalCount = totalCount;
            Type = type;
            Value = value;
            Zid = zid;
        }
    }
}
