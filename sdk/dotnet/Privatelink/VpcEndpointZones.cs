// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Privatelink
{
    public static class VpcEndpointZones
    {
        /// <summary>
        /// Use this data source to query detailed information of privatelink vpc endpoint zones
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooClb = new Volcengine.Clb.Clb("fooClb", new()
        ///     {
        ///         Type = "public",
        ///         SubnetId = fooSubnet.Id,
        ///         LoadBalancerSpec = "small_1",
        ///         Description = "acc-test-demo",
        ///         LoadBalancerName = "acc-test-clb",
        ///         LoadBalancerBillingType = "PostPaid",
        ///         EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs
        ///         {
        ///             Isp = "BGP",
        ///             EipBillingType = "PostPaidByBandwidth",
        ///             Bandwidth = 1,
        ///         },
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Clb.Inputs.ClbTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooVpcEndpointService = new Volcengine.Privatelink.VpcEndpointService("fooVpcEndpointService", new()
        ///     {
        ///         Resources = new[]
        ///         {
        ///             new Volcengine.Privatelink.Inputs.VpcEndpointServiceResourceArgs
        ///             {
        ///                 ResourceId = fooClb.Id,
        ///                 ResourceType = "CLB",
        ///             },
        ///         },
        ///         Description = "acc-test",
        ///         AutoAcceptEnabled = true,
        ///     });
        /// 
        ///     var fooVpcEndpoint = new Volcengine.Privatelink.VpcEndpoint("fooVpcEndpoint", new()
        ///     {
        ///         SecurityGroupIds = new[]
        ///         {
        ///             fooSecurityGroup.Id,
        ///         },
        ///         ServiceId = fooVpcEndpointService.Id,
        ///         EndpointName = "acc-test-ep",
        ///         Description = "acc-test",
        ///     });
        /// 
        ///     var fooVpcEndpointZone = new Volcengine.Privatelink.VpcEndpointZone("fooVpcEndpointZone", new()
        ///     {
        ///         EndpointId = fooVpcEndpoint.Id,
        ///         SubnetId = fooSubnet.Id,
        ///         PrivateIpAddress = "172.16.0.251",
        ///     });
        /// 
        ///     var fooVpcEndpointZones = Volcengine.Privatelink.VpcEndpointZones.Invoke(new()
        ///     {
        ///         EndpointId = fooVpcEndpointZone.EndpointId,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<VpcEndpointZonesResult> InvokeAsync(VpcEndpointZonesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<VpcEndpointZonesResult>("volcengine:privatelink/vpcEndpointZones:VpcEndpointZones", args ?? new VpcEndpointZonesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of privatelink vpc endpoint zones
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooClb = new Volcengine.Clb.Clb("fooClb", new()
        ///     {
        ///         Type = "public",
        ///         SubnetId = fooSubnet.Id,
        ///         LoadBalancerSpec = "small_1",
        ///         Description = "acc-test-demo",
        ///         LoadBalancerName = "acc-test-clb",
        ///         LoadBalancerBillingType = "PostPaid",
        ///         EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs
        ///         {
        ///             Isp = "BGP",
        ///             EipBillingType = "PostPaidByBandwidth",
        ///             Bandwidth = 1,
        ///         },
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Clb.Inputs.ClbTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooVpcEndpointService = new Volcengine.Privatelink.VpcEndpointService("fooVpcEndpointService", new()
        ///     {
        ///         Resources = new[]
        ///         {
        ///             new Volcengine.Privatelink.Inputs.VpcEndpointServiceResourceArgs
        ///             {
        ///                 ResourceId = fooClb.Id,
        ///                 ResourceType = "CLB",
        ///             },
        ///         },
        ///         Description = "acc-test",
        ///         AutoAcceptEnabled = true,
        ///     });
        /// 
        ///     var fooVpcEndpoint = new Volcengine.Privatelink.VpcEndpoint("fooVpcEndpoint", new()
        ///     {
        ///         SecurityGroupIds = new[]
        ///         {
        ///             fooSecurityGroup.Id,
        ///         },
        ///         ServiceId = fooVpcEndpointService.Id,
        ///         EndpointName = "acc-test-ep",
        ///         Description = "acc-test",
        ///     });
        /// 
        ///     var fooVpcEndpointZone = new Volcengine.Privatelink.VpcEndpointZone("fooVpcEndpointZone", new()
        ///     {
        ///         EndpointId = fooVpcEndpoint.Id,
        ///         SubnetId = fooSubnet.Id,
        ///         PrivateIpAddress = "172.16.0.251",
        ///     });
        /// 
        ///     var fooVpcEndpointZones = Volcengine.Privatelink.VpcEndpointZones.Invoke(new()
        ///     {
        ///         EndpointId = fooVpcEndpointZone.EndpointId,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<VpcEndpointZonesResult> Invoke(VpcEndpointZonesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<VpcEndpointZonesResult>("volcengine:privatelink/vpcEndpointZones:VpcEndpointZones", args ?? new VpcEndpointZonesInvokeArgs(), options.WithDefaults());
    }


    public sealed class VpcEndpointZonesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The endpoint id of query.
        /// </summary>
        [Input("endpointId")]
        public string? EndpointId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public VpcEndpointZonesArgs()
        {
        }
        public static new VpcEndpointZonesArgs Empty => new VpcEndpointZonesArgs();
    }

    public sealed class VpcEndpointZonesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The endpoint id of query.
        /// </summary>
        [Input("endpointId")]
        public Input<string>? EndpointId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public VpcEndpointZonesInvokeArgs()
        {
        }
        public static new VpcEndpointZonesInvokeArgs Empty => new VpcEndpointZonesInvokeArgs();
    }


    [OutputType]
    public sealed class VpcEndpointZonesResult
    {
        public readonly string? EndpointId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// Returns the total amount of the data list.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.VpcEndpointZonesVpcEndpointZoneResult> VpcEndpointZones;

        [OutputConstructor]
        private VpcEndpointZonesResult(
            string? endpointId,

            string id,

            string? outputFile,

            int totalCount,

            ImmutableArray<Outputs.VpcEndpointZonesVpcEndpointZoneResult> vpcEndpointZones)
        {
            EndpointId = endpointId;
            Id = id;
            OutputFile = outputFile;
            TotalCount = totalCount;
            VpcEndpointZones = vpcEndpointZones;
        }
    }
}
