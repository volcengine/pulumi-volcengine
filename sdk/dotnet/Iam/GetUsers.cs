// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Iam
{
    public static class GetUsers
    {
        /// <summary>
        /// Use this data source to query detailed information of iam users
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooUser = new Volcengine.Iam.User("fooUser", new()
        ///     {
        ///         UserName = "acc-test-user",
        ///         Description = "acc test",
        ///         DisplayName = "name",
        ///     });
        /// 
        ///     var fooUsers = Volcengine.Iam.GetUsers.Invoke(new()
        ///     {
        ///         UserNames = new[]
        ///         {
        ///             fooUser.UserName,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUsersResult> InvokeAsync(GetUsersArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUsersResult>("volcengine:iam/getUsers:getUsers", args ?? new GetUsersArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of iam users
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooUser = new Volcengine.Iam.User("fooUser", new()
        ///     {
        ///         UserName = "acc-test-user",
        ///         Description = "acc test",
        ///         DisplayName = "name",
        ///     });
        /// 
        ///     var fooUsers = Volcengine.Iam.GetUsers.Invoke(new()
        ///     {
        ///         UserNames = new[]
        ///         {
        ///             fooUser.UserName,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUsersResult> Invoke(GetUsersInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUsersResult>("volcengine:iam/getUsers:getUsers", args ?? new GetUsersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUsersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Name Regex of IAM.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("userNames")]
        private List<string>? _userNames;

        /// <summary>
        /// A list of user names.
        /// </summary>
        public List<string> UserNames
        {
            get => _userNames ?? (_userNames = new List<string>());
            set => _userNames = value;
        }

        public GetUsersArgs()
        {
        }
        public static new GetUsersArgs Empty => new GetUsersArgs();
    }

    public sealed class GetUsersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Name Regex of IAM.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("userNames")]
        private InputList<string>? _userNames;

        /// <summary>
        /// A list of user names.
        /// </summary>
        public InputList<string> UserNames
        {
            get => _userNames ?? (_userNames = new InputList<string>());
            set => _userNames = value;
        }

        public GetUsersInvokeArgs()
        {
        }
        public static new GetUsersInvokeArgs Empty => new GetUsersInvokeArgs();
    }


    [OutputType]
    public sealed class GetUsersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of user query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> UserNames;
        /// <summary>
        /// The collection of user.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUsersUserResult> Users;

        [OutputConstructor]
        private GetUsersResult(
            string id,

            string? nameRegex,

            string? outputFile,

            int totalCount,

            ImmutableArray<string> userNames,

            ImmutableArray<Outputs.GetUsersUserResult> users)
        {
            Id = id;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            TotalCount = totalCount;
            UserNames = userNames;
            Users = users;
        }
    }
}
