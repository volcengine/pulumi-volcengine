// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Iam
{
    public static class GetPolicies
    {
        /// <summary>
        /// Use this data source to query detailed information of iam policies
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooPolicy = new Volcengine.Iam.Policy("fooPolicy", new()
        ///     {
        ///         PolicyName = "acc-test-policy",
        ///         Description = "acc-test",
        ///         PolicyDocument = "{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}",
        ///     });
        /// 
        ///     var fooPolicies = Volcengine.Iam.GetPolicies.Invoke(new()
        ///     {
        ///         Query = fooPolicy.Description,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPoliciesResult> InvokeAsync(GetPoliciesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPoliciesResult>("volcengine:iam/getPolicies:getPolicies", args ?? new GetPoliciesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of iam policies
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooPolicy = new Volcengine.Iam.Policy("fooPolicy", new()
        ///     {
        ///         PolicyName = "acc-test-policy",
        ///         Description = "acc-test",
        ///         PolicyDocument = "{\"Statement\":[{\"Effect\":\"Allow\",\"Action\":[\"auto_scaling:DescribeScalingGroups\"],\"Resource\":[\"*\"]}]}",
        ///     });
        /// 
        ///     var fooPolicies = Volcengine.Iam.GetPolicies.Invoke(new()
        ///     {
        ///         Query = fooPolicy.Description,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPoliciesResult> Invoke(GetPoliciesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPoliciesResult>("volcengine:iam/getPolicies:getPolicies", args ?? new GetPoliciesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPoliciesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Name Regex of Policy.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Query policies, support policy name or description.
        /// </summary>
        [Input("query")]
        public string? Query { get; set; }

        /// <summary>
        /// The name of the IAM role.
        /// </summary>
        [Input("roleName")]
        public string? RoleName { get; set; }

        /// <summary>
        /// The scope of the Policy.
        /// </summary>
        [Input("scope")]
        public string? Scope { get; set; }

        /// <summary>
        /// The status of policy.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// The name of the IAM user.
        /// </summary>
        [Input("userName")]
        public string? UserName { get; set; }

        public GetPoliciesArgs()
        {
        }
        public static new GetPoliciesArgs Empty => new GetPoliciesArgs();
    }

    public sealed class GetPoliciesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A Name Regex of Policy.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Query policies, support policy name or description.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// The name of the IAM role.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        /// <summary>
        /// The scope of the Policy.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The status of policy.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The name of the IAM user.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public GetPoliciesInvokeArgs()
        {
        }
        public static new GetPoliciesInvokeArgs Empty => new GetPoliciesInvokeArgs();
    }


    [OutputType]
    public sealed class GetPoliciesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of Policy query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPoliciesPolicyResult> Policies;
        public readonly string? Query;
        /// <summary>
        /// The name of the IAM role.The data show only query with role_name.
        /// </summary>
        public readonly string? RoleName;
        public readonly string? Scope;
        public readonly string? Status;
        /// <summary>
        /// The total count of Policy query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The name of the IAM user.The data show only query with user_name.
        /// </summary>
        public readonly string? UserName;

        [OutputConstructor]
        private GetPoliciesResult(
            string id,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<Outputs.GetPoliciesPolicyResult> policies,

            string? query,

            string? roleName,

            string? scope,

            string? status,

            int totalCount,

            string? userName)
        {
            Id = id;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Policies = policies;
            Query = query;
            RoleName = roleName;
            Scope = scope;
            Status = status;
            TotalCount = totalCount;
            UserName = userName;
        }
    }
}
