// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Iam
{
    public static class GetUserGroups
    {
        /// <summary>
        /// Use this data source to query detailed information of iam user groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooUserGroup = new Volcengine.Iam.UserGroup("fooUserGroup", new()
        ///     {
        ///         Description = "acc-test",
        ///         DisplayName = "acc-test",
        ///         UserGroupName = "acc-test-group",
        ///     });
        /// 
        ///     var fooUserGroups = Volcengine.Iam.GetUserGroups.Invoke(new()
        ///     {
        ///         Query = "acc-test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetUserGroupsResult> InvokeAsync(GetUserGroupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUserGroupsResult>("volcengine:iam/getUserGroups:getUserGroups", args ?? new GetUserGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of iam user groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooUserGroup = new Volcengine.Iam.UserGroup("fooUserGroup", new()
        ///     {
        ///         Description = "acc-test",
        ///         DisplayName = "acc-test",
        ///         UserGroupName = "acc-test-group",
        ///     });
        /// 
        ///     var fooUserGroups = Volcengine.Iam.GetUserGroups.Invoke(new()
        ///     {
        ///         Query = "acc-test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetUserGroupsResult> Invoke(GetUserGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUserGroupsResult>("volcengine:iam/getUserGroups:getUserGroups", args ?? new GetUserGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserGroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Fuzzy search, supports searching for user group names, display names, and remarks.
        /// </summary>
        [Input("query")]
        public string? Query { get; set; }

        public GetUserGroupsArgs()
        {
        }
        public static new GetUserGroupsArgs Empty => new GetUserGroupsArgs();
    }

    public sealed class GetUserGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Fuzzy search, supports searching for user group names, display names, and remarks.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        public GetUserGroupsInvokeArgs()
        {
        }
        public static new GetUserGroupsInvokeArgs Empty => new GetUserGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserGroupsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        public readonly string? Query;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserGroupsUserGroupResult> UserGroups;

        [OutputConstructor]
        private GetUserGroupsResult(
            string id,

            string? outputFile,

            string? query,

            int totalCount,

            ImmutableArray<Outputs.GetUserGroupsUserGroupResult> userGroups)
        {
            Id = id;
            OutputFile = outputFile;
            Query = query;
            TotalCount = totalCount;
            UserGroups = userGroups;
        }
    }
}
