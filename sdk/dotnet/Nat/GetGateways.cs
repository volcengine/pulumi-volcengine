// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Nat
{
    public static class GetGateways
    {
        /// <summary>
        /// Use this data source to query detailed information of nat gateways
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooGateway = new List&lt;Volcengine.Nat.Gateway&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooGateway.Add(new Volcengine.Nat.Gateway($"fooGateway-{range.Value}", new()
        ///         {
        ///             VpcId = fooVpc.Id,
        ///             SubnetId = fooSubnet.Id,
        ///             Spec = "Small",
        ///             NatGatewayName = $"acc-test-ng-{range.Value}",
        ///             Description = "acc-test",
        ///             BillingType = "PostPaid",
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Nat.Inputs.GatewayTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooGateways = Volcengine.Nat.GetGateways.Invoke(new()
        ///     {
        ///         Ids = fooGateway.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGatewaysResult> InvokeAsync(GetGatewaysArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewaysResult>("volcengine:nat/getGateways:getGateways", args ?? new GetGatewaysArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of nat gateways
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooGateway = new List&lt;Volcengine.Nat.Gateway&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooGateway.Add(new Volcengine.Nat.Gateway($"fooGateway-{range.Value}", new()
        ///         {
        ///             VpcId = fooVpc.Id,
        ///             SubnetId = fooSubnet.Id,
        ///             Spec = "Small",
        ///             NatGatewayName = $"acc-test-ng-{range.Value}",
        ///             Description = "acc-test",
        ///             BillingType = "PostPaid",
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Nat.Inputs.GatewayTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooGateways = Volcengine.Nat.GetGateways.Invoke(new()
        ///     {
        ///         Ids = fooGateway.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGatewaysResult> Invoke(GetGatewaysInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewaysResult>("volcengine:nat/getGateways:getGateways", args ?? new GetGatewaysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewaysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The description of the NatGateway.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// The list of NatGateway IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Name Regex of NatGateway.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// The name of the NatGateway.
        /// </summary>
        [Input("natGatewayName")]
        public string? NatGatewayName { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The specification of the NatGateway.
        /// </summary>
        [Input("spec")]
        public string? Spec { get; set; }

        /// <summary>
        /// The id of the Subnet.
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        [Input("tags")]
        private List<Inputs.GetGatewaysTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetGatewaysTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetGatewaysTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the VPC.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetGatewaysArgs()
        {
        }
        public static new GetGatewaysArgs Empty => new GetGatewaysArgs();
    }

    public sealed class GetGatewaysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The description of the NatGateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// The list of NatGateway IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Name Regex of NatGateway.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// The name of the NatGateway.
        /// </summary>
        [Input("natGatewayName")]
        public Input<string>? NatGatewayName { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The specification of the NatGateway.
        /// </summary>
        [Input("spec")]
        public Input<string>? Spec { get; set; }

        /// <summary>
        /// The id of the Subnet.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetGatewaysTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetGatewaysTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetGatewaysTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the VPC.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetGatewaysInvokeArgs()
        {
        }
        public static new GetGatewaysInvokeArgs Empty => new GetGatewaysInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewaysResult
    {
        /// <summary>
        /// The description of the NatGateway.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        /// <summary>
        /// The name of the NatGateway.
        /// </summary>
        public readonly string? NatGatewayName;
        /// <summary>
        /// The collection of NatGateway query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewaysNatGatewayResult> NatGateways;
        public readonly string? OutputFile;
        /// <summary>
        /// The specification of the NatGateway.
        /// </summary>
        public readonly string? Spec;
        /// <summary>
        /// The ID of the Subnet.
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewaysTagResult> Tags;
        /// <summary>
        /// The total count of NatGateway query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The ID of the VPC.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private GetGatewaysResult(
            string? description,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? natGatewayName,

            ImmutableArray<Outputs.GetGatewaysNatGatewayResult> natGateways,

            string? outputFile,

            string? spec,

            string? subnetId,

            ImmutableArray<Outputs.GetGatewaysTagResult> tags,

            int totalCount,

            string? vpcId)
        {
            Description = description;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            NatGatewayName = natGatewayName;
            NatGateways = natGateways;
            OutputFile = outputFile;
            Spec = spec;
            SubnetId = subnetId;
            Tags = tags;
            TotalCount = totalCount;
            VpcId = vpcId;
        }
    }
}
