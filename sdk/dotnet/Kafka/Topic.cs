// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Kafka
{
    /// <summary>
    /// Provides a resource to manage kafka topic
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Kafka.Instance("fooInstance", new()
    ///     {
    ///         InstanceName = "acc-test-kafka",
    ///         InstanceDescription = "tf-test",
    ///         Version = "2.2.2",
    ///         ComputeSpec = "kafka.20xrate.hw",
    ///         SubnetId = fooSubnet.Id,
    ///         UserName = "tf-user",
    ///         UserPassword = "tf-pass!@q1",
    ///         ChargeType = "PostPaid",
    ///         StorageSpace = 300,
    ///         PartitionNumber = 350,
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Kafka.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///         Parameters = new[]
    ///         {
    ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
    ///             {
    ///                 ParameterName = "MessageMaxByte",
    ///                 ParameterValue = "12",
    ///             },
    ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
    ///             {
    ///                 ParameterName = "LogRetentionHours",
    ///                 ParameterValue = "70",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooSaslUser = new Volcengine.Kafka.SaslUser("fooSaslUser", new()
    ///     {
    ///         UserName = "acc-test-user",
    ///         InstanceId = fooInstance.Id,
    ///         UserPassword = "suqsnis123!",
    ///         Description = "tf-test",
    ///         AllAuthority = true,
    ///         PasswordType = "Scram",
    ///     });
    /// 
    ///     var fooTopic = new Volcengine.Kafka.Topic("fooTopic", new()
    ///     {
    ///         TopicName = "acc-test-topic",
    ///         InstanceId = fooInstance.Id,
    ///         Description = "tf-test",
    ///         PartitionNumber = 15,
    ///         ReplicaNumber = 3,
    ///         Parameters = new Volcengine.Kafka.Inputs.TopicParametersArgs
    ///         {
    ///             MinInsyncReplicaNumber = 2,
    ///             MessageMaxByte = 10,
    ///             LogRetentionHours = 96,
    ///         },
    ///         AllAuthority = false,
    ///         AccessPolicies = new[]
    ///         {
    ///             new Volcengine.Kafka.Inputs.TopicAccessPolicyArgs
    ///             {
    ///                 UserName = fooSaslUser.UserName,
    ///                 AccessPolicy = "Pub",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// KafkaTopic can be imported using the instance_id:topic_name, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:kafka/topic:Topic default kafka-cnoeeapetf4s****:topic
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:kafka/topic:Topic")]
    public partial class Topic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        /// </summary>
        [Output("accessPolicies")]
        public Output<ImmutableArray<Outputs.TopicAccessPolicy>> AccessPolicies { get; private set; } = null!;

        /// <summary>
        /// Whether the kafka topic is configured to be accessible by all users. Default: true.
        /// </summary>
        [Output("allAuthority")]
        public Output<bool?> AllAuthority { get; private set; } = null!;

        /// <summary>
        /// The description of the kafka topic.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The instance id of the kafka topic.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The parameters of the kafka topic.
        /// </summary>
        [Output("parameters")]
        public Output<Outputs.TopicParameters> Parameters { get; private set; } = null!;

        /// <summary>
        /// The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        /// </summary>
        [Output("partitionNumber")]
        public Output<int> PartitionNumber { get; private set; } = null!;

        /// <summary>
        /// The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        /// </summary>
        [Output("replicaNumber")]
        public Output<int?> ReplicaNumber { get; private set; } = null!;

        /// <summary>
        /// The name of the kafka topic.
        /// </summary>
        [Output("topicName")]
        public Output<string> TopicName { get; private set; } = null!;


        /// <summary>
        /// Create a Topic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Topic(string name, TopicArgs args, CustomResourceOptions? options = null)
            : base("volcengine:kafka/topic:Topic", name, args ?? new TopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Topic(string name, Input<string> id, TopicState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:kafka/topic:Topic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Topic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Topic Get(string name, Input<string> id, TopicState? state = null, CustomResourceOptions? options = null)
        {
            return new Topic(name, id, state, options);
        }
    }

    public sealed class TopicArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.TopicAccessPolicyArgs>? _accessPolicies;

        /// <summary>
        /// The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        /// </summary>
        public InputList<Inputs.TopicAccessPolicyArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.TopicAccessPolicyArgs>());
            set => _accessPolicies = value;
        }

        /// <summary>
        /// Whether the kafka topic is configured to be accessible by all users. Default: true.
        /// </summary>
        [Input("allAuthority")]
        public Input<bool>? AllAuthority { get; set; }

        /// <summary>
        /// The description of the kafka topic.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The instance id of the kafka topic.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The parameters of the kafka topic.
        /// </summary>
        [Input("parameters")]
        public Input<Inputs.TopicParametersArgs>? Parameters { get; set; }

        /// <summary>
        /// The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        /// </summary>
        [Input("partitionNumber", required: true)]
        public Input<int> PartitionNumber { get; set; } = null!;

        /// <summary>
        /// The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        /// </summary>
        [Input("replicaNumber")]
        public Input<int>? ReplicaNumber { get; set; }

        /// <summary>
        /// The name of the kafka topic.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public TopicArgs()
        {
        }
        public static new TopicArgs Empty => new TopicArgs();
    }

    public sealed class TopicState : global::Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.TopicAccessPolicyGetArgs>? _accessPolicies;

        /// <summary>
        /// The access policies info of the kafka topic. This field only valid when the value of the AllAuthority is false.
        /// </summary>
        public InputList<Inputs.TopicAccessPolicyGetArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.TopicAccessPolicyGetArgs>());
            set => _accessPolicies = value;
        }

        /// <summary>
        /// Whether the kafka topic is configured to be accessible by all users. Default: true.
        /// </summary>
        [Input("allAuthority")]
        public Input<bool>? AllAuthority { get; set; }

        /// <summary>
        /// The description of the kafka topic.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The instance id of the kafka topic.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The parameters of the kafka topic.
        /// </summary>
        [Input("parameters")]
        public Input<Inputs.TopicParametersGetArgs>? Parameters { get; set; }

        /// <summary>
        /// The number of partition in kafka topic. The value range in 1-300. This field can only be adjusted up but not down.
        /// </summary>
        [Input("partitionNumber")]
        public Input<int>? PartitionNumber { get; set; }

        /// <summary>
        /// The number of replica in kafka topic. The value can be 2 or 3. Default is 3.
        /// </summary>
        [Input("replicaNumber")]
        public Input<int>? ReplicaNumber { get; set; }

        /// <summary>
        /// The name of the kafka topic.
        /// </summary>
        [Input("topicName")]
        public Input<string>? TopicName { get; set; }

        public TopicState()
        {
        }
        public static new TopicState Empty => new TopicState();
    }
}
