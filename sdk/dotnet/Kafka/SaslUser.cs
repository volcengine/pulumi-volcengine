// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Kafka
{
    /// <summary>
    /// Provides a resource to manage kafka sasl user
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Kafka.Instance("fooInstance", new()
    ///     {
    ///         InstanceName = "acc-test-kafka",
    ///         InstanceDescription = "tf-test",
    ///         Version = "2.2.2",
    ///         ComputeSpec = "kafka.20xrate.hw",
    ///         SubnetId = fooSubnet.Id,
    ///         UserName = "tf-user",
    ///         UserPassword = "tf-pass!@q1",
    ///         ChargeType = "PostPaid",
    ///         StorageSpace = 300,
    ///         PartitionNumber = 350,
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Kafka.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///         Parameters = new[]
    ///         {
    ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
    ///             {
    ///                 ParameterName = "MessageMaxByte",
    ///                 ParameterValue = "12",
    ///             },
    ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
    ///             {
    ///                 ParameterName = "LogRetentionHours",
    ///                 ParameterValue = "70",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooSaslUser = new Volcengine.Kafka.SaslUser("fooSaslUser", new()
    ///     {
    ///         UserName = "acc-test-user",
    ///         InstanceId = fooInstance.Id,
    ///         UserPassword = "suqsnis123!",
    ///         Description = "tf-test",
    ///         AllAuthority = true,
    ///         PasswordType = "Scram",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// KafkaSaslUser can be imported using the kafka_id:username, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:kafka/saslUser:SaslUser default kafka-cnngbnntswg1****:tfuser
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:kafka/saslUser:SaslUser")]
    public partial class SaslUser : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether this user has read and write permissions for all topics. Default is true.
        /// </summary>
        [Output("allAuthority")]
        public Output<bool?> AllAuthority { get; private set; } = null!;

        /// <summary>
        /// The description of user.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The id of instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        /// </summary>
        [Output("passwordType")]
        public Output<string?> PasswordType { get; private set; } = null!;

        /// <summary>
        /// The name of user.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;

        /// <summary>
        /// The password of user.
        /// </summary>
        [Output("userPassword")]
        public Output<string> UserPassword { get; private set; } = null!;


        /// <summary>
        /// Create a SaslUser resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SaslUser(string name, SaslUserArgs args, CustomResourceOptions? options = null)
            : base("volcengine:kafka/saslUser:SaslUser", name, args ?? new SaslUserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SaslUser(string name, Input<string> id, SaslUserState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:kafka/saslUser:SaslUser", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
                AdditionalSecretOutputs =
                {
                    "userPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SaslUser resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SaslUser Get(string name, Input<string> id, SaslUserState? state = null, CustomResourceOptions? options = null)
        {
            return new SaslUser(name, id, state, options);
        }
    }

    public sealed class SaslUserArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether this user has read and write permissions for all topics. Default is true.
        /// </summary>
        [Input("allAuthority")]
        public Input<bool>? AllAuthority { get; set; }

        /// <summary>
        /// The description of user.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The id of instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        /// </summary>
        [Input("passwordType")]
        public Input<string>? PasswordType { get; set; }

        /// <summary>
        /// The name of user.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        [Input("userPassword", required: true)]
        private Input<string>? _userPassword;

        /// <summary>
        /// The password of user.
        /// </summary>
        public Input<string>? UserPassword
        {
            get => _userPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _userPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SaslUserArgs()
        {
        }
        public static new SaslUserArgs Empty => new SaslUserArgs();
    }

    public sealed class SaslUserState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether this user has read and write permissions for all topics. Default is true.
        /// </summary>
        [Input("allAuthority")]
        public Input<bool>? AllAuthority { get; set; }

        /// <summary>
        /// The description of user.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The id of instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The type of password. Valid values are `Scram` and `Plain`. Default is `Plain`.
        /// </summary>
        [Input("passwordType")]
        public Input<string>? PasswordType { get; set; }

        /// <summary>
        /// The name of user.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        [Input("userPassword")]
        private Input<string>? _userPassword;

        /// <summary>
        /// The password of user.
        /// </summary>
        public Input<string>? UserPassword
        {
            get => _userPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _userPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public SaslUserState()
        {
        }
        public static new SaslUserState Empty => new SaslUserState();
    }
}
