// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Kafka
{
    public static class GetTopicPartitions
    {
        /// <summary>
        /// Use this data source to query detailed information of kafka topic partitions
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Kafka.Instance("fooInstance", new()
        ///     {
        ///         InstanceName = "acc-test-kafka",
        ///         InstanceDescription = "tf-test",
        ///         Version = "2.2.2",
        ///         ComputeSpec = "kafka.20xrate.hw",
        ///         SubnetId = fooSubnet.Id,
        ///         UserName = "tf-user",
        ///         UserPassword = "tf-pass!@q1",
        ///         ChargeType = "PostPaid",
        ///         StorageSpace = 300,
        ///         PartitionNumber = 350,
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///         Parameters = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "MessageMaxByte",
        ///                 ParameterValue = "12",
        ///             },
        ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "LogRetentionHours",
        ///                 ParameterValue = "70",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooSaslUser = new Volcengine.Kafka.SaslUser("fooSaslUser", new()
        ///     {
        ///         UserName = "acc-test-user",
        ///         InstanceId = fooInstance.Id,
        ///         UserPassword = "suqsnis123!",
        ///         Description = "tf-test",
        ///         AllAuthority = true,
        ///         PasswordType = "Scram",
        ///     });
        /// 
        ///     var fooTopic = new Volcengine.Kafka.Topic("fooTopic", new()
        ///     {
        ///         TopicName = "acc-test-topic",
        ///         InstanceId = fooInstance.Id,
        ///         Description = "tf-test",
        ///         PartitionNumber = 15,
        ///         ReplicaNumber = 3,
        ///         Parameters = new Volcengine.Kafka.Inputs.TopicParametersArgs
        ///         {
        ///             MinInsyncReplicaNumber = 2,
        ///             MessageMaxByte = 10,
        ///             LogRetentionHours = 96,
        ///         },
        ///         AllAuthority = false,
        ///         AccessPolicies = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.TopicAccessPolicyArgs
        ///             {
        ///                 UserName = fooSaslUser.UserName,
        ///                 AccessPolicy = "Pub",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @default = Volcengine.Kafka.GetTopicPartitions.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         TopicName = fooTopic.TopicName,
        ///         PartitionIds = new[]
        ///         {
        ///             1,
        ///             2,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetTopicPartitionsResult> InvokeAsync(GetTopicPartitionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTopicPartitionsResult>("volcengine:kafka/getTopicPartitions:getTopicPartitions", args ?? new GetTopicPartitionsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of kafka topic partitions
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Kafka.Instance("fooInstance", new()
        ///     {
        ///         InstanceName = "acc-test-kafka",
        ///         InstanceDescription = "tf-test",
        ///         Version = "2.2.2",
        ///         ComputeSpec = "kafka.20xrate.hw",
        ///         SubnetId = fooSubnet.Id,
        ///         UserName = "tf-user",
        ///         UserPassword = "tf-pass!@q1",
        ///         ChargeType = "PostPaid",
        ///         StorageSpace = 300,
        ///         PartitionNumber = 350,
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///         Parameters = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "MessageMaxByte",
        ///                 ParameterValue = "12",
        ///             },
        ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "LogRetentionHours",
        ///                 ParameterValue = "70",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooSaslUser = new Volcengine.Kafka.SaslUser("fooSaslUser", new()
        ///     {
        ///         UserName = "acc-test-user",
        ///         InstanceId = fooInstance.Id,
        ///         UserPassword = "suqsnis123!",
        ///         Description = "tf-test",
        ///         AllAuthority = true,
        ///         PasswordType = "Scram",
        ///     });
        /// 
        ///     var fooTopic = new Volcengine.Kafka.Topic("fooTopic", new()
        ///     {
        ///         TopicName = "acc-test-topic",
        ///         InstanceId = fooInstance.Id,
        ///         Description = "tf-test",
        ///         PartitionNumber = 15,
        ///         ReplicaNumber = 3,
        ///         Parameters = new Volcengine.Kafka.Inputs.TopicParametersArgs
        ///         {
        ///             MinInsyncReplicaNumber = 2,
        ///             MessageMaxByte = 10,
        ///             LogRetentionHours = 96,
        ///         },
        ///         AllAuthority = false,
        ///         AccessPolicies = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.TopicAccessPolicyArgs
        ///             {
        ///                 UserName = fooSaslUser.UserName,
        ///                 AccessPolicy = "Pub",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @default = Volcengine.Kafka.GetTopicPartitions.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         TopicName = fooTopic.TopicName,
        ///         PartitionIds = new[]
        ///         {
        ///             1,
        ///             2,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetTopicPartitionsResult> Invoke(GetTopicPartitionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTopicPartitionsResult>("volcengine:kafka/getTopicPartitions:getTopicPartitions", args ?? new GetTopicPartitionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTopicPartitionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of kafka instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("partitionIds")]
        private List<int>? _partitionIds;

        /// <summary>
        /// The index number of partition.
        /// </summary>
        public List<int> PartitionIds
        {
            get => _partitionIds ?? (_partitionIds = new List<int>());
            set => _partitionIds = value;
        }

        /// <summary>
        /// The name of kafka topic.
        /// </summary>
        [Input("topicName", required: true)]
        public string TopicName { get; set; } = null!;

        /// <summary>
        /// Whether to only query the list of partitions that have out-of-sync replicas, the default value is false.
        /// </summary>
        [Input("underInsyncOnly")]
        public bool? UnderInsyncOnly { get; set; }

        public GetTopicPartitionsArgs()
        {
        }
        public static new GetTopicPartitionsArgs Empty => new GetTopicPartitionsArgs();
    }

    public sealed class GetTopicPartitionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of kafka instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("partitionIds")]
        private InputList<int>? _partitionIds;

        /// <summary>
        /// The index number of partition.
        /// </summary>
        public InputList<int> PartitionIds
        {
            get => _partitionIds ?? (_partitionIds = new InputList<int>());
            set => _partitionIds = value;
        }

        /// <summary>
        /// The name of kafka topic.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        /// <summary>
        /// Whether to only query the list of partitions that have out-of-sync replicas, the default value is false.
        /// </summary>
        [Input("underInsyncOnly")]
        public Input<bool>? UnderInsyncOnly { get; set; }

        public GetTopicPartitionsInvokeArgs()
        {
        }
        public static new GetTopicPartitionsInvokeArgs Empty => new GetTopicPartitionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetTopicPartitionsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string? OutputFile;
        public readonly ImmutableArray<int> PartitionIds;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTopicPartitionsPartitionResult> Partitions;
        public readonly string TopicName;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        public readonly bool? UnderInsyncOnly;

        [OutputConstructor]
        private GetTopicPartitionsResult(
            string id,

            string instanceId,

            string? outputFile,

            ImmutableArray<int> partitionIds,

            ImmutableArray<Outputs.GetTopicPartitionsPartitionResult> partitions,

            string topicName,

            int totalCount,

            bool? underInsyncOnly)
        {
            Id = id;
            InstanceId = instanceId;
            OutputFile = outputFile;
            PartitionIds = partitionIds;
            Partitions = partitions;
            TopicName = topicName;
            TotalCount = totalCount;
            UnderInsyncOnly = underInsyncOnly;
        }
    }
}
