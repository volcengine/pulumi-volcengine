// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Kafka
{
    public static class Groups
    {
        /// <summary>
        /// Use this data source to query detailed information of kafka groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Kafka.Instance("fooInstance", new()
        ///     {
        ///         InstanceName = "acc-test-kafka",
        ///         InstanceDescription = "tf-test",
        ///         Version = "2.2.2",
        ///         ComputeSpec = "kafka.20xrate.hw",
        ///         SubnetId = fooSubnet.Id,
        ///         UserName = "tf-user",
        ///         UserPassword = "tf-pass!@q1",
        ///         ChargeType = "PostPaid",
        ///         StorageSpace = 300,
        ///         PartitionNumber = 350,
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///         Parameters = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "MessageMaxByte",
        ///                 ParameterValue = "12",
        ///             },
        ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "LogRetentionHours",
        ///                 ParameterValue = "70",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooGroup = new Volcengine.Kafka.Group("fooGroup", new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         GroupId = "acc-test-group",
        ///         Description = "tf-test",
        ///     });
        /// 
        ///     var @default = Volcengine.Kafka.Groups.Invoke(new()
        ///     {
        ///         InstanceId = fooGroup.InstanceId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GroupsResult> InvokeAsync(GroupsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GroupsResult>("volcengine:kafka/groups:Groups", args ?? new GroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of kafka groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Kafka.Instance("fooInstance", new()
        ///     {
        ///         InstanceName = "acc-test-kafka",
        ///         InstanceDescription = "tf-test",
        ///         Version = "2.2.2",
        ///         ComputeSpec = "kafka.20xrate.hw",
        ///         SubnetId = fooSubnet.Id,
        ///         UserName = "tf-user",
        ///         UserPassword = "tf-pass!@q1",
        ///         ChargeType = "PostPaid",
        ///         StorageSpace = 300,
        ///         PartitionNumber = 350,
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///         Parameters = new[]
        ///         {
        ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "MessageMaxByte",
        ///                 ParameterValue = "12",
        ///             },
        ///             new Volcengine.Kafka.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "LogRetentionHours",
        ///                 ParameterValue = "70",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooGroup = new Volcengine.Kafka.Group("fooGroup", new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         GroupId = "acc-test-group",
        ///         Description = "tf-test",
        ///     });
        /// 
        ///     var @default = Volcengine.Kafka.Groups.Invoke(new()
        ///     {
        ///         InstanceId = fooGroup.InstanceId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GroupsResult> Invoke(GroupsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GroupsResult>("volcengine:kafka/groups:Groups", args ?? new GroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of kafka group, support fuzzy matching.
        /// </summary>
        [Input("groupId")]
        public string? GroupId { get; set; }

        /// <summary>
        /// The instance id of kafka group.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// A Name Regex of kafka group.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GroupsArgs()
        {
        }
        public static new GroupsArgs Empty => new GroupsArgs();
    }

    public sealed class GroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of kafka group, support fuzzy matching.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The instance id of kafka group.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// A Name Regex of kafka group.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GroupsInvokeArgs()
        {
        }
        public static new GroupsInvokeArgs Empty => new GroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GroupsResult
    {
        /// <summary>
        /// The id of kafka group.
        /// </summary>
        public readonly string? GroupId;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GroupsGroupResult> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GroupsResult(
            string? groupId,

            ImmutableArray<Outputs.GroupsGroupResult> groups,

            string id,

            string instanceId,

            string? nameRegex,

            string? outputFile,

            int totalCount)
        {
            GroupId = groupId;
            Groups = groups;
            Id = id;
            InstanceId = instanceId;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
