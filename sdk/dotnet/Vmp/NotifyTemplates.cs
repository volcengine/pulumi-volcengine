// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vmp
{
    [Obsolete(@"volcengine.vmp.NotifyTemplates has been deprecated in favor of volcengine.vmp.getNotifyTemplates")]
    public static class NotifyTemplates
    {
        /// <summary>
        /// Use this data source to query detailed information of vmp notify templates
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = new Volcengine.Vmp.NotifyTemplate("foo", new()
        ///     {
        ///         Description = "acc-test-vmp",
        ///         Channel = "WeComBotWebhook",
        ///         Active = new Volcengine.Vmp.Inputs.NotifyTemplateActiveArgs
        ///         {
        ///             Title = "acc-test-active-template-title",
        ///             Content = "acc-test-active-template-content",
        ///         },
        ///         Resolved = new Volcengine.Vmp.Inputs.NotifyTemplateResolvedArgs
        ///         {
        ///             Title = "acc-test-resolved-template-title",
        ///             Content = "acc-test-resolved-template-content",
        ///         },
        ///     });
        /// 
        ///     var @default = Volcengine.Vmp.GetNotifyTemplates.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             foo.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<NotifyTemplatesResult> InvokeAsync(NotifyTemplatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<NotifyTemplatesResult>("volcengine:vmp/notifyTemplates:NotifyTemplates", args ?? new NotifyTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vmp notify templates
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = new Volcengine.Vmp.NotifyTemplate("foo", new()
        ///     {
        ///         Description = "acc-test-vmp",
        ///         Channel = "WeComBotWebhook",
        ///         Active = new Volcengine.Vmp.Inputs.NotifyTemplateActiveArgs
        ///         {
        ///             Title = "acc-test-active-template-title",
        ///             Content = "acc-test-active-template-content",
        ///         },
        ///         Resolved = new Volcengine.Vmp.Inputs.NotifyTemplateResolvedArgs
        ///         {
        ///             Title = "acc-test-resolved-template-title",
        ///             Content = "acc-test-resolved-template-content",
        ///         },
        ///     });
        /// 
        ///     var @default = Volcengine.Vmp.GetNotifyTemplates.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             foo.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<NotifyTemplatesResult> Invoke(NotifyTemplatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<NotifyTemplatesResult>("volcengine:vmp/notifyTemplates:NotifyTemplates", args ?? new NotifyTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class NotifyTemplatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        /// </summary>
        [Input("channel")]
        public string? Channel { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The name of notify template. This field support fuzzy query.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public NotifyTemplatesArgs()
        {
        }
        public static new NotifyTemplatesArgs Empty => new NotifyTemplatesArgs();
    }

    public sealed class NotifyTemplatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        /// </summary>
        [Input("channel")]
        public Input<string>? Channel { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The name of notify template. This field support fuzzy query.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public NotifyTemplatesInvokeArgs()
        {
        }
        public static new NotifyTemplatesInvokeArgs Empty => new NotifyTemplatesInvokeArgs();
    }


    [OutputType]
    public sealed class NotifyTemplatesResult
    {
        /// <summary>
        /// The channel of notify template. Valid values: `LarkBotWebhook`, `DingTalkBotWebhook`, `WeComBotWebhook`.
        /// </summary>
        public readonly string? Channel;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The name of notify template.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameRegex;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.NotifyTemplatesNotifyTemplateResult> NotifyTemplates;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private NotifyTemplatesResult(
            string? channel,

            string id,

            ImmutableArray<string> ids,

            string? name,

            string? nameRegex,

            ImmutableArray<Outputs.NotifyTemplatesNotifyTemplateResult> notifyTemplates,

            string? outputFile,

            int totalCount)
        {
            Channel = channel;
            Id = id;
            Ids = ids;
            Name = name;
            NameRegex = nameRegex;
            NotifyTemplates = notifyTemplates;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
