// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vmp
{
    [Obsolete(@"volcengine.vmp.AlertingRules has been deprecated in favor of volcengine.vmp.getAlertingRules")]
    public static class AlertingRules
    {
        /// <summary>
        /// Use this data source to query detailed information of vmp alerting rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooWorkspace = new Volcengine.Vmp.Workspace("fooWorkspace", new()
        ///     {
        ///         InstanceTypeId = "vmp.standard.15d",
        ///         DeleteProtectionEnabled = false,
        ///         Description = "acc-test-1",
        ///         Username = "admin123",
        ///         Password = "***********",
        ///     });
        /// 
        ///     var fooContact = new Volcengine.Vmp.Contact("fooContact", new()
        ///     {
        ///         Email = "acctest1@tftest.com",
        ///         Webhook = new Volcengine.Vmp.Inputs.ContactWebhookArgs
        ///         {
        ///             Address = "https://www.acctest1.com",
        ///         },
        ///         LarkBotWebhook = new Volcengine.Vmp.Inputs.ContactLarkBotWebhookArgs
        ///         {
        ///             Address = "https://www.acctest1.com",
        ///         },
        ///         DingTalkBotWebhook = new Volcengine.Vmp.Inputs.ContactDingTalkBotWebhookArgs
        ///         {
        ///             Address = "https://www.dingacctest1.com",
        ///             AtMobiles = new[]
        ///             {
        ///                 "18046891812",
        ///             },
        ///         },
        ///         PhoneNumber = new Volcengine.Vmp.Inputs.ContactPhoneNumberArgs
        ///         {
        ///             CountryCode = "+86",
        ///             Number = "18310101010",
        ///         },
        ///     });
        /// 
        ///     var foo1Contact = new Volcengine.Vmp.Contact("foo1Contact", new()
        ///     {
        ///         Email = "acctest2@tftest.com",
        ///         Webhook = new Volcengine.Vmp.Inputs.ContactWebhookArgs
        ///         {
        ///             Address = "https://www.acctest2.com",
        ///         },
        ///         LarkBotWebhook = new Volcengine.Vmp.Inputs.ContactLarkBotWebhookArgs
        ///         {
        ///             Address = "https://www.acctest2.com",
        ///         },
        ///         DingTalkBotWebhook = new Volcengine.Vmp.Inputs.ContactDingTalkBotWebhookArgs
        ///         {
        ///             Address = "https://www.dingacctest2.com",
        ///             AtMobiles = new[]
        ///             {
        ///                 "18046891813",
        ///             },
        ///         },
        ///         PhoneNumber = new Volcengine.Vmp.Inputs.ContactPhoneNumberArgs
        ///         {
        ///             CountryCode = "+86",
        ///             Number = "18310101011",
        ///         },
        ///     });
        /// 
        ///     var fooContactGroup = new Volcengine.Vmp.ContactGroup("fooContactGroup", new()
        ///     {
        ///         ContactIds = new[]
        ///         {
        ///             fooContact.Id,
        ///         },
        ///     });
        /// 
        ///     var foo1ContactGroup = new Volcengine.Vmp.ContactGroup("foo1ContactGroup", new()
        ///     {
        ///         ContactIds = new[]
        ///         {
        ///             foo1Contact.Id,
        ///         },
        ///     });
        /// 
        ///     var fooNotifyPolicy = new Volcengine.Vmp.NotifyPolicy("fooNotifyPolicy", new()
        ///     {
        ///         Description = "acc-test-1",
        ///         Levels = new[]
        ///         {
        ///             new Volcengine.Vmp.Inputs.NotifyPolicyLevelArgs
        ///             {
        ///                 Level = "P1",
        ///                 ContactGroupIds = new[]
        ///                 {
        ///                     fooContactGroup.Id,
        ///                 },
        ///                 Channels = new[]
        ///                 {
        ///                     "Email",
        ///                     "Webhook",
        ///                 },
        ///             },
        ///             new Volcengine.Vmp.Inputs.NotifyPolicyLevelArgs
        ///             {
        ///                 Level = "P0",
        ///                 ContactGroupIds = new[]
        ///                 {
        ///                     foo1ContactGroup.Id,
        ///                 },
        ///                 Channels = new[]
        ///                 {
        ///                     "LarkBotWebhook",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooNotifyGroupPolicy = new Volcengine.Vmp.NotifyGroupPolicy("fooNotifyGroupPolicy", new()
        ///     {
        ///         Description = "acc-test-1",
        ///         Levels = new[]
        ///         {
        ///             new Volcengine.Vmp.Inputs.NotifyGroupPolicyLevelArgs
        ///             {
        ///                 Level = "P2",
        ///                 GroupBies = new[]
        ///                 {
        ///                     "__rule__",
        ///                 },
        ///                 GroupWait = "35",
        ///                 GroupInterval = "30",
        ///                 RepeatInterval = "30",
        ///             },
        ///             new Volcengine.Vmp.Inputs.NotifyGroupPolicyLevelArgs
        ///             {
        ///                 Level = "P0",
        ///                 GroupBies = new[]
        ///                 {
        ///                     "__rule__",
        ///                 },
        ///                 GroupWait = "30",
        ///                 GroupInterval = "30",
        ///                 RepeatInterval = "30",
        ///             },
        ///             new Volcengine.Vmp.Inputs.NotifyGroupPolicyLevelArgs
        ///             {
        ///                 Level = "P1",
        ///                 GroupBies = new[]
        ///                 {
        ///                     "__rule__",
        ///                 },
        ///                 GroupWait = "40",
        ///                 GroupInterval = "45",
        ///                 RepeatInterval = "30",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooAlertingRule = new Volcengine.Vmp.AlertingRule("fooAlertingRule", new()
        ///     {
        ///         Description = "acc-test-1",
        ///         NotifyPolicyId = fooNotifyPolicy.Id,
        ///         NotifyGroupPolicyId = fooNotifyGroupPolicy.Id,
        ///         Query = new Volcengine.Vmp.Inputs.AlertingRuleQueryArgs
        ///         {
        ///             WorkspaceId = fooWorkspace.Id,
        ///             PromQl = "sum(up)",
        ///         },
        ///         Levels = new[]
        ///         {
        ///             new Volcengine.Vmp.Inputs.AlertingRuleLevelArgs
        ///             {
        ///                 Level = "P0",
        ///                 For = "0s",
        ///                 Comparator = "&gt;=",
        ///                 Threshold = 2,
        ///             },
        ///             new Volcengine.Vmp.Inputs.AlertingRuleLevelArgs
        ///             {
        ///                 Level = "P1",
        ///                 For = "0s",
        ///                 Comparator = "&gt;=",
        ///                 Threshold = 1,
        ///             },
        ///             new Volcengine.Vmp.Inputs.AlertingRuleLevelArgs
        ///             {
        ///                 Level = "P2",
        ///                 For = "0s",
        ///                 Comparator = "&gt;=",
        ///                 Threshold = 0.5,
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooAlertingRules = Volcengine.Vmp.GetAlertingRules.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooAlertingRule.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<AlertingRulesResult> InvokeAsync(AlertingRulesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<AlertingRulesResult>("volcengine:vmp/alertingRules:AlertingRules", args ?? new AlertingRulesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vmp alerting rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooWorkspace = new Volcengine.Vmp.Workspace("fooWorkspace", new()
        ///     {
        ///         InstanceTypeId = "vmp.standard.15d",
        ///         DeleteProtectionEnabled = false,
        ///         Description = "acc-test-1",
        ///         Username = "admin123",
        ///         Password = "***********",
        ///     });
        /// 
        ///     var fooContact = new Volcengine.Vmp.Contact("fooContact", new()
        ///     {
        ///         Email = "acctest1@tftest.com",
        ///         Webhook = new Volcengine.Vmp.Inputs.ContactWebhookArgs
        ///         {
        ///             Address = "https://www.acctest1.com",
        ///         },
        ///         LarkBotWebhook = new Volcengine.Vmp.Inputs.ContactLarkBotWebhookArgs
        ///         {
        ///             Address = "https://www.acctest1.com",
        ///         },
        ///         DingTalkBotWebhook = new Volcengine.Vmp.Inputs.ContactDingTalkBotWebhookArgs
        ///         {
        ///             Address = "https://www.dingacctest1.com",
        ///             AtMobiles = new[]
        ///             {
        ///                 "18046891812",
        ///             },
        ///         },
        ///         PhoneNumber = new Volcengine.Vmp.Inputs.ContactPhoneNumberArgs
        ///         {
        ///             CountryCode = "+86",
        ///             Number = "18310101010",
        ///         },
        ///     });
        /// 
        ///     var foo1Contact = new Volcengine.Vmp.Contact("foo1Contact", new()
        ///     {
        ///         Email = "acctest2@tftest.com",
        ///         Webhook = new Volcengine.Vmp.Inputs.ContactWebhookArgs
        ///         {
        ///             Address = "https://www.acctest2.com",
        ///         },
        ///         LarkBotWebhook = new Volcengine.Vmp.Inputs.ContactLarkBotWebhookArgs
        ///         {
        ///             Address = "https://www.acctest2.com",
        ///         },
        ///         DingTalkBotWebhook = new Volcengine.Vmp.Inputs.ContactDingTalkBotWebhookArgs
        ///         {
        ///             Address = "https://www.dingacctest2.com",
        ///             AtMobiles = new[]
        ///             {
        ///                 "18046891813",
        ///             },
        ///         },
        ///         PhoneNumber = new Volcengine.Vmp.Inputs.ContactPhoneNumberArgs
        ///         {
        ///             CountryCode = "+86",
        ///             Number = "18310101011",
        ///         },
        ///     });
        /// 
        ///     var fooContactGroup = new Volcengine.Vmp.ContactGroup("fooContactGroup", new()
        ///     {
        ///         ContactIds = new[]
        ///         {
        ///             fooContact.Id,
        ///         },
        ///     });
        /// 
        ///     var foo1ContactGroup = new Volcengine.Vmp.ContactGroup("foo1ContactGroup", new()
        ///     {
        ///         ContactIds = new[]
        ///         {
        ///             foo1Contact.Id,
        ///         },
        ///     });
        /// 
        ///     var fooNotifyPolicy = new Volcengine.Vmp.NotifyPolicy("fooNotifyPolicy", new()
        ///     {
        ///         Description = "acc-test-1",
        ///         Levels = new[]
        ///         {
        ///             new Volcengine.Vmp.Inputs.NotifyPolicyLevelArgs
        ///             {
        ///                 Level = "P1",
        ///                 ContactGroupIds = new[]
        ///                 {
        ///                     fooContactGroup.Id,
        ///                 },
        ///                 Channels = new[]
        ///                 {
        ///                     "Email",
        ///                     "Webhook",
        ///                 },
        ///             },
        ///             new Volcengine.Vmp.Inputs.NotifyPolicyLevelArgs
        ///             {
        ///                 Level = "P0",
        ///                 ContactGroupIds = new[]
        ///                 {
        ///                     foo1ContactGroup.Id,
        ///                 },
        ///                 Channels = new[]
        ///                 {
        ///                     "LarkBotWebhook",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooNotifyGroupPolicy = new Volcengine.Vmp.NotifyGroupPolicy("fooNotifyGroupPolicy", new()
        ///     {
        ///         Description = "acc-test-1",
        ///         Levels = new[]
        ///         {
        ///             new Volcengine.Vmp.Inputs.NotifyGroupPolicyLevelArgs
        ///             {
        ///                 Level = "P2",
        ///                 GroupBies = new[]
        ///                 {
        ///                     "__rule__",
        ///                 },
        ///                 GroupWait = "35",
        ///                 GroupInterval = "30",
        ///                 RepeatInterval = "30",
        ///             },
        ///             new Volcengine.Vmp.Inputs.NotifyGroupPolicyLevelArgs
        ///             {
        ///                 Level = "P0",
        ///                 GroupBies = new[]
        ///                 {
        ///                     "__rule__",
        ///                 },
        ///                 GroupWait = "30",
        ///                 GroupInterval = "30",
        ///                 RepeatInterval = "30",
        ///             },
        ///             new Volcengine.Vmp.Inputs.NotifyGroupPolicyLevelArgs
        ///             {
        ///                 Level = "P1",
        ///                 GroupBies = new[]
        ///                 {
        ///                     "__rule__",
        ///                 },
        ///                 GroupWait = "40",
        ///                 GroupInterval = "45",
        ///                 RepeatInterval = "30",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooAlertingRule = new Volcengine.Vmp.AlertingRule("fooAlertingRule", new()
        ///     {
        ///         Description = "acc-test-1",
        ///         NotifyPolicyId = fooNotifyPolicy.Id,
        ///         NotifyGroupPolicyId = fooNotifyGroupPolicy.Id,
        ///         Query = new Volcengine.Vmp.Inputs.AlertingRuleQueryArgs
        ///         {
        ///             WorkspaceId = fooWorkspace.Id,
        ///             PromQl = "sum(up)",
        ///         },
        ///         Levels = new[]
        ///         {
        ///             new Volcengine.Vmp.Inputs.AlertingRuleLevelArgs
        ///             {
        ///                 Level = "P0",
        ///                 For = "0s",
        ///                 Comparator = "&gt;=",
        ///                 Threshold = 2,
        ///             },
        ///             new Volcengine.Vmp.Inputs.AlertingRuleLevelArgs
        ///             {
        ///                 Level = "P1",
        ///                 For = "0s",
        ///                 Comparator = "&gt;=",
        ///                 Threshold = 1,
        ///             },
        ///             new Volcengine.Vmp.Inputs.AlertingRuleLevelArgs
        ///             {
        ///                 Level = "P2",
        ///                 For = "0s",
        ///                 Comparator = "&gt;=",
        ///                 Threshold = 0.5,
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooAlertingRules = Volcengine.Vmp.GetAlertingRules.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooAlertingRule.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<AlertingRulesResult> Invoke(AlertingRulesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<AlertingRulesResult>("volcengine:vmp/alertingRules:AlertingRules", args ?? new AlertingRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class AlertingRulesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of vmp alerting rule IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The name of vmp alerting rule. This field support fuzzy query.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("notifyGroupPolicyIds")]
        private List<string>? _notifyGroupPolicyIds;

        /// <summary>
        /// A list of notify group policy IDs.
        /// </summary>
        public List<string> NotifyGroupPolicyIds
        {
            get => _notifyGroupPolicyIds ?? (_notifyGroupPolicyIds = new List<string>());
            set => _notifyGroupPolicyIds = value;
        }

        [Input("notifyPolicyIds")]
        private List<string>? _notifyPolicyIds;

        /// <summary>
        /// A list of notify policy IDs.
        /// </summary>
        public List<string> NotifyPolicyIds
        {
            get => _notifyPolicyIds ?? (_notifyPolicyIds = new List<string>());
            set => _notifyPolicyIds = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// The type of vmp alerting rule. Valid values: `vmp/PromQL`.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        /// <summary>
        /// The workspace id of vmp alerting rule.
        /// </summary>
        [Input("workspaceId")]
        public string? WorkspaceId { get; set; }

        public AlertingRulesArgs()
        {
        }
        public static new AlertingRulesArgs Empty => new AlertingRulesArgs();
    }

    public sealed class AlertingRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of vmp alerting rule IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The name of vmp alerting rule. This field support fuzzy query.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("notifyGroupPolicyIds")]
        private InputList<string>? _notifyGroupPolicyIds;

        /// <summary>
        /// A list of notify group policy IDs.
        /// </summary>
        public InputList<string> NotifyGroupPolicyIds
        {
            get => _notifyGroupPolicyIds ?? (_notifyGroupPolicyIds = new InputList<string>());
            set => _notifyGroupPolicyIds = value;
        }

        [Input("notifyPolicyIds")]
        private InputList<string>? _notifyPolicyIds;

        /// <summary>
        /// A list of notify policy IDs.
        /// </summary>
        public InputList<string> NotifyPolicyIds
        {
            get => _notifyPolicyIds ?? (_notifyPolicyIds = new InputList<string>());
            set => _notifyPolicyIds = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The status of vmp alerting rule. Valid values: `Running`, `Disabled`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The type of vmp alerting rule. Valid values: `vmp/PromQL`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The workspace id of vmp alerting rule.
        /// </summary>
        [Input("workspaceId")]
        public Input<string>? WorkspaceId { get; set; }

        public AlertingRulesInvokeArgs()
        {
        }
        public static new AlertingRulesInvokeArgs Empty => new AlertingRulesInvokeArgs();
    }


    [OutputType]
    public sealed class AlertingRulesResult
    {
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.AlertingRulesAlertingRuleResult> AlertingRules;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The name of the vmp alerting rule.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly ImmutableArray<string> NotifyGroupPolicyIds;
        public readonly ImmutableArray<string> NotifyPolicyIds;
        public readonly string? OutputFile;
        /// <summary>
        /// The status of the vmp alerting rule.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The type of the vmp alerting rule.
        /// </summary>
        public readonly string? Type;
        /// <summary>
        /// The id of the workspace.
        /// </summary>
        public readonly string? WorkspaceId;

        [OutputConstructor]
        private AlertingRulesResult(
            ImmutableArray<Outputs.AlertingRulesAlertingRuleResult> alertingRules,

            string id,

            ImmutableArray<string> ids,

            string? name,

            string? nameRegex,

            ImmutableArray<string> notifyGroupPolicyIds,

            ImmutableArray<string> notifyPolicyIds,

            string? outputFile,

            string? status,

            int totalCount,

            string? type,

            string? workspaceId)
        {
            AlertingRules = alertingRules;
            Id = id;
            Ids = ids;
            Name = name;
            NameRegex = nameRegex;
            NotifyGroupPolicyIds = notifyGroupPolicyIds;
            NotifyPolicyIds = notifyPolicyIds;
            OutputFile = outputFile;
            Status = status;
            TotalCount = totalCount;
            Type = type;
            WorkspaceId = workspaceId;
        }
    }
}
