// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vmp
{
    public static class GetRules
    {
        /// <summary>
        /// Use this data source to query detailed information of vmp rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vmp.GetRules.Invoke(new()
        ///     {
        ///         Kind = "Recording",
        ///         WorkspaceId = "baa02ffb-6f22-43c4-841b-ecf90ded****",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRulesResult> InvokeAsync(GetRulesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRulesResult>("volcengine:vmp/getRules:getRules", args ?? new GetRulesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vmp rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vmp.GetRules.Invoke(new()
        ///     {
        ///         Kind = "Recording",
        ///         WorkspaceId = "baa02ffb-6f22-43c4-841b-ecf90ded****",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRulesResult> Invoke(GetRulesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRulesResult>("volcengine:vmp/getRules:getRules", args ?? new GetRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The kind of rule.
        /// </summary>
        [Input("kind", required: true)]
        public string Kind { get; set; } = null!;

        /// <summary>
        /// The name of rule.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("ruleFileNames")]
        private List<string>? _ruleFileNames;

        /// <summary>
        /// The name of rule file.
        /// </summary>
        public List<string> RuleFileNames
        {
            get => _ruleFileNames ?? (_ruleFileNames = new List<string>());
            set => _ruleFileNames = value;
        }

        [Input("ruleGroupNames")]
        private List<string>? _ruleGroupNames;

        /// <summary>
        /// The name of rule group.
        /// </summary>
        public List<string> RuleGroupNames
        {
            get => _ruleGroupNames ?? (_ruleGroupNames = new List<string>());
            set => _ruleGroupNames = value;
        }

        /// <summary>
        /// The status of rule.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// The id of workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public string WorkspaceId { get; set; } = null!;

        public GetRulesArgs()
        {
        }
        public static new GetRulesArgs Empty => new GetRulesArgs();
    }

    public sealed class GetRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The kind of rule.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The name of rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("ruleFileNames")]
        private InputList<string>? _ruleFileNames;

        /// <summary>
        /// The name of rule file.
        /// </summary>
        public InputList<string> RuleFileNames
        {
            get => _ruleFileNames ?? (_ruleFileNames = new InputList<string>());
            set => _ruleFileNames = value;
        }

        [Input("ruleGroupNames")]
        private InputList<string>? _ruleGroupNames;

        /// <summary>
        /// The name of rule group.
        /// </summary>
        public InputList<string> RuleGroupNames
        {
            get => _ruleGroupNames ?? (_ruleGroupNames = new InputList<string>());
            set => _ruleGroupNames = value;
        }

        /// <summary>
        /// The status of rule.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The id of workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public GetRulesInvokeArgs()
        {
        }
        public static new GetRulesInvokeArgs Empty => new GetRulesInvokeArgs();
    }


    [OutputType]
    public sealed class GetRulesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The kind of rule.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// The name of rule.
        /// </summary>
        public readonly string? Name;
        public readonly string? OutputFile;
        public readonly ImmutableArray<string> RuleFileNames;
        public readonly ImmutableArray<string> RuleGroupNames;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRulesRuleResult> Rules;
        /// <summary>
        /// The status of rule.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        public readonly string WorkspaceId;

        [OutputConstructor]
        private GetRulesResult(
            string id,

            string kind,

            string? name,

            string? outputFile,

            ImmutableArray<string> ruleFileNames,

            ImmutableArray<string> ruleGroupNames,

            ImmutableArray<Outputs.GetRulesRuleResult> rules,

            string? status,

            int totalCount,

            string workspaceId)
        {
            Id = id;
            Kind = kind;
            Name = name;
            OutputFile = outputFile;
            RuleFileNames = ruleFileNames;
            RuleGroupNames = ruleGroupNames;
            Rules = rules;
            Status = status;
            TotalCount = totalCount;
            WorkspaceId = workspaceId;
        }
    }
}
