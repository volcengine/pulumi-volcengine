// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vmp
{
    /// <summary>
    /// Provides a resource to manage vmp workspace
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Vmp.Workspace("foo", new()
    ///     {
    ///         DeleteProtectionEnabled = false,
    ///         Description = "acc-test",
    ///         InstanceTypeId = "vmp.standard.15d",
    ///         Password = "Pass123456",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vmp.Inputs.WorkspaceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///         Username = "admin123",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Workspace can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vmp/workspace:Workspace default 60dde3ca-951c-4c05-8777-e5a7caa07ad6
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vmp/workspace:Workspace")]
    public partial class Workspace : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The create time of workspace.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether enable delete protection.
        /// </summary>
        [Output("deleteProtectionEnabled")]
        public Output<bool?> DeleteProtectionEnabled { get; private set; } = null!;

        /// <summary>
        /// The description of the workspace.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The instance type id of the workspace.
        /// </summary>
        [Output("instanceTypeId")]
        public Output<string> InstanceTypeId { get; private set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The overdue reclaim time.
        /// </summary>
        [Output("overdueReclaimTime")]
        public Output<string> OverdueReclaimTime { get; private set; } = null!;

        /// <summary>
        /// The password of the workspace.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The project name of the vmp workspace.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The prometheus push intranet endpoint.
        /// </summary>
        [Output("prometheusPushIntranetEndpoint")]
        public Output<string> PrometheusPushIntranetEndpoint { get; private set; } = null!;

        /// <summary>
        /// The prometheus query intranet endpoint.
        /// </summary>
        [Output("prometheusQueryIntranetEndpoint")]
        public Output<string> PrometheusQueryIntranetEndpoint { get; private set; } = null!;

        /// <summary>
        /// The prometheus write intranet endpoint.
        /// </summary>
        [Output("prometheusWriteIntranetEndpoint")]
        public Output<string> PrometheusWriteIntranetEndpoint { get; private set; } = null!;

        /// <summary>
        /// The status of workspace.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.WorkspaceTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The username of the workspace.
        /// </summary>
        [Output("username")]
        public Output<string?> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Workspace resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Workspace(string name, WorkspaceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vmp/workspace:Workspace", name, args ?? new WorkspaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Workspace(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vmp/workspace:Workspace", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Workspace resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Workspace Get(string name, Input<string> id, WorkspaceState? state = null, CustomResourceOptions? options = null)
        {
            return new Workspace(name, id, state, options);
        }
    }

    public sealed class WorkspaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether enable delete protection.
        /// </summary>
        [Input("deleteProtectionEnabled")]
        public Input<bool>? DeleteProtectionEnabled { get; set; }

        /// <summary>
        /// The description of the workspace.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The instance type id of the workspace.
        /// </summary>
        [Input("instanceTypeId", required: true)]
        public Input<string> InstanceTypeId { get; set; } = null!;

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of the workspace.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The project name of the vmp workspace.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("tags")]
        private InputList<Inputs.WorkspaceTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.WorkspaceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.WorkspaceTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The username of the workspace.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public WorkspaceArgs()
        {
        }
        public static new WorkspaceArgs Empty => new WorkspaceArgs();
    }

    public sealed class WorkspaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The create time of workspace.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Whether enable delete protection.
        /// </summary>
        [Input("deleteProtectionEnabled")]
        public Input<bool>? DeleteProtectionEnabled { get; set; }

        /// <summary>
        /// The description of the workspace.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The instance type id of the workspace.
        /// </summary>
        [Input("instanceTypeId")]
        public Input<string>? InstanceTypeId { get; set; }

        /// <summary>
        /// The name of the workspace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The overdue reclaim time.
        /// </summary>
        [Input("overdueReclaimTime")]
        public Input<string>? OverdueReclaimTime { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of the workspace.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The project name of the vmp workspace.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The prometheus push intranet endpoint.
        /// </summary>
        [Input("prometheusPushIntranetEndpoint")]
        public Input<string>? PrometheusPushIntranetEndpoint { get; set; }

        /// <summary>
        /// The prometheus query intranet endpoint.
        /// </summary>
        [Input("prometheusQueryIntranetEndpoint")]
        public Input<string>? PrometheusQueryIntranetEndpoint { get; set; }

        /// <summary>
        /// The prometheus write intranet endpoint.
        /// </summary>
        [Input("prometheusWriteIntranetEndpoint")]
        public Input<string>? PrometheusWriteIntranetEndpoint { get; set; }

        /// <summary>
        /// The status of workspace.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.WorkspaceTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.WorkspaceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.WorkspaceTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The username of the workspace.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public WorkspaceState()
        {
        }
        public static new WorkspaceState Empty => new WorkspaceState();
    }
}
