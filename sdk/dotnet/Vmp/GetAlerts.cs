// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vmp
{
    public static class GetAlerts
    {
        /// <summary>
        /// Use this data source to query detailed information of vmp alerts
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vmp.GetAlerts.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "9a4f84-0868efcb795c2ac4-73cefd4b3263****",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAlertsResult> InvokeAsync(GetAlertsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAlertsResult>("volcengine:vmp/getAlerts:getAlerts", args ?? new GetAlertsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vmp alerts
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vmp.GetAlerts.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "9a4f84-0868efcb795c2ac4-73cefd4b3263****",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAlertsResult> Invoke(GetAlertsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAlertsResult>("volcengine:vmp/getAlerts:getAlerts", args ?? new GetAlertsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAlertsArgs : global::Pulumi.InvokeArgs
    {
        [Input("alertingRuleIds")]
        private List<string>? _alertingRuleIds;

        /// <summary>
        /// A list of alerting rule IDs.
        /// </summary>
        public List<string> AlertingRuleIds
        {
            get => _alertingRuleIds ?? (_alertingRuleIds = new List<string>());
            set => _alertingRuleIds = value;
        }

        /// <summary>
        /// The status of vmp alert. Valid values: `Pending`, `Active`, `Resolved`, `Disabled`.
        /// </summary>
        [Input("currentPhase")]
        public string? CurrentPhase { get; set; }

        /// <summary>
        /// Whether to use descending sorting.
        /// </summary>
        [Input("desc")]
        public bool? Desc { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of vmp alert IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The level of vmp alert. Valid values: `P0`, `P1`, `P2`.
        /// </summary>
        [Input("level")]
        public string? Level { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetAlertsArgs()
        {
        }
        public static new GetAlertsArgs Empty => new GetAlertsArgs();
    }

    public sealed class GetAlertsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("alertingRuleIds")]
        private InputList<string>? _alertingRuleIds;

        /// <summary>
        /// A list of alerting rule IDs.
        /// </summary>
        public InputList<string> AlertingRuleIds
        {
            get => _alertingRuleIds ?? (_alertingRuleIds = new InputList<string>());
            set => _alertingRuleIds = value;
        }

        /// <summary>
        /// The status of vmp alert. Valid values: `Pending`, `Active`, `Resolved`, `Disabled`.
        /// </summary>
        [Input("currentPhase")]
        public Input<string>? CurrentPhase { get; set; }

        /// <summary>
        /// Whether to use descending sorting.
        /// </summary>
        [Input("desc")]
        public Input<bool>? Desc { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of vmp alert IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The level of vmp alert. Valid values: `P0`, `P1`, `P2`.
        /// </summary>
        [Input("level")]
        public Input<string>? Level { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetAlertsInvokeArgs()
        {
        }
        public static new GetAlertsInvokeArgs Empty => new GetAlertsInvokeArgs();
    }


    [OutputType]
    public sealed class GetAlertsResult
    {
        public readonly ImmutableArray<string> AlertingRuleIds;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertsAlertResult> Alerts;
        /// <summary>
        /// The status of the vmp alert.
        /// </summary>
        public readonly string? CurrentPhase;
        public readonly bool? Desc;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The level of the vmp alerting rule.
        /// </summary>
        public readonly string? Level;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetAlertsResult(
            ImmutableArray<string> alertingRuleIds,

            ImmutableArray<Outputs.GetAlertsAlertResult> alerts,

            string? currentPhase,

            bool? desc,

            string id,

            ImmutableArray<string> ids,

            string? level,

            string? outputFile,

            int totalCount)
        {
            AlertingRuleIds = alertingRuleIds;
            Alerts = alerts;
            CurrentPhase = currentPhase;
            Desc = desc;
            Id = id;
            Ids = ids;
            Level = level;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
