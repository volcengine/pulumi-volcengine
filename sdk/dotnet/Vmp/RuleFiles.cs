// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vmp
{
    [Obsolete(@"volcengine.vmp.RuleFiles has been deprecated in favor of volcengine.vmp.getRuleFiles")]
    public static class RuleFiles
    {
        /// <summary>
        /// Use this data source to query detailed information of vmp rule files
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooWorkspace = new Volcengine.Vmp.Workspace("fooWorkspace", new()
        ///     {
        ///         InstanceTypeId = "vmp.standard.15d",
        ///         DeleteProtectionEnabled = false,
        ///         Description = "acc-test-1",
        ///         Username = "admin123",
        ///         Password = "*********",
        ///     });
        /// 
        ///     var fooRuleFile = new Volcengine.Vmp.RuleFile("fooRuleFile", new()
        ///     {
        ///         WorkspaceId = fooWorkspace.Id,
        ///         Description = "acc-test-1",
        ///         Content = @"groups:
        ///     - interval: 10s
        ///       name: recording_rules
        ///       rules:
        ///         - expr: sum(irate(container_cpu_usage_seconds_total{image!=""""}[5m])) by (pod) *100
        ///           labels:
        ///             team: operations
        ///           record: pod:cpu:useage
        /// ",
        ///     });
        /// 
        ///     var fooRuleFiles = Volcengine.Vmp.GetRuleFiles.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooRuleFile.RuleFileId,
        ///         },
        ///         WorkspaceId = fooWorkspace.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<RuleFilesResult> InvokeAsync(RuleFilesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<RuleFilesResult>("volcengine:vmp/ruleFiles:RuleFiles", args ?? new RuleFilesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vmp rule files
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooWorkspace = new Volcengine.Vmp.Workspace("fooWorkspace", new()
        ///     {
        ///         InstanceTypeId = "vmp.standard.15d",
        ///         DeleteProtectionEnabled = false,
        ///         Description = "acc-test-1",
        ///         Username = "admin123",
        ///         Password = "*********",
        ///     });
        /// 
        ///     var fooRuleFile = new Volcengine.Vmp.RuleFile("fooRuleFile", new()
        ///     {
        ///         WorkspaceId = fooWorkspace.Id,
        ///         Description = "acc-test-1",
        ///         Content = @"groups:
        ///     - interval: 10s
        ///       name: recording_rules
        ///       rules:
        ///         - expr: sum(irate(container_cpu_usage_seconds_total{image!=""""}[5m])) by (pod) *100
        ///           labels:
        ///             team: operations
        ///           record: pod:cpu:useage
        /// ",
        ///     });
        /// 
        ///     var fooRuleFiles = Volcengine.Vmp.GetRuleFiles.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooRuleFile.RuleFileId,
        ///         },
        ///         WorkspaceId = fooWorkspace.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<RuleFilesResult> Invoke(RuleFilesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<RuleFilesResult>("volcengine:vmp/ruleFiles:RuleFiles", args ?? new RuleFilesInvokeArgs(), options.WithDefaults());
    }


    public sealed class RuleFilesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Rule File IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The name of rule file.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The status of rule file.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// The id of workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public string WorkspaceId { get; set; } = null!;

        public RuleFilesArgs()
        {
        }
        public static new RuleFilesArgs Empty => new RuleFilesArgs();
    }

    public sealed class RuleFilesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Rule File IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The name of rule file.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The status of rule file.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The id of workspace.
        /// </summary>
        [Input("workspaceId", required: true)]
        public Input<string> WorkspaceId { get; set; } = null!;

        public RuleFilesInvokeArgs()
        {
        }
        public static new RuleFilesInvokeArgs Empty => new RuleFilesInvokeArgs();
    }


    [OutputType]
    public sealed class RuleFilesResult
    {
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.RuleFilesFileResult> Files;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The name of rule file.
        /// </summary>
        public readonly string? Name;
        public readonly string? OutputFile;
        /// <summary>
        /// The status of rule file.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        public readonly string WorkspaceId;

        [OutputConstructor]
        private RuleFilesResult(
            ImmutableArray<Outputs.RuleFilesFileResult> files,

            string id,

            ImmutableArray<string> ids,

            string? name,

            string? outputFile,

            string? status,

            int totalCount,

            string workspaceId)
        {
            Files = files;
            Id = id;
            Ids = ids;
            Name = name;
            OutputFile = outputFile;
            Status = status;
            TotalCount = totalCount;
            WorkspaceId = workspaceId;
        }
    }
}
