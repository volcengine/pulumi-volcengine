// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vmp
{
    public static class GetWorkspaces
    {
        /// <summary>
        /// Use this data source to query detailed information of vmp workspaces
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooWorkspace = new Volcengine.Vmp.Workspace("fooWorkspace", new()
        ///     {
        ///         InstanceTypeId = "vmp.standard.15d",
        ///         DeleteProtectionEnabled = false,
        ///         Description = "acc-test-1",
        ///         Username = "admin123",
        ///         Password = "*******",
        ///     });
        /// 
        ///     var fooWorkspaces = Volcengine.Vmp.GetWorkspaces.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooWorkspace.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetWorkspacesResult> InvokeAsync(GetWorkspacesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetWorkspacesResult>("volcengine:vmp/getWorkspaces:getWorkspaces", args ?? new GetWorkspacesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vmp workspaces
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooWorkspace = new Volcengine.Vmp.Workspace("fooWorkspace", new()
        ///     {
        ///         InstanceTypeId = "vmp.standard.15d",
        ///         DeleteProtectionEnabled = false,
        ///         Description = "acc-test-1",
        ///         Username = "admin123",
        ///         Password = "*******",
        ///     });
        /// 
        ///     var fooWorkspaces = Volcengine.Vmp.GetWorkspaces.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooWorkspace.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetWorkspacesResult> Invoke(GetWorkspacesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetWorkspacesResult>("volcengine:vmp/getWorkspaces:getWorkspaces", args ?? new GetWorkspacesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetWorkspacesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Workspace IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("instanceTypeIds")]
        private List<string>? _instanceTypeIds;

        /// <summary>
        /// A list of Instance Type IDs.
        /// </summary>
        public List<string> InstanceTypeIds
        {
            get => _instanceTypeIds ?? (_instanceTypeIds = new List<string>());
            set => _instanceTypeIds = value;
        }

        /// <summary>
        /// The name of workspace.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of vmp workspace.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// A list of Workspace status.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        [Input("tags")]
        private List<Inputs.GetWorkspacesTagArgs>? _tags;

        /// <summary>
        /// The tags of vmp workspace.
        /// </summary>
        public List<Inputs.GetWorkspacesTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetWorkspacesTagArgs>());
            set => _tags = value;
        }

        public GetWorkspacesArgs()
        {
        }
        public static new GetWorkspacesArgs Empty => new GetWorkspacesArgs();
    }

    public sealed class GetWorkspacesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Workspace IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        [Input("instanceTypeIds")]
        private InputList<string>? _instanceTypeIds;

        /// <summary>
        /// A list of Instance Type IDs.
        /// </summary>
        public InputList<string> InstanceTypeIds
        {
            get => _instanceTypeIds ?? (_instanceTypeIds = new InputList<string>());
            set => _instanceTypeIds = value;
        }

        /// <summary>
        /// The name of workspace.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of vmp workspace.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// A list of Workspace status.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        [Input("tags")]
        private InputList<Inputs.GetWorkspacesTagInputArgs>? _tags;

        /// <summary>
        /// The tags of vmp workspace.
        /// </summary>
        public InputList<Inputs.GetWorkspacesTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetWorkspacesTagInputArgs>());
            set => _tags = value;
        }

        public GetWorkspacesInvokeArgs()
        {
        }
        public static new GetWorkspacesInvokeArgs Empty => new GetWorkspacesInvokeArgs();
    }


    [OutputType]
    public sealed class GetWorkspacesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableArray<string> InstanceTypeIds;
        /// <summary>
        /// The name of workspace.
        /// </summary>
        public readonly string? Name;
        public readonly string? OutputFile;
        /// <summary>
        /// The project name of vmp workspace.
        /// </summary>
        public readonly string? ProjectName;
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkspacesTagResult> Tags;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkspacesWorkspaceResult> Workspaces;

        [OutputConstructor]
        private GetWorkspacesResult(
            string id,

            ImmutableArray<string> ids,

            ImmutableArray<string> instanceTypeIds,

            string? name,

            string? outputFile,

            string? projectName,

            ImmutableArray<string> statuses,

            ImmutableArray<Outputs.GetWorkspacesTagResult> tags,

            int totalCount,

            ImmutableArray<Outputs.GetWorkspacesWorkspaceResult> workspaces)
        {
            Id = id;
            Ids = ids;
            InstanceTypeIds = instanceTypeIds;
            Name = name;
            OutputFile = outputFile;
            ProjectName = projectName;
            Statuses = statuses;
            Tags = tags;
            TotalCount = totalCount;
            Workspaces = workspaces;
        }
    }
}
