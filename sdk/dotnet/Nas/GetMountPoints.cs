// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Nas
{
    public static class GetMountPoints
    {
        /// <summary>
        /// Use this data source to query detailed information of nas mount points
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Nas.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-project1",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-subnet-test-2",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooPermissionGroup = new Volcengine.Nas.PermissionGroup("fooPermissionGroup", new()
        ///     {
        ///         PermissionGroupName = "acc-test",
        ///         Description = "acctest",
        ///         PermissionRules = new[]
        ///         {
        ///             new Volcengine.Nas.Inputs.PermissionGroupPermissionRuleArgs
        ///             {
        ///                 CidrIp = "*",
        ///                 RwMode = "RW",
        ///                 UseMode = "All_squash",
        ///             },
        ///             new Volcengine.Nas.Inputs.PermissionGroupPermissionRuleArgs
        ///             {
        ///                 CidrIp = "192.168.0.0",
        ///                 RwMode = "RO",
        ///                 UseMode = "All_squash",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooFileSystem = new Volcengine.Nas.FileSystem("fooFileSystem", new()
        ///     {
        ///         FileSystemName = "acc-test-fs",
        ///         Description = "acc-test",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         Capacity = 103,
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Nas.Inputs.FileSystemTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooMountPoint = new Volcengine.Nas.MountPoint("fooMountPoint", new()
        ///     {
        ///         FileSystemId = fooFileSystem.Id,
        ///         MountPointName = "acc-test",
        ///         PermissionGroupId = fooPermissionGroup.Id,
        ///         SubnetId = fooSubnet.Id,
        ///     });
        /// 
        ///     var fooMountPoints = Volcengine.Nas.GetMountPoints.Invoke(new()
        ///     {
        ///         FileSystemId = fooFileSystem.Id,
        ///         MountPointId = fooMountPoint.MountPointId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetMountPointsResult> InvokeAsync(GetMountPointsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMountPointsResult>("volcengine:nas/getMountPoints:getMountPoints", args ?? new GetMountPointsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of nas mount points
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Nas.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-project1",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-subnet-test-2",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooPermissionGroup = new Volcengine.Nas.PermissionGroup("fooPermissionGroup", new()
        ///     {
        ///         PermissionGroupName = "acc-test",
        ///         Description = "acctest",
        ///         PermissionRules = new[]
        ///         {
        ///             new Volcengine.Nas.Inputs.PermissionGroupPermissionRuleArgs
        ///             {
        ///                 CidrIp = "*",
        ///                 RwMode = "RW",
        ///                 UseMode = "All_squash",
        ///             },
        ///             new Volcengine.Nas.Inputs.PermissionGroupPermissionRuleArgs
        ///             {
        ///                 CidrIp = "192.168.0.0",
        ///                 RwMode = "RO",
        ///                 UseMode = "All_squash",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooFileSystem = new Volcengine.Nas.FileSystem("fooFileSystem", new()
        ///     {
        ///         FileSystemName = "acc-test-fs",
        ///         Description = "acc-test",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         Capacity = 103,
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Nas.Inputs.FileSystemTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooMountPoint = new Volcengine.Nas.MountPoint("fooMountPoint", new()
        ///     {
        ///         FileSystemId = fooFileSystem.Id,
        ///         MountPointName = "acc-test",
        ///         PermissionGroupId = fooPermissionGroup.Id,
        ///         SubnetId = fooSubnet.Id,
        ///     });
        /// 
        ///     var fooMountPoints = Volcengine.Nas.GetMountPoints.Invoke(new()
        ///     {
        ///         FileSystemId = fooFileSystem.Id,
        ///         MountPointId = fooMountPoint.MountPointId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetMountPointsResult> Invoke(GetMountPointsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMountPointsResult>("volcengine:nas/getMountPoints:getMountPoints", args ?? new GetMountPointsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMountPointsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the file system.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public string FileSystemId { get; set; } = null!;

        /// <summary>
        /// The id of the mount point.
        /// </summary>
        [Input("mountPointId")]
        public string? MountPointId { get; set; }

        /// <summary>
        /// The name of the mount point.
        /// </summary>
        [Input("mountPointName")]
        public string? MountPointName { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The id of the vpc.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetMountPointsArgs()
        {
        }
        public static new GetMountPointsArgs Empty => new GetMountPointsArgs();
    }

    public sealed class GetMountPointsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the file system.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public Input<string> FileSystemId { get; set; } = null!;

        /// <summary>
        /// The id of the mount point.
        /// </summary>
        [Input("mountPointId")]
        public Input<string>? MountPointId { get; set; }

        /// <summary>
        /// The name of the mount point.
        /// </summary>
        [Input("mountPointName")]
        public Input<string>? MountPointName { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The id of the vpc.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetMountPointsInvokeArgs()
        {
        }
        public static new GetMountPointsInvokeArgs Empty => new GetMountPointsInvokeArgs();
    }


    [OutputType]
    public sealed class GetMountPointsResult
    {
        /// <summary>
        /// The id of the file system.
        /// </summary>
        public readonly string FileSystemId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The id of the mount point.
        /// </summary>
        public readonly string? MountPointId;
        /// <summary>
        /// The name of the mount point.
        /// </summary>
        public readonly string? MountPointName;
        /// <summary>
        /// The list of the mount point.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMountPointsMountPointResult> MountPoints;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of nas mount points query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The id of the vpc.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private GetMountPointsResult(
            string fileSystemId,

            string id,

            string? mountPointId,

            string? mountPointName,

            ImmutableArray<Outputs.GetMountPointsMountPointResult> mountPoints,

            string? outputFile,

            int totalCount,

            string? vpcId)
        {
            FileSystemId = fileSystemId;
            Id = id;
            MountPointId = mountPointId;
            MountPointName = mountPointName;
            MountPoints = mountPoints;
            OutputFile = outputFile;
            TotalCount = totalCount;
            VpcId = vpcId;
        }
    }
}
