// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Nas
{
    public static class GetPermissionGroups
    {
        /// <summary>
        /// Use this data source to query detailed information of nas permission groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = new Volcengine.Nas.PermissionGroup("foo", new()
        ///     {
        ///         PermissionGroupName = "acc-test",
        ///         Description = "acctest",
        ///         PermissionRules = new[]
        ///         {
        ///             new Volcengine.Nas.Inputs.PermissionGroupPermissionRuleArgs
        ///             {
        ///                 CidrIp = "*",
        ///                 RwMode = "RW",
        ///                 UseMode = "All_squash",
        ///             },
        ///             new Volcengine.Nas.Inputs.PermissionGroupPermissionRuleArgs
        ///             {
        ///                 CidrIp = "192.168.0.0",
        ///                 RwMode = "RO",
        ///                 UseMode = "All_squash",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @default = Volcengine.Nas.GetPermissionGroups.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Volcengine.Nas.Inputs.GetPermissionGroupsFilterInputArgs
        ///             {
        ///                 Key = "PermissionGroupId",
        ///                 Value = foo.Id,
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPermissionGroupsResult> InvokeAsync(GetPermissionGroupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPermissionGroupsResult>("volcengine:nas/getPermissionGroups:getPermissionGroups", args ?? new GetPermissionGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of nas permission groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = new Volcengine.Nas.PermissionGroup("foo", new()
        ///     {
        ///         PermissionGroupName = "acc-test",
        ///         Description = "acctest",
        ///         PermissionRules = new[]
        ///         {
        ///             new Volcengine.Nas.Inputs.PermissionGroupPermissionRuleArgs
        ///             {
        ///                 CidrIp = "*",
        ///                 RwMode = "RW",
        ///                 UseMode = "All_squash",
        ///             },
        ///             new Volcengine.Nas.Inputs.PermissionGroupPermissionRuleArgs
        ///             {
        ///                 CidrIp = "192.168.0.0",
        ///                 RwMode = "RO",
        ///                 UseMode = "All_squash",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var @default = Volcengine.Nas.GetPermissionGroups.Invoke(new()
        ///     {
        ///         Filters = new[]
        ///         {
        ///             new Volcengine.Nas.Inputs.GetPermissionGroupsFilterInputArgs
        ///             {
        ///                 Key = "PermissionGroupId",
        ///                 Value = foo.Id,
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPermissionGroupsResult> Invoke(GetPermissionGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPermissionGroupsResult>("volcengine:nas/getPermissionGroups:getPermissionGroups", args ?? new GetPermissionGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPermissionGroupsArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetPermissionGroupsFilterArgs>? _filters;

        /// <summary>
        /// Filter permission groups for specified characteristics.
        /// </summary>
        public List<Inputs.GetPermissionGroupsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetPermissionGroupsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetPermissionGroupsArgs()
        {
        }
        public static new GetPermissionGroupsArgs Empty => new GetPermissionGroupsArgs();
    }

    public sealed class GetPermissionGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetPermissionGroupsFilterInputArgs>? _filters;

        /// <summary>
        /// Filter permission groups for specified characteristics.
        /// </summary>
        public InputList<Inputs.GetPermissionGroupsFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetPermissionGroupsFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetPermissionGroupsInvokeArgs()
        {
        }
        public static new GetPermissionGroupsInvokeArgs Empty => new GetPermissionGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetPermissionGroupsResult
    {
        public readonly ImmutableArray<Outputs.GetPermissionGroupsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The list of permissions groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPermissionGroupsPermissionGroupResult> PermissionGroups;
        /// <summary>
        /// The total count of nas permission groups query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetPermissionGroupsResult(
            ImmutableArray<Outputs.GetPermissionGroupsFilterResult> filters,

            string id,

            string? outputFile,

            ImmutableArray<Outputs.GetPermissionGroupsPermissionGroupResult> permissionGroups,

            int totalCount)
        {
            Filters = filters;
            Id = id;
            OutputFile = outputFile;
            PermissionGroups = permissionGroups;
            TotalCount = totalCount;
        }
    }
}
