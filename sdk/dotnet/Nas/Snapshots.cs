// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Nas
{
    [Obsolete(@"volcengine.nas.Snapshots has been deprecated in favor of volcengine.nas.getSnapshots")]
    public static class Snapshots
    {
        /// <summary>
        /// Use this data source to query detailed information of nas snapshots
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Nas.GetSnapshots.Invoke(new()
        ///     {
        ///         FileSystemId = "enas-cnbj5c18f02afe0e",
        ///         Ids = new[]
        ///         {
        ///             "snap-022c648fed8b",
        ///             "snap-e53591b05fbd",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<SnapshotsResult> InvokeAsync(SnapshotsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<SnapshotsResult>("volcengine:nas/snapshots:Snapshots", args ?? new SnapshotsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of nas snapshots
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Nas.GetSnapshots.Invoke(new()
        ///     {
        ///         FileSystemId = "enas-cnbj5c18f02afe0e",
        ///         Ids = new[]
        ///         {
        ///             "snap-022c648fed8b",
        ///             "snap-e53591b05fbd",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<SnapshotsResult> Invoke(SnapshotsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<SnapshotsResult>("volcengine:nas/snapshots:Snapshots", args ?? new SnapshotsInvokeArgs(), options.WithDefaults());
    }


    public sealed class SnapshotsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of file system.
        /// </summary>
        [Input("fileSystemId")]
        public string? FileSystemId { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Snapshot IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The name of snapshot.
        /// </summary>
        [Input("snapshotName")]
        public string? SnapshotName { get; set; }

        /// <summary>
        /// The type of snapshot.
        /// </summary>
        [Input("snapshotType")]
        public string? SnapshotType { get; set; }

        /// <summary>
        /// The status of snapshot.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public SnapshotsArgs()
        {
        }
        public static new SnapshotsArgs Empty => new SnapshotsArgs();
    }

    public sealed class SnapshotsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of file system.
        /// </summary>
        [Input("fileSystemId")]
        public Input<string>? FileSystemId { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Snapshot IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The name of snapshot.
        /// </summary>
        [Input("snapshotName")]
        public Input<string>? SnapshotName { get; set; }

        /// <summary>
        /// The type of snapshot.
        /// </summary>
        [Input("snapshotType")]
        public Input<string>? SnapshotType { get; set; }

        /// <summary>
        /// The status of snapshot.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public SnapshotsInvokeArgs()
        {
        }
        public static new SnapshotsInvokeArgs Empty => new SnapshotsInvokeArgs();
    }


    [OutputType]
    public sealed class SnapshotsResult
    {
        /// <summary>
        /// The id of file system.
        /// </summary>
        public readonly string? FileSystemId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? OutputFile;
        /// <summary>
        /// The name of snapshot.
        /// </summary>
        public readonly string? SnapshotName;
        /// <summary>
        /// The type of snapshot.
        /// </summary>
        public readonly string? SnapshotType;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.SnapshotsSnapshotResult> Snapshots;
        /// <summary>
        /// The status of snapshot.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private SnapshotsResult(
            string? fileSystemId,

            string id,

            ImmutableArray<string> ids,

            string? outputFile,

            string? snapshotName,

            string? snapshotType,

            ImmutableArray<Outputs.SnapshotsSnapshotResult> snapshots,

            string? status,

            int totalCount)
        {
            FileSystemId = fileSystemId;
            Id = id;
            Ids = ids;
            OutputFile = outputFile;
            SnapshotName = snapshotName;
            SnapshotType = snapshotType;
            Snapshots = snapshots;
            Status = status;
            TotalCount = totalCount;
        }
    }
}
