// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rocketmq
{
    /// <summary>
    /// Provides a resource to manage rocketmq instance
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooRocketMQInstance = new Volcengine.Rocketmq.RocketMQInstance("fooRocketMQInstance", new()
    ///     {
    ///         ZoneIds = new[]
    ///         {
    ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         },
    ///         SubnetId = fooSubnet.Id,
    ///         Version = "4.8",
    ///         ComputeSpec = "rocketmq.n1.x2.micro",
    ///         StorageSpace = 300,
    ///         AutoScaleQueue = true,
    ///         FileReservedTime = 10,
    ///         InstanceName = "acc-test-rocketmq",
    ///         InstanceDescription = "acc-test",
    ///         ProjectName = "default",
    ///         ChargeInfo = new Volcengine.Rocketmq.Inputs.RocketMQInstanceChargeInfoArgs
    ///         {
    ///             ChargeType = "PostPaid",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Rocketmq.Inputs.RocketMQInstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RocketmqInstance can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:rocketmq/rocketMQInstance:RocketMQInstance default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:rocketmq/rocketMQInstance:RocketMQInstance")]
    public partial class RocketMQInstance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account id of the rocketmq instance.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Whether the private dns to public function is enabled for the rocketmq instance.
        /// </summary>
        [Output("applyPrivateDnsToPublic")]
        public Output<bool> ApplyPrivateDnsToPublic { get; private set; } = null!;

        /// <summary>
        /// Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        /// </summary>
        [Output("autoScaleQueue")]
        public Output<bool?> AutoScaleQueue { get; private set; } = null!;

        /// <summary>
        /// The available queue number of the rocketmq instance.
        /// </summary>
        [Output("availableQueueNumber")]
        public Output<int> AvailableQueueNumber { get; private set; } = null!;

        /// <summary>
        /// The charge information of the rocketmq instance.
        /// </summary>
        [Output("chargeInfo")]
        public Output<Outputs.RocketMQInstanceChargeInfo> ChargeInfo { get; private set; } = null!;

        /// <summary>
        /// The compute spec of the rocketmq instance.
        /// </summary>
        [Output("computeSpec")]
        public Output<string> ComputeSpec { get; private set; } = null!;

        /// <summary>
        /// The connection information of the rocketmq.
        /// </summary>
        [Output("connectionInfos")]
        public Output<ImmutableArray<Outputs.RocketMQInstanceConnectionInfo>> ConnectionInfos { get; private set; } = null!;

        /// <summary>
        /// The create time of the rocketmq instance.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The eip id of the rocketmq instance.
        /// </summary>
        [Output("eipId")]
        public Output<string> EipId { get; private set; } = null!;

        /// <summary>
        /// Whether the ssl authentication is enabled for the rocketmq instance.
        /// </summary>
        [Output("enableSsl")]
        public Output<bool> EnableSsl { get; private set; } = null!;

        /// <summary>
        /// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        /// </summary>
        [Output("fileReservedTime")]
        public Output<int> FileReservedTime { get; private set; } = null!;

        /// <summary>
        /// The instance description of the rocketmq instance.
        /// </summary>
        [Output("instanceDescription")]
        public Output<string?> InstanceDescription { get; private set; } = null!;

        /// <summary>
        /// The instance name of the rocketmq instance.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The status of the rocketmq instance.
        /// </summary>
        [Output("instanceStatus")]
        public Output<string> InstanceStatus { get; private set; } = null!;

        /// <summary>
        /// The project name of the rocketmq instance.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The region id of the rocketmq instance.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// The ssl mode of the rocketmq instance.
        /// </summary>
        [Output("sslMode")]
        public Output<string> SslMode { get; private set; } = null!;

        /// <summary>
        /// The storage space of the rocketmq instance.
        /// </summary>
        [Output("storageSpace")]
        public Output<int> StorageSpace { get; private set; } = null!;

        /// <summary>
        /// The subnet id of the rocketmq instance.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.RocketMQInstanceTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The used group number of the rocketmq instance.
        /// </summary>
        [Output("usedGroupNumber")]
        public Output<int> UsedGroupNumber { get; private set; } = null!;

        /// <summary>
        /// The used queue number of the rocketmq instance.
        /// </summary>
        [Output("usedQueueNumber")]
        public Output<int> UsedQueueNumber { get; private set; } = null!;

        /// <summary>
        /// The used storage space of the rocketmq instance.
        /// </summary>
        [Output("usedStorageSpace")]
        public Output<int> UsedStorageSpace { get; private set; } = null!;

        /// <summary>
        /// The used topic number of the rocketmq instance.
        /// </summary>
        [Output("usedTopicNumber")]
        public Output<int> UsedTopicNumber { get; private set; } = null!;

        /// <summary>
        /// The version of the rocketmq instance. Valid values: `4.8`.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// The vpc id of the rocketmq instance.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The zone id of the rocketmq instance. Support specifying multiple availability zones.
        /// </summary>
        [Output("zoneIds")]
        public Output<ImmutableArray<string>> ZoneIds { get; private set; } = null!;


        /// <summary>
        /// Create a RocketMQInstance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RocketMQInstance(string name, RocketMQInstanceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:rocketmq/rocketMQInstance:RocketMQInstance", name, args ?? new RocketMQInstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RocketMQInstance(string name, Input<string> id, RocketMQInstanceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:rocketmq/rocketMQInstance:RocketMQInstance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RocketMQInstance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RocketMQInstance Get(string name, Input<string> id, RocketMQInstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new RocketMQInstance(name, id, state, options);
        }
    }

    public sealed class RocketMQInstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        /// </summary>
        [Input("autoScaleQueue")]
        public Input<bool>? AutoScaleQueue { get; set; }

        /// <summary>
        /// The charge information of the rocketmq instance.
        /// </summary>
        [Input("chargeInfo", required: true)]
        public Input<Inputs.RocketMQInstanceChargeInfoArgs> ChargeInfo { get; set; } = null!;

        /// <summary>
        /// The compute spec of the rocketmq instance.
        /// </summary>
        [Input("computeSpec", required: true)]
        public Input<string> ComputeSpec { get; set; } = null!;

        /// <summary>
        /// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        /// </summary>
        [Input("fileReservedTime", required: true)]
        public Input<int> FileReservedTime { get; set; } = null!;

        /// <summary>
        /// The instance description of the rocketmq instance.
        /// </summary>
        [Input("instanceDescription")]
        public Input<string>? InstanceDescription { get; set; }

        /// <summary>
        /// The instance name of the rocketmq instance.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The project name of the rocketmq instance.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The storage space of the rocketmq instance.
        /// </summary>
        [Input("storageSpace", required: true)]
        public Input<int> StorageSpace { get; set; } = null!;

        /// <summary>
        /// The subnet id of the rocketmq instance.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.RocketMQInstanceTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.RocketMQInstanceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RocketMQInstanceTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The version of the rocketmq instance. Valid values: `4.8`.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        [Input("zoneIds", required: true)]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The zone id of the rocketmq instance. Support specifying multiple availability zones.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public RocketMQInstanceArgs()
        {
        }
        public static new RocketMQInstanceArgs Empty => new RocketMQInstanceArgs();
    }

    public sealed class RocketMQInstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account id of the rocketmq instance.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Whether the private dns to public function is enabled for the rocketmq instance.
        /// </summary>
        [Input("applyPrivateDnsToPublic")]
        public Input<bool>? ApplyPrivateDnsToPublic { get; set; }

        /// <summary>
        /// Whether to create queue automatically when the spec of the instance is changed. This field is effective only when modifying `compute_field` and `storage_space`.
        /// </summary>
        [Input("autoScaleQueue")]
        public Input<bool>? AutoScaleQueue { get; set; }

        /// <summary>
        /// The available queue number of the rocketmq instance.
        /// </summary>
        [Input("availableQueueNumber")]
        public Input<int>? AvailableQueueNumber { get; set; }

        /// <summary>
        /// The charge information of the rocketmq instance.
        /// </summary>
        [Input("chargeInfo")]
        public Input<Inputs.RocketMQInstanceChargeInfoGetArgs>? ChargeInfo { get; set; }

        /// <summary>
        /// The compute spec of the rocketmq instance.
        /// </summary>
        [Input("computeSpec")]
        public Input<string>? ComputeSpec { get; set; }

        [Input("connectionInfos")]
        private InputList<Inputs.RocketMQInstanceConnectionInfoGetArgs>? _connectionInfos;

        /// <summary>
        /// The connection information of the rocketmq.
        /// </summary>
        public InputList<Inputs.RocketMQInstanceConnectionInfoGetArgs> ConnectionInfos
        {
            get => _connectionInfos ?? (_connectionInfos = new InputList<Inputs.RocketMQInstanceConnectionInfoGetArgs>());
            set => _connectionInfos = value;
        }

        /// <summary>
        /// The create time of the rocketmq instance.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The eip id of the rocketmq instance.
        /// </summary>
        [Input("eipId")]
        public Input<string>? EipId { get; set; }

        /// <summary>
        /// Whether the ssl authentication is enabled for the rocketmq instance.
        /// </summary>
        [Input("enableSsl")]
        public Input<bool>? EnableSsl { get; set; }

        /// <summary>
        /// The reserved time of messages on the RocketMQ server of the message queue. Messages that exceed the reserved time will be cleared after expiration. The unit is in hours. Valid value range is 1~72.
        /// </summary>
        [Input("fileReservedTime")]
        public Input<int>? FileReservedTime { get; set; }

        /// <summary>
        /// The instance description of the rocketmq instance.
        /// </summary>
        [Input("instanceDescription")]
        public Input<string>? InstanceDescription { get; set; }

        /// <summary>
        /// The instance name of the rocketmq instance.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The status of the rocketmq instance.
        /// </summary>
        [Input("instanceStatus")]
        public Input<string>? InstanceStatus { get; set; }

        /// <summary>
        /// The project name of the rocketmq instance.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The region id of the rocketmq instance.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// The ssl mode of the rocketmq instance.
        /// </summary>
        [Input("sslMode")]
        public Input<string>? SslMode { get; set; }

        /// <summary>
        /// The storage space of the rocketmq instance.
        /// </summary>
        [Input("storageSpace")]
        public Input<int>? StorageSpace { get; set; }

        /// <summary>
        /// The subnet id of the rocketmq instance.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Inputs.RocketMQInstanceTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.RocketMQInstanceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RocketMQInstanceTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The used group number of the rocketmq instance.
        /// </summary>
        [Input("usedGroupNumber")]
        public Input<int>? UsedGroupNumber { get; set; }

        /// <summary>
        /// The used queue number of the rocketmq instance.
        /// </summary>
        [Input("usedQueueNumber")]
        public Input<int>? UsedQueueNumber { get; set; }

        /// <summary>
        /// The used storage space of the rocketmq instance.
        /// </summary>
        [Input("usedStorageSpace")]
        public Input<int>? UsedStorageSpace { get; set; }

        /// <summary>
        /// The used topic number of the rocketmq instance.
        /// </summary>
        [Input("usedTopicNumber")]
        public Input<int>? UsedTopicNumber { get; set; }

        /// <summary>
        /// The version of the rocketmq instance. Valid values: `4.8`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// The vpc id of the rocketmq instance.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The zone id of the rocketmq instance. Support specifying multiple availability zones.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public RocketMQInstanceState()
        {
        }
        public static new RocketMQInstanceState Empty => new RocketMQInstanceState();
    }
}
