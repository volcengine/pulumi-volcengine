// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rocketmq
{
    /// <summary>
    /// Provides a resource to manage rocketmq topic
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooRocketMQInstance = new Volcengine.Rocketmq.RocketMQInstance("fooRocketMQInstance", new()
    ///     {
    ///         ZoneIds = new[]
    ///         {
    ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         },
    ///         SubnetId = fooSubnet.Id,
    ///         Version = "4.8",
    ///         ComputeSpec = "rocketmq.n1.x2.micro",
    ///         StorageSpace = 300,
    ///         AutoScaleQueue = true,
    ///         FileReservedTime = 10,
    ///         InstanceName = "acc-test-rocketmq",
    ///         InstanceDescription = "acc-test",
    ///         ProjectName = "default",
    ///         ChargeInfo = new Volcengine.Rocketmq.Inputs.RocketMQInstanceChargeInfoArgs
    ///         {
    ///             ChargeType = "PostPaid",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Rocketmq.Inputs.RocketMQInstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooRocketMQAccessKey = new Volcengine.Rocketmq.RocketMQAccessKey("fooRocketMQAccessKey", new()
    ///     {
    ///         InstanceId = fooRocketMQInstance.Id,
    ///         Description = "acc-test-key",
    ///         AllAuthority = "SUB",
    ///     });
    /// 
    ///     var fooRocketMQTopic = new Volcengine.Rocketmq.RocketMQTopic("fooRocketMQTopic", new()
    ///     {
    ///         InstanceId = fooRocketMQInstance.Id,
    ///         TopicName = "acc-test-rocketmq-topic",
    ///         Description = "acc-test",
    ///         QueueNumber = 2,
    ///         MessageType = 1,
    ///         AccessPolicies = new[]
    ///         {
    ///             new Volcengine.Rocketmq.Inputs.RocketMQTopicAccessPolicyArgs
    ///             {
    ///                 AccessKey = fooRocketMQAccessKey.AccessKey,
    ///                 Authority = "PUB",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RocketmqTopic can be imported using the instance_id:topic_name, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:rocketmq/rocketMQTopic:RocketMQTopic default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:rocketmq/rocketMQTopic:RocketMQTopic")]
    public partial class RocketMQTopic : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        /// </summary>
        [Output("accessPolicies")]
        public Output<ImmutableArray<Outputs.RocketMQTopicAccessPolicy>> AccessPolicies { get; private set; } = null!;

        /// <summary>
        /// The description of the rocketmq topic.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The groups information of the rocketmq topic.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<Outputs.RocketMQTopicGroup>> Groups { get; private set; } = null!;

        /// <summary>
        /// The id of rocketmq instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        /// </summary>
        [Output("messageType")]
        public Output<int> MessageType { get; private set; } = null!;

        /// <summary>
        /// The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        /// </summary>
        [Output("queueNumber")]
        public Output<int> QueueNumber { get; private set; } = null!;

        /// <summary>
        /// The queues information of the rocketmq topic.
        /// </summary>
        [Output("queues")]
        public Output<ImmutableArray<Outputs.RocketMQTopicQueue>> Queues { get; private set; } = null!;

        /// <summary>
        /// The name of the rocketmq topic.
        /// </summary>
        [Output("topicName")]
        public Output<string> TopicName { get; private set; } = null!;


        /// <summary>
        /// Create a RocketMQTopic resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RocketMQTopic(string name, RocketMQTopicArgs args, CustomResourceOptions? options = null)
            : base("volcengine:rocketmq/rocketMQTopic:RocketMQTopic", name, args ?? new RocketMQTopicArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RocketMQTopic(string name, Input<string> id, RocketMQTopicState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:rocketmq/rocketMQTopic:RocketMQTopic", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RocketMQTopic resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RocketMQTopic Get(string name, Input<string> id, RocketMQTopicState? state = null, CustomResourceOptions? options = null)
        {
            return new RocketMQTopic(name, id, state, options);
        }
    }

    public sealed class RocketMQTopicArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.RocketMQTopicAccessPolicyArgs>? _accessPolicies;

        /// <summary>
        /// The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        /// </summary>
        public InputList<Inputs.RocketMQTopicAccessPolicyArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.RocketMQTopicAccessPolicyArgs>());
            set => _accessPolicies = value;
        }

        /// <summary>
        /// The description of the rocketmq topic.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The id of rocketmq instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        /// </summary>
        [Input("messageType", required: true)]
        public Input<int> MessageType { get; set; } = null!;

        /// <summary>
        /// The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        /// </summary>
        [Input("queueNumber", required: true)]
        public Input<int> QueueNumber { get; set; } = null!;

        /// <summary>
        /// The name of the rocketmq topic.
        /// </summary>
        [Input("topicName", required: true)]
        public Input<string> TopicName { get; set; } = null!;

        public RocketMQTopicArgs()
        {
        }
        public static new RocketMQTopicArgs Empty => new RocketMQTopicArgs();
    }

    public sealed class RocketMQTopicState : global::Pulumi.ResourceArgs
    {
        [Input("accessPolicies")]
        private InputList<Inputs.RocketMQTopicAccessPolicyGetArgs>? _accessPolicies;

        /// <summary>
        /// The access policies of the rocketmq topic. This field can only be added or modified. Deleting this field is invalid.
        /// </summary>
        public InputList<Inputs.RocketMQTopicAccessPolicyGetArgs> AccessPolicies
        {
            get => _accessPolicies ?? (_accessPolicies = new InputList<Inputs.RocketMQTopicAccessPolicyGetArgs>());
            set => _accessPolicies = value;
        }

        /// <summary>
        /// The description of the rocketmq topic.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groups")]
        private InputList<Inputs.RocketMQTopicGroupGetArgs>? _groups;

        /// <summary>
        /// The groups information of the rocketmq topic.
        /// </summary>
        public InputList<Inputs.RocketMQTopicGroupGetArgs> Groups
        {
            get => _groups ?? (_groups = new InputList<Inputs.RocketMQTopicGroupGetArgs>());
            set => _groups = value;
        }

        /// <summary>
        /// The id of rocketmq instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The type of the message. Valid values: `0`: Regular message, `1`: Transaction message, `2`: Partition order message, `3`: Global sequential message, `4`: Delay message.
        /// </summary>
        [Input("messageType")]
        public Input<int>? MessageType { get; set; }

        /// <summary>
        /// The maximum number of queues for the current topic, which cannot exceed the remaining available queues for the current rocketmq instance.
        /// </summary>
        [Input("queueNumber")]
        public Input<int>? QueueNumber { get; set; }

        [Input("queues")]
        private InputList<Inputs.RocketMQTopicQueueGetArgs>? _queues;

        /// <summary>
        /// The queues information of the rocketmq topic.
        /// </summary>
        public InputList<Inputs.RocketMQTopicQueueGetArgs> Queues
        {
            get => _queues ?? (_queues = new InputList<Inputs.RocketMQTopicQueueGetArgs>());
            set => _queues = value;
        }

        /// <summary>
        /// The name of the rocketmq topic.
        /// </summary>
        [Input("topicName")]
        public Input<string>? TopicName { get; set; }

        public RocketMQTopicState()
        {
        }
        public static new RocketMQTopicState Empty => new RocketMQTopicState();
    }
}
