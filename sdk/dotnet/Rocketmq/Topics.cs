// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rocketmq
{
    [Obsolete(@"volcengine.rocketmq.Topics has been deprecated in favor of volcengine.rocketmq.getTopics")]
    public static class Topics
    {
        /// <summary>
        /// Use this data source to query detailed information of rocketmq topics
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rocketmq.GetTopics.Invoke(new()
        ///     {
        ///         InstanceId = "rocketmq-cnoeea6b32118fc2",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<TopicsResult> InvokeAsync(TopicsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<TopicsResult>("volcengine:rocketmq/topics:Topics", args ?? new TopicsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of rocketmq topics
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rocketmq.GetTopics.Invoke(new()
        ///     {
        ///         InstanceId = "rocketmq-cnoeea6b32118fc2",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<TopicsResult> Invoke(TopicsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<TopicsResult>("volcengine:rocketmq/topics:Topics", args ?? new TopicsInvokeArgs(), options.WithDefaults());
    }


    public sealed class TopicsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of rocketmq instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
        /// 0: Regular message
        /// 1: Transaction message
        /// 2: Partition order message
        /// 3: Global sequential message
        /// 4: Delay message.
        /// </summary>
        [Input("messageType")]
        public int? MessageType { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The name of the rocketmq topic. This field support fuzzy query.
        /// </summary>
        [Input("topicName")]
        public string? TopicName { get; set; }

        public TopicsArgs()
        {
        }
        public static new TopicsArgs Empty => new TopicsArgs();
    }

    public sealed class TopicsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of rocketmq instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The type of the rocketmq message. Setting this parameter means filtering the Topic list based on the specified message type. The value explanation is as follows:
        /// 0: Regular message
        /// 1: Transaction message
        /// 2: Partition order message
        /// 3: Global sequential message
        /// 4: Delay message.
        /// </summary>
        [Input("messageType")]
        public Input<int>? MessageType { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The name of the rocketmq topic. This field support fuzzy query.
        /// </summary>
        [Input("topicName")]
        public Input<string>? TopicName { get; set; }

        public TopicsInvokeArgs()
        {
        }
        public static new TopicsInvokeArgs Empty => new TopicsInvokeArgs();
    }


    [OutputType]
    public sealed class TopicsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The id of rocketmq instance.
        /// </summary>
        public readonly string InstanceId;
        /// <summary>
        /// The type of the rocketmq message.
        /// </summary>
        public readonly int? MessageType;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.TopicsRocketmqTopicResult> RocketmqTopics;
        /// <summary>
        /// The name of the rocketmq topic.
        /// </summary>
        public readonly string? TopicName;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private TopicsResult(
            string id,

            string instanceId,

            int? messageType,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<Outputs.TopicsRocketmqTopicResult> rocketmqTopics,

            string? topicName,

            int totalCount)
        {
            Id = id;
            InstanceId = instanceId;
            MessageType = messageType;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            RocketmqTopics = rocketmqTopics;
            TopicName = topicName;
            TotalCount = totalCount;
        }
    }
}
