// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rocketmq
{
    /// <summary>
    /// Provides a resource to manage rocketmq access key
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooRocketMQInstance = new Volcengine.Rocketmq.RocketMQInstance("fooRocketMQInstance", new()
    ///     {
    ///         ZoneIds = new[]
    ///         {
    ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         },
    ///         SubnetId = fooSubnet.Id,
    ///         Version = "4.8",
    ///         ComputeSpec = "rocketmq.n1.x2.micro",
    ///         StorageSpace = 300,
    ///         AutoScaleQueue = true,
    ///         FileReservedTime = 10,
    ///         InstanceName = "acc-test-rocketmq",
    ///         InstanceDescription = "acc-test",
    ///         ProjectName = "default",
    ///         ChargeInfo = new Volcengine.Rocketmq.Inputs.RocketMQInstanceChargeInfoArgs
    ///         {
    ///             ChargeType = "PostPaid",
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Rocketmq.Inputs.RocketMQInstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooRocketMQAccessKey = new Volcengine.Rocketmq.RocketMQAccessKey("fooRocketMQAccessKey", new()
    ///     {
    ///         InstanceId = fooRocketMQInstance.Id,
    ///         Description = "acc-test-key",
    ///         AllAuthority = "SUB",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RocketmqAccessKey can be imported using the instance_id:access_key, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey")]
    public partial class RocketMQAccessKey : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The access key id of the rocketmq key.
        /// </summary>
        [Output("accessKey")]
        public Output<string> AccessKey { get; private set; } = null!;

        /// <summary>
        /// The acl config of the rocketmq key.
        /// </summary>
        [Output("aclConfigJson")]
        public Output<string> AclConfigJson { get; private set; } = null!;

        /// <summary>
        /// The active status of the rocketmq key.
        /// </summary>
        [Output("actived")]
        public Output<bool> Actived { get; private set; } = null!;

        /// <summary>
        /// The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        /// </summary>
        [Output("allAuthority")]
        public Output<string> AllAuthority { get; private set; } = null!;

        /// <summary>
        /// The create time of the rocketmq key.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The id of rocketmq instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The secret key of the rocketmq key.
        /// </summary>
        [Output("secretKey")]
        public Output<string> SecretKey { get; private set; } = null!;

        /// <summary>
        /// The custom authority of the rocketmq key.
        /// </summary>
        [Output("topicPermissions")]
        public Output<ImmutableArray<Outputs.RocketMQAccessKeyTopicPermission>> TopicPermissions { get; private set; } = null!;


        /// <summary>
        /// Create a RocketMQAccessKey resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RocketMQAccessKey(string name, RocketMQAccessKeyArgs args, CustomResourceOptions? options = null)
            : base("volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey", name, args ?? new RocketMQAccessKeyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RocketMQAccessKey(string name, Input<string> id, RocketMQAccessKeyState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:rocketmq/rocketMQAccessKey:RocketMQAccessKey", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
                AdditionalSecretOutputs =
                {
                    "secretKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RocketMQAccessKey resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RocketMQAccessKey Get(string name, Input<string> id, RocketMQAccessKeyState? state = null, CustomResourceOptions? options = null)
        {
            return new RocketMQAccessKey(name, id, state, options);
        }
    }

    public sealed class RocketMQAccessKeyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        /// </summary>
        [Input("allAuthority", required: true)]
        public Input<string> AllAuthority { get; set; } = null!;

        /// <summary>
        /// The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        /// </summary>
        [Input("description", required: true)]
        public Input<string> Description { get; set; } = null!;

        /// <summary>
        /// The id of rocketmq instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        public RocketMQAccessKeyArgs()
        {
        }
        public static new RocketMQAccessKeyArgs Empty => new RocketMQAccessKeyArgs();
    }

    public sealed class RocketMQAccessKeyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The access key id of the rocketmq key.
        /// </summary>
        [Input("accessKey")]
        public Input<string>? AccessKey { get; set; }

        /// <summary>
        /// The acl config of the rocketmq key.
        /// </summary>
        [Input("aclConfigJson")]
        public Input<string>? AclConfigJson { get; set; }

        /// <summary>
        /// The active status of the rocketmq key.
        /// </summary>
        [Input("actived")]
        public Input<bool>? Actived { get; set; }

        /// <summary>
        /// The default authority of the rocketmq topic. Valid values: `ALL`, `PUB`, `SUB`, `DENY`. Default is `DENY`.
        /// </summary>
        [Input("allAuthority")]
        public Input<string>? AllAuthority { get; set; }

        /// <summary>
        /// The create time of the rocketmq key.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The description of the rocketmq topic. The description is used to effectively distinguish and manage keys. Please use different descriptions for each key.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The id of rocketmq instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        [Input("secretKey")]
        private Input<string>? _secretKey;

        /// <summary>
        /// The secret key of the rocketmq key.
        /// </summary>
        public Input<string>? SecretKey
        {
            get => _secretKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secretKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("topicPermissions")]
        private InputList<Inputs.RocketMQAccessKeyTopicPermissionGetArgs>? _topicPermissions;

        /// <summary>
        /// The custom authority of the rocketmq key.
        /// </summary>
        public InputList<Inputs.RocketMQAccessKeyTopicPermissionGetArgs> TopicPermissions
        {
            get => _topicPermissions ?? (_topicPermissions = new InputList<Inputs.RocketMQAccessKeyTopicPermissionGetArgs>());
            set => _topicPermissions = value;
        }

        public RocketMQAccessKeyState()
        {
        }
        public static new RocketMQAccessKeyState Empty => new RocketMQAccessKeyState();
    }
}
