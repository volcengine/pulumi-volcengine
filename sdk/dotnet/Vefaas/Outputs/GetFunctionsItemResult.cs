// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vefaas.Outputs
{

    [OutputType]
    public sealed class GetFunctionsItemResult
    {
        /// <summary>
        /// The size of code package.
        /// </summary>
        public readonly int CodeSize;
        /// <summary>
        /// Maximum code package size.
        /// </summary>
        public readonly int CodeSizeLimit;
        /// <summary>
        /// The custom startup command for the instance.
        /// </summary>
        public readonly string Command;
        /// <summary>
        /// Function CPU charging policy.
        /// </summary>
        public readonly string CpuStrategy;
        /// <summary>
        /// Creation time.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// The description of Function.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Function environment variable.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionsItemEnvResult> Envs;
        /// <summary>
        /// Exclusive mode switch.
        /// </summary>
        public readonly bool ExclusiveMode;
        /// <summary>
        /// The ID of Function.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Function to initialize timeout configuration.
        /// </summary>
        public readonly int InitializerSec;
        /// <summary>
        /// The instance type of the function instance.
        /// </summary>
        public readonly string InstanceType;
        /// <summary>
        /// Update time.
        /// </summary>
        public readonly string LastUpdateTime;
        /// <summary>
        /// Maximum concurrency of a single instance.
        /// </summary>
        public readonly int MaxConcurrency;
        /// <summary>
        /// Maximum memory for a single instance.
        /// </summary>
        public readonly int MemoryMb;
        /// <summary>
        /// The name of Function.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The configuration of file storage NAS mount.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionsItemNasStorageResult> NasStorages;
        /// <summary>
        /// The owner of Function.
        /// </summary>
        public readonly string Owner;
        /// <summary>
        /// Custom listening port for the instance.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// Request timeout (in seconds).
        /// </summary>
        public readonly int RequestTimeout;
        /// <summary>
        /// The runtime of Function.
        /// </summary>
        public readonly string Runtime;
        /// <summary>
        /// The source address of the code/image.
        /// </summary>
        public readonly string SourceLocation;
        /// <summary>
        /// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        /// </summary>
        public readonly string SourceType;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionsItemTagResult> Tags;
        /// <summary>
        /// Function log configuration.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionsItemTlsConfigResult> TlsConfigs;
        /// <summary>
        /// The configuration of Object Storage TOS mount.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionsItemTosMountConfigResult> TosMountConfigs;
        /// <summary>
        /// The number of triggers for this Function.
        /// </summary>
        public readonly int TriggersCount;
        /// <summary>
        /// The configuration of VPC.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionsItemVpcConfigResult> VpcConfigs;

        [OutputConstructor]
        private GetFunctionsItemResult(
            int codeSize,

            int codeSizeLimit,

            string command,

            string cpuStrategy,

            string creationTime,

            string description,

            ImmutableArray<Outputs.GetFunctionsItemEnvResult> envs,

            bool exclusiveMode,

            string id,

            int initializerSec,

            string instanceType,

            string lastUpdateTime,

            int maxConcurrency,

            int memoryMb,

            string name,

            ImmutableArray<Outputs.GetFunctionsItemNasStorageResult> nasStorages,

            string owner,

            int port,

            int requestTimeout,

            string runtime,

            string sourceLocation,

            string sourceType,

            ImmutableArray<Outputs.GetFunctionsItemTagResult> tags,

            ImmutableArray<Outputs.GetFunctionsItemTlsConfigResult> tlsConfigs,

            ImmutableArray<Outputs.GetFunctionsItemTosMountConfigResult> tosMountConfigs,

            int triggersCount,

            ImmutableArray<Outputs.GetFunctionsItemVpcConfigResult> vpcConfigs)
        {
            CodeSize = codeSize;
            CodeSizeLimit = codeSizeLimit;
            Command = command;
            CpuStrategy = cpuStrategy;
            CreationTime = creationTime;
            Description = description;
            Envs = envs;
            ExclusiveMode = exclusiveMode;
            Id = id;
            InitializerSec = initializerSec;
            InstanceType = instanceType;
            LastUpdateTime = lastUpdateTime;
            MaxConcurrency = maxConcurrency;
            MemoryMb = memoryMb;
            Name = name;
            NasStorages = nasStorages;
            Owner = owner;
            Port = port;
            RequestTimeout = requestTimeout;
            Runtime = runtime;
            SourceLocation = sourceLocation;
            SourceType = sourceType;
            Tags = tags;
            TlsConfigs = tlsConfigs;
            TosMountConfigs = tosMountConfigs;
            TriggersCount = triggersCount;
            VpcConfigs = vpcConfigs;
        }
    }
}
