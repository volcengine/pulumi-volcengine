// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vefaas
{
    public static class GetReleases
    {
        /// <summary>
        /// Use this data source to query detailed information of vefaas releases
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Vefaas.GetReleases.Invoke(new()
        ///     {
        ///         FunctionId = "g79asxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetReleasesResult> InvokeAsync(GetReleasesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetReleasesResult>("volcengine:vefaas/getReleases:getReleases", args ?? new GetReleasesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vefaas releases
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Vefaas.GetReleases.Invoke(new()
        ///     {
        ///         FunctionId = "g79asxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetReleasesResult> Invoke(GetReleasesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetReleasesResult>("volcengine:vefaas/getReleases:getReleases", args ?? new GetReleasesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetReleasesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetReleasesFilterArgs>? _filters;

        /// <summary>
        /// Query the filtering conditions.
        /// </summary>
        public List<Inputs.GetReleasesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetReleasesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of Function.
        /// </summary>
        [Input("functionId", required: true)]
        public string FunctionId { get; set; } = null!;

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("orderBies")]
        private List<Inputs.GetReleasesOrderByArgs>? _orderBies;

        /// <summary>
        /// Query the sorting parameters.
        /// </summary>
        public List<Inputs.GetReleasesOrderByArgs> OrderBies
        {
            get => _orderBies ?? (_orderBies = new List<Inputs.GetReleasesOrderByArgs>());
            set => _orderBies = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetReleasesArgs()
        {
        }
        public static new GetReleasesArgs Empty => new GetReleasesArgs();
    }

    public sealed class GetReleasesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.GetReleasesFilterInputArgs>? _filters;

        /// <summary>
        /// Query the filtering conditions.
        /// </summary>
        public InputList<Inputs.GetReleasesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.GetReleasesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of Function.
        /// </summary>
        [Input("functionId", required: true)]
        public Input<string> FunctionId { get; set; } = null!;

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("orderBies")]
        private InputList<Inputs.GetReleasesOrderByInputArgs>? _orderBies;

        /// <summary>
        /// Query the sorting parameters.
        /// </summary>
        public InputList<Inputs.GetReleasesOrderByInputArgs> OrderBies
        {
            get => _orderBies ?? (_orderBies = new InputList<Inputs.GetReleasesOrderByInputArgs>());
            set => _orderBies = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetReleasesInvokeArgs()
        {
        }
        public static new GetReleasesInvokeArgs Empty => new GetReleasesInvokeArgs();
    }


    [OutputType]
    public sealed class GetReleasesResult
    {
        public readonly ImmutableArray<Outputs.GetReleasesFilterResult> Filters;
        /// <summary>
        /// The ID of Function.
        /// </summary>
        public readonly string FunctionId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of function publication records.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetReleasesItemResult> Items;
        public readonly string? NameRegex;
        public readonly ImmutableArray<Outputs.GetReleasesOrderByResult> OrderBies;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetReleasesResult(
            ImmutableArray<Outputs.GetReleasesFilterResult> filters,

            string functionId,

            string id,

            ImmutableArray<Outputs.GetReleasesItemResult> items,

            string? nameRegex,

            ImmutableArray<Outputs.GetReleasesOrderByResult> orderBies,

            string? outputFile,

            int totalCount)
        {
            Filters = filters;
            FunctionId = functionId;
            Id = id;
            Items = items;
            NameRegex = nameRegex;
            OrderBies = orderBies;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
