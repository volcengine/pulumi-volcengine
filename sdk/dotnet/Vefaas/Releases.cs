// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vefaas
{
    [Obsolete(@"volcengine.vefaas.Releases has been deprecated in favor of volcengine.vefaas.getReleases")]
    public static class Releases
    {
        /// <summary>
        /// Use this data source to query detailed information of vefaas releases
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Vefaas.GetReleases.Invoke(new()
        ///     {
        ///         FunctionId = "g79asxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<ReleasesResult> InvokeAsync(ReleasesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ReleasesResult>("volcengine:vefaas/releases:Releases", args ?? new ReleasesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vefaas releases
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Vefaas.GetReleases.Invoke(new()
        ///     {
        ///         FunctionId = "g79asxxx",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<ReleasesResult> Invoke(ReleasesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ReleasesResult>("volcengine:vefaas/releases:Releases", args ?? new ReleasesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ReleasesArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.ReleasesFilterArgs>? _filters;

        /// <summary>
        /// Query the filtering conditions.
        /// </summary>
        public List<Inputs.ReleasesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.ReleasesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of Function.
        /// </summary>
        [Input("functionId", required: true)]
        public string FunctionId { get; set; } = null!;

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("orderBies")]
        private List<Inputs.ReleasesOrderByArgs>? _orderBies;

        /// <summary>
        /// Query the sorting parameters.
        /// </summary>
        public List<Inputs.ReleasesOrderByArgs> OrderBies
        {
            get => _orderBies ?? (_orderBies = new List<Inputs.ReleasesOrderByArgs>());
            set => _orderBies = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public ReleasesArgs()
        {
        }
        public static new ReleasesArgs Empty => new ReleasesArgs();
    }

    public sealed class ReleasesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("filters")]
        private InputList<Inputs.ReleasesFilterInputArgs>? _filters;

        /// <summary>
        /// Query the filtering conditions.
        /// </summary>
        public InputList<Inputs.ReleasesFilterInputArgs> Filters
        {
            get => _filters ?? (_filters = new InputList<Inputs.ReleasesFilterInputArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of Function.
        /// </summary>
        [Input("functionId", required: true)]
        public Input<string> FunctionId { get; set; } = null!;

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("orderBies")]
        private InputList<Inputs.ReleasesOrderByInputArgs>? _orderBies;

        /// <summary>
        /// Query the sorting parameters.
        /// </summary>
        public InputList<Inputs.ReleasesOrderByInputArgs> OrderBies
        {
            get => _orderBies ?? (_orderBies = new InputList<Inputs.ReleasesOrderByInputArgs>());
            set => _orderBies = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public ReleasesInvokeArgs()
        {
        }
        public static new ReleasesInvokeArgs Empty => new ReleasesInvokeArgs();
    }


    [OutputType]
    public sealed class ReleasesResult
    {
        public readonly ImmutableArray<Outputs.ReleasesFilterResult> Filters;
        /// <summary>
        /// The ID of Function.
        /// </summary>
        public readonly string FunctionId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of function publication records.
        /// </summary>
        public readonly ImmutableArray<Outputs.ReleasesItemResult> Items;
        public readonly string? NameRegex;
        public readonly ImmutableArray<Outputs.ReleasesOrderByResult> OrderBies;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private ReleasesResult(
            ImmutableArray<Outputs.ReleasesFilterResult> filters,

            string functionId,

            string id,

            ImmutableArray<Outputs.ReleasesItemResult> items,

            string? nameRegex,

            ImmutableArray<Outputs.ReleasesOrderByResult> orderBies,

            string? outputFile,

            int totalCount)
        {
            Filters = filters;
            FunctionId = functionId;
            Id = id;
            Items = items;
            NameRegex = nameRegex;
            OrderBies = orderBies;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
