// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vefaas
{
    /// <summary>
    /// Provides a resource to manage vefaas function
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Vefaas.Function("foo", new()
    ///     {
    ///         Description = "123131231",
    ///         ExclusiveMode = false,
    ///         RequestTimeout = 30,
    ///         Runtime = "golang/v1",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VefaasFunction can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vefaas/function:Function default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vefaas/function:Function")]
    public partial class Function : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The size of code package.
        /// </summary>
        [Output("codeSize")]
        public Output<int> CodeSize { get; private set; } = null!;

        /// <summary>
        /// Maximum code package size.
        /// </summary>
        [Output("codeSizeLimit")]
        public Output<int> CodeSizeLimit { get; private set; } = null!;

        /// <summary>
        /// The custom startup command for the instance.
        /// </summary>
        [Output("command")]
        public Output<string?> Command { get; private set; } = null!;

        /// <summary>
        /// Function CPU charging policy.
        /// </summary>
        [Output("cpuStrategy")]
        public Output<string?> CpuStrategy { get; private set; } = null!;

        /// <summary>
        /// The creation time of the function.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The description of Function.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Function environment variable.
        /// </summary>
        [Output("envs")]
        public Output<ImmutableArray<Outputs.FunctionEnv>> Envs { get; private set; } = null!;

        /// <summary>
        /// Exclusive mode switch.
        /// </summary>
        [Output("exclusiveMode")]
        public Output<bool> ExclusiveMode { get; private set; } = null!;

        /// <summary>
        /// Function to initialize timeout configuration.
        /// </summary>
        [Output("initializerSec")]
        public Output<int> InitializerSec { get; private set; } = null!;

        /// <summary>
        /// The last update time of the function.
        /// </summary>
        [Output("lastUpdateTime")]
        public Output<string> LastUpdateTime { get; private set; } = null!;

        /// <summary>
        /// Maximum concurrency of a single instance.
        /// </summary>
        [Output("maxConcurrency")]
        public Output<int> MaxConcurrency { get; private set; } = null!;

        /// <summary>
        /// Maximum memory for a single instance.
        /// </summary>
        [Output("memoryMb")]
        public Output<int> MemoryMb { get; private set; } = null!;

        /// <summary>
        /// The name of Function.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The configuration of file storage NAS mount.
        /// </summary>
        [Output("nasStorage")]
        public Output<Outputs.FunctionNasStorage> NasStorage { get; private set; } = null!;

        /// <summary>
        /// The owner of Function.
        /// </summary>
        [Output("owner")]
        public Output<string> Owner { get; private set; } = null!;

        /// <summary>
        /// Custom listening port for the instance.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// Request timeout (in seconds).
        /// </summary>
        [Output("requestTimeout")]
        public Output<int> RequestTimeout { get; private set; } = null!;

        /// <summary>
        /// The runtime of Function.
        /// </summary>
        [Output("runtime")]
        public Output<string> Runtime { get; private set; } = null!;

        /// <summary>
        /// Code source.
        /// </summary>
        [Output("source")]
        public Output<string?> Source { get; private set; } = null!;

        /// <summary>
        /// Access configuration for the image repository.
        /// </summary>
        [Output("sourceAccessConfig")]
        public Output<Outputs.FunctionSourceAccessConfig?> SourceAccessConfig { get; private set; } = null!;

        /// <summary>
        /// Maximum code package size.
        /// </summary>
        [Output("sourceLocation")]
        public Output<string> SourceLocation { get; private set; } = null!;

        /// <summary>
        /// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        /// </summary>
        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// Function log configuration.
        /// </summary>
        [Output("tlsConfig")]
        public Output<Outputs.FunctionTlsConfig> TlsConfig { get; private set; } = null!;

        /// <summary>
        /// The configuration of Object Storage TOS mount.
        /// </summary>
        [Output("tosMountConfig")]
        public Output<Outputs.FunctionTosMountConfig> TosMountConfig { get; private set; } = null!;

        /// <summary>
        /// The number of triggers for this Function.
        /// </summary>
        [Output("triggersCount")]
        public Output<int> TriggersCount { get; private set; } = null!;

        /// <summary>
        /// The configuration of VPC.
        /// </summary>
        [Output("vpcConfig")]
        public Output<Outputs.FunctionVpcConfig> VpcConfig { get; private set; } = null!;


        /// <summary>
        /// Create a Function resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Function(string name, FunctionArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vefaas/function:Function", name, args ?? new FunctionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Function(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vefaas/function:Function", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Function resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Function Get(string name, Input<string> id, FunctionState? state = null, CustomResourceOptions? options = null)
        {
            return new Function(name, id, state, options);
        }
    }

    public sealed class FunctionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The custom startup command for the instance.
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// Function CPU charging policy.
        /// </summary>
        [Input("cpuStrategy")]
        public Input<string>? CpuStrategy { get; set; }

        /// <summary>
        /// The description of Function.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("envs")]
        private InputList<Inputs.FunctionEnvArgs>? _envs;

        /// <summary>
        /// Function environment variable.
        /// </summary>
        public InputList<Inputs.FunctionEnvArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.FunctionEnvArgs>());
            set => _envs = value;
        }

        /// <summary>
        /// Exclusive mode switch.
        /// </summary>
        [Input("exclusiveMode")]
        public Input<bool>? ExclusiveMode { get; set; }

        /// <summary>
        /// Function to initialize timeout configuration.
        /// </summary>
        [Input("initializerSec")]
        public Input<int>? InitializerSec { get; set; }

        /// <summary>
        /// Maximum concurrency of a single instance.
        /// </summary>
        [Input("maxConcurrency")]
        public Input<int>? MaxConcurrency { get; set; }

        /// <summary>
        /// Maximum memory for a single instance.
        /// </summary>
        [Input("memoryMb")]
        public Input<int>? MemoryMb { get; set; }

        /// <summary>
        /// The name of Function.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The configuration of file storage NAS mount.
        /// </summary>
        [Input("nasStorage")]
        public Input<Inputs.FunctionNasStorageArgs>? NasStorage { get; set; }

        /// <summary>
        /// Custom listening port for the instance.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Request timeout (in seconds).
        /// </summary>
        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        /// <summary>
        /// The runtime of Function.
        /// </summary>
        [Input("runtime", required: true)]
        public Input<string> Runtime { get; set; } = null!;

        /// <summary>
        /// Code source.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Access configuration for the image repository.
        /// </summary>
        [Input("sourceAccessConfig")]
        public Input<Inputs.FunctionSourceAccessConfigArgs>? SourceAccessConfig { get; set; }

        /// <summary>
        /// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// Function log configuration.
        /// </summary>
        [Input("tlsConfig")]
        public Input<Inputs.FunctionTlsConfigArgs>? TlsConfig { get; set; }

        /// <summary>
        /// The configuration of Object Storage TOS mount.
        /// </summary>
        [Input("tosMountConfig")]
        public Input<Inputs.FunctionTosMountConfigArgs>? TosMountConfig { get; set; }

        /// <summary>
        /// The configuration of VPC.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.FunctionVpcConfigArgs>? VpcConfig { get; set; }

        public FunctionArgs()
        {
        }
        public static new FunctionArgs Empty => new FunctionArgs();
    }

    public sealed class FunctionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The size of code package.
        /// </summary>
        [Input("codeSize")]
        public Input<int>? CodeSize { get; set; }

        /// <summary>
        /// Maximum code package size.
        /// </summary>
        [Input("codeSizeLimit")]
        public Input<int>? CodeSizeLimit { get; set; }

        /// <summary>
        /// The custom startup command for the instance.
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// Function CPU charging policy.
        /// </summary>
        [Input("cpuStrategy")]
        public Input<string>? CpuStrategy { get; set; }

        /// <summary>
        /// The creation time of the function.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// The description of Function.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("envs")]
        private InputList<Inputs.FunctionEnvGetArgs>? _envs;

        /// <summary>
        /// Function environment variable.
        /// </summary>
        public InputList<Inputs.FunctionEnvGetArgs> Envs
        {
            get => _envs ?? (_envs = new InputList<Inputs.FunctionEnvGetArgs>());
            set => _envs = value;
        }

        /// <summary>
        /// Exclusive mode switch.
        /// </summary>
        [Input("exclusiveMode")]
        public Input<bool>? ExclusiveMode { get; set; }

        /// <summary>
        /// Function to initialize timeout configuration.
        /// </summary>
        [Input("initializerSec")]
        public Input<int>? InitializerSec { get; set; }

        /// <summary>
        /// The last update time of the function.
        /// </summary>
        [Input("lastUpdateTime")]
        public Input<string>? LastUpdateTime { get; set; }

        /// <summary>
        /// Maximum concurrency of a single instance.
        /// </summary>
        [Input("maxConcurrency")]
        public Input<int>? MaxConcurrency { get; set; }

        /// <summary>
        /// Maximum memory for a single instance.
        /// </summary>
        [Input("memoryMb")]
        public Input<int>? MemoryMb { get; set; }

        /// <summary>
        /// The name of Function.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The configuration of file storage NAS mount.
        /// </summary>
        [Input("nasStorage")]
        public Input<Inputs.FunctionNasStorageGetArgs>? NasStorage { get; set; }

        /// <summary>
        /// The owner of Function.
        /// </summary>
        [Input("owner")]
        public Input<string>? Owner { get; set; }

        /// <summary>
        /// Custom listening port for the instance.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Request timeout (in seconds).
        /// </summary>
        [Input("requestTimeout")]
        public Input<int>? RequestTimeout { get; set; }

        /// <summary>
        /// The runtime of Function.
        /// </summary>
        [Input("runtime")]
        public Input<string>? Runtime { get; set; }

        /// <summary>
        /// Code source.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Access configuration for the image repository.
        /// </summary>
        [Input("sourceAccessConfig")]
        public Input<Inputs.FunctionSourceAccessConfigGetArgs>? SourceAccessConfig { get; set; }

        /// <summary>
        /// Maximum code package size.
        /// </summary>
        [Input("sourceLocation")]
        public Input<string>? SourceLocation { get; set; }

        /// <summary>
        /// Code Source type, supports tos, zip, image (whitelist accounts support native/v1 custom images).
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// Function log configuration.
        /// </summary>
        [Input("tlsConfig")]
        public Input<Inputs.FunctionTlsConfigGetArgs>? TlsConfig { get; set; }

        /// <summary>
        /// The configuration of Object Storage TOS mount.
        /// </summary>
        [Input("tosMountConfig")]
        public Input<Inputs.FunctionTosMountConfigGetArgs>? TosMountConfig { get; set; }

        /// <summary>
        /// The number of triggers for this Function.
        /// </summary>
        [Input("triggersCount")]
        public Input<int>? TriggersCount { get; set; }

        /// <summary>
        /// The configuration of VPC.
        /// </summary>
        [Input("vpcConfig")]
        public Input<Inputs.FunctionVpcConfigGetArgs>? VpcConfig { get; set; }

        public FunctionState()
        {
        }
        public static new FunctionState Empty => new FunctionState();
    }
}
