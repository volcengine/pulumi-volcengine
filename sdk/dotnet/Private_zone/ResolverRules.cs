// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Private_zone
{
    public static class ResolverRules
    {
        /// <summary>
        /// Use this data source to query detailed information of private zone resolver rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Private_zone.ResolverRules.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<ResolverRulesResult> InvokeAsync(ResolverRulesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ResolverRulesResult>("volcengine:private_zone/resolverRules:ResolverRules", args ?? new ResolverRulesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of private zone resolver rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Private_zone.ResolverRules.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<ResolverRulesResult> Invoke(ResolverRulesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ResolverRulesResult>("volcengine:private_zone/resolverRules:ResolverRules", args ?? new ResolverRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ResolverRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the exit terminal node.
        /// </summary>
        [Input("endpointId")]
        public int? EndpointId { get; set; }

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
        /// </summary>
        [Input("zoneName")]
        public string? ZoneName { get; set; }

        public ResolverRulesArgs()
        {
        }
        public static new ResolverRulesArgs Empty => new ResolverRulesArgs();
    }

    public sealed class ResolverRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// ID of the exit terminal node.
        /// </summary>
        [Input("endpointId")]
        public Input<int>? EndpointId { get; set; }

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The main domain associated with the forwarding rule. For example, if you set this parameter to example.com, DNS requests for example.com and all subdomains of example.com will be forwarded.
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public ResolverRulesInvokeArgs()
        {
        }
        public static new ResolverRulesInvokeArgs Empty => new ResolverRulesInvokeArgs();
    }


    [OutputType]
    public sealed class ResolverRulesResult
    {
        /// <summary>
        /// The endpoint ID of the rule.
        /// </summary>
        public readonly int? EndpointId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the rule.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResolverRulesRuleResult> Rules;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The zone name of the rule.
        /// </summary>
        public readonly string? ZoneName;

        [OutputConstructor]
        private ResolverRulesResult(
            int? endpointId,

            string id,

            string? name,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<Outputs.ResolverRulesRuleResult> rules,

            int totalCount,

            string? zoneName)
        {
            EndpointId = endpointId;
            Id = id;
            Name = name;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Rules = rules;
            TotalCount = totalCount;
            ZoneName = zoneName;
        }
    }
}
