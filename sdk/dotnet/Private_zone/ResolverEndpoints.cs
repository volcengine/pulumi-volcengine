// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Private_zone
{
    [Obsolete(@"volcengine.private_zone.ResolverEndpoints has been deprecated in favor of volcengine.private_zone.getResolverEndpoints")]
    public static class ResolverEndpoints
    {
        /// <summary>
        /// Use this data source to query detailed information of private zone resolver endpoints
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Private_zone.GetResolverEndpoints.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<ResolverEndpointsResult> InvokeAsync(ResolverEndpointsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ResolverEndpointsResult>("volcengine:private_zone/resolverEndpoints:ResolverEndpoints", args ?? new ResolverEndpointsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of private zone resolver endpoints
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Private_zone.GetResolverEndpoints.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<ResolverEndpointsResult> Invoke(ResolverEndpointsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ResolverEndpointsResult>("volcengine:private_zone/resolverEndpoints:ResolverEndpoints", args ?? new ResolverEndpointsInvokeArgs(), options.WithDefaults());
    }


    public sealed class ResolverEndpointsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The direction of the private zone resolver endpoint.
        /// </summary>
        [Input("direction")]
        public string? Direction { get; set; }

        /// <summary>
        /// The name of the private zone resolver endpoint.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The status of the private zone resolver endpoint.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// The vpc ID of the private zone resolver endpoint.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public ResolverEndpointsArgs()
        {
        }
        public static new ResolverEndpointsArgs Empty => new ResolverEndpointsArgs();
    }

    public sealed class ResolverEndpointsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The direction of the private zone resolver endpoint.
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// The name of the private zone resolver endpoint.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The status of the private zone resolver endpoint.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The vpc ID of the private zone resolver endpoint.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ResolverEndpointsInvokeArgs()
        {
        }
        public static new ResolverEndpointsInvokeArgs Empty => new ResolverEndpointsInvokeArgs();
    }


    [OutputType]
    public sealed class ResolverEndpointsResult
    {
        /// <summary>
        /// The direction of the endpoint.
        /// </summary>
        public readonly string? Direction;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ResolverEndpointsEndpointResult> Endpoints;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the endpoint.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The status of the endpoint.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The vpc id of the endpoint.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private ResolverEndpointsResult(
            string? direction,

            ImmutableArray<Outputs.ResolverEndpointsEndpointResult> endpoints,

            string id,

            string? name,

            string? nameRegex,

            string? outputFile,

            string? status,

            int totalCount,

            string? vpcId)
        {
            Direction = direction;
            Endpoints = endpoints;
            Id = id;
            Name = name;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Status = status;
            TotalCount = totalCount;
            VpcId = vpcId;
        }
    }
}
