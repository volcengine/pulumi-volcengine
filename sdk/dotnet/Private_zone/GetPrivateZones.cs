// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Private_zone
{
    public static class GetPrivateZones
    {
        /// <summary>
        /// Use this data source to query detailed information of private zones
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Private_zone.GetPrivateZones.Invoke(new()
        ///     {
        ///         LineMode = 3,
        ///         RecursionMode = true,
        ///         SearchMode = "EXACT",
        ///         Zid = 770000,
        ///         ZoneName = "volces.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPrivateZonesResult> InvokeAsync(GetPrivateZonesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPrivateZonesResult>("volcengine:private_zone/getPrivateZones:getPrivateZones", args ?? new GetPrivateZonesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of private zones
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Private_zone.GetPrivateZones.Invoke(new()
        ///     {
        ///         LineMode = 3,
        ///         RecursionMode = true,
        ///         SearchMode = "EXACT",
        ///         Zid = 770000,
        ///         ZoneName = "volces.com",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPrivateZonesResult> Invoke(GetPrivateZonesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPrivateZonesResult>("volcengine:private_zone/getPrivateZones:getPrivateZones", args ?? new GetPrivateZonesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPrivateZonesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The keyword of zone name.
        /// </summary>
        [Input("keyWord")]
        public string? KeyWord { get; set; }

        /// <summary>
        /// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
        /// </summary>
        [Input("lineMode")]
        public int? LineMode { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of the private zone.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// Whether the recursion mode of Private Zone is enabled.
        /// </summary>
        [Input("recursionMode")]
        public bool? RecursionMode { get; set; }

        /// <summary>
        /// The region of Private Zone.
        /// </summary>
        [Input("region")]
        public string? Region { get; set; }

        /// <summary>
        /// The search mode of query. Valid values: `LIKE`, `EXACT`. Default is `LIKE`.
        /// </summary>
        [Input("searchMode")]
        public string? SearchMode { get; set; }

        [Input("tagFilters")]
        private List<Inputs.GetPrivateZonesTagFilterArgs>? _tagFilters;

        /// <summary>
        /// List of tag filters.
        /// </summary>
        public List<Inputs.GetPrivateZonesTagFilterArgs> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new List<Inputs.GetPrivateZonesTagFilterArgs>());
            set => _tagFilters = value;
        }

        /// <summary>
        /// The vpc id associated to Private Zone.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        /// <summary>
        /// The zid of Private Zone.
        /// </summary>
        [Input("zid")]
        public int? Zid { get; set; }

        /// <summary>
        /// The name of Private Zone.
        /// </summary>
        [Input("zoneName")]
        public string? ZoneName { get; set; }

        public GetPrivateZonesArgs()
        {
        }
        public static new GetPrivateZonesArgs Empty => new GetPrivateZonesArgs();
    }

    public sealed class GetPrivateZonesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The keyword of zone name.
        /// </summary>
        [Input("keyWord")]
        public Input<string>? KeyWord { get; set; }

        /// <summary>
        /// The line mode of Private Zone, specified whether the intelligent mode and the load balance function is enabled.
        /// </summary>
        [Input("lineMode")]
        public Input<int>? LineMode { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of the private zone.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Whether the recursion mode of Private Zone is enabled.
        /// </summary>
        [Input("recursionMode")]
        public Input<bool>? RecursionMode { get; set; }

        /// <summary>
        /// The region of Private Zone.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// The search mode of query. Valid values: `LIKE`, `EXACT`. Default is `LIKE`.
        /// </summary>
        [Input("searchMode")]
        public Input<string>? SearchMode { get; set; }

        [Input("tagFilters")]
        private InputList<Inputs.GetPrivateZonesTagFilterInputArgs>? _tagFilters;

        /// <summary>
        /// List of tag filters.
        /// </summary>
        public InputList<Inputs.GetPrivateZonesTagFilterInputArgs> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new InputList<Inputs.GetPrivateZonesTagFilterInputArgs>());
            set => _tagFilters = value;
        }

        /// <summary>
        /// The vpc id associated to Private Zone.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The zid of Private Zone.
        /// </summary>
        [Input("zid")]
        public Input<int>? Zid { get; set; }

        /// <summary>
        /// The name of Private Zone.
        /// </summary>
        [Input("zoneName")]
        public Input<string>? ZoneName { get; set; }

        public GetPrivateZonesInvokeArgs()
        {
        }
        public static new GetPrivateZonesInvokeArgs Empty => new GetPrivateZonesInvokeArgs();
    }


    [OutputType]
    public sealed class GetPrivateZonesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? KeyWord;
        /// <summary>
        /// The line mode of the private zone, specified whether the intelligent mode and the load balance function is enabled.
        /// </summary>
        public readonly int? LineMode;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPrivateZonesPrivateZoneResult> PrivateZones;
        /// <summary>
        /// The project name of the private zone.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// Whether the recursion mode of the private zone is enabled.
        /// </summary>
        public readonly bool? RecursionMode;
        /// <summary>
        /// The region of the private zone.
        /// </summary>
        public readonly string? Region;
        public readonly string? SearchMode;
        public readonly ImmutableArray<Outputs.GetPrivateZonesTagFilterResult> TagFilters;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        public readonly string? VpcId;
        /// <summary>
        /// The id of the private zone.
        /// </summary>
        public readonly int? Zid;
        /// <summary>
        /// The id of the private zone.
        /// </summary>
        public readonly string? ZoneName;

        [OutputConstructor]
        private GetPrivateZonesResult(
            string id,

            string? keyWord,

            int? lineMode,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<Outputs.GetPrivateZonesPrivateZoneResult> privateZones,

            string? projectName,

            bool? recursionMode,

            string? region,

            string? searchMode,

            ImmutableArray<Outputs.GetPrivateZonesTagFilterResult> tagFilters,

            int totalCount,

            string? vpcId,

            int? zid,

            string? zoneName)
        {
            Id = id;
            KeyWord = keyWord;
            LineMode = lineMode;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            PrivateZones = privateZones;
            ProjectName = projectName;
            RecursionMode = recursionMode;
            Region = region;
            SearchMode = searchMode;
            TagFilters = tagFilters;
            TotalCount = totalCount;
            VpcId = vpcId;
            Zid = zid;
            ZoneName = zoneName;
        }
    }
}
