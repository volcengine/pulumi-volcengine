// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cloud_identity
{
    /// <summary>
    /// Provides a resource to manage cloud identity user provisioning
    /// 
    /// ## Import
    /// 
    /// CloudIdentityUserProvisioning can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:cloud_identity/userProvisioning:UserProvisioning default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:cloud_identity/userProvisioning:UserProvisioning")]
    public partial class UserProvisioning : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        /// </summary>
        [Output("deletionStrategy")]
        public Output<string> DeletionStrategy { get; private set; } = null!;

        /// <summary>
        /// The description of the cloud identity user provisioning.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        /// </summary>
        [Output("duplicationStrategy")]
        public Output<string> DuplicationStrategy { get; private set; } = null!;

        /// <summary>
        /// The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        /// </summary>
        [Output("duplicationSuffix")]
        public Output<string?> DuplicationSuffix { get; private set; } = null!;

        /// <summary>
        /// The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        /// </summary>
        [Output("identitySourceStrategy")]
        public Output<string> IdentitySourceStrategy { get; private set; } = null!;

        /// <summary>
        /// A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        /// </summary>
        [Output("policyName")]
        public Output<string?> PolicyName { get; private set; } = null!;

        /// <summary>
        /// The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        /// </summary>
        [Output("principalId")]
        public Output<string> PrincipalId { get; private set; } = null!;

        /// <summary>
        /// The principal name of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserName`. When the `principal_type` is `Group`, this field is specified to `GroupName`.
        /// </summary>
        [Output("principalName")]
        public Output<string> PrincipalName { get; private set; } = null!;

        /// <summary>
        /// The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        /// </summary>
        [Output("principalType")]
        public Output<string> PrincipalType { get; private set; } = null!;

        /// <summary>
        /// The status of the cloud identity user provisioning.
        /// </summary>
        [Output("provisionStatus")]
        public Output<string> ProvisionStatus { get; private set; } = null!;

        /// <summary>
        /// The target account id of the cloud identity user provisioning.
        /// </summary>
        [Output("targetId")]
        public Output<string> TargetId { get; private set; } = null!;


        /// <summary>
        /// Create a UserProvisioning resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public UserProvisioning(string name, UserProvisioningArgs args, CustomResourceOptions? options = null)
            : base("volcengine:cloud_identity/userProvisioning:UserProvisioning", name, args ?? new UserProvisioningArgs(), MakeResourceOptions(options, ""))
        {
        }

        private UserProvisioning(string name, Input<string> id, UserProvisioningState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:cloud_identity/userProvisioning:UserProvisioning", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing UserProvisioning resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static UserProvisioning Get(string name, Input<string> id, UserProvisioningState? state = null, CustomResourceOptions? options = null)
        {
            return new UserProvisioning(name, id, state, options);
        }
    }

    public sealed class UserProvisioningArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        /// </summary>
        [Input("deletionStrategy", required: true)]
        public Input<string> DeletionStrategy { get; set; } = null!;

        /// <summary>
        /// The description of the cloud identity user provisioning.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        /// </summary>
        [Input("duplicationStrategy", required: true)]
        public Input<string> DuplicationStrategy { get; set; } = null!;

        /// <summary>
        /// The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        /// </summary>
        [Input("duplicationSuffix")]
        public Input<string>? DuplicationSuffix { get; set; }

        /// <summary>
        /// The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        /// </summary>
        [Input("identitySourceStrategy", required: true)]
        public Input<string> IdentitySourceStrategy { get; set; } = null!;

        /// <summary>
        /// A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        /// <summary>
        /// The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        /// </summary>
        [Input("principalId", required: true)]
        public Input<string> PrincipalId { get; set; } = null!;

        /// <summary>
        /// The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        /// </summary>
        [Input("principalType", required: true)]
        public Input<string> PrincipalType { get; set; } = null!;

        /// <summary>
        /// The target account id of the cloud identity user provisioning.
        /// </summary>
        [Input("targetId", required: true)]
        public Input<string> TargetId { get; set; } = null!;

        public UserProvisioningArgs()
        {
        }
        public static new UserProvisioningArgs Empty => new UserProvisioningArgs();
    }

    public sealed class UserProvisioningState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The deletion strategy of the cloud identity user provisioning. Valid values: `Keep`, `Delete`.
        /// </summary>
        [Input("deletionStrategy")]
        public Input<string>? DeletionStrategy { get; set; }

        /// <summary>
        /// The description of the cloud identity user provisioning.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The duplication strategy of the cloud identity user provisioning. Valid values: `KeepBoth`, `Takeover`.
        /// </summary>
        [Input("duplicationStrategy")]
        public Input<string>? DuplicationStrategy { get; set; }

        /// <summary>
        /// The duplication suffix of the cloud identity user provisioning. When the `duplication_strategy` is `KeepBoth`, this field must be specified.
        /// </summary>
        [Input("duplicationSuffix")]
        public Input<string>? DuplicationSuffix { get; set; }

        /// <summary>
        /// The identity source strategy of the cloud identity user provisioning. Valid values: `Create`, `Ignore`.
        /// </summary>
        [Input("identitySourceStrategy")]
        public Input<string>? IdentitySourceStrategy { get; set; }

        /// <summary>
        /// A list of policy name. Valid values: `AdministratorAccess`. This field is valid when the `principal_type` is `User`.
        /// </summary>
        [Input("policyName")]
        public Input<string>? PolicyName { get; set; }

        /// <summary>
        /// The principal id of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserId`. When the `principal_type` is `Group`, this field is specified to `GroupId`.
        /// </summary>
        [Input("principalId")]
        public Input<string>? PrincipalId { get; set; }

        /// <summary>
        /// The principal name of the cloud identity user provisioning. When the `principal_type` is `User`, this field is specified to `UserName`. When the `principal_type` is `Group`, this field is specified to `GroupName`.
        /// </summary>
        [Input("principalName")]
        public Input<string>? PrincipalName { get; set; }

        /// <summary>
        /// The principal type of the cloud identity user provisioning. Valid values: `User`, `Group`.
        /// </summary>
        [Input("principalType")]
        public Input<string>? PrincipalType { get; set; }

        /// <summary>
        /// The status of the cloud identity user provisioning.
        /// </summary>
        [Input("provisionStatus")]
        public Input<string>? ProvisionStatus { get; set; }

        /// <summary>
        /// The target account id of the cloud identity user provisioning.
        /// </summary>
        [Input("targetId")]
        public Input<string>? TargetId { get; set; }

        public UserProvisioningState()
        {
        }
        public static new UserProvisioningState Empty => new UserProvisioningState();
    }
}
