// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Mongodb
{
    public static class GetSslStates
    {
        /// <summary>
        /// Use this data source to query detailed information of mongodb ssl states
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Mongodb.Instance("fooInstance", new()
        ///     {
        ///         DbEngineVersion = "MongoDB_4_0",
        ///         InstanceType = "ReplicaSet",
        ///         SuperAccountPassword = "@acc-test-123",
        ///         NodeSpec = "mongo.2c4g",
        ///         MongosNodeSpec = "mongo.mongos.2c4g",
        ///         InstanceName = "acc-test-mongo-replica",
        ///         ChargeType = "PostPaid",
        ///         ProjectName = "default",
        ///         MongosNodeNumber = 2,
        ///         ShardNumber = 3,
        ///         StorageSpaceGb = 20,
        ///         SubnetId = fooSubnet.Id,
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Mongodb.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooSslState = new Volcengine.Mongodb.SslState("fooSslState", new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        ///     var fooSslStates = Volcengine.Mongodb.GetSslStates.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSslStatesResult> InvokeAsync(GetSslStatesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSslStatesResult>("volcengine:mongodb/getSslStates:getSslStates", args ?? new GetSslStatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of mongodb ssl states
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Mongodb.Instance("fooInstance", new()
        ///     {
        ///         DbEngineVersion = "MongoDB_4_0",
        ///         InstanceType = "ReplicaSet",
        ///         SuperAccountPassword = "@acc-test-123",
        ///         NodeSpec = "mongo.2c4g",
        ///         MongosNodeSpec = "mongo.mongos.2c4g",
        ///         InstanceName = "acc-test-mongo-replica",
        ///         ChargeType = "PostPaid",
        ///         ProjectName = "default",
        ///         MongosNodeNumber = 2,
        ///         ShardNumber = 3,
        ///         StorageSpaceGb = 20,
        ///         SubnetId = fooSubnet.Id,
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Mongodb.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooSslState = new Volcengine.Mongodb.SslState("fooSslState", new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        ///     var fooSslStates = Volcengine.Mongodb.GetSslStates.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSslStatesResult> Invoke(GetSslStatesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSslStatesResult>("volcengine:mongodb/getSslStates:getSslStates", args ?? new GetSslStatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSslStatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The mongodb instance ID to query.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetSslStatesArgs()
        {
        }
        public static new GetSslStatesArgs Empty => new GetSslStatesArgs();
    }

    public sealed class GetSslStatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The mongodb instance ID to query.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetSslStatesInvokeArgs()
        {
        }
        public static new GetSslStatesInvokeArgs Empty => new GetSslStatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetSslStatesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The mongodb instance id.
        /// </summary>
        public readonly string InstanceId;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of mongodb ssl state query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSslStatesSslStateResult> SslStates;
        /// <summary>
        /// The total count of mongodb ssl state query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetSslStatesResult(
            string id,

            string instanceId,

            string? outputFile,

            ImmutableArray<Outputs.GetSslStatesSslStateResult> sslStates,

            int totalCount)
        {
            Id = id;
            InstanceId = instanceId;
            OutputFile = outputFile;
            SslStates = sslStates;
            TotalCount = totalCount;
        }
    }
}
