// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Mongodb
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     // create vpc
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///         DnsServers = new[]
    ///         {
    ///             "8.8.8.8",
    ///             "114.114.114.114",
    ///         },
    ///         ProjectName = "default",
    ///     });
    /// 
    ///     // create subnet
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     // create mongodb ReplicaSet instance
    ///     var foo_replica = new Volcengine.Mongodb.Instance("foo-replica", new()
    ///     {
    ///         ZoneIds = new[]
    ///         {
    ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         },
    ///         DbEngineVersion = "MongoDB_4_0",
    ///         InstanceType = "ReplicaSet",
    ///         NodeSpec = "mongo.2c4g",
    ///         StorageSpaceGb = 100,
    ///         SubnetId = fooSubnet.Id,
    ///         InstanceName = "acc-test-mongodb-replica",
    ///         ChargeType = "PostPaid",
    ///         SuperAccountPassword = "93f0cb0614Aab12",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Mongodb.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///         NodeAvailabilityZones = new[]
    ///         {
    ///             new Volcengine.Mongodb.Inputs.InstanceNodeAvailabilityZoneArgs
    ///             {
    ///                 ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///                 NodeNumber = 2,
    ///             },
    ///         },
    ///     });
    /// 
    ///     // create mongodb ShardedCluster instance
    ///     var foo_sharded = new Volcengine.Mongodb.Instance("foo-sharded", new()
    ///     {
    ///         ZoneIds = new[]
    ///         {
    ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         },
    ///         DbEngineVersion = "MongoDB_4_0",
    ///         InstanceType = "ShardedCluster",
    ///         NodeSpec = "mongo.shard.2c4g",
    ///         MongosNodeSpec = "mongo.mongos.2c4g",
    ///         MongosNodeNumber = 3,
    ///         ShardNumber = 3,
    ///         ConfigServerNodeSpec = "mongo.config.2c4g",
    ///         ConfigServerStorageSpaceGb = 30,
    ///         StorageSpaceGb = 100,
    ///         SubnetId = fooSubnet.Id,
    ///         InstanceName = "acc-test-mongodb-sharded",
    ///         ChargeType = "PostPaid",
    ///         SuperAccountPassword = "93f0cb0614Aab12",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Mongodb.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///         NodeAvailabilityZones = new[]
    ///         {
    ///             new Volcengine.Mongodb.Inputs.InstanceNodeAvailabilityZoneArgs
    ///             {
    ///                 ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///                 NodeNumber = 2,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// mongodb instance can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:mongodb/instance:Instance default mongo-replica-e405f8e2****
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:mongodb/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable automatic renewal. This parameter is required when the `ChargeType` is `Prepaid`.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The charge type of instance, valid value contains `Prepaid` or `PostPaid`. Default is `PostPaid`.
        /// </summary>
        [Output("chargeType")]
        public Output<string> ChargeType { get; private set; } = null!;

        /// <summary>
        /// The config server node spec of shard cluster. Default is `mongo.config.1c2g`. This parameter is only effective when the `InstanceType` is `ShardedCluster`. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("configServerNodeSpec")]
        public Output<string> ConfigServerNodeSpec { get; private set; } = null!;

        /// <summary>
        /// The config server storage space of shard cluster, Unit: GiB. Default is 20. This parameter is only effective when the `InstanceType` is `ShardedCluster`. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("configServerStorageSpaceGb")]
        public Output<int> ConfigServerStorageSpaceGb { get; private set; } = null!;

        /// <summary>
        /// The config servers id of the ShardedCluster instance.
        /// </summary>
        [Output("configServersId")]
        public Output<string> ConfigServersId { get; private set; } = null!;

        /// <summary>
        /// The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_4_2`, `MongoDB_4_4`, `MongoDB_5_0`, `MongoDB_6_0`.
        /// </summary>
        [Output("dbEngineVersion")]
        public Output<string> DbEngineVersion { get; private set; } = null!;

        /// <summary>
        /// The instance name.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The type of instance, the valid value contains `ReplicaSet` or `ShardedCluster`. Default is `ReplicaSet`.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// The mongos information of the ShardedCluster instance.
        /// </summary>
        [Output("mongos")]
        public Output<ImmutableArray<Outputs.InstanceMongo>> Mongos { get; private set; } = null!;

        /// <summary>
        /// The mongos id of the ShardedCluster instance.
        /// </summary>
        [Output("mongosId")]
        public Output<string> MongosId { get; private set; } = null!;

        /// <summary>
        /// The mongos node number of shard cluster, value range is `2~23`, this parameter is required when the `InstanceType` is `ShardedCluster`.
        /// </summary>
        [Output("mongosNodeNumber")]
        public Output<int?> MongosNodeNumber { get; private set; } = null!;

        /// <summary>
        /// The mongos node spec of shard cluster, this parameter is required when the `InstanceType` is `ShardedCluster`.
        /// </summary>
        [Output("mongosNodeSpec")]
        public Output<string?> MongosNodeSpec { get; private set; } = null!;

        /// <summary>
        /// The readonly node of the instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("nodeAvailabilityZones")]
        public Output<ImmutableArray<Outputs.InstanceNodeAvailabilityZone>> NodeAvailabilityZones { get; private set; } = null!;

        /// <summary>
        /// The spec of node. When the instance_type is ReplicaSet, this parameter represents the computing node specification of the replica set instance. When the instance_type is ShardedCluster, this parameter represents the specification of the Shard node.
        /// </summary>
        [Output("nodeSpec")]
        public Output<string> NodeSpec { get; private set; } = null!;

        /// <summary>
        /// The instance purchase duration, the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`. This parameter is required when the `ChargeType` is `Prepaid`.
        /// </summary>
        [Output("period")]
        public Output<int> Period { get; private set; } = null!;

        /// <summary>
        /// The period unit, valid value contains `Year` or `Month`. This parameter is required when the `ChargeType` is `Prepaid`.
        /// </summary>
        [Output("periodUnit")]
        public Output<string> PeriodUnit { get; private set; } = null!;

        /// <summary>
        /// The private endpoint address of instance.
        /// </summary>
        [Output("privateEndpoint")]
        public Output<string> PrivateEndpoint { get; private set; } = null!;

        /// <summary>
        /// The project name to which the instance belongs.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The number of readonly node in instance.
        /// </summary>
        [Output("readOnlyNodeNumber")]
        public Output<int> ReadOnlyNodeNumber { get; private set; } = null!;

        /// <summary>
        /// The number of shards in shard cluster, value range is `2~32`, this parameter is required when the `InstanceType` is `ShardedCluster`.
        /// </summary>
        [Output("shardNumber")]
        public Output<int?> ShardNumber { get; private set; } = null!;

        /// <summary>
        /// The shards information of the ShardedCluster instance.
        /// </summary>
        [Output("shards")]
        public Output<ImmutableArray<Outputs.InstanceShard>> Shards { get; private set; } = null!;

        /// <summary>
        /// The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster. Unit: GiB.
        /// </summary>
        [Output("storageSpaceGb")]
        public Output<int> StorageSpaceGb { get; private set; } = null!;

        /// <summary>
        /// The subnet id of instance.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The password of database account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("superAccountPassword")]
        public Output<string?> SuperAccountPassword { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.InstanceTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The vpc ID.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// This field has been deprecated after version-0.0.156. Please use `zone_ids` to deploy multiple availability zones. The zone ID of instance.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        /// <summary>
        /// The list of zone ids. If you need to deploy multiple availability zones for a newly created instance, you can specify three availability zone IDs at the same time. By default, the first available zone passed in is the primary available zone, and the two available zones passed in afterwards are the backup available zones.
        /// </summary>
        [Output("zoneIds")]
        public Output<ImmutableArray<string>> ZoneIds { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:mongodb/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:mongodb/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
                AdditionalSecretOutputs =
                {
                    "superAccountPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable automatic renewal. This parameter is required when the `ChargeType` is `Prepaid`.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The charge type of instance, valid value contains `Prepaid` or `PostPaid`. Default is `PostPaid`.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// The config server node spec of shard cluster. Default is `mongo.config.1c2g`. This parameter is only effective when the `InstanceType` is `ShardedCluster`. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("configServerNodeSpec")]
        public Input<string>? ConfigServerNodeSpec { get; set; }

        /// <summary>
        /// The config server storage space of shard cluster, Unit: GiB. Default is 20. This parameter is only effective when the `InstanceType` is `ShardedCluster`. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("configServerStorageSpaceGb")]
        public Input<int>? ConfigServerStorageSpaceGb { get; set; }

        /// <summary>
        /// The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_4_2`, `MongoDB_4_4`, `MongoDB_5_0`, `MongoDB_6_0`.
        /// </summary>
        [Input("dbEngineVersion")]
        public Input<string>? DbEngineVersion { get; set; }

        /// <summary>
        /// The instance name.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The type of instance, the valid value contains `ReplicaSet` or `ShardedCluster`. Default is `ReplicaSet`.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The mongos node number of shard cluster, value range is `2~23`, this parameter is required when the `InstanceType` is `ShardedCluster`.
        /// </summary>
        [Input("mongosNodeNumber")]
        public Input<int>? MongosNodeNumber { get; set; }

        /// <summary>
        /// The mongos node spec of shard cluster, this parameter is required when the `InstanceType` is `ShardedCluster`.
        /// </summary>
        [Input("mongosNodeSpec")]
        public Input<string>? MongosNodeSpec { get; set; }

        [Input("nodeAvailabilityZones")]
        private InputList<Inputs.InstanceNodeAvailabilityZoneArgs>? _nodeAvailabilityZones;

        /// <summary>
        /// The readonly node of the instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        public InputList<Inputs.InstanceNodeAvailabilityZoneArgs> NodeAvailabilityZones
        {
            get => _nodeAvailabilityZones ?? (_nodeAvailabilityZones = new InputList<Inputs.InstanceNodeAvailabilityZoneArgs>());
            set => _nodeAvailabilityZones = value;
        }

        /// <summary>
        /// The spec of node. When the instance_type is ReplicaSet, this parameter represents the computing node specification of the replica set instance. When the instance_type is ShardedCluster, this parameter represents the specification of the Shard node.
        /// </summary>
        [Input("nodeSpec", required: true)]
        public Input<string> NodeSpec { get; set; } = null!;

        /// <summary>
        /// The instance purchase duration, the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`. This parameter is required when the `ChargeType` is `Prepaid`.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// The period unit, valid value contains `Year` or `Month`. This parameter is required when the `ChargeType` is `Prepaid`.
        /// </summary>
        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// The project name to which the instance belongs.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The number of shards in shard cluster, value range is `2~32`, this parameter is required when the `InstanceType` is `ShardedCluster`.
        /// </summary>
        [Input("shardNumber")]
        public Input<int>? ShardNumber { get; set; }

        /// <summary>
        /// The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster. Unit: GiB.
        /// </summary>
        [Input("storageSpaceGb", required: true)]
        public Input<int> StorageSpaceGb { get; set; } = null!;

        /// <summary>
        /// The subnet id of instance.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("superAccountPassword")]
        private Input<string>? _superAccountPassword;

        /// <summary>
        /// The password of database account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        public Input<string>? SuperAccountPassword
        {
            get => _superAccountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _superAccountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tags")]
        private InputList<Inputs.InstanceTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The vpc ID.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// This field has been deprecated after version-0.0.156. Please use `zone_ids` to deploy multiple availability zones. The zone ID of instance.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The list of zone ids. If you need to deploy multiple availability zones for a newly created instance, you can specify three availability zone IDs at the same time. By default, the first available zone passed in is the primary available zone, and the two available zones passed in afterwards are the backup available zones.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable automatic renewal. This parameter is required when the `ChargeType` is `Prepaid`.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The charge type of instance, valid value contains `Prepaid` or `PostPaid`. Default is `PostPaid`.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// The config server node spec of shard cluster. Default is `mongo.config.1c2g`. This parameter is only effective when the `InstanceType` is `ShardedCluster`. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("configServerNodeSpec")]
        public Input<string>? ConfigServerNodeSpec { get; set; }

        /// <summary>
        /// The config server storage space of shard cluster, Unit: GiB. Default is 20. This parameter is only effective when the `InstanceType` is `ShardedCluster`. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("configServerStorageSpaceGb")]
        public Input<int>? ConfigServerStorageSpaceGb { get; set; }

        /// <summary>
        /// The config servers id of the ShardedCluster instance.
        /// </summary>
        [Input("configServersId")]
        public Input<string>? ConfigServersId { get; set; }

        /// <summary>
        /// The version of db engine, valid value contains `MongoDB_4_0`, `MongoDB_4_2`, `MongoDB_4_4`, `MongoDB_5_0`, `MongoDB_6_0`.
        /// </summary>
        [Input("dbEngineVersion")]
        public Input<string>? DbEngineVersion { get; set; }

        /// <summary>
        /// The instance name.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The type of instance, the valid value contains `ReplicaSet` or `ShardedCluster`. Default is `ReplicaSet`.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        [Input("mongos")]
        private InputList<Inputs.InstanceMongoGetArgs>? _mongos;

        /// <summary>
        /// The mongos information of the ShardedCluster instance.
        /// </summary>
        public InputList<Inputs.InstanceMongoGetArgs> Mongos
        {
            get => _mongos ?? (_mongos = new InputList<Inputs.InstanceMongoGetArgs>());
            set => _mongos = value;
        }

        /// <summary>
        /// The mongos id of the ShardedCluster instance.
        /// </summary>
        [Input("mongosId")]
        public Input<string>? MongosId { get; set; }

        /// <summary>
        /// The mongos node number of shard cluster, value range is `2~23`, this parameter is required when the `InstanceType` is `ShardedCluster`.
        /// </summary>
        [Input("mongosNodeNumber")]
        public Input<int>? MongosNodeNumber { get; set; }

        /// <summary>
        /// The mongos node spec of shard cluster, this parameter is required when the `InstanceType` is `ShardedCluster`.
        /// </summary>
        [Input("mongosNodeSpec")]
        public Input<string>? MongosNodeSpec { get; set; }

        [Input("nodeAvailabilityZones")]
        private InputList<Inputs.InstanceNodeAvailabilityZoneGetArgs>? _nodeAvailabilityZones;

        /// <summary>
        /// The readonly node of the instance. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        public InputList<Inputs.InstanceNodeAvailabilityZoneGetArgs> NodeAvailabilityZones
        {
            get => _nodeAvailabilityZones ?? (_nodeAvailabilityZones = new InputList<Inputs.InstanceNodeAvailabilityZoneGetArgs>());
            set => _nodeAvailabilityZones = value;
        }

        /// <summary>
        /// The spec of node. When the instance_type is ReplicaSet, this parameter represents the computing node specification of the replica set instance. When the instance_type is ShardedCluster, this parameter represents the specification of the Shard node.
        /// </summary>
        [Input("nodeSpec")]
        public Input<string>? NodeSpec { get; set; }

        /// <summary>
        /// The instance purchase duration, the value range is `1~3` when `PeriodUtil` is `Year`, the value range is `1~9` when `PeriodUtil` is `Month`. This parameter is required when the `ChargeType` is `Prepaid`.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// The period unit, valid value contains `Year` or `Month`. This parameter is required when the `ChargeType` is `Prepaid`.
        /// </summary>
        [Input("periodUnit")]
        public Input<string>? PeriodUnit { get; set; }

        /// <summary>
        /// The private endpoint address of instance.
        /// </summary>
        [Input("privateEndpoint")]
        public Input<string>? PrivateEndpoint { get; set; }

        /// <summary>
        /// The project name to which the instance belongs.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The number of readonly node in instance.
        /// </summary>
        [Input("readOnlyNodeNumber")]
        public Input<int>? ReadOnlyNodeNumber { get; set; }

        /// <summary>
        /// The number of shards in shard cluster, value range is `2~32`, this parameter is required when the `InstanceType` is `ShardedCluster`.
        /// </summary>
        [Input("shardNumber")]
        public Input<int>? ShardNumber { get; set; }

        [Input("shards")]
        private InputList<Inputs.InstanceShardGetArgs>? _shards;

        /// <summary>
        /// The shards information of the ShardedCluster instance.
        /// </summary>
        public InputList<Inputs.InstanceShardGetArgs> Shards
        {
            get => _shards ?? (_shards = new InputList<Inputs.InstanceShardGetArgs>());
            set => _shards = value;
        }

        /// <summary>
        /// The total storage space of a replica set instance, or the storage space of a single shard in a sharded cluster. Unit: GiB.
        /// </summary>
        [Input("storageSpaceGb")]
        public Input<int>? StorageSpaceGb { get; set; }

        /// <summary>
        /// The subnet id of instance.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("superAccountPassword")]
        private Input<string>? _superAccountPassword;

        /// <summary>
        /// The password of database account. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        public Input<string>? SuperAccountPassword
        {
            get => _superAccountPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _superAccountPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tags")]
        private InputList<Inputs.InstanceTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The vpc ID.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// This field has been deprecated after version-0.0.156. Please use `zone_ids` to deploy multiple availability zones. The zone ID of instance.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The list of zone ids. If you need to deploy multiple availability zones for a newly created instance, you can specify three availability zone IDs at the same time. By default, the first available zone passed in is the primary available zone, and the two available zones passed in afterwards are the backup available zones.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
