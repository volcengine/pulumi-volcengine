// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Mongodb
{
    /// <summary>
    /// Provides a resource to manage mongodb ssl state
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Mongodb.Instance("fooInstance", new()
    ///     {
    ///         DbEngineVersion = "MongoDB_4_0",
    ///         InstanceType = "ReplicaSet",
    ///         SuperAccountPassword = "@acc-test-123",
    ///         NodeSpec = "mongo.2c4g",
    ///         MongosNodeSpec = "mongo.mongos.2c4g",
    ///         InstanceName = "acc-test-mongo-replica",
    ///         ChargeType = "PostPaid",
    ///         ProjectName = "default",
    ///         MongosNodeNumber = 2,
    ///         ShardNumber = 3,
    ///         StorageSpaceGb = 20,
    ///         SubnetId = fooSubnet.Id,
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Mongodb.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooSslState = new Volcengine.Mongodb.SslState("fooSslState", new()
    ///     {
    ///         InstanceId = fooInstance.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// mongodb ssl state can be imported using the ssl:instanceId, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:mongodb/sslState:SslState default ssl:mongo-shard-d050db19xxx
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:mongodb/sslState:SslState")]
    public partial class SslState : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of mongodb instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Whetehr SSL is valid.
        /// </summary>
        [Output("isValid")]
        public Output<bool> IsValid { get; private set; } = null!;

        /// <summary>
        /// The action of ssl, valid value contains `Update`. Set `ssl_action` to `Update` will will trigger an SSL update operation when executing `pulumi up`.When the current time is less than 30 days from the `ssl_expired_time`, executing `pulumi up` will automatically renew the SSL.
        /// </summary>
        [Output("sslAction")]
        public Output<string?> SslAction { get; private set; } = null!;

        /// <summary>
        /// Whether SSL is enabled.
        /// </summary>
        [Output("sslEnable")]
        public Output<bool> SslEnable { get; private set; } = null!;

        /// <summary>
        /// The expire time of SSL.
        /// </summary>
        [Output("sslExpiredTime")]
        public Output<string> SslExpiredTime { get; private set; } = null!;


        /// <summary>
        /// Create a SslState resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SslState(string name, SslStateArgs args, CustomResourceOptions? options = null)
            : base("volcengine:mongodb/sslState:SslState", name, args ?? new SslStateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SslState(string name, Input<string> id, SslStateState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:mongodb/sslState:SslState", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SslState resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SslState Get(string name, Input<string> id, SslStateState? state = null, CustomResourceOptions? options = null)
        {
            return new SslState(name, id, state, options);
        }
    }

    public sealed class SslStateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of mongodb instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// The action of ssl, valid value contains `Update`. Set `ssl_action` to `Update` will will trigger an SSL update operation when executing `pulumi up`.When the current time is less than 30 days from the `ssl_expired_time`, executing `pulumi up` will automatically renew the SSL.
        /// </summary>
        [Input("sslAction")]
        public Input<string>? SslAction { get; set; }

        public SslStateArgs()
        {
        }
        public static new SslStateArgs Empty => new SslStateArgs();
    }

    public sealed class SslStateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of mongodb instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Whetehr SSL is valid.
        /// </summary>
        [Input("isValid")]
        public Input<bool>? IsValid { get; set; }

        /// <summary>
        /// The action of ssl, valid value contains `Update`. Set `ssl_action` to `Update` will will trigger an SSL update operation when executing `pulumi up`.When the current time is less than 30 days from the `ssl_expired_time`, executing `pulumi up` will automatically renew the SSL.
        /// </summary>
        [Input("sslAction")]
        public Input<string>? SslAction { get; set; }

        /// <summary>
        /// Whether SSL is enabled.
        /// </summary>
        [Input("sslEnable")]
        public Input<bool>? SslEnable { get; set; }

        /// <summary>
        /// The expire time of SSL.
        /// </summary>
        [Input("sslExpiredTime")]
        public Input<string>? SslExpiredTime { get; set; }

        public SslStateState()
        {
        }
        public static new SslStateState Empty => new SslStateState();
    }
}
