// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vpc
{
    /// <summary>
    /// Provides a resource to manage security group rule
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var g1test3 = new Volcengine.Vpc.SecurityGroupRule("g1test3", new()
    ///     {
    ///         CidrIp = "10.0.0.0/8",
    ///         Description = "tft1234",
    ///         Direction = "egress",
    ///         PortEnd = 9003,
    ///         PortStart = 8000,
    ///         Protocol = "tcp",
    ///         SecurityGroupId = "sg-2d6722jpp55og58ozfd1sqtdb",
    ///     });
    /// 
    ///     var g1test2 = new Volcengine.Vpc.SecurityGroupRule("g1test2", new()
    ///     {
    ///         CidrIp = "10.0.0.0/24",
    ///         Direction = "egress",
    ///         PortEnd = 9003,
    ///         PortStart = 8000,
    ///         Protocol = "tcp",
    ///         SecurityGroupId = "sg-2d6722jpp55og58ozfd1sqtdb",
    ///     });
    /// 
    ///     var g1test1 = new Volcengine.Vpc.SecurityGroupRule("g1test1", new()
    ///     {
    ///         CidrIp = "10.0.0.0/24",
    ///         Direction = "egress",
    ///         PortEnd = 9003,
    ///         PortStart = 8000,
    ///         Priority = 2,
    ///         Protocol = "tcp",
    ///         SecurityGroupId = "sg-2d6722jpp55og58ozfd1sqtdb",
    ///     });
    /// 
    ///     var g1test0 = new Volcengine.Vpc.SecurityGroupRule("g1test0", new()
    ///     {
    ///         CidrIp = "10.0.0.0/24",
    ///         Description = "tft",
    ///         Direction = "ingress",
    ///         Policy = "drop",
    ///         PortEnd = 80,
    ///         PortStart = 80,
    ///         Priority = 2,
    ///         Protocol = "tcp",
    ///         SecurityGroupId = "sg-2d6722jpp55og58ozfd1sqtdb",
    ///     });
    /// 
    ///     var g1test06 = new Volcengine.Vpc.SecurityGroupRule("g1test06", new()
    ///     {
    ///         Description = "tft",
    ///         Direction = "ingress",
    ///         Policy = "drop",
    ///         PortEnd = 9003,
    ///         PortStart = 8000,
    ///         Priority = 2,
    ///         Protocol = "tcp",
    ///         SecurityGroupId = "sg-2d6722jpp55og58ozfd1sqtdb",
    ///         SourceGroupId = "sg-3rfe5j4xdnklc5zsk2hcw5c6q",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SecurityGroupRule can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:vpc/securityGroupRule:SecurityGroupRule default ID is a string concatenated with colons(SecurityGroupId:Protocol:PortStart:PortEnd:CidrIp:SourceGroupId:Direction:Policy:Priority)
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vpc/securityGroupRule:SecurityGroupRule")]
    public partial class SecurityGroupRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cidr ip of egress/ingress Rule.
        /// </summary>
        [Output("cidrIp")]
        public Output<string?> CidrIp { get; private set; } = null!;

        /// <summary>
        /// description of a egress rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Direction of rule, ingress (inbound) or egress (outbound).
        /// </summary>
        [Output("direction")]
        public Output<string> Direction { get; private set; } = null!;

        /// <summary>
        /// Access strategy.
        /// </summary>
        [Output("policy")]
        public Output<string?> Policy { get; private set; } = null!;

        /// <summary>
        /// Port end of egress/ingress Rule.
        /// </summary>
        [Output("portEnd")]
        public Output<int> PortEnd { get; private set; } = null!;

        /// <summary>
        /// Port start of egress/ingress Rule.
        /// </summary>
        [Output("portStart")]
        public Output<int> PortStart { get; private set; } = null!;

        /// <summary>
        /// Priority of a security group rule.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Protocol of the SecurityGroup, the value can be `tcp` or `udp` or `icmp` or `all` or `icmpv6`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// Id of SecurityGroup.
        /// </summary>
        [Output("securityGroupId")]
        public Output<string> SecurityGroupId { get; private set; } = null!;

        /// <summary>
        /// ID of the source security group whose access permission you want to set.
        /// </summary>
        [Output("sourceGroupId")]
        public Output<string?> SourceGroupId { get; private set; } = null!;

        /// <summary>
        /// Status of SecurityGroup.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a SecurityGroupRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecurityGroupRule(string name, SecurityGroupRuleArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vpc/securityGroupRule:SecurityGroupRule", name, args ?? new SecurityGroupRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecurityGroupRule(string name, Input<string> id, SecurityGroupRuleState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vpc/securityGroupRule:SecurityGroupRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecurityGroupRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecurityGroupRule Get(string name, Input<string> id, SecurityGroupRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new SecurityGroupRule(name, id, state, options);
        }
    }

    public sealed class SecurityGroupRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cidr ip of egress/ingress Rule.
        /// </summary>
        [Input("cidrIp")]
        public Input<string>? CidrIp { get; set; }

        /// <summary>
        /// description of a egress rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Direction of rule, ingress (inbound) or egress (outbound).
        /// </summary>
        [Input("direction", required: true)]
        public Input<string> Direction { get; set; } = null!;

        /// <summary>
        /// Access strategy.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// Port end of egress/ingress Rule.
        /// </summary>
        [Input("portEnd", required: true)]
        public Input<int> PortEnd { get; set; } = null!;

        /// <summary>
        /// Port start of egress/ingress Rule.
        /// </summary>
        [Input("portStart", required: true)]
        public Input<int> PortStart { get; set; } = null!;

        /// <summary>
        /// Priority of a security group rule.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Protocol of the SecurityGroup, the value can be `tcp` or `udp` or `icmp` or `all` or `icmpv6`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// Id of SecurityGroup.
        /// </summary>
        [Input("securityGroupId", required: true)]
        public Input<string> SecurityGroupId { get; set; } = null!;

        /// <summary>
        /// ID of the source security group whose access permission you want to set.
        /// </summary>
        [Input("sourceGroupId")]
        public Input<string>? SourceGroupId { get; set; }

        public SecurityGroupRuleArgs()
        {
        }
        public static new SecurityGroupRuleArgs Empty => new SecurityGroupRuleArgs();
    }

    public sealed class SecurityGroupRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cidr ip of egress/ingress Rule.
        /// </summary>
        [Input("cidrIp")]
        public Input<string>? CidrIp { get; set; }

        /// <summary>
        /// description of a egress rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Direction of rule, ingress (inbound) or egress (outbound).
        /// </summary>
        [Input("direction")]
        public Input<string>? Direction { get; set; }

        /// <summary>
        /// Access strategy.
        /// </summary>
        [Input("policy")]
        public Input<string>? Policy { get; set; }

        /// <summary>
        /// Port end of egress/ingress Rule.
        /// </summary>
        [Input("portEnd")]
        public Input<int>? PortEnd { get; set; }

        /// <summary>
        /// Port start of egress/ingress Rule.
        /// </summary>
        [Input("portStart")]
        public Input<int>? PortStart { get; set; }

        /// <summary>
        /// Priority of a security group rule.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Protocol of the SecurityGroup, the value can be `tcp` or `udp` or `icmp` or `all` or `icmpv6`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// Id of SecurityGroup.
        /// </summary>
        [Input("securityGroupId")]
        public Input<string>? SecurityGroupId { get; set; }

        /// <summary>
        /// ID of the source security group whose access permission you want to set.
        /// </summary>
        [Input("sourceGroupId")]
        public Input<string>? SourceGroupId { get; set; }

        /// <summary>
        /// Status of SecurityGroup.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public SecurityGroupRuleState()
        {
        }
        public static new SecurityGroupRuleState Empty => new SecurityGroupRuleState();
    }
}
