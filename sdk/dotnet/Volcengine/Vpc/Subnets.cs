// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vpc
{
    public static class Subnets
    {
        /// <summary>
        /// Use this data source to query detailed information of subnets
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vpc.Subnets.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "subnet-274zsa5kfmj287fap8soo5e19",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<SubnetsResult> InvokeAsync(SubnetsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<SubnetsResult>("volcengine:vpc/subnets:Subnets", args ?? new SubnetsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of subnets
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vpc.Subnets.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "subnet-274zsa5kfmj287fap8soo5e19",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<SubnetsResult> Invoke(SubnetsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<SubnetsResult>("volcengine:vpc/subnets:Subnets", args ?? new SubnetsInvokeArgs(), options.WithDefaults());
    }


    public sealed class SubnetsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Subnet IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Subnet.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ID of route table which subnet associated with.
        /// </summary>
        [Input("routeTableId")]
        public string? RouteTableId { get; set; }

        /// <summary>
        /// The subnet name to query.
        /// </summary>
        [Input("subnetName")]
        public string? SubnetName { get; set; }

        /// <summary>
        /// The ID of VPC which subnet belongs to.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        /// <summary>
        /// The ID of zone which subnet belongs to.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public SubnetsArgs()
        {
        }
        public static new SubnetsArgs Empty => new SubnetsArgs();
    }

    public sealed class SubnetsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Subnet IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Subnet.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The ID of route table which subnet associated with.
        /// </summary>
        [Input("routeTableId")]
        public Input<string>? RouteTableId { get; set; }

        /// <summary>
        /// The subnet name to query.
        /// </summary>
        [Input("subnetName")]
        public Input<string>? SubnetName { get; set; }

        /// <summary>
        /// The ID of VPC which subnet belongs to.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The ID of zone which subnet belongs to.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public SubnetsInvokeArgs()
        {
        }
        public static new SubnetsInvokeArgs Empty => new SubnetsInvokeArgs();
    }


    [OutputType]
    public sealed class SubnetsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The route table ID.
        /// </summary>
        public readonly string? RouteTableId;
        /// <summary>
        /// The Name of Subnet.
        /// </summary>
        public readonly string? SubnetName;
        /// <summary>
        /// The collection of Subnet query.
        /// </summary>
        public readonly ImmutableArray<Outputs.SubnetsSubnetResult> Subnets;
        /// <summary>
        /// The total count of Subnet query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The Vpc ID of Subnet.
        /// </summary>
        public readonly string? VpcId;
        /// <summary>
        /// The ID of Zone.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private SubnetsResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string? routeTableId,

            string? subnetName,

            ImmutableArray<Outputs.SubnetsSubnetResult> subnets,

            int totalCount,

            string? vpcId,

            string? zoneId)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            RouteTableId = routeTableId;
            SubnetName = subnetName;
            Subnets = subnets;
            TotalCount = totalCount;
            VpcId = vpcId;
            ZoneId = zoneId;
        }
    }
}
