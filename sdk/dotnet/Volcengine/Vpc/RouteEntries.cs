// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vpc
{
    public static class RouteEntries
    {
        /// <summary>
        /// Use this data source to query detailed information of route entries
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vpc.RouteEntries.Invoke(new()
        ///     {
        ///         Ids = new[] {},
        ///         RouteTableId = "vtb-274e19skkuhog7fap8u4i8ird",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<RouteEntriesResult> InvokeAsync(RouteEntriesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<RouteEntriesResult>("volcengine:vpc/routeEntries:RouteEntries", args ?? new RouteEntriesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of route entries
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vpc.RouteEntries.Invoke(new()
        ///     {
        ///         Ids = new[] {},
        ///         RouteTableId = "vtb-274e19skkuhog7fap8u4i8ird",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<RouteEntriesResult> Invoke(RouteEntriesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<RouteEntriesResult>("volcengine:vpc/routeEntries:RouteEntries", args ?? new RouteEntriesInvokeArgs(), options.WithDefaults());
    }


    public sealed class RouteEntriesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A destination CIDR block of route entry.
        /// </summary>
        [Input("destinationCidrBlock")]
        public string? DestinationCidrBlock { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of route entry ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// An id of next hop.
        /// </summary>
        [Input("nextHopId")]
        public string? NextHopId { get; set; }

        /// <summary>
        /// A type of next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`.
        /// </summary>
        [Input("nextHopType")]
        public string? NextHopType { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// A name of route entry.
        /// </summary>
        [Input("routeEntryName")]
        public string? RouteEntryName { get; set; }

        /// <summary>
        /// A type of route entry.
        /// </summary>
        [Input("routeEntryType")]
        public string? RouteEntryType { get; set; }

        /// <summary>
        /// An id of route table.
        /// </summary>
        [Input("routeTableId", required: true)]
        public string RouteTableId { get; set; } = null!;

        public RouteEntriesArgs()
        {
        }
        public static new RouteEntriesArgs Empty => new RouteEntriesArgs();
    }

    public sealed class RouteEntriesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A destination CIDR block of route entry.
        /// </summary>
        [Input("destinationCidrBlock")]
        public Input<string>? DestinationCidrBlock { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of route entry ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// An id of next hop.
        /// </summary>
        [Input("nextHopId")]
        public Input<string>? NextHopId { get; set; }

        /// <summary>
        /// A type of next hop, Optional choice contains `Instance`, `NetworkInterface`, `NatGW`, `VpnGW`.
        /// </summary>
        [Input("nextHopType")]
        public Input<string>? NextHopType { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// A name of route entry.
        /// </summary>
        [Input("routeEntryName")]
        public Input<string>? RouteEntryName { get; set; }

        /// <summary>
        /// A type of route entry.
        /// </summary>
        [Input("routeEntryType")]
        public Input<string>? RouteEntryType { get; set; }

        /// <summary>
        /// An id of route table.
        /// </summary>
        [Input("routeTableId", required: true)]
        public Input<string> RouteTableId { get; set; } = null!;

        public RouteEntriesInvokeArgs()
        {
        }
        public static new RouteEntriesInvokeArgs Empty => new RouteEntriesInvokeArgs();
    }


    [OutputType]
    public sealed class RouteEntriesResult
    {
        /// <summary>
        /// The destination CIDR block of the route entry.
        /// </summary>
        public readonly string? DestinationCidrBlock;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The id of the next hop.
        /// </summary>
        public readonly string? NextHopId;
        /// <summary>
        /// The type of the next hop.
        /// </summary>
        public readonly string? NextHopType;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of route tables.
        /// </summary>
        public readonly ImmutableArray<Outputs.RouteEntriesRouteEntryResult> RouteEntries;
        /// <summary>
        /// The name of the route entry.
        /// </summary>
        public readonly string? RouteEntryName;
        public readonly string? RouteEntryType;
        /// <summary>
        /// The id of the route table to which the route entry belongs.
        /// </summary>
        public readonly string RouteTableId;
        /// <summary>
        /// The total count of route entry query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private RouteEntriesResult(
            string? destinationCidrBlock,

            string id,

            ImmutableArray<string> ids,

            string? nextHopId,

            string? nextHopType,

            string? outputFile,

            ImmutableArray<Outputs.RouteEntriesRouteEntryResult> routeEntries,

            string? routeEntryName,

            string? routeEntryType,

            string routeTableId,

            int totalCount)
        {
            DestinationCidrBlock = destinationCidrBlock;
            Id = id;
            Ids = ids;
            NextHopId = nextHopId;
            NextHopType = nextHopType;
            OutputFile = outputFile;
            RouteEntries = routeEntries;
            RouteEntryName = routeEntryName;
            RouteEntryType = routeEntryType;
            RouteTableId = routeTableId;
            TotalCount = totalCount;
        }
    }
}
