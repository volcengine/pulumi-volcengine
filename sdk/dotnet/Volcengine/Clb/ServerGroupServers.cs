// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.PulumiPackage.Volcengine.Clb
{
    public static class ServerGroupServers
    {
        /// <summary>
        /// Use this data source to query detailed information of server group servers
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.PulumiPackage.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());
        ///         var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new Volcengine.Vpc.VpcArgs
        ///         {
        ///             VpcName = "acc-test-vpc",
        ///             CidrBlock = "172.16.0.0/16",
        ///         });
        ///         var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new Volcengine.Vpc.SubnetArgs
        ///         {
        ///             SubnetName = "acc-test-subnet",
        ///             CidrBlock = "172.16.0.0/24",
        ///             ZoneId = fooZones.Apply(fooZones =&gt; fooZones.Zones?[0]?.Id),
        ///             VpcId = fooVpc.Id,
        ///         });
        ///         var fooClb = new Volcengine.Clb.Clb("fooClb", new Volcengine.Clb.ClbArgs
        ///         {
        ///             Type = "public",
        ///             SubnetId = fooSubnet.Id,
        ///             LoadBalancerSpec = "small_1",
        ///             Description = "acc0Demo",
        ///             LoadBalancerName = "acc-test-create",
        ///             EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs
        ///             {
        ///                 Isp = "BGP",
        ///                 EipBillingType = "PostPaidByBandwidth",
        ///                 Bandwidth = 1,
        ///             },
        ///         });
        ///         var fooServerGroup = new Volcengine.Clb.ServerGroup("fooServerGroup", new Volcengine.Clb.ServerGroupArgs
        ///         {
        ///             LoadBalancerId = fooClb.Id,
        ///             ServerGroupName = "acc-test-create",
        ///             Description = "hello demo11",
        ///         });
        ///         var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new Volcengine.Vpc.SecurityGroupArgs
        ///         {
        ///             VpcId = fooVpc.Id,
        ///             SecurityGroupName = "acc-test-security-group",
        ///         });
        ///         var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new Volcengine.Ecs.InstanceArgs
        ///         {
        ///             ImageId = "image-ycjwwciuzy5pkh54xx8f",
        ///             InstanceType = "ecs.c3i.large",
        ///             InstanceName = "acc-test-ecs-name",
        ///             Password = "93f0cb0614Aab12",
        ///             InstanceChargeType = "PostPaid",
        ///             SystemVolumeType = "ESSD_PL0",
        ///             SystemVolumeSize = 40,
        ///             SubnetId = fooSubnet.Id,
        ///             SecurityGroupIds = 
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///         });
        ///         var fooServerGroupServer = new Volcengine.Clb.ServerGroupServer("fooServerGroupServer", new Volcengine.Clb.ServerGroupServerArgs
        ///         {
        ///             ServerGroupId = fooServerGroup.Id,
        ///             InstanceId = fooInstance.Id,
        ///             Type = "ecs",
        ///             Weight = 100,
        ///             Port = 80,
        ///             Description = "This is a acc test server",
        ///         });
        ///         var fooServerGroupServers = Volcengine.Clb.ServerGroupServers.Invoke(new Volcengine.Clb.ServerGroupServersInvokeArgs
        ///         {
        ///             Ids = 
        ///             {
        ///                 Output.Tuple(fooServerGroupServer.Id.Apply(id =&gt; id.Split(":")), fooServerGroupServer.Id.Apply(id =&gt; id.Split(":")).Length).Apply(values =&gt;
        ///                 {
        ///                     var split = values.Item1;
        ///                     var length = values.Item2;
        ///                     return split[length - 1];
        ///                 }),
        ///             },
        ///             ServerGroupId = fooServerGroup.Id,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<ServerGroupServersResult> InvokeAsync(ServerGroupServersArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<ServerGroupServersResult>("volcengine:clb/serverGroupServers:ServerGroupServers", args ?? new ServerGroupServersArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of server group servers
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.PulumiPackage.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());
        ///         var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new Volcengine.Vpc.VpcArgs
        ///         {
        ///             VpcName = "acc-test-vpc",
        ///             CidrBlock = "172.16.0.0/16",
        ///         });
        ///         var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new Volcengine.Vpc.SubnetArgs
        ///         {
        ///             SubnetName = "acc-test-subnet",
        ///             CidrBlock = "172.16.0.0/24",
        ///             ZoneId = fooZones.Apply(fooZones =&gt; fooZones.Zones?[0]?.Id),
        ///             VpcId = fooVpc.Id,
        ///         });
        ///         var fooClb = new Volcengine.Clb.Clb("fooClb", new Volcengine.Clb.ClbArgs
        ///         {
        ///             Type = "public",
        ///             SubnetId = fooSubnet.Id,
        ///             LoadBalancerSpec = "small_1",
        ///             Description = "acc0Demo",
        ///             LoadBalancerName = "acc-test-create",
        ///             EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs
        ///             {
        ///                 Isp = "BGP",
        ///                 EipBillingType = "PostPaidByBandwidth",
        ///                 Bandwidth = 1,
        ///             },
        ///         });
        ///         var fooServerGroup = new Volcengine.Clb.ServerGroup("fooServerGroup", new Volcengine.Clb.ServerGroupArgs
        ///         {
        ///             LoadBalancerId = fooClb.Id,
        ///             ServerGroupName = "acc-test-create",
        ///             Description = "hello demo11",
        ///         });
        ///         var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new Volcengine.Vpc.SecurityGroupArgs
        ///         {
        ///             VpcId = fooVpc.Id,
        ///             SecurityGroupName = "acc-test-security-group",
        ///         });
        ///         var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new Volcengine.Ecs.InstanceArgs
        ///         {
        ///             ImageId = "image-ycjwwciuzy5pkh54xx8f",
        ///             InstanceType = "ecs.c3i.large",
        ///             InstanceName = "acc-test-ecs-name",
        ///             Password = "93f0cb0614Aab12",
        ///             InstanceChargeType = "PostPaid",
        ///             SystemVolumeType = "ESSD_PL0",
        ///             SystemVolumeSize = 40,
        ///             SubnetId = fooSubnet.Id,
        ///             SecurityGroupIds = 
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///         });
        ///         var fooServerGroupServer = new Volcengine.Clb.ServerGroupServer("fooServerGroupServer", new Volcengine.Clb.ServerGroupServerArgs
        ///         {
        ///             ServerGroupId = fooServerGroup.Id,
        ///             InstanceId = fooInstance.Id,
        ///             Type = "ecs",
        ///             Weight = 100,
        ///             Port = 80,
        ///             Description = "This is a acc test server",
        ///         });
        ///         var fooServerGroupServers = Volcengine.Clb.ServerGroupServers.Invoke(new Volcengine.Clb.ServerGroupServersInvokeArgs
        ///         {
        ///             Ids = 
        ///             {
        ///                 Output.Tuple(fooServerGroupServer.Id.Apply(id =&gt; id.Split(":")), fooServerGroupServer.Id.Apply(id =&gt; id.Split(":")).Length).Apply(values =&gt;
        ///                 {
        ///                     var split = values.Item1;
        ///                     var length = values.Item2;
        ///                     return split[length - 1];
        ///                 }),
        ///             },
        ///             ServerGroupId = fooServerGroup.Id,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<ServerGroupServersResult> Invoke(ServerGroupServersInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<ServerGroupServersResult>("volcengine:clb/serverGroupServers:ServerGroupServers", args ?? new ServerGroupServersInvokeArgs(), options.WithDefaults());
    }


    public sealed class ServerGroupServersArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// The list of ServerGroupServer IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of ServerGroupServer.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ID of the ServerGroup.
        /// </summary>
        [Input("serverGroupId", required: true)]
        public string ServerGroupId { get; set; } = null!;

        public ServerGroupServersArgs()
        {
        }
    }

    public sealed class ServerGroupServersInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// The list of ServerGroupServer IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of ServerGroupServer.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The ID of the ServerGroup.
        /// </summary>
        [Input("serverGroupId", required: true)]
        public Input<string> ServerGroupId { get; set; } = null!;

        public ServerGroupServersInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class ServerGroupServersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        public readonly string ServerGroupId;
        /// <summary>
        /// The server list of ServerGroup.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServerGroupServersServerResult> Servers;
        /// <summary>
        /// The total count of ServerGroupServer query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private ServerGroupServersResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string serverGroupId,

            ImmutableArray<Outputs.ServerGroupServersServerResult> servers,

            int totalCount)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ServerGroupId = serverGroupId;
            Servers = servers;
            TotalCount = totalCount;
        }
    }
}
