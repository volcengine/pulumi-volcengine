// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.PulumiPackage.Volcengine.Clb
{
    public static class ServerGroups
    {
        /// <summary>
        /// Use this data source to query detailed information of server groups
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.PulumiPackage.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());
        ///         var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new Volcengine.Vpc.VpcArgs
        ///         {
        ///             VpcName = "acc-test-vpc",
        ///             CidrBlock = "172.16.0.0/16",
        ///         });
        ///         var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new Volcengine.Vpc.SubnetArgs
        ///         {
        ///             SubnetName = "acc-test-subnet",
        ///             CidrBlock = "172.16.0.0/24",
        ///             ZoneId = fooZones.Apply(fooZones =&gt; fooZones.Zones?[0]?.Id),
        ///             VpcId = fooVpc.Id,
        ///         });
        ///         var fooClb = new Volcengine.Clb.Clb("fooClb", new Volcengine.Clb.ClbArgs
        ///         {
        ///             Type = "public",
        ///             SubnetId = fooSubnet.Id,
        ///             LoadBalancerSpec = "small_1",
        ///             Description = "acc0Demo",
        ///             LoadBalancerName = "acc-test-create",
        ///             EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs
        ///             {
        ///                 Isp = "BGP",
        ///                 EipBillingType = "PostPaidByBandwidth",
        ///                 Bandwidth = 1,
        ///             },
        ///         });
        ///         var fooServerGroup = new Volcengine.Clb.ServerGroup("fooServerGroup", new Volcengine.Clb.ServerGroupArgs
        ///         {
        ///             LoadBalancerId = fooClb.Id,
        ///             ServerGroupName = "acc-test-create",
        ///             Description = "hello demo11",
        ///         });
        ///         var fooServerGroups = Volcengine.Clb.ServerGroups.Invoke(new Volcengine.Clb.ServerGroupsInvokeArgs
        ///         {
        ///             Ids = 
        ///             {
        ///                 fooServerGroup.Id,
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<ServerGroupsResult> InvokeAsync(ServerGroupsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<ServerGroupsResult>("volcengine:clb/serverGroups:ServerGroups", args ?? new ServerGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of server groups
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.PulumiPackage.Volcengine;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());
        ///         var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new Volcengine.Vpc.VpcArgs
        ///         {
        ///             VpcName = "acc-test-vpc",
        ///             CidrBlock = "172.16.0.0/16",
        ///         });
        ///         var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new Volcengine.Vpc.SubnetArgs
        ///         {
        ///             SubnetName = "acc-test-subnet",
        ///             CidrBlock = "172.16.0.0/24",
        ///             ZoneId = fooZones.Apply(fooZones =&gt; fooZones.Zones?[0]?.Id),
        ///             VpcId = fooVpc.Id,
        ///         });
        ///         var fooClb = new Volcengine.Clb.Clb("fooClb", new Volcengine.Clb.ClbArgs
        ///         {
        ///             Type = "public",
        ///             SubnetId = fooSubnet.Id,
        ///             LoadBalancerSpec = "small_1",
        ///             Description = "acc0Demo",
        ///             LoadBalancerName = "acc-test-create",
        ///             EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs
        ///             {
        ///                 Isp = "BGP",
        ///                 EipBillingType = "PostPaidByBandwidth",
        ///                 Bandwidth = 1,
        ///             },
        ///         });
        ///         var fooServerGroup = new Volcengine.Clb.ServerGroup("fooServerGroup", new Volcengine.Clb.ServerGroupArgs
        ///         {
        ///             LoadBalancerId = fooClb.Id,
        ///             ServerGroupName = "acc-test-create",
        ///             Description = "hello demo11",
        ///         });
        ///         var fooServerGroups = Volcengine.Clb.ServerGroups.Invoke(new Volcengine.Clb.ServerGroupsInvokeArgs
        ///         {
        ///             Ids = 
        ///             {
        ///                 fooServerGroup.Id,
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<ServerGroupsResult> Invoke(ServerGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<ServerGroupsResult>("volcengine:clb/serverGroups:ServerGroups", args ?? new ServerGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class ServerGroupsArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of ServerGroup IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The id of the Clb.
        /// </summary>
        [Input("loadBalancerId")]
        public string? LoadBalancerId { get; set; }

        /// <summary>
        /// A Name Regex of ServerGroup.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The name of the ServerGroup.
        /// </summary>
        [Input("serverGroupName")]
        public string? ServerGroupName { get; set; }

        public ServerGroupsArgs()
        {
        }
    }

    public sealed class ServerGroupsInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of ServerGroup IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The id of the Clb.
        /// </summary>
        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        /// <summary>
        /// A Name Regex of ServerGroup.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The name of the ServerGroup.
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        public ServerGroupsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class ServerGroupsResult
    {
        /// <summary>
        /// The collection of ServerGroup query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ServerGroupsGroupResult> Groups;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? LoadBalancerId;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The name of the ServerGroup.
        /// </summary>
        public readonly string? ServerGroupName;
        /// <summary>
        /// The total count of ServerGroup query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private ServerGroupsResult(
            ImmutableArray<Outputs.ServerGroupsGroupResult> groups,

            string id,

            ImmutableArray<string> ids,

            string? loadBalancerId,

            string? nameRegex,

            string? outputFile,

            string? serverGroupName,

            int totalCount)
        {
            Groups = groups;
            Id = id;
            Ids = ids;
            LoadBalancerId = loadBalancerId;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ServerGroupName = serverGroupName;
            TotalCount = totalCount;
        }
    }
}
