// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.PulumiPackage.Volcengine.Clb
{
    /// <summary>
    /// Provides a resource to manage listener
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// using Volcengine = Volcengine.PulumiPackage.Volcengine;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var fooZones = Output.Create(Volcengine.Ecs.Zones.InvokeAsync());
    ///         var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new Volcengine.Vpc.VpcArgs
    ///         {
    ///             VpcName = "acc-test-vpc",
    ///             CidrBlock = "172.16.0.0/16",
    ///         });
    ///         var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new Volcengine.Vpc.SubnetArgs
    ///         {
    ///             SubnetName = "acc-test-subnet",
    ///             CidrBlock = "172.16.0.0/24",
    ///             ZoneId = fooZones.Apply(fooZones =&gt; fooZones.Zones?[0]?.Id),
    ///             VpcId = fooVpc.Id,
    ///         });
    ///         var fooClb = new Volcengine.Clb.Clb("fooClb", new Volcengine.Clb.ClbArgs
    ///         {
    ///             Type = "public",
    ///             SubnetId = fooSubnet.Id,
    ///             LoadBalancerSpec = "small_1",
    ///             Description = "acc0Demo",
    ///             LoadBalancerName = "acc-test-create",
    ///             EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs
    ///             {
    ///                 Isp = "BGP",
    ///                 EipBillingType = "PostPaidByBandwidth",
    ///                 Bandwidth = 1,
    ///             },
    ///         });
    ///         var fooServerGroup = new Volcengine.Clb.ServerGroup("fooServerGroup", new Volcengine.Clb.ServerGroupArgs
    ///         {
    ///             LoadBalancerId = fooClb.Id,
    ///             ServerGroupName = "acc-test-create",
    ///             Description = "hello demo11",
    ///         });
    ///         var fooListener = new Volcengine.Clb.Listener("fooListener", new Volcengine.Clb.ListenerArgs
    ///         {
    ///             LoadBalancerId = fooClb.Id,
    ///             ListenerName = "acc-test-listener",
    ///             Protocol = "HTTP",
    ///             Port = 90,
    ///             ServerGroupId = fooServerGroup.Id,
    ///             HealthCheck = new Volcengine.Clb.Inputs.ListenerHealthCheckArgs
    ///             {
    ///                 Enabled = "on",
    ///                 Interval = 10,
    ///                 Timeout = 3,
    ///                 HealthyThreshold = 5,
    ///                 UnHealthyThreshold = 2,
    ///                 Domain = "volcengine.com",
    ///                 HttpCode = "http_2xx",
    ///                 Method = "GET",
    ///                 Uri = "/",
    ///             },
    ///             Enabled = "on",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Listener can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:clb/listener:Listener default lsn-273yv0mhs5xj47fap8sehiiso
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:clb/listener:Listener")]
    public partial class Listener : Pulumi.CustomResource
    {
        /// <summary>
        /// The id list of the Acl.
        /// </summary>
        [Output("aclIds")]
        public Output<ImmutableArray<string>> AclIds { get; private set; } = null!;

        /// <summary>
        /// The enable status of Acl. Optional choice contains `on`, `off`.
        /// </summary>
        [Output("aclStatus")]
        public Output<string> AclStatus { get; private set; } = null!;

        /// <summary>
        /// The type of the Acl. Optional choice contains `white`, `black`.
        /// </summary>
        [Output("aclType")]
        public Output<string> AclType { get; private set; } = null!;

        /// <summary>
        /// The certificate id associated with the listener.
        /// </summary>
        [Output("certificateId")]
        public Output<string?> CertificateId { get; private set; } = null!;

        /// <summary>
        /// The description of the Listener.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The enable status of the Listener. Optional choice contains `on`, `off`.
        /// </summary>
        [Output("enabled")]
        public Output<string> Enabled { get; private set; } = null!;

        /// <summary>
        /// The connection timeout of the Listener.
        /// </summary>
        [Output("establishedTimeout")]
        public Output<int> EstablishedTimeout { get; private set; } = null!;

        /// <summary>
        /// The config of health check.
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.ListenerHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// The ID of the Listener.
        /// </summary>
        [Output("listenerId")]
        public Output<string> ListenerId { get; private set; } = null!;

        /// <summary>
        /// The name of the Listener.
        /// </summary>
        [Output("listenerName")]
        public Output<string> ListenerName { get; private set; } = null!;

        /// <summary>
        /// The region of the request.
        /// </summary>
        [Output("loadBalancerId")]
        public Output<string> LoadBalancerId { get; private set; } = null!;

        /// <summary>
        /// The port receiving request of the Listener, the value range in 1~65535.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The protocol of the Listener. Optional choice contains `TCP`, `UDP`, `HTTP`, `HTTPS`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The scheduling algorithm of the Listener. Optional choice contains `wrr`, `wlc`, `sh`.
        /// </summary>
        [Output("scheduler")]
        public Output<string> Scheduler { get; private set; } = null!;

        /// <summary>
        /// The server group id associated with the listener.
        /// </summary>
        [Output("serverGroupId")]
        public Output<string> ServerGroupId { get; private set; } = null!;


        /// <summary>
        /// Create a Listener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Listener(string name, ListenerArgs args, CustomResourceOptions? options = null)
            : base("volcengine:clb/listener:Listener", name, args ?? new ListenerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Listener(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:clb/listener:Listener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Listener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Listener Get(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new Listener(name, id, state, options);
        }
    }

    public sealed class ListenerArgs : Pulumi.ResourceArgs
    {
        [Input("aclIds")]
        private InputList<string>? _aclIds;

        /// <summary>
        /// The id list of the Acl.
        /// </summary>
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        /// <summary>
        /// The enable status of Acl. Optional choice contains `on`, `off`.
        /// </summary>
        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        /// <summary>
        /// The type of the Acl. Optional choice contains `white`, `black`.
        /// </summary>
        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// The certificate id associated with the listener.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The description of the Listener.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The enable status of the Listener. Optional choice contains `on`, `off`.
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// The connection timeout of the Listener.
        /// </summary>
        [Input("establishedTimeout")]
        public Input<int>? EstablishedTimeout { get; set; }

        /// <summary>
        /// The config of health check.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ListenerHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The name of the Listener.
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// The region of the request.
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public Input<string> LoadBalancerId { get; set; } = null!;

        /// <summary>
        /// The port receiving request of the Listener, the value range in 1~65535.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The protocol of the Listener. Optional choice contains `TCP`, `UDP`, `HTTP`, `HTTPS`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The scheduling algorithm of the Listener. Optional choice contains `wrr`, `wlc`, `sh`.
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The server group id associated with the listener.
        /// </summary>
        [Input("serverGroupId", required: true)]
        public Input<string> ServerGroupId { get; set; } = null!;

        public ListenerArgs()
        {
        }
    }

    public sealed class ListenerState : Pulumi.ResourceArgs
    {
        [Input("aclIds")]
        private InputList<string>? _aclIds;

        /// <summary>
        /// The id list of the Acl.
        /// </summary>
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        /// <summary>
        /// The enable status of Acl. Optional choice contains `on`, `off`.
        /// </summary>
        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        /// <summary>
        /// The type of the Acl. Optional choice contains `white`, `black`.
        /// </summary>
        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// The certificate id associated with the listener.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The description of the Listener.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The enable status of the Listener. Optional choice contains `on`, `off`.
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// The connection timeout of the Listener.
        /// </summary>
        [Input("establishedTimeout")]
        public Input<int>? EstablishedTimeout { get; set; }

        /// <summary>
        /// The config of health check.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ListenerHealthCheckGetArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The ID of the Listener.
        /// </summary>
        [Input("listenerId")]
        public Input<string>? ListenerId { get; set; }

        /// <summary>
        /// The name of the Listener.
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// The region of the request.
        /// </summary>
        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        /// <summary>
        /// The port receiving request of the Listener, the value range in 1~65535.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The protocol of the Listener. Optional choice contains `TCP`, `UDP`, `HTTP`, `HTTPS`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The scheduling algorithm of the Listener. Optional choice contains `wrr`, `wlc`, `sh`.
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The server group id associated with the listener.
        /// </summary>
        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        public ListenerState()
        {
        }
    }
}
