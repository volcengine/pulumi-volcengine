// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Autoscaling
{
    public static class ScalingGroups
    {
        /// <summary>
        /// Use this data source to query detailed information of scaling groups
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooScalingGroup = new List&lt;Volcengine.Autoscaling.ScalingGroup&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooScalingGroup.Add(new Volcengine.Autoscaling.ScalingGroup($"fooScalingGroup-{range.Value}", new()
        ///         {
        ///             ScalingGroupName = $"acc-test-scaling-group-{range.Value}",
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             MultiAzPolicy = "BALANCE",
        ///             DesireInstanceNumber = 0,
        ///             MinInstanceNumber = 0,
        ///             MaxInstanceNumber = 10,
        ///             InstanceTerminatePolicy = "OldestInstance",
        ///             DefaultCooldown = 30,
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Autoscaling.Inputs.ScalingGroupTagArgs
        ///                 {
        ///                     Key = "k2",
        ///                     Value = "v2",
        ///                 },
        ///                 new Volcengine.Autoscaling.Inputs.ScalingGroupTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var @default = Volcengine.Autoscaling.ScalingGroups.Invoke(new()
        ///     {
        ///         Ids = fooScalingGroup.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<ScalingGroupsResult> InvokeAsync(ScalingGroupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ScalingGroupsResult>("volcengine:autoscaling/scalingGroups:ScalingGroups", args ?? new ScalingGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of scaling groups
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooScalingGroup = new List&lt;Volcengine.Autoscaling.ScalingGroup&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooScalingGroup.Add(new Volcengine.Autoscaling.ScalingGroup($"fooScalingGroup-{range.Value}", new()
        ///         {
        ///             ScalingGroupName = $"acc-test-scaling-group-{range.Value}",
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             MultiAzPolicy = "BALANCE",
        ///             DesireInstanceNumber = 0,
        ///             MinInstanceNumber = 0,
        ///             MaxInstanceNumber = 10,
        ///             InstanceTerminatePolicy = "OldestInstance",
        ///             DefaultCooldown = 30,
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Autoscaling.Inputs.ScalingGroupTagArgs
        ///                 {
        ///                     Key = "k2",
        ///                     Value = "v2",
        ///                 },
        ///                 new Volcengine.Autoscaling.Inputs.ScalingGroupTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var @default = Volcengine.Autoscaling.ScalingGroups.Invoke(new()
        ///     {
        ///         Ids = fooScalingGroup.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<ScalingGroupsResult> Invoke(ScalingGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ScalingGroupsResult>("volcengine:autoscaling/scalingGroups:ScalingGroups", args ?? new ScalingGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class ScalingGroupsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of scaling group ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of scaling group.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of the scaling group.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        [Input("scalingGroupNames")]
        private List<string>? _scalingGroupNames;

        /// <summary>
        /// A list of scaling group names.
        /// </summary>
        public List<string> ScalingGroupNames
        {
            get => _scalingGroupNames ?? (_scalingGroupNames = new List<string>());
            set => _scalingGroupNames = value;
        }

        public ScalingGroupsArgs()
        {
        }
        public static new ScalingGroupsArgs Empty => new ScalingGroupsArgs();
    }

    public sealed class ScalingGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of scaling group ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of scaling group.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of the scaling group.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("scalingGroupNames")]
        private InputList<string>? _scalingGroupNames;

        /// <summary>
        /// A list of scaling group names.
        /// </summary>
        public InputList<string> ScalingGroupNames
        {
            get => _scalingGroupNames ?? (_scalingGroupNames = new InputList<string>());
            set => _scalingGroupNames = value;
        }

        public ScalingGroupsInvokeArgs()
        {
        }
        public static new ScalingGroupsInvokeArgs Empty => new ScalingGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class ScalingGroupsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The ProjectName of scaling group.
        /// </summary>
        public readonly string? ProjectName;
        public readonly ImmutableArray<string> ScalingGroupNames;
        /// <summary>
        /// The collection of scaling group query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScalingGroupsScalingGroupResult> ScalingGroups;
        /// <summary>
        /// The total count of scaling group query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private ScalingGroupsResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            ImmutableArray<string> scalingGroupNames,

            ImmutableArray<Outputs.ScalingGroupsScalingGroupResult> scalingGroups,

            int totalCount)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            ScalingGroupNames = scalingGroupNames;
            ScalingGroups = scalingGroups;
            TotalCount = totalCount;
        }
    }
}
