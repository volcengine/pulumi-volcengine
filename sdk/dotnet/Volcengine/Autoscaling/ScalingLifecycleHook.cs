// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Autoscaling
{
    /// <summary>
    /// Provides a resource to manage scaling lifecycle hook
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Autoscaling.ScalingLifecycleHook("foo", new()
    ///     {
    ///         LifecycleHookName = "tf-test",
    ///         LifecycleHookPolicy = "CONTINUE",
    ///         LifecycleHookTimeout = 30,
    ///         LifecycleHookType = "SCALE_IN",
    ///         ScalingGroupId = "scg-ybru8pazhgl8j1di4tyd",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ScalingLifecycleHook can be imported using the ScalingGroupId:LifecycleHookId, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:autoscaling/scalingLifecycleHook:ScalingLifecycleHook default scg-yblfbfhy7agh9zn72iaz:sgh-ybqholahe4gso0ee88sd
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:autoscaling/scalingLifecycleHook:ScalingLifecycleHook")]
    public partial class ScalingLifecycleHook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the lifecycle hook.
        /// </summary>
        [Output("lifecycleHookId")]
        public Output<string> LifecycleHookId { get; private set; } = null!;

        /// <summary>
        /// The name of the lifecycle hook.
        /// </summary>
        [Output("lifecycleHookName")]
        public Output<string> LifecycleHookName { get; private set; } = null!;

        /// <summary>
        /// The policy of the lifecycle hook. Valid values: CONTINUE, REJECT.
        /// </summary>
        [Output("lifecycleHookPolicy")]
        public Output<string> LifecycleHookPolicy { get; private set; } = null!;

        /// <summary>
        /// The timeout of the lifecycle hook.
        /// </summary>
        [Output("lifecycleHookTimeout")]
        public Output<int> LifecycleHookTimeout { get; private set; } = null!;

        /// <summary>
        /// The type of the lifecycle hook. Valid values: SCALE_IN, SCALE_OUT.
        /// </summary>
        [Output("lifecycleHookType")]
        public Output<string> LifecycleHookType { get; private set; } = null!;

        /// <summary>
        /// The id of the scaling group.
        /// </summary>
        [Output("scalingGroupId")]
        public Output<string> ScalingGroupId { get; private set; } = null!;


        /// <summary>
        /// Create a ScalingLifecycleHook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScalingLifecycleHook(string name, ScalingLifecycleHookArgs args, CustomResourceOptions? options = null)
            : base("volcengine:autoscaling/scalingLifecycleHook:ScalingLifecycleHook", name, args ?? new ScalingLifecycleHookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScalingLifecycleHook(string name, Input<string> id, ScalingLifecycleHookState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:autoscaling/scalingLifecycleHook:ScalingLifecycleHook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScalingLifecycleHook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScalingLifecycleHook Get(string name, Input<string> id, ScalingLifecycleHookState? state = null, CustomResourceOptions? options = null)
        {
            return new ScalingLifecycleHook(name, id, state, options);
        }
    }

    public sealed class ScalingLifecycleHookArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the lifecycle hook.
        /// </summary>
        [Input("lifecycleHookName", required: true)]
        public Input<string> LifecycleHookName { get; set; } = null!;

        /// <summary>
        /// The policy of the lifecycle hook. Valid values: CONTINUE, REJECT.
        /// </summary>
        [Input("lifecycleHookPolicy", required: true)]
        public Input<string> LifecycleHookPolicy { get; set; } = null!;

        /// <summary>
        /// The timeout of the lifecycle hook.
        /// </summary>
        [Input("lifecycleHookTimeout", required: true)]
        public Input<int> LifecycleHookTimeout { get; set; } = null!;

        /// <summary>
        /// The type of the lifecycle hook. Valid values: SCALE_IN, SCALE_OUT.
        /// </summary>
        [Input("lifecycleHookType", required: true)]
        public Input<string> LifecycleHookType { get; set; } = null!;

        /// <summary>
        /// The id of the scaling group.
        /// </summary>
        [Input("scalingGroupId", required: true)]
        public Input<string> ScalingGroupId { get; set; } = null!;

        public ScalingLifecycleHookArgs()
        {
        }
        public static new ScalingLifecycleHookArgs Empty => new ScalingLifecycleHookArgs();
    }

    public sealed class ScalingLifecycleHookState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the lifecycle hook.
        /// </summary>
        [Input("lifecycleHookId")]
        public Input<string>? LifecycleHookId { get; set; }

        /// <summary>
        /// The name of the lifecycle hook.
        /// </summary>
        [Input("lifecycleHookName")]
        public Input<string>? LifecycleHookName { get; set; }

        /// <summary>
        /// The policy of the lifecycle hook. Valid values: CONTINUE, REJECT.
        /// </summary>
        [Input("lifecycleHookPolicy")]
        public Input<string>? LifecycleHookPolicy { get; set; }

        /// <summary>
        /// The timeout of the lifecycle hook.
        /// </summary>
        [Input("lifecycleHookTimeout")]
        public Input<int>? LifecycleHookTimeout { get; set; }

        /// <summary>
        /// The type of the lifecycle hook. Valid values: SCALE_IN, SCALE_OUT.
        /// </summary>
        [Input("lifecycleHookType")]
        public Input<string>? LifecycleHookType { get; set; }

        /// <summary>
        /// The id of the scaling group.
        /// </summary>
        [Input("scalingGroupId")]
        public Input<string>? ScalingGroupId { get; set; }

        public ScalingLifecycleHookState()
        {
        }
        public static new ScalingLifecycleHookState Empty => new ScalingLifecycleHookState();
    }
}
