// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Eip
{
    public static class Addresses
    {
        /// <summary>
        /// Use this data source to query detailed information of eip addresses
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooAddress = new Volcengine.Eip.Address("fooAddress", new()
        ///     {
        ///         BillingType = "PostPaidByTraffic",
        ///     });
        /// 
        ///     var fooAddresses = Volcengine.Eip.Addresses.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooAddress.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<AddressesResult> InvokeAsync(AddressesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<AddressesResult>("volcengine:eip/addresses:Addresses", args ?? new AddressesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of eip addresses
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooAddress = new Volcengine.Eip.Address("fooAddress", new()
        ///     {
        ///         BillingType = "PostPaidByTraffic",
        ///     });
        /// 
        ///     var fooAddresses = Volcengine.Eip.Addresses.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooAddress.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<AddressesResult> Invoke(AddressesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<AddressesResult>("volcengine:eip/addresses:Addresses", args ?? new AddressesInvokeArgs(), options.WithDefaults());
    }


    public sealed class AddressesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// An id of associated instance.
        /// </summary>
        [Input("associatedInstanceId")]
        public string? AssociatedInstanceId { get; set; }

        /// <summary>
        /// A type of associated instance, the value can be `Nat`, `NetworkInterface`, `ClbInstance` or `EcsInstance`.
        /// </summary>
        [Input("associatedInstanceType")]
        public string? AssociatedInstanceType { get; set; }

        [Input("eipAddresses")]
        private List<string>? _eipAddresses;

        /// <summary>
        /// A list of EIP ip address that you want to query.
        /// </summary>
        public List<string> EipAddresses
        {
            get => _eipAddresses ?? (_eipAddresses = new List<string>());
            set => _eipAddresses = value;
        }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of EIP allocation ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// An ISP of EIP Address, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom`.
        /// </summary>
        [Input("isp")]
        public string? Isp { get; set; }

        /// <summary>
        /// A name of EIP.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ProjectName of EIP.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// A status of EIP, the value can be `Attaching` or `Detaching` or `Attached` or `Available`.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private List<Inputs.AddressesTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.AddressesTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.AddressesTagArgs>());
            set => _tags = value;
        }

        public AddressesArgs()
        {
        }
        public static new AddressesArgs Empty => new AddressesArgs();
    }

    public sealed class AddressesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// An id of associated instance.
        /// </summary>
        [Input("associatedInstanceId")]
        public Input<string>? AssociatedInstanceId { get; set; }

        /// <summary>
        /// A type of associated instance, the value can be `Nat`, `NetworkInterface`, `ClbInstance` or `EcsInstance`.
        /// </summary>
        [Input("associatedInstanceType")]
        public Input<string>? AssociatedInstanceType { get; set; }

        [Input("eipAddresses")]
        private InputList<string>? _eipAddresses;

        /// <summary>
        /// A list of EIP ip address that you want to query.
        /// </summary>
        public InputList<string> EipAddresses
        {
            get => _eipAddresses ?? (_eipAddresses = new InputList<string>());
            set => _eipAddresses = value;
        }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of EIP allocation ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// An ISP of EIP Address, the value can be `BGP` or `ChinaMobile` or `ChinaUnicom` or `ChinaTelecom`.
        /// </summary>
        [Input("isp")]
        public Input<string>? Isp { get; set; }

        /// <summary>
        /// A name of EIP.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The ProjectName of EIP.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// A status of EIP, the value can be `Attaching` or `Detaching` or `Attached` or `Available`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.AddressesTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.AddressesTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AddressesTagInputArgs>());
            set => _tags = value;
        }

        public AddressesInvokeArgs()
        {
        }
        public static new AddressesInvokeArgs Empty => new AddressesInvokeArgs();
    }


    [OutputType]
    public sealed class AddressesResult
    {
        /// <summary>
        /// The collection of EIP addresses.
        /// </summary>
        public readonly ImmutableArray<Outputs.AddressesAddressResult> Addresses;
        public readonly string? AssociatedInstanceId;
        public readonly string? AssociatedInstanceType;
        public readonly ImmutableArray<string> EipAddresses;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The ISP of EIP Address.
        /// </summary>
        public readonly string? Isp;
        /// <summary>
        /// The name of the EIP.
        /// </summary>
        public readonly string? Name;
        public readonly string? OutputFile;
        /// <summary>
        /// The ProjectName of the EIP.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// The status of the EIP.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.AddressesTagResult> Tags;
        /// <summary>
        /// The total count of EIP addresses query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private AddressesResult(
            ImmutableArray<Outputs.AddressesAddressResult> addresses,

            string? associatedInstanceId,

            string? associatedInstanceType,

            ImmutableArray<string> eipAddresses,

            string id,

            ImmutableArray<string> ids,

            string? isp,

            string? name,

            string? outputFile,

            string? projectName,

            string? status,

            ImmutableArray<Outputs.AddressesTagResult> tags,

            int totalCount)
        {
            Addresses = addresses;
            AssociatedInstanceId = associatedInstanceId;
            AssociatedInstanceType = associatedInstanceType;
            EipAddresses = eipAddresses;
            Id = id;
            Ids = ids;
            Isp = isp;
            Name = name;
            OutputFile = outputFile;
            ProjectName = projectName;
            Status = status;
            Tags = tags;
            TotalCount = totalCount;
        }
    }
}
