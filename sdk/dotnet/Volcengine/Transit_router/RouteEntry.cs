// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Transit_router
{
    /// <summary>
    /// Provides a resource to manage transit router route entry
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Transit_router.RouteEntry("foo", new()
    ///     {
    ///         Description = "tf test 23",
    ///         DestinationCidrBlock = "192.168.0.0/24",
    ///         TransitRouterRouteEntryName = "tf-entry-23",
    ///         TransitRouterRouteEntryNextHopType = "BlackHole",
    ///         TransitRouterRouteTableId = "tr-rtb-12b7qd3fmzf2817q7y2jkbd55",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// transit router route entry can be imported using the table and entry id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:transit_router/routeEntry:RouteEntry default tr-rtb-12b7qd3fmzf2817q7y2jkbd55:tr-rte-1i5i8khf9m58gae5kcx6***
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:transit_router/routeEntry:RouteEntry")]
    public partial class RouteEntry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the route entry.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Description of the transit router route entry.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The target network segment of the route entry.
        /// </summary>
        [Output("destinationCidrBlock")]
        public Output<string> DestinationCidrBlock { get; private set; } = null!;

        /// <summary>
        /// The status of the route entry.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The id of the route entry.
        /// </summary>
        [Output("transitRouterRouteEntryId")]
        public Output<string> TransitRouterRouteEntryId { get; private set; } = null!;

        /// <summary>
        /// The name of the route entry.
        /// </summary>
        [Output("transitRouterRouteEntryName")]
        public Output<string> TransitRouterRouteEntryName { get; private set; } = null!;

        /// <summary>
        /// The next hot id of the routing entry. When the parameter TransitRouterRouteEntryNextHopType is Attachment, this parameter must be filled.
        /// </summary>
        [Output("transitRouterRouteEntryNextHopId")]
        public Output<string?> TransitRouterRouteEntryNextHopId { get; private set; } = null!;

        /// <summary>
        /// The next hop type of the routing entry. The value can be Attachment or BlackHole.
        /// </summary>
        [Output("transitRouterRouteEntryNextHopType")]
        public Output<string> TransitRouterRouteEntryNextHopType { get; private set; } = null!;

        /// <summary>
        /// The type of the route entry.
        /// </summary>
        [Output("transitRouterRouteEntryType")]
        public Output<string> TransitRouterRouteEntryType { get; private set; } = null!;

        /// <summary>
        /// The id of the route table.
        /// </summary>
        [Output("transitRouterRouteTableId")]
        public Output<string> TransitRouterRouteTableId { get; private set; } = null!;

        /// <summary>
        /// The update time of the route entry.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a RouteEntry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RouteEntry(string name, RouteEntryArgs args, CustomResourceOptions? options = null)
            : base("volcengine:transit_router/routeEntry:RouteEntry", name, args ?? new RouteEntryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RouteEntry(string name, Input<string> id, RouteEntryState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:transit_router/routeEntry:RouteEntry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RouteEntry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RouteEntry Get(string name, Input<string> id, RouteEntryState? state = null, CustomResourceOptions? options = null)
        {
            return new RouteEntry(name, id, state, options);
        }
    }

    public sealed class RouteEntryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the transit router route entry.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The target network segment of the route entry.
        /// </summary>
        [Input("destinationCidrBlock", required: true)]
        public Input<string> DestinationCidrBlock { get; set; } = null!;

        /// <summary>
        /// The name of the route entry.
        /// </summary>
        [Input("transitRouterRouteEntryName")]
        public Input<string>? TransitRouterRouteEntryName { get; set; }

        /// <summary>
        /// The next hot id of the routing entry. When the parameter TransitRouterRouteEntryNextHopType is Attachment, this parameter must be filled.
        /// </summary>
        [Input("transitRouterRouteEntryNextHopId")]
        public Input<string>? TransitRouterRouteEntryNextHopId { get; set; }

        /// <summary>
        /// The next hop type of the routing entry. The value can be Attachment or BlackHole.
        /// </summary>
        [Input("transitRouterRouteEntryNextHopType", required: true)]
        public Input<string> TransitRouterRouteEntryNextHopType { get; set; } = null!;

        /// <summary>
        /// The id of the route table.
        /// </summary>
        [Input("transitRouterRouteTableId", required: true)]
        public Input<string> TransitRouterRouteTableId { get; set; } = null!;

        public RouteEntryArgs()
        {
        }
        public static new RouteEntryArgs Empty => new RouteEntryArgs();
    }

    public sealed class RouteEntryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the route entry.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// Description of the transit router route entry.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The target network segment of the route entry.
        /// </summary>
        [Input("destinationCidrBlock")]
        public Input<string>? DestinationCidrBlock { get; set; }

        /// <summary>
        /// The status of the route entry.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The id of the route entry.
        /// </summary>
        [Input("transitRouterRouteEntryId")]
        public Input<string>? TransitRouterRouteEntryId { get; set; }

        /// <summary>
        /// The name of the route entry.
        /// </summary>
        [Input("transitRouterRouteEntryName")]
        public Input<string>? TransitRouterRouteEntryName { get; set; }

        /// <summary>
        /// The next hot id of the routing entry. When the parameter TransitRouterRouteEntryNextHopType is Attachment, this parameter must be filled.
        /// </summary>
        [Input("transitRouterRouteEntryNextHopId")]
        public Input<string>? TransitRouterRouteEntryNextHopId { get; set; }

        /// <summary>
        /// The next hop type of the routing entry. The value can be Attachment or BlackHole.
        /// </summary>
        [Input("transitRouterRouteEntryNextHopType")]
        public Input<string>? TransitRouterRouteEntryNextHopType { get; set; }

        /// <summary>
        /// The type of the route entry.
        /// </summary>
        [Input("transitRouterRouteEntryType")]
        public Input<string>? TransitRouterRouteEntryType { get; set; }

        /// <summary>
        /// The id of the route table.
        /// </summary>
        [Input("transitRouterRouteTableId")]
        public Input<string>? TransitRouterRouteTableId { get; set; }

        /// <summary>
        /// The update time of the route entry.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public RouteEntryState()
        {
        }
        public static new RouteEntryState Empty => new RouteEntryState();
    }
}
