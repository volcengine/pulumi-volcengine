// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Rds_v2
{
    /// <summary>
    /// (Deprecated! Recommend use volcengine_rds_mysql_*** replace) Provides a resource to manage rds instance v2
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooRdsInstanceV2 = new Volcengine.Rds_v2.RdsInstanceV2("fooRdsInstanceV2", new()
    ///     {
    ///         DbEngineVersion = "MySQL_5_7",
    ///         NodeInfos = new[]
    ///         {
    ///             new Volcengine.Rds_v2.Inputs.RdsInstanceV2NodeInfoArgs
    ///             {
    ///                 NodeType = "Primary",
    ///                 NodeSpec = "rds.mysql.2c4g",
    ///                 ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///             },
    ///             new Volcengine.Rds_v2.Inputs.RdsInstanceV2NodeInfoArgs
    ///             {
    ///                 NodeType = "Secondary",
    ///                 NodeSpec = "rds.mysql.2c4g",
    ///                 ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///             },
    ///         },
    ///         StorageType = "LocalSSD",
    ///         StorageSpace = 100,
    ///         VpcId = fooVpc.Id,
    ///         SubnetId = fooSubnet.Id,
    ///         InstanceName = "tf-test-v2",
    ///         LowerCaseTableNames = "1",
    ///         ChargeInfo = new Volcengine.Rds_v2.Inputs.RdsInstanceV2ChargeInfoArgs
    ///         {
    ///             ChargeType = "PostPaid",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RDS Instance can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:rds_v2/rdsInstanceV2:RdsInstanceV2 default mysql-42b38c769c4b
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:rds_v2/rdsInstanceV2:RdsInstanceV2")]
    public partial class RdsInstanceV2 : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Payment methods.
        /// </summary>
        [Output("chargeInfo")]
        public Output<Outputs.RdsInstanceV2ChargeInfo> ChargeInfo { get; private set; } = null!;

        /// <summary>
        /// The connection info ot the RDS instance.
        /// </summary>
        [Output("connectionInfos")]
        public Output<ImmutableArray<Outputs.RdsInstanceV2ConnectionInfo>> ConnectionInfos { get; private set; } = null!;

        /// <summary>
        /// Instance type. Value:
        /// MySQL_5_7
        /// MySQL_8_0.
        /// </summary>
        [Output("dbEngineVersion")]
        public Output<string> DbEngineVersion { get; private set; } = null!;

        /// <summary>
        /// Parameter template ID. It only takes effect when the database type is MySQL/PostgreSQL/SQL_Server. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("dbParamGroupId")]
        public Output<string?> DbParamGroupId { get; private set; } = null!;

        /// <summary>
        /// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("dbTimeZone")]
        public Output<string?> DbTimeZone { get; private set; } = null!;

        /// <summary>
        /// Instance name. Cannot start with a number or a dash
        /// Can only contain Chinese characters, letters, numbers, underscores and dashes
        /// The length is limited between 1 ~ 128.
        /// </summary>
        [Output("instanceName")]
        public Output<string?> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The field instance_type is no longer support. The type of Instance.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// Whether the table name is case sensitive, the default value is 1.
        /// Ranges:
        /// 0: Table names are stored as fixed and table names are case-sensitive.
        /// 1: Table names will be stored in lowercase and table names are not case sensitive.
        /// </summary>
        [Output("lowerCaseTableNames")]
        public Output<string?> LowerCaseTableNames { get; private set; } = null!;

        /// <summary>
        /// Instance specification configuration. This parameter is required for RDS for MySQL, RDS for PostgreSQL and MySQL Sharding. There is one and only one Primary node, one and only one Secondary node, and 0-10 Read-Only nodes.
        /// </summary>
        [Output("nodeInfos")]
        public Output<ImmutableArray<Outputs.RdsInstanceV2NodeInfo>> NodeInfos { get; private set; } = null!;

        /// <summary>
        /// Subordinate to the project.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// Instance storage space.
        /// When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, value range: [20, 3000], unit: GB, increments every 100GB.
        /// When the database type is veDB_MySQL/veDB_PostgreSQL, this parameter does not need to be passed.
        /// </summary>
        [Output("storageSpace")]
        public Output<int?> StorageSpace { get; private set; } = null!;

        /// <summary>
        /// Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:
        /// LocalSSD - local SSD disk
        /// When the database type is veDB_MySQL/veDB_PostgreSQL, the value is:
        /// DistributedStorage - Distributed Storage.
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        /// <summary>
        /// Subnet ID.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Private network (VPC) ID. You can call the DescribeVpcs query and use this parameter to specify the VPC where the instance is to be created.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a RdsInstanceV2 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RdsInstanceV2(string name, RdsInstanceV2Args args, CustomResourceOptions? options = null)
            : base("volcengine:rds_v2/rdsInstanceV2:RdsInstanceV2", name, args ?? new RdsInstanceV2Args(), MakeResourceOptions(options, ""))
        {
        }

        private RdsInstanceV2(string name, Input<string> id, RdsInstanceV2State? state = null, CustomResourceOptions? options = null)
            : base("volcengine:rds_v2/rdsInstanceV2:RdsInstanceV2", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RdsInstanceV2 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RdsInstanceV2 Get(string name, Input<string> id, RdsInstanceV2State? state = null, CustomResourceOptions? options = null)
        {
            return new RdsInstanceV2(name, id, state, options);
        }
    }

    public sealed class RdsInstanceV2Args : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Payment methods.
        /// </summary>
        [Input("chargeInfo", required: true)]
        public Input<Inputs.RdsInstanceV2ChargeInfoArgs> ChargeInfo { get; set; } = null!;

        /// <summary>
        /// Instance type. Value:
        /// MySQL_5_7
        /// MySQL_8_0.
        /// </summary>
        [Input("dbEngineVersion", required: true)]
        public Input<string> DbEngineVersion { get; set; } = null!;

        /// <summary>
        /// Parameter template ID. It only takes effect when the database type is MySQL/PostgreSQL/SQL_Server. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dbParamGroupId")]
        public Input<string>? DbParamGroupId { get; set; }

        /// <summary>
        /// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dbTimeZone")]
        public Input<string>? DbTimeZone { get; set; }

        /// <summary>
        /// Instance name. Cannot start with a number or a dash
        /// Can only contain Chinese characters, letters, numbers, underscores and dashes
        /// The length is limited between 1 ~ 128.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The field instance_type is no longer support. The type of Instance.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Whether the table name is case sensitive, the default value is 1.
        /// Ranges:
        /// 0: Table names are stored as fixed and table names are case-sensitive.
        /// 1: Table names will be stored in lowercase and table names are not case sensitive.
        /// </summary>
        [Input("lowerCaseTableNames")]
        public Input<string>? LowerCaseTableNames { get; set; }

        [Input("nodeInfos", required: true)]
        private InputList<Inputs.RdsInstanceV2NodeInfoArgs>? _nodeInfos;

        /// <summary>
        /// Instance specification configuration. This parameter is required for RDS for MySQL, RDS for PostgreSQL and MySQL Sharding. There is one and only one Primary node, one and only one Secondary node, and 0-10 Read-Only nodes.
        /// </summary>
        public InputList<Inputs.RdsInstanceV2NodeInfoArgs> NodeInfos
        {
            get => _nodeInfos ?? (_nodeInfos = new InputList<Inputs.RdsInstanceV2NodeInfoArgs>());
            set => _nodeInfos = value;
        }

        /// <summary>
        /// Subordinate to the project.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Instance storage space.
        /// When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, value range: [20, 3000], unit: GB, increments every 100GB.
        /// When the database type is veDB_MySQL/veDB_PostgreSQL, this parameter does not need to be passed.
        /// </summary>
        [Input("storageSpace")]
        public Input<int>? StorageSpace { get; set; }

        /// <summary>
        /// Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:
        /// LocalSSD - local SSD disk
        /// When the database type is veDB_MySQL/veDB_PostgreSQL, the value is:
        /// DistributedStorage - Distributed Storage.
        /// </summary>
        [Input("storageType", required: true)]
        public Input<string> StorageType { get; set; } = null!;

        /// <summary>
        /// Subnet ID.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        /// <summary>
        /// Private network (VPC) ID. You can call the DescribeVpcs query and use this parameter to specify the VPC where the instance is to be created.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public RdsInstanceV2Args()
        {
        }
        public static new RdsInstanceV2Args Empty => new RdsInstanceV2Args();
    }

    public sealed class RdsInstanceV2State : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Payment methods.
        /// </summary>
        [Input("chargeInfo")]
        public Input<Inputs.RdsInstanceV2ChargeInfoGetArgs>? ChargeInfo { get; set; }

        [Input("connectionInfos")]
        private InputList<Inputs.RdsInstanceV2ConnectionInfoGetArgs>? _connectionInfos;

        /// <summary>
        /// The connection info ot the RDS instance.
        /// </summary>
        public InputList<Inputs.RdsInstanceV2ConnectionInfoGetArgs> ConnectionInfos
        {
            get => _connectionInfos ?? (_connectionInfos = new InputList<Inputs.RdsInstanceV2ConnectionInfoGetArgs>());
            set => _connectionInfos = value;
        }

        /// <summary>
        /// Instance type. Value:
        /// MySQL_5_7
        /// MySQL_8_0.
        /// </summary>
        [Input("dbEngineVersion")]
        public Input<string>? DbEngineVersion { get; set; }

        /// <summary>
        /// Parameter template ID. It only takes effect when the database type is MySQL/PostgreSQL/SQL_Server. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dbParamGroupId")]
        public Input<string>? DbParamGroupId { get; set; }

        /// <summary>
        /// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dbTimeZone")]
        public Input<string>? DbTimeZone { get; set; }

        /// <summary>
        /// Instance name. Cannot start with a number or a dash
        /// Can only contain Chinese characters, letters, numbers, underscores and dashes
        /// The length is limited between 1 ~ 128.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The field instance_type is no longer support. The type of Instance.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Whether the table name is case sensitive, the default value is 1.
        /// Ranges:
        /// 0: Table names are stored as fixed and table names are case-sensitive.
        /// 1: Table names will be stored in lowercase and table names are not case sensitive.
        /// </summary>
        [Input("lowerCaseTableNames")]
        public Input<string>? LowerCaseTableNames { get; set; }

        [Input("nodeInfos")]
        private InputList<Inputs.RdsInstanceV2NodeInfoGetArgs>? _nodeInfos;

        /// <summary>
        /// Instance specification configuration. This parameter is required for RDS for MySQL, RDS for PostgreSQL and MySQL Sharding. There is one and only one Primary node, one and only one Secondary node, and 0-10 Read-Only nodes.
        /// </summary>
        public InputList<Inputs.RdsInstanceV2NodeInfoGetArgs> NodeInfos
        {
            get => _nodeInfos ?? (_nodeInfos = new InputList<Inputs.RdsInstanceV2NodeInfoGetArgs>());
            set => _nodeInfos = value;
        }

        /// <summary>
        /// Subordinate to the project.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Instance storage space.
        /// When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, value range: [20, 3000], unit: GB, increments every 100GB.
        /// When the database type is veDB_MySQL/veDB_PostgreSQL, this parameter does not need to be passed.
        /// </summary>
        [Input("storageSpace")]
        public Input<int>? StorageSpace { get; set; }

        /// <summary>
        /// Instance storage type. When the database type is MySQL/PostgreSQL/SQL_Server/MySQL Sharding, the value is:
        /// LocalSSD - local SSD disk
        /// When the database type is veDB_MySQL/veDB_PostgreSQL, the value is:
        /// DistributedStorage - Distributed Storage.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// Subnet ID.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// Private network (VPC) ID. You can call the DescribeVpcs query and use this parameter to specify the VPC where the instance is to be created.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public RdsInstanceV2State()
        {
        }
        public static new RdsInstanceV2State Empty => new RdsInstanceV2State();
    }
}
