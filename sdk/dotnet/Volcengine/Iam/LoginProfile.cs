// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Iam
{
    /// <summary>
    /// Provides a resource to manage iam login profile
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Iam.LoginProfile("foo", new()
    ///     {
    ///         LoginAllowed = true,
    ///         Password = "******",
    ///         PasswordResetRequired = false,
    ///         UserName = "tf-test",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Login profile can be imported using the UserName, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:iam/loginProfile:LoginProfile default user_name
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:iam/loginProfile:LoginProfile")]
    public partial class LoginProfile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The flag of login allowed.
        /// </summary>
        [Output("loginAllowed")]
        public Output<bool?> LoginAllowed { get; private set; } = null!;

        /// <summary>
        /// The password.
        /// </summary>
        [Output("password")]
        public Output<string> Password { get; private set; } = null!;

        /// <summary>
        /// Is required reset password when next time login in.
        /// </summary>
        [Output("passwordResetRequired")]
        public Output<bool?> PasswordResetRequired { get; private set; } = null!;

        /// <summary>
        /// The user name.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;


        /// <summary>
        /// Create a LoginProfile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoginProfile(string name, LoginProfileArgs args, CustomResourceOptions? options = null)
            : base("volcengine:iam/loginProfile:LoginProfile", name, args ?? new LoginProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoginProfile(string name, Input<string> id, LoginProfileState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:iam/loginProfile:LoginProfile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoginProfile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoginProfile Get(string name, Input<string> id, LoginProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new LoginProfile(name, id, state, options);
        }
    }

    public sealed class LoginProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag of login allowed.
        /// </summary>
        [Input("loginAllowed")]
        public Input<bool>? LoginAllowed { get; set; }

        [Input("password", required: true)]
        private Input<string>? _password;

        /// <summary>
        /// The password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Is required reset password when next time login in.
        /// </summary>
        [Input("passwordResetRequired")]
        public Input<bool>? PasswordResetRequired { get; set; }

        /// <summary>
        /// The user name.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        public LoginProfileArgs()
        {
        }
        public static new LoginProfileArgs Empty => new LoginProfileArgs();
    }

    public sealed class LoginProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The flag of login allowed.
        /// </summary>
        [Input("loginAllowed")]
        public Input<bool>? LoginAllowed { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Is required reset password when next time login in.
        /// </summary>
        [Input("passwordResetRequired")]
        public Input<bool>? PasswordResetRequired { get; set; }

        /// <summary>
        /// The user name.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        public LoginProfileState()
        {
        }
        public static new LoginProfileState Empty => new LoginProfileState();
    }
}
