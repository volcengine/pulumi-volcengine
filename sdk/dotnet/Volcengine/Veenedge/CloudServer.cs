// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Veenedge
{
    /// <summary>
    /// Provides a resource to manage veenedge cloud server
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Veenedge.CloudServer("foo", new()
    ///     {
    ///         BillingConfig = new Volcengine.Veenedge.Inputs.CloudServerBillingConfigArgs
    ///         {
    ///             BandwidthBillingMethod = "MonthlyP95",
    ///             ComputingBillingMethod = "MonthlyPeak",
    ///         },
    ///         CloudserverName = "tf-test",
    ///         DefaultAreaName = "C******na",
    ///         DefaultIsp = "CMCC",
    ///         ImageId = "image*****viqm",
    ///         NetworkConfig = new Volcengine.Veenedge.Inputs.CloudServerNetworkConfigArgs
    ///         {
    ///             BandwidthPeak = "5",
    ///         },
    ///         ScheduleStrategy = new Volcengine.Veenedge.Inputs.CloudServerScheduleStrategyArgs
    ///         {
    ///             NetworkStrategy = "region",
    ///             PriceStrategy = "high_priority",
    ///             ScheduleStrategy = "dispersion",
    ///         },
    ///         SecretData = "sshkey-47*****wgc",
    ///         SecretType = "KeyPair",
    ///         ServerAreaLevel = "region",
    ///         SpecName = "veEN****rge",
    ///         StorageConfig = new Volcengine.Veenedge.Inputs.CloudServerStorageConfigArgs
    ///         {
    ///             DataDiskLists = new[]
    ///             {
    ///                 new Volcengine.Veenedge.Inputs.CloudServerStorageConfigDataDiskListArgs
    ///                 {
    ///                     Capacity = "20",
    ///                     StorageType = "CloudBlockSSD",
    ///                 },
    ///             },
    ///             SystemDisk = new Volcengine.Veenedge.Inputs.CloudServerStorageConfigSystemDiskArgs
    ///             {
    ///                 Capacity = "40",
    ///                 StorageType = "CloudBlockSSD",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CloudServer can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:veenedge/cloudServer:CloudServer default cloudserver-n769ewmjjqyqh5dv
    /// ```
    /// 
    ///  After the veenedge cloud server is created, a default edge instance will be created, we recommend managing this default instance as follows resource "volcengine_veenedge_instance" "foo1" {
    /// 
    ///  instance_id = volcengine_veenedge_cloud_server.foo.default_instance_id }
    /// </summary>
    [VolcengineResourceType("volcengine:veenedge/cloudServer:CloudServer")]
    public partial class CloudServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The config of the billing.
        /// </summary>
        [Output("billingConfig")]
        public Output<Outputs.CloudServerBillingConfig?> BillingConfig { get; private set; } = null!;

        /// <summary>
        /// The name of cloud server.
        /// </summary>
        [Output("cloudserverName")]
        public Output<string> CloudserverName { get; private set; } = null!;

        /// <summary>
        /// The custom data.
        /// </summary>
        [Output("customData")]
        public Output<Outputs.CloudServerCustomData> CustomData { get; private set; } = null!;

        /// <summary>
        /// The name of default area.
        /// </summary>
        [Output("defaultAreaName")]
        public Output<string> DefaultAreaName { get; private set; } = null!;

        /// <summary>
        /// The name of default cluster.
        /// </summary>
        [Output("defaultClusterName")]
        public Output<string?> DefaultClusterName { get; private set; } = null!;

        /// <summary>
        /// The default instance id generate by cloud server.
        /// </summary>
        [Output("defaultInstanceId")]
        public Output<string> DefaultInstanceId { get; private set; } = null!;

        /// <summary>
        /// The default isp info.
        /// </summary>
        [Output("defaultIsp")]
        public Output<string> DefaultIsp { get; private set; } = null!;

        /// <summary>
        /// The image id of cloud server.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The config of the network.
        /// </summary>
        [Output("networkConfig")]
        public Output<Outputs.CloudServerNetworkConfig> NetworkConfig { get; private set; } = null!;

        /// <summary>
        /// The schedule strategy.
        /// </summary>
        [Output("scheduleStrategy")]
        public Output<Outputs.CloudServerScheduleStrategy> ScheduleStrategy { get; private set; } = null!;

        /// <summary>
        /// The data of secret. The value can be Password or KeyPair ID.
        /// </summary>
        [Output("secretData")]
        public Output<string?> SecretData { get; private set; } = null!;

        /// <summary>
        /// The type of secret. The value can be `KeyPair` or `Password`.
        /// </summary>
        [Output("secretType")]
        public Output<string> SecretType { get; private set; } = null!;

        /// <summary>
        /// The server area level. The value can be `region` or `city`.
        /// </summary>
        [Output("serverAreaLevel")]
        public Output<string> ServerAreaLevel { get; private set; } = null!;

        /// <summary>
        /// The spec name of cloud server.
        /// </summary>
        [Output("specName")]
        public Output<string> SpecName { get; private set; } = null!;

        /// <summary>
        /// The config of the storage.
        /// </summary>
        [Output("storageConfig")]
        public Output<Outputs.CloudServerStorageConfig> StorageConfig { get; private set; } = null!;


        /// <summary>
        /// Create a CloudServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudServer(string name, CloudServerArgs args, CustomResourceOptions? options = null)
            : base("volcengine:veenedge/cloudServer:CloudServer", name, args ?? new CloudServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudServer(string name, Input<string> id, CloudServerState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:veenedge/cloudServer:CloudServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudServer Get(string name, Input<string> id, CloudServerState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudServer(name, id, state, options);
        }
    }

    public sealed class CloudServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The config of the billing.
        /// </summary>
        [Input("billingConfig")]
        public Input<Inputs.CloudServerBillingConfigArgs>? BillingConfig { get; set; }

        /// <summary>
        /// The name of cloud server.
        /// </summary>
        [Input("cloudserverName", required: true)]
        public Input<string> CloudserverName { get; set; } = null!;

        /// <summary>
        /// The custom data.
        /// </summary>
        [Input("customData")]
        public Input<Inputs.CloudServerCustomDataArgs>? CustomData { get; set; }

        /// <summary>
        /// The name of default area.
        /// </summary>
        [Input("defaultAreaName", required: true)]
        public Input<string> DefaultAreaName { get; set; } = null!;

        /// <summary>
        /// The name of default cluster.
        /// </summary>
        [Input("defaultClusterName")]
        public Input<string>? DefaultClusterName { get; set; }

        /// <summary>
        /// The default isp info.
        /// </summary>
        [Input("defaultIsp", required: true)]
        public Input<string> DefaultIsp { get; set; } = null!;

        /// <summary>
        /// The image id of cloud server.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// The config of the network.
        /// </summary>
        [Input("networkConfig", required: true)]
        public Input<Inputs.CloudServerNetworkConfigArgs> NetworkConfig { get; set; } = null!;

        /// <summary>
        /// The schedule strategy.
        /// </summary>
        [Input("scheduleStrategy", required: true)]
        public Input<Inputs.CloudServerScheduleStrategyArgs> ScheduleStrategy { get; set; } = null!;

        /// <summary>
        /// The data of secret. The value can be Password or KeyPair ID.
        /// </summary>
        [Input("secretData")]
        public Input<string>? SecretData { get; set; }

        /// <summary>
        /// The type of secret. The value can be `KeyPair` or `Password`.
        /// </summary>
        [Input("secretType", required: true)]
        public Input<string> SecretType { get; set; } = null!;

        /// <summary>
        /// The server area level. The value can be `region` or `city`.
        /// </summary>
        [Input("serverAreaLevel", required: true)]
        public Input<string> ServerAreaLevel { get; set; } = null!;

        /// <summary>
        /// The spec name of cloud server.
        /// </summary>
        [Input("specName", required: true)]
        public Input<string> SpecName { get; set; } = null!;

        /// <summary>
        /// The config of the storage.
        /// </summary>
        [Input("storageConfig", required: true)]
        public Input<Inputs.CloudServerStorageConfigArgs> StorageConfig { get; set; } = null!;

        public CloudServerArgs()
        {
        }
        public static new CloudServerArgs Empty => new CloudServerArgs();
    }

    public sealed class CloudServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The config of the billing.
        /// </summary>
        [Input("billingConfig")]
        public Input<Inputs.CloudServerBillingConfigGetArgs>? BillingConfig { get; set; }

        /// <summary>
        /// The name of cloud server.
        /// </summary>
        [Input("cloudserverName")]
        public Input<string>? CloudserverName { get; set; }

        /// <summary>
        /// The custom data.
        /// </summary>
        [Input("customData")]
        public Input<Inputs.CloudServerCustomDataGetArgs>? CustomData { get; set; }

        /// <summary>
        /// The name of default area.
        /// </summary>
        [Input("defaultAreaName")]
        public Input<string>? DefaultAreaName { get; set; }

        /// <summary>
        /// The name of default cluster.
        /// </summary>
        [Input("defaultClusterName")]
        public Input<string>? DefaultClusterName { get; set; }

        /// <summary>
        /// The default instance id generate by cloud server.
        /// </summary>
        [Input("defaultInstanceId")]
        public Input<string>? DefaultInstanceId { get; set; }

        /// <summary>
        /// The default isp info.
        /// </summary>
        [Input("defaultIsp")]
        public Input<string>? DefaultIsp { get; set; }

        /// <summary>
        /// The image id of cloud server.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The config of the network.
        /// </summary>
        [Input("networkConfig")]
        public Input<Inputs.CloudServerNetworkConfigGetArgs>? NetworkConfig { get; set; }

        /// <summary>
        /// The schedule strategy.
        /// </summary>
        [Input("scheduleStrategy")]
        public Input<Inputs.CloudServerScheduleStrategyGetArgs>? ScheduleStrategy { get; set; }

        /// <summary>
        /// The data of secret. The value can be Password or KeyPair ID.
        /// </summary>
        [Input("secretData")]
        public Input<string>? SecretData { get; set; }

        /// <summary>
        /// The type of secret. The value can be `KeyPair` or `Password`.
        /// </summary>
        [Input("secretType")]
        public Input<string>? SecretType { get; set; }

        /// <summary>
        /// The server area level. The value can be `region` or `city`.
        /// </summary>
        [Input("serverAreaLevel")]
        public Input<string>? ServerAreaLevel { get; set; }

        /// <summary>
        /// The spec name of cloud server.
        /// </summary>
        [Input("specName")]
        public Input<string>? SpecName { get; set; }

        /// <summary>
        /// The config of the storage.
        /// </summary>
        [Input("storageConfig")]
        public Input<Inputs.CloudServerStorageConfigGetArgs>? StorageConfig { get; set; }

        public CloudServerState()
        {
        }
        public static new CloudServerState Empty => new CloudServerState();
    }
}
