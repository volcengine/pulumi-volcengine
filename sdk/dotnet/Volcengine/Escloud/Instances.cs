// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Escloud
{
    public static class Instances
    {
        /// <summary>
        /// Use this data source to query detailed information of escloud instances
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Escloud.Instances.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "d3gftqjvnah74eie",
        ///         },
        ///         Statuses = new[]
        ///         {
        ///             "Running",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<InstancesResult> InvokeAsync(InstancesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<InstancesResult>("volcengine:escloud/instances:Instances", args ?? new InstancesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of escloud instances
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Escloud.Instances.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "d3gftqjvnah74eie",
        ///         },
        ///         Statuses = new[]
        ///         {
        ///             "Running",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<InstancesResult> Invoke(InstancesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<InstancesResult>("volcengine:escloud/instances:Instances", args ?? new InstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class InstancesArgs : global::Pulumi.InvokeArgs
    {
        [Input("chargeTypes")]
        private List<string>? _chargeTypes;

        /// <summary>
        /// The charge types of instance.
        /// </summary>
        public List<string> ChargeTypes
        {
            get => _chargeTypes ?? (_chargeTypes = new List<string>());
            set => _chargeTypes = value;
        }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of instance IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("names")]
        private List<string>? _names;

        /// <summary>
        /// The names of instance.
        /// </summary>
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// The list status of instance.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        [Input("versions")]
        private List<string>? _versions;

        /// <summary>
        /// The versions of instance.
        /// </summary>
        public List<string> Versions
        {
            get => _versions ?? (_versions = new List<string>());
            set => _versions = value;
        }

        [Input("zoneIds")]
        private List<string>? _zoneIds;

        /// <summary>
        /// The available zone IDs of instance.
        /// </summary>
        public List<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new List<string>());
            set => _zoneIds = value;
        }

        public InstancesArgs()
        {
        }
        public static new InstancesArgs Empty => new InstancesArgs();
    }

    public sealed class InstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("chargeTypes")]
        private InputList<string>? _chargeTypes;

        /// <summary>
        /// The charge types of instance.
        /// </summary>
        public InputList<string> ChargeTypes
        {
            get => _chargeTypes ?? (_chargeTypes = new InputList<string>());
            set => _chargeTypes = value;
        }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of instance IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        [Input("names")]
        private InputList<string>? _names;

        /// <summary>
        /// The names of instance.
        /// </summary>
        public InputList<string> Names
        {
            get => _names ?? (_names = new InputList<string>());
            set => _names = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// The list status of instance.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        [Input("versions")]
        private InputList<string>? _versions;

        /// <summary>
        /// The versions of instance.
        /// </summary>
        public InputList<string> Versions
        {
            get => _versions ?? (_versions = new InputList<string>());
            set => _versions = value;
        }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The available zone IDs of instance.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public InstancesInvokeArgs()
        {
        }
        public static new InstancesInvokeArgs Empty => new InstancesInvokeArgs();
    }


    [OutputType]
    public sealed class InstancesResult
    {
        public readonly ImmutableArray<string> ChargeTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The collection of instance query.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstancesInstanceResult> Instances;
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// The total count of instance query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> Versions;
        public readonly ImmutableArray<string> ZoneIds;

        [OutputConstructor]
        private InstancesResult(
            ImmutableArray<string> chargeTypes,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.InstancesInstanceResult> instances,

            ImmutableArray<string> names,

            string? outputFile,

            ImmutableArray<string> statuses,

            int totalCount,

            ImmutableArray<string> versions,

            ImmutableArray<string> zoneIds)
        {
            ChargeTypes = chargeTypes;
            Id = id;
            Ids = ids;
            Instances = instances;
            Names = names;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
            Versions = versions;
            ZoneIds = zoneIds;
        }
    }
}
