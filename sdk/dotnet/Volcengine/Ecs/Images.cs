// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Ecs
{
    public static class Images
    {
        /// <summary>
        /// Use this data source to query detailed information of images
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Ecs.Images.Invoke(new()
        ///     {
        ///         InstanceTypeId = "ecs.g1.large",
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<ImagesResult> InvokeAsync(ImagesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ImagesResult>("volcengine:ecs/images:Images", args ?? new ImagesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of images
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Ecs.Images.Invoke(new()
        ///     {
        ///         InstanceTypeId = "ecs.g1.large",
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<ImagesResult> Invoke(ImagesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ImagesResult>("volcengine:ecs/images:Images", args ?? new ImagesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ImagesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Image IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The specification of  Instance.
        /// </summary>
        [Input("instanceTypeId")]
        public string? InstanceTypeId { get; set; }

        /// <summary>
        /// Whether the Image support cloud-init.
        /// </summary>
        [Input("isSupportCloudInit")]
        public bool? IsSupportCloudInit { get; set; }

        /// <summary>
        /// A Name Regex of Image.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// The operating system type of Image.
        /// </summary>
        [Input("osType")]
        public string? OsType { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// A list of Image status, the value can be `available` or `creating` or `error`.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        /// <summary>
        /// The visibility of Image.
        /// </summary>
        [Input("visibility")]
        public string? Visibility { get; set; }

        public ImagesArgs()
        {
        }
        public static new ImagesArgs Empty => new ImagesArgs();
    }

    public sealed class ImagesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Image IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The specification of  Instance.
        /// </summary>
        [Input("instanceTypeId")]
        public Input<string>? InstanceTypeId { get; set; }

        /// <summary>
        /// Whether the Image support cloud-init.
        /// </summary>
        [Input("isSupportCloudInit")]
        public Input<bool>? IsSupportCloudInit { get; set; }

        /// <summary>
        /// A Name Regex of Image.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// The operating system type of Image.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// A list of Image status, the value can be `available` or `creating` or `error`.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        /// <summary>
        /// The visibility of Image.
        /// </summary>
        [Input("visibility")]
        public Input<string>? Visibility { get; set; }

        public ImagesInvokeArgs()
        {
        }
        public static new ImagesInvokeArgs Empty => new ImagesInvokeArgs();
    }


    [OutputType]
    public sealed class ImagesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The collection of Image query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ImagesImageResult> Images;
        public readonly string? InstanceTypeId;
        /// <summary>
        /// Whether the Image support cloud-init.
        /// </summary>
        public readonly bool? IsSupportCloudInit;
        public readonly string? NameRegex;
        /// <summary>
        /// The operating system type of Image.
        /// </summary>
        public readonly string? OsType;
        public readonly string? OutputFile;
        /// <summary>
        /// The status of Image.
        /// </summary>
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// The total count of Image query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The visibility of Image.
        /// </summary>
        public readonly string? Visibility;

        [OutputConstructor]
        private ImagesResult(
            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.ImagesImageResult> images,

            string? instanceTypeId,

            bool? isSupportCloudInit,

            string? nameRegex,

            string? osType,

            string? outputFile,

            ImmutableArray<string> statuses,

            int totalCount,

            string? visibility)
        {
            Id = id;
            Ids = ids;
            Images = images;
            InstanceTypeId = instanceTypeId;
            IsSupportCloudInit = isSupportCloudInit;
            NameRegex = nameRegex;
            OsType = osType;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
            Visibility = visibility;
        }
    }
}
