// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Ecs
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
    ///     {
    ///         SecurityGroupName = "acc-test-security-group",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooImages = Volcengine.Ecs.Images.Invoke(new()
    ///     {
    ///         OsType = "Linux",
    ///         Visibility = "public",
    ///         InstanceTypeId = "ecs.g1.large",
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
    ///     {
    ///         InstanceName = "acc-test-ecs",
    ///         Description = "acc-test",
    ///         HostName = "tf-acc-test",
    ///         ImageId = fooImages.Apply(imagesResult =&gt; imagesResult.Images[0]?.ImageId),
    ///         InstanceType = "ecs.g1.large",
    ///         Password = "93f0cb0614Aab12",
    ///         InstanceChargeType = "PostPaid",
    ///         SystemVolumeType = "ESSD_PL0",
    ///         SystemVolumeSize = 40,
    ///         DataVolumes = new[]
    ///         {
    ///             new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs
    ///             {
    ///                 VolumeType = "ESSD_PL0",
    ///                 Size = 50,
    ///                 DeleteWithInstance = true,
    ///             },
    ///         },
    ///         SubnetId = fooSubnet.Id,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             fooSecurityGroup.Id,
    ///         },
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Ecs.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ECS Instance can be imported using the id, e.g. If Import,The data_volumes is sort by volume name
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:ecs/instance:Instance default i-mizl7m1kqccg5smt1bdpijuj
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:ecs/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("autoRenew")]
        public Output<bool?> AutoRenew { get; private set; } = null!;

        /// <summary>
        /// The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("autoRenewPeriod")]
        public Output<int?> AutoRenewPeriod { get; private set; } = null!;

        /// <summary>
        /// The option of cpu.
        /// </summary>
        [Output("cpuOptions")]
        public Output<Outputs.InstanceCpuOptions> CpuOptions { get; private set; } = null!;

        /// <summary>
        /// The number of ECS instance CPU cores.
        /// </summary>
        [Output("cpus")]
        public Output<int> Cpus { get; private set; } = null!;

        /// <summary>
        /// The create time of ECS instance.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The data volumes collection of  ECS instance.
        /// </summary>
        [Output("dataVolumes")]
        public Output<ImmutableArray<Outputs.InstanceDataVolume>> DataVolumes { get; private set; } = null!;

        /// <summary>
        /// The ID of Ecs Deployment Set.
        /// </summary>
        [Output("deploymentSetId")]
        public Output<string> DeploymentSetId { get; private set; } = null!;

        /// <summary>
        /// The description of ECS instance.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The GPU device info of Instance.
        /// </summary>
        [Output("gpuDevices")]
        public Output<ImmutableArray<Outputs.InstanceGpuDevice>> GpuDevices { get; private set; } = null!;

        /// <summary>
        /// The host name of ECS instance.
        /// </summary>
        [Output("hostName")]
        public Output<string> HostName { get; private set; } = null!;

        /// <summary>
        /// The hpc cluster ID of ECS instance.
        /// </summary>
        [Output("hpcClusterId")]
        public Output<string?> HpcClusterId { get; private set; } = null!;

        /// <summary>
        /// The Image ID of ECS instance.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        /// </summary>
        [Output("includeDataVolumes")]
        public Output<bool?> IncludeDataVolumes { get; private set; } = null!;

        /// <summary>
        /// The charge type of ECS instance, the value can be `PrePaid` or `PostPaid`.
        /// </summary>
        [Output("instanceChargeType")]
        public Output<string> InstanceChargeType { get; private set; } = null!;

        /// <summary>
        /// The ID of ECS instance.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The name of ECS instance.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The instance type of ECS instance.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// The number of IPv6 addresses to be automatically assigned from within the CIDR block of the subnet that hosts the ENI. Valid values: 1 to 10.
        /// </summary>
        [Output("ipv6AddressCount")]
        public Output<int> Ipv6AddressCount { get; private set; } = null!;

        /// <summary>
        /// One or more IPv6 addresses selected from within the CIDR block of the subnet that hosts the ENI. Support up to 10.
        /// You cannot specify both the ipv6_addresses and ipv6_address_count parameters.
        /// </summary>
        [Output("ipv6Addresses")]
        public Output<ImmutableArray<string>> Ipv6Addresses { get; private set; } = null!;

        /// <summary>
        /// The Flag of GPU instance.If the instance is GPU,The flag is true.
        /// </summary>
        [Output("isGpu")]
        public Output<bool> IsGpu { get; private set; } = null!;

        /// <summary>
        /// Whether to keep the mirror settings. Only custom images and shared images support this field.
        /// When the value of this field is true, the Password and KeyPairName cannot be specified.
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("keepImageCredential")]
        public Output<bool?> KeepImageCredential { get; private set; } = null!;

        /// <summary>
        /// The ssh key ID of ECS instance.
        /// </summary>
        [Output("keyPairId")]
        public Output<string> KeyPairId { get; private set; } = null!;

        /// <summary>
        /// The ssh key name of ECS instance.
        /// </summary>
        [Output("keyPairName")]
        public Output<string> KeyPairName { get; private set; } = null!;

        /// <summary>
        /// The memory size of ECS instance.
        /// </summary>
        [Output("memorySize")]
        public Output<int> MemorySize { get; private set; } = null!;

        /// <summary>
        /// The ID of primary networkInterface.
        /// </summary>
        [Output("networkInterfaceId")]
        public Output<string> NetworkInterfaceId { get; private set; } = null!;

        /// <summary>
        /// The os name of ECS instance.
        /// </summary>
        [Output("osName")]
        public Output<string> OsName { get; private set; } = null!;

        /// <summary>
        /// The os type of ECS instance.
        /// </summary>
        [Output("osType")]
        public Output<string> OsType { get; private set; } = null!;

        /// <summary>
        /// The password of ECS instance.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        /// </summary>
        [Output("period")]
        public Output<int?> Period { get; private set; } = null!;

        /// <summary>
        /// The private ip address of primary networkInterface.
        /// </summary>
        [Output("primaryIpAddress")]
        public Output<string> PrimaryIpAddress { get; private set; } = null!;

        /// <summary>
        /// The ProjectName of the ecs instance.
        /// </summary>
        [Output("projectName")]
        public Output<string?> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The secondary networkInterface detail collection of ECS instance.
        /// </summary>
        [Output("secondaryNetworkInterfaces")]
        public Output<ImmutableArray<Outputs.InstanceSecondaryNetworkInterface>> SecondaryNetworkInterfaces { get; private set; } = null!;

        /// <summary>
        /// The security enhancement strategy of ECS instance. The value can be Active or InActive. Default is Active.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("securityEnhancementStrategy")]
        public Output<string?> SecurityEnhancementStrategy { get; private set; } = null!;

        /// <summary>
        /// The security group ID set of primary networkInterface.
        /// </summary>
        [Output("securityGroupIds")]
        public Output<ImmutableArray<string>> SecurityGroupIds { get; private set; } = null!;

        /// <summary>
        /// The spot strategy will autoremove instance in some conditions.Please make sure you can maintain instance lifecycle before auto remove.The spot strategy of ECS instance, the value can be `NoSpot` or `SpotAsPriceGo`.
        /// </summary>
        [Output("spotStrategy")]
        public Output<string> SpotStrategy { get; private set; } = null!;

        /// <summary>
        /// The status of ECS instance.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The stop mode of ECS instance.
        /// </summary>
        [Output("stoppedMode")]
        public Output<string> StoppedMode { get; private set; } = null!;

        /// <summary>
        /// The subnet ID of primary networkInterface.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// The ID of system volume.
        /// </summary>
        [Output("systemVolumeId")]
        public Output<string> SystemVolumeId { get; private set; } = null!;

        /// <summary>
        /// The size of system volume. The value range of the system volume size is ESSD_PL0: 20~2048, ESSD_FlexPL: 20~2048, PTSSD: 10~500.
        /// </summary>
        [Output("systemVolumeSize")]
        public Output<int> SystemVolumeSize { get; private set; } = null!;

        /// <summary>
        /// The type of system volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
        /// </summary>
        [Output("systemVolumeType")]
        public Output<string> SystemVolumeType { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.InstanceTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The update time of ECS instance.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The user data of ECS instance, this field must be encrypted with base64.
        /// </summary>
        [Output("userData")]
        public Output<string> UserData { get; private set; } = null!;

        /// <summary>
        /// The VPC ID of ECS instance.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The available zone ID of ECS instance.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:ecs/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:ecs/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("autoRenewPeriod")]
        public Input<int>? AutoRenewPeriod { get; set; }

        /// <summary>
        /// The option of cpu.
        /// </summary>
        [Input("cpuOptions")]
        public Input<Inputs.InstanceCpuOptionsArgs>? CpuOptions { get; set; }

        [Input("dataVolumes")]
        private InputList<Inputs.InstanceDataVolumeArgs>? _dataVolumes;

        /// <summary>
        /// The data volumes collection of  ECS instance.
        /// </summary>
        public InputList<Inputs.InstanceDataVolumeArgs> DataVolumes
        {
            get => _dataVolumes ?? (_dataVolumes = new InputList<Inputs.InstanceDataVolumeArgs>());
            set => _dataVolumes = value;
        }

        /// <summary>
        /// The ID of Ecs Deployment Set.
        /// </summary>
        [Input("deploymentSetId")]
        public Input<string>? DeploymentSetId { get; set; }

        /// <summary>
        /// The description of ECS instance.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The host name of ECS instance.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// The hpc cluster ID of ECS instance.
        /// </summary>
        [Input("hpcClusterId")]
        public Input<string>? HpcClusterId { get; set; }

        /// <summary>
        /// The Image ID of ECS instance.
        /// </summary>
        [Input("imageId", required: true)]
        public Input<string> ImageId { get; set; } = null!;

        /// <summary>
        /// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        /// </summary>
        [Input("includeDataVolumes")]
        public Input<bool>? IncludeDataVolumes { get; set; }

        /// <summary>
        /// The charge type of ECS instance, the value can be `PrePaid` or `PostPaid`.
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        /// <summary>
        /// The name of ECS instance.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The instance type of ECS instance.
        /// </summary>
        [Input("instanceType", required: true)]
        public Input<string> InstanceType { get; set; } = null!;

        /// <summary>
        /// The number of IPv6 addresses to be automatically assigned from within the CIDR block of the subnet that hosts the ENI. Valid values: 1 to 10.
        /// </summary>
        [Input("ipv6AddressCount")]
        public Input<int>? Ipv6AddressCount { get; set; }

        [Input("ipv6Addresses")]
        private InputList<string>? _ipv6Addresses;

        /// <summary>
        /// One or more IPv6 addresses selected from within the CIDR block of the subnet that hosts the ENI. Support up to 10.
        /// You cannot specify both the ipv6_addresses and ipv6_address_count parameters.
        /// </summary>
        public InputList<string> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<string>());
            set => _ipv6Addresses = value;
        }

        /// <summary>
        /// Whether to keep the mirror settings. Only custom images and shared images support this field.
        /// When the value of this field is true, the Password and KeyPairName cannot be specified.
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("keepImageCredential")]
        public Input<bool>? KeepImageCredential { get; set; }

        /// <summary>
        /// The ssh key name of ECS instance.
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of ECS instance.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// The ProjectName of the ecs instance.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("secondaryNetworkInterfaces")]
        private InputList<Inputs.InstanceSecondaryNetworkInterfaceArgs>? _secondaryNetworkInterfaces;

        /// <summary>
        /// The secondary networkInterface detail collection of ECS instance.
        /// </summary>
        public InputList<Inputs.InstanceSecondaryNetworkInterfaceArgs> SecondaryNetworkInterfaces
        {
            get => _secondaryNetworkInterfaces ?? (_secondaryNetworkInterfaces = new InputList<Inputs.InstanceSecondaryNetworkInterfaceArgs>());
            set => _secondaryNetworkInterfaces = value;
        }

        /// <summary>
        /// The security enhancement strategy of ECS instance. The value can be Active or InActive. Default is Active.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("securityEnhancementStrategy")]
        public Input<string>? SecurityEnhancementStrategy { get; set; }

        [Input("securityGroupIds", required: true)]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The security group ID set of primary networkInterface.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The spot strategy will autoremove instance in some conditions.Please make sure you can maintain instance lifecycle before auto remove.The spot strategy of ECS instance, the value can be `NoSpot` or `SpotAsPriceGo`.
        /// </summary>
        [Input("spotStrategy")]
        public Input<string>? SpotStrategy { get; set; }

        /// <summary>
        /// The subnet ID of primary networkInterface.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        /// <summary>
        /// The size of system volume. The value range of the system volume size is ESSD_PL0: 20~2048, ESSD_FlexPL: 20~2048, PTSSD: 10~500.
        /// </summary>
        [Input("systemVolumeSize", required: true)]
        public Input<int> SystemVolumeSize { get; set; } = null!;

        /// <summary>
        /// The type of system volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
        /// </summary>
        [Input("systemVolumeType", required: true)]
        public Input<string> SystemVolumeType { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.InstanceTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The user data of ECS instance, this field must be encrypted with base64.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The available zone ID of ECS instance.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The auto renew flag of ECS instance.Only effective when instance_charge_type is PrePaid. Default is true.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("autoRenew")]
        public Input<bool>? AutoRenew { get; set; }

        /// <summary>
        /// The auto renew period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 1.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("autoRenewPeriod")]
        public Input<int>? AutoRenewPeriod { get; set; }

        /// <summary>
        /// The option of cpu.
        /// </summary>
        [Input("cpuOptions")]
        public Input<Inputs.InstanceCpuOptionsGetArgs>? CpuOptions { get; set; }

        /// <summary>
        /// The number of ECS instance CPU cores.
        /// </summary>
        [Input("cpus")]
        public Input<int>? Cpus { get; set; }

        /// <summary>
        /// The create time of ECS instance.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("dataVolumes")]
        private InputList<Inputs.InstanceDataVolumeGetArgs>? _dataVolumes;

        /// <summary>
        /// The data volumes collection of  ECS instance.
        /// </summary>
        public InputList<Inputs.InstanceDataVolumeGetArgs> DataVolumes
        {
            get => _dataVolumes ?? (_dataVolumes = new InputList<Inputs.InstanceDataVolumeGetArgs>());
            set => _dataVolumes = value;
        }

        /// <summary>
        /// The ID of Ecs Deployment Set.
        /// </summary>
        [Input("deploymentSetId")]
        public Input<string>? DeploymentSetId { get; set; }

        /// <summary>
        /// The description of ECS instance.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("gpuDevices")]
        private InputList<Inputs.InstanceGpuDeviceGetArgs>? _gpuDevices;

        /// <summary>
        /// The GPU device info of Instance.
        /// </summary>
        public InputList<Inputs.InstanceGpuDeviceGetArgs> GpuDevices
        {
            get => _gpuDevices ?? (_gpuDevices = new InputList<Inputs.InstanceGpuDeviceGetArgs>());
            set => _gpuDevices = value;
        }

        /// <summary>
        /// The host name of ECS instance.
        /// </summary>
        [Input("hostName")]
        public Input<string>? HostName { get; set; }

        /// <summary>
        /// The hpc cluster ID of ECS instance.
        /// </summary>
        [Input("hpcClusterId")]
        public Input<string>? HpcClusterId { get; set; }

        /// <summary>
        /// The Image ID of ECS instance.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The include data volumes flag of ECS instance.Only effective when change instance charge type.include_data_volumes.
        /// </summary>
        [Input("includeDataVolumes")]
        public Input<bool>? IncludeDataVolumes { get; set; }

        /// <summary>
        /// The charge type of ECS instance, the value can be `PrePaid` or `PostPaid`.
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        /// <summary>
        /// The ID of ECS instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of ECS instance.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The instance type of ECS instance.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// The number of IPv6 addresses to be automatically assigned from within the CIDR block of the subnet that hosts the ENI. Valid values: 1 to 10.
        /// </summary>
        [Input("ipv6AddressCount")]
        public Input<int>? Ipv6AddressCount { get; set; }

        [Input("ipv6Addresses")]
        private InputList<string>? _ipv6Addresses;

        /// <summary>
        /// One or more IPv6 addresses selected from within the CIDR block of the subnet that hosts the ENI. Support up to 10.
        /// You cannot specify both the ipv6_addresses and ipv6_address_count parameters.
        /// </summary>
        public InputList<string> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<string>());
            set => _ipv6Addresses = value;
        }

        /// <summary>
        /// The Flag of GPU instance.If the instance is GPU,The flag is true.
        /// </summary>
        [Input("isGpu")]
        public Input<bool>? IsGpu { get; set; }

        /// <summary>
        /// Whether to keep the mirror settings. Only custom images and shared images support this field.
        /// When the value of this field is true, the Password and KeyPairName cannot be specified.
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("keepImageCredential")]
        public Input<bool>? KeepImageCredential { get; set; }

        /// <summary>
        /// The ssh key ID of ECS instance.
        /// </summary>
        [Input("keyPairId")]
        public Input<string>? KeyPairId { get; set; }

        /// <summary>
        /// The ssh key name of ECS instance.
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        /// <summary>
        /// The memory size of ECS instance.
        /// </summary>
        [Input("memorySize")]
        public Input<int>? MemorySize { get; set; }

        /// <summary>
        /// The ID of primary networkInterface.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// The os name of ECS instance.
        /// </summary>
        [Input("osName")]
        public Input<string>? OsName { get; set; }

        /// <summary>
        /// The os type of ECS instance.
        /// </summary>
        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of ECS instance.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The period of ECS instance.Only effective when instance_charge_type is PrePaid. Default is 12. Unit is Month.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// The private ip address of primary networkInterface.
        /// </summary>
        [Input("primaryIpAddress")]
        public Input<string>? PrimaryIpAddress { get; set; }

        /// <summary>
        /// The ProjectName of the ecs instance.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("secondaryNetworkInterfaces")]
        private InputList<Inputs.InstanceSecondaryNetworkInterfaceGetArgs>? _secondaryNetworkInterfaces;

        /// <summary>
        /// The secondary networkInterface detail collection of ECS instance.
        /// </summary>
        public InputList<Inputs.InstanceSecondaryNetworkInterfaceGetArgs> SecondaryNetworkInterfaces
        {
            get => _secondaryNetworkInterfaces ?? (_secondaryNetworkInterfaces = new InputList<Inputs.InstanceSecondaryNetworkInterfaceGetArgs>());
            set => _secondaryNetworkInterfaces = value;
        }

        /// <summary>
        /// The security enhancement strategy of ECS instance. The value can be Active or InActive. Default is Active.When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("securityEnhancementStrategy")]
        public Input<string>? SecurityEnhancementStrategy { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;

        /// <summary>
        /// The security group ID set of primary networkInterface.
        /// </summary>
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        /// <summary>
        /// The spot strategy will autoremove instance in some conditions.Please make sure you can maintain instance lifecycle before auto remove.The spot strategy of ECS instance, the value can be `NoSpot` or `SpotAsPriceGo`.
        /// </summary>
        [Input("spotStrategy")]
        public Input<string>? SpotStrategy { get; set; }

        /// <summary>
        /// The status of ECS instance.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The stop mode of ECS instance.
        /// </summary>
        [Input("stoppedMode")]
        public Input<string>? StoppedMode { get; set; }

        /// <summary>
        /// The subnet ID of primary networkInterface.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// The ID of system volume.
        /// </summary>
        [Input("systemVolumeId")]
        public Input<string>? SystemVolumeId { get; set; }

        /// <summary>
        /// The size of system volume. The value range of the system volume size is ESSD_PL0: 20~2048, ESSD_FlexPL: 20~2048, PTSSD: 10~500.
        /// </summary>
        [Input("systemVolumeSize")]
        public Input<int>? SystemVolumeSize { get; set; }

        /// <summary>
        /// The type of system volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
        /// </summary>
        [Input("systemVolumeType")]
        public Input<string>? SystemVolumeType { get; set; }

        [Input("tags")]
        private InputList<Inputs.InstanceTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The update time of ECS instance.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The user data of ECS instance, this field must be encrypted with base64.
        /// </summary>
        [Input("userData")]
        public Input<string>? UserData { get; set; }

        /// <summary>
        /// The VPC ID of ECS instance.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The available zone ID of ECS instance.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
