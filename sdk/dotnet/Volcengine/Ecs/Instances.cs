// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Ecs
{
    public static class Instances
    {
        /// <summary>
        /// Use this data source to query detailed information of ecs instances
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.Images.Invoke(new()
        ///     {
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///         InstanceTypeId = "ecs.g1.large",
        ///     });
        /// 
        ///     var fooInstance = new List&lt;Volcengine.Ecs.Instance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooInstance.Add(new Volcengine.Ecs.Instance($"fooInstance-{range.Value}", new()
        ///         {
        ///             InstanceName = $"acc-test-ecs-{range.Value}",
        ///             Description = "acc-test",
        ///             HostName = "tf-acc-test",
        ///             ImageId = fooImages.Apply(imagesResult =&gt; imagesResult.Images[0]?.ImageId),
        ///             InstanceType = "ecs.g1.large",
        ///             Password = "93f0cb0614Aab12",
        ///             InstanceChargeType = "PostPaid",
        ///             SystemVolumeType = "ESSD_PL0",
        ///             SystemVolumeSize = 40,
        ///             DataVolumes = new[]
        ///             {
        ///                 new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs
        ///                 {
        ///                     VolumeType = "ESSD_PL0",
        ///                     Size = 50,
        ///                     DeleteWithInstance = true,
        ///                 },
        ///             },
        ///             SubnetId = fooSubnet.Id,
        ///             SecurityGroupIds = new[]
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Ecs.Inputs.InstanceTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooInstances = Volcengine.Ecs.Instances.Invoke(new()
        ///     {
        ///         Ids = fooInstance.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<InstancesResult> InvokeAsync(InstancesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<InstancesResult>("volcengine:ecs/instances:Instances", args ?? new InstancesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ecs instances
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.Images.Invoke(new()
        ///     {
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///         InstanceTypeId = "ecs.g1.large",
        ///     });
        /// 
        ///     var fooInstance = new List&lt;Volcengine.Ecs.Instance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooInstance.Add(new Volcengine.Ecs.Instance($"fooInstance-{range.Value}", new()
        ///         {
        ///             InstanceName = $"acc-test-ecs-{range.Value}",
        ///             Description = "acc-test",
        ///             HostName = "tf-acc-test",
        ///             ImageId = fooImages.Apply(imagesResult =&gt; imagesResult.Images[0]?.ImageId),
        ///             InstanceType = "ecs.g1.large",
        ///             Password = "93f0cb0614Aab12",
        ///             InstanceChargeType = "PostPaid",
        ///             SystemVolumeType = "ESSD_PL0",
        ///             SystemVolumeSize = 40,
        ///             DataVolumes = new[]
        ///             {
        ///                 new Volcengine.Ecs.Inputs.InstanceDataVolumeArgs
        ///                 {
        ///                     VolumeType = "ESSD_PL0",
        ///                     Size = 50,
        ///                     DeleteWithInstance = true,
        ///                 },
        ///             },
        ///             SubnetId = fooSubnet.Id,
        ///             SecurityGroupIds = new[]
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Ecs.Inputs.InstanceTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooInstances = Volcengine.Ecs.Instances.Invoke(new()
        ///     {
        ///         Ids = fooInstance.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<InstancesResult> Invoke(InstancesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<InstancesResult>("volcengine:ecs/instances:Instances", args ?? new InstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class InstancesArgs : global::Pulumi.InvokeArgs
    {
        [Input("deploymentSetIds")]
        private List<string>? _deploymentSetIds;

        /// <summary>
        /// A list of DeploymentSet IDs.
        /// </summary>
        public List<string> DeploymentSetIds
        {
            get => _deploymentSetIds ?? (_deploymentSetIds = new List<string>());
            set => _deploymentSetIds = value;
        }

        /// <summary>
        /// The hpc cluster ID of ECS instance.
        /// </summary>
        [Input("hpcClusterId")]
        public string? HpcClusterId { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of ECS instance IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The charge type of ECS instance.
        /// </summary>
        [Input("instanceChargeType")]
        public string? InstanceChargeType { get; set; }

        /// <summary>
        /// The key pair name of ECS instance.
        /// </summary>
        [Input("keyPairName")]
        public string? KeyPairName { get; set; }

        /// <summary>
        /// A Name Regex of ECS instance.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The primary ip address of ECS instance.
        /// </summary>
        [Input("primaryIpAddress")]
        public string? PrimaryIpAddress { get; set; }

        /// <summary>
        /// The ProjectName of ECS instance.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// The status of ECS instance.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        [Input("tags")]
        private List<Inputs.InstancesTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.InstancesTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.InstancesTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The VPC ID of ECS instance.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        /// <summary>
        /// The available zone ID of ECS instance.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public InstancesArgs()
        {
        }
        public static new InstancesArgs Empty => new InstancesArgs();
    }

    public sealed class InstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("deploymentSetIds")]
        private InputList<string>? _deploymentSetIds;

        /// <summary>
        /// A list of DeploymentSet IDs.
        /// </summary>
        public InputList<string> DeploymentSetIds
        {
            get => _deploymentSetIds ?? (_deploymentSetIds = new InputList<string>());
            set => _deploymentSetIds = value;
        }

        /// <summary>
        /// The hpc cluster ID of ECS instance.
        /// </summary>
        [Input("hpcClusterId")]
        public Input<string>? HpcClusterId { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of ECS instance IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The charge type of ECS instance.
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        /// <summary>
        /// The key pair name of ECS instance.
        /// </summary>
        [Input("keyPairName")]
        public Input<string>? KeyPairName { get; set; }

        /// <summary>
        /// A Name Regex of ECS instance.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The primary ip address of ECS instance.
        /// </summary>
        [Input("primaryIpAddress")]
        public Input<string>? PrimaryIpAddress { get; set; }

        /// <summary>
        /// The ProjectName of ECS instance.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The status of ECS instance.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.InstancesTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstancesTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstancesTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The VPC ID of ECS instance.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The available zone ID of ECS instance.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public InstancesInvokeArgs()
        {
        }
        public static new InstancesInvokeArgs Empty => new InstancesInvokeArgs();
    }


    [OutputType]
    public sealed class InstancesResult
    {
        public readonly ImmutableArray<string> DeploymentSetIds;
        public readonly string? HpcClusterId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The charge type of ECS instance.
        /// </summary>
        public readonly string? InstanceChargeType;
        /// <summary>
        /// The collection of ECS instance query.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstancesInstanceResult> Instances;
        /// <summary>
        /// The ssh key name of ECS instance.
        /// </summary>
        public readonly string? KeyPairName;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The private ip address of networkInterface.
        /// </summary>
        public readonly string? PrimaryIpAddress;
        /// <summary>
        /// The ProjectName of ECS instance.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// The status of ECS instance.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.InstancesTagResult> Tags;
        /// <summary>
        /// The total count of ECS instance query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The VPC ID of ECS instance.
        /// </summary>
        public readonly string? VpcId;
        /// <summary>
        /// The available zone ID of ECS instance.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private InstancesResult(
            ImmutableArray<string> deploymentSetIds,

            string? hpcClusterId,

            string id,

            ImmutableArray<string> ids,

            string? instanceChargeType,

            ImmutableArray<Outputs.InstancesInstanceResult> instances,

            string? keyPairName,

            string? nameRegex,

            string? outputFile,

            string? primaryIpAddress,

            string? projectName,

            string? status,

            ImmutableArray<Outputs.InstancesTagResult> tags,

            int totalCount,

            string? vpcId,

            string? zoneId)
        {
            DeploymentSetIds = deploymentSetIds;
            HpcClusterId = hpcClusterId;
            Id = id;
            Ids = ids;
            InstanceChargeType = instanceChargeType;
            Instances = instances;
            KeyPairName = keyPairName;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            PrimaryIpAddress = primaryIpAddress;
            ProjectName = projectName;
            Status = status;
            Tags = tags;
            TotalCount = totalCount;
            VpcId = vpcId;
            ZoneId = zoneId;
        }
    }
}
