// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Tls.Inputs
{

    public sealed class RuleUserDefineRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// LogCollector extension configuration.
        /// </summary>
        [Input("advanced")]
        public Input<Inputs.RuleUserDefineRuleAdvancedArgs>? Advanced { get; set; }

        /// <summary>
        /// Whether to upload raw logs.
        /// </summary>
        [Input("enableRawLog")]
        public Input<bool>? EnableRawLog { get; set; }

        [Input("fields")]
        private InputMap<string>? _fields;

        /// <summary>
        /// Add constant fields to logs.
        /// </summary>
        public InputMap<string> Fields
        {
            get => _fields ?? (_fields = new InputMap<string>());
            set => _fields = value;
        }

        /// <summary>
        /// Rules for parsing collection paths. After the rules are set, the fields in the collection path will be extracted through the regular expressions specified in the rules, and added to the log data as metadata.
        /// </summary>
        [Input("parsePathRule")]
        public Input<Inputs.RuleUserDefineRuleParsePathRuleArgs>? ParsePathRule { get; set; }

        /// <summary>
        /// Plugin configuration. After the plugin configuration is enabled, one or more LogCollector processor plugins can be added to parse logs with complex or variable structures.
        /// </summary>
        [Input("plugin")]
        public Input<Inputs.RuleUserDefineRulePluginArgs>? Plugin { get; set; }

        /// <summary>
        /// Rules for routing log partitions. Setting this parameter indicates that the HashKey routing shard mode is used when collecting logs, and Log Service will write the data to the shard containing the specified Key value.
        /// </summary>
        [Input("shardHashKey")]
        public Input<Inputs.RuleUserDefineRuleShardHashKeyArgs>? ShardHashKey { get; set; }

        /// <summary>
        /// LogCollector collection strategy, which specifies whether LogCollector collects incremental logs or full logs. The default is false, which means to collect all logs.
        /// </summary>
        [Input("tailFiles")]
        public Input<bool>? TailFiles { get; set; }

        public RuleUserDefineRuleArgs()
        {
        }
        public static new RuleUserDefineRuleArgs Empty => new RuleUserDefineRuleArgs();
    }
}
