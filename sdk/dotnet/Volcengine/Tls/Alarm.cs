// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Tls
{
    /// <summary>
    /// Provides a resource to manage tls alarm
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Tls.Alarm("foo", new()
    ///     {
    ///         AlarmName = "test",
    ///         AlarmNotifyGroups = new[]
    ///         {
    ///             "3019107f-28a2-4208-a2b6-c33fcb97ac3a",
    ///         },
    ///         AlarmPeriodDetail = new Volcengine.Tls.Inputs.AlarmAlarmPeriodDetailArgs
    ///         {
    ///             Email = 2,
    ///             GeneralWebhook = 3,
    ///             Phone = 10,
    ///             Sms = 10,
    ///         },
    ///         Condition = "$1.errNum&gt;0",
    ///         ProjectId = "cc44f8b6-0328-4622-b043-023fca735cd4",
    ///         QueryRequests = new[]
    ///         {
    ///             new Volcengine.Tls.Inputs.AlarmQueryRequestArgs
    ///             {
    ///                 EndTimeOffset = 0,
    ///                 Number = 1,
    ///                 Query = "Failed | select count(*) as errNum",
    ///                 StartTimeOffset = -15,
    ///                 TopicId = "af1a2240-ba62-4f18-b421-bde2f9684e57",
    ///             },
    ///         },
    ///         RequestCycle = new Volcengine.Tls.Inputs.AlarmRequestCycleArgs
    ///         {
    ///             Time = 11,
    ///             Type = "Period",
    ///         },
    ///         UserDefineMsg = "test for terraform",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// tls alarm can be imported using the id and project id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:tls/alarm:Alarm default projectId:fc************
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:tls/alarm:Alarm")]
    public partial class Alarm : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The alarm id.
        /// </summary>
        [Output("alarmId")]
        public Output<string> AlarmId { get; private set; } = null!;

        /// <summary>
        /// The name of the alarm.
        /// </summary>
        [Output("alarmName")]
        public Output<string> AlarmName { get; private set; } = null!;

        /// <summary>
        /// List of notification groups corresponding to the alarm.
        /// </summary>
        [Output("alarmNotifyGroups")]
        public Output<ImmutableArray<string>> AlarmNotifyGroups { get; private set; } = null!;

        /// <summary>
        /// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
        /// </summary>
        [Output("alarmPeriod")]
        public Output<int?> AlarmPeriod { get; private set; } = null!;

        /// <summary>
        /// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
        /// </summary>
        [Output("alarmPeriodDetail")]
        public Output<Outputs.AlarmAlarmPeriodDetail?> AlarmPeriodDetail { get; private set; } = null!;

        /// <summary>
        /// Alarm trigger condition.
        /// </summary>
        [Output("condition")]
        public Output<string> Condition { get; private set; } = null!;

        /// <summary>
        /// The project id.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Search and analyze sentences, 1~3 can be configured.
        /// </summary>
        [Output("queryRequests")]
        public Output<ImmutableArray<Outputs.AlarmQueryRequest>> QueryRequests { get; private set; } = null!;

        /// <summary>
        /// The execution period of the alarm task.
        /// </summary>
        [Output("requestCycle")]
        public Output<Outputs.AlarmRequestCycle> RequestCycle { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the alert policy. The default value is true, that is, on.
        /// </summary>
        [Output("status")]
        public Output<bool?> Status { get; private set; } = null!;

        /// <summary>
        /// Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.
        /// </summary>
        [Output("triggerPeriod")]
        public Output<int?> TriggerPeriod { get; private set; } = null!;

        /// <summary>
        /// Customize the alarm notification content.
        /// </summary>
        [Output("userDefineMsg")]
        public Output<string?> UserDefineMsg { get; private set; } = null!;


        /// <summary>
        /// Create a Alarm resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Alarm(string name, AlarmArgs args, CustomResourceOptions? options = null)
            : base("volcengine:tls/alarm:Alarm", name, args ?? new AlarmArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Alarm(string name, Input<string> id, AlarmState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:tls/alarm:Alarm", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Alarm resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Alarm Get(string name, Input<string> id, AlarmState? state = null, CustomResourceOptions? options = null)
        {
            return new Alarm(name, id, state, options);
        }
    }

    public sealed class AlarmArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the alarm.
        /// </summary>
        [Input("alarmName", required: true)]
        public Input<string> AlarmName { get; set; } = null!;

        [Input("alarmNotifyGroups", required: true)]
        private InputList<string>? _alarmNotifyGroups;

        /// <summary>
        /// List of notification groups corresponding to the alarm.
        /// </summary>
        public InputList<string> AlarmNotifyGroups
        {
            get => _alarmNotifyGroups ?? (_alarmNotifyGroups = new InputList<string>());
            set => _alarmNotifyGroups = value;
        }

        /// <summary>
        /// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
        /// </summary>
        [Input("alarmPeriod")]
        public Input<int>? AlarmPeriod { get; set; }

        /// <summary>
        /// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
        /// </summary>
        [Input("alarmPeriodDetail")]
        public Input<Inputs.AlarmAlarmPeriodDetailArgs>? AlarmPeriodDetail { get; set; }

        /// <summary>
        /// Alarm trigger condition.
        /// </summary>
        [Input("condition", required: true)]
        public Input<string> Condition { get; set; } = null!;

        /// <summary>
        /// The project id.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("queryRequests", required: true)]
        private InputList<Inputs.AlarmQueryRequestArgs>? _queryRequests;

        /// <summary>
        /// Search and analyze sentences, 1~3 can be configured.
        /// </summary>
        public InputList<Inputs.AlarmQueryRequestArgs> QueryRequests
        {
            get => _queryRequests ?? (_queryRequests = new InputList<Inputs.AlarmQueryRequestArgs>());
            set => _queryRequests = value;
        }

        /// <summary>
        /// The execution period of the alarm task.
        /// </summary>
        [Input("requestCycle", required: true)]
        public Input<Inputs.AlarmRequestCycleArgs> RequestCycle { get; set; } = null!;

        /// <summary>
        /// Whether to enable the alert policy. The default value is true, that is, on.
        /// </summary>
        [Input("status")]
        public Input<bool>? Status { get; set; }

        /// <summary>
        /// Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.
        /// </summary>
        [Input("triggerPeriod")]
        public Input<int>? TriggerPeriod { get; set; }

        /// <summary>
        /// Customize the alarm notification content.
        /// </summary>
        [Input("userDefineMsg")]
        public Input<string>? UserDefineMsg { get; set; }

        public AlarmArgs()
        {
        }
        public static new AlarmArgs Empty => new AlarmArgs();
    }

    public sealed class AlarmState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alarm id.
        /// </summary>
        [Input("alarmId")]
        public Input<string>? AlarmId { get; set; }

        /// <summary>
        /// The name of the alarm.
        /// </summary>
        [Input("alarmName")]
        public Input<string>? AlarmName { get; set; }

        [Input("alarmNotifyGroups")]
        private InputList<string>? _alarmNotifyGroups;

        /// <summary>
        /// List of notification groups corresponding to the alarm.
        /// </summary>
        public InputList<string> AlarmNotifyGroups
        {
            get => _alarmNotifyGroups ?? (_alarmNotifyGroups = new InputList<string>());
            set => _alarmNotifyGroups = value;
        }

        /// <summary>
        /// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
        /// </summary>
        [Input("alarmPeriod")]
        public Input<int>? AlarmPeriod { get; set; }

        /// <summary>
        /// Period for sending alarm notifications. When the number of continuous alarm triggers reaches the specified limit (TriggerPeriod), Log Service will send alarm notifications according to the specified period.
        /// </summary>
        [Input("alarmPeriodDetail")]
        public Input<Inputs.AlarmAlarmPeriodDetailGetArgs>? AlarmPeriodDetail { get; set; }

        /// <summary>
        /// Alarm trigger condition.
        /// </summary>
        [Input("condition")]
        public Input<string>? Condition { get; set; }

        /// <summary>
        /// The project id.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("queryRequests")]
        private InputList<Inputs.AlarmQueryRequestGetArgs>? _queryRequests;

        /// <summary>
        /// Search and analyze sentences, 1~3 can be configured.
        /// </summary>
        public InputList<Inputs.AlarmQueryRequestGetArgs> QueryRequests
        {
            get => _queryRequests ?? (_queryRequests = new InputList<Inputs.AlarmQueryRequestGetArgs>());
            set => _queryRequests = value;
        }

        /// <summary>
        /// The execution period of the alarm task.
        /// </summary>
        [Input("requestCycle")]
        public Input<Inputs.AlarmRequestCycleGetArgs>? RequestCycle { get; set; }

        /// <summary>
        /// Whether to enable the alert policy. The default value is true, that is, on.
        /// </summary>
        [Input("status")]
        public Input<bool>? Status { get; set; }

        /// <summary>
        /// Continuous cycle. The alarm will be issued after the trigger condition is continuously met for TriggerPeriod periods; the minimum value is 1, the maximum value is 10, and the default value is 1.
        /// </summary>
        [Input("triggerPeriod")]
        public Input<int>? TriggerPeriod { get; set; }

        /// <summary>
        /// Customize the alarm notification content.
        /// </summary>
        [Input("userDefineMsg")]
        public Input<string>? UserDefineMsg { get; set; }

        public AlarmState()
        {
        }
        public static new AlarmState Empty => new AlarmState();
    }
}
