// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Tls
{
    /// <summary>
    /// Provides a resource to manage tls index
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Tls.Index("foo", new()
    ///     {
    ///         FullText = new Volcengine.Tls.Inputs.IndexFullTextArgs
    ///         {
    ///             CaseSensitive = true,
    ///             Delimiter = "!",
    ///             IncludeChinese = false,
    ///         },
    ///         KeyValues = new[]
    ///         {
    ///             new Volcengine.Tls.Inputs.IndexKeyValueArgs
    ///             {
    ///                 CaseSensitive = true,
    ///                 Delimiter = "!",
    ///                 IncludeChinese = false,
    ///                 JsonKeys = new[]
    ///                 {
    ///                     new Volcengine.Tls.Inputs.IndexKeyValueJsonKeyArgs
    ///                     {
    ///                         Key = "k2.k4",
    ///                         ValueType = "text",
    ///                     },
    ///                     new Volcengine.Tls.Inputs.IndexKeyValueJsonKeyArgs
    ///                     {
    ///                         Key = "k3.k4",
    ///                         ValueType = "long",
    ///                     },
    ///                 },
    ///                 Key = "k1",
    ///                 SqlFlag = false,
    ///                 ValueType = "json",
    ///             },
    ///             new Volcengine.Tls.Inputs.IndexKeyValueArgs
    ///             {
    ///                 CaseSensitive = true,
    ///                 Delimiter = "!",
    ///                 IncludeChinese = false,
    ///                 Key = "k5",
    ///                 SqlFlag = false,
    ///                 ValueType = "text",
    ///             },
    ///         },
    ///         TopicId = "65d67d34-c5b4-4ec8-b3a9-175d3366****",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Tls Index can be imported using the topic id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:tls/index:Index default index:edf051ed-3c46-49ba-9339-bea628fe****
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:tls/index:Index")]
    public partial class Index : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The create time of the tls index.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The full text info of the tls index.
        /// </summary>
        [Output("fullText")]
        public Output<Outputs.IndexFullText?> FullText { get; private set; } = null!;

        /// <summary>
        /// The key value info of the tls index.
        /// </summary>
        [Output("keyValues")]
        public Output<ImmutableArray<Outputs.IndexKeyValue>> KeyValues { get; private set; } = null!;

        /// <summary>
        /// The modify time of the tls index.
        /// </summary>
        [Output("modifyTime")]
        public Output<string> ModifyTime { get; private set; } = null!;

        /// <summary>
        /// The topic id of the tls index.
        /// </summary>
        [Output("topicId")]
        public Output<string> TopicId { get; private set; } = null!;


        /// <summary>
        /// Create a Index resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Index(string name, IndexArgs args, CustomResourceOptions? options = null)
            : base("volcengine:tls/index:Index", name, args ?? new IndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Index(string name, Input<string> id, IndexState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:tls/index:Index", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Index resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Index Get(string name, Input<string> id, IndexState? state = null, CustomResourceOptions? options = null)
        {
            return new Index(name, id, state, options);
        }
    }

    public sealed class IndexArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The full text info of the tls index.
        /// </summary>
        [Input("fullText")]
        public Input<Inputs.IndexFullTextArgs>? FullText { get; set; }

        [Input("keyValues")]
        private InputList<Inputs.IndexKeyValueArgs>? _keyValues;

        /// <summary>
        /// The key value info of the tls index.
        /// </summary>
        public InputList<Inputs.IndexKeyValueArgs> KeyValues
        {
            get => _keyValues ?? (_keyValues = new InputList<Inputs.IndexKeyValueArgs>());
            set => _keyValues = value;
        }

        /// <summary>
        /// The topic id of the tls index.
        /// </summary>
        [Input("topicId", required: true)]
        public Input<string> TopicId { get; set; } = null!;

        public IndexArgs()
        {
        }
        public static new IndexArgs Empty => new IndexArgs();
    }

    public sealed class IndexState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The create time of the tls index.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The full text info of the tls index.
        /// </summary>
        [Input("fullText")]
        public Input<Inputs.IndexFullTextGetArgs>? FullText { get; set; }

        [Input("keyValues")]
        private InputList<Inputs.IndexKeyValueGetArgs>? _keyValues;

        /// <summary>
        /// The key value info of the tls index.
        /// </summary>
        public InputList<Inputs.IndexKeyValueGetArgs> KeyValues
        {
            get => _keyValues ?? (_keyValues = new InputList<Inputs.IndexKeyValueGetArgs>());
            set => _keyValues = value;
        }

        /// <summary>
        /// The modify time of the tls index.
        /// </summary>
        [Input("modifyTime")]
        public Input<string>? ModifyTime { get; set; }

        /// <summary>
        /// The topic id of the tls index.
        /// </summary>
        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        public IndexState()
        {
        }
        public static new IndexState Empty => new IndexState();
    }
}
