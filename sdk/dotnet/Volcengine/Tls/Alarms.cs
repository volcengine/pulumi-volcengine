// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Tls
{
    public static class Alarms
    {
        /// <summary>
        /// Use this data source to query detailed information of tls alarms
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Tls.Alarms.Invoke(new()
        ///     {
        ///         ProjectId = "cc44f8b6-0328-4622-b043-023fca735cd4",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<AlarmsResult> InvokeAsync(AlarmsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<AlarmsResult>("volcengine:tls/alarms:Alarms", args ?? new AlarmsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of tls alarms
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Tls.Alarms.Invoke(new()
        ///     {
        ///         ProjectId = "cc44f8b6-0328-4622-b043-023fca735cd4",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<AlarmsResult> Invoke(AlarmsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<AlarmsResult>("volcengine:tls/alarms:Alarms", args ?? new AlarmsInvokeArgs(), options.WithDefaults());
    }


    public sealed class AlarmsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The alarm id.
        /// </summary>
        [Input("alarmId")]
        public string? AlarmId { get; set; }

        /// <summary>
        /// The alarm name.
        /// </summary>
        [Input("alarmName")]
        public string? AlarmName { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project id.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The status.
        /// </summary>
        [Input("status")]
        public bool? Status { get; set; }

        /// <summary>
        /// The topic id.
        /// </summary>
        [Input("topicId")]
        public string? TopicId { get; set; }

        /// <summary>
        /// The topic name.
        /// </summary>
        [Input("topicName")]
        public string? TopicName { get; set; }

        public AlarmsArgs()
        {
        }
        public static new AlarmsArgs Empty => new AlarmsArgs();
    }

    public sealed class AlarmsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The alarm id.
        /// </summary>
        [Input("alarmId")]
        public Input<string>? AlarmId { get; set; }

        /// <summary>
        /// The alarm name.
        /// </summary>
        [Input("alarmName")]
        public Input<string>? AlarmName { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project id.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The status.
        /// </summary>
        [Input("status")]
        public Input<bool>? Status { get; set; }

        /// <summary>
        /// The topic id.
        /// </summary>
        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        /// <summary>
        /// The topic name.
        /// </summary>
        [Input("topicName")]
        public Input<string>? TopicName { get; set; }

        public AlarmsInvokeArgs()
        {
        }
        public static new AlarmsInvokeArgs Empty => new AlarmsInvokeArgs();
    }


    [OutputType]
    public sealed class AlarmsResult
    {
        /// <summary>
        /// The alarm id.
        /// </summary>
        public readonly string? AlarmId;
        /// <summary>
        /// The name of the alarm.
        /// </summary>
        public readonly string? AlarmName;
        /// <summary>
        /// The list of alarms.
        /// </summary>
        public readonly ImmutableArray<Outputs.AlarmsAlarmResult> Alarms;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The project id.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Whether to enable the alert policy. The default value is true, that is, on.
        /// </summary>
        public readonly bool? Status;
        /// <summary>
        /// The id of the topic.
        /// </summary>
        public readonly string? TopicId;
        /// <summary>
        /// The name of the topic.
        /// </summary>
        public readonly string? TopicName;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private AlarmsResult(
            string? alarmId,

            string? alarmName,

            ImmutableArray<Outputs.AlarmsAlarmResult> alarms,

            string id,

            string? outputFile,

            string projectId,

            bool? status,

            string? topicId,

            string? topicName,

            int totalCount)
        {
            AlarmId = alarmId;
            AlarmName = alarmName;
            Alarms = alarms;
            Id = id;
            OutputFile = outputFile;
            ProjectId = projectId;
            Status = status;
            TopicId = topicId;
            TopicName = topicName;
            TotalCount = totalCount;
        }
    }
}
