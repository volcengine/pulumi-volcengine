// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Tls
{
    /// <summary>
    /// Provides a resource to manage tls rule
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Tls.Rule("foo", new()
    ///     {
    ///         TopicId = "7bfa2cdc-4f8b-4cf9-b4c9-0ed05c33349f",
    ///         RuleName = "test",
    ///         LogType = "minimalist_log",
    ///         LogSample = "2018-05-22 15:35:53.850 INFO XXXX",
    ///         InputType = 1,
    ///         UserDefineRule = new Volcengine.Tls.Inputs.RuleUserDefineRuleArgs
    ///         {
    ///             EnableRawLog = false,
    ///             TailFiles = true,
    ///             ShardHashKey = new Volcengine.Tls.Inputs.RuleUserDefineRuleShardHashKeyArgs
    ///             {
    ///                 HashKey = "3C",
    ///             },
    ///             Plugin = new Volcengine.Tls.Inputs.RuleUserDefineRulePluginArgs
    ///             {
    ///                 Processors = new[]
    ///                 {
    ///                     JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["json"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["field"] = "__content__",
    ///                             ["trim_keys"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["mode"] = "all",
    ///                                 ["chars"] = "#",
    ///                             },
    ///                             ["trim_values"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["mode"] = "all",
    ///                                 ["chars"] = "#t",
    ///                             },
    ///                             ["allow_overwrite_keys"] = true,
    ///                             ["allow_empty_values"] = true,
    ///                         },
    ///                     }),
    ///                     JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         ["json"] = new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             ["field"] = "__content__",
    ///                             ["trim_keys"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["mode"] = "all",
    ///                                 ["chars"] = "#xx",
    ///                             },
    ///                             ["trim_values"] = new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 ["mode"] = "all",
    ///                                 ["chars"] = "#txxxt",
    ///                             },
    ///                             ["allow_overwrite_keys"] = true,
    ///                             ["allow_empty_values"] = true,
    ///                         },
    ///                     }),
    ///                 },
    ///             },
    ///             Advanced = new Volcengine.Tls.Inputs.RuleUserDefineRuleAdvancedArgs
    ///             {
    ///                 CloseInactive = 10,
    ///                 CloseRemoved = false,
    ///                 CloseRenamed = false,
    ///                 CloseEof = false,
    ///                 CloseTimeout = 1,
    ///             },
    ///         },
    ///         ContainerRule = new Volcengine.Tls.Inputs.RuleContainerRuleArgs
    ///         {
    ///             Stream = "all",
    ///             ContainerNameRegex = ".*test.*",
    ///             IncludeContainerLabelRegex = 
    ///             {
    ///                 { "Key1", "Value12" },
    ///                 { "Key2", "Value23" },
    ///             },
    ///             ExcludeContainerLabelRegex = 
    ///             {
    ///                 { "Key1", "Value12" },
    ///                 { "Key2", "Value22" },
    ///             },
    ///             IncludeContainerEnvRegex = 
    ///             {
    ///                 { "Key1", "Value1" },
    ///                 { "Key2", "Value2" },
    ///             },
    ///             ExcludeContainerEnvRegex = 
    ///             {
    ///                 { "Key1", "Value1" },
    ///                 { "Key2", "Value2" },
    ///             },
    ///             EnvTag = 
    ///             {
    ///                 { "Key1", "Value1" },
    ///                 { "Key2", "Value2" },
    ///             },
    ///             KubernetesRule = new Volcengine.Tls.Inputs.RuleContainerRuleKubernetesRuleArgs
    ///             {
    ///                 NamespaceNameRegex = ".*test.*",
    ///                 WorkloadType = "Deployment",
    ///                 WorkloadNameRegex = ".*test.*",
    ///                 IncludePodLabelRegex = 
    ///                 {
    ///                     { "Key1", "Value1" },
    ///                     { "Key2", "Value2" },
    ///                 },
    ///                 ExcludePodLabelRegex = 
    ///                 {
    ///                     { "Key1", "Value1" },
    ///                     { "Key2", "Value2" },
    ///                 },
    ///                 PodNameRegex = ".*test.*",
    ///                 LabelTag = 
    ///                 {
    ///                     { "Key1", "Value1" },
    ///                     { "Key2", "Value2" },
    ///                 },
    ///                 AnnotationTag = 
    ///                 {
    ///                     { "Key1", "Value1" },
    ///                     { "Key2", "Value2" },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// tls rule can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:tls/rule:Rule default fa************
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:tls/rule:Rule")]
    public partial class Rule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Container collection rules.
        /// </summary>
        [Output("containerRule")]
        public Output<Outputs.RuleContainerRule?> ContainerRule { get; private set; } = null!;

        /// <summary>
        /// Collect the blacklist list.
        /// </summary>
        [Output("excludePaths")]
        public Output<ImmutableArray<Outputs.RuleExcludePath>> ExcludePaths { get; private set; } = null!;

        /// <summary>
        /// The extract rule.
        /// </summary>
        [Output("extractRule")]
        public Output<Outputs.RuleExtractRule> ExtractRule { get; private set; } = null!;

        /// <summary>
        /// The type of the collection configuration. Validate value can be `0`(host log file), `1`(K8s container standard output) and `2`(Log files in the K8s container).
        /// </summary>
        [Output("inputType")]
        public Output<int?> InputType { get; private set; } = null!;

        /// <summary>
        /// The sample of the log.
        /// </summary>
        [Output("logSample")]
        public Output<string?> LogSample { get; private set; } = null!;

        /// <summary>
        /// The log type. The value can be one of the following: `minimalist_log`, `json_log`, `delimiter_log`, `multiline_log`, `fullregex_log`.
        /// </summary>
        [Output("logType")]
        public Output<string?> LogType { get; private set; } = null!;

        /// <summary>
        /// Collection path list.
        /// </summary>
        [Output("paths")]
        public Output<ImmutableArray<string>> Paths { get; private set; } = null!;

        /// <summary>
        /// The id of the rule.
        /// </summary>
        [Output("ruleId")]
        public Output<string> RuleId { get; private set; } = null!;

        /// <summary>
        /// The name of the collection configuration.
        /// </summary>
        [Output("ruleName")]
        public Output<string> RuleName { get; private set; } = null!;

        /// <summary>
        /// The ID of the log topic to which the collection configuration belongs.
        /// </summary>
        [Output("topicId")]
        public Output<string> TopicId { get; private set; } = null!;

        /// <summary>
        /// User-defined collection rules.
        /// </summary>
        [Output("userDefineRule")]
        public Output<Outputs.RuleUserDefineRule?> UserDefineRule { get; private set; } = null!;


        /// <summary>
        /// Create a Rule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Rule(string name, RuleArgs args, CustomResourceOptions? options = null)
            : base("volcengine:tls/rule:Rule", name, args ?? new RuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Rule(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:tls/rule:Rule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Rule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Rule Get(string name, Input<string> id, RuleState? state = null, CustomResourceOptions? options = null)
        {
            return new Rule(name, id, state, options);
        }
    }

    public sealed class RuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Container collection rules.
        /// </summary>
        [Input("containerRule")]
        public Input<Inputs.RuleContainerRuleArgs>? ContainerRule { get; set; }

        [Input("excludePaths")]
        private InputList<Inputs.RuleExcludePathArgs>? _excludePaths;

        /// <summary>
        /// Collect the blacklist list.
        /// </summary>
        public InputList<Inputs.RuleExcludePathArgs> ExcludePaths
        {
            get => _excludePaths ?? (_excludePaths = new InputList<Inputs.RuleExcludePathArgs>());
            set => _excludePaths = value;
        }

        /// <summary>
        /// The extract rule.
        /// </summary>
        [Input("extractRule")]
        public Input<Inputs.RuleExtractRuleArgs>? ExtractRule { get; set; }

        /// <summary>
        /// The type of the collection configuration. Validate value can be `0`(host log file), `1`(K8s container standard output) and `2`(Log files in the K8s container).
        /// </summary>
        [Input("inputType")]
        public Input<int>? InputType { get; set; }

        /// <summary>
        /// The sample of the log.
        /// </summary>
        [Input("logSample")]
        public Input<string>? LogSample { get; set; }

        /// <summary>
        /// The log type. The value can be one of the following: `minimalist_log`, `json_log`, `delimiter_log`, `multiline_log`, `fullregex_log`.
        /// </summary>
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        [Input("paths")]
        private InputList<string>? _paths;

        /// <summary>
        /// Collection path list.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// The name of the collection configuration.
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        /// <summary>
        /// The ID of the log topic to which the collection configuration belongs.
        /// </summary>
        [Input("topicId", required: true)]
        public Input<string> TopicId { get; set; } = null!;

        /// <summary>
        /// User-defined collection rules.
        /// </summary>
        [Input("userDefineRule")]
        public Input<Inputs.RuleUserDefineRuleArgs>? UserDefineRule { get; set; }

        public RuleArgs()
        {
        }
        public static new RuleArgs Empty => new RuleArgs();
    }

    public sealed class RuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Container collection rules.
        /// </summary>
        [Input("containerRule")]
        public Input<Inputs.RuleContainerRuleGetArgs>? ContainerRule { get; set; }

        [Input("excludePaths")]
        private InputList<Inputs.RuleExcludePathGetArgs>? _excludePaths;

        /// <summary>
        /// Collect the blacklist list.
        /// </summary>
        public InputList<Inputs.RuleExcludePathGetArgs> ExcludePaths
        {
            get => _excludePaths ?? (_excludePaths = new InputList<Inputs.RuleExcludePathGetArgs>());
            set => _excludePaths = value;
        }

        /// <summary>
        /// The extract rule.
        /// </summary>
        [Input("extractRule")]
        public Input<Inputs.RuleExtractRuleGetArgs>? ExtractRule { get; set; }

        /// <summary>
        /// The type of the collection configuration. Validate value can be `0`(host log file), `1`(K8s container standard output) and `2`(Log files in the K8s container).
        /// </summary>
        [Input("inputType")]
        public Input<int>? InputType { get; set; }

        /// <summary>
        /// The sample of the log.
        /// </summary>
        [Input("logSample")]
        public Input<string>? LogSample { get; set; }

        /// <summary>
        /// The log type. The value can be one of the following: `minimalist_log`, `json_log`, `delimiter_log`, `multiline_log`, `fullregex_log`.
        /// </summary>
        [Input("logType")]
        public Input<string>? LogType { get; set; }

        [Input("paths")]
        private InputList<string>? _paths;

        /// <summary>
        /// Collection path list.
        /// </summary>
        public InputList<string> Paths
        {
            get => _paths ?? (_paths = new InputList<string>());
            set => _paths = value;
        }

        /// <summary>
        /// The id of the rule.
        /// </summary>
        [Input("ruleId")]
        public Input<string>? RuleId { get; set; }

        /// <summary>
        /// The name of the collection configuration.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// The ID of the log topic to which the collection configuration belongs.
        /// </summary>
        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        /// <summary>
        /// User-defined collection rules.
        /// </summary>
        [Input("userDefineRule")]
        public Input<Inputs.RuleUserDefineRuleGetArgs>? UserDefineRule { get; set; }

        public RuleState()
        {
        }
        public static new RuleState Empty => new RuleState();
    }
}
