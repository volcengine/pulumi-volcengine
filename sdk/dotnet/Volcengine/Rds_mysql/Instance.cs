// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Rds_mysql
{
    /// <summary>
    /// Provides a resource to manage rds mysql instance
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Rds_mysql.Instance("foo", new()
    ///     {
    ///         DbEngineVersion = "MySQL_5_7",
    ///         NodeSpec = "rds.mysql.1c2g",
    ///         PrimaryZoneId = "cn-guilin-a",
    ///         SecondaryZoneId = "cn-guilin-b",
    ///         StorageSpace = 80,
    ///         SubnetId = "subnet-2d72yi377stts58ozfdrlk9f6",
    ///         InstanceName = "tf-test",
    ///         LowerCaseTableNames = "1",
    ///         ChargeInfo = new Volcengine.Rds_mysql.Inputs.InstanceChargeInfoArgs
    ///         {
    ///             ChargeType = "PostPaid",
    ///         },
    ///         AllowListIds = new[]
    ///         {
    ///             "acl-2dd8f8317e4d4159b21630d13ae2e6ec",
    ///             "acl-2eaa2a053b2a4a58b988e38ae975e81c",
    ///         },
    ///         Parameters = new[]
    ///         {
    ///             new Volcengine.Rds_mysql.Inputs.InstanceParameterArgs
    ///             {
    ///                 ParameterName = "auto_increment_increment",
    ///                 ParameterValue = "2",
    ///             },
    ///             new Volcengine.Rds_mysql.Inputs.InstanceParameterArgs
    ///             {
    ///                 ParameterName = "auto_increment_offset",
    ///                 ParameterValue = "4",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var @readonly = new Volcengine.Rds_mysql.InstanceReadonlyNode("readonly", new()
    ///     {
    ///         InstanceId = foo.Id,
    ///         NodeSpec = "rds.mysql.2c4g",
    ///         ZoneId = "cn-guilin-a",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Rds Mysql Instance can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:rds_mysql/instance:Instance default mysql-72da4258c2c7
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:rds_mysql/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow list Ids of the RDS instance.
        /// </summary>
        [Output("allowListIds")]
        public Output<ImmutableArray<string>> AllowListIds { get; private set; } = null!;

        /// <summary>
        /// The version of allow list.
        /// </summary>
        [Output("allowListVersion")]
        public Output<string> AllowListVersion { get; private set; } = null!;

        /// <summary>
        /// The instance has used backup space. Unit: GB.
        /// </summary>
        [Output("backupUse")]
        public Output<int> BackupUse { get; private set; } = null!;

        /// <summary>
        /// Payment methods.
        /// </summary>
        [Output("chargeDetails")]
        public Output<ImmutableArray<Outputs.InstanceChargeDetail>> ChargeDetails { get; private set; } = null!;

        /// <summary>
        /// Payment methods.
        /// </summary>
        [Output("chargeInfo")]
        public Output<Outputs.InstanceChargeInfo> ChargeInfo { get; private set; } = null!;

        /// <summary>
        /// Node creation local time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Data synchronization mode.
        /// </summary>
        [Output("dataSyncMode")]
        public Output<string> DataSyncMode { get; private set; } = null!;

        /// <summary>
        /// Instance type. Value:
        /// MySQL_5_7
        /// MySQL_8_0.
        /// </summary>
        [Output("dbEngineVersion")]
        public Output<string> DbEngineVersion { get; private set; } = null!;

        /// <summary>
        /// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("dbTimeZone")]
        public Output<string> DbTimeZone { get; private set; } = null!;

        /// <summary>
        /// The endpoint info of the RDS instance.
        /// </summary>
        [Output("endpoints")]
        public Output<ImmutableArray<Outputs.InstanceEndpoint>> Endpoints { get; private set; } = null!;

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Instance name. Cannot start with a number or a dash
        /// Can only contain Chinese characters, letters, numbers, underscores and dashes
        /// The length is limited between 1 ~ 128.
        /// </summary>
        [Output("instanceName")]
        public Output<string?> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The status of the RDS instance.
        /// </summary>
        [Output("instanceStatus")]
        public Output<string> InstanceStatus { get; private set; } = null!;

        /// <summary>
        /// Whether the table name is case sensitive, the default value is 1.
        /// Ranges:
        /// 0: Table names are stored as fixed and table names are case-sensitive.
        /// 1: Table names will be stored in lowercase and table names are not case sensitive.
        /// </summary>
        [Output("lowerCaseTableNames")]
        public Output<string?> LowerCaseTableNames { get; private set; } = null!;

        /// <summary>
        /// Maintenance Window.
        /// </summary>
        [Output("maintenanceWindows")]
        public Output<ImmutableArray<Outputs.InstanceMaintenanceWindow>> MaintenanceWindows { get; private set; } = null!;

        /// <summary>
        /// Memory size in GB.
        /// </summary>
        [Output("memory")]
        public Output<int> Memory { get; private set; } = null!;

        /// <summary>
        /// The number of nodes.
        /// </summary>
        [Output("nodeNumber")]
        public Output<int> NodeNumber { get; private set; } = null!;

        /// <summary>
        /// The specification of primary node and secondary node.
        /// </summary>
        [Output("nodeSpec")]
        public Output<string> NodeSpec { get; private set; } = null!;

        /// <summary>
        /// Instance node information.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.InstanceNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// Parameter of the RDS instance. This field can only be added or modified. Deleting this field is invalid.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.InstanceParameter>> Parameters { get; private set; } = null!;

        /// <summary>
        /// The available zone of primary node.
        /// </summary>
        [Output("primaryZoneId")]
        public Output<string> PrimaryZoneId { get; private set; } = null!;

        /// <summary>
        /// The region of the RDS instance.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// The available zone of secondary node.
        /// </summary>
        [Output("secondaryZoneId")]
        public Output<string> SecondaryZoneId { get; private set; } = null!;

        /// <summary>
        /// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
        /// </summary>
        [Output("storageSpace")]
        public Output<int?> StorageSpace { get; private set; } = null!;

        /// <summary>
        /// Instance storage type.
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        /// <summary>
        /// The instance has used storage space. Unit: GB.
        /// </summary>
        [Output("storageUse")]
        public Output<int> StorageUse { get; private set; } = null!;

        /// <summary>
        /// Subnet ID of the RDS instance.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Time zone.
        /// </summary>
        [Output("timeZone")]
        public Output<string> TimeZone { get; private set; } = null!;

        /// <summary>
        /// The update time of the RDS instance.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// CPU size.
        /// </summary>
        [Output("vCpu")]
        public Output<int> VCpu { get; private set; } = null!;

        /// <summary>
        /// The vpc ID of the RDS instance.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The available zone of the RDS instance.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:rds_mysql/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:rds_mysql/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        [Input("allowListIds")]
        private InputList<string>? _allowListIds;

        /// <summary>
        /// Allow list Ids of the RDS instance.
        /// </summary>
        public InputList<string> AllowListIds
        {
            get => _allowListIds ?? (_allowListIds = new InputList<string>());
            set => _allowListIds = value;
        }

        /// <summary>
        /// Payment methods.
        /// </summary>
        [Input("chargeInfo", required: true)]
        public Input<Inputs.InstanceChargeInfoArgs> ChargeInfo { get; set; } = null!;

        /// <summary>
        /// Instance type. Value:
        /// MySQL_5_7
        /// MySQL_8_0.
        /// </summary>
        [Input("dbEngineVersion", required: true)]
        public Input<string> DbEngineVersion { get; set; } = null!;

        /// <summary>
        /// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dbTimeZone")]
        public Input<string>? DbTimeZone { get; set; }

        /// <summary>
        /// Instance name. Cannot start with a number or a dash
        /// Can only contain Chinese characters, letters, numbers, underscores and dashes
        /// The length is limited between 1 ~ 128.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// Whether the table name is case sensitive, the default value is 1.
        /// Ranges:
        /// 0: Table names are stored as fixed and table names are case-sensitive.
        /// 1: Table names will be stored in lowercase and table names are not case sensitive.
        /// </summary>
        [Input("lowerCaseTableNames")]
        public Input<string>? LowerCaseTableNames { get; set; }

        /// <summary>
        /// The specification of primary node and secondary node.
        /// </summary>
        [Input("nodeSpec", required: true)]
        public Input<string> NodeSpec { get; set; } = null!;

        [Input("parameters")]
        private InputList<Inputs.InstanceParameterArgs>? _parameters;

        /// <summary>
        /// Parameter of the RDS instance. This field can only be added or modified. Deleting this field is invalid.
        /// </summary>
        public InputList<Inputs.InstanceParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.InstanceParameterArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The available zone of primary node.
        /// </summary>
        [Input("primaryZoneId", required: true)]
        public Input<string> PrimaryZoneId { get; set; } = null!;

        /// <summary>
        /// The available zone of secondary node.
        /// </summary>
        [Input("secondaryZoneId", required: true)]
        public Input<string> SecondaryZoneId { get; set; } = null!;

        /// <summary>
        /// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
        /// </summary>
        [Input("storageSpace")]
        public Input<int>? StorageSpace { get; set; }

        /// <summary>
        /// Subnet ID of the RDS instance.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        [Input("allowListIds")]
        private InputList<string>? _allowListIds;

        /// <summary>
        /// Allow list Ids of the RDS instance.
        /// </summary>
        public InputList<string> AllowListIds
        {
            get => _allowListIds ?? (_allowListIds = new InputList<string>());
            set => _allowListIds = value;
        }

        /// <summary>
        /// The version of allow list.
        /// </summary>
        [Input("allowListVersion")]
        public Input<string>? AllowListVersion { get; set; }

        /// <summary>
        /// The instance has used backup space. Unit: GB.
        /// </summary>
        [Input("backupUse")]
        public Input<int>? BackupUse { get; set; }

        [Input("chargeDetails")]
        private InputList<Inputs.InstanceChargeDetailGetArgs>? _chargeDetails;

        /// <summary>
        /// Payment methods.
        /// </summary>
        public InputList<Inputs.InstanceChargeDetailGetArgs> ChargeDetails
        {
            get => _chargeDetails ?? (_chargeDetails = new InputList<Inputs.InstanceChargeDetailGetArgs>());
            set => _chargeDetails = value;
        }

        /// <summary>
        /// Payment methods.
        /// </summary>
        [Input("chargeInfo")]
        public Input<Inputs.InstanceChargeInfoGetArgs>? ChargeInfo { get; set; }

        /// <summary>
        /// Node creation local time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Data synchronization mode.
        /// </summary>
        [Input("dataSyncMode")]
        public Input<string>? DataSyncMode { get; set; }

        /// <summary>
        /// Instance type. Value:
        /// MySQL_5_7
        /// MySQL_8_0.
        /// </summary>
        [Input("dbEngineVersion")]
        public Input<string>? DbEngineVersion { get; set; }

        /// <summary>
        /// Time zone. Support UTC -12:00 ~ +13:00. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dbTimeZone")]
        public Input<string>? DbTimeZone { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.InstanceEndpointGetArgs>? _endpoints;

        /// <summary>
        /// The endpoint info of the RDS instance.
        /// </summary>
        public InputList<Inputs.InstanceEndpointGetArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.InstanceEndpointGetArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Instance name. Cannot start with a number or a dash
        /// Can only contain Chinese characters, letters, numbers, underscores and dashes
        /// The length is limited between 1 ~ 128.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The status of the RDS instance.
        /// </summary>
        [Input("instanceStatus")]
        public Input<string>? InstanceStatus { get; set; }

        /// <summary>
        /// Whether the table name is case sensitive, the default value is 1.
        /// Ranges:
        /// 0: Table names are stored as fixed and table names are case-sensitive.
        /// 1: Table names will be stored in lowercase and table names are not case sensitive.
        /// </summary>
        [Input("lowerCaseTableNames")]
        public Input<string>? LowerCaseTableNames { get; set; }

        [Input("maintenanceWindows")]
        private InputList<Inputs.InstanceMaintenanceWindowGetArgs>? _maintenanceWindows;

        /// <summary>
        /// Maintenance Window.
        /// </summary>
        public InputList<Inputs.InstanceMaintenanceWindowGetArgs> MaintenanceWindows
        {
            get => _maintenanceWindows ?? (_maintenanceWindows = new InputList<Inputs.InstanceMaintenanceWindowGetArgs>());
            set => _maintenanceWindows = value;
        }

        /// <summary>
        /// Memory size in GB.
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// The number of nodes.
        /// </summary>
        [Input("nodeNumber")]
        public Input<int>? NodeNumber { get; set; }

        /// <summary>
        /// The specification of primary node and secondary node.
        /// </summary>
        [Input("nodeSpec")]
        public Input<string>? NodeSpec { get; set; }

        [Input("nodes")]
        private InputList<Inputs.InstanceNodeGetArgs>? _nodes;

        /// <summary>
        /// Instance node information.
        /// </summary>
        public InputList<Inputs.InstanceNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.InstanceNodeGetArgs>());
            set => _nodes = value;
        }

        [Input("parameters")]
        private InputList<Inputs.InstanceParameterGetArgs>? _parameters;

        /// <summary>
        /// Parameter of the RDS instance. This field can only be added or modified. Deleting this field is invalid.
        /// </summary>
        public InputList<Inputs.InstanceParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.InstanceParameterGetArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The available zone of primary node.
        /// </summary>
        [Input("primaryZoneId")]
        public Input<string>? PrimaryZoneId { get; set; }

        /// <summary>
        /// The region of the RDS instance.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// The available zone of secondary node.
        /// </summary>
        [Input("secondaryZoneId")]
        public Input<string>? SecondaryZoneId { get; set; }

        /// <summary>
        /// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
        /// </summary>
        [Input("storageSpace")]
        public Input<int>? StorageSpace { get; set; }

        /// <summary>
        /// Instance storage type.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// The instance has used storage space. Unit: GB.
        /// </summary>
        [Input("storageUse")]
        public Input<int>? StorageUse { get; set; }

        /// <summary>
        /// Subnet ID of the RDS instance.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        /// <summary>
        /// Time zone.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// The update time of the RDS instance.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// CPU size.
        /// </summary>
        [Input("vCpu")]
        public Input<int>? VCpu { get; set; }

        /// <summary>
        /// The vpc ID of the RDS instance.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The available zone of the RDS instance.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
