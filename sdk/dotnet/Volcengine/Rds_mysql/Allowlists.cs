// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Rds_mysql
{
    public static class Allowlists
    {
        /// <summary>
        /// Use this data source to query detailed information of rds mysql allowlists
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooAllowlist = new List&lt;Volcengine.Rds_mysql.Allowlist&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooAllowlist.Add(new Volcengine.Rds_mysql.Allowlist($"fooAllowlist-{range.Value}", new()
        ///         {
        ///             AllowListName = $"acc-test-allowlist-{range.Value}",
        ///             AllowListDesc = "acc-test",
        ///             AllowListType = "IPv4",
        ///             AllowLists = new[]
        ///             {
        ///                 "192.168.0.0/24",
        ///                 "192.168.1.0/24",
        ///             },
        ///         }));
        ///     }
        ///     var fooInstance = new Volcengine.Rds_mysql.Instance("fooInstance", new()
        ///     {
        ///         InstanceName = "acc-test-rds-mysql",
        ///         DbEngineVersion = "MySQL_5_7",
        ///         NodeSpec = "rds.mysql.1c2g",
        ///         PrimaryZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         SecondaryZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         StorageSpace = 80,
        ///         SubnetId = fooSubnet.Id,
        ///         LowerCaseTableNames = "1",
        ///         ChargeInfo = new Volcengine.Rds_mysql.Inputs.InstanceChargeInfoArgs
        ///         {
        ///             ChargeType = "PostPaid",
        ///         },
        ///         Parameters = new[]
        ///         {
        ///             new Volcengine.Rds_mysql.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "auto_increment_increment",
        ///                 ParameterValue = "2",
        ///             },
        ///             new Volcengine.Rds_mysql.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "auto_increment_offset",
        ///                 ParameterValue = "4",
        ///             },
        ///         },
        ///         AllowListIds = fooAllowlist.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        ///     var fooAllowlists = Volcengine.Rds_mysql.Allowlists.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         RegionId = "cn-beijing",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<AllowlistsResult> InvokeAsync(AllowlistsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<AllowlistsResult>("volcengine:rds_mysql/allowlists:Allowlists", args ?? new AllowlistsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of rds mysql allowlists
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// using Volcengine = Volcengine.Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooAllowlist = new List&lt;Volcengine.Rds_mysql.Allowlist&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooAllowlist.Add(new Volcengine.Rds_mysql.Allowlist($"fooAllowlist-{range.Value}", new()
        ///         {
        ///             AllowListName = $"acc-test-allowlist-{range.Value}",
        ///             AllowListDesc = "acc-test",
        ///             AllowListType = "IPv4",
        ///             AllowLists = new[]
        ///             {
        ///                 "192.168.0.0/24",
        ///                 "192.168.1.0/24",
        ///             },
        ///         }));
        ///     }
        ///     var fooInstance = new Volcengine.Rds_mysql.Instance("fooInstance", new()
        ///     {
        ///         InstanceName = "acc-test-rds-mysql",
        ///         DbEngineVersion = "MySQL_5_7",
        ///         NodeSpec = "rds.mysql.1c2g",
        ///         PrimaryZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         SecondaryZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         StorageSpace = 80,
        ///         SubnetId = fooSubnet.Id,
        ///         LowerCaseTableNames = "1",
        ///         ChargeInfo = new Volcengine.Rds_mysql.Inputs.InstanceChargeInfoArgs
        ///         {
        ///             ChargeType = "PostPaid",
        ///         },
        ///         Parameters = new[]
        ///         {
        ///             new Volcengine.Rds_mysql.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "auto_increment_increment",
        ///                 ParameterValue = "2",
        ///             },
        ///             new Volcengine.Rds_mysql.Inputs.InstanceParameterArgs
        ///             {
        ///                 ParameterName = "auto_increment_offset",
        ///                 ParameterValue = "4",
        ///             },
        ///         },
        ///         AllowListIds = fooAllowlist.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        ///     var fooAllowlists = Volcengine.Rds_mysql.Allowlists.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         RegionId = "cn-beijing",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<AllowlistsResult> Invoke(AllowlistsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<AllowlistsResult>("volcengine:rds_mysql/allowlists:Allowlists", args ?? new AllowlistsInvokeArgs(), options.WithDefaults());
    }


    public sealed class AllowlistsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The region of the allow lists.
        /// </summary>
        [Input("regionId", required: true)]
        public string RegionId { get; set; } = null!;

        public AllowlistsArgs()
        {
        }
        public static new AllowlistsArgs Empty => new AllowlistsArgs();
    }

    public sealed class AllowlistsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Instance ID. When an InstanceId is specified, the DescribeAllowLists interface will return the whitelist bound to the specified instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The region of the allow lists.
        /// </summary>
        [Input("regionId", required: true)]
        public Input<string> RegionId { get; set; } = null!;

        public AllowlistsInvokeArgs()
        {
        }
        public static new AllowlistsInvokeArgs Empty => new AllowlistsInvokeArgs();
    }


    [OutputType]
    public sealed class AllowlistsResult
    {
        /// <summary>
        /// The list of allowed list.
        /// </summary>
        public readonly ImmutableArray<Outputs.AllowlistsAllowListResult> AllowLists;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The id of the instance.
        /// </summary>
        public readonly string? InstanceId;
        public readonly string? OutputFile;
        public readonly string RegionId;
        /// <summary>
        /// The total count of Scaling Activity query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private AllowlistsResult(
            ImmutableArray<Outputs.AllowlistsAllowListResult> allowLists,

            string id,

            string? instanceId,

            string? outputFile,

            string regionId,

            int totalCount)
        {
            AllowLists = allowLists;
            Id = id;
            InstanceId = instanceId;
            OutputFile = outputFile;
            RegionId = regionId;
            TotalCount = totalCount;
        }
    }
}
