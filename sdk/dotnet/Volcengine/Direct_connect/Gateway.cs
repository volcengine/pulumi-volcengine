// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Direct_connect
{
    /// <summary>
    /// Provides a resource to manage direct connect gateway
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Direct_connect.Gateway("foo", new()
    ///     {
    ///         Description = "tf-test",
    ///         DirectConnectGatewayName = "tf-test-gateway",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Direct_connect.Inputs.GatewayTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DirectConnectGateway can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:direct_connect/gateway:Gateway default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:direct_connect/gateway:Gateway")]
    public partial class Gateway : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The description of direct connect gateway.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of direct connect gateway.
        /// </summary>
        [Output("directConnectGatewayName")]
        public Output<string?> DirectConnectGatewayName { get; private set; } = null!;

        /// <summary>
        /// The direct connect gateway tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.GatewayTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Gateway resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Gateway(string name, GatewayArgs? args = null, CustomResourceOptions? options = null)
            : base("volcengine:direct_connect/gateway:Gateway", name, args ?? new GatewayArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Gateway(string name, Input<string> id, GatewayState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:direct_connect/gateway:Gateway", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Gateway resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Gateway Get(string name, Input<string> id, GatewayState? state = null, CustomResourceOptions? options = null)
        {
            return new Gateway(name, id, state, options);
        }
    }

    public sealed class GatewayArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of direct connect gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of direct connect gateway.
        /// </summary>
        [Input("directConnectGatewayName")]
        public Input<string>? DirectConnectGatewayName { get; set; }

        [Input("tags")]
        private InputList<Inputs.GatewayTagArgs>? _tags;

        /// <summary>
        /// The direct connect gateway tags.
        /// </summary>
        public InputList<Inputs.GatewayTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GatewayTagArgs>());
            set => _tags = value;
        }

        public GatewayArgs()
        {
        }
        public static new GatewayArgs Empty => new GatewayArgs();
    }

    public sealed class GatewayState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of direct connect gateway.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of direct connect gateway.
        /// </summary>
        [Input("directConnectGatewayName")]
        public Input<string>? DirectConnectGatewayName { get; set; }

        [Input("tags")]
        private InputList<Inputs.GatewayTagGetArgs>? _tags;

        /// <summary>
        /// The direct connect gateway tags.
        /// </summary>
        public InputList<Inputs.GatewayTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GatewayTagGetArgs>());
            set => _tags = value;
        }

        public GatewayState()
        {
        }
        public static new GatewayState Empty => new GatewayState();
    }
}
