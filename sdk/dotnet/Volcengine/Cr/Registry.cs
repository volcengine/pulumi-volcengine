// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Cr
{
    /// <summary>
    /// Provides a resource to manage cr registry
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Cr.Registry("foo", new()
    ///     {
    ///         DeleteImmediately = false,
    ///         Password = "1qaz!QAZ",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CR Instance can be imported using the name, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:cr/registry:Registry default enterprise-x
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:cr/registry:Registry")]
    public partial class Registry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The charge type of registry.
        /// </summary>
        [Output("chargeType")]
        public Output<string> ChargeType { get; private set; } = null!;

        /// <summary>
        /// The creation time of registry.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Whether delete registry immediately. Only effected in delete action.
        /// </summary>
        [Output("deleteImmediately")]
        public Output<bool?> DeleteImmediately { get; private set; } = null!;

        /// <summary>
        /// The domain of registry.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<Outputs.RegistryDomain>> Domains { get; private set; } = null!;

        /// <summary>
        /// The name of registry.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The password of registry user.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// The status of registry.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.RegistryStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// The type of registry.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The status of user.
        /// </summary>
        [Output("userStatus")]
        public Output<string> UserStatus { get; private set; } = null!;

        /// <summary>
        /// The username of cr instance.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a Registry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Registry(string name, RegistryArgs? args = null, CustomResourceOptions? options = null)
            : base("volcengine:cr/registry:Registry", name, args ?? new RegistryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Registry(string name, Input<string> id, RegistryState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:cr/registry:Registry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Registry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Registry Get(string name, Input<string> id, RegistryState? state = null, CustomResourceOptions? options = null)
        {
            return new Registry(name, id, state, options);
        }
    }

    public sealed class RegistryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether delete registry immediately. Only effected in delete action.
        /// </summary>
        [Input("deleteImmediately")]
        public Input<bool>? DeleteImmediately { get; set; }

        /// <summary>
        /// The name of registry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of registry user.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public RegistryArgs()
        {
        }
        public static new RegistryArgs Empty => new RegistryArgs();
    }

    public sealed class RegistryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The charge type of registry.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// The creation time of registry.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Whether delete registry immediately. Only effected in delete action.
        /// </summary>
        [Input("deleteImmediately")]
        public Input<bool>? DeleteImmediately { get; set; }

        [Input("domains")]
        private InputList<Inputs.RegistryDomainGetArgs>? _domains;

        /// <summary>
        /// The domain of registry.
        /// </summary>
        public InputList<Inputs.RegistryDomainGetArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.RegistryDomainGetArgs>());
            set => _domains = value;
        }

        /// <summary>
        /// The name of registry.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The password of registry user.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("statuses")]
        private InputList<Inputs.RegistryStatusGetArgs>? _statuses;

        /// <summary>
        /// The status of registry.
        /// </summary>
        public InputList<Inputs.RegistryStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.RegistryStatusGetArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// The type of registry.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The status of user.
        /// </summary>
        [Input("userStatus")]
        public Input<string>? UserStatus { get; set; }

        /// <summary>
        /// The username of cr instance.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public RegistryState()
        {
        }
        public static new RegistryState Empty => new RegistryState();
    }
}
