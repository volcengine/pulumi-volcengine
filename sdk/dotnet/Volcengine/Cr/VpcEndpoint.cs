// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Cr
{
    /// <summary>
    /// Provides a resource to manage cr vpc endpoint
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Cr.VpcEndpoint("foo", new()
    ///     {
    ///         Registry = "enterprise-1",
    ///         Vpcs = new[]
    ///         {
    ///             new Volcengine.Cr.Inputs.VpcEndpointVpcArgs
    ///             {
    ///                 AccountId = 0,
    ///                 VpcId = "vpc-3resbfzl3xgjk5zsk2iuq3vhk",
    ///             },
    ///             new Volcengine.Cr.Inputs.VpcEndpointVpcArgs
    ///             {
    ///                 SubnetId = "subnet-2d62do4697i8058ozfdszxl30",
    ///                 VpcId = "vpc-3red9li8dd8g05zsk2iadytvy",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CR Vpc endpoint can be imported using the crVpcEndpoint:registry, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:cr/vpcEndpoint:VpcEndpoint default crVpcEndpoint:cr-basic
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:cr/vpcEndpoint:VpcEndpoint")]
    public partial class VpcEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Cr Registry name.
        /// </summary>
        [Output("registry")]
        public Output<string> Registry { get; private set; } = null!;

        /// <summary>
        /// List of vpc meta. When apply is executed for the first time, the vpcs in the tf file will be added to the existing vpcs, and subsequent apply will overwrite the existing vpcs with the vpcs in the tf file.
        /// </summary>
        [Output("vpcs")]
        public Output<ImmutableArray<Outputs.VpcEndpointVpc>> Vpcs { get; private set; } = null!;


        /// <summary>
        /// Create a VpcEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VpcEndpoint(string name, VpcEndpointArgs args, CustomResourceOptions? options = null)
            : base("volcengine:cr/vpcEndpoint:VpcEndpoint", name, args ?? new VpcEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VpcEndpoint(string name, Input<string> id, VpcEndpointState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:cr/vpcEndpoint:VpcEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VpcEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VpcEndpoint Get(string name, Input<string> id, VpcEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new VpcEndpoint(name, id, state, options);
        }
    }

    public sealed class VpcEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Cr Registry name.
        /// </summary>
        [Input("registry", required: true)]
        public Input<string> Registry { get; set; } = null!;

        [Input("vpcs", required: true)]
        private InputList<Inputs.VpcEndpointVpcArgs>? _vpcs;

        /// <summary>
        /// List of vpc meta. When apply is executed for the first time, the vpcs in the tf file will be added to the existing vpcs, and subsequent apply will overwrite the existing vpcs with the vpcs in the tf file.
        /// </summary>
        public InputList<Inputs.VpcEndpointVpcArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.VpcEndpointVpcArgs>());
            set => _vpcs = value;
        }

        public VpcEndpointArgs()
        {
        }
        public static new VpcEndpointArgs Empty => new VpcEndpointArgs();
    }

    public sealed class VpcEndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Cr Registry name.
        /// </summary>
        [Input("registry")]
        public Input<string>? Registry { get; set; }

        [Input("vpcs")]
        private InputList<Inputs.VpcEndpointVpcGetArgs>? _vpcs;

        /// <summary>
        /// List of vpc meta. When apply is executed for the first time, the vpcs in the tf file will be added to the existing vpcs, and subsequent apply will overwrite the existing vpcs with the vpcs in the tf file.
        /// </summary>
        public InputList<Inputs.VpcEndpointVpcGetArgs> Vpcs
        {
            get => _vpcs ?? (_vpcs = new InputList<Inputs.VpcEndpointVpcGetArgs>());
            set => _vpcs = value;
        }

        public VpcEndpointState()
        {
        }
        public static new VpcEndpointState Empty => new VpcEndpointState();
    }
}
