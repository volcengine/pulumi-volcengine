// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Cr
{
    public static class Tags
    {
        /// <summary>
        /// Use this data source to query detailed information of cr tags
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cr.Tags.Invoke(new()
        ///     {
        ///         Namespace = "test",
        ///         Registry = "enterprise-1",
        ///         Repository = "repo",
        ///         Types = new[]
        ///         {
        ///             "Image",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<TagsResult> InvokeAsync(TagsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<TagsResult>("volcengine:cr/tags:Tags", args ?? new TagsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cr tags
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cr.Tags.Invoke(new()
        ///     {
        ///         Namespace = "test",
        ///         Registry = "enterprise-1",
        ///         Repository = "repo",
        ///         Types = new[]
        ///         {
        ///             "Image",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<TagsResult> Invoke(TagsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<TagsResult>("volcengine:cr/tags:Tags", args ?? new TagsInvokeArgs(), options.WithDefaults());
    }


    public sealed class TagsArgs : global::Pulumi.InvokeArgs
    {
        [Input("names")]
        private List<string>? _names;

        /// <summary>
        /// The list of instance names.
        /// </summary>
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        /// <summary>
        /// The CR namespace.
        /// </summary>
        [Input("namespace", required: true)]
        public string Namespace { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The CR instance name.
        /// </summary>
        [Input("registry", required: true)]
        public string Registry { get; set; } = null!;

        /// <summary>
        /// The repository name.
        /// </summary>
        [Input("repository", required: true)]
        public string Repository { get; set; } = null!;

        [Input("types")]
        private List<string>? _types;

        /// <summary>
        /// The list of OCI product tag type.
        /// </summary>
        public List<string> Types
        {
            get => _types ?? (_types = new List<string>());
            set => _types = value;
        }

        public TagsArgs()
        {
        }
        public static new TagsArgs Empty => new TagsArgs();
    }

    public sealed class TagsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("names")]
        private InputList<string>? _names;

        /// <summary>
        /// The list of instance names.
        /// </summary>
        public InputList<string> Names
        {
            get => _names ?? (_names = new InputList<string>());
            set => _names = value;
        }

        /// <summary>
        /// The CR namespace.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The CR instance name.
        /// </summary>
        [Input("registry", required: true)]
        public Input<string> Registry { get; set; } = null!;

        /// <summary>
        /// The repository name.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// The list of OCI product tag type.
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        public TagsInvokeArgs()
        {
        }
        public static new TagsInvokeArgs Empty => new TagsInvokeArgs();
    }


    [OutputType]
    public sealed class TagsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Names;
        public readonly string Namespace;
        public readonly string? OutputFile;
        public readonly string Registry;
        public readonly string Repository;
        /// <summary>
        /// The collection of repository query.
        /// </summary>
        public readonly ImmutableArray<Outputs.TagsTagResult> Tags;
        /// <summary>
        /// The total count of tag query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> Types;

        [OutputConstructor]
        private TagsResult(
            string id,

            ImmutableArray<string> names,

            string @namespace,

            string? outputFile,

            string registry,

            string repository,

            ImmutableArray<Outputs.TagsTagResult> tags,

            int totalCount,

            ImmutableArray<string> types)
        {
            Id = id;
            Names = names;
            Namespace = @namespace;
            OutputFile = outputFile;
            Registry = registry;
            Repository = repository;
            Tags = tags;
            TotalCount = totalCount;
            Types = types;
        }
    }
}
