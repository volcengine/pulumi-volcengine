// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Cr
{
    /// <summary>
    /// Provides a resource to manage cr tag
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     // Tag cannot be created,please import by command `terraform import volcengine_cr_tag.default registry:namespace:repository:tag`
    ///     var @default = new Volcengine.Cr.Tag("default", new()
    ///     {
    ///         Namespace = "langyu",
    ///         Registry = "enterprise-1",
    ///         Repository = "repo",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CR tags can be imported using the registry:namespace:repository:tag, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:cr/tag:Tag default cr-basic:namespace-1:repo-1:v1
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:cr/tag:Tag")]
    public partial class Tag : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The chart attribute,valid when tag type is Chart.
        /// </summary>
        [Output("chartAttributes")]
        public Output<ImmutableArray<Outputs.TagChartAttribute>> ChartAttributes { get; private set; } = null!;

        /// <summary>
        /// The digest of image.
        /// </summary>
        [Output("digest")]
        public Output<string> Digest { get; private set; } = null!;

        /// <summary>
        /// The list of image attributes,valid when tag type is Image.
        /// </summary>
        [Output("imageAttributes")]
        public Output<ImmutableArray<Outputs.TagImageAttribute>> ImageAttributes { get; private set; } = null!;

        /// <summary>
        /// The name of OCI product.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The target namespace name.
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;

        /// <summary>
        /// The last push time of OCI product.
        /// </summary>
        [Output("pushTime")]
        public Output<string> PushTime { get; private set; } = null!;

        /// <summary>
        /// The CrRegistry name.
        /// </summary>
        [Output("registry")]
        public Output<string> Registry { get; private set; } = null!;

        /// <summary>
        /// The name of repository.
        /// </summary>
        [Output("repository")]
        public Output<string> Repository { get; private set; } = null!;

        /// <summary>
        /// The size of OCI product.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// The type of OCI product tag.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a Tag resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Tag(string name, TagArgs args, CustomResourceOptions? options = null)
            : base("volcengine:cr/tag:Tag", name, args ?? new TagArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Tag(string name, Input<string> id, TagState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:cr/tag:Tag", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Tag resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Tag Get(string name, Input<string> id, TagState? state = null, CustomResourceOptions? options = null)
        {
            return new Tag(name, id, state, options);
        }
    }

    public sealed class TagArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of OCI product.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The target namespace name.
        /// </summary>
        [Input("namespace", required: true)]
        public Input<string> Namespace { get; set; } = null!;

        /// <summary>
        /// The CrRegistry name.
        /// </summary>
        [Input("registry", required: true)]
        public Input<string> Registry { get; set; } = null!;

        /// <summary>
        /// The name of repository.
        /// </summary>
        [Input("repository", required: true)]
        public Input<string> Repository { get; set; } = null!;

        public TagArgs()
        {
        }
        public static new TagArgs Empty => new TagArgs();
    }

    public sealed class TagState : global::Pulumi.ResourceArgs
    {
        [Input("chartAttributes")]
        private InputList<Inputs.TagChartAttributeGetArgs>? _chartAttributes;

        /// <summary>
        /// The chart attribute,valid when tag type is Chart.
        /// </summary>
        public InputList<Inputs.TagChartAttributeGetArgs> ChartAttributes
        {
            get => _chartAttributes ?? (_chartAttributes = new InputList<Inputs.TagChartAttributeGetArgs>());
            set => _chartAttributes = value;
        }

        /// <summary>
        /// The digest of image.
        /// </summary>
        [Input("digest")]
        public Input<string>? Digest { get; set; }

        [Input("imageAttributes")]
        private InputList<Inputs.TagImageAttributeGetArgs>? _imageAttributes;

        /// <summary>
        /// The list of image attributes,valid when tag type is Image.
        /// </summary>
        public InputList<Inputs.TagImageAttributeGetArgs> ImageAttributes
        {
            get => _imageAttributes ?? (_imageAttributes = new InputList<Inputs.TagImageAttributeGetArgs>());
            set => _imageAttributes = value;
        }

        /// <summary>
        /// The name of OCI product.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The target namespace name.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        /// <summary>
        /// The last push time of OCI product.
        /// </summary>
        [Input("pushTime")]
        public Input<string>? PushTime { get; set; }

        /// <summary>
        /// The CrRegistry name.
        /// </summary>
        [Input("registry")]
        public Input<string>? Registry { get; set; }

        /// <summary>
        /// The name of repository.
        /// </summary>
        [Input("repository")]
        public Input<string>? Repository { get; set; }

        /// <summary>
        /// The size of OCI product.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// The type of OCI product tag.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public TagState()
        {
        }
        public static new TagState Empty => new TagState();
    }
}
