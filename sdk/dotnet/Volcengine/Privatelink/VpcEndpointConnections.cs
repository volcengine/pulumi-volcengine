// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Privatelink
{
    public static class VpcEndpointConnections
    {
        /// <summary>
        /// Use this data source to query detailed information of privatelink vpc endpoint connections
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Privatelink.VpcEndpointConnections.Invoke(new()
        ///     {
        ///         EndpointId = "ep-3rel74u229dz45zsk2i6l69qa",
        ///         ServiceId = "epsvc-2byz5mykk9y4g2dx0efs4aqz3",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<VpcEndpointConnectionsResult> InvokeAsync(VpcEndpointConnectionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<VpcEndpointConnectionsResult>("volcengine:privatelink/vpcEndpointConnections:VpcEndpointConnections", args ?? new VpcEndpointConnectionsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of privatelink vpc endpoint connections
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Privatelink.VpcEndpointConnections.Invoke(new()
        ///     {
        ///         EndpointId = "ep-3rel74u229dz45zsk2i6l69qa",
        ///         ServiceId = "epsvc-2byz5mykk9y4g2dx0efs4aqz3",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<VpcEndpointConnectionsResult> Invoke(VpcEndpointConnectionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<VpcEndpointConnectionsResult>("volcengine:privatelink/vpcEndpointConnections:VpcEndpointConnections", args ?? new VpcEndpointConnectionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class VpcEndpointConnectionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the vpc endpoint.
        /// </summary>
        [Input("endpointId")]
        public string? EndpointId { get; set; }

        /// <summary>
        /// The account id of the vpc endpoint.
        /// </summary>
        [Input("endpointOwnerAccountId")]
        public string? EndpointOwnerAccountId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The id of the vpc endpoint service.
        /// </summary>
        [Input("serviceId", required: true)]
        public string ServiceId { get; set; } = null!;

        public VpcEndpointConnectionsArgs()
        {
        }
        public static new VpcEndpointConnectionsArgs Empty => new VpcEndpointConnectionsArgs();
    }

    public sealed class VpcEndpointConnectionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of the vpc endpoint.
        /// </summary>
        [Input("endpointId")]
        public Input<string>? EndpointId { get; set; }

        /// <summary>
        /// The account id of the vpc endpoint.
        /// </summary>
        [Input("endpointOwnerAccountId")]
        public Input<string>? EndpointOwnerAccountId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The id of the vpc endpoint service.
        /// </summary>
        [Input("serviceId", required: true)]
        public Input<string> ServiceId { get; set; } = null!;

        public VpcEndpointConnectionsInvokeArgs()
        {
        }
        public static new VpcEndpointConnectionsInvokeArgs Empty => new VpcEndpointConnectionsInvokeArgs();
    }


    [OutputType]
    public sealed class VpcEndpointConnectionsResult
    {
        /// <summary>
        /// The list of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.VpcEndpointConnectionsConnectionResult> Connections;
        /// <summary>
        /// The id of the vpc endpoint.
        /// </summary>
        public readonly string? EndpointId;
        /// <summary>
        /// The account id of the vpc endpoint.
        /// </summary>
        public readonly string? EndpointOwnerAccountId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The id of the vpc endpoint service.
        /// </summary>
        public readonly string ServiceId;
        /// <summary>
        /// Returns the total amount of the data list.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private VpcEndpointConnectionsResult(
            ImmutableArray<Outputs.VpcEndpointConnectionsConnectionResult> connections,

            string? endpointId,

            string? endpointOwnerAccountId,

            string id,

            string? outputFile,

            string serviceId,

            int totalCount)
        {
            Connections = connections;
            EndpointId = endpointId;
            EndpointOwnerAccountId = endpointOwnerAccountId;
            Id = id;
            OutputFile = outputFile;
            ServiceId = serviceId;
            TotalCount = totalCount;
        }
    }
}
