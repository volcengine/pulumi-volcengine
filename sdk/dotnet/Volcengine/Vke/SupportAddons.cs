// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vke
{
    public static class SupportAddons
    {
        /// <summary>
        /// Use this data source to query detailed information of vke support addons
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vke.SupportAddons.Invoke(new()
        ///     {
        ///         Categories = new[]
        ///         {
        ///             "Monitor",
        ///         },
        ///         Name = "metrics-server",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<SupportAddonsResult> InvokeAsync(SupportAddonsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<SupportAddonsResult>("volcengine:vke/supportAddons:SupportAddons", args ?? new SupportAddonsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vke support addons
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vke.SupportAddons.Invoke(new()
        ///     {
        ///         Categories = new[]
        ///         {
        ///             "Monitor",
        ///         },
        ///         Name = "metrics-server",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<SupportAddonsResult> Invoke(SupportAddonsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<SupportAddonsResult>("volcengine:vke/supportAddons:SupportAddons", args ?? new SupportAddonsInvokeArgs(), options.WithDefaults());
    }


    public sealed class SupportAddonsArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private List<string>? _categories;

        /// <summary>
        /// The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        /// </summary>
        public List<string> Categories
        {
            get => _categories ?? (_categories = new List<string>());
            set => _categories = value;
        }

        [Input("deployModes")]
        private List<string>? _deployModes;

        /// <summary>
        /// The deploy model, the value is `Managed` or `Unmanaged`.
        /// </summary>
        public List<string> DeployModes
        {
            get => _deployModes ?? (_deployModes = new List<string>());
            set => _deployModes = value;
        }

        [Input("deployNodeTypes")]
        private List<string>? _deployNodeTypes;

        /// <summary>
        /// The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        /// </summary>
        public List<string> DeployNodeTypes
        {
            get => _deployNodeTypes ?? (_deployNodeTypes = new List<string>());
            set => _deployNodeTypes = value;
        }

        [Input("kubernetesVersions")]
        private List<string>? _kubernetesVersions;

        /// <summary>
        /// A list of Kubernetes Versions.
        /// </summary>
        public List<string> KubernetesVersions
        {
            get => _kubernetesVersions ?? (_kubernetesVersions = new List<string>());
            set => _kubernetesVersions = value;
        }

        /// <summary>
        /// The name of the addon.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        [Input("necessaries")]
        private List<string>? _necessaries;

        /// <summary>
        /// The necessaries of addons, the value is `Required` or `Recommended` or `OnDemand`.
        /// </summary>
        public List<string> Necessaries
        {
            get => _necessaries ?? (_necessaries = new List<string>());
            set => _necessaries = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("podNetworkModes")]
        private List<string>? _podNetworkModes;

        /// <summary>
        /// The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        /// </summary>
        public List<string> PodNetworkModes
        {
            get => _podNetworkModes ?? (_podNetworkModes = new List<string>());
            set => _podNetworkModes = value;
        }

        public SupportAddonsArgs()
        {
        }
        public static new SupportAddonsArgs Empty => new SupportAddonsArgs();
    }

    public sealed class SupportAddonsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("categories")]
        private InputList<string>? _categories;

        /// <summary>
        /// The categories of addons, the value is `Storage` or `Network` or `Monitor` or `Scheduler` or `Dns` or `Security` or `Gpu` or `Image`.
        /// </summary>
        public InputList<string> Categories
        {
            get => _categories ?? (_categories = new InputList<string>());
            set => _categories = value;
        }

        [Input("deployModes")]
        private InputList<string>? _deployModes;

        /// <summary>
        /// The deploy model, the value is `Managed` or `Unmanaged`.
        /// </summary>
        public InputList<string> DeployModes
        {
            get => _deployModes ?? (_deployModes = new InputList<string>());
            set => _deployModes = value;
        }

        [Input("deployNodeTypes")]
        private InputList<string>? _deployNodeTypes;

        /// <summary>
        /// The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        /// </summary>
        public InputList<string> DeployNodeTypes
        {
            get => _deployNodeTypes ?? (_deployNodeTypes = new InputList<string>());
            set => _deployNodeTypes = value;
        }

        [Input("kubernetesVersions")]
        private InputList<string>? _kubernetesVersions;

        /// <summary>
        /// A list of Kubernetes Versions.
        /// </summary>
        public InputList<string> KubernetesVersions
        {
            get => _kubernetesVersions ?? (_kubernetesVersions = new InputList<string>());
            set => _kubernetesVersions = value;
        }

        /// <summary>
        /// The name of the addon.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("necessaries")]
        private InputList<string>? _necessaries;

        /// <summary>
        /// The necessaries of addons, the value is `Required` or `Recommended` or `OnDemand`.
        /// </summary>
        public InputList<string> Necessaries
        {
            get => _necessaries ?? (_necessaries = new InputList<string>());
            set => _necessaries = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("podNetworkModes")]
        private InputList<string>? _podNetworkModes;

        /// <summary>
        /// The container network model, the value is `Flannel` or `VpcCniShared`. Flannel: Flannel network model, an independent Underlay container network solution, combined with the global routing capability of VPC, to achieve a high-performance network experience for the cluster. VpcCniShared: VPC-CNI network model, an Underlay container network solution based on the ENI of the private network elastic network card, with high network communication performance.
        /// </summary>
        public InputList<string> PodNetworkModes
        {
            get => _podNetworkModes ?? (_podNetworkModes = new InputList<string>());
            set => _podNetworkModes = value;
        }

        public SupportAddonsInvokeArgs()
        {
        }
        public static new SupportAddonsInvokeArgs Empty => new SupportAddonsInvokeArgs();
    }


    [OutputType]
    public sealed class SupportAddonsResult
    {
        /// <summary>
        /// The collection of addons query.
        /// </summary>
        public readonly ImmutableArray<Outputs.SupportAddonsAddonResult> Addons;
        public readonly ImmutableArray<string> Categories;
        public readonly ImmutableArray<string> DeployModes;
        /// <summary>
        /// The deploy node types.
        /// </summary>
        public readonly ImmutableArray<string> DeployNodeTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> KubernetesVersions;
        /// <summary>
        /// The name of addon.
        /// </summary>
        public readonly string? Name;
        public readonly ImmutableArray<string> Necessaries;
        public readonly string? OutputFile;
        /// <summary>
        /// The network modes of pod.
        /// </summary>
        public readonly ImmutableArray<string> PodNetworkModes;
        /// <summary>
        /// The total count of addons query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private SupportAddonsResult(
            ImmutableArray<Outputs.SupportAddonsAddonResult> addons,

            ImmutableArray<string> categories,

            ImmutableArray<string> deployModes,

            ImmutableArray<string> deployNodeTypes,

            string id,

            ImmutableArray<string> kubernetesVersions,

            string? name,

            ImmutableArray<string> necessaries,

            string? outputFile,

            ImmutableArray<string> podNetworkModes,

            int totalCount)
        {
            Addons = addons;
            Categories = categories;
            DeployModes = deployModes;
            DeployNodeTypes = deployNodeTypes;
            Id = id;
            KubernetesVersions = kubernetesVersions;
            Name = name;
            Necessaries = necessaries;
            OutputFile = outputFile;
            PodNetworkModes = podNetworkModes;
            TotalCount = totalCount;
        }
    }
}
