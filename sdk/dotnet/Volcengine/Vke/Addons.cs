// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vke
{
    public static class Addons
    {
        /// <summary>
        /// Use this data source to query detailed information of vke addons
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vke.Addons.Invoke(new()
        ///     {
        ///         ClusterIds = new[]
        ///         {
        ///             "cccctv1vqtofp49d96ujg",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<AddonsResult> InvokeAsync(AddonsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<AddonsResult>("volcengine:vke/addons:Addons", args ?? new AddonsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vke addons
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vke.Addons.Invoke(new()
        ///     {
        ///         ClusterIds = new[]
        ///         {
        ///             "cccctv1vqtofp49d96ujg",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<AddonsResult> Invoke(AddonsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<AddonsResult>("volcengine:vke/addons:Addons", args ?? new AddonsInvokeArgs(), options.WithDefaults());
    }


    public sealed class AddonsArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private List<string>? _clusterIds;

        /// <summary>
        /// The IDs of Cluster.
        /// </summary>
        public List<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new List<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// ClientToken when the addon is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        /// </summary>
        [Input("createClientToken")]
        public string? CreateClientToken { get; set; }

        [Input("deployModes")]
        private List<string>? _deployModes;

        /// <summary>
        /// The deploy model, the value is `Managed` or `Unmanaged`.
        /// </summary>
        public List<string> DeployModes
        {
            get => _deployModes ?? (_deployModes = new List<string>());
            set => _deployModes = value;
        }

        [Input("deployNodeTypes")]
        private List<string>? _deployNodeTypes;

        /// <summary>
        /// The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        /// </summary>
        public List<string> DeployNodeTypes
        {
            get => _deployNodeTypes ?? (_deployNodeTypes = new List<string>());
            set => _deployNodeTypes = value;
        }

        /// <summary>
        /// A Name Regex of addon.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("names")]
        private List<string>? _names;

        /// <summary>
        /// The Names of addons.
        /// </summary>
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<Inputs.AddonsStatusArgs>? _statuses;

        /// <summary>
        /// Array of addon states to filter.
        /// </summary>
        public List<Inputs.AddonsStatusArgs> Statuses
        {
            get => _statuses ?? (_statuses = new List<Inputs.AddonsStatusArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// The ClientToken when the last addon update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        /// </summary>
        [Input("updateClientToken")]
        public string? UpdateClientToken { get; set; }

        public AddonsArgs()
        {
        }
        public static new AddonsArgs Empty => new AddonsArgs();
    }

    public sealed class AddonsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private InputList<string>? _clusterIds;

        /// <summary>
        /// The IDs of Cluster.
        /// </summary>
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// ClientToken when the addon is created successfully. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        /// </summary>
        [Input("createClientToken")]
        public Input<string>? CreateClientToken { get; set; }

        [Input("deployModes")]
        private InputList<string>? _deployModes;

        /// <summary>
        /// The deploy model, the value is `Managed` or `Unmanaged`.
        /// </summary>
        public InputList<string> DeployModes
        {
            get => _deployModes ?? (_deployModes = new InputList<string>());
            set => _deployModes = value;
        }

        [Input("deployNodeTypes")]
        private InputList<string>? _deployNodeTypes;

        /// <summary>
        /// The deploy node types, the value is `Node` or `VirtualNode`. Only effected when deploy_mode is `Unmanaged`.
        /// </summary>
        public InputList<string> DeployNodeTypes
        {
            get => _deployNodeTypes ?? (_deployNodeTypes = new InputList<string>());
            set => _deployNodeTypes = value;
        }

        /// <summary>
        /// A Name Regex of addon.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("names")]
        private InputList<string>? _names;

        /// <summary>
        /// The Names of addons.
        /// </summary>
        public InputList<string> Names
        {
            get => _names ?? (_names = new InputList<string>());
            set => _names = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<Inputs.AddonsStatusInputArgs>? _statuses;

        /// <summary>
        /// Array of addon states to filter.
        /// </summary>
        public InputList<Inputs.AddonsStatusInputArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.AddonsStatusInputArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// The ClientToken when the last addon update succeeded. ClientToken is a string that guarantees the idempotency of the request. This string is passed in by the caller.
        /// </summary>
        [Input("updateClientToken")]
        public Input<string>? UpdateClientToken { get; set; }

        public AddonsInvokeArgs()
        {
        }
        public static new AddonsInvokeArgs Empty => new AddonsInvokeArgs();
    }


    [OutputType]
    public sealed class AddonsResult
    {
        /// <summary>
        /// The collection of addon query.
        /// </summary>
        public readonly ImmutableArray<Outputs.AddonsAddonResult> Addons;
        public readonly ImmutableArray<string> ClusterIds;
        public readonly string? CreateClientToken;
        public readonly ImmutableArray<string> DeployModes;
        public readonly ImmutableArray<string> DeployNodeTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameRegex;
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly ImmutableArray<Outputs.AddonsStatusResult> Statuses;
        /// <summary>
        /// The total count of addon query.
        /// </summary>
        public readonly int TotalCount;
        public readonly string? UpdateClientToken;

        [OutputConstructor]
        private AddonsResult(
            ImmutableArray<Outputs.AddonsAddonResult> addons,

            ImmutableArray<string> clusterIds,

            string? createClientToken,

            ImmutableArray<string> deployModes,

            ImmutableArray<string> deployNodeTypes,

            string id,

            string? nameRegex,

            ImmutableArray<string> names,

            string? outputFile,

            ImmutableArray<Outputs.AddonsStatusResult> statuses,

            int totalCount,

            string? updateClientToken)
        {
            Addons = addons;
            ClusterIds = clusterIds;
            CreateClientToken = createClientToken;
            DeployModes = deployModes;
            DeployNodeTypes = deployNodeTypes;
            Id = id;
            NameRegex = nameRegex;
            Names = names;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
            UpdateClientToken = updateClientToken;
        }
    }
}
