// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vke.Outputs
{

    [OutputType]
    public sealed class NodePoolsNodePoolResult
    {
        /// <summary>
        /// Is AdditionalContainerStorageEnabled of NodeConfig.
        /// </summary>
        public readonly bool AdditionalContainerStorageEnabled;
        /// <summary>
        /// Is auto renew of the PrePaid instance of NodeConfig.
        /// </summary>
        public readonly bool AutoRenew;
        /// <summary>
        /// The AutoRenewPeriod of the PrePaid instance of NodeConfig.
        /// </summary>
        public readonly int AutoRenewPeriod;
        /// <summary>
        /// The ClusterId of NodePool.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The Condition of Status.
        /// </summary>
        public readonly ImmutableArray<string> ConditionTypes;
        /// <summary>
        /// The Cordon of KubernetesConfig.
        /// </summary>
        public readonly bool Cordon;
        /// <summary>
        /// The ClientToken when successfully created.
        /// </summary>
        public readonly string CreateClientToken;
        /// <summary>
        /// The CreateTime of NodePool.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The DataVolume of NodeConfig.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodePoolsNodePoolDataVolumeResult> DataVolumes;
        /// <summary>
        /// The DesiredReplicas of AutoScaling.
        /// </summary>
        public readonly int DesiredReplicas;
        /// <summary>
        /// Tags for Ecs.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodePoolsNodePoolEcsTagResult> EcsTags;
        /// <summary>
        /// Is Enabled of AutoScaling.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The IDs of HpcCluster.
        /// </summary>
        public readonly ImmutableArray<string> HpcClusterIds;
        /// <summary>
        /// The Id of NodePool.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ImageId of NodeConfig.
        /// </summary>
        public readonly string ImageId;
        /// <summary>
        /// The InitializeScript of NodeConfig.
        /// </summary>
        public readonly string InitializeScript;
        /// <summary>
        /// The InstanceChargeType of NodeConfig.
        /// </summary>
        public readonly string InstanceChargeType;
        /// <summary>
        /// The InstanceTypeIds of NodeConfig.
        /// </summary>
        public readonly ImmutableArray<string> InstanceTypeIds;
        /// <summary>
        /// The LabelContent of KubernetesConfig.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodePoolsNodePoolLabelContentResult> LabelContents;
        /// <summary>
        /// The login SshKeyPairName of NodeConfig.
        /// </summary>
        public readonly string LoginKeyPairName;
        /// <summary>
        /// The login type of NodeConfig.
        /// </summary>
        public readonly string LoginType;
        /// <summary>
        /// The MaxReplicas of AutoScaling.
        /// </summary>
        public readonly int MaxReplicas;
        /// <summary>
        /// The MinReplicas of AutoScaling.
        /// </summary>
        public readonly int MinReplicas;
        /// <summary>
        /// The Name of NodePool.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The NamePrefix of NodeConfig.
        /// </summary>
        public readonly string NamePrefix;
        /// <summary>
        /// The NodeStatistics of NodeConfig.
        /// </summary>
        public readonly Outputs.NodePoolsNodePoolNodeStatisticsResult NodeStatistics;
        /// <summary>
        /// The period of the PrePaid instance of NodeConfig.
        /// </summary>
        public readonly int Period;
        /// <summary>
        /// The Phase of Status. The value can be `Creating` or `Running` or `Updating` or `Deleting` or `Failed` or `Scaling`.
        /// </summary>
        public readonly string Phase;
        /// <summary>
        /// The Priority of AutoScaling.
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// The SecurityGroupIds of NodeConfig.
        /// </summary>
        public readonly ImmutableArray<string> SecurityGroupIds;
        /// <summary>
        /// The SecurityStrategies of NodeConfig.
        /// </summary>
        public readonly ImmutableArray<string> SecurityStrategies;
        /// <summary>
        /// The SecurityStrategyEnabled of NodeConfig.
        /// </summary>
        public readonly bool SecurityStrategyEnabled;
        /// <summary>
        /// The SubnetId of NodeConfig.
        /// </summary>
        public readonly ImmutableArray<string> SubnetIds;
        /// <summary>
        /// Multi-subnet scheduling strategy for nodes. The value can be `ZoneBalance` or `Priority`.
        /// </summary>
        public readonly string SubnetPolicy;
        /// <summary>
        /// The SystemVolume of NodeConfig.
        /// </summary>
        public readonly Outputs.NodePoolsNodePoolSystemVolumeResult SystemVolume;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodePoolsNodePoolTagResult> Tags;
        /// <summary>
        /// The TaintContent of NodeConfig.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodePoolsNodePoolTaintContentResult> TaintContents;
        /// <summary>
        /// The ClientToken when last update was successful.
        /// </summary>
        public readonly string UpdateClientToken;
        /// <summary>
        /// The UpdateTime time of NodePool.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private NodePoolsNodePoolResult(
            bool additionalContainerStorageEnabled,

            bool autoRenew,

            int autoRenewPeriod,

            string clusterId,

            ImmutableArray<string> conditionTypes,

            bool cordon,

            string createClientToken,

            string createTime,

            ImmutableArray<Outputs.NodePoolsNodePoolDataVolumeResult> dataVolumes,

            int desiredReplicas,

            ImmutableArray<Outputs.NodePoolsNodePoolEcsTagResult> ecsTags,

            bool enabled,

            ImmutableArray<string> hpcClusterIds,

            string id,

            string imageId,

            string initializeScript,

            string instanceChargeType,

            ImmutableArray<string> instanceTypeIds,

            ImmutableArray<Outputs.NodePoolsNodePoolLabelContentResult> labelContents,

            string loginKeyPairName,

            string loginType,

            int maxReplicas,

            int minReplicas,

            string name,

            string namePrefix,

            Outputs.NodePoolsNodePoolNodeStatisticsResult nodeStatistics,

            int period,

            string phase,

            int priority,

            ImmutableArray<string> securityGroupIds,

            ImmutableArray<string> securityStrategies,

            bool securityStrategyEnabled,

            ImmutableArray<string> subnetIds,

            string subnetPolicy,

            Outputs.NodePoolsNodePoolSystemVolumeResult systemVolume,

            ImmutableArray<Outputs.NodePoolsNodePoolTagResult> tags,

            ImmutableArray<Outputs.NodePoolsNodePoolTaintContentResult> taintContents,

            string updateClientToken,

            string updateTime)
        {
            AdditionalContainerStorageEnabled = additionalContainerStorageEnabled;
            AutoRenew = autoRenew;
            AutoRenewPeriod = autoRenewPeriod;
            ClusterId = clusterId;
            ConditionTypes = conditionTypes;
            Cordon = cordon;
            CreateClientToken = createClientToken;
            CreateTime = createTime;
            DataVolumes = dataVolumes;
            DesiredReplicas = desiredReplicas;
            EcsTags = ecsTags;
            Enabled = enabled;
            HpcClusterIds = hpcClusterIds;
            Id = id;
            ImageId = imageId;
            InitializeScript = initializeScript;
            InstanceChargeType = instanceChargeType;
            InstanceTypeIds = instanceTypeIds;
            LabelContents = labelContents;
            LoginKeyPairName = loginKeyPairName;
            LoginType = loginType;
            MaxReplicas = maxReplicas;
            MinReplicas = minReplicas;
            Name = name;
            NamePrefix = namePrefix;
            NodeStatistics = nodeStatistics;
            Period = period;
            Phase = phase;
            Priority = priority;
            SecurityGroupIds = securityGroupIds;
            SecurityStrategies = securityStrategies;
            SecurityStrategyEnabled = securityStrategyEnabled;
            SubnetIds = subnetIds;
            SubnetPolicy = subnetPolicy;
            SystemVolume = systemVolume;
            Tags = tags;
            TaintContents = taintContents;
            UpdateClientToken = updateClientToken;
            UpdateTime = updateTime;
        }
    }
}
