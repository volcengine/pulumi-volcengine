// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vke
{
    public static class Kubeconfigs
    {
        /// <summary>
        /// Use this data source to query detailed information of vke kubeconfigs
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vke.Kubeconfigs.Invoke(new()
        ///     {
        ///         ClusterIds = new[]
        ///         {
        ///             "cce7hb97qtofmj1oi4udg",
        ///         },
        ///         Types = new[]
        ///         {
        ///             "Private",
        ///             "Public",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<KubeconfigsResult> InvokeAsync(KubeconfigsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<KubeconfigsResult>("volcengine:vke/kubeconfigs:Kubeconfigs", args ?? new KubeconfigsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vke kubeconfigs
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vke.Kubeconfigs.Invoke(new()
        ///     {
        ///         ClusterIds = new[]
        ///         {
        ///             "cce7hb97qtofmj1oi4udg",
        ///         },
        ///         Types = new[]
        ///         {
        ///             "Private",
        ///             "Public",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<KubeconfigsResult> Invoke(KubeconfigsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<KubeconfigsResult>("volcengine:vke/kubeconfigs:Kubeconfigs", args ?? new KubeconfigsInvokeArgs(), options.WithDefaults());
    }


    public sealed class KubeconfigsArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private List<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public List<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new List<string>());
            set => _clusterIds = value;
        }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Kubeconfig IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Kubeconfig.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The page number of Kubeconfigs query.
        /// </summary>
        [Input("pageNumber")]
        public int? PageNumber { get; set; }

        /// <summary>
        /// The page size of Kubeconfigs query.
        /// </summary>
        [Input("pageSize")]
        public int? PageSize { get; set; }

        [Input("types")]
        private List<string>? _types;

        /// <summary>
        /// The type of Kubeconfigs query.
        /// </summary>
        public List<string> Types
        {
            get => _types ?? (_types = new List<string>());
            set => _types = value;
        }

        public KubeconfigsArgs()
        {
        }
        public static new KubeconfigsArgs Empty => new KubeconfigsArgs();
    }

    public sealed class KubeconfigsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private InputList<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Kubeconfig IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Kubeconfig.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The page number of Kubeconfigs query.
        /// </summary>
        [Input("pageNumber")]
        public Input<int>? PageNumber { get; set; }

        /// <summary>
        /// The page size of Kubeconfigs query.
        /// </summary>
        [Input("pageSize")]
        public Input<int>? PageSize { get; set; }

        [Input("types")]
        private InputList<string>? _types;

        /// <summary>
        /// The type of Kubeconfigs query.
        /// </summary>
        public InputList<string> Types
        {
            get => _types ?? (_types = new InputList<string>());
            set => _types = value;
        }

        public KubeconfigsInvokeArgs()
        {
        }
        public static new KubeconfigsInvokeArgs Empty => new KubeconfigsInvokeArgs();
    }


    [OutputType]
    public sealed class KubeconfigsResult
    {
        public readonly ImmutableArray<string> ClusterIds;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The collection of VkeKubeconfig query.
        /// </summary>
        public readonly ImmutableArray<Outputs.KubeconfigsKubeconfigResult> Kubeconfigs;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        public readonly int PageNumber;
        public readonly int PageSize;
        /// <summary>
        /// The total count of Kubeconfig query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> Types;

        [OutputConstructor]
        private KubeconfigsResult(
            ImmutableArray<string> clusterIds,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.KubeconfigsKubeconfigResult> kubeconfigs,

            string? nameRegex,

            string? outputFile,

            int pageNumber,

            int pageSize,

            int totalCount,

            ImmutableArray<string> types)
        {
            ClusterIds = clusterIds;
            Id = id;
            Ids = ids;
            Kubeconfigs = kubeconfigs;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            PageNumber = pageNumber;
            PageSize = pageSize;
            TotalCount = totalCount;
            Types = types;
        }
    }
}
