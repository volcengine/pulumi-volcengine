// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vke
{
    /// <summary>
    /// Provides a resource to manage vke default node pool
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-project1",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-subnet-test-2",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = "cn-beijing-a",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
    ///     {
    ///         VpcId = fooVpc.Id,
    ///         SecurityGroupName = "acc-test-security-group2",
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
    ///     {
    ///         ImageId = "image-ybqi99s7yq8rx7mnk44b",
    ///         InstanceType = "ecs.g1ie.large",
    ///         InstanceName = "acc-test-ecs-name2",
    ///         Password = "93f0cb0614Aab12",
    ///         InstanceChargeType = "PostPaid",
    ///         SystemVolumeType = "ESSD_PL0",
    ///         SystemVolumeSize = 40,
    ///         SubnetId = fooSubnet.Id,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             fooSecurityGroup.Id,
    ///         },
    ///     });
    /// 
    ///     var fooCluster = new Volcengine.Vke.Cluster("fooCluster", new()
    ///     {
    ///         Description = "created by terraform",
    ///         DeleteProtectionEnabled = false,
    ///         ClusterConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigArgs
    ///         {
    ///             SubnetIds = new[]
    ///             {
    ///                 fooSubnet.Id,
    ///             },
    ///             ApiServerPublicAccessEnabled = true,
    ///             ApiServerPublicAccessConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
    ///             {
    ///                 PublicAccessNetworkConfig = new Volcengine.Vke.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
    ///                 {
    ///                     BillingType = "PostPaidByBandwidth",
    ///                     Bandwidth = 1,
    ///                 },
    ///             },
    ///             ResourcePublicAccessDefaultEnabled = true,
    ///         },
    ///         PodsConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigArgs
    ///         {
    ///             PodNetworkMode = "VpcCniShared",
    ///             VpcCniConfig = new Volcengine.Vke.Inputs.ClusterPodsConfigVpcCniConfigArgs
    ///             {
    ///                 SubnetIds = new[]
    ///                 {
    ///                     fooSubnet.Id,
    ///                 },
    ///             },
    ///         },
    ///         ServicesConfig = new Volcengine.Vke.Inputs.ClusterServicesConfigArgs
    ///         {
    ///             ServiceCidrsv4s = new[]
    ///             {
    ///                 "172.30.0.0/18",
    ///             },
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vke.Inputs.ClusterTagArgs
    ///             {
    ///                 Key = "tf-k1",
    ///                 Value = "tf-v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooDefaultNodePool = new Volcengine.Vke.DefaultNodePool("fooDefaultNodePool", new()
    ///     {
    ///         ClusterId = fooCluster.Id,
    ///         NodeConfig = new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigArgs
    ///         {
    ///             Security = new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigSecurityArgs
    ///             {
    ///                 Login = new Volcengine.Vke.Inputs.DefaultNodePoolNodeConfigSecurityLoginArgs
    ///                 {
    ///                     Password = "amw4WTdVcTRJVVFsUXpVTw==",
    ///                 },
    ///                 SecurityGroupIds = new[]
    ///                 {
    ///                     fooSecurityGroup.Id,
    ///                 },
    ///                 SecurityStrategies = new[]
    ///                 {
    ///                     "Hids",
    ///                 },
    ///             },
    ///             InitializeScript = "ISMvYmluL2Jhc2gKZWNobyAx",
    ///         },
    ///         KubernetesConfig = new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigArgs
    ///         {
    ///             Labels = new[]
    ///             {
    ///                 new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigLabelArgs
    ///                 {
    ///                     Key = "tf-key1",
    ///                     Value = "tf-value1",
    ///                 },
    ///                 new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigLabelArgs
    ///                 {
    ///                     Key = "tf-key2",
    ///                     Value = "tf-value2",
    ///                 },
    ///             },
    ///             Taints = new[]
    ///             {
    ///                 new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigTaintArgs
    ///                 {
    ///                     Key = "tf-key3",
    ///                     Value = "tf-value3",
    ///                     Effect = "NoSchedule",
    ///                 },
    ///                 new Volcengine.Vke.Inputs.DefaultNodePoolKubernetesConfigTaintArgs
    ///                 {
    ///                     Key = "tf-key4",
    ///                     Value = "tf-value4",
    ///                     Effect = "NoSchedule",
    ///                 },
    ///             },
    ///             Cordon = true,
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vke.Inputs.DefaultNodePoolTagArgs
    ///             {
    ///                 Key = "tf-k1",
    ///                 Value = "tf-v1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VKE default node can be imported using the node id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:vke/defaultNodePool:DefaultNodePool default nc5t5epmrsf****
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vke/defaultNodePool:DefaultNodePool")]
    public partial class DefaultNodePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ClusterId of NodePool.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The ECS InstanceIds add to NodePool.
        /// </summary>
        [Output("instances")]
        public Output<ImmutableArray<Outputs.DefaultNodePoolInstance>> Instances { get; private set; } = null!;

        /// <summary>
        /// Is import of the DefaultNodePool. It only works when imported, set to true.
        /// </summary>
        [Output("isImport")]
        public Output<bool> IsImport { get; private set; } = null!;

        /// <summary>
        /// The KubernetesConfig of NodeConfig.
        /// </summary>
        [Output("kubernetesConfig")]
        public Output<Outputs.DefaultNodePoolKubernetesConfig> KubernetesConfig { get; private set; } = null!;

        /// <summary>
        /// The Config of NodePool.
        /// </summary>
        [Output("nodeConfig")]
        public Output<Outputs.DefaultNodePoolNodeConfig> NodeConfig { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.DefaultNodePoolTag>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a DefaultNodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DefaultNodePool(string name, DefaultNodePoolArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vke/defaultNodePool:DefaultNodePool", name, args ?? new DefaultNodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DefaultNodePool(string name, Input<string> id, DefaultNodePoolState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vke/defaultNodePool:DefaultNodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DefaultNodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DefaultNodePool Get(string name, Input<string> id, DefaultNodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new DefaultNodePool(name, id, state, options);
        }
    }

    public sealed class DefaultNodePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ClusterId of NodePool.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        [Input("instances")]
        private InputList<Inputs.DefaultNodePoolInstanceArgs>? _instances;

        /// <summary>
        /// The ECS InstanceIds add to NodePool.
        /// </summary>
        public InputList<Inputs.DefaultNodePoolInstanceArgs> Instances
        {
            get => _instances ?? (_instances = new InputList<Inputs.DefaultNodePoolInstanceArgs>());
            set => _instances = value;
        }

        /// <summary>
        /// The KubernetesConfig of NodeConfig.
        /// </summary>
        [Input("kubernetesConfig", required: true)]
        public Input<Inputs.DefaultNodePoolKubernetesConfigArgs> KubernetesConfig { get; set; } = null!;

        /// <summary>
        /// The Config of NodePool.
        /// </summary>
        [Input("nodeConfig", required: true)]
        public Input<Inputs.DefaultNodePoolNodeConfigArgs> NodeConfig { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.DefaultNodePoolTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.DefaultNodePoolTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DefaultNodePoolTagArgs>());
            set => _tags = value;
        }

        public DefaultNodePoolArgs()
        {
        }
        public static new DefaultNodePoolArgs Empty => new DefaultNodePoolArgs();
    }

    public sealed class DefaultNodePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ClusterId of NodePool.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("instances")]
        private InputList<Inputs.DefaultNodePoolInstanceGetArgs>? _instances;

        /// <summary>
        /// The ECS InstanceIds add to NodePool.
        /// </summary>
        public InputList<Inputs.DefaultNodePoolInstanceGetArgs> Instances
        {
            get => _instances ?? (_instances = new InputList<Inputs.DefaultNodePoolInstanceGetArgs>());
            set => _instances = value;
        }

        /// <summary>
        /// Is import of the DefaultNodePool. It only works when imported, set to true.
        /// </summary>
        [Input("isImport")]
        public Input<bool>? IsImport { get; set; }

        /// <summary>
        /// The KubernetesConfig of NodeConfig.
        /// </summary>
        [Input("kubernetesConfig")]
        public Input<Inputs.DefaultNodePoolKubernetesConfigGetArgs>? KubernetesConfig { get; set; }

        /// <summary>
        /// The Config of NodePool.
        /// </summary>
        [Input("nodeConfig")]
        public Input<Inputs.DefaultNodePoolNodeConfigGetArgs>? NodeConfig { get; set; }

        [Input("tags")]
        private InputList<Inputs.DefaultNodePoolTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.DefaultNodePoolTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.DefaultNodePoolTagGetArgs>());
            set => _tags = value;
        }

        public DefaultNodePoolState()
        {
        }
        public static new DefaultNodePoolState Empty => new DefaultNodePoolState();
    }
}
