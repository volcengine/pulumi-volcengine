// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vke
{
    public static class Nodes
    {
        /// <summary>
        /// Use this data source to query detailed information of vke nodes
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vke.Nodes.Invoke(new()
        ///     {
        ///         ClusterIds = new[]
        ///         {
        ///             "c123",
        ///             "c456",
        ///         },
        ///         Ids = new[]
        ///         {
        ///             "ncaa3e5mrsferqkomi190",
        ///         },
        ///         Statuses = new[]
        ///         {
        ///             new Volcengine.Vke.Inputs.NodesStatusInputArgs
        ///             {
        ///                 ConditionsType = "Progressing",
        ///                 Phase = "Creating",
        ///             },
        ///             new Volcengine.Vke.Inputs.NodesStatusInputArgs
        ///             {
        ///                 ConditionsType = "Progressing123",
        ///                 Phase = "Creating123",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<NodesResult> InvokeAsync(NodesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<NodesResult>("volcengine:vke/nodes:Nodes", args ?? new NodesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vke nodes
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vke.Nodes.Invoke(new()
        ///     {
        ///         ClusterIds = new[]
        ///         {
        ///             "c123",
        ///             "c456",
        ///         },
        ///         Ids = new[]
        ///         {
        ///             "ncaa3e5mrsferqkomi190",
        ///         },
        ///         Statuses = new[]
        ///         {
        ///             new Volcengine.Vke.Inputs.NodesStatusInputArgs
        ///             {
        ///                 ConditionsType = "Progressing",
        ///                 Phase = "Creating",
        ///             },
        ///             new Volcengine.Vke.Inputs.NodesStatusInputArgs
        ///             {
        ///                 ConditionsType = "Progressing123",
        ///                 Phase = "Creating123",
        ///             },
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<NodesResult> Invoke(NodesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<NodesResult>("volcengine:vke/nodes:Nodes", args ?? new NodesInvokeArgs(), options.WithDefaults());
    }


    public sealed class NodesArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private List<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public List<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new List<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// The Create Client Token.
        /// </summary>
        [Input("createClientToken")]
        public string? CreateClientToken { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Node IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Name of Node.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A Name Regex of Node.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("nodePoolIds")]
        private List<string>? _nodePoolIds;

        /// <summary>
        /// The Node Pool IDs.
        /// </summary>
        public List<string> NodePoolIds
        {
            get => _nodePoolIds ?? (_nodePoolIds = new List<string>());
            set => _nodePoolIds = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<Inputs.NodesStatusArgs>? _statuses;

        /// <summary>
        /// The Status of filter.
        /// </summary>
        public List<Inputs.NodesStatusArgs> Statuses
        {
            get => _statuses ?? (_statuses = new List<Inputs.NodesStatusArgs>());
            set => _statuses = value;
        }

        [Input("zoneIds")]
        private List<string>? _zoneIds;

        /// <summary>
        /// The Zone IDs.
        /// </summary>
        public List<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new List<string>());
            set => _zoneIds = value;
        }

        public NodesArgs()
        {
        }
        public static new NodesArgs Empty => new NodesArgs();
    }

    public sealed class NodesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private InputList<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// The Create Client Token.
        /// </summary>
        [Input("createClientToken")]
        public Input<string>? CreateClientToken { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Node IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Name of Node.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Name Regex of Node.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("nodePoolIds")]
        private InputList<string>? _nodePoolIds;

        /// <summary>
        /// The Node Pool IDs.
        /// </summary>
        public InputList<string> NodePoolIds
        {
            get => _nodePoolIds ?? (_nodePoolIds = new InputList<string>());
            set => _nodePoolIds = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<Inputs.NodesStatusInputArgs>? _statuses;

        /// <summary>
        /// The Status of filter.
        /// </summary>
        public InputList<Inputs.NodesStatusInputArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.NodesStatusInputArgs>());
            set => _statuses = value;
        }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The Zone IDs.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public NodesInvokeArgs()
        {
        }
        public static new NodesInvokeArgs Empty => new NodesInvokeArgs();
    }


    [OutputType]
    public sealed class NodesResult
    {
        public readonly ImmutableArray<string> ClusterIds;
        /// <summary>
        /// The create client token of node.
        /// </summary>
        public readonly string? CreateClientToken;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The name of Node.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly ImmutableArray<string> NodePoolIds;
        /// <summary>
        /// The collection of Node query.
        /// </summary>
        public readonly ImmutableArray<Outputs.NodesNodeResult> Nodes;
        public readonly string? OutputFile;
        public readonly ImmutableArray<Outputs.NodesStatusResult> Statuses;
        /// <summary>
        /// The total count of Node query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> ZoneIds;

        [OutputConstructor]
        private NodesResult(
            ImmutableArray<string> clusterIds,

            string? createClientToken,

            string id,

            ImmutableArray<string> ids,

            string? name,

            string? nameRegex,

            ImmutableArray<string> nodePoolIds,

            ImmutableArray<Outputs.NodesNodeResult> nodes,

            string? outputFile,

            ImmutableArray<Outputs.NodesStatusResult> statuses,

            int totalCount,

            ImmutableArray<string> zoneIds)
        {
            ClusterIds = clusterIds;
            CreateClientToken = createClientToken;
            Id = id;
            Ids = ids;
            Name = name;
            NameRegex = nameRegex;
            NodePoolIds = nodePoolIds;
            Nodes = nodes;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
            ZoneIds = zoneIds;
        }
    }
}
