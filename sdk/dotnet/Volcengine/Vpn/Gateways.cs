// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vpn
{
    public static class Gateways
    {
        /// <summary>
        /// Use this data source to query detailed information of vpn gateways
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vpn.Gateways.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "vgw-2c012ea9fm5mo2dx0efxg46qi",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GatewaysResult> InvokeAsync(GatewaysArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GatewaysResult>("volcengine:vpn/gateways:Gateways", args ?? new GatewaysArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vpn gateways
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vpn.Gateways.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "vgw-2c012ea9fm5mo2dx0efxg46qi",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GatewaysResult> Invoke(GatewaysInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GatewaysResult>("volcengine:vpn/gateways:Gateways", args ?? new GatewaysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GatewaysArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of VPN gateway ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A IP address of the VPN gateway.
        /// </summary>
        [Input("ipAddress")]
        public string? IpAddress { get; set; }

        /// <summary>
        /// A Name Regex of VPN gateway.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// A subnet ID of the VPN gateway.
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        [Input("tags")]
        private List<Inputs.GatewaysTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GatewaysTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GatewaysTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// A VPC ID of the VPN gateway.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        [Input("vpnGatewayNames")]
        private List<string>? _vpnGatewayNames;

        /// <summary>
        /// A list of VPN gateway names.
        /// </summary>
        public List<string> VpnGatewayNames
        {
            get => _vpnGatewayNames ?? (_vpnGatewayNames = new List<string>());
            set => _vpnGatewayNames = value;
        }

        public GatewaysArgs()
        {
        }
        public static new GatewaysArgs Empty => new GatewaysArgs();
    }

    public sealed class GatewaysInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of VPN gateway ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A IP address of the VPN gateway.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// A Name Regex of VPN gateway.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// A subnet ID of the VPN gateway.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Inputs.GatewaysTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GatewaysTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GatewaysTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// A VPC ID of the VPN gateway.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("vpnGatewayNames")]
        private InputList<string>? _vpnGatewayNames;

        /// <summary>
        /// A list of VPN gateway names.
        /// </summary>
        public InputList<string> VpnGatewayNames
        {
            get => _vpnGatewayNames ?? (_vpnGatewayNames = new InputList<string>());
            set => _vpnGatewayNames = value;
        }

        public GatewaysInvokeArgs()
        {
        }
        public static new GatewaysInvokeArgs Empty => new GatewaysInvokeArgs();
    }


    [OutputType]
    public sealed class GatewaysResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The IP address of the VPN gateway.
        /// </summary>
        public readonly string? IpAddress;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        public readonly string? SubnetId;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaysTagResult> Tags;
        /// <summary>
        /// The total count of VPN gateway query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The VPC ID of the VPN gateway.
        /// </summary>
        public readonly string? VpcId;
        public readonly ImmutableArray<string> VpnGatewayNames;
        /// <summary>
        /// The collection of VPN gateway query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaysVpnGatewayResult> VpnGateways;

        [OutputConstructor]
        private GatewaysResult(
            string id,

            ImmutableArray<string> ids,

            string? ipAddress,

            string? nameRegex,

            string? outputFile,

            string? subnetId,

            ImmutableArray<Outputs.GatewaysTagResult> tags,

            int totalCount,

            string? vpcId,

            ImmutableArray<string> vpnGatewayNames,

            ImmutableArray<Outputs.GatewaysVpnGatewayResult> vpnGateways)
        {
            Id = id;
            Ids = ids;
            IpAddress = ipAddress;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            SubnetId = subnetId;
            Tags = tags;
            TotalCount = totalCount;
            VpcId = vpcId;
            VpnGatewayNames = vpnGatewayNames;
            VpnGateways = vpnGateways;
        }
    }
}
