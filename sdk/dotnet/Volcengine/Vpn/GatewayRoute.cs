// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Vpn
{
    /// <summary>
    /// Provides a resource to manage vpn gateway route
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = "cn-beijing-a",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooGateway = new Volcengine.Vpn.Gateway("fooGateway", new()
    ///     {
    ///         VpcId = fooVpc.Id,
    ///         SubnetId = fooSubnet.Id,
    ///         Bandwidth = 20,
    ///         VpnGatewayName = "acc-test",
    ///         Description = "acc-test",
    ///         Period = 2,
    ///         ProjectName = "default",
    ///     });
    /// 
    ///     var fooCustomerGateway = new Volcengine.Vpn.CustomerGateway("fooCustomerGateway", new()
    ///     {
    ///         IpAddress = "192.0.1.3",
    ///         CustomerGatewayName = "acc-test",
    ///         Description = "acc-test",
    ///         ProjectName = "default",
    ///     });
    /// 
    ///     var fooConnection = new Volcengine.Vpn.Connection("fooConnection", new()
    ///     {
    ///         VpnConnectionName = "acc-tf-test",
    ///         Description = "acc-tf-test",
    ///         VpnGatewayId = fooGateway.Id,
    ///         CustomerGatewayId = fooCustomerGateway.Id,
    ///         LocalSubnets = new[]
    ///         {
    ///             "192.168.0.0/22",
    ///         },
    ///         RemoteSubnets = new[]
    ///         {
    ///             "192.161.0.0/20",
    ///         },
    ///         DpdAction = "none",
    ///         NatTraversal = true,
    ///         IkeConfigPsk = "acctest@!3",
    ///         IkeConfigVersion = "ikev1",
    ///         IkeConfigMode = "main",
    ///         IkeConfigEncAlg = "aes",
    ///         IkeConfigAuthAlg = "md5",
    ///         IkeConfigDhGroup = "group2",
    ///         IkeConfigLifetime = 9000,
    ///         IkeConfigLocalId = "acc_test",
    ///         IkeConfigRemoteId = "acc_test",
    ///         IpsecConfigEncAlg = "aes",
    ///         IpsecConfigAuthAlg = "sha256",
    ///         IpsecConfigDhGroup = "group2",
    ///         IpsecConfigLifetime = 9000,
    ///         ProjectName = "default",
    ///         LogEnabled = false,
    ///     });
    /// 
    ///     var fooGatewayRoute = new Volcengine.Vpn.GatewayRoute("fooGatewayRoute", new()
    ///     {
    ///         VpnGatewayId = fooGateway.Id,
    ///         DestinationCidrBlock = "192.168.0.0/20",
    ///         NextHopId = fooConnection.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VpnGatewayRoute can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:vpn/gatewayRoute:GatewayRoute default vgr-3tex2c6c0v844c****
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vpn/gatewayRoute:GatewayRoute")]
    public partial class GatewayRoute : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The create time of VPN gateway route.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The destination cidr block of the VPN gateway route.
        /// </summary>
        [Output("destinationCidrBlock")]
        public Output<string> DestinationCidrBlock { get; private set; } = null!;

        /// <summary>
        /// The next hop id of the VPN gateway route.
        /// </summary>
        [Output("nextHopId")]
        public Output<string> NextHopId { get; private set; } = null!;

        /// <summary>
        /// The status of the VPN gateway route.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The update time of VPN gateway route.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPN gateway of the VPN gateway route.
        /// </summary>
        [Output("vpnGatewayId")]
        public Output<string> VpnGatewayId { get; private set; } = null!;

        /// <summary>
        /// The ID of the VPN gateway route.
        /// </summary>
        [Output("vpnGatewayRouteId")]
        public Output<string> VpnGatewayRouteId { get; private set; } = null!;


        /// <summary>
        /// Create a GatewayRoute resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GatewayRoute(string name, GatewayRouteArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vpn/gatewayRoute:GatewayRoute", name, args ?? new GatewayRouteArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GatewayRoute(string name, Input<string> id, GatewayRouteState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vpn/gatewayRoute:GatewayRoute", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GatewayRoute resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GatewayRoute Get(string name, Input<string> id, GatewayRouteState? state = null, CustomResourceOptions? options = null)
        {
            return new GatewayRoute(name, id, state, options);
        }
    }

    public sealed class GatewayRouteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The destination cidr block of the VPN gateway route.
        /// </summary>
        [Input("destinationCidrBlock", required: true)]
        public Input<string> DestinationCidrBlock { get; set; } = null!;

        /// <summary>
        /// The next hop id of the VPN gateway route.
        /// </summary>
        [Input("nextHopId", required: true)]
        public Input<string> NextHopId { get; set; } = null!;

        /// <summary>
        /// The ID of the VPN gateway of the VPN gateway route.
        /// </summary>
        [Input("vpnGatewayId", required: true)]
        public Input<string> VpnGatewayId { get; set; } = null!;

        public GatewayRouteArgs()
        {
        }
        public static new GatewayRouteArgs Empty => new GatewayRouteArgs();
    }

    public sealed class GatewayRouteState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The create time of VPN gateway route.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// The destination cidr block of the VPN gateway route.
        /// </summary>
        [Input("destinationCidrBlock")]
        public Input<string>? DestinationCidrBlock { get; set; }

        /// <summary>
        /// The next hop id of the VPN gateway route.
        /// </summary>
        [Input("nextHopId")]
        public Input<string>? NextHopId { get; set; }

        /// <summary>
        /// The status of the VPN gateway route.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The update time of VPN gateway route.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The ID of the VPN gateway of the VPN gateway route.
        /// </summary>
        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        /// <summary>
        /// The ID of the VPN gateway route.
        /// </summary>
        [Input("vpnGatewayRouteId")]
        public Input<string>? VpnGatewayRouteId { get; set; }

        public GatewayRouteState()
        {
        }
        public static new GatewayRouteState Empty => new GatewayRouteState();
    }
}
