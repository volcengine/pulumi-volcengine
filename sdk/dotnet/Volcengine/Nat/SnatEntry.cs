// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Volcengine.Pulumi.Volcengine.Nat
{
    /// <summary>
    /// Provides a resource to manage snat entry
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Volcengine.Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Nat.SnatEntry("foo", new()
    ///     {
    ///         EipId = "eip-274zlae117nr47fap8tzl24v4",
    ///         NatGatewayId = "ngw-2743w1f6iqby87fap8tvm9kop",
    ///         SnatEntryName = "tf-test-up",
    ///         SubnetId = "subnet-2744i7u9alnnk7fap8tkq8aft",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Snat entry can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:nat/snatEntry:SnatEntry default snat-3fvhk47kf56****
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:nat/snatEntry:SnatEntry")]
    public partial class SnatEntry : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the public ip address used by the SNAT entry.
        /// </summary>
        [Output("eipId")]
        public Output<string> EipId { get; private set; } = null!;

        /// <summary>
        /// The id of the nat gateway to which the entry belongs.
        /// </summary>
        [Output("natGatewayId")]
        public Output<string> NatGatewayId { get; private set; } = null!;

        /// <summary>
        /// The name of the SNAT entry.
        /// </summary>
        [Output("snatEntryName")]
        public Output<string> SnatEntryName { get; private set; } = null!;

        /// <summary>
        /// The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.
        /// </summary>
        [Output("sourceCidr")]
        public Output<string?> SourceCidr { get; private set; } = null!;

        /// <summary>
        /// The status of the SNAT entry.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.
        /// </summary>
        [Output("subnetId")]
        public Output<string?> SubnetId { get; private set; } = null!;


        /// <summary>
        /// Create a SnatEntry resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SnatEntry(string name, SnatEntryArgs args, CustomResourceOptions? options = null)
            : base("volcengine:nat/snatEntry:SnatEntry", name, args ?? new SnatEntryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SnatEntry(string name, Input<string> id, SnatEntryState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:nat/snatEntry:SnatEntry", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SnatEntry resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SnatEntry Get(string name, Input<string> id, SnatEntryState? state = null, CustomResourceOptions? options = null)
        {
            return new SnatEntry(name, id, state, options);
        }
    }

    public sealed class SnatEntryArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the public ip address used by the SNAT entry.
        /// </summary>
        [Input("eipId", required: true)]
        public Input<string> EipId { get; set; } = null!;

        /// <summary>
        /// The id of the nat gateway to which the entry belongs.
        /// </summary>
        [Input("natGatewayId", required: true)]
        public Input<string> NatGatewayId { get; set; } = null!;

        /// <summary>
        /// The name of the SNAT entry.
        /// </summary>
        [Input("snatEntryName")]
        public Input<string>? SnatEntryName { get; set; }

        /// <summary>
        /// The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.
        /// </summary>
        [Input("sourceCidr")]
        public Input<string>? SourceCidr { get; set; }

        /// <summary>
        /// The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public SnatEntryArgs()
        {
        }
        public static new SnatEntryArgs Empty => new SnatEntryArgs();
    }

    public sealed class SnatEntryState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the public ip address used by the SNAT entry.
        /// </summary>
        [Input("eipId")]
        public Input<string>? EipId { get; set; }

        /// <summary>
        /// The id of the nat gateway to which the entry belongs.
        /// </summary>
        [Input("natGatewayId")]
        public Input<string>? NatGatewayId { get; set; }

        /// <summary>
        /// The name of the SNAT entry.
        /// </summary>
        [Input("snatEntryName")]
        public Input<string>? SnatEntryName { get; set; }

        /// <summary>
        /// The SourceCidr of the SNAT entry. Only one of `subnet_id,source_cidr` can be specified.
        /// </summary>
        [Input("sourceCidr")]
        public Input<string>? SourceCidr { get; set; }

        /// <summary>
        /// The status of the SNAT entry.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The id of the subnet that is required to access the internet. Only one of `subnet_id,source_cidr` can be specified.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        public SnatEntryState()
        {
        }
        public static new SnatEntryState Empty => new SnatEntryState();
    }
}
