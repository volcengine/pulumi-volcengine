// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Tls
{
    /// <summary>
    /// Provides a resource to manage tls import task
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Tls.ImportTask("foo", new()
    ///     {
    ///         Description = "tf-test",
    ///         ImportSourceInfo = new Volcengine.Tls.Inputs.ImportTaskImportSourceInfoArgs
    ///         {
    ///             KafkaSourceInfo = new Volcengine.Tls.Inputs.ImportTaskImportSourceInfoKafkaSourceInfoArgs
    ///             {
    ///                 Encode = "UTF-8",
    ///                 Host = "1.1.1.1",
    ///                 InitialOffset = 0,
    ///                 TimeSourceDefault = 1,
    ///                 Topic = "topic-1,topic-2,topic-3",
    ///             },
    ///         },
    ///         SourceType = "kafka",
    ///         TargetInfo = new Volcengine.Tls.Inputs.ImportTaskTargetInfoArgs
    ///         {
    ///             ExtractRule = new Volcengine.Tls.Inputs.ImportTaskTargetInfoExtractRuleArgs
    ///             {
    ///                 UnMatchLogKey = "key-failed",
    ///                 UnMatchUpLoadSwitch = true,
    ///             },
    ///             LogType = "json_log",
    ///             Region = "cn-beijing",
    ///         },
    ///         TaskName = "tf-test-task-name-kafka",
    ///         TopicId = "b966e41a-d6a6-4999-bd75-39xxxxxxx",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ImportTask can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:tls/importTask:ImportTask default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:tls/importTask:ImportTask")]
    public partial class ImportTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Data import task description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The source information of the data import task.
        /// </summary>
        [Output("importSourceInfo")]
        public Output<Outputs.ImportTaskImportSourceInfo> ImportSourceInfo { get; private set; } = null!;

        /// <summary>
        /// The log project ID used for storing data.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Import the source type.
        /// </summary>
        [Output("sourceType")]
        public Output<string> SourceType { get; private set; } = null!;

        /// <summary>
        /// The status of the data import task.
        /// </summary>
        [Output("status")]
        public Output<int> Status { get; private set; } = null!;

        /// <summary>
        /// The output information of the data import task.
        /// </summary>
        [Output("targetInfo")]
        public Output<Outputs.ImportTaskTargetInfo> TargetInfo { get; private set; } = null!;

        /// <summary>
        /// Data import task name.
        /// </summary>
        [Output("taskName")]
        public Output<string> TaskName { get; private set; } = null!;

        /// <summary>
        /// The log topic ID used for storing data.
        /// </summary>
        [Output("topicId")]
        public Output<string> TopicId { get; private set; } = null!;


        /// <summary>
        /// Create a ImportTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ImportTask(string name, ImportTaskArgs args, CustomResourceOptions? options = null)
            : base("volcengine:tls/importTask:ImportTask", name, args ?? new ImportTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ImportTask(string name, Input<string> id, ImportTaskState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:tls/importTask:ImportTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ImportTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ImportTask Get(string name, Input<string> id, ImportTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new ImportTask(name, id, state, options);
        }
    }

    public sealed class ImportTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data import task description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The source information of the data import task.
        /// </summary>
        [Input("importSourceInfo", required: true)]
        public Input<Inputs.ImportTaskImportSourceInfoArgs> ImportSourceInfo { get; set; } = null!;

        /// <summary>
        /// The log project ID used for storing data.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Import the source type.
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// The status of the data import task.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        /// <summary>
        /// The output information of the data import task.
        /// </summary>
        [Input("targetInfo", required: true)]
        public Input<Inputs.ImportTaskTargetInfoArgs> TargetInfo { get; set; } = null!;

        /// <summary>
        /// Data import task name.
        /// </summary>
        [Input("taskName")]
        public Input<string>? TaskName { get; set; }

        /// <summary>
        /// The log topic ID used for storing data.
        /// </summary>
        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        public ImportTaskArgs()
        {
        }
        public static new ImportTaskArgs Empty => new ImportTaskArgs();
    }

    public sealed class ImportTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Data import task description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The source information of the data import task.
        /// </summary>
        [Input("importSourceInfo")]
        public Input<Inputs.ImportTaskImportSourceInfoGetArgs>? ImportSourceInfo { get; set; }

        /// <summary>
        /// The log project ID used for storing data.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Import the source type.
        /// </summary>
        [Input("sourceType")]
        public Input<string>? SourceType { get; set; }

        /// <summary>
        /// The status of the data import task.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        /// <summary>
        /// The output information of the data import task.
        /// </summary>
        [Input("targetInfo")]
        public Input<Inputs.ImportTaskTargetInfoGetArgs>? TargetInfo { get; set; }

        /// <summary>
        /// Data import task name.
        /// </summary>
        [Input("taskName")]
        public Input<string>? TaskName { get; set; }

        /// <summary>
        /// The log topic ID used for storing data.
        /// </summary>
        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        public ImportTaskState()
        {
        }
        public static new ImportTaskState Empty => new ImportTaskState();
    }
}
