// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Tls
{
    public static class GetProjects
    {
        /// <summary>
        /// Use this data source to query detailed information of tls projects
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Tls.GetProjects.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectsResult> InvokeAsync(GetProjectsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectsResult>("volcengine:tls/getProjects:getProjects", args ?? new GetProjectsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of tls projects
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Tls.GetProjects.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectsResult> Invoke(GetProjectsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectsResult>("volcengine:tls/getProjects:getProjects", args ?? new GetProjectsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The IAM project name of the tls project.
        /// </summary>
        [Input("iamProjectName")]
        public string? IamProjectName { get; set; }

        /// <summary>
        /// Whether to match accurately when filtering based on ProjectName.
        /// </summary>
        [Input("isFullName")]
        public bool? IsFullName { get; set; }

        /// <summary>
        /// A Name Regex of tls project.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The id of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.
        /// </summary>
        [Input("projectId")]
        public string? ProjectId { get; set; }

        /// <summary>
        /// The name of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        [Input("tags")]
        private List<Inputs.GetProjectsTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetProjectsTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetProjectsTagArgs>());
            set => _tags = value;
        }

        public GetProjectsArgs()
        {
        }
        public static new GetProjectsArgs Empty => new GetProjectsArgs();
    }

    public sealed class GetProjectsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The IAM project name of the tls project.
        /// </summary>
        [Input("iamProjectName")]
        public Input<string>? IamProjectName { get; set; }

        /// <summary>
        /// Whether to match accurately when filtering based on ProjectName.
        /// </summary>
        [Input("isFullName")]
        public Input<bool>? IsFullName { get; set; }

        /// <summary>
        /// A Name Regex of tls project.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The id of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The name of tls project. This field supports fuzzy queries. It is not supported to specify both ProjectName and ProjectId at the same time.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetProjectsTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetProjectsTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetProjectsTagInputArgs>());
            set => _tags = value;
        }

        public GetProjectsInvokeArgs()
        {
        }
        public static new GetProjectsInvokeArgs Empty => new GetProjectsInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectsResult
    {
        /// <summary>
        /// The IAM project name of the tls project.
        /// </summary>
        public readonly string? IamProjectName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IsFullName;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The ID of the tls project.
        /// </summary>
        public readonly string? ProjectId;
        /// <summary>
        /// The name of the tls project.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsTagResult> Tags;
        /// <summary>
        /// The collection of tls project query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetProjectsTlsProjectResult> TlsProjects;
        /// <summary>
        /// The total count of tls project query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetProjectsResult(
            string? iamProjectName,

            string id,

            bool? isFullName,

            string? nameRegex,

            string? outputFile,

            string? projectId,

            string? projectName,

            ImmutableArray<Outputs.GetProjectsTagResult> tags,

            ImmutableArray<Outputs.GetProjectsTlsProjectResult> tlsProjects,

            int totalCount)
        {
            IamProjectName = iamProjectName;
            Id = id;
            IsFullName = isFullName;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectId = projectId;
            ProjectName = projectName;
            Tags = tags;
            TlsProjects = tlsProjects;
            TotalCount = totalCount;
        }
    }
}
