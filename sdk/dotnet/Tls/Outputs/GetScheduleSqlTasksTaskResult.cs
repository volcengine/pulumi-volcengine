// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Tls.Outputs
{

    [OutputType]
    public sealed class GetScheduleSqlTasksTaskResult
    {
        /// <summary>
        /// Set the creation time of timed SQL analysis tasks.
        /// </summary>
        public readonly int CreateTimeStamp;
        /// <summary>
        /// A simple description of the timed SQL analysis task.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The log project ID to which the target log topic belongs.
        /// </summary>
        public readonly string DestProjectId;
        /// <summary>
        /// The region to which the target log project belongs.
        /// </summary>
        public readonly string DestRegion;
        /// <summary>
        /// The target log topic ID used for storing the result data of timed SQL analysis.
        /// </summary>
        public readonly string DestTopicId;
        /// <summary>
        /// The name of the target log topic used for storing the data of the timed SQL analysis results.
        /// </summary>
        public readonly string DestTopicName;
        /// <summary>
        /// The most recent modification time of the scheduled SQL analysis task.
        /// </summary>
        public readonly int ModifyTimeStamp;
        /// <summary>
        /// Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        /// </summary>
        public readonly int ProcessEndTime;
        /// <summary>
        /// The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        /// </summary>
        public readonly int ProcessSqlDelay;
        /// <summary>
        /// The start time of the scheduled SQL task, that is, the start time when the first instance is scheduled. The format is a timestamp at the second level.
        /// </summary>
        public readonly int ProcessStartTime;
        /// <summary>
        /// SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        /// </summary>
        public readonly string ProcessTimeWindow;
        /// <summary>
        /// Timed SQL analysis tasks are retrieval and analysis statements that are executed regularly.
        /// </summary>
        public readonly string Query;
        /// <summary>
        /// The scheduling cycle of timed SQL analysis tasks.
        /// </summary>
        public readonly Outputs.GetScheduleSqlTasksTaskRequestCycleResult RequestCycle;
        /// <summary>
        /// The log project ID to which the source log topic belongs.
        /// </summary>
        public readonly string SourceProjectId;
        /// <summary>
        /// The name of the log item to which the source log topic belongs.
        /// </summary>
        public readonly string SourceProjectName;
        /// <summary>
        /// The source log topic ID where the original log for timed SQL analysis is located.
        /// </summary>
        public readonly string SourceTopicId;
        /// <summary>
        /// Source log topic name.
        /// </summary>
        public readonly string SourceTopicName;
        /// <summary>
        /// Timed SQL analysis task status.
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// Timed SQL analysis task ID.
        /// </summary>
        public readonly string TaskId;
        /// <summary>
        /// Timed SQL analysis task name.
        /// </summary>
        public readonly string TaskName;

        [OutputConstructor]
        private GetScheduleSqlTasksTaskResult(
            int createTimeStamp,

            string description,

            string destProjectId,

            string destRegion,

            string destTopicId,

            string destTopicName,

            int modifyTimeStamp,

            int processEndTime,

            int processSqlDelay,

            int processStartTime,

            string processTimeWindow,

            string query,

            Outputs.GetScheduleSqlTasksTaskRequestCycleResult requestCycle,

            string sourceProjectId,

            string sourceProjectName,

            string sourceTopicId,

            string sourceTopicName,

            int status,

            string taskId,

            string taskName)
        {
            CreateTimeStamp = createTimeStamp;
            Description = description;
            DestProjectId = destProjectId;
            DestRegion = destRegion;
            DestTopicId = destTopicId;
            DestTopicName = destTopicName;
            ModifyTimeStamp = modifyTimeStamp;
            ProcessEndTime = processEndTime;
            ProcessSqlDelay = processSqlDelay;
            ProcessStartTime = processStartTime;
            ProcessTimeWindow = processTimeWindow;
            Query = query;
            RequestCycle = requestCycle;
            SourceProjectId = sourceProjectId;
            SourceProjectName = sourceProjectName;
            SourceTopicId = sourceTopicId;
            SourceTopicName = sourceTopicName;
            Status = status;
            TaskId = taskId;
            TaskName = taskName;
        }
    }
}
