// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Tls
{
    /// <summary>
    /// Provides a resource to manage tls etl task
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Tls.EtlTask("foo", new()
    ///     {
    ///         Description = "for-tf-test",
    ///         DslType = "NORMAL",
    ///         Enable = true,
    ///         FromTime = 1750649545,
    ///         Script = "",
    ///         SourceTopicId = "8ba48bd7-2493-4300-b1d0-cb7xxxxxxx",
    ///         TargetResources = new[]
    ///         {
    ///             new Volcengine.Tls.Inputs.EtlTaskTargetResourceArgs
    ///             {
    ///                 Alias = "tf-test-1",
    ///                 TopicId = "b966e41a-d6a6-4999-bd75-39962xxxxxx",
    ///             },
    ///             new Volcengine.Tls.Inputs.EtlTaskTargetResourceArgs
    ///             {
    ///                 Alias = "tf-test-2",
    ///                 TopicId = "0ed72ac8-9531-4967-b216-ac3xxxxx",
    ///             },
    ///         },
    ///         TaskType = "Resident",
    ///         ToTime = 1750735958,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EtlTask can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:tls/etlTask:EtlTask default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:tls/etlTask:EtlTask")]
    public partial class EtlTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A simple description of the data processing task.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("dslType")]
        public Output<string> DslType { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the data processing task.
        /// </summary>
        [Output("enable")]
        public Output<bool> Enable { get; private set; } = null!;

        /// <summary>
        /// The start time of the data to be processed.
        /// </summary>
        [Output("fromTime")]
        public Output<int?> FromTime { get; private set; } = null!;

        /// <summary>
        /// The name of the processing task.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Processing rules.
        /// </summary>
        [Output("script")]
        public Output<string> Script { get; private set; } = null!;

        /// <summary>
        /// The log topic where the log to be processed is located.
        /// </summary>
        [Output("sourceTopicId")]
        public Output<string> SourceTopicId { get; private set; } = null!;

        /// <summary>
        /// Output the relevant information of the target.
        /// </summary>
        [Output("targetResources")]
        public Output<ImmutableArray<Outputs.EtlTaskTargetResource>> TargetResources { get; private set; } = null!;

        /// <summary>
        /// The task type is fixed as Resident.
        /// </summary>
        [Output("taskType")]
        public Output<string> TaskType { get; private set; } = null!;

        /// <summary>
        /// The end time of the data to be processed.
        /// </summary>
        [Output("toTime")]
        public Output<int?> ToTime { get; private set; } = null!;


        /// <summary>
        /// Create a EtlTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EtlTask(string name, EtlTaskArgs args, CustomResourceOptions? options = null)
            : base("volcengine:tls/etlTask:EtlTask", name, args ?? new EtlTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EtlTask(string name, Input<string> id, EtlTaskState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:tls/etlTask:EtlTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EtlTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EtlTask Get(string name, Input<string> id, EtlTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new EtlTask(name, id, state, options);
        }
    }

    public sealed class EtlTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A simple description of the data processing task.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dslType", required: true)]
        public Input<string> DslType { get; set; } = null!;

        /// <summary>
        /// Whether to enable the data processing task.
        /// </summary>
        [Input("enable", required: true)]
        public Input<bool> Enable { get; set; } = null!;

        /// <summary>
        /// The start time of the data to be processed.
        /// </summary>
        [Input("fromTime")]
        public Input<int>? FromTime { get; set; }

        /// <summary>
        /// The name of the processing task.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Processing rules.
        /// </summary>
        [Input("script", required: true)]
        public Input<string> Script { get; set; } = null!;

        /// <summary>
        /// The log topic where the log to be processed is located.
        /// </summary>
        [Input("sourceTopicId", required: true)]
        public Input<string> SourceTopicId { get; set; } = null!;

        [Input("targetResources", required: true)]
        private InputList<Inputs.EtlTaskTargetResourceArgs>? _targetResources;

        /// <summary>
        /// Output the relevant information of the target.
        /// </summary>
        public InputList<Inputs.EtlTaskTargetResourceArgs> TargetResources
        {
            get => _targetResources ?? (_targetResources = new InputList<Inputs.EtlTaskTargetResourceArgs>());
            set => _targetResources = value;
        }

        /// <summary>
        /// The task type is fixed as Resident.
        /// </summary>
        [Input("taskType", required: true)]
        public Input<string> TaskType { get; set; } = null!;

        /// <summary>
        /// The end time of the data to be processed.
        /// </summary>
        [Input("toTime")]
        public Input<int>? ToTime { get; set; }

        public EtlTaskArgs()
        {
        }
        public static new EtlTaskArgs Empty => new EtlTaskArgs();
    }

    public sealed class EtlTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A simple description of the data processing task.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// DSL type, fixed as NORMAL. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("dslType")]
        public Input<string>? DslType { get; set; }

        /// <summary>
        /// Whether to enable the data processing task.
        /// </summary>
        [Input("enable")]
        public Input<bool>? Enable { get; set; }

        /// <summary>
        /// The start time of the data to be processed.
        /// </summary>
        [Input("fromTime")]
        public Input<int>? FromTime { get; set; }

        /// <summary>
        /// The name of the processing task.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Processing rules.
        /// </summary>
        [Input("script")]
        public Input<string>? Script { get; set; }

        /// <summary>
        /// The log topic where the log to be processed is located.
        /// </summary>
        [Input("sourceTopicId")]
        public Input<string>? SourceTopicId { get; set; }

        [Input("targetResources")]
        private InputList<Inputs.EtlTaskTargetResourceGetArgs>? _targetResources;

        /// <summary>
        /// Output the relevant information of the target.
        /// </summary>
        public InputList<Inputs.EtlTaskTargetResourceGetArgs> TargetResources
        {
            get => _targetResources ?? (_targetResources = new InputList<Inputs.EtlTaskTargetResourceGetArgs>());
            set => _targetResources = value;
        }

        /// <summary>
        /// The task type is fixed as Resident.
        /// </summary>
        [Input("taskType")]
        public Input<string>? TaskType { get; set; }

        /// <summary>
        /// The end time of the data to be processed.
        /// </summary>
        [Input("toTime")]
        public Input<int>? ToTime { get; set; }

        public EtlTaskState()
        {
        }
        public static new EtlTaskState Empty => new EtlTaskState();
    }
}
