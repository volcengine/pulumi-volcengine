// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Tls
{
    /// <summary>
    /// Provides a resource to manage tls schedule sql task
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Tls.ScheduleSqlTask("foo", new()
    ///     {
    ///         Description = "tf-test",
    ///         DestRegion = "cn-beijing",
    ///         DestTopicId = "b966e41a-d6a6-4999-bd75-39962xxxxxx",
    ///         ProcessEndTime = 1751295600,
    ///         ProcessSqlDelay = 60,
    ///         ProcessStartTime = 1751212980,
    ///         ProcessTimeWindow = "@m-15m,@m",
    ///         Query = "* | SELECT * limit 10000",
    ///         RequestCycle = new Volcengine.Tls.Inputs.ScheduleSqlTaskRequestCycleArgs
    ///         {
    ///             CronTab = "0 10 * * *",
    ///             CronTimeZone = "GMT+08:00",
    ///             Time = 1,
    ///             Type = "CronTab",
    ///         },
    ///         Status = 1,
    ///         TaskName = "tf-test",
    ///         TopicId = "8ba48bd7-2493-4300-b1d0-cb760bxxxxxx",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ScheduleSqlTask can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:tls/scheduleSqlTask:ScheduleSqlTask default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:tls/scheduleSqlTask:ScheduleSqlTask")]
    public partial class ScheduleSqlTask : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A simple description of the timed SQL analysis task.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The region to which the target log topic belongs. The default is the current region.
        /// </summary>
        [Output("destRegion")]
        public Output<string?> DestRegion { get; private set; } = null!;

        /// <summary>
        /// The target log topic ID used for storing the result data of timed SQL analysis.
        /// </summary>
        [Output("destTopicId")]
        public Output<string> DestTopicId { get; private set; } = null!;

        /// <summary>
        /// Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        /// </summary>
        [Output("processEndTime")]
        public Output<int?> ProcessEndTime { get; private set; } = null!;

        /// <summary>
        /// The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        /// </summary>
        [Output("processSqlDelay")]
        public Output<int> ProcessSqlDelay { get; private set; } = null!;

        /// <summary>
        /// The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        /// </summary>
        [Output("processStartTime")]
        public Output<int> ProcessStartTime { get; private set; } = null!;

        /// <summary>
        /// SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        /// </summary>
        [Output("processTimeWindow")]
        public Output<string> ProcessTimeWindow { get; private set; } = null!;

        /// <summary>
        /// The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        /// </summary>
        [Output("query")]
        public Output<string> Query { get; private set; } = null!;

        /// <summary>
        /// The scheduling cycle of timed SQL analysis tasks.
        /// </summary>
        [Output("requestCycle")]
        public Output<Outputs.ScheduleSqlTaskRequestCycle> RequestCycle { get; private set; } = null!;

        /// <summary>
        /// Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        /// </summary>
        [Output("status")]
        public Output<int> Status { get; private set; } = null!;

        /// <summary>
        /// The Name of timed SQL analysis task.
        /// </summary>
        [Output("taskName")]
        public Output<string> TaskName { get; private set; } = null!;

        /// <summary>
        /// The log topic ID where the original log to be analyzed for scheduled SQL is located.
        /// </summary>
        [Output("topicId")]
        public Output<string> TopicId { get; private set; } = null!;


        /// <summary>
        /// Create a ScheduleSqlTask resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScheduleSqlTask(string name, ScheduleSqlTaskArgs args, CustomResourceOptions? options = null)
            : base("volcengine:tls/scheduleSqlTask:ScheduleSqlTask", name, args ?? new ScheduleSqlTaskArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ScheduleSqlTask(string name, Input<string> id, ScheduleSqlTaskState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:tls/scheduleSqlTask:ScheduleSqlTask", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScheduleSqlTask resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScheduleSqlTask Get(string name, Input<string> id, ScheduleSqlTaskState? state = null, CustomResourceOptions? options = null)
        {
            return new ScheduleSqlTask(name, id, state, options);
        }
    }

    public sealed class ScheduleSqlTaskArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A simple description of the timed SQL analysis task.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The region to which the target log topic belongs. The default is the current region.
        /// </summary>
        [Input("destRegion")]
        public Input<string>? DestRegion { get; set; }

        /// <summary>
        /// The target log topic ID used for storing the result data of timed SQL analysis.
        /// </summary>
        [Input("destTopicId", required: true)]
        public Input<string> DestTopicId { get; set; } = null!;

        /// <summary>
        /// Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        /// </summary>
        [Input("processEndTime")]
        public Input<int>? ProcessEndTime { get; set; }

        /// <summary>
        /// The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        /// </summary>
        [Input("processSqlDelay", required: true)]
        public Input<int> ProcessSqlDelay { get; set; } = null!;

        /// <summary>
        /// The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        /// </summary>
        [Input("processStartTime", required: true)]
        public Input<int> ProcessStartTime { get; set; } = null!;

        /// <summary>
        /// SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        /// </summary>
        [Input("processTimeWindow", required: true)]
        public Input<string> ProcessTimeWindow { get; set; } = null!;

        /// <summary>
        /// The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        /// </summary>
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        /// <summary>
        /// The scheduling cycle of timed SQL analysis tasks.
        /// </summary>
        [Input("requestCycle", required: true)]
        public Input<Inputs.ScheduleSqlTaskRequestCycleArgs> RequestCycle { get; set; } = null!;

        /// <summary>
        /// Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        /// </summary>
        [Input("status", required: true)]
        public Input<int> Status { get; set; } = null!;

        /// <summary>
        /// The Name of timed SQL analysis task.
        /// </summary>
        [Input("taskName", required: true)]
        public Input<string> TaskName { get; set; } = null!;

        /// <summary>
        /// The log topic ID where the original log to be analyzed for scheduled SQL is located.
        /// </summary>
        [Input("topicId", required: true)]
        public Input<string> TopicId { get; set; } = null!;

        public ScheduleSqlTaskArgs()
        {
        }
        public static new ScheduleSqlTaskArgs Empty => new ScheduleSqlTaskArgs();
    }

    public sealed class ScheduleSqlTaskState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A simple description of the timed SQL analysis task.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The region to which the target log topic belongs. The default is the current region.
        /// </summary>
        [Input("destRegion")]
        public Input<string>? DestRegion { get; set; }

        /// <summary>
        /// The target log topic ID used for storing the result data of timed SQL analysis.
        /// </summary>
        [Input("destTopicId")]
        public Input<string>? DestTopicId { get; set; }

        /// <summary>
        /// Schedule the end time of the timed SQL analysis task in the format of a second-level timestamp.
        /// </summary>
        [Input("processEndTime")]
        public Input<int>? ProcessEndTime { get; set; }

        /// <summary>
        /// The delay time of each scheduling. The value range is from 0 to 120, and the unit is seconds.
        /// </summary>
        [Input("processSqlDelay")]
        public Input<int>? ProcessSqlDelay { get; set; }

        /// <summary>
        /// The start time of the scheduled SQL analysis task, that is, the time when the first instance is created. The format is a timestamp at the second level.
        /// </summary>
        [Input("processStartTime")]
        public Input<int>? ProcessStartTime { get; set; }

        /// <summary>
        /// SQL time window, which refers to the time range for log retrieval and analysis when a timed SQL analysis task is running, is in a left-closed and right-open format.
        /// </summary>
        [Input("processTimeWindow")]
        public Input<string>? ProcessTimeWindow { get; set; }

        /// <summary>
        /// The retrieval and analysis statements for the regular execution of timed SQL analysis tasks should conform to the retrieval and analysis syntax of the log service.
        /// </summary>
        [Input("query")]
        public Input<string>? Query { get; set; }

        /// <summary>
        /// The scheduling cycle of timed SQL analysis tasks.
        /// </summary>
        [Input("requestCycle")]
        public Input<Inputs.ScheduleSqlTaskRequestCycleGetArgs>? RequestCycle { get; set; }

        /// <summary>
        /// Whether to start the scheduled SQL analysis task immediately after completing the task configuration.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        /// <summary>
        /// The Name of timed SQL analysis task.
        /// </summary>
        [Input("taskName")]
        public Input<string>? TaskName { get; set; }

        /// <summary>
        /// The log topic ID where the original log to be analyzed for scheduled SQL is located.
        /// </summary>
        [Input("topicId")]
        public Input<string>? TopicId { get; set; }

        public ScheduleSqlTaskState()
        {
        }
        public static new ScheduleSqlTaskState Empty => new ScheduleSqlTaskState();
    }
}
