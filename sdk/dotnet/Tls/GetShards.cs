// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Tls
{
    public static class GetShards
    {
        /// <summary>
        /// Use this data source to query detailed information of tls shards
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Tls.GetShards.Invoke(new()
        ///     {
        ///         TopicId = "edf051ed-3c46-49ba-9339-bea628fedc15",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetShardsResult> InvokeAsync(GetShardsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetShardsResult>("volcengine:tls/getShards:getShards", args ?? new GetShardsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of tls shards
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Tls.GetShards.Invoke(new()
        ///     {
        ///         TopicId = "edf051ed-3c46-49ba-9339-bea628fedc15",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetShardsResult> Invoke(GetShardsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetShardsResult>("volcengine:tls/getShards:getShards", args ?? new GetShardsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetShardsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The id of topic.
        /// </summary>
        [Input("topicId", required: true)]
        public string TopicId { get; set; } = null!;

        public GetShardsArgs()
        {
        }
        public static new GetShardsArgs Empty => new GetShardsArgs();
    }

    public sealed class GetShardsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The id of topic.
        /// </summary>
        [Input("topicId", required: true)]
        public Input<string> TopicId { get; set; } = null!;

        public GetShardsInvokeArgs()
        {
        }
        public static new GetShardsInvokeArgs Empty => new GetShardsInvokeArgs();
    }


    [OutputType]
    public sealed class GetShardsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetShardsShardResult> Shards;
        /// <summary>
        /// The ID of topic.
        /// </summary>
        public readonly string TopicId;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetShardsResult(
            string id,

            string? outputFile,

            ImmutableArray<Outputs.GetShardsShardResult> shards,

            string topicId,

            int totalCount)
        {
            Id = id;
            OutputFile = outputFile;
            Shards = shards;
            TopicId = topicId;
            TotalCount = totalCount;
        }
    }
}
