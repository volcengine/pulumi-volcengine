// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Alb
{
    /// <summary>
    /// Provides a resource to manage alb listener
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooAlb = new Volcengine.Alb.Alb("fooAlb", new()
    ///     {
    ///         AddressIpVersion = "IPv4",
    ///         Type = "private",
    ///         LoadBalancerName = "acc-test-alb-private",
    ///         Description = "acc-test",
    ///         SubnetIds = new[]
    ///         {
    ///             fooSubnet.Id,
    ///         },
    ///         ProjectName = "default",
    ///         DeleteProtection = "off",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Alb.Inputs.AlbTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooServerGroup = new Volcengine.Alb.ServerGroup("fooServerGroup", new()
    ///     {
    ///         VpcId = fooVpc.Id,
    ///         ServerGroupName = "acc-test-server-group",
    ///         Description = "acc-test",
    ///         ServerGroupType = "instance",
    ///         Scheduler = "wlc",
    ///         ProjectName = "default",
    ///         HealthCheck = new Volcengine.Alb.Inputs.ServerGroupHealthCheckArgs
    ///         {
    ///             Enabled = "on",
    ///             Interval = 3,
    ///             Timeout = 3,
    ///             Method = "GET",
    ///         },
    ///         StickySessionConfig = new Volcengine.Alb.Inputs.ServerGroupStickySessionConfigArgs
    ///         {
    ///             StickySessionEnabled = "on",
    ///             StickySessionType = "insert",
    ///             CookieTimeout = 1100,
    ///         },
    ///     });
    /// 
    ///     var fooCertificate = new Volcengine.Alb.Certificate("fooCertificate", new()
    ///     {
    ///         Description = "tf-test",
    ///         PublicKey = "public key",
    ///         PrivateKey = "private key",
    ///     });
    /// 
    ///     var fooListener = new Volcengine.Alb.Listener("fooListener", new()
    ///     {
    ///         LoadBalancerId = fooAlb.Id,
    ///         ListenerName = "acc-test-listener",
    ///         Protocol = "HTTPS",
    ///         Port = 6666,
    ///         Enabled = "off",
    ///         CertificateSource = "alb",
    ///         CertificateId = fooCertificate.Id,
    ///         ServerGroupId = fooServerGroup.Id,
    ///         Description = "acc test listener",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AlbListener can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:alb/listener:Listener default lsn-273yv0mhs5xj47fap8sehiiso
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:alb/listener:Listener")]
    public partial class Listener : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
        /// </summary>
        [Output("aclIds")]
        public Output<ImmutableArray<string>> AclIds { get; private set; } = null!;

        /// <summary>
        /// The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
        /// </summary>
        [Output("aclStatus")]
        public Output<string?> AclStatus { get; private set; } = null!;

        /// <summary>
        /// The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
        /// </summary>
        [Output("aclType")]
        public Output<string> AclType { get; private set; } = null!;

        /// <summary>
        /// The CA certificate id associated with the listener.
        /// </summary>
        [Output("caCertificateId")]
        public Output<string?> CaCertificateId { get; private set; } = null!;

        /// <summary>
        /// The certificate id associated with the listener. Source is `cert_center`.
        /// </summary>
        [Output("certCenterCertificateId")]
        public Output<string?> CertCenterCertificateId { get; private set; } = null!;

        /// <summary>
        /// The certificate id associated with the listener. Source is `alb`.
        /// </summary>
        [Output("certificateId")]
        public Output<string?> CertificateId { get; private set; } = null!;

        /// <summary>
        /// The source of the certificate. Valid values: `alb`, `cert_center`. Default is `alb`.
        /// </summary>
        [Output("certificateSource")]
        public Output<string?> CertificateSource { get; private set; } = null!;

        /// <summary>
        /// Personalized configuration ID, with a value of " " when not bound.
        /// </summary>
        [Output("customizedCfgId")]
        public Output<string?> CustomizedCfgId { get; private set; } = null!;

        /// <summary>
        /// The description of the Listener.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The HTTP2 feature switch,valid value is on or off. Default is `off`.
        /// </summary>
        [Output("enableHttp2")]
        public Output<string?> EnableHttp2 { get; private set; } = null!;

        /// <summary>
        /// The QUIC feature switch,valid value is on or off. Default is `off`.
        /// </summary>
        [Output("enableQuic")]
        public Output<string?> EnableQuic { get; private set; } = null!;

        /// <summary>
        /// The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
        /// </summary>
        [Output("enabled")]
        public Output<string?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The ID of the Listener.
        /// </summary>
        [Output("listenerId")]
        public Output<string> ListenerId { get; private set; } = null!;

        /// <summary>
        /// The name of the Listener.
        /// </summary>
        [Output("listenerName")]
        public Output<string> ListenerName { get; private set; } = null!;

        /// <summary>
        /// The Id of the load balancer.
        /// </summary>
        [Output("loadBalancerId")]
        public Output<string> LoadBalancerId { get; private set; } = null!;

        /// <summary>
        /// The port receiving request of the Listener, the value range in 1~65535.
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// The server group id associated with the listener.
        /// </summary>
        [Output("serverGroupId")]
        public Output<string> ServerGroupId { get; private set; } = null!;


        /// <summary>
        /// Create a Listener resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Listener(string name, ListenerArgs args, CustomResourceOptions? options = null)
            : base("volcengine:alb/listener:Listener", name, args ?? new ListenerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Listener(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:alb/listener:Listener", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Listener resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Listener Get(string name, Input<string> id, ListenerState? state = null, CustomResourceOptions? options = null)
        {
            return new Listener(name, id, state, options);
        }
    }

    public sealed class ListenerArgs : global::Pulumi.ResourceArgs
    {
        [Input("aclIds")]
        private InputList<string>? _aclIds;

        /// <summary>
        /// The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
        /// </summary>
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        /// <summary>
        /// The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
        /// </summary>
        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        /// <summary>
        /// The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
        /// </summary>
        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// The CA certificate id associated with the listener.
        /// </summary>
        [Input("caCertificateId")]
        public Input<string>? CaCertificateId { get; set; }

        /// <summary>
        /// The certificate id associated with the listener. Source is `cert_center`.
        /// </summary>
        [Input("certCenterCertificateId")]
        public Input<string>? CertCenterCertificateId { get; set; }

        /// <summary>
        /// The certificate id associated with the listener. Source is `alb`.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The source of the certificate. Valid values: `alb`, `cert_center`. Default is `alb`.
        /// </summary>
        [Input("certificateSource")]
        public Input<string>? CertificateSource { get; set; }

        /// <summary>
        /// Personalized configuration ID, with a value of " " when not bound.
        /// </summary>
        [Input("customizedCfgId")]
        public Input<string>? CustomizedCfgId { get; set; }

        /// <summary>
        /// The description of the Listener.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The HTTP2 feature switch,valid value is on or off. Default is `off`.
        /// </summary>
        [Input("enableHttp2")]
        public Input<string>? EnableHttp2 { get; set; }

        /// <summary>
        /// The QUIC feature switch,valid value is on or off. Default is `off`.
        /// </summary>
        [Input("enableQuic")]
        public Input<string>? EnableQuic { get; set; }

        /// <summary>
        /// The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// The name of the Listener.
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// The Id of the load balancer.
        /// </summary>
        [Input("loadBalancerId", required: true)]
        public Input<string> LoadBalancerId { get; set; } = null!;

        /// <summary>
        /// The port receiving request of the Listener, the value range in 1~65535.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
        /// </summary>
        [Input("protocol", required: true)]
        public Input<string> Protocol { get; set; } = null!;

        /// <summary>
        /// The server group id associated with the listener.
        /// </summary>
        [Input("serverGroupId", required: true)]
        public Input<string> ServerGroupId { get; set; } = null!;

        public ListenerArgs()
        {
        }
        public static new ListenerArgs Empty => new ListenerArgs();
    }

    public sealed class ListenerState : global::Pulumi.ResourceArgs
    {
        [Input("aclIds")]
        private InputList<string>? _aclIds;

        /// <summary>
        /// The id list of the Acl. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
        /// </summary>
        public InputList<string> AclIds
        {
            get => _aclIds ?? (_aclIds = new InputList<string>());
            set => _aclIds = value;
        }

        /// <summary>
        /// The enable status of Acl. Optional choice contains `on`, `off`. Default is `off`.
        /// </summary>
        [Input("aclStatus")]
        public Input<string>? AclStatus { get; set; }

        /// <summary>
        /// The type of the Acl. Optional choice contains `white`, `black`. When the AclStatus parameter is configured as on, AclType and AclIds.N are required.
        /// </summary>
        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// The CA certificate id associated with the listener.
        /// </summary>
        [Input("caCertificateId")]
        public Input<string>? CaCertificateId { get; set; }

        /// <summary>
        /// The certificate id associated with the listener. Source is `cert_center`.
        /// </summary>
        [Input("certCenterCertificateId")]
        public Input<string>? CertCenterCertificateId { get; set; }

        /// <summary>
        /// The certificate id associated with the listener. Source is `alb`.
        /// </summary>
        [Input("certificateId")]
        public Input<string>? CertificateId { get; set; }

        /// <summary>
        /// The source of the certificate. Valid values: `alb`, `cert_center`. Default is `alb`.
        /// </summary>
        [Input("certificateSource")]
        public Input<string>? CertificateSource { get; set; }

        /// <summary>
        /// Personalized configuration ID, with a value of " " when not bound.
        /// </summary>
        [Input("customizedCfgId")]
        public Input<string>? CustomizedCfgId { get; set; }

        /// <summary>
        /// The description of the Listener.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The HTTP2 feature switch,valid value is on or off. Default is `off`.
        /// </summary>
        [Input("enableHttp2")]
        public Input<string>? EnableHttp2 { get; set; }

        /// <summary>
        /// The QUIC feature switch,valid value is on or off. Default is `off`.
        /// </summary>
        [Input("enableQuic")]
        public Input<string>? EnableQuic { get; set; }

        /// <summary>
        /// The enable status of the Listener. Optional choice contains `on`, `off`. Default is `on`.
        /// </summary>
        [Input("enabled")]
        public Input<string>? Enabled { get; set; }

        /// <summary>
        /// The ID of the Listener.
        /// </summary>
        [Input("listenerId")]
        public Input<string>? ListenerId { get; set; }

        /// <summary>
        /// The name of the Listener.
        /// </summary>
        [Input("listenerName")]
        public Input<string>? ListenerName { get; set; }

        /// <summary>
        /// The Id of the load balancer.
        /// </summary>
        [Input("loadBalancerId")]
        public Input<string>? LoadBalancerId { get; set; }

        /// <summary>
        /// The port receiving request of the Listener, the value range in 1~65535.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The protocol of the Listener. Optional choice contains `HTTP`, `HTTPS`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The server group id associated with the listener.
        /// </summary>
        [Input("serverGroupId")]
        public Input<string>? ServerGroupId { get; set; }

        public ListenerState()
        {
        }
        public static new ListenerState Empty => new ListenerState();
    }
}
