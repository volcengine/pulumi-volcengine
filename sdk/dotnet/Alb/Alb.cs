// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Alb
{
    /// <summary>
    /// Provides a resource to manage alb
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = Volcengine.Alb.GetZones.Invoke();
    /// 
    ///     var vpcIpv6 = new Volcengine.Vpc.Vpc("vpcIpv6", new()
    ///     {
    ///         VpcName = "acc-test-vpc-ipv6",
    ///         CidrBlock = "172.16.0.0/16",
    ///         EnableIpv6 = true,
    ///     });
    /// 
    ///     var subnetIpv61 = new Volcengine.Vpc.Subnet("subnetIpv61", new()
    ///     {
    ///         SubnetName = "acc-test-subnet-ipv6-1",
    ///         CidrBlock = "172.16.1.0/24",
    ///         ZoneId = foo.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = vpcIpv6.Id,
    ///         Ipv6CidrBlock = 1,
    ///     });
    /// 
    ///     var subnetIpv62 = new Volcengine.Vpc.Subnet("subnetIpv62", new()
    ///     {
    ///         SubnetName = "acc-test-subnet-ipv6-2",
    ///         CidrBlock = "172.16.2.0/24",
    ///         ZoneId = foo.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.Id),
    ///         VpcId = vpcIpv6.Id,
    ///         Ipv6CidrBlock = 2,
    ///     });
    /// 
    ///     var ipv6Gateway = new Volcengine.Vpc.Ipv6Gateway("ipv6Gateway", new()
    ///     {
    ///         VpcId = vpcIpv6.Id,
    ///     });
    /// 
    ///     var alb_private = new Volcengine.Alb.Alb("alb-private", new()
    ///     {
    ///         AddressIpVersion = "IPv4",
    ///         Type = "private",
    ///         LoadBalancerName = "acc-test-alb-private",
    ///         Description = "acc-test",
    ///         SubnetIds = new[]
    ///         {
    ///             subnetIpv61.Id,
    ///             subnetIpv62.Id,
    ///         },
    ///         ProjectName = "default",
    ///         DeleteProtection = "off",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Alb.Inputs.AlbTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var alb_public = new Volcengine.Alb.Alb("alb-public", new()
    ///     {
    ///         AddressIpVersion = "DualStack",
    ///         Type = "public",
    ///         LoadBalancerName = "acc-test-alb-public",
    ///         Description = "acc-test",
    ///         SubnetIds = new[]
    ///         {
    ///             subnetIpv61.Id,
    ///             subnetIpv62.Id,
    ///         },
    ///         ProjectName = "default",
    ///         DeleteProtection = "off",
    ///         EipBillingConfig = new Volcengine.Alb.Inputs.AlbEipBillingConfigArgs
    ///         {
    ///             Isp = "BGP",
    ///             EipBillingType = "PostPaidByBandwidth",
    ///             Bandwidth = 1,
    ///         },
    ///         Ipv6EipBillingConfig = new Volcengine.Alb.Inputs.AlbIpv6EipBillingConfigArgs
    ///         {
    ///             Isp = "BGP",
    ///             BillingType = "PostPaidByBandwidth",
    ///             Bandwidth = 1,
    ///         },
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Alb.Inputs.AlbTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             ipv6Gateway,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Alb can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:alb/alb:Alb default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:alb/alb:Alb")]
    public partial class Alb : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The address ip version of the Alb. Valid values: `IPv4`, `DualStack`. Default is `ipv4`.
        /// </summary>
        [Output("addressIpVersion")]
        public Output<string?> AddressIpVersion { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the delete protection function of the Alb. Valid values: `on`, `off`. Default is `off`.
        /// </summary>
        [Output("deleteProtection")]
        public Output<string?> DeleteProtection { get; private set; } = null!;

        /// <summary>
        /// The description of the Alb.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The DNS name.
        /// </summary>
        [Output("dnsName")]
        public Output<string> DnsName { get; private set; } = null!;

        /// <summary>
        /// The billing configuration of the EIP which automatically associated to the Alb. This field is valid when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `volcengine.eip.Address` and `volcengine.eip.Associate` to achieve public network access function.
        /// </summary>
        [Output("eipBillingConfig")]
        public Output<Outputs.AlbEipBillingConfig> EipBillingConfig { get; private set; } = null!;

        /// <summary>
        /// The billing configuration of the Ipv6 EIP which automatically associated to the Alb. This field is required when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `volcengine.vpc.Ipv6Gateway` and `volcengine.vpc.Ipv6AddressBandwidth` to achieve ipv6 public network access function.
        /// </summary>
        [Output("ipv6EipBillingConfig")]
        public Output<Outputs.AlbIpv6EipBillingConfig> Ipv6EipBillingConfig { get; private set; } = null!;

        /// <summary>
        /// The name of the Alb.
        /// </summary>
        [Output("loadBalancerName")]
        public Output<string> LoadBalancerName { get; private set; } = null!;

        /// <summary>
        /// The local addresses of the Alb.
        /// </summary>
        [Output("localAddresses")]
        public Output<ImmutableArray<string>> LocalAddresses { get; private set; } = null!;

        /// <summary>
        /// The ProjectName of the Alb.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The status of the Alb.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The id of the Subnet.
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.AlbTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of the Alb. Valid values: `public`, `private`.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// The vpc id of the Alb.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// Configuration information of the Alb instance in different Availability Zones.
        /// </summary>
        [Output("zoneMappings")]
        public Output<ImmutableArray<Outputs.AlbZoneMapping>> ZoneMappings { get; private set; } = null!;


        /// <summary>
        /// Create a Alb resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Alb(string name, AlbArgs args, CustomResourceOptions? options = null)
            : base("volcengine:alb/alb:Alb", name, args ?? new AlbArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Alb(string name, Input<string> id, AlbState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:alb/alb:Alb", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Alb resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Alb Get(string name, Input<string> id, AlbState? state = null, CustomResourceOptions? options = null)
        {
            return new Alb(name, id, state, options);
        }
    }

    public sealed class AlbArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address ip version of the Alb. Valid values: `IPv4`, `DualStack`. Default is `ipv4`.
        /// </summary>
        [Input("addressIpVersion")]
        public Input<string>? AddressIpVersion { get; set; }

        /// <summary>
        /// Whether to enable the delete protection function of the Alb. Valid values: `on`, `off`. Default is `off`.
        /// </summary>
        [Input("deleteProtection")]
        public Input<string>? DeleteProtection { get; set; }

        /// <summary>
        /// The description of the Alb.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The billing configuration of the EIP which automatically associated to the Alb. This field is valid when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `volcengine.eip.Address` and `volcengine.eip.Associate` to achieve public network access function.
        /// </summary>
        [Input("eipBillingConfig")]
        public Input<Inputs.AlbEipBillingConfigArgs>? EipBillingConfig { get; set; }

        /// <summary>
        /// The billing configuration of the Ipv6 EIP which automatically associated to the Alb. This field is required when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `volcengine.vpc.Ipv6Gateway` and `volcengine.vpc.Ipv6AddressBandwidth` to achieve ipv6 public network access function.
        /// </summary>
        [Input("ipv6EipBillingConfig")]
        public Input<Inputs.AlbIpv6EipBillingConfigArgs>? Ipv6EipBillingConfig { get; set; }

        /// <summary>
        /// The name of the Alb.
        /// </summary>
        [Input("loadBalancerName")]
        public Input<string>? LoadBalancerName { get; set; }

        /// <summary>
        /// The ProjectName of the Alb.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("subnetIds", required: true)]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// The id of the Subnet.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputList<Inputs.AlbTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.AlbTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AlbTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the Alb. Valid values: `public`, `private`.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public AlbArgs()
        {
        }
        public static new AlbArgs Empty => new AlbArgs();
    }

    public sealed class AlbState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The address ip version of the Alb. Valid values: `IPv4`, `DualStack`. Default is `ipv4`.
        /// </summary>
        [Input("addressIpVersion")]
        public Input<string>? AddressIpVersion { get; set; }

        /// <summary>
        /// Whether to enable the delete protection function of the Alb. Valid values: `on`, `off`. Default is `off`.
        /// </summary>
        [Input("deleteProtection")]
        public Input<string>? DeleteProtection { get; set; }

        /// <summary>
        /// The description of the Alb.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The DNS name.
        /// </summary>
        [Input("dnsName")]
        public Input<string>? DnsName { get; set; }

        /// <summary>
        /// The billing configuration of the EIP which automatically associated to the Alb. This field is valid when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `volcengine.eip.Address` and `volcengine.eip.Associate` to achieve public network access function.
        /// </summary>
        [Input("eipBillingConfig")]
        public Input<Inputs.AlbEipBillingConfigGetArgs>? EipBillingConfig { get; set; }

        /// <summary>
        /// The billing configuration of the Ipv6 EIP which automatically associated to the Alb. This field is required when the type of the Alb is `public`.When the type of the Alb is `private`, suggest using a combination of resource `volcengine.vpc.Ipv6Gateway` and `volcengine.vpc.Ipv6AddressBandwidth` to achieve ipv6 public network access function.
        /// </summary>
        [Input("ipv6EipBillingConfig")]
        public Input<Inputs.AlbIpv6EipBillingConfigGetArgs>? Ipv6EipBillingConfig { get; set; }

        /// <summary>
        /// The name of the Alb.
        /// </summary>
        [Input("loadBalancerName")]
        public Input<string>? LoadBalancerName { get; set; }

        [Input("localAddresses")]
        private InputList<string>? _localAddresses;

        /// <summary>
        /// The local addresses of the Alb.
        /// </summary>
        public InputList<string> LocalAddresses
        {
            get => _localAddresses ?? (_localAddresses = new InputList<string>());
            set => _localAddresses = value;
        }

        /// <summary>
        /// The ProjectName of the Alb.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The status of the Alb.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// The id of the Subnet.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        [Input("tags")]
        private InputList<Inputs.AlbTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.AlbTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AlbTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of the Alb. Valid values: `public`, `private`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// The vpc id of the Alb.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("zoneMappings")]
        private InputList<Inputs.AlbZoneMappingGetArgs>? _zoneMappings;

        /// <summary>
        /// Configuration information of the Alb instance in different Availability Zones.
        /// </summary>
        public InputList<Inputs.AlbZoneMappingGetArgs> ZoneMappings
        {
            get => _zoneMappings ?? (_zoneMappings = new InputList<Inputs.AlbZoneMappingGetArgs>());
            set => _zoneMappings = value;
        }

        public AlbState()
        {
        }
        public static new AlbState Empty => new AlbState();
    }
}
