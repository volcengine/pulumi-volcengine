// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Alb
{
    public static class GetServerGroups
    {
        /// <summary>
        /// Use this data source to query detailed information of alb server groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooServerGroup = new List&lt;Volcengine.Alb.ServerGroup&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooServerGroup.Add(new Volcengine.Alb.ServerGroup($"fooServerGroup-{range.Value}", new()
        ///         {
        ///             VpcId = fooVpc.Id,
        ///             ServerGroupName = $"acc-test-server-group-{range.Value}",
        ///             Description = "acc-test",
        ///             ServerGroupType = "instance",
        ///             Scheduler = "sh",
        ///             ProjectName = "default",
        ///             HealthCheck = new Volcengine.Alb.Inputs.ServerGroupHealthCheckArgs
        ///             {
        ///                 Enabled = "on",
        ///                 Interval = 3,
        ///                 Timeout = 3,
        ///                 Method = "GET",
        ///             },
        ///             StickySessionConfig = new Volcengine.Alb.Inputs.ServerGroupStickySessionConfigArgs
        ///             {
        ///                 StickySessionEnabled = "on",
        ///                 StickySessionType = "insert",
        ///                 CookieTimeout = 1100,
        ///             },
        ///         }));
        ///     }
        ///     var fooServerGroups = Volcengine.Alb.GetServerGroups.Invoke(new()
        ///     {
        ///         Ids = fooServerGroup.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerGroupsResult> InvokeAsync(GetServerGroupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerGroupsResult>("volcengine:alb/getServerGroups:getServerGroups", args ?? new GetServerGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of alb server groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooServerGroup = new List&lt;Volcengine.Alb.ServerGroup&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooServerGroup.Add(new Volcengine.Alb.ServerGroup($"fooServerGroup-{range.Value}", new()
        ///         {
        ///             VpcId = fooVpc.Id,
        ///             ServerGroupName = $"acc-test-server-group-{range.Value}",
        ///             Description = "acc-test",
        ///             ServerGroupType = "instance",
        ///             Scheduler = "sh",
        ///             ProjectName = "default",
        ///             HealthCheck = new Volcengine.Alb.Inputs.ServerGroupHealthCheckArgs
        ///             {
        ///                 Enabled = "on",
        ///                 Interval = 3,
        ///                 Timeout = 3,
        ///                 Method = "GET",
        ///             },
        ///             StickySessionConfig = new Volcengine.Alb.Inputs.ServerGroupStickySessionConfigArgs
        ///             {
        ///                 StickySessionEnabled = "on",
        ///                 StickySessionType = "insert",
        ///                 CookieTimeout = 1100,
        ///             },
        ///         }));
        ///     }
        ///     var fooServerGroups = Volcengine.Alb.GetServerGroups.Invoke(new()
        ///     {
        ///         Ids = fooServerGroup.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerGroupsResult> Invoke(GetServerGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerGroupsResult>("volcengine:alb/getServerGroups:getServerGroups", args ?? new GetServerGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerGroupsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Alb server group IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of Alb server group.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        [Input("serverGroupNames")]
        private List<string>? _serverGroupNames;

        /// <summary>
        /// A list of Alb server group name.
        /// </summary>
        public List<string> ServerGroupNames
        {
            get => _serverGroupNames ?? (_serverGroupNames = new List<string>());
            set => _serverGroupNames = value;
        }

        /// <summary>
        /// The type of Alb server group. Valid values: `instance`, `ip`.
        /// </summary>
        [Input("serverGroupType")]
        public string? ServerGroupType { get; set; }

        public GetServerGroupsArgs()
        {
        }
        public static new GetServerGroupsArgs Empty => new GetServerGroupsArgs();
    }

    public sealed class GetServerGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Alb server group IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of Alb server group.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("serverGroupNames")]
        private InputList<string>? _serverGroupNames;

        /// <summary>
        /// A list of Alb server group name.
        /// </summary>
        public InputList<string> ServerGroupNames
        {
            get => _serverGroupNames ?? (_serverGroupNames = new InputList<string>());
            set => _serverGroupNames = value;
        }

        /// <summary>
        /// The type of Alb server group. Valid values: `instance`, `ip`.
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        public GetServerGroupsInvokeArgs()
        {
        }
        public static new GetServerGroupsInvokeArgs Empty => new GetServerGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerGroupsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The project name of the Alb server group.
        /// </summary>
        public readonly string? ProjectName;
        public readonly ImmutableArray<string> ServerGroupNames;
        /// <summary>
        /// The type of the Alb server group.
        /// </summary>
        public readonly string? ServerGroupType;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerGroupsServerGroupResult> ServerGroups;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetServerGroupsResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            ImmutableArray<string> serverGroupNames,

            string? serverGroupType,

            ImmutableArray<Outputs.GetServerGroupsServerGroupResult> serverGroups,

            int totalCount)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            ServerGroupNames = serverGroupNames;
            ServerGroupType = serverGroupType;
            ServerGroups = serverGroups;
            TotalCount = totalCount;
        }
    }
}
