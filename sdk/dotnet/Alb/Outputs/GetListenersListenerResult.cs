// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Alb.Outputs
{

    [OutputType]
    public sealed class GetListenersListenerResult
    {
        /// <summary>
        /// The ID of the access control policy group bound to the listener, only returned when the AclStatus parameter is on.
        /// </summary>
        public readonly ImmutableArray<string> AclIds;
        /// <summary>
        /// Whether to enable the access control function,valid value is on or off.
        /// </summary>
        public readonly string AclStatus;
        /// <summary>
        /// The access control type.
        /// </summary>
        public readonly string AclType;
        /// <summary>
        /// CA certificate ID associated with HTTPS listener.
        /// </summary>
        public readonly string CaCertificateId;
        /// <summary>
        /// The certificate id associated with the listener. Source is `cert_center`.
        /// </summary>
        public readonly string CertCenterCertificateId;
        /// <summary>
        /// The server certificate ID that domain used.
        /// </summary>
        public readonly string CertificateId;
        /// <summary>
        /// The source of the certificate.
        /// </summary>
        public readonly string CertificateSource;
        /// <summary>
        /// The create time of the Listener.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The customized configuration ID, the value is empty string when not bound.
        /// </summary>
        public readonly string CustomizedCfgId;
        /// <summary>
        /// The description of listener.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The HTTPS listener association list of extension domains for.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListenersListenerDomainExtensionResult> DomainExtensions;
        /// <summary>
        /// The HTTP2 feature switch,valid value is on or off.
        /// </summary>
        public readonly string EnableHttp2;
        /// <summary>
        /// The QUIC feature switch,valid value is on or off.
        /// </summary>
        public readonly string EnableQuic;
        /// <summary>
        /// The enable status of the Listener.
        /// </summary>
        public readonly string Enabled;
        /// <summary>
        /// The ID of the Listener.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the Listener.
        /// </summary>
        public readonly string ListenerId;
        /// <summary>
        /// The name of the Listener.
        /// </summary>
        public readonly string ListenerName;
        /// <summary>
        /// The id of the Alb.
        /// </summary>
        public readonly string LoadBalancerId;
        /// <summary>
        /// The port receiving request of the Listener.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The project name of the listener.
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// The protocol of the Listener.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// The ID of server group.
        /// </summary>
        public readonly string ServerGroupId;
        /// <summary>
        /// The list of server groups with associated listeners.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetListenersListenerServerGroupResult> ServerGroups;
        /// <summary>
        /// The status of the Listener.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// The update time of the Listener.
        /// </summary>
        public readonly string UpdateTime;

        [OutputConstructor]
        private GetListenersListenerResult(
            ImmutableArray<string> aclIds,

            string aclStatus,

            string aclType,

            string caCertificateId,

            string certCenterCertificateId,

            string certificateId,

            string certificateSource,

            string createTime,

            string customizedCfgId,

            string description,

            ImmutableArray<Outputs.GetListenersListenerDomainExtensionResult> domainExtensions,

            string enableHttp2,

            string enableQuic,

            string enabled,

            string id,

            string listenerId,

            string listenerName,

            string loadBalancerId,

            int port,

            string projectName,

            string protocol,

            string serverGroupId,

            ImmutableArray<Outputs.GetListenersListenerServerGroupResult> serverGroups,

            string status,

            string updateTime)
        {
            AclIds = aclIds;
            AclStatus = aclStatus;
            AclType = aclType;
            CaCertificateId = caCertificateId;
            CertCenterCertificateId = certCenterCertificateId;
            CertificateId = certificateId;
            CertificateSource = certificateSource;
            CreateTime = createTime;
            CustomizedCfgId = customizedCfgId;
            Description = description;
            DomainExtensions = domainExtensions;
            EnableHttp2 = enableHttp2;
            EnableQuic = enableQuic;
            Enabled = enabled;
            Id = id;
            ListenerId = listenerId;
            ListenerName = listenerName;
            LoadBalancerId = loadBalancerId;
            Port = port;
            ProjectName = projectName;
            Protocol = protocol;
            ServerGroupId = serverGroupId;
            ServerGroups = serverGroups;
            Status = status;
            UpdateTime = updateTime;
        }
    }
}
