// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Alb
{
    public static class GetCaCertificates
    {
        /// <summary>
        /// Use this data source to query detailed information of alb ca certificates
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Alb.GetCaCertificates.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "cert-1iidd2r9ii0hs74adhfeodxo1",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCaCertificatesResult> InvokeAsync(GetCaCertificatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCaCertificatesResult>("volcengine:alb/getCaCertificates:getCaCertificates", args ?? new GetCaCertificatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of alb ca certificates
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Alb.GetCaCertificates.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "cert-1iidd2r9ii0hs74adhfeodxo1",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCaCertificatesResult> Invoke(GetCaCertificatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCaCertificatesResult>("volcengine:alb/getCaCertificates:getCaCertificates", args ?? new GetCaCertificatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCaCertificatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the CA certificate.
        /// </summary>
        [Input("caCertificateName")]
        public string? CaCertificateName { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of CA certificate IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of the CA certificate.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        public GetCaCertificatesArgs()
        {
        }
        public static new GetCaCertificatesArgs Empty => new GetCaCertificatesArgs();
    }

    public sealed class GetCaCertificatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the CA certificate.
        /// </summary>
        [Input("caCertificateName")]
        public Input<string>? CaCertificateName { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of CA certificate IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of the CA certificate.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        public GetCaCertificatesInvokeArgs()
        {
        }
        public static new GetCaCertificatesInvokeArgs Empty => new GetCaCertificatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetCaCertificatesResult
    {
        /// <summary>
        /// The name of the CA certificate.
        /// </summary>
        public readonly string? CaCertificateName;
        /// <summary>
        /// The collection of CA certificates query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCaCertificatesCertificateResult> Certificates;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The ProjectName of the CA Certificate.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetCaCertificatesResult(
            string? caCertificateName,

            ImmutableArray<Outputs.GetCaCertificatesCertificateResult> certificates,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            int totalCount)
        {
            CaCertificateName = caCertificateName;
            Certificates = certificates;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            TotalCount = totalCount;
        }
    }
}
