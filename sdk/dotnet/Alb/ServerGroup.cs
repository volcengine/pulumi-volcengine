// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Alb
{
    /// <summary>
    /// Provides a resource to manage alb server group
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooServerGroup = new Volcengine.Alb.ServerGroup("fooServerGroup", new()
    ///     {
    ///         VpcId = fooVpc.Id,
    ///         ServerGroupName = "acc-test-server-group",
    ///         Description = "acc-test",
    ///         ServerGroupType = "instance",
    ///         Scheduler = "wlc",
    ///         ProjectName = "default",
    ///         HealthCheck = new Volcengine.Alb.Inputs.ServerGroupHealthCheckArgs
    ///         {
    ///             Enabled = "on",
    ///             Interval = 3,
    ///             Timeout = 3,
    ///             Method = "GET",
    ///         },
    ///         StickySessionConfig = new Volcengine.Alb.Inputs.ServerGroupStickySessionConfigArgs
    ///         {
    ///             StickySessionEnabled = "on",
    ///             StickySessionType = "insert",
    ///             CookieTimeout = 1100,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// AlbServerGroup can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:alb/serverGroup:ServerGroup default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:alb/serverGroup:ServerGroup")]
    public partial class ServerGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The create time of the Alb server group.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The description of the Alb server group.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The health check config of the Alb server group. The enable status of health check function defaults to `on`.
        /// </summary>
        [Output("healthCheck")]
        public Output<Outputs.ServerGroupHealthCheck> HealthCheck { get; private set; } = null!;

        /// <summary>
        /// The listener information of the Alb server group.
        /// </summary>
        [Output("listeners")]
        public Output<ImmutableArray<string>> Listeners { get; private set; } = null!;

        /// <summary>
        /// The project name of the Alb server group.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
        /// </summary>
        [Output("scheduler")]
        public Output<string?> Scheduler { get; private set; } = null!;

        /// <summary>
        /// The server count of the Alb server group.
        /// </summary>
        [Output("serverCount")]
        public Output<int> ServerCount { get; private set; } = null!;

        /// <summary>
        /// The name of the Alb server group.
        /// </summary>
        [Output("serverGroupName")]
        public Output<string> ServerGroupName { get; private set; } = null!;

        /// <summary>
        /// The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
        /// </summary>
        [Output("serverGroupType")]
        public Output<string?> ServerGroupType { get; private set; } = null!;

        /// <summary>
        /// The status of the Alb server group.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
        /// </summary>
        [Output("stickySessionConfig")]
        public Output<Outputs.ServerGroupStickySessionConfig> StickySessionConfig { get; private set; } = null!;

        /// <summary>
        /// The update time of the Alb server group.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The vpc id of the Alb server group.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;


        /// <summary>
        /// Create a ServerGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServerGroup(string name, ServerGroupArgs args, CustomResourceOptions? options = null)
            : base("volcengine:alb/serverGroup:ServerGroup", name, args ?? new ServerGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ServerGroup(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:alb/serverGroup:ServerGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServerGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServerGroup Get(string name, Input<string> id, ServerGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new ServerGroup(name, id, state, options);
        }
    }

    public sealed class ServerGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the Alb server group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The health check config of the Alb server group. The enable status of health check function defaults to `on`.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ServerGroupHealthCheckArgs>? HealthCheck { get; set; }

        /// <summary>
        /// The project name of the Alb server group.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The name of the Alb server group.
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        /// <summary>
        /// The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        /// <summary>
        /// The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
        /// </summary>
        [Input("stickySessionConfig")]
        public Input<Inputs.ServerGroupStickySessionConfigArgs>? StickySessionConfig { get; set; }

        /// <summary>
        /// The vpc id of the Alb server group.
        /// </summary>
        [Input("vpcId", required: true)]
        public Input<string> VpcId { get; set; } = null!;

        public ServerGroupArgs()
        {
        }
        public static new ServerGroupArgs Empty => new ServerGroupArgs();
    }

    public sealed class ServerGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The create time of the Alb server group.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The description of the Alb server group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The health check config of the Alb server group. The enable status of health check function defaults to `on`.
        /// </summary>
        [Input("healthCheck")]
        public Input<Inputs.ServerGroupHealthCheckGetArgs>? HealthCheck { get; set; }

        [Input("listeners")]
        private InputList<string>? _listeners;

        /// <summary>
        /// The listener information of the Alb server group.
        /// </summary>
        public InputList<string> Listeners
        {
            get => _listeners ?? (_listeners = new InputList<string>());
            set => _listeners = value;
        }

        /// <summary>
        /// The project name of the Alb server group.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The scheduling algorithm of the Alb server group. Valid values: `wrr`, `wlc`, `sh`.
        /// </summary>
        [Input("scheduler")]
        public Input<string>? Scheduler { get; set; }

        /// <summary>
        /// The server count of the Alb server group.
        /// </summary>
        [Input("serverCount")]
        public Input<int>? ServerCount { get; set; }

        /// <summary>
        /// The name of the Alb server group.
        /// </summary>
        [Input("serverGroupName")]
        public Input<string>? ServerGroupName { get; set; }

        /// <summary>
        /// The type of the Alb server group. Valid values: `instance`, `ip`. Default is `instance`.
        /// </summary>
        [Input("serverGroupType")]
        public Input<string>? ServerGroupType { get; set; }

        /// <summary>
        /// The status of the Alb server group.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The sticky session config of the Alb server group. The enable status of sticky session function defaults to `off`.
        /// </summary>
        [Input("stickySessionConfig")]
        public Input<Inputs.ServerGroupStickySessionConfigGetArgs>? StickySessionConfig { get; set; }

        /// <summary>
        /// The update time of the Alb server group.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The vpc id of the Alb server group.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public ServerGroupState()
        {
        }
        public static new ServerGroupState Empty => new ServerGroupState();
    }
}
