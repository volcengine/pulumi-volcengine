// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpn
{
    public static class GatewayRoutes
    {
        /// <summary>
        /// Use this data source to query detailed information of vpn gateway routes
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijig-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooGateway = new Volcengine.Vpn.Gateway("fooGateway", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SubnetId = fooSubnet.Id,
        ///         Bandwidth = 20,
        ///         VpnGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         Period = 2,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooCustomerGateway = new Volcengine.Vpn.CustomerGateway("fooCustomerGateway", new()
        ///     {
        ///         IpAddress = "192.0.1.3",
        ///         CustomerGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooConnection = new Volcengine.Vpn.Connection("fooConnection", new()
        ///     {
        ///         VpnConnectionName = "acc-tf-test",
        ///         Description = "acc-tf-test",
        ///         VpnGatewayId = fooGateway.Id,
        ///         CustomerGatewayId = fooCustomerGateway.Id,
        ///         LocalSubnets = new[]
        ///         {
        ///             "192.168.0.0/22",
        ///         },
        ///         RemoteSubnets = new[]
        ///         {
        ///             "192.161.0.0/20",
        ///         },
        ///         DpdAction = "none",
        ///         NatTraversal = true,
        ///         IkeConfigPsk = "acctest@!3",
        ///         IkeConfigVersion = "ikev1",
        ///         IkeConfigMode = "main",
        ///         IkeConfigEncAlg = "aes",
        ///         IkeConfigAuthAlg = "md5",
        ///         IkeConfigDhGroup = "group2",
        ///         IkeConfigLifetime = 9000,
        ///         IkeConfigLocalId = "acc_test",
        ///         IkeConfigRemoteId = "acc_test",
        ///         IpsecConfigEncAlg = "aes",
        ///         IpsecConfigAuthAlg = "sha256",
        ///         IpsecConfigDhGroup = "group2",
        ///         IpsecConfigLifetime = 9000,
        ///         ProjectName = "default",
        ///         LogEnabled = false,
        ///     });
        /// 
        ///     var fooGatewayRoute = new Volcengine.Vpn.GatewayRoute("fooGatewayRoute", new()
        ///     {
        ///         VpnGatewayId = fooGateway.Id,
        ///         DestinationCidrBlock = "192.168.0.0/20",
        ///         NextHopId = fooConnection.Id,
        ///     });
        /// 
        ///     var fooGatewayRoutes = Volcengine.Vpn.GatewayRoutes.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooGatewayRoute.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GatewayRoutesResult> InvokeAsync(GatewayRoutesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GatewayRoutesResult>("volcengine:vpn/gatewayRoutes:GatewayRoutes", args ?? new GatewayRoutesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vpn gateway routes
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijig-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooGateway = new Volcengine.Vpn.Gateway("fooGateway", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SubnetId = fooSubnet.Id,
        ///         Bandwidth = 20,
        ///         VpnGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         Period = 2,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooCustomerGateway = new Volcengine.Vpn.CustomerGateway("fooCustomerGateway", new()
        ///     {
        ///         IpAddress = "192.0.1.3",
        ///         CustomerGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooConnection = new Volcengine.Vpn.Connection("fooConnection", new()
        ///     {
        ///         VpnConnectionName = "acc-tf-test",
        ///         Description = "acc-tf-test",
        ///         VpnGatewayId = fooGateway.Id,
        ///         CustomerGatewayId = fooCustomerGateway.Id,
        ///         LocalSubnets = new[]
        ///         {
        ///             "192.168.0.0/22",
        ///         },
        ///         RemoteSubnets = new[]
        ///         {
        ///             "192.161.0.0/20",
        ///         },
        ///         DpdAction = "none",
        ///         NatTraversal = true,
        ///         IkeConfigPsk = "acctest@!3",
        ///         IkeConfigVersion = "ikev1",
        ///         IkeConfigMode = "main",
        ///         IkeConfigEncAlg = "aes",
        ///         IkeConfigAuthAlg = "md5",
        ///         IkeConfigDhGroup = "group2",
        ///         IkeConfigLifetime = 9000,
        ///         IkeConfigLocalId = "acc_test",
        ///         IkeConfigRemoteId = "acc_test",
        ///         IpsecConfigEncAlg = "aes",
        ///         IpsecConfigAuthAlg = "sha256",
        ///         IpsecConfigDhGroup = "group2",
        ///         IpsecConfigLifetime = 9000,
        ///         ProjectName = "default",
        ///         LogEnabled = false,
        ///     });
        /// 
        ///     var fooGatewayRoute = new Volcengine.Vpn.GatewayRoute("fooGatewayRoute", new()
        ///     {
        ///         VpnGatewayId = fooGateway.Id,
        ///         DestinationCidrBlock = "192.168.0.0/20",
        ///         NextHopId = fooConnection.Id,
        ///     });
        /// 
        ///     var fooGatewayRoutes = Volcengine.Vpn.GatewayRoutes.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooGatewayRoute.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GatewayRoutesResult> Invoke(GatewayRoutesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GatewayRoutesResult>("volcengine:vpn/gatewayRoutes:GatewayRoutes", args ?? new GatewayRoutesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GatewayRoutesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A destination cidr block.
        /// </summary>
        [Input("destinationCidrBlock")]
        public string? DestinationCidrBlock { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of VPN gateway route ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// An ID of next hop.
        /// </summary>
        [Input("nextHopId")]
        public string? NextHopId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The type of the VPN gateway route. Valid values: `Static`, `BGP`, `Cloud`.
        /// </summary>
        [Input("routeType")]
        public string? RouteType { get; set; }

        /// <summary>
        /// The status of the VPN gateway route.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// An ID of VPN gateway.
        /// </summary>
        [Input("vpnGatewayId")]
        public string? VpnGatewayId { get; set; }

        public GatewayRoutesArgs()
        {
        }
        public static new GatewayRoutesArgs Empty => new GatewayRoutesArgs();
    }

    public sealed class GatewayRoutesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A destination cidr block.
        /// </summary>
        [Input("destinationCidrBlock")]
        public Input<string>? DestinationCidrBlock { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of VPN gateway route ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// An ID of next hop.
        /// </summary>
        [Input("nextHopId")]
        public Input<string>? NextHopId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The type of the VPN gateway route. Valid values: `Static`, `BGP`, `Cloud`.
        /// </summary>
        [Input("routeType")]
        public Input<string>? RouteType { get; set; }

        /// <summary>
        /// The status of the VPN gateway route.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// An ID of VPN gateway.
        /// </summary>
        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public GatewayRoutesInvokeArgs()
        {
        }
        public static new GatewayRoutesInvokeArgs Empty => new GatewayRoutesInvokeArgs();
    }


    [OutputType]
    public sealed class GatewayRoutesResult
    {
        /// <summary>
        /// The destination cidr block of the VPN gateway route.
        /// </summary>
        public readonly string? DestinationCidrBlock;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The next hop id of the VPN gateway route.
        /// </summary>
        public readonly string? NextHopId;
        public readonly string? OutputFile;
        public readonly string? RouteType;
        /// <summary>
        /// The status of the VPN gateway route.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The total count of VPN gateway route query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The ID of the VPN gateway of the VPN gateway route.
        /// </summary>
        public readonly string? VpnGatewayId;
        /// <summary>
        /// The collection of VPN gateway route query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewayRoutesVpnGatewayRouteResult> VpnGatewayRoutes;

        [OutputConstructor]
        private GatewayRoutesResult(
            string? destinationCidrBlock,

            string id,

            ImmutableArray<string> ids,

            string? nextHopId,

            string? outputFile,

            string? routeType,

            string? status,

            int totalCount,

            string? vpnGatewayId,

            ImmutableArray<Outputs.GatewayRoutesVpnGatewayRouteResult> vpnGatewayRoutes)
        {
            DestinationCidrBlock = destinationCidrBlock;
            Id = id;
            Ids = ids;
            NextHopId = nextHopId;
            OutputFile = outputFile;
            RouteType = routeType;
            Status = status;
            TotalCount = totalCount;
            VpnGatewayId = vpnGatewayId;
            VpnGatewayRoutes = vpnGatewayRoutes;
        }
    }
}
