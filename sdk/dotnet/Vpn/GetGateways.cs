// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpn
{
    public static class GetGateways
    {
        /// <summary>
        /// Use this data source to query detailed information of vpn gateways
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijing-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooGateway = new Volcengine.Vpn.Gateway("fooGateway", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SubnetId = fooSubnet.Id,
        ///         Bandwidth = 20,
        ///         VpnGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         Period = 2,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooGateways = Volcengine.Vpn.GetGateways.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooGateway.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetGatewaysResult> InvokeAsync(GetGatewaysArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetGatewaysResult>("volcengine:vpn/getGateways:getGateways", args ?? new GetGatewaysArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vpn gateways
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijing-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooGateway = new Volcengine.Vpn.Gateway("fooGateway", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SubnetId = fooSubnet.Id,
        ///         Bandwidth = 20,
        ///         VpnGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         Period = 2,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooGateways = Volcengine.Vpn.GetGateways.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooGateway.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetGatewaysResult> Invoke(GetGatewaysInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetGatewaysResult>("volcengine:vpn/getGateways:getGateways", args ?? new GetGatewaysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGatewaysArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of VPN gateway ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A IP address of the VPN gateway.
        /// </summary>
        [Input("ipAddress")]
        public string? IpAddress { get; set; }

        /// <summary>
        /// Whether IPSec is enabled.
        /// </summary>
        [Input("ipsecEnabled")]
        public bool? IpsecEnabled { get; set; }

        /// <summary>
        /// A Name Regex of VPN gateway.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of the VPN gateway.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// Whether ssl is enabled.
        /// </summary>
        [Input("sslEnabled")]
        public bool? SslEnabled { get; set; }

        /// <summary>
        /// The status of the VPN gateway.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// A subnet ID of the VPN gateway.
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        [Input("tags")]
        private List<Inputs.GetGatewaysTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetGatewaysTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetGatewaysTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// A VPC ID of the VPN gateway.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        [Input("vpnGatewayNames")]
        private List<string>? _vpnGatewayNames;

        /// <summary>
        /// A list of VPN gateway names.
        /// </summary>
        public List<string> VpnGatewayNames
        {
            get => _vpnGatewayNames ?? (_vpnGatewayNames = new List<string>());
            set => _vpnGatewayNames = value;
        }

        public GetGatewaysArgs()
        {
        }
        public static new GetGatewaysArgs Empty => new GetGatewaysArgs();
    }

    public sealed class GetGatewaysInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of VPN gateway ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A IP address of the VPN gateway.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Whether IPSec is enabled.
        /// </summary>
        [Input("ipsecEnabled")]
        public Input<bool>? IpsecEnabled { get; set; }

        /// <summary>
        /// A Name Regex of VPN gateway.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of the VPN gateway.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Whether ssl is enabled.
        /// </summary>
        [Input("sslEnabled")]
        public Input<bool>? SslEnabled { get; set; }

        /// <summary>
        /// The status of the VPN gateway.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// A subnet ID of the VPN gateway.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetGatewaysTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetGatewaysTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetGatewaysTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// A VPC ID of the VPN gateway.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("vpnGatewayNames")]
        private InputList<string>? _vpnGatewayNames;

        /// <summary>
        /// A list of VPN gateway names.
        /// </summary>
        public InputList<string> VpnGatewayNames
        {
            get => _vpnGatewayNames ?? (_vpnGatewayNames = new InputList<string>());
            set => _vpnGatewayNames = value;
        }

        public GetGatewaysInvokeArgs()
        {
        }
        public static new GetGatewaysInvokeArgs Empty => new GetGatewaysInvokeArgs();
    }


    [OutputType]
    public sealed class GetGatewaysResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The IP address of the VPN gateway.
        /// </summary>
        public readonly string? IpAddress;
        /// <summary>
        /// Whether ipsec is enabled.
        /// </summary>
        public readonly bool? IpsecEnabled;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The name of project.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// Whether ssl is enabled.
        /// </summary>
        public readonly bool? SslEnabled;
        /// <summary>
        /// The status of the VPN gateway.
        /// </summary>
        public readonly string? Status;
        public readonly string? SubnetId;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewaysTagResult> Tags;
        /// <summary>
        /// The total count of VPN gateway query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The VPC ID of the VPN gateway.
        /// </summary>
        public readonly string? VpcId;
        public readonly ImmutableArray<string> VpnGatewayNames;
        /// <summary>
        /// The collection of VPN gateway query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGatewaysVpnGatewayResult> VpnGateways;

        [OutputConstructor]
        private GetGatewaysResult(
            string id,

            ImmutableArray<string> ids,

            string? ipAddress,

            bool? ipsecEnabled,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            bool? sslEnabled,

            string? status,

            string? subnetId,

            ImmutableArray<Outputs.GetGatewaysTagResult> tags,

            int totalCount,

            string? vpcId,

            ImmutableArray<string> vpnGatewayNames,

            ImmutableArray<Outputs.GetGatewaysVpnGatewayResult> vpnGateways)
        {
            Id = id;
            Ids = ids;
            IpAddress = ipAddress;
            IpsecEnabled = ipsecEnabled;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            SslEnabled = sslEnabled;
            Status = status;
            SubnetId = subnetId;
            Tags = tags;
            TotalCount = totalCount;
            VpcId = vpcId;
            VpnGatewayNames = vpnGatewayNames;
            VpnGateways = vpnGateways;
        }
    }
}
