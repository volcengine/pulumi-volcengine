// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpn
{
    /// <summary>
    /// Provides a resource to manage ssl vpn server
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooGateway = new Volcengine.Vpn.Gateway("fooGateway", new()
    ///     {
    ///         VpcId = fooVpc.Id,
    ///         SubnetId = fooSubnet.Id,
    ///         Bandwidth = 5,
    ///         VpnGatewayName = "acc-test1",
    ///         Description = "acc-test1",
    ///         Period = 7,
    ///         ProjectName = "default",
    ///         SslEnabled = true,
    ///         SslMaxConnections = 5,
    ///     });
    /// 
    ///     var fooSslVpnServer = new Volcengine.Vpn.SslVpnServer("fooSslVpnServer", new()
    ///     {
    ///         VpnGatewayId = fooGateway.Id,
    ///         LocalSubnets = new[]
    ///         {
    ///             fooSubnet.CidrBlock,
    ///         },
    ///         ClientIpPool = "172.16.2.0/24",
    ///         SslVpnServerName = "acc-test-ssl",
    ///         Description = "acc-test",
    ///         Protocol = "UDP",
    ///         Cipher = "AES-128-CBC",
    ///         Auth = "SHA1",
    ///         Compress = true,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// SSL VPN server can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:vpn/sslVpnServer:SslVpnServer default vss-zm55pqtvk17oq32zd****
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vpn/sslVpnServer:SslVpnServer")]
    public partial class SslVpnServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The authentication algorithm of the SSL server.
        /// Values:
        /// `SHA1` (default)
        /// `MD5`
        /// `None` (do not use encryption).
        /// </summary>
        [Output("auth")]
        public Output<string?> Auth { get; private set; } = null!;

        /// <summary>
        /// The encryption algorithm of the SSL server.
        /// Values:
        /// `AES-128-CBC` (default)
        /// `AES-192-CBC`
        /// `AES-256-CBC`
        /// `None` (do not use encryption).
        /// </summary>
        [Output("cipher")]
        public Output<string?> Cipher { get; private set; } = null!;

        /// <summary>
        /// SSL client network segment.
        /// </summary>
        [Output("clientIpPool")]
        public Output<string> ClientIpPool { get; private set; } = null!;

        /// <summary>
        /// Whether to compress the transmitted data. The default value is false.
        /// </summary>
        [Output("compress")]
        public Output<bool?> Compress { get; private set; } = null!;

        /// <summary>
        /// The description of the ssl server.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
        /// </summary>
        [Output("localSubnets")]
        public Output<ImmutableArray<string>> LocalSubnets { get; private set; } = null!;

        /// <summary>
        /// The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
        /// </summary>
        [Output("protocol")]
        public Output<string?> Protocol { get; private set; } = null!;

        /// <summary>
        /// The id of the ssl vpn server.
        /// </summary>
        [Output("sslVpnServerId")]
        public Output<string> SslVpnServerId { get; private set; } = null!;

        /// <summary>
        /// The name of the SSL server.
        /// </summary>
        [Output("sslVpnServerName")]
        public Output<string> SslVpnServerName { get; private set; } = null!;

        /// <summary>
        /// The vpn gateway id.
        /// </summary>
        [Output("vpnGatewayId")]
        public Output<string> VpnGatewayId { get; private set; } = null!;


        /// <summary>
        /// Create a SslVpnServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SslVpnServer(string name, SslVpnServerArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vpn/sslVpnServer:SslVpnServer", name, args ?? new SslVpnServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SslVpnServer(string name, Input<string> id, SslVpnServerState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vpn/sslVpnServer:SslVpnServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SslVpnServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SslVpnServer Get(string name, Input<string> id, SslVpnServerState? state = null, CustomResourceOptions? options = null)
        {
            return new SslVpnServer(name, id, state, options);
        }
    }

    public sealed class SslVpnServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication algorithm of the SSL server.
        /// Values:
        /// `SHA1` (default)
        /// `MD5`
        /// `None` (do not use encryption).
        /// </summary>
        [Input("auth")]
        public Input<string>? Auth { get; set; }

        /// <summary>
        /// The encryption algorithm of the SSL server.
        /// Values:
        /// `AES-128-CBC` (default)
        /// `AES-192-CBC`
        /// `AES-256-CBC`
        /// `None` (do not use encryption).
        /// </summary>
        [Input("cipher")]
        public Input<string>? Cipher { get; set; }

        /// <summary>
        /// SSL client network segment.
        /// </summary>
        [Input("clientIpPool", required: true)]
        public Input<string> ClientIpPool { get; set; } = null!;

        /// <summary>
        /// Whether to compress the transmitted data. The default value is false.
        /// </summary>
        [Input("compress")]
        public Input<bool>? Compress { get; set; }

        /// <summary>
        /// The description of the ssl server.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("localSubnets", required: true)]
        private InputList<string>? _localSubnets;

        /// <summary>
        /// The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
        /// </summary>
        public InputList<string> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<string>());
            set => _localSubnets = value;
        }

        /// <summary>
        /// The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The name of the SSL server.
        /// </summary>
        [Input("sslVpnServerName")]
        public Input<string>? SslVpnServerName { get; set; }

        /// <summary>
        /// The vpn gateway id.
        /// </summary>
        [Input("vpnGatewayId", required: true)]
        public Input<string> VpnGatewayId { get; set; } = null!;

        public SslVpnServerArgs()
        {
        }
        public static new SslVpnServerArgs Empty => new SslVpnServerArgs();
    }

    public sealed class SslVpnServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The authentication algorithm of the SSL server.
        /// Values:
        /// `SHA1` (default)
        /// `MD5`
        /// `None` (do not use encryption).
        /// </summary>
        [Input("auth")]
        public Input<string>? Auth { get; set; }

        /// <summary>
        /// The encryption algorithm of the SSL server.
        /// Values:
        /// `AES-128-CBC` (default)
        /// `AES-192-CBC`
        /// `AES-256-CBC`
        /// `None` (do not use encryption).
        /// </summary>
        [Input("cipher")]
        public Input<string>? Cipher { get; set; }

        /// <summary>
        /// SSL client network segment.
        /// </summary>
        [Input("clientIpPool")]
        public Input<string>? ClientIpPool { get; set; }

        /// <summary>
        /// Whether to compress the transmitted data. The default value is false.
        /// </summary>
        [Input("compress")]
        public Input<bool>? Compress { get; set; }

        /// <summary>
        /// The description of the ssl server.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("localSubnets")]
        private InputList<string>? _localSubnets;

        /// <summary>
        /// The local network segment of the SSL server. The local network segment is the address segment that the client accesses through the SSL VPN connection.
        /// </summary>
        public InputList<string> LocalSubnets
        {
            get => _localSubnets ?? (_localSubnets = new InputList<string>());
            set => _localSubnets = value;
        }

        /// <summary>
        /// The protocol used by the SSL server. Valid values are `TCP`, `UDP`. Default Value: `UDP`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// The id of the ssl vpn server.
        /// </summary>
        [Input("sslVpnServerId")]
        public Input<string>? SslVpnServerId { get; set; }

        /// <summary>
        /// The name of the SSL server.
        /// </summary>
        [Input("sslVpnServerName")]
        public Input<string>? SslVpnServerName { get; set; }

        /// <summary>
        /// The vpn gateway id.
        /// </summary>
        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public SslVpnServerState()
        {
        }
        public static new SslVpnServerState Empty => new SslVpnServerState();
    }
}
