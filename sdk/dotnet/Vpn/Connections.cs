// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpn
{
    [Obsolete(@"volcengine.vpn.Connections has been deprecated in favor of volcengine.vpn.getConnections")]
    public static class Connections
    {
        /// <summary>
        /// Use this data source to query detailed information of vpn connections
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijing-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooGateway = new Volcengine.Vpn.Gateway("fooGateway", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SubnetId = fooSubnet.Id,
        ///         Bandwidth = 20,
        ///         VpnGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         Period = 2,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooCustomerGateway = new Volcengine.Vpn.CustomerGateway("fooCustomerGateway", new()
        ///     {
        ///         IpAddress = "192.0.1.3",
        ///         CustomerGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooConnection = new Volcengine.Vpn.Connection("fooConnection", new()
        ///     {
        ///         VpnConnectionName = "acc-tf-test",
        ///         Description = "acc-tf-test",
        ///         VpnGatewayId = fooGateway.Id,
        ///         CustomerGatewayId = fooCustomerGateway.Id,
        ///         LocalSubnets = new[]
        ///         {
        ///             "192.168.0.0/22",
        ///         },
        ///         RemoteSubnets = new[]
        ///         {
        ///             "192.161.0.0/20",
        ///         },
        ///         DpdAction = "none",
        ///         NatTraversal = true,
        ///         IkeConfigPsk = "acctest@!3",
        ///         IkeConfigVersion = "ikev1",
        ///         IkeConfigMode = "main",
        ///         IkeConfigEncAlg = "aes",
        ///         IkeConfigAuthAlg = "md5",
        ///         IkeConfigDhGroup = "group2",
        ///         IkeConfigLifetime = 9000,
        ///         IkeConfigLocalId = "acc_test",
        ///         IkeConfigRemoteId = "acc_test",
        ///         IpsecConfigEncAlg = "aes",
        ///         IpsecConfigAuthAlg = "sha256",
        ///         IpsecConfigDhGroup = "group2",
        ///         IpsecConfigLifetime = 9000,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooConnections = Volcengine.Vpn.GetConnections.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooConnection.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<ConnectionsResult> InvokeAsync(ConnectionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ConnectionsResult>("volcengine:vpn/connections:Connections", args ?? new ConnectionsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vpn connections
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = "cn-beijing-a",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooGateway = new Volcengine.Vpn.Gateway("fooGateway", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SubnetId = fooSubnet.Id,
        ///         Bandwidth = 20,
        ///         VpnGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         Period = 2,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooCustomerGateway = new Volcengine.Vpn.CustomerGateway("fooCustomerGateway", new()
        ///     {
        ///         IpAddress = "192.0.1.3",
        ///         CustomerGatewayName = "acc-test",
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooConnection = new Volcengine.Vpn.Connection("fooConnection", new()
        ///     {
        ///         VpnConnectionName = "acc-tf-test",
        ///         Description = "acc-tf-test",
        ///         VpnGatewayId = fooGateway.Id,
        ///         CustomerGatewayId = fooCustomerGateway.Id,
        ///         LocalSubnets = new[]
        ///         {
        ///             "192.168.0.0/22",
        ///         },
        ///         RemoteSubnets = new[]
        ///         {
        ///             "192.161.0.0/20",
        ///         },
        ///         DpdAction = "none",
        ///         NatTraversal = true,
        ///         IkeConfigPsk = "acctest@!3",
        ///         IkeConfigVersion = "ikev1",
        ///         IkeConfigMode = "main",
        ///         IkeConfigEncAlg = "aes",
        ///         IkeConfigAuthAlg = "md5",
        ///         IkeConfigDhGroup = "group2",
        ///         IkeConfigLifetime = 9000,
        ///         IkeConfigLocalId = "acc_test",
        ///         IkeConfigRemoteId = "acc_test",
        ///         IpsecConfigEncAlg = "aes",
        ///         IpsecConfigAuthAlg = "sha256",
        ///         IpsecConfigDhGroup = "group2",
        ///         IpsecConfigLifetime = 9000,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooConnections = Volcengine.Vpn.GetConnections.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooConnection.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<ConnectionsResult> Invoke(ConnectionsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ConnectionsResult>("volcengine:vpn/connections:Connections", args ?? new ConnectionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class ConnectionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The attach status of VPN connection.
        /// </summary>
        [Input("attachStatus")]
        public string? AttachStatus { get; set; }

        /// <summary>
        /// The attach type of VPN connection. Valid values: `VpnGateway`, `TransitRouter`.
        /// </summary>
        [Input("attachType")]
        public string? AttachType { get; set; }

        /// <summary>
        /// An ID of customer gateway.
        /// </summary>
        [Input("customerGatewayId")]
        public string? CustomerGatewayId { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of VPN connection ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of VPN connection.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of VPN connection.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// The spec of IPSec connection. Valid values: `default`, `large`.
        /// </summary>
        [Input("spec")]
        public string? Spec { get; set; }

        /// <summary>
        /// The status of IPSec connection. Valid values: `Creating`, `Deleting`, `Pending`, `Available`.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// An ID of transit router.
        /// </summary>
        [Input("transitRouterId")]
        public string? TransitRouterId { get; set; }

        [Input("vpnConnectionNames")]
        private List<string>? _vpnConnectionNames;

        /// <summary>
        /// A list of VPN connection names.
        /// </summary>
        public List<string> VpnConnectionNames
        {
            get => _vpnConnectionNames ?? (_vpnConnectionNames = new List<string>());
            set => _vpnConnectionNames = value;
        }

        /// <summary>
        /// An ID of VPN gateway.
        /// </summary>
        [Input("vpnGatewayId")]
        public string? VpnGatewayId { get; set; }

        public ConnectionsArgs()
        {
        }
        public static new ConnectionsArgs Empty => new ConnectionsArgs();
    }

    public sealed class ConnectionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The attach status of VPN connection.
        /// </summary>
        [Input("attachStatus")]
        public Input<string>? AttachStatus { get; set; }

        /// <summary>
        /// The attach type of VPN connection. Valid values: `VpnGateway`, `TransitRouter`.
        /// </summary>
        [Input("attachType")]
        public Input<string>? AttachType { get; set; }

        /// <summary>
        /// An ID of customer gateway.
        /// </summary>
        [Input("customerGatewayId")]
        public Input<string>? CustomerGatewayId { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of VPN connection ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of VPN connection.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of VPN connection.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The spec of IPSec connection. Valid values: `default`, `large`.
        /// </summary>
        [Input("spec")]
        public Input<string>? Spec { get; set; }

        /// <summary>
        /// The status of IPSec connection. Valid values: `Creating`, `Deleting`, `Pending`, `Available`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// An ID of transit router.
        /// </summary>
        [Input("transitRouterId")]
        public Input<string>? TransitRouterId { get; set; }

        [Input("vpnConnectionNames")]
        private InputList<string>? _vpnConnectionNames;

        /// <summary>
        /// A list of VPN connection names.
        /// </summary>
        public InputList<string> VpnConnectionNames
        {
            get => _vpnConnectionNames ?? (_vpnConnectionNames = new InputList<string>());
            set => _vpnConnectionNames = value;
        }

        /// <summary>
        /// An ID of VPN gateway.
        /// </summary>
        [Input("vpnGatewayId")]
        public Input<string>? VpnGatewayId { get; set; }

        public ConnectionsInvokeArgs()
        {
        }
        public static new ConnectionsInvokeArgs Empty => new ConnectionsInvokeArgs();
    }


    [OutputType]
    public sealed class ConnectionsResult
    {
        /// <summary>
        /// The IPsec attach status.
        /// </summary>
        public readonly string? AttachStatus;
        /// <summary>
        /// The IPsec attach type.
        /// </summary>
        public readonly string? AttachType;
        /// <summary>
        /// The ID of the customer gateway.
        /// </summary>
        public readonly string? CustomerGatewayId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        public readonly string? ProjectName;
        public readonly string? Spec;
        /// <summary>
        /// The status of the VPN connection.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The total count of VPN connection query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The id of transit router, valid when the attach type is 'TransitRouter'.
        /// </summary>
        public readonly string? TransitRouterId;
        public readonly ImmutableArray<string> VpnConnectionNames;
        /// <summary>
        /// The collection of VPN connection query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ConnectionsVpnConnectionResult> VpnConnections;
        /// <summary>
        /// The ID of the vpn gateway.
        /// </summary>
        public readonly string? VpnGatewayId;

        [OutputConstructor]
        private ConnectionsResult(
            string? attachStatus,

            string? attachType,

            string? customerGatewayId,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            string? spec,

            string? status,

            int totalCount,

            string? transitRouterId,

            ImmutableArray<string> vpnConnectionNames,

            ImmutableArray<Outputs.ConnectionsVpnConnectionResult> vpnConnections,

            string? vpnGatewayId)
        {
            AttachStatus = attachStatus;
            AttachType = attachType;
            CustomerGatewayId = customerGatewayId;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            Spec = spec;
            Status = status;
            TotalCount = totalCount;
            TransitRouterId = transitRouterId;
            VpnConnectionNames = vpnConnectionNames;
            VpnConnections = vpnConnections;
            VpnGatewayId = vpnGatewayId;
        }
    }
}
