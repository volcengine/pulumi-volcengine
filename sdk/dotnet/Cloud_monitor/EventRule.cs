// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cloud_monitor
{
    /// <summary>
    /// Provides a resource to manage cloud monitor event rule
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Cloud_monitor.EventRule("foo", new()
    ///     {
    ///         ContactGroupIds = new[]
    ///         {
    ///             "1737941730782699520",
    ///             "1737940985502777344",
    ///         },
    ///         ContactMethods = new[]
    ///         {
    ///             "Phone",
    ///             "TLS",
    ///             "MQ",
    ///         },
    ///         EffectiveTime = new Volcengine.Cloud_monitor.Inputs.EventRuleEffectiveTimeArgs
    ///         {
    ///             EndTime = "22:00",
    ///             StartTime = "01:00",
    ///         },
    ///         EventSource = "ecs",
    ///         EventTypes = new[]
    ///         {
    ///             "ecs:Disk:DiskError.Redeploy.Canceled",
    ///         },
    ///         FilterPattern = new Volcengine.Cloud_monitor.Inputs.EventRuleFilterPatternArgs
    ///         {
    ///             Source = "ecs",
    ///             Types = new[]
    ///             {
    ///                 "ecs:Disk:DiskError.Redeploy.Canceled",
    ///             },
    ///         },
    ///         Level = "notice",
    ///         MessageQueues = new[]
    ///         {
    ///             new Volcengine.Cloud_monitor.Inputs.EventRuleMessageQueueArgs
    ///             {
    ///                 InstanceId = "kafka-cnoe4rfrsqfb1d64",
    ///                 Region = "*****",
    ///                 Topic = "tftest",
    ///                 Type = "kafka",
    ///                 VpcId = "vpc-2d68hz41j7qio58ozfd6jxgtb",
    ///             },
    ///         },
    ///         RuleName = "tftest1",
    ///         Status = "enable",
    ///         TlsTargets = new[]
    ///         {
    ///             new Volcengine.Cloud_monitor.Inputs.EventRuleTlsTargetArgs
    ///             {
    ///                 ProjectId = "17ba378d-de43-495e-8906-03ae6567b376",
    ///                 ProjectName = "tf-test",
    ///                 RegionNameCn = "*****",
    ///                 RegionNameEn = "*****",
    ///                 TopicId = "7ce12237-6670-44a7-9d79-2e36961586e6",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// CloudMonitorEventRule can be imported using the id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import volcengine:cloud_monitor/eventRule:EventRule default rule_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:cloud_monitor/eventRule:EventRule")]
    public partial class EventRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        /// </summary>
        [Output("contactGroupIds")]
        public Output<ImmutableArray<string>> ContactGroupIds { get; private set; } = null!;

        /// <summary>
        /// Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        /// </summary>
        [Output("contactMethods")]
        public Output<ImmutableArray<string>> ContactMethods { get; private set; } = null!;

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The rule takes effect at a certain time and will only be effective during this period.
        /// </summary>
        [Output("effectiveTime")]
        public Output<Outputs.EventRuleEffectiveTime> EffectiveTime { get; private set; } = null!;

        /// <summary>
        /// When the alarm notification method is alarm callback, it triggers the callback address.
        /// </summary>
        [Output("endpoint")]
        public Output<string?> Endpoint { get; private set; } = null!;

        /// <summary>
        /// Event source.
        /// </summary>
        [Output("eventSource")]
        public Output<string> EventSource { get; private set; } = null!;

        /// <summary>
        /// Event type.
        /// </summary>
        [Output("eventTypes")]
        public Output<ImmutableArray<string>> EventTypes { get; private set; } = null!;

        /// <summary>
        /// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        /// </summary>
        [Output("filterPattern")]
        public Output<Outputs.EventRuleFilterPattern> FilterPattern { get; private set; } = null!;

        /// <summary>
        /// Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        /// </summary>
        [Output("level")]
        public Output<string> Level { get; private set; } = null!;

        /// <summary>
        /// The triggered message queue when the alarm notification method is Kafka message queue.
        /// </summary>
        [Output("messageQueues")]
        public Output<ImmutableArray<Outputs.EventRuleMessageQueue>> MessageQueues { get; private set; } = null!;

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Output("ruleName")]
        public Output<string> RuleName { get; private set; } = null!;

        /// <summary>
        /// Rule status. `enable`: enable rule(default), `disable`: disable rule.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// The alarm method for log service triggers the configuration of the log service.
        /// </summary>
        [Output("tlsTargets")]
        public Output<ImmutableArray<Outputs.EventRuleTlsTarget>> TlsTargets { get; private set; } = null!;


        /// <summary>
        /// Create a EventRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventRule(string name, EventRuleArgs args, CustomResourceOptions? options = null)
            : base("volcengine:cloud_monitor/eventRule:EventRule", name, args ?? new EventRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventRule(string name, Input<string> id, EventRuleState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:cloud_monitor/eventRule:EventRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventRule Get(string name, Input<string> id, EventRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new EventRule(name, id, state, options);
        }
    }

    public sealed class EventRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("contactGroupIds")]
        private InputList<string>? _contactGroupIds;

        /// <summary>
        /// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        /// </summary>
        public InputList<string> ContactGroupIds
        {
            get => _contactGroupIds ?? (_contactGroupIds = new InputList<string>());
            set => _contactGroupIds = value;
        }

        [Input("contactMethods", required: true)]
        private InputList<string>? _contactMethods;

        /// <summary>
        /// Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        /// </summary>
        public InputList<string> ContactMethods
        {
            get => _contactMethods ?? (_contactMethods = new InputList<string>());
            set => _contactMethods = value;
        }

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The rule takes effect at a certain time and will only be effective during this period.
        /// </summary>
        [Input("effectiveTime", required: true)]
        public Input<Inputs.EventRuleEffectiveTimeArgs> EffectiveTime { get; set; } = null!;

        /// <summary>
        /// When the alarm notification method is alarm callback, it triggers the callback address.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Event source.
        /// </summary>
        [Input("eventSource", required: true)]
        public Input<string> EventSource { get; set; } = null!;

        [Input("eventTypes")]
        private InputList<string>? _eventTypes;

        /// <summary>
        /// Event type.
        /// </summary>
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        /// <summary>
        /// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        /// </summary>
        [Input("filterPattern", required: true)]
        public Input<Inputs.EventRuleFilterPatternArgs> FilterPattern { get; set; } = null!;

        /// <summary>
        /// Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        /// </summary>
        [Input("level", required: true)]
        public Input<string> Level { get; set; } = null!;

        [Input("messageQueues")]
        private InputList<Inputs.EventRuleMessageQueueArgs>? _messageQueues;

        /// <summary>
        /// The triggered message queue when the alarm notification method is Kafka message queue.
        /// </summary>
        public InputList<Inputs.EventRuleMessageQueueArgs> MessageQueues
        {
            get => _messageQueues ?? (_messageQueues = new InputList<Inputs.EventRuleMessageQueueArgs>());
            set => _messageQueues = value;
        }

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("ruleName", required: true)]
        public Input<string> RuleName { get; set; } = null!;

        /// <summary>
        /// Rule status. `enable`: enable rule(default), `disable`: disable rule.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tlsTargets")]
        private InputList<Inputs.EventRuleTlsTargetArgs>? _tlsTargets;

        /// <summary>
        /// The alarm method for log service triggers the configuration of the log service.
        /// </summary>
        public InputList<Inputs.EventRuleTlsTargetArgs> TlsTargets
        {
            get => _tlsTargets ?? (_tlsTargets = new InputList<Inputs.EventRuleTlsTargetArgs>());
            set => _tlsTargets = value;
        }

        public EventRuleArgs()
        {
        }
        public static new EventRuleArgs Empty => new EventRuleArgs();
    }

    public sealed class EventRuleState : global::Pulumi.ResourceArgs
    {
        [Input("contactGroupIds")]
        private InputList<string>? _contactGroupIds;

        /// <summary>
        /// When the alarm notification method is phone, SMS, or email, the triggered alarm contact group ID.
        /// </summary>
        public InputList<string> ContactGroupIds
        {
            get => _contactGroupIds ?? (_contactGroupIds = new InputList<string>());
            set => _contactGroupIds = value;
        }

        [Input("contactMethods")]
        private InputList<string>? _contactMethods;

        /// <summary>
        /// Alarm notification methods. Valid value: `Phone`, `Email`, `SMS`, `Webhook`: Alarm callback, `TLS`: Log Service, `MQ`: Message Queue Kafka.
        /// </summary>
        public InputList<string> ContactMethods
        {
            get => _contactMethods ?? (_contactMethods = new InputList<string>());
            set => _contactMethods = value;
        }

        /// <summary>
        /// The description of the rule.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The rule takes effect at a certain time and will only be effective during this period.
        /// </summary>
        [Input("effectiveTime")]
        public Input<Inputs.EventRuleEffectiveTimeGetArgs>? EffectiveTime { get; set; }

        /// <summary>
        /// When the alarm notification method is alarm callback, it triggers the callback address.
        /// </summary>
        [Input("endpoint")]
        public Input<string>? Endpoint { get; set; }

        /// <summary>
        /// Event source.
        /// </summary>
        [Input("eventSource")]
        public Input<string>? EventSource { get; set; }

        [Input("eventTypes")]
        private InputList<string>? _eventTypes;

        /// <summary>
        /// Event type.
        /// </summary>
        public InputList<string> EventTypes
        {
            get => _eventTypes ?? (_eventTypes = new InputList<string>());
            set => _eventTypes = value;
        }

        /// <summary>
        /// Filter mode, also known as event matching rules. Custom matching rules are not currently supported.
        /// </summary>
        [Input("filterPattern")]
        public Input<Inputs.EventRuleFilterPatternGetArgs>? FilterPattern { get; set; }

        /// <summary>
        /// Severity of alarm rules. Value can be `notice`, `warning`, `critical`.
        /// </summary>
        [Input("level")]
        public Input<string>? Level { get; set; }

        [Input("messageQueues")]
        private InputList<Inputs.EventRuleMessageQueueGetArgs>? _messageQueues;

        /// <summary>
        /// The triggered message queue when the alarm notification method is Kafka message queue.
        /// </summary>
        public InputList<Inputs.EventRuleMessageQueueGetArgs> MessageQueues
        {
            get => _messageQueues ?? (_messageQueues = new InputList<Inputs.EventRuleMessageQueueGetArgs>());
            set => _messageQueues = value;
        }

        /// <summary>
        /// The name of the rule.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// Rule status. `enable`: enable rule(default), `disable`: disable rule.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tlsTargets")]
        private InputList<Inputs.EventRuleTlsTargetGetArgs>? _tlsTargets;

        /// <summary>
        /// The alarm method for log service triggers the configuration of the log service.
        /// </summary>
        public InputList<Inputs.EventRuleTlsTargetGetArgs> TlsTargets
        {
            get => _tlsTargets ?? (_tlsTargets = new InputList<Inputs.EventRuleTlsTargetGetArgs>());
            set => _tlsTargets = value;
        }

        public EventRuleState()
        {
        }
        public static new EventRuleState Empty => new EventRuleState();
    }
}
