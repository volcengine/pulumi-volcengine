// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cloud_monitor
{
    public static class EventRules
    {
        /// <summary>
        /// Use this data source to query detailed information of cloud monitor event rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cloud_monitor.EventRules.Invoke(new()
        ///     {
        ///         RuleName = "tftest",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<EventRulesResult> InvokeAsync(EventRulesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<EventRulesResult>("volcengine:cloud_monitor/eventRules:EventRules", args ?? new EventRulesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of cloud monitor event rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Cloud_monitor.EventRules.Invoke(new()
        ///     {
        ///         RuleName = "tftest",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<EventRulesResult> Invoke(EventRulesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<EventRulesResult>("volcengine:cloud_monitor/eventRules:EventRules", args ?? new EventRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class EventRulesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Rule name, search rules by name using fuzzy search.
        /// </summary>
        [Input("ruleName")]
        public string? RuleName { get; set; }

        /// <summary>
        /// Event source.
        /// </summary>
        [Input("source")]
        public string? Source { get; set; }

        public EventRulesArgs()
        {
        }
        public static new EventRulesArgs Empty => new EventRulesArgs();
    }

    public sealed class EventRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Rule name, search rules by name using fuzzy search.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// Event source.
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        public EventRulesInvokeArgs()
        {
        }
        public static new EventRulesInvokeArgs Empty => new EventRulesInvokeArgs();
    }


    [OutputType]
    public sealed class EventRulesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The name of the rule.
        /// </summary>
        public readonly string? RuleName;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.EventRulesRuleResult> Rules;
        /// <summary>
        /// Event source corresponding to pattern matching.
        /// </summary>
        public readonly string? Source;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private EventRulesResult(
            string id,

            string? outputFile,

            string? ruleName,

            ImmutableArray<Outputs.EventRulesRuleResult> rules,

            string? source,

            int totalCount)
        {
            Id = id;
            OutputFile = outputFile;
            RuleName = ruleName;
            Rules = rules;
            Source = source;
            TotalCount = totalCount;
        }
    }
}
