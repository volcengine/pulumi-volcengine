// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Redis
{
    public static class GetPlannedEvents
    {
        /// <summary>
        /// Use this data source to query detailed information of redis planned events
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Redis.Instance("fooInstance", new()
        ///     {
        ///         ZoneIds = new[]
        ///         {
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         },
        ///         InstanceName = "acc-test-tf-redis",
        ///         ShardedCluster = 1,
        ///         Password = "1qaz!QAZ12",
        ///         NodeNumber = 2,
        ///         ShardCapacity = 1024,
        ///         ShardNumber = 2,
        ///         EngineVersion = "5.0",
        ///         SubnetId = fooSubnet.Id,
        ///         DeletionProtection = "disabled",
        ///         VpcAuthMode = "close",
        ///         ChargeType = "PostPaid",
        ///         Port = 6381,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooPlannedEvents = Volcengine.Redis.GetPlannedEvents.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetPlannedEventsResult> InvokeAsync(GetPlannedEventsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPlannedEventsResult>("volcengine:redis/getPlannedEvents:getPlannedEvents", args ?? new GetPlannedEventsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of redis planned events
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Redis.Instance("fooInstance", new()
        ///     {
        ///         ZoneIds = new[]
        ///         {
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         },
        ///         InstanceName = "acc-test-tf-redis",
        ///         ShardedCluster = 1,
        ///         Password = "1qaz!QAZ12",
        ///         NodeNumber = 2,
        ///         ShardCapacity = 1024,
        ///         ShardNumber = 2,
        ///         EngineVersion = "5.0",
        ///         SubnetId = fooSubnet.Id,
        ///         DeletionProtection = "disabled",
        ///         VpcAuthMode = "close",
        ///         ChargeType = "PostPaid",
        ///         Port = 6381,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooPlannedEvents = Volcengine.Redis.GetPlannedEvents.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetPlannedEventsResult> Invoke(GetPlannedEventsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPlannedEventsResult>("volcengine:redis/getPlannedEvents:getPlannedEvents", args ?? new GetPlannedEventsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPlannedEventsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of instance.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// The latest execution time of the planned events that need to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
        /// </summary>
        [Input("maxStartTime")]
        public string? MaxStartTime { get; set; }

        /// <summary>
        /// The earliest execution time of the planned event that needs to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
        /// </summary>
        [Input("minStartTime")]
        public string? MinStartTime { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetPlannedEventsArgs()
        {
        }
        public static new GetPlannedEventsArgs Empty => new GetPlannedEventsArgs();
    }

    public sealed class GetPlannedEventsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The latest execution time of the planned events that need to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
        /// </summary>
        [Input("maxStartTime")]
        public Input<string>? MaxStartTime { get; set; }

        /// <summary>
        /// The earliest execution time of the planned event that needs to be queried. The format is yyyy-MM-ddTHH:mm:ssZ (UTC).
        /// </summary>
        [Input("minStartTime")]
        public Input<string>? MinStartTime { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetPlannedEventsInvokeArgs()
        {
        }
        public static new GetPlannedEventsInvokeArgs Empty => new GetPlannedEventsInvokeArgs();
    }


    [OutputType]
    public sealed class GetPlannedEventsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of instance.
        /// </summary>
        public readonly string? InstanceId;
        public readonly string? MaxStartTime;
        public readonly string? MinStartTime;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The List of planned event information.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPlannedEventsPlannedEventResult> PlannedEvents;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetPlannedEventsResult(
            string id,

            string? instanceId,

            string? maxStartTime,

            string? minStartTime,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<Outputs.GetPlannedEventsPlannedEventResult> plannedEvents,

            int totalCount)
        {
            Id = id;
            InstanceId = instanceId;
            MaxStartTime = maxStartTime;
            MinStartTime = minStartTime;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            PlannedEvents = plannedEvents;
            TotalCount = totalCount;
        }
    }
}
