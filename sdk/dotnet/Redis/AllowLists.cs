// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Redis
{
    [Obsolete(@"volcengine.redis.AllowLists has been deprecated in favor of volcengine.redis.getAllowLists")]
    public static class AllowLists
    {
        /// <summary>
        /// Use this data source to query detailed information of redis allow lists
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooAllowList = new Volcengine.Redis.AllowList("fooAllowList", new()
        ///     {
        ///         AllowLists = new[]
        ///         {
        ///             "192.168.0.0/24",
        ///         },
        ///         AllowListName = "acc-test-allowlist",
        ///     });
        /// 
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Redis.Instance("fooInstance", new()
        ///     {
        ///         ZoneIds = new[]
        ///         {
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         },
        ///         InstanceName = "acc-test-tf-redis",
        ///         ShardedCluster = 1,
        ///         Password = "1qaz!QAZ12",
        ///         NodeNumber = 2,
        ///         ShardCapacity = 1024,
        ///         ShardNumber = 2,
        ///         EngineVersion = "5.0",
        ///         SubnetId = fooSubnet.Id,
        ///         DeletionProtection = "disabled",
        ///         VpcAuthMode = "close",
        ///         ChargeType = "PostPaid",
        ///         Port = 6381,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooAllowListAssociate = new Volcengine.Redis.AllowListAssociate("fooAllowListAssociate", new()
        ///     {
        ///         AllowListId = fooAllowList.Id,
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        ///     var fooAllowLists = Volcengine.Redis.GetAllowLists.Invoke(new()
        ///     {
        ///         InstanceId = fooAllowListAssociate.InstanceId,
        ///         RegionId = "cn-beijing",
        ///         NameRegex = fooAllowList.AllowListName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<AllowListsResult> InvokeAsync(AllowListsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<AllowListsResult>("volcengine:redis/allowLists:AllowLists", args ?? new AllowListsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of redis allow lists
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooAllowList = new Volcengine.Redis.AllowList("fooAllowList", new()
        ///     {
        ///         AllowLists = new[]
        ///         {
        ///             "192.168.0.0/24",
        ///         },
        ///         AllowListName = "acc-test-allowlist",
        ///     });
        /// 
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Redis.Instance("fooInstance", new()
        ///     {
        ///         ZoneIds = new[]
        ///         {
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         },
        ///         InstanceName = "acc-test-tf-redis",
        ///         ShardedCluster = 1,
        ///         Password = "1qaz!QAZ12",
        ///         NodeNumber = 2,
        ///         ShardCapacity = 1024,
        ///         ShardNumber = 2,
        ///         EngineVersion = "5.0",
        ///         SubnetId = fooSubnet.Id,
        ///         DeletionProtection = "disabled",
        ///         VpcAuthMode = "close",
        ///         ChargeType = "PostPaid",
        ///         Port = 6381,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooAllowListAssociate = new Volcengine.Redis.AllowListAssociate("fooAllowListAssociate", new()
        ///     {
        ///         AllowListId = fooAllowList.Id,
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        ///     var fooAllowLists = Volcengine.Redis.GetAllowLists.Invoke(new()
        ///     {
        ///         InstanceId = fooAllowListAssociate.InstanceId,
        ///         RegionId = "cn-beijing",
        ///         NameRegex = fooAllowList.AllowListName,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<AllowListsResult> Invoke(AllowListsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<AllowListsResult>("volcengine:redis/allowLists:AllowLists", args ?? new AllowListsInvokeArgs(), options.WithDefaults());
    }


    public sealed class AllowListsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id of instance.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// Filter out the whitelist that meets the conditions based on the IP address. When using IPAddress query, it will precisely match this IP address and filter the IP address segments containing this IP address.
        /// </summary>
        [Input("ipAddress")]
        public string? IpAddress { get; set; }

        /// <summary>
        /// Screen out the whitelist that meets the conditions based on the IP address segment. When using IPSegment queries, the IP address segment will be precisely matched for filtering.
        /// </summary>
        [Input("ipSegment")]
        public string? IpSegment { get; set; }

        /// <summary>
        /// A Name Regex of Allow List.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The name of the project to which the white list belongs.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// Filter whether to query only the default whitelist based on the type of whitelist.
        /// </summary>
        [Input("queryDefault")]
        public bool? QueryDefault { get; set; }

        /// <summary>
        /// The Id of region.
        /// </summary>
        [Input("regionId", required: true)]
        public string RegionId { get; set; } = null!;

        public AllowListsArgs()
        {
        }
        public static new AllowListsArgs Empty => new AllowListsArgs();
    }

    public sealed class AllowListsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Id of instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Filter out the whitelist that meets the conditions based on the IP address. When using IPAddress query, it will precisely match this IP address and filter the IP address segments containing this IP address.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// Screen out the whitelist that meets the conditions based on the IP address segment. When using IPSegment queries, the IP address segment will be precisely matched for filtering.
        /// </summary>
        [Input("ipSegment")]
        public Input<string>? IpSegment { get; set; }

        /// <summary>
        /// A Name Regex of Allow List.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The name of the project to which the white list belongs.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Filter whether to query only the default whitelist based on the type of whitelist.
        /// </summary>
        [Input("queryDefault")]
        public Input<bool>? QueryDefault { get; set; }

        /// <summary>
        /// The Id of region.
        /// </summary>
        [Input("regionId", required: true)]
        public Input<string> RegionId { get; set; } = null!;

        public AllowListsInvokeArgs()
        {
        }
        public static new AllowListsInvokeArgs Empty => new AllowListsInvokeArgs();
    }


    [OutputType]
    public sealed class AllowListsResult
    {
        /// <summary>
        /// Information of list of allow list.
        /// </summary>
        public readonly ImmutableArray<Outputs.AllowListsAllowListResult> AllowLists;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Id of instance.
        /// </summary>
        public readonly string? InstanceId;
        public readonly string? IpAddress;
        public readonly string? IpSegment;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The name of the project to which the white list belongs.
        /// </summary>
        public readonly string? ProjectName;
        public readonly bool? QueryDefault;
        public readonly string RegionId;
        /// <summary>
        /// The total count of allow list query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private AllowListsResult(
            ImmutableArray<Outputs.AllowListsAllowListResult> allowLists,

            string id,

            string? instanceId,

            string? ipAddress,

            string? ipSegment,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            bool? queryDefault,

            string regionId,

            int totalCount)
        {
            AllowLists = allowLists;
            Id = id;
            InstanceId = instanceId;
            IpAddress = ipAddress;
            IpSegment = ipSegment;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            QueryDefault = queryDefault;
            RegionId = regionId;
            TotalCount = totalCount;
        }
    }
}
