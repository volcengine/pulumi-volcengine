// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Redis
{
    public static class GetBigKeys
    {
        /// <summary>
        /// Use this data source to query detailed information of redis big keys
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Redis.Instance("fooInstance", new()
        ///     {
        ///         ZoneIds = new[]
        ///         {
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         },
        ///         InstanceName = "acc-test-tf-redis",
        ///         ShardedCluster = 1,
        ///         Password = "1qaz!QAZ12",
        ///         NodeNumber = 2,
        ///         ShardCapacity = 1024,
        ///         ShardNumber = 2,
        ///         EngineVersion = "5.0",
        ///         SubnetId = fooSubnet.Id,
        ///         DeletionProtection = "disabled",
        ///         VpcAuthMode = "close",
        ///         ChargeType = "PostPaid",
        ///         Port = 6381,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooBigKeys = Volcengine.Redis.GetBigKeys.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetBigKeysResult> InvokeAsync(GetBigKeysArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBigKeysResult>("volcengine:redis/getBigKeys:getBigKeys", args ?? new GetBigKeysArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of redis big keys
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Redis.Instance("fooInstance", new()
        ///     {
        ///         ZoneIds = new[]
        ///         {
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         },
        ///         InstanceName = "acc-test-tf-redis",
        ///         ShardedCluster = 1,
        ///         Password = "1qaz!QAZ12",
        ///         NodeNumber = 2,
        ///         ShardCapacity = 1024,
        ///         ShardNumber = 2,
        ///         EngineVersion = "5.0",
        ///         SubnetId = fooSubnet.Id,
        ///         DeletionProtection = "disabled",
        ///         VpcAuthMode = "close",
        ///         ChargeType = "PostPaid",
        ///         Port = 6381,
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooBigKeys = Volcengine.Redis.GetBigKeys.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetBigKeysResult> Invoke(GetBigKeysInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBigKeysResult>("volcengine:redis/getBigKeys:getBigKeys", args ?? new GetBigKeysInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBigKeysArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of Instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// Specify the data type used to filter the query results of hot keys.
        /// </summary>
        [Input("keyType")]
        public string? KeyType { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// Specify the sorting conditions of the query results.
        /// </summary>
        [Input("orderBy")]
        public string? OrderBy { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Query the end time in the format of yyyy-MM-ddTHH:mm:ssZ (UTC).
        /// </summary>
        [Input("queryEndTime")]
        public string? QueryEndTime { get; set; }

        /// <summary>
        /// Query the start time in the format of yyyy-MM-ddTHH:mm:ssZ (UTC).
        /// </summary>
        [Input("queryStartTime")]
        public string? QueryStartTime { get; set; }

        public GetBigKeysArgs()
        {
        }
        public static new GetBigKeysArgs Empty => new GetBigKeysArgs();
    }

    public sealed class GetBigKeysInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of Instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public Input<string> InstanceId { get; set; } = null!;

        /// <summary>
        /// Specify the data type used to filter the query results of hot keys.
        /// </summary>
        [Input("keyType")]
        public Input<string>? KeyType { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// Specify the sorting conditions of the query results.
        /// </summary>
        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Query the end time in the format of yyyy-MM-ddTHH:mm:ssZ (UTC).
        /// </summary>
        [Input("queryEndTime")]
        public Input<string>? QueryEndTime { get; set; }

        /// <summary>
        /// Query the start time in the format of yyyy-MM-ddTHH:mm:ssZ (UTC).
        /// </summary>
        [Input("queryStartTime")]
        public Input<string>? QueryStartTime { get; set; }

        public GetBigKeysInvokeArgs()
        {
        }
        public static new GetBigKeysInvokeArgs Empty => new GetBigKeysInvokeArgs();
    }


    [OutputType]
    public sealed class GetBigKeysResult
    {
        /// <summary>
        /// Details of the big Key.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBigKeysBigKeyResult> BigKeys;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        /// <summary>
        /// The type of big Key.
        /// </summary>
        public readonly string? KeyType;
        public readonly string? NameRegex;
        public readonly string? OrderBy;
        public readonly string? OutputFile;
        public readonly string? QueryEndTime;
        public readonly string? QueryStartTime;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetBigKeysResult(
            ImmutableArray<Outputs.GetBigKeysBigKeyResult> bigKeys,

            string id,

            string instanceId,

            string? keyType,

            string? nameRegex,

            string? orderBy,

            string? outputFile,

            string? queryEndTime,

            string? queryStartTime,

            int totalCount)
        {
            BigKeys = bigKeys;
            Id = id;
            InstanceId = instanceId;
            KeyType = keyType;
            NameRegex = nameRegex;
            OrderBy = orderBy;
            OutputFile = outputFile;
            QueryEndTime = queryEndTime;
            QueryStartTime = queryStartTime;
            TotalCount = totalCount;
        }
    }
}
