// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Redis
{
    public static class GetRegions
    {
        /// <summary>
        /// Use this data source to query detailed information of redis regions
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Redis.GetRegions.Invoke(new()
        ///     {
        ///         RegionId = "cn-north-3",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetRegionsResult> InvokeAsync(GetRegionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRegionsResult>("volcengine:redis/getRegions:getRegions", args ?? new GetRegionsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of redis regions
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Redis.GetRegions.Invoke(new()
        ///     {
        ///         RegionId = "cn-north-3",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetRegionsResult> Invoke(GetRegionsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRegionsResult>("volcengine:redis/getRegions:getRegions", args ?? new GetRegionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRegionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// Target region info.
        /// </summary>
        [Input("regionId")]
        public string? RegionId { get; set; }

        public GetRegionsArgs()
        {
        }
        public static new GetRegionsArgs Empty => new GetRegionsArgs();
    }

    public sealed class GetRegionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// Target region info.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        public GetRegionsInvokeArgs()
        {
        }
        public static new GetRegionsInvokeArgs Empty => new GetRegionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetRegionsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        /// <summary>
        /// The id of the region.
        /// </summary>
        public readonly string? RegionId;
        /// <summary>
        /// The collection of region query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRegionsRegionResult> Regions;
        /// <summary>
        /// The total count of region query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetRegionsResult(
            string id,

            string? outputFile,

            string? regionId,

            ImmutableArray<Outputs.GetRegionsRegionResult> regions,

            int totalCount)
        {
            Id = id;
            OutputFile = outputFile;
            RegionId = regionId;
            Regions = regions;
            TotalCount = totalCount;
        }
    }
}
