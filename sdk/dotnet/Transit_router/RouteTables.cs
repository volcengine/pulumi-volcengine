// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Transit_router
{
    public static class RouteTables
    {
        /// <summary>
        /// Use this data source to query detailed information of transit router route tables
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooTransitRouter = new Volcengine.Transit_router.TransitRouter("fooTransitRouter", new()
        ///     {
        ///         TransitRouterName = "test-tf-acc",
        ///         Description = "test-tf-acc",
        ///     });
        /// 
        ///     var fooRouteTable = new Volcengine.Transit_router.RouteTable("fooRouteTable", new()
        ///     {
        ///         Description = "tf-test-acc-description",
        ///         TransitRouterRouteTableName = "tf-table-test-acc",
        ///         TransitRouterId = fooTransitRouter.Id,
        ///     });
        /// 
        ///     var @default = Volcengine.Transit_router.RouteTables.Invoke(new()
        ///     {
        ///         TransitRouterId = fooTransitRouter.Id,
        ///         Ids = new[]
        ///         {
        ///             fooRouteTable.TransitRouterRouteTableId,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<RouteTablesResult> InvokeAsync(RouteTablesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<RouteTablesResult>("volcengine:transit_router/routeTables:RouteTables", args ?? new RouteTablesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of transit router route tables
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooTransitRouter = new Volcengine.Transit_router.TransitRouter("fooTransitRouter", new()
        ///     {
        ///         TransitRouterName = "test-tf-acc",
        ///         Description = "test-tf-acc",
        ///     });
        /// 
        ///     var fooRouteTable = new Volcengine.Transit_router.RouteTable("fooRouteTable", new()
        ///     {
        ///         Description = "tf-test-acc-description",
        ///         TransitRouterRouteTableName = "tf-table-test-acc",
        ///         TransitRouterId = fooTransitRouter.Id,
        ///     });
        /// 
        ///     var @default = Volcengine.Transit_router.RouteTables.Invoke(new()
        ///     {
        ///         TransitRouterId = fooTransitRouter.Id,
        ///         Ids = new[]
        ///         {
        ///             fooRouteTable.TransitRouterRouteTableId,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<RouteTablesResult> Invoke(RouteTablesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<RouteTablesResult>("volcengine:transit_router/routeTables:RouteTables", args ?? new RouteTablesInvokeArgs(), options.WithDefaults());
    }


    public sealed class RouteTablesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// The ids of the transit router route table.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("tags")]
        private List<Inputs.RouteTablesTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.RouteTablesTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.RouteTablesTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the transit router.
        /// </summary>
        [Input("transitRouterId", required: true)]
        public string TransitRouterId { get; set; } = null!;

        /// <summary>
        /// The type of the route table. The value can be System or Custom.
        /// </summary>
        [Input("transitRouterRouteTableType")]
        public string? TransitRouterRouteTableType { get; set; }

        public RouteTablesArgs()
        {
        }
        public static new RouteTablesArgs Empty => new RouteTablesArgs();
    }

    public sealed class RouteTablesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// The ids of the transit router route table.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("tags")]
        private InputList<Inputs.RouteTablesTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.RouteTablesTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.RouteTablesTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of the transit router.
        /// </summary>
        [Input("transitRouterId", required: true)]
        public Input<string> TransitRouterId { get; set; } = null!;

        /// <summary>
        /// The type of the route table. The value can be System or Custom.
        /// </summary>
        [Input("transitRouterRouteTableType")]
        public Input<string>? TransitRouterRouteTableType { get; set; }

        public RouteTablesInvokeArgs()
        {
        }
        public static new RouteTablesInvokeArgs Empty => new RouteTablesInvokeArgs();
    }


    [OutputType]
    public sealed class RouteTablesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? OutputFile;
        /// <summary>
        /// The list of route tables query.
        /// </summary>
        public readonly ImmutableArray<Outputs.RouteTablesRouteTableResult> RouteTables;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.RouteTablesTagResult> Tags;
        /// <summary>
        /// The total count of data query.
        /// </summary>
        public readonly int TotalCount;
        public readonly string TransitRouterId;
        /// <summary>
        /// The type of route table.
        /// </summary>
        public readonly string? TransitRouterRouteTableType;

        [OutputConstructor]
        private RouteTablesResult(
            string id,

            ImmutableArray<string> ids,

            string? outputFile,

            ImmutableArray<Outputs.RouteTablesRouteTableResult> routeTables,

            ImmutableArray<Outputs.RouteTablesTagResult> tags,

            int totalCount,

            string transitRouterId,

            string? transitRouterRouteTableType)
        {
            Id = id;
            Ids = ids;
            OutputFile = outputFile;
            RouteTables = routeTables;
            Tags = tags;
            TotalCount = totalCount;
            TransitRouterId = transitRouterId;
            TransitRouterRouteTableType = transitRouterRouteTableType;
        }
    }
}
