// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Transit_router
{
    public static class PeerAttachments
    {
        /// <summary>
        /// Use this data source to query detailed information of transit router peer attachments
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Transit_router.PeerAttachments.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "tr-attach-12be67d0yh2io17q7y1au****",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<PeerAttachmentsResult> InvokeAsync(PeerAttachmentsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<PeerAttachmentsResult>("volcengine:transit_router/peerAttachments:PeerAttachments", args ?? new PeerAttachmentsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of transit router peer attachments
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Transit_router.PeerAttachments.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "tr-attach-12be67d0yh2io17q7y1au****",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<PeerAttachmentsResult> Invoke(PeerAttachmentsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<PeerAttachmentsResult>("volcengine:transit_router/peerAttachments:PeerAttachments", args ?? new PeerAttachmentsInvokeArgs(), options.WithDefaults());
    }


    public sealed class PeerAttachmentsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The id of peer transit router.
        /// </summary>
        [Input("peerTransitRouterId")]
        public string? PeerTransitRouterId { get; set; }

        /// <summary>
        /// The region id of peer transit router.
        /// </summary>
        [Input("peerTransitRouterRegionId")]
        public string? PeerTransitRouterRegionId { get; set; }

        [Input("tags")]
        private List<Inputs.PeerAttachmentsTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.PeerAttachmentsTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.PeerAttachmentsTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of transit router peer attachment.
        /// </summary>
        [Input("transitRouterAttachmentName")]
        public string? TransitRouterAttachmentName { get; set; }

        /// <summary>
        /// The id of local transit router.
        /// </summary>
        [Input("transitRouterId")]
        public string? TransitRouterId { get; set; }

        public PeerAttachmentsArgs()
        {
        }
        public static new PeerAttachmentsArgs Empty => new PeerAttachmentsArgs();
    }

    public sealed class PeerAttachmentsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The id of peer transit router.
        /// </summary>
        [Input("peerTransitRouterId")]
        public Input<string>? PeerTransitRouterId { get; set; }

        /// <summary>
        /// The region id of peer transit router.
        /// </summary>
        [Input("peerTransitRouterRegionId")]
        public Input<string>? PeerTransitRouterRegionId { get; set; }

        [Input("tags")]
        private InputList<Inputs.PeerAttachmentsTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.PeerAttachmentsTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.PeerAttachmentsTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of transit router peer attachment.
        /// </summary>
        [Input("transitRouterAttachmentName")]
        public Input<string>? TransitRouterAttachmentName { get; set; }

        /// <summary>
        /// The id of local transit router.
        /// </summary>
        [Input("transitRouterId")]
        public Input<string>? TransitRouterId { get; set; }

        public PeerAttachmentsInvokeArgs()
        {
        }
        public static new PeerAttachmentsInvokeArgs Empty => new PeerAttachmentsInvokeArgs();
    }


    [OutputType]
    public sealed class PeerAttachmentsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The id of the peer transit router.
        /// </summary>
        public readonly string? PeerTransitRouterId;
        /// <summary>
        /// The region id of the peer transit router.
        /// </summary>
        public readonly string? PeerTransitRouterRegionId;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.PeerAttachmentsTagResult> Tags;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The name of the transit router peer attachment.
        /// </summary>
        public readonly string? TransitRouterAttachmentName;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.PeerAttachmentsTransitRouterAttachmentResult> TransitRouterAttachments;
        /// <summary>
        /// The id of the local transit router.
        /// </summary>
        public readonly string? TransitRouterId;

        [OutputConstructor]
        private PeerAttachmentsResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string? peerTransitRouterId,

            string? peerTransitRouterRegionId,

            ImmutableArray<Outputs.PeerAttachmentsTagResult> tags,

            int totalCount,

            string? transitRouterAttachmentName,

            ImmutableArray<Outputs.PeerAttachmentsTransitRouterAttachmentResult> transitRouterAttachments,

            string? transitRouterId)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            PeerTransitRouterId = peerTransitRouterId;
            PeerTransitRouterRegionId = peerTransitRouterRegionId;
            Tags = tags;
            TotalCount = totalCount;
            TransitRouterAttachmentName = transitRouterAttachmentName;
            TransitRouterAttachments = transitRouterAttachments;
            TransitRouterId = transitRouterId;
        }
    }
}
