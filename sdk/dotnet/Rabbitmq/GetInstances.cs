// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rabbitmq
{
    public static class GetInstances
    {
        /// <summary>
        /// Use this data source to query detailed information of rabbitmq instances
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Rabbitmq.Instance("fooInstance", new()
        ///     {
        ///         ZoneIds = new[]
        ///         {
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.Id),
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[2]?.Id),
        ///         },
        ///         SubnetId = fooSubnet.Id,
        ///         Version = "3.8.18",
        ///         UserName = "acc-test-user",
        ///         UserPassword = "93f0cb0614Aab12",
        ///         ComputeSpec = "rabbitmq.n3.x2.small",
        ///         StorageSpace = 300,
        ///         InstanceName = "acc-test-rabbitmq",
        ///         InstanceDescription = "acc-test",
        ///         ChargeInfo = new Volcengine.Rabbitmq.Inputs.InstanceChargeInfoArgs
        ///         {
        ///             ChargeType = "PostPaid",
        ///         },
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Rabbitmq.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooInstances = Volcengine.Rabbitmq.GetInstances.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstancesResult> InvokeAsync(GetInstancesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstancesResult>("volcengine:rabbitmq/getInstances:getInstances", args ?? new GetInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of rabbitmq instances
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Rabbitmq.Instance("fooInstance", new()
        ///     {
        ///         ZoneIds = new[]
        ///         {
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.Id),
        ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[2]?.Id),
        ///         },
        ///         SubnetId = fooSubnet.Id,
        ///         Version = "3.8.18",
        ///         UserName = "acc-test-user",
        ///         UserPassword = "93f0cb0614Aab12",
        ///         ComputeSpec = "rabbitmq.n3.x2.small",
        ///         StorageSpace = 300,
        ///         InstanceName = "acc-test-rabbitmq",
        ///         InstanceDescription = "acc-test",
        ///         ChargeInfo = new Volcengine.Rabbitmq.Inputs.InstanceChargeInfoArgs
        ///         {
        ///             ChargeType = "PostPaid",
        ///         },
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Rabbitmq.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooInstances = Volcengine.Rabbitmq.GetInstances.Invoke(new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstancesResult> Invoke(GetInstancesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstancesResult>("volcengine:rabbitmq/getInstances:getInstances", args ?? new GetInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstancesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The charge type of rabbitmq instance.
        /// </summary>
        [Input("chargeType")]
        public string? ChargeType { get; set; }

        /// <summary>
        /// The id of rabbitmq instance. This field supports fuzzy query.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// The name of rabbitmq instance. This field supports fuzzy query.
        /// </summary>
        [Input("instanceName")]
        public string? InstanceName { get; set; }

        /// <summary>
        /// The status of rabbitmq instance.
        /// </summary>
        [Input("instanceStatus")]
        public string? InstanceStatus { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of rabbitmq instance.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// The calculation specification of rabbitmq instance.
        /// </summary>
        [Input("spec")]
        public string? Spec { get; set; }

        [Input("tags")]
        private List<Inputs.GetInstancesTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetInstancesTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetInstancesTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The vpc id of rabbitmq instance. This field supports fuzzy query.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        /// <summary>
        /// The zone id of rabbitmq instance. This field supports fuzzy query.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetInstancesArgs()
        {
        }
        public static new GetInstancesArgs Empty => new GetInstancesArgs();
    }

    public sealed class GetInstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The charge type of rabbitmq instance.
        /// </summary>
        [Input("chargeType")]
        public Input<string>? ChargeType { get; set; }

        /// <summary>
        /// The id of rabbitmq instance. This field supports fuzzy query.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of rabbitmq instance. This field supports fuzzy query.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The status of rabbitmq instance.
        /// </summary>
        [Input("instanceStatus")]
        public Input<string>? InstanceStatus { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of rabbitmq instance.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The calculation specification of rabbitmq instance.
        /// </summary>
        [Input("spec")]
        public Input<string>? Spec { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetInstancesTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetInstancesTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetInstancesTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The vpc id of rabbitmq instance. This field supports fuzzy query.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The zone id of rabbitmq instance. This field supports fuzzy query.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetInstancesInvokeArgs()
        {
        }
        public static new GetInstancesInvokeArgs Empty => new GetInstancesInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstancesResult
    {
        /// <summary>
        /// The charge type of the rabbitmq instance.
        /// </summary>
        public readonly string? ChargeType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The id of the rabbitmq instance.
        /// </summary>
        public readonly string? InstanceId;
        /// <summary>
        /// The name of the rabbitmq instance.
        /// </summary>
        public readonly string? InstanceName;
        /// <summary>
        /// The status of the rabbitmq instance.
        /// </summary>
        public readonly string? InstanceStatus;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The project name of the rabbitmq instance.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesRabbitmqInstanceResult> RabbitmqInstances;
        public readonly string? Spec;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesTagResult> Tags;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The vpc id of the rabbitmq instance.
        /// </summary>
        public readonly string? VpcId;
        /// <summary>
        /// The zone id of the rabbitmq instance.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetInstancesResult(
            string? chargeType,

            string id,

            string? instanceId,

            string? instanceName,

            string? instanceStatus,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            ImmutableArray<Outputs.GetInstancesRabbitmqInstanceResult> rabbitmqInstances,

            string? spec,

            ImmutableArray<Outputs.GetInstancesTagResult> tags,

            int totalCount,

            string? vpcId,

            string? zoneId)
        {
            ChargeType = chargeType;
            Id = id;
            InstanceId = instanceId;
            InstanceName = instanceName;
            InstanceStatus = instanceStatus;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            RabbitmqInstances = rabbitmqInstances;
            Spec = spec;
            Tags = tags;
            TotalCount = totalCount;
            VpcId = vpcId;
            ZoneId = zoneId;
        }
    }
}
