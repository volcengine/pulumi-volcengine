// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rabbitmq
{
    /// <summary>
    /// Provides a resource to manage rabbitmq instance
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Rabbitmq.Instance("fooInstance", new()
    ///     {
    ///         ZoneIds = new[]
    ///         {
    ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[1]?.Id),
    ///             fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[2]?.Id),
    ///         },
    ///         SubnetId = fooSubnet.Id,
    ///         Version = "3.8.18",
    ///         UserName = "acc-test-user",
    ///         UserPassword = "93f0cb0614Aab12",
    ///         ComputeSpec = "rabbitmq.n3.x2.small",
    ///         StorageSpace = 300,
    ///         InstanceName = "acc-test-rabbitmq",
    ///         InstanceDescription = "acc-test",
    ///         ChargeInfo = new Volcengine.Rabbitmq.Inputs.InstanceChargeInfoArgs
    ///         {
    ///             ChargeType = "PostPaid",
    ///         },
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Rabbitmq.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RabbitmqInstance can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:rabbitmq/instance:Instance default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:rabbitmq/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account id of the rabbitmq instance.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// Whether enable the public network parsing function of the rabbitmq instance.
        /// </summary>
        [Output("applyPrivateDnsToPublic")]
        public Output<bool> ApplyPrivateDnsToPublic { get; private set; } = null!;

        /// <summary>
        /// The type of the rabbitmq instance.
        /// </summary>
        [Output("archType")]
        public Output<string> ArchType { get; private set; } = null!;

        /// <summary>
        /// The charge information of the rocketmq instance.
        /// </summary>
        [Output("chargeInfo")]
        public Output<Outputs.InstanceChargeInfo> ChargeInfo { get; private set; } = null!;

        /// <summary>
        /// The compute specification of the rabbitmq instance.
        /// </summary>
        [Output("computeSpec")]
        public Output<string> ComputeSpec { get; private set; } = null!;

        /// <summary>
        /// The create time of the rabbitmq instance.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// The eip id of the rabbitmq instance.
        /// </summary>
        [Output("eipId")]
        public Output<string> EipId { get; private set; } = null!;

        /// <summary>
        /// The endpoint info of the rabbitmq instance.
        /// </summary>
        [Output("endpoints")]
        public Output<ImmutableArray<Outputs.InstanceEndpoint>> Endpoints { get; private set; } = null!;

        /// <summary>
        /// The WebUI admin user name of the rabbitmq instance.
        /// </summary>
        [Output("initUserName")]
        public Output<string> InitUserName { get; private set; } = null!;

        /// <summary>
        /// The description of the rabbitmq instance.
        /// </summary>
        [Output("instanceDescription")]
        public Output<string?> InstanceDescription { get; private set; } = null!;

        /// <summary>
        /// The name of the rabbitmq instance.
        /// </summary>
        [Output("instanceName")]
        public Output<string> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The status of the rabbitmq instance.
        /// </summary>
        [Output("instanceStatus")]
        public Output<string> InstanceStatus { get; private set; } = null!;

        /// <summary>
        /// The IAM project name where the rabbitmq instance resides.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The region id of the rabbitmq instance.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        /// </summary>
        [Output("storageSpace")]
        public Output<int> StorageSpace { get; private set; } = null!;

        /// <summary>
        /// The subnet id of the rabbitmq instance.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.InstanceTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The used storage space of the rabbitmq instance. Unit: GiB.
        /// </summary>
        [Output("usedStorageSpace")]
        public Output<int> UsedStorageSpace { get; private set; } = null!;

        /// <summary>
        /// The administrator name of the rabbitmq instance.
        /// </summary>
        [Output("userName")]
        public Output<string> UserName { get; private set; } = null!;

        /// <summary>
        /// The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("userPassword")]
        public Output<string> UserPassword { get; private set; } = null!;

        /// <summary>
        /// The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        /// </summary>
        [Output("version")]
        public Output<string> Version { get; private set; } = null!;

        /// <summary>
        /// The vpc id of the rabbitmq instance.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        /// </summary>
        [Output("zoneIds")]
        public Output<ImmutableArray<string>> ZoneIds { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:rabbitmq/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:rabbitmq/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
                AdditionalSecretOutputs =
                {
                    "userPassword",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The charge information of the rocketmq instance.
        /// </summary>
        [Input("chargeInfo", required: true)]
        public Input<Inputs.InstanceChargeInfoArgs> ChargeInfo { get; set; } = null!;

        /// <summary>
        /// The compute specification of the rabbitmq instance.
        /// </summary>
        [Input("computeSpec", required: true)]
        public Input<string> ComputeSpec { get; set; } = null!;

        /// <summary>
        /// The description of the rabbitmq instance.
        /// </summary>
        [Input("instanceDescription")]
        public Input<string>? InstanceDescription { get; set; }

        /// <summary>
        /// The name of the rabbitmq instance.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The IAM project name where the rabbitmq instance resides.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        /// </summary>
        [Input("storageSpace", required: true)]
        public Input<int> StorageSpace { get; set; } = null!;

        /// <summary>
        /// The subnet id of the rabbitmq instance.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.InstanceTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The administrator name of the rabbitmq instance.
        /// </summary>
        [Input("userName", required: true)]
        public Input<string> UserName { get; set; } = null!;

        [Input("userPassword", required: true)]
        private Input<string>? _userPassword;

        /// <summary>
        /// The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        public Input<string>? UserPassword
        {
            get => _userPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _userPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        /// </summary>
        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        [Input("zoneIds", required: true)]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account id of the rabbitmq instance.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// Whether enable the public network parsing function of the rabbitmq instance.
        /// </summary>
        [Input("applyPrivateDnsToPublic")]
        public Input<bool>? ApplyPrivateDnsToPublic { get; set; }

        /// <summary>
        /// The type of the rabbitmq instance.
        /// </summary>
        [Input("archType")]
        public Input<string>? ArchType { get; set; }

        /// <summary>
        /// The charge information of the rocketmq instance.
        /// </summary>
        [Input("chargeInfo")]
        public Input<Inputs.InstanceChargeInfoGetArgs>? ChargeInfo { get; set; }

        /// <summary>
        /// The compute specification of the rabbitmq instance.
        /// </summary>
        [Input("computeSpec")]
        public Input<string>? ComputeSpec { get; set; }

        /// <summary>
        /// The create time of the rabbitmq instance.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// The eip id of the rabbitmq instance.
        /// </summary>
        [Input("eipId")]
        public Input<string>? EipId { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.InstanceEndpointGetArgs>? _endpoints;

        /// <summary>
        /// The endpoint info of the rabbitmq instance.
        /// </summary>
        public InputList<Inputs.InstanceEndpointGetArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.InstanceEndpointGetArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// The WebUI admin user name of the rabbitmq instance.
        /// </summary>
        [Input("initUserName")]
        public Input<string>? InitUserName { get; set; }

        /// <summary>
        /// The description of the rabbitmq instance.
        /// </summary>
        [Input("instanceDescription")]
        public Input<string>? InstanceDescription { get; set; }

        /// <summary>
        /// The name of the rabbitmq instance.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The status of the rabbitmq instance.
        /// </summary>
        [Input("instanceStatus")]
        public Input<string>? InstanceStatus { get; set; }

        /// <summary>
        /// The IAM project name where the rabbitmq instance resides.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The region id of the rabbitmq instance.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// The storage space of the rabbitmq instance. Unit: GiB. The valid value must be specified as a multiple of 100.
        /// </summary>
        [Input("storageSpace")]
        public Input<int>? StorageSpace { get; set; }

        /// <summary>
        /// The subnet id of the rabbitmq instance.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Inputs.InstanceTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The used storage space of the rabbitmq instance. Unit: GiB.
        /// </summary>
        [Input("usedStorageSpace")]
        public Input<int>? UsedStorageSpace { get; set; }

        /// <summary>
        /// The administrator name of the rabbitmq instance.
        /// </summary>
        [Input("userName")]
        public Input<string>? UserName { get; set; }

        [Input("userPassword")]
        private Input<string>? _userPassword;

        /// <summary>
        /// The administrator password. When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        public Input<string>? UserPassword
        {
            get => _userPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _userPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The version of the rabbitmq instance. Valid values: `3.8.18`, `3.12`.
        /// </summary>
        [Input("version")]
        public Input<string>? Version { get; set; }

        /// <summary>
        /// The vpc id of the rabbitmq instance.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The zone id of the rabbitmq instance. Support specifying multiple availability zones.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
