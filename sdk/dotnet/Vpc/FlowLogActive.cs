// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpc
{
    /// <summary>
    /// Provides a resource to manage flow log active
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///         ProjectName = "default",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooFlowLog = new Volcengine.Vpc.FlowLog("fooFlowLog", new()
    ///     {
    ///         FlowLogName = "acc-test-flow-log",
    ///         Description = "acc-test",
    ///         ResourceType = "subnet",
    ///         ResourceId = fooSubnet.Id,
    ///         TrafficType = "All",
    ///         LogProjectName = "acc-test-project",
    ///         LogTopicName = "acc-test-topic",
    ///         AggregationInterval = 10,
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vpc.Inputs.FlowLogTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooFlowLogActive = new Volcengine.Vpc.FlowLogActive("fooFlowLogActive", new()
    ///     {
    ///         FlowLogId = fooFlowLog.Id,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// FlowLogActive can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vpc/flowLogActive:FlowLogActive default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vpc/flowLogActive:FlowLogActive")]
    public partial class FlowLogActive : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The ID of flow log.
        /// </summary>
        [Output("flowLogId")]
        public Output<string> FlowLogId { get; private set; } = null!;

        /// <summary>
        /// The status of flow log.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;


        /// <summary>
        /// Create a FlowLogActive resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlowLogActive(string name, FlowLogActiveArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vpc/flowLogActive:FlowLogActive", name, args ?? new FlowLogActiveArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlowLogActive(string name, Input<string> id, FlowLogActiveState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vpc/flowLogActive:FlowLogActive", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlowLogActive resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlowLogActive Get(string name, Input<string> id, FlowLogActiveState? state = null, CustomResourceOptions? options = null)
        {
            return new FlowLogActive(name, id, state, options);
        }
    }

    public sealed class FlowLogActiveArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of flow log.
        /// </summary>
        [Input("flowLogId", required: true)]
        public Input<string> FlowLogId { get; set; } = null!;

        public FlowLogActiveArgs()
        {
        }
        public static new FlowLogActiveArgs Empty => new FlowLogActiveArgs();
    }

    public sealed class FlowLogActiveState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of flow log.
        /// </summary>
        [Input("flowLogId")]
        public Input<string>? FlowLogId { get; set; }

        /// <summary>
        /// The status of flow log.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public FlowLogActiveState()
        {
        }
        public static new FlowLogActiveState Empty => new FlowLogActiveState();
    }
}
