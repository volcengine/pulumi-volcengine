// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpc
{
    /// <summary>
    /// Provides a resource to manage traffic mirror session
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
    ///     {
    ///         SecurityGroupName = "acc-test-sg",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooImages = Volcengine.Ecs.GetImages.Invoke(new()
    ///     {
    ///         OsType = "Linux",
    ///         Visibility = "public",
    ///         InstanceTypeId = "ecs.g3il.large",
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
    ///     {
    ///         InstanceName = "acc-test-ecs",
    ///         Description = "acc-test",
    ///         HostName = "tf-acc-test",
    ///         ImageId = fooImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.ImageId),
    ///         InstanceType = "ecs.g3il.large",
    ///         Password = "93f0cb0614Aab12",
    ///         InstanceChargeType = "PostPaid",
    ///         SystemVolumeType = "ESSD_PL0",
    ///         SystemVolumeSize = 40,
    ///         SubnetId = fooSubnet.Id,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             fooSecurityGroup.Id,
    ///         },
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Ecs.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooNetworkInterface = new Volcengine.Vpc.NetworkInterface("fooNetworkInterface", new()
    ///     {
    ///         NetworkInterfaceName = "acc-test-eni",
    ///         Description = "acc-test",
    ///         SubnetId = fooSubnet.Id,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             fooSecurityGroup.Id,
    ///         },
    ///         PrimaryIpAddress = "172.16.0.253",
    ///         PortSecurityEnabled = false,
    ///         PrivateIpAddresses = new[]
    ///         {
    ///             "172.16.0.2",
    ///         },
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vpc.Inputs.NetworkInterfaceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var foo_sourceNetworkInterface = new Volcengine.Vpc.NetworkInterface("foo-sourceNetworkInterface", new()
    ///     {
    ///         NetworkInterfaceName = "acc-test-eni",
    ///         Description = "acc-test",
    ///         SubnetId = fooSubnet.Id,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             fooSecurityGroup.Id,
    ///         },
    ///         PrimaryIpAddress = "172.16.0.252",
    ///         PortSecurityEnabled = false,
    ///         PrivateIpAddresses = new[]
    ///         {
    ///             "172.16.0.5",
    ///         },
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vpc.Inputs.NetworkInterfaceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooNetworkInterfaceAttach = new Volcengine.Vpc.NetworkInterfaceAttach("fooNetworkInterfaceAttach", new()
    ///     {
    ///         NetworkInterfaceId = fooNetworkInterface.Id,
    ///         InstanceId = fooInstance.Id,
    ///     });
    /// 
    ///     var foo_sourceNetworkInterfaceAttach = new Volcengine.Vpc.NetworkInterfaceAttach("foo-sourceNetworkInterfaceAttach", new()
    ///     {
    ///         NetworkInterfaceId = foo_sourceNetworkInterface.Id,
    ///         InstanceId = fooInstance.Id,
    ///     });
    /// 
    ///     var fooTrafficMirrorTarget = new Volcengine.Vpc.TrafficMirrorTarget("fooTrafficMirrorTarget", new()
    ///     {
    ///         InstanceType = "NetworkInterface",
    ///         InstanceId = fooNetworkInterface.Id,
    ///         TrafficMirrorTargetName = "acc-test-traffic-mirror-target",
    ///         Description = "acc-test",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vpc.Inputs.TrafficMirrorTargetTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fooNetworkInterfaceAttach,
    ///         },
    ///     });
    /// 
    ///     var fooTrafficMirrorFilter = new Volcengine.Vpc.TrafficMirrorFilter("fooTrafficMirrorFilter", new()
    ///     {
    ///         TrafficMirrorFilterName = "acc-test-traffic-mirror-filter",
    ///         Description = "acc-test",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vpc.Inputs.TrafficMirrorFilterTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooTrafficMirrorSession = new Volcengine.Vpc.TrafficMirrorSession("fooTrafficMirrorSession", new()
    ///     {
    ///         TrafficMirrorFilterId = fooTrafficMirrorFilter.Id,
    ///         TrafficMirrorTargetId = fooTrafficMirrorTarget.Id,
    ///         TrafficMirrorSessionName = "acc-test-traffic-mirror-session",
    ///         Description = "acc-test",
    ///         NetworkInterfaceId = foo_sourceNetworkInterface.Id,
    ///         VirtualNetworkId = 10,
    ///         PacketLength = 1000,
    ///         Priority = 1,
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vpc.Inputs.TrafficMirrorSessionTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             foo_sourceNetworkInterfaceAttach,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TrafficMirrorSession can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vpc/trafficMirrorSession:TrafficMirrorSession default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vpc/trafficMirrorSession:TrafficMirrorSession")]
    public partial class TrafficMirrorSession : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The business status of traffic mirror session.
        /// </summary>
        [Output("businessStatus")]
        public Output<string> BusinessStatus { get; private set; } = null!;

        /// <summary>
        /// The create time of traffic mirror session.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the traffic mirror session.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The lock reason of traffic mirror session.
        /// </summary>
        [Output("lockReason")]
        public Output<string> LockReason { get; private set; } = null!;

        /// <summary>
        /// The ID of network interface.
        /// </summary>
        [Output("networkInterfaceId")]
        public Output<string> NetworkInterfaceId { get; private set; } = null!;

        /// <summary>
        /// The packet length of traffic mirror session.
        /// </summary>
        [Output("packetLength")]
        public Output<int> PacketLength { get; private set; } = null!;

        /// <summary>
        /// The priority of traffic mirror session. Valid values: 1~32766.
        /// </summary>
        [Output("priority")]
        public Output<int> Priority { get; private set; } = null!;

        /// <summary>
        /// The project name of traffic mirror session.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The status of traffic mirror session.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.TrafficMirrorSessionTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The ID of traffic mirror filter.
        /// </summary>
        [Output("trafficMirrorFilterId")]
        public Output<string> TrafficMirrorFilterId { get; private set; } = null!;

        /// <summary>
        /// The name of the traffic mirror session.
        /// </summary>
        [Output("trafficMirrorSessionName")]
        public Output<string> TrafficMirrorSessionName { get; private set; } = null!;

        /// <summary>
        /// The ID of traffic mirror target.
        /// </summary>
        [Output("trafficMirrorTargetId")]
        public Output<string> TrafficMirrorTargetId { get; private set; } = null!;

        /// <summary>
        /// The update time of traffic mirror session.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;

        /// <summary>
        /// The ID of virtual network.
        /// </summary>
        [Output("virtualNetworkId")]
        public Output<int> VirtualNetworkId { get; private set; } = null!;


        /// <summary>
        /// Create a TrafficMirrorSession resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrafficMirrorSession(string name, TrafficMirrorSessionArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vpc/trafficMirrorSession:TrafficMirrorSession", name, args ?? new TrafficMirrorSessionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TrafficMirrorSession(string name, Input<string> id, TrafficMirrorSessionState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vpc/trafficMirrorSession:TrafficMirrorSession", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrafficMirrorSession resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrafficMirrorSession Get(string name, Input<string> id, TrafficMirrorSessionState? state = null, CustomResourceOptions? options = null)
        {
            return new TrafficMirrorSession(name, id, state, options);
        }
    }

    public sealed class TrafficMirrorSessionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the traffic mirror session.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of network interface.
        /// </summary>
        [Input("networkInterfaceId", required: true)]
        public Input<string> NetworkInterfaceId { get; set; } = null!;

        /// <summary>
        /// The packet length of traffic mirror session.
        /// </summary>
        [Input("packetLength")]
        public Input<int>? PacketLength { get; set; }

        /// <summary>
        /// The priority of traffic mirror session. Valid values: 1~32766.
        /// </summary>
        [Input("priority", required: true)]
        public Input<int> Priority { get; set; } = null!;

        /// <summary>
        /// The project name of traffic mirror session.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("tags")]
        private InputList<Inputs.TrafficMirrorSessionTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.TrafficMirrorSessionTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TrafficMirrorSessionTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of traffic mirror filter.
        /// </summary>
        [Input("trafficMirrorFilterId", required: true)]
        public Input<string> TrafficMirrorFilterId { get; set; } = null!;

        /// <summary>
        /// The name of the traffic mirror session.
        /// </summary>
        [Input("trafficMirrorSessionName")]
        public Input<string>? TrafficMirrorSessionName { get; set; }

        /// <summary>
        /// The ID of traffic mirror target.
        /// </summary>
        [Input("trafficMirrorTargetId", required: true)]
        public Input<string> TrafficMirrorTargetId { get; set; } = null!;

        /// <summary>
        /// The ID of virtual network.
        /// </summary>
        [Input("virtualNetworkId")]
        public Input<int>? VirtualNetworkId { get; set; }

        public TrafficMirrorSessionArgs()
        {
        }
        public static new TrafficMirrorSessionArgs Empty => new TrafficMirrorSessionArgs();
    }

    public sealed class TrafficMirrorSessionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The business status of traffic mirror session.
        /// </summary>
        [Input("businessStatus")]
        public Input<string>? BusinessStatus { get; set; }

        /// <summary>
        /// The create time of traffic mirror session.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the traffic mirror session.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The lock reason of traffic mirror session.
        /// </summary>
        [Input("lockReason")]
        public Input<string>? LockReason { get; set; }

        /// <summary>
        /// The ID of network interface.
        /// </summary>
        [Input("networkInterfaceId")]
        public Input<string>? NetworkInterfaceId { get; set; }

        /// <summary>
        /// The packet length of traffic mirror session.
        /// </summary>
        [Input("packetLength")]
        public Input<int>? PacketLength { get; set; }

        /// <summary>
        /// The priority of traffic mirror session. Valid values: 1~32766.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The project name of traffic mirror session.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The status of traffic mirror session.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.TrafficMirrorSessionTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.TrafficMirrorSessionTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TrafficMirrorSessionTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The ID of traffic mirror filter.
        /// </summary>
        [Input("trafficMirrorFilterId")]
        public Input<string>? TrafficMirrorFilterId { get; set; }

        /// <summary>
        /// The name of the traffic mirror session.
        /// </summary>
        [Input("trafficMirrorSessionName")]
        public Input<string>? TrafficMirrorSessionName { get; set; }

        /// <summary>
        /// The ID of traffic mirror target.
        /// </summary>
        [Input("trafficMirrorTargetId")]
        public Input<string>? TrafficMirrorTargetId { get; set; }

        /// <summary>
        /// The update time of traffic mirror session.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        /// <summary>
        /// The ID of virtual network.
        /// </summary>
        [Input("virtualNetworkId")]
        public Input<int>? VirtualNetworkId { get; set; }

        public TrafficMirrorSessionState()
        {
        }
        public static new TrafficMirrorSessionState Empty => new TrafficMirrorSessionState();
    }
}
