// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpc
{
    public static class GetHaVips
    {
        /// <summary>
        /// Use this data source to query detailed information of ha vips
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooHaVip = new Volcengine.Vpc.HaVip("fooHaVip", new()
        ///     {
        ///         HaVipName = "acc-test-ha-vip",
        ///         Description = "acc-test",
        ///         SubnetId = fooSubnet.Id,
        ///     });
        /// 
        ///     //  ip_address = "172.16.0.5"
        ///     var fooHaVips = Volcengine.Vpc.GetHaVips.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooHaVip.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetHaVipsResult> InvokeAsync(GetHaVipsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetHaVipsResult>("volcengine:vpc/getHaVips:getHaVips", args ?? new GetHaVipsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ha vips
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooHaVip = new Volcengine.Vpc.HaVip("fooHaVip", new()
        ///     {
        ///         HaVipName = "acc-test-ha-vip",
        ///         Description = "acc-test",
        ///         SubnetId = fooSubnet.Id,
        ///     });
        /// 
        ///     //  ip_address = "172.16.0.5"
        ///     var fooHaVips = Volcengine.Vpc.GetHaVips.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooHaVip.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetHaVipsResult> Invoke(GetHaVipsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetHaVipsResult>("volcengine:vpc/getHaVips:getHaVips", args ?? new GetHaVipsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetHaVipsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of Ha Vip.
        /// </summary>
        [Input("haVipName")]
        public string? HaVipName { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Ha Vip IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The ip address of Ha Vip.
        /// </summary>
        [Input("ipAddress")]
        public string? IpAddress { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of Ha Vip.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        /// <summary>
        /// The status of Ha Vip.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        /// <summary>
        /// The id of subnet.
        /// </summary>
        [Input("subnetId")]
        public string? SubnetId { get; set; }

        [Input("tags")]
        private List<Inputs.GetHaVipsTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetHaVipsTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetHaVipsTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of vpc.
        /// </summary>
        [Input("vpcId")]
        public string? VpcId { get; set; }

        public GetHaVipsArgs()
        {
        }
        public static new GetHaVipsArgs Empty => new GetHaVipsArgs();
    }

    public sealed class GetHaVipsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of Ha Vip.
        /// </summary>
        [Input("haVipName")]
        public Input<string>? HaVipName { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Ha Vip IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The ip address of Ha Vip.
        /// </summary>
        [Input("ipAddress")]
        public Input<string>? IpAddress { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of Ha Vip.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The status of Ha Vip.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The id of subnet.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetHaVipsTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetHaVipsTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetHaVipsTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The id of vpc.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        public GetHaVipsInvokeArgs()
        {
        }
        public static new GetHaVipsInvokeArgs Empty => new GetHaVipsInvokeArgs();
    }


    [OutputType]
    public sealed class GetHaVipsResult
    {
        /// <summary>
        /// The name of the Ha Vip.
        /// </summary>
        public readonly string? HaVipName;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHaVipsHaVipResult> HaVips;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The ip address of the Ha Vip.
        /// </summary>
        public readonly string? IpAddress;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The project name of the Ha Vip.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// The status of the Ha Vip.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The subnet id of the Ha Vip.
        /// </summary>
        public readonly string? SubnetId;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetHaVipsTagResult> Tags;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The vpc id of the Ha Vip.
        /// </summary>
        public readonly string? VpcId;

        [OutputConstructor]
        private GetHaVipsResult(
            string? haVipName,

            ImmutableArray<Outputs.GetHaVipsHaVipResult> haVips,

            string id,

            ImmutableArray<string> ids,

            string? ipAddress,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            string? status,

            string? subnetId,

            ImmutableArray<Outputs.GetHaVipsTagResult> tags,

            int totalCount,

            string? vpcId)
        {
            HaVipName = haVipName;
            HaVips = haVips;
            Id = id;
            Ids = ids;
            IpAddress = ipAddress;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            Status = status;
            SubnetId = subnetId;
            Tags = tags;
            TotalCount = totalCount;
            VpcId = vpcId;
        }
    }
}
