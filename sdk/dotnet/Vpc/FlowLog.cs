// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpc
{
    /// <summary>
    /// Provides a resource to manage flow log
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///         ProjectName = "default",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooFlowLog = new Volcengine.Vpc.FlowLog("fooFlowLog", new()
    ///     {
    ///         FlowLogName = "acc-test-flow-log",
    ///         Description = "acc-test",
    ///         ResourceType = "subnet",
    ///         ResourceId = fooSubnet.Id,
    ///         TrafficType = "All",
    ///         LogProjectName = "acc-test-project",
    ///         LogTopicName = "acc-test-topic",
    ///         AggregationInterval = 10,
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vpc.Inputs.FlowLogTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// FlowLog can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vpc/flowLog:FlowLog default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vpc/flowLog:FlowLog")]
    public partial class FlowLog : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        /// </summary>
        [Output("aggregationInterval")]
        public Output<int> AggregationInterval { get; private set; } = null!;

        /// <summary>
        /// The business status of flow log.
        /// </summary>
        [Output("businessStatus")]
        public Output<string> BusinessStatus { get; private set; } = null!;

        /// <summary>
        /// The created time of flow log.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of flow log.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of flow log.
        /// </summary>
        [Output("flowLogName")]
        public Output<string> FlowLogName { get; private set; } = null!;

        /// <summary>
        /// The reason why flow log is locked.
        /// </summary>
        [Output("lockReason")]
        public Output<string> LockReason { get; private set; } = null!;

        /// <summary>
        /// The ID of log project.
        /// </summary>
        [Output("logProjectId")]
        public Output<string> LogProjectId { get; private set; } = null!;

        /// <summary>
        /// The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("logProjectName")]
        public Output<string> LogProjectName { get; private set; } = null!;

        /// <summary>
        /// The ID of log topic.
        /// </summary>
        [Output("logTopicId")]
        public Output<string> LogTopicId { get; private set; } = null!;

        /// <summary>
        /// The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Output("logTopicName")]
        public Output<string> LogTopicName { get; private set; } = null!;

        /// <summary>
        /// The project name of flow log.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The ID of resource.
        /// </summary>
        [Output("resourceId")]
        public Output<string> ResourceId { get; private set; } = null!;

        /// <summary>
        /// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        /// </summary>
        [Output("resourceType")]
        public Output<string> ResourceType { get; private set; } = null!;

        /// <summary>
        /// The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.FlowLogTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        /// </summary>
        [Output("trafficType")]
        public Output<string> TrafficType { get; private set; } = null!;

        /// <summary>
        /// The updated time of flow log.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a FlowLog resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FlowLog(string name, FlowLogArgs args, CustomResourceOptions? options = null)
            : base("volcengine:vpc/flowLog:FlowLog", name, args ?? new FlowLogArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FlowLog(string name, Input<string> id, FlowLogState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vpc/flowLog:FlowLog", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FlowLog resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FlowLog Get(string name, Input<string> id, FlowLogState? state = null, CustomResourceOptions? options = null)
        {
            return new FlowLog(name, id, state, options);
        }
    }

    public sealed class FlowLogArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        /// </summary>
        [Input("aggregationInterval", required: true)]
        public Input<int> AggregationInterval { get; set; } = null!;

        /// <summary>
        /// The description of flow log.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of flow log.
        /// </summary>
        [Input("flowLogName", required: true)]
        public Input<string> FlowLogName { get; set; } = null!;

        /// <summary>
        /// The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("logProjectName", required: true)]
        public Input<string> LogProjectName { get; set; } = null!;

        /// <summary>
        /// The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("logTopicName", required: true)]
        public Input<string> LogTopicName { get; set; } = null!;

        /// <summary>
        /// The project name of flow log.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The ID of resource.
        /// </summary>
        [Input("resourceId", required: true)]
        public Input<string> ResourceId { get; set; } = null!;

        /// <summary>
        /// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        /// </summary>
        [Input("resourceType", required: true)]
        public Input<string> ResourceType { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.FlowLogTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.FlowLogTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.FlowLogTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        /// </summary>
        [Input("trafficType", required: true)]
        public Input<string> TrafficType { get; set; } = null!;

        public FlowLogArgs()
        {
        }
        public static new FlowLogArgs Empty => new FlowLogArgs();
    }

    public sealed class FlowLogState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The aggregation interval of flow log. Unit: minute. Valid values: `1`, `5`, `10`.
        /// </summary>
        [Input("aggregationInterval")]
        public Input<int>? AggregationInterval { get; set; }

        /// <summary>
        /// The business status of flow log.
        /// </summary>
        [Input("businessStatus")]
        public Input<string>? BusinessStatus { get; set; }

        /// <summary>
        /// The created time of flow log.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of flow log.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of flow log.
        /// </summary>
        [Input("flowLogName")]
        public Input<string>? FlowLogName { get; set; }

        /// <summary>
        /// The reason why flow log is locked.
        /// </summary>
        [Input("lockReason")]
        public Input<string>? LockReason { get; set; }

        /// <summary>
        /// The ID of log project.
        /// </summary>
        [Input("logProjectId")]
        public Input<string>? LogProjectId { get; set; }

        /// <summary>
        /// The name of log project. If there is no corresponding log project with the name, a new log project will be created. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("logProjectName")]
        public Input<string>? LogProjectName { get; set; }

        /// <summary>
        /// The ID of log topic.
        /// </summary>
        [Input("logTopicId")]
        public Input<string>? LogTopicId { get; set; }

        /// <summary>
        /// The name of log topic. If there is no corresponding log topic with the name, a new log topic will be created. 
        /// When importing resources, this attribute will not be imported. If this attribute is set, please use lifecycle and ignore_changes ignore changes in fields.
        /// </summary>
        [Input("logTopicName")]
        public Input<string>? LogTopicName { get; set; }

        /// <summary>
        /// The project name of flow log.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The ID of resource.
        /// </summary>
        [Input("resourceId")]
        public Input<string>? ResourceId { get; set; }

        /// <summary>
        /// The type of resource. Valid values: `vpc`, `subnet`, `eni`.
        /// </summary>
        [Input("resourceType")]
        public Input<string>? ResourceType { get; set; }

        /// <summary>
        /// The status of flow log. Values: `Active`, `Pending`, `Inactive`, `Creating`, `Deleting`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.FlowLogTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.FlowLogTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.FlowLogTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of traffic. Valid values: `All`, `Allow`, `Drop`.
        /// </summary>
        [Input("trafficType")]
        public Input<string>? TrafficType { get; set; }

        /// <summary>
        /// The updated time of flow log.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public FlowLogState()
        {
        }
        public static new FlowLogState Empty => new FlowLogState();
    }
}
