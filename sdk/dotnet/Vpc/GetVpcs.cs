// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpc
{
    public static class GetVpcs
    {
        /// <summary>
        /// Use this data source to query detailed information of vpcs
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vpc.GetVpcs.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "vpc-mizl7m1kqccg5smt1bdpijuj",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetVpcsResult> InvokeAsync(GetVpcsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVpcsResult>("volcengine:vpc/getVpcs:getVpcs", args ?? new GetVpcsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of vpcs
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Vpc.GetVpcs.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             "vpc-mizl7m1kqccg5smt1bdpijuj",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetVpcsResult> Invoke(GetVpcsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVpcsResult>("volcengine:vpc/getVpcs:getVpcs", args ?? new GetVpcsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVpcsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of VPC IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Vpc.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ProjectName of the VPC.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        [Input("tags")]
        private List<Inputs.GetVpcsTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetVpcsTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetVpcsTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The vpc name to query.
        /// </summary>
        [Input("vpcName")]
        public string? VpcName { get; set; }

        /// <summary>
        /// The owner ID of the vpc.
        /// </summary>
        [Input("vpcOwnerId")]
        public int? VpcOwnerId { get; set; }

        public GetVpcsArgs()
        {
        }
        public static new GetVpcsArgs Empty => new GetVpcsArgs();
    }

    public sealed class GetVpcsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of VPC IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Vpc.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The ProjectName of the VPC.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetVpcsTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetVpcsTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetVpcsTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The vpc name to query.
        /// </summary>
        [Input("vpcName")]
        public Input<string>? VpcName { get; set; }

        /// <summary>
        /// The owner ID of the vpc.
        /// </summary>
        [Input("vpcOwnerId")]
        public Input<int>? VpcOwnerId { get; set; }

        public GetVpcsInvokeArgs()
        {
        }
        public static new GetVpcsInvokeArgs Empty => new GetVpcsInvokeArgs();
    }


    [OutputType]
    public sealed class GetVpcsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The ProjectName of the VPC.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcsTagResult> Tags;
        /// <summary>
        /// The total count of Vpc query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The name of VPC.
        /// </summary>
        public readonly string? VpcName;
        public readonly int? VpcOwnerId;
        /// <summary>
        /// The collection of Vpc query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetVpcsVpcResult> Vpcs;

        [OutputConstructor]
        private GetVpcsResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            ImmutableArray<Outputs.GetVpcsTagResult> tags,

            int totalCount,

            string? vpcName,

            int? vpcOwnerId,

            ImmutableArray<Outputs.GetVpcsVpcResult> vpcs)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            Tags = tags;
            TotalCount = totalCount;
            VpcName = vpcName;
            VpcOwnerId = vpcOwnerId;
            Vpcs = vpcs;
        }
    }
}
