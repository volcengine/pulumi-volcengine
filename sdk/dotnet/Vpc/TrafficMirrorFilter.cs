// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Vpc
{
    /// <summary>
    /// Provides a resource to manage traffic mirror filter
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Vpc.TrafficMirrorFilter("foo", new()
    ///     {
    ///         Description = "acc-test",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Vpc.Inputs.TrafficMirrorFilterTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///         TrafficMirrorFilterName = "acc-test-traffic-mirror-filter",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// TrafficMirrorFilter can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:vpc/trafficMirrorFilter:TrafficMirrorFilter default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:vpc/trafficMirrorFilter:TrafficMirrorFilter")]
    public partial class TrafficMirrorFilter : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The create time of traffic mirror filter.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// The description of the traffic mirror filter.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The project name of the traffic mirror filter.
        /// </summary>
        [Output("projectName")]
        public Output<string?> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The status of traffic mirror filter.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.TrafficMirrorFilterTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of the traffic mirror filter.
        /// </summary>
        [Output("trafficMirrorFilterName")]
        public Output<string> TrafficMirrorFilterName { get; private set; } = null!;

        /// <summary>
        /// The last update time of traffic mirror filter.
        /// </summary>
        [Output("updatedAt")]
        public Output<string> UpdatedAt { get; private set; } = null!;


        /// <summary>
        /// Create a TrafficMirrorFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public TrafficMirrorFilter(string name, TrafficMirrorFilterArgs? args = null, CustomResourceOptions? options = null)
            : base("volcengine:vpc/trafficMirrorFilter:TrafficMirrorFilter", name, args ?? new TrafficMirrorFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private TrafficMirrorFilter(string name, Input<string> id, TrafficMirrorFilterState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:vpc/trafficMirrorFilter:TrafficMirrorFilter", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing TrafficMirrorFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static TrafficMirrorFilter Get(string name, Input<string> id, TrafficMirrorFilterState? state = null, CustomResourceOptions? options = null)
        {
            return new TrafficMirrorFilter(name, id, state, options);
        }
    }

    public sealed class TrafficMirrorFilterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the traffic mirror filter.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The project name of the traffic mirror filter.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("tags")]
        private InputList<Inputs.TrafficMirrorFilterTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.TrafficMirrorFilterTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TrafficMirrorFilterTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the traffic mirror filter.
        /// </summary>
        [Input("trafficMirrorFilterName")]
        public Input<string>? TrafficMirrorFilterName { get; set; }

        public TrafficMirrorFilterArgs()
        {
        }
        public static new TrafficMirrorFilterArgs Empty => new TrafficMirrorFilterArgs();
    }

    public sealed class TrafficMirrorFilterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The create time of traffic mirror filter.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// The description of the traffic mirror filter.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The project name of the traffic mirror filter.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The status of traffic mirror filter.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.TrafficMirrorFilterTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.TrafficMirrorFilterTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.TrafficMirrorFilterTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the traffic mirror filter.
        /// </summary>
        [Input("trafficMirrorFilterName")]
        public Input<string>? TrafficMirrorFilterName { get; set; }

        /// <summary>
        /// The last update time of traffic mirror filter.
        /// </summary>
        [Input("updatedAt")]
        public Input<string>? UpdatedAt { get; set; }

        public TrafficMirrorFilterState()
        {
        }
        public static new TrafficMirrorFilterState Empty => new TrafficMirrorFilterState();
    }
}
