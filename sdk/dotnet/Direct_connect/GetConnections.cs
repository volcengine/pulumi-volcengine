// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Direct_connect
{
    public static class GetConnections
    {
        /// <summary>
        /// Use this data source to query detailed information of direct connect connections
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Direct_connect.GetConnections.Invoke(new()
        ///     {
        ///         DirectConnectConnectionName = "tf_test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetConnectionsResult> InvokeAsync(GetConnectionsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetConnectionsResult>("volcengine:direct_connect/getConnections:getConnections", args ?? new GetConnectionsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of direct connect connections
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Direct_connect.GetConnections.Invoke(new()
        ///     {
        ///         DirectConnectConnectionName = "tf_test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetConnectionsResult> Invoke(GetConnectionsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetConnectionsResult>("volcengine:direct_connect/getConnections:getConnections", args ?? new GetConnectionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetConnectionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The connection type of physical leased line,valid value contains `SharedConnection`,`DedicatedConnection`.
        /// </summary>
        [Input("connectionType")]
        public string? ConnectionType { get; set; }

        /// <summary>
        /// The ID of the physical leased line access point.
        /// </summary>
        [Input("directConnectAccessPointId")]
        public string? DirectConnectAccessPointId { get; set; }

        /// <summary>
        /// The name of directi connect connection.
        /// </summary>
        [Input("directConnectConnectionName")]
        public string? DirectConnectConnectionName { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The operator of the physical leased line,valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
        /// </summary>
        [Input("lineOperator")]
        public string? LineOperator { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The peer access point of the physical leased line.
        /// </summary>
        [Input("peerLocation")]
        public string? PeerLocation { get; set; }

        [Input("tagFilters")]
        private List<Inputs.GetConnectionsTagFilterArgs>? _tagFilters;

        /// <summary>
        /// The filter tag of direct connect.
        /// </summary>
        public List<Inputs.GetConnectionsTagFilterArgs> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new List<Inputs.GetConnectionsTagFilterArgs>());
            set => _tagFilters = value;
        }

        public GetConnectionsArgs()
        {
        }
        public static new GetConnectionsArgs Empty => new GetConnectionsArgs();
    }

    public sealed class GetConnectionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The connection type of physical leased line,valid value contains `SharedConnection`,`DedicatedConnection`.
        /// </summary>
        [Input("connectionType")]
        public Input<string>? ConnectionType { get; set; }

        /// <summary>
        /// The ID of the physical leased line access point.
        /// </summary>
        [Input("directConnectAccessPointId")]
        public Input<string>? DirectConnectAccessPointId { get; set; }

        /// <summary>
        /// The name of directi connect connection.
        /// </summary>
        [Input("directConnectConnectionName")]
        public Input<string>? DirectConnectConnectionName { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The operator of the physical leased line,valid value contains `ChinaTelecom`,`ChinaMobile`,`ChinaUnicom`,`ChinaOther`.
        /// </summary>
        [Input("lineOperator")]
        public Input<string>? LineOperator { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The peer access point of the physical leased line.
        /// </summary>
        [Input("peerLocation")]
        public Input<string>? PeerLocation { get; set; }

        [Input("tagFilters")]
        private InputList<Inputs.GetConnectionsTagFilterInputArgs>? _tagFilters;

        /// <summary>
        /// The filter tag of direct connect.
        /// </summary>
        public InputList<Inputs.GetConnectionsTagFilterInputArgs> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new InputList<Inputs.GetConnectionsTagFilterInputArgs>());
            set => _tagFilters = value;
        }

        public GetConnectionsInvokeArgs()
        {
        }
        public static new GetConnectionsInvokeArgs Empty => new GetConnectionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetConnectionsResult
    {
        /// <summary>
        /// The connection type of direct connect.
        /// </summary>
        public readonly string? ConnectionType;
        /// <summary>
        /// The access point id of direct connect.
        /// </summary>
        public readonly string? DirectConnectAccessPointId;
        /// <summary>
        /// The name of direct connect connection.
        /// </summary>
        public readonly string? DirectConnectConnectionName;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetConnectionsDirectConnectConnectionResult> DirectConnectConnections;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The operator of physical leased line.
        /// </summary>
        public readonly string? LineOperator;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The peer access point of the physical leased line.
        /// </summary>
        public readonly string? PeerLocation;
        public readonly ImmutableArray<Outputs.GetConnectionsTagFilterResult> TagFilters;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetConnectionsResult(
            string? connectionType,

            string? directConnectAccessPointId,

            string? directConnectConnectionName,

            ImmutableArray<Outputs.GetConnectionsDirectConnectConnectionResult> directConnectConnections,

            string id,

            ImmutableArray<string> ids,

            string? lineOperator,

            string? nameRegex,

            string? outputFile,

            string? peerLocation,

            ImmutableArray<Outputs.GetConnectionsTagFilterResult> tagFilters,

            int totalCount)
        {
            ConnectionType = connectionType;
            DirectConnectAccessPointId = directConnectAccessPointId;
            DirectConnectConnectionName = directConnectConnectionName;
            DirectConnectConnections = directConnectConnections;
            Id = id;
            Ids = ids;
            LineOperator = lineOperator;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            PeerLocation = peerLocation;
            TagFilters = tagFilters;
            TotalCount = totalCount;
        }
    }
}
