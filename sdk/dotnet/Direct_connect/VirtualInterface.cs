// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Direct_connect
{
    /// <summary>
    /// Provides a resource to manage direct connect virtual interface
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Direct_connect.VirtualInterface("foo", new()
    ///     {
    ///         Description = "tf-test",
    ///         DirectConnectConnectionId = "dcc-rtkzeotzst1cu3numzi****",
    ///         DirectConnectGatewayId = "dcg-638x4bjvjawwn3gd5xw****",
    ///         EnableBfd = false,
    ///         LocalIp = "**.**.**.**/**",
    ///         PeerIp = "**.**.**.**/**",
    ///         RouteType = "Static",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Direct_connect.Inputs.VirtualInterfaceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///         VirtualInterfaceName = "tf-test-vi",
    ///         VlanId = 2,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DirectConnectVirtualInterface can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:direct_connect/virtualInterface:VirtualInterface default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:direct_connect/virtualInterface:VirtualInterface")]
    public partial class VirtualInterface : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The band width limit of virtual interface,in Mbps.
        /// </summary>
        [Output("bandwidth")]
        public Output<int> Bandwidth { get; private set; } = null!;

        /// <summary>
        /// The BFD detect interval.
        /// </summary>
        [Output("bfdDetectInterval")]
        public Output<int?> BfdDetectInterval { get; private set; } = null!;

        /// <summary>
        /// The BFD detect times.
        /// </summary>
        [Output("bfdDetectMultiplier")]
        public Output<int?> BfdDetectMultiplier { get; private set; } = null!;

        /// <summary>
        /// The description of virtual interface.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The direct connect connection ID which associated with.
        /// </summary>
        [Output("directConnectConnectionId")]
        public Output<string> DirectConnectConnectionId { get; private set; } = null!;

        /// <summary>
        /// The direct connect gateway ID which associated with.
        /// </summary>
        [Output("directConnectGatewayId")]
        public Output<string> DirectConnectGatewayId { get; private set; } = null!;

        /// <summary>
        /// Whether enable BFD detect.
        /// </summary>
        [Output("enableBfd")]
        public Output<bool?> EnableBfd { get; private set; } = null!;

        /// <summary>
        /// Whether enable NQA detect.
        /// </summary>
        [Output("enableNqa")]
        public Output<bool?> EnableNqa { get; private set; } = null!;

        /// <summary>
        /// The local IP that associated with.
        /// </summary>
        [Output("localIp")]
        public Output<string> LocalIp { get; private set; } = null!;

        /// <summary>
        /// The NQA detect interval.
        /// </summary>
        [Output("nqaDetectInterval")]
        public Output<int?> NqaDetectInterval { get; private set; } = null!;

        /// <summary>
        /// The NAQ detect times.
        /// </summary>
        [Output("nqaDetectMultiplier")]
        public Output<int?> NqaDetectMultiplier { get; private set; } = null!;

        /// <summary>
        /// The peer IP that associated with.
        /// </summary>
        [Output("peerIp")]
        public Output<string> PeerIp { get; private set; } = null!;

        /// <summary>
        /// The route type of virtual interface,valid value contains `Static`,`BGP`.
        /// </summary>
        [Output("routeType")]
        public Output<string> RouteType { get; private set; } = null!;

        /// <summary>
        /// The tags that direct connect gateway added.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.VirtualInterfaceTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The name of virtual interface.
        /// </summary>
        [Output("virtualInterfaceName")]
        public Output<string?> VirtualInterfaceName { get; private set; } = null!;

        /// <summary>
        /// The VLAN ID used to connect to the local IDC, please ensure that this VLAN ID is not occupied, the value range: 0 ~ 2999.
        /// </summary>
        [Output("vlanId")]
        public Output<int> VlanId { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualInterface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualInterface(string name, VirtualInterfaceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:direct_connect/virtualInterface:VirtualInterface", name, args ?? new VirtualInterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualInterface(string name, Input<string> id, VirtualInterfaceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:direct_connect/virtualInterface:VirtualInterface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualInterface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualInterface Get(string name, Input<string> id, VirtualInterfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new VirtualInterface(name, id, state, options);
        }
    }

    public sealed class VirtualInterfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The band width limit of virtual interface,in Mbps.
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// The BFD detect interval.
        /// </summary>
        [Input("bfdDetectInterval")]
        public Input<int>? BfdDetectInterval { get; set; }

        /// <summary>
        /// The BFD detect times.
        /// </summary>
        [Input("bfdDetectMultiplier")]
        public Input<int>? BfdDetectMultiplier { get; set; }

        /// <summary>
        /// The description of virtual interface.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The direct connect connection ID which associated with.
        /// </summary>
        [Input("directConnectConnectionId", required: true)]
        public Input<string> DirectConnectConnectionId { get; set; } = null!;

        /// <summary>
        /// The direct connect gateway ID which associated with.
        /// </summary>
        [Input("directConnectGatewayId", required: true)]
        public Input<string> DirectConnectGatewayId { get; set; } = null!;

        /// <summary>
        /// Whether enable BFD detect.
        /// </summary>
        [Input("enableBfd")]
        public Input<bool>? EnableBfd { get; set; }

        /// <summary>
        /// Whether enable NQA detect.
        /// </summary>
        [Input("enableNqa")]
        public Input<bool>? EnableNqa { get; set; }

        /// <summary>
        /// The local IP that associated with.
        /// </summary>
        [Input("localIp", required: true)]
        public Input<string> LocalIp { get; set; } = null!;

        /// <summary>
        /// The NQA detect interval.
        /// </summary>
        [Input("nqaDetectInterval")]
        public Input<int>? NqaDetectInterval { get; set; }

        /// <summary>
        /// The NAQ detect times.
        /// </summary>
        [Input("nqaDetectMultiplier")]
        public Input<int>? NqaDetectMultiplier { get; set; }

        /// <summary>
        /// The peer IP that associated with.
        /// </summary>
        [Input("peerIp", required: true)]
        public Input<string> PeerIp { get; set; } = null!;

        /// <summary>
        /// The route type of virtual interface,valid value contains `Static`,`BGP`.
        /// </summary>
        [Input("routeType")]
        public Input<string>? RouteType { get; set; }

        [Input("tags")]
        private InputList<Inputs.VirtualInterfaceTagArgs>? _tags;

        /// <summary>
        /// The tags that direct connect gateway added.
        /// </summary>
        public InputList<Inputs.VirtualInterfaceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VirtualInterfaceTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of virtual interface.
        /// </summary>
        [Input("virtualInterfaceName")]
        public Input<string>? VirtualInterfaceName { get; set; }

        /// <summary>
        /// The VLAN ID used to connect to the local IDC, please ensure that this VLAN ID is not occupied, the value range: 0 ~ 2999.
        /// </summary>
        [Input("vlanId", required: true)]
        public Input<int> VlanId { get; set; } = null!;

        public VirtualInterfaceArgs()
        {
        }
        public static new VirtualInterfaceArgs Empty => new VirtualInterfaceArgs();
    }

    public sealed class VirtualInterfaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The band width limit of virtual interface,in Mbps.
        /// </summary>
        [Input("bandwidth")]
        public Input<int>? Bandwidth { get; set; }

        /// <summary>
        /// The BFD detect interval.
        /// </summary>
        [Input("bfdDetectInterval")]
        public Input<int>? BfdDetectInterval { get; set; }

        /// <summary>
        /// The BFD detect times.
        /// </summary>
        [Input("bfdDetectMultiplier")]
        public Input<int>? BfdDetectMultiplier { get; set; }

        /// <summary>
        /// The description of virtual interface.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The direct connect connection ID which associated with.
        /// </summary>
        [Input("directConnectConnectionId")]
        public Input<string>? DirectConnectConnectionId { get; set; }

        /// <summary>
        /// The direct connect gateway ID which associated with.
        /// </summary>
        [Input("directConnectGatewayId")]
        public Input<string>? DirectConnectGatewayId { get; set; }

        /// <summary>
        /// Whether enable BFD detect.
        /// </summary>
        [Input("enableBfd")]
        public Input<bool>? EnableBfd { get; set; }

        /// <summary>
        /// Whether enable NQA detect.
        /// </summary>
        [Input("enableNqa")]
        public Input<bool>? EnableNqa { get; set; }

        /// <summary>
        /// The local IP that associated with.
        /// </summary>
        [Input("localIp")]
        public Input<string>? LocalIp { get; set; }

        /// <summary>
        /// The NQA detect interval.
        /// </summary>
        [Input("nqaDetectInterval")]
        public Input<int>? NqaDetectInterval { get; set; }

        /// <summary>
        /// The NAQ detect times.
        /// </summary>
        [Input("nqaDetectMultiplier")]
        public Input<int>? NqaDetectMultiplier { get; set; }

        /// <summary>
        /// The peer IP that associated with.
        /// </summary>
        [Input("peerIp")]
        public Input<string>? PeerIp { get; set; }

        /// <summary>
        /// The route type of virtual interface,valid value contains `Static`,`BGP`.
        /// </summary>
        [Input("routeType")]
        public Input<string>? RouteType { get; set; }

        [Input("tags")]
        private InputList<Inputs.VirtualInterfaceTagGetArgs>? _tags;

        /// <summary>
        /// The tags that direct connect gateway added.
        /// </summary>
        public InputList<Inputs.VirtualInterfaceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VirtualInterfaceTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of virtual interface.
        /// </summary>
        [Input("virtualInterfaceName")]
        public Input<string>? VirtualInterfaceName { get; set; }

        /// <summary>
        /// The VLAN ID used to connect to the local IDC, please ensure that this VLAN ID is not occupied, the value range: 0 ~ 2999.
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        public VirtualInterfaceState()
        {
        }
        public static new VirtualInterfaceState Empty => new VirtualInterfaceState();
    }
}
