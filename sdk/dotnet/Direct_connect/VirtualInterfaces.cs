// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Direct_connect
{
    public static class VirtualInterfaces
    {
        /// <summary>
        /// Use this data source to query detailed information of direct connect virtual interfaces
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Direct_connect.VirtualInterfaces.Invoke(new()
        ///     {
        ///         VirtualInterfaceName = "tf-test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<VirtualInterfacesResult> InvokeAsync(VirtualInterfacesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<VirtualInterfacesResult>("volcengine:direct_connect/virtualInterfaces:VirtualInterfaces", args ?? new VirtualInterfacesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of direct connect virtual interfaces
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Direct_connect.VirtualInterfaces.Invoke(new()
        ///     {
        ///         VirtualInterfaceName = "tf-test",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<VirtualInterfacesResult> Invoke(VirtualInterfacesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<VirtualInterfacesResult>("volcengine:direct_connect/virtualInterfaces:VirtualInterfaces", args ?? new VirtualInterfacesInvokeArgs(), options.WithDefaults());
    }


    public sealed class VirtualInterfacesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The direct connect connection ID that associated with this virtual interface.
        /// </summary>
        [Input("directConnectConnectionId")]
        public string? DirectConnectConnectionId { get; set; }

        /// <summary>
        /// The direct connect gateway ID that associated with this virtual interface.
        /// </summary>
        [Input("directConnectGatewayId")]
        public string? DirectConnectGatewayId { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The local IP that associated with this virtual interface.
        /// </summary>
        [Input("localIp")]
        public string? LocalIp { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The peer IP that associated with this virtual interface.
        /// </summary>
        [Input("peerIp")]
        public string? PeerIp { get; set; }

        /// <summary>
        /// The route type of virtual interface.
        /// </summary>
        [Input("routeType")]
        public string? RouteType { get; set; }

        [Input("tagFilters")]
        private List<Inputs.VirtualInterfacesTagFilterArgs>? _tagFilters;

        /// <summary>
        /// The filter tag of direct connect virtual interface.
        /// </summary>
        public List<Inputs.VirtualInterfacesTagFilterArgs> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new List<Inputs.VirtualInterfacesTagFilterArgs>());
            set => _tagFilters = value;
        }

        /// <summary>
        /// The name of virtual interface.
        /// </summary>
        [Input("virtualInterfaceName")]
        public string? VirtualInterfaceName { get; set; }

        /// <summary>
        /// The VLAN ID of virtual interface.
        /// </summary>
        [Input("vlanId")]
        public int? VlanId { get; set; }

        public VirtualInterfacesArgs()
        {
        }
        public static new VirtualInterfacesArgs Empty => new VirtualInterfacesArgs();
    }

    public sealed class VirtualInterfacesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The direct connect connection ID that associated with this virtual interface.
        /// </summary>
        [Input("directConnectConnectionId")]
        public Input<string>? DirectConnectConnectionId { get; set; }

        /// <summary>
        /// The direct connect gateway ID that associated with this virtual interface.
        /// </summary>
        [Input("directConnectGatewayId")]
        public Input<string>? DirectConnectGatewayId { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The local IP that associated with this virtual interface.
        /// </summary>
        [Input("localIp")]
        public Input<string>? LocalIp { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The peer IP that associated with this virtual interface.
        /// </summary>
        [Input("peerIp")]
        public Input<string>? PeerIp { get; set; }

        /// <summary>
        /// The route type of virtual interface.
        /// </summary>
        [Input("routeType")]
        public Input<string>? RouteType { get; set; }

        [Input("tagFilters")]
        private InputList<Inputs.VirtualInterfacesTagFilterInputArgs>? _tagFilters;

        /// <summary>
        /// The filter tag of direct connect virtual interface.
        /// </summary>
        public InputList<Inputs.VirtualInterfacesTagFilterInputArgs> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new InputList<Inputs.VirtualInterfacesTagFilterInputArgs>());
            set => _tagFilters = value;
        }

        /// <summary>
        /// The name of virtual interface.
        /// </summary>
        [Input("virtualInterfaceName")]
        public Input<string>? VirtualInterfaceName { get; set; }

        /// <summary>
        /// The VLAN ID of virtual interface.
        /// </summary>
        [Input("vlanId")]
        public Input<int>? VlanId { get; set; }

        public VirtualInterfacesInvokeArgs()
        {
        }
        public static new VirtualInterfacesInvokeArgs Empty => new VirtualInterfacesInvokeArgs();
    }


    [OutputType]
    public sealed class VirtualInterfacesResult
    {
        /// <summary>
        /// The direct connect connection ID which associated with this virtual interface.
        /// </summary>
        public readonly string? DirectConnectConnectionId;
        /// <summary>
        /// The direct connect gateway ID which associated with this virtual interface.
        /// </summary>
        public readonly string? DirectConnectGatewayId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The local IP that associated with this virtual interface.
        /// </summary>
        public readonly string? LocalIp;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The peer IP that associated with this virtual interface.
        /// </summary>
        public readonly string? PeerIp;
        /// <summary>
        /// The route type of this virtual interface.
        /// </summary>
        public readonly string? RouteType;
        public readonly ImmutableArray<Outputs.VirtualInterfacesTagFilterResult> TagFilters;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The name of virtual interface.
        /// </summary>
        public readonly string? VirtualInterfaceName;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.VirtualInterfacesVirtualInterfaceResult> VirtualInterfaces;
        /// <summary>
        /// The VLAN ID of virtual interface.
        /// </summary>
        public readonly int? VlanId;

        [OutputConstructor]
        private VirtualInterfacesResult(
            string? directConnectConnectionId,

            string? directConnectGatewayId,

            string id,

            ImmutableArray<string> ids,

            string? localIp,

            string? nameRegex,

            string? outputFile,

            string? peerIp,

            string? routeType,

            ImmutableArray<Outputs.VirtualInterfacesTagFilterResult> tagFilters,

            int totalCount,

            string? virtualInterfaceName,

            ImmutableArray<Outputs.VirtualInterfacesVirtualInterfaceResult> virtualInterfaces,

            int? vlanId)
        {
            DirectConnectConnectionId = directConnectConnectionId;
            DirectConnectGatewayId = directConnectGatewayId;
            Id = id;
            Ids = ids;
            LocalIp = localIp;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            PeerIp = peerIp;
            RouteType = routeType;
            TagFilters = tagFilters;
            TotalCount = totalCount;
            VirtualInterfaceName = virtualInterfaceName;
            VirtualInterfaces = virtualInterfaces;
            VlanId = vlanId;
        }
    }
}
