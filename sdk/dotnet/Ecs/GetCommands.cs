// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ecs
{
    public static class GetCommands
    {
        /// <summary>
        /// Use this data source to query detailed information of ecs commands
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Ecs.GetCommands.Invoke(new()
        ///     {
        ///         CommandId = "cmd-ychkepkhtim0tr3b****",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetCommandsResult> InvokeAsync(GetCommandsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCommandsResult>("volcengine:ecs/getCommands:getCommands", args ?? new GetCommandsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ecs commands
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Ecs.GetCommands.Invoke(new()
        ///     {
        ///         CommandId = "cmd-ychkepkhtim0tr3b****",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetCommandsResult> Invoke(GetCommandsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCommandsResult>("volcengine:ecs/getCommands:getCommands", args ?? new GetCommandsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCommandsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of ecs command.
        /// </summary>
        [Input("commandId")]
        public string? CommandId { get; set; }

        /// <summary>
        /// The provider of public command. When this field is not specified, query for custom commands.
        /// </summary>
        [Input("commandProvider")]
        public string? CommandProvider { get; set; }

        /// <summary>
        /// The name of ecs command. This field support fuzzy query.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// The order of ecs command query result.
        /// </summary>
        [Input("order")]
        public string? Order { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of ecs command.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        [Input("tags")]
        private List<Inputs.GetCommandsTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetCommandsTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetCommandsTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of ecs command. Valid values: `Shell`.
        /// </summary>
        [Input("type")]
        public string? Type { get; set; }

        public GetCommandsArgs()
        {
        }
        public static new GetCommandsArgs Empty => new GetCommandsArgs();
    }

    public sealed class GetCommandsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of ecs command.
        /// </summary>
        [Input("commandId")]
        public Input<string>? CommandId { get; set; }

        /// <summary>
        /// The provider of public command. When this field is not specified, query for custom commands.
        /// </summary>
        [Input("commandProvider")]
        public Input<string>? CommandProvider { get; set; }

        /// <summary>
        /// The name of ecs command. This field support fuzzy query.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// The order of ecs command query result.
        /// </summary>
        [Input("order")]
        public Input<string>? Order { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of ecs command.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("tags")]
        private InputList<Inputs.GetCommandsTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetCommandsTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetCommandsTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The type of ecs command. Valid values: `Shell`.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GetCommandsInvokeArgs()
        {
        }
        public static new GetCommandsInvokeArgs Empty => new GetCommandsInvokeArgs();
    }


    [OutputType]
    public sealed class GetCommandsResult
    {
        /// <summary>
        /// The id of the ecs command.
        /// </summary>
        public readonly string? CommandId;
        /// <summary>
        /// The provider of the public command.
        /// </summary>
        public readonly string? CommandProvider;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCommandsCommandResult> Commands;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the custom parameter.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly string? Order;
        public readonly string? OutputFile;
        /// <summary>
        /// The project name of the ecs command.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCommandsTagResult> Tags;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The type of the ecs command.
        /// </summary>
        public readonly string? Type;

        [OutputConstructor]
        private GetCommandsResult(
            string? commandId,

            string? commandProvider,

            ImmutableArray<Outputs.GetCommandsCommandResult> commands,

            string id,

            string? name,

            string? nameRegex,

            string? order,

            string? outputFile,

            string? projectName,

            ImmutableArray<Outputs.GetCommandsTagResult> tags,

            int totalCount,

            string? type)
        {
            CommandId = commandId;
            CommandProvider = commandProvider;
            Commands = commands;
            Id = id;
            Name = name;
            NameRegex = nameRegex;
            Order = order;
            OutputFile = outputFile;
            ProjectName = projectName;
            Tags = tags;
            TotalCount = totalCount;
            Type = type;
        }
    }
}
