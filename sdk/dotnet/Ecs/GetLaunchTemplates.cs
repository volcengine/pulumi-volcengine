// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ecs
{
    public static class GetLaunchTemplates
    {
        /// <summary>
        /// Use this data source to query detailed information of ecs launch templates
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooLaunchTemplate = new Volcengine.Ecs.LaunchTemplate("fooLaunchTemplate", new()
        ///     {
        ///         Description = "acc-test-desc",
        ///         EipBandwidth = 1,
        ///         EipBillingType = "PostPaidByBandwidth",
        ///         EipIsp = "ChinaMobile",
        ///         HostName = "tf-host-name",
        ///         HpcClusterId = "hpcCluster-l8u24ovdmoab6opf",
        ///         ImageId = "image-ycjwwciuzy5pkh54xx8f",
        ///         InstanceChargeType = "PostPaid",
        ///         InstanceName = "tf-acc-name",
        ///         InstanceTypeId = "ecs.g1.large",
        ///         KeyPairName = "tf-key-pair",
        ///         LaunchTemplateName = "tf-acc-template",
        ///     });
        /// 
        ///     var fooLaunchTemplates = Volcengine.Ecs.GetLaunchTemplates.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooLaunchTemplate.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetLaunchTemplatesResult> InvokeAsync(GetLaunchTemplatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLaunchTemplatesResult>("volcengine:ecs/getLaunchTemplates:getLaunchTemplates", args ?? new GetLaunchTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ecs launch templates
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooLaunchTemplate = new Volcengine.Ecs.LaunchTemplate("fooLaunchTemplate", new()
        ///     {
        ///         Description = "acc-test-desc",
        ///         EipBandwidth = 1,
        ///         EipBillingType = "PostPaidByBandwidth",
        ///         EipIsp = "ChinaMobile",
        ///         HostName = "tf-host-name",
        ///         HpcClusterId = "hpcCluster-l8u24ovdmoab6opf",
        ///         ImageId = "image-ycjwwciuzy5pkh54xx8f",
        ///         InstanceChargeType = "PostPaid",
        ///         InstanceName = "tf-acc-name",
        ///         InstanceTypeId = "ecs.g1.large",
        ///         KeyPairName = "tf-key-pair",
        ///         LaunchTemplateName = "tf-acc-template",
        ///     });
        /// 
        ///     var fooLaunchTemplates = Volcengine.Ecs.GetLaunchTemplates.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooLaunchTemplate.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetLaunchTemplatesResult> Invoke(GetLaunchTemplatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLaunchTemplatesResult>("volcengine:ecs/getLaunchTemplates:getLaunchTemplates", args ?? new GetLaunchTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLaunchTemplatesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of launch template ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("launchTemplateNames")]
        private List<string>? _launchTemplateNames;

        /// <summary>
        /// A list of launch template names.
        /// </summary>
        public List<string> LaunchTemplateNames
        {
            get => _launchTemplateNames ?? (_launchTemplateNames = new List<string>());
            set => _launchTemplateNames = value;
        }

        /// <summary>
        /// A Name Regex of scaling policy.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        public GetLaunchTemplatesArgs()
        {
        }
        public static new GetLaunchTemplatesArgs Empty => new GetLaunchTemplatesArgs();
    }

    public sealed class GetLaunchTemplatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of launch template ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        [Input("launchTemplateNames")]
        private InputList<string>? _launchTemplateNames;

        /// <summary>
        /// A list of launch template names.
        /// </summary>
        public InputList<string> LaunchTemplateNames
        {
            get => _launchTemplateNames ?? (_launchTemplateNames = new InputList<string>());
            set => _launchTemplateNames = value;
        }

        /// <summary>
        /// A Name Regex of scaling policy.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        public GetLaunchTemplatesInvokeArgs()
        {
        }
        public static new GetLaunchTemplatesInvokeArgs Empty => new GetLaunchTemplatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetLaunchTemplatesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableArray<string> LaunchTemplateNames;
        /// <summary>
        /// The collection of launch templates.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLaunchTemplatesLaunchTemplateResult> LaunchTemplates;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The total count of scaling policy query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetLaunchTemplatesResult(
            string id,

            ImmutableArray<string> ids,

            ImmutableArray<string> launchTemplateNames,

            ImmutableArray<Outputs.GetLaunchTemplatesLaunchTemplateResult> launchTemplates,

            string? nameRegex,

            string? outputFile,

            int totalCount)
        {
            Id = id;
            Ids = ids;
            LaunchTemplateNames = launchTemplateNames;
            LaunchTemplates = launchTemplates;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            TotalCount = totalCount;
        }
    }
}
