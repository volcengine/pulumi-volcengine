// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ecs
{
    [Obsolete(@"volcengine.ecs.Invocations has been deprecated in favor of volcengine.ecs.getInvocations")]
    public static class Invocations
    {
        /// <summary>
        /// Use this data source to query detailed information of ecs invocations
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Ecs.GetInvocations.Invoke(new()
        ///     {
        ///         InvocationId = "ivk-ych9y4vujvl8j01c****",
        ///         InvocationStatuses = new[]
        ///         {
        ///             "Success",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<InvocationsResult> InvokeAsync(InvocationsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<InvocationsResult>("volcengine:ecs/invocations:Invocations", args ?? new InvocationsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ecs invocations
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var @default = Volcengine.Ecs.GetInvocations.Invoke(new()
        ///     {
        ///         InvocationId = "ivk-ych9y4vujvl8j01c****",
        ///         InvocationStatuses = new[]
        ///         {
        ///             "Success",
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<InvocationsResult> Invoke(InvocationsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<InvocationsResult>("volcengine:ecs/invocations:Invocations", args ?? new InvocationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class InvocationsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of ecs command.
        /// </summary>
        [Input("commandId")]
        public string? CommandId { get; set; }

        /// <summary>
        /// The name of ecs command. This field support fuzzy query.
        /// </summary>
        [Input("commandName")]
        public string? CommandName { get; set; }

        /// <summary>
        /// The type of ecs command. Valid values: `Shell`.
        /// </summary>
        [Input("commandType")]
        public string? CommandType { get; set; }

        /// <summary>
        /// The id of ecs invocation.
        /// </summary>
        [Input("invocationId")]
        public string? InvocationId { get; set; }

        /// <summary>
        /// The name of ecs invocation. This field support fuzzy query.
        /// </summary>
        [Input("invocationName")]
        public string? InvocationName { get; set; }

        [Input("invocationStatuses")]
        private List<string>? _invocationStatuses;

        /// <summary>
        /// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
        /// </summary>
        public List<string> InvocationStatuses
        {
            get => _invocationStatuses ?? (_invocationStatuses = new List<string>());
            set => _invocationStatuses = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
        /// </summary>
        [Input("repeatMode")]
        public string? RepeatMode { get; set; }

        public InvocationsArgs()
        {
        }
        public static new InvocationsArgs Empty => new InvocationsArgs();
    }

    public sealed class InvocationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The id of ecs command.
        /// </summary>
        [Input("commandId")]
        public Input<string>? CommandId { get; set; }

        /// <summary>
        /// The name of ecs command. This field support fuzzy query.
        /// </summary>
        [Input("commandName")]
        public Input<string>? CommandName { get; set; }

        /// <summary>
        /// The type of ecs command. Valid values: `Shell`.
        /// </summary>
        [Input("commandType")]
        public Input<string>? CommandType { get; set; }

        /// <summary>
        /// The id of ecs invocation.
        /// </summary>
        [Input("invocationId")]
        public Input<string>? InvocationId { get; set; }

        /// <summary>
        /// The name of ecs invocation. This field support fuzzy query.
        /// </summary>
        [Input("invocationName")]
        public Input<string>? InvocationName { get; set; }

        [Input("invocationStatuses")]
        private InputList<string>? _invocationStatuses;

        /// <summary>
        /// The list of status of ecs invocation. Valid values: `Pending`, `Scheduled`, `Running`, `Success`, `Failed`, `Stopped`, `PartialFailed`, `Finished`.
        /// </summary>
        public InputList<string> InvocationStatuses
        {
            get => _invocationStatuses ?? (_invocationStatuses = new InputList<string>());
            set => _invocationStatuses = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The repeat mode of ecs invocation. Valid values: `Once`, `Rate`, `Fixed`.
        /// </summary>
        [Input("repeatMode")]
        public Input<string>? RepeatMode { get; set; }

        public InvocationsInvokeArgs()
        {
        }
        public static new InvocationsInvokeArgs Empty => new InvocationsInvokeArgs();
    }


    [OutputType]
    public sealed class InvocationsResult
    {
        /// <summary>
        /// The id of the ecs command.
        /// </summary>
        public readonly string? CommandId;
        /// <summary>
        /// The name of the ecs command.
        /// </summary>
        public readonly string? CommandName;
        /// <summary>
        /// The type of the ecs command.
        /// </summary>
        public readonly string? CommandType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The id of the ecs invocation.
        /// </summary>
        public readonly string? InvocationId;
        /// <summary>
        /// The name of the ecs invocation.
        /// </summary>
        public readonly string? InvocationName;
        /// <summary>
        /// The status of the ecs invocation.
        /// </summary>
        public readonly ImmutableArray<string> InvocationStatuses;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.InvocationsInvocationResult> Invocations;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The repeat mode of the ecs invocation.
        /// </summary>
        public readonly string? RepeatMode;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private InvocationsResult(
            string? commandId,

            string? commandName,

            string? commandType,

            string id,

            string? invocationId,

            string? invocationName,

            ImmutableArray<string> invocationStatuses,

            ImmutableArray<Outputs.InvocationsInvocationResult> invocations,

            string? nameRegex,

            string? outputFile,

            string? repeatMode,

            int totalCount)
        {
            CommandId = commandId;
            CommandName = commandName;
            CommandType = commandType;
            Id = id;
            InvocationId = invocationId;
            InvocationName = invocationName;
            InvocationStatuses = invocationStatuses;
            Invocations = invocations;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            RepeatMode = repeatMode;
            TotalCount = totalCount;
        }
    }
}
