// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ecs
{
    [Obsolete(@"volcengine.ecs.AvailableResources has been deprecated in favor of volcengine.ecs.getAvailableResources")]
    public static class AvailableResources
    {
        /// <summary>
        /// Use this data source to query detailed information of ecs available resources
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Ecs.GetAvailableResources.Invoke(new()
        ///     {
        ///         DestinationResource = "InstanceType",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<AvailableResourcesResult> InvokeAsync(AvailableResourcesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<AvailableResourcesResult>("volcengine:ecs/availableResources:AvailableResources", args ?? new AvailableResourcesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ecs available resources
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Ecs.GetAvailableResources.Invoke(new()
        ///     {
        ///         DestinationResource = "InstanceType",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<AvailableResourcesResult> Invoke(AvailableResourcesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<AvailableResourcesResult>("volcengine:ecs/availableResources:AvailableResources", args ?? new AvailableResourcesInvokeArgs(), options.WithDefaults());
    }


    public sealed class AvailableResourcesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of resource to query. Valid values: `InstanceType`, `DedicatedHost`.
        /// </summary>
        [Input("destinationResource", required: true)]
        public string DestinationResource { get; set; } = null!;

        /// <summary>
        /// The charge type of instance. Valid values: `PostPaid`, `PrePaid`, `ReservedInstance`. Default is `PostPaid`.
        /// </summary>
        [Input("instanceChargeType")]
        public string? InstanceChargeType { get; set; }

        /// <summary>
        /// The id of instance type.
        /// </summary>
        [Input("instanceTypeId")]
        public string? InstanceTypeId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The spot strategy of PostPaid instance. Valid values: `NoSpot`, `SpotAsPriceGo`. Default is `NoSpot`.
        /// </summary>
        [Input("spotStrategy")]
        public string? SpotStrategy { get; set; }

        /// <summary>
        /// The id of available zone.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public AvailableResourcesArgs()
        {
        }
        public static new AvailableResourcesArgs Empty => new AvailableResourcesArgs();
    }

    public sealed class AvailableResourcesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The type of resource to query. Valid values: `InstanceType`, `DedicatedHost`.
        /// </summary>
        [Input("destinationResource", required: true)]
        public Input<string> DestinationResource { get; set; } = null!;

        /// <summary>
        /// The charge type of instance. Valid values: `PostPaid`, `PrePaid`, `ReservedInstance`. Default is `PostPaid`.
        /// </summary>
        [Input("instanceChargeType")]
        public Input<string>? InstanceChargeType { get; set; }

        /// <summary>
        /// The id of instance type.
        /// </summary>
        [Input("instanceTypeId")]
        public Input<string>? InstanceTypeId { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The spot strategy of PostPaid instance. Valid values: `NoSpot`, `SpotAsPriceGo`. Default is `NoSpot`.
        /// </summary>
        [Input("spotStrategy")]
        public Input<string>? SpotStrategy { get; set; }

        /// <summary>
        /// The id of available zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public AvailableResourcesInvokeArgs()
        {
        }
        public static new AvailableResourcesInvokeArgs Empty => new AvailableResourcesInvokeArgs();
    }


    [OutputType]
    public sealed class AvailableResourcesResult
    {
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.AvailableResourcesAvailableZoneResult> AvailableZones;
        public readonly string DestinationResource;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? InstanceChargeType;
        public readonly string? InstanceTypeId;
        public readonly string? OutputFile;
        public readonly string? SpotStrategy;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The id of the available zone.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private AvailableResourcesResult(
            ImmutableArray<Outputs.AvailableResourcesAvailableZoneResult> availableZones,

            string destinationResource,

            string id,

            string? instanceChargeType,

            string? instanceTypeId,

            string? outputFile,

            string? spotStrategy,

            int totalCount,

            string? zoneId)
        {
            AvailableZones = availableZones;
            DestinationResource = destinationResource;
            Id = id;
            InstanceChargeType = instanceChargeType;
            InstanceTypeId = instanceTypeId;
            OutputFile = outputFile;
            SpotStrategy = spotStrategy;
            TotalCount = totalCount;
            ZoneId = zoneId;
        }
    }
}
