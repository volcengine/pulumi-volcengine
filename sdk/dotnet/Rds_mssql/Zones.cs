// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_mssql
{
    [Obsolete(@"volcengine.rds_mssql.Zones has been deprecated in favor of volcengine.rds_mssql.getZones")]
    public static class Zones
    {
        /// <summary>
        /// Use this data source to query detailed information of rds mssql zones
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mssql.GetZones.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<ZonesResult> InvokeAsync(ZonesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ZonesResult>("volcengine:rds_mssql/zones:Zones", args ?? new ZonesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of rds mssql zones
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Rds_mssql.GetZones.Invoke();
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<ZonesResult> Invoke(ZonesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ZonesResult>("volcengine:rds_mssql/zones:Zones", args ?? new ZonesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ZonesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The Id of Region.
        /// </summary>
        [Input("regionId")]
        public string? RegionId { get; set; }

        public ZonesArgs()
        {
        }
        public static new ZonesArgs Empty => new ZonesArgs();
    }

    public sealed class ZonesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The Id of Region.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        public ZonesInvokeArgs()
        {
        }
        public static new ZonesInvokeArgs Empty => new ZonesInvokeArgs();
    }


    [OutputType]
    public sealed class ZonesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? OutputFile;
        public readonly string? RegionId;
        /// <summary>
        /// The total count of zone query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The collection of zone query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ZonesZoneResult> Zones;

        [OutputConstructor]
        private ZonesResult(
            string id,

            string? outputFile,

            string? regionId,

            int totalCount,

            ImmutableArray<Outputs.ZonesZoneResult> zones)
        {
            Id = id;
            OutputFile = outputFile;
            RegionId = regionId;
            TotalCount = totalCount;
            Zones = zones;
        }
    }
}
