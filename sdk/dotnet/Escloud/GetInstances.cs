// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Escloud
{
    public static class GetInstances
    {
        /// <summary>
        /// (Deprecated! Recommend use volcengine.escloud_v2.EscloudInstanceV2 replace) Use this data source to query detailed information of escloud instances
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet_new",
        ///         Description = "tfdesc",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Escloud.Instance("fooInstance", new()
        ///     {
        ///         InstanceConfiguration = new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationArgs
        ///         {
        ///             Version = "V6_7",
        ///             ZoneNumber = 1,
        ///             EnableHttps = true,
        ///             AdminUserName = "admin",
        ///             AdminPassword = "Password@@",
        ///             ChargeType = "PostPaid",
        ///             ConfigurationCode = "es.standard",
        ///             EnablePureMaster = true,
        ///             InstanceName = "acc-test-0",
        ///             NodeSpecsAssigns = new[]
        ///             {
        ///                 new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationNodeSpecsAssignArgs
        ///                 {
        ///                     Type = "Master",
        ///                     Number = 3,
        ///                     ResourceSpecName = "es.x4.medium",
        ///                     StorageSpecName = "es.volume.essd.pl0",
        ///                     StorageSize = 100,
        ///                 },
        ///                 new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationNodeSpecsAssignArgs
        ///                 {
        ///                     Type = "Hot",
        ///                     Number = 2,
        ///                     ResourceSpecName = "es.x4.large",
        ///                     StorageSpecName = "es.volume.essd.pl0",
        ///                     StorageSize = 100,
        ///                 },
        ///                 new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationNodeSpecsAssignArgs
        ///                 {
        ///                     Type = "Kibana",
        ///                     Number = 1,
        ///                     ResourceSpecName = "kibana.x2.small",
        ///                 },
        ///             },
        ///             SubnetId = fooSubnet.Id,
        ///             ProjectName = "default",
        ///             ForceRestartAfterScale = false,
        ///         },
        ///     });
        /// 
        ///     var fooInstances = Volcengine.Escloud.GetInstances.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooInstance.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetInstancesResult> InvokeAsync(GetInstancesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInstancesResult>("volcengine:escloud/getInstances:getInstances", args ?? new GetInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// (Deprecated! Recommend use volcengine.escloud_v2.EscloudInstanceV2 replace) Use this data source to query detailed information of escloud instances
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet_new",
        ///         Description = "tfdesc",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Escloud.Instance("fooInstance", new()
        ///     {
        ///         InstanceConfiguration = new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationArgs
        ///         {
        ///             Version = "V6_7",
        ///             ZoneNumber = 1,
        ///             EnableHttps = true,
        ///             AdminUserName = "admin",
        ///             AdminPassword = "Password@@",
        ///             ChargeType = "PostPaid",
        ///             ConfigurationCode = "es.standard",
        ///             EnablePureMaster = true,
        ///             InstanceName = "acc-test-0",
        ///             NodeSpecsAssigns = new[]
        ///             {
        ///                 new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationNodeSpecsAssignArgs
        ///                 {
        ///                     Type = "Master",
        ///                     Number = 3,
        ///                     ResourceSpecName = "es.x4.medium",
        ///                     StorageSpecName = "es.volume.essd.pl0",
        ///                     StorageSize = 100,
        ///                 },
        ///                 new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationNodeSpecsAssignArgs
        ///                 {
        ///                     Type = "Hot",
        ///                     Number = 2,
        ///                     ResourceSpecName = "es.x4.large",
        ///                     StorageSpecName = "es.volume.essd.pl0",
        ///                     StorageSize = 100,
        ///                 },
        ///                 new Volcengine.Escloud.Inputs.InstanceInstanceConfigurationNodeSpecsAssignArgs
        ///                 {
        ///                     Type = "Kibana",
        ///                     Number = 1,
        ///                     ResourceSpecName = "kibana.x2.small",
        ///                 },
        ///             },
        ///             SubnetId = fooSubnet.Id,
        ///             ProjectName = "default",
        ///             ForceRestartAfterScale = false,
        ///         },
        ///     });
        /// 
        ///     var fooInstances = Volcengine.Escloud.GetInstances.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooInstance.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetInstancesResult> Invoke(GetInstancesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInstancesResult>("volcengine:escloud/getInstances:getInstances", args ?? new GetInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInstancesArgs : global::Pulumi.InvokeArgs
    {
        [Input("chargeTypes")]
        private List<string>? _chargeTypes;

        /// <summary>
        /// The charge types of instance.
        /// </summary>
        public List<string> ChargeTypes
        {
            get => _chargeTypes ?? (_chargeTypes = new List<string>());
            set => _chargeTypes = value;
        }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of instance IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("names")]
        private List<string>? _names;

        /// <summary>
        /// The names of instance.
        /// </summary>
        public List<string> Names
        {
            get => _names ?? (_names = new List<string>());
            set => _names = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// The list status of instance.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        [Input("versions")]
        private List<string>? _versions;

        /// <summary>
        /// The versions of instance.
        /// </summary>
        public List<string> Versions
        {
            get => _versions ?? (_versions = new List<string>());
            set => _versions = value;
        }

        [Input("zoneIds")]
        private List<string>? _zoneIds;

        /// <summary>
        /// The available zone IDs of instance.
        /// </summary>
        public List<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new List<string>());
            set => _zoneIds = value;
        }

        public GetInstancesArgs()
        {
        }
        public static new GetInstancesArgs Empty => new GetInstancesArgs();
    }

    public sealed class GetInstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("chargeTypes")]
        private InputList<string>? _chargeTypes;

        /// <summary>
        /// The charge types of instance.
        /// </summary>
        public InputList<string> ChargeTypes
        {
            get => _chargeTypes ?? (_chargeTypes = new InputList<string>());
            set => _chargeTypes = value;
        }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of instance IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        [Input("names")]
        private InputList<string>? _names;

        /// <summary>
        /// The names of instance.
        /// </summary>
        public InputList<string> Names
        {
            get => _names ?? (_names = new InputList<string>());
            set => _names = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// The list status of instance.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        [Input("versions")]
        private InputList<string>? _versions;

        /// <summary>
        /// The versions of instance.
        /// </summary>
        public InputList<string> Versions
        {
            get => _versions ?? (_versions = new InputList<string>());
            set => _versions = value;
        }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The available zone IDs of instance.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public GetInstancesInvokeArgs()
        {
        }
        public static new GetInstancesInvokeArgs Empty => new GetInstancesInvokeArgs();
    }


    [OutputType]
    public sealed class GetInstancesResult
    {
        public readonly ImmutableArray<string> ChargeTypes;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The collection of instance query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInstancesInstanceResult> Instances;
        public readonly ImmutableArray<string> Names;
        public readonly string? OutputFile;
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// The total count of instance query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> Versions;
        public readonly ImmutableArray<string> ZoneIds;

        [OutputConstructor]
        private GetInstancesResult(
            ImmutableArray<string> chargeTypes,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<Outputs.GetInstancesInstanceResult> instances,

            ImmutableArray<string> names,

            string? outputFile,

            ImmutableArray<string> statuses,

            int totalCount,

            ImmutableArray<string> versions,

            ImmutableArray<string> zoneIds)
        {
            ChargeTypes = chargeTypes;
            Id = id;
            Ids = ids;
            Instances = instances;
            Names = names;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
            Versions = versions;
            ZoneIds = zoneIds;
        }
    }
}
