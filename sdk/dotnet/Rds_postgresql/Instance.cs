// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Rds_postgresql
{
    /// <summary>
    /// Provides a resource to manage rds postgresql instance
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     // create vpc
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///         DnsServers = new[]
    ///         {
    ///             "8.8.8.8",
    ///             "114.114.114.114",
    ///         },
    ///         ProjectName = "default",
    ///     });
    /// 
    ///     // create subnet
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     // create postgresql instance
    ///     var fooInstance = new Volcengine.Rds_postgresql.Instance("fooInstance", new()
    ///     {
    ///         DbEngineVersion = "PostgreSQL_12",
    ///         NodeSpec = "rds.postgres.1c2g",
    ///         PrimaryZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         SecondaryZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         StorageSpace = 40,
    ///         SubnetId = fooSubnet.Id,
    ///         InstanceName = "acc-test-postgresql-instance",
    ///         ChargeInfo = new Volcengine.Rds_postgresql.Inputs.InstanceChargeInfoArgs
    ///         {
    ///             ChargeType = "PostPaid",
    ///         },
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Rds_postgresql.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "tfk1",
    ///                 Value = "tfv1",
    ///             },
    ///         },
    ///         Parameters = new[]
    ///         {
    ///             new Volcengine.Rds_postgresql.Inputs.InstanceParameterArgs
    ///             {
    ///                 Name = "auto_explain.log_analyze",
    ///                 Value = "off",
    ///             },
    ///             new Volcengine.Rds_postgresql.Inputs.InstanceParameterArgs
    ///             {
    ///                 Name = "auto_explain.log_format",
    ///                 Value = "text",
    ///             },
    ///         },
    ///     });
    /// 
    ///     // create postgresql instance readonly node
    ///     var fooInstanceReadonlyNode = new Volcengine.Rds_postgresql.InstanceReadonlyNode("fooInstanceReadonlyNode", new()
    ///     {
    ///         InstanceId = fooInstance.Id,
    ///         NodeSpec = "rds.postgres.1c2g",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///     });
    /// 
    ///     // create postgresql allow list
    ///     var fooAllowlist = new Volcengine.Rds_postgresql.Allowlist("fooAllowlist", new()
    ///     {
    ///         AllowListName = "acc-test-allowlist",
    ///         AllowListDesc = "acc-test",
    ///         AllowListType = "IPv4",
    ///         AllowLists = new[]
    ///         {
    ///             "192.168.0.0/24",
    ///             "192.168.1.0/24",
    ///         },
    ///     });
    /// 
    ///     // associate postgresql allow list to postgresql instance
    ///     var fooAllowlistAssociate = new Volcengine.Rds_postgresql.AllowlistAssociate("fooAllowlistAssociate", new()
    ///     {
    ///         InstanceId = fooInstance.Id,
    ///         AllowListId = fooAllowlist.Id,
    ///     });
    /// 
    ///     // create postgresql database
    ///     var fooDatabase = new Volcengine.Rds_postgresql.Database("fooDatabase", new()
    ///     {
    ///         DbName = "acc-test-database",
    ///         InstanceId = fooInstance.Id,
    ///         CType = "C",
    ///         Collate = "zh_CN.utf8",
    ///     });
    /// 
    ///     // create postgresql account
    ///     var fooAccount = new Volcengine.Rds_postgresql.Account("fooAccount", new()
    ///     {
    ///         AccountName = "acc-test-account",
    ///         AccountPassword = "9wc@********12",
    ///         AccountType = "Normal",
    ///         InstanceId = fooInstance.Id,
    ///         AccountPrivileges = "Inherit,Login,CreateRole,CreateDB",
    ///     });
    /// 
    ///     // create postgresql schema
    ///     var fooSchema = new Volcengine.Rds_postgresql.Schema("fooSchema", new()
    ///     {
    ///         DbName = fooDatabase.DbName,
    ///         InstanceId = fooInstance.Id,
    ///         Owner = fooAccount.AccountName,
    ///         SchemaName = "acc-test-schema",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// RdsPostgresqlInstance can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:rds_postgresql/instance:Instance default postgres-21a3333b****
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:rds_postgresql/instance:Instance")]
    public partial class Instance : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The instance has used backup space. Unit: GB.
        /// </summary>
        [Output("backupUse")]
        public Output<int> BackupUse { get; private set; } = null!;

        /// <summary>
        /// Payment methods.
        /// </summary>
        [Output("chargeDetails")]
        public Output<ImmutableArray<Outputs.InstanceChargeDetail>> ChargeDetails { get; private set; } = null!;

        /// <summary>
        /// Payment methods.
        /// </summary>
        [Output("chargeInfo")]
        public Output<Outputs.InstanceChargeInfo> ChargeInfo { get; private set; } = null!;

        /// <summary>
        /// Node creation local time.
        /// </summary>
        [Output("createTime")]
        public Output<string> CreateTime { get; private set; } = null!;

        /// <summary>
        /// Data synchronization mode.
        /// </summary>
        [Output("dataSyncMode")]
        public Output<string> DataSyncMode { get; private set; } = null!;

        /// <summary>
        /// Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
        /// </summary>
        [Output("dbEngineVersion")]
        public Output<string> DbEngineVersion { get; private set; } = null!;

        /// <summary>
        /// The endpoint info of the RDS instance.
        /// </summary>
        [Output("endpoints")]
        public Output<ImmutableArray<Outputs.InstanceEndpoint>> Endpoints { get; private set; } = null!;

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
        /// </summary>
        [Output("instanceName")]
        public Output<string?> InstanceName { get; private set; } = null!;

        /// <summary>
        /// The status of the RDS PostgreSQL instance.
        /// </summary>
        [Output("instanceStatus")]
        public Output<string> InstanceStatus { get; private set; } = null!;

        /// <summary>
        /// The instance type of the RDS PostgreSQL instance.
        /// </summary>
        [Output("instanceType")]
        public Output<string> InstanceType { get; private set; } = null!;

        /// <summary>
        /// Memory size in GB.
        /// </summary>
        [Output("memory")]
        public Output<int> Memory { get; private set; } = null!;

        /// <summary>
        /// The number of nodes.
        /// </summary>
        [Output("nodeNumber")]
        public Output<int> NodeNumber { get; private set; } = null!;

        /// <summary>
        /// The specification of primary node and secondary node.
        /// </summary>
        [Output("nodeSpec")]
        public Output<string> NodeSpec { get; private set; } = null!;

        /// <summary>
        /// Instance node information.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.InstanceNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
        /// </summary>
        [Output("parameters")]
        public Output<ImmutableArray<Outputs.InstanceParameter>> Parameters { get; private set; } = null!;

        /// <summary>
        /// The available zone of primary node.
        /// </summary>
        [Output("primaryZoneId")]
        public Output<string> PrimaryZoneId { get; private set; } = null!;

        /// <summary>
        /// The project name of the RDS instance.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The region of the RDS PostgreSQL instance.
        /// </summary>
        [Output("regionId")]
        public Output<string> RegionId { get; private set; } = null!;

        /// <summary>
        /// The available zone of secondary node.
        /// </summary>
        [Output("secondaryZoneId")]
        public Output<string> SecondaryZoneId { get; private set; } = null!;

        /// <summary>
        /// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
        /// </summary>
        [Output("storageSpace")]
        public Output<int?> StorageSpace { get; private set; } = null!;

        /// <summary>
        /// Instance storage type.
        /// </summary>
        [Output("storageType")]
        public Output<string> StorageType { get; private set; } = null!;

        /// <summary>
        /// Subnet ID of the RDS PostgreSQL instance.
        /// </summary>
        [Output("subnetId")]
        public Output<string> SubnetId { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.InstanceTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The update time of the RDS PostgreSQL instance.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// CPU size.
        /// </summary>
        [Output("vCpu")]
        public Output<int> VCpu { get; private set; } = null!;

        /// <summary>
        /// The vpc ID of the RDS PostgreSQL instance.
        /// </summary>
        [Output("vpcId")]
        public Output<string> VpcId { get; private set; } = null!;

        /// <summary>
        /// The available zone of the RDS PostgreSQL instance.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;

        /// <summary>
        /// ID of the availability zone where each instance is located.
        /// </summary>
        [Output("zoneIds")]
        public Output<ImmutableArray<string>> ZoneIds { get; private set; } = null!;


        /// <summary>
        /// Create a Instance resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Instance(string name, InstanceArgs args, CustomResourceOptions? options = null)
            : base("volcengine:rds_postgresql/instance:Instance", name, args ?? new InstanceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Instance(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:rds_postgresql/instance:Instance", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Instance resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Instance Get(string name, Input<string> id, InstanceState? state = null, CustomResourceOptions? options = null)
        {
            return new Instance(name, id, state, options);
        }
    }

    public sealed class InstanceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Payment methods.
        /// </summary>
        [Input("chargeInfo", required: true)]
        public Input<Inputs.InstanceChargeInfoArgs> ChargeInfo { get; set; } = null!;

        /// <summary>
        /// Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
        /// </summary>
        [Input("dbEngineVersion", required: true)]
        public Input<string> DbEngineVersion { get; set; } = null!;

        /// <summary>
        /// Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The specification of primary node and secondary node.
        /// </summary>
        [Input("nodeSpec", required: true)]
        public Input<string> NodeSpec { get; set; } = null!;

        [Input("parameters")]
        private InputList<Inputs.InstanceParameterArgs>? _parameters;

        /// <summary>
        /// Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
        /// </summary>
        public InputList<Inputs.InstanceParameterArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.InstanceParameterArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The available zone of primary node.
        /// </summary>
        [Input("primaryZoneId", required: true)]
        public Input<string> PrimaryZoneId { get; set; } = null!;

        /// <summary>
        /// The project name of the RDS instance.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The available zone of secondary node.
        /// </summary>
        [Input("secondaryZoneId", required: true)]
        public Input<string> SecondaryZoneId { get; set; } = null!;

        /// <summary>
        /// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
        /// </summary>
        [Input("storageSpace")]
        public Input<int>? StorageSpace { get; set; }

        /// <summary>
        /// Subnet ID of the RDS PostgreSQL instance.
        /// </summary>
        [Input("subnetId", required: true)]
        public Input<string> SubnetId { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.InstanceTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagArgs>());
            set => _tags = value;
        }

        public InstanceArgs()
        {
        }
        public static new InstanceArgs Empty => new InstanceArgs();
    }

    public sealed class InstanceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The instance has used backup space. Unit: GB.
        /// </summary>
        [Input("backupUse")]
        public Input<int>? BackupUse { get; set; }

        [Input("chargeDetails")]
        private InputList<Inputs.InstanceChargeDetailGetArgs>? _chargeDetails;

        /// <summary>
        /// Payment methods.
        /// </summary>
        public InputList<Inputs.InstanceChargeDetailGetArgs> ChargeDetails
        {
            get => _chargeDetails ?? (_chargeDetails = new InputList<Inputs.InstanceChargeDetailGetArgs>());
            set => _chargeDetails = value;
        }

        /// <summary>
        /// Payment methods.
        /// </summary>
        [Input("chargeInfo")]
        public Input<Inputs.InstanceChargeInfoGetArgs>? ChargeInfo { get; set; }

        /// <summary>
        /// Node creation local time.
        /// </summary>
        [Input("createTime")]
        public Input<string>? CreateTime { get; set; }

        /// <summary>
        /// Data synchronization mode.
        /// </summary>
        [Input("dataSyncMode")]
        public Input<string>? DataSyncMode { get; set; }

        /// <summary>
        /// Instance type. Value: PostgreSQL_11, PostgreSQL_12, PostgreSQL_13.
        /// </summary>
        [Input("dbEngineVersion")]
        public Input<string>? DbEngineVersion { get; set; }

        [Input("endpoints")]
        private InputList<Inputs.InstanceEndpointGetArgs>? _endpoints;

        /// <summary>
        /// The endpoint info of the RDS instance.
        /// </summary>
        public InputList<Inputs.InstanceEndpointGetArgs> Endpoints
        {
            get => _endpoints ?? (_endpoints = new InputList<Inputs.InstanceEndpointGetArgs>());
            set => _endpoints = value;
        }

        /// <summary>
        /// Instance ID.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// Instance name. Cannot start with a number or a dash. Can only contain Chinese characters, letters, numbers, underscores and dashes. The length is limited between 1 ~ 128.
        /// </summary>
        [Input("instanceName")]
        public Input<string>? InstanceName { get; set; }

        /// <summary>
        /// The status of the RDS PostgreSQL instance.
        /// </summary>
        [Input("instanceStatus")]
        public Input<string>? InstanceStatus { get; set; }

        /// <summary>
        /// The instance type of the RDS PostgreSQL instance.
        /// </summary>
        [Input("instanceType")]
        public Input<string>? InstanceType { get; set; }

        /// <summary>
        /// Memory size in GB.
        /// </summary>
        [Input("memory")]
        public Input<int>? Memory { get; set; }

        /// <summary>
        /// The number of nodes.
        /// </summary>
        [Input("nodeNumber")]
        public Input<int>? NodeNumber { get; set; }

        /// <summary>
        /// The specification of primary node and secondary node.
        /// </summary>
        [Input("nodeSpec")]
        public Input<string>? NodeSpec { get; set; }

        [Input("nodes")]
        private InputList<Inputs.InstanceNodeGetArgs>? _nodes;

        /// <summary>
        /// Instance node information.
        /// </summary>
        public InputList<Inputs.InstanceNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.InstanceNodeGetArgs>());
            set => _nodes = value;
        }

        [Input("parameters")]
        private InputList<Inputs.InstanceParameterGetArgs>? _parameters;

        /// <summary>
        /// Parameter of the RDS PostgreSQL instance. This field can only be added or modified. Deleting this field is invalid.
        /// </summary>
        public InputList<Inputs.InstanceParameterGetArgs> Parameters
        {
            get => _parameters ?? (_parameters = new InputList<Inputs.InstanceParameterGetArgs>());
            set => _parameters = value;
        }

        /// <summary>
        /// The available zone of primary node.
        /// </summary>
        [Input("primaryZoneId")]
        public Input<string>? PrimaryZoneId { get; set; }

        /// <summary>
        /// The project name of the RDS instance.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The region of the RDS PostgreSQL instance.
        /// </summary>
        [Input("regionId")]
        public Input<string>? RegionId { get; set; }

        /// <summary>
        /// The available zone of secondary node.
        /// </summary>
        [Input("secondaryZoneId")]
        public Input<string>? SecondaryZoneId { get; set; }

        /// <summary>
        /// Instance storage space. Value range: [20, 3000], unit: GB, increments every 100GB. Default value: 100.
        /// </summary>
        [Input("storageSpace")]
        public Input<int>? StorageSpace { get; set; }

        /// <summary>
        /// Instance storage type.
        /// </summary>
        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        /// <summary>
        /// Subnet ID of the RDS PostgreSQL instance.
        /// </summary>
        [Input("subnetId")]
        public Input<string>? SubnetId { get; set; }

        [Input("tags")]
        private InputList<Inputs.InstanceTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.InstanceTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.InstanceTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The update time of the RDS PostgreSQL instance.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// CPU size.
        /// </summary>
        [Input("vCpu")]
        public Input<int>? VCpu { get; set; }

        /// <summary>
        /// The vpc ID of the RDS PostgreSQL instance.
        /// </summary>
        [Input("vpcId")]
        public Input<string>? VpcId { get; set; }

        /// <summary>
        /// The available zone of the RDS PostgreSQL instance.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// ID of the availability zone where each instance is located.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public InstanceState()
        {
        }
        public static new InstanceState Empty => new InstanceState();
    }
}
