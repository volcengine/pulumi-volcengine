// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Veecp
{
    [Obsolete(@"volcengine.veecp.EdgeNodePools has been deprecated in favor of volcengine.veecp.getEdgeNodePools")]
    public static class EdgeNodePools
    {
        /// <summary>
        /// Use this data source to query detailed information of veecp edge node pools
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-project1",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-subnet-test-2",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SecurityGroupName = "acc-test-security-group2",
        ///     });
        /// 
        ///     var fooCluster = new Volcengine.Veecp.Cluster("fooCluster", new()
        ///     {
        ///         Description = "created by terraform",
        ///         DeleteProtectionEnabled = false,
        ///         Profile = "Edge",
        ///         ClusterConfig = new Volcengine.Veecp.Inputs.ClusterClusterConfigArgs
        ///         {
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             ApiServerPublicAccessEnabled = true,
        ///             ApiServerPublicAccessConfig = new Volcengine.Veecp.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
        ///             {
        ///                 PublicAccessNetworkConfig = new Volcengine.Veecp.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
        ///                 {
        ///                     BillingType = "PostPaidByBandwidth",
        ///                     Bandwidth = 1,
        ///                 },
        ///             },
        ///             ResourcePublicAccessDefaultEnabled = true,
        ///         },
        ///         PodsConfig = new Volcengine.Veecp.Inputs.ClusterPodsConfigArgs
        ///         {
        ///             PodNetworkMode = "Flannel",
        ///             FlannelConfig = new Volcengine.Veecp.Inputs.ClusterPodsConfigFlannelConfigArgs
        ///             {
        ///                 PodCidrs = new[]
        ///                 {
        ///                     "172.22.224.0/20",
        ///                 },
        ///                 MaxPodsPerNode = 64,
        ///             },
        ///         },
        ///         ServicesConfig = new Volcengine.Veecp.Inputs.ClusterServicesConfigArgs
        ///         {
        ///             ServiceCidrsv4s = new[]
        ///             {
        ///                 "172.30.0.0/18",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooEdgeNodePool = new Volcengine.Veecp.EdgeNodePool("fooEdgeNodePool", new()
        ///     {
        ///         ClusterId = fooCluster.Id,
        ///     });
        /// 
        ///     var fooEdgeNodePools = Volcengine.Veecp.GetEdgeNodePools.Invoke(new()
        ///     {
        ///         ClusterIds = new[]
        ///         {
        ///             fooCluster.Id,
        ///         },
        ///         Ids = new[]
        ///         {
        ///             fooEdgeNodePool.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<EdgeNodePoolsResult> InvokeAsync(EdgeNodePoolsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<EdgeNodePoolsResult>("volcengine:veecp/edgeNodePools:EdgeNodePools", args ?? new EdgeNodePoolsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of veecp edge node pools
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-project1",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-subnet-test-2",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SecurityGroupName = "acc-test-security-group2",
        ///     });
        /// 
        ///     var fooCluster = new Volcengine.Veecp.Cluster("fooCluster", new()
        ///     {
        ///         Description = "created by terraform",
        ///         DeleteProtectionEnabled = false,
        ///         Profile = "Edge",
        ///         ClusterConfig = new Volcengine.Veecp.Inputs.ClusterClusterConfigArgs
        ///         {
        ///             SubnetIds = new[]
        ///             {
        ///                 fooSubnet.Id,
        ///             },
        ///             ApiServerPublicAccessEnabled = true,
        ///             ApiServerPublicAccessConfig = new Volcengine.Veecp.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
        ///             {
        ///                 PublicAccessNetworkConfig = new Volcengine.Veecp.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
        ///                 {
        ///                     BillingType = "PostPaidByBandwidth",
        ///                     Bandwidth = 1,
        ///                 },
        ///             },
        ///             ResourcePublicAccessDefaultEnabled = true,
        ///         },
        ///         PodsConfig = new Volcengine.Veecp.Inputs.ClusterPodsConfigArgs
        ///         {
        ///             PodNetworkMode = "Flannel",
        ///             FlannelConfig = new Volcengine.Veecp.Inputs.ClusterPodsConfigFlannelConfigArgs
        ///             {
        ///                 PodCidrs = new[]
        ///                 {
        ///                     "172.22.224.0/20",
        ///                 },
        ///                 MaxPodsPerNode = 64,
        ///             },
        ///         },
        ///         ServicesConfig = new Volcengine.Veecp.Inputs.ClusterServicesConfigArgs
        ///         {
        ///             ServiceCidrsv4s = new[]
        ///             {
        ///                 "172.30.0.0/18",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooEdgeNodePool = new Volcengine.Veecp.EdgeNodePool("fooEdgeNodePool", new()
        ///     {
        ///         ClusterId = fooCluster.Id,
        ///     });
        /// 
        ///     var fooEdgeNodePools = Volcengine.Veecp.GetEdgeNodePools.Invoke(new()
        ///     {
        ///         ClusterIds = new[]
        ///         {
        ///             fooCluster.Id,
        ///         },
        ///         Ids = new[]
        ///         {
        ///             fooEdgeNodePool.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<EdgeNodePoolsResult> Invoke(EdgeNodePoolsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<EdgeNodePoolsResult>("volcengine:veecp/edgeNodePools:EdgeNodePools", args ?? new EdgeNodePoolsInvokeArgs(), options.WithDefaults());
    }


    public sealed class EdgeNodePoolsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Managed by auto.
        /// </summary>
        [Input("addByAuto")]
        public bool? AddByAuto { get; set; }

        /// <summary>
        /// Managed by list.
        /// </summary>
        [Input("addByList")]
        public bool? AddByList { get; set; }

        /// <summary>
        /// Managed by script.
        /// </summary>
        [Input("addByScript")]
        public bool? AddByScript { get; set; }

        /// <summary>
        /// Is enabled of AutoScaling.
        /// </summary>
        [Input("autoScalingEnabled")]
        public bool? AutoScalingEnabled { get; set; }

        [Input("clusterIds")]
        private List<string>? _clusterIds;

        /// <summary>
        /// The ClusterIds of NodePool IDs.
        /// </summary>
        public List<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new List<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// The ClientToken when successfully created.
        /// </summary>
        [Input("createClientToken")]
        public string? CreateClientToken { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        [Input("nodePoolTypes")]
        private List<string>? _nodePoolTypes;

        /// <summary>
        /// The NodePoolTypes of NodePool.
        /// </summary>
        public List<string> NodePoolTypes
        {
            get => _nodePoolTypes ?? (_nodePoolTypes = new List<string>());
            set => _nodePoolTypes = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<Inputs.EdgeNodePoolsStatusArgs>? _statuses;

        /// <summary>
        /// The Status of NodePool.
        /// </summary>
        public List<Inputs.EdgeNodePoolsStatusArgs> Statuses
        {
            get => _statuses ?? (_statuses = new List<Inputs.EdgeNodePoolsStatusArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// The ClientToken when last update was successful.
        /// </summary>
        [Input("updateClientToken")]
        public string? UpdateClientToken { get; set; }

        public EdgeNodePoolsArgs()
        {
        }
        public static new EdgeNodePoolsArgs Empty => new EdgeNodePoolsArgs();
    }

    public sealed class EdgeNodePoolsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Managed by auto.
        /// </summary>
        [Input("addByAuto")]
        public Input<bool>? AddByAuto { get; set; }

        /// <summary>
        /// Managed by list.
        /// </summary>
        [Input("addByList")]
        public Input<bool>? AddByList { get; set; }

        /// <summary>
        /// Managed by script.
        /// </summary>
        [Input("addByScript")]
        public Input<bool>? AddByScript { get; set; }

        /// <summary>
        /// Is enabled of AutoScaling.
        /// </summary>
        [Input("autoScalingEnabled")]
        public Input<bool>? AutoScalingEnabled { get; set; }

        [Input("clusterIds")]
        private InputList<string>? _clusterIds;

        /// <summary>
        /// The ClusterIds of NodePool IDs.
        /// </summary>
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// The ClientToken when successfully created.
        /// </summary>
        [Input("createClientToken")]
        public Input<string>? CreateClientToken { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        [Input("nodePoolTypes")]
        private InputList<string>? _nodePoolTypes;

        /// <summary>
        /// The NodePoolTypes of NodePool.
        /// </summary>
        public InputList<string> NodePoolTypes
        {
            get => _nodePoolTypes ?? (_nodePoolTypes = new InputList<string>());
            set => _nodePoolTypes = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<Inputs.EdgeNodePoolsStatusInputArgs>? _statuses;

        /// <summary>
        /// The Status of NodePool.
        /// </summary>
        public InputList<Inputs.EdgeNodePoolsStatusInputArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.EdgeNodePoolsStatusInputArgs>());
            set => _statuses = value;
        }

        /// <summary>
        /// The ClientToken when last update was successful.
        /// </summary>
        [Input("updateClientToken")]
        public Input<string>? UpdateClientToken { get; set; }

        public EdgeNodePoolsInvokeArgs()
        {
        }
        public static new EdgeNodePoolsInvokeArgs Empty => new EdgeNodePoolsInvokeArgs();
    }


    [OutputType]
    public sealed class EdgeNodePoolsResult
    {
        public readonly bool? AddByAuto;
        public readonly bool? AddByList;
        public readonly bool? AddByScript;
        public readonly bool? AutoScalingEnabled;
        public readonly ImmutableArray<string> ClusterIds;
        /// <summary>
        /// The ClientToken when successfully created.
        /// </summary>
        public readonly string? CreateClientToken;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly ImmutableArray<string> NodePoolTypes;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.EdgeNodePoolsNodePoolResult> NodePools;
        public readonly string? OutputFile;
        public readonly ImmutableArray<Outputs.EdgeNodePoolsStatusResult> Statuses;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The ClientToken when last update was successful.
        /// </summary>
        public readonly string? UpdateClientToken;

        [OutputConstructor]
        private EdgeNodePoolsResult(
            bool? addByAuto,

            bool? addByList,

            bool? addByScript,

            bool? autoScalingEnabled,

            ImmutableArray<string> clusterIds,

            string? createClientToken,

            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            ImmutableArray<string> nodePoolTypes,

            ImmutableArray<Outputs.EdgeNodePoolsNodePoolResult> nodePools,

            string? outputFile,

            ImmutableArray<Outputs.EdgeNodePoolsStatusResult> statuses,

            int totalCount,

            string? updateClientToken)
        {
            AddByAuto = addByAuto;
            AddByList = addByList;
            AddByScript = addByScript;
            AutoScalingEnabled = autoScalingEnabled;
            ClusterIds = clusterIds;
            CreateClientToken = createClientToken;
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            NodePoolTypes = nodePoolTypes;
            NodePools = nodePools;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
            UpdateClientToken = updateClientToken;
        }
    }
}
