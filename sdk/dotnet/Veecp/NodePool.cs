// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Veecp
{
    /// <summary>
    /// Provides a resource to manage veecp node pool
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-project1",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-subnet-test-2",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
    ///     {
    ///         VpcId = fooVpc.Id,
    ///         SecurityGroupName = "acc-test-security-group2",
    ///     });
    /// 
    ///     var fooCluster = new Volcengine.Veecp.Cluster("fooCluster", new()
    ///     {
    ///         Description = "created by terraform",
    ///         DeleteProtectionEnabled = false,
    ///         Profile = "Edge",
    ///         ClusterConfig = new Volcengine.Veecp.Inputs.ClusterClusterConfigArgs
    ///         {
    ///             SubnetIds = new[]
    ///             {
    ///                 fooSubnet.Id,
    ///             },
    ///             ApiServerPublicAccessEnabled = true,
    ///             ApiServerPublicAccessConfig = new Volcengine.Veecp.Inputs.ClusterClusterConfigApiServerPublicAccessConfigArgs
    ///             {
    ///                 PublicAccessNetworkConfig = new Volcengine.Veecp.Inputs.ClusterClusterConfigApiServerPublicAccessConfigPublicAccessNetworkConfigArgs
    ///                 {
    ///                     BillingType = "PostPaidByBandwidth",
    ///                     Bandwidth = 1,
    ///                 },
    ///             },
    ///             ResourcePublicAccessDefaultEnabled = true,
    ///         },
    ///         PodsConfig = new Volcengine.Veecp.Inputs.ClusterPodsConfigArgs
    ///         {
    ///             PodNetworkMode = "Flannel",
    ///             FlannelConfig = new Volcengine.Veecp.Inputs.ClusterPodsConfigFlannelConfigArgs
    ///             {
    ///                 PodCidrs = new[]
    ///                 {
    ///                     "172.22.224.0/20",
    ///                 },
    ///                 MaxPodsPerNode = 64,
    ///             },
    ///         },
    ///         ServicesConfig = new Volcengine.Veecp.Inputs.ClusterServicesConfigArgs
    ///         {
    ///             ServiceCidrsv4s = new[]
    ///             {
    ///                 "172.30.0.0/18",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooNodePool = new Volcengine.Veecp.NodePool("fooNodePool", new()
    ///     {
    ///         ClusterId = fooCluster.Id,
    ///         ClientToken = "FGAHIxa23412FGAIOHioj",
    ///         AutoScaling = new Volcengine.Veecp.Inputs.NodePoolAutoScalingArgs
    ///         {
    ///             Enabled = true,
    ///             MinReplicas = 0,
    ///             MaxReplicas = 5,
    ///             DesiredReplicas = 0,
    ///             Priority = 5,
    ///             SubnetPolicy = "ZoneBalance",
    ///         },
    ///         NodeConfig = new Volcengine.Veecp.Inputs.NodePoolNodeConfigArgs
    ///         {
    ///             InstanceTypeIds = new[]
    ///             {
    ///                 "ecs.c1ie.xlarge",
    ///             },
    ///             SubnetIds = new[]
    ///             {
    ///                 fooSubnet.Id,
    ///             },
    ///             ImageId = "",
    ///             SystemVolume = new Volcengine.Veecp.Inputs.NodePoolNodeConfigSystemVolumeArgs
    ///             {
    ///                 Type = "ESSD_PL0",
    ///                 Size = 80,
    ///             },
    ///             DataVolumes = new[]
    ///             {
    ///                 new Volcengine.Veecp.Inputs.NodePoolNodeConfigDataVolumeArgs
    ///                 {
    ///                     Type = "ESSD_PL0",
    ///                     Size = 80,
    ///                     MountPoint = "/tf1",
    ///                 },
    ///                 new Volcengine.Veecp.Inputs.NodePoolNodeConfigDataVolumeArgs
    ///                 {
    ///                     Type = "ESSD_PL0",
    ///                     Size = 60,
    ///                     MountPoint = "/tf2",
    ///                 },
    ///             },
    ///             InitializeScript = "ZWNobyBoZWxsbyB0ZXJyYWZvcm0h",
    ///             Security = new Volcengine.Veecp.Inputs.NodePoolNodeConfigSecurityArgs
    ///             {
    ///                 Login = new Volcengine.Veecp.Inputs.NodePoolNodeConfigSecurityLoginArgs
    ///                 {
    ///                     Password = "UHdkMTIzNDU2",
    ///                 },
    ///                 SecurityStrategies = new[]
    ///                 {
    ///                     "Hids",
    ///                 },
    ///                 SecurityGroupIds = new[]
    ///                 {
    ///                     fooSecurityGroup.Id,
    ///                 },
    ///             },
    ///             AdditionalContainerStorageEnabled = false,
    ///             InstanceChargeType = "PostPaid",
    ///             NamePrefix = "acc-test",
    ///             EcsTags = new[]
    ///             {
    ///                 new Volcengine.Veecp.Inputs.NodePoolNodeConfigEcsTagArgs
    ///                 {
    ///                     Key = "ecs_k1",
    ///                     Value = "ecs_v1",
    ///                 },
    ///             },
    ///         },
    ///         KubernetesConfig = new Volcengine.Veecp.Inputs.NodePoolKubernetesConfigArgs
    ///         {
    ///             Labels = new[]
    ///             {
    ///                 new Volcengine.Veecp.Inputs.NodePoolKubernetesConfigLabelArgs
    ///                 {
    ///                     Key = "label1",
    ///                     Value = "value1",
    ///                 },
    ///             },
    ///             Taints = new[]
    ///             {
    ///                 new Volcengine.Veecp.Inputs.NodePoolKubernetesConfigTaintArgs
    ///                 {
    ///                     Key = "taint-key/node-type",
    ///                     Value = "taint-value",
    ///                     Effect = "NoSchedule",
    ///                 },
    ///             },
    ///             Cordon = true,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// VeecpNodePool can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:veecp/nodePool:NodePool default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:veecp/nodePool:NodePool")]
    public partial class NodePool : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The node pool elastic scaling configuration information.
        /// </summary>
        [Output("autoScaling")]
        public Output<Outputs.NodePoolAutoScaling> AutoScaling { get; private set; } = null!;

        /// <summary>
        /// The ClientToken of NodePool.
        /// </summary>
        [Output("clientToken")]
        public Output<string?> ClientToken { get; private set; } = null!;

        /// <summary>
        /// The ClusterId of NodePool.
        /// </summary>
        [Output("clusterId")]
        public Output<string?> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The list of existing ECS instance ids. Add existing instances with same type of security group under the same cluster VPC to the custom node pool.
        /// Note that removing instance ids from the list will only remove the nodes from cluster and not release the ECS instances. But deleting node pool will release the ECS instances in it.
        /// It is not recommended to use this field, it is recommended to use `volcengine_veecp_node` resource to add an existing instance to a custom node pool.
        /// </summary>
        [Output("instanceIds")]
        public Output<ImmutableArray<string>> InstanceIds { get; private set; } = null!;

        /// <summary>
        /// Whether to keep instance name when adding an existing instance to a custom node pool, the value is `true` or `false`.
        /// This field is valid only when adding new instances to the custom node pool.
        /// </summary>
        [Output("keepInstanceName")]
        public Output<bool?> KeepInstanceName { get; private set; } = null!;

        /// <summary>
        /// The KubernetesConfig of NodeConfig.
        /// </summary>
        [Output("kubernetesConfig")]
        public Output<Outputs.NodePoolKubernetesConfig> KubernetesConfig { get; private set; } = null!;

        /// <summary>
        /// The Name of NodePool.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The Config of NodePool.
        /// </summary>
        [Output("nodeConfig")]
        public Output<Outputs.NodePoolNodeConfig> NodeConfig { get; private set; } = null!;

        /// <summary>
        /// The NodeStatistics of NodeConfig.
        /// </summary>
        [Output("nodeStatistics")]
        public Output<ImmutableArray<Outputs.NodePoolNodeStatistic>> NodeStatistics { get; private set; } = null!;


        /// <summary>
        /// Create a NodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public NodePool(string name, NodePoolArgs args, CustomResourceOptions? options = null)
            : base("volcengine:veecp/nodePool:NodePool", name, args ?? new NodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private NodePool(string name, Input<string> id, NodePoolState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:veecp/nodePool:NodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing NodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static NodePool Get(string name, Input<string> id, NodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new NodePool(name, id, state, options);
        }
    }

    public sealed class NodePoolArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The node pool elastic scaling configuration information.
        /// </summary>
        [Input("autoScaling")]
        public Input<Inputs.NodePoolAutoScalingArgs>? AutoScaling { get; set; }

        /// <summary>
        /// The ClientToken of NodePool.
        /// </summary>
        [Input("clientToken")]
        public Input<string>? ClientToken { get; set; }

        /// <summary>
        /// The ClusterId of NodePool.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("instanceIds")]
        private InputList<string>? _instanceIds;

        /// <summary>
        /// The list of existing ECS instance ids. Add existing instances with same type of security group under the same cluster VPC to the custom node pool.
        /// Note that removing instance ids from the list will only remove the nodes from cluster and not release the ECS instances. But deleting node pool will release the ECS instances in it.
        /// It is not recommended to use this field, it is recommended to use `volcengine_veecp_node` resource to add an existing instance to a custom node pool.
        /// </summary>
        public InputList<string> InstanceIds
        {
            get => _instanceIds ?? (_instanceIds = new InputList<string>());
            set => _instanceIds = value;
        }

        /// <summary>
        /// Whether to keep instance name when adding an existing instance to a custom node pool, the value is `true` or `false`.
        /// This field is valid only when adding new instances to the custom node pool.
        /// </summary>
        [Input("keepInstanceName")]
        public Input<bool>? KeepInstanceName { get; set; }

        /// <summary>
        /// The KubernetesConfig of NodeConfig.
        /// </summary>
        [Input("kubernetesConfig", required: true)]
        public Input<Inputs.NodePoolKubernetesConfigArgs> KubernetesConfig { get; set; } = null!;

        /// <summary>
        /// The Name of NodePool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Config of NodePool.
        /// </summary>
        [Input("nodeConfig", required: true)]
        public Input<Inputs.NodePoolNodeConfigArgs> NodeConfig { get; set; } = null!;

        public NodePoolArgs()
        {
        }
        public static new NodePoolArgs Empty => new NodePoolArgs();
    }

    public sealed class NodePoolState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The node pool elastic scaling configuration information.
        /// </summary>
        [Input("autoScaling")]
        public Input<Inputs.NodePoolAutoScalingGetArgs>? AutoScaling { get; set; }

        /// <summary>
        /// The ClientToken of NodePool.
        /// </summary>
        [Input("clientToken")]
        public Input<string>? ClientToken { get; set; }

        /// <summary>
        /// The ClusterId of NodePool.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("instanceIds")]
        private InputList<string>? _instanceIds;

        /// <summary>
        /// The list of existing ECS instance ids. Add existing instances with same type of security group under the same cluster VPC to the custom node pool.
        /// Note that removing instance ids from the list will only remove the nodes from cluster and not release the ECS instances. But deleting node pool will release the ECS instances in it.
        /// It is not recommended to use this field, it is recommended to use `volcengine_veecp_node` resource to add an existing instance to a custom node pool.
        /// </summary>
        public InputList<string> InstanceIds
        {
            get => _instanceIds ?? (_instanceIds = new InputList<string>());
            set => _instanceIds = value;
        }

        /// <summary>
        /// Whether to keep instance name when adding an existing instance to a custom node pool, the value is `true` or `false`.
        /// This field is valid only when adding new instances to the custom node pool.
        /// </summary>
        [Input("keepInstanceName")]
        public Input<bool>? KeepInstanceName { get; set; }

        /// <summary>
        /// The KubernetesConfig of NodeConfig.
        /// </summary>
        [Input("kubernetesConfig")]
        public Input<Inputs.NodePoolKubernetesConfigGetArgs>? KubernetesConfig { get; set; }

        /// <summary>
        /// The Name of NodePool.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The Config of NodePool.
        /// </summary>
        [Input("nodeConfig")]
        public Input<Inputs.NodePoolNodeConfigGetArgs>? NodeConfig { get; set; }

        [Input("nodeStatistics")]
        private InputList<Inputs.NodePoolNodeStatisticGetArgs>? _nodeStatistics;

        /// <summary>
        /// The NodeStatistics of NodeConfig.
        /// </summary>
        public InputList<Inputs.NodePoolNodeStatisticGetArgs> NodeStatistics
        {
            get => _nodeStatistics ?? (_nodeStatistics = new InputList<Inputs.NodePoolNodeStatisticGetArgs>());
            set => _nodeStatistics = value;
        }

        public NodePoolState()
        {
        }
        public static new NodePoolState Empty => new NodePoolState();
    }
}
