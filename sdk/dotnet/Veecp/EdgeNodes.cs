// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Veecp
{
    [Obsolete(@"volcengine.veecp.EdgeNodes has been deprecated in favor of volcengine.veecp.getEdgeNodes")]
    public static class EdgeNodes
    {
        /// <summary>
        /// Use this data source to query detailed information of veecp edge nodes
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooEdgeNode = new Volcengine.Veecp.EdgeNode("fooEdgeNode", new()
        ///     {
        ///         ClusterId = "ccvmf49t1ndqeechmj8p0",
        ///         NodePoolId = "pcvpkdn7ic26jjcjsa20g",
        ///         AutoCompleteConfig = new Volcengine.Veecp.Inputs.EdgeNodeAutoCompleteConfigArgs
        ///         {
        ///             Enable = true,
        ///             DirectAdd = true,
        ///             DirectAddInstances = new[]
        ///             {
        ///                 new Volcengine.Veecp.Inputs.EdgeNodeAutoCompleteConfigDirectAddInstanceArgs
        ///                 {
        ///                     CloudServerIdentity = "cloudserver-wvvflw9qdns2qrk",
        ///                     InstanceIdentity = "veen91912104432151420041",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooEdgeNodes = Volcengine.Veecp.GetEdgeNodes.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooEdgeNode.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<EdgeNodesResult> InvokeAsync(EdgeNodesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<EdgeNodesResult>("volcengine:veecp/edgeNodes:EdgeNodes", args ?? new EdgeNodesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of veecp edge nodes
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooEdgeNode = new Volcengine.Veecp.EdgeNode("fooEdgeNode", new()
        ///     {
        ///         ClusterId = "ccvmf49t1ndqeechmj8p0",
        ///         NodePoolId = "pcvpkdn7ic26jjcjsa20g",
        ///         AutoCompleteConfig = new Volcengine.Veecp.Inputs.EdgeNodeAutoCompleteConfigArgs
        ///         {
        ///             Enable = true,
        ///             DirectAdd = true,
        ///             DirectAddInstances = new[]
        ///             {
        ///                 new Volcengine.Veecp.Inputs.EdgeNodeAutoCompleteConfigDirectAddInstanceArgs
        ///                 {
        ///                     CloudServerIdentity = "cloudserver-wvvflw9qdns2qrk",
        ///                     InstanceIdentity = "veen91912104432151420041",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooEdgeNodes = Volcengine.Veecp.GetEdgeNodes.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooEdgeNode.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<EdgeNodesResult> Invoke(EdgeNodesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<EdgeNodesResult>("volcengine:veecp/edgeNodes:EdgeNodes", args ?? new EdgeNodesInvokeArgs(), options.WithDefaults());
    }


    public sealed class EdgeNodesArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private List<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public List<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new List<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// The Create Client Token.
        /// </summary>
        [Input("createClientToken")]
        public string? CreateClientToken { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Node IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        [Input("ips")]
        private List<string>? _ips;

        /// <summary>
        /// The node ips.
        /// </summary>
        public List<string> Ips
        {
            get => _ips ?? (_ips = new List<string>());
            set => _ips = value;
        }

        /// <summary>
        /// The Name of Node.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A Name Regex of Node.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// Whether to query the node management script is needed.
        /// </summary>
        [Input("needBootstrapScript")]
        public string? NeedBootstrapScript { get; set; }

        [Input("nodePoolIds")]
        private List<string>? _nodePoolIds;

        /// <summary>
        /// The Node Pool IDs.
        /// </summary>
        public List<string> NodePoolIds
        {
            get => _nodePoolIds ?? (_nodePoolIds = new List<string>());
            set => _nodePoolIds = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("statuses")]
        private List<Inputs.EdgeNodesStatusArgs>? _statuses;

        /// <summary>
        /// The Status of filter.
        /// </summary>
        public List<Inputs.EdgeNodesStatusArgs> Statuses
        {
            get => _statuses ?? (_statuses = new List<Inputs.EdgeNodesStatusArgs>());
            set => _statuses = value;
        }

        [Input("zoneIds")]
        private List<string>? _zoneIds;

        /// <summary>
        /// The Zone IDs.
        /// </summary>
        public List<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new List<string>());
            set => _zoneIds = value;
        }

        public EdgeNodesArgs()
        {
        }
        public static new EdgeNodesArgs Empty => new EdgeNodesArgs();
    }

    public sealed class EdgeNodesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterIds")]
        private InputList<string>? _clusterIds;

        /// <summary>
        /// A list of Cluster IDs.
        /// </summary>
        public InputList<string> ClusterIds
        {
            get => _clusterIds ?? (_clusterIds = new InputList<string>());
            set => _clusterIds = value;
        }

        /// <summary>
        /// The Create Client Token.
        /// </summary>
        [Input("createClientToken")]
        public Input<string>? CreateClientToken { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Node IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        [Input("ips")]
        private InputList<string>? _ips;

        /// <summary>
        /// The node ips.
        /// </summary>
        public InputList<string> Ips
        {
            get => _ips ?? (_ips = new InputList<string>());
            set => _ips = value;
        }

        /// <summary>
        /// The Name of Node.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Name Regex of Node.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// Whether to query the node management script is needed.
        /// </summary>
        [Input("needBootstrapScript")]
        public Input<string>? NeedBootstrapScript { get; set; }

        [Input("nodePoolIds")]
        private InputList<string>? _nodePoolIds;

        /// <summary>
        /// The Node Pool IDs.
        /// </summary>
        public InputList<string> NodePoolIds
        {
            get => _nodePoolIds ?? (_nodePoolIds = new InputList<string>());
            set => _nodePoolIds = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("statuses")]
        private InputList<Inputs.EdgeNodesStatusInputArgs>? _statuses;

        /// <summary>
        /// The Status of filter.
        /// </summary>
        public InputList<Inputs.EdgeNodesStatusInputArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.EdgeNodesStatusInputArgs>());
            set => _statuses = value;
        }

        [Input("zoneIds")]
        private InputList<string>? _zoneIds;

        /// <summary>
        /// The Zone IDs.
        /// </summary>
        public InputList<string> ZoneIds
        {
            get => _zoneIds ?? (_zoneIds = new InputList<string>());
            set => _zoneIds = value;
        }

        public EdgeNodesInvokeArgs()
        {
        }
        public static new EdgeNodesInvokeArgs Empty => new EdgeNodesInvokeArgs();
    }


    [OutputType]
    public sealed class EdgeNodesResult
    {
        public readonly ImmutableArray<string> ClusterIds;
        /// <summary>
        /// The create client token of node.
        /// </summary>
        public readonly string? CreateClientToken;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly ImmutableArray<string> Ips;
        /// <summary>
        /// The name of Node.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly string? NeedBootstrapScript;
        public readonly ImmutableArray<string> NodePoolIds;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.EdgeNodesNodeResult> Nodes;
        public readonly string? OutputFile;
        public readonly ImmutableArray<Outputs.EdgeNodesStatusResult> Statuses;
        /// <summary>
        /// The total count of Node query.
        /// </summary>
        public readonly int TotalCount;
        public readonly ImmutableArray<string> ZoneIds;

        [OutputConstructor]
        private EdgeNodesResult(
            ImmutableArray<string> clusterIds,

            string? createClientToken,

            string id,

            ImmutableArray<string> ids,

            ImmutableArray<string> ips,

            string? name,

            string? nameRegex,

            string? needBootstrapScript,

            ImmutableArray<string> nodePoolIds,

            ImmutableArray<Outputs.EdgeNodesNodeResult> nodes,

            string? outputFile,

            ImmutableArray<Outputs.EdgeNodesStatusResult> statuses,

            int totalCount,

            ImmutableArray<string> zoneIds)
        {
            ClusterIds = clusterIds;
            CreateClientToken = createClientToken;
            Id = id;
            Ids = ids;
            Ips = ips;
            Name = name;
            NameRegex = nameRegex;
            NeedBootstrapScript = needBootstrapScript;
            NodePoolIds = nodePoolIds;
            Nodes = nodes;
            OutputFile = outputFile;
            Statuses = statuses;
            TotalCount = totalCount;
            ZoneIds = zoneIds;
        }
    }
}
