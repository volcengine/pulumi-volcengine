// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Cloud_firewall
{
    /// <summary>
    /// Provides a resource to manage cfw dns control policy
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooCfwDnsControlPolicy = new Volcengine.Cloud_firewall.CfwDnsControlPolicy("fooCfwDnsControlPolicy", new()
    ///     {
    ///         Description = "acc-test-dns-control-policy",
    ///         DestinationType = "domain",
    ///         Destination = "www.test.com",
    ///         Sources = new[]
    ///         {
    ///             new Volcengine.Cloud_firewall.Inputs.CfwDnsControlPolicySourceArgs
    ///             {
    ///                 VpcId = fooVpc.Id,
    ///                 Region = "cn-beijing",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// DnsControlPolicy can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy")]
    public partial class CfwDnsControlPolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The account id of the dns control policy.
        /// </summary>
        [Output("accountId")]
        public Output<string> AccountId { get; private set; } = null!;

        /// <summary>
        /// The description of the dns control policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The destination of the dns control policy.
        /// </summary>
        [Output("destination")]
        public Output<string> Destination { get; private set; } = null!;

        /// <summary>
        /// The destination type of the dns control policy. Valid values: `group`, `domain`.
        /// </summary>
        [Output("destinationType")]
        public Output<string> DestinationType { get; private set; } = null!;

        /// <summary>
        /// The hit count of the dns control policy.
        /// </summary>
        [Output("hitCnt")]
        public Output<int> HitCnt { get; private set; } = null!;

        /// <summary>
        /// The internet firewall id of the control policy.
        /// </summary>
        [Output("internetFirewallId")]
        public Output<string> InternetFirewallId { get; private set; } = null!;

        /// <summary>
        /// The last hit time of the dns control policy. Unix timestamp.
        /// </summary>
        [Output("lastHitTime")]
        public Output<int> LastHitTime { get; private set; } = null!;

        /// <summary>
        /// The source vpc list of the dns control policy.
        /// </summary>
        [Output("sources")]
        public Output<ImmutableArray<Outputs.CfwDnsControlPolicySource>> Sources { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the dns control policy.
        /// </summary>
        [Output("status")]
        public Output<bool> Status { get; private set; } = null!;

        /// <summary>
        /// The use count of the dns control policy.
        /// </summary>
        [Output("useCount")]
        public Output<int> UseCount { get; private set; } = null!;


        /// <summary>
        /// Create a CfwDnsControlPolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CfwDnsControlPolicy(string name, CfwDnsControlPolicyArgs args, CustomResourceOptions? options = null)
            : base("volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy", name, args ?? new CfwDnsControlPolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CfwDnsControlPolicy(string name, Input<string> id, CfwDnsControlPolicyState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:cloud_firewall/cfwDnsControlPolicy:CfwDnsControlPolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CfwDnsControlPolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CfwDnsControlPolicy Get(string name, Input<string> id, CfwDnsControlPolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new CfwDnsControlPolicy(name, id, state, options);
        }
    }

    public sealed class CfwDnsControlPolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The description of the dns control policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination of the dns control policy.
        /// </summary>
        [Input("destination", required: true)]
        public Input<string> Destination { get; set; } = null!;

        /// <summary>
        /// The destination type of the dns control policy. Valid values: `group`, `domain`.
        /// </summary>
        [Input("destinationType", required: true)]
        public Input<string> DestinationType { get; set; } = null!;

        /// <summary>
        /// The internet firewall id of the control policy.
        /// </summary>
        [Input("internetFirewallId")]
        public Input<string>? InternetFirewallId { get; set; }

        [Input("sources", required: true)]
        private InputList<Inputs.CfwDnsControlPolicySourceArgs>? _sources;

        /// <summary>
        /// The source vpc list of the dns control policy.
        /// </summary>
        public InputList<Inputs.CfwDnsControlPolicySourceArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.CfwDnsControlPolicySourceArgs>());
            set => _sources = value;
        }

        /// <summary>
        /// Whether to enable the dns control policy.
        /// </summary>
        [Input("status")]
        public Input<bool>? Status { get; set; }

        public CfwDnsControlPolicyArgs()
        {
        }
        public static new CfwDnsControlPolicyArgs Empty => new CfwDnsControlPolicyArgs();
    }

    public sealed class CfwDnsControlPolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The account id of the dns control policy.
        /// </summary>
        [Input("accountId")]
        public Input<string>? AccountId { get; set; }

        /// <summary>
        /// The description of the dns control policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The destination of the dns control policy.
        /// </summary>
        [Input("destination")]
        public Input<string>? Destination { get; set; }

        /// <summary>
        /// The destination type of the dns control policy. Valid values: `group`, `domain`.
        /// </summary>
        [Input("destinationType")]
        public Input<string>? DestinationType { get; set; }

        /// <summary>
        /// The hit count of the dns control policy.
        /// </summary>
        [Input("hitCnt")]
        public Input<int>? HitCnt { get; set; }

        /// <summary>
        /// The internet firewall id of the control policy.
        /// </summary>
        [Input("internetFirewallId")]
        public Input<string>? InternetFirewallId { get; set; }

        /// <summary>
        /// The last hit time of the dns control policy. Unix timestamp.
        /// </summary>
        [Input("lastHitTime")]
        public Input<int>? LastHitTime { get; set; }

        [Input("sources")]
        private InputList<Inputs.CfwDnsControlPolicySourceGetArgs>? _sources;

        /// <summary>
        /// The source vpc list of the dns control policy.
        /// </summary>
        public InputList<Inputs.CfwDnsControlPolicySourceGetArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.CfwDnsControlPolicySourceGetArgs>());
            set => _sources = value;
        }

        /// <summary>
        /// Whether to enable the dns control policy.
        /// </summary>
        [Input("status")]
        public Input<bool>? Status { get; set; }

        /// <summary>
        /// The use count of the dns control policy.
        /// </summary>
        [Input("useCount")]
        public Input<int>? UseCount { get; set; }

        public CfwDnsControlPolicyState()
        {
        }
        public static new CfwDnsControlPolicyState Empty => new CfwDnsControlPolicyState();
    }
}
