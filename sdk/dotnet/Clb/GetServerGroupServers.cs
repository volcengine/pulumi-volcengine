// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Clb
{
    public static class GetServerGroupServers
    {
        /// <summary>
        /// Use this data source to query detailed information of server group servers
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooClb = new Volcengine.Clb.Clb("fooClb", new()
        ///     {
        ///         Type = "public",
        ///         SubnetId = fooSubnet.Id,
        ///         LoadBalancerSpec = "small_1",
        ///         Description = "acc0Demo",
        ///         LoadBalancerName = "acc-test-create",
        ///         EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs
        ///         {
        ///             Isp = "BGP",
        ///             EipBillingType = "PostPaidByBandwidth",
        ///             Bandwidth = 1,
        ///         },
        ///     });
        /// 
        ///     var fooServerGroup = new Volcengine.Clb.ServerGroup("fooServerGroup", new()
        ///     {
        ///         LoadBalancerId = fooClb.Id,
        ///         ServerGroupName = "acc-test-create",
        ///         Description = "hello demo11",
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SecurityGroupName = "acc-test-security-group",
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
        ///     {
        ///         ImageId = "image-ycjwwciuzy5pkh54xx8f",
        ///         InstanceType = "ecs.c3i.large",
        ///         InstanceName = "acc-test-ecs-name",
        ///         Password = "93f0cb0614Aab12",
        ///         InstanceChargeType = "PostPaid",
        ///         SystemVolumeType = "ESSD_PL0",
        ///         SystemVolumeSize = 40,
        ///         SubnetId = fooSubnet.Id,
        ///         SecurityGroupIds = new[]
        ///         {
        ///             fooSecurityGroup.Id,
        ///         },
        ///     });
        /// 
        ///     var fooServerGroupServer = new Volcengine.Clb.ServerGroupServer("fooServerGroupServer", new()
        ///     {
        ///         ServerGroupId = fooServerGroup.Id,
        ///         InstanceId = fooInstance.Id,
        ///         Type = "ecs",
        ///         Weight = 100,
        ///         Port = 80,
        ///         Description = "This is a acc test server",
        ///     });
        /// 
        ///     var fooServerGroupServers = Volcengine.Clb.GetServerGroupServers.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooServerGroupServer.Id.Split(":")[fooServerGroupServer.Id.Split(":").Length - 1],
        ///         },
        ///         ServerGroupId = fooServerGroup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetServerGroupServersResult> InvokeAsync(GetServerGroupServersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerGroupServersResult>("volcengine:clb/getServerGroupServers:getServerGroupServers", args ?? new GetServerGroupServersArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of server group servers
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooClb = new Volcengine.Clb.Clb("fooClb", new()
        ///     {
        ///         Type = "public",
        ///         SubnetId = fooSubnet.Id,
        ///         LoadBalancerSpec = "small_1",
        ///         Description = "acc0Demo",
        ///         LoadBalancerName = "acc-test-create",
        ///         EipBillingConfig = new Volcengine.Clb.Inputs.ClbEipBillingConfigArgs
        ///         {
        ///             Isp = "BGP",
        ///             EipBillingType = "PostPaidByBandwidth",
        ///             Bandwidth = 1,
        ///         },
        ///     });
        /// 
        ///     var fooServerGroup = new Volcengine.Clb.ServerGroup("fooServerGroup", new()
        ///     {
        ///         LoadBalancerId = fooClb.Id,
        ///         ServerGroupName = "acc-test-create",
        ///         Description = "hello demo11",
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         VpcId = fooVpc.Id,
        ///         SecurityGroupName = "acc-test-security-group",
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
        ///     {
        ///         ImageId = "image-ycjwwciuzy5pkh54xx8f",
        ///         InstanceType = "ecs.c3i.large",
        ///         InstanceName = "acc-test-ecs-name",
        ///         Password = "93f0cb0614Aab12",
        ///         InstanceChargeType = "PostPaid",
        ///         SystemVolumeType = "ESSD_PL0",
        ///         SystemVolumeSize = 40,
        ///         SubnetId = fooSubnet.Id,
        ///         SecurityGroupIds = new[]
        ///         {
        ///             fooSecurityGroup.Id,
        ///         },
        ///     });
        /// 
        ///     var fooServerGroupServer = new Volcengine.Clb.ServerGroupServer("fooServerGroupServer", new()
        ///     {
        ///         ServerGroupId = fooServerGroup.Id,
        ///         InstanceId = fooInstance.Id,
        ///         Type = "ecs",
        ///         Weight = 100,
        ///         Port = 80,
        ///         Description = "This is a acc test server",
        ///     });
        /// 
        ///     var fooServerGroupServers = Volcengine.Clb.GetServerGroupServers.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooServerGroupServer.Id.Split(":")[fooServerGroupServer.Id.Split(":").Length - 1],
        ///         },
        ///         ServerGroupId = fooServerGroup.Id,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetServerGroupServersResult> Invoke(GetServerGroupServersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerGroupServersResult>("volcengine:clb/getServerGroupServers:getServerGroupServers", args ?? new GetServerGroupServersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerGroupServersArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// The list of ServerGroupServer IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of ServerGroupServer.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The ID of the ServerGroup.
        /// </summary>
        [Input("serverGroupId", required: true)]
        public string ServerGroupId { get; set; } = null!;

        public GetServerGroupServersArgs()
        {
        }
        public static new GetServerGroupServersArgs Empty => new GetServerGroupServersArgs();
    }

    public sealed class GetServerGroupServersInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// The list of ServerGroupServer IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of ServerGroupServer.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The ID of the ServerGroup.
        /// </summary>
        [Input("serverGroupId", required: true)]
        public Input<string> ServerGroupId { get; set; } = null!;

        public GetServerGroupServersInvokeArgs()
        {
        }
        public static new GetServerGroupServersInvokeArgs Empty => new GetServerGroupServersInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerGroupServersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        public readonly string ServerGroupId;
        /// <summary>
        /// The server list of ServerGroup.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerGroupServersServerResult> Servers;
        /// <summary>
        /// The total count of ServerGroupServer query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetServerGroupServersResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string serverGroupId,

            ImmutableArray<Outputs.GetServerGroupServersServerResult> servers,

            int totalCount)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ServerGroupId = serverGroupId;
            Servers = servers;
            TotalCount = totalCount;
        }
    }
}
