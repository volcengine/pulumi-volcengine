// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Autoscaling
{
    public static class ScalingConfigurations
    {
        /// <summary>
        /// Use this data source to query detailed information of scaling configurations
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.Images.Invoke(new()
        ///     {
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///         InstanceTypeId = "ecs.g1.large",
        ///     });
        /// 
        ///     var fooScalingGroup = new Volcengine.Autoscaling.ScalingGroup("fooScalingGroup", new()
        ///     {
        ///         ScalingGroupName = "acc-test-scaling-group",
        ///         SubnetIds = new[]
        ///         {
        ///             fooSubnet.Id,
        ///         },
        ///         MultiAzPolicy = "BALANCE",
        ///         DesireInstanceNumber = 0,
        ///         MinInstanceNumber = 0,
        ///         MaxInstanceNumber = 1,
        ///         InstanceTerminatePolicy = "OldestInstance",
        ///         DefaultCooldown = 10,
        ///     });
        /// 
        ///     var fooScalingConfiguration = new List&lt;Volcengine.Autoscaling.ScalingConfiguration&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooScalingConfiguration.Add(new Volcengine.Autoscaling.ScalingConfiguration($"fooScalingConfiguration-{range.Value}", new()
        ///         {
        ///             ImageId = fooImages.Apply(imagesResult =&gt; imagesResult.Images[0]?.ImageId),
        ///             InstanceName = "acc-test-instance",
        ///             InstanceTypes = new[]
        ///             {
        ///                 "ecs.g1.large",
        ///             },
        ///             Password = "93f0cb0614Aab12",
        ///             ScalingConfigurationName = $"acc-test-scaling-config-{range.Value}",
        ///             ScalingGroupId = fooScalingGroup.Id,
        ///             SecurityGroupIds = new[]
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///             Volumes = new[]
        ///             {
        ///                 new Volcengine.Autoscaling.Inputs.ScalingConfigurationVolumeArgs
        ///                 {
        ///                     VolumeType = "ESSD_PL0",
        ///                     Size = 50,
        ///                     DeleteWithInstance = true,
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooScalingConfigurations = Volcengine.Autoscaling.ScalingConfigurations.Invoke(new()
        ///     {
        ///         Ids = fooScalingConfiguration.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<ScalingConfigurationsResult> InvokeAsync(ScalingConfigurationsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ScalingConfigurationsResult>("volcengine:autoscaling/scalingConfigurations:ScalingConfigurations", args ?? new ScalingConfigurationsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of scaling configurations
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.Images.Invoke(new()
        ///     {
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///         InstanceTypeId = "ecs.g1.large",
        ///     });
        /// 
        ///     var fooScalingGroup = new Volcengine.Autoscaling.ScalingGroup("fooScalingGroup", new()
        ///     {
        ///         ScalingGroupName = "acc-test-scaling-group",
        ///         SubnetIds = new[]
        ///         {
        ///             fooSubnet.Id,
        ///         },
        ///         MultiAzPolicy = "BALANCE",
        ///         DesireInstanceNumber = 0,
        ///         MinInstanceNumber = 0,
        ///         MaxInstanceNumber = 1,
        ///         InstanceTerminatePolicy = "OldestInstance",
        ///         DefaultCooldown = 10,
        ///     });
        /// 
        ///     var fooScalingConfiguration = new List&lt;Volcengine.Autoscaling.ScalingConfiguration&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooScalingConfiguration.Add(new Volcengine.Autoscaling.ScalingConfiguration($"fooScalingConfiguration-{range.Value}", new()
        ///         {
        ///             ImageId = fooImages.Apply(imagesResult =&gt; imagesResult.Images[0]?.ImageId),
        ///             InstanceName = "acc-test-instance",
        ///             InstanceTypes = new[]
        ///             {
        ///                 "ecs.g1.large",
        ///             },
        ///             Password = "93f0cb0614Aab12",
        ///             ScalingConfigurationName = $"acc-test-scaling-config-{range.Value}",
        ///             ScalingGroupId = fooScalingGroup.Id,
        ///             SecurityGroupIds = new[]
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///             Volumes = new[]
        ///             {
        ///                 new Volcengine.Autoscaling.Inputs.ScalingConfigurationVolumeArgs
        ///                 {
        ///                     VolumeType = "ESSD_PL0",
        ///                     Size = 50,
        ///                     DeleteWithInstance = true,
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooScalingConfigurations = Volcengine.Autoscaling.ScalingConfigurations.Invoke(new()
        ///     {
        ///         Ids = fooScalingConfiguration.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<ScalingConfigurationsResult> Invoke(ScalingConfigurationsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ScalingConfigurationsResult>("volcengine:autoscaling/scalingConfigurations:ScalingConfigurations", args ?? new ScalingConfigurationsInvokeArgs(), options.WithDefaults());
    }


    public sealed class ScalingConfigurationsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of scaling configuration ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of scaling configuration.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("scalingConfigurationNames")]
        private List<string>? _scalingConfigurationNames;

        /// <summary>
        /// A list of scaling configuration names.
        /// </summary>
        public List<string> ScalingConfigurationNames
        {
            get => _scalingConfigurationNames ?? (_scalingConfigurationNames = new List<string>());
            set => _scalingConfigurationNames = value;
        }

        /// <summary>
        /// An id of scaling group.
        /// </summary>
        [Input("scalingGroupId")]
        public string? ScalingGroupId { get; set; }

        public ScalingConfigurationsArgs()
        {
        }
        public static new ScalingConfigurationsArgs Empty => new ScalingConfigurationsArgs();
    }

    public sealed class ScalingConfigurationsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of scaling configuration ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of scaling configuration.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("scalingConfigurationNames")]
        private InputList<string>? _scalingConfigurationNames;

        /// <summary>
        /// A list of scaling configuration names.
        /// </summary>
        public InputList<string> ScalingConfigurationNames
        {
            get => _scalingConfigurationNames ?? (_scalingConfigurationNames = new InputList<string>());
            set => _scalingConfigurationNames = value;
        }

        /// <summary>
        /// An id of scaling group.
        /// </summary>
        [Input("scalingGroupId")]
        public Input<string>? ScalingGroupId { get; set; }

        public ScalingConfigurationsInvokeArgs()
        {
        }
        public static new ScalingConfigurationsInvokeArgs Empty => new ScalingConfigurationsInvokeArgs();
    }


    [OutputType]
    public sealed class ScalingConfigurationsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        public readonly ImmutableArray<string> ScalingConfigurationNames;
        /// <summary>
        /// The collection of scaling configuration query.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScalingConfigurationsScalingConfigurationResult> ScalingConfigurations;
        /// <summary>
        /// The id of the scaling group to which the scaling configuration belongs.
        /// </summary>
        public readonly string? ScalingGroupId;
        /// <summary>
        /// The total count of scaling configuration query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private ScalingConfigurationsResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<string> scalingConfigurationNames,

            ImmutableArray<Outputs.ScalingConfigurationsScalingConfigurationResult> scalingConfigurations,

            string? scalingGroupId,

            int totalCount)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ScalingConfigurationNames = scalingConfigurationNames;
            ScalingConfigurations = scalingConfigurations;
            ScalingGroupId = scalingGroupId;
            TotalCount = totalCount;
        }
    }
}
