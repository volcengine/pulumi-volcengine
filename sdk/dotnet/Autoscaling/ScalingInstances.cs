// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Autoscaling
{
    [Obsolete(@"volcengine.autoscaling.ScalingInstances has been deprecated in favor of volcengine.autoscaling.getScalingInstances")]
    public static class ScalingInstances
    {
        /// <summary>
        /// Use this data source to query detailed information of scaling instances
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.GetImages.Invoke(new()
        ///     {
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///         InstanceTypeId = "ecs.g1.large",
        ///     });
        /// 
        ///     var fooKeyPair = new Volcengine.Ecs.KeyPair("fooKeyPair", new()
        ///     {
        ///         Description = "acc-test-2",
        ///         KeyPairName = "acc-test-key-pair-name",
        ///     });
        /// 
        ///     var fooLaunchTemplate = new Volcengine.Ecs.LaunchTemplate("fooLaunchTemplate", new()
        ///     {
        ///         Description = "acc-test-desc",
        ///         EipBandwidth = 200,
        ///         EipBillingType = "PostPaidByBandwidth",
        ///         EipIsp = "BGP",
        ///         HostName = "acc-hostname",
        ///         ImageId = fooImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.ImageId),
        ///         InstanceChargeType = "PostPaid",
        ///         InstanceName = "acc-instance-name",
        ///         InstanceTypeId = "ecs.g1.large",
        ///         KeyPairName = fooKeyPair.KeyPairName,
        ///         LaunchTemplateName = "acc-test-template",
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Volcengine.Ecs.Inputs.LaunchTemplateNetworkInterfaceArgs
        ///             {
        ///                 SubnetId = fooSubnet.Id,
        ///                 SecurityGroupIds = new[]
        ///                 {
        ///                     fooSecurityGroup.Id,
        ///                 },
        ///             },
        ///         },
        ///         Volumes = new[]
        ///         {
        ///             new Volcengine.Ecs.Inputs.LaunchTemplateVolumeArgs
        ///             {
        ///                 VolumeType = "ESSD_PL0",
        ///                 Size = 50,
        ///                 DeleteWithInstance = true,
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooScalingGroup = new Volcengine.Autoscaling.ScalingGroup("fooScalingGroup", new()
        ///     {
        ///         ScalingGroupName = "acc-test-scaling-group",
        ///         SubnetIds = new[]
        ///         {
        ///             fooSubnet.Id,
        ///         },
        ///         MultiAzPolicy = "BALANCE",
        ///         DesireInstanceNumber = -1,
        ///         MinInstanceNumber = 0,
        ///         MaxInstanceNumber = 10,
        ///         InstanceTerminatePolicy = "OldestInstance",
        ///         DefaultCooldown = 10,
        ///         LaunchTemplateId = fooLaunchTemplate.Id,
        ///         LaunchTemplateVersion = "Default",
        ///     });
        /// 
        ///     var fooScalingGroupEnabler = new Volcengine.Autoscaling.ScalingGroupEnabler("fooScalingGroupEnabler", new()
        ///     {
        ///         ScalingGroupId = fooScalingGroup.Id,
        ///     });
        /// 
        ///     var fooInstance = new List&lt;Volcengine.Ecs.Instance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooInstance.Add(new Volcengine.Ecs.Instance($"fooInstance-{range.Value}", new()
        ///         {
        ///             InstanceName = $"acc-test-ecs-{range.Value}",
        ///             Description = "acc-test",
        ///             HostName = "tf-acc-test",
        ///             ImageId = fooImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.ImageId),
        ///             InstanceType = "ecs.g1.large",
        ///             Password = "93f0cb0614Aab12",
        ///             InstanceChargeType = "PostPaid",
        ///             SystemVolumeType = "ESSD_PL0",
        ///             SystemVolumeSize = 40,
        ///             SubnetId = fooSubnet.Id,
        ///             SecurityGroupIds = new[]
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///         }));
        ///     }
        ///     var fooScalingInstanceAttachment = new List&lt;Volcengine.Autoscaling.ScalingInstanceAttachment&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; fooInstance.Length; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooScalingInstanceAttachment.Add(new Volcengine.Autoscaling.ScalingInstanceAttachment($"fooScalingInstanceAttachment-{range.Value}", new()
        ///         {
        ///             InstanceId = fooInstance[range.Value].Id,
        ///             ScalingGroupId = fooScalingGroup.Id,
        ///             Entrusted = true,
        ///         }, new CustomResourceOptions
        ///         {
        ///             DependsOn =
        ///             {
        ///                 fooScalingGroupEnabler,
        ///             },
        ///         }));
        ///     }
        ///     var fooScalingInstances = Volcengine.Autoscaling.GetScalingInstances.Invoke(new()
        ///     {
        ///         ScalingGroupId = fooScalingGroup.Id,
        ///         Ids = fooScalingInstanceAttachment.Select(__item =&gt; __item.InstanceId).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<ScalingInstancesResult> InvokeAsync(ScalingInstancesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<ScalingInstancesResult>("volcengine:autoscaling/scalingInstances:ScalingInstances", args ?? new ScalingInstancesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of scaling instances
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.GetImages.Invoke(new()
        ///     {
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///         InstanceTypeId = "ecs.g1.large",
        ///     });
        /// 
        ///     var fooKeyPair = new Volcengine.Ecs.KeyPair("fooKeyPair", new()
        ///     {
        ///         Description = "acc-test-2",
        ///         KeyPairName = "acc-test-key-pair-name",
        ///     });
        /// 
        ///     var fooLaunchTemplate = new Volcengine.Ecs.LaunchTemplate("fooLaunchTemplate", new()
        ///     {
        ///         Description = "acc-test-desc",
        ///         EipBandwidth = 200,
        ///         EipBillingType = "PostPaidByBandwidth",
        ///         EipIsp = "BGP",
        ///         HostName = "acc-hostname",
        ///         ImageId = fooImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.ImageId),
        ///         InstanceChargeType = "PostPaid",
        ///         InstanceName = "acc-instance-name",
        ///         InstanceTypeId = "ecs.g1.large",
        ///         KeyPairName = fooKeyPair.KeyPairName,
        ///         LaunchTemplateName = "acc-test-template",
        ///         NetworkInterfaces = new[]
        ///         {
        ///             new Volcengine.Ecs.Inputs.LaunchTemplateNetworkInterfaceArgs
        ///             {
        ///                 SubnetId = fooSubnet.Id,
        ///                 SecurityGroupIds = new[]
        ///                 {
        ///                     fooSecurityGroup.Id,
        ///                 },
        ///             },
        ///         },
        ///         Volumes = new[]
        ///         {
        ///             new Volcengine.Ecs.Inputs.LaunchTemplateVolumeArgs
        ///             {
        ///                 VolumeType = "ESSD_PL0",
        ///                 Size = 50,
        ///                 DeleteWithInstance = true,
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooScalingGroup = new Volcengine.Autoscaling.ScalingGroup("fooScalingGroup", new()
        ///     {
        ///         ScalingGroupName = "acc-test-scaling-group",
        ///         SubnetIds = new[]
        ///         {
        ///             fooSubnet.Id,
        ///         },
        ///         MultiAzPolicy = "BALANCE",
        ///         DesireInstanceNumber = -1,
        ///         MinInstanceNumber = 0,
        ///         MaxInstanceNumber = 10,
        ///         InstanceTerminatePolicy = "OldestInstance",
        ///         DefaultCooldown = 10,
        ///         LaunchTemplateId = fooLaunchTemplate.Id,
        ///         LaunchTemplateVersion = "Default",
        ///     });
        /// 
        ///     var fooScalingGroupEnabler = new Volcengine.Autoscaling.ScalingGroupEnabler("fooScalingGroupEnabler", new()
        ///     {
        ///         ScalingGroupId = fooScalingGroup.Id,
        ///     });
        /// 
        ///     var fooInstance = new List&lt;Volcengine.Ecs.Instance&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooInstance.Add(new Volcengine.Ecs.Instance($"fooInstance-{range.Value}", new()
        ///         {
        ///             InstanceName = $"acc-test-ecs-{range.Value}",
        ///             Description = "acc-test",
        ///             HostName = "tf-acc-test",
        ///             ImageId = fooImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.ImageId),
        ///             InstanceType = "ecs.g1.large",
        ///             Password = "93f0cb0614Aab12",
        ///             InstanceChargeType = "PostPaid",
        ///             SystemVolumeType = "ESSD_PL0",
        ///             SystemVolumeSize = 40,
        ///             SubnetId = fooSubnet.Id,
        ///             SecurityGroupIds = new[]
        ///             {
        ///                 fooSecurityGroup.Id,
        ///             },
        ///         }));
        ///     }
        ///     var fooScalingInstanceAttachment = new List&lt;Volcengine.Autoscaling.ScalingInstanceAttachment&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; fooInstance.Length; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooScalingInstanceAttachment.Add(new Volcengine.Autoscaling.ScalingInstanceAttachment($"fooScalingInstanceAttachment-{range.Value}", new()
        ///         {
        ///             InstanceId = fooInstance[range.Value].Id,
        ///             ScalingGroupId = fooScalingGroup.Id,
        ///             Entrusted = true,
        ///         }, new CustomResourceOptions
        ///         {
        ///             DependsOn =
        ///             {
        ///                 fooScalingGroupEnabler,
        ///             },
        ///         }));
        ///     }
        ///     var fooScalingInstances = Volcengine.Autoscaling.GetScalingInstances.Invoke(new()
        ///     {
        ///         ScalingGroupId = fooScalingGroup.Id,
        ///         Ids = fooScalingInstanceAttachment.Select(__item =&gt; __item.InstanceId).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<ScalingInstancesResult> Invoke(ScalingInstancesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<ScalingInstancesResult>("volcengine:autoscaling/scalingInstances:ScalingInstances", args ?? new ScalingInstancesInvokeArgs(), options.WithDefaults());
    }


    public sealed class ScalingInstancesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The creation type of the instances. Valid values: AutoCreated, Attached.
        /// </summary>
        [Input("creationType")]
        public string? CreationType { get; set; }

        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of instance ids.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The id of the scaling configuration id.
        /// </summary>
        [Input("scalingConfigurationId")]
        public string? ScalingConfigurationId { get; set; }

        /// <summary>
        /// The id of the scaling group.
        /// </summary>
        [Input("scalingGroupId", required: true)]
        public string ScalingGroupId { get; set; } = null!;

        /// <summary>
        /// The status of instances. Valid values: Init, Pending, Pending:Wait, InService, Error, Removing, Removing:Wait, Stopped, Protected.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public ScalingInstancesArgs()
        {
        }
        public static new ScalingInstancesArgs Empty => new ScalingInstancesArgs();
    }

    public sealed class ScalingInstancesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The creation type of the instances. Valid values: AutoCreated, Attached.
        /// </summary>
        [Input("creationType")]
        public Input<string>? CreationType { get; set; }

        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of instance ids.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The id of the scaling configuration id.
        /// </summary>
        [Input("scalingConfigurationId")]
        public Input<string>? ScalingConfigurationId { get; set; }

        /// <summary>
        /// The id of the scaling group.
        /// </summary>
        [Input("scalingGroupId", required: true)]
        public Input<string> ScalingGroupId { get; set; } = null!;

        /// <summary>
        /// The status of instances. Valid values: Init, Pending, Pending:Wait, InService, Error, Removing, Removing:Wait, Stopped, Protected.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public ScalingInstancesInvokeArgs()
        {
        }
        public static new ScalingInstancesInvokeArgs Empty => new ScalingInstancesInvokeArgs();
    }


    [OutputType]
    public sealed class ScalingInstancesResult
    {
        /// <summary>
        /// The creation type of the instance. Valid values: AutoCreated, Attached.
        /// </summary>
        public readonly string? CreationType;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? OutputFile;
        /// <summary>
        /// The id of the scaling configuration.
        /// </summary>
        public readonly string? ScalingConfigurationId;
        /// <summary>
        /// The id of the scaling group.
        /// </summary>
        public readonly string ScalingGroupId;
        /// <summary>
        /// The collection of scaling instances.
        /// </summary>
        public readonly ImmutableArray<Outputs.ScalingInstancesScalingInstanceResult> ScalingInstances;
        /// <summary>
        /// The status of instances.
        /// </summary>
        public readonly string? Status;
        /// <summary>
        /// The total count of scaling instances query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private ScalingInstancesResult(
            string? creationType,

            string id,

            ImmutableArray<string> ids,

            string? outputFile,

            string? scalingConfigurationId,

            string scalingGroupId,

            ImmutableArray<Outputs.ScalingInstancesScalingInstanceResult> scalingInstances,

            string? status,

            int totalCount)
        {
            CreationType = creationType;
            Id = id;
            Ids = ids;
            OutputFile = outputFile;
            ScalingConfigurationId = scalingConfigurationId;
            ScalingGroupId = scalingGroupId;
            ScalingInstances = scalingInstances;
            Status = status;
            TotalCount = totalCount;
        }
    }
}
