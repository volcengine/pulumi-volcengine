// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Waf
{
    /// <summary>
    /// Provides a resource to manage waf acl rule
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Waf.AclRule("foo", new()
    ///     {
    ///         AccurateGroup = new Volcengine.Waf.Inputs.AclRuleAccurateGroupArgs
    ///         {
    ///             AccurateRules = new[]
    ///             {
    ///                 new Volcengine.Waf.Inputs.AclRuleAccurateGroupAccurateRuleArgs
    ///                 {
    ///                     HttpObj = "request.uri",
    ///                     ObjType = 1,
    ///                     Opretar = 2,
    ///                     Property = 0,
    ///                     ValueString = "GET",
    ///                 },
    ///             },
    ///             Logic = 1,
    ///         },
    ///         AclType = "Allow",
    ///         Action = "block",
    ///         Advanced = 1,
    ///         Description = "tf-test",
    ///         Enable = 1,
    ///         HostAddType = 3,
    ///         HostLists = new[]
    ///         {
    ///             "www.tf-test.com",
    ///         },
    ///         IpAddType = 3,
    ///         IpLists = new[]
    ///         {
    ///             "1.2.2.2",
    ///             "1.2.3.30",
    ///         },
    ///         ProjectName = "default",
    ///         Url = "/",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WafAclRule can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:waf/aclRule:AclRule default resource_id:AclType
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:waf/aclRule:AclRule")]
    public partial class AclRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Advanced conditions.
        /// </summary>
        [Output("accurateGroup")]
        public Output<Outputs.AclRuleAccurateGroup> AccurateGroup { get; private set; } = null!;

        /// <summary>
        /// The type of access control rules.
        /// </summary>
        [Output("aclType")]
        public Output<string> AclType { get; private set; } = null!;

        /// <summary>
        /// Action to be taken on requests that match the rule.
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Whether to set advanced conditions.
        /// </summary>
        [Output("advanced")]
        public Output<int> Advanced { get; private set; } = null!;

        /// <summary>
        /// IP address.
        /// </summary>
        [Output("clientIp")]
        public Output<string> ClientIp { get; private set; } = null!;

        /// <summary>
        /// Rule description.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the rule.
        /// </summary>
        [Output("enable")]
        public Output<int> Enable { get; private set; } = null!;

        /// <summary>
        /// Type of domain name addition.
        /// </summary>
        [Output("hostAddType")]
        public Output<int> HostAddType { get; private set; } = null!;

        /// <summary>
        /// The ID of the domain group.
        /// </summary>
        [Output("hostGroupIds")]
        public Output<ImmutableArray<int>> HostGroupIds { get; private set; } = null!;

        /// <summary>
        /// The list of domain name groups.
        /// </summary>
        [Output("hostGroups")]
        public Output<ImmutableArray<Outputs.AclRuleHostGroup>> HostGroups { get; private set; } = null!;

        /// <summary>
        /// Required if HostAddType = 3. Single or multiple domain names are supported.
        /// </summary>
        [Output("hostLists")]
        public Output<ImmutableArray<string>> HostLists { get; private set; } = null!;

        /// <summary>
        /// Type of IP address addition.
        /// </summary>
        [Output("ipAddType")]
        public Output<int> IpAddType { get; private set; } = null!;

        /// <summary>
        /// Required if IpAddType = 2.
        /// </summary>
        [Output("ipGroupIds")]
        public Output<ImmutableArray<int>> IpGroupIds { get; private set; } = null!;

        /// <summary>
        /// The list of domain name groups.
        /// </summary>
        [Output("ipGroups")]
        public Output<ImmutableArray<Outputs.AclRuleIpGroup>> IpGroups { get; private set; } = null!;

        /// <summary>
        /// Required if IpAddType = 3. Single or multiple IP addresses are supported.
        /// </summary>
        [Output("ipLists")]
        public Output<ImmutableArray<string>> IpLists { get; private set; } = null!;

        /// <summary>
        /// Country or region code.
        /// </summary>
        [Output("ipLocationCountries")]
        public Output<ImmutableArray<string>> IpLocationCountries { get; private set; } = null!;

        /// <summary>
        /// Domestic region code.
        /// </summary>
        [Output("ipLocationSubregions")]
        public Output<ImmutableArray<string>> IpLocationSubregions { get; private set; } = null!;

        /// <summary>
        /// Rule name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The name of the project to which your domain names belong.
        /// </summary>
        [Output("projectName")]
        public Output<string?> ProjectName { get; private set; } = null!;

        /// <summary>
        /// Rule unique identifier.
        /// </summary>
        [Output("ruleTag")]
        public Output<string> RuleTag { get; private set; } = null!;

        /// <summary>
        /// Update time of the rule.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;

        /// <summary>
        /// The path of Matching.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a AclRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AclRule(string name, AclRuleArgs args, CustomResourceOptions? options = null)
            : base("volcengine:waf/aclRule:AclRule", name, args ?? new AclRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AclRule(string name, Input<string> id, AclRuleState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:waf/aclRule:AclRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AclRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AclRule Get(string name, Input<string> id, AclRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new AclRule(name, id, state, options);
        }
    }

    public sealed class AclRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Advanced conditions.
        /// </summary>
        [Input("accurateGroup")]
        public Input<Inputs.AclRuleAccurateGroupArgs>? AccurateGroup { get; set; }

        /// <summary>
        /// The type of access control rules.
        /// </summary>
        [Input("aclType", required: true)]
        public Input<string> AclType { get; set; } = null!;

        /// <summary>
        /// Action to be taken on requests that match the rule.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Whether to set advanced conditions.
        /// </summary>
        [Input("advanced")]
        public Input<int>? Advanced { get; set; }

        /// <summary>
        /// Rule description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to enable the rule.
        /// </summary>
        [Input("enable", required: true)]
        public Input<int> Enable { get; set; } = null!;

        /// <summary>
        /// Type of domain name addition.
        /// </summary>
        [Input("hostAddType", required: true)]
        public Input<int> HostAddType { get; set; } = null!;

        [Input("hostGroupIds")]
        private InputList<int>? _hostGroupIds;

        /// <summary>
        /// The ID of the domain group.
        /// </summary>
        public InputList<int> HostGroupIds
        {
            get => _hostGroupIds ?? (_hostGroupIds = new InputList<int>());
            set => _hostGroupIds = value;
        }

        [Input("hostLists")]
        private InputList<string>? _hostLists;

        /// <summary>
        /// Required if HostAddType = 3. Single or multiple domain names are supported.
        /// </summary>
        public InputList<string> HostLists
        {
            get => _hostLists ?? (_hostLists = new InputList<string>());
            set => _hostLists = value;
        }

        /// <summary>
        /// Type of IP address addition.
        /// </summary>
        [Input("ipAddType", required: true)]
        public Input<int> IpAddType { get; set; } = null!;

        [Input("ipGroupIds")]
        private InputList<int>? _ipGroupIds;

        /// <summary>
        /// Required if IpAddType = 2.
        /// </summary>
        public InputList<int> IpGroupIds
        {
            get => _ipGroupIds ?? (_ipGroupIds = new InputList<int>());
            set => _ipGroupIds = value;
        }

        [Input("ipLists")]
        private InputList<string>? _ipLists;

        /// <summary>
        /// Required if IpAddType = 3. Single or multiple IP addresses are supported.
        /// </summary>
        public InputList<string> IpLists
        {
            get => _ipLists ?? (_ipLists = new InputList<string>());
            set => _ipLists = value;
        }

        [Input("ipLocationCountries")]
        private InputList<string>? _ipLocationCountries;

        /// <summary>
        /// Country or region code.
        /// </summary>
        public InputList<string> IpLocationCountries
        {
            get => _ipLocationCountries ?? (_ipLocationCountries = new InputList<string>());
            set => _ipLocationCountries = value;
        }

        [Input("ipLocationSubregions")]
        private InputList<string>? _ipLocationSubregions;

        /// <summary>
        /// Domestic region code.
        /// </summary>
        public InputList<string> IpLocationSubregions
        {
            get => _ipLocationSubregions ?? (_ipLocationSubregions = new InputList<string>());
            set => _ipLocationSubregions = value;
        }

        /// <summary>
        /// Rule name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the project to which your domain names belong.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The path of Matching.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public AclRuleArgs()
        {
        }
        public static new AclRuleArgs Empty => new AclRuleArgs();
    }

    public sealed class AclRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Advanced conditions.
        /// </summary>
        [Input("accurateGroup")]
        public Input<Inputs.AclRuleAccurateGroupGetArgs>? AccurateGroup { get; set; }

        /// <summary>
        /// The type of access control rules.
        /// </summary>
        [Input("aclType")]
        public Input<string>? AclType { get; set; }

        /// <summary>
        /// Action to be taken on requests that match the rule.
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Whether to set advanced conditions.
        /// </summary>
        [Input("advanced")]
        public Input<int>? Advanced { get; set; }

        /// <summary>
        /// IP address.
        /// </summary>
        [Input("clientIp")]
        public Input<string>? ClientIp { get; set; }

        /// <summary>
        /// Rule description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether to enable the rule.
        /// </summary>
        [Input("enable")]
        public Input<int>? Enable { get; set; }

        /// <summary>
        /// Type of domain name addition.
        /// </summary>
        [Input("hostAddType")]
        public Input<int>? HostAddType { get; set; }

        [Input("hostGroupIds")]
        private InputList<int>? _hostGroupIds;

        /// <summary>
        /// The ID of the domain group.
        /// </summary>
        public InputList<int> HostGroupIds
        {
            get => _hostGroupIds ?? (_hostGroupIds = new InputList<int>());
            set => _hostGroupIds = value;
        }

        [Input("hostGroups")]
        private InputList<Inputs.AclRuleHostGroupGetArgs>? _hostGroups;

        /// <summary>
        /// The list of domain name groups.
        /// </summary>
        public InputList<Inputs.AclRuleHostGroupGetArgs> HostGroups
        {
            get => _hostGroups ?? (_hostGroups = new InputList<Inputs.AclRuleHostGroupGetArgs>());
            set => _hostGroups = value;
        }

        [Input("hostLists")]
        private InputList<string>? _hostLists;

        /// <summary>
        /// Required if HostAddType = 3. Single or multiple domain names are supported.
        /// </summary>
        public InputList<string> HostLists
        {
            get => _hostLists ?? (_hostLists = new InputList<string>());
            set => _hostLists = value;
        }

        /// <summary>
        /// Type of IP address addition.
        /// </summary>
        [Input("ipAddType")]
        public Input<int>? IpAddType { get; set; }

        [Input("ipGroupIds")]
        private InputList<int>? _ipGroupIds;

        /// <summary>
        /// Required if IpAddType = 2.
        /// </summary>
        public InputList<int> IpGroupIds
        {
            get => _ipGroupIds ?? (_ipGroupIds = new InputList<int>());
            set => _ipGroupIds = value;
        }

        [Input("ipGroups")]
        private InputList<Inputs.AclRuleIpGroupGetArgs>? _ipGroups;

        /// <summary>
        /// The list of domain name groups.
        /// </summary>
        public InputList<Inputs.AclRuleIpGroupGetArgs> IpGroups
        {
            get => _ipGroups ?? (_ipGroups = new InputList<Inputs.AclRuleIpGroupGetArgs>());
            set => _ipGroups = value;
        }

        [Input("ipLists")]
        private InputList<string>? _ipLists;

        /// <summary>
        /// Required if IpAddType = 3. Single or multiple IP addresses are supported.
        /// </summary>
        public InputList<string> IpLists
        {
            get => _ipLists ?? (_ipLists = new InputList<string>());
            set => _ipLists = value;
        }

        [Input("ipLocationCountries")]
        private InputList<string>? _ipLocationCountries;

        /// <summary>
        /// Country or region code.
        /// </summary>
        public InputList<string> IpLocationCountries
        {
            get => _ipLocationCountries ?? (_ipLocationCountries = new InputList<string>());
            set => _ipLocationCountries = value;
        }

        [Input("ipLocationSubregions")]
        private InputList<string>? _ipLocationSubregions;

        /// <summary>
        /// Domestic region code.
        /// </summary>
        public InputList<string> IpLocationSubregions
        {
            get => _ipLocationSubregions ?? (_ipLocationSubregions = new InputList<string>());
            set => _ipLocationSubregions = value;
        }

        /// <summary>
        /// Rule name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The name of the project to which your domain names belong.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Rule unique identifier.
        /// </summary>
        [Input("ruleTag")]
        public Input<string>? RuleTag { get; set; }

        /// <summary>
        /// Update time of the rule.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        /// <summary>
        /// The path of Matching.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public AclRuleState()
        {
        }
        public static new AclRuleState Empty => new AclRuleState();
    }
}
