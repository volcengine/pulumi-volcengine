// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Waf
{
    /// <summary>
    /// Provides a resource to manage waf cc rule
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Waf.CcRule("foo", new()
    ///     {
    ///         AccurateGroup = new Volcengine.Waf.Inputs.CcRuleAccurateGroupArgs
    ///         {
    ///             AccurateRules = new[]
    ///             {
    ///                 new Volcengine.Waf.Inputs.CcRuleAccurateGroupAccurateRuleArgs
    ///                 {
    ///                     HttpObj = "request.uri",
    ///                     ObjType = 1,
    ///                     Opretar = 2,
    ///                     Property = 0,
    ///                     ValueString = "tf",
    ///                 },
    ///                 new Volcengine.Waf.Inputs.CcRuleAccurateGroupAccurateRuleArgs
    ///                 {
    ///                     HttpObj = "request.schema",
    ///                     ObjType = 0,
    ///                     Opretar = 2,
    ///                     Property = 0,
    ///                     ValueString = "tf-2",
    ///                 },
    ///             },
    ///             Logic = 2,
    ///         },
    ///         CcType = 1,
    ///         CountTime = 102,
    ///         CronConfs = new[]
    ///         {
    ///             new Volcengine.Waf.Inputs.CcRuleCronConfArgs
    ///             {
    ///                 Crontab = "* 0 * * 1,2,3,4,5,6,0",
    ///                 PathThreshold = 123,
    ///                 SingleThreshold = 234,
    ///             },
    ///             new Volcengine.Waf.Inputs.CcRuleCronConfArgs
    ///             {
    ///                 Crontab = "* 3-8 * * 1,2,3,4,5,6,0",
    ///                 PathThreshold = 345,
    ///                 SingleThreshold = 456,
    ///             },
    ///         },
    ///         CronEnable = 1,
    ///         EffectTime = 200,
    ///         Enable = 1,
    ///         ExemptionTime = 0,
    ///         Field = "HEADER:User-Agemnt",
    ///         Host = "www.tf-test.com",
    ///         PathThreshold = 101,
    ///         RulePriority = 2,
    ///         SingleThreshold = 100,
    ///         Url = "/",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WafCcRule can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:waf/ccRule:CcRule default resource_id:Host
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:waf/ccRule:CcRule")]
    public partial class CcRule : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Advanced conditions.
        /// </summary>
        [Output("accurateGroup")]
        public Output<Outputs.CcRuleAccurateGroup?> AccurateGroup { get; private set; } = null!;

        /// <summary>
        /// Whether to enable advanced conditions.
        /// </summary>
        [Output("advancedEnable")]
        public Output<bool?> AdvancedEnable { get; private set; } = null!;

        /// <summary>
        /// The actions performed on subsequent requests after meeting the statistical conditions.
        /// </summary>
        [Output("ccType")]
        public Output<int> CcType { get; private set; } = null!;

        /// <summary>
        /// The statistical period of the strategy.
        /// </summary>
        [Output("countTime")]
        public Output<int> CountTime { get; private set; } = null!;

        /// <summary>
        /// Details of the periodic loop configuration.
        /// </summary>
        [Output("cronConfs")]
        public Output<ImmutableArray<Outputs.CcRuleCronConf>> CronConfs { get; private set; } = null!;

        /// <summary>
        /// Whether to set the cycle to take effect.
        /// </summary>
        [Output("cronEnable")]
        public Output<int?> CronEnable { get; private set; } = null!;

        /// <summary>
        /// Limit the duration, that is, the effective duration of the action.
        /// </summary>
        [Output("effectTime")]
        public Output<int> EffectTime { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the rules.
        /// </summary>
        [Output("enable")]
        public Output<int> Enable { get; private set; } = null!;

        /// <summary>
        /// The total number of enabled rules within the rule group.
        /// </summary>
        [Output("enableCount")]
        public Output<int> EnableCount { get; private set; } = null!;

        /// <summary>
        /// Strategy exemption time.
        /// </summary>
        [Output("exemptionTime")]
        public Output<int?> ExemptionTime { get; private set; } = null!;

        /// <summary>
        /// statistical object.
        /// </summary>
        [Output("field")]
        public Output<string> Field { get; private set; } = null!;

        /// <summary>
        /// Website domain names that require the setting of protection rules.
        /// </summary>
        [Output("host")]
        public Output<string> Host { get; private set; } = null!;

        /// <summary>
        /// The creation time of the rule group.
        /// </summary>
        [Output("insertTime")]
        public Output<string> InsertTime { get; private set; } = null!;

        /// <summary>
        /// The name of cc rule.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The threshold of the total number of times the request path is accessed.
        /// </summary>
        [Output("pathThreshold")]
        public Output<int> PathThreshold { get; private set; } = null!;

        /// <summary>
        /// The Name of the affiliated project resource.
        /// </summary>
        [Output("projectName")]
        public Output<string?> ProjectName { get; private set; } = null!;

        /// <summary>
        /// Details of the rule group.
        /// </summary>
        [Output("ruleGroups")]
        public Output<ImmutableArray<Outputs.CcRuleRuleGroup>> RuleGroups { get; private set; } = null!;

        /// <summary>
        /// Rule execution priority.
        /// </summary>
        [Output("rulePriority")]
        public Output<int> RulePriority { get; private set; } = null!;

        /// <summary>
        /// The threshold of the number of times each statistical object accesses the request path.
        /// </summary>
        [Output("singleThreshold")]
        public Output<int> SingleThreshold { get; private set; } = null!;

        /// <summary>
        /// The total number of rules within the rule group.
        /// </summary>
        [Output("totalCount")]
        public Output<int> TotalCount { get; private set; } = null!;

        /// <summary>
        /// The website request path that needs protection.
        /// </summary>
        [Output("url")]
        public Output<string> Url { get; private set; } = null!;


        /// <summary>
        /// Create a CcRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CcRule(string name, CcRuleArgs args, CustomResourceOptions? options = null)
            : base("volcengine:waf/ccRule:CcRule", name, args ?? new CcRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CcRule(string name, Input<string> id, CcRuleState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:waf/ccRule:CcRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CcRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CcRule Get(string name, Input<string> id, CcRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new CcRule(name, id, state, options);
        }
    }

    public sealed class CcRuleArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Advanced conditions.
        /// </summary>
        [Input("accurateGroup")]
        public Input<Inputs.CcRuleAccurateGroupArgs>? AccurateGroup { get; set; }

        /// <summary>
        /// Whether to enable advanced conditions.
        /// </summary>
        [Input("advancedEnable")]
        public Input<bool>? AdvancedEnable { get; set; }

        /// <summary>
        /// The actions performed on subsequent requests after meeting the statistical conditions.
        /// </summary>
        [Input("ccType", required: true)]
        public Input<int> CcType { get; set; } = null!;

        /// <summary>
        /// The statistical period of the strategy.
        /// </summary>
        [Input("countTime", required: true)]
        public Input<int> CountTime { get; set; } = null!;

        [Input("cronConfs")]
        private InputList<Inputs.CcRuleCronConfArgs>? _cronConfs;

        /// <summary>
        /// Details of the periodic loop configuration.
        /// </summary>
        public InputList<Inputs.CcRuleCronConfArgs> CronConfs
        {
            get => _cronConfs ?? (_cronConfs = new InputList<Inputs.CcRuleCronConfArgs>());
            set => _cronConfs = value;
        }

        /// <summary>
        /// Whether to set the cycle to take effect.
        /// </summary>
        [Input("cronEnable")]
        public Input<int>? CronEnable { get; set; }

        /// <summary>
        /// Limit the duration, that is, the effective duration of the action.
        /// </summary>
        [Input("effectTime", required: true)]
        public Input<int> EffectTime { get; set; } = null!;

        /// <summary>
        /// Whether to enable the rules.
        /// </summary>
        [Input("enable", required: true)]
        public Input<int> Enable { get; set; } = null!;

        /// <summary>
        /// Strategy exemption time.
        /// </summary>
        [Input("exemptionTime")]
        public Input<int>? ExemptionTime { get; set; }

        /// <summary>
        /// statistical object.
        /// </summary>
        [Input("field", required: true)]
        public Input<string> Field { get; set; } = null!;

        /// <summary>
        /// Website domain names that require the setting of protection rules.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The name of cc rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The threshold of the total number of times the request path is accessed.
        /// </summary>
        [Input("pathThreshold", required: true)]
        public Input<int> PathThreshold { get; set; } = null!;

        /// <summary>
        /// The Name of the affiliated project resource.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// Rule execution priority.
        /// </summary>
        [Input("rulePriority", required: true)]
        public Input<int> RulePriority { get; set; } = null!;

        /// <summary>
        /// The threshold of the number of times each statistical object accesses the request path.
        /// </summary>
        [Input("singleThreshold", required: true)]
        public Input<int> SingleThreshold { get; set; } = null!;

        /// <summary>
        /// The website request path that needs protection.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public CcRuleArgs()
        {
        }
        public static new CcRuleArgs Empty => new CcRuleArgs();
    }

    public sealed class CcRuleState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Advanced conditions.
        /// </summary>
        [Input("accurateGroup")]
        public Input<Inputs.CcRuleAccurateGroupGetArgs>? AccurateGroup { get; set; }

        /// <summary>
        /// Whether to enable advanced conditions.
        /// </summary>
        [Input("advancedEnable")]
        public Input<bool>? AdvancedEnable { get; set; }

        /// <summary>
        /// The actions performed on subsequent requests after meeting the statistical conditions.
        /// </summary>
        [Input("ccType")]
        public Input<int>? CcType { get; set; }

        /// <summary>
        /// The statistical period of the strategy.
        /// </summary>
        [Input("countTime")]
        public Input<int>? CountTime { get; set; }

        [Input("cronConfs")]
        private InputList<Inputs.CcRuleCronConfGetArgs>? _cronConfs;

        /// <summary>
        /// Details of the periodic loop configuration.
        /// </summary>
        public InputList<Inputs.CcRuleCronConfGetArgs> CronConfs
        {
            get => _cronConfs ?? (_cronConfs = new InputList<Inputs.CcRuleCronConfGetArgs>());
            set => _cronConfs = value;
        }

        /// <summary>
        /// Whether to set the cycle to take effect.
        /// </summary>
        [Input("cronEnable")]
        public Input<int>? CronEnable { get; set; }

        /// <summary>
        /// Limit the duration, that is, the effective duration of the action.
        /// </summary>
        [Input("effectTime")]
        public Input<int>? EffectTime { get; set; }

        /// <summary>
        /// Whether to enable the rules.
        /// </summary>
        [Input("enable")]
        public Input<int>? Enable { get; set; }

        /// <summary>
        /// The total number of enabled rules within the rule group.
        /// </summary>
        [Input("enableCount")]
        public Input<int>? EnableCount { get; set; }

        /// <summary>
        /// Strategy exemption time.
        /// </summary>
        [Input("exemptionTime")]
        public Input<int>? ExemptionTime { get; set; }

        /// <summary>
        /// statistical object.
        /// </summary>
        [Input("field")]
        public Input<string>? Field { get; set; }

        /// <summary>
        /// Website domain names that require the setting of protection rules.
        /// </summary>
        [Input("host")]
        public Input<string>? Host { get; set; }

        /// <summary>
        /// The creation time of the rule group.
        /// </summary>
        [Input("insertTime")]
        public Input<string>? InsertTime { get; set; }

        /// <summary>
        /// The name of cc rule.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The threshold of the total number of times the request path is accessed.
        /// </summary>
        [Input("pathThreshold")]
        public Input<int>? PathThreshold { get; set; }

        /// <summary>
        /// The Name of the affiliated project resource.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("ruleGroups")]
        private InputList<Inputs.CcRuleRuleGroupGetArgs>? _ruleGroups;

        /// <summary>
        /// Details of the rule group.
        /// </summary>
        public InputList<Inputs.CcRuleRuleGroupGetArgs> RuleGroups
        {
            get => _ruleGroups ?? (_ruleGroups = new InputList<Inputs.CcRuleRuleGroupGetArgs>());
            set => _ruleGroups = value;
        }

        /// <summary>
        /// Rule execution priority.
        /// </summary>
        [Input("rulePriority")]
        public Input<int>? RulePriority { get; set; }

        /// <summary>
        /// The threshold of the number of times each statistical object accesses the request path.
        /// </summary>
        [Input("singleThreshold")]
        public Input<int>? SingleThreshold { get; set; }

        /// <summary>
        /// The total number of rules within the rule group.
        /// </summary>
        [Input("totalCount")]
        public Input<int>? TotalCount { get; set; }

        /// <summary>
        /// The website request path that needs protection.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public CcRuleState()
        {
        }
        public static new CcRuleState Empty => new CcRuleState();
    }
}
