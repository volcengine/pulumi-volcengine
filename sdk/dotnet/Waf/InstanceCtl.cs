// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Waf
{
    /// <summary>
    /// Provides a resource to manage waf instance ctl
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Waf.InstanceCtl("foo", new()
    ///     {
    ///         AllowEnable = 0,
    ///         BlockEnable = 1,
    ///         ProjectName = "default",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WafInstanceCtl can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:waf/instanceCtl:InstanceCtl default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:waf/instanceCtl:InstanceCtl")]
    public partial class InstanceCtl : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Whether to enable the allowed access list policy for the instance corresponding to the current region.
        /// </summary>
        [Output("allowEnable")]
        public Output<int> AllowEnable { get; private set; } = null!;

        /// <summary>
        /// Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        /// </summary>
        [Output("blockEnable")]
        public Output<int> BlockEnable { get; private set; } = null!;

        /// <summary>
        /// The name of the project associated with the current resource.
        /// </summary>
        [Output("projectName")]
        public Output<string?> ProjectName { get; private set; } = null!;


        /// <summary>
        /// Create a InstanceCtl resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InstanceCtl(string name, InstanceCtlArgs? args = null, CustomResourceOptions? options = null)
            : base("volcengine:waf/instanceCtl:InstanceCtl", name, args ?? new InstanceCtlArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InstanceCtl(string name, Input<string> id, InstanceCtlState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:waf/instanceCtl:InstanceCtl", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InstanceCtl resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InstanceCtl Get(string name, Input<string> id, InstanceCtlState? state = null, CustomResourceOptions? options = null)
        {
            return new InstanceCtl(name, id, state, options);
        }
    }

    public sealed class InstanceCtlArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the allowed access list policy for the instance corresponding to the current region.
        /// </summary>
        [Input("allowEnable")]
        public Input<int>? AllowEnable { get; set; }

        /// <summary>
        /// Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        /// </summary>
        [Input("blockEnable")]
        public Input<int>? BlockEnable { get; set; }

        /// <summary>
        /// The name of the project associated with the current resource.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        public InstanceCtlArgs()
        {
        }
        public static new InstanceCtlArgs Empty => new InstanceCtlArgs();
    }

    public sealed class InstanceCtlState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Whether to enable the allowed access list policy for the instance corresponding to the current region.
        /// </summary>
        [Input("allowEnable")]
        public Input<int>? AllowEnable { get; set; }

        /// <summary>
        /// Whether to enable the prohibited access list policy for the instance corresponding to the current region.
        /// </summary>
        [Input("blockEnable")]
        public Input<int>? BlockEnable { get; set; }

        /// <summary>
        /// The name of the project associated with the current resource.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        public InstanceCtlState()
        {
        }
        public static new InstanceCtlState Empty => new InstanceCtlState();
    }
}
