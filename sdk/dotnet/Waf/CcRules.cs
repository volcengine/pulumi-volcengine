// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Waf
{
    [Obsolete(@"volcengine.waf.CcRules has been deprecated in favor of volcengine.waf.getCcRules")]
    public static class CcRules
    {
        /// <summary>
        /// Use this data source to query detailed information of waf cc rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Waf.GetCcRules.Invoke(new()
        ///     {
        ///         CcTypes = new[]
        ///         {
        ///             1,
        ///         },
        ///         Host = "www.tf-test.com",
        ///         PathOrderBy = "ASC",
        ///         RuleName = "tf",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<CcRulesResult> InvokeAsync(CcRulesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<CcRulesResult>("volcengine:waf/ccRules:CcRules", args ?? new CcRulesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of waf cc rules
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var foo = Volcengine.Waf.GetCcRules.Invoke(new()
        ///     {
        ///         CcTypes = new[]
        ///         {
        ///             1,
        ///         },
        ///         Host = "www.tf-test.com",
        ///         PathOrderBy = "ASC",
        ///         RuleName = "tf",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<CcRulesResult> Invoke(CcRulesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<CcRulesResult>("volcengine:waf/ccRules:CcRules", args ?? new CcRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class CcRulesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ccTypes")]
        private List<int>? _ccTypes;

        /// <summary>
        /// The actions performed on subsequent requests after meeting the statistical conditions.
        /// </summary>
        public List<int> CcTypes
        {
            get => _ccTypes ?? (_ccTypes = new List<int>());
            set => _ccTypes = value;
        }

        /// <summary>
        /// Website domain names that require the setting of protection rules.
        /// </summary>
        [Input("host", required: true)]
        public string Host { get; set; } = null!;

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The list shows the order.
        /// </summary>
        [Input("pathOrderBy", required: true)]
        public string PathOrderBy { get; set; } = null!;

        /// <summary>
        /// Search by rule name in a fuzzy manner.
        /// </summary>
        [Input("ruleName")]
        public string? RuleName { get; set; }

        /// <summary>
        /// Search precisely according to the rule ID.
        /// </summary>
        [Input("ruleTag")]
        public string? RuleTag { get; set; }

        /// <summary>
        /// Fuzzy search by the requested path.
        /// </summary>
        [Input("url")]
        public string? Url { get; set; }

        public CcRulesArgs()
        {
        }
        public static new CcRulesArgs Empty => new CcRulesArgs();
    }

    public sealed class CcRulesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ccTypes")]
        private InputList<int>? _ccTypes;

        /// <summary>
        /// The actions performed on subsequent requests after meeting the statistical conditions.
        /// </summary>
        public InputList<int> CcTypes
        {
            get => _ccTypes ?? (_ccTypes = new InputList<int>());
            set => _ccTypes = value;
        }

        /// <summary>
        /// Website domain names that require the setting of protection rules.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The list shows the order.
        /// </summary>
        [Input("pathOrderBy", required: true)]
        public Input<string> PathOrderBy { get; set; } = null!;

        /// <summary>
        /// Search by rule name in a fuzzy manner.
        /// </summary>
        [Input("ruleName")]
        public Input<string>? RuleName { get; set; }

        /// <summary>
        /// Search precisely according to the rule ID.
        /// </summary>
        [Input("ruleTag")]
        public Input<string>? RuleTag { get; set; }

        /// <summary>
        /// Fuzzy search by the requested path.
        /// </summary>
        [Input("url")]
        public Input<string>? Url { get; set; }

        public CcRulesInvokeArgs()
        {
        }
        public static new CcRulesInvokeArgs Empty => new CcRulesInvokeArgs();
    }


    [OutputType]
    public sealed class CcRulesResult
    {
        /// <summary>
        /// The actions performed on subsequent requests after meeting the statistical conditions.
        /// </summary>
        public readonly ImmutableArray<int> CcTypes;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.CcRulesDataResult> Datas;
        /// <summary>
        /// Protected website domain names.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        public readonly string PathOrderBy;
        public readonly string? RuleName;
        /// <summary>
        /// Rule label, that is, the complete rule ID.
        /// </summary>
        public readonly string? RuleTag;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The requested path.
        /// </summary>
        public readonly string? Url;

        [OutputConstructor]
        private CcRulesResult(
            ImmutableArray<int> ccTypes,

            ImmutableArray<Outputs.CcRulesDataResult> datas,

            string host,

            string id,

            string? nameRegex,

            string? outputFile,

            string pathOrderBy,

            string? ruleName,

            string? ruleTag,

            int totalCount,

            string? url)
        {
            CcTypes = ccTypes;
            Datas = datas;
            Host = host;
            Id = id;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            PathOrderBy = pathOrderBy;
            RuleName = ruleName;
            RuleTag = ruleTag;
            TotalCount = totalCount;
            Url = url;
        }
    }
}
