// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Waf.Outputs
{

    [OutputType]
    public sealed class DomainsDataResult
    {
        /// <summary>
        /// Access mode.
        /// </summary>
        public readonly int AccessMode;
        /// <summary>
        /// High-defense instance IP.
        /// </summary>
        public readonly string AdvancedDefenseIp;
        /// <summary>
        /// Whether the API protection policy has been enabled.
        /// </summary>
        public readonly int ApiEnable;
        /// <summary>
        /// The status of the attack.
        /// </summary>
        public readonly int AttackStatus;
        /// <summary>
        /// Whether to enable the intelligent CC protection strategy.
        /// </summary>
        public readonly int AutoCcEnable;
        /// <summary>
        /// The configuration of source station.
        /// </summary>
        public readonly ImmutableArray<Outputs.DomainsDataBackendGroupResult> BackendGroups;
        /// <summary>
        /// Whether the blacklist strategy has been enabled.
        /// </summary>
        public readonly int BlackIpEnable;
        /// <summary>
        /// Whether the regional ban strategy has been activated.
        /// </summary>
        public readonly int BlackLctEnable;
        /// <summary>
        /// Whether the cc protection strategy has been enabled.
        /// </summary>
        public readonly int CcEnable;
        /// <summary>
        /// When the protocol type is HTTPS, the bound certificate ID needs to be entered.
        /// </summary>
        public readonly int CertificateId;
        /// <summary>
        /// The name of the certificate.
        /// </summary>
        public readonly string CertificateName;
        /// <summary>
        /// The method of obtaining the client IP.
        /// </summary>
        public readonly int ClientIpLocation;
        /// <summary>
        /// The client requests the maximum value of body.
        /// </summary>
        public readonly int ClientMaxBodySize;
        /// <summary>
        /// Access port information.
        /// </summary>
        public readonly ImmutableArray<Outputs.DomainsDataCloudAccessConfigResult> CloudAccessConfigs;
        /// <summary>
        /// The CNAME value generated by the WAF instance.
        /// </summary>
        public readonly string Cname;
        /// <summary>
        /// Whether the custom Bot classification strategy has been enabled.
        /// </summary>
        public readonly int CustomBotEnable;
        /// <summary>
        /// Custom Header.
        /// </summary>
        public readonly ImmutableArray<string> CustomHeaders;
        /// <summary>
        /// Whether the custom response interception strategy has been enabled.
        /// </summary>
        public readonly int CustomRspEnable;
        /// <summary>
        /// The protection mode of the instance.
        /// </summary>
        public readonly int DefenceMode;
        /// <summary>
        /// Whether to activate the strategy for preventing the leakage of sensitive information.
        /// </summary>
        public readonly int DlpEnable;
        /// <summary>
        /// The domain name of the protected website that needs to be queried.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// Whether to enable HTTP 2.0.
        /// </summary>
        public readonly int EnableHttp2;
        /// <summary>
        /// Whether it supports protecting IPv6 requests.
        /// </summary>
        public readonly int EnableIpv6;
        /// <summary>
        /// The number of long connection multiplexes.
        /// </summary>
        public readonly int KeepAliveRequest;
        /// <summary>
        /// Long connection retention time.
        /// </summary>
        public readonly int KeepAliveTimeOut;
        /// <summary>
        /// The types of load balancing algorithms.
        /// </summary>
        public readonly string LbAlgorithm;
        /// <summary>
        /// Whether to enable protocol following.
        /// </summary>
        public readonly int ProtocolFollow;
        /// <summary>
        /// Access port information.
        /// </summary>
        public readonly Outputs.DomainsDataProtocolPortsResult ProtocolPorts;
        /// <summary>
        /// Access protocol types.
        /// </summary>
        public readonly string Protocols;
        /// <summary>
        /// Whether to enable proxy configuration.
        /// </summary>
        public readonly int ProxyConfig;
        /// <summary>
        /// The timeout period for establishing a connection between the WAF and the backend server.
        /// </summary>
        public readonly int ProxyConnectTimeOut;
        /// <summary>
        /// The number of reusable WAF origin long connections.
        /// </summary>
        public readonly int ProxyKeepAlive;
        /// <summary>
        /// Idle long connection timeout period.
        /// </summary>
        public readonly int ProxyKeepAliveTimeOut;
        /// <summary>
        /// The timeout period during which WAF reads the response from the backend server.
        /// </summary>
        public readonly int ProxyReadTimeOut;
        /// <summary>
        /// The number of retries for WAF back to source.
        /// </summary>
        public readonly int ProxyRetry;
        /// <summary>
        /// The timeout period during which the WAF transmits the request to the backend server.
        /// </summary>
        public readonly int ProxyWriteTimeOut;
        /// <summary>
        /// Connect to the source return mode.
        /// </summary>
        public readonly int PublicRealServer;
        /// <summary>
        /// domain region that need to be protected by WAF.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The IP of the WAF protection instance.
        /// </summary>
        public readonly string ServerIps;
        /// <summary>
        /// WAF source IP.
        /// </summary>
        public readonly string SrcIps;
        /// <summary>
        /// Encryption kit.
        /// </summary>
        public readonly ImmutableArray<string> SslCiphers;
        /// <summary>
        /// TLS protocol version.
        /// </summary>
        public readonly ImmutableArray<string> SslProtocols;
        /// <summary>
        /// The status of access.
        /// </summary>
        public readonly int Status;
        /// <summary>
        /// Whether the managed Bot classification strategy has been enabled.
        /// </summary>
        public readonly int SystemBotEnable;
        /// <summary>
        /// Whether to enable the page tamper proof policy.
        /// </summary>
        public readonly int TamperProofEnable;
        /// <summary>
        /// Whether to enable the log service.
        /// </summary>
        public readonly int TlsEnable;
        /// <summary>
        /// The update time.
        /// </summary>
        public readonly string UpdateTime;
        /// <summary>
        /// The ID of vpc.
        /// </summary>
        public readonly string VpcId;
        /// <summary>
        /// Whether the vulnerability protection strategy has been enabled.
        /// </summary>
        public readonly int WafEnable;
        /// <summary>
        /// Whether to enable the whitening strategy for vulnerability protection requests.
        /// </summary>
        public readonly int WafWhiteReqEnable;
        /// <summary>
        /// Whether the whitelist strategy has been enabled.
        /// </summary>
        public readonly int WhiteEnable;
        /// <summary>
        /// Whether to enable the whitening strategy for vulnerability protection fields.
        /// </summary>
        public readonly int WhiteFieldEnable;

        [OutputConstructor]
        private DomainsDataResult(
            int accessMode,

            string advancedDefenseIp,

            int apiEnable,

            int attackStatus,

            int autoCcEnable,

            ImmutableArray<Outputs.DomainsDataBackendGroupResult> backendGroups,

            int blackIpEnable,

            int blackLctEnable,

            int ccEnable,

            int certificateId,

            string certificateName,

            int clientIpLocation,

            int clientMaxBodySize,

            ImmutableArray<Outputs.DomainsDataCloudAccessConfigResult> cloudAccessConfigs,

            string cname,

            int customBotEnable,

            ImmutableArray<string> customHeaders,

            int customRspEnable,

            int defenceMode,

            int dlpEnable,

            string domain,

            int enableHttp2,

            int enableIpv6,

            int keepAliveRequest,

            int keepAliveTimeOut,

            string lbAlgorithm,

            int protocolFollow,

            Outputs.DomainsDataProtocolPortsResult protocolPorts,

            string protocols,

            int proxyConfig,

            int proxyConnectTimeOut,

            int proxyKeepAlive,

            int proxyKeepAliveTimeOut,

            int proxyReadTimeOut,

            int proxyRetry,

            int proxyWriteTimeOut,

            int publicRealServer,

            string region,

            string serverIps,

            string srcIps,

            ImmutableArray<string> sslCiphers,

            ImmutableArray<string> sslProtocols,

            int status,

            int systemBotEnable,

            int tamperProofEnable,

            int tlsEnable,

            string updateTime,

            string vpcId,

            int wafEnable,

            int wafWhiteReqEnable,

            int whiteEnable,

            int whiteFieldEnable)
        {
            AccessMode = accessMode;
            AdvancedDefenseIp = advancedDefenseIp;
            ApiEnable = apiEnable;
            AttackStatus = attackStatus;
            AutoCcEnable = autoCcEnable;
            BackendGroups = backendGroups;
            BlackIpEnable = blackIpEnable;
            BlackLctEnable = blackLctEnable;
            CcEnable = ccEnable;
            CertificateId = certificateId;
            CertificateName = certificateName;
            ClientIpLocation = clientIpLocation;
            ClientMaxBodySize = clientMaxBodySize;
            CloudAccessConfigs = cloudAccessConfigs;
            Cname = cname;
            CustomBotEnable = customBotEnable;
            CustomHeaders = customHeaders;
            CustomRspEnable = customRspEnable;
            DefenceMode = defenceMode;
            DlpEnable = dlpEnable;
            Domain = domain;
            EnableHttp2 = enableHttp2;
            EnableIpv6 = enableIpv6;
            KeepAliveRequest = keepAliveRequest;
            KeepAliveTimeOut = keepAliveTimeOut;
            LbAlgorithm = lbAlgorithm;
            ProtocolFollow = protocolFollow;
            ProtocolPorts = protocolPorts;
            Protocols = protocols;
            ProxyConfig = proxyConfig;
            ProxyConnectTimeOut = proxyConnectTimeOut;
            ProxyKeepAlive = proxyKeepAlive;
            ProxyKeepAliveTimeOut = proxyKeepAliveTimeOut;
            ProxyReadTimeOut = proxyReadTimeOut;
            ProxyRetry = proxyRetry;
            ProxyWriteTimeOut = proxyWriteTimeOut;
            PublicRealServer = publicRealServer;
            Region = region;
            ServerIps = serverIps;
            SrcIps = srcIps;
            SslCiphers = sslCiphers;
            SslProtocols = sslProtocols;
            Status = status;
            SystemBotEnable = systemBotEnable;
            TamperProofEnable = tamperProofEnable;
            TlsEnable = tlsEnable;
            UpdateTime = updateTime;
            VpcId = vpcId;
            WafEnable = wafEnable;
            WafWhiteReqEnable = wafWhiteReqEnable;
            WhiteEnable = whiteEnable;
            WhiteFieldEnable = whiteFieldEnable;
        }
    }
}
