// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Waf
{
    /// <summary>
    /// Provides a resource to manage waf ip group
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var foo = new Volcengine.Waf.IpGroup("foo", new()
    ///     {
    ///         AddType = "List",
    ///         IpLists = new[]
    ///         {
    ///             "1.1.1.1",
    ///             "1.1.1.2",
    ///             "1.1.1.3",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// WafIpGroup can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:waf/ipGroup:IpGroup default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:waf/ipGroup:IpGroup")]
    public partial class IpGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The way of addition.
        /// </summary>
        [Output("addType")]
        public Output<string> AddType { get; private set; } = null!;

        /// <summary>
        /// The number of IP addresses within the address group.
        /// </summary>
        [Output("ipCount")]
        public Output<int> IpCount { get; private set; } = null!;

        /// <summary>
        /// The ID of the ip group.
        /// </summary>
        [Output("ipGroupId")]
        public Output<int> IpGroupId { get; private set; } = null!;

        /// <summary>
        /// The IP address to be added.
        /// </summary>
        [Output("ipLists")]
        public Output<ImmutableArray<string>> IpLists { get; private set; } = null!;

        /// <summary>
        /// The name of ip group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The list of associated rules.
        /// </summary>
        [Output("relatedRules")]
        public Output<ImmutableArray<Outputs.IpGroupRelatedRule>> RelatedRules { get; private set; } = null!;

        /// <summary>
        /// ip group update time.
        /// </summary>
        [Output("updateTime")]
        public Output<string> UpdateTime { get; private set; } = null!;


        /// <summary>
        /// Create a IpGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public IpGroup(string name, IpGroupArgs args, CustomResourceOptions? options = null)
            : base("volcengine:waf/ipGroup:IpGroup", name, args ?? new IpGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private IpGroup(string name, Input<string> id, IpGroupState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:waf/ipGroup:IpGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing IpGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static IpGroup Get(string name, Input<string> id, IpGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new IpGroup(name, id, state, options);
        }
    }

    public sealed class IpGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The way of addition.
        /// </summary>
        [Input("addType", required: true)]
        public Input<string> AddType { get; set; } = null!;

        [Input("ipLists", required: true)]
        private InputList<string>? _ipLists;

        /// <summary>
        /// The IP address to be added.
        /// </summary>
        public InputList<string> IpLists
        {
            get => _ipLists ?? (_ipLists = new InputList<string>());
            set => _ipLists = value;
        }

        /// <summary>
        /// The name of ip group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public IpGroupArgs()
        {
        }
        public static new IpGroupArgs Empty => new IpGroupArgs();
    }

    public sealed class IpGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The way of addition.
        /// </summary>
        [Input("addType")]
        public Input<string>? AddType { get; set; }

        /// <summary>
        /// The number of IP addresses within the address group.
        /// </summary>
        [Input("ipCount")]
        public Input<int>? IpCount { get; set; }

        /// <summary>
        /// The ID of the ip group.
        /// </summary>
        [Input("ipGroupId")]
        public Input<int>? IpGroupId { get; set; }

        [Input("ipLists")]
        private InputList<string>? _ipLists;

        /// <summary>
        /// The IP address to be added.
        /// </summary>
        public InputList<string> IpLists
        {
            get => _ipLists ?? (_ipLists = new InputList<string>());
            set => _ipLists = value;
        }

        /// <summary>
        /// The name of ip group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("relatedRules")]
        private InputList<Inputs.IpGroupRelatedRuleGetArgs>? _relatedRules;

        /// <summary>
        /// The list of associated rules.
        /// </summary>
        public InputList<Inputs.IpGroupRelatedRuleGetArgs> RelatedRules
        {
            get => _relatedRules ?? (_relatedRules = new InputList<Inputs.IpGroupRelatedRuleGetArgs>());
            set => _relatedRules = value;
        }

        /// <summary>
        /// ip group update time.
        /// </summary>
        [Input("updateTime")]
        public Input<string>? UpdateTime { get; set; }

        public IpGroupState()
        {
        }
        public static new IpGroupState Empty => new IpGroupState();
    }
}
