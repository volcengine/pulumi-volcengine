// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Apig.Outputs
{

    [OutputType]
    public sealed class GatewaysGatewayResult
    {
        /// <summary>
        /// The backend spec of the api gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaysGatewayBackendSpecResult> BackendSpecs;
        /// <summary>
        /// The comments of the api gateway.
        /// </summary>
        public readonly string Comments;
        /// <summary>
        /// The create time of the api gateway.
        /// </summary>
        public readonly string CreateTime;
        /// <summary>
        /// The Id of the api gateway.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The log spec of the api gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaysGatewayLogSpecResult> LogSpecs;
        /// <summary>
        /// The error message of the api gateway.
        /// </summary>
        public readonly string Message;
        /// <summary>
        /// The monitor spec of the api gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaysGatewayMonitorSpecResult> MonitorSpecs;
        /// <summary>
        /// The name of api gateway. This field support fuzzy query.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The network spec of the api gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaysGatewayNetworkSpecResult> NetworkSpecs;
        /// <summary>
        /// The project name of api gateway.
        /// </summary>
        public readonly string ProjectName;
        /// <summary>
        /// The region of the api gateway.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The resource spec of the api gateway.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaysGatewayResourceSpecResult> ResourceSpecs;
        /// <summary>
        /// The status of api gateway.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GatewaysGatewayTagResult> Tags;
        /// <summary>
        /// The type of api gateway.
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// The version of the api gateway.
        /// </summary>
        public readonly string Version;

        [OutputConstructor]
        private GatewaysGatewayResult(
            ImmutableArray<Outputs.GatewaysGatewayBackendSpecResult> backendSpecs,

            string comments,

            string createTime,

            string id,

            ImmutableArray<Outputs.GatewaysGatewayLogSpecResult> logSpecs,

            string message,

            ImmutableArray<Outputs.GatewaysGatewayMonitorSpecResult> monitorSpecs,

            string name,

            ImmutableArray<Outputs.GatewaysGatewayNetworkSpecResult> networkSpecs,

            string projectName,

            string region,

            ImmutableArray<Outputs.GatewaysGatewayResourceSpecResult> resourceSpecs,

            string status,

            ImmutableArray<Outputs.GatewaysGatewayTagResult> tags,

            string type,

            string version)
        {
            BackendSpecs = backendSpecs;
            Comments = comments;
            CreateTime = createTime;
            Id = id;
            LogSpecs = logSpecs;
            Message = message;
            MonitorSpecs = monitorSpecs;
            Name = name;
            NetworkSpecs = networkSpecs;
            ProjectName = projectName;
            Region = region;
            ResourceSpecs = resourceSpecs;
            Status = status;
            Tags = tags;
            Type = type;
            Version = version;
        }
    }
}
