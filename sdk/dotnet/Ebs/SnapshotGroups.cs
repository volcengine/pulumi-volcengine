// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ebs
{
    [Obsolete(@"volcengine.ebs.SnapshotGroups has been deprecated in favor of volcengine.ebs.getSnapshotGroups")]
    public static class SnapshotGroups
    {
        /// <summary>
        /// Use this data source to query detailed information of ebs snapshot groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.GetImages.Invoke(new()
        ///     {
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///         InstanceTypeId = "ecs.g3il.large",
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
        ///     {
        ///         InstanceName = "acc-test-ecs",
        ///         Description = "acc-test",
        ///         HostName = "tf-acc-test",
        ///         ImageId = fooImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.ImageId),
        ///         InstanceType = "ecs.g3il.large",
        ///         Password = "93f0cb0614Aab12",
        ///         InstanceChargeType = "PostPaid",
        ///         SystemVolumeType = "ESSD_PL0",
        ///         SystemVolumeSize = 40,
        ///         SubnetId = fooSubnet.Id,
        ///         SecurityGroupIds = new[]
        ///         {
        ///             fooSecurityGroup.Id,
        ///         },
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Ecs.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooVolume = new Volcengine.Ebs.Volume("fooVolume", new()
        ///     {
        ///         VolumeName = "acc-test-volume",
        ///         VolumeType = "ESSD_PL0",
        ///         Description = "acc-test",
        ///         Kind = "data",
        ///         Size = 500,
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VolumeChargeType = "PostPaid",
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooVolumeAttach = new Volcengine.Ebs.VolumeAttach("fooVolumeAttach", new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         VolumeId = fooVolume.Id,
        ///     });
        /// 
        ///     var fooSnapshotGroup = new Volcengine.Ebs.SnapshotGroup("fooSnapshotGroup", new()
        ///     {
        ///         VolumeIds = new[]
        ///         {
        ///             fooInstance.SystemVolumeId,
        ///             fooVolume.Id,
        ///         },
        ///         InstanceId = fooInstance.Id,
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Ebs.Inputs.SnapshotGroupTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             fooVolumeAttach,
        ///         },
        ///     });
        /// 
        ///     var fooSnapshotGroups = Volcengine.Ebs.GetSnapshotGroups.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooSnapshotGroup.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<SnapshotGroupsResult> InvokeAsync(SnapshotGroupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<SnapshotGroupsResult>("volcengine:ebs/snapshotGroups:SnapshotGroups", args ?? new SnapshotGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ebs snapshot groups
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
        ///     {
        ///         VpcName = "acc-test-vpc",
        ///         CidrBlock = "172.16.0.0/16",
        ///     });
        /// 
        ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
        ///     {
        ///         SubnetName = "acc-test-subnet",
        ///         CidrBlock = "172.16.0.0/24",
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
        ///     {
        ///         SecurityGroupName = "acc-test-security-group",
        ///         VpcId = fooVpc.Id,
        ///     });
        /// 
        ///     var fooImages = Volcengine.Ecs.GetImages.Invoke(new()
        ///     {
        ///         OsType = "Linux",
        ///         Visibility = "public",
        ///         InstanceTypeId = "ecs.g3il.large",
        ///     });
        /// 
        ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
        ///     {
        ///         InstanceName = "acc-test-ecs",
        ///         Description = "acc-test",
        ///         HostName = "tf-acc-test",
        ///         ImageId = fooImages.Apply(getImagesResult =&gt; getImagesResult.Images[0]?.ImageId),
        ///         InstanceType = "ecs.g3il.large",
        ///         Password = "93f0cb0614Aab12",
        ///         InstanceChargeType = "PostPaid",
        ///         SystemVolumeType = "ESSD_PL0",
        ///         SystemVolumeSize = 40,
        ///         SubnetId = fooSubnet.Id,
        ///         SecurityGroupIds = new[]
        ///         {
        ///             fooSecurityGroup.Id,
        ///         },
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Ecs.Inputs.InstanceTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var fooVolume = new Volcengine.Ebs.Volume("fooVolume", new()
        ///     {
        ///         VolumeName = "acc-test-volume",
        ///         VolumeType = "ESSD_PL0",
        ///         Description = "acc-test",
        ///         Kind = "data",
        ///         Size = 500,
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VolumeChargeType = "PostPaid",
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooVolumeAttach = new Volcengine.Ebs.VolumeAttach("fooVolumeAttach", new()
        ///     {
        ///         InstanceId = fooInstance.Id,
        ///         VolumeId = fooVolume.Id,
        ///     });
        /// 
        ///     var fooSnapshotGroup = new Volcengine.Ebs.SnapshotGroup("fooSnapshotGroup", new()
        ///     {
        ///         VolumeIds = new[]
        ///         {
        ///             fooInstance.SystemVolumeId,
        ///             fooVolume.Id,
        ///         },
        ///         InstanceId = fooInstance.Id,
        ///         Description = "acc-test",
        ///         ProjectName = "default",
        ///         Tags = new[]
        ///         {
        ///             new Volcengine.Ebs.Inputs.SnapshotGroupTagArgs
        ///             {
        ///                 Key = "k1",
        ///                 Value = "v1",
        ///             },
        ///         },
        ///     }, new CustomResourceOptions
        ///     {
        ///         DependsOn =
        ///         {
        ///             fooVolumeAttach,
        ///         },
        ///     });
        /// 
        ///     var fooSnapshotGroups = Volcengine.Ebs.GetSnapshotGroups.Invoke(new()
        ///     {
        ///         Ids = new[]
        ///         {
        ///             fooSnapshotGroup.Id,
        ///         },
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<SnapshotGroupsResult> Invoke(SnapshotGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<SnapshotGroupsResult>("volcengine:ebs/snapshotGroups:SnapshotGroups", args ?? new SnapshotGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class SnapshotGroupsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of snapshot group IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The instance id of snapshot group.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// The name of snapshot group.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of snapshot group.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        [Input("statuses")]
        private List<string>? _statuses;

        /// <summary>
        /// A list of snapshot group status. Valid values: `creating`, `available`, `failed`.
        /// </summary>
        public List<string> Statuses
        {
            get => _statuses ?? (_statuses = new List<string>());
            set => _statuses = value;
        }

        public SnapshotGroupsArgs()
        {
        }
        public static new SnapshotGroupsArgs Empty => new SnapshotGroupsArgs();
    }

    public sealed class SnapshotGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of snapshot group IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The instance id of snapshot group.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of snapshot group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of snapshot group.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("statuses")]
        private InputList<string>? _statuses;

        /// <summary>
        /// A list of snapshot group status. Valid values: `creating`, `available`, `failed`.
        /// </summary>
        public InputList<string> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<string>());
            set => _statuses = value;
        }

        public SnapshotGroupsInvokeArgs()
        {
        }
        public static new SnapshotGroupsInvokeArgs Empty => new SnapshotGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class SnapshotGroupsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        /// <summary>
        /// The instance id of the snapshot group.
        /// </summary>
        public readonly string? InstanceId;
        /// <summary>
        /// The name of the snapshot group.
        /// </summary>
        public readonly string? Name;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The id of the snapshot.
        /// </summary>
        public readonly string? ProjectName;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.SnapshotGroupsSnapshotGroupResult> SnapshotGroups;
        /// <summary>
        /// The status of the snapshot group.
        /// </summary>
        public readonly ImmutableArray<string> Statuses;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private SnapshotGroupsResult(
            string id,

            ImmutableArray<string> ids,

            string? instanceId,

            string? name,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            ImmutableArray<Outputs.SnapshotGroupsSnapshotGroupResult> snapshotGroups,

            ImmutableArray<string> statuses,

            int totalCount)
        {
            Id = id;
            Ids = ids;
            InstanceId = instanceId;
            Name = name;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            SnapshotGroups = snapshotGroups;
            Statuses = statuses;
            TotalCount = totalCount;
        }
    }
}
