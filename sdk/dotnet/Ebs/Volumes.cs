// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ebs
{
    [Obsolete(@"volcengine.ebs.Volumes has been deprecated in favor of volcengine.ebs.getVolumes")]
    public static class Volumes
    {
        /// <summary>
        /// Use this data source to query detailed information of volumes
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVolume = new List&lt;Volcengine.Ebs.Volume&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooVolume.Add(new Volcengine.Ebs.Volume($"fooVolume-{range.Value}", new()
        ///         {
        ///             VolumeName = $"acc-test-volume-{range.Value}",
        ///             VolumeType = "ESSD_PL0",
        ///             Description = "acc-test",
        ///             Kind = "data",
        ///             Size = 60,
        ///             ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///             VolumeChargeType = "PostPaid",
        ///             ProjectName = "default",
        ///         }));
        ///     }
        ///     var fooVolumes = Volcengine.Ebs.GetVolumes.Invoke(new()
        ///     {
        ///         Ids = fooVolume.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<VolumesResult> InvokeAsync(VolumesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<VolumesResult>("volcengine:ebs/volumes:Volumes", args ?? new VolumesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of volumes
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVolume = new List&lt;Volcengine.Ebs.Volume&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 3; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooVolume.Add(new Volcengine.Ebs.Volume($"fooVolume-{range.Value}", new()
        ///         {
        ///             VolumeName = $"acc-test-volume-{range.Value}",
        ///             VolumeType = "ESSD_PL0",
        ///             Description = "acc-test",
        ///             Kind = "data",
        ///             Size = 60,
        ///             ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///             VolumeChargeType = "PostPaid",
        ///             ProjectName = "default",
        ///         }));
        ///     }
        ///     var fooVolumes = Volcengine.Ebs.GetVolumes.Invoke(new()
        ///     {
        ///         Ids = fooVolume.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<VolumesResult> Invoke(VolumesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<VolumesResult>("volcengine:ebs/volumes:Volumes", args ?? new VolumesInvokeArgs(), options.WithDefaults());
    }


    public sealed class VolumesArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of Volume IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Id of instance.
        /// </summary>
        [Input("instanceId")]
        public string? InstanceId { get; set; }

        /// <summary>
        /// The Kind of Volume.
        /// </summary>
        [Input("kind")]
        public string? Kind { get; set; }

        /// <summary>
        /// A Name Regex of Volume.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        [Input("tags")]
        private List<Inputs.VolumesTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.VolumesTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.VolumesTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of Volume.
        /// </summary>
        [Input("volumeName")]
        public string? VolumeName { get; set; }

        /// <summary>
        /// The Status of Volume, the value can be `available` or `attaching` or `attached` or `detaching` or `creating` or `deleting` or `error` or `extending`.
        /// </summary>
        [Input("volumeStatus")]
        public string? VolumeStatus { get; set; }

        /// <summary>
        /// The type of Volume.
        /// </summary>
        [Input("volumeType")]
        public string? VolumeType { get; set; }

        /// <summary>
        /// The Id of Zone.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public VolumesArgs()
        {
        }
        public static new VolumesArgs Empty => new VolumesArgs();
    }

    public sealed class VolumesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of Volume IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// The Id of instance.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The Kind of Volume.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// A Name Regex of Volume.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        [Input("tags")]
        private InputList<Inputs.VolumesTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.VolumesTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VolumesTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of Volume.
        /// </summary>
        [Input("volumeName")]
        public Input<string>? VolumeName { get; set; }

        /// <summary>
        /// The Status of Volume, the value can be `available` or `attaching` or `attached` or `detaching` or `creating` or `deleting` or `error` or `extending`.
        /// </summary>
        [Input("volumeStatus")]
        public Input<string>? VolumeStatus { get; set; }

        /// <summary>
        /// The type of Volume.
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        /// <summary>
        /// The Id of Zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public VolumesInvokeArgs()
        {
        }
        public static new VolumesInvokeArgs Empty => new VolumesInvokeArgs();
    }


    [OutputType]
    public sealed class VolumesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? InstanceId;
        public readonly string? Kind;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.VolumesTagResult> Tags;
        /// <summary>
        /// The total count of Volume query.
        /// </summary>
        public readonly int TotalCount;
        public readonly string? VolumeName;
        public readonly string? VolumeStatus;
        public readonly string? VolumeType;
        /// <summary>
        /// The collection of Volume query.
        /// </summary>
        public readonly ImmutableArray<Outputs.VolumesVolumeResult> Volumes;
        public readonly string? ZoneId;

        [OutputConstructor]
        private VolumesResult(
            string id,

            ImmutableArray<string> ids,

            string? instanceId,

            string? kind,

            string? nameRegex,

            string? outputFile,

            ImmutableArray<Outputs.VolumesTagResult> tags,

            int totalCount,

            string? volumeName,

            string? volumeStatus,

            string? volumeType,

            ImmutableArray<Outputs.VolumesVolumeResult> volumes,

            string? zoneId)
        {
            Id = id;
            Ids = ids;
            InstanceId = instanceId;
            Kind = kind;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            Tags = tags;
            TotalCount = totalCount;
            VolumeName = volumeName;
            VolumeStatus = volumeStatus;
            VolumeType = volumeType;
            Volumes = volumes;
            ZoneId = zoneId;
        }
    }
}
