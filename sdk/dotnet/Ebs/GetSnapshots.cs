// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ebs
{
    public static class GetSnapshots
    {
        /// <summary>
        /// Use this data source to query detailed information of ebs snapshots
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVolume = new Volcengine.Ebs.Volume("fooVolume", new()
        ///     {
        ///         VolumeName = "acc-test-volume",
        ///         VolumeType = "ESSD_PL0",
        ///         Description = "acc-test",
        ///         Kind = "data",
        ///         Size = 500,
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VolumeChargeType = "PostPaid",
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooSnapshot = new List&lt;Volcengine.Ebs.Snapshot&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooSnapshot.Add(new Volcengine.Ebs.Snapshot($"fooSnapshot-{range.Value}", new()
        ///         {
        ///             VolumeId = fooVolume.Id,
        ///             SnapshotName = "acc-test-snapshot",
        ///             Description = "acc-test",
        ///             RetentionDays = 3,
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Ebs.Inputs.SnapshotTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooSnapshots = Volcengine.Ebs.GetSnapshots.Invoke(new()
        ///     {
        ///         Ids = fooSnapshot.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetSnapshotsResult> InvokeAsync(GetSnapshotsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnapshotsResult>("volcengine:ebs/getSnapshots:getSnapshots", args ?? new GetSnapshotsArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to query detailed information of ebs snapshots
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Volcengine = Pulumi.Volcengine;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var fooZones = Volcengine.Ecs.GetZones.Invoke();
        /// 
        ///     var fooVolume = new Volcengine.Ebs.Volume("fooVolume", new()
        ///     {
        ///         VolumeName = "acc-test-volume",
        ///         VolumeType = "ESSD_PL0",
        ///         Description = "acc-test",
        ///         Kind = "data",
        ///         Size = 500,
        ///         ZoneId = fooZones.Apply(getZonesResult =&gt; getZonesResult.Zones[0]?.Id),
        ///         VolumeChargeType = "PostPaid",
        ///         ProjectName = "default",
        ///     });
        /// 
        ///     var fooSnapshot = new List&lt;Volcengine.Ebs.Snapshot&gt;();
        ///     for (var rangeIndex = 0; rangeIndex &lt; 2; rangeIndex++)
        ///     {
        ///         var range = new { Value = rangeIndex };
        ///         fooSnapshot.Add(new Volcengine.Ebs.Snapshot($"fooSnapshot-{range.Value}", new()
        ///         {
        ///             VolumeId = fooVolume.Id,
        ///             SnapshotName = "acc-test-snapshot",
        ///             Description = "acc-test",
        ///             RetentionDays = 3,
        ///             ProjectName = "default",
        ///             Tags = new[]
        ///             {
        ///                 new Volcengine.Ebs.Inputs.SnapshotTagArgs
        ///                 {
        ///                     Key = "k1",
        ///                     Value = "v1",
        ///                 },
        ///             },
        ///         }));
        ///     }
        ///     var fooSnapshots = Volcengine.Ebs.GetSnapshots.Invoke(new()
        ///     {
        ///         Ids = fooSnapshot.Select(__item =&gt; __item.Id).ToList(),
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetSnapshotsResult> Invoke(GetSnapshotsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnapshotsResult>("volcengine:ebs/getSnapshots:getSnapshots", args ?? new GetSnapshotsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnapshotsArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private List<string>? _ids;

        /// <summary>
        /// A list of snapshot IDs.
        /// </summary>
        public List<string> Ids
        {
            get => _ids ?? (_ids = new List<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public string? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public string? OutputFile { get; set; }

        /// <summary>
        /// The project name of snapshot.
        /// </summary>
        [Input("projectName")]
        public string? ProjectName { get; set; }

        [Input("snapshotStatuses")]
        private List<string>? _snapshotStatuses;

        /// <summary>
        /// A list of snapshot status.
        /// </summary>
        public List<string> SnapshotStatuses
        {
            get => _snapshotStatuses ?? (_snapshotStatuses = new List<string>());
            set => _snapshotStatuses = value;
        }

        [Input("tags")]
        private List<Inputs.GetSnapshotsTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public List<Inputs.GetSnapshotsTagArgs> Tags
        {
            get => _tags ?? (_tags = new List<Inputs.GetSnapshotsTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The zone id of snapshot.
        /// </summary>
        [Input("zoneId")]
        public string? ZoneId { get; set; }

        public GetSnapshotsArgs()
        {
        }
        public static new GetSnapshotsArgs Empty => new GetSnapshotsArgs();
    }

    public sealed class GetSnapshotsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("ids")]
        private InputList<string>? _ids;

        /// <summary>
        /// A list of snapshot IDs.
        /// </summary>
        public InputList<string> Ids
        {
            get => _ids ?? (_ids = new InputList<string>());
            set => _ids = value;
        }

        /// <summary>
        /// A Name Regex of Resource.
        /// </summary>
        [Input("nameRegex")]
        public Input<string>? NameRegex { get; set; }

        /// <summary>
        /// File name where to save data source results.
        /// </summary>
        [Input("outputFile")]
        public Input<string>? OutputFile { get; set; }

        /// <summary>
        /// The project name of snapshot.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("snapshotStatuses")]
        private InputList<string>? _snapshotStatuses;

        /// <summary>
        /// A list of snapshot status.
        /// </summary>
        public InputList<string> SnapshotStatuses
        {
            get => _snapshotStatuses ?? (_snapshotStatuses = new InputList<string>());
            set => _snapshotStatuses = value;
        }

        [Input("tags")]
        private InputList<Inputs.GetSnapshotsTagInputArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.GetSnapshotsTagInputArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.GetSnapshotsTagInputArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The zone id of snapshot.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public GetSnapshotsInvokeArgs()
        {
        }
        public static new GetSnapshotsInvokeArgs Empty => new GetSnapshotsInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnapshotsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<string> Ids;
        public readonly string? NameRegex;
        public readonly string? OutputFile;
        /// <summary>
        /// The project name of the snapshot.
        /// </summary>
        public readonly string? ProjectName;
        public readonly ImmutableArray<string> SnapshotStatuses;
        /// <summary>
        /// The collection of query.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSnapshotsSnapshotResult> Snapshots;
        /// <summary>
        /// Tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSnapshotsTagResult> Tags;
        /// <summary>
        /// The total count of query.
        /// </summary>
        public readonly int TotalCount;
        /// <summary>
        /// The zone id of the snapshot.
        /// </summary>
        public readonly string? ZoneId;

        [OutputConstructor]
        private GetSnapshotsResult(
            string id,

            ImmutableArray<string> ids,

            string? nameRegex,

            string? outputFile,

            string? projectName,

            ImmutableArray<string> snapshotStatuses,

            ImmutableArray<Outputs.GetSnapshotsSnapshotResult> snapshots,

            ImmutableArray<Outputs.GetSnapshotsTagResult> tags,

            int totalCount,

            string? zoneId)
        {
            Id = id;
            Ids = ids;
            NameRegex = nameRegex;
            OutputFile = outputFile;
            ProjectName = projectName;
            SnapshotStatuses = snapshotStatuses;
            Snapshots = snapshots;
            Tags = tags;
            TotalCount = totalCount;
            ZoneId = zoneId;
        }
    }
}
