// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ebs
{
    /// <summary>
    /// Provides a resource to manage ebs snapshot group
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
    ///     {
    ///         SecurityGroupName = "acc-test-security-group",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooImages = Volcengine.Ecs.Images.Invoke(new()
    ///     {
    ///         OsType = "Linux",
    ///         Visibility = "public",
    ///         InstanceTypeId = "ecs.g3il.large",
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
    ///     {
    ///         InstanceName = "acc-test-ecs",
    ///         Description = "acc-test",
    ///         HostName = "tf-acc-test",
    ///         ImageId = fooImages.Apply(imagesResult =&gt; imagesResult.Images[0]?.ImageId),
    ///         InstanceType = "ecs.g3il.large",
    ///         Password = "93f0cb0614Aab12",
    ///         InstanceChargeType = "PostPaid",
    ///         SystemVolumeType = "ESSD_PL0",
    ///         SystemVolumeSize = 40,
    ///         SubnetId = fooSubnet.Id,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             fooSecurityGroup.Id,
    ///         },
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Ecs.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var fooVolume = new Volcengine.Ebs.Volume("fooVolume", new()
    ///     {
    ///         VolumeName = "acc-test-volume",
    ///         VolumeType = "ESSD_PL0",
    ///         Description = "acc-test",
    ///         Kind = "data",
    ///         Size = 500,
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VolumeChargeType = "PostPaid",
    ///         ProjectName = "default",
    ///     });
    /// 
    ///     var fooVolumeAttach = new Volcengine.Ebs.VolumeAttach("fooVolumeAttach", new()
    ///     {
    ///         InstanceId = fooInstance.Id,
    ///         VolumeId = fooVolume.Id,
    ///     });
    /// 
    ///     var fooSnapshotGroup = new Volcengine.Ebs.SnapshotGroup("fooSnapshotGroup", new()
    ///     {
    ///         VolumeIds = new[]
    ///         {
    ///             fooInstance.SystemVolumeId,
    ///             fooVolume.Id,
    ///         },
    ///         InstanceId = fooInstance.Id,
    ///         Description = "acc-test",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Ebs.Inputs.SnapshotGroupTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             fooVolumeAttach,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// EbsSnapshotGroup can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:ebs/snapshotGroup:SnapshotGroup default resource_id
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:ebs/snapshotGroup:SnapshotGroup")]
    public partial class SnapshotGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The creation time of the snapshot group.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// The instance id of the snapshot group.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The image id of the snapshot group.
        /// </summary>
        [Output("imageId")]
        public Output<string> ImageId { get; private set; } = null!;

        /// <summary>
        /// The instance id of the snapshot group.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The name of the snapshot group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The project name of the snapshot group.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The status of the snapshot group.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.SnapshotGroupTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// The volume id of the snapshot group. The status of the volume must be `attached`.If multiple volumes are specified, they need to be attached to the same ECS instance.
        /// </summary>
        [Output("volumeIds")]
        public Output<ImmutableArray<string>> VolumeIds { get; private set; } = null!;


        /// <summary>
        /// Create a SnapshotGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SnapshotGroup(string name, SnapshotGroupArgs args, CustomResourceOptions? options = null)
            : base("volcengine:ebs/snapshotGroup:SnapshotGroup", name, args ?? new SnapshotGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SnapshotGroup(string name, Input<string> id, SnapshotGroupState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:ebs/snapshotGroup:SnapshotGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SnapshotGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SnapshotGroup Get(string name, Input<string> id, SnapshotGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new SnapshotGroup(name, id, state, options);
        }
    }

    public sealed class SnapshotGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The instance id of the snapshot group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The instance id of the snapshot group.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of the snapshot group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The project name of the snapshot group.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        [Input("tags")]
        private InputList<Inputs.SnapshotGroupTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.SnapshotGroupTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SnapshotGroupTagArgs>());
            set => _tags = value;
        }

        [Input("volumeIds", required: true)]
        private InputList<string>? _volumeIds;

        /// <summary>
        /// The volume id of the snapshot group. The status of the volume must be `attached`.If multiple volumes are specified, they need to be attached to the same ECS instance.
        /// </summary>
        public InputList<string> VolumeIds
        {
            get => _volumeIds ?? (_volumeIds = new InputList<string>());
            set => _volumeIds = value;
        }

        public SnapshotGroupArgs()
        {
        }
        public static new SnapshotGroupArgs Empty => new SnapshotGroupArgs();
    }

    public sealed class SnapshotGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The creation time of the snapshot group.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        /// <summary>
        /// The instance id of the snapshot group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The image id of the snapshot group.
        /// </summary>
        [Input("imageId")]
        public Input<string>? ImageId { get; set; }

        /// <summary>
        /// The instance id of the snapshot group.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The name of the snapshot group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The project name of the snapshot group.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The status of the snapshot group.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.SnapshotGroupTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.SnapshotGroupTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.SnapshotGroupTagGetArgs>());
            set => _tags = value;
        }

        [Input("volumeIds")]
        private InputList<string>? _volumeIds;

        /// <summary>
        /// The volume id of the snapshot group. The status of the volume must be `attached`.If multiple volumes are specified, they need to be attached to the same ECS instance.
        /// </summary>
        public InputList<string> VolumeIds
        {
            get => _volumeIds ?? (_volumeIds = new InputList<string>());
            set => _volumeIds = value;
        }

        public SnapshotGroupState()
        {
        }
        public static new SnapshotGroupState Empty => new SnapshotGroupState();
    }
}
