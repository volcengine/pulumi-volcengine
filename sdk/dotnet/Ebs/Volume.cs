// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Volcengine.Ebs
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Volcengine = Pulumi.Volcengine;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var fooZones = Volcengine.Ecs.Zones.Invoke();
    /// 
    ///     var fooVpc = new Volcengine.Vpc.Vpc("fooVpc", new()
    ///     {
    ///         VpcName = "acc-test-vpc",
    ///         CidrBlock = "172.16.0.0/16",
    ///     });
    /// 
    ///     var fooSubnet = new Volcengine.Vpc.Subnet("fooSubnet", new()
    ///     {
    ///         SubnetName = "acc-test-subnet",
    ///         CidrBlock = "172.16.0.0/24",
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooSecurityGroup = new Volcengine.Vpc.SecurityGroup("fooSecurityGroup", new()
    ///     {
    ///         SecurityGroupName = "acc-test-security-group",
    ///         VpcId = fooVpc.Id,
    ///     });
    /// 
    ///     var fooImages = Volcengine.Ecs.Images.Invoke(new()
    ///     {
    ///         OsType = "Linux",
    ///         Visibility = "public",
    ///         InstanceTypeId = "ecs.g1.large",
    ///     });
    /// 
    ///     var fooInstance = new Volcengine.Ecs.Instance("fooInstance", new()
    ///     {
    ///         InstanceName = "acc-test-ecs",
    ///         Description = "acc-test",
    ///         HostName = "tf-acc-test",
    ///         ImageId = fooImages.Apply(imagesResult =&gt; imagesResult.Images[0]?.ImageId),
    ///         InstanceType = "ecs.g1.large",
    ///         Password = "93f0cb0614Aab12",
    ///         InstanceChargeType = "PrePaid",
    ///         Period = 1,
    ///         SystemVolumeType = "ESSD_PL0",
    ///         SystemVolumeSize = 40,
    ///         SubnetId = fooSubnet.Id,
    ///         SecurityGroupIds = new[]
    ///         {
    ///             fooSecurityGroup.Id,
    ///         },
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Ecs.Inputs.InstanceTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var preVolume = new Volcengine.Ebs.Volume("preVolume", new()
    ///     {
    ///         VolumeName = "acc-test-volume",
    ///         VolumeType = "ESSD_PL0",
    ///         Description = "acc-test",
    ///         Kind = "data",
    ///         Size = 40,
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VolumeChargeType = "PrePaid",
    ///         InstanceId = fooInstance.Id,
    ///         ProjectName = "default",
    ///         DeleteWithInstance = true,
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Ebs.Inputs.VolumeTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    ///     var postVolume = new Volcengine.Ebs.Volume("postVolume", new()
    ///     {
    ///         VolumeName = "acc-test-volume",
    ///         VolumeType = "ESSD_PL0",
    ///         Description = "acc-test",
    ///         Kind = "data",
    ///         Size = 40,
    ///         ZoneId = fooZones.Apply(zonesResult =&gt; zonesResult.Zones[0]?.Id),
    ///         VolumeChargeType = "PostPaid",
    ///         ProjectName = "default",
    ///         Tags = new[]
    ///         {
    ///             new Volcengine.Ebs.Inputs.VolumeTagArgs
    ///             {
    ///                 Key = "k1",
    ///                 Value = "v1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Volume can be imported using the id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import volcengine:ebs/volume:Volume default vol-mizl7m1kqccg5smt1bdpijuj
    /// ```
    /// </summary>
    [VolcengineResourceType("volcengine:ebs/volume:Volume")]
    public partial class Volume : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation time of Volume.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Delete Volume with Attached Instance.
        /// </summary>
        [Output("deleteWithInstance")]
        public Output<bool> DeleteWithInstance { get; private set; } = null!;

        /// <summary>
        /// The description of the Volume.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The extra IOPS performance size for volume. Unit: times per second. The valid values for `Balance` and `IOPS` is 0~50000.
        /// </summary>
        [Output("extraPerformanceIops")]
        public Output<int> ExtraPerformanceIops { get; private set; } = null!;

        /// <summary>
        /// The extra Throughput performance size for volume. Unit: MB/s. The valid values for ESSD FlexPL volume is 0~650.
        /// </summary>
        [Output("extraPerformanceThroughputMb")]
        public Output<int> ExtraPerformanceThroughputMb { get; private set; } = null!;

        /// <summary>
        /// The type of extra performance for volume. The valid values for ESSD FlexPL volume are `Throughput`, `Balance`, `IOPS`. The valid value for TSSD_TL0 volume is `Throughput`.
        /// </summary>
        [Output("extraPerformanceTypeId")]
        public Output<string?> ExtraPerformanceTypeId { get; private set; } = null!;

        /// <summary>
        /// The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the
        /// system administrator to apply for a whitelist. When use this field to attach ecs instance, the attached volume cannot be
        /// deleted by terraform, please use `terraform state rm volcengine_volume.resource_name` command to remove it from
        /// terraform state file and management.
        /// </summary>
        [Output("instanceId")]
        public Output<string> InstanceId { get; private set; } = null!;

        /// <summary>
        /// The kind of Volume, the value is `data`.
        /// </summary>
        [Output("kind")]
        public Output<string> Kind { get; private set; } = null!;

        /// <summary>
        /// The ProjectName of the Volume.
        /// </summary>
        [Output("projectName")]
        public Output<string> ProjectName { get; private set; } = null!;

        /// <summary>
        /// The size of Volume.
        /// </summary>
        [Output("size")]
        public Output<int> Size { get; private set; } = null!;

        /// <summary>
        /// Status of Volume.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.VolumeTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Status of Trade.
        /// </summary>
        [Output("tradeStatus")]
        public Output<int> TradeStatus { get; private set; } = null!;

        /// <summary>
        /// The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.
        /// </summary>
        [Output("volumeChargeType")]
        public Output<string?> VolumeChargeType { get; private set; } = null!;

        /// <summary>
        /// The name of Volume.
        /// </summary>
        [Output("volumeName")]
        public Output<string> VolumeName { get; private set; } = null!;

        /// <summary>
        /// The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
        /// </summary>
        [Output("volumeType")]
        public Output<string> VolumeType { get; private set; } = null!;

        /// <summary>
        /// The id of the Zone.
        /// </summary>
        [Output("zoneId")]
        public Output<string> ZoneId { get; private set; } = null!;


        /// <summary>
        /// Create a Volume resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Volume(string name, VolumeArgs args, CustomResourceOptions? options = null)
            : base("volcengine:ebs/volume:Volume", name, args ?? new VolumeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Volume(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
            : base("volcengine:ebs/volume:Volume", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/volcengine",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Volume resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Volume Get(string name, Input<string> id, VolumeState? state = null, CustomResourceOptions? options = null)
        {
            return new Volume(name, id, state, options);
        }
    }

    public sealed class VolumeArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Delete Volume with Attached Instance.
        /// </summary>
        [Input("deleteWithInstance")]
        public Input<bool>? DeleteWithInstance { get; set; }

        /// <summary>
        /// The description of the Volume.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The extra IOPS performance size for volume. Unit: times per second. The valid values for `Balance` and `IOPS` is 0~50000.
        /// </summary>
        [Input("extraPerformanceIops")]
        public Input<int>? ExtraPerformanceIops { get; set; }

        /// <summary>
        /// The extra Throughput performance size for volume. Unit: MB/s. The valid values for ESSD FlexPL volume is 0~650.
        /// </summary>
        [Input("extraPerformanceThroughputMb")]
        public Input<int>? ExtraPerformanceThroughputMb { get; set; }

        /// <summary>
        /// The type of extra performance for volume. The valid values for ESSD FlexPL volume are `Throughput`, `Balance`, `IOPS`. The valid value for TSSD_TL0 volume is `Throughput`.
        /// </summary>
        [Input("extraPerformanceTypeId")]
        public Input<string>? ExtraPerformanceTypeId { get; set; }

        /// <summary>
        /// The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the
        /// system administrator to apply for a whitelist. When use this field to attach ecs instance, the attached volume cannot be
        /// deleted by terraform, please use `terraform state rm volcengine_volume.resource_name` command to remove it from
        /// terraform state file and management.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The kind of Volume, the value is `data`.
        /// </summary>
        [Input("kind", required: true)]
        public Input<string> Kind { get; set; } = null!;

        /// <summary>
        /// The ProjectName of the Volume.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The size of Volume.
        /// </summary>
        [Input("size", required: true)]
        public Input<int> Size { get; set; } = null!;

        [Input("tags")]
        private InputList<Inputs.VolumeTagArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.VolumeTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VolumeTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.
        /// </summary>
        [Input("volumeChargeType")]
        public Input<string>? VolumeChargeType { get; set; }

        /// <summary>
        /// The name of Volume.
        /// </summary>
        [Input("volumeName", required: true)]
        public Input<string> VolumeName { get; set; } = null!;

        /// <summary>
        /// The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
        /// </summary>
        [Input("volumeType", required: true)]
        public Input<string> VolumeType { get; set; } = null!;

        /// <summary>
        /// The id of the Zone.
        /// </summary>
        [Input("zoneId", required: true)]
        public Input<string> ZoneId { get; set; } = null!;

        public VolumeArgs()
        {
        }
        public static new VolumeArgs Empty => new VolumeArgs();
    }

    public sealed class VolumeState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation time of Volume.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Delete Volume with Attached Instance.
        /// </summary>
        [Input("deleteWithInstance")]
        public Input<bool>? DeleteWithInstance { get; set; }

        /// <summary>
        /// The description of the Volume.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The extra IOPS performance size for volume. Unit: times per second. The valid values for `Balance` and `IOPS` is 0~50000.
        /// </summary>
        [Input("extraPerformanceIops")]
        public Input<int>? ExtraPerformanceIops { get; set; }

        /// <summary>
        /// The extra Throughput performance size for volume. Unit: MB/s. The valid values for ESSD FlexPL volume is 0~650.
        /// </summary>
        [Input("extraPerformanceThroughputMb")]
        public Input<int>? ExtraPerformanceThroughputMb { get; set; }

        /// <summary>
        /// The type of extra performance for volume. The valid values for ESSD FlexPL volume are `Throughput`, `Balance`, `IOPS`. The valid value for TSSD_TL0 volume is `Throughput`.
        /// </summary>
        [Input("extraPerformanceTypeId")]
        public Input<string>? ExtraPerformanceTypeId { get; set; }

        /// <summary>
        /// The ID of the instance to which the created volume is automatically attached. Please note this field needs to ask the
        /// system administrator to apply for a whitelist. When use this field to attach ecs instance, the attached volume cannot be
        /// deleted by terraform, please use `terraform state rm volcengine_volume.resource_name` command to remove it from
        /// terraform state file and management.
        /// </summary>
        [Input("instanceId")]
        public Input<string>? InstanceId { get; set; }

        /// <summary>
        /// The kind of Volume, the value is `data`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The ProjectName of the Volume.
        /// </summary>
        [Input("projectName")]
        public Input<string>? ProjectName { get; set; }

        /// <summary>
        /// The size of Volume.
        /// </summary>
        [Input("size")]
        public Input<int>? Size { get; set; }

        /// <summary>
        /// Status of Volume.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("tags")]
        private InputList<Inputs.VolumeTagGetArgs>? _tags;

        /// <summary>
        /// Tags.
        /// </summary>
        public InputList<Inputs.VolumeTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.VolumeTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Status of Trade.
        /// </summary>
        [Input("tradeStatus")]
        public Input<int>? TradeStatus { get; set; }

        /// <summary>
        /// The charge type of the Volume, the value is `PostPaid` or `PrePaid`. The `PrePaid` volume cannot be detached. Please note that `PrePaid` type needs to ask the system administrator to apply for a whitelist.
        /// </summary>
        [Input("volumeChargeType")]
        public Input<string>? VolumeChargeType { get; set; }

        /// <summary>
        /// The name of Volume.
        /// </summary>
        [Input("volumeName")]
        public Input<string>? VolumeName { get; set; }

        /// <summary>
        /// The type of Volume, the value is `PTSSD` or `ESSD_PL0` or `ESSD_PL1` or `ESSD_PL2` or `ESSD_FlexPL`.
        /// </summary>
        [Input("volumeType")]
        public Input<string>? VolumeType { get; set; }

        /// <summary>
        /// The id of the Zone.
        /// </summary>
        [Input("zoneId")]
        public Input<string>? ZoneId { get; set; }

        public VolumeState()
        {
        }
        public static new VolumeState Empty => new VolumeState();
    }
}
